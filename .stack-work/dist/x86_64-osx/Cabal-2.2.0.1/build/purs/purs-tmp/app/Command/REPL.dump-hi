
==================== FINAL INTERFACE ====================
2018-11-30 20:48:48.389934 UTC

interface main:Command.REPL 8043
  interface hash: b361fea260658c28139d43f7421b6761
  ABI hash: f736c2f36529639fa6c65113ea4e9705
  export-list hash: b6a464b9562bb7685cc9349be5fdd5e0
  orphan hash: e613188a985a27c850d06b9fb04edbfb
  flag hash: 2cb39d0e9fe4cc2ac2c2d7995e05d538
  opt_hash: 2c98c95d41c045ae9c2fb565ec8aabc6
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: True
  where
exports:
  Command.REPL.command
module dependencies:
package dependencies: Glob-0.9.2 SHA-1.6.4.4 aeson-1.3.1.1
                      aeson-better-errors-0.9.1.0 ansi-terminal-0.8.0.4
                      ansi-wl-pprint-0.6.8.2 appar-0.1.4 array-0.5.2.0 async-2.2.1
                      attoparsec-0.13.2.2 auto-update-0.1.4 base-4.11.1.0
                      base-compat-0.10.4 base64-bytestring-1.0.0.1 binary-0.8.5.1
                      blaze-builder-0.4.1.0 boxes-0.1.5 bsb-http-chunked-0.0.0.2
                      byteorder-1.0.4 bytestring-0.10.8.2 case-insensitive-1.2.0.11
                      colour-2.3.4 containers-0.5.11.0 data-ordlist-0.4.7.0
                      deepseq-1.4.3.0 directory-1.3.1.5 dlist-0.8.0.4 entropy-0.4.1.1
                      file-embed-0.0.10.1 filepath-1.4.2 ghc-boot-th-8.4.3
                      ghc-prim-0.5.2.0 hashable-1.2.7.0 haskeline-0.7.4.3 http-date-0.0.7
                      http-types-0.12.1 http2-1.6.3 integer-gmp-1.0.2.0
                      integer-logarithms-1.0.2.1 iproute-1.7.5
                      language-javascript-0.6.0.11 lifted-base-0.2.3.12 microlens-0.4.9.1
                      microlens-ghc-0.4.9 microlens-mtl-0.1.11.1
                      microlens-platform-0.3.10 microlens-th-0.4.2.1
                      monad-control-1.0.2.3 mtl-2.2.2 network-2.6.3.6
                      optparse-applicative-0.14.2.0 parallel-3.2.1.1 parsec-3.1.13.0
                      pattern-arrows-0.0.2 pretty-1.1.3.6 primitive-0.6.3.0
                      process-1.6.3.0 protolude-0.2.2 psqueues-0.2.7.0 purescript-0.12.1
                      random-1.1 safe-0.3.17 scientific-0.3.6.2 simple-sendfile-0.2.27
                      sourcemap-0.1.6 split-0.2.3.3 stm-2.4.5.0 streaming-commons-0.2.1.0
                      stringsearch-0.3.6.6 syb-0.7 tagged-0.8.5 template-haskell-2.13.0.0
                      terminfo-0.4.1.1 text-1.2.3.0 th-abstraction-0.2.8.0 time-1.8.0.2
                      time-locale-compat-0.1.1.4 transformers-0.5.5.0
                      transformers-base-0.4.5.2 unix-2.7.2.2 unix-compat-0.5.0.1
                      unordered-containers-0.2.9.0 utf8-string-1.0.1.1 uuid-types-1.0.3
                      vault-0.3.1.1 vector-0.12.0.1 wai-3.2.1.2 wai-websockets-3.0.1.2
                      warp-3.2.22 websockets-0.12.5.1 word8-0.1.3 zlib-0.6.2
orphans: microlens-platform-0.3.10:Lens.Micro.Platform
         microlens-ghc-0.4.9:Lens.Micro.GHC syb-0.7:Data.Generics.Instances
         attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         vector-0.12.0.1:Data.Vector.Unboxed
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         network-2.6.3.6:Network.Socket
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.0:Data.Text.Lazy
         colour-2.3.4:Data.Colour stm-2.4.5.0:Control.Monad.STM
         transformers-0.5.5.0:Control.Monad.Trans.Error
         text-1.2.3.0:Data.Text binary-0.8.5.1:Data.Binary.Generic
         text-1.2.3.0:Data.Text.Show
         bytestring-0.10.8.2:Data.ByteString.Builder
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: aeson-1.3.1.1:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.Graph
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         dlist-0.8.0.4:Data.DList ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         iproute-1.7.5:Data.IP.Addr iproute-1.7.5:Data.IP.Range
                         microlens-0.4.9.1:Lens.Micro.Internal
                         microlens-ghc-0.4.9:Lens.Micro.GHC
                         microlens-mtl-0.1.11.1:Lens.Micro.Mtl.Internal
                         microlens-platform-0.3.10:Lens.Micro.Platform
                         monad-control-1.0.2.3:Control.Monad.Trans.Control
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         purescript-0.12.1:Control.Monad.Logger
                         purescript-0.12.1:Language.PureScript.AST.Declarations
                         purescript-0.12.1:Language.PureScript.AST.Operators
                         purescript-0.12.1:Language.PureScript.AST.SourcePos
                         purescript-0.12.1:Language.PureScript.Environment
                         purescript-0.12.1:Language.PureScript.Kinds
                         purescript-0.12.1:Language.PureScript.Label
                         purescript-0.12.1:Language.PureScript.Make.Monad
                         purescript-0.12.1:Language.PureScript.Names
                         purescript-0.12.1:Language.PureScript.PSString
                         purescript-0.12.1:Language.PureScript.TypeClassDictionaries
                         purescript-0.12.1:Language.PureScript.Types
                         tagged-0.8.5:Data.Tagged
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
                         th-abstraction-0.2.8.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
                         zlib-0.6.2:Codec.Compression.Zlib.Stream
import  -/  Glob-0.9.2:System.FilePath.Glob 8625fdb96b8fcebd81114734e6844e2a
import  -/  Glob-0.9.2:System.FilePath.Glob.Directory d42249ffcaa5351009a12b5db988f46f
import  -/  base-4.11.1.0:Control.Applicative 55d9b3a7491623b0362290e162d67308
import  -/  base-4.11.1.0:Control.Concurrent ef40f102578b6e7296c2a2358b631ee7
import  -/  base-4.11.1.0:Control.Concurrent.MVar ca4c584bd9db3afcc6677dea708f87d7
import  -/  base-4.11.1.0:Control.Exception 3d8e6cda20877f889f07bc7c0f5cac36
import  -/  base-4.11.1.0:Control.Monad c5f960c67d822497578bffbd3e4c01cf
import  -/  base-4.11.1.0:Control.Monad.IO.Class 96109c36cb3c919872278540487fa39e
import  -/  base-4.11.1.0:Data.Either 39d922b371c4c52d426e9ee66de8371a
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.Functor f522c3501272159820fd6f242510732f
import  -/  base-4.11.1.0:Data.Maybe 409c3da2b142470b68be39ce1d97a9f7
import  -/  base-4.11.1.0:Data.OldList 1b35aa3c6805ff7c8887a35a866fe006
import  -/  base-4.11.1.0:Data.String 1b97cff5f9627e73898d75997a9ccf7f
import  -/  base-4.11.1.0:Data.Traversable 7ad4edb9184ea1ae8e73f6b94f115c8c
import  -/  base-4.11.1.0:Data.Tuple 3af66f3ac61ed95ba8a3a3f68ebc5003
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Conc.Sync 0f06fc4d7792ea35160385e7175366ba
import  -/  base-4.11.1.0:GHC.Exception e1b7fe1dbd1d0e3fb049e1163c71a5e8
import  -/  base-4.11.1.0:GHC.IO 1d5542cc02075c5e948018bfacea89c1
import  -/  base-4.11.1.0:GHC.IO.Exception acc060dca2e46d8b8275d06ee7d5d60d
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.MVar 5887537e57bb20af86721190334ddceb
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  base-4.11.1.0:System.Exit a7af6f90beaa15182d3a20667d878df0
import  -/  base-4.11.1.0:System.IO ce09fff7d191d14067bddc2efd9b53a4
import  -/  base-compat-0.10.4:Prelude.Compat bb6796186ed35a1d09dc34362a3fc27e
import  -/  directory-1.3.1.5:System.Directory bc76216f25ffcaf1c91b529f41ea3bf7
import  -/  directory-1.3.1.5:System.Directory.Internal.Common 88eeec2dd4e3d7d63bc24c2d657e6981
import  -/  file-embed-0.0.10.1:Data.FileEmbed c32791251d511720ae04af8195dacd86
import  -/  filepath-1.4.2:System.FilePath a538d436328dd004b88f7d29a8b244c0
import  -/  filepath-1.4.2:System.FilePath.Posix c021b7a40cfcdd9b08724b5bb7566b59
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  haskeline-0.7.4.3:System.Console.Haskeline c3a206239edcfaa31c60fa8750a015f7
import  -/  haskeline-0.7.4.3:System.Console.Haskeline.InputT 7459ee4aa93c06053f7b4b9409539a2f
import  -/  haskeline-0.7.4.3:System.Console.Haskeline.MonadException 0f236ab9c35f70f930d5cec7588b1d1b
import  -/  http-types-0.12.1:Network.HTTP.Types.Header c68684bc9e7fc34c2f7c9eba88e9ba85
import  -/  http-types-0.12.1:Network.HTTP.Types.Status 3d744f27e196471da5a31736763d7490
import  -/  optparse-applicative-0.14.2.0:Options.Applicative d95e0b32490502bba50f41d6948c00e0
import  -/  optparse-applicative-0.14.2.0:Options.Applicative.Builder c6546faa9e09bef2ac2df9eff4a77f61
import  -/  optparse-applicative-0.14.2.0:Options.Applicative.Extra b48c7bfd920b8a9e933e034981589447
import  -/  optparse-applicative-0.14.2.0:Options.Applicative.Types 7d35983d2990cf2ee861dc28ddfea4a2
import  -/  process-1.6.3.0:System.Process 17a215e760465e01e09a5bb6ca1a6adb
import  -/  purescript-0.12.1:Language.PureScript 055283757289375c92e0f1e11d744c0e
import  -/  purescript-0.12.1:Language.PureScript.Bundle 850a0b3ac8794bcad3be1a1d23d53dc5
import  -/  purescript-0.12.1:Language.PureScript.Errors 15d6eb6b2d4d480750061a0585d4e64c
import  -/  purescript-0.12.1:Language.PureScript.Interactive a12ce7755fdd70b3d810ee8036fc44b7
import  -/  purescript-0.12.1:Language.PureScript.Interactive.Completion 524618b1515a6d351aa35c62eb5d336b
import  -/  purescript-0.12.1:Language.PureScript.Interactive.IO b1c5ce61acd8876be2ed86384ba77724
import  -/  purescript-0.12.1:Language.PureScript.Interactive.Message af2718e22728b0bf0a7787c91ae938ac
import  -/  purescript-0.12.1:Language.PureScript.Interactive.Module 38e4acf60ad7ffa304419054a4739f7c
import  -/  purescript-0.12.1:Language.PureScript.Interactive.Parser a1989291f0edce9f5b478ca4fc52115f
import  -/  purescript-0.12.1:Language.PureScript.Interactive.Types 3ce82c8ef1b298c922daa3739e0e39a4
import  -/  purescript-0.12.1:System.IO.UTF8 750082717040f0844ba6a864b87f2d07
import  -/  stm-2.4.5.0:Control.Concurrent.STM 5ec97830246fb15a85b4d8cd8209f698
import  -/  stm-2.4.5.0:Control.Concurrent.STM.TChan bc06e37687820dcec2116652c410490d
import  -/  text-1.2.3.0:Data.Text 7daa7e6c9b39d8cc1679e5ec5c64d2be
import  -/  text-1.2.3.0:Data.Text.Internal 30a0a123f71f63b26cd34c6b24f23411
import  -/  text-1.2.3.0:Data.Text.Show 3b4b6fb2985a731022d67f636682da2b
import  -/  transformers-0.5.5.0:Control.Monad.Trans.Class 352c7bdb1604d64f8f438c96bf57066a
import  -/  transformers-0.5.5.0:Control.Monad.Trans.Except 1cac4acbba7f36bd732fcc993d3cc20d
import  -/  transformers-0.5.5.0:Control.Monad.Trans.Reader 42962052353a5a0f766912058b765b5d
import  -/  transformers-0.5.5.0:Control.Monad.Trans.State.Strict 04b71a3f25b12af5c8b92a12d96be4c4
import  -/  utf8-string-1.0.1.1:Data.ByteString.Lazy.UTF8 90be7ca8da23b0b606aeffbca3d1d3af
import  -/  wai-3.2.1.2:Network.Wai c09fba2576508b4309728a992df4b929
import  -/  wai-3.2.1.2:Network.Wai.Internal de5e12a2522f98ab5cbd6159fa4b1af9
import  -/  wai-websockets-3.0.1.2:Network.Wai.Handler.WebSockets a18a9927b5173fab4234ecfdde2139b3
import  -/  warp-3.2.22:Network.Wai.Handler.Warp 2d80ecac1a9f9dd4f0a837fb26cf7a6a
import  -/  warp-3.2.22:Network.Wai.Handler.Warp.Run b37de00634754ba560c79f24dc038b0e
import  -/  warp-3.2.22:Network.Wai.Handler.Warp.Settings eeb3c8f7be35ef219ee611bf9acce3f9
import  -/  websockets-0.12.5.1:Network.WebSockets 1e4274765ae1aab19f4060a31b89f3f7
import  -/  websockets-0.12.5.1:Network.WebSockets.Connection 7bba25435902c44d44b19172c298b0a3
import  -/  websockets-0.12.5.1:Network.WebSockets.Connection.Options 43c94e9450209686ed90d6aa2418681e
import  -/  websockets-0.12.5.1:Network.WebSockets.Types 948223f30a423733459cbeead8b910c6
addDependentFile "app/static/index.html" 48d222225fc237361b37e268a5060f1d
addDependentFile "app/static/index.js" e3d6f51ca7bdbbdeea782acaae687145
baa7cff9aebf438b243761bc9619f22a
  $s$fApplicativeExceptT ::
    GHC.Base.Applicative
      (Control.Monad.Trans.Except.ExceptT e GHC.Types.IO)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ e.
                  @ (Control.Monad.Trans.Except.ExceptT e GHC.Types.IO)
                  (Command.REPL.$s$fApplicativeExceptT_$s$fFunctorExceptT @ e)
                  (Command.REPL.$s$fApplicativeExceptT_$s$fApplicativeExceptT_$cpure
                     @ e)
                  (Control.Monad.Trans.Except.$fApplicativeExceptT_$c<*>
                     @ GHC.Types.IO
                     @ e
                     GHC.Base.$fFunctorIO
                     GHC.Base.$fMonadIO)
                  (\ @ a
                     @ b
                     @ c
                     (f1 :: a -> b -> c)
                     (x :: Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a) ->
                   Control.Monad.Trans.Except.$fApplicativeExceptT_$c<*>
                     @ GHC.Types.IO
                     @ e
                     GHC.Base.$fFunctorIO
                     GHC.Base.$fMonadIO
                     @ b
                     @ c
                     (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                      case x `cast`
                           (Control.Monad.Trans.Except.N:ExceptT[0]
                                <e>_N <GHC.Types.IO>_R <a>_N ; GHC.Types.N:IO[0]
                                                                   <Data.Either.Either e a>_R)
                             s of ds2 { (#,#) ipv ipv1 ->
                      (# ipv,
                         Data.Either.$fApplicativeEither_$cfmap
                           @ e
                           @ a
                           @ (b -> c)
                           f1
                           ipv1 #) })
                       `cast`
                     (Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  e (b -> c)>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                            <e>_N <GHC.Types.IO>_R <b -> c>_N)))
                  (Command.REPL.$s$fApplicativeExceptT_$s$fApplicativeExceptT_$c*>
                     @ e)
                  (\ @ a
                     @ b
                     (x :: Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a) ->
                   Control.Monad.Trans.Except.$fApplicativeExceptT_$c<*>
                     @ GHC.Types.IO
                     @ e
                     GHC.Base.$fFunctorIO
                     GHC.Base.$fMonadIO
                     @ b
                     @ a
                     (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                      case x `cast`
                           (Control.Monad.Trans.Except.N:ExceptT[0]
                                <e>_N <GHC.Types.IO>_R <a>_N ; GHC.Types.N:IO[0]
                                                                   <Data.Either.Either e a>_R)
                             s of ds2 { (#,#) ipv ipv1 ->
                      (# ipv,
                         Control.Monad.Trans.Except.$fApplicativeExceptT1
                           @ a
                           @ b
                           @ e
                           ipv1 #) })
                       `cast`
                     (Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  e (b -> a)>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                            <e>_N <GHC.Types.IO>_R <b -> a>_N))) -}
0827d226732b78dbd41e8659b19f75d9
  $s$fApplicativeExceptT_$c<*>1 ::
    Control.Monad.Trans.Except.ExceptT e GHC.Types.IO (a -> b)
    -> Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Either.Either e b #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S(SS)),1*C1(U(U,1*U))><L,1*C1(U(U,1*U))><S,U>,
     Unfolding: (\ @ e
                   @ a
                   @ b
                   (w1 :: Control.Monad.Trans.Except.ExceptT e GHC.Types.IO (a -> b))
                   (w2 :: Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w1
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <e>_N <GHC.Types.IO>_R <a -> b>_N ; GHC.Types.N:IO[0]
                                                                   <Data.Either.Either
                                                                      e (a -> b)>_R)
                        eta of ds2 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   Data.Either.Left e1 -> (# ipv, Data.Either.Left @ e @ b e1 #)
                   Data.Either.Right k
                   -> case w2
                             `cast`
                           (Control.Monad.Trans.Except.N:ExceptT[0]
                                <e>_N <GHC.Types.IO>_R <a>_N ; GHC.Types.N:IO[0]
                                                                   <Data.Either.Either e a>_R)
                             ipv of ds3 { (#,#) ipv2 ipv3 ->
                      case ipv3 of wild1 {
                        Data.Either.Left e1 -> (# ipv2, Data.Either.Left @ e @ b e1 #)
                        Data.Either.Right x
                        -> (# ipv2, Data.Either.Right @ e @ b (k x) #) } } } }) -}
1f6ff5a92b814521eb35059b01e7b2f6
  $s$fApplicativeExceptT_$s$fApplicativeExceptT_$c*> ::
    Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a
    -> Control.Monad.Trans.Except.ExceptT e GHC.Types.IO b
    -> Control.Monad.Trans.Except.ExceptT e GHC.Types.IO b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S(SS)),1*C1(U(U,1*U))><L,1*C1(U(U,U))><S,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ e
                   @ a
                   @ b
                   (m4 :: Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a)
                   (k :: Control.Monad.Trans.Except.ExceptT e GHC.Types.IO b)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case m4
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <e>_N <GHC.Types.IO>_R <a>_N ; GHC.Types.N:IO[0]
                                                              <Data.Either.Either e a>_R)
                        s of ds2 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   Data.Either.Left e1 -> (# ipv, Data.Either.Left @ e @ b e1 #)
                   Data.Either.Right x
                   -> k `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <e>_N <GHC.Types.IO>_R <b>_N ; GHC.Types.N:IO[0]
                                                              <Data.Either.Either e b>_R)
                        ipv } })
                  `cast`
                (forall (e :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a>_R
                 ->_R <Control.Monad.Trans.Except.ExceptT e GHC.Types.IO b>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  e b>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                     <e>_N <GHC.Types.IO>_R <b>_N)) -}
fda70b9c4d77ba1d73faaf74bce933b7
  $s$fApplicativeExceptT_$s$fApplicativeExceptT_$cpure ::
    a -> Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ e @ a (a2 :: a) (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# s, Data.Either.Right @ e @ a a2 #))
                  `cast`
                (forall (e :: <*>_N) (a :: <*>_N).
                 <a>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  e a>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                     <e>_N <GHC.Types.IO>_R <a>_N)) -}
89537f8a219b37ff0a472492898b243a
  $s$fApplicativeExceptT_$s$fFunctorExceptT ::
    GHC.Base.Functor
      (Control.Monad.Trans.Except.ExceptT e GHC.Types.IO)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ e.
                  @ (Control.Monad.Trans.Except.ExceptT e GHC.Types.IO)
                  (Control.Monad.Trans.Except.$fFunctorExceptT_$cfmap
                     @ GHC.Types.IO
                     @ e
                     GHC.Base.$fFunctorIO)
                  (Control.Monad.Trans.Except.$fFunctorExceptT_$c<$
                     @ GHC.Types.IO
                     @ e
                     GHC.Base.$fFunctorIO) -}
e57b12f3d3d5c1ffbab957ada1ee47c7
  $s$fApplicativeReaderT ::
    GHC.Base.Applicative
      (Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ r.
                  @ (Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO)
                  (Command.REPL.$s$fApplicativeReaderT_$s$fFunctorReaderT @ r)
                  (\ @ a (x :: a) ->
                   let {
                     m4 :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
                       {- Arity: 1 -}
                     = \ (s :: GHC.Prim.State# GHC.Prim.RealWorld) -> (# s, x #)
                   } in
                   (\ (ds2 :: r) -> m4)
                     `cast`
                   ((<r>_R
                     ->_R Sym (GHC.Types.N:IO[0]
                                   <a>_R)) ; Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                      <*>_N <r>_R <GHC.Types.IO>_R <a>_N)))
                  (Command.REPL.$s$fApplicativeReaderT_$s$fApplicativeReaderT_$c<*>
                     @ r)
                  (Control.Monad.Trans.Reader.$fApplicativeReaderT_$cliftA2
                     @ GHC.Types.IO
                     @ r
                     GHC.Base.$fApplicativeIO)
                  (Command.REPL.$s$fApplicativeReaderT_$s$fApplicativeReaderT_$c*>
                     @ r)
                  (Command.REPL.$s$fApplicativeReaderT_$s$fApplicativeReaderT_$c<*
                     @ r) -}
fce15d91114bb67190f9b4cd573d69cb
  $s$fApplicativeReaderT_$s$fApplicativeReaderT_$c*> ::
    Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a
    -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b
    -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S(SL))),1*C1(C1(U(U,A)))><L,1*C1(C1(U(U,U)))><L,U><S,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ r
                   @ a
                   @ b
                   (u :: Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a)
                   (v :: Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b)
                   (r4 :: r)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (u `cast`
                       (Control.Monad.Trans.Reader.N:ReaderT[0]
                            <*>_N <r>_R <GHC.Types.IO>_R <a>_N)
                         r4)
                        `cast`
                      (GHC.Types.N:IO[0] <a>_R)
                        s of ds2 { (#,#) ipv ipv1 ->
                 (v `cast`
                  (Control.Monad.Trans.Reader.N:ReaderT[0]
                       <*>_N <r>_R <GHC.Types.IO>_R <b>_N)
                    r4)
                   `cast`
                 (GHC.Types.N:IO[0] <b>_R)
                   ipv })
                  `cast`
                (forall (r :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a>_R
                 ->_R <Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b>_R
                 ->_R (<r>_R
                       ->_R Sym (GHC.Types.N:IO[0]
                                     <b>_R)) ; Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                        <*>_N <r>_R <GHC.Types.IO>_R <b>_N)) -}
e95955a1dc7fbb12c86849cd95b923f1
  $s$fApplicativeReaderT_$s$fApplicativeReaderT_$c<* ::
    Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a
    -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b
    -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S(SL))),1*C1(C1(U(U,U)))><L,1*C1(C1(U(U,A)))><L,U><S,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ r
                   @ a
                   @ b
                   (u :: Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a)
                   (v :: Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b)
                   (r4 :: r)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (u `cast`
                       (Control.Monad.Trans.Reader.N:ReaderT[0]
                            <*>_N <r>_R <GHC.Types.IO>_R <a>_N)
                         r4)
                        `cast`
                      (GHC.Types.N:IO[0] <a>_R)
                        s of ds2 { (#,#) ipv ipv1 ->
                 case (v `cast`
                       (Control.Monad.Trans.Reader.N:ReaderT[0]
                            <*>_N <r>_R <GHC.Types.IO>_R <b>_N)
                         r4)
                        `cast`
                      (GHC.Types.N:IO[0] <b>_R)
                        ipv of ds3 { (#,#) ipv2 ipv3 ->
                 (# ipv2, ipv1 #) } })
                  `cast`
                (forall (r :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a>_R
                 ->_R <Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b>_R
                 ->_R (<r>_R
                       ->_R Sym (GHC.Types.N:IO[0]
                                     <a>_R)) ; Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                        <*>_N <r>_R <GHC.Types.IO>_R <a>_N)) -}
c727d68bc25805435fd01d7c550755ce
  $s$fApplicativeReaderT_$s$fApplicativeReaderT_$c<*> ::
    Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO (a -> b)
    -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a
    -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S(SL))),1*C1(C1(U(U,1*C1(U))))><L,1*C1(C1(U(U,U)))><L,U><S,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ r
                   @ a
                   @ b
                   (f :: Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO (a -> b))
                   (v :: Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a)
                   (r4 :: r)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (f `cast`
                       (Control.Monad.Trans.Reader.N:ReaderT[0]
                            <*>_N <r>_R <GHC.Types.IO>_R <a -> b>_N)
                         r4)
                        `cast`
                      (GHC.Types.N:IO[0] <a -> b>_R)
                        s of ds2 { (#,#) ipv ipv1 ->
                 case (v `cast`
                       (Control.Monad.Trans.Reader.N:ReaderT[0]
                            <*>_N <r>_R <GHC.Types.IO>_R <a>_N)
                         r4)
                        `cast`
                      (GHC.Types.N:IO[0] <a>_R)
                        ipv of ds3 { (#,#) ipv2 ipv3 ->
                 (# ipv2, ipv1 ipv3 #) } })
                  `cast`
                (forall (r :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO (a -> b)>_R
                 ->_R <Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a>_R
                 ->_R (<r>_R
                       ->_R Sym (GHC.Types.N:IO[0]
                                     <b>_R)) ; Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                        <*>_N <r>_R <GHC.Types.IO>_R <b>_N)) -}
59d1ddaddbeea1bd8e173c39be29eb6f
  $s$fApplicativeReaderT_$s$fFunctorReaderT ::
    GHC.Base.Functor
      (Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ r.
                  @ (Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO)
                  (Command.REPL.$s$fApplicativeReaderT_$s$fFunctorReaderT_$cfmap @ r)
                  (Command.REPL.$s$fApplicativeReaderT_$s$fFunctorReaderT_$c<$
                     @ r) -}
bc7d586891c50364c398975aaa58f506
  $s$fApplicativeReaderT_$s$fFunctorReaderT_$c<$ ::
    a
    -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b
    -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U><C(C(S(SL))),1*C1(C1(U(U,A)))><L,U><S,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ r
                   @ a
                   @ b
                   (x :: a)
                   (v :: Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b)
                   (x1 :: r)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (v `cast`
                       (Control.Monad.Trans.Reader.N:ReaderT[0]
                            <*>_N <r>_R <GHC.Types.IO>_R <b>_N)
                         x1)
                        `cast`
                      (GHC.Types.N:IO[0] <b>_R)
                        eta1 of ds2 { (#,#) ipv ipv1 ->
                 (# ipv, x #) })
                  `cast`
                (forall (r :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <a>_R
                 ->_R <Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b>_R
                 ->_R (<r>_R
                       ->_R Sym (GHC.Types.N:IO[0]
                                     <a>_R)) ; Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                        <*>_N <r>_R <GHC.Types.IO>_R <a>_N)) -}
403815bba34172abb8d6f071e900a741
  $s$fApplicativeReaderT_$s$fFunctorReaderT_$cfmap ::
    (a -> b)
    -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a
    -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*C1(U)><C(C(S(SL))),1*C1(C1(U(U,U)))><L,U><S,U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ r @ a @ b (f :: a -> b) ->
                 Control.Monad.Trans.Reader.mapReaderT
                   @ *
                   @ *
                   @ GHC.Types.IO
                   @ a
                   @ GHC.Types.IO
                   @ b
                   @ r
                   (GHC.Base.$fFunctorIO2 @ a @ b f)
                     `cast`
                   (<GHC.Types.IO a>_R ->_R Sym (GHC.Types.N:IO[0] <b>_R))) -}
69017f8e41b8f73635c69d84868d2d63
  $s$fApplicativeStateT ::
    GHC.Base.Applicative
      (Control.Monad.Trans.State.Strict.StateT
         s
         (Control.Monad.Trans.Reader.ReaderT
            Language.PureScript.Interactive.Types.PSCiConfig GHC.Types.IO))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ s.
                  @ (Control.Monad.Trans.State.Strict.StateT
                       s
                       (Control.Monad.Trans.Reader.ReaderT
                          Language.PureScript.Interactive.Types.PSCiConfig GHC.Types.IO))
                  (Command.REPL.$s$fApplicativeStateT_$s$fFunctorStateT @ s)
                  (Command.REPL.$s$fApplicativeStateT_$s$fApplicativeStateT_$cpure
                     @ s)
                  (Command.REPL.$s$fApplicativeStateT_$s$fApplicativeStateT_$c<*>
                     @ s)
                  (Control.Monad.Trans.State.Strict.$fAlternativeStateT4
                     @ (Control.Monad.Trans.Reader.ReaderT
                          Language.PureScript.Interactive.Types.PSCiConfig GHC.Types.IO)
                     @ s
                     (Command.REPL.$s$fApplicativeReaderT_$s$fFunctorReaderT
                        @ Language.PureScript.Interactive.Types.PSCiConfig)
                     (Command.REPL.$s$fApplicativeStateT_$s$fMonadReaderT
                        @ Language.PureScript.Interactive.Types.PSCiConfig))
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N) (c :: <*>_N).
                   <a -> b -> c>_R
                   ->_R <Control.Monad.Trans.State.Strict.StateT
                           s
                           (Control.Monad.Trans.Reader.ReaderT
                              Language.PureScript.Interactive.Types.PSCiConfig GHC.Types.IO)
                           a>_R
                   ->_R <Control.Monad.Trans.State.Strict.StateT
                           s
                           (Control.Monad.Trans.Reader.ReaderT
                              Language.PureScript.Interactive.Types.PSCiConfig GHC.Types.IO)
                           b>_R
                   ->_R Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                 <s>_N
                                 <Control.Monad.Trans.Reader.ReaderT
                                    Language.PureScript.Interactive.Types.PSCiConfig GHC.Types.IO>_R
                                 <c>_N))
                  (Command.REPL.$s$fApplicativeStateT_$s$fApplicativeStateT_$c*> @ s)
                  (\ @ a
                     @ b
                     (x :: Control.Monad.Trans.State.Strict.StateT
                             s
                             (Control.Monad.Trans.Reader.ReaderT
                                Language.PureScript.Interactive.Types.PSCiConfig GHC.Types.IO)
                             a)
                     (eta :: Control.Monad.Trans.State.Strict.StateT
                               s
                               (Control.Monad.Trans.Reader.ReaderT
                                  Language.PureScript.Interactive.Types.PSCiConfig GHC.Types.IO)
                               b)
                     (eta1 :: s) ->
                   let {
                     m4 :: Control.Monad.Trans.Reader.ReaderT
                             Language.PureScript.Interactive.Types.PSCiConfig
                             GHC.Types.IO
                             (a, s)
                     = x `cast`
                       (Control.Monad.Trans.State.Strict.N:StateT[0]
                            <s>_N
                            <Control.Monad.Trans.Reader.ReaderT
                               Language.PureScript.Interactive.Types.PSCiConfig GHC.Types.IO>_R
                            <a>_N)
                         eta1
                   } in
                   (\ (r4 :: Language.PureScript.Interactive.Types.PSCiConfig)
                      (s1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case (m4
                            `cast`
                          (Control.Monad.Trans.Reader.N:ReaderT[0]
                               <*>_N
                               <Language.PureScript.Interactive.Types.PSCiConfig>_R
                               <GHC.Types.IO>_R
                               <(a, s)>_N)
                            r4)
                           `cast`
                         (GHC.Types.N:IO[0] <(a, s)>_R)
                           s1 of ds2 { (#,#) ipv ipv1 ->
                    case ipv1 of wild { (,) a2 s' ->
                    case ((eta
                             `cast`
                           (Control.Monad.Trans.State.Strict.N:StateT[0]
                                <s>_N
                                <Control.Monad.Trans.Reader.ReaderT
                                   Language.PureScript.Interactive.Types.PSCiConfig GHC.Types.IO>_R
                                <b>_N)
                             s')
                            `cast`
                          (Control.Monad.Trans.Reader.N:ReaderT[0]
                               <*>_N
                               <Language.PureScript.Interactive.Types.PSCiConfig>_R
                               <GHC.Types.IO>_R
                               <(b, s)>_N)
                            r4)
                           `cast`
                         (GHC.Types.N:IO[0] <(b, s)>_R)
                           ipv of ds3 { (#,#) ipv2 ipv3 ->
                    case ipv3 of wild1 { (,) x1 s'' -> (# ipv2, (a2, s'') #) } } } })
                     `cast`
                   ((<Language.PureScript.Interactive.Types.PSCiConfig>_R
                     ->_R Sym (GHC.Types.N:IO[0]
                                   <(a, s)>_R)) ; Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                           <*>_N
                                                           <Language.PureScript.Interactive.Types.PSCiConfig>_R
                                                           <GHC.Types.IO>_R
                                                           <(a, s)>_N)))
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   <Control.Monad.Trans.State.Strict.StateT
                      s
                      (Control.Monad.Trans.Reader.ReaderT
                         Language.PureScript.Interactive.Types.PSCiConfig GHC.Types.IO)
                      a>_R
                   ->_R <Control.Monad.Trans.State.Strict.StateT
                           s
                           (Control.Monad.Trans.Reader.ReaderT
                              Language.PureScript.Interactive.Types.PSCiConfig GHC.Types.IO)
                           b>_R
                   ->_R Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                 <s>_N
                                 <Control.Monad.Trans.Reader.ReaderT
                                    Language.PureScript.Interactive.Types.PSCiConfig GHC.Types.IO>_R
                                 <a>_N)) -}
40f6e5e7db1fad4db5184963df26db5b
  $s$fApplicativeStateT_$s$fApplicativeStateT_$c*> ::
    Control.Monad.Trans.State.Strict.StateT
      s
      (Control.Monad.Trans.Reader.ReaderT
         Language.PureScript.Interactive.Types.PSCiConfig GHC.Types.IO)
      a
    -> Control.Monad.Trans.State.Strict.StateT
         s
         (Control.Monad.Trans.Reader.ReaderT
            Language.PureScript.Interactive.Types.PSCiConfig GHC.Types.IO)
         b
    -> Control.Monad.Trans.State.Strict.StateT
         s
         (Control.Monad.Trans.Reader.ReaderT
            Language.PureScript.Interactive.Types.PSCiConfig GHC.Types.IO)
         b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C(C1(U(U,1*U(A,U)))))><L,C(C1(C1(U)))><L,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ a
                   @ b
                   (m4 :: Control.Monad.Trans.State.Strict.StateT
                            s
                            (Control.Monad.Trans.Reader.ReaderT
                               Language.PureScript.Interactive.Types.PSCiConfig GHC.Types.IO)
                            a)
                   (k :: Control.Monad.Trans.State.Strict.StateT
                           s
                           (Control.Monad.Trans.Reader.ReaderT
                              Language.PureScript.Interactive.Types.PSCiConfig GHC.Types.IO)
                           b)
                   (s1 :: s) ->
                 let {
                   m5 :: Control.Monad.Trans.Reader.ReaderT
                           Language.PureScript.Interactive.Types.PSCiConfig
                           GHC.Types.IO
                           (a, s)
                   = m4
                       `cast`
                     (Control.Monad.Trans.State.Strict.N:StateT[0]
                          <s>_N
                          <Control.Monad.Trans.Reader.ReaderT
                             Language.PureScript.Interactive.Types.PSCiConfig GHC.Types.IO>_R
                          <a>_N)
                       s1
                 } in
                 (\ (r4 :: Language.PureScript.Interactive.Types.PSCiConfig)
                    (s2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                  case (m5
                          `cast`
                        (Control.Monad.Trans.Reader.N:ReaderT[0]
                             <*>_N
                             <Language.PureScript.Interactive.Types.PSCiConfig>_R
                             <GHC.Types.IO>_R
                             <(a, s)>_N)
                          r4)
                         `cast`
                       (GHC.Types.N:IO[0] <(a, s)>_R)
                         s2 of ds2 { (#,#) ipv ipv1 ->
                  case ipv1 of wild { (,) a2 s' ->
                  ((k `cast`
                    (Control.Monad.Trans.State.Strict.N:StateT[0]
                         <s>_N
                         <Control.Monad.Trans.Reader.ReaderT
                            Language.PureScript.Interactive.Types.PSCiConfig GHC.Types.IO>_R
                         <b>_N)
                      s')
                     `cast`
                   (Control.Monad.Trans.Reader.N:ReaderT[0]
                        <*>_N
                        <Language.PureScript.Interactive.Types.PSCiConfig>_R
                        <GHC.Types.IO>_R
                        <(b, s)>_N)
                     r4)
                    `cast`
                  (GHC.Types.N:IO[0] <(b, s)>_R)
                    ipv } })
                   `cast`
                 ((<Language.PureScript.Interactive.Types.PSCiConfig>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <(b, s)>_R)) ; Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                         <*>_N
                                                         <Language.PureScript.Interactive.Types.PSCiConfig>_R
                                                         <GHC.Types.IO>_R
                                                         <(b, s)>_N)))
                  `cast`
                (forall (s :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.State.Strict.StateT
                    s
                    (Control.Monad.Trans.Reader.ReaderT
                       Language.PureScript.Interactive.Types.PSCiConfig GHC.Types.IO)
                    a>_R
                 ->_R <Control.Monad.Trans.State.Strict.StateT
                         s
                         (Control.Monad.Trans.Reader.ReaderT
                            Language.PureScript.Interactive.Types.PSCiConfig GHC.Types.IO)
                         b>_R
                 ->_R Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                               <s>_N
                               <Control.Monad.Trans.Reader.ReaderT
                                  Language.PureScript.Interactive.Types.PSCiConfig GHC.Types.IO>_R
                               <b>_N)) -}
6a09292dbd1baecd5ddcb3d95ba0e23f
  $s$fApplicativeStateT_$s$fApplicativeStateT_$c<*> ::
    Control.Monad.Trans.State.Strict.StateT
      s
      (Control.Monad.Trans.Reader.ReaderT
         Language.PureScript.Interactive.Types.PSCiConfig GHC.Types.IO)
      (a -> b)
    -> Control.Monad.Trans.State.Strict.StateT
         s
         (Control.Monad.Trans.Reader.ReaderT
            Language.PureScript.Interactive.Types.PSCiConfig GHC.Types.IO)
         a
    -> Control.Monad.Trans.State.Strict.StateT
         s
         (Control.Monad.Trans.Reader.ReaderT
            Language.PureScript.Interactive.Types.PSCiConfig GHC.Types.IO)
         b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C(C1(U(U,1*U(1*C1(U),U)))))><L,C(C1(C1(U(U,1*U(U,U)))))><L,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ a
                   @ b
                   (ds2 :: Control.Monad.Trans.State.Strict.StateT
                             s
                             (Control.Monad.Trans.Reader.ReaderT
                                Language.PureScript.Interactive.Types.PSCiConfig GHC.Types.IO)
                             (a -> b))
                   (ds3 :: Control.Monad.Trans.State.Strict.StateT
                             s
                             (Control.Monad.Trans.Reader.ReaderT
                                Language.PureScript.Interactive.Types.PSCiConfig GHC.Types.IO)
                             a)
                   (s1 :: s) ->
                 let {
                   m4 :: Control.Monad.Trans.Reader.ReaderT
                           Language.PureScript.Interactive.Types.PSCiConfig
                           GHC.Types.IO
                           (a -> b, s)
                   = ds2
                       `cast`
                     (Control.Monad.Trans.State.Strict.N:StateT[0]
                          <s>_N
                          <Control.Monad.Trans.Reader.ReaderT
                             Language.PureScript.Interactive.Types.PSCiConfig GHC.Types.IO>_R
                          <a -> b>_N)
                       s1
                 } in
                 (\ (r4 :: Language.PureScript.Interactive.Types.PSCiConfig)
                    (s2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                  case (m4
                          `cast`
                        (Control.Monad.Trans.Reader.N:ReaderT[0]
                             <*>_N
                             <Language.PureScript.Interactive.Types.PSCiConfig>_R
                             <GHC.Types.IO>_R
                             <(a -> b, s)>_N)
                          r4)
                         `cast`
                       (GHC.Types.N:IO[0] <(a -> b, s)>_R)
                         s2 of ds4 { (#,#) ipv ipv1 ->
                  case ipv1 of wild { (,) f s' ->
                  case ((ds3
                           `cast`
                         (Control.Monad.Trans.State.Strict.N:StateT[0]
                              <s>_N
                              <Control.Monad.Trans.Reader.ReaderT
                                 Language.PureScript.Interactive.Types.PSCiConfig GHC.Types.IO>_R
                              <a>_N)
                           s')
                          `cast`
                        (Control.Monad.Trans.Reader.N:ReaderT[0]
                             <*>_N
                             <Language.PureScript.Interactive.Types.PSCiConfig>_R
                             <GHC.Types.IO>_R
                             <(a, s)>_N)
                          r4)
                         `cast`
                       (GHC.Types.N:IO[0] <(a, s)>_R)
                         ipv of ds5 { (#,#) ipv2 ipv3 ->
                  case ipv3 of wild1 { (,) x s'' -> (# ipv2, (f x, s'') #) } } } })
                   `cast`
                 ((<Language.PureScript.Interactive.Types.PSCiConfig>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <(b, s)>_R)) ; Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                         <*>_N
                                                         <Language.PureScript.Interactive.Types.PSCiConfig>_R
                                                         <GHC.Types.IO>_R
                                                         <(b, s)>_N)))
                  `cast`
                (forall (s :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.State.Strict.StateT
                    s
                    (Control.Monad.Trans.Reader.ReaderT
                       Language.PureScript.Interactive.Types.PSCiConfig GHC.Types.IO)
                    (a -> b)>_R
                 ->_R <Control.Monad.Trans.State.Strict.StateT
                         s
                         (Control.Monad.Trans.Reader.ReaderT
                            Language.PureScript.Interactive.Types.PSCiConfig GHC.Types.IO)
                         a>_R
                 ->_R Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                               <s>_N
                               <Control.Monad.Trans.Reader.ReaderT
                                  Language.PureScript.Interactive.Types.PSCiConfig GHC.Types.IO>_R
                               <b>_N)) -}
ebb6c8cadd5d536e5edcf9e5f20d03f2
  $s$fApplicativeStateT_$s$fApplicativeStateT_$cpure ::
    a
    -> Control.Monad.Trans.State.Strict.StateT
         s
         (Control.Monad.Trans.Reader.ReaderT
            Language.PureScript.Interactive.Types.PSCiConfig GHC.Types.IO)
         a
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U><L,U><L,A><S,U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ s @ a (a2 :: a) (s1 :: s) ->
                 let {
                   m4 :: GHC.Prim.State# GHC.Prim.RealWorld
                         -> (# GHC.Prim.State# GHC.Prim.RealWorld, (a, s) #)
                     {- Arity: 1 -}
                   = \ (s2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                     (# s2, (a2, s1) #)
                 } in
                 (\ (ds2 :: Language.PureScript.Interactive.Types.PSCiConfig) -> m4)
                   `cast`
                 ((<Language.PureScript.Interactive.Types.PSCiConfig>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <(a, s)>_R)) ; Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                         <*>_N
                                                         <Language.PureScript.Interactive.Types.PSCiConfig>_R
                                                         <GHC.Types.IO>_R
                                                         <(a, s)>_N)))
                  `cast`
                (forall (s :: <*>_N) (a :: <*>_N).
                 <a>_R
                 ->_R Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                               <s>_N
                               <Control.Monad.Trans.Reader.ReaderT
                                  Language.PureScript.Interactive.Types.PSCiConfig GHC.Types.IO>_R
                               <a>_N)) -}
de8b05716259fd41d98dde6aeb0097c5
  $s$fApplicativeStateT_$s$fFunctorStateT ::
    GHC.Base.Functor
      (Control.Monad.Trans.State.Strict.StateT
         s
         (Control.Monad.Trans.Reader.ReaderT
            Language.PureScript.Interactive.Types.PSCiConfig GHC.Types.IO))
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ s.
                  @ (Control.Monad.Trans.State.Strict.StateT
                       s
                       (Control.Monad.Trans.Reader.ReaderT
                          Language.PureScript.Interactive.Types.PSCiConfig GHC.Types.IO))
                  (Control.Monad.Trans.State.Strict.$fFunctorStateT_$cfmap
                     @ (Control.Monad.Trans.Reader.ReaderT
                          Language.PureScript.Interactive.Types.PSCiConfig GHC.Types.IO)
                     @ s
                     (Command.REPL.$s$fApplicativeReaderT_$s$fFunctorReaderT
                        @ Language.PureScript.Interactive.Types.PSCiConfig))
                  (\ @ a
                     @ b
                     (x :: a)
                     (eta :: Control.Monad.Trans.State.Strict.StateT
                               s
                               (Control.Monad.Trans.Reader.ReaderT
                                  Language.PureScript.Interactive.Types.PSCiConfig GHC.Types.IO)
                               b)
                     (eta1 :: s) ->
                   let {
                     m4 :: Control.Monad.Trans.Reader.ReaderT
                             Language.PureScript.Interactive.Types.PSCiConfig
                             GHC.Types.IO
                             (b, s)
                     = eta
                         `cast`
                       (Control.Monad.Trans.State.Strict.N:StateT[0]
                            <s>_N
                            <Control.Monad.Trans.Reader.ReaderT
                               Language.PureScript.Interactive.Types.PSCiConfig GHC.Types.IO>_R
                            <b>_N)
                         eta1
                   } in
                   (\ (x1 :: Language.PureScript.Interactive.Types.PSCiConfig)
                      (s1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case (m4
                            `cast`
                          (Control.Monad.Trans.Reader.N:ReaderT[0]
                               <*>_N
                               <Language.PureScript.Interactive.Types.PSCiConfig>_R
                               <GHC.Types.IO>_R
                               <(b, s)>_N)
                            x1)
                           `cast`
                         (GHC.Types.N:IO[0] <(b, s)>_R)
                           s1 of ds2 { (#,#) ipv ipv1 ->
                    (# ipv, case ipv1 of wild { (,) a2 s' -> (x, s') } #) })
                     `cast`
                   ((<Language.PureScript.Interactive.Types.PSCiConfig>_R
                     ->_R Sym (GHC.Types.N:IO[0]
                                   <(a, s)>_R)) ; Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                           <*>_N
                                                           <Language.PureScript.Interactive.Types.PSCiConfig>_R
                                                           <GHC.Types.IO>_R
                                                           <(a, s)>_N)))
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   <a>_R
                   ->_R <Control.Monad.Trans.State.Strict.StateT
                           s
                           (Control.Monad.Trans.Reader.ReaderT
                              Language.PureScript.Interactive.Types.PSCiConfig GHC.Types.IO)
                           b>_R
                   ->_R Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                 <s>_N
                                 <Control.Monad.Trans.Reader.ReaderT
                                    Language.PureScript.Interactive.Types.PSCiConfig GHC.Types.IO>_R
                                 <a>_N)) -}
58310e629f83ef3c6e20e53ca3588f87
  $s$fApplicativeStateT_$s$fMonadReaderT ::
    GHC.Base.Monad (Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ r.
                  @ (Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO)
                  (Command.REPL.$s$fApplicativeReaderT @ r)
                  (Command.REPL.$s$fApplicativeStateT_$s$fMonadReaderT_$c>>= @ r)
                  (Command.REPL.$s$fApplicativeReaderT_$s$fApplicativeReaderT_$c*>
                     @ r)
                  (\ @ a (eta :: a) ->
                   let {
                     m4 :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
                       {- Arity: 1 -}
                     = \ (s :: GHC.Prim.State# GHC.Prim.RealWorld) -> (# s, eta #)
                   } in
                   (\ (ds2 :: r) -> m4)
                     `cast`
                   ((<r>_R
                     ->_R Sym (GHC.Types.N:IO[0]
                                   <a>_R)) ; Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                      <*>_N <r>_R <GHC.Types.IO>_R <a>_N)))
                  (Command.REPL.$s$fApplicativeStateT_$s$fMonadReaderT_$cfail @ r) -}
4004d1c13b3228591ff3b5524f5d5ccc
  $s$fApplicativeStateT_$s$fMonadReaderT_$c>>= ::
    Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a
    -> (a -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b)
    -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S(SL))),1*C1(C1(U(U,U)))><L,1*C1(C1(C1(U(U,U))))><L,U><S,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ r
                   @ a
                   @ b
                   (m4 :: Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a)
                   (k :: a -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b)
                   (r4 :: r)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (m4
                         `cast`
                       (Control.Monad.Trans.Reader.N:ReaderT[0]
                            <*>_N <r>_R <GHC.Types.IO>_R <a>_N)
                         r4)
                        `cast`
                      (GHC.Types.N:IO[0] <a>_R)
                        s of ds2 { (#,#) ipv ipv1 ->
                 ((k ipv1)
                    `cast`
                  (Control.Monad.Trans.Reader.N:ReaderT[0]
                       <*>_N <r>_R <GHC.Types.IO>_R <b>_N)
                    r4)
                   `cast`
                 (GHC.Types.N:IO[0] <b>_R)
                   ipv })
                  `cast`
                (forall (r :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a>_R
                 ->_R <a -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b>_R
                 ->_R (<r>_R
                       ->_R Sym (GHC.Types.N:IO[0]
                                     <b>_R)) ; Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                        <*>_N <r>_R <GHC.Types.IO>_R <b>_N)) -}
2d91bba8adcf415528fdc393339bdffd
  $s$fApplicativeStateT_$s$fMonadReaderT_$cfail ::
    GHC.Base.String
    -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a
  {- Arity: 1, Strictness: <L,U>, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ r @ a (msg :: GHC.Base.String) ->
                 let {
                   m4 :: GHC.Types.IO a
                   = GHC.Magic.noinline
                       @ (forall a2. [GHC.Types.Char] -> GHC.Types.IO a2)
                       GHC.IO.failIO1
                         `cast`
                       (forall (a2 :: <*>_N).
                        <GHC.Base.String>_R ->_R Sym (GHC.Types.N:IO[0] <a2>_R))
                       @ a
                       msg
                 } in
                 (\ (ds2 :: r) -> m4)
                   `cast`
                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                           <*>_N <r>_R <GHC.Types.IO>_R <a>_N))) -}
664a9953cbfd34dc76324fe0faf43756
  $s$fMonadErroreExceptT ::
    Control.Monad.Error.Class.MonadError
      e (Control.Monad.Trans.Except.ExceptT e GHC.Types.IO)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ e.
                  @ e
                  @ (Control.Monad.Trans.Except.ExceptT e GHC.Types.IO)
                  (Command.REPL.$s$fMonadErroreExceptT_$s$fMonadExceptT @ e)
                  (\ @ a (x :: e) (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                   (# s, Data.Either.Left @ e @ a x #))
                    `cast`
                  (forall (a :: <*>_N).
                   <e>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <Data.Either.Either
                                    e a>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                       <e>_N <GHC.Types.IO>_R <a>_N))
                  (\ @ a ->
                   Command.REPL.$s$fMonadErroreExceptT_$scatchE @ e @ a @ e) -}
f650d5691eaec70eea2ee4217440dd1c
  $s$fMonadErroreExceptT_$s$fMonadExceptT ::
    GHC.Base.Monad (Control.Monad.Trans.Except.ExceptT e GHC.Types.IO)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ e.
                  @ (Control.Monad.Trans.Except.ExceptT e GHC.Types.IO)
                  (Command.REPL.$s$fApplicativeExceptT @ e)
                  (Command.REPL.$s$fMonadErroreExceptT_$s$fMonadExceptT_$c>>= @ e)
                  (Command.REPL.$s$fMonadErroreExceptT_$s$fMonadExceptT_$c>> @ e)
                  (\ @ a (eta :: a) (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                   (# s, Data.Either.Right @ e @ a eta #))
                    `cast`
                  (forall (a :: <*>_N).
                   <a>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <Data.Either.Either
                                    e a>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                       <e>_N <GHC.Types.IO>_R <a>_N))
                  (\ @ a (x :: GHC.Base.String) ->
                   GHC.Magic.noinline
                     @ (forall a2. [GHC.Types.Char] -> GHC.Types.IO a2)
                     GHC.IO.failIO1
                       `cast`
                     (forall (a2 :: <*>_N).
                      <GHC.Base.String>_R ->_R Sym (GHC.Types.N:IO[0] <a2>_R))
                     @ (Data.Either.Either e a)
                     x)
                    `cast`
                  (forall (a :: <*>_N).
                   <GHC.Base.String>_R
                   ->_R Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                 <e>_N <GHC.Types.IO>_R <a>_N)) -}
8f049a818fc8794a34b61028b4941971
  $s$fMonadErroreExceptT_$s$fMonadExceptT_$c>> ::
    Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a
    -> Control.Monad.Trans.Except.ExceptT e GHC.Types.IO b
    -> Control.Monad.Trans.Except.ExceptT e GHC.Types.IO b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S(SS)),1*C1(U(U,1*U))><L,1*C1(U(U,U))><S,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ e
                   @ a
                   @ b
                   (m4 :: Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a)
                   (k :: Control.Monad.Trans.Except.ExceptT e GHC.Types.IO b)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case m4
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <e>_N <GHC.Types.IO>_R <a>_N ; GHC.Types.N:IO[0]
                                                              <Data.Either.Either e a>_R)
                        s of ds2 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   Data.Either.Left e1 -> (# ipv, Data.Either.Left @ e @ b e1 #)
                   Data.Either.Right x
                   -> k `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <e>_N <GHC.Types.IO>_R <b>_N ; GHC.Types.N:IO[0]
                                                              <Data.Either.Either e b>_R)
                        ipv } })
                  `cast`
                (forall (e :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a>_R
                 ->_R <Control.Monad.Trans.Except.ExceptT e GHC.Types.IO b>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  e b>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                     <e>_N <GHC.Types.IO>_R <b>_N)) -}
7094dd409d35071af08ef73dc234a563
  $s$fMonadErroreExceptT_$s$fMonadExceptT_$c>>= ::
    Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a
    -> (a -> Control.Monad.Trans.Except.ExceptT e GHC.Types.IO b)
    -> Control.Monad.Trans.Except.ExceptT e GHC.Types.IO b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S(SS)),1*C1(U(U,1*U))><L,1*C1(C1(U(U,U)))><S,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ e
                   @ a
                   @ b
                   (m4 :: Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a)
                   (k :: a -> Control.Monad.Trans.Except.ExceptT e GHC.Types.IO b)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case m4
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <e>_N <GHC.Types.IO>_R <a>_N ; GHC.Types.N:IO[0]
                                                              <Data.Either.Either e a>_R)
                        s of ds2 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   Data.Either.Left e1 -> (# ipv, Data.Either.Left @ e @ b e1 #)
                   Data.Either.Right x
                   -> (k x)
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <e>_N <GHC.Types.IO>_R <b>_N ; GHC.Types.N:IO[0]
                                                              <Data.Either.Either e b>_R)
                        ipv } })
                  `cast`
                (forall (e :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a>_R
                 ->_R <a -> Control.Monad.Trans.Except.ExceptT e GHC.Types.IO b>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  e b>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                     <e>_N <GHC.Types.IO>_R <b>_N)) -}
56e7889ab019042873e76a8fce5bce21
  $s$fMonadErroreExceptT_$scatchE ::
    Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a
    -> (e -> Control.Monad.Trans.Except.ExceptT e' GHC.Types.IO a)
    -> Control.Monad.Trans.Except.ExceptT e' GHC.Types.IO a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S(SS)),1*C1(U(U,1*U))><L,1*C1(C1(U(U,U)))><S,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ e
                   @ a
                   @ e'
                   (m4 :: Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a)
                   (h :: e -> Control.Monad.Trans.Except.ExceptT e' GHC.Types.IO a)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case m4
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <e>_N <GHC.Types.IO>_R <a>_N ; GHC.Types.N:IO[0]
                                                              <Data.Either.Either e a>_R)
                        s of ds2 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   Data.Either.Left l
                   -> (h l)
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <e'>_N <GHC.Types.IO>_R <a>_N ; GHC.Types.N:IO[0]
                                                               <Data.Either.Either e' a>_R)
                        ipv
                   Data.Either.Right r -> (# ipv, Data.Either.Right @ e' @ a r #) } })
                  `cast`
                (forall (e :: <*>_N) (a :: <*>_N) (e' :: <*>_N).
                 <Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a>_R
                 ->_R <e -> Control.Monad.Trans.Except.ExceptT e' GHC.Types.IO a>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  e' a>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                      <e'>_N <GHC.Types.IO>_R <a>_N)) -}
dd317fc3626c59727645eb0f6ab74761
  $s$fMonadExceptionInputT ::
    System.Console.Haskeline.MonadException.MonadException
      (System.Console.Haskeline.InputT.InputT
         (Control.Monad.Trans.State.Strict.StateT
            Language.PureScript.Interactive.Types.PSCiState
            (Control.Monad.Trans.Reader.ReaderT
               Language.PureScript.Interactive.Types.PSCiConfig GHC.Types.IO)))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (System.Console.Haskeline.InputT.InputT
                       (Control.Monad.Trans.State.Strict.StateT
                          Language.PureScript.Interactive.Types.PSCiState
                          (Control.Monad.Trans.Reader.ReaderT
                             Language.PureScript.Interactive.Types.PSCiConfig GHC.Types.IO)))
                  (System.Console.Haskeline.InputT.$fMonadIOInputT
                     @ (Control.Monad.Trans.State.Strict.StateT
                          Language.PureScript.Interactive.Types.PSCiState
                          (Control.Monad.Trans.Reader.ReaderT
                             Language.PureScript.Interactive.Types.PSCiConfig GHC.Types.IO))
                     (Command.REPL.$s$fMonadExceptionInputT_$s$fMonadIOStateT
                        @ Language.PureScript.Interactive.Types.PSCiState))
                  (System.Console.Haskeline.InputT.$fMonadExceptionInputT1
                     @ (Control.Monad.Trans.State.Strict.StateT
                          Language.PureScript.Interactive.Types.PSCiState
                          (Control.Monad.Trans.Reader.ReaderT
                             Language.PureScript.Interactive.Types.PSCiConfig GHC.Types.IO))
                     (Command.REPL.$s$fMonadExceptionInputT_$s$fMonadExceptionStateT
                        @ Language.PureScript.Interactive.Types.PSCiState))
                    `cast`
                  (forall (a :: <*>_N).
                   ((System.Console.Haskeline.MonadException.N:RunIO[0]
                         <Control.Monad.Trans.Reader.ReaderT
                            System.Console.Haskeline.Term.RunTerm
                            (Control.Monad.Trans.Reader.ReaderT
                               (GHC.IORef.IORef System.Console.Haskeline.History.History)
                               (Control.Monad.Trans.Reader.ReaderT
                                  (GHC.IORef.IORef
                                     System.Console.Haskeline.Command.KillRing.KillRing)
                                  (Control.Monad.Trans.Reader.ReaderT
                                     System.Console.Haskeline.Prefs.Prefs
                                     (Control.Monad.Trans.Reader.ReaderT
                                        (System.Console.Haskeline.InputT.Settings
                                           (Control.Monad.Trans.State.Strict.StateT
                                              Language.PureScript.Interactive.Types.PSCiState
                                              (Control.Monad.Trans.Reader.ReaderT
                                                 Language.PureScript.Interactive.Types.PSCiConfig
                                                 GHC.Types.IO)))
                                        (Control.Monad.Trans.State.Strict.StateT
                                           Language.PureScript.Interactive.Types.PSCiState
                                           (Control.Monad.Trans.Reader.ReaderT
                                              Language.PureScript.Interactive.Types.PSCiConfig
                                              GHC.Types.IO))))))>_R ; ((forall (b :: <*>_N).
                                                                        Sym (System.Console.Haskeline.InputT.N:InputT[0]
                                                                                 <Control.Monad.Trans.State.Strict.StateT
                                                                                    Language.PureScript.Interactive.Types.PSCiState
                                                                                    (Control.Monad.Trans.Reader.ReaderT
                                                                                       Language.PureScript.Interactive.Types.PSCiConfig
                                                                                       GHC.Types.IO)>_R) <b>_N
                                                                        ->_R (GHC.Types.IO
                                                                                (Sym (System.Console.Haskeline.InputT.N:InputT[0]
                                                                                          <Control.Monad.Trans.State.Strict.StateT
                                                                                             Language.PureScript.Interactive.Types.PSCiState
                                                                                             (Control.Monad.Trans.Reader.ReaderT
                                                                                                Language.PureScript.Interactive.Types.PSCiConfig
                                                                                                GHC.Types.IO)>_R) <b>_N))_R) ; Sym (System.Console.Haskeline.MonadException.N:RunIO[0]
                                                                                                                                        <System.Console.Haskeline.InputT.InputT
                                                                                                                                           (Control.Monad.Trans.State.Strict.StateT
                                                                                                                                              Language.PureScript.Interactive.Types.PSCiState
                                                                                                                                              (Control.Monad.Trans.Reader.ReaderT
                                                                                                                                                 Language.PureScript.Interactive.Types.PSCiConfig
                                                                                                                                                 GHC.Types.IO))>_R)))
                    ->_R (GHC.Types.IO
                            (Sym (System.Console.Haskeline.InputT.N:InputT[0]
                                      <Control.Monad.Trans.State.Strict.StateT
                                         Language.PureScript.Interactive.Types.PSCiState
                                         (Control.Monad.Trans.Reader.ReaderT
                                            Language.PureScript.Interactive.Types.PSCiConfig
                                            GHC.Types.IO)>_R) <a>_N))_R)
                   ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                 <*>_N
                                 <System.Console.Haskeline.Term.RunTerm>_R
                                 <Control.Monad.Trans.Reader.ReaderT
                                    (GHC.IORef.IORef System.Console.Haskeline.History.History)
                                    (Control.Monad.Trans.Reader.ReaderT
                                       (GHC.IORef.IORef
                                          System.Console.Haskeline.Command.KillRing.KillRing)
                                       (Control.Monad.Trans.Reader.ReaderT
                                          System.Console.Haskeline.Prefs.Prefs
                                          (Control.Monad.Trans.Reader.ReaderT
                                             (System.Console.Haskeline.InputT.Settings
                                                (Control.Monad.Trans.State.Strict.StateT
                                                   Language.PureScript.Interactive.Types.PSCiState
                                                   (Control.Monad.Trans.Reader.ReaderT
                                                      Language.PureScript.Interactive.Types.PSCiConfig
                                                      GHC.Types.IO)))
                                             (Control.Monad.Trans.State.Strict.StateT
                                                Language.PureScript.Interactive.Types.PSCiState
                                                (Control.Monad.Trans.Reader.ReaderT
                                                   Language.PureScript.Interactive.Types.PSCiConfig
                                                   GHC.Types.IO)))))>_R
                                 <a>_N) ; Sym (System.Console.Haskeline.InputT.N:InputT[0]
                                                   <Control.Monad.Trans.State.Strict.StateT
                                                      Language.PureScript.Interactive.Types.PSCiState
                                                      (Control.Monad.Trans.Reader.ReaderT
                                                         Language.PureScript.Interactive.Types.PSCiConfig
                                                         GHC.Types.IO)>_R) <a>_N) -}
2086a8c1cc3e0d68e9ae9f1d24097be2
  $s$fMonadExceptionInputT_$s$fMonadExceptionReaderT ::
    System.Console.Haskeline.MonadException.MonadException
      (Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ r.
                  @ (Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO)
                  (Command.REPL.$s$fMonadExceptionInputT_$s$fMonadIOReaderT @ r)
                  (System.Console.Haskeline.MonadException.$fMonadExceptionReaderT1
                     @ GHC.Types.IO
                     @ r
                     System.Console.Haskeline.MonadException.$fMonadExceptionIO)
                    `cast`
                  (forall (a :: <*>_N).
                   <System.Console.Haskeline.MonadException.RunIO
                      (Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO)
                    -> GHC.Types.IO
                         (Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a)>_R
                   ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                 <*>_N <r>_R <GHC.Types.IO>_R <a>_N)) -}
aa97f66187284a3e60e9be2e1de50370
  $s$fMonadExceptionInputT_$s$fMonadExceptionStateT ::
    System.Console.Haskeline.MonadException.MonadException
      (Control.Monad.Trans.State.Strict.StateT
         s
         (Control.Monad.Trans.Reader.ReaderT
            Language.PureScript.Interactive.Types.PSCiConfig GHC.Types.IO))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ s.
                  @ (Control.Monad.Trans.State.Strict.StateT
                       s
                       (Control.Monad.Trans.Reader.ReaderT
                          Language.PureScript.Interactive.Types.PSCiConfig GHC.Types.IO))
                  (Command.REPL.$s$fMonadExceptionInputT_$s$fMonadIOStateT @ s)
                  (System.Console.Haskeline.MonadException.$fMonadExceptionStateT1
                     @ (Control.Monad.Trans.Reader.ReaderT
                          Language.PureScript.Interactive.Types.PSCiConfig GHC.Types.IO)
                     @ s
                     (Command.REPL.$s$fMonadExceptionInputT_$s$fMonadExceptionReaderT
                        @ Language.PureScript.Interactive.Types.PSCiConfig))
                    `cast`
                  (forall (a :: <*>_N).
                   <System.Console.Haskeline.MonadException.RunIO
                      (Control.Monad.Trans.State.Strict.StateT
                         s
                         (Control.Monad.Trans.Reader.ReaderT
                            Language.PureScript.Interactive.Types.PSCiConfig GHC.Types.IO))
                    -> GHC.Types.IO
                         (Control.Monad.Trans.State.Strict.StateT
                            s
                            (Control.Monad.Trans.Reader.ReaderT
                               Language.PureScript.Interactive.Types.PSCiConfig GHC.Types.IO)
                            a)>_R
                   ->_R Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                 <s>_N
                                 <Control.Monad.Trans.Reader.ReaderT
                                    Language.PureScript.Interactive.Types.PSCiConfig GHC.Types.IO>_R
                                 <a>_N)) -}
7ee4dd5560dc2fd132474f8759056c2b
  $s$fMonadExceptionInputT_$s$fMonadIOReaderT ::
    Control.Monad.IO.Class.MonadIO
      (Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ r.
                  @ (Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO)
                  (Command.REPL.$s$fApplicativeStateT_$s$fMonadReaderT @ r)
                  (\ @ a (x :: GHC.Types.IO a) (ds2 :: r) -> x)
                    `cast`
                  (forall (a :: <*>_N).
                   <GHC.Types.IO a>_R
                   ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                 <*>_N <r>_R <GHC.Types.IO>_R <a>_N)) -}
e7fe47a0994946ed2cccab7dbe08246d
  $s$fMonadExceptionInputT_$s$fMonadIOStateT ::
    Control.Monad.IO.Class.MonadIO
      (Control.Monad.Trans.State.Strict.StateT
         s
         (Control.Monad.Trans.Reader.ReaderT
            Language.PureScript.Interactive.Types.PSCiConfig GHC.Types.IO))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ s.
                  @ (Control.Monad.Trans.State.Strict.StateT
                       s
                       (Control.Monad.Trans.Reader.ReaderT
                          Language.PureScript.Interactive.Types.PSCiConfig GHC.Types.IO))
                  (Command.REPL.$s$fMonadExceptionInputT_$s$fMonadStateT @ s)
                  (\ @ a
                     (x :: GHC.Types.IO a)
                     (s1 :: s)
                     (r4 :: Language.PureScript.Interactive.Types.PSCiConfig)
                     (s2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                   case x `cast` (GHC.Types.N:IO[0] <a>_R)
                          s2 of ds2 { (#,#) ipv ipv1 ->
                   (# ipv, (ipv1, s1) #) })
                    `cast`
                  (forall (a :: <*>_N).
                   <GHC.Types.IO a>_R
                   ->_R (<s>_R
                         ->_R (<Language.PureScript.Interactive.Types.PSCiConfig>_R
                               ->_R Sym (GHC.Types.N:IO[0]
                                             <(a,
                                               s)>_R)) ; Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                  <*>_N
                                                                  <Language.PureScript.Interactive.Types.PSCiConfig>_R
                                                                  <GHC.Types.IO>_R
                                                                  <(a,
                                                                    s)>_N)) ; Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                                       <s>_N
                                                                                       <Control.Monad.Trans.Reader.ReaderT
                                                                                          Language.PureScript.Interactive.Types.PSCiConfig
                                                                                          GHC.Types.IO>_R
                                                                                       <a>_N)) -}
891a264ecf2553629ee6a19a6bb1f57b
  $s$fMonadExceptionInputT_$s$fMonadStateT ::
    GHC.Base.Monad
      (Control.Monad.Trans.State.Strict.StateT
         s
         (Control.Monad.Trans.Reader.ReaderT
            Language.PureScript.Interactive.Types.PSCiConfig GHC.Types.IO))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ s.
                  @ (Control.Monad.Trans.State.Strict.StateT
                       s
                       (Control.Monad.Trans.Reader.ReaderT
                          Language.PureScript.Interactive.Types.PSCiConfig GHC.Types.IO))
                  (Command.REPL.$s$fApplicativeStateT @ s)
                  (Command.REPL.$s$fMonadExceptionInputT_$s$fMonadStateT_$c>>= @ s)
                  (Command.REPL.$s$fMonadExceptionInputT_$s$fMonadStateT_$c>> @ s)
                  (\ @ a (eta :: a) (eta1 :: s) ->
                   let {
                     m4 :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, (a, s) #)
                       {- Arity: 1 -}
                     = \ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                       (# s1, (eta, eta1) #)
                   } in
                   (\ (ds2 :: Language.PureScript.Interactive.Types.PSCiConfig) -> m4)
                     `cast`
                   ((<Language.PureScript.Interactive.Types.PSCiConfig>_R
                     ->_R Sym (GHC.Types.N:IO[0]
                                   <(a, s)>_R)) ; Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                           <*>_N
                                                           <Language.PureScript.Interactive.Types.PSCiConfig>_R
                                                           <GHC.Types.IO>_R
                                                           <(a, s)>_N)))
                    `cast`
                  (forall (a :: <*>_N).
                   <a>_R
                   ->_R Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                 <s>_N
                                 <Control.Monad.Trans.Reader.ReaderT
                                    Language.PureScript.Interactive.Types.PSCiConfig GHC.Types.IO>_R
                                 <a>_N))
                  (Command.REPL.$s$fMonadExceptionInputT_$s$fMonadStateT_$cfail
                     @ s) -}
92e175ce8924c3805e0a28e55c916d0f
  $s$fMonadExceptionInputT_$s$fMonadStateT_$c>> ::
    Control.Monad.Trans.State.Strict.StateT
      s
      (Control.Monad.Trans.Reader.ReaderT
         Language.PureScript.Interactive.Types.PSCiConfig GHC.Types.IO)
      a
    -> Control.Monad.Trans.State.Strict.StateT
         s
         (Control.Monad.Trans.Reader.ReaderT
            Language.PureScript.Interactive.Types.PSCiConfig GHC.Types.IO)
         b
    -> Control.Monad.Trans.State.Strict.StateT
         s
         (Control.Monad.Trans.Reader.ReaderT
            Language.PureScript.Interactive.Types.PSCiConfig GHC.Types.IO)
         b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C(C1(U(U,1*U(A,U)))))><L,C(C1(C1(U)))><L,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ a
                   @ b
                   (m4 :: Control.Monad.Trans.State.Strict.StateT
                            s
                            (Control.Monad.Trans.Reader.ReaderT
                               Language.PureScript.Interactive.Types.PSCiConfig GHC.Types.IO)
                            a)
                   (k :: Control.Monad.Trans.State.Strict.StateT
                           s
                           (Control.Monad.Trans.Reader.ReaderT
                              Language.PureScript.Interactive.Types.PSCiConfig GHC.Types.IO)
                           b)
                   (s1 :: s) ->
                 let {
                   m5 :: Control.Monad.Trans.Reader.ReaderT
                           Language.PureScript.Interactive.Types.PSCiConfig
                           GHC.Types.IO
                           (a, s)
                   = m4
                       `cast`
                     (Control.Monad.Trans.State.Strict.N:StateT[0]
                          <s>_N
                          <Control.Monad.Trans.Reader.ReaderT
                             Language.PureScript.Interactive.Types.PSCiConfig GHC.Types.IO>_R
                          <a>_N)
                       s1
                 } in
                 (\ (r4 :: Language.PureScript.Interactive.Types.PSCiConfig)
                    (s2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                  case (m5
                          `cast`
                        (Control.Monad.Trans.Reader.N:ReaderT[0]
                             <*>_N
                             <Language.PureScript.Interactive.Types.PSCiConfig>_R
                             <GHC.Types.IO>_R
                             <(a, s)>_N)
                          r4)
                         `cast`
                       (GHC.Types.N:IO[0] <(a, s)>_R)
                         s2 of ds2 { (#,#) ipv ipv1 ->
                  case ipv1 of wild { (,) a2 s' ->
                  ((k `cast`
                    (Control.Monad.Trans.State.Strict.N:StateT[0]
                         <s>_N
                         <Control.Monad.Trans.Reader.ReaderT
                            Language.PureScript.Interactive.Types.PSCiConfig GHC.Types.IO>_R
                         <b>_N)
                      s')
                     `cast`
                   (Control.Monad.Trans.Reader.N:ReaderT[0]
                        <*>_N
                        <Language.PureScript.Interactive.Types.PSCiConfig>_R
                        <GHC.Types.IO>_R
                        <(b, s)>_N)
                     r4)
                    `cast`
                  (GHC.Types.N:IO[0] <(b, s)>_R)
                    ipv } })
                   `cast`
                 ((<Language.PureScript.Interactive.Types.PSCiConfig>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <(b, s)>_R)) ; Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                         <*>_N
                                                         <Language.PureScript.Interactive.Types.PSCiConfig>_R
                                                         <GHC.Types.IO>_R
                                                         <(b, s)>_N)))
                  `cast`
                (forall (s :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.State.Strict.StateT
                    s
                    (Control.Monad.Trans.Reader.ReaderT
                       Language.PureScript.Interactive.Types.PSCiConfig GHC.Types.IO)
                    a>_R
                 ->_R <Control.Monad.Trans.State.Strict.StateT
                         s
                         (Control.Monad.Trans.Reader.ReaderT
                            Language.PureScript.Interactive.Types.PSCiConfig GHC.Types.IO)
                         b>_R
                 ->_R Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                               <s>_N
                               <Control.Monad.Trans.Reader.ReaderT
                                  Language.PureScript.Interactive.Types.PSCiConfig GHC.Types.IO>_R
                               <b>_N)) -}
41594c17554159dec28e91709315be97
  $s$fMonadExceptionInputT_$s$fMonadStateT_$c>>= ::
    Control.Monad.Trans.State.Strict.StateT
      s
      (Control.Monad.Trans.Reader.ReaderT
         Language.PureScript.Interactive.Types.PSCiConfig GHC.Types.IO)
      a
    -> (a
        -> Control.Monad.Trans.State.Strict.StateT
             s
             (Control.Monad.Trans.Reader.ReaderT
                Language.PureScript.Interactive.Types.PSCiConfig GHC.Types.IO)
             b)
    -> Control.Monad.Trans.State.Strict.StateT
         s
         (Control.Monad.Trans.Reader.ReaderT
            Language.PureScript.Interactive.Types.PSCiConfig GHC.Types.IO)
         b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C(C1(U(U,1*U(U,U)))))><L,C(C1(C1(C1(U))))><L,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ a
                   @ b
                   (m4 :: Control.Monad.Trans.State.Strict.StateT
                            s
                            (Control.Monad.Trans.Reader.ReaderT
                               Language.PureScript.Interactive.Types.PSCiConfig GHC.Types.IO)
                            a)
                   (k :: a
                         -> Control.Monad.Trans.State.Strict.StateT
                              s
                              (Control.Monad.Trans.Reader.ReaderT
                                 Language.PureScript.Interactive.Types.PSCiConfig GHC.Types.IO)
                              b)
                   (s1 :: s) ->
                 let {
                   m5 :: Control.Monad.Trans.Reader.ReaderT
                           Language.PureScript.Interactive.Types.PSCiConfig
                           GHC.Types.IO
                           (a, s)
                   = m4
                       `cast`
                     (Control.Monad.Trans.State.Strict.N:StateT[0]
                          <s>_N
                          <Control.Monad.Trans.Reader.ReaderT
                             Language.PureScript.Interactive.Types.PSCiConfig GHC.Types.IO>_R
                          <a>_N)
                       s1
                 } in
                 (\ (r4 :: Language.PureScript.Interactive.Types.PSCiConfig)
                    (s2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                  case (m5
                          `cast`
                        (Control.Monad.Trans.Reader.N:ReaderT[0]
                             <*>_N
                             <Language.PureScript.Interactive.Types.PSCiConfig>_R
                             <GHC.Types.IO>_R
                             <(a, s)>_N)
                          r4)
                         `cast`
                       (GHC.Types.N:IO[0] <(a, s)>_R)
                         s2 of ds2 { (#,#) ipv ipv1 ->
                  case ipv1 of wild { (,) a2 s' ->
                  (((k a2)
                      `cast`
                    (Control.Monad.Trans.State.Strict.N:StateT[0]
                         <s>_N
                         <Control.Monad.Trans.Reader.ReaderT
                            Language.PureScript.Interactive.Types.PSCiConfig GHC.Types.IO>_R
                         <b>_N)
                      s')
                     `cast`
                   (Control.Monad.Trans.Reader.N:ReaderT[0]
                        <*>_N
                        <Language.PureScript.Interactive.Types.PSCiConfig>_R
                        <GHC.Types.IO>_R
                        <(b, s)>_N)
                     r4)
                    `cast`
                  (GHC.Types.N:IO[0] <(b, s)>_R)
                    ipv } })
                   `cast`
                 ((<Language.PureScript.Interactive.Types.PSCiConfig>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <(b, s)>_R)) ; Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                         <*>_N
                                                         <Language.PureScript.Interactive.Types.PSCiConfig>_R
                                                         <GHC.Types.IO>_R
                                                         <(b, s)>_N)))
                  `cast`
                (forall (s :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.State.Strict.StateT
                    s
                    (Control.Monad.Trans.Reader.ReaderT
                       Language.PureScript.Interactive.Types.PSCiConfig GHC.Types.IO)
                    a>_R
                 ->_R <a
                       -> Control.Monad.Trans.State.Strict.StateT
                            s
                            (Control.Monad.Trans.Reader.ReaderT
                               Language.PureScript.Interactive.Types.PSCiConfig GHC.Types.IO)
                            b>_R
                 ->_R Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                               <s>_N
                               <Control.Monad.Trans.Reader.ReaderT
                                  Language.PureScript.Interactive.Types.PSCiConfig GHC.Types.IO>_R
                               <b>_N)) -}
dc71fe3c85c6fb1bb45aff7ab88d2016
  $s$fMonadExceptionInputT_$s$fMonadStateT_$cfail ::
    GHC.Base.String
    -> Control.Monad.Trans.State.Strict.StateT
         s
         (Control.Monad.Trans.Reader.ReaderT
            Language.PureScript.Interactive.Types.PSCiConfig GHC.Types.IO)
         a
  {- Arity: 1, Strictness: <L,U>, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, True)
                (\ @ s @ a (str :: GHC.Base.String) (ds2 :: s) ->
                 Command.REPL.$s$fApplicativeStateT_$s$fMonadReaderT_$cfail
                   @ Language.PureScript.Interactive.Types.PSCiConfig
                   @ (a, s)
                   str)
                  `cast`
                (forall (s :: <*>_N) (a :: <*>_N).
                 <GHC.Base.String>_R
                 ->_R Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                               <s>_N
                               <Control.Monad.Trans.Reader.ReaderT
                                  Language.PureScript.Interactive.Types.PSCiConfig GHC.Types.IO>_R
                               <a>_N)) -}
dc1fc56997e1eb3bae49391434950990
  $s$fMonadReaderrStateT ::
    Control.Monad.Reader.Class.MonadReader
      Language.PureScript.Interactive.Types.PSCiConfig
      (Control.Monad.Trans.State.Strict.StateT
         s
         (Control.Monad.Trans.Reader.ReaderT
            Language.PureScript.Interactive.Types.PSCiConfig GHC.Types.IO))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ s.
                  @ Language.PureScript.Interactive.Types.PSCiConfig
                  @ (Control.Monad.Trans.State.Strict.StateT
                       s
                       (Control.Monad.Trans.Reader.ReaderT
                          Language.PureScript.Interactive.Types.PSCiConfig GHC.Types.IO))
                  (Command.REPL.$s$fMonadExceptionInputT_$s$fMonadStateT @ s)
                  (\ (eta :: s)
                     (r4 :: Language.PureScript.Interactive.Types.PSCiConfig)
                     (s1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                   (# s1, (r4, eta) #))
                    `cast`
                  ((<s>_R
                    ->_R (<Language.PureScript.Interactive.Types.PSCiConfig>_R
                          ->_R Sym (GHC.Types.N:IO[0]
                                        <(Language.PureScript.Interactive.Types.PSCiConfig,
                                          s)>_R)) ; Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                             <*>_N
                                                             <Language.PureScript.Interactive.Types.PSCiConfig>_R
                                                             <GHC.Types.IO>_R
                                                             <(Language.PureScript.Interactive.Types.PSCiConfig,
                                                               s)>_N)) ; Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                                  <s>_N
                                                                                  <Control.Monad.Trans.Reader.ReaderT
                                                                                     Language.PureScript.Interactive.Types.PSCiConfig
                                                                                     GHC.Types.IO>_R
                                                                                  <Language.PureScript.Interactive.Types.PSCiConfig>_N))
                  (\ @ a
                     (eta :: Language.PureScript.Interactive.Types.PSCiConfig
                             -> Language.PureScript.Interactive.Types.PSCiConfig) ->
                   Control.Monad.Trans.State.Strict.mapStateT
                     @ (Control.Monad.Trans.Reader.ReaderT
                          Language.PureScript.Interactive.Types.PSCiConfig GHC.Types.IO)
                     @ a
                     @ s
                     @ (Control.Monad.Trans.Reader.ReaderT
                          Language.PureScript.Interactive.Types.PSCiConfig GHC.Types.IO)
                     @ a
                     (Control.Monad.Trans.Reader.withReaderT
                        @ *
                        @ Language.PureScript.Interactive.Types.PSCiConfig
                        @ Language.PureScript.Interactive.Types.PSCiConfig
                        @ GHC.Types.IO
                        @ (a, s)
                        eta))
                  (\ @ a
                     (eta :: Language.PureScript.Interactive.Types.PSCiConfig -> a)
                     (s1 :: s)
                     (r4 :: Language.PureScript.Interactive.Types.PSCiConfig)
                     (s2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                   (# s2, (eta r4, s1) #))
                    `cast`
                  (forall (a :: <*>_N).
                   <Language.PureScript.Interactive.Types.PSCiConfig -> a>_R
                   ->_R (<s>_R
                         ->_R (<Language.PureScript.Interactive.Types.PSCiConfig>_R
                               ->_R Sym (GHC.Types.N:IO[0]
                                             <(a,
                                               s)>_R)) ; Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                  <*>_N
                                                                  <Language.PureScript.Interactive.Types.PSCiConfig>_R
                                                                  <GHC.Types.IO>_R
                                                                  <(a,
                                                                    s)>_N)) ; Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                                       <s>_N
                                                                                       <Control.Monad.Trans.Reader.ReaderT
                                                                                          Language.PureScript.Interactive.Types.PSCiConfig
                                                                                          GHC.Types.IO>_R
                                                                                       <a>_N)) -}
0bf88f06b1dff43842161ea7abb444b8
  $s$fMonadStatesStateT ::
    Control.Monad.State.Class.MonadState
      s
      (Control.Monad.Trans.State.Strict.StateT
         s
         (Control.Monad.Trans.Reader.ReaderT
            Language.PureScript.Interactive.Types.PSCiConfig GHC.Types.IO))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ s.
                  @ s
                  @ (Control.Monad.Trans.State.Strict.StateT
                       s
                       (Control.Monad.Trans.Reader.ReaderT
                          Language.PureScript.Interactive.Types.PSCiConfig GHC.Types.IO))
                  (Command.REPL.$s$fMonadExceptionInputT_$s$fMonadStateT @ s)
                  (\ (x :: s) ->
                   let {
                     m4 :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, (s, s) #)
                       {- Arity: 1 -}
                     = \ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld) -> (# s1, (x, x) #)
                   } in
                   (\ (ds2 :: Language.PureScript.Interactive.Types.PSCiConfig) -> m4)
                     `cast`
                   ((<Language.PureScript.Interactive.Types.PSCiConfig>_R
                     ->_R Sym (GHC.Types.N:IO[0]
                                   <(s, s)>_R)) ; Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                           <*>_N
                                                           <Language.PureScript.Interactive.Types.PSCiConfig>_R
                                                           <GHC.Types.IO>_R
                                                           <(s, s)>_N)))
                    `cast`
                  (Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                            <s>_N
                            <Control.Monad.Trans.Reader.ReaderT
                               Language.PureScript.Interactive.Types.PSCiConfig GHC.Types.IO>_R
                            <s>_N))
                  (Control.Monad.Trans.State.Strict.put
                     @ (Control.Monad.Trans.Reader.ReaderT
                          Language.PureScript.Interactive.Types.PSCiConfig GHC.Types.IO)
                     @ s
                     (Command.REPL.$s$fApplicativeStateT_$s$fMonadReaderT
                        @ Language.PureScript.Interactive.Types.PSCiConfig))
                  (\ @ a ->
                   Control.Monad.Trans.State.Strict.state
                     @ (Control.Monad.Trans.Reader.ReaderT
                          Language.PureScript.Interactive.Types.PSCiConfig GHC.Types.IO)
                     @ s
                     @ a
                     (Command.REPL.$s$fApplicativeStateT_$s$fMonadReaderT
                        @ Language.PureScript.Interactive.Types.PSCiConfig)) -}
49f1cc4763832993ef62649582bf2bac
  $tc'Backend :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13760887338810411219##
                   12981407536386226344##
                   Command.REPL.$trModule
                   Command.REPL.$tc'Backend2
                   1#
                   Command.REPL.$tc'Backend1) -}
64897a1c9c699d6940f5dfe9c19cfabc
  $tc'Backend1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
4ce20cda4e4d641fe3a053d29552b8b9
  $tc'Backend2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Command.REPL.$tc'Backend3) -}
943c94ab27d9d4baa03c7bec641ea754
  $tc'Backend3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Backend"#) -}
d6898dfee6ecda9f8e7580cb7eaac066
  $tc'BrowserState :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3189086195784769547##
                   8283621803259205271##
                   Command.REPL.$trModule
                   Command.REPL.$tc'BrowserState2
                   0#
                   Command.REPL.$tc'BrowserState1) -}
a32a2fc579d8f246f22c8f074ad79482
  $tc'BrowserState1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
3d1fe90c4047d56d82191f82558db3c5
  $tc'BrowserState2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Command.REPL.$tc'BrowserState3) -}
5d16339fb03e0a6ef44b6e60f834f4b5
  $tc'BrowserState3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'BrowserState"#) -}
d916cac8c9be3344c2ac32d40264c2f3
  $tc'Eval :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6598487404856436816##
                   6846980860331584034##
                   Command.REPL.$trModule
                   Command.REPL.$tc'Eval2
                   0#
                   Command.REPL.$tc'Eval1) -}
89d9c1de1f29f7051f9b71f9be996426
  $tc'Eval1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
ee236e970a4a438e3da79ab43b150b9a
  $tc'Eval2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Command.REPL.$tc'Eval3) -}
01b92ed3d645b0a878c8a599170a5901
  $tc'Eval3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Eval"#) -}
1452abcbcb857e662d94c4b8380d0eb0
  $tc'PSCiOptions :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17729660712139518179##
                   3174629459597284010##
                   Command.REPL.$trModule
                   Command.REPL.$tc'PSCiOptions2
                   0#
                   Command.REPL.$tc'PSCiOptions1) -}
353b6cb6dd111c21bb271b59177f1171
  $tc'PSCiOptions1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
189f571402d6c2aed5585455157e2ce6
  $tc'PSCiOptions2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Command.REPL.$tc'PSCiOptions3) -}
fdd968f4ca9bfb23668daeee6f9d5101
  $tc'PSCiOptions3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'PSCiOptions"#) -}
479b853667b1caa80e0f50998258c6d8
  $tc'Refresh :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6965422752924318671##
                   17763872385557144834##
                   Command.REPL.$trModule
                   Command.REPL.$tc'Refresh2
                   0#
                   Command.REPL.$tc'Refresh1) -}
2f523280a0bf7270f42515150e026088
  $tc'Refresh1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
0660c000280d7afa1ce1ea61bdf00a3a
  $tc'Refresh2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Command.REPL.$tc'Refresh3) -}
e20d8dcb362b61d09f9d68bba61481ac
  $tc'Refresh3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Refresh"#) -}
c5d0dcd389eb0314f8f9724462ab8349
  $tcBackend :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8341706969156247744##
                   11762830227035295748##
                   Command.REPL.$trModule
                   Command.REPL.$tcBackend1
                   0#
                   GHC.Types.krep$*) -}
46616cc08e6d62e7ba64a2a85adcd9d0
  $tcBackend1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Command.REPL.$tcBackend2) -}
51eac7f93d8cab79fe5348a59be19cdc
  $tcBackend2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Backend"#) -}
1b33748b27412890741a33591d7a92eb
  $tcBrowserCommand :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4067969458879214008##
                   4693048680052983879##
                   Command.REPL.$trModule
                   Command.REPL.$tcBrowserCommand1
                   0#
                   GHC.Types.krep$*) -}
bbac065f1b8ea957aaeffb388ea74553
  $tcBrowserCommand1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Command.REPL.$tcBrowserCommand2) -}
49649c03827c38a814276feb2f61c1f1
  $tcBrowserCommand2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("BrowserCommand"#) -}
c0b7972db36f6765188780910e6c4f4b
  $tcBrowserState :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14355656106555991155##
                   16368964133238239009##
                   Command.REPL.$trModule
                   Command.REPL.$tcBrowserState1
                   0#
                   GHC.Types.krep$*) -}
4e716fc9dad71b10d4c0061adaf39e2e
  $tcBrowserState1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Command.REPL.$tcBrowserState2) -}
1c997ba7b97e24969876622f8f9d9676
  $tcBrowserState2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("BrowserState"#) -}
ae2e87cb831c05660ad2a83cb544e017
  $tcPSCiOptions :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10310842525658923748##
                   12563467105144950964##
                   Command.REPL.$trModule
                   Command.REPL.$tcPSCiOptions1
                   0#
                   GHC.Types.krep$*) -}
5e981c774e018a59c6973398f0550ae5
  $tcPSCiOptions1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Command.REPL.$tcPSCiOptions2) -}
c16ada04703705cdc1ce995a8b013e0d
  $tcPSCiOptions2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("PSCiOptions"#) -}
936d52232ae2205195017aa11da59282
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Command.REPL.$trModule3
                   Command.REPL.$trModule1) -}
9020731411f2aeaaa874b2504ef257c2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Command.REPL.$trModule2) -}
3c916b1a73601daf505a4c5197c4e1ee
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Command.REPL"#) -}
ac70ca8fbc551cfbd02fb92dbea1077c
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Command.REPL.$trModule4) -}
245c0eab55e3338de4759c74f5538433
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
396e80e1012cb83883ee0b300a76e925
  data Backend
    = forall state.
      Backend {_backendSetup :: GHC.Types.IO state,
               _backendEval :: state -> GHC.Base.String -> GHC.Types.IO (),
               _backendReload :: state -> GHC.Types.IO (),
               _backendShutdown :: state -> GHC.Types.IO ()}
7a298dcf39c4a96817d6d8d96dccb796
  data BrowserCommand
    = Eval (GHC.MVar.MVar GHC.Base.String) | Refresh
de67bc35fd19ddce816e4d34d0a4b98d
  data BrowserState
    = BrowserState {browserCommands :: Control.Concurrent.STM.TChan.TChan
                                         Command.REPL.BrowserCommand,
                    browserShutdownNotice :: GHC.MVar.MVar (),
                    browserIndexJS :: GHC.Conc.Sync.TVar
                                        (GHC.Base.Maybe GHC.Base.String),
                    browserBundleJS :: GHC.Conc.Sync.TVar
                                         (GHC.Base.Maybe GHC.Base.String)}
99a6c2d8f8222de050bc89ab2bd557b2
  data PSCiOptions
    = PSCiOptions {psciInputGlob :: [GHC.Base.String],
                   psciBackend :: Command.REPL.Backend}
396e80e1012cb83883ee0b300a76e925
  _backendEval :: ()
  RecSel Left Command.REPL.Backend <naughty>
  {- HasNoCafRefs,
     Unfolding: InlineRule (0, True, True) GHC.Tuple.() -}
396e80e1012cb83883ee0b300a76e925
  _backendReload :: ()
  RecSel Left Command.REPL.Backend <naughty>
  {- HasNoCafRefs,
     Unfolding: InlineRule (0, True, True) GHC.Tuple.() -}
396e80e1012cb83883ee0b300a76e925
  _backendSetup :: ()
  RecSel Left Command.REPL.Backend <naughty>
  {- HasNoCafRefs,
     Unfolding: InlineRule (0, True, True) GHC.Tuple.() -}
396e80e1012cb83883ee0b300a76e925
  _backendShutdown :: ()
  RecSel Left Command.REPL.Backend <naughty>
  {- HasNoCafRefs,
     Unfolding: InlineRule (0, True, True) GHC.Tuple.() -}
de67bc35fd19ddce816e4d34d0a4b98d
  browserBundleJS ::
    Command.REPL.BrowserState
    -> GHC.Conc.Sync.TVar (GHC.Base.Maybe GHC.Base.String)
  RecSel Left Command.REPL.BrowserState
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLS),1*U(A,A,A,1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds2 :: Command.REPL.BrowserState) ->
                 case ds2 of wild { Command.REPL.BrowserState ds3 ds4 ds5 ds6 ->
                 ds6 }) -}
de67bc35fd19ddce816e4d34d0a4b98d
  browserCommands ::
    Command.REPL.BrowserState
    -> Control.Concurrent.STM.TChan.TChan Command.REPL.BrowserCommand
  RecSel Left Command.REPL.BrowserState
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(1*U(U,U),A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds2 :: Command.REPL.BrowserState) ->
                 case ds2 of wild { Command.REPL.BrowserState ds3 ds4 ds5 ds6 ->
                 ds3 }) -}
de67bc35fd19ddce816e4d34d0a4b98d
  browserIndexJS ::
    Command.REPL.BrowserState
    -> GHC.Conc.Sync.TVar (GHC.Base.Maybe GHC.Base.String)
  RecSel Left Command.REPL.BrowserState
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSL),1*U(A,A,1*U(U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds2 :: Command.REPL.BrowserState) ->
                 case ds2 of wild { Command.REPL.BrowserState ds3 ds4 ds5 ds6 ->
                 ds5 }) -}
de67bc35fd19ddce816e4d34d0a4b98d
  browserShutdownNotice ::
    Command.REPL.BrowserState -> GHC.MVar.MVar ()
  RecSel Left Command.REPL.BrowserState
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLL),1*U(A,1*U(U),A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds2 :: Command.REPL.BrowserState) ->
                 case ds2 of wild { Command.REPL.BrowserState ds3 ds4 ds5 ds6 ->
                 ds4 }) -}
1515846a89e14dd4ea32af0e9df83c87
  command :: Options.Applicative.Types.Parser (GHC.Types.IO ())
  {- Unfolding: (Options.Applicative.Types.$fApplicativeParser_$cfmap
                   @ Command.REPL.PSCiOptions
                   @ (GHC.Types.IO ())
                   Command.REPL.command66
                     `cast`
                   (<Command.REPL.PSCiOptions>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                   Command.REPL.command1) -}
047b0e19718d6d5c5ba8ff08a2f3468c
  command1 ::
    Options.Applicative.Types.Parser Command.REPL.PSCiOptions
  {- Unfolding: (Options.Applicative.Types.MultP
                   @ Command.REPL.PSCiOptions
                   @ Command.REPL.PSCiOptions
                   (Options.Applicative.Extra.helper @ Command.REPL.PSCiOptions)
                   Command.REPL.command2) -}
e2e01086cd0bfa39eae6fff2eb839afc
  command10 :: Options.Applicative.Types.OptProperties
  {- Strictness: m,
     Unfolding: (Options.Applicative.Types.OptProperties
                   Options.Applicative.Types.Visible
                   Command.REPL.command_lvl
                   Command.REPL.command_var
                   (GHC.Base.Nothing @ GHC.Base.String)
                   (GHC.Base.Nothing
                      @ (Text.PrettyPrint.ANSI.Leijen.Internal.Doc
                         -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc))) -}
4ac91dc4c7f57563978893f13fe2fc95
  command11 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("OPTS"#) -}
7dbf9af531018a410b9d175e37ca17cd
  command12 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Flags to pass to node, separated by spaces"#) -}
a5e25f1c953432f9694c6699ac6249b6
  command13 :: Options.Applicative.Types.OptReader [GHC.Base.String]
  {- Strictness: m1,
     Unfolding: (Options.Applicative.Types.OptReader
                   @ [GHC.Base.String]
                   Command.REPL.command16
                   Command.REPL.command14
                   Options.Applicative.Types.ExpectsArgError) -}
cc64bdace2103ec6e32c0c6b66a6ddad
  command14 :: Options.Applicative.Types.CReader [GHC.Base.String]
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Options.Applicative.Types.CReader
                   @ [GHC.Base.String]
                   Options.Applicative.Types.$fMonoidCompleter3
                     `cast`
                   ((<GHC.Base.String>_R
                     ->_R Sym (GHC.Types.N:IO[0]
                                   <[GHC.Base.String]>_R)) ; Sym (Options.Applicative.Types.N:Completer[0]))
                   Command.REPL.command15
                     `cast`
                   ((<GHC.Base.String>_R
                     ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                   <Data.Either.Either
                                      Options.Applicative.Types.ParseError
                                      [GHC.Base.String]>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                       <Options.Applicative.Types.ParseError>_N
                                                                       <Data.Functor.Identity.Identity>_R
                                                                       <[GHC.Base.String]>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                           <*>_N
                                                                                                           <GHC.Base.String>_R
                                                                                                           <Control.Monad.Trans.Except.Except
                                                                                                              Options.Applicative.Types.ParseError>_R
                                                                                                           <[GHC.Base.String]>_N) ; Sym (Options.Applicative.Types.N:ReadM[0]) <[GHC.Base.String]>_N))) -}
e9a01707e94818fc12f83577e9ce6214
  command15 ::
    GHC.Base.String
    -> Data.Either.Either
         Options.Applicative.Types.ParseError [GHC.Base.String]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*U>m2,
     Unfolding: (\ (eta :: GHC.Base.String) ->
                 Data.Either.Right
                   @ Options.Applicative.Types.ParseError
                   @ [GHC.Base.String]
                   (Data.OldList.words eta)) -}
72918041eb6c35b74bab47a940a639d1
  command16 :: [Options.Applicative.Types.OptName]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Options.Applicative.Types.OptName
                   Command.REPL.command_n
                   (GHC.Types.[] @ Options.Applicative.Types.OptName)) -}
31f6784cca1355411b097ff01ec55135
  command17 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString#
                   Command.REPL.command18) -}
4450149685ac26ed305e991bdbed0141
  command18 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("node-opts"#) -}
f45d5b48f7509e23f79b55a75f60aef7
  command19 ::
    Options.Applicative.Types.Parser
      ([GHC.Base.String] -> Command.REPL.Backend)
  {- Unfolding: (Options.Applicative.Types.$fApplicativeParser_$cfmap
                   @ (GHC.Base.Maybe GHC.IO.FilePath)
                   @ ([GHC.Base.String] -> Command.REPL.Backend)
                   Command.REPL.command35
                   Command.REPL.command20) -}
61f1be1adb651ee7e87c071565507672
  command2 ::
    Options.Applicative.Types.Parser Command.REPL.PSCiOptions
  {- Unfolding: (Options.Applicative.Types.MultP
                   @ Command.REPL.PSCiOptions
                   @ Command.REPL.Backend
                   Command.REPL.command58
                   Command.REPL.command3) -}
96b228c7886394440ee184ec3b8b6f50
  command20 ::
    Options.Applicative.Types.Parser (GHC.Base.Maybe GHC.IO.FilePath)
  {- Strictness: m4,
     Unfolding: (Options.Applicative.Types.AltP
                   @ (GHC.Base.Maybe GHC.IO.FilePath)
                   Command.REPL.command23
                   Command.REPL.command21) -}
fcbeb1168823664536b753197c538e9f
  command21 ::
    Options.Applicative.Types.Parser (GHC.Base.Maybe GHC.IO.FilePath)
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Options.Applicative.Types.NilP
                   @ (GHC.Base.Maybe GHC.IO.FilePath)
                   Command.REPL.command22) -}
37d7b2ac137ae12e3a1921040519e9a7
  command22 :: GHC.Base.Maybe (GHC.Base.Maybe GHC.IO.FilePath)
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ (GHC.Base.Maybe GHC.IO.FilePath)
                   (GHC.Base.Nothing @ GHC.IO.FilePath)) -}
221e5f836eeda0255bb98cef4d8c0852
  command23 ::
    Options.Applicative.Types.Parser (GHC.Base.Maybe GHC.IO.FilePath)
  {- Unfolding: (Options.Applicative.Types.$fApplicativeParser_$cfmap
                   @ GHC.IO.FilePath
                   @ (GHC.Base.Maybe GHC.IO.FilePath)
                   (GHC.Base.Just @ GHC.IO.FilePath)
                   Command.REPL.command24) -}
36fac12aa7f7934c0212103f27aeaa00
  command24 :: Options.Applicative.Types.Parser GHC.IO.FilePath
  {- Strictness: m4,
     Unfolding: (Options.Applicative.Types.AltP
                   @ GHC.IO.FilePath
                   Command.REPL.command25
                   (Options.Applicative.Types.$fAlternativeParser_$cempty
                      @ GHC.IO.FilePath)) -}
38fc75c935e381b65192da5440f8aae4
  command25 :: Options.Applicative.Types.Parser GHC.IO.FilePath
  {- Strictness: m2,
     Unfolding: (Options.Applicative.Types.OptP
                   @ GHC.IO.FilePath
                   Command.REPL.command26) -}
3de9a85a5eaf032116d393ee30b5ee29
  command26 :: Options.Applicative.Types.Option GHC.IO.FilePath
  {- Strictness: m,
     Unfolding: (Options.Applicative.Types.Option
                   @ GHC.IO.FilePath
                   Command.REPL.command30
                   Command.REPL.command27) -}
2a8347602762d1bfd0a1cc5e06c84cb0
  command27 :: Options.Applicative.Types.OptProperties
  {- Strictness: m,
     Unfolding: (Options.Applicative.Types.OptProperties
                   Options.Applicative.Types.Visible
                   Command.REPL.command_lvl1
                   Command.REPL.command_var1
                   (GHC.Base.Nothing @ GHC.Base.String)
                   (GHC.Base.Nothing
                      @ (Text.PrettyPrint.ANSI.Leijen.Internal.Doc
                         -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc))) -}
47cac45b5d2d3c1c72404224b6c53fa5
  command28 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("FILE"#) -}
5af64fca03906c3c980294acf533ba02
  command29 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Path to the Node executable"#) -}
c6b5bb5f8c0d7f3e0fef140709ad8b5b
  command3 :: Options.Applicative.Types.Parser Command.REPL.Backend
  {- Strictness: m4,
     Unfolding: (Options.Applicative.Types.AltP
                   @ Command.REPL.Backend
                   Command.REPL.command44
                   Command.REPL.command4) -}
f1ea41f05bcacbdf088a3af31e06a5bd
  command30 :: Options.Applicative.Types.OptReader GHC.IO.FilePath
  {- Strictness: m1,
     Unfolding: (Options.Applicative.Types.OptReader
                   @ GHC.IO.FilePath
                   Command.REPL.command32
                   Command.REPL.command31
                   Options.Applicative.Types.ExpectsArgError) -}
b9ac43ae23a5bd41fe62ece6f908f289
  command31 :: Options.Applicative.Types.CReader GHC.IO.FilePath
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Options.Applicative.Types.CReader
                   @ GHC.IO.FilePath
                   Options.Applicative.Types.$fMonoidCompleter3
                     `cast`
                   ((<GHC.Base.String>_R
                     ->_R Sym (GHC.Types.N:IO[0]
                                   <[GHC.Base.String]>_R)) ; Sym (Options.Applicative.Types.N:Completer[0]))
                   (Data.Either.Right
                      @ Options.Applicative.Types.ParseError
                      @ GHC.IO.FilePath)
                     `cast`
                   ((<GHC.Base.String>_R
                     ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                   <Data.Either.Either
                                      Options.Applicative.Types.ParseError
                                      GHC.IO.FilePath>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                     <Options.Applicative.Types.ParseError>_N
                                                                     <Data.Functor.Identity.Identity>_R
                                                                     <GHC.IO.FilePath>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                       <*>_N
                                                                                                       <GHC.Base.String>_R
                                                                                                       <Control.Monad.Trans.Except.Except
                                                                                                          Options.Applicative.Types.ParseError>_R
                                                                                                       <GHC.IO.FilePath>_N) ; Sym (Options.Applicative.Types.N:ReadM[0]) <GHC.IO.FilePath>_N))) -}
80e31e22cbc7b06c7b42cd0e43aa357a
  command32 :: [Options.Applicative.Types.OptName]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Options.Applicative.Types.OptName
                   Command.REPL.command_n1
                   (GHC.Types.[] @ Options.Applicative.Types.OptName)) -}
a46be90206a0104d7be20fbfb98f5cf2
  command33 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString#
                   Command.REPL.command34) -}
67a841ed30e7a835de632440b5f3d1e6
  command34 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("node-path"#) -}
4cb26b8de15aa62ac55dfcca81d83bf8
  command35 ::
    GHC.Base.Maybe GHC.IO.FilePath
    -> [GHC.Base.String] -> Command.REPL.Backend
  {- Arity: 2, Strictness: <L,U><L,1*U>,
     Unfolding: (\ (nodePath :: GHC.Base.Maybe GHC.IO.FilePath)
                   (nodeArgs :: [GHC.Base.String]) ->
                 let {
                   lvl125 :: [[GHC.Types.Char]]
                   = GHC.Base.++ @ [GHC.Types.Char] nodeArgs Command.REPL.command43
                 } in
                 Command.REPL.Backend
                   @ ()
                   Command.REPL.command42 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))
                   (\ (ds2 :: ())
                      (ds3 :: GHC.Base.String)
                      (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case System.IO.appendFile2
                           @ ()
                           Language.PureScript.Interactive.Module.indexFile
                           GHC.IO.IOMode.WriteMode
                           Command.REPL.command39
                             `cast`
                           (<GHC.IO.Handle.Types.Handle>_R
                            ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                           eta of ds4 { (#,#) ipv ipv1 ->
                    let {
                      $s$j :: [GHC.Types.Char]
                              -> GHC.Prim.State# GHC.Prim.RealWorld
                              -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                        <join 2> {- Arity: 2, Strictness: <L,U><S,U> -}
                      = \ (sc :: [GHC.Types.Char])[OneShot]
                          (sc1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                        case System.Process.readCreateProcessWithExitCode1
                               (System.Process.Common.CreateProcess
                                  (System.Process.Common.RawCommand sc lvl125)
                                  (GHC.Base.Nothing @ GHC.IO.FilePath)
                                  (GHC.Base.Nothing @ [(GHC.Base.String, GHC.Base.String)])
                                  System.Process.Common.Inherit
                                  System.Process.Common.Inherit
                                  System.Process.Common.Inherit
                                  GHC.Types.False
                                  GHC.Types.False
                                  GHC.Types.False
                                  GHC.Types.False
                                  GHC.Types.False
                                  GHC.Types.False
                                  (GHC.Base.Nothing @ System.Posix.Types.GroupID)
                                  (GHC.Base.Nothing @ System.Posix.Types.UserID)
                                  GHC.Types.False)
                               (GHC.Types.[] @ GHC.Types.Char)
                               sc1 of ds5 { (#,#) ipv2 ipv3 ->
                        case ipv3 of wild { (,,) ds6 out ds7 ->
                        case ds6 of wild1 {
                          GHC.IO.Exception.ExitSuccess
                          -> GHC.IO.Handle.Text.hPutStr2
                               GHC.IO.Handle.FD.stdout
                               out
                               GHC.Types.True
                               ipv2
                          GHC.IO.Exception.ExitFailure ds8
                          -> GHC.IO.Handle.Text.hPutStr2
                               GHC.IO.Handle.FD.stdout
                               ds7
                               GHC.Types.True
                               ipv2 } } }
                    } in
                    case nodePath of wild {
                      GHC.Base.Nothing
                      -> case System.Directory.findExecutable1
                                Language.PureScript.Interactive.IO.findNodeProcess4
                                ipv of ds5 { (#,#) ipv2 ipv3 ->
                         case ipv3 of wild1 {
                           GHC.Base.Nothing
                           -> case System.Directory.findExecutable1
                                     Language.PureScript.Interactive.IO.findNodeProcess2
                                     ipv2 of ds6 { (#,#) ipv4 ipv5 ->
                              case ipv5 of wild2 {
                                GHC.Base.Nothing
                                -> GHC.IO.Handle.Text.hPutStr2
                                     GHC.IO.Handle.FD.stdout
                                     Command.REPL.command37
                                     GHC.Types.True
                                     ipv4
                                GHC.Base.Just ds7 -> $s$j ds7 ipv4 } }
                           GHC.Base.Just ds6 -> $s$j ds6 ipv2 } }
                      GHC.Base.Just x -> $s$j x ipv } })
                     `cast`
                   (<()>_R
                    ->_R <GHC.Base.String>_R
                    ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                   Command.REPL.command36
                     `cast`
                   (<()>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                   Command.REPL.command36
                     `cast`
                   (<()>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R))) -}
ecaf042ff21ee4d62ee558e7ebbe1aac
  command36 ::
    ()
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><S,U>,
     Unfolding: InlineRule (2, True, True)
                (\ (ds2 :: ()) (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# s, GHC.Tuple.() #)) -}
7951be4f0f24ec325da6b9fb8369b44f
  command37 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Command.REPL.command38) -}
d4bdf8cf0b4c60abf417b70320de482c
  command38 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Couldn't find node.js"#) -}
3cb44bbbef3f90e722fddb20f91dba08
  command39 ::
    GHC.IO.Handle.Types.Handle
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <L,U>,
     Unfolding: (\ (hdl :: GHC.IO.Handle.Types.Handle)[OneShot] ->
                 GHC.IO.Handle.Text.hPutStr2
                   hdl
                   Command.REPL.command40
                   GHC.Types.False) -}
6121376882ce0774fb5910f65fcb11e7
  command4 :: Options.Applicative.Types.Parser Command.REPL.Backend
  {- Unfolding: (Options.Applicative.Types.MultP
                   @ Command.REPL.Backend
                   @ [GHC.Base.String]
                   Command.REPL.command19
                   Command.REPL.command5) -}
cd0d9383709c51848ea06faf3454a259
  command40 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Command.REPL.command41) -}
3d6e0783de4c31e7b34780dcb21bf59c
  command41 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("require('$PSCI')['$main']();"#) -}
7b536f6dd4b29a7fdf0521dee296e6a1
  command42 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# s, GHC.Tuple.() #)) -}
483a23fb042c74462c3f8ea7899e2db0
  command43 :: [[GHC.Types.Char]]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ [GHC.Types.Char]
                   Language.PureScript.Interactive.Module.indexFile
                   (GHC.Types.[] @ [GHC.Types.Char])) -}
e0dac0054cfb6356b8bdf7469ded16ae
  command44 :: Options.Applicative.Types.Parser Command.REPL.Backend
  {- Unfolding: (Options.Applicative.Types.$fApplicativeParser_$cfmap
                   @ GHC.Types.Int
                   @ Command.REPL.Backend
                   Command.REPL.command57
                   Command.REPL.command45) -}
8cedc9159ea17bee9a9a01e4c4f679fc
  command45 :: Options.Applicative.Types.Parser GHC.Types.Int
  {- Strictness: m4,
     Unfolding: (Options.Applicative.Types.AltP
                   @ GHC.Types.Int
                   Command.REPL.command46
                   (Options.Applicative.Types.$fAlternativeParser_$cempty
                      @ GHC.Types.Int)) -}
853432910181b54a6315d2f43867d528
  command46 :: Options.Applicative.Types.Parser GHC.Types.Int
  {- Strictness: m2,
     Unfolding: (Options.Applicative.Types.OptP
                   @ GHC.Types.Int
                   Command.REPL.command47) -}
177a82cb6226ad13b9a981400dc1577e
  command47 :: Options.Applicative.Types.Option GHC.Types.Int
  {- Strictness: m,
     Unfolding: (Options.Applicative.Types.Option
                   @ GHC.Types.Int
                   Command.REPL.command50
                   Command.REPL.command48) -}
f472167df949821bd253a144700963cd
  command48 :: Options.Applicative.Types.OptProperties
  {- Strictness: m,
     Unfolding: (Options.Applicative.Types.OptProperties
                   Options.Applicative.Types.Visible
                   Command.REPL.command_lvl2
                   Options.Applicative.Builder.abortOption_var
                   (GHC.Base.Nothing @ GHC.Base.String)
                   (GHC.Base.Nothing
                      @ (Text.PrettyPrint.ANSI.Leijen.Internal.Doc
                         -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc))) -}
503e871a446468e33d6899564d0a4fc2
  command49 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("The web server port"#) -}
c25c819899b4cadd8d5eb73a4d5d8583
  command5 :: Options.Applicative.Types.Parser [GHC.Base.String]
  {- Strictness: m4,
     Unfolding: (Options.Applicative.Types.AltP
                   @ [GHC.Base.String]
                   Command.REPL.command8
                   Command.REPL.command6) -}
09a2354a87994a889e66c70e8bde4e7c
  command50 :: Options.Applicative.Types.OptReader GHC.Types.Int
  {- Strictness: m1,
     Unfolding: (Options.Applicative.Types.OptReader
                   @ GHC.Types.Int
                   Command.REPL.command53
                   Command.REPL.command51
                   Options.Applicative.Types.ExpectsArgError) -}
7c4782141b50cf9da228b7d2db17d50b
  command51 :: Options.Applicative.Types.CReader GHC.Types.Int
  {- Strictness: m,
     Unfolding: (Options.Applicative.Types.CReader
                   @ GHC.Types.Int
                   Options.Applicative.Types.$fMonoidCompleter3
                     `cast`
                   ((<GHC.Base.String>_R
                     ->_R Sym (GHC.Types.N:IO[0]
                                   <[GHC.Base.String]>_R)) ; Sym (Options.Applicative.Types.N:Completer[0]))
                   Command.REPL.command52
                     `cast`
                   (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                             <*>_N
                             <GHC.Base.String>_R
                             <Control.Monad.Trans.Except.Except
                                Options.Applicative.Types.ParseError>_R
                             <GHC.Types.Int>_N) ; Sym (Options.Applicative.Types.N:ReadM[0]) <GHC.Types.Int>_N)) -}
7805aead9061d6a0b16af6cb437b0b11
  command52 ::
    GHC.Base.String
    -> Control.Monad.Trans.Except.Except
         Options.Applicative.Types.ParseError GHC.Types.Int
  {- Arity: 1,
     Unfolding: (Options.Applicative.Builder.auto1
                   @ GHC.Types.Int
                   GHC.Read.$fReadInt) -}
0f9db6793f5b33485ace7c8fb627c7b1
  command53 :: [Options.Applicative.Types.OptName]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Options.Applicative.Types.OptName
                   Command.REPL.command_n3
                   Command.REPL.command54) -}
4ea43747b10d5fb83e29a51e84ace64e
  command54 :: [Options.Applicative.Types.OptName]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Options.Applicative.Types.OptName
                   Command.REPL.command_n2
                   (GHC.Types.[] @ Options.Applicative.Types.OptName)) -}
1ab5bef397116593d27f95b829fa637d
  command55 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString#
                   Command.REPL.command56) -}
245b2f3e55d0eb9fdf94653ade47edec
  command56 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("port"#) -}
833dc332d82217eedd93b38201a5e293
  command57 :: GHC.Types.Int -> Command.REPL.Backend
  {- Arity: 1, Strictness: <L,U(U)> -}
18daf610e6edac591fb8d18b16479d10
  command58 ::
    Options.Applicative.Types.Parser
      (Command.REPL.Backend -> Command.REPL.PSCiOptions)
  {- Unfolding: (Options.Applicative.Types.$fApplicativeParser_$cfmap
                   @ [GHC.Base.String]
                   @ (Command.REPL.Backend -> Command.REPL.PSCiOptions)
                   Command.REPL.PSCiOptions
                   ((Options.Applicative.Types.manyM
                       @ GHC.IO.FilePath
                       Command.REPL.command59)
                      `cast`
                    (Options.Applicative.Types.N:ParserM[0] <[GHC.IO.FilePath]>_R)
                      @ [GHC.IO.FilePath]
                      (Options.Applicative.Types.$fAlternativeParser_$cpure
                         @ [GHC.IO.FilePath]))) -}
52425f2ce6500a06f4bd29e64268fcaa
  command59 :: Options.Applicative.Types.Parser GHC.IO.FilePath
  {- Strictness: m4,
     Unfolding: (Options.Applicative.Types.AltP
                   @ GHC.IO.FilePath
                   Command.REPL.command60
                   (Options.Applicative.Types.$fAlternativeParser_$cempty
                      @ GHC.IO.FilePath)) -}
d87174f93f2630c52a938fa17b36b3e5
  command6 :: Options.Applicative.Types.Parser [GHC.Base.String]
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Options.Applicative.Types.NilP
                   @ [GHC.Base.String]
                   Command.REPL.command7) -}
d523dc669c8645ba44454795f9cc62b4
  command60 :: Options.Applicative.Types.Parser GHC.IO.FilePath
  {- Strictness: m2,
     Unfolding: (Options.Applicative.Types.OptP
                   @ GHC.IO.FilePath
                   Command.REPL.command61) -}
17985570a7bfce8078a468f0f83f4e2b
  command61 :: Options.Applicative.Types.Option GHC.IO.FilePath
  {- Strictness: m,
     Unfolding: (Options.Applicative.Types.Option
                   @ GHC.IO.FilePath
                   Command.REPL.command65
                   Command.REPL.command62) -}
5aa21ce2b623eda28e95aa9f4e3faf38
  command62 :: Options.Applicative.Types.OptProperties
  {- Strictness: m,
     Unfolding: (Options.Applicative.Types.OptProperties
                   Options.Applicative.Types.Visible
                   Command.REPL.command_lvl3
                   Command.REPL.command_var2
                   (GHC.Base.Nothing @ GHC.Base.String)
                   (GHC.Base.Nothing
                      @ (Text.PrettyPrint.ANSI.Leijen.Internal.Doc
                         -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc))) -}
d567d1d3e948ea7f4244a5ba903bd549
  command63 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("FILES"#) -}
4f62f98ef53d75a45d62ebb17b1a8b8e
  command64 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Optional .purs files to load on start"#) -}
fae0402a02ca154b7c15798675bc931f
  command65 :: Options.Applicative.Types.OptReader GHC.IO.FilePath
  {- HasNoCafRefs, Strictness: m3,
     Unfolding: (Options.Applicative.Types.ArgReader
                   @ GHC.IO.FilePath
                   Command.REPL.command31) -}
7d3a95bbdb6eae9644da9d11bf24e30f
  command66 ::
    Command.REPL.PSCiOptions
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S(SL),1*U(U,1*U)><S,U> -}
14788da82f9056e67df77668512683f6
  command7 :: GHC.Base.Maybe [GHC.Base.String]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ [GHC.Base.String]
                   (GHC.Types.[] @ GHC.Base.String)) -}
6afa2069cc3e854c0f935c6c3ec4f7d8
  command8 :: Options.Applicative.Types.Parser [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (Options.Applicative.Types.OptP
                   @ [GHC.Base.String]
                   Command.REPL.command9) -}
72ca9d6543c62462c87943b5915b4d28
  command9 :: Options.Applicative.Types.Option [GHC.Base.String]
  {- Strictness: m,
     Unfolding: (Options.Applicative.Types.Option
                   @ [GHC.Base.String]
                   Command.REPL.command13
                   Command.REPL.command10) -}
733d6f3ce09ab29f94d915a74f63071d
  command_lvl ::
    Options.Applicative.Help.Chunk.Chunk
      Text.PrettyPrint.ANSI.Leijen.Internal.Doc
  {- Unfolding: (Options.Applicative.Help.Chunk.paragraph_go
                   (GHC.CString.unpackCString# Command.REPL.command12)) -}
2f3ec714eb89980a8f0e11295d96d2a2
  command_lvl1 ::
    Options.Applicative.Help.Chunk.Chunk
      Text.PrettyPrint.ANSI.Leijen.Internal.Doc
  {- Unfolding: (Options.Applicative.Help.Chunk.paragraph_go
                   (GHC.CString.unpackCString# Command.REPL.command29)) -}
cd055f73c9a2460a948bab7d0e2ce69b
  command_lvl2 ::
    Options.Applicative.Help.Chunk.Chunk
      Text.PrettyPrint.ANSI.Leijen.Internal.Doc
  {- Unfolding: (Options.Applicative.Help.Chunk.paragraph_go
                   (GHC.CString.unpackCString# Command.REPL.command49)) -}
dad4a6324cc9f68c001547d68cf01fa8
  command_lvl3 ::
    Options.Applicative.Help.Chunk.Chunk
      Text.PrettyPrint.ANSI.Leijen.Internal.Doc
  {- Unfolding: (Options.Applicative.Help.Chunk.paragraph_go
                   (GHC.CString.unpackCString# Command.REPL.command64)) -}
9a1f8d54105d5a5c3c2c4bc810f9c572
  command_n :: Options.Applicative.Types.OptName
  {- Strictness: m2,
     Unfolding: (Options.Applicative.Types.OptLong
                   Command.REPL.command17) -}
1afd69fbc32613c24cca59bbc96c70b0
  command_n1 :: Options.Applicative.Types.OptName
  {- Strictness: m2,
     Unfolding: (Options.Applicative.Types.OptLong
                   Command.REPL.command33) -}
7b44cd74846b6e3217efb878908d4f10
  command_n2 :: Options.Applicative.Types.OptName
  {- Strictness: m2,
     Unfolding: (Options.Applicative.Types.OptLong
                   Command.REPL.command55) -}
899a0769cc9c60f855a721a804d8bfc9
  command_n3 :: Options.Applicative.Types.OptName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Options.Applicative.Types.OptShort 'p'#) -}
184a45880f1a98110fd95d4527117a92
  command_var :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString#
                   Command.REPL.command11) -}
5cb8c758f99195fda0ba1c96ac04749a
  command_var1 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString#
                   Command.REPL.command28) -}
2bd47076c4b7bbdb08b09d2af514f77d
  command_var2 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString#
                   Command.REPL.command63) -}
99a6c2d8f8222de050bc89ab2bd557b2
  psciBackend :: Command.REPL.PSCiOptions -> Command.REPL.Backend
  RecSel Left Command.REPL.PSCiOptions
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds2 :: Command.REPL.PSCiOptions) ->
                 case ds2 of wild { Command.REPL.PSCiOptions ds3 ds4 -> ds4 }) -}
99a6c2d8f8222de050bc89ab2bd557b2
  psciInputGlob :: Command.REPL.PSCiOptions -> [GHC.Base.String]
  RecSel Left Command.REPL.PSCiOptions
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds2 :: Command.REPL.PSCiOptions) ->
                 case ds2 of wild { Command.REPL.PSCiOptions ds3 ds4 -> ds3 }) -}
"SPEC/Command.REPL $fApplicativeExceptT @ IO _" [orphan] forall @ e
                                                                (v1 :: GHC.Base.Monad GHC.Types.IO)
                                                                (v :: GHC.Base.Functor GHC.Types.IO)
  Control.Monad.Trans.Except.$fApplicativeExceptT @ GHC.Types.IO
                                                  @ e
                                                  v
                                                  v1
  = Command.REPL.$s$fApplicativeExceptT @ e
"SPEC/Command.REPL $fApplicativeExceptT_$c*> @ IO _" [orphan] forall @ e
                                                                     ($dMonad :: GHC.Base.Monad
                                                                                   GHC.Types.IO)
                                                                     ($dFunctor :: GHC.Base.Functor
                                                                                     GHC.Types.IO)
  Control.Monad.Trans.Except.$fApplicativeExceptT_$c*> @ GHC.Types.IO
                                                       @ e
                                                       $dFunctor
                                                       $dMonad
  = Command.REPL.$s$fApplicativeExceptT_$s$fApplicativeExceptT_$c*>
      @ e
"SPEC/Command.REPL $fApplicativeExceptT_$cpure @ IO _" [orphan] forall @ e
                                                                       ($dMonad :: GHC.Base.Monad
                                                                                     GHC.Types.IO)
                                                                       ($dFunctor :: GHC.Base.Functor
                                                                                       GHC.Types.IO)
  Control.Monad.Trans.Except.$fApplicativeExceptT_$cpure @ GHC.Types.IO
                                                         @ e
                                                         $dFunctor
                                                         $dMonad
  = Command.REPL.$s$fApplicativeExceptT_$s$fApplicativeExceptT_$cpure
      @ e
"SPEC/Command.REPL $fApplicativeReaderT @ IO _" [orphan] forall @ r
                                                                (v :: GHC.Base.Applicative
                                                                        GHC.Types.IO)
  Control.Monad.Trans.Reader.$fApplicativeReaderT @ GHC.Types.IO
                                                  @ r
                                                  v
  = Command.REPL.$s$fApplicativeReaderT @ r
"SPEC/Command.REPL $fApplicativeReaderT_$c*> @ IO _" [orphan] forall @ r
                                                                     ($dApplicative :: GHC.Base.Applicative
                                                                                         GHC.Types.IO)
  Control.Monad.Trans.Reader.$fApplicativeReaderT_$c*> @ GHC.Types.IO
                                                       @ r
                                                       $dApplicative
  = Command.REPL.$s$fApplicativeReaderT_$s$fApplicativeReaderT_$c*>
      @ r
"SPEC/Command.REPL $fApplicativeReaderT_$c<* @ IO _" [orphan] forall @ r
                                                                     ($dApplicative :: GHC.Base.Applicative
                                                                                         GHC.Types.IO)
  Control.Monad.Trans.Reader.$fApplicativeReaderT_$c<* @ GHC.Types.IO
                                                       @ r
                                                       $dApplicative
  = Command.REPL.$s$fApplicativeReaderT_$s$fApplicativeReaderT_$c<*
      @ r
"SPEC/Command.REPL $fApplicativeReaderT_$c<*> @ IO _" [orphan] forall @ r
                                                                      ($dApplicative :: GHC.Base.Applicative
                                                                                          GHC.Types.IO)
  Control.Monad.Trans.Reader.$fApplicativeReaderT_$c<*> @ GHC.Types.IO
                                                        @ r
                                                        $dApplicative
  = Command.REPL.$s$fApplicativeReaderT_$s$fApplicativeReaderT_$c<*>
      @ r
"SPEC/Command.REPL $fApplicativeStateT @ (ReaderT PSCiConfig IO) _" [orphan] forall @ s
                                                                                    (v1 :: GHC.Base.Monad
                                                                                             (Control.Monad.Trans.Reader.ReaderT
                                                                                                Language.PureScript.Interactive.Types.PSCiConfig
                                                                                                GHC.Types.IO))
                                                                                    (v :: GHC.Base.Functor
                                                                                            (Control.Monad.Trans.Reader.ReaderT
                                                                                               Language.PureScript.Interactive.Types.PSCiConfig
                                                                                               GHC.Types.IO))
  Control.Monad.Trans.State.Strict.$fApplicativeStateT @ (Control.Monad.Trans.Reader.ReaderT
                                                            Language.PureScript.Interactive.Types.PSCiConfig
                                                            GHC.Types.IO)
                                                       @ s
                                                       v
                                                       v1
  = Command.REPL.$s$fApplicativeStateT @ s
"SPEC/Command.REPL $fApplicativeStateT_$c*> @ (ReaderT
                                                PSCiConfig IO) _" [orphan] forall @ s
                                                                                                                                         ($dMonad :: GHC.Base.Monad
                                                                                                                                                       (Control.Monad.Trans.Reader.ReaderT
                                                                                                                                                          Language.PureScript.Interactive.Types.PSCiConfig
                                                                                                                                                          GHC.Types.IO))
                                                                                                                                         ($dFunctor :: GHC.Base.Functor
                                                                                                                                                         (Control.Monad.Trans.Reader.ReaderT
                                                                                                                                                            Language.PureScript.Interactive.Types.PSCiConfig
                                                                                                                                                            GHC.Types.IO))
  Control.Monad.Trans.State.Strict.$fApplicativeStateT_$c*> @ (Control.Monad.Trans.Reader.ReaderT
                                                                 Language.PureScript.Interactive.Types.PSCiConfig
                                                                 GHC.Types.IO)
                                                            @ s
                                                            $dFunctor
                                                            $dMonad
  = Command.REPL.$s$fApplicativeStateT_$s$fApplicativeStateT_$c*> @ s
"SPEC/Command.REPL $fApplicativeStateT_$c<*> @ (ReaderT
                                                 PSCiConfig IO) _" [orphan] forall @ s
                                                                                                                                           ($dMonad :: GHC.Base.Monad
                                                                                                                                                         (Control.Monad.Trans.Reader.ReaderT
                                                                                                                                                            Language.PureScript.Interactive.Types.PSCiConfig
                                                                                                                                                            GHC.Types.IO))
                                                                                                                                           ($dFunctor :: GHC.Base.Functor
                                                                                                                                                           (Control.Monad.Trans.Reader.ReaderT
                                                                                                                                                              Language.PureScript.Interactive.Types.PSCiConfig
                                                                                                                                                              GHC.Types.IO))
  Control.Monad.Trans.State.Strict.$fApplicativeStateT_$c<*> @ (Control.Monad.Trans.Reader.ReaderT
                                                                  Language.PureScript.Interactive.Types.PSCiConfig
                                                                  GHC.Types.IO)
                                                             @ s
                                                             $dFunctor
                                                             $dMonad
  = Command.REPL.$s$fApplicativeStateT_$s$fApplicativeStateT_$c<*>
      @ s
"SPEC/Command.REPL $fApplicativeStateT_$cpure @ (ReaderT
                                                  PSCiConfig IO) _" [orphan] forall @ s
                                                                                                                                             ($dMonad :: GHC.Base.Monad
                                                                                                                                                           (Control.Monad.Trans.Reader.ReaderT
                                                                                                                                                              Language.PureScript.Interactive.Types.PSCiConfig
                                                                                                                                                              GHC.Types.IO))
                                                                                                                                             ($dFunctor :: GHC.Base.Functor
                                                                                                                                                             (Control.Monad.Trans.Reader.ReaderT
                                                                                                                                                                Language.PureScript.Interactive.Types.PSCiConfig
                                                                                                                                                                GHC.Types.IO))
  Control.Monad.Trans.State.Strict.$fApplicativeStateT_$cpure @ (Control.Monad.Trans.Reader.ReaderT
                                                                   Language.PureScript.Interactive.Types.PSCiConfig
                                                                   GHC.Types.IO)
                                                              @ s
                                                              $dFunctor
                                                              $dMonad
  = Command.REPL.$s$fApplicativeStateT_$s$fApplicativeStateT_$cpure
      @ s
"SPEC/Command.REPL $fFunctorExceptT @ IO _" [orphan] forall @ e
                                                            (v :: GHC.Base.Functor GHC.Types.IO)
  Control.Monad.Trans.Except.$fFunctorExceptT @ GHC.Types.IO @ e v
  = Command.REPL.$s$fApplicativeExceptT_$s$fFunctorExceptT @ e
"SPEC/Command.REPL $fFunctorReaderT @ IO _" [orphan] forall @ r
                                                            (v :: GHC.Base.Functor GHC.Types.IO)
  Control.Monad.Trans.Reader.$fFunctorReaderT @ GHC.Types.IO @ r v
  = Command.REPL.$s$fApplicativeReaderT_$s$fFunctorReaderT @ r
"SPEC/Command.REPL $fFunctorReaderT_$c<$ @ IO _" [orphan] forall @ r
                                                                 ($dFunctor :: GHC.Base.Functor
                                                                                 GHC.Types.IO)
  Control.Monad.Trans.Reader.$fFunctorReaderT_$c<$ @ GHC.Types.IO
                                                   @ r
                                                   $dFunctor
  = Command.REPL.$s$fApplicativeReaderT_$s$fFunctorReaderT_$c<$ @ r
"SPEC/Command.REPL $fFunctorReaderT_$cfmap @ IO _" [orphan] forall @ r
                                                                   ($dFunctor :: GHC.Base.Functor
                                                                                   GHC.Types.IO)
  Control.Monad.Trans.Reader.$fFunctorReaderT_$cfmap @ GHC.Types.IO
                                                     @ r
                                                     $dFunctor
  = Command.REPL.$s$fApplicativeReaderT_$s$fFunctorReaderT_$cfmap @ r
"SPEC/Command.REPL $fFunctorStateT @ (ReaderT PSCiConfig IO) _" [orphan] forall @ s
                                                                                (v :: GHC.Base.Functor
                                                                                        (Control.Monad.Trans.Reader.ReaderT
                                                                                           Language.PureScript.Interactive.Types.PSCiConfig
                                                                                           GHC.Types.IO))
  Control.Monad.Trans.State.Strict.$fFunctorStateT @ (Control.Monad.Trans.Reader.ReaderT
                                                        Language.PureScript.Interactive.Types.PSCiConfig
                                                        GHC.Types.IO)
                                                   @ s
                                                   v
  = Command.REPL.$s$fApplicativeStateT_$s$fFunctorStateT @ s
"SPEC/Command.REPL $fMonadErroreExceptT @ IO _" [orphan] forall @ e
                                                                (v :: GHC.Base.Monad GHC.Types.IO)
  Control.Monad.Error.Class.$fMonadErroreExceptT @ GHC.Types.IO @ e v
  = Command.REPL.$s$fMonadErroreExceptT @ e
"SPEC/Command.REPL $fMonadExceptT @ IO _" [orphan] forall @ e
                                                          (v :: GHC.Base.Monad GHC.Types.IO)
  Control.Monad.Trans.Except.$fMonadExceptT @ GHC.Types.IO @ e v
  = Command.REPL.$s$fMonadErroreExceptT_$s$fMonadExceptT @ e
"SPEC/Command.REPL $fMonadExceptT_$c>> @ IO _" [orphan] forall @ e
                                                               ($dMonad :: GHC.Base.Monad
                                                                             GHC.Types.IO)
  Control.Monad.Trans.Except.$fMonadExceptT_$c>> @ GHC.Types.IO
                                                 @ e
                                                 $dMonad
  = Command.REPL.$s$fMonadErroreExceptT_$s$fMonadExceptT_$c>> @ e
"SPEC/Command.REPL $fMonadExceptT_$c>>= @ IO _" [orphan] forall @ e
                                                                ($dMonad :: GHC.Base.Monad
                                                                              GHC.Types.IO)
  Control.Monad.Trans.Except.$fMonadExceptT_$c>>= @ GHC.Types.IO
                                                  @ e
                                                  $dMonad
  = Command.REPL.$s$fMonadErroreExceptT_$s$fMonadExceptT_$c>>= @ e
"SPEC/Command.REPL $fMonadExceptionInputT @ (StateT
                                              PSCiState (ReaderT PSCiConfig IO))" [orphan] forall (v :: System.Console.Haskeline.MonadException.MonadException
                                                                                                                                                              (Control.Monad.Trans.State.Strict.StateT
                                                                                                                                                                 Language.PureScript.Interactive.Types.PSCiState
                                                                                                                                                                 (Control.Monad.Trans.Reader.ReaderT
                                                                                                                                                                    Language.PureScript.Interactive.Types.PSCiConfig
                                                                                                                                                                    GHC.Types.IO)))
  System.Console.Haskeline.InputT.$fMonadExceptionInputT @ (Control.Monad.Trans.State.Strict.StateT
                                                              Language.PureScript.Interactive.Types.PSCiState
                                                              (Control.Monad.Trans.Reader.ReaderT
                                                                 Language.PureScript.Interactive.Types.PSCiConfig
                                                                 GHC.Types.IO))
                                                         v
  = Command.REPL.$s$fMonadExceptionInputT
"SPEC/Command.REPL $fMonadExceptionReaderT @ IO _" [orphan] forall @ r
                                                                   (v :: System.Console.Haskeline.MonadException.MonadException
                                                                           GHC.Types.IO)
  System.Console.Haskeline.MonadException.$fMonadExceptionReaderT @ GHC.Types.IO
                                                                  @ r
                                                                  v
  = Command.REPL.$s$fMonadExceptionInputT_$s$fMonadExceptionReaderT
      @ r
"SPEC/Command.REPL $fMonadExceptionStateT @ (ReaderT
                                              PSCiConfig IO) _" [orphan] forall @ s
                                                                                                                                     (v :: System.Console.Haskeline.MonadException.MonadException
                                                                                                                                             (Control.Monad.Trans.Reader.ReaderT
                                                                                                                                                Language.PureScript.Interactive.Types.PSCiConfig
                                                                                                                                                GHC.Types.IO))
  System.Console.Haskeline.MonadException.$fMonadExceptionStateT @ (Control.Monad.Trans.Reader.ReaderT
                                                                      Language.PureScript.Interactive.Types.PSCiConfig
                                                                      GHC.Types.IO)
                                                                 @ s
                                                                 v
  = Command.REPL.$s$fMonadExceptionInputT_$s$fMonadExceptionStateT
      @ s
"SPEC/Command.REPL $fMonadIOReaderT @ IO _" [orphan] forall @ r
                                                            (v :: Control.Monad.IO.Class.MonadIO
                                                                    GHC.Types.IO)
  Control.Monad.Trans.Reader.$fMonadIOReaderT @ GHC.Types.IO @ r v
  = Command.REPL.$s$fMonadExceptionInputT_$s$fMonadIOReaderT @ r
"SPEC/Command.REPL $fMonadIOStateT @ (ReaderT PSCiConfig IO) _" [orphan] forall @ s
                                                                                (v :: Control.Monad.IO.Class.MonadIO
                                                                                        (Control.Monad.Trans.Reader.ReaderT
                                                                                           Language.PureScript.Interactive.Types.PSCiConfig
                                                                                           GHC.Types.IO))
  Control.Monad.Trans.State.Strict.$fMonadIOStateT @ (Control.Monad.Trans.Reader.ReaderT
                                                        Language.PureScript.Interactive.Types.PSCiConfig
                                                        GHC.Types.IO)
                                                   @ s
                                                   v
  = Command.REPL.$s$fMonadExceptionInputT_$s$fMonadIOStateT @ s
"SPEC/Command.REPL $fMonadReaderT @ IO _" [orphan] forall @ r
                                                          (v :: GHC.Base.Monad GHC.Types.IO)
  Control.Monad.Trans.Reader.$fMonadReaderT @ GHC.Types.IO @ r v
  = Command.REPL.$s$fApplicativeStateT_$s$fMonadReaderT @ r
"SPEC/Command.REPL $fMonadReaderT_$c>>= @ IO _" [orphan] forall @ r
                                                                ($dMonad :: GHC.Base.Monad
                                                                              GHC.Types.IO)
  Control.Monad.Trans.Reader.$fMonadReaderT_$c>>= @ GHC.Types.IO
                                                  @ r
                                                  $dMonad
  = Command.REPL.$s$fApplicativeStateT_$s$fMonadReaderT_$c>>= @ r
"SPEC/Command.REPL $fMonadReaderT_$cfail @ IO _" [orphan] forall @ r
                                                                 ($dMonad :: GHC.Base.Monad
                                                                               GHC.Types.IO)
  Control.Monad.Trans.Reader.$fMonadReaderT_$cfail @ GHC.Types.IO
                                                   @ r
                                                   $dMonad
  = Command.REPL.$s$fApplicativeStateT_$s$fMonadReaderT_$cfail @ r
"SPEC/Command.REPL $fMonadReaderrStateT @ PSCiConfig @ (ReaderT
                                                         PSCiConfig IO) _" [orphan] forall @ s
                                                                                                                                                           (v :: Control.Monad.Reader.Class.MonadReader
                                                                                                                                                                   Language.PureScript.Interactive.Types.PSCiConfig
                                                                                                                                                                   (Control.Monad.Trans.Reader.ReaderT
                                                                                                                                                                      Language.PureScript.Interactive.Types.PSCiConfig
                                                                                                                                                                      GHC.Types.IO))
  Control.Monad.Reader.Class.$fMonadReaderrStateT @ Language.PureScript.Interactive.Types.PSCiConfig
                                                  @ (Control.Monad.Trans.Reader.ReaderT
                                                       Language.PureScript.Interactive.Types.PSCiConfig
                                                       GHC.Types.IO)
                                                  @ s
                                                  v
  = Command.REPL.$s$fMonadReaderrStateT @ s
"SPEC/Command.REPL $fMonadStateT @ (ReaderT PSCiConfig IO) _" [orphan] forall @ s
                                                                              (v :: GHC.Base.Monad
                                                                                      (Control.Monad.Trans.Reader.ReaderT
                                                                                         Language.PureScript.Interactive.Types.PSCiConfig
                                                                                         GHC.Types.IO))
  Control.Monad.Trans.State.Strict.$fMonadStateT @ (Control.Monad.Trans.Reader.ReaderT
                                                      Language.PureScript.Interactive.Types.PSCiConfig
                                                      GHC.Types.IO)
                                                 @ s
                                                 v
  = Command.REPL.$s$fMonadExceptionInputT_$s$fMonadStateT @ s
"SPEC/Command.REPL $fMonadStateT_$c>> @ (ReaderT PSCiConfig IO) _" [orphan] forall @ s
                                                                                   ($dMonad :: GHC.Base.Monad
                                                                                                 (Control.Monad.Trans.Reader.ReaderT
                                                                                                    Language.PureScript.Interactive.Types.PSCiConfig
                                                                                                    GHC.Types.IO))
  Control.Monad.Trans.State.Strict.$fMonadStateT_$c>> @ (Control.Monad.Trans.Reader.ReaderT
                                                           Language.PureScript.Interactive.Types.PSCiConfig
                                                           GHC.Types.IO)
                                                      @ s
                                                      $dMonad
  = Command.REPL.$s$fMonadExceptionInputT_$s$fMonadStateT_$c>> @ s
"SPEC/Command.REPL $fMonadStateT_$c>>= @ (ReaderT PSCiConfig IO) _" [orphan] forall @ s
                                                                                    ($dMonad :: GHC.Base.Monad
                                                                                                  (Control.Monad.Trans.Reader.ReaderT
                                                                                                     Language.PureScript.Interactive.Types.PSCiConfig
                                                                                                     GHC.Types.IO))
  Control.Monad.Trans.State.Strict.$fMonadStateT_$c>>= @ (Control.Monad.Trans.Reader.ReaderT
                                                            Language.PureScript.Interactive.Types.PSCiConfig
                                                            GHC.Types.IO)
                                                       @ s
                                                       $dMonad
  = Command.REPL.$s$fMonadExceptionInputT_$s$fMonadStateT_$c>>= @ s
"SPEC/Command.REPL $fMonadStateT_$cfail @ (ReaderT PSCiConfig IO) _" [orphan] forall @ s
                                                                                     ($dMonad :: GHC.Base.Monad
                                                                                                   (Control.Monad.Trans.Reader.ReaderT
                                                                                                      Language.PureScript.Interactive.Types.PSCiConfig
                                                                                                      GHC.Types.IO))
  Control.Monad.Trans.State.Strict.$fMonadStateT_$cfail @ (Control.Monad.Trans.Reader.ReaderT
                                                             Language.PureScript.Interactive.Types.PSCiConfig
                                                             GHC.Types.IO)
                                                        @ s
                                                        $dMonad
  = Command.REPL.$s$fMonadExceptionInputT_$s$fMonadStateT_$cfail @ s
"SPEC/Command.REPL $fMonadStatesStateT @ (ReaderT PSCiConfig IO) _" [orphan] forall @ s
                                                                                    (v :: GHC.Base.Monad
                                                                                            (Control.Monad.Trans.Reader.ReaderT
                                                                                               Language.PureScript.Interactive.Types.PSCiConfig
                                                                                               GHC.Types.IO))
  Control.Monad.State.Class.$fMonadStatesStateT @ (Control.Monad.Trans.Reader.ReaderT
                                                     Language.PureScript.Interactive.Types.PSCiConfig
                                                     GHC.Types.IO)
                                                @ s
                                                v
  = Command.REPL.$s$fMonadStatesStateT @ s
"SPEC/Command.REPL catchE @ IO _ _ _" [orphan] forall @ e
                                                      @ a
                                                      @ e'
                                                      ($dMonad :: GHC.Base.Monad GHC.Types.IO)
  Control.Monad.Trans.Except.catchE @ GHC.Types.IO
                                    @ e
                                    @ a
                                    @ e'
                                    $dMonad
  = Command.REPL.$s$fMonadErroreExceptT_$scatchE @ e @ a @ e'
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

