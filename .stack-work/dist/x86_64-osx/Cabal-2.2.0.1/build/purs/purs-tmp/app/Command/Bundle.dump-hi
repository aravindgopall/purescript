
==================== FINAL INTERFACE ====================
2019-01-24 14:18:07.905289 UTC

interface main:Command.Bundle 8043
  interface hash: 68244454d2f5a118f1ad17ceb2007345
  ABI hash: 9f40cad022cef8acd30f67612ebfc46f
  export-list hash: a08246477e4cb19a40433dfb83fdab50
  orphan hash: 57d619e502c6eadec4d4dc3786456d6f
  flag hash: 65391d32754a3e5873ce02c207343740
  opt_hash: 2c98c95d41c045ae9c2fb565ec8aabc6
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Command.Bundle.command
module dependencies:
package dependencies: Glob-0.9.2 aeson-1.3.1.1
                      ansi-terminal-0.8.0.4 ansi-wl-pprint-0.6.8.2 array-0.5.2.0
                      async-2.2.1 attoparsec-0.13.2.2 base-4.11.1.0 base-compat-0.10.4
                      binary-0.8.5.1 blaze-builder-0.4.1.0 bytestring-0.10.8.2
                      colour-2.3.4 containers-0.5.11.0 deepseq-1.4.3.0 directory-1.3.1.5
                      dlist-0.8.0.4 filepath-1.4.2 ghc-boot-th-8.4.3 ghc-prim-0.5.2.0
                      hashable-1.2.7.0 integer-gmp-1.0.2.0 integer-logarithms-1.0.2.1
                      language-javascript-0.6.0.11 mtl-2.2.2
                      optparse-applicative-0.14.2.0 primitive-0.6.3.0 process-1.6.3.0
                      protolude-0.2.2 purescript-0.12.2 random-1.1 scientific-0.3.6.2
                      sourcemap-0.1.6 stm-2.4.5.0 stringsearch-0.3.6.6 syb-0.7
                      tagged-0.8.5 template-haskell-2.13.0.0 text-1.2.3.0 time-1.8.0.2
                      time-locale-compat-0.1.1.4 transformers-0.5.5.0 unix-2.7.2.2
                      unordered-containers-0.2.9.0 utf8-string-1.0.1.1 uuid-types-1.0.3
                      vector-0.12.0.1
orphans: stm-2.4.5.0:Control.Monad.STM
         syb-0.7:Data.Generics.Instances colour-2.3.4:Data.Colour
         attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         vector-0.12.0.1:Data.Vector.Unboxed
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.5.0:Control.Monad.Trans.Error
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.0:Data.Text.Lazy
         text-1.2.3.0:Data.Text binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: aeson-1.3.1.1:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.Graph
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         dlist-0.8.0.4:Data.DList ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray tagged-0.8.5:Data.Tagged
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  Glob-0.9.2:System.FilePath.Glob 8625fdb96b8fcebd81114734e6844e2a
import  -/  Glob-0.9.2:System.FilePath.Glob.Directory d42249ffcaa5351009a12b5db988f46f
import  -/  aeson-1.3.1.1:Data.Aeson 108dfb08de41cf77aad4693ac1dc3d44
import  -/  base-4.11.1.0:Control.Applicative 55d9b3a7491623b0362290e162d67308
import  -/  base-4.11.1.0:Control.Monad c5f960c67d822497578bffbd3e4c01cf
import  -/  base-4.11.1.0:Control.Monad.IO.Class 96109c36cb3c919872278540487fa39e
import  -/  base-4.11.1.0:Data.Either 39d922b371c4c52d426e9ee66de8371a
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.Functor f522c3501272159820fd6f242510732f
import  -/  base-4.11.1.0:Data.Maybe 409c3da2b142470b68be39ce1d97a9f7
import  -/  base-4.11.1.0:Data.OldList 1b35aa3c6805ff7c8887a35a866fe006
import  -/  base-4.11.1.0:Data.Traversable 7ad4edb9184ea1ae8e73f6b94f115c8c
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.IO 1d5542cc02075c5e948018bfacea89c1
import  -/  base-4.11.1.0:GHC.IO.Handle.FD e69f914efff91201d4bcd54a391a46dd
import  -/  base-4.11.1.0:GHC.IO.Handle.Text e23ef47ca91991c54e165e15e91a1ab0
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  base-4.11.1.0:System.Exit a7af6f90beaa15182d3a20667d878df0
import  -/  base-4.11.1.0:System.IO ce09fff7d191d14067bddc2efd9b53a4
import  -/  directory-1.3.1.5:System.Directory bc76216f25ffcaf1c91b529f41ea3bf7
import  -/  directory-1.3.1.5:System.Directory.Internal.Common 88eeec2dd4e3d7d63bc24c2d657e6981
import  -/  filepath-1.4.2:System.FilePath a538d436328dd004b88f7d29a8b244c0
import  -/  filepath-1.4.2:System.FilePath.Posix c021b7a40cfcdd9b08724b5bb7566b59
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  mtl-2.2.2:Control.Monad.Error.Class df146c18e27154b8df4c8637c59fd61b
import  -/  optparse-applicative-0.14.2.0:Options.Applicative d95e0b32490502bba50f41d6948c00e0
import  -/  optparse-applicative-0.14.2.0:Options.Applicative.Builder c6546faa9e09bef2ac2df9eff4a77f61
import  -/  optparse-applicative-0.14.2.0:Options.Applicative.Extra b48c7bfd920b8a9e933e034981589447
import  -/  optparse-applicative-0.14.2.0:Options.Applicative.Types 7d35983d2990cf2ee861dc28ddfea4a2
import  -/  purescript-0.12.2:Language.PureScript.Bundle e9fc080977a6cbbcf186d859a93ee390
import  -/  purescript-0.12.2:System.IO.UTF8 1b807f4ae9bb108bad12de3c7965d740
import  -/  sourcemap-0.1.6:SourceMap 46a5eda4d84cbb7bf492294c0e65b642
import  -/  sourcemap-0.1.6:SourceMap.Types b775770f549711c0150c5529f935d9d4
import  -/  transformers-0.5.5.0:Control.Monad.Trans.Except 1cac4acbba7f36bd732fcc993d3cc20d
import  -/  utf8-string-1.0.1.1:Data.ByteString.Lazy.UTF8 90be7ca8da23b0b606aeffbca3d1d3af
af76561eea189ae6d495192bba5eeb20
  $fShowOptions :: GHC.Show.Show Command.Bundle.Options
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Command.Bundle.Options
                  Command.Bundle.$fShowOptions_$cshowsPrec
                  Command.Bundle.$fShowOptions_$cshow
                  Command.Bundle.$fShowOptions_$cshowList -}
af76561eea189ae6d495192bba5eeb20
  $fShowOptions1 :: Command.Bundle.Options -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(U,1*U,U,1*U,U,U)>,
     Unfolding: (\ (w :: Command.Bundle.Options) ->
                 case w of ww { Command.Bundle.Options ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Command.Bundle.$w$cshowsPrec 0# ww1 ww2 ww3 ww4 ww5 ww6 }) -}
516bff5f5e1c4e282d6e98985fae00d6
  $fShowOptions2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
af76561eea189ae6d495192bba5eeb20
  $fShowOptions_$cshow :: Command.Bundle.Options -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U,1*U,U,1*U,U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Command.Bundle.Options) ->
                 Command.Bundle.$fShowOptions_$cshowsPrec
                   Command.Bundle.$fShowOptions2
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
af76561eea189ae6d495192bba5eeb20
  $fShowOptions_$cshowList ::
    [Command.Bundle.Options] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Command.Bundle.Options]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Command.Bundle.Options
                   Command.Bundle.$fShowOptions1
                   ls
                   s) -}
af76561eea189ae6d495192bba5eeb20
  $fShowOptions_$cshowsPrec ::
    GHC.Types.Int -> Command.Bundle.Options -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(U,1*U,U,1*U,U,U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Command.Bundle.Options) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Command.Bundle.Options ww3 ww4 ww5 ww6 ww7 ww8 ->
                 Command.Bundle.$w$cshowsPrec ww1 ww3 ww4 ww5 ww6 ww7 ww8 } }) -}
8e94f44cb7b752b969b94cae25bb66b8
  $s$fApplicativeExceptT ::
    GHC.Base.Applicative
      (Control.Monad.Trans.Except.ExceptT e GHC.Types.IO)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ e.
                  @ (Control.Monad.Trans.Except.ExceptT e GHC.Types.IO)
                  (Command.Bundle.$s$fApplicativeExceptT_$s$fFunctorExceptT @ e)
                  (Command.Bundle.$s$fApplicativeExceptT_$s$fApplicativeExceptT_$cpure
                     @ e)
                  (Control.Monad.Trans.Except.$fApplicativeExceptT_$c<*>
                     @ GHC.Types.IO
                     @ e
                     GHC.Base.$fFunctorIO
                     GHC.Base.$fMonadIO)
                  (\ @ a
                     @ b
                     @ c
                     (f1 :: a -> b -> c)
                     (x :: Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a) ->
                   Control.Monad.Trans.Except.$fApplicativeExceptT_$c<*>
                     @ GHC.Types.IO
                     @ e
                     GHC.Base.$fFunctorIO
                     GHC.Base.$fMonadIO
                     @ b
                     @ c
                     (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                      case x `cast`
                           (Control.Monad.Trans.Except.N:ExceptT[0]
                                <e>_N <GHC.Types.IO>_R <a>_N ; GHC.Types.N:IO[0]
                                                                   <Data.Either.Either e a>_R)
                             s of ds { (#,#) ipv ipv1 ->
                      (# ipv,
                         Data.Either.$fApplicativeEither_$cfmap
                           @ e
                           @ a
                           @ (b -> c)
                           f1
                           ipv1 #) })
                       `cast`
                     (Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  e (b -> c)>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                            <e>_N <GHC.Types.IO>_R <b -> c>_N)))
                  (Command.Bundle.$s$fApplicativeExceptT_$s$fApplicativeExceptT_$c*>
                     @ e)
                  (\ @ a
                     @ b
                     (x :: Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a) ->
                   Control.Monad.Trans.Except.$fApplicativeExceptT_$c<*>
                     @ GHC.Types.IO
                     @ e
                     GHC.Base.$fFunctorIO
                     GHC.Base.$fMonadIO
                     @ b
                     @ a
                     (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                      case x `cast`
                           (Control.Monad.Trans.Except.N:ExceptT[0]
                                <e>_N <GHC.Types.IO>_R <a>_N ; GHC.Types.N:IO[0]
                                                                   <Data.Either.Either e a>_R)
                             s of ds { (#,#) ipv ipv1 ->
                      (# ipv,
                         Control.Monad.Trans.Except.$fApplicativeExceptT1
                           @ a
                           @ b
                           @ e
                           ipv1 #) })
                       `cast`
                     (Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  e (b -> a)>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                            <e>_N <GHC.Types.IO>_R <b -> a>_N))) -}
339a24f6557b506f279d65f8bcca91d6
  $s$fApplicativeExceptT_$c<*>1 ::
    Control.Monad.Trans.Except.ExceptT e GHC.Types.IO (a -> b)
    -> Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Either.Either e b #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S(SS)),1*C1(U(U,1*U))><L,1*C1(U(U,1*U))><S,U>,
     Unfolding: (\ @ e
                   @ a
                   @ b
                   (w1 :: Control.Monad.Trans.Except.ExceptT e GHC.Types.IO (a -> b))
                   (w2 :: Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w1
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <e>_N <GHC.Types.IO>_R <a -> b>_N ; GHC.Types.N:IO[0]
                                                                   <Data.Either.Either
                                                                      e (a -> b)>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   Data.Either.Left e1 -> (# ipv, Data.Either.Left @ e @ b e1 #)
                   Data.Either.Right k
                   -> case w2
                             `cast`
                           (Control.Monad.Trans.Except.N:ExceptT[0]
                                <e>_N <GHC.Types.IO>_R <a>_N ; GHC.Types.N:IO[0]
                                                                   <Data.Either.Either e a>_R)
                             ipv of ds2 { (#,#) ipv2 ipv3 ->
                      case ipv3 of wild1 {
                        Data.Either.Left e1 -> (# ipv2, Data.Either.Left @ e @ b e1 #)
                        Data.Either.Right x
                        -> (# ipv2, Data.Either.Right @ e @ b (k x) #) } } } }) -}
f553a3d2c7021d2bc530849bb1731c50
  $s$fApplicativeExceptT_$s$fApplicativeExceptT_$c*> ::
    Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a
    -> Control.Monad.Trans.Except.ExceptT e GHC.Types.IO b
    -> Control.Monad.Trans.Except.ExceptT e GHC.Types.IO b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S(SS)),1*C1(U(U,1*U))><L,1*C1(U(U,U))><S,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ e
                   @ a
                   @ b
                   (m1 :: Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a)
                   (k :: Control.Monad.Trans.Except.ExceptT e GHC.Types.IO b)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case m1
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <e>_N <GHC.Types.IO>_R <a>_N ; GHC.Types.N:IO[0]
                                                              <Data.Either.Either e a>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   Data.Either.Left e1 -> (# ipv, Data.Either.Left @ e @ b e1 #)
                   Data.Either.Right x
                   -> k `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <e>_N <GHC.Types.IO>_R <b>_N ; GHC.Types.N:IO[0]
                                                              <Data.Either.Either e b>_R)
                        ipv } })
                  `cast`
                (forall (e :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a>_R
                 ->_R <Control.Monad.Trans.Except.ExceptT e GHC.Types.IO b>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  e b>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                     <e>_N <GHC.Types.IO>_R <b>_N)) -}
55d2e7a9a0b967da7e05fd72c341cf2d
  $s$fApplicativeExceptT_$s$fApplicativeExceptT_$cpure ::
    a -> Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ e @ a (a1 :: a) (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# s, Data.Either.Right @ e @ a a1 #))
                  `cast`
                (forall (e :: <*>_N) (a :: <*>_N).
                 <a>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  e a>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                     <e>_N <GHC.Types.IO>_R <a>_N)) -}
dcdc4a6d60bdc5e0f2129c43c2a812d1
  $s$fApplicativeExceptT_$s$fFunctorExceptT ::
    GHC.Base.Functor
      (Control.Monad.Trans.Except.ExceptT e GHC.Types.IO)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ e.
                  @ (Control.Monad.Trans.Except.ExceptT e GHC.Types.IO)
                  (Control.Monad.Trans.Except.$fFunctorExceptT_$cfmap
                     @ GHC.Types.IO
                     @ e
                     GHC.Base.$fFunctorIO)
                  (Control.Monad.Trans.Except.$fFunctorExceptT_$c<$
                     @ GHC.Types.IO
                     @ e
                     GHC.Base.$fFunctorIO) -}
839bb4f66c912cbab2f24bd81368352b
  $s$fMonadErroreExceptT ::
    Control.Monad.Error.Class.MonadError
      e (Control.Monad.Trans.Except.ExceptT e GHC.Types.IO)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ e.
                  @ e
                  @ (Control.Monad.Trans.Except.ExceptT e GHC.Types.IO)
                  (Command.Bundle.$s$fMonadErroreExceptT_$s$fMonadExceptT @ e)
                  (\ @ a (x :: e) (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                   (# s, Data.Either.Left @ e @ a x #))
                    `cast`
                  (forall (a :: <*>_N).
                   <e>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <Data.Either.Either
                                    e a>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                       <e>_N <GHC.Types.IO>_R <a>_N))
                  (\ @ a ->
                   Command.Bundle.$s$fMonadErroreExceptT_$scatchE @ e @ a @ e) -}
70c69c3f2cf3041a94acc15983584bf7
  $s$fMonadErroreExceptT_$s$fMonadExceptT ::
    GHC.Base.Monad (Control.Monad.Trans.Except.ExceptT e GHC.Types.IO)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ e.
                  @ (Control.Monad.Trans.Except.ExceptT e GHC.Types.IO)
                  (Command.Bundle.$s$fApplicativeExceptT @ e)
                  (Command.Bundle.$s$fMonadErroreExceptT_$s$fMonadExceptT_$c>>= @ e)
                  (Command.Bundle.$s$fMonadErroreExceptT_$s$fMonadExceptT_$c>> @ e)
                  (\ @ a (eta :: a) (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                   (# s, Data.Either.Right @ e @ a eta #))
                    `cast`
                  (forall (a :: <*>_N).
                   <a>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <Data.Either.Either
                                    e a>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                       <e>_N <GHC.Types.IO>_R <a>_N))
                  (\ @ a (x :: GHC.Base.String) ->
                   GHC.Magic.noinline
                     @ (forall a1. [GHC.Types.Char] -> GHC.Types.IO a1)
                     GHC.IO.failIO1
                       `cast`
                     (forall (a1 :: <*>_N).
                      <GHC.Base.String>_R ->_R Sym (GHC.Types.N:IO[0] <a1>_R))
                     @ (Data.Either.Either e a)
                     x)
                    `cast`
                  (forall (a :: <*>_N).
                   <GHC.Base.String>_R
                   ->_R Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                 <e>_N <GHC.Types.IO>_R <a>_N)) -}
f07971d23b0d64bb97c3e822058982f8
  $s$fMonadErroreExceptT_$s$fMonadExceptT_$c>> ::
    Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a
    -> Control.Monad.Trans.Except.ExceptT e GHC.Types.IO b
    -> Control.Monad.Trans.Except.ExceptT e GHC.Types.IO b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S(SS)),1*C1(U(U,1*U))><L,1*C1(U(U,U))><S,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ e
                   @ a
                   @ b
                   (m1 :: Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a)
                   (k :: Control.Monad.Trans.Except.ExceptT e GHC.Types.IO b)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case m1
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <e>_N <GHC.Types.IO>_R <a>_N ; GHC.Types.N:IO[0]
                                                              <Data.Either.Either e a>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   Data.Either.Left e1 -> (# ipv, Data.Either.Left @ e @ b e1 #)
                   Data.Either.Right x
                   -> k `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <e>_N <GHC.Types.IO>_R <b>_N ; GHC.Types.N:IO[0]
                                                              <Data.Either.Either e b>_R)
                        ipv } })
                  `cast`
                (forall (e :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a>_R
                 ->_R <Control.Monad.Trans.Except.ExceptT e GHC.Types.IO b>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  e b>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                     <e>_N <GHC.Types.IO>_R <b>_N)) -}
dca6b7d958cf1eab8ac7ad138684751b
  $s$fMonadErroreExceptT_$s$fMonadExceptT_$c>>= ::
    Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a
    -> (a -> Control.Monad.Trans.Except.ExceptT e GHC.Types.IO b)
    -> Control.Monad.Trans.Except.ExceptT e GHC.Types.IO b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S(SS)),1*C1(U(U,1*U))><L,1*C1(C1(U(U,U)))><S,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ e
                   @ a
                   @ b
                   (m1 :: Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a)
                   (k :: a -> Control.Monad.Trans.Except.ExceptT e GHC.Types.IO b)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case m1
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <e>_N <GHC.Types.IO>_R <a>_N ; GHC.Types.N:IO[0]
                                                              <Data.Either.Either e a>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   Data.Either.Left e1 -> (# ipv, Data.Either.Left @ e @ b e1 #)
                   Data.Either.Right x
                   -> (k x)
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <e>_N <GHC.Types.IO>_R <b>_N ; GHC.Types.N:IO[0]
                                                              <Data.Either.Either e b>_R)
                        ipv } })
                  `cast`
                (forall (e :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a>_R
                 ->_R <a -> Control.Monad.Trans.Except.ExceptT e GHC.Types.IO b>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  e b>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                     <e>_N <GHC.Types.IO>_R <b>_N)) -}
f80d7c87f31931c0251294fca2d244a0
  $s$fMonadErroreExceptT_$scatchE ::
    Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a
    -> (e -> Control.Monad.Trans.Except.ExceptT e' GHC.Types.IO a)
    -> Control.Monad.Trans.Except.ExceptT e' GHC.Types.IO a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S(SS)),1*C1(U(U,1*U))><L,1*C1(C1(U(U,U)))><S,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ e
                   @ a
                   @ e'
                   (m1 :: Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a)
                   (h :: e -> Control.Monad.Trans.Except.ExceptT e' GHC.Types.IO a)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case m1
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <e>_N <GHC.Types.IO>_R <a>_N ; GHC.Types.N:IO[0]
                                                              <Data.Either.Either e a>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   Data.Either.Left l
                   -> (h l)
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <e'>_N <GHC.Types.IO>_R <a>_N ; GHC.Types.N:IO[0]
                                                               <Data.Either.Either e' a>_R)
                        ipv
                   Data.Either.Right r -> (# ipv, Data.Either.Right @ e' @ a r #) } })
                  `cast`
                (forall (e :: <*>_N) (a :: <*>_N) (e' :: <*>_N).
                 <Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a>_R
                 ->_R <e -> Control.Monad.Trans.Except.ExceptT e' GHC.Types.IO a>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  e' a>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                      <e'>_N <GHC.Types.IO>_R <a>_N)) -}
d64baaa721616d908e2b225a7b3ab344
  $tc'Options :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12973695175515900617##
                   3606136018970807238##
                   Command.Bundle.$trModule
                   Command.Bundle.$tc'Options2
                   0#
                   Command.Bundle.$tc'Options1) -}
9dd5731465aee9f010c44c76774610a1
  $tc'Options1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
ce055b7445cd7c530156e44f45bb0b83
  $tc'Options2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Command.Bundle.$tc'Options3) -}
9ea17350166d59c1e68d46057fb0ed69
  $tc'Options3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Options"#) -}
ae5a72bcafe60dafe73ec2389f23885e
  $tcOptions :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8382962449942440229##
                   16791905446950312072##
                   Command.Bundle.$trModule
                   Command.Bundle.$tcOptions1
                   0#
                   GHC.Types.krep$*) -}
8b4a20e8d6e00e83f4370bf78646f9d4
  $tcOptions1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Command.Bundle.$tcOptions2) -}
83734f6a2155743f38c7eaaac900ac39
  $tcOptions2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Options"#) -}
375d2a5345137137dfdde8bde44f640b
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Command.Bundle.$trModule3
                   Command.Bundle.$trModule1) -}
3579707952a759e8c89428a108d2a595
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Command.Bundle.$trModule2) -}
8487bddeea76476a38895f3947484b86
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Command.Bundle"#) -}
9f28874101d024da24dbead346021e5e
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Command.Bundle.$trModule4) -}
e854c7f8b4008457bb8c250be1154fbe
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
1904a0e76a9e2317ef85e91ab21f0f28
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> [GHC.IO.FilePath]
    -> GHC.Base.Maybe GHC.IO.FilePath
    -> [GHC.Base.String]
    -> GHC.Base.Maybe GHC.Base.String
    -> GHC.Base.String
    -> GHC.Types.Bool
    -> GHC.Show.ShowS
  {- Arity: 7, Strictness: <S,U><L,U><L,1*U><L,U><L,1*U><L,U><L,U>,
     Inline: [0] -}
af76561eea189ae6d495192bba5eeb20
  data Options
    = Options {optionsInputFiles :: [GHC.IO.FilePath],
               optionsOutputFile :: GHC.Base.Maybe GHC.IO.FilePath,
               optionsEntryPoints :: [GHC.Base.String],
               optionsMainModule :: GHC.Base.Maybe GHC.Base.String,
               optionsNamespace :: GHC.Base.String,
               optionsSourceMaps :: GHC.Types.Bool}
9d872e540af5874c920dc3d60d093620
  command :: Options.Applicative.Types.Parser (GHC.Types.IO ())
  {- Unfolding: (Options.Applicative.Types.$fApplicativeParser_$cfmap
                   @ Command.Bundle.Options
                   @ (GHC.Types.IO ())
                   Command.Bundle.command79
                     `cast`
                   (<Command.Bundle.Options>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                   Command.Bundle.command1) -}
d20d728589ee1b9a1bc1b88fa1e2bbab
  command1 :: Options.Applicative.Types.Parser Command.Bundle.Options
  {- Unfolding: (Options.Applicative.Types.MultP
                   @ Command.Bundle.Options
                   @ Command.Bundle.Options
                   (Options.Applicative.Extra.helper @ Command.Bundle.Options)
                   Command.Bundle.command2) -}
bc44b15dc794a8fc4d4bf73e967aab20
  command10 :: [Options.Applicative.Types.OptName]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Options.Applicative.Types.OptName
                   Command.Bundle.command_n
                   (GHC.Types.[] @ Options.Applicative.Types.OptName)) -}
80ad8b46665e85c52147ec7a79c464a4
  command11 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString#
                   Command.Bundle.command12) -}
d1a1d88c61d2c7167152a4ea02be3d0c
  command12 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("source-maps"#) -}
1371cf19aae333a77009feda12d3a707
  command13 ::
    Options.Applicative.Types.Parser
      (GHC.Types.Bool -> Command.Bundle.Options)
  {- Unfolding: (Options.Applicative.Types.MultP
                   @ (GHC.Types.Bool -> Command.Bundle.Options)
                   @ GHC.Base.String
                   Command.Bundle.command32
                   Command.Bundle.command14) -}
911dcdf0709fad36a2941a27770f1edd
  command14 :: Options.Applicative.Types.Parser [GHC.Types.Char]
  {- Strictness: m4,
     Unfolding: (Options.Applicative.Types.AltP
                   @ [GHC.Types.Char]
                   Command.Bundle.command19
                   Command.Bundle.command15) -}
a0b62c2e2c1743a348c14979094df87f
  command15 :: Options.Applicative.Types.Parser [GHC.Types.Char]
  {- Strictness: m1,
     Unfolding: (Options.Applicative.Types.NilP
                   @ [GHC.Types.Char]
                   Command.Bundle.command16) -}
39fa23b75e0f1ac73180a0911f67f9ff
  command16 :: GHC.Base.Maybe [GHC.Types.Char]
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ [GHC.Types.Char]
                   Command.Bundle.command17) -}
52ceac0d630ad48190dddadd41f9e529
  command17 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Command.Bundle.command18) -}
93f91c1460413d9c06e9e76553cf399c
  command18 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("PS"#) -}
a2c36e631314ddbf175ce62a0d37d92d
  command19 :: Options.Applicative.Types.Parser [GHC.Types.Char]
  {- Strictness: m2,
     Unfolding: (Options.Applicative.Types.OptP
                   @ [GHC.Types.Char]
                   Command.Bundle.command20) -}
6d74de15d5561ce00faa242d157249ad
  command2 :: Options.Applicative.Types.Parser Command.Bundle.Options
  {- Unfolding: (Options.Applicative.Types.MultP
                   @ Command.Bundle.Options
                   @ GHC.Types.Bool
                   Command.Bundle.command13
                   Command.Bundle.command3) -}
ec931b3465e56f4c3dd79b04d724c3c0
  command20 :: Options.Applicative.Types.Option [GHC.Types.Char]
  {- Strictness: m,
     Unfolding: (Options.Applicative.Types.Option
                   @ [GHC.Types.Char]
                   Command.Bundle.command26
                   Command.Bundle.command21) -}
c2d18ccc556729fe10132a95635bc7f5
  command21 :: Options.Applicative.Types.OptProperties
  {- Strictness: m,
     Unfolding: (Options.Applicative.Types.OptProperties
                   Options.Applicative.Types.Visible
                   Command.Bundle.command_lvl1
                   Options.Applicative.Builder.abortOption_var
                   Command.Bundle.command22
                   (GHC.Base.Nothing
                      @ (Text.PrettyPrint.ANSI.Leijen.Internal.Doc
                         -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc))) -}
80dd624cc4a9b56ae12e7fe3815be264
  command22 :: GHC.Base.Maybe GHC.Base.String
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ GHC.Base.String
                   Command.Bundle.command23) -}
e447455296408f67cc750dfc46e35646
  command23 :: [GHC.Types.Char]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.$fShow(,)3
                   Command.Bundle.command24) -}
8028cd69c525b9a7575ae30615049e7b
  command24 :: GHC.Base.String
  {- Unfolding: (GHC.Show.showLitString
                   Command.Bundle.command17
                   GHC.Show.$fShow[]1) -}
3b6fd3584c27b1f884e7b0a33dafa339
  command25 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Specify the namespace that PureScript modules will be exported to when running in the browser."#) -}
ae7f8a5e994617d92e7763d53c17b8e6
  command26 :: Options.Applicative.Types.OptReader [GHC.Types.Char]
  {- Strictness: m1,
     Unfolding: (Options.Applicative.Types.OptReader
                   @ [GHC.Types.Char]
                   Command.Bundle.command28
                   Command.Bundle.command27
                   Options.Applicative.Types.ExpectsArgError) -}
93bbda9b57116a1ad03f8ccc21fd30b2
  command27 :: Options.Applicative.Types.CReader GHC.IO.FilePath
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Options.Applicative.Types.CReader
                   @ GHC.IO.FilePath
                   Options.Applicative.Types.$fMonoidCompleter3
                     `cast`
                   ((<GHC.Base.String>_R
                     ->_R Sym (GHC.Types.N:IO[0]
                                   <[GHC.Base.String]>_R)) ; Sym (Options.Applicative.Types.N:Completer[0]))
                   (Data.Either.Right
                      @ Options.Applicative.Types.ParseError
                      @ GHC.IO.FilePath)
                     `cast`
                   ((<GHC.Base.String>_R
                     ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                   <Data.Either.Either
                                      Options.Applicative.Types.ParseError
                                      GHC.IO.FilePath>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                     <Options.Applicative.Types.ParseError>_N
                                                                     <Data.Functor.Identity.Identity>_R
                                                                     <GHC.IO.FilePath>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                       <*>_N
                                                                                                       <GHC.Base.String>_R
                                                                                                       <Control.Monad.Trans.Except.Except
                                                                                                          Options.Applicative.Types.ParseError>_R
                                                                                                       <GHC.IO.FilePath>_N) ; Sym (Options.Applicative.Types.N:ReadM[0]) <GHC.IO.FilePath>_N))) -}
e108c4153acb06785f4bd9e1cf37717d
  command28 :: [Options.Applicative.Types.OptName]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Options.Applicative.Types.OptName
                   Command.Bundle.command_n2
                   Command.Bundle.command29) -}
6550e47d37ba9bc68605bafcad645a7e
  command29 :: [Options.Applicative.Types.OptName]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Options.Applicative.Types.OptName
                   Command.Bundle.command_n1
                   (GHC.Types.[] @ Options.Applicative.Types.OptName)) -}
4776a3aff84eab476d08b94f858f119b
  command3 :: Options.Applicative.Types.Parser GHC.Types.Bool
  {- Strictness: m4,
     Unfolding: (Options.Applicative.Types.AltP
                   @ GHC.Types.Bool
                   Command.Bundle.command4
                   Options.Applicative.Builder.switch1) -}
8b2950eaf1f168c68b10040acb3ddb71
  command30 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString#
                   Command.Bundle.command31) -}
b7d067c138350997ab107314602b039e
  command31 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("namespace"#) -}
dc5e654c8bc973c4c80591c329d33e91
  command32 ::
    Options.Applicative.Types.Parser
      (GHC.Base.String -> GHC.Types.Bool -> Command.Bundle.Options)
  {- Unfolding: (Options.Applicative.Types.MultP
                   @ (GHC.Base.String -> GHC.Types.Bool -> Command.Bundle.Options)
                   @ (GHC.Base.Maybe GHC.Base.String)
                   Command.Bundle.command45
                   Command.Bundle.command33) -}
243bace9d7b8815d4f79ac105da175b3
  command33 ::
    Options.Applicative.Types.Parser (GHC.Base.Maybe GHC.Base.String)
  {- Strictness: m4,
     Unfolding: (Options.Applicative.Types.AltP
                   @ (GHC.Base.Maybe GHC.Base.String)
                   Command.Bundle.command36
                   Command.Bundle.command34) -}
bf739590b421a27adee21bfc1f38be77
  command34 ::
    Options.Applicative.Types.Parser (GHC.Base.Maybe GHC.IO.FilePath)
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Options.Applicative.Types.NilP
                   @ (GHC.Base.Maybe GHC.IO.FilePath)
                   Command.Bundle.command35) -}
23f1ee82be66beb91ba67159a5eb05a1
  command35 :: GHC.Base.Maybe (GHC.Base.Maybe GHC.IO.FilePath)
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ (GHC.Base.Maybe GHC.IO.FilePath)
                   (GHC.Base.Nothing @ GHC.IO.FilePath)) -}
54ac2854f82c6fa928ed7c3fb0f0903b
  command36 ::
    Options.Applicative.Types.Parser (GHC.Base.Maybe GHC.Base.String)
  {- Unfolding: (Options.Applicative.Types.$fApplicativeParser_$cfmap
                   @ GHC.Base.String
                   @ (GHC.Base.Maybe GHC.Base.String)
                   (GHC.Base.Just @ GHC.Base.String)
                   Command.Bundle.command37) -}
d3ca053925f05c023009f879ee9d674c
  command37 :: Options.Applicative.Types.Parser GHC.Base.String
  {- Strictness: m4,
     Unfolding: (Options.Applicative.Types.AltP
                   @ GHC.Base.String
                   Command.Bundle.command38
                   (Options.Applicative.Types.$fAlternativeParser_$cempty
                      @ GHC.Base.String)) -}
0019ee65c0bc170abb92495361fab81f
  command38 :: Options.Applicative.Types.Parser GHC.Base.String
  {- Strictness: m2,
     Unfolding: (Options.Applicative.Types.OptP
                   @ GHC.Base.String
                   Command.Bundle.command39) -}
405424b9dcc826089ca21225d1019a01
  command39 :: Options.Applicative.Types.Option GHC.Base.String
  {- Strictness: m,
     Unfolding: (Options.Applicative.Types.Option
                   @ GHC.Base.String
                   Command.Bundle.command42
                   Command.Bundle.command40) -}
3ae81b2048d369c15bc2e15cd1312c9c
  command4 :: Options.Applicative.Types.Parser GHC.Types.Bool
  {- Strictness: m4,
     Unfolding: (Options.Applicative.Types.AltP
                   @ GHC.Types.Bool
                   Command.Bundle.command5
                   (Options.Applicative.Types.$fAlternativeParser_$cempty
                      @ GHC.Types.Bool)) -}
a9031f790fcead3a42da58ba9369ab76
  command40 :: Options.Applicative.Types.OptProperties
  {- Strictness: m,
     Unfolding: (Options.Applicative.Types.OptProperties
                   Options.Applicative.Types.Visible
                   Command.Bundle.command_lvl2
                   Options.Applicative.Builder.abortOption_var
                   (GHC.Base.Nothing @ GHC.Base.String)
                   (GHC.Base.Nothing
                      @ (Text.PrettyPrint.ANSI.Leijen.Internal.Doc
                         -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc))) -}
226fc1c519a7bea9b8038623b440dfcd
  command41 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Generate code to run the main method in the specified module."#) -}
d05a17679d23a4788c6e93317f0cb67c
  command42 :: Options.Applicative.Types.OptReader GHC.Base.String
  {- Strictness: m1,
     Unfolding: (Options.Applicative.Types.OptReader
                   @ GHC.Base.String
                   Command.Bundle.command43
                   Command.Bundle.command27
                   Options.Applicative.Types.ExpectsArgError) -}
f52fb6d85e0a385d64d3fe1f723796e6
  command43 :: [Options.Applicative.Types.OptName]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Options.Applicative.Types.OptName
                   Command.Bundle.command_n3
                   (GHC.Types.[] @ Options.Applicative.Types.OptName)) -}
bedeaf866c9bdad82062b5324b8d0cb0
  command44 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString#
                   Command.Bundle.$trModule4) -}
dcfced79485ed8b623770f9fc5bba2c8
  command45 ::
    Options.Applicative.Types.Parser
      (GHC.Base.Maybe GHC.Base.String
       -> GHC.Base.String -> GHC.Types.Bool -> Command.Bundle.Options)
  {- Unfolding: (Options.Applicative.Types.MultP
                   @ (GHC.Base.Maybe GHC.Base.String
                      -> GHC.Base.String -> GHC.Types.Bool -> Command.Bundle.Options)
                   @ [GHC.Base.String]
                   Command.Bundle.command57
                   Command.Bundle.command46) -}
e7544623073c57ba0dfb2da788d20e7b
  command46 :: Options.Applicative.Types.Parser [GHC.Base.String]
  {- Unfolding: ((Options.Applicative.Types.manyM
                    @ GHC.Base.String
                    Command.Bundle.command47)
                   `cast`
                 (Options.Applicative.Types.N:ParserM[0] <[GHC.Base.String]>_R)
                   @ [GHC.Base.String]
                   (Options.Applicative.Types.$fAlternativeParser_$cpure
                      @ [GHC.Base.String])) -}
ba4799f4eda8ddce2a518da04bd4fff6
  command47 :: Options.Applicative.Types.Parser GHC.Base.String
  {- Strictness: m4,
     Unfolding: (Options.Applicative.Types.AltP
                   @ GHC.Base.String
                   Command.Bundle.command48
                   (Options.Applicative.Types.$fAlternativeParser_$cempty
                      @ GHC.Base.String)) -}
3330b6fecfc84f2decaa233663da9fd6
  command48 :: Options.Applicative.Types.Parser GHC.Base.String
  {- Strictness: m2,
     Unfolding: (Options.Applicative.Types.OptP
                   @ GHC.Base.String
                   Command.Bundle.command49) -}
cc8e36109656c090e0b1c2b239196379
  command49 :: Options.Applicative.Types.Option GHC.Base.String
  {- Strictness: m,
     Unfolding: (Options.Applicative.Types.Option
                   @ GHC.Base.String
                   Command.Bundle.command52
                   Command.Bundle.command50) -}
ed941f68ffd2f26e18cfc7f06e876d16
  command5 :: Options.Applicative.Types.Parser GHC.Types.Bool
  {- Strictness: m2,
     Unfolding: (Options.Applicative.Types.OptP
                   @ GHC.Types.Bool
                   Command.Bundle.command6) -}
fa9fbfd4b1a0167575dd17140095882e
  command50 :: Options.Applicative.Types.OptProperties
  {- Strictness: m,
     Unfolding: (Options.Applicative.Types.OptProperties
                   Options.Applicative.Types.Visible
                   Command.Bundle.command_lvl3
                   Options.Applicative.Builder.abortOption_var
                   (GHC.Base.Nothing @ GHC.Base.String)
                   (GHC.Base.Nothing
                      @ (Text.PrettyPrint.ANSI.Leijen.Internal.Doc
                         -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc))) -}
704b01d53c443b209c9eb64e5a8081d3
  command51 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Entry point module name(s). All code which is not a transitive dependency of an entry point module will be removed."#) -}
bc9bb63587ab2fd0d2ad909286d8408b
  command52 :: Options.Applicative.Types.OptReader GHC.Base.String
  {- Strictness: m1,
     Unfolding: (Options.Applicative.Types.OptReader
                   @ GHC.Base.String
                   Command.Bundle.command53
                   Command.Bundle.command27
                   Options.Applicative.Types.ExpectsArgError) -}
9cd24d5195383d132c762177f7c19d51
  command53 :: [Options.Applicative.Types.OptName]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Options.Applicative.Types.OptName
                   Command.Bundle.command_n5
                   Command.Bundle.command54) -}
5ee34bd5ace7008fb080fa2465562e6c
  command54 :: [Options.Applicative.Types.OptName]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Options.Applicative.Types.OptName
                   Command.Bundle.command_n4
                   (GHC.Types.[] @ Options.Applicative.Types.OptName)) -}
bc286df14484535a68d461c624e09afb
  command55 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString#
                   Command.Bundle.command56) -}
09f7bae88d4405d3a66ad05617306155
  command56 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("module"#) -}
6e6b91636cd928ac948cb06e7879e7c0
  command57 ::
    Options.Applicative.Types.Parser
      ([GHC.Base.String]
       -> GHC.Base.Maybe GHC.Base.String
       -> GHC.Base.String
       -> GHC.Types.Bool
       -> Command.Bundle.Options)
  {- Unfolding: (Options.Applicative.Types.MultP
                   @ ([GHC.Base.String]
                      -> GHC.Base.Maybe GHC.Base.String
                      -> GHC.Base.String
                      -> GHC.Types.Bool
                      -> Command.Bundle.Options)
                   @ (GHC.Base.Maybe GHC.IO.FilePath)
                   Command.Bundle.command70
                   Command.Bundle.command58) -}
71ed5717fb00778b75b54404ae3e1835
  command58 ::
    Options.Applicative.Types.Parser (GHC.Base.Maybe GHC.IO.FilePath)
  {- Strictness: m4,
     Unfolding: (Options.Applicative.Types.AltP
                   @ (GHC.Base.Maybe GHC.IO.FilePath)
                   Command.Bundle.command59
                   Command.Bundle.command34) -}
c905c3ffbc9e16f12bc75fdec1b997b6
  command59 ::
    Options.Applicative.Types.Parser (GHC.Base.Maybe GHC.IO.FilePath)
  {- Unfolding: (Options.Applicative.Types.$fApplicativeParser_$cfmap
                   @ GHC.IO.FilePath
                   @ (GHC.Base.Maybe GHC.IO.FilePath)
                   (GHC.Base.Just @ GHC.IO.FilePath)
                   Command.Bundle.command60) -}
ea45b5887f3d208ab2b5e7b7c0714897
  command6 :: Options.Applicative.Types.Option GHC.Types.Bool
  {- Strictness: m,
     Unfolding: (Options.Applicative.Types.Option
                   @ GHC.Types.Bool
                   Command.Bundle.command9
                   Command.Bundle.command7) -}
a15095164db71f5c333c0c75fccef1f9
  command60 :: Options.Applicative.Types.Parser GHC.IO.FilePath
  {- Strictness: m4,
     Unfolding: (Options.Applicative.Types.AltP
                   @ GHC.IO.FilePath
                   Command.Bundle.command61
                   (Options.Applicative.Types.$fAlternativeParser_$cempty
                      @ GHC.IO.FilePath)) -}
f40930c8607c3cfba057bf3bb0c7c0fb
  command61 :: Options.Applicative.Types.Parser GHC.IO.FilePath
  {- Strictness: m2,
     Unfolding: (Options.Applicative.Types.OptP
                   @ GHC.IO.FilePath
                   Command.Bundle.command62) -}
86fb3d3fcadcaa1103295ede7d64f064
  command62 :: Options.Applicative.Types.Option GHC.IO.FilePath
  {- Strictness: m,
     Unfolding: (Options.Applicative.Types.Option
                   @ GHC.IO.FilePath
                   Command.Bundle.command65
                   Command.Bundle.command63) -}
4fe6690807aaa995e6ce0d4336e29570
  command63 :: Options.Applicative.Types.OptProperties
  {- Strictness: m,
     Unfolding: (Options.Applicative.Types.OptProperties
                   Options.Applicative.Types.Visible
                   Command.Bundle.command_lvl4
                   Options.Applicative.Builder.abortOption_var
                   (GHC.Base.Nothing @ GHC.Base.String)
                   (GHC.Base.Nothing
                      @ (Text.PrettyPrint.ANSI.Leijen.Internal.Doc
                         -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc))) -}
814961ee023ba4e4619f81e333cb7602
  command64 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("The output .js file"#) -}
20f9d12cdf70b778928835564cb783b8
  command65 :: Options.Applicative.Types.OptReader GHC.IO.FilePath
  {- Strictness: m1,
     Unfolding: (Options.Applicative.Types.OptReader
                   @ GHC.IO.FilePath
                   Command.Bundle.command66
                   Command.Bundle.command27
                   Options.Applicative.Types.ExpectsArgError) -}
ed99c2c49dfaa2e260cbc063d367e640
  command66 :: [Options.Applicative.Types.OptName]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Options.Applicative.Types.OptName
                   Command.Bundle.command_n7
                   Command.Bundle.command67) -}
7e769375430d1075484b484b31e4a27c
  command67 :: [Options.Applicative.Types.OptName]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Options.Applicative.Types.OptName
                   Command.Bundle.command_n6
                   (GHC.Types.[] @ Options.Applicative.Types.OptName)) -}
e2cb0923ed9b7742050d2f12f6671a9e
  command68 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString#
                   Command.Bundle.command69) -}
9cbf6f771343dc94f3c240267c5ea6f3
  command69 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("output"#) -}
3f2d1255d078cc7283901ebe997cd5f2
  command7 :: Options.Applicative.Types.OptProperties
  {- Strictness: m,
     Unfolding: (Options.Applicative.Types.OptProperties
                   Options.Applicative.Types.Visible
                   Command.Bundle.command_lvl
                   (GHC.Types.[] @ GHC.Types.Char)
                   (GHC.Base.Nothing @ GHC.Base.String)
                   (GHC.Base.Nothing
                      @ (Text.PrettyPrint.ANSI.Leijen.Internal.Doc
                         -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc))) -}
3eed71fd0b0301a2c468399daaba34fa
  command70 ::
    Options.Applicative.Types.Parser
      (GHC.Base.Maybe GHC.IO.FilePath
       -> [GHC.Base.String]
       -> GHC.Base.Maybe GHC.Base.String
       -> GHC.Base.String
       -> GHC.Types.Bool
       -> Command.Bundle.Options)
  {- Unfolding: (Options.Applicative.Types.$fApplicativeParser_$cfmap
                   @ [GHC.IO.FilePath]
                   @ (GHC.Base.Maybe GHC.IO.FilePath
                      -> [GHC.Base.String]
                      -> GHC.Base.Maybe GHC.Base.String
                      -> GHC.Base.String
                      -> GHC.Types.Bool
                      -> Command.Bundle.Options)
                   Command.Bundle.Options
                   Command.Bundle.command71) -}
6dbb7694bb7b2def5f9139a79fec5d83
  command71 :: Options.Applicative.Types.Parser [GHC.IO.FilePath]
  {- Unfolding: (Options.Applicative.Types.BindP
                   @ [GHC.IO.FilePath]
                   @ GHC.IO.FilePath
                   Command.Bundle.command_p
                   Command.Bundle.command72) -}
ba85ebfadf9b18302bbf47aa3abb0918
  command72 ::
    GHC.IO.FilePath
    -> Options.Applicative.Types.Parser [GHC.IO.FilePath]
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (x :: GHC.IO.FilePath) ->
                 Command.Bundle.command_m2
                   `cast`
                 (Options.Applicative.Types.N:ParserM[0] <[GHC.IO.FilePath]>_R)
                   @ [GHC.IO.FilePath]
                   (\ (x1 :: [GHC.IO.FilePath]) ->
                    Options.Applicative.Types.NilP
                      @ [GHC.IO.FilePath]
                      (GHC.Base.Just
                         @ [GHC.IO.FilePath]
                         (GHC.Types.: @ GHC.IO.FilePath x x1)))) -}
efb6f6b5d17821ccaff0193ea8055759
  command73 :: Options.Applicative.Types.Parser GHC.IO.FilePath
  {- Strictness: m2,
     Unfolding: (Options.Applicative.Types.OptP
                   @ GHC.IO.FilePath
                   Command.Bundle.command74) -}
150ca4b17cacaa7d451948f8c81514c1
  command74 :: Options.Applicative.Types.Option GHC.IO.FilePath
  {- Strictness: m,
     Unfolding: (Options.Applicative.Types.Option
                   @ GHC.IO.FilePath
                   Command.Bundle.command78
                   Command.Bundle.command75) -}
454c1d8c9eca503536f5e0458e58f5be
  command75 :: Options.Applicative.Types.OptProperties
  {- Strictness: m,
     Unfolding: (Options.Applicative.Types.OptProperties
                   Options.Applicative.Types.Visible
                   Command.Bundle.command_lvl5
                   Command.Bundle.command_var
                   (GHC.Base.Nothing @ GHC.Base.String)
                   (GHC.Base.Nothing
                      @ (Text.PrettyPrint.ANSI.Leijen.Internal.Doc
                         -> Text.PrettyPrint.ANSI.Leijen.Internal.Doc))) -}
7466783e1dd3d3f1cc20226617053c69
  command76 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("FILE"#) -}
a7c010b157db42d107d48d7a39b76c33
  command77 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("The input .js file(s)"#) -}
d3336524434ec65556b54254fdbcda67
  command78 :: Options.Applicative.Types.OptReader GHC.IO.FilePath
  {- HasNoCafRefs, Strictness: m3,
     Unfolding: (Options.Applicative.Types.ArgReader
                   @ GHC.IO.FilePath
                   Command.Bundle.command27) -}
497ed82d951bed44f2424e35b9b33e90
  command79 ::
    Command.Bundle.Options
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S(SLLLLL),1*U(1*U,U,1*U,U,U,U)><S,U> -}
40468f007bdfcb527a361bee81a57351
  command8 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Whether to generate source maps for the bundle (requires --output)."#) -}
c334fde7ee26aea205c706a9cb4799f8
  command9 :: Options.Applicative.Types.OptReader GHC.Types.Bool
  {- Strictness: m2,
     Unfolding: (Options.Applicative.Types.FlagReader
                   @ GHC.Types.Bool
                   Command.Bundle.command10
                   GHC.Types.True) -}
6fae968ab91a1896b33c52f8ecc01b69
  command_lvl ::
    Options.Applicative.Help.Chunk.Chunk
      Text.PrettyPrint.ANSI.Leijen.Internal.Doc
  {- Unfolding: (Options.Applicative.Help.Chunk.paragraph_go
                   (GHC.CString.unpackCString# Command.Bundle.command8)) -}
a2afe49e4dc5f80c0e1c1cc3a0bfb2a6
  command_lvl1 ::
    Options.Applicative.Help.Chunk.Chunk
      Text.PrettyPrint.ANSI.Leijen.Internal.Doc
  {- Unfolding: (Options.Applicative.Help.Chunk.paragraph_go
                   (GHC.CString.unpackCString# Command.Bundle.command25)) -}
43750d3fcd1aea4b75e156b546a26085
  command_lvl2 ::
    Options.Applicative.Help.Chunk.Chunk
      Text.PrettyPrint.ANSI.Leijen.Internal.Doc
  {- Unfolding: (Options.Applicative.Help.Chunk.paragraph_go
                   (GHC.CString.unpackCString# Command.Bundle.command41)) -}
2b2f3a26d2e382636e77d98d04a0ce9a
  command_lvl3 ::
    Options.Applicative.Help.Chunk.Chunk
      Text.PrettyPrint.ANSI.Leijen.Internal.Doc
  {- Unfolding: (Options.Applicative.Help.Chunk.paragraph_go
                   (GHC.CString.unpackCString# Command.Bundle.command51)) -}
d9a06fed05c35ef00072a5f32a286fa2
  command_lvl4 ::
    Options.Applicative.Help.Chunk.Chunk
      Text.PrettyPrint.ANSI.Leijen.Internal.Doc
  {- Unfolding: (Options.Applicative.Help.Chunk.paragraph_go
                   (GHC.CString.unpackCString# Command.Bundle.command64)) -}
5dc20889ba6b6344f71a858cd4de325e
  command_lvl5 ::
    Options.Applicative.Help.Chunk.Chunk
      Text.PrettyPrint.ANSI.Leijen.Internal.Doc
  {- Unfolding: (Options.Applicative.Help.Chunk.paragraph_go
                   (GHC.CString.unpackCString# Command.Bundle.command77)) -}
126ea2529e86a4dbceb82b1a5af1b1df
  command_m2 :: Options.Applicative.Types.ParserM [GHC.IO.FilePath]
  {- Unfolding: (Options.Applicative.Types.manyM
                   @ GHC.IO.FilePath
                   Command.Bundle.command_p) -}
3ea40196a816569bbc60841ecfb8a805
  command_n :: Options.Applicative.Types.OptName
  {- Strictness: m2,
     Unfolding: (Options.Applicative.Types.OptLong
                   Command.Bundle.command11) -}
e0f2497ca8685eedc696016c484968cf
  command_n1 :: Options.Applicative.Types.OptName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Options.Applicative.Types.OptShort 'n'#) -}
4fee2d2a4db135a4d5fff802b085556e
  command_n2 :: Options.Applicative.Types.OptName
  {- Strictness: m2,
     Unfolding: (Options.Applicative.Types.OptLong
                   Command.Bundle.command30) -}
808aeb77991bc8697081c5f93e894951
  command_n3 :: Options.Applicative.Types.OptName
  {- Strictness: m2,
     Unfolding: (Options.Applicative.Types.OptLong
                   Command.Bundle.command44) -}
d7b8a24b562f0e3a505bab00b2fcc841
  command_n4 :: Options.Applicative.Types.OptName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Options.Applicative.Types.OptShort 'm'#) -}
638d7d30df4a7b3e042fd40aa852cd37
  command_n5 :: Options.Applicative.Types.OptName
  {- Strictness: m2,
     Unfolding: (Options.Applicative.Types.OptLong
                   Command.Bundle.command55) -}
75245d204dac71f4cec8657d1e3e3aec
  command_n6 :: Options.Applicative.Types.OptName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Options.Applicative.Types.OptShort 'o'#) -}
4695aba7c1822cbdfd96a9f270ef0085
  command_n7 :: Options.Applicative.Types.OptName
  {- Strictness: m2,
     Unfolding: (Options.Applicative.Types.OptLong
                   Command.Bundle.command68) -}
08c08e27513769c5e0f1b7b0ff21df75
  command_p :: Options.Applicative.Types.Parser GHC.IO.FilePath
  {- Strictness: m4,
     Unfolding: (Options.Applicative.Types.AltP
                   @ GHC.IO.FilePath
                   Command.Bundle.command73
                   (Options.Applicative.Types.$fAlternativeParser_$cempty
                      @ GHC.IO.FilePath)) -}
145cdb90cea7028e4895209ac2850a19
  command_var :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString#
                   Command.Bundle.command76) -}
af76561eea189ae6d495192bba5eeb20
  optionsEntryPoints :: Command.Bundle.Options -> [GHC.Base.String]
  RecSel Left Command.Bundle.Options
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLLL),1*U(A,A,1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Command.Bundle.Options) ->
                 case ds of wild { Command.Bundle.Options ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds3 }) -}
af76561eea189ae6d495192bba5eeb20
  optionsInputFiles :: Command.Bundle.Options -> [GHC.IO.FilePath]
  RecSel Left Command.Bundle.Options
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLLL),1*U(1*U,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Command.Bundle.Options) ->
                 case ds of wild { Command.Bundle.Options ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds1 }) -}
af76561eea189ae6d495192bba5eeb20
  optionsMainModule ::
    Command.Bundle.Options -> GHC.Base.Maybe GHC.Base.String
  RecSel Left Command.Bundle.Options
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSLL),1*U(A,A,A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Command.Bundle.Options) ->
                 case ds of wild { Command.Bundle.Options ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds4 }) -}
af76561eea189ae6d495192bba5eeb20
  optionsNamespace :: Command.Bundle.Options -> GHC.Base.String
  RecSel Left Command.Bundle.Options
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLSL),1*U(A,A,A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Command.Bundle.Options) ->
                 case ds of wild { Command.Bundle.Options ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds5 }) -}
af76561eea189ae6d495192bba5eeb20
  optionsOutputFile ::
    Command.Bundle.Options -> GHC.Base.Maybe GHC.IO.FilePath
  RecSel Left Command.Bundle.Options
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLLL),1*U(A,1*U,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Command.Bundle.Options) ->
                 case ds of wild { Command.Bundle.Options ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds2 }) -}
af76561eea189ae6d495192bba5eeb20
  optionsSourceMaps :: Command.Bundle.Options -> GHC.Types.Bool
  RecSel Left Command.Bundle.Options
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLS),1*U(A,A,A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Command.Bundle.Options) ->
                 case ds of wild { Command.Bundle.Options ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds6 }) -}
instance GHC.Show.Show [Command.Bundle.Options]
  = Command.Bundle.$fShowOptions
"SPEC/Command.Bundle $fApplicativeExceptT @ IO _" [orphan] forall @ e
                                                                  (v1 :: GHC.Base.Monad
                                                                           GHC.Types.IO)
                                                                  (v :: GHC.Base.Functor
                                                                          GHC.Types.IO)
  Control.Monad.Trans.Except.$fApplicativeExceptT @ GHC.Types.IO
                                                  @ e
                                                  v
                                                  v1
  = Command.Bundle.$s$fApplicativeExceptT @ e
"SPEC/Command.Bundle $fApplicativeExceptT_$c*> @ IO _" [orphan] forall @ e
                                                                       ($dMonad :: GHC.Base.Monad
                                                                                     GHC.Types.IO)
                                                                       ($dFunctor :: GHC.Base.Functor
                                                                                       GHC.Types.IO)
  Control.Monad.Trans.Except.$fApplicativeExceptT_$c*> @ GHC.Types.IO
                                                       @ e
                                                       $dFunctor
                                                       $dMonad
  = Command.Bundle.$s$fApplicativeExceptT_$s$fApplicativeExceptT_$c*>
      @ e
"SPEC/Command.Bundle $fApplicativeExceptT_$cpure @ IO _" [orphan] forall @ e
                                                                         ($dMonad :: GHC.Base.Monad
                                                                                       GHC.Types.IO)
                                                                         ($dFunctor :: GHC.Base.Functor
                                                                                         GHC.Types.IO)
  Control.Monad.Trans.Except.$fApplicativeExceptT_$cpure @ GHC.Types.IO
                                                         @ e
                                                         $dFunctor
                                                         $dMonad
  = Command.Bundle.$s$fApplicativeExceptT_$s$fApplicativeExceptT_$cpure
      @ e
"SPEC/Command.Bundle $fFunctorExceptT @ IO _" [orphan] forall @ e
                                                              (v :: GHC.Base.Functor GHC.Types.IO)
  Control.Monad.Trans.Except.$fFunctorExceptT @ GHC.Types.IO @ e v
  = Command.Bundle.$s$fApplicativeExceptT_$s$fFunctorExceptT @ e
"SPEC/Command.Bundle $fMonadErroreExceptT @ IO _" [orphan] forall @ e
                                                                  (v :: GHC.Base.Monad GHC.Types.IO)
  Control.Monad.Error.Class.$fMonadErroreExceptT @ GHC.Types.IO @ e v
  = Command.Bundle.$s$fMonadErroreExceptT @ e
"SPEC/Command.Bundle $fMonadExceptT @ IO _" [orphan] forall @ e
                                                            (v :: GHC.Base.Monad GHC.Types.IO)
  Control.Monad.Trans.Except.$fMonadExceptT @ GHC.Types.IO @ e v
  = Command.Bundle.$s$fMonadErroreExceptT_$s$fMonadExceptT @ e
"SPEC/Command.Bundle $fMonadExceptT_$c>> @ IO _" [orphan] forall @ e
                                                                 ($dMonad :: GHC.Base.Monad
                                                                               GHC.Types.IO)
  Control.Monad.Trans.Except.$fMonadExceptT_$c>> @ GHC.Types.IO
                                                 @ e
                                                 $dMonad
  = Command.Bundle.$s$fMonadErroreExceptT_$s$fMonadExceptT_$c>> @ e
"SPEC/Command.Bundle $fMonadExceptT_$c>>= @ IO _" [orphan] forall @ e
                                                                  ($dMonad :: GHC.Base.Monad
                                                                                GHC.Types.IO)
  Control.Monad.Trans.Except.$fMonadExceptT_$c>>= @ GHC.Types.IO
                                                  @ e
                                                  $dMonad
  = Command.Bundle.$s$fMonadErroreExceptT_$s$fMonadExceptT_$c>>= @ e
"SPEC/Command.Bundle catchE @ IO _ _ _" [orphan] forall @ e
                                                        @ a
                                                        @ e'
                                                        ($dMonad :: GHC.Base.Monad GHC.Types.IO)
  Control.Monad.Trans.Except.catchE @ GHC.Types.IO
                                    @ e
                                    @ a
                                    @ e'
                                    $dMonad
  = Command.Bundle.$s$fMonadErroreExceptT_$scatchE @ e @ a @ e'
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

