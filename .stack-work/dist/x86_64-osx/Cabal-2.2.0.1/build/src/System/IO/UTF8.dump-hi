
==================== FINAL INTERFACE ====================
2018-11-30 19:26:40.274449 UTC

interface purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:System.IO.UTF8 8043
  interface hash: 6f79839ccd54e0ca0abf19629bf71db7
  ABI hash: 750082717040f0844ba6a864b87f2d07
  export-list hash: 730562dba9918b2ad25eb1138aa4c0b5
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: fc125b0cf4e489bd85a30e6cf3087693
  opt_hash: 2c98c95d41c045ae9c2fb565ec8aabc6
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  System.IO.UTF8.fixCRLF
  System.IO.UTF8.readUTF8File
  System.IO.UTF8.readUTF8FileT
  System.IO.UTF8.writeUTF8File
  System.IO.UTF8.writeUTF8FileT
module dependencies:
package dependencies: array-0.5.2.0 base-4.11.1.0
                      base-compat-0.10.4 binary-0.8.5.1 bytestring-0.10.8.2
                      containers-0.5.11.0 deepseq-1.4.3.0 ghc-prim-0.5.2.0
                      integer-gmp-1.0.2.0 stringsearch-0.3.6.6 text-1.2.3.0
                      utf8-string-1.0.1.1
orphans: text-1.2.3.0:Data.Text binary-0.8.5.1:Data.Binary.Generic
         text-1.2.3.0:Data.Text.Show
         bytestring-0.10.8.2:Data.ByteString.Builder base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         text-1.2.3.0:Data.Text
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.IO 1d5542cc02075c5e948018bfacea89c1
import  -/  base-compat-0.10.4:Prelude.Compat bb6796186ed35a1d09dc34362a3fc27e
import  -/  bytestring-0.10.8.2:Data.ByteString 6d0008c12e5c3acd7278a6b95640b4e2
import  -/  bytestring-0.10.8.2:Data.ByteString.Internal dc7d0c96ef45c703ca21607112260299
import  -/  bytestring-0.10.8.2:Data.ByteString.Lazy b6cb59a78204810b2a79502bf5b4c1fc
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  stringsearch-0.3.6.6:Data.ByteString.Search bcc8d6f47ffea5991278ef59cb9a0a52
import  -/  text-1.2.3.0:Data.Text 7daa7e6c9b39d8cc1679e5ec5c64d2be
import  -/  text-1.2.3.0:Data.Text.Encoding 8e60367b574d8e5016309aaea7dc2100
import  -/  text-1.2.3.0:Data.Text.Internal 30a0a123f71f63b26cd34c6b24f23411
import  -/  utf8-string-1.0.1.1:Data.ByteString.UTF8 f7fca3c71b0ae890c6d6220e8c08c989
ed8f8ca1c2d90768cebc30716710c614
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   System.IO.UTF8.$trModule3
                   System.IO.UTF8.$trModule1) -}
c435cd13884aa1ba0630dbaf26df8ee8
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS System.IO.UTF8.$trModule2) -}
59084dc67f96d4a76c47e1a3539509ce
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("System.IO.UTF8"#) -}
b2e64188633c0e42ca3d6a7649285528
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS System.IO.UTF8.$trModule4) -}
8c103802dd421f33b4be0b5083e215ca
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"#) -}
3b6b48bf981d4aba0f0ee41a5f701f25
  fixCRLF ::
    Data.ByteString.Internal.ByteString
    -> Data.ByteString.Internal.ByteString
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.ByteString.Internal.ByteString) ->
                 let {
                   cs :: Data.ByteString.Lazy.Internal.ByteString
                   = System.IO.UTF8.fixCRLF_g x
                 } in
                 Data.ByteString.Lazy.toStrict_goLen0 cs cs) -}
1f2b83a912ea130f753e7b25b5058069
  fixCRLF1 ::
    Data.ByteString.Internal.ByteString
    -> Data.ByteString.Lazy.Internal.ByteString
  {- Arity: 1, Strictness: <L,1*U(U,U,U,1*U)>,
     Unfolding: (\ (x :: Data.ByteString.Internal.ByteString) ->
                 System.IO.UTF8.fixCRLF_f
                   (case x of wild2 { Data.ByteString.Internal.PS dt4 dt5 dt6 dt7 ->
                    case dt7 of wild {
                      DEFAULT
                      -> Data.ByteString.Lazy.Internal.Chunk
                           dt4
                           dt5
                           dt6
                           wild
                           Data.ByteString.Lazy.Internal.Empty
                      0# -> Data.ByteString.Lazy.Internal.Empty } })) -}
3d11381ae273abbf7430c6a3c16595e5
  fixCRLF2 ::
    [Data.ByteString.Internal.ByteString]
    -> [Data.ByteString.Internal.ByteString]
  {- Unfolding: (case GHC.Prim.newMutVar#
                        @ GHC.ForeignPtr.Finalizers
                        @ GHC.Prim.RealWorld
                        GHC.ForeignPtr.NoFinalizers
                        GHC.Prim.realWorld# of ds1 { (#,#) ipv ipv1 ->
                 case {__pkg_ccall bytestring-0.10.8.2 GHC.Prim.Addr#
                                                       -> GHC.Prim.State# GHC.Prim.RealWorld
                                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                             GHC.Prim.Word# #)}
                        System.IO.UTF8.fixCRLF_addr#
                        ipv of wild { (#,#) ds ds2 ->
                 let {
                   ipv2 :: GHC.Prim.Int# = GHC.Prim.word2Int# ds2
                 } in
                 case GHC.Prim.<=# ipv2 0# of lwild {
                   DEFAULT
                   -> GHC.Types.:
                        @ Data.ByteString.Internal.ByteString
                        (Data.ByteString.Internal.PS
                           System.IO.UTF8.fixCRLF_addr#
                           (GHC.ForeignPtr.PlainForeignPtr ipv1)
                           0#
                           ipv2)
                   1# -> GHC.Base.id @ [Data.ByteString.Internal.ByteString] } } }) -}
9fdaf954a03cdfda42a1d9fd027c61aa
  fixCRLF_addr# :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("\n"#) -}
7d3c604508ac80398abf3f2e1efa8656
  fixCRLF_addr#1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("\r\n"#) -}
244046a352ab8ce4c02edcc04794ee0e
  fixCRLF_f ::
    Data.ByteString.Lazy.Internal.ByteString
    -> Data.ByteString.Lazy.Internal.ByteString
  {- Unfolding: (case GHC.Prim.newMutVar#
                        @ GHC.ForeignPtr.Finalizers
                        @ GHC.Prim.RealWorld
                        GHC.ForeignPtr.NoFinalizers
                        GHC.Prim.realWorld# of ds1 { (#,#) ipv ipv1 ->
                 case {__pkg_ccall bytestring-0.10.8.2 GHC.Prim.Addr#
                                                       -> GHC.Prim.State# GHC.Prim.RealWorld
                                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                             GHC.Prim.Word# #)}
                        System.IO.UTF8.fixCRLF_addr#
                        ipv of wild { (#,#) ds ds2 ->
                 let {
                   ipv2 :: GHC.Prim.Int# = GHC.Prim.word2Int# ds2
                 } in
                 case GHC.Prim.<=# ipv2 0# of lwild {
                   DEFAULT
                   -> let {
                        ipv3 :: GHC.ForeignPtr.ForeignPtrContents
                        = GHC.ForeignPtr.PlainForeignPtr ipv1
                      } in
                      letrec {
                        c :: Data.ByteString.Lazy.Internal.ByteString
                        = Data.ByteString.Lazy.Internal.Chunk
                            System.IO.UTF8.fixCRLF_addr#
                            ipv3
                            0#
                            ipv2
                            c
                      } in
                      \ (ds4 :: Data.ByteString.Lazy.Internal.ByteString) -> c
                   1#
                   -> GHC.Base.id @ Data.ByteString.Lazy.Internal.ByteString } } }) -}
60923d8023947ab6be9bb41ed0c10b72
  fixCRLF_g ::
    Data.ByteString.Internal.ByteString
    -> Data.ByteString.Lazy.Internal.ByteString
  {- Unfolding: (case GHC.Prim.newMutVar#
                        @ GHC.ForeignPtr.Finalizers
                        @ GHC.Prim.RealWorld
                        GHC.ForeignPtr.NoFinalizers
                        GHC.Prim.realWorld# of ds1 { (#,#) ipv ipv1 ->
                 case {__pkg_ccall bytestring-0.10.8.2 GHC.Prim.Addr#
                                                       -> GHC.Prim.State# GHC.Prim.RealWorld
                                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                             GHC.Prim.Word# #)}
                        System.IO.UTF8.fixCRLF_addr#1
                        ipv of wild { (#,#) ds ds2 ->
                 let {
                   ipv2 :: GHC.Prim.Int# = GHC.Prim.word2Int# ds2
                 } in
                 case GHC.Prim.<=# ipv2 0# of lwild {
                   DEFAULT
                   -> let {
                        g :: Data.ByteString.Internal.ByteString
                             -> [Data.ByteString.Internal.ByteString]
                        = Data.ByteString.Search.Internal.BoyerMoore.$wstrictRepl
                            System.IO.UTF8.fixCRLF_addr#1
                            (GHC.ForeignPtr.PlainForeignPtr ipv1)
                            0#
                            ipv2
                            System.IO.UTF8.fixCRLF2
                      } in
                      \ (x :: Data.ByteString.Internal.ByteString) ->
                      Data.ByteString.Lazy.fromChunks_go (g x)
                   1# -> System.IO.UTF8.fixCRLF1 } } }) -}
a3405e1555701bdfeb18ccabc9d1f372
  readUTF8File :: GHC.IO.FilePath -> GHC.Types.IO GHC.Base.String
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                System.IO.UTF8.readUTF8File1
                  `cast`
                (<GHC.IO.FilePath>_R
                 ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R)) -}
bdc8598a70da6bd29de337a70821b589
  readUTF8File1 ::
    GHC.IO.FilePath
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.String #)
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: (\ (inFile :: GHC.IO.FilePath)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case System.IO.withBinaryFile1
                        @ Data.ByteString.Internal.ByteString
                        inFile
                        GHC.IO.IOMode.ReadMode
                        Data.ByteString.readFile2
                          `cast`
                        (<GHC.IO.Handle.Types.Handle>_R
                         ->_R Sym (GHC.Types.N:IO[0]
                                       <Data.ByteString.Internal.ByteString>_R))
                        eta of ds { (#,#) ipv ipv1 ->
                 (# ipv,
                    let {
                      cs :: Data.ByteString.Lazy.Internal.ByteString
                      = System.IO.UTF8.fixCRLF_g ipv1
                    } in
                    case Data.ByteString.Lazy.toStrict_goLen0
                           cs
                           cs of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                    Data.ByteString.UTF8.$wfoldr
                      @ [GHC.Types.Char]
                      (GHC.Types.: @ GHC.Types.Char)
                      (GHC.Types.[] @ GHC.Types.Char)
                      ww1
                      ww2
                      ww3
                      ww4 } #) }) -}
0d7c184797a7526353a3fa1d1d009e56
  readUTF8FileT ::
    GHC.IO.FilePath -> GHC.Types.IO Data.Text.Internal.Text
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                System.IO.UTF8.readUTF8FileT1
                  `cast`
                (<GHC.IO.FilePath>_R
                 ->_R Sym (GHC.Types.N:IO[0] <Data.Text.Internal.Text>_R)) -}
45872a42fef2cc6eccdb8eb041942335
  readUTF8FileT1 ::
    GHC.IO.FilePath
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: (\ (inFile :: GHC.IO.FilePath)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case System.IO.withBinaryFile1
                        @ Data.ByteString.Internal.ByteString
                        inFile
                        GHC.IO.IOMode.ReadMode
                        Data.ByteString.readFile2
                          `cast`
                        (<GHC.IO.Handle.Types.Handle>_R
                         ->_R Sym (GHC.Types.N:IO[0]
                                       <Data.ByteString.Internal.ByteString>_R))
                        eta of ds { (#,#) ipv ipv1 ->
                 (# ipv,
                    let {
                      cs :: Data.ByteString.Lazy.Internal.ByteString
                      = System.IO.UTF8.fixCRLF_g ipv1
                    } in
                    case Data.ByteString.Lazy.toStrict_goLen0
                           cs
                           cs of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                    Data.Text.Encoding.$wdecodeUtf8With
                      Data.Text.Encoding.Error.strictDecode
                      ww1
                      ww2
                      ww3
                      ww4 } #) }) -}
05c6b8b64d0cf1c49f5e7fd7b2020ecf
  writeUTF8File ::
    GHC.IO.FilePath -> GHC.Base.String -> GHC.Types.IO ()
  {- Arity: 3, Strictness: <L,U><L,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                System.IO.UTF8.writeUTF8File1
                  `cast`
                (<GHC.IO.FilePath>_R
                 ->_R <GHC.Base.String>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
e202cfb3a2749beb773c3ca3fba395dd
  writeUTF8File1 ::
    GHC.IO.FilePath
    -> GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <L,U><L,1*U><S,U>,
     Unfolding: (\ (inFile :: GHC.IO.FilePath)
                   (text :: GHC.Base.String)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 System.IO.withBinaryFile1
                   @ ()
                   inFile
                   GHC.IO.IOMode.WriteMode
                   (\ (ds :: GHC.IO.Handle.Types.Handle)[OneShot]
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case Data.ByteString.UTF8.fromString
                           text of ww { Data.ByteString.Internal.PS ww1 ww2 ww3 ww4 ->
                    Data.ByteString.$whPut ds ww1 ww2 ww3 ww4 eta1 })
                     `cast`
                   (<GHC.IO.Handle.Types.Handle>_R
                    ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                   eta) -}
2362ccd731122870b66b2878c3e71faf
  writeUTF8FileT ::
    GHC.IO.FilePath -> Data.Text.Internal.Text -> GHC.Types.IO ()
  {- Arity: 3, Strictness: <L,U><L,1*U(U,U,1*U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                System.IO.UTF8.writeUTF8FileT1
                  `cast`
                (<GHC.IO.FilePath>_R
                 ->_R <Data.Text.Internal.Text>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
1494ca754cb81c3e984be044be4d150d
  writeUTF8FileT1 ::
    GHC.IO.FilePath
    -> Data.Text.Internal.Text
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, Strictness: <L,U><L,1*U(U,U,1*U)><S,U>,
     Unfolding: (\ (inFile :: GHC.IO.FilePath)
                   (text :: Data.Text.Internal.Text)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 System.IO.withBinaryFile1
                   @ ()
                   inFile
                   GHC.IO.IOMode.WriteMode
                   (\ (ds :: GHC.IO.Handle.Types.Handle)[OneShot]
                      (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case text of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                    case Data.Text.Encoding.$wencodeUtf8
                           ww1
                           ww2
                           ww3 of ww4 { Data.ByteString.Internal.PS ww5 ww6 ww7 ww8 ->
                    Data.ByteString.$whPut ds ww5 ww6 ww7 ww8 eta1 } })
                     `cast`
                   (<GHC.IO.Handle.Types.Handle>_R
                    ->_R Sym (GHC.Types.N:IO[0] <()>_R))
                   eta) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

