
==================== FINAL INTERFACE ====================
2018-11-30 20:46:39.761964 UTC

interface purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Externs 8043
  interface hash: 334d59258b90f01b61ae52912e4dc456
  ABI hash: 17598d5385c46f650a2a55de08912a53
  export-list hash: f9fc7fa26f69a655fd896d8cccd21570
  orphan hash: ea9c45ad347f1f352da9d69e4169fee7
  flag hash: f3553c80622c9d61b5c3b385d3f3780b
  opt_hash: 2c98c95d41c045ae9c2fb565ec8aabc6
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: True
  where
exports:
  Language.PureScript.Externs.applyExternsFileToEnvironment
  Language.PureScript.Externs.moduleToExternsFile
  Language.PureScript.Externs.ExternsDeclaration{Language.PureScript.Externs.EDClass Language.PureScript.Externs.EDDataConstructor Language.PureScript.Externs.EDInstance Language.PureScript.Externs.EDKind Language.PureScript.Externs.EDType Language.PureScript.Externs.EDTypeSynonym Language.PureScript.Externs.EDValue edClassConstraints edClassMembers edClassName edClassTypeArguments edDataCtorFields edDataCtorName edDataCtorOrigin edDataCtorType edDataCtorTypeCtor edFunctionalDependencies edInstanceChain edInstanceChainIndex edInstanceClassName edInstanceConstraints edInstanceName edInstanceTypes edKindName edTypeDeclarationKind edTypeKind edTypeName edTypeSynonymArguments edTypeSynonymName edTypeSynonymType edValueName edValueType}
  Language.PureScript.Externs.ExternsFile{Language.PureScript.Externs.ExternsFile efDeclarations efExports efFixities efImports efModuleName efSourceSpan efTypeFixities efVersion}
  Language.PureScript.Externs.ExternsFixity{Language.PureScript.Externs.ExternsFixity efAlias efAssociativity efOperator efPrecedence}
  Language.PureScript.Externs.ExternsImport{Language.PureScript.Externs.ExternsImport eiImportType eiImportedAs eiModule}
  Language.PureScript.Externs.ExternsTypeFixity{Language.PureScript.Externs.ExternsTypeFixity efTypeAlias efTypeAssociativity efTypeOperator efTypePrecedence}
module dependencies: Control.Monad.Supply
                     Control.Monad.Supply.Class Language.PureScript.AST
                     Language.PureScript.AST.Binders
                     Language.PureScript.AST.Declarations
                     Language.PureScript.AST.Exported Language.PureScript.AST.Literals
                     Language.PureScript.AST.Operators Language.PureScript.AST.SourcePos
                     Language.PureScript.AST.Traversals Language.PureScript.Bundle
                     Language.PureScript.Comments Language.PureScript.Constants
                     Language.PureScript.Crash Language.PureScript.Environment
                     Language.PureScript.Kinds Language.PureScript.Label
                     Language.PureScript.Names Language.PureScript.PSString
                     Language.PureScript.Traversals
                     Language.PureScript.TypeClassDictionaries Language.PureScript.Types
                     Paths_purescript
package dependencies: aeson-1.3.1.1 aeson-better-errors-0.9.1.0
                      array-0.5.2.0 async-2.2.1 attoparsec-0.13.2.2 base-4.11.1.0
                      base-compat-0.10.4 binary-0.8.5.1 blaze-builder-0.4.1.0
                      bytestring-0.10.8.2 containers-0.5.11.0 deepseq-1.4.3.0
                      dlist-0.8.0.4 filepath-1.4.2 ghc-boot-th-8.4.3 ghc-prim-0.5.2.0
                      hashable-1.2.7.0 integer-gmp-1.0.2.0 integer-logarithms-1.0.2.1
                      language-javascript-0.6.0.11 mtl-2.2.2 parsec-3.1.13.0
                      pretty-1.1.3.6 primitive-0.6.3.0 protolude-0.2.2 random-1.1
                      scientific-0.3.6.2 sourcemap-0.1.6 stm-2.4.5.0 syb-0.7 tagged-0.8.5
                      template-haskell-2.13.0.0 text-1.2.3.0 th-abstraction-0.2.8.0
                      time-1.8.0.2 time-locale-compat-0.1.1.4 transformers-0.5.5.0
                      unordered-containers-0.2.9.0 utf8-string-1.0.1.1 uuid-types-1.0.3
                      vector-0.12.0.1
orphans: syb-0.7:Data.Generics.Instances
         stm-2.4.5.0:Control.Monad.STM
         attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         vector-0.12.0.1:Data.Vector.Unboxed
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.0:Data.Text.Lazy
         text-1.2.3.0:Data.Text binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.5.0:Control.Monad.Trans.Error
         base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: aeson-1.3.1.1:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.Graph
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         dlist-0.8.0.4:Data.DList ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.AST.Declarations
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.AST.Operators
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.AST.SourcePos
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Environment
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Kinds
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Label
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Names
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.PSString
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.TypeClassDictionaries
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Types
                         tagged-0.8.5:Data.Tagged
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
                         th-abstraction-0.2.8.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  aeson-1.3.1.1:Data.Aeson.TH 7d552baba5d6d064e5d0fb814e331004
import  -/  aeson-1.3.1.1:Data.Aeson.Types.FromJSON 1ea0c919856f0d29f12e53cd074d532c
import  -/  aeson-1.3.1.1:Data.Aeson.Types.Internal df76c21edff000f9355bfb6fb0dbf3e6
import  -/  aeson-1.3.1.1:Data.Aeson.Types.ToJSON 587c7d8b9444e85253d7faf5f824f568
import  -/  base-4.11.1.0:Data.Either 39d922b371c4c52d426e9ee66de8371a
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.Functor f522c3501272159820fd6f242510732f
import  -/  base-4.11.1.0:Data.List 83dc843e47bfc0c5af51e19c6f3476d5
import  -/  base-4.11.1.0:Data.Maybe 409c3da2b142470b68be39ce1d97a9f7
import  -/  base-4.11.1.0:Data.Tuple 3af66f3ac61ed95ba8a3a3f68ebc5003
import  -/  base-4.11.1.0:Data.Version 26b96b3dd83a23703e0b8110475fc04a
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-compat-0.10.4:Prelude.Compat bb6796186ed35a1d09dc34362a3fc27e
import  -/  containers-0.5.11.0:Data.Map 0dbdaec812ef695a364aa6c69e7f7d53
import  -/  containers-0.5.11.0:Data.Map.Internal 0150e210d0ae8df0f3a0669d5e32d8fa
import  -/  containers-0.5.11.0:Data.Set 7d3c64a641be4cacbcd8119445bab919
import  -/  containers-0.5.11.0:Data.Set.Internal 93fa3ef95853aa2a7aadf32d693bd451
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  integer-gmp-1.0.2.0:GHC.Integer.Type f3d5169c3d3830854b19f6565b265403
import  -/  Language.PureScript.AST 7ed0e74bfed5b6489b8a5eabab5c0241
  exports: 0d53d92339536cd6d8d7dcfcad8e7c7e
import  -/  Language.PureScript.AST.Declarations 568e046fbf27b243bfc96f09017d4782
  Declaration b31d94d0c7b90700d40f9ba6ec420e41
  DeclarationRef 9de74e8b46bfd07e044a72617cc5da5c
  ImportDeclaration 0c2bc2f3ca892343473f34859c93a6e3
  ImportDeclarationType f900e8c96b49d573d3e54286bc8fd980
  KindRef 8245863d9321690e594853e7ff0fdb63
  Module b9e5d519f3251f7053b581e4ecd9e6bf
  Module 7cf4b96f7d4b51b446726a099ab87bb6
  TypeClassRef 93a0e32770563d43fa3f04289a54725f
  TypeFixityDeclaration 442ba50b491e46b095a0fd0218f236ad
  TypeInstanceRef 850b5eee032f7eade911f65aaca47804
  TypeRef f23e4bfa1c94ce55e9357e5fb97176c4
  ValueFixityDeclaration eb9c8f0bb082690f8aa4e758b5751212
  ValueRef 984b564c7d121e5297a91fc424d0970b
  getTypeOpRef c807c0d47029b8283509ed31e6fc3ff1
  getValueOpRef be7af64c7f2421e5081867b94579e0a9
import  -/  Language.PureScript.AST.Operators be736e316462ef3abce53315e7361a17
  Associativity 17f2097426b72eb751701f86cd97792c
  Fixity b54dc78c2a40564b4aeb547cc4004cc2
  Precedence bcd61162407eaf77832b70b749dfb2a6
import  -/  Language.PureScript.AST.SourcePos b3f67f807f2dce79528bbb15bd9c7104
  SourceSpan 73c071552214b3f18e94970349d3affc
import  -/  Language.PureScript.Crash 1bc11bf824676e9581610d0d05d26761
  exports: 8a971f39d6ef3f27956f413640cb0a24
  internalError f3db7e23c75878c9d13888d6d114012d
import  -/  Language.PureScript.Environment 31667499b7017b19998bb405474fbe93
  exports: 56b1ef0ac6132b4c113ce26a807dcfb6
  DataDeclType c291d940fae22a3f1400d8c90f26bdd4
  DataType 66a69ad91d27f63ffae9aabcd81e6233
  Defined d489ca36b83d6a80bdf403858bcc7d71
  Environment c291d940fae22a3f1400d8c90f26bdd4
  ExternData 1715634a3c4e915deb2168a6610dc2d4
  External 4e3a5bb485b87f0aa3cf18c7792f87d1
  FunctionalDependency ef672654cffb5adb82634076fd85ad4a
  TypeClassData c2906fb1dbfafc72d037603e0daeb12c
  TypeKind 0a0df18a3a5bbdd9f1dda59baf0fb992
  TypeSynonym 52966b15ad2199305d192397e3d5bd07
  dataConstructors c291d940fae22a3f1400d8c90f26bdd4
  kinds c291d940fae22a3f1400d8c90f26bdd4
  makeTypeClassData 042b5db094550bfdec5273875526277b
  names c291d940fae22a3f1400d8c90f26bdd4
  typeClassArguments ef672654cffb5adb82634076fd85ad4a
  typeClassCoveringSets ef672654cffb5adb82634076fd85ad4a
  typeClassDependencies ef672654cffb5adb82634076fd85ad4a
  typeClassDeterminedArguments ef672654cffb5adb82634076fd85ad4a
  typeClassDictionaries c291d940fae22a3f1400d8c90f26bdd4
  typeClassMembers ef672654cffb5adb82634076fd85ad4a
  typeClassSuperclasses ef672654cffb5adb82634076fd85ad4a
  typeClasses c291d940fae22a3f1400d8c90f26bdd4
  typeSynonyms c291d940fae22a3f1400d8c90f26bdd4
  types c291d940fae22a3f1400d8c90f26bdd4
import  -/  Language.PureScript.Kinds bf1fc2fd18b06658330fcf93fe50e737
  exports: 2c2448e43e622d2466a59b9cd8f4db91
  Kind 3e1e213eb647453235d33b0d1b36ec59
import  -/  Language.PureScript.Names b3bf151840f3e8f2eb61eff186432886
  exports: f7f3503d20957194bda83c16bb5f1288
  ClassName e69348bcf8c43a2174540a1d5983bfaa
  ConstructorName 9fb88e980342b224c2a4e4b58fa9fe33
  Ident ab98a56ffa88760dad1380079e8ee35a
  KindName 681d490d18bc7da009f3503010a994f8
  ModuleName 5a70062bbdf29e6dc659ad8bf5326b50
  OpName 1522672b880b192c6e05e6cf8a45712d
  ProperName 29f101e190cc99df85623423972e606f
  Qualified d600a7f01c8203cf5504999de99c923c
  Qualified 5a70062bbdf29e6dc659ad8bf5326b50
  TypeName da42c92f73f4f363c63ecaf77b6335b9
  TypeOpName 34023316af2b751c6196ece0b5420c6b
  ValueOpName 1d06f91abd827e7b0c072b254546708a
  coerceProperName 9cce674374cd97d7385253445133e737
import  -/  Language.PureScript.TypeClassDictionaries 85b2520728908ad345f56b1c2cbe3fca
  exports: cc9c93841004965313696be0c74a01eb
  NamedDict 1c7eb5af0357b976dbe077e65975eac8
  TypeClassDictionaryInScope c1f0a82f8146987fb0ec5a84ba847e8e
  tcdChain 6fae3e2d3c76b2d8044da9ff9cec0bdb
  tcdClassName 6fae3e2d3c76b2d8044da9ff9cec0bdb
  tcdDependencies 6fae3e2d3c76b2d8044da9ff9cec0bdb
  tcdIndex 6fae3e2d3c76b2d8044da9ff9cec0bdb
  tcdInstanceTypes 6fae3e2d3c76b2d8044da9ff9cec0bdb
  tcdPath 6fae3e2d3c76b2d8044da9ff9cec0bdb
  tcdValue 6fae3e2d3c76b2d8044da9ff9cec0bdb
import  -/  Language.PureScript.Types 74562e642f5297557b3a23aac7819ad1
  exports: ae97bc75fcebc59f59c970736847a827
  Constraint 93223f8afa90d0facc05a03f863dc72d
  Type 93223f8afa90d0facc05a03f863dc72d
import  -/  Paths_purescript a1929913cfb69ecc53654efc3b17c6b3
  exports: 2c455cd4735d13a5fa8e95701f74bbba
  version 36e47562f1510cc9eab6b4cc20db5d32
import  -/  text-1.2.3.0:Data.Text 7daa7e6c9b39d8cc1679e5ec5c64d2be
import  -/  text-1.2.3.0:Data.Text.Internal 30a0a123f71f63b26cd34c6b24f23411
import  -/  text-1.2.3.0:Data.Text.Show 3b4b6fb2985a731022d67f636682da2b
import  -/  unordered-containers-0.2.9.0:Data.HashMap.Base aa3368c2691ac85cecf0d74a4bea8e4d
45a26a6f5854665222c379466681ba1c
  $fFromJSONExternsDeclaration ::
    Data.Aeson.Types.FromJSON.FromJSON
      Language.PureScript.Externs.ExternsDeclaration
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Externs.ExternsDeclaration
                  Language.PureScript.Externs.$fFromJSONExternsDeclaration_$cparseJSON
                  Language.PureScript.Externs.$fFromJSONExternsDeclaration_$cparseJSONList -}
48386fc5c738e912249e574edb89f9d9
  $fFromJSONExternsDeclaration1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (", encountered "#) -}
fa56508bbf5f97e197033a6f7525779b
  $fFromJSONExternsDeclaration2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("[a]"#) -}
91eed78df776e74c9edfe50787d7e7c3
  $fFromJSONExternsDeclaration3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("expected "#) -}
45a26a6f5854665222c379466681ba1c
  $fFromJSONExternsDeclaration4 ::
    [(Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value)]
    -> Data.Aeson.Types.Internal.Parser
         Language.PureScript.Externs.ExternsDeclaration
  {- Arity: 1, Strictness: <S,U> -}
bb2c6f2da6e815b67d4a1c75233f44ce
  $fFromJSONExternsDeclaration5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Externs.$fFromJSONExternsDeclaration6) -}
c73d326d947bcce59f4c53a506187618
  $fFromJSONExternsDeclaration6 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Language.PureScript.Externs.ExternsDeclaration"#) -}
45a26a6f5854665222c379466681ba1c
  $fFromJSONExternsDeclaration_$cparseJSON ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         Language.PureScript.Externs.ExternsDeclaration
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (value :: Data.Aeson.Types.Internal.Value) ->
                 case value of wild {
                   DEFAULT
                   -> Data.Aeson.TH.noObjectFail
                        @ Language.PureScript.Externs.ExternsDeclaration
                        Language.PureScript.Externs.$fFromJSONExternsDeclaration5
                        (case wild of wild1 {
                           Data.Aeson.Types.Internal.Array ds9 -> Data.Aeson.TH.valueConName9
                           Data.Aeson.Types.Internal.String ds9 -> Data.Aeson.TH.valueConName7
                           Data.Aeson.Types.Internal.Number ds9 -> Data.Aeson.TH.valueConName5
                           Data.Aeson.Types.Internal.Bool ds9 -> Data.Aeson.TH.valueConName3
                           Data.Aeson.Types.Internal.Null -> Data.Aeson.TH.valueConName1 })
                   Data.Aeson.Types.Internal.Object obj
                   -> case obj of wild1 {
                        Data.HashMap.Base.Empty
                        -> Language.PureScript.Externs.$fFromJSONExternsDeclaration4
                             (GHC.Types.[]
                                @ (Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value))
                        Data.HashMap.Base.BitmapIndexed dt dt1
                        -> Language.PureScript.Externs.$fFromJSONExternsDeclaration4
                             (Language.PureScript.Externs.$fFromJSONExternsDeclaration_$s$wgo3
                                (GHC.Types.[]
                                   @ (Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value))
                                0#
                                (GHC.Prim.sizeofSmallArray#
                                   @ (Data.HashMap.Base.HashMap
                                        Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                                   dt1)
                                dt1)
                        Data.HashMap.Base.Leaf dt dt1 dt2
                        -> Language.PureScript.Externs.$fFromJSONExternsDeclaration4
                             (GHC.Types.:
                                @ (Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value)
                                (dt1, dt2)
                                (GHC.Types.[]
                                   @ (Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value)))
                        Data.HashMap.Base.Full dt
                        -> Language.PureScript.Externs.$fFromJSONExternsDeclaration4
                             (Language.PureScript.Externs.$fFromJSONExternsDeclaration_$s$wgo1
                                (GHC.Types.[]
                                   @ (Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value))
                                0#
                                (GHC.Prim.sizeofSmallArray#
                                   @ (Data.HashMap.Base.HashMap
                                        Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                                   dt)
                                dt)
                        Data.HashMap.Base.Collision dt dt1
                        -> Language.PureScript.Externs.$fFromJSONExternsDeclaration4
                             (Language.PureScript.Externs.$fFromJSONExternsDeclaration_$s$wgo2
                                (GHC.Types.[]
                                   @ (Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value))
                                0#
                                (GHC.Prim.sizeofSmallArray#
                                   @ (Data.HashMap.Base.Leaf
                                        Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                                   dt1)
                                dt1) } }) -}
45a26a6f5854665222c379466681ba1c
  $fFromJSONExternsDeclaration_$cparseJSONList ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         [Language.PureScript.Externs.ExternsDeclaration]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Data.Aeson.Types.Internal.Value) ->
                 case ds of wild {
                   DEFAULT
                   -> let {
                        msg19 :: GHC.Base.String
                        = GHC.CString.unpackAppendCString#
                            Language.PureScript.Externs.$fFromJSONExternsDeclaration3
                            (GHC.CString.unpackAppendCString#
                               Language.PureScript.Externs.$fFromJSONExternsDeclaration2
                               (GHC.CString.unpackAppendCString#
                                  Language.PureScript.Externs.$fFromJSONExternsDeclaration1
                                  (case wild of wild1 {
                                     Data.Aeson.Types.Internal.Object ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList10
                                     Data.Aeson.Types.Internal.String ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList8
                                     Data.Aeson.Types.Internal.Number ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList6
                                     Data.Aeson.Types.Internal.Bool ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList4
                                     Data.Aeson.Types.Internal.Null
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList1 })))
                      } in
                      (\ @ f6 :: * -> *
                         @ r
                         (path :: Data.Aeson.Types.Internal.JSONPath)
                         (kf :: Data.Aeson.Types.Internal.Failure f6 r)
                         (_ks :: Data.Aeson.Types.Internal.Success
                                   [Language.PureScript.Externs.ExternsDeclaration] f6 r) ->
                       kf
                         (GHC.List.reverse @ Data.Aeson.Types.Internal.JSONPathElement path)
                         msg19)
                        `cast`
                      (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                <[Language.PureScript.Externs.ExternsDeclaration]>_R))
                   Data.Aeson.Types.Internal.Array a10
                   -> case a10 of wild1 { Data.Vector.Vector dt dt1 dt2 ->
                      letrec {
                        $wgo :: GHC.Prim.Int# -> [Data.Aeson.Types.Internal.Value]
                          {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                        = \ (ww :: GHC.Prim.Int#) ->
                          case GHC.Prim.>=# ww dt1 of lwild {
                            DEFAULT
                            -> case GHC.Prim.indexArray#
                                      @ Data.Aeson.Types.Internal.Value
                                      dt2
                                      (GHC.Prim.+# dt ww) of ds3 { Unit# ipv33 ->
                               GHC.Types.:
                                 @ Data.Aeson.Types.Internal.Value
                                 ipv33
                                 ($wgo (GHC.Prim.+# ww 1#)) }
                            1# -> GHC.Types.[] @ Data.Aeson.Types.Internal.Value }
                      } in
                      Language.PureScript.Externs.$fFromJSONExternsDeclaration_go
                        0#
                        ($wgo 0#) } }) -}
c8a0b8c994805ad943017689afdd3e8d
  $fFromJSONExternsDeclaration_$s$wgo1 ::
    [(Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value)]
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.SmallArray#
         (Data.HashMap.Base.HashMap
            Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
    -> [(Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value)]
  {- Arity: 4, HasNoCafRefs, Strictness: <L,1*U><S,U><S,U><L,U> -}
43be2cfe14e8eea0ce645f705302f076
  $fFromJSONExternsDeclaration_$s$wgo2 ::
    [(Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value)]
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.SmallArray#
         (Data.HashMap.Base.Leaf
            Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
    -> [(Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value)]
  {- Arity: 4, HasNoCafRefs, Strictness: <L,1*U><S,U><S,U><L,U> -}
3cb3891a62ec7dc9a8222ee0d0890fc8
  $fFromJSONExternsDeclaration_$s$wgo3 ::
    [(Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value)]
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.SmallArray#
         (Data.HashMap.Base.HashMap
            Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
    -> [(Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value)]
  {- Arity: 4, HasNoCafRefs, Strictness: <L,1*U><S,U><S,U><L,U> -}
45a26a6f5854665222c379466681ba1c
  $fFromJSONExternsDeclaration_go ::
    GHC.Prim.Int#
    -> [Data.Aeson.Types.Internal.Value]
    -> Data.Aeson.Types.Internal.Parser
         [Language.PureScript.Externs.ExternsDeclaration]
  {- Arity: 2, Strictness: <L,U><S,1*U> -}
b2e76f24ecba17bf3b946e078a8414b6
  $fFromJSONExternsFile ::
    Data.Aeson.Types.FromJSON.FromJSON
      Language.PureScript.Externs.ExternsFile
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Externs.ExternsFile
                  Language.PureScript.Externs.$fFromJSONExternsFile_$cparseJSON
                  Language.PureScript.Externs.$fFromJSONExternsFile_$cparseJSONList -}
b2e76f24ecba17bf3b946e078a8414b6
  $fFromJSONExternsFile_$cparseJSON ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         Language.PureScript.Externs.ExternsFile
  {- Arity: 1, Strictness: <S,1*U> -}
b2e76f24ecba17bf3b946e078a8414b6
  $fFromJSONExternsFile_$cparseJSONList ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         [Language.PureScript.Externs.ExternsFile]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Data.Aeson.Types.Internal.Value) ->
                 case ds of wild {
                   DEFAULT
                   -> let {
                        msg19 :: GHC.Base.String
                        = GHC.CString.unpackAppendCString#
                            Language.PureScript.Externs.$fFromJSONExternsDeclaration3
                            (GHC.CString.unpackAppendCString#
                               Language.PureScript.Externs.$fFromJSONExternsDeclaration2
                               (GHC.CString.unpackAppendCString#
                                  Language.PureScript.Externs.$fFromJSONExternsDeclaration1
                                  (case wild of wild1 {
                                     Data.Aeson.Types.Internal.Object ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList10
                                     Data.Aeson.Types.Internal.String ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList8
                                     Data.Aeson.Types.Internal.Number ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList6
                                     Data.Aeson.Types.Internal.Bool ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList4
                                     Data.Aeson.Types.Internal.Null
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList1 })))
                      } in
                      (\ @ f6 :: * -> *
                         @ r
                         (path :: Data.Aeson.Types.Internal.JSONPath)
                         (kf :: Data.Aeson.Types.Internal.Failure f6 r)
                         (_ks :: Data.Aeson.Types.Internal.Success
                                   [Language.PureScript.Externs.ExternsFile] f6 r) ->
                       kf
                         (GHC.List.reverse @ Data.Aeson.Types.Internal.JSONPathElement path)
                         msg19)
                        `cast`
                      (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                <[Language.PureScript.Externs.ExternsFile]>_R))
                   Data.Aeson.Types.Internal.Array a10
                   -> case a10 of wild1 { Data.Vector.Vector dt dt1 dt2 ->
                      letrec {
                        $wgo :: GHC.Prim.Int# -> [Data.Aeson.Types.Internal.Value]
                          {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                        = \ (ww :: GHC.Prim.Int#) ->
                          case GHC.Prim.>=# ww dt1 of lwild {
                            DEFAULT
                            -> case GHC.Prim.indexArray#
                                      @ Data.Aeson.Types.Internal.Value
                                      dt2
                                      (GHC.Prim.+# dt ww) of ds3 { Unit# ipv33 ->
                               GHC.Types.:
                                 @ Data.Aeson.Types.Internal.Value
                                 ipv33
                                 ($wgo (GHC.Prim.+# ww 1#)) }
                            1# -> GHC.Types.[] @ Data.Aeson.Types.Internal.Value }
                      } in
                      Language.PureScript.Externs.$fFromJSONExternsFile_go
                        0#
                        ($wgo 0#) } }) -}
b2e76f24ecba17bf3b946e078a8414b6
  $fFromJSONExternsFile_go ::
    GHC.Prim.Int#
    -> [Data.Aeson.Types.Internal.Value]
    -> Data.Aeson.Types.Internal.Parser
         [Language.PureScript.Externs.ExternsFile]
  {- Arity: 2, Strictness: <L,U><S,1*U> -}
e2b9825419a009927ef7bc8fe43a5592
  $fFromJSONExternsFixity ::
    Data.Aeson.Types.FromJSON.FromJSON
      Language.PureScript.Externs.ExternsFixity
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Externs.ExternsFixity
                  Language.PureScript.Externs.$fFromJSONExternsFixity_$cparseJSON
                  Language.PureScript.Externs.$fFromJSONExternsFixity_$cparseJSONList -}
635046c201eb2e1b9e83ecd093def558
  $fFromJSONExternsFixity1 ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         (Language.PureScript.Names.Qualified
            (Data.Either.Either
               Language.PureScript.Names.Ident
               (Language.PureScript.Names.ProperName
                  'Language.PureScript.Names.ConstructorName)))
  {- Arity: 1,
     Unfolding: (Language.PureScript.Names.$fFromJSONQualified_$cparseJSON
                   @ (Data.Either.Either
                        Language.PureScript.Names.Ident
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.ConstructorName))
                   Language.PureScript.Externs.$fFromJSONExternsFixity_$s$fFromJSONEither) -}
222d1929372fc42fc503d5b4df896e1e
  $fFromJSONExternsFixity10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Externs.$fFromJSONExternsFixity11) -}
382c77b08b62f007771575fe3ca0fef1
  $fFromJSONExternsFixity11 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Object"#) -}
f295584d9ab29bde585818f75b2db535
  $fFromJSONExternsFixity12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Externs.$fFromJSONExternsFixity13) -}
8312bfaf7ae0dc51229e147507c8d130
  $fFromJSONExternsFixity13 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Language.PureScript.Externs.ExternsFixity"#) -}
3a48ffb28396ca82ac2a66366bdc8bc9
  $fFromJSONExternsFixity14 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Externs.$fFromJSONExternsFixity15) -}
a40626c043b9962ae7233db93f31f3d5
  $fFromJSONExternsFixity15 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ExternsFixity"#) -}
d8aa7bb399a579a787b625b05c9cc729
  $fFromJSONExternsFixity2 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Externs.$fFromJSONExternsFixity3) -}
d13568e54cbd06e055b6a6d32afa0ef3
  $fFromJSONExternsFixity3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("efAlias"#) -}
0a9d076380ff7b177f1b292ed873db18
  $fFromJSONExternsFixity4 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Externs.$fFromJSONExternsFixity5) -}
e48605ba0563fc783da3dc9bc77f3725
  $fFromJSONExternsFixity5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("efOperator"#) -}
ad83bcb6f97a04284fa388523a1c9efe
  $fFromJSONExternsFixity6 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Externs.$fFromJSONExternsFixity7) -}
d61373aa9b7b642af11258516a7d9de2
  $fFromJSONExternsFixity7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("efPrecedence"#) -}
b51f42e449c9faeec9801b9e821cc9b3
  $fFromJSONExternsFixity8 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Externs.$fFromJSONExternsFixity9) -}
fea493f08f89f8993607bb87bae583de
  $fFromJSONExternsFixity9 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("efAssociativity"#) -}
e2b9825419a009927ef7bc8fe43a5592
  $fFromJSONExternsFixity_$cparseJSON ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         Language.PureScript.Externs.ExternsFixity
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (value :: Data.Aeson.Types.Internal.Value) ->
                 case value of wild {
                   DEFAULT
                   -> Data.Aeson.TH.parseTypeMismatch'
                        @ Language.PureScript.Externs.ExternsFixity
                        Language.PureScript.Externs.$fFromJSONExternsFixity14
                        Language.PureScript.Externs.$fFromJSONExternsFixity12
                        Language.PureScript.Externs.$fFromJSONExternsFixity10
                        (case wild of wild1 {
                           Data.Aeson.Types.Internal.Array ds9 -> Data.Aeson.TH.valueConName9
                           Data.Aeson.Types.Internal.String ds9 -> Data.Aeson.TH.valueConName7
                           Data.Aeson.Types.Internal.Number ds9 -> Data.Aeson.TH.valueConName5
                           Data.Aeson.Types.Internal.Bool ds9 -> Data.Aeson.TH.valueConName3
                           Data.Aeson.Types.Internal.Null -> Data.Aeson.TH.valueConName1 })
                   Data.Aeson.Types.Internal.Object recObj
                   -> let {
                        m :: Data.Aeson.Types.Internal.Parser
                               Language.PureScript.AST.Operators.Associativity
                        = case Language.PureScript.Externs.$fFromJSONExternsFixity8 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                          Data.Aeson.TH.$w$clookupField1
                            @ Language.PureScript.AST.Operators.Associativity
                            Language.PureScript.AST.Operators.$fFromJSONAssociativity_$cparseJSON
                            Language.PureScript.Externs.$fFromJSONExternsFixity12
                            Language.PureScript.Externs.$fFromJSONExternsFixity14
                            recObj
                            ww1
                            ww2
                            ww3 }
                      } in
                      let {
                        e :: Data.Aeson.Types.Internal.Parser
                               Language.PureScript.AST.Operators.Precedence
                        = case Language.PureScript.Externs.$fFromJSONExternsFixity6 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                          Data.Aeson.TH.$w$clookupField1
                            @ GHC.Integer.Type.Integer
                            Data.Aeson.Types.FromJSON.$fFromJSONInteger_$cparseJSON
                            Language.PureScript.Externs.$fFromJSONExternsFixity12
                            Language.PureScript.Externs.$fFromJSONExternsFixity14
                            recObj
                            ww1
                            ww2
                            ww3 }
                      } in
                      let {
                        e1 :: Data.Aeson.Types.Internal.Parser
                                (Language.PureScript.Names.OpName
                                   'Language.PureScript.Names.ValueOpName)
                        = case Language.PureScript.Externs.$fFromJSONExternsFixity4 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                          Data.Aeson.TH.$w$clookupField1
                            @ (Language.PureScript.Names.OpName
                                 'Language.PureScript.Names.ValueOpName)
                            (Language.PureScript.Names.$fFromJSONOpName_$cparseJSON
                               @ 'Language.PureScript.Names.ValueOpName)
                            Language.PureScript.Externs.$fFromJSONExternsFixity12
                            Language.PureScript.Externs.$fFromJSONExternsFixity14
                            recObj
                            ww1
                            ww2
                            ww3 }
                      } in
                      let {
                        e2 :: Data.Aeson.Types.Internal.Parser
                                (Language.PureScript.Names.Qualified
                                   (Data.Either.Either
                                      Language.PureScript.Names.Ident
                                      (Language.PureScript.Names.ProperName
                                         'Language.PureScript.Names.ConstructorName)))
                        = case Language.PureScript.Externs.$fFromJSONExternsFixity2 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                          Data.Aeson.TH.$w$clookupField1
                            @ (Language.PureScript.Names.Qualified
                                 (Data.Either.Either
                                    Language.PureScript.Names.Ident
                                    (Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.ConstructorName)))
                            Language.PureScript.Externs.$fFromJSONExternsFixity1
                            Language.PureScript.Externs.$fFromJSONExternsFixity12
                            Language.PureScript.Externs.$fFromJSONExternsFixity14
                            recObj
                            ww1
                            ww2
                            ww3 }
                      } in
                      (\ @ f6 :: * -> *
                         @ r
                         (path :: Data.Aeson.Types.Internal.JSONPath)
                         (kf :: Data.Aeson.Types.Internal.Failure f6 r)
                         (ks :: Data.Aeson.Types.Internal.Success
                                  Language.PureScript.Externs.ExternsFixity f6 r) ->
                       m `cast`
                       (Data.Aeson.Types.Internal.N:Parser[0]
                            <Language.PureScript.AST.Operators.Associativity>_R)
                         @ f6
                         @ r
                         path
                         kf
                         (\ (a10 :: Language.PureScript.AST.Operators.Associativity) ->
                          e `cast`
                          (Data.Aeson.Types.Internal.N:Parser[0]
                               <Language.PureScript.AST.Operators.Precedence>_R)
                            @ f6
                            @ r
                            path
                            kf
                            (\ (a11 :: Language.PureScript.AST.Operators.Precedence) ->
                             e1
                               `cast`
                             (Data.Aeson.Types.Internal.N:Parser[0]
                                  <Language.PureScript.Names.OpName
                                     'Language.PureScript.Names.ValueOpName>_R)
                               @ f6
                               @ r
                               path
                               kf
                               (\ (a12 :: Language.PureScript.Names.OpName
                                            'Language.PureScript.Names.ValueOpName) ->
                                e2
                                  `cast`
                                (Data.Aeson.Types.Internal.N:Parser[0]
                                     <Language.PureScript.Names.Qualified
                                        (Data.Either.Either
                                           Language.PureScript.Names.Ident
                                           (Language.PureScript.Names.ProperName
                                              'Language.PureScript.Names.ConstructorName))>_R)
                                  @ f6
                                  @ r
                                  path
                                  kf
                                  (\ (a13 :: Language.PureScript.Names.Qualified
                                               (Data.Either.Either
                                                  Language.PureScript.Names.Ident
                                                  (Language.PureScript.Names.ProperName
                                                     'Language.PureScript.Names.ConstructorName))) ->
                                   ks
                                     (Language.PureScript.Externs.ExternsFixity
                                        a10
                                        a11
                                        a12
                                        a13))))))
                        `cast`
                      (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                <Language.PureScript.Externs.ExternsFixity>_R)) }) -}
e2b9825419a009927ef7bc8fe43a5592
  $fFromJSONExternsFixity_$cparseJSONList ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         [Language.PureScript.Externs.ExternsFixity]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Data.Aeson.Types.Internal.Value) ->
                 case ds of wild {
                   DEFAULT
                   -> let {
                        msg19 :: GHC.Base.String
                        = GHC.CString.unpackAppendCString#
                            Language.PureScript.Externs.$fFromJSONExternsDeclaration3
                            (GHC.CString.unpackAppendCString#
                               Language.PureScript.Externs.$fFromJSONExternsDeclaration2
                               (GHC.CString.unpackAppendCString#
                                  Language.PureScript.Externs.$fFromJSONExternsDeclaration1
                                  (case wild of wild1 {
                                     Data.Aeson.Types.Internal.Object ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList10
                                     Data.Aeson.Types.Internal.String ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList8
                                     Data.Aeson.Types.Internal.Number ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList6
                                     Data.Aeson.Types.Internal.Bool ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList4
                                     Data.Aeson.Types.Internal.Null
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList1 })))
                      } in
                      (\ @ f6 :: * -> *
                         @ r
                         (path :: Data.Aeson.Types.Internal.JSONPath)
                         (kf :: Data.Aeson.Types.Internal.Failure f6 r)
                         (_ks :: Data.Aeson.Types.Internal.Success
                                   [Language.PureScript.Externs.ExternsFixity] f6 r) ->
                       kf
                         (GHC.List.reverse @ Data.Aeson.Types.Internal.JSONPathElement path)
                         msg19)
                        `cast`
                      (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                <[Language.PureScript.Externs.ExternsFixity]>_R))
                   Data.Aeson.Types.Internal.Array a10
                   -> case a10 of wild1 { Data.Vector.Vector dt dt1 dt2 ->
                      letrec {
                        $wgo :: GHC.Prim.Int# -> [Data.Aeson.Types.Internal.Value]
                          {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                        = \ (ww :: GHC.Prim.Int#) ->
                          case GHC.Prim.>=# ww dt1 of lwild {
                            DEFAULT
                            -> case GHC.Prim.indexArray#
                                      @ Data.Aeson.Types.Internal.Value
                                      dt2
                                      (GHC.Prim.+# dt ww) of ds3 { Unit# ipv33 ->
                               GHC.Types.:
                                 @ Data.Aeson.Types.Internal.Value
                                 ipv33
                                 ($wgo (GHC.Prim.+# ww 1#)) }
                            1# -> GHC.Types.[] @ Data.Aeson.Types.Internal.Value }
                      } in
                      Language.PureScript.Externs.$fFromJSONExternsFixity_go
                        0#
                        ($wgo 0#) } }) -}
9d20ce5ac54f9f3ff6187d7c01ff167c
  $fFromJSONExternsFixity_$s$fFromJSONEither ::
    Data.Aeson.Types.FromJSON.FromJSON
      (Data.Either.Either
         Language.PureScript.Names.Ident
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ConstructorName))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Either.Either
                       Language.PureScript.Names.Ident
                       (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ConstructorName))
                  (Data.Aeson.Types.FromJSON.$fFromJSON1Either_$cliftParseJSON2
                     @ Language.PureScript.Names.Ident
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ConstructorName)
                     Language.PureScript.Names.$fFromJSONIdent_$cparseJSON
                     Language.PureScript.Names.$fFromJSONIdent_$cparseJSONList
                     (Language.PureScript.Names.$fFromJSONProperName_$cparseJSON
                        @ 'Language.PureScript.Names.ConstructorName)
                     (Language.PureScript.Names.$fFromJSONModuleName_$cparseJSONList1
                        @ 'Language.PureScript.Names.ConstructorName))
                  (Data.Aeson.Types.FromJSON.$fFromJSONEither_$cparseJSONList
                     @ Language.PureScript.Names.Ident
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ConstructorName)
                     Language.PureScript.Names.$fFromJSONIdent
                     (Language.PureScript.Names.$fFromJSONProperName
                        @ 'Language.PureScript.Names.ConstructorName)) -}
e2b9825419a009927ef7bc8fe43a5592
  $fFromJSONExternsFixity_go ::
    GHC.Prim.Int#
    -> [Data.Aeson.Types.Internal.Value]
    -> Data.Aeson.Types.Internal.Parser
         [Language.PureScript.Externs.ExternsFixity]
  {- Arity: 2, Strictness: <L,U><S,1*U> -}
cac932cac83fee4afe9df4f645c23840
  $fFromJSONExternsImport ::
    Data.Aeson.Types.FromJSON.FromJSON
      Language.PureScript.Externs.ExternsImport
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Externs.ExternsImport
                  Language.PureScript.Externs.$fFromJSONExternsImport_$cparseJSON
                  Language.PureScript.Externs.$fFromJSONExternsImport_$cparseJSONList -}
cac932cac83fee4afe9df4f645c23840
  $fFromJSONExternsImport_$cparseJSON ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         Language.PureScript.Externs.ExternsImport
  {- Arity: 1, Strictness: <S,1*U> -}
cac932cac83fee4afe9df4f645c23840
  $fFromJSONExternsImport_$cparseJSONList ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         [Language.PureScript.Externs.ExternsImport]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Data.Aeson.Types.Internal.Value) ->
                 case ds of wild {
                   DEFAULT
                   -> let {
                        msg19 :: GHC.Base.String
                        = GHC.CString.unpackAppendCString#
                            Language.PureScript.Externs.$fFromJSONExternsDeclaration3
                            (GHC.CString.unpackAppendCString#
                               Language.PureScript.Externs.$fFromJSONExternsDeclaration2
                               (GHC.CString.unpackAppendCString#
                                  Language.PureScript.Externs.$fFromJSONExternsDeclaration1
                                  (case wild of wild1 {
                                     Data.Aeson.Types.Internal.Object ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList10
                                     Data.Aeson.Types.Internal.String ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList8
                                     Data.Aeson.Types.Internal.Number ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList6
                                     Data.Aeson.Types.Internal.Bool ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList4
                                     Data.Aeson.Types.Internal.Null
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList1 })))
                      } in
                      (\ @ f6 :: * -> *
                         @ r
                         (path :: Data.Aeson.Types.Internal.JSONPath)
                         (kf :: Data.Aeson.Types.Internal.Failure f6 r)
                         (_ks :: Data.Aeson.Types.Internal.Success
                                   [Language.PureScript.Externs.ExternsImport] f6 r) ->
                       kf
                         (GHC.List.reverse @ Data.Aeson.Types.Internal.JSONPathElement path)
                         msg19)
                        `cast`
                      (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                <[Language.PureScript.Externs.ExternsImport]>_R))
                   Data.Aeson.Types.Internal.Array a10
                   -> case a10 of wild1 { Data.Vector.Vector dt dt1 dt2 ->
                      letrec {
                        $wgo :: GHC.Prim.Int# -> [Data.Aeson.Types.Internal.Value]
                          {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                        = \ (ww :: GHC.Prim.Int#) ->
                          case GHC.Prim.>=# ww dt1 of lwild {
                            DEFAULT
                            -> case GHC.Prim.indexArray#
                                      @ Data.Aeson.Types.Internal.Value
                                      dt2
                                      (GHC.Prim.+# dt ww) of ds3 { Unit# ipv33 ->
                               GHC.Types.:
                                 @ Data.Aeson.Types.Internal.Value
                                 ipv33
                                 ($wgo (GHC.Prim.+# ww 1#)) }
                            1# -> GHC.Types.[] @ Data.Aeson.Types.Internal.Value }
                      } in
                      Language.PureScript.Externs.$fFromJSONExternsImport_go
                        0#
                        ($wgo 0#) } }) -}
cac932cac83fee4afe9df4f645c23840
  $fFromJSONExternsImport_go ::
    GHC.Prim.Int#
    -> [Data.Aeson.Types.Internal.Value]
    -> Data.Aeson.Types.Internal.Parser
         [Language.PureScript.Externs.ExternsImport]
  {- Arity: 2, Strictness: <L,U><S,1*U> -}
550ce16782e073a4c465189b0fa52bb0
  $fFromJSONExternsTypeFixity ::
    Data.Aeson.Types.FromJSON.FromJSON
      Language.PureScript.Externs.ExternsTypeFixity
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Externs.ExternsTypeFixity
                  Language.PureScript.Externs.$fFromJSONExternsTypeFixity_$cparseJSON
                  Language.PureScript.Externs.$fFromJSONExternsTypeFixity_$cparseJSONList -}
a0fb7b54ee1606e78a8d4588152e8fa8
  $fFromJSONExternsTypeFixity1 ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.TypeName))
  {- Arity: 1,
     Unfolding: (Language.PureScript.Names.$fFromJSONQualified_$cparseJSON
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.TypeName)
                   (Language.PureScript.Names.$fFromJSONProperName
                      @ 'Language.PureScript.Names.TypeName)) -}
26f49603430c11dd65f3b3838c3db1b3
  $fFromJSONExternsTypeFixity10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Externs.$fFromJSONExternsTypeFixity11) -}
536c9acc9baea39147ec77c0bcd0267c
  $fFromJSONExternsTypeFixity11 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Language.PureScript.Externs.ExternsTypeFixity"#) -}
6725e2268992be2e8eb095d670da0193
  $fFromJSONExternsTypeFixity12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Externs.$fFromJSONExternsTypeFixity13) -}
b6350335f8bed2b51b18dbae54613712
  $fFromJSONExternsTypeFixity13 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ExternsTypeFixity"#) -}
aba2c44e42f521a100779619261d851b
  $fFromJSONExternsTypeFixity2 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Externs.$fFromJSONExternsTypeFixity3) -}
bbb1b585c517b737fccbfa10ee2cedf0
  $fFromJSONExternsTypeFixity3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("efTypeAlias"#) -}
dd0dd95181d972789455e780ccf83f7f
  $fFromJSONExternsTypeFixity4 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Externs.$fFromJSONExternsTypeFixity5) -}
92e3623df54c163d06f392f8d3fce0b7
  $fFromJSONExternsTypeFixity5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("efTypeOperator"#) -}
d66e36ad895072921a3f243a43e5f2f2
  $fFromJSONExternsTypeFixity6 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Externs.$fFromJSONExternsTypeFixity7) -}
7b1ae3067bf499183c9aee8f176f9764
  $fFromJSONExternsTypeFixity7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("efTypePrecedence"#) -}
4e7d65e6939233ce0ae22fdf9cce1d16
  $fFromJSONExternsTypeFixity8 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Externs.$fFromJSONExternsTypeFixity9) -}
830346882a843ead853927f32b536675
  $fFromJSONExternsTypeFixity9 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("efTypeAssociativity"#) -}
550ce16782e073a4c465189b0fa52bb0
  $fFromJSONExternsTypeFixity_$cparseJSON ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         Language.PureScript.Externs.ExternsTypeFixity
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (value :: Data.Aeson.Types.Internal.Value) ->
                 case value of wild {
                   DEFAULT
                   -> Data.Aeson.TH.parseTypeMismatch'
                        @ Language.PureScript.Externs.ExternsTypeFixity
                        Language.PureScript.Externs.$fFromJSONExternsTypeFixity12
                        Language.PureScript.Externs.$fFromJSONExternsTypeFixity10
                        Language.PureScript.Externs.$fFromJSONExternsFixity10
                        (case wild of wild1 {
                           Data.Aeson.Types.Internal.Array ds9 -> Data.Aeson.TH.valueConName9
                           Data.Aeson.Types.Internal.String ds9 -> Data.Aeson.TH.valueConName7
                           Data.Aeson.Types.Internal.Number ds9 -> Data.Aeson.TH.valueConName5
                           Data.Aeson.Types.Internal.Bool ds9 -> Data.Aeson.TH.valueConName3
                           Data.Aeson.Types.Internal.Null -> Data.Aeson.TH.valueConName1 })
                   Data.Aeson.Types.Internal.Object recObj
                   -> let {
                        m :: Data.Aeson.Types.Internal.Parser
                               Language.PureScript.AST.Operators.Associativity
                        = case Language.PureScript.Externs.$fFromJSONExternsTypeFixity8 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                          Data.Aeson.TH.$w$clookupField1
                            @ Language.PureScript.AST.Operators.Associativity
                            Language.PureScript.AST.Operators.$fFromJSONAssociativity_$cparseJSON
                            Language.PureScript.Externs.$fFromJSONExternsTypeFixity10
                            Language.PureScript.Externs.$fFromJSONExternsTypeFixity12
                            recObj
                            ww1
                            ww2
                            ww3 }
                      } in
                      let {
                        e :: Data.Aeson.Types.Internal.Parser
                               Language.PureScript.AST.Operators.Precedence
                        = case Language.PureScript.Externs.$fFromJSONExternsTypeFixity6 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                          Data.Aeson.TH.$w$clookupField1
                            @ GHC.Integer.Type.Integer
                            Data.Aeson.Types.FromJSON.$fFromJSONInteger_$cparseJSON
                            Language.PureScript.Externs.$fFromJSONExternsTypeFixity10
                            Language.PureScript.Externs.$fFromJSONExternsTypeFixity12
                            recObj
                            ww1
                            ww2
                            ww3 }
                      } in
                      let {
                        e1 :: Data.Aeson.Types.Internal.Parser
                                (Language.PureScript.Names.OpName
                                   'Language.PureScript.Names.TypeOpName)
                        = case Language.PureScript.Externs.$fFromJSONExternsTypeFixity4 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                          Data.Aeson.TH.$w$clookupField1
                            @ (Language.PureScript.Names.OpName
                                 'Language.PureScript.Names.TypeOpName)
                            (Language.PureScript.Names.$fFromJSONOpName_$cparseJSON
                               @ 'Language.PureScript.Names.TypeOpName)
                            Language.PureScript.Externs.$fFromJSONExternsTypeFixity10
                            Language.PureScript.Externs.$fFromJSONExternsTypeFixity12
                            recObj
                            ww1
                            ww2
                            ww3 }
                      } in
                      let {
                        e2 :: Data.Aeson.Types.Internal.Parser
                                (Language.PureScript.Names.Qualified
                                   (Language.PureScript.Names.ProperName
                                      'Language.PureScript.Names.TypeName))
                        = case Language.PureScript.Externs.$fFromJSONExternsTypeFixity2 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                          Data.Aeson.TH.$w$clookupField1
                            @ (Language.PureScript.Names.Qualified
                                 (Language.PureScript.Names.ProperName
                                    'Language.PureScript.Names.TypeName))
                            Language.PureScript.Externs.$fFromJSONExternsTypeFixity1
                            Language.PureScript.Externs.$fFromJSONExternsTypeFixity10
                            Language.PureScript.Externs.$fFromJSONExternsTypeFixity12
                            recObj
                            ww1
                            ww2
                            ww3 }
                      } in
                      (\ @ f6 :: * -> *
                         @ r
                         (path :: Data.Aeson.Types.Internal.JSONPath)
                         (kf :: Data.Aeson.Types.Internal.Failure f6 r)
                         (ks :: Data.Aeson.Types.Internal.Success
                                  Language.PureScript.Externs.ExternsTypeFixity f6 r) ->
                       m `cast`
                       (Data.Aeson.Types.Internal.N:Parser[0]
                            <Language.PureScript.AST.Operators.Associativity>_R)
                         @ f6
                         @ r
                         path
                         kf
                         (\ (a10 :: Language.PureScript.AST.Operators.Associativity) ->
                          e `cast`
                          (Data.Aeson.Types.Internal.N:Parser[0]
                               <Language.PureScript.AST.Operators.Precedence>_R)
                            @ f6
                            @ r
                            path
                            kf
                            (\ (a11 :: Language.PureScript.AST.Operators.Precedence) ->
                             e1
                               `cast`
                             (Data.Aeson.Types.Internal.N:Parser[0]
                                  <Language.PureScript.Names.OpName
                                     'Language.PureScript.Names.TypeOpName>_R)
                               @ f6
                               @ r
                               path
                               kf
                               (\ (a12 :: Language.PureScript.Names.OpName
                                            'Language.PureScript.Names.TypeOpName) ->
                                e2
                                  `cast`
                                (Data.Aeson.Types.Internal.N:Parser[0]
                                     <Language.PureScript.Names.Qualified
                                        (Language.PureScript.Names.ProperName
                                           'Language.PureScript.Names.TypeName)>_R)
                                  @ f6
                                  @ r
                                  path
                                  kf
                                  (\ (a13 :: Language.PureScript.Names.Qualified
                                               (Language.PureScript.Names.ProperName
                                                  'Language.PureScript.Names.TypeName)) ->
                                   ks
                                     (Language.PureScript.Externs.ExternsTypeFixity
                                        a10
                                        a11
                                        a12
                                        a13))))))
                        `cast`
                      (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                <Language.PureScript.Externs.ExternsTypeFixity>_R)) }) -}
550ce16782e073a4c465189b0fa52bb0
  $fFromJSONExternsTypeFixity_$cparseJSONList ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         [Language.PureScript.Externs.ExternsTypeFixity]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Data.Aeson.Types.Internal.Value) ->
                 case ds of wild {
                   DEFAULT
                   -> let {
                        msg19 :: GHC.Base.String
                        = GHC.CString.unpackAppendCString#
                            Language.PureScript.Externs.$fFromJSONExternsDeclaration3
                            (GHC.CString.unpackAppendCString#
                               Language.PureScript.Externs.$fFromJSONExternsDeclaration2
                               (GHC.CString.unpackAppendCString#
                                  Language.PureScript.Externs.$fFromJSONExternsDeclaration1
                                  (case wild of wild1 {
                                     Data.Aeson.Types.Internal.Object ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList10
                                     Data.Aeson.Types.Internal.String ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList8
                                     Data.Aeson.Types.Internal.Number ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList6
                                     Data.Aeson.Types.Internal.Bool ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList4
                                     Data.Aeson.Types.Internal.Null
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList1 })))
                      } in
                      (\ @ f6 :: * -> *
                         @ r
                         (path :: Data.Aeson.Types.Internal.JSONPath)
                         (kf :: Data.Aeson.Types.Internal.Failure f6 r)
                         (_ks :: Data.Aeson.Types.Internal.Success
                                   [Language.PureScript.Externs.ExternsTypeFixity] f6 r) ->
                       kf
                         (GHC.List.reverse @ Data.Aeson.Types.Internal.JSONPathElement path)
                         msg19)
                        `cast`
                      (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                <[Language.PureScript.Externs.ExternsTypeFixity]>_R))
                   Data.Aeson.Types.Internal.Array a10
                   -> case a10 of wild1 { Data.Vector.Vector dt dt1 dt2 ->
                      letrec {
                        $wgo :: GHC.Prim.Int# -> [Data.Aeson.Types.Internal.Value]
                          {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                        = \ (ww :: GHC.Prim.Int#) ->
                          case GHC.Prim.>=# ww dt1 of lwild {
                            DEFAULT
                            -> case GHC.Prim.indexArray#
                                      @ Data.Aeson.Types.Internal.Value
                                      dt2
                                      (GHC.Prim.+# dt ww) of ds3 { Unit# ipv33 ->
                               GHC.Types.:
                                 @ Data.Aeson.Types.Internal.Value
                                 ipv33
                                 ($wgo (GHC.Prim.+# ww 1#)) }
                            1# -> GHC.Types.[] @ Data.Aeson.Types.Internal.Value }
                      } in
                      Language.PureScript.Externs.$fFromJSONExternsTypeFixity_go
                        0#
                        ($wgo 0#) } }) -}
550ce16782e073a4c465189b0fa52bb0
  $fFromJSONExternsTypeFixity_go ::
    GHC.Prim.Int#
    -> [Data.Aeson.Types.Internal.Value]
    -> Data.Aeson.Types.Internal.Parser
         [Language.PureScript.Externs.ExternsTypeFixity]
  {- Arity: 2, Strictness: <L,U><S,1*U> -}
45a26a6f5854665222c379466681ba1c
  $fShowExternsDeclaration ::
    GHC.Show.Show Language.PureScript.Externs.ExternsDeclaration
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Externs.ExternsDeclaration
                  Language.PureScript.Externs.$fShowExternsDeclaration_$cshowsPrec
                  Language.PureScript.Externs.$fShowExternsDeclaration_$cshow
                  Language.PureScript.Externs.$fShowExternsDeclaration_$cshowList -}
45a26a6f5854665222c379466681ba1c
  $fShowExternsDeclaration1 ::
    Language.PureScript.Externs.ExternsDeclaration -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (w :: Language.PureScript.Externs.ExternsDeclaration) ->
                 Language.PureScript.Externs.$w$cshowsPrec 0# w) -}
87049a4627eeaca72bb6d5cdca82a557
  $fShowExternsDeclaration2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
45a26a6f5854665222c379466681ba1c
  $fShowExternsDeclaration_$cshow ::
    Language.PureScript.Externs.ExternsDeclaration -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Externs.ExternsDeclaration) ->
                 Language.PureScript.Externs.$fShowExternsDeclaration_$cshowsPrec
                   Language.PureScript.Externs.$fShowExternsDeclaration2
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
45a26a6f5854665222c379466681ba1c
  $fShowExternsDeclaration_$cshowList ::
    [Language.PureScript.Externs.ExternsDeclaration] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Externs.ExternsDeclaration])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Externs.ExternsDeclaration
                   Language.PureScript.Externs.$fShowExternsDeclaration1
                   ls
                   s) -}
45a26a6f5854665222c379466681ba1c
  $fShowExternsDeclaration_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Externs.ExternsDeclaration -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Externs.ExternsDeclaration) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Language.PureScript.Externs.$w$cshowsPrec ww1 w1 }) -}
b2e76f24ecba17bf3b946e078a8414b6
  $fShowExternsFile ::
    GHC.Show.Show Language.PureScript.Externs.ExternsFile
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Externs.ExternsFile
                  Language.PureScript.Externs.$fShowExternsFile_$cshowsPrec
                  Language.PureScript.Externs.$fShowExternsFile_$cshow
                  Language.PureScript.Externs.$fShowExternsFile_$cshowList -}
b2e76f24ecba17bf3b946e078a8414b6
  $fShowExternsFile1 ::
    Language.PureScript.Externs.ExternsFile -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S,1*U(1*U(U,U,U),1*U,1*U,1*U,1*U,1*U,1*U,1*U(1*U,1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U))))><L,U>,
     Unfolding: (\ (w :: Language.PureScript.Externs.ExternsFile)
                   (w1 :: GHC.Base.String) ->
                 case w of ww { Language.PureScript.Externs.ExternsFile ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 Language.PureScript.Externs.$w$cshowsPrec1
                   0#
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   w1 }) -}
b2e76f24ecba17bf3b946e078a8414b6
  $fShowExternsFile_$cshow ::
    Language.PureScript.Externs.ExternsFile -> GHC.Base.String
  {- Arity: 1,
     Strictness: <S,1*U(1*U(U,U,U),1*U,1*U,1*U,1*U,1*U,1*U,1*U(1*U,1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U))))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Externs.ExternsFile) ->
                 Language.PureScript.Externs.$fShowExternsFile_$cshowsPrec
                   Language.PureScript.Externs.$fShowExternsDeclaration2
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
b2e76f24ecba17bf3b946e078a8414b6
  $fShowExternsFile_$cshowList ::
    [Language.PureScript.Externs.ExternsFile] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Externs.ExternsFile])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Externs.ExternsFile
                   Language.PureScript.Externs.$fShowExternsFile1
                   ls
                   s) -}
b2e76f24ecba17bf3b946e078a8414b6
  $fShowExternsFile_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Externs.ExternsFile -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <S(S),1*U(U)><S,1*U(1*U(U,U,U),1*U,1*U,1*U,1*U,1*U,1*U,1*U(1*U,1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U))))><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Externs.ExternsFile)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Language.PureScript.Externs.ExternsFile ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ->
                 Language.PureScript.Externs.$w$cshowsPrec1
                   ww1
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   w2 } }) -}
e2b9825419a009927ef7bc8fe43a5592
  $fShowExternsFixity ::
    GHC.Show.Show Language.PureScript.Externs.ExternsFixity
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Externs.ExternsFixity
                  Language.PureScript.Externs.$fShowExternsFixity_$cshowsPrec
                  Language.PureScript.Externs.$fShowExternsFixity_$cshow
                  Language.PureScript.Externs.$fShowExternsFixity_$cshowList -}
e2b9825419a009927ef7bc8fe43a5592
  $fShowExternsFixity1 ::
    Language.PureScript.Externs.ExternsFixity -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(U,U,U(U,U,U),1*U(1*U,U))>,
     Unfolding: (\ (w :: Language.PureScript.Externs.ExternsFixity) ->
                 case w of ww { Language.PureScript.Externs.ExternsFixity ww1 ww2 ww3 ww4 ->
                 Language.PureScript.Externs.$w$cshowsPrec2 0# ww1 ww2 ww3 ww4 }) -}
10b25bd842c8ba642767285d850fc7f2
  $fShowExternsFixity2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("}"#) -}
ed390bbd9adf472502b5ed034f3c7076
  $fShowExternsFixity3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("efAlias = "#) -}
e817537ee049373cd4c25e5475e08e7a
  $fShowExternsFixity4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("efOperator = "#) -}
131de52e04734906eb6424a8c0e1536a
  $fShowExternsFixity5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("efPrecedence = "#) -}
0a3ecdb4e6bf30fbbd4a96c8abb316f3
  $fShowExternsFixity6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("efAssociativity = "#) -}
49a1527d762c33caa33c6a0028f71b7d
  $fShowExternsFixity7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ExternsFixity {"#) -}
e2b9825419a009927ef7bc8fe43a5592
  $fShowExternsFixity_$cshow ::
    Language.PureScript.Externs.ExternsFixity -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U,U,U(U,U,U),1*U(1*U,U))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Externs.ExternsFixity) ->
                 Language.PureScript.Externs.$fShowExternsFixity_$cshowsPrec
                   Language.PureScript.Externs.$fShowExternsDeclaration2
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
e2b9825419a009927ef7bc8fe43a5592
  $fShowExternsFixity_$cshowList ::
    [Language.PureScript.Externs.ExternsFixity] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Externs.ExternsFixity])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Externs.ExternsFixity
                   Language.PureScript.Externs.$fShowExternsFixity1
                   ls
                   s) -}
e2b9825419a009927ef7bc8fe43a5592
  $fShowExternsFixity_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Externs.ExternsFixity -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S(S),1*U(U)><S,1*U(U,U,U(U,U,U),1*U(1*U,U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Externs.ExternsFixity) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Language.PureScript.Externs.ExternsFixity ww3 ww4 ww5 ww6 ->
                 Language.PureScript.Externs.$w$cshowsPrec2
                   ww1
                   ww3
                   ww4
                   ww5
                   ww6 } }) -}
4af2f11bd571e6c064463d5ee8a57096
  $fShowExternsFixity_$s$fShowEither ::
    GHC.Show.Show
      (Data.Either.Either
         Language.PureScript.Names.Ident
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ConstructorName))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Either.Either
                       Language.PureScript.Names.Ident
                       (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ConstructorName))
                  (Data.Either.$fShowEither_$cshowsPrec
                     @ Language.PureScript.Names.Ident
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ConstructorName)
                     Language.PureScript.Names.$fShowIdent
                     (Language.PureScript.Names.$fShowProperName
                        @ 'Language.PureScript.Names.ConstructorName))
                  (\ (x :: Data.Either.Either
                             Language.PureScript.Names.Ident
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ConstructorName)) ->
                   case x of wild {
                     Data.Either.Left b1
                     -> GHC.Base.augment
                          @ GHC.Types.Char
                          (\ @ b
                             (c :: GHC.Types.Char -> b -> b)[OneShot]
                             (n :: b)[OneShot] ->
                           GHC.Base.foldr @ GHC.Types.Char @ b c n Data.Either.$fShowEither4)
                          (Language.PureScript.Names.$fShowIdent_$cshowsPrec
                             Data.Either.$fReadEither6
                             b1
                             (GHC.Types.[] @ GHC.Types.Char))
                     Data.Either.Right b1
                     -> GHC.Base.augment
                          @ GHC.Types.Char
                          (\ @ b
                             (c :: GHC.Types.Char -> b -> b)[OneShot]
                             (n :: b)[OneShot] ->
                           GHC.Base.foldr @ GHC.Types.Char @ b c n Data.Either.$fShowEither2)
                          (Language.PureScript.Names.$fShowProperName_$cshowsPrec
                             @ 'Language.PureScript.Names.ConstructorName
                             Data.Either.$fReadEither6
                             b1
                             (GHC.Types.[] @ GHC.Types.Char)) })
                  (\ (ls :: [Data.Either.Either
                               Language.PureScript.Names.Ident
                               (Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.ConstructorName)])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Data.Either.Either
                          Language.PureScript.Names.Ident
                          (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ConstructorName))
                     (Data.Either.$fShowEither_$cshowsPrec
                        @ Language.PureScript.Names.Ident
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ConstructorName)
                        Language.PureScript.Names.$fShowIdent
                        (Language.PureScript.Names.$fShowProperName
                           @ 'Language.PureScript.Names.ConstructorName)
                        Data.Either.$fShowEither1)
                     ls
                     s) -}
cac932cac83fee4afe9df4f645c23840
  $fShowExternsImport ::
    GHC.Show.Show Language.PureScript.Externs.ExternsImport
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Externs.ExternsImport
                  Language.PureScript.Externs.$fShowExternsImport_$cshowsPrec
                  Language.PureScript.Externs.$fShowExternsImport_$cshow
                  Language.PureScript.Externs.$fShowExternsImport_$cshowList -}
cac932cac83fee4afe9df4f645c23840
  $fShowExternsImport1 ::
    Language.PureScript.Externs.ExternsImport -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(U,U,1*U)>,
     Unfolding: (\ (w :: Language.PureScript.Externs.ExternsImport) ->
                 case w of ww { Language.PureScript.Externs.ExternsImport ww1 ww2 ww3 ->
                 Language.PureScript.Externs.$w$cshowsPrec3 0# ww1 ww2 ww3 }) -}
0a612f3e5be6bc8db0a7a97c289b0cdb
  $fShowExternsImport2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("eiImportedAs = "#) -}
f81e714bfa0b6155d50c8e0cef1b1465
  $fShowExternsImport3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("eiImportType = "#) -}
14292267a8ad098843db89302521b37c
  $fShowExternsImport4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("eiModule = "#) -}
cd60da1c25acd9368d96fef8679da5cf
  $fShowExternsImport5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ExternsImport {"#) -}
cac932cac83fee4afe9df4f645c23840
  $fShowExternsImport_$cshow ::
    Language.PureScript.Externs.ExternsImport -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U,U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Externs.ExternsImport) ->
                 Language.PureScript.Externs.$fShowExternsImport_$cshowsPrec
                   Language.PureScript.Externs.$fShowExternsDeclaration2
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
cac932cac83fee4afe9df4f645c23840
  $fShowExternsImport_$cshowList ::
    [Language.PureScript.Externs.ExternsImport] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Externs.ExternsImport])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Externs.ExternsImport
                   Language.PureScript.Externs.$fShowExternsImport1
                   ls
                   s) -}
cac932cac83fee4afe9df4f645c23840
  $fShowExternsImport_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Externs.ExternsImport -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(U,U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Externs.ExternsImport) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Language.PureScript.Externs.ExternsImport ww3 ww4 ww5 ->
                 Language.PureScript.Externs.$w$cshowsPrec3 ww1 ww3 ww4 ww5 } }) -}
550ce16782e073a4c465189b0fa52bb0
  $fShowExternsTypeFixity ::
    GHC.Show.Show Language.PureScript.Externs.ExternsTypeFixity
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Externs.ExternsTypeFixity
                  Language.PureScript.Externs.$fShowExternsTypeFixity_$cshowsPrec
                  Language.PureScript.Externs.$fShowExternsTypeFixity_$cshow
                  Language.PureScript.Externs.$fShowExternsTypeFixity_$cshowList -}
550ce16782e073a4c465189b0fa52bb0
  $fShowExternsTypeFixity1 ::
    Language.PureScript.Externs.ExternsTypeFixity -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(U,U,U(U,U,U),1*U(1*U,U))>,
     Unfolding: (\ (w :: Language.PureScript.Externs.ExternsTypeFixity) ->
                 case w of ww { Language.PureScript.Externs.ExternsTypeFixity ww1 ww2 ww3 ww4 ->
                 Language.PureScript.Externs.$w$cshowsPrec4 0# ww1 ww2 ww3 ww4 }) -}
859870d5c0679b890479730a05dfd936
  $fShowExternsTypeFixity2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("efTypeAlias = "#) -}
f8fe06f9aab0b0821c318b3f4755f9e3
  $fShowExternsTypeFixity3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("efTypeOperator = "#) -}
57bf1632d73d5b4fcbf98c83688d32fa
  $fShowExternsTypeFixity4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("efTypePrecedence = "#) -}
ef5cdd0dd39a7871e87edacd3da1275d
  $fShowExternsTypeFixity5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("efTypeAssociativity = "#) -}
07f6892b44b0d7272caa425c2b5d72b3
  $fShowExternsTypeFixity6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ExternsTypeFixity {"#) -}
550ce16782e073a4c465189b0fa52bb0
  $fShowExternsTypeFixity_$cshow ::
    Language.PureScript.Externs.ExternsTypeFixity -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U,U,U(U,U,U),1*U(1*U,U))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Externs.ExternsTypeFixity) ->
                 Language.PureScript.Externs.$fShowExternsTypeFixity_$cshowsPrec
                   Language.PureScript.Externs.$fShowExternsDeclaration2
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
550ce16782e073a4c465189b0fa52bb0
  $fShowExternsTypeFixity_$cshowList ::
    [Language.PureScript.Externs.ExternsTypeFixity] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Externs.ExternsTypeFixity])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Externs.ExternsTypeFixity
                   Language.PureScript.Externs.$fShowExternsTypeFixity1
                   ls
                   s) -}
550ce16782e073a4c465189b0fa52bb0
  $fShowExternsTypeFixity_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Externs.ExternsTypeFixity -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S(S),1*U(U)><S,1*U(U,U,U(U,U,U),1*U(1*U,U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Externs.ExternsTypeFixity) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Language.PureScript.Externs.ExternsTypeFixity ww3 ww4 ww5 ww6 ->
                 Language.PureScript.Externs.$w$cshowsPrec4
                   ww1
                   ww3
                   ww4
                   ww5
                   ww6 } }) -}
45a26a6f5854665222c379466681ba1c
  $fToJSONExternsDeclaration ::
    Data.Aeson.Types.ToJSON.ToJSON
      Language.PureScript.Externs.ExternsDeclaration
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Externs.ExternsDeclaration
                  Language.PureScript.Externs.$fToJSONExternsDeclaration_$ctoJSON
                  Language.PureScript.Externs.$fToJSONExternsDeclaration_$ctoEncoding
                  Language.PureScript.Externs.$fToJSONExternsDeclaration_$ctoJSONList
                  Language.PureScript.Externs.$fToJSONExternsDeclaration_$ctoEncodingList -}
45a26a6f5854665222c379466681ba1c
  $fToJSONExternsDeclaration_$ctoEncoding ::
    Language.PureScript.Externs.ExternsDeclaration
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Strictness: <S,1*U> -}
45a26a6f5854665222c379466681ba1c
  $fToJSONExternsDeclaration_$ctoEncodingList ::
    [Language.PureScript.Externs.ExternsDeclaration]
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (Data.Aeson.Encoding.Internal.list
                   @ Language.PureScript.Externs.ExternsDeclaration
                   Language.PureScript.Externs.$fToJSONExternsDeclaration_$ctoEncoding) -}
45a26a6f5854665222c379466681ba1c
  $fToJSONExternsDeclaration_$ctoJSON ::
    Language.PureScript.Externs.ExternsDeclaration
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>m1, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.PureScript.Externs.ExternsDeclaration) ->
                 case Language.PureScript.Externs.$w$ctoJSON w of ww { Unit# ww1 ->
                 Data.Aeson.Types.Internal.Object ww1 }) -}
45a26a6f5854665222c379466681ba1c
  $fToJSONExternsDeclaration_$ctoJSONList ::
    [Language.PureScript.Externs.ExternsDeclaration]
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (x :: [Language.PureScript.Externs.ExternsDeclaration]) ->
                 Data.Aeson.Types.Internal.$WArray
                   (Data.Vector.Generic.new
                      @ Data.Vector.Vector
                      @ Data.Aeson.Types.Internal.Value
                      (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                      (Data.Vector.Generic.New.unstream
                         @ Data.Vector.Vector
                         @ Data.Aeson.Types.Internal.Value
                         (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                         (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                            @ Data.Vector.Fusion.Util.Id
                            @ Data.Aeson.Types.Internal.Value
                            @ Data.Vector.Vector
                            Data.Vector.Fusion.Util.$fMonadId
                            Data.Vector.Fusion.Bundle.Size.Unknown
                            (GHC.Base.build
                               @ Data.Aeson.Types.Internal.Value
                               (\ @ b1
                                  (c :: Data.Aeson.Types.Internal.Value -> b1 -> b1)[OneShot]
                                  (n1 :: b1)[OneShot] ->
                                GHC.Base.foldr
                                  @ Language.PureScript.Externs.ExternsDeclaration
                                  @ b1
                                  (GHC.Base.mapFB
                                     @ Data.Aeson.Types.Internal.Value
                                     @ b1
                                     @ Language.PureScript.Externs.ExternsDeclaration
                                     c
                                     Language.PureScript.Externs.$fToJSONExternsDeclaration_$ctoJSON)
                                  n1
                                  x)))))) -}
b2e76f24ecba17bf3b946e078a8414b6
  $fToJSONExternsFile ::
    Data.Aeson.Types.ToJSON.ToJSON
      Language.PureScript.Externs.ExternsFile
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Externs.ExternsFile
                  Language.PureScript.Externs.$fToJSONExternsFile_$ctoJSON
                  Language.PureScript.Externs.$fToJSONExternsFile_$ctoEncoding
                  Language.PureScript.Externs.$fToJSONExternsFile_$ctoJSONList
                  Language.PureScript.Externs.$fToJSONExternsFile_$ctoEncodingList -}
b2e76f24ecba17bf3b946e078a8414b6
  $fToJSONExternsFile_$ctoEncoding ::
    Language.PureScript.Externs.ExternsFile
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1,
     Strictness: <S,1*U(U(U,U,U),1*U,1*U,1*U,1*U,1*U,1*U,1*U(1*U,1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U))))>,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.PureScript.Externs.ExternsFile) ->
                 case w of ww { Language.PureScript.Externs.ExternsFile ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 (Language.PureScript.Externs.$w$ctoEncoding
                    ww1
                    ww2
                    ww3
                    ww4
                    ww5
                    ww6
                    ww7
                    ww8)
                   `cast`
                 (Sym (Data.ByteString.Builder.Internal.N:Builder[0]) ; Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                                                 <Data.Aeson.Types.Internal.Value>_P)) }) -}
b2e76f24ecba17bf3b946e078a8414b6
  $fToJSONExternsFile_$ctoEncodingList ::
    [Language.PureScript.Externs.ExternsFile]
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (Data.Aeson.Encoding.Internal.list
                   @ Language.PureScript.Externs.ExternsFile
                   Language.PureScript.Externs.$fToJSONExternsFile_$ctoEncoding) -}
b2e76f24ecba17bf3b946e078a8414b6
  $fToJSONExternsFile_$ctoJSON ::
    Language.PureScript.Externs.ExternsFile
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1,
     Strictness: <S,1*U(U,1*U,1*U,1*U,1*U,1*U,1*U,1*U(1*U,1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U))))>m1,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.PureScript.Externs.ExternsFile) ->
                 case w of ww { Language.PureScript.Externs.ExternsFile ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 case Language.PureScript.Externs.$w$ctoJSON1
                        ww1
                        ww2
                        ww3
                        ww4
                        ww5
                        ww6
                        ww7
                        ww8 of ww9 { Unit# ww10 ->
                 Data.Aeson.Types.Internal.Object ww10 } }) -}
b2e76f24ecba17bf3b946e078a8414b6
  $fToJSONExternsFile_$ctoJSONList ::
    [Language.PureScript.Externs.ExternsFile]
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (x :: [Language.PureScript.Externs.ExternsFile]) ->
                 Data.Aeson.Types.Internal.$WArray
                   (Data.Vector.Generic.new
                      @ Data.Vector.Vector
                      @ Data.Aeson.Types.Internal.Value
                      (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                      (Data.Vector.Generic.New.unstream
                         @ Data.Vector.Vector
                         @ Data.Aeson.Types.Internal.Value
                         (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                         (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                            @ Data.Vector.Fusion.Util.Id
                            @ Data.Aeson.Types.Internal.Value
                            @ Data.Vector.Vector
                            Data.Vector.Fusion.Util.$fMonadId
                            Data.Vector.Fusion.Bundle.Size.Unknown
                            (GHC.Base.build
                               @ Data.Aeson.Types.Internal.Value
                               (\ @ b1
                                  (c :: Data.Aeson.Types.Internal.Value -> b1 -> b1)[OneShot]
                                  (n1 :: b1)[OneShot] ->
                                GHC.Base.foldr
                                  @ Language.PureScript.Externs.ExternsFile
                                  @ b1
                                  (GHC.Base.mapFB
                                     @ Data.Aeson.Types.Internal.Value
                                     @ b1
                                     @ Language.PureScript.Externs.ExternsFile
                                     c
                                     Language.PureScript.Externs.$fToJSONExternsFile_$ctoJSON)
                                  n1
                                  x)))))) -}
e2b9825419a009927ef7bc8fe43a5592
  $fToJSONExternsFixity ::
    Data.Aeson.Types.ToJSON.ToJSON
      Language.PureScript.Externs.ExternsFixity
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Externs.ExternsFixity
                  Language.PureScript.Externs.$fToJSONExternsFixity_$ctoJSON
                  Language.PureScript.Externs.$fToJSONExternsFixity_$ctoEncoding
                  Language.PureScript.Externs.$fToJSONExternsFixity_$ctoJSONList
                  Language.PureScript.Externs.$fToJSONExternsFixity_$ctoEncodingList -}
4b71a3cb7c69462e3340fb16eb935878
  $fToJSONExternsFixity1 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Text.Internal.Text #)
                        Language.PureScript.Externs.$fToJSONExternsFixity2 of ds1 { (#,#) ipv33 ipv34 ->
                 ipv34 }) -}
cb095414fb657f49732a43935919bb3a
  $fToJSONExternsFixity2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        10#
                        s1 of ds1 { (#,#) ipv33 ipv34 ->
                 Data.Aeson.Types.ToJSON.$wouter1
                   ipv34
                   4#
                   (GHC.CString.unpackCString#
                      Language.PureScript.Externs.$fFromJSONExternsFixity3)
                   0#
                   ipv33 }) -}
074b88fe67b27e19a1122e95d3d48de3
  $fToJSONExternsFixity3 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Text.Internal.Text #)
                        Language.PureScript.Externs.$fToJSONExternsFixity4 of ds1 { (#,#) ipv33 ipv34 ->
                 ipv34 }) -}
bf3c24cb5d539ec137177ad9d52b323a
  $fToJSONExternsFixity4 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        10#
                        s1 of ds1 { (#,#) ipv33 ipv34 ->
                 Data.Aeson.Types.ToJSON.$wouter1
                   ipv34
                   4#
                   (GHC.CString.unpackCString#
                      Language.PureScript.Externs.$fFromJSONExternsFixity5)
                   0#
                   ipv33 }) -}
4a1ba9db7f67e0461662bdec1b935ddd
  $fToJSONExternsFixity5 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Text.Internal.Text #)
                        Language.PureScript.Externs.$fToJSONExternsFixity6 of ds1 { (#,#) ipv33 ipv34 ->
                 ipv34 }) -}
d8308d2c21e4591cc089fe6079011007
  $fToJSONExternsFixity6 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        10#
                        s1 of ds1 { (#,#) ipv33 ipv34 ->
                 Data.Aeson.Types.ToJSON.$wouter1
                   ipv34
                   4#
                   (GHC.CString.unpackCString#
                      Language.PureScript.Externs.$fFromJSONExternsFixity7)
                   0#
                   ipv33 }) -}
e68c93de30a91a483e8326bc1d87ba68
  $fToJSONExternsFixity7 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Text.Internal.Text #)
                        Language.PureScript.Externs.$fToJSONExternsFixity8 of ds1 { (#,#) ipv33 ipv34 ->
                 ipv34 }) -}
1c0f9e1ab8d5184c11eed814a0bea7c9
  $fToJSONExternsFixity8 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        10#
                        s1 of ds1 { (#,#) ipv33 ipv34 ->
                 Data.Aeson.Types.ToJSON.$wouter1
                   ipv34
                   4#
                   (GHC.CString.unpackCString#
                      Language.PureScript.Externs.$fFromJSONExternsFixity9)
                   0#
                   ipv33 }) -}
e2b9825419a009927ef7bc8fe43a5592
  $fToJSONExternsFixity_$ctoEncoding ::
    Language.PureScript.Externs.ExternsFixity
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U,1*U(U,U,U),1*U(1*U,U))>,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.PureScript.Externs.ExternsFixity) ->
                 case w of ww { Language.PureScript.Externs.ExternsFixity ww1 ww2 ww3 ww4 ->
                 (Language.PureScript.Externs.$w$ctoEncoding1 ww1 ww2 ww3 ww4)
                   `cast`
                 (Sym (Data.ByteString.Builder.Internal.N:Builder[0]) ; Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                                                 <Data.Aeson.Types.Internal.Value>_P)) }) -}
e2b9825419a009927ef7bc8fe43a5592
  $fToJSONExternsFixity_$ctoEncodingList ::
    [Language.PureScript.Externs.ExternsFixity]
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (Data.Aeson.Encoding.Internal.list
                   @ Language.PureScript.Externs.ExternsFixity
                   Language.PureScript.Externs.$fToJSONExternsFixity_$ctoEncoding) -}
e2b9825419a009927ef7bc8fe43a5592
  $fToJSONExternsFixity_$ctoJSON ::
    Language.PureScript.Externs.ExternsFixity
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U,U,1*U(1*U,U))>m1,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.PureScript.Externs.ExternsFixity) ->
                 case w of ww { Language.PureScript.Externs.ExternsFixity ww1 ww2 ww3 ww4 ->
                 case Language.PureScript.Externs.$w$ctoJSON2
                        ww1
                        ww2
                        ww3
                        ww4 of ww5 { Unit# ww6 ->
                 Data.Aeson.Types.Internal.Object ww6 } }) -}
e2b9825419a009927ef7bc8fe43a5592
  $fToJSONExternsFixity_$ctoJSONList ::
    [Language.PureScript.Externs.ExternsFixity]
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (x :: [Language.PureScript.Externs.ExternsFixity]) ->
                 Data.Aeson.Types.Internal.$WArray
                   (Data.Vector.Generic.new
                      @ Data.Vector.Vector
                      @ Data.Aeson.Types.Internal.Value
                      (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                      (Data.Vector.Generic.New.unstream
                         @ Data.Vector.Vector
                         @ Data.Aeson.Types.Internal.Value
                         (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                         (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                            @ Data.Vector.Fusion.Util.Id
                            @ Data.Aeson.Types.Internal.Value
                            @ Data.Vector.Vector
                            Data.Vector.Fusion.Util.$fMonadId
                            Data.Vector.Fusion.Bundle.Size.Unknown
                            (GHC.Base.build
                               @ Data.Aeson.Types.Internal.Value
                               (\ @ b1
                                  (c :: Data.Aeson.Types.Internal.Value -> b1 -> b1)[OneShot]
                                  (n1 :: b1)[OneShot] ->
                                GHC.Base.foldr
                                  @ Language.PureScript.Externs.ExternsFixity
                                  @ b1
                                  (GHC.Base.mapFB
                                     @ Data.Aeson.Types.Internal.Value
                                     @ b1
                                     @ Language.PureScript.Externs.ExternsFixity
                                     c
                                     Language.PureScript.Externs.$fToJSONExternsFixity_$ctoJSON)
                                  n1
                                  x)))))) -}
9a3a927dcca45bf460b81dc7ff9dfb45
  $fToJSONExternsFixity_$s$fToJSONEither ::
    Data.Aeson.Types.ToJSON.ToJSON
      (Data.Either.Either
         Language.PureScript.Names.Ident
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ConstructorName))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Either.Either
                       Language.PureScript.Names.Ident
                       (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ConstructorName))
                  (Data.Aeson.Types.ToJSON.$fToJSON1Either_$cliftToJSON2
                     @ Language.PureScript.Names.Ident
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ConstructorName)
                     Language.PureScript.Names.$fToJSONIdent_$ctoJSON
                     Language.PureScript.Names.$fToJSONIdent_$ctoJSONList
                     Data.Aeson.Types.Internal.$WString
                       `cast`
                     (Sym (Language.PureScript.Names.N:ProperName[0]
                               <'Language.PureScript.Names.ConstructorName>_P)
                      ->_R <Data.Aeson.Types.Internal.Value>_R)
                     (Language.PureScript.Names.$fToJSONProperName_$ctoJSONList
                        @ 'Language.PureScript.Names.ConstructorName))
                  (Data.Aeson.Types.ToJSON.$fToJSON1Either_$cliftToEncoding2
                     @ Language.PureScript.Names.Ident
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ConstructorName)
                     Language.PureScript.Names.$fToJSONIdent_$ctoEncoding
                     Language.PureScript.Names.$fToJSONIdent_$ctoEncodingList
                     (Language.PureScript.Names.$fToJSONProperName_$ctoEncoding
                        @ 'Language.PureScript.Names.ConstructorName)
                     (Language.PureScript.Names.$fToJSONProperName_$ctoEncodingList
                        @ 'Language.PureScript.Names.ConstructorName))
                  (let {
                     f6 :: Data.Either.Either
                             Language.PureScript.Names.Ident
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ConstructorName)
                           -> Data.Aeson.Types.Internal.Value
                       {- Arity: 1 -}
                     = Data.Aeson.Types.ToJSON.$fToJSON1Either_$cliftToJSON2
                         @ Language.PureScript.Names.Ident
                         @ (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ConstructorName)
                         Language.PureScript.Names.$fToJSONIdent_$ctoJSON
                         Language.PureScript.Names.$fToJSONIdent_$ctoJSONList
                         Data.Aeson.Types.Internal.$WString
                           `cast`
                         (Sym (Language.PureScript.Names.N:ProperName[0]
                                   <'Language.PureScript.Names.ConstructorName>_P)
                          ->_R <Data.Aeson.Types.Internal.Value>_R)
                         (Language.PureScript.Names.$fToJSONProperName_$ctoJSONList
                            @ 'Language.PureScript.Names.ConstructorName)
                   } in
                   \ (x :: [Data.Either.Either
                              Language.PureScript.Names.Ident
                              (Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.ConstructorName)]) ->
                   Data.Aeson.Types.Internal.$WArray
                     (Data.Vector.Generic.new
                        @ Data.Vector.Vector
                        @ Data.Aeson.Types.Internal.Value
                        (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                        (Data.Vector.Generic.New.unstream
                           @ Data.Vector.Vector
                           @ Data.Aeson.Types.Internal.Value
                           (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                           (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                              @ Data.Vector.Fusion.Util.Id
                              @ Data.Aeson.Types.Internal.Value
                              @ Data.Vector.Vector
                              Data.Vector.Fusion.Util.$fMonadId
                              Data.Vector.Fusion.Bundle.Size.Unknown
                              (GHC.Base.build
                                 @ Data.Aeson.Types.Internal.Value
                                 (\ @ b1
                                    (c :: Data.Aeson.Types.Internal.Value -> b1 -> b1)[OneShot]
                                    (n1 :: b1)[OneShot] ->
                                  GHC.Base.foldr
                                    @ (Data.Either.Either
                                         Language.PureScript.Names.Ident
                                         (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.ConstructorName))
                                    @ b1
                                    (GHC.Base.mapFB
                                       @ Data.Aeson.Types.Internal.Value
                                       @ b1
                                       @ (Data.Either.Either
                                            Language.PureScript.Names.Ident
                                            (Language.PureScript.Names.ProperName
                                               'Language.PureScript.Names.ConstructorName))
                                       c
                                       f6)
                                    n1
                                    x))))))
                  (Data.Aeson.Encoding.Internal.list
                     @ (Data.Either.Either
                          Language.PureScript.Names.Ident
                          (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ConstructorName))
                     (Data.Aeson.Types.ToJSON.$fToJSON1Either_$cliftToEncoding2
                        @ Language.PureScript.Names.Ident
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ConstructorName)
                        Language.PureScript.Names.$fToJSONIdent_$ctoEncoding
                        Language.PureScript.Names.$fToJSONIdent_$ctoEncodingList
                        (Language.PureScript.Names.$fToJSONProperName_$ctoEncoding
                           @ 'Language.PureScript.Names.ConstructorName)
                        (Language.PureScript.Names.$fToJSONProperName_$ctoEncodingList
                           @ 'Language.PureScript.Names.ConstructorName))) -}
cac932cac83fee4afe9df4f645c23840
  $fToJSONExternsImport ::
    Data.Aeson.Types.ToJSON.ToJSON
      Language.PureScript.Externs.ExternsImport
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Externs.ExternsImport
                  Language.PureScript.Externs.$fToJSONExternsImport_$ctoJSON
                  Language.PureScript.Externs.$fToJSONExternsImport_$ctoEncoding
                  Language.PureScript.Externs.$fToJSONExternsImport_$ctoJSONList
                  Language.PureScript.Externs.$fToJSONExternsImport_$ctoEncodingList -}
748f989d6b64609cd5b1a423255b1dac
  $fToJSONExternsImport1 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Text.Internal.Text #)
                        Language.PureScript.Externs.$fToJSONExternsImport2 of ds1 { (#,#) ipv33 ipv34 ->
                 ipv34 }) -}
2398a1060e4cd471e91b4842bbf80bcc
  $fToJSONExternsImport2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        10#
                        s1 of ds1 { (#,#) ipv33 ipv34 ->
                 Data.Aeson.Types.ToJSON.$wouter1
                   ipv34
                   4#
                   (GHC.CString.unpackCString#
                      Language.PureScript.Externs.$fToJSONExternsImport3)
                   0#
                   ipv33 }) -}
88d3fd78cb589938318ebac88db65928
  $fToJSONExternsImport3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("eiImportedAs"#) -}
dbe9a74157248d51e4a29c1a486b7886
  $fToJSONExternsImport4 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Text.Internal.Text #)
                        Language.PureScript.Externs.$fToJSONExternsImport5 of ds1 { (#,#) ipv33 ipv34 ->
                 ipv34 }) -}
e6959a148d48cc69b65f83e1cdbb5861
  $fToJSONExternsImport5 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        10#
                        s1 of ds1 { (#,#) ipv33 ipv34 ->
                 Data.Aeson.Types.ToJSON.$wouter1
                   ipv34
                   4#
                   (GHC.CString.unpackCString#
                      Language.PureScript.Externs.$fToJSONExternsImport6)
                   0#
                   ipv33 }) -}
300e4feab6c5b2411c10c3d1c1d77e73
  $fToJSONExternsImport6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("eiImportType"#) -}
b4a8d63ecf27f2faa6b5ef89fd5bb595
  $fToJSONExternsImport7 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Text.Internal.Text #)
                        Language.PureScript.Externs.$fToJSONExternsImport8 of ds1 { (#,#) ipv33 ipv34 ->
                 ipv34 }) -}
03019416b930b308780d31491d9a3141
  $fToJSONExternsImport8 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        10#
                        s1 of ds1 { (#,#) ipv33 ipv34 ->
                 Data.Aeson.Types.ToJSON.$wouter1
                   ipv34
                   4#
                   (GHC.CString.unpackCString#
                      Language.PureScript.Externs.$fToJSONExternsImport9)
                   0#
                   ipv33 }) -}
fe5fbe1d64601b39e8c43c370d5f4e38
  $fToJSONExternsImport9 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("eiModule"#) -}
cac932cac83fee4afe9df4f645c23840
  $fToJSONExternsImport_$ctoEncoding ::
    Language.PureScript.Externs.ExternsImport
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U,1*U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.PureScript.Externs.ExternsImport) ->
                 case w of ww { Language.PureScript.Externs.ExternsImport ww1 ww2 ww3 ->
                 (Language.PureScript.Externs.$w$ctoEncoding2 ww1 ww2 ww3)
                   `cast`
                 (Sym (Data.ByteString.Builder.Internal.N:Builder[0]) ; Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                                                 <Data.Aeson.Types.Internal.Value>_P)) }) -}
cac932cac83fee4afe9df4f645c23840
  $fToJSONExternsImport_$ctoEncodingList ::
    [Language.PureScript.Externs.ExternsImport]
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (Data.Aeson.Encoding.Internal.list
                   @ Language.PureScript.Externs.ExternsImport
                   Language.PureScript.Externs.$fToJSONExternsImport_$ctoEncoding) -}
cac932cac83fee4afe9df4f645c23840
  $fToJSONExternsImport_$ctoJSON ::
    Language.PureScript.Externs.ExternsImport
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U,1*U)>m1, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.PureScript.Externs.ExternsImport) ->
                 case w of ww { Language.PureScript.Externs.ExternsImport ww1 ww2 ww3 ->
                 case Language.PureScript.Externs.$w$ctoJSON3
                        ww1
                        ww2
                        ww3 of ww4 { Unit# ww5 ->
                 Data.Aeson.Types.Internal.Object ww5 } }) -}
cac932cac83fee4afe9df4f645c23840
  $fToJSONExternsImport_$ctoJSONList ::
    [Language.PureScript.Externs.ExternsImport]
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (x :: [Language.PureScript.Externs.ExternsImport]) ->
                 Data.Aeson.Types.Internal.$WArray
                   (Data.Vector.Generic.new
                      @ Data.Vector.Vector
                      @ Data.Aeson.Types.Internal.Value
                      (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                      (Data.Vector.Generic.New.unstream
                         @ Data.Vector.Vector
                         @ Data.Aeson.Types.Internal.Value
                         (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                         (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                            @ Data.Vector.Fusion.Util.Id
                            @ Data.Aeson.Types.Internal.Value
                            @ Data.Vector.Vector
                            Data.Vector.Fusion.Util.$fMonadId
                            Data.Vector.Fusion.Bundle.Size.Unknown
                            (GHC.Base.build
                               @ Data.Aeson.Types.Internal.Value
                               (\ @ b1
                                  (c :: Data.Aeson.Types.Internal.Value -> b1 -> b1)[OneShot]
                                  (n1 :: b1)[OneShot] ->
                                GHC.Base.foldr
                                  @ Language.PureScript.Externs.ExternsImport
                                  @ b1
                                  (GHC.Base.mapFB
                                     @ Data.Aeson.Types.Internal.Value
                                     @ b1
                                     @ Language.PureScript.Externs.ExternsImport
                                     c
                                     Language.PureScript.Externs.$fToJSONExternsImport_$ctoJSON)
                                  n1
                                  x)))))) -}
550ce16782e073a4c465189b0fa52bb0
  $fToJSONExternsTypeFixity ::
    Data.Aeson.Types.ToJSON.ToJSON
      Language.PureScript.Externs.ExternsTypeFixity
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Externs.ExternsTypeFixity
                  Language.PureScript.Externs.$fToJSONExternsTypeFixity_$ctoJSON
                  Language.PureScript.Externs.$fToJSONExternsTypeFixity_$ctoEncoding
                  Language.PureScript.Externs.$fToJSONExternsTypeFixity_$ctoJSONList
                  Language.PureScript.Externs.$fToJSONExternsTypeFixity_$ctoEncodingList -}
cbb4da5a26305a7a4dcd9dbe99747df8
  $fToJSONExternsTypeFixity1 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Text.Internal.Text #)
                        Language.PureScript.Externs.$fToJSONExternsTypeFixity2 of ds1 { (#,#) ipv33 ipv34 ->
                 ipv34 }) -}
66480a2e1633444303dd5820da9837b4
  $fToJSONExternsTypeFixity2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        10#
                        s1 of ds1 { (#,#) ipv33 ipv34 ->
                 Data.Aeson.Types.ToJSON.$wouter1
                   ipv34
                   4#
                   (GHC.CString.unpackCString#
                      Language.PureScript.Externs.$fFromJSONExternsTypeFixity3)
                   0#
                   ipv33 }) -}
0248eb9b3a5e158411c73bdc114ee745
  $fToJSONExternsTypeFixity3 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Text.Internal.Text #)
                        Language.PureScript.Externs.$fToJSONExternsTypeFixity4 of ds1 { (#,#) ipv33 ipv34 ->
                 ipv34 }) -}
5663dc1927f38918635c092bd5b7fa5e
  $fToJSONExternsTypeFixity4 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        10#
                        s1 of ds1 { (#,#) ipv33 ipv34 ->
                 Data.Aeson.Types.ToJSON.$wouter1
                   ipv34
                   4#
                   (GHC.CString.unpackCString#
                      Language.PureScript.Externs.$fFromJSONExternsTypeFixity5)
                   0#
                   ipv33 }) -}
c19576f283b92d3a7cc9fd5da4d3ad6f
  $fToJSONExternsTypeFixity5 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Text.Internal.Text #)
                        Language.PureScript.Externs.$fToJSONExternsTypeFixity6 of ds1 { (#,#) ipv33 ipv34 ->
                 ipv34 }) -}
96df2c5f02589bd978e6ad9193889f52
  $fToJSONExternsTypeFixity6 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        10#
                        s1 of ds1 { (#,#) ipv33 ipv34 ->
                 Data.Aeson.Types.ToJSON.$wouter1
                   ipv34
                   4#
                   (GHC.CString.unpackCString#
                      Language.PureScript.Externs.$fFromJSONExternsTypeFixity7)
                   0#
                   ipv33 }) -}
6f9759d80b1b0594466355b7f69c6ff8
  $fToJSONExternsTypeFixity7 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Text.Internal.Text #)
                        Language.PureScript.Externs.$fToJSONExternsTypeFixity8 of ds1 { (#,#) ipv33 ipv34 ->
                 ipv34 }) -}
8df00be76c1bf0071d133685e9c87196
  $fToJSONExternsTypeFixity8 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        10#
                        s1 of ds1 { (#,#) ipv33 ipv34 ->
                 Data.Aeson.Types.ToJSON.$wouter1
                   ipv34
                   4#
                   (GHC.CString.unpackCString#
                      Language.PureScript.Externs.$fFromJSONExternsTypeFixity9)
                   0#
                   ipv33 }) -}
550ce16782e073a4c465189b0fa52bb0
  $fToJSONExternsTypeFixity_$ctoEncoding ::
    Language.PureScript.Externs.ExternsTypeFixity
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U,1*U(U,U,U),1*U(1*U,U))>,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.PureScript.Externs.ExternsTypeFixity) ->
                 case w of ww { Language.PureScript.Externs.ExternsTypeFixity ww1 ww2 ww3 ww4 ->
                 (Language.PureScript.Externs.$w$ctoEncoding3 ww1 ww2 ww3 ww4)
                   `cast`
                 (Sym (Data.ByteString.Builder.Internal.N:Builder[0]) ; Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                                                 <Data.Aeson.Types.Internal.Value>_P)) }) -}
550ce16782e073a4c465189b0fa52bb0
  $fToJSONExternsTypeFixity_$ctoEncodingList ::
    [Language.PureScript.Externs.ExternsTypeFixity]
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (Data.Aeson.Encoding.Internal.list
                   @ Language.PureScript.Externs.ExternsTypeFixity
                   Language.PureScript.Externs.$fToJSONExternsTypeFixity_$ctoEncoding) -}
550ce16782e073a4c465189b0fa52bb0
  $fToJSONExternsTypeFixity_$ctoJSON ::
    Language.PureScript.Externs.ExternsTypeFixity
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U,U,1*U(1*U,U))>m1,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.PureScript.Externs.ExternsTypeFixity) ->
                 case w of ww { Language.PureScript.Externs.ExternsTypeFixity ww1 ww2 ww3 ww4 ->
                 case Language.PureScript.Externs.$w$ctoJSON4
                        ww1
                        ww2
                        ww3
                        ww4 of ww5 { Unit# ww6 ->
                 Data.Aeson.Types.Internal.Object ww6 } }) -}
550ce16782e073a4c465189b0fa52bb0
  $fToJSONExternsTypeFixity_$ctoJSONList ::
    [Language.PureScript.Externs.ExternsTypeFixity]
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (x :: [Language.PureScript.Externs.ExternsTypeFixity]) ->
                 Data.Aeson.Types.Internal.$WArray
                   (Data.Vector.Generic.new
                      @ Data.Vector.Vector
                      @ Data.Aeson.Types.Internal.Value
                      (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                      (Data.Vector.Generic.New.unstream
                         @ Data.Vector.Vector
                         @ Data.Aeson.Types.Internal.Value
                         (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                         (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                            @ Data.Vector.Fusion.Util.Id
                            @ Data.Aeson.Types.Internal.Value
                            @ Data.Vector.Vector
                            Data.Vector.Fusion.Util.$fMonadId
                            Data.Vector.Fusion.Bundle.Size.Unknown
                            (GHC.Base.build
                               @ Data.Aeson.Types.Internal.Value
                               (\ @ b1
                                  (c :: Data.Aeson.Types.Internal.Value -> b1 -> b1)[OneShot]
                                  (n1 :: b1)[OneShot] ->
                                GHC.Base.foldr
                                  @ Language.PureScript.Externs.ExternsTypeFixity
                                  @ b1
                                  (GHC.Base.mapFB
                                     @ Data.Aeson.Types.Internal.Value
                                     @ b1
                                     @ Language.PureScript.Externs.ExternsTypeFixity
                                     c
                                     Language.PureScript.Externs.$fToJSONExternsTypeFixity_$ctoJSON)
                                  n1
                                  x)))))) -}
07ad3a250d44ea434983d9977e939005
  $s$fFromJSONMaybe ::
    Data.Aeson.Types.FromJSON.FromJSON
      (GHC.Base.Maybe Language.PureScript.Kinds.Kind)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Base.Maybe Language.PureScript.Kinds.Kind)
                  (Data.Aeson.Types.FromJSON.$fFromJSON1Maybe_$cliftParseJSON
                     @ Language.PureScript.Kinds.Kind
                     Language.PureScript.Kinds.$fFromJSONKind_$cparseJSON
                     Language.PureScript.Kinds.$fFromJSONKind_$cparseJSONList)
                  (Data.Aeson.Types.FromJSON.$fFromJSONMaybe_$cparseJSONList
                     @ Language.PureScript.Kinds.Kind
                     Language.PureScript.Kinds.$fFromJSONKind) -}
3cb4df52cc4db2c4a8ec1a9611c10823
  $s$fShowEither_$cshowList ::
    [Data.Either.Either
       Language.PureScript.Names.Ident
       (Language.PureScript.Names.ProperName
          'Language.PureScript.Names.ConstructorName)]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Data.Either.Either
                             Language.PureScript.Names.Ident
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ConstructorName)])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Data.Either.Either
                        Language.PureScript.Names.Ident
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.ConstructorName))
                   (Data.Either.$fShowEither_$cshowsPrec
                      @ Language.PureScript.Names.Ident
                      @ (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.ConstructorName)
                      Language.PureScript.Names.$fShowIdent
                      (Language.PureScript.Names.$fShowProperName
                         @ 'Language.PureScript.Names.ConstructorName)
                      Data.Either.$fShowEither1)
                   ls
                   s) -}
233744c6e04b506b7c0afbf51ac86029
  $s$fShowEither_$cshowsPrec ::
    GHC.Types.Int
    -> Data.Either.Either
         Language.PureScript.Names.Ident
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ConstructorName)
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w2 :: GHC.Types.Int)
                   (w3 :: Data.Either.Either
                            Language.PureScript.Names.Ident
                            (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.ConstructorName)) ->
                 case w2 of ww { GHC.Types.I# ww1 ->
                 Data.Either.$w$cshowsPrec
                   @ Language.PureScript.Names.Ident
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.ConstructorName)
                   Language.PureScript.Names.$fShowIdent
                   (Language.PureScript.Names.$fShowProperName
                      @ 'Language.PureScript.Names.ConstructorName)
                   ww1
                   w3 }) -}
3ae1a2d89f387540aeeb64b4160baa2f
  $s$fShow[] :: GHC.Show.Show [Language.PureScript.Types.Constraint]
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ [Language.PureScript.Types.Constraint]
                  (\ (ds :: GHC.Types.Int) ->
                   Language.PureScript.Types.$fShowConstraint_$cshowList)
                  (\ (x :: [Language.PureScript.Types.Constraint]) ->
                   GHC.Show.showList__
                     @ Language.PureScript.Types.Constraint
                     Language.PureScript.Types.$fShowConstraint1
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [[Language.PureScript.Types.Constraint]])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ [Language.PureScript.Types.Constraint]
                     Language.PureScript.Types.$fShowConstraint_$cshowList
                     ls
                     s) -}
ae661c28f86df0b22a45cc4e93c19b1a
  $s$fShow[]_$cshow ::
    [Language.PureScript.Types.Constraint] -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: [Language.PureScript.Types.Constraint]) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Types.Constraint
                   Language.PureScript.Types.$fShowConstraint1
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
c3b34d69d2576468fe7104796d19eb61
  $s$fShow[]_$cshowList ::
    [[Language.PureScript.Types.Constraint]] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [[Language.PureScript.Types.Constraint]])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ [Language.PureScript.Types.Constraint]
                   Language.PureScript.Types.$fShowConstraint_$cshowList
                   ls
                   s) -}
36849871b728f857df9a1d78beec7bc0
  $salter_$s$sgo13 ::
    Data.Map.Internal.Map
      (GHC.Base.Maybe Language.PureScript.Names.ModuleName)
      (Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName))
         (Data.Map.Internal.Map
            (Language.PureScript.Names.Qualified
               Language.PureScript.Names.Ident)
            (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
               (Language.PureScript.Names.Qualified
                  Language.PureScript.Names.Ident))))
    -> Language.PureScript.Names.ModuleName
    -> (GHC.Base.Maybe
          (Data.Map.Internal.Map
             (Language.PureScript.Names.Qualified
                (Language.PureScript.Names.ProperName
                   'Language.PureScript.Names.ClassName))
             (Data.Map.Internal.Map
                (Language.PureScript.Names.Qualified
                   Language.PureScript.Names.Ident)
                (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
                   (Language.PureScript.Names.Qualified
                      Language.PureScript.Names.Ident))))
        -> GHC.Base.Maybe
             (Data.Map.Internal.Map
                (Language.PureScript.Names.Qualified
                   (Language.PureScript.Names.ProperName
                      'Language.PureScript.Names.ClassName))
                (Data.Map.Internal.Map
                   (Language.PureScript.Names.Qualified
                      Language.PureScript.Names.Ident)
                   (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
                      (Language.PureScript.Names.Qualified
                         Language.PureScript.Names.Ident)))))
    -> Data.Map.Internal.Map
         (GHC.Base.Maybe Language.PureScript.Names.ModuleName)
         (Data.Map.Internal.Map
            (Language.PureScript.Names.Qualified
               (Language.PureScript.Names.ProperName
                  'Language.PureScript.Names.ClassName))
            (Data.Map.Internal.Map
               (Language.PureScript.Names.Qualified
                  Language.PureScript.Names.Ident)
               Language.PureScript.TypeClassDictionaries.NamedDict))
  {- Arity: 3, Strictness: <S,1*U><L,U><C(S),1*C1(U)> -}
ecf4b8e9698ffb712f5fc1d90c886d6d
  $salter_$s$w$sgo1 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName))
      a1
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> Language.PureScript.Names.ModuleName
    -> (GHC.Base.Maybe a1 -> GHC.Base.Maybe a1)
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName))
         a1
  {- Arity: 4, Strictness: <S,1*U><L,U(U,U,U)><L,U><C(S),1*C1(U)> -}
bc6e31d5c96962bb7affba51f5c18c26
  $salter_$s$w$sgo2 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName))
      a1
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> (GHC.Base.Maybe a1 -> GHC.Base.Maybe a1)
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName))
         a1
  {- Arity: 3, Strictness: <S,1*U><L,U(U,U,U)><C(S),1*C1(U)> -}
bf9cee54d678c7b913399b5aeb46a6f8
  $sinsert_$s$w$sgo1 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ConstructorName))
      (Language.PureScript.Environment.DataDeclType,
       Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName,
       Language.PureScript.Types.Type, [Language.PureScript.Names.Ident])
    -> (Language.PureScript.Environment.DataDeclType,
        Language.PureScript.Names.ProperName
          'Language.PureScript.Names.TypeName,
        Language.PureScript.Types.Type, [Language.PureScript.Names.Ident])
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ConstructorName
    -> Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ConstructorName)
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ConstructorName))
         (Language.PureScript.Environment.DataDeclType,
          Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName,
          Language.PureScript.Types.Type, [Language.PureScript.Names.Ident])
  {- Arity: 5, Strictness: <S,1*U><L,U><L,U(U,U,U)><L,U><L,U> -}
2e567e5797bdd3940b8840b54ca0ca64
  $sinsert_$s$w$sgo13 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName))
      (Language.PureScript.Kinds.Kind,
       Language.PureScript.Environment.TypeKind)
    -> (Language.PureScript.Kinds.Kind,
        Language.PureScript.Environment.TypeKind)
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName
    -> Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName)
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.TypeName))
         (Language.PureScript.Kinds.Kind,
          Language.PureScript.Environment.TypeKind)
  {- Arity: 5, Strictness: <S,1*U><L,U><L,U(U,U,U)><L,U><L,U> -}
5682fc0bd51aa30cda875565dd8cb7aa
  $sinsert_$s$w$sgo3 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         Language.PureScript.Names.Ident)
      (Language.PureScript.Types.Type,
       Language.PureScript.Environment.NameKind,
       Language.PureScript.Environment.NameVisibility)
    -> (Language.PureScript.Types.Type,
        Language.PureScript.Environment.NameKind,
        Language.PureScript.Environment.NameVisibility)
    -> Language.PureScript.Names.Ident
    -> Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.Qualified
         Language.PureScript.Names.Ident
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            Language.PureScript.Names.Ident)
         (Language.PureScript.Types.Type,
          Language.PureScript.Environment.NameKind,
          Language.PureScript.Environment.NameVisibility)
  {- Arity: 5, Strictness: <S,1*U><L,U><L,U><L,U><L,U> -}
2322408149d67ae285578f8a84db3a3a
  $sinsert_$s$w$sgo4 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName))
      Language.PureScript.Environment.TypeClassData
    -> Language.PureScript.Environment.TypeClassData
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName))
         Language.PureScript.Environment.TypeClassData
  {- Arity: 5, Strictness: <S,1*U><L,U><L,U(U,U,U)><L,U><L,U> -}
68bc4e1f2d8edd8e71904177e0f6cd27
  $sinsert_$s$w$sgo5 ::
    Data.Set.Internal.Set
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.KindName))
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.KindName
    -> Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.KindName)
    -> Data.Set.Internal.Set
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.KindName))
  {- Arity: 4, Strictness: <S,1*U><L,U(U,U,U)><L,U><L,U> -}
37b1b6e30f3075d46abe453b3ad495d8
  $slookup_$s$wpoly_go1 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName))
      ([(Data.Text.Internal.Text,
         GHC.Base.Maybe Language.PureScript.Kinds.Kind)],
       Language.PureScript.Types.Type)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> ((Data.Text.Internal.Text :: *)
        ~R# (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.TypeName :: *)) =>
       Language.PureScript.Names.ModuleName
       -> GHC.Base.Maybe
            ([(Data.Text.Internal.Text,
               GHC.Base.Maybe Language.PureScript.Kinds.Kind)],
             Language.PureScript.Types.Type)
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S,1*U><L,U><L,U><L,U><L,U><L,U> -}
afcb8de5f4f99cf254eaac9e9d0163e3
  $slookup_$s$wpoly_go13 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName))
      ([(Data.Text.Internal.Text,
         GHC.Base.Maybe Language.PureScript.Kinds.Kind)],
       Language.PureScript.Types.Type)
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName
    -> Language.PureScript.Names.ModuleName
    -> GHC.Base.Maybe
         ([(Data.Text.Internal.Text,
            GHC.Base.Maybe Language.PureScript.Kinds.Kind)],
          Language.PureScript.Types.Type)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U(U,U,U)><L,U> -}
8ca8ce652ebe8d14c3200e9bdd4775d2
  $slookup_$s$wpoly_go2 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName))
      a
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName
    -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U(U,U,U)> -}
07308e583c205609d807adb7422cfd56
  $slookup_$s$wpoly_go3 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ConstructorName))
      (Language.PureScript.Environment.DataDeclType,
       Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName,
       Language.PureScript.Types.Type, [Language.PureScript.Names.Ident])
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ConstructorName
    -> Language.PureScript.Names.ModuleName
    -> GHC.Base.Maybe
         (Language.PureScript.Environment.DataDeclType,
          Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName,
          Language.PureScript.Types.Type, [Language.PureScript.Names.Ident])
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U(U,U,U)><L,U> -}
65b3536f37dfadea84f4329f9546fbe0
  $slookup_$s$wpoly_go4 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ConstructorName))
      (Language.PureScript.Environment.DataDeclType,
       Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName,
       Language.PureScript.Types.Type, [Language.PureScript.Names.Ident])
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> ((Data.Text.Internal.Text :: *)
        ~R# (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ConstructorName :: *)) =>
       Language.PureScript.Names.ModuleName
       -> GHC.Base.Maybe
            (Language.PureScript.Environment.DataDeclType,
             Language.PureScript.Names.ProperName
               'Language.PureScript.Names.TypeName,
             Language.PureScript.Types.Type, [Language.PureScript.Names.Ident])
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S,1*U><L,U><L,U><L,U><L,U><L,U> -}
b452fe496826f18486cf5d3f41022cd1
  $slookup_$s$wpoly_go6 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         Language.PureScript.Names.Ident)
      (Language.PureScript.Types.Type,
       Language.PureScript.Environment.NameKind,
       Language.PureScript.Environment.NameVisibility)
    -> Language.PureScript.Names.Ident
    -> Language.PureScript.Names.ModuleName
    -> GHC.Base.Maybe
         (Language.PureScript.Types.Type,
          Language.PureScript.Environment.NameKind,
          Language.PureScript.Environment.NameVisibility)
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,U><L,U> -}
ad1e523a90eb6347a88c1c6ce36fd7b1
  $slookup_$s$wpoly_go7 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         Language.PureScript.Names.Ident)
      a
    -> Language.PureScript.Names.Ident -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U> -}
93a06d98a423622780dd4ceb1fa3894f
  $slookup_$s$wpoly_go8 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName))
      Language.PureScript.Environment.TypeClassData
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> Language.PureScript.Names.ModuleName
    -> GHC.Base.Maybe Language.PureScript.Environment.TypeClassData
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U(U,U,U)><L,U> -}
675e2352900d4abd36c2111b50690667
  $slookup_$s$wpoly_go9 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName))
      Language.PureScript.Environment.TypeClassData
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> ((Data.Text.Internal.Text :: *)
        ~R# (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName :: *)) =>
       Language.PureScript.Names.ModuleName
       -> GHC.Base.Maybe Language.PureScript.Environment.TypeClassData
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S,1*U><L,U><L,U><L,U><L,U><L,U> -}
349251a8ea80b5c593aa8624ca7b93f0
  $slookup_$spoly_go13 ::
    Data.Map.Internal.Map
      (GHC.Base.Maybe Language.PureScript.Names.ModuleName)
      (Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName))
         (Data.Map.Internal.Map
            (Language.PureScript.Names.Qualified
               Language.PureScript.Names.Ident)
            (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
               (Language.PureScript.Names.Qualified
                  Language.PureScript.Names.Ident))))
    -> Language.PureScript.Names.ModuleName
    -> GHC.Base.Maybe
         (Data.Map.Internal.Map
            (Language.PureScript.Names.Qualified
               (Language.PureScript.Names.ProperName
                  'Language.PureScript.Names.ClassName))
            (Data.Map.Internal.Map
               (Language.PureScript.Names.Qualified
                  Language.PureScript.Names.Ident)
               Language.PureScript.TypeClassDictionaries.NamedDict))
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U> -}
df48ce6c54ee82b863bc0450f0fab075
  $smember_$s$wgo1 ::
    Data.Set.Internal.Set
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.KindName))
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.KindName
    -> Language.PureScript.Names.ModuleName
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U(U,U,U)><L,U> -}
81d7960c6a3f3035c05ad14bef9f18e8
  $smember_$s$wgo3 ::
    Data.Set.Internal.Set
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.KindName))
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> ((Data.Text.Internal.Text :: *)
        ~R# (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.KindName :: *)) =>
       Language.PureScript.Names.ModuleName -> GHC.Types.Bool
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S,1*U><L,U><L,U><L,U><L,U><L,U> -}
c4f6631f3eaf5c0ceed68f6fe57be8d3
  $tc'EDClass :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9593308545008605360##
                   12933444185866170857##
                   Language.PureScript.Externs.$trModule
                   Language.PureScript.Externs.$tc'EDClass2
                   0#
                   Language.PureScript.Externs.$tc'EDClass1) -}
9396ad4db4b942aed3dc5ed57d4e1b00
  $tc'EDClass1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
22e3b072f4b5801ca767d2371e681416
  $tc'EDClass2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Externs.$tc'EDClass3) -}
8ce55d0671da1a1a48bf82f46f2d7715
  $tc'EDClass3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'EDClass"#) -}
3d85bd59f17f148ac29387e59e854a42
  $tc'EDDataConstructor :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17495089682214159211##
                   15096107500395087641##
                   Language.PureScript.Externs.$trModule
                   Language.PureScript.Externs.$tc'EDDataConstructor2
                   0#
                   Language.PureScript.Externs.$tc'EDDataConstructor1) -}
82bc8db9685ae3dc884182df04f86688
  $tc'EDDataConstructor1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
9979b5e300b8d0c58986e782a10c7e90
  $tc'EDDataConstructor2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Externs.$tc'EDDataConstructor3) -}
9b3cac71059411afb026bef8e0678ea5
  $tc'EDDataConstructor3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'EDDataConstructor"#) -}
a8f5c1849500f49db8c150151be5ae52
  $tc'EDInstance :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   217589040461198381##
                   6520192554254424529##
                   Language.PureScript.Externs.$trModule
                   Language.PureScript.Externs.$tc'EDInstance2
                   0#
                   Language.PureScript.Externs.$tc'EDInstance1) -}
033236665188417117454b0aac25bcd4
  $tc'EDInstance1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
480f1864207c0ee7009b0160fdc0c59c
  $tc'EDInstance2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Externs.$tc'EDInstance3) -}
89ade81e90af9887189502a51d41a29b
  $tc'EDInstance3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'EDInstance"#) -}
a15fae6aac1e496f8356db0fa001e43a
  $tc'EDKind :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17262095000358067501##
                   8317875779144641102##
                   Language.PureScript.Externs.$trModule
                   Language.PureScript.Externs.$tc'EDKind2
                   0#
                   Language.PureScript.Externs.$tc'EDKind1) -}
247a95b3970df97865da7c2dce823545
  $tc'EDKind1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
eb93de3f67da87dbc3e6876b3a51b510
  $tc'EDKind2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Externs.$tc'EDKind3) -}
3e65df20b680d70b826f2430d6340cbb
  $tc'EDKind3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'EDKind"#) -}
be250a88839bc4dce6df835765146697
  $tc'EDType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3381397955866772474##
                   12168696960480391270##
                   Language.PureScript.Externs.$trModule
                   Language.PureScript.Externs.$tc'EDType2
                   0#
                   Language.PureScript.Externs.$tc'EDType1) -}
d8af32819c1e319d09b639bc0d2b2270
  $tc'EDType1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
7a7c5b77275a879a1d5c54e06e2c5eeb
  $tc'EDType2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Externs.$tc'EDType3) -}
d84d8e760926f2be6cd8ebc024aeee07
  $tc'EDType3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'EDType"#) -}
383c4a2e5a5f73f07967b927788a82ce
  $tc'EDTypeSynonym :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10660201356507123426##
                   13838883605861581761##
                   Language.PureScript.Externs.$trModule
                   Language.PureScript.Externs.$tc'EDTypeSynonym2
                   0#
                   Language.PureScript.Externs.$tc'EDTypeSynonym1) -}
1206e26a487b9e804483a3ca0ce9a3e3
  $tc'EDTypeSynonym1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
0a97d5a132983bd967e049013cc62927
  $tc'EDTypeSynonym2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Externs.$tc'EDTypeSynonym3) -}
ae436f65b980920fe59ae25ba7a11a68
  $tc'EDTypeSynonym3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'EDTypeSynonym"#) -}
8a0b6bdcb63dac1fbf114f1d57f12b23
  $tc'EDValue :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17583250961212408278##
                   7226169826600889901##
                   Language.PureScript.Externs.$trModule
                   Language.PureScript.Externs.$tc'EDValue2
                   0#
                   Language.PureScript.Externs.$tc'EDValue1) -}
131b6a55a7d455ebcafaea3e9a8375eb
  $tc'EDValue1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
7b10cfda21a9010c610f5a6805f77d3d
  $tc'EDValue2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Externs.$tc'EDValue3) -}
dadeeee47999445784688083ab6f5ae6
  $tc'EDValue3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'EDValue"#) -}
208c20ae434f589baed982d94104e9ef
  $tc'ExternsFile :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5905046022264228443##
                   1525651553386861499##
                   Language.PureScript.Externs.$trModule
                   Language.PureScript.Externs.$tc'ExternsFile2
                   0#
                   Language.PureScript.Externs.$tc'ExternsFile1) -}
055bd2fcbbe2fd64ebcceb5023ec26b3
  $tc'ExternsFile1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
ddd899d9cfd221358c8ccb82eb22d64d
  $tc'ExternsFile2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Externs.$tc'ExternsFile3) -}
e0a77fb972df45a42dc12d75a0da6088
  $tc'ExternsFile3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ExternsFile"#) -}
4653f48ec4f7c1e949624193eaeee92b
  $tc'ExternsFixity :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16398289115544917215##
                   8214816626755037085##
                   Language.PureScript.Externs.$trModule
                   Language.PureScript.Externs.$tc'ExternsFixity2
                   0#
                   Language.PureScript.Externs.$tc'ExternsFixity1) -}
7d8a3df28b1efe8c4e36a77d0387ad1b
  $tc'ExternsFixity1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
9f68e45bc0e704c1474b11a05f16cee2
  $tc'ExternsFixity2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Externs.$tc'ExternsFixity3) -}
8a9dd572e093dea4326b4e05ac61d0e5
  $tc'ExternsFixity3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ExternsFixity"#) -}
7d392e91f9c72cc6bdcd1abe3bba9ec5
  $tc'ExternsImport :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13233695639480969878##
                   10598325446523147970##
                   Language.PureScript.Externs.$trModule
                   Language.PureScript.Externs.$tc'ExternsImport2
                   0#
                   Language.PureScript.Externs.$tc'ExternsImport1) -}
6a7ac89152ba0a382bef2d927fd87f18
  $tc'ExternsImport1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
f7545b058329795472198f98c0c3e413
  $tc'ExternsImport2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Externs.$tc'ExternsImport3) -}
580624a790024edfcdba516bfb67d07b
  $tc'ExternsImport3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ExternsImport"#) -}
46302b9f6ac1e9d9cbe3669b952909bd
  $tc'ExternsTypeFixity :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1813892324128198251##
                   16754152864303497158##
                   Language.PureScript.Externs.$trModule
                   Language.PureScript.Externs.$tc'ExternsTypeFixity2
                   0#
                   Language.PureScript.Externs.$tc'ExternsTypeFixity1) -}
f7efc94c1a7315ccfe7ab331da5c92b7
  $tc'ExternsTypeFixity1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
452cec8ebbc363ebdf537078182aa676
  $tc'ExternsTypeFixity2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Externs.$tc'ExternsTypeFixity3) -}
61a880c5e9695e2d17d2a0a059a86cf8
  $tc'ExternsTypeFixity3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ExternsTypeFixity"#) -}
6e576425acb0f9e0e3437776154a5871
  $tcExternsDeclaration :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13294004164231794999##
                   1732332223829892131##
                   Language.PureScript.Externs.$trModule
                   Language.PureScript.Externs.$tcExternsDeclaration1
                   0#
                   GHC.Types.krep$*) -}
08115488e780322f3c26f81625e64943
  $tcExternsDeclaration1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Externs.$tcExternsDeclaration2) -}
ff3d70d91bb2928faa48cc434d1d05b4
  $tcExternsDeclaration2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ExternsDeclaration"#) -}
fd25068ae8b611278b94eb82a017af38
  $tcExternsFile :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5563033124312187027##
                   4549457146903014667##
                   Language.PureScript.Externs.$trModule
                   Language.PureScript.Externs.$tcExternsFile1
                   0#
                   GHC.Types.krep$*) -}
55c1740f0672ac46fb30fc61c28ada31
  $tcExternsFile1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Externs.$tcExternsFile2) -}
68bcb65f2a8cadbf430aef9a584c0e2c
  $tcExternsFile2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ExternsFile"#) -}
db6feac2db2e58397b705cc5b974cd93
  $tcExternsFixity :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12443060118844889263##
                   6689096976952425202##
                   Language.PureScript.Externs.$trModule
                   Language.PureScript.Externs.$tcExternsFixity1
                   0#
                   GHC.Types.krep$*) -}
6884d07c5d97a5fa91c77bc38c78bb49
  $tcExternsFixity1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Externs.$fFromJSONExternsFixity15) -}
d1edc1ff5a0c856cc1c0705ef748abff
  $tcExternsImport :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   856059726600817900##
                   16716668774357310816##
                   Language.PureScript.Externs.$trModule
                   Language.PureScript.Externs.$tcExternsImport1
                   0#
                   GHC.Types.krep$*) -}
18af604e0a403eb394d2bcb9949c0f2a
  $tcExternsImport1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Externs.$tcExternsImport2) -}
de601b6061cd6466600ce48c1144f852
  $tcExternsImport2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ExternsImport"#) -}
4ab39310aae249fb495caa927ed31244
  $tcExternsTypeFixity :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10786452839911804761##
                   9766000578639599207##
                   Language.PureScript.Externs.$trModule
                   Language.PureScript.Externs.$tcExternsTypeFixity1
                   0#
                   GHC.Types.krep$*) -}
cca9b140380f13c051959a6acbae2842
  $tcExternsTypeFixity1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Externs.$fFromJSONExternsTypeFixity13) -}
75e660b2b693d977506470008256515c
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Language.PureScript.Externs.$trModule3
                   Language.PureScript.Externs.$trModule1) -}
f4f04e99c08258fc86f567bc8cf18e7a
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Externs.$trModule2) -}
1d903c4f820641c2d75dd63a229aa1d4
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Language.PureScript.Externs"#) -}
de906ed914ed06c4a905956434318f06
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Externs.$trModule4) -}
7fec45640c38c3b2c42bb4c041307b93
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"#) -}
45a26a6f5854665222c379466681ba1c
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> Language.PureScript.Externs.ExternsDeclaration -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [0] -}
07001194982e30a85b9e68d271da5fad
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> Data.Text.Internal.Text
    -> Language.PureScript.Names.ModuleName
    -> [Language.PureScript.AST.Declarations.DeclarationRef]
    -> [Language.PureScript.Externs.ExternsImport]
    -> [Language.PureScript.Externs.ExternsFixity]
    -> [Language.PureScript.Externs.ExternsTypeFixity]
    -> [Language.PureScript.Externs.ExternsDeclaration]
    -> Language.PureScript.AST.SourcePos.SourceSpan
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 10,
     Strictness: <S,U><L,1*U(U,U,U)><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U(1*U,1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)))><L,U>,
     Inline: [0] -}
1e581de0240ee55f5045f88aa3b0ee25
  $w$cshowsPrec2 ::
    GHC.Prim.Int#
    -> Language.PureScript.AST.Operators.Associativity
    -> Language.PureScript.AST.Operators.Precedence
    -> Language.PureScript.Names.OpName
         'Language.PureScript.Names.ValueOpName
    -> Language.PureScript.Names.Qualified
         (Data.Either.Either
            Language.PureScript.Names.Ident
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ConstructorName))
    -> GHC.Show.ShowS
  {- Arity: 5, Strictness: <S,U><L,U><L,U><L,U(U,U,U)><L,1*U(1*U,U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Language.PureScript.AST.Operators.Associativity)
                   (ww2 :: Language.PureScript.AST.Operators.Precedence)
                   (ww3 :: Language.PureScript.Names.OpName
                             'Language.PureScript.Names.ValueOpName)
                   (ww4 :: Language.PureScript.Names.Qualified
                             (Data.Either.Either
                                Language.PureScript.Names.Ident
                                (Language.PureScript.Names.ProperName
                                   'Language.PureScript.Names.ConstructorName))) ->
                 let {
                   f6 :: GHC.Base.String -> GHC.Base.String
                   = case ww4 of ww5 { Language.PureScript.Names.Qualified ww6 ww7 ->
                     Language.PureScript.Names.$w$cshowsPrec4
                       @ (Data.Either.Either
                            Language.PureScript.Names.Ident
                            (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.ConstructorName))
                       Language.PureScript.Externs.$fShowExternsFixity_$s$fShowEither
                       0#
                       ww6
                       ww7 }
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.CString.unpackAppendCString#
                       Language.PureScript.Externs.$fShowExternsFixity7
                       (GHC.CString.unpackAppendCString#
                          Language.PureScript.Externs.$fShowExternsFixity6
                          (Language.PureScript.AST.Operators.$w$cshowsPrec
                             ww1
                             (GHC.Base.++
                                @ GHC.Types.Char
                                GHC.Show.showCommaSpace1
                                (GHC.CString.unpackAppendCString#
                                   Language.PureScript.Externs.$fShowExternsFixity5
                                   (case GHC.Show.$w$cshowsPrec4
                                           0#
                                           ww2
                                           (GHC.Base.++
                                              @ GHC.Types.Char
                                              GHC.Show.showCommaSpace1
                                              (GHC.CString.unpackAppendCString#
                                                 Language.PureScript.Externs.$fShowExternsFixity4
                                                 (Language.PureScript.Names.$w$cshowsPrec3
                                                    @ 'Language.PureScript.Names.ValueOpName
                                                    0#
                                                    ww3
                                                    (GHC.Base.++
                                                       @ GHC.Types.Char
                                                       GHC.Show.showCommaSpace1
                                                       (GHC.CString.unpackAppendCString#
                                                          Language.PureScript.Externs.$fShowExternsFixity3
                                                          (f6
                                                             (GHC.CString.unpackAppendCString#
                                                                Language.PureScript.Externs.$fShowExternsFixity2
                                                                x))))))) of ww5 { (#,#) ww6 ww7 ->
                                    GHC.Types.: @ GHC.Types.Char ww6 ww7 })))))
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT -> p
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x)) }) -}
9ca571c40f4b67d6b6dc540c8dc2a155
  $w$cshowsPrec3 ::
    GHC.Prim.Int#
    -> Language.PureScript.Names.ModuleName
    -> Language.PureScript.AST.Declarations.ImportDeclarationType
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> GHC.Show.ShowS
  {- Arity: 4, Strictness: <S,U><L,U><L,U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Language.PureScript.Names.ModuleName)
                   (ww2 :: Language.PureScript.AST.Declarations.ImportDeclarationType)
                   (ww3 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName) ->
                 let {
                   f6 :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.$fShowMaybe_$cshowsPrec
                       @ Language.PureScript.Names.ModuleName
                       Language.PureScript.Names.$fShowModuleName
                       Language.PureScript.Externs.$fShowExternsDeclaration2
                       ww3
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.CString.unpackAppendCString#
                       Language.PureScript.Externs.$fShowExternsImport5
                       (GHC.CString.unpackAppendCString#
                          Language.PureScript.Externs.$fShowExternsImport4
                          (Language.PureScript.Names.$w$cshowsPrec
                             0#
                             ww1
                             (GHC.Base.++
                                @ GHC.Types.Char
                                GHC.Show.showCommaSpace1
                                (GHC.CString.unpackAppendCString#
                                   Language.PureScript.Externs.$fShowExternsImport3
                                   (Language.PureScript.AST.Declarations.$fShowImportDeclarationType_$cshowsPrec
                                      Language.PureScript.Externs.$fShowExternsDeclaration2
                                      ww2
                                      (GHC.Base.++
                                         @ GHC.Types.Char
                                         GHC.Show.showCommaSpace1
                                         (GHC.CString.unpackAppendCString#
                                            Language.PureScript.Externs.$fShowExternsImport2
                                            (f6
                                               (GHC.CString.unpackAppendCString#
                                                  Language.PureScript.Externs.$fShowExternsFixity2
                                                  x)))))))))
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT -> p
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x)) }) -}
b60fa29c849eeff78de728eb194729c4
  $w$cshowsPrec4 ::
    GHC.Prim.Int#
    -> Language.PureScript.AST.Operators.Associativity
    -> Language.PureScript.AST.Operators.Precedence
    -> Language.PureScript.Names.OpName
         'Language.PureScript.Names.TypeOpName
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName)
    -> GHC.Show.ShowS
  {- Arity: 5, Strictness: <S,U><L,U><L,U><L,U(U,U,U)><L,1*U(1*U,U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Language.PureScript.AST.Operators.Associativity)
                   (ww2 :: Language.PureScript.AST.Operators.Precedence)
                   (ww3 :: Language.PureScript.Names.OpName
                             'Language.PureScript.Names.TypeOpName)
                   (ww4 :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.TypeName)) ->
                 let {
                   f6 :: GHC.Base.String -> GHC.Base.String
                   = case ww4 of ww5 { Language.PureScript.Names.Qualified ww6 ww7 ->
                     Language.PureScript.Names.$w$cshowsPrec4
                       @ (Language.PureScript.Names.ProperName
                            'Language.PureScript.Names.TypeName)
                       (Language.PureScript.Names.$fShowProperName
                          @ 'Language.PureScript.Names.TypeName)
                       0#
                       ww6
                       ww7 }
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.CString.unpackAppendCString#
                       Language.PureScript.Externs.$fShowExternsTypeFixity6
                       (GHC.CString.unpackAppendCString#
                          Language.PureScript.Externs.$fShowExternsTypeFixity5
                          (Language.PureScript.AST.Operators.$w$cshowsPrec
                             ww1
                             (GHC.Base.++
                                @ GHC.Types.Char
                                GHC.Show.showCommaSpace1
                                (GHC.CString.unpackAppendCString#
                                   Language.PureScript.Externs.$fShowExternsTypeFixity4
                                   (case GHC.Show.$w$cshowsPrec4
                                           0#
                                           ww2
                                           (GHC.Base.++
                                              @ GHC.Types.Char
                                              GHC.Show.showCommaSpace1
                                              (GHC.CString.unpackAppendCString#
                                                 Language.PureScript.Externs.$fShowExternsTypeFixity3
                                                 (Language.PureScript.Names.$w$cshowsPrec3
                                                    @ 'Language.PureScript.Names.TypeOpName
                                                    0#
                                                    ww3
                                                    (GHC.Base.++
                                                       @ GHC.Types.Char
                                                       GHC.Show.showCommaSpace1
                                                       (GHC.CString.unpackAppendCString#
                                                          Language.PureScript.Externs.$fShowExternsTypeFixity2
                                                          (f6
                                                             (GHC.CString.unpackAppendCString#
                                                                Language.PureScript.Externs.$fShowExternsFixity2
                                                                x))))))) of ww5 { (#,#) ww6 ww7 ->
                                    GHC.Types.: @ GHC.Types.Char ww6 ww7 })))))
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT -> p
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x)) }) -}
a85c587185442d5c7801ddc62e8edadc
  $w$ctoEncoding ::
    Data.Text.Internal.Text
    -> Language.PureScript.Names.ModuleName
    -> [Language.PureScript.AST.Declarations.DeclarationRef]
    -> [Language.PureScript.Externs.ExternsImport]
    -> [Language.PureScript.Externs.ExternsFixity]
    -> [Language.PureScript.Externs.ExternsTypeFixity]
    -> [Language.PureScript.Externs.ExternsDeclaration]
    -> Language.PureScript.AST.SourcePos.SourceSpan
    -> forall r.
       Data.ByteString.Builder.Internal.BuildStep r
       -> Data.ByteString.Builder.Internal.BuildStep r
  {- Arity: 8,
     Strictness: <L,U(U,U,U)><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U(1*U,1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)))> -}
3c539c0aab49b76c78d56da0af7d5d24
  $w$ctoEncoding1 ::
    Language.PureScript.AST.Operators.Associativity
    -> Language.PureScript.AST.Operators.Precedence
    -> Language.PureScript.Names.OpName
         'Language.PureScript.Names.ValueOpName
    -> Language.PureScript.Names.Qualified
         (Data.Either.Either
            Language.PureScript.Names.Ident
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ConstructorName))
    -> forall r.
       Data.ByteString.Builder.Internal.BuildStep r
       -> Data.ByteString.Builder.Internal.BuildStep r
  {- Arity: 4,
     Strictness: <L,1*U><L,1*U><L,1*U(U,U,U)><L,1*U(1*U,U)> -}
8d1fc87752d02af18d050073b5c5599f
  $w$ctoEncoding2 ::
    Language.PureScript.Names.ModuleName
    -> Language.PureScript.AST.Declarations.ImportDeclarationType
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> forall r.
       Data.ByteString.Builder.Internal.BuildStep r
       -> Data.ByteString.Builder.Internal.BuildStep r
  {- Arity: 3, Strictness: <L,1*U><L,1*U><L,1*U> -}
3fc16fc8f5ff77e22d26c6e8e89fc57e
  $w$ctoEncoding3 ::
    Language.PureScript.AST.Operators.Associativity
    -> Language.PureScript.AST.Operators.Precedence
    -> Language.PureScript.Names.OpName
         'Language.PureScript.Names.TypeOpName
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName)
    -> forall r.
       Data.ByteString.Builder.Internal.BuildStep r
       -> Data.ByteString.Builder.Internal.BuildStep r
  {- Arity: 4,
     Strictness: <L,1*U><L,1*U><L,1*U(U,U,U)><L,1*U(1*U,U)> -}
45a26a6f5854665222c379466681ba1c
  $w$ctoJSON ::
    Language.PureScript.Externs.ExternsDeclaration
    -> (# Data.Aeson.Types.Internal.Object #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
b495e637c9e9f99b0cda7811b79180e4
  $w$ctoJSON1 ::
    Data.Text.Internal.Text
    -> Language.PureScript.Names.ModuleName
    -> [Language.PureScript.AST.Declarations.DeclarationRef]
    -> [Language.PureScript.Externs.ExternsImport]
    -> [Language.PureScript.Externs.ExternsFixity]
    -> [Language.PureScript.Externs.ExternsTypeFixity]
    -> [Language.PureScript.Externs.ExternsDeclaration]
    -> Language.PureScript.AST.SourcePos.SourceSpan
    -> (# Data.Aeson.Types.Internal.Object #)
  {- Arity: 8,
     Strictness: <L,U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U(1*U,1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U)))>,
     Inline: [0] -}
3bedbb6e4cd921f2d7d23e03fb709df8
  $w$ctoJSON2 ::
    Language.PureScript.AST.Operators.Associativity
    -> Language.PureScript.AST.Operators.Precedence
    -> Language.PureScript.Names.OpName
         'Language.PureScript.Names.ValueOpName
    -> Language.PureScript.Names.Qualified
         (Data.Either.Either
            Language.PureScript.Names.Ident
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ConstructorName))
    -> (# Data.Aeson.Types.Internal.Object #)
  {- Arity: 4, Strictness: <L,1*U><L,1*U><L,U><L,1*U(1*U,U)>,
     Inline: [0],
     Unfolding: (\ (ww :: Language.PureScript.AST.Operators.Associativity)
                   (ww1 :: Language.PureScript.AST.Operators.Precedence)
                   (ww2 :: Language.PureScript.Names.OpName
                             'Language.PureScript.Names.ValueOpName)
                   (ww3 :: Language.PureScript.Names.Qualified
                             (Data.Either.Either
                                Language.PureScript.Names.Ident
                                (Language.PureScript.Names.ProperName
                                   'Language.PureScript.Names.ConstructorName))) ->
                 case Data.Aeson.Types.ToJSON.$fFromPairsValueDList_go
                        (GHC.Types.:
                           @ Data.Aeson.Types.Internal.Pair
                           (Language.PureScript.Externs.$fToJSONExternsFixity7,
                            Language.PureScript.AST.Operators.$fToJSONAssociativity_$ctoJSON
                              ww)
                           (GHC.Types.:
                              @ Data.Aeson.Types.Internal.Pair
                              (Language.PureScript.Externs.$fToJSONExternsFixity5,
                               case ww1 of dt { DEFAULT ->
                               Data.Aeson.Types.Internal.Number
                                 (Data.Scientific.Scientific dt 0#) })
                              (GHC.Types.:
                                 @ Data.Aeson.Types.Internal.Pair
                                 (Language.PureScript.Externs.$fToJSONExternsFixity3,
                                  Data.Aeson.Types.Internal.$WString
                                    ww2
                                      `cast`
                                    (Language.PureScript.Names.N:OpName[0]
                                         <'Language.PureScript.Names.ValueOpName>_P))
                                 (GHC.Types.:
                                    @ Data.Aeson.Types.Internal.Pair
                                    (Language.PureScript.Externs.$fToJSONExternsFixity1,
                                     case ww3 of ww4 { Language.PureScript.Names.Qualified ww5 ww6 ->
                                     case Language.PureScript.Names.$w$ctoJSON1
                                            @ (Data.Either.Either
                                                 Language.PureScript.Names.Ident
                                                 (Language.PureScript.Names.ProperName
                                                    'Language.PureScript.Names.ConstructorName))
                                            Language.PureScript.Externs.$fToJSONExternsFixity_$s$fToJSONEither
                                            ww5
                                            ww6 of ww7 { Unit# ww8 ->
                                     Data.Aeson.Types.Internal.Array ww8 } })
                                    (GHC.Types.[] @ Data.Aeson.Types.Internal.Pair)))))
                        (Data.HashMap.Base.Empty
                           @ Data.Text.Internal.Text
                           @ Data.Aeson.Types.Internal.Value) of ww4 { Data.Aeson.Types.Internal.Object ww5 ->
                 (# ww5 #) }) -}
ca539b8e577bfe3e0bf9b51bbe1302cc
  $w$ctoJSON3 ::
    Language.PureScript.Names.ModuleName
    -> Language.PureScript.AST.Declarations.ImportDeclarationType
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> (# Data.Aeson.Types.Internal.Object #)
  {- Arity: 3, Strictness: <L,1*U><L,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: Language.PureScript.Names.ModuleName)
                   (ww1 :: Language.PureScript.AST.Declarations.ImportDeclarationType)
                   (ww2 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName) ->
                 case Data.Aeson.Types.ToJSON.$fFromPairsValueDList_go
                        (GHC.Types.:
                           @ Data.Aeson.Types.Internal.Pair
                           (Language.PureScript.Externs.$fToJSONExternsImport7,
                            Language.PureScript.Names.$fToJSONModuleName_$ctoJSON ww)
                           (GHC.Types.:
                              @ Data.Aeson.Types.Internal.Pair
                              (Language.PureScript.Externs.$fToJSONExternsImport4,
                               Language.PureScript.AST.Declarations.$fToJSONImportDeclarationType_$ctoJSON
                                 ww1)
                              (GHC.Types.:
                                 @ Data.Aeson.Types.Internal.Pair
                                 (Language.PureScript.Externs.$fToJSONExternsImport1,
                                  case ww2 of wild {
                                    GHC.Base.Nothing -> Data.Aeson.Types.Internal.Null
                                    GHC.Base.Just a10
                                    -> Language.PureScript.Names.$fToJSONModuleName_$ctoJSON a10 })
                                 (GHC.Types.[] @ Data.Aeson.Types.Internal.Pair))))
                        (Data.HashMap.Base.Empty
                           @ Data.Text.Internal.Text
                           @ Data.Aeson.Types.Internal.Value) of ww3 { Data.Aeson.Types.Internal.Object ww4 ->
                 (# ww4 #) }) -}
5d9fe07a7466338584dd611724127160
  $w$ctoJSON4 ::
    Language.PureScript.AST.Operators.Associativity
    -> Language.PureScript.AST.Operators.Precedence
    -> Language.PureScript.Names.OpName
         'Language.PureScript.Names.TypeOpName
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName)
    -> (# Data.Aeson.Types.Internal.Object #)
  {- Arity: 4, Strictness: <L,1*U><L,1*U><L,U><L,1*U(1*U,U)>,
     Inline: [0],
     Unfolding: (\ (ww :: Language.PureScript.AST.Operators.Associativity)
                   (ww1 :: Language.PureScript.AST.Operators.Precedence)
                   (ww2 :: Language.PureScript.Names.OpName
                             'Language.PureScript.Names.TypeOpName)
                   (ww3 :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.TypeName)) ->
                 case Data.Aeson.Types.ToJSON.$fFromPairsValueDList_go
                        (GHC.Types.:
                           @ Data.Aeson.Types.Internal.Pair
                           (Language.PureScript.Externs.$fToJSONExternsTypeFixity7,
                            Language.PureScript.AST.Operators.$fToJSONAssociativity_$ctoJSON
                              ww)
                           (GHC.Types.:
                              @ Data.Aeson.Types.Internal.Pair
                              (Language.PureScript.Externs.$fToJSONExternsTypeFixity5,
                               case ww1 of dt { DEFAULT ->
                               Data.Aeson.Types.Internal.Number
                                 (Data.Scientific.Scientific dt 0#) })
                              (GHC.Types.:
                                 @ Data.Aeson.Types.Internal.Pair
                                 (Language.PureScript.Externs.$fToJSONExternsTypeFixity3,
                                  Data.Aeson.Types.Internal.$WString
                                    ww2
                                      `cast`
                                    (Language.PureScript.Names.N:OpName[0]
                                         <'Language.PureScript.Names.TypeOpName>_P))
                                 (GHC.Types.:
                                    @ Data.Aeson.Types.Internal.Pair
                                    (Language.PureScript.Externs.$fToJSONExternsTypeFixity1,
                                     case ww3 of ww4 { Language.PureScript.Names.Qualified ww5 ww6 ->
                                     case Language.PureScript.Names.$w$ctoJSON1
                                            @ (Language.PureScript.Names.ProperName
                                                 'Language.PureScript.Names.TypeName)
                                            (Language.PureScript.Names.$fToJSONProperName
                                               @ 'Language.PureScript.Names.TypeName)
                                            ww5
                                            ww6 of ww7 { Unit# ww8 ->
                                     Data.Aeson.Types.Internal.Array ww8 } })
                                    (GHC.Types.[] @ Data.Aeson.Types.Internal.Pair)))))
                        (Data.HashMap.Base.Empty
                           @ Data.Text.Internal.Text
                           @ Data.Aeson.Types.Internal.Value) of ww4 { Data.Aeson.Types.Internal.Object ww5 ->
                 (# ww5 #) }) -}
fe5f9718264f3e665b5a4a4a5c6db50d
  $w$sgo1 ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName)
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName
    -> a1
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.TypeName))
         a1
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.TypeName))
         a1
  {- Arity: 5, Strictness: <L,U><L,U><L,U(U,U,U)><L,U><S,1*U>,
     Inline: [0] -}
b5e44cf57991698d1888d0ba1bd027c7
  $w$sgo13 ::
    (GHC.Base.Maybe a1 -> GHC.Base.Maybe a1)
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName))
         a1
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName))
         a1
  {- Arity: 4, Strictness: <C(S),1*C1(U)><L,U><L,U(U,U,U)><S,1*U>,
     Inline: [0] -}
753369cf39eee915ff1a889e7175e058
  $w$sgo3 ::
    Language.PureScript.Names.Qualified Language.PureScript.Names.Ident
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.Ident
    -> a1
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            Language.PureScript.Names.Ident)
         a1
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            Language.PureScript.Names.Ident)
         a1
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,U><S,1*U>,
     Inline: [0] -}
345305631aa82268698630f0e637631d
  $wapplyExternsFileToEnvironment ::
    Language.PureScript.Names.ModuleName
    -> [Language.PureScript.Externs.ExternsDeclaration]
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            Language.PureScript.Names.Ident)
         (Language.PureScript.Types.Type,
          Language.PureScript.Environment.NameKind,
          Language.PureScript.Environment.NameVisibility)
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.TypeName))
         (Language.PureScript.Kinds.Kind,
          Language.PureScript.Environment.TypeKind)
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ConstructorName))
         (Language.PureScript.Environment.DataDeclType,
          Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName,
          Language.PureScript.Types.Type, [Language.PureScript.Names.Ident])
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.TypeName))
         ([(Data.Text.Internal.Text,
            GHC.Base.Maybe Language.PureScript.Kinds.Kind)],
          Language.PureScript.Types.Type)
    -> Data.Map.Internal.Map
         (GHC.Base.Maybe Language.PureScript.Names.ModuleName)
         (Data.Map.Internal.Map
            (Language.PureScript.Names.Qualified
               (Language.PureScript.Names.ProperName
                  'Language.PureScript.Names.ClassName))
            (Data.Map.Internal.Map
               (Language.PureScript.Names.Qualified
                  Language.PureScript.Names.Ident)
               Language.PureScript.TypeClassDictionaries.NamedDict))
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName))
         Language.PureScript.Environment.TypeClassData
    -> Data.Set.Internal.Set
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.KindName))
    -> (# Data.Map.Internal.Map
            (Language.PureScript.Names.Qualified
               Language.PureScript.Names.Ident)
            (Language.PureScript.Types.Type,
             Language.PureScript.Environment.NameKind,
             Language.PureScript.Environment.NameVisibility),
          Data.Map.Internal.Map
            (Language.PureScript.Names.Qualified
               (Language.PureScript.Names.ProperName
                  'Language.PureScript.Names.TypeName))
            (Language.PureScript.Kinds.Kind,
             Language.PureScript.Environment.TypeKind),
          Data.Map.Internal.Map
            (Language.PureScript.Names.Qualified
               (Language.PureScript.Names.ProperName
                  'Language.PureScript.Names.ConstructorName))
            (Language.PureScript.Environment.DataDeclType,
             Language.PureScript.Names.ProperName
               'Language.PureScript.Names.TypeName,
             Language.PureScript.Types.Type, [Language.PureScript.Names.Ident]),
          Data.Map.Internal.Map
            (Language.PureScript.Names.Qualified
               (Language.PureScript.Names.ProperName
                  'Language.PureScript.Names.TypeName))
            ([(Data.Text.Internal.Text,
               GHC.Base.Maybe Language.PureScript.Kinds.Kind)],
             Language.PureScript.Types.Type),
          Data.Map.Internal.Map
            (GHC.Base.Maybe Language.PureScript.Names.ModuleName)
            (Data.Map.Internal.Map
               (Language.PureScript.Names.Qualified
                  (Language.PureScript.Names.ProperName
                     'Language.PureScript.Names.ClassName))
               (Data.Map.Internal.Map
                  (Language.PureScript.Names.Qualified
                     Language.PureScript.Names.Ident)
                  Language.PureScript.TypeClassDictionaries.NamedDict)),
          Data.Map.Internal.Map
            (Language.PureScript.Names.Qualified
               (Language.PureScript.Names.ProperName
                  'Language.PureScript.Names.ClassName))
            Language.PureScript.Environment.TypeClassData,
          Data.Set.Internal.Set
            (Language.PureScript.Names.Qualified
               (Language.PureScript.Names.ProperName
                  'Language.PureScript.Names.KindName)) #)
  {- Arity: 9,
     Strictness: <L,U><S,1*U><L,U><L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0] -}
c907fe0e46dc836619303017149606b3
  $wmoduleToExternsFile ::
    Language.PureScript.AST.SourcePos.SourceSpan
    -> Language.PureScript.Names.ModuleName
    -> [Language.PureScript.AST.Declarations.Declaration]
    -> GHC.Base.Maybe
         [Language.PureScript.AST.Declarations.DeclarationRef]
    -> Language.PureScript.Environment.Environment
    -> (# Data.Text.Internal.Text,
          Language.PureScript.Names.ModuleName,
          [Language.PureScript.AST.Declarations.DeclarationRef],
          [Language.PureScript.Externs.ExternsImport],
          [Language.PureScript.Externs.ExternsFixity],
          [Language.PureScript.Externs.ExternsTypeFixity],
          [Language.PureScript.Externs.ExternsDeclaration],
          Language.PureScript.AST.SourcePos.SourceSpan #)
  {- Arity: 5,
     Strictness: <L,U><L,U><L,U><S,1*U><L,U(1*U,1*U,1*U,1*U,1*U,1*U,1*U)>,
     Inline: [0] -}
e7570e795beb03196f1ba46b0c387f8b
  $wpoly_go13 ::
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.TypeName))
         a
    -> GHC.Base.Maybe a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U><L,1*U(U,U,U)><S,1*U>, Inline: [0] -}
b226bb5672b0513305690ac6e94c2982
  $wpoly_go2 ::
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.Ident
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            Language.PureScript.Names.Ident)
         a
    -> GHC.Base.Maybe a
  {- Arity: 3, HasNoCafRefs, Strictness: <L,1*U><L,U><S,1*U>,
     Inline: [0] -}
45a26a6f5854665222c379466681ba1c
  data ExternsDeclaration
    = EDType {edTypeName :: Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.TypeName,
              edTypeKind :: Language.PureScript.Kinds.Kind,
              edTypeDeclarationKind :: Language.PureScript.Environment.TypeKind}
    | EDTypeSynonym {edTypeSynonymName :: Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.TypeName,
                     edTypeSynonymArguments :: [(Data.Text.Internal.Text,
                                                 GHC.Base.Maybe Language.PureScript.Kinds.Kind)],
                     edTypeSynonymType :: Language.PureScript.Types.Type}
    | EDDataConstructor {edDataCtorName :: Language.PureScript.Names.ProperName
                                             'Language.PureScript.Names.ConstructorName,
                         edDataCtorOrigin :: Language.PureScript.Environment.DataDeclType,
                         edDataCtorTypeCtor :: Language.PureScript.Names.ProperName
                                                 'Language.PureScript.Names.TypeName,
                         edDataCtorType :: Language.PureScript.Types.Type,
                         edDataCtorFields :: [Language.PureScript.Names.Ident]}
    | EDValue {edValueName :: Language.PureScript.Names.Ident,
               edValueType :: Language.PureScript.Types.Type}
    | EDClass {edClassName :: Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ClassName,
               edClassTypeArguments :: [(Data.Text.Internal.Text,
                                         GHC.Base.Maybe Language.PureScript.Kinds.Kind)],
               edClassMembers :: [(Language.PureScript.Names.Ident,
                                   Language.PureScript.Types.Type)],
               edClassConstraints :: [Language.PureScript.Types.Constraint],
               edFunctionalDependencies :: [Language.PureScript.Environment.FunctionalDependency]}
    | EDInstance {edInstanceClassName :: Language.PureScript.Names.Qualified
                                           (Language.PureScript.Names.ProperName
                                              'Language.PureScript.Names.ClassName),
                  edInstanceName :: Language.PureScript.Names.Ident,
                  edInstanceTypes :: [Language.PureScript.Types.Type],
                  edInstanceConstraints :: GHC.Base.Maybe
                                             [Language.PureScript.Types.Constraint],
                  edInstanceChain :: [Language.PureScript.Names.Qualified
                                        Language.PureScript.Names.Ident],
                  edInstanceChainIndex :: GHC.Integer.Type.Integer}
    | EDKind {edKindName :: Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.KindName}
b2e76f24ecba17bf3b946e078a8414b6
  data ExternsFile
    = ExternsFile {efVersion :: Data.Text.Internal.Text,
                   efModuleName :: Language.PureScript.Names.ModuleName,
                   efExports :: [Language.PureScript.AST.Declarations.DeclarationRef],
                   efImports :: [Language.PureScript.Externs.ExternsImport],
                   efFixities :: [Language.PureScript.Externs.ExternsFixity],
                   efTypeFixities :: [Language.PureScript.Externs.ExternsTypeFixity],
                   efDeclarations :: [Language.PureScript.Externs.ExternsDeclaration],
                   efSourceSpan :: Language.PureScript.AST.SourcePos.SourceSpan}
e2b9825419a009927ef7bc8fe43a5592
  data ExternsFixity
    = ExternsFixity {efAssociativity :: Language.PureScript.AST.Operators.Associativity,
                     efPrecedence :: Language.PureScript.AST.Operators.Precedence,
                     efOperator :: Language.PureScript.Names.OpName
                                     'Language.PureScript.Names.ValueOpName,
                     efAlias :: Language.PureScript.Names.Qualified
                                  (Data.Either.Either
                                     Language.PureScript.Names.Ident
                                     (Language.PureScript.Names.ProperName
                                        'Language.PureScript.Names.ConstructorName))}
cac932cac83fee4afe9df4f645c23840
  data ExternsImport
    = ExternsImport {eiModule :: Language.PureScript.Names.ModuleName,
                     eiImportType :: Language.PureScript.AST.Declarations.ImportDeclarationType,
                     eiImportedAs :: GHC.Base.Maybe
                                       Language.PureScript.Names.ModuleName}
550ce16782e073a4c465189b0fa52bb0
  data ExternsTypeFixity
    = ExternsTypeFixity {efTypeAssociativity :: Language.PureScript.AST.Operators.Associativity,
                         efTypePrecedence :: Language.PureScript.AST.Operators.Precedence,
                         efTypeOperator :: Language.PureScript.Names.OpName
                                             'Language.PureScript.Names.TypeOpName,
                         efTypeAlias :: Language.PureScript.Names.Qualified
                                          (Language.PureScript.Names.ProperName
                                             'Language.PureScript.Names.TypeName)}
c56361d10b2931793da8568bf3fc9c13
  applyExternsFileToEnvironment ::
    Language.PureScript.Externs.ExternsFile
    -> Language.PureScript.Environment.Environment
    -> Language.PureScript.Environment.Environment
  {- Arity: 2,
     Strictness: <S(LLLLLLSL),1*U(A,U,A,A,A,A,1*U,A)><S,1*U(U,U,U,U,U,U,U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Externs.ExternsFile)
                   (w1 :: Language.PureScript.Environment.Environment) ->
                 case w of ww { Language.PureScript.Externs.ExternsFile ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 case w1 of ww9 { Language.PureScript.Environment.Environment ww10 ww11 ww12 ww13 ww14 ww15 ww16 ->
                 case Language.PureScript.Externs.$wapplyExternsFileToEnvironment
                        ww2
                        ww7
                        ww10
                        ww11
                        ww12
                        ww13
                        ww14
                        ww15
                        ww16 of ww17 { (#,,,,,,#) ww18 ww19 ww20 ww21 ww22 ww23 ww24 ->
                 Language.PureScript.Environment.Environment
                   ww18
                   ww19
                   ww20
                   ww21
                   ww22
                   ww23
                   ww24 } } }) -}
45a26a6f5854665222c379466681ba1c
  edClassConstraints ::
    Language.PureScript.Externs.ExternsDeclaration
    -> [Language.PureScript.Types.Constraint]
  RecSel Left Language.PureScript.Externs.ExternsDeclaration
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Externs.ExternsDeclaration) ->
                 case ds of wild {
                   DEFAULT -> Language.PureScript.Externs.edClassConstraints1
                   Language.PureScript.Externs.EDClass ds1 ds2 ds3 ds4 ds5
                   -> ds4 }) -}
6363d80db264d8429019db6f29f3c7a0
  edClassConstraints1 :: [Language.PureScript.Types.Constraint]
  {- Strictness: x -}
45a26a6f5854665222c379466681ba1c
  edClassMembers ::
    Language.PureScript.Externs.ExternsDeclaration
    -> [(Language.PureScript.Names.Ident,
         Language.PureScript.Types.Type)]
  RecSel Left Language.PureScript.Externs.ExternsDeclaration
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Externs.ExternsDeclaration) ->
                 case ds of wild {
                   DEFAULT -> Language.PureScript.Externs.edClassMembers1
                   Language.PureScript.Externs.EDClass ds1 ds2 ds3 ds4 ds5
                   -> ds3 }) -}
9c582559cb345b938097f5e24c6efedf
  edClassMembers1 ::
    [(Language.PureScript.Names.Ident, Language.PureScript.Types.Type)]
  {- Strictness: x -}
45a26a6f5854665222c379466681ba1c
  edClassName ::
    Language.PureScript.Externs.ExternsDeclaration
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
  RecSel Left Language.PureScript.Externs.ExternsDeclaration
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Externs.ExternsDeclaration) ->
                 case ds of wild {
                   DEFAULT -> Language.PureScript.Externs.edClassName1
                   Language.PureScript.Externs.EDClass ds1 ds2 ds3 ds4 ds5
                   -> ds1 }) -}
e02a5a768784172e44b9f3a7d73f1fa0
  edClassName1 ::
    Language.PureScript.Names.ProperName
      'Language.PureScript.Names.ClassName
  {- Strictness: x -}
45a26a6f5854665222c379466681ba1c
  edClassTypeArguments ::
    Language.PureScript.Externs.ExternsDeclaration
    -> [(Data.Text.Internal.Text,
         GHC.Base.Maybe Language.PureScript.Kinds.Kind)]
  RecSel Left Language.PureScript.Externs.ExternsDeclaration
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Externs.ExternsDeclaration) ->
                 case ds of wild {
                   DEFAULT -> Language.PureScript.Externs.edClassTypeArguments1
                   Language.PureScript.Externs.EDClass ds1 ds2 ds3 ds4 ds5
                   -> ds2 }) -}
cfc8587d3b9099a2bbeee13a5bf63a34
  edClassTypeArguments1 ::
    [(Data.Text.Internal.Text,
      GHC.Base.Maybe Language.PureScript.Kinds.Kind)]
  {- Strictness: x -}
45a26a6f5854665222c379466681ba1c
  edDataCtorFields ::
    Language.PureScript.Externs.ExternsDeclaration
    -> [Language.PureScript.Names.Ident]
  RecSel Left Language.PureScript.Externs.ExternsDeclaration
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Externs.ExternsDeclaration) ->
                 case ds of wild {
                   DEFAULT -> Language.PureScript.Externs.edDataCtorFields1
                   Language.PureScript.Externs.EDDataConstructor ds1 ds2 ds3 ds4 ds5
                   -> ds5 }) -}
2dc10ee6e97595355d78f0b055e332fc
  edDataCtorFields1 :: [Language.PureScript.Names.Ident]
  {- Strictness: x -}
45a26a6f5854665222c379466681ba1c
  edDataCtorName ::
    Language.PureScript.Externs.ExternsDeclaration
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ConstructorName
  RecSel Left Language.PureScript.Externs.ExternsDeclaration
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Externs.ExternsDeclaration) ->
                 case ds of wild {
                   DEFAULT -> Language.PureScript.Externs.edDataCtorName1
                   Language.PureScript.Externs.EDDataConstructor ds1 ds2 ds3 ds4 ds5
                   -> ds1 }) -}
a46ee77ee97e2fded2ac8c3d156a22d9
  edDataCtorName1 ::
    Language.PureScript.Names.ProperName
      'Language.PureScript.Names.ConstructorName
  {- Strictness: x -}
45a26a6f5854665222c379466681ba1c
  edDataCtorOrigin ::
    Language.PureScript.Externs.ExternsDeclaration
    -> Language.PureScript.Environment.DataDeclType
  RecSel Left Language.PureScript.Externs.ExternsDeclaration
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Externs.ExternsDeclaration) ->
                 case ds of wild {
                   DEFAULT -> Language.PureScript.Externs.edDataCtorOrigin1
                   Language.PureScript.Externs.EDDataConstructor ds1 ds2 ds3 ds4 ds5
                   -> ds2 }) -}
dfb1c3762007ff2d4d808b95a8bd4c0f
  edDataCtorOrigin1 :: Language.PureScript.Environment.DataDeclType
  {- Strictness: x -}
45a26a6f5854665222c379466681ba1c
  edDataCtorType ::
    Language.PureScript.Externs.ExternsDeclaration
    -> Language.PureScript.Types.Type
  RecSel Left Language.PureScript.Externs.ExternsDeclaration
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Externs.ExternsDeclaration) ->
                 case ds of wild {
                   DEFAULT -> Language.PureScript.Externs.edDataCtorType1
                   Language.PureScript.Externs.EDDataConstructor ds1 ds2 ds3 ds4 ds5
                   -> ds4 }) -}
3552be5d420e9c0565d3fc90892e9bd2
  edDataCtorType1 :: Language.PureScript.Types.Type
  {- Strictness: x -}
45a26a6f5854665222c379466681ba1c
  edDataCtorTypeCtor ::
    Language.PureScript.Externs.ExternsDeclaration
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName
  RecSel Left Language.PureScript.Externs.ExternsDeclaration
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Externs.ExternsDeclaration) ->
                 case ds of wild {
                   DEFAULT -> Language.PureScript.Externs.edDataCtorTypeCtor1
                   Language.PureScript.Externs.EDDataConstructor ds1 ds2 ds3 ds4 ds5
                   -> ds3 }) -}
d2ae17548a8a95708cc1f91349df19b2
  edDataCtorTypeCtor1 ::
    Language.PureScript.Names.ProperName
      'Language.PureScript.Names.TypeName
  {- Strictness: x -}
45a26a6f5854665222c379466681ba1c
  edFunctionalDependencies ::
    Language.PureScript.Externs.ExternsDeclaration
    -> [Language.PureScript.Environment.FunctionalDependency]
  RecSel Left Language.PureScript.Externs.ExternsDeclaration
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Externs.ExternsDeclaration) ->
                 case ds of wild {
                   DEFAULT -> Language.PureScript.Externs.edFunctionalDependencies1
                   Language.PureScript.Externs.EDClass ds1 ds2 ds3 ds4 ds5
                   -> ds5 }) -}
6fbb0b011a4bc55ab9a45c2f57214aa9
  edFunctionalDependencies1 ::
    [Language.PureScript.Environment.FunctionalDependency]
  {- Strictness: x -}
45a26a6f5854665222c379466681ba1c
  edInstanceChain ::
    Language.PureScript.Externs.ExternsDeclaration
    -> [Language.PureScript.Names.Qualified
          Language.PureScript.Names.Ident]
  RecSel Left Language.PureScript.Externs.ExternsDeclaration
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Externs.ExternsDeclaration) ->
                 case ds of wild {
                   DEFAULT -> Language.PureScript.Externs.edInstanceChain1
                   Language.PureScript.Externs.EDInstance ds1 ds2 ds3 ds4 ds5 ds6
                   -> ds5 }) -}
a3ae349ec4cbc0725957dead7c557851
  edInstanceChain1 ::
    [Language.PureScript.Names.Qualified
       Language.PureScript.Names.Ident]
  {- Strictness: x -}
45a26a6f5854665222c379466681ba1c
  edInstanceChainIndex ::
    Language.PureScript.Externs.ExternsDeclaration
    -> GHC.Integer.Type.Integer
  RecSel Left Language.PureScript.Externs.ExternsDeclaration
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Externs.ExternsDeclaration) ->
                 case ds of wild {
                   DEFAULT -> Language.PureScript.Externs.edInstanceChainIndex1
                   Language.PureScript.Externs.EDInstance ds1 ds2 ds3 ds4 ds5 ds6
                   -> ds6 }) -}
aba3f20578bf8aaada39c68b9301f889
  edInstanceChainIndex1 :: GHC.Integer.Type.Integer
  {- Strictness: x -}
45a26a6f5854665222c379466681ba1c
  edInstanceClassName ::
    Language.PureScript.Externs.ExternsDeclaration
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
  RecSel Left Language.PureScript.Externs.ExternsDeclaration
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Externs.ExternsDeclaration) ->
                 case ds of wild {
                   DEFAULT -> Language.PureScript.Externs.edInstanceClassName1
                   Language.PureScript.Externs.EDInstance ds1 ds2 ds3 ds4 ds5 ds6
                   -> ds1 }) -}
15af96cbf592442e97d9b0b9770e53a1
  edInstanceClassName1 ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
  {- Strictness: x -}
45a26a6f5854665222c379466681ba1c
  edInstanceConstraints ::
    Language.PureScript.Externs.ExternsDeclaration
    -> GHC.Base.Maybe [Language.PureScript.Types.Constraint]
  RecSel Left Language.PureScript.Externs.ExternsDeclaration
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Externs.ExternsDeclaration) ->
                 case ds of wild {
                   DEFAULT -> Language.PureScript.Externs.edInstanceConstraints1
                   Language.PureScript.Externs.EDInstance ds1 ds2 ds3 ds4 ds5 ds6
                   -> ds4 }) -}
8cb57129eebd6a78f73b36d5eae62378
  edInstanceConstraints1 ::
    GHC.Base.Maybe [Language.PureScript.Types.Constraint]
  {- Strictness: x -}
45a26a6f5854665222c379466681ba1c
  edInstanceName ::
    Language.PureScript.Externs.ExternsDeclaration
    -> Language.PureScript.Names.Ident
  RecSel Left Language.PureScript.Externs.ExternsDeclaration
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Externs.ExternsDeclaration) ->
                 case ds of wild {
                   DEFAULT -> Language.PureScript.Externs.edInstanceName1
                   Language.PureScript.Externs.EDInstance ds1 ds2 ds3 ds4 ds5 ds6
                   -> ds2 }) -}
471a771fa207d80668d43b26d613f3d7
  edInstanceName1 :: Language.PureScript.Names.Ident
  {- Strictness: x -}
45a26a6f5854665222c379466681ba1c
  edInstanceTypes ::
    Language.PureScript.Externs.ExternsDeclaration
    -> [Language.PureScript.Types.Type]
  RecSel Left Language.PureScript.Externs.ExternsDeclaration
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Externs.ExternsDeclaration) ->
                 case ds of wild {
                   DEFAULT -> Language.PureScript.Externs.edInstanceTypes1
                   Language.PureScript.Externs.EDInstance ds1 ds2 ds3 ds4 ds5 ds6
                   -> ds3 }) -}
a4f3e41e08adb3e6278f85996ff44795
  edInstanceTypes1 :: [Language.PureScript.Types.Type]
  {- Strictness: x -}
45a26a6f5854665222c379466681ba1c
  edKindName ::
    Language.PureScript.Externs.ExternsDeclaration
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.KindName
  RecSel Left Language.PureScript.Externs.ExternsDeclaration
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Externs.ExternsDeclaration) ->
                 case ds of wild {
                   DEFAULT -> Language.PureScript.Externs.edKindName1
                   Language.PureScript.Externs.EDKind ds1 -> ds1 }) -}
8737971c4e95962d316ae7a22fe55759
  edKindName1 ::
    Language.PureScript.Names.ProperName
      'Language.PureScript.Names.KindName
  {- Strictness: x -}
45a26a6f5854665222c379466681ba1c
  edTypeDeclarationKind ::
    Language.PureScript.Externs.ExternsDeclaration
    -> Language.PureScript.Environment.TypeKind
  RecSel Left Language.PureScript.Externs.ExternsDeclaration
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Externs.ExternsDeclaration) ->
                 case ds of wild {
                   DEFAULT -> Language.PureScript.Externs.edTypeDeclarationKind1
                   Language.PureScript.Externs.EDType ds1 ds2 ds3 -> ds3 }) -}
ee770a92ece75695c959fc5f1c6b2d78
  edTypeDeclarationKind1 :: Language.PureScript.Environment.TypeKind
  {- Strictness: x -}
45a26a6f5854665222c379466681ba1c
  edTypeKind ::
    Language.PureScript.Externs.ExternsDeclaration
    -> Language.PureScript.Kinds.Kind
  RecSel Left Language.PureScript.Externs.ExternsDeclaration
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Externs.ExternsDeclaration) ->
                 case ds of wild {
                   DEFAULT -> Language.PureScript.Externs.edTypeKind1
                   Language.PureScript.Externs.EDType ds1 ds2 ds3 -> ds2 }) -}
92044393d4118740d32a6211a3d708d2
  edTypeKind1 :: Language.PureScript.Kinds.Kind
  {- Strictness: x -}
45a26a6f5854665222c379466681ba1c
  edTypeName ::
    Language.PureScript.Externs.ExternsDeclaration
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName
  RecSel Left Language.PureScript.Externs.ExternsDeclaration
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Externs.ExternsDeclaration) ->
                 case ds of wild {
                   DEFAULT -> Language.PureScript.Externs.edTypeName1
                   Language.PureScript.Externs.EDType ds1 ds2 ds3 -> ds1 }) -}
a5357187c0662f2818772a0a38c6647e
  edTypeName1 ::
    Language.PureScript.Names.ProperName
      'Language.PureScript.Names.TypeName
  {- Strictness: x -}
45a26a6f5854665222c379466681ba1c
  edTypeSynonymArguments ::
    Language.PureScript.Externs.ExternsDeclaration
    -> [(Data.Text.Internal.Text,
         GHC.Base.Maybe Language.PureScript.Kinds.Kind)]
  RecSel Left Language.PureScript.Externs.ExternsDeclaration
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Externs.ExternsDeclaration) ->
                 case ds of wild {
                   DEFAULT -> Language.PureScript.Externs.edTypeSynonymArguments1
                   Language.PureScript.Externs.EDTypeSynonym ds1 ds2 ds3 -> ds2 }) -}
291996ee540ea43c19886a1e7444bc1e
  edTypeSynonymArguments1 ::
    [(Data.Text.Internal.Text,
      GHC.Base.Maybe Language.PureScript.Kinds.Kind)]
  {- Strictness: x -}
45a26a6f5854665222c379466681ba1c
  edTypeSynonymName ::
    Language.PureScript.Externs.ExternsDeclaration
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName
  RecSel Left Language.PureScript.Externs.ExternsDeclaration
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Externs.ExternsDeclaration) ->
                 case ds of wild {
                   DEFAULT -> Language.PureScript.Externs.edTypeSynonymName1
                   Language.PureScript.Externs.EDTypeSynonym ds1 ds2 ds3 -> ds1 }) -}
074ed9fb7ef83c1827866b43c62bf97c
  edTypeSynonymName1 ::
    Language.PureScript.Names.ProperName
      'Language.PureScript.Names.TypeName
  {- Strictness: x -}
45a26a6f5854665222c379466681ba1c
  edTypeSynonymType ::
    Language.PureScript.Externs.ExternsDeclaration
    -> Language.PureScript.Types.Type
  RecSel Left Language.PureScript.Externs.ExternsDeclaration
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Externs.ExternsDeclaration) ->
                 case ds of wild {
                   DEFAULT -> Language.PureScript.Externs.edTypeSynonymType1
                   Language.PureScript.Externs.EDTypeSynonym ds1 ds2 ds3 -> ds3 }) -}
aa6334ce7918c575d654e212097c26a0
  edTypeSynonymType1 :: Language.PureScript.Types.Type
  {- Strictness: x -}
45a26a6f5854665222c379466681ba1c
  edValueName ::
    Language.PureScript.Externs.ExternsDeclaration
    -> Language.PureScript.Names.Ident
  RecSel Left Language.PureScript.Externs.ExternsDeclaration
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Externs.ExternsDeclaration) ->
                 case ds of wild {
                   DEFAULT -> Language.PureScript.Externs.edValueName1
                   Language.PureScript.Externs.EDValue ds1 ds2 -> ds1 }) -}
3a25b57f2d9a660511b7ceff7d930f65
  edValueName1 :: Language.PureScript.Names.Ident
  {- Strictness: x -}
45a26a6f5854665222c379466681ba1c
  edValueType ::
    Language.PureScript.Externs.ExternsDeclaration
    -> Language.PureScript.Types.Type
  RecSel Left Language.PureScript.Externs.ExternsDeclaration
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Externs.ExternsDeclaration) ->
                 case ds of wild {
                   DEFAULT -> Language.PureScript.Externs.edValueType1
                   Language.PureScript.Externs.EDValue ds1 ds2 -> ds2 }) -}
273d143674db8f21ec7e8874a2ce14e7
  edValueType1 :: Language.PureScript.Types.Type
  {- Strictness: x -}
e2b9825419a009927ef7bc8fe43a5592
  efAlias ::
    Language.PureScript.Externs.ExternsFixity
    -> Language.PureScript.Names.Qualified
         (Data.Either.Either
            Language.PureScript.Names.Ident
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ConstructorName))
  RecSel Left Language.PureScript.Externs.ExternsFixity
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLS),1*U(A,A,A,1*U(U,U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Externs.ExternsFixity) ->
                 case ds of wild { Language.PureScript.Externs.ExternsFixity ds1 ds2 ds3 ds4 ->
                 ds4 }) -}
e2b9825419a009927ef7bc8fe43a5592
  efAssociativity ::
    Language.PureScript.Externs.ExternsFixity
    -> Language.PureScript.AST.Operators.Associativity
  RecSel Left Language.PureScript.Externs.ExternsFixity
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLLL),1*U(1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Externs.ExternsFixity) ->
                 case ds of wild { Language.PureScript.Externs.ExternsFixity ds1 ds2 ds3 ds4 ->
                 ds1 }) -}
b2e76f24ecba17bf3b946e078a8414b6
  efDeclarations ::
    Language.PureScript.Externs.ExternsFile
    -> [Language.PureScript.Externs.ExternsDeclaration]
  RecSel Left Language.PureScript.Externs.ExternsFile
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLSL),1*U(A,A,A,A,A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Externs.ExternsFile) ->
                 case ds of wild { Language.PureScript.Externs.ExternsFile ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                 ds7 }) -}
b2e76f24ecba17bf3b946e078a8414b6
  efExports ::
    Language.PureScript.Externs.ExternsFile
    -> [Language.PureScript.AST.Declarations.DeclarationRef]
  RecSel Left Language.PureScript.Externs.ExternsFile
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLLLLL),1*U(A,A,1*U,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Externs.ExternsFile) ->
                 case ds of wild { Language.PureScript.Externs.ExternsFile ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                 ds3 }) -}
b2e76f24ecba17bf3b946e078a8414b6
  efFixities ::
    Language.PureScript.Externs.ExternsFile
    -> [Language.PureScript.Externs.ExternsFixity]
  RecSel Left Language.PureScript.Externs.ExternsFile
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLSLLL),1*U(A,A,A,A,1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Externs.ExternsFile) ->
                 case ds of wild { Language.PureScript.Externs.ExternsFile ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                 ds5 }) -}
b2e76f24ecba17bf3b946e078a8414b6
  efImports ::
    Language.PureScript.Externs.ExternsFile
    -> [Language.PureScript.Externs.ExternsImport]
  RecSel Left Language.PureScript.Externs.ExternsFile
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSLLLL),1*U(A,A,A,1*U,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Externs.ExternsFile) ->
                 case ds of wild { Language.PureScript.Externs.ExternsFile ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                 ds4 }) -}
b2e76f24ecba17bf3b946e078a8414b6
  efModuleName ::
    Language.PureScript.Externs.ExternsFile
    -> Language.PureScript.Names.ModuleName
  RecSel Left Language.PureScript.Externs.ExternsFile
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLLLLL),1*U(A,1*U,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Externs.ExternsFile) ->
                 case ds of wild { Language.PureScript.Externs.ExternsFile ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                 ds2 }) -}
e2b9825419a009927ef7bc8fe43a5592
  efOperator ::
    Language.PureScript.Externs.ExternsFixity
    -> Language.PureScript.Names.OpName
         'Language.PureScript.Names.ValueOpName
  RecSel Left Language.PureScript.Externs.ExternsFixity
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSL),1*U(A,A,1*U(U,U,U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Externs.ExternsFixity) ->
                 case ds of wild { Language.PureScript.Externs.ExternsFixity ds1 ds2 ds3 ds4 ->
                 ds3 }) -}
e2b9825419a009927ef7bc8fe43a5592
  efPrecedence ::
    Language.PureScript.Externs.ExternsFixity
    -> Language.PureScript.AST.Operators.Precedence
  RecSel Left Language.PureScript.Externs.ExternsFixity
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSLL),1*U(A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Externs.ExternsFixity) ->
                 case ds of wild { Language.PureScript.Externs.ExternsFixity ds1 ds2 ds3 ds4 ->
                 ds2 }) -}
b2e76f24ecba17bf3b946e078a8414b6
  efSourceSpan ::
    Language.PureScript.Externs.ExternsFile
    -> Language.PureScript.AST.SourcePos.SourceSpan
  RecSel Left Language.PureScript.Externs.ExternsFile
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLS),1*U(A,A,A,A,A,A,A,1*U(U,U,U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Externs.ExternsFile) ->
                 case ds of wild { Language.PureScript.Externs.ExternsFile ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                 ds8 }) -}
550ce16782e073a4c465189b0fa52bb0
  efTypeAlias ::
    Language.PureScript.Externs.ExternsTypeFixity
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName)
  RecSel Left Language.PureScript.Externs.ExternsTypeFixity
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLS),1*U(A,A,A,1*U(U,U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Externs.ExternsTypeFixity) ->
                 case ds of wild { Language.PureScript.Externs.ExternsTypeFixity ds1 ds2 ds3 ds4 ->
                 ds4 }) -}
550ce16782e073a4c465189b0fa52bb0
  efTypeAssociativity ::
    Language.PureScript.Externs.ExternsTypeFixity
    -> Language.PureScript.AST.Operators.Associativity
  RecSel Left Language.PureScript.Externs.ExternsTypeFixity
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLLL),1*U(1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Externs.ExternsTypeFixity) ->
                 case ds of wild { Language.PureScript.Externs.ExternsTypeFixity ds1 ds2 ds3 ds4 ->
                 ds1 }) -}
b2e76f24ecba17bf3b946e078a8414b6
  efTypeFixities ::
    Language.PureScript.Externs.ExternsFile
    -> [Language.PureScript.Externs.ExternsTypeFixity]
  RecSel Left Language.PureScript.Externs.ExternsFile
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLSLL),1*U(A,A,A,A,A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Externs.ExternsFile) ->
                 case ds of wild { Language.PureScript.Externs.ExternsFile ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                 ds6 }) -}
550ce16782e073a4c465189b0fa52bb0
  efTypeOperator ::
    Language.PureScript.Externs.ExternsTypeFixity
    -> Language.PureScript.Names.OpName
         'Language.PureScript.Names.TypeOpName
  RecSel Left Language.PureScript.Externs.ExternsTypeFixity
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSL),1*U(A,A,1*U(U,U,U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Externs.ExternsTypeFixity) ->
                 case ds of wild { Language.PureScript.Externs.ExternsTypeFixity ds1 ds2 ds3 ds4 ->
                 ds3 }) -}
550ce16782e073a4c465189b0fa52bb0
  efTypePrecedence ::
    Language.PureScript.Externs.ExternsTypeFixity
    -> Language.PureScript.AST.Operators.Precedence
  RecSel Left Language.PureScript.Externs.ExternsTypeFixity
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSLL),1*U(A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Externs.ExternsTypeFixity) ->
                 case ds of wild { Language.PureScript.Externs.ExternsTypeFixity ds1 ds2 ds3 ds4 ->
                 ds2 }) -}
b2e76f24ecba17bf3b946e078a8414b6
  efVersion ::
    Language.PureScript.Externs.ExternsFile -> Data.Text.Internal.Text
  RecSel Left Language.PureScript.Externs.ExternsFile
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLLLLL),1*U(1*U(U,U,U),A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Externs.ExternsFile) ->
                 case ds of wild { Language.PureScript.Externs.ExternsFile ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                 ds1 }) -}
cac932cac83fee4afe9df4f645c23840
  eiImportType ::
    Language.PureScript.Externs.ExternsImport
    -> Language.PureScript.AST.Declarations.ImportDeclarationType
  RecSel Left Language.PureScript.Externs.ExternsImport
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Externs.ExternsImport) ->
                 case ds of wild { Language.PureScript.Externs.ExternsImport ds1 ds2 ds3 ->
                 ds2 }) -}
cac932cac83fee4afe9df4f645c23840
  eiImportedAs ::
    Language.PureScript.Externs.ExternsImport
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
  RecSel Left Language.PureScript.Externs.ExternsImport
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Externs.ExternsImport) ->
                 case ds of wild { Language.PureScript.Externs.ExternsImport ds1 ds2 ds3 ->
                 ds3 }) -}
cac932cac83fee4afe9df4f645c23840
  eiModule ::
    Language.PureScript.Externs.ExternsImport
    -> Language.PureScript.Names.ModuleName
  RecSel Left Language.PureScript.Externs.ExternsImport
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Externs.ExternsImport) ->
                 case ds of wild { Language.PureScript.Externs.ExternsImport ds1 ds2 ds3 ->
                 ds1 }) -}
0114335038fc8adaa653d211281125db
  moduleToExternsFile ::
    Language.PureScript.AST.Declarations.Module
    -> Language.PureScript.Environment.Environment
    -> Language.PureScript.Externs.ExternsFile
  {- Arity: 2,
     Strictness: <S(LLLLS),1*U(U,A,U,U,1*U)><L,U(U,U,U,U,U,U,U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.AST.Declarations.Module)
                   (w1 :: Language.PureScript.Environment.Environment) ->
                 case w of ww { Language.PureScript.AST.Declarations.Module ww1 ww2 ww3 ww4 ww5 ->
                 case Language.PureScript.Externs.$wmoduleToExternsFile
                        ww1
                        ww3
                        ww4
                        ww5
                        w1 of ww6 { (#,,,,,,,#) ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ->
                 Language.PureScript.Externs.ExternsFile
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14 } }) -}
instance Data.Aeson.Types.FromJSON.FromJSON [Language.PureScript.Externs.ExternsDeclaration]
  = Language.PureScript.Externs.$fFromJSONExternsDeclaration
instance Data.Aeson.Types.FromJSON.FromJSON [Language.PureScript.Externs.ExternsFile]
  = Language.PureScript.Externs.$fFromJSONExternsFile
instance Data.Aeson.Types.FromJSON.FromJSON [Language.PureScript.Externs.ExternsFixity]
  = Language.PureScript.Externs.$fFromJSONExternsFixity
instance Data.Aeson.Types.FromJSON.FromJSON [Language.PureScript.Externs.ExternsImport]
  = Language.PureScript.Externs.$fFromJSONExternsImport
instance Data.Aeson.Types.FromJSON.FromJSON [Language.PureScript.Externs.ExternsTypeFixity]
  = Language.PureScript.Externs.$fFromJSONExternsTypeFixity
instance GHC.Show.Show [Language.PureScript.Externs.ExternsDeclaration]
  = Language.PureScript.Externs.$fShowExternsDeclaration
instance GHC.Show.Show [Language.PureScript.Externs.ExternsFile]
  = Language.PureScript.Externs.$fShowExternsFile
instance GHC.Show.Show [Language.PureScript.Externs.ExternsFixity]
  = Language.PureScript.Externs.$fShowExternsFixity
instance GHC.Show.Show [Language.PureScript.Externs.ExternsImport]
  = Language.PureScript.Externs.$fShowExternsImport
instance GHC.Show.Show [Language.PureScript.Externs.ExternsTypeFixity]
  = Language.PureScript.Externs.$fShowExternsTypeFixity
instance Data.Aeson.Types.ToJSON.ToJSON [Language.PureScript.Externs.ExternsDeclaration]
  = Language.PureScript.Externs.$fToJSONExternsDeclaration
instance Data.Aeson.Types.ToJSON.ToJSON [Language.PureScript.Externs.ExternsFile]
  = Language.PureScript.Externs.$fToJSONExternsFile
instance Data.Aeson.Types.ToJSON.ToJSON [Language.PureScript.Externs.ExternsFixity]
  = Language.PureScript.Externs.$fToJSONExternsFixity
instance Data.Aeson.Types.ToJSON.ToJSON [Language.PureScript.Externs.ExternsImport]
  = Language.PureScript.Externs.$fToJSONExternsImport
instance Data.Aeson.Types.ToJSON.ToJSON [Language.PureScript.Externs.ExternsTypeFixity]
  = Language.PureScript.Externs.$fToJSONExternsTypeFixity
"SC:$w$sgo130" [0] forall (sc :: Data.Map.Internal.Map
                                   (Language.PureScript.Names.Qualified
                                      (Language.PureScript.Names.ProperName
                                         'Language.PureScript.Names.TypeName))
                                   (Language.PureScript.Kinds.Kind,
                                    Language.PureScript.Environment.TypeKind))
                          (sc1 :: (Language.PureScript.Kinds.Kind,
                                   Language.PureScript.Environment.TypeKind))
                          (sc2 :: Language.PureScript.Names.ProperName
                                    'Language.PureScript.Names.TypeName)
                          (sc3 :: Language.PureScript.Names.ModuleName)
                          (sc4 :: Language.PureScript.Names.Qualified
                                    (Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.TypeName))
  Language.PureScript.Externs.$w$sgo1 @ (Language.PureScript.Kinds.Kind,
                                         Language.PureScript.Environment.TypeKind)
                                      sc4
                                      (GHC.Base.Just @ Language.PureScript.Names.ModuleName sc3)
                                      sc2
                                      sc1
                                      sc
  = Language.PureScript.Externs.$sinsert_$s$w$sgo13
      sc
      sc1
      sc2
      sc3
      sc4
"SC:$w$sgo130" [0] forall (sc :: Data.Map.Internal.Map
                                   (Language.PureScript.Names.Qualified
                                      Language.PureScript.Names.Ident)
                                   (Language.PureScript.Types.Type,
                                    Language.PureScript.Environment.NameKind,
                                    Language.PureScript.Environment.NameVisibility))
                          (sc1 :: (Language.PureScript.Types.Type,
                                   Language.PureScript.Environment.NameKind,
                                   Language.PureScript.Environment.NameVisibility))
                          (sc2 :: Language.PureScript.Names.Ident)
                          (sc3 :: Language.PureScript.Names.ModuleName)
                          (sc4 :: Language.PureScript.Names.Qualified
                                    Language.PureScript.Names.Ident)
  Language.PureScript.Externs.$w$sgo3 @ (Language.PureScript.Types.Type,
                                         Language.PureScript.Environment.NameKind,
                                         Language.PureScript.Environment.NameVisibility)
                                      sc4
                                      (GHC.Base.Just @ Language.PureScript.Names.ModuleName sc3)
                                      sc2
                                      sc1
                                      sc
  = Language.PureScript.Externs.$sinsert_$s$w$sgo3 sc sc1 sc2 sc3 sc4
"SC:$w$sgo131" [0] forall @ a10
                          (sc :: Data.Map.Internal.Map
                                   (Language.PureScript.Names.Qualified
                                      (Language.PureScript.Names.ProperName
                                         'Language.PureScript.Names.ClassName))
                                   a10)
                          (sc1 :: Language.PureScript.Names.ProperName
                                    'Language.PureScript.Names.ClassName)
                          (sc2 :: GHC.Base.Maybe a10 -> GHC.Base.Maybe a10)
  Language.PureScript.Externs.$w$sgo13 @ a10
                                       sc2
                                       (GHC.Base.Nothing @ Language.PureScript.Names.ModuleName)
                                       sc1
                                       sc
  = Language.PureScript.Externs.$salter_$s$w$sgo2 @ a10 sc sc1 sc2
"SC:$w$sgo132" [0] forall @ a10
                          (sc :: Data.Map.Internal.Map
                                   (Language.PureScript.Names.Qualified
                                      (Language.PureScript.Names.ProperName
                                         'Language.PureScript.Names.ClassName))
                                   a10)
                          (sc1 :: Language.PureScript.Names.ProperName
                                    'Language.PureScript.Names.ClassName)
                          (sc2 :: Language.PureScript.Names.ModuleName)
                          (sc3 :: GHC.Base.Maybe a10 -> GHC.Base.Maybe a10)
  Language.PureScript.Externs.$w$sgo13 @ a10
                                       sc3
                                       (GHC.Base.Just @ Language.PureScript.Names.ModuleName sc2)
                                       sc1
                                       sc
  = Language.PureScript.Externs.$salter_$s$w$sgo1
      @ a10
      sc
      sc1
      sc2
      sc3
"SC:$wpoly_go130" [0] forall (sc :: Data.Map.Internal.Map
                                      (Language.PureScript.Names.Qualified
                                         (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.TypeName))
                                      ([(Data.Text.Internal.Text,
                                         GHC.Base.Maybe Language.PureScript.Kinds.Kind)],
                                       Language.PureScript.Types.Type))
                             (sc1 :: Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.TypeName)
                             (sc2 :: Language.PureScript.Names.ModuleName)
  Language.PureScript.Externs.$wpoly_go13 @ ([(Data.Text.Internal.Text,
                                               GHC.Base.Maybe Language.PureScript.Kinds.Kind)],
                                             Language.PureScript.Types.Type)
                                          (GHC.Base.Just @ Language.PureScript.Names.ModuleName sc2)
                                          sc1
                                          sc
  = Language.PureScript.Externs.$slookup_$s$wpoly_go13 sc sc1 sc2
"SC:$wpoly_go130" [0] forall (sc :: Data.Map.Internal.Map
                                      (Language.PureScript.Names.Qualified
                                         Language.PureScript.Names.Ident)
                                      (Language.PureScript.Types.Type,
                                       Language.PureScript.Environment.NameKind,
                                       Language.PureScript.Environment.NameVisibility))
                             (sc1 :: Language.PureScript.Names.Ident)
                             (sc2 :: Language.PureScript.Names.ModuleName)
  Language.PureScript.Externs.$wpoly_go2 @ (Language.PureScript.Types.Type,
                                            Language.PureScript.Environment.NameKind,
                                            Language.PureScript.Environment.NameVisibility)
                                         (GHC.Base.Just @ Language.PureScript.Names.ModuleName sc2)
                                         sc1
                                         sc
  = Language.PureScript.Externs.$slookup_$s$wpoly_go6 sc sc1 sc2
"SC:$wpoly_go131" [0] forall @ a10
                             (sc :: Data.Map.Internal.Map
                                      (Language.PureScript.Names.Qualified
                                         (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.TypeName))
                                      a10)
                             (sc1 :: Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.TypeName)
  Language.PureScript.Externs.$wpoly_go13 @ a10
                                          (GHC.Base.Nothing @ Language.PureScript.Names.ModuleName)
                                          sc1
                                          sc
  = Language.PureScript.Externs.$slookup_$s$wpoly_go2 @ a10 sc sc1
"SC:$wpoly_go131" [0] forall @ a10
                             (sc :: Data.Map.Internal.Map
                                      (Language.PureScript.Names.Qualified
                                         Language.PureScript.Names.Ident)
                                      a10)
                             (sc1 :: Language.PureScript.Names.Ident)
  Language.PureScript.Externs.$wpoly_go2 @ a10
                                         (GHC.Base.Nothing @ Language.PureScript.Names.ModuleName)
                                         sc1
                                         sc
  = Language.PureScript.Externs.$slookup_$s$wpoly_go7 @ a10 sc sc1
"SC:$wpoly_go132" [0] forall (sc :: Data.Map.Internal.Map
                                      (Language.PureScript.Names.Qualified
                                         (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.TypeName))
                                      ([(Data.Text.Internal.Text,
                                         GHC.Base.Maybe Language.PureScript.Kinds.Kind)],
                                       Language.PureScript.Types.Type))
                             (sc1 :: GHC.Prim.ByteArray#)
                             (sc2 :: GHC.Prim.Int#)
                             (sc3 :: GHC.Prim.Int#)
                             (sg :: (Data.Text.Internal.Text :: *)
                                    ~R# (Language.PureScript.Names.ProperName
                                           'Language.PureScript.Names.TypeName :: *))
                             (sc4 :: Language.PureScript.Names.ModuleName)
  Language.PureScript.Externs.$wpoly_go13 @ ([(Data.Text.Internal.Text,
                                               GHC.Base.Maybe Language.PureScript.Kinds.Kind)],
                                             Language.PureScript.Types.Type)
                                          (GHC.Base.Just @ Language.PureScript.Names.ModuleName sc4)
                                          (Data.Text.Internal.Text sc1 sc2 sc3) `cast` sg
                                          sc
  = Language.PureScript.Externs.$slookup_$s$wpoly_go1
      sc
      sc1
      sc2
      sc3
      @~ sg
      sc4
"SPEC/Language.PureScript.Externs $fFromJSONEither @ Ident @ (ProperName
                                                               'ConstructorName)" [orphan] forall (v1 :: Data.Aeson.Types.FromJSON.FromJSON
                                                                                                                                                                                    (Language.PureScript.Names.ProperName
                                                                                                                                                                                       'Language.PureScript.Names.ConstructorName))
                                                                                                                                                                           (v :: Data.Aeson.Types.FromJSON.FromJSON
                                                                                                                                                                                   Language.PureScript.Names.Ident)
  Data.Aeson.Types.FromJSON.$fFromJSONEither @ Language.PureScript.Names.Ident
                                             @ (Language.PureScript.Names.ProperName
                                                  'Language.PureScript.Names.ConstructorName)
                                             v
                                             v1
  = Language.PureScript.Externs.$fFromJSONExternsFixity_$s$fFromJSONEither
"SPEC/Language.PureScript.Externs $fFromJSONMaybe @ Kind" [orphan] forall (v :: Data.Aeson.Types.FromJSON.FromJSON
                                                                                  Language.PureScript.Kinds.Kind)
  Data.Aeson.Types.FromJSON.$fFromJSONMaybe @ Language.PureScript.Kinds.Kind
                                            v
  = Language.PureScript.Externs.$s$fFromJSONMaybe
"SPEC/Language.PureScript.Externs $fShowEither @ Ident @ (ProperName
                                                           'ConstructorName)" [orphan] forall (v1 :: GHC.Show.Show
                                                                                                                                                                            (Language.PureScript.Names.ProperName
                                                                                                                                                                               'Language.PureScript.Names.ConstructorName))
                                                                                                                                                                   (v :: GHC.Show.Show
                                                                                                                                                                           Language.PureScript.Names.Ident)
  Data.Either.$fShowEither @ Language.PureScript.Names.Ident
                           @ (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ConstructorName)
                           v
                           v1
  = Language.PureScript.Externs.$fShowExternsFixity_$s$fShowEither
"SPEC/Language.PureScript.Externs $fShowEither_$cshowList @ Ident @ (ProperName
                                                                      'ConstructorName)" [orphan] forall ($dShow1 :: GHC.Show.Show
                                                                                                                                                                                                       (Language.PureScript.Names.ProperName
                                                                                                                                                                                                          'Language.PureScript.Names.ConstructorName))
                                                                                                                                                                                         ($dShow :: GHC.Show.Show
                                                                                                                                                                                                      Language.PureScript.Names.Ident)
  Data.Either.$fShowEither_$cshowList @ Language.PureScript.Names.Ident
                                      @ (Language.PureScript.Names.ProperName
                                           'Language.PureScript.Names.ConstructorName)
                                      $dShow
                                      $dShow1
  = Language.PureScript.Externs.$s$fShowEither_$cshowList
"SPEC/Language.PureScript.Externs $fShowEither_$cshowsPrec @ Ident @ (ProperName
                                                                       'ConstructorName)" [orphan] [0] forall (w1 :: GHC.Show.Show
                                                                                                                                                                                                        (Language.PureScript.Names.ProperName
                                                                                                                                                                                                           'Language.PureScript.Names.ConstructorName))
                                                                                                                                                                                               (w :: GHC.Show.Show
                                                                                                                                                                                                       Language.PureScript.Names.Ident)
  Data.Either.$fShowEither_$cshowsPrec @ Language.PureScript.Names.Ident
                                       @ (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.ConstructorName)
                                       w
                                       w1
  = Language.PureScript.Externs.$s$fShowEither_$cshowsPrec
"SPEC/Language.PureScript.Externs $fShow[] @ Constraint" [orphan] forall (v :: GHC.Show.Show
                                                                                 Language.PureScript.Types.Constraint)
  GHC.Show.$fShow[] @ Language.PureScript.Types.Constraint v
  = Language.PureScript.Externs.$s$fShow[]
"SPEC/Language.PureScript.Externs $fShow[]_$cshow @ Constraint" [orphan] forall ($dShow :: GHC.Show.Show
                                                                                             Language.PureScript.Types.Constraint)
  GHC.Show.$fShow[]_$cshow @ Language.PureScript.Types.Constraint
                           $dShow
  = Language.PureScript.Externs.$s$fShow[]_$cshow
"SPEC/Language.PureScript.Externs $fShow[]_$cshowList @ Constraint" [orphan] forall ($dShow :: GHC.Show.Show
                                                                                                 Language.PureScript.Types.Constraint)
  GHC.Show.$fShow[]_$cshowList @ Language.PureScript.Types.Constraint
                               $dShow
  = Language.PureScript.Externs.$s$fShow[]_$cshowList
"SPEC/Language.PureScript.Externs $fToJSONEither @ Ident @ (ProperName
                                                             'ConstructorName)" [orphan] forall (v1 :: Data.Aeson.Types.ToJSON.ToJSON
                                                                                                                                                                                (Language.PureScript.Names.ProperName
                                                                                                                                                                                   'Language.PureScript.Names.ConstructorName))
                                                                                                                                                                       (v :: Data.Aeson.Types.ToJSON.ToJSON
                                                                                                                                                                               Language.PureScript.Names.Ident)
  Data.Aeson.Types.ToJSON.$fToJSONEither @ Language.PureScript.Names.Ident
                                         @ (Language.PureScript.Names.ProperName
                                              'Language.PureScript.Names.ConstructorName)
                                         v
                                         v1
  = Language.PureScript.Externs.$fToJSONExternsFixity_$s$fToJSONEither
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

