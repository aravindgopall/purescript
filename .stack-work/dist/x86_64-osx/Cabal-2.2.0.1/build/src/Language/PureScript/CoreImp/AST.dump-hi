
==================== FINAL INTERFACE ====================
2019-01-24 14:16:19.307462 UTC

interface purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.CoreImp.AST 8043
  interface hash: d5de6bf7a4660e58f210a3cad4d5f832
  ABI hash: e13d2052141e50eca2a5dfdad2a67d5a
  export-list hash: d4ba1e9a31e7dde56b84028e789bb579
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 63844ea6b80cf0d4d69dc86afbf79aa6
  opt_hash: 2c98c95d41c045ae9c2fb565ec8aabc6
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Language.PureScript.CoreImp.AST.everything
  Language.PureScript.CoreImp.AST.everywhere
  Language.PureScript.CoreImp.AST.everywhereTopDown
  Language.PureScript.CoreImp.AST.everywhereTopDownM
  Language.PureScript.CoreImp.AST.getSourceSpan
  Language.PureScript.CoreImp.AST.withSourceSpan
  Language.PureScript.CoreImp.AST.AST{Language.PureScript.CoreImp.AST.App Language.PureScript.CoreImp.AST.ArrayLiteral Language.PureScript.CoreImp.AST.Assignment Language.PureScript.CoreImp.AST.Binary Language.PureScript.CoreImp.AST.Block Language.PureScript.CoreImp.AST.BooleanLiteral Language.PureScript.CoreImp.AST.Comment Language.PureScript.CoreImp.AST.For Language.PureScript.CoreImp.AST.ForIn Language.PureScript.CoreImp.AST.Function Language.PureScript.CoreImp.AST.IfElse Language.PureScript.CoreImp.AST.Indexer Language.PureScript.CoreImp.AST.InstanceOf Language.PureScript.CoreImp.AST.NumericLiteral Language.PureScript.CoreImp.AST.ObjectLiteral Language.PureScript.CoreImp.AST.Return Language.PureScript.CoreImp.AST.ReturnNoResult Language.PureScript.CoreImp.AST.StringLiteral Language.PureScript.CoreImp.AST.Throw Language.PureScript.CoreImp.AST.Unary Language.PureScript.CoreImp.AST.Var Language.PureScript.CoreImp.AST.VariableIntroduction Language.PureScript.CoreImp.AST.While}
  Language.PureScript.CoreImp.AST.BinaryOperator{Language.PureScript.CoreImp.AST.Add Language.PureScript.CoreImp.AST.And Language.PureScript.CoreImp.AST.BitwiseAnd Language.PureScript.CoreImp.AST.BitwiseOr Language.PureScript.CoreImp.AST.BitwiseXor Language.PureScript.CoreImp.AST.Divide Language.PureScript.CoreImp.AST.EqualTo Language.PureScript.CoreImp.AST.GreaterThan Language.PureScript.CoreImp.AST.GreaterThanOrEqualTo Language.PureScript.CoreImp.AST.LessThan Language.PureScript.CoreImp.AST.LessThanOrEqualTo Language.PureScript.CoreImp.AST.Modulus Language.PureScript.CoreImp.AST.Multiply Language.PureScript.CoreImp.AST.NotEqualTo Language.PureScript.CoreImp.AST.Or Language.PureScript.CoreImp.AST.ShiftLeft Language.PureScript.CoreImp.AST.ShiftRight Language.PureScript.CoreImp.AST.Subtract Language.PureScript.CoreImp.AST.ZeroFillShiftRight}
  Language.PureScript.CoreImp.AST.UnaryOperator{Language.PureScript.CoreImp.AST.BitwiseNot Language.PureScript.CoreImp.AST.Negate Language.PureScript.CoreImp.AST.New Language.PureScript.CoreImp.AST.Not Language.PureScript.CoreImp.AST.Positive}
module dependencies: Control.Monad.Supply
                     Control.Monad.Supply.Class Language.PureScript.AST
                     Language.PureScript.AST.Binders
                     Language.PureScript.AST.Declarations
                     Language.PureScript.AST.Exported Language.PureScript.AST.Literals
                     Language.PureScript.AST.Operators Language.PureScript.AST.SourcePos
                     Language.PureScript.AST.Traversals Language.PureScript.Bundle
                     Language.PureScript.Comments Language.PureScript.Constants
                     Language.PureScript.Crash Language.PureScript.Environment
                     Language.PureScript.Kinds Language.PureScript.Label
                     Language.PureScript.Names Language.PureScript.PSString
                     Language.PureScript.Traversals
                     Language.PureScript.TypeClassDictionaries Language.PureScript.Types
                     Paths_purescript
package dependencies: aeson-1.3.1.1 array-0.5.2.0 async-2.2.1
                      attoparsec-0.13.2.2 base-4.11.1.0 base-compat-0.10.4 binary-0.8.5.1
                      blaze-builder-0.4.1.0 bytestring-0.10.8.2 containers-0.5.11.0
                      deepseq-1.4.3.0 dlist-0.8.0.4 filepath-1.4.2 ghc-boot-th-8.4.3
                      ghc-prim-0.5.2.0 hashable-1.2.7.0 integer-gmp-1.0.2.0
                      integer-logarithms-1.0.2.1 language-javascript-0.6.0.11
                      microlens-0.4.9.1 microlens-ghc-0.4.9 microlens-mtl-0.1.11.1
                      microlens-platform-0.3.10 microlens-th-0.4.2.1 mtl-2.2.2
                      parsec-3.1.13.0 pretty-1.1.3.6 primitive-0.6.3.0 protolude-0.2.2
                      random-1.1 scientific-0.3.6.2 sourcemap-0.1.6 stm-2.4.5.0 syb-0.7
                      tagged-0.8.5 template-haskell-2.13.0.0 text-1.2.3.0
                      th-abstraction-0.2.8.0 time-1.8.0.2 time-locale-compat-0.1.1.4
                      transformers-0.5.5.0 unordered-containers-0.2.9.0
                      utf8-string-1.0.1.1 uuid-types-1.0.3 vector-0.12.0.1
orphans: syb-0.7:Data.Generics.Instances
         stm-2.4.5.0:Control.Monad.STM
         microlens-platform-0.3.10:Lens.Micro.Platform
         microlens-ghc-0.4.9:Lens.Micro.GHC
         attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         vector-0.12.0.1:Data.Vector.Unboxed
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.0:Data.Text.Lazy
         text-1.2.3.0:Data.Text binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.5.0:Control.Monad.Trans.Error
         base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: aeson-1.3.1.1:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.Graph
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         dlist-0.8.0.4:Data.DList ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         microlens-0.4.9.1:Lens.Micro.Internal
                         microlens-ghc-0.4.9:Lens.Micro.GHC
                         microlens-mtl-0.1.11.1:Lens.Micro.Mtl.Internal
                         microlens-platform-0.3.10:Lens.Micro.Platform
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.Declarations
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.Operators
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.SourcePos
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Comments
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Environment
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Kinds
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Label
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Names
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.PSString
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.TypeClassDictionaries
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Types
                         tagged-0.8.5:Data.Tagged
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
                         th-abstraction-0.2.8.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  base-4.11.1.0:Control.Monad c5f960c67d822497578bffbd3e4c01cf
import  -/  base-4.11.1.0:Data.Either 39d922b371c4c52d426e9ee66de8371a
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.Functor f522c3501272159820fd6f242510732f
import  -/  base-4.11.1.0:Data.Functor.Identity 9430dcaadd71c129eeb5ca7b963c9b54
import  -/  base-4.11.1.0:Data.Traversable 7ad4edb9184ea1ae8e73f6b94f115c8c
import  -/  base-4.11.1.0:Data.Tuple 3af66f3ac61ed95ba8a3a3f68ebc5003
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-compat-0.10.4:Prelude.Compat bb6796186ed35a1d09dc34362a3fc27e
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  integer-gmp-1.0.2.0:GHC.Integer.Type f3d5169c3d3830854b19f6565b265403
import  -/  mtl-2.2.2:Control.Monad.Identity ca9e9b9bfa404d3d70994a432bbadd6d
import  -/  Language.PureScript.AST e89b59f8e201961eafd3ff905a683659
  exports: be73d3bb7d4ebe5df082453f6d572075
import  -/  Language.PureScript.AST.SourcePos 63acacac5b7be73d04e5be0047a9a89a
  SourceSpan 1e0cf2bd3ea18f97a2ff152297f09219
import  -/  Language.PureScript.Comments 1a682522a2f855328ca87bb68705794c
  exports: 9921c985b3279420b3b7a2b7ccc8b32e
  Comment 2e827a5b834f92cc9beef533348585fa
import  -/  Language.PureScript.PSString 482bcd39d274b3e3efbde5749bd9d797
  exports: dedd5d31dc509736134f041863efd1d4
  PSString 96ffea2472d48cda76cc39d47ab7bb82
import  -/  Language.PureScript.Traversals e97764d7972cc6ba421a6be0a3ce6bda
  exports: cbb821b2ee7c6d00cdf62285e1dbe432
  sndM c93ef73e127a3a54c4cd1e5e2194b237
import  -/  text-1.2.3.0:Data.Text 7daa7e6c9b39d8cc1679e5ec5c64d2be
import  -/  text-1.2.3.0:Data.Text.Internal 30a0a123f71f63b26cd34c6b24f23411
27e474366a6164e874a6d4e5cad82745
  $fEqAST :: GHC.Classes.Eq Language.PureScript.CoreImp.AST.AST
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.CoreImp.AST.AST
                  Language.PureScript.CoreImp.AST.$fEqAST_$c==
                  Language.PureScript.CoreImp.AST.$fEqAST_$c/= -}
27e474366a6164e874a6d4e5cad82745
  $fEqAST_$c/= ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>, Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.CoreImp.AST.AST)
                   (y :: Language.PureScript.CoreImp.AST.AST) ->
                 case Language.PureScript.CoreImp.AST.$fEqAST_$c== x y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
27e474366a6164e874a6d4e5cad82745
  $fEqAST_$c== ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
489f0b1ed508c6f848c3aae91aed6e07
  $fEqBinaryOperator ::
    GHC.Classes.Eq Language.PureScript.CoreImp.AST.BinaryOperator
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.CoreImp.AST.BinaryOperator
                  Language.PureScript.CoreImp.AST.$fEqBinaryOperator_$c==
                  Language.PureScript.CoreImp.AST.$fEqBinaryOperator_$c/= -}
489f0b1ed508c6f848c3aae91aed6e07
  $fEqBinaryOperator_$c/= ::
    Language.PureScript.CoreImp.AST.BinaryOperator
    -> Language.PureScript.CoreImp.AST.BinaryOperator -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.CoreImp.AST.BinaryOperator)
                   (y :: Language.PureScript.CoreImp.AST.BinaryOperator) ->
                 case x of x1 { DEFAULT ->
                 case GHC.Prim.dataToTag#
                        @ Language.PureScript.CoreImp.AST.BinaryOperator
                        x1 of a# { DEFAULT ->
                 case y of x2 { DEFAULT ->
                 case GHC.Prim.dataToTag#
                        @ Language.PureScript.CoreImp.AST.BinaryOperator
                        x2 of b# { DEFAULT ->
                 case GHC.Prim.==# a# b# of lwild {
                   DEFAULT -> GHC.Types.True 1# -> GHC.Types.False } } } } }) -}
489f0b1ed508c6f848c3aae91aed6e07
  $fEqBinaryOperator_$c== ::
    Language.PureScript.CoreImp.AST.BinaryOperator
    -> Language.PureScript.CoreImp.AST.BinaryOperator -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.CoreImp.AST.BinaryOperator)
                   (b :: Language.PureScript.CoreImp.AST.BinaryOperator) ->
                 case a of x1 { DEFAULT ->
                 case GHC.Prim.dataToTag#
                        @ Language.PureScript.CoreImp.AST.BinaryOperator
                        x1 of a# { DEFAULT ->
                 case b of x2 { DEFAULT ->
                 case GHC.Prim.dataToTag#
                        @ Language.PureScript.CoreImp.AST.BinaryOperator
                        x2 of b# { DEFAULT ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.==# a# b#) } } } }) -}
25c18297338795f6f1b7341e3c4ca5dd
  $fEqUnaryOperator ::
    GHC.Classes.Eq Language.PureScript.CoreImp.AST.UnaryOperator
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.CoreImp.AST.UnaryOperator
                  Language.PureScript.CoreImp.AST.$fEqUnaryOperator_$c==
                  Language.PureScript.CoreImp.AST.$fEqUnaryOperator_$c/= -}
25c18297338795f6f1b7341e3c4ca5dd
  $fEqUnaryOperator_$c/= ::
    Language.PureScript.CoreImp.AST.UnaryOperator
    -> Language.PureScript.CoreImp.AST.UnaryOperator -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.CoreImp.AST.UnaryOperator)
                   (y :: Language.PureScript.CoreImp.AST.UnaryOperator) ->
                 case x of wild {
                   Language.PureScript.CoreImp.AST.Negate
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.CoreImp.AST.Negate -> GHC.Types.False }
                   Language.PureScript.CoreImp.AST.Not
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.CoreImp.AST.Not -> GHC.Types.False }
                   Language.PureScript.CoreImp.AST.BitwiseNot
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.CoreImp.AST.BitwiseNot -> GHC.Types.False }
                   Language.PureScript.CoreImp.AST.Positive
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.CoreImp.AST.Positive -> GHC.Types.False }
                   Language.PureScript.CoreImp.AST.New
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.CoreImp.AST.New -> GHC.Types.False } }) -}
25c18297338795f6f1b7341e3c4ca5dd
  $fEqUnaryOperator_$c== ::
    Language.PureScript.CoreImp.AST.UnaryOperator
    -> Language.PureScript.CoreImp.AST.UnaryOperator -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Language.PureScript.CoreImp.AST.UnaryOperator)
                   (ds1 :: Language.PureScript.CoreImp.AST.UnaryOperator) ->
                 case ds of wild {
                   Language.PureScript.CoreImp.AST.Negate
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.CoreImp.AST.Negate -> GHC.Types.True }
                   Language.PureScript.CoreImp.AST.Not
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.CoreImp.AST.Not -> GHC.Types.True }
                   Language.PureScript.CoreImp.AST.BitwiseNot
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.CoreImp.AST.BitwiseNot -> GHC.Types.True }
                   Language.PureScript.CoreImp.AST.Positive
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.CoreImp.AST.Positive -> GHC.Types.True }
                   Language.PureScript.CoreImp.AST.New
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.CoreImp.AST.New -> GHC.Types.True } }) -}
27e474366a6164e874a6d4e5cad82745
  $fShowAST :: GHC.Show.Show Language.PureScript.CoreImp.AST.AST
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.CoreImp.AST.AST
                  Language.PureScript.CoreImp.AST.$fShowAST_$cshowsPrec
                  Language.PureScript.CoreImp.AST.$fShowAST_$cshow
                  Language.PureScript.CoreImp.AST.$fShowAST_$cshowList -}
27e474366a6164e874a6d4e5cad82745
  $fShowAST1 :: Language.PureScript.CoreImp.AST.AST -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (w :: Language.PureScript.CoreImp.AST.AST) ->
                 Language.PureScript.CoreImp.AST.$w$cshowsPrec 0# w) -}
639fe0b6cbfd1be91351cb283a30419e
  $fShowAST2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
27e474366a6164e874a6d4e5cad82745
  $fShowAST_$cshow ::
    Language.PureScript.CoreImp.AST.AST -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.CoreImp.AST.AST) ->
                 Language.PureScript.CoreImp.AST.$fShowAST_$cshowsPrec
                   Language.PureScript.CoreImp.AST.$fShowAST2
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
27e474366a6164e874a6d4e5cad82745
  $fShowAST_$cshowList ::
    [Language.PureScript.CoreImp.AST.AST] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.CoreImp.AST.AST])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.CoreImp.AST.AST
                   Language.PureScript.CoreImp.AST.$fShowAST1
                   ls
                   s) -}
27e474366a6164e874a6d4e5cad82745
  $fShowAST_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.CoreImp.AST.AST -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.CoreImp.AST.AST) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Language.PureScript.CoreImp.AST.$w$cshowsPrec ww1 w1 }) -}
489f0b1ed508c6f848c3aae91aed6e07
  $fShowBinaryOperator ::
    GHC.Show.Show Language.PureScript.CoreImp.AST.BinaryOperator
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.CoreImp.AST.BinaryOperator
                  Language.PureScript.CoreImp.AST.$fShowBinaryOperator_$cshowsPrec
                  Language.PureScript.CoreImp.AST.$fShowBinaryOperator_$cshow
                  Language.PureScript.CoreImp.AST.$fShowBinaryOperator_$cshowList -}
65c087e5dfa41fd3c723d5693e7177a4
  $fShowBinaryOperator1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.CoreImp.AST.$fShowBinaryOperator2) -}
30bd5f117acc8b72c8a52ba9f0b6a38a
  $fShowBinaryOperator10 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("BitwiseOr"#) -}
cfb1c9a4b447e5d3f5ba5544595efbf9
  $fShowBinaryOperator11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.CoreImp.AST.$fShowBinaryOperator12) -}
28786f667fc273f1e41945efbbfb2cf5
  $fShowBinaryOperator12 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("BitwiseAnd"#) -}
91624ebd49b60ea9ed48c2eb9d41e642
  $fShowBinaryOperator13 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.CoreImp.AST.$fShowBinaryOperator14) -}
0d2e3654a97291d61ae58a24c8bf3fdd
  $fShowBinaryOperator14 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Or"#) -}
9c0f73fb3377d5798b17030f7ef614e2
  $fShowBinaryOperator15 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.CoreImp.AST.$fShowBinaryOperator16) -}
54b90bae9472436d12df25b818a0f5ad
  $fShowBinaryOperator16 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("And"#) -}
05d43f5f25bf17b39a1d7798648906ee
  $fShowBinaryOperator17 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.CoreImp.AST.$fShowBinaryOperator18) -}
237d9c601bc4fc3e26171546f4ac3a99
  $fShowBinaryOperator18 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("GreaterThanOrEqualTo"#) -}
a3ddf9c67281570ac1037fedc8919e41
  $fShowBinaryOperator19 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.CoreImp.AST.$fShowBinaryOperator20) -}
23c75ff020b20020fb628331e5a74e79
  $fShowBinaryOperator2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ZeroFillShiftRight"#) -}
cff743183e0109c00fb5874743ff8850
  $fShowBinaryOperator20 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("GreaterThan"#) -}
ccbdedace61a479e60daf549a11512cf
  $fShowBinaryOperator21 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.CoreImp.AST.$fShowBinaryOperator22) -}
dcd0dac28555cb39b81b49bbb509b098
  $fShowBinaryOperator22 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("LessThanOrEqualTo"#) -}
b0cb3ad13abc933f8b52b0be5484107a
  $fShowBinaryOperator23 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.CoreImp.AST.$fShowBinaryOperator24) -}
139f22cbc337f2dc7ca58aac306fb718
  $fShowBinaryOperator24 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("LessThan"#) -}
162d598b2a66b01fa6e767a31c7e9fb6
  $fShowBinaryOperator25 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.CoreImp.AST.$fShowBinaryOperator26) -}
96fc5f469edecb582b949013faf12556
  $fShowBinaryOperator26 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("NotEqualTo"#) -}
e9409bc3c79f1c4518cf244283d97c27
  $fShowBinaryOperator27 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.CoreImp.AST.$fShowBinaryOperator28) -}
57a1b7f1426138fe9c89751f4d521a70
  $fShowBinaryOperator28 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("EqualTo"#) -}
b12bba131f71524e26222654f850151b
  $fShowBinaryOperator29 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.CoreImp.AST.$fShowBinaryOperator30) -}
749972ab44327ef6176e0116b255dbf8
  $fShowBinaryOperator3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.CoreImp.AST.$fShowBinaryOperator4) -}
238a17c7199c34985ee4d9416db7c1ae
  $fShowBinaryOperator30 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Modulus"#) -}
aa59a17729b268882260b0e13f9703a3
  $fShowBinaryOperator31 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.CoreImp.AST.$fShowBinaryOperator32) -}
e415b0f7d706a2ef04fe3366f680a6f5
  $fShowBinaryOperator32 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Divide"#) -}
5af0c45dce837e362cb096681e934006
  $fShowBinaryOperator33 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.CoreImp.AST.$fShowBinaryOperator34) -}
8c77c8a934a65386ae6bca85c33b0b20
  $fShowBinaryOperator34 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Multiply"#) -}
10a6b2aa341012c0799c6085de83c729
  $fShowBinaryOperator35 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.CoreImp.AST.$fShowBinaryOperator36) -}
ecc472c1ce74a736225bbbc4cb5b93f0
  $fShowBinaryOperator36 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Subtract"#) -}
71624d894c14428e27762e6872d0c3cf
  $fShowBinaryOperator37 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.CoreImp.AST.$fShowBinaryOperator38) -}
ce8eb664fefce1d7e85d6a1d26c7b8ee
  $fShowBinaryOperator38 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Add"#) -}
d49a38829abcd55e18c94d35155d450a
  $fShowBinaryOperator4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ShiftRight"#) -}
bbca90d870af8970caf8886fa60bde98
  $fShowBinaryOperator5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.CoreImp.AST.$fShowBinaryOperator6) -}
83de9e4f5bbc6e50ad6c636e0b7a0424
  $fShowBinaryOperator6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ShiftLeft"#) -}
b06285c8218ec862f94726323d84eccd
  $fShowBinaryOperator7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.CoreImp.AST.$fShowBinaryOperator8) -}
7d49cd72d96920e60736ce0023630b03
  $fShowBinaryOperator8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("BitwiseXor"#) -}
397d00f70cf0fd46c4a57db18da4e8e1
  $fShowBinaryOperator9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.CoreImp.AST.$fShowBinaryOperator10) -}
489f0b1ed508c6f848c3aae91aed6e07
  $fShowBinaryOperator_$cshow ::
    Language.PureScript.CoreImp.AST.BinaryOperator -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: Language.PureScript.CoreImp.AST.BinaryOperator) ->
                 case x of wild {
                   Language.PureScript.CoreImp.AST.Add
                   -> Language.PureScript.CoreImp.AST.$fShowBinaryOperator37
                   Language.PureScript.CoreImp.AST.Subtract
                   -> Language.PureScript.CoreImp.AST.$fShowBinaryOperator35
                   Language.PureScript.CoreImp.AST.Multiply
                   -> Language.PureScript.CoreImp.AST.$fShowBinaryOperator33
                   Language.PureScript.CoreImp.AST.Divide
                   -> Language.PureScript.CoreImp.AST.$fShowBinaryOperator31
                   Language.PureScript.CoreImp.AST.Modulus
                   -> Language.PureScript.CoreImp.AST.$fShowBinaryOperator29
                   Language.PureScript.CoreImp.AST.EqualTo
                   -> Language.PureScript.CoreImp.AST.$fShowBinaryOperator27
                   Language.PureScript.CoreImp.AST.NotEqualTo
                   -> Language.PureScript.CoreImp.AST.$fShowBinaryOperator25
                   Language.PureScript.CoreImp.AST.LessThan
                   -> Language.PureScript.CoreImp.AST.$fShowBinaryOperator23
                   Language.PureScript.CoreImp.AST.LessThanOrEqualTo
                   -> Language.PureScript.CoreImp.AST.$fShowBinaryOperator21
                   Language.PureScript.CoreImp.AST.GreaterThan
                   -> Language.PureScript.CoreImp.AST.$fShowBinaryOperator19
                   Language.PureScript.CoreImp.AST.GreaterThanOrEqualTo
                   -> Language.PureScript.CoreImp.AST.$fShowBinaryOperator17
                   Language.PureScript.CoreImp.AST.And
                   -> Language.PureScript.CoreImp.AST.$fShowBinaryOperator15
                   Language.PureScript.CoreImp.AST.Or
                   -> Language.PureScript.CoreImp.AST.$fShowBinaryOperator13
                   Language.PureScript.CoreImp.AST.BitwiseAnd
                   -> Language.PureScript.CoreImp.AST.$fShowBinaryOperator11
                   Language.PureScript.CoreImp.AST.BitwiseOr
                   -> Language.PureScript.CoreImp.AST.$fShowBinaryOperator9
                   Language.PureScript.CoreImp.AST.BitwiseXor
                   -> Language.PureScript.CoreImp.AST.$fShowBinaryOperator7
                   Language.PureScript.CoreImp.AST.ShiftLeft
                   -> Language.PureScript.CoreImp.AST.$fShowBinaryOperator5
                   Language.PureScript.CoreImp.AST.ShiftRight
                   -> Language.PureScript.CoreImp.AST.$fShowBinaryOperator3
                   Language.PureScript.CoreImp.AST.ZeroFillShiftRight
                   -> Language.PureScript.CoreImp.AST.$fShowBinaryOperator1 }) -}
489f0b1ed508c6f848c3aae91aed6e07
  $fShowBinaryOperator_$cshowList ::
    [Language.PureScript.CoreImp.AST.BinaryOperator] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.CoreImp.AST.BinaryOperator])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.CoreImp.AST.BinaryOperator
                   Language.PureScript.CoreImp.AST.$w$cshowsPrec1
                   ls
                   s) -}
489f0b1ed508c6f848c3aae91aed6e07
  $fShowBinaryOperator_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.CoreImp.AST.BinaryOperator -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: [0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.CoreImp.AST.BinaryOperator)
                   (w2 :: GHC.Base.String) ->
                 Language.PureScript.CoreImp.AST.$w$cshowsPrec1 w1 w2) -}
25c18297338795f6f1b7341e3c4ca5dd
  $fShowUnaryOperator ::
    GHC.Show.Show Language.PureScript.CoreImp.AST.UnaryOperator
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.CoreImp.AST.UnaryOperator
                  Language.PureScript.CoreImp.AST.$fShowUnaryOperator_$cshowsPrec
                  Language.PureScript.CoreImp.AST.$fShowUnaryOperator_$cshow
                  Language.PureScript.CoreImp.AST.$fShowUnaryOperator_$cshowList -}
2a9aa0f6e1da97fa64943e19290dfa48
  $fShowUnaryOperator1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.CoreImp.AST.$fShowUnaryOperator2) -}
ef177e3fb5ab9c23493cfc84f48f3017
  $fShowUnaryOperator10 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Negate"#) -}
64f5ff9267be1b3f1929e718c4bda452
  $fShowUnaryOperator2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("New"#) -}
e86ef4caa7bba2380f9cc275cc27d362
  $fShowUnaryOperator3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.CoreImp.AST.$fShowUnaryOperator4) -}
b3c2c53bb63e2a298affe16a09491381
  $fShowUnaryOperator4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Positive"#) -}
3b636e84aabf91b656bf6b6a2a656819
  $fShowUnaryOperator5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.CoreImp.AST.$fShowUnaryOperator6) -}
9687be7afd3c58373170a98caa2b4dca
  $fShowUnaryOperator6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("BitwiseNot"#) -}
5cce13fff0399f7099e8d3ce20f4649a
  $fShowUnaryOperator7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.CoreImp.AST.$fShowUnaryOperator8) -}
ca6bc96e46875b328ae70d8a9756c09b
  $fShowUnaryOperator8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Not"#) -}
85553ad6622e18d0e699e28f8f57b3f2
  $fShowUnaryOperator9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.CoreImp.AST.$fShowUnaryOperator10) -}
25c18297338795f6f1b7341e3c4ca5dd
  $fShowUnaryOperator_$cshow ::
    Language.PureScript.CoreImp.AST.UnaryOperator -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.CoreImp.AST.UnaryOperator) ->
                 case x of wild {
                   Language.PureScript.CoreImp.AST.Negate
                   -> Language.PureScript.CoreImp.AST.$fShowUnaryOperator9
                   Language.PureScript.CoreImp.AST.Not
                   -> Language.PureScript.CoreImp.AST.$fShowUnaryOperator7
                   Language.PureScript.CoreImp.AST.BitwiseNot
                   -> Language.PureScript.CoreImp.AST.$fShowUnaryOperator5
                   Language.PureScript.CoreImp.AST.Positive
                   -> Language.PureScript.CoreImp.AST.$fShowUnaryOperator3
                   Language.PureScript.CoreImp.AST.New
                   -> Language.PureScript.CoreImp.AST.$fShowUnaryOperator1 }) -}
25c18297338795f6f1b7341e3c4ca5dd
  $fShowUnaryOperator_$cshowList ::
    [Language.PureScript.CoreImp.AST.UnaryOperator] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.CoreImp.AST.UnaryOperator])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.CoreImp.AST.UnaryOperator
                   Language.PureScript.CoreImp.AST.$w$cshowsPrec2
                   ls
                   s) -}
25c18297338795f6f1b7341e3c4ca5dd
  $fShowUnaryOperator_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.CoreImp.AST.UnaryOperator -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: [0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.CoreImp.AST.UnaryOperator)
                   (w2 :: GHC.Base.String) ->
                 Language.PureScript.CoreImp.AST.$w$cshowsPrec2 w1 w2) -}
837c943584d5028309f01c65b63126a1
  $tc'Add :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15951625962522636719##
                   10787084972111620837##
                   Language.PureScript.CoreImp.AST.$trModule
                   Language.PureScript.CoreImp.AST.$tc'Add2
                   0#
                   Language.PureScript.CoreImp.AST.$tc'Add1) -}
c1fc0112d27c82b223359290f802ad2d
  $tc'Add1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
f10367e2382baea10b44e3abfa5c7654
  $tc'Add2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.CoreImp.AST.$tc'Add3) -}
4016b28d4305b42fbef75e7aa47f1a74
  $tc'Add3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Add"#) -}
680c62671bce18742706c6814039febb
  $tc'And :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17697194877180054535##
                   3474717274582910156##
                   Language.PureScript.CoreImp.AST.$trModule
                   Language.PureScript.CoreImp.AST.$tc'And1
                   0#
                   Language.PureScript.CoreImp.AST.$tc'Add1) -}
a222bdf18b5257f3ee4c8cfb73121f8d
  $tc'And1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.CoreImp.AST.$tc'And2) -}
ab8af55b82abe1c345a97d08d32c06e6
  $tc'And2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'And"#) -}
76419e1973879c0278ef8c6f67b7d51e
  $tc'App :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14887018794756769621##
                   7864359768066307993##
                   Language.PureScript.CoreImp.AST.$trModule
                   Language.PureScript.CoreImp.AST.$tc'App2
                   0#
                   Language.PureScript.CoreImp.AST.$tc'App1) -}
b1c229a62d05a54bbdb4a8a4e9898490
  $tc'App1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
7e7bc68609c61a1b4fea9af0aa9d10e0
  $tc'App2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.CoreImp.AST.$tc'App3) -}
d7b7f1b3c99859beec45e05f79e0b899
  $tc'App3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'App"#) -}
bc619f01f0707bafcab49166d7621e30
  $tc'ArrayLiteral :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5909720366406456692##
                   2068818451459408722##
                   Language.PureScript.CoreImp.AST.$trModule
                   Language.PureScript.CoreImp.AST.$tc'ArrayLiteral2
                   0#
                   Language.PureScript.CoreImp.AST.$tc'ArrayLiteral1) -}
fa56d1360064908d6fe14637dd1f9518
  $tc'ArrayLiteral1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
7eb7942781ba729d71fa42186675020f
  $tc'ArrayLiteral2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.CoreImp.AST.$tc'ArrayLiteral3) -}
9c72a06e7ddaef0104f40f7b9cffe556
  $tc'ArrayLiteral3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ArrayLiteral"#) -}
033d43487baebea220910a8c0393e077
  $tc'Assignment :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5640027798839554757##
                   4091510287229175260##
                   Language.PureScript.CoreImp.AST.$trModule
                   Language.PureScript.CoreImp.AST.$tc'Assignment2
                   0#
                   Language.PureScript.CoreImp.AST.$tc'Assignment1) -}
03a41bfd22f017257e195af3a888837e
  $tc'Assignment1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
c8c1f8cc85cbc8e1771babec9618c5d8
  $tc'Assignment2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.CoreImp.AST.$tc'Assignment3) -}
3f8db9c95bb0bbdabb0a38a950c31165
  $tc'Assignment3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Assignment"#) -}
6f5b0114c7449fda0533fd50fffc2f97
  $tc'Binary :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2110352330607335770##
                   6359667053418174961##
                   Language.PureScript.CoreImp.AST.$trModule
                   Language.PureScript.CoreImp.AST.$tc'Binary2
                   0#
                   Language.PureScript.CoreImp.AST.$tc'Binary1) -}
b31ac934168bddf197e06326dddafbb8
  $tc'Binary1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
a868b2b858874df079eb9df8d951e191
  $tc'Binary2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.CoreImp.AST.$tc'Binary3) -}
1fbf788319c49469e17c832cb0270077
  $tc'Binary3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Binary"#) -}
2f09991fbdc6c441c5f92d761aaeccc1
  $tc'BitwiseAnd :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6606849129754860240##
                   5301117875192279682##
                   Language.PureScript.CoreImp.AST.$trModule
                   Language.PureScript.CoreImp.AST.$tc'BitwiseAnd1
                   0#
                   Language.PureScript.CoreImp.AST.$tc'Add1) -}
8b98887204731831d5733eadd8537332
  $tc'BitwiseAnd1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.CoreImp.AST.$tc'BitwiseAnd2) -}
f7ec33958d22132d25fbc59b253bc45a
  $tc'BitwiseAnd2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'BitwiseAnd"#) -}
c7e07db6447fbc3ac2a430321188a2aa
  $tc'BitwiseNot :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9081369765360993431##
                   1528236763187489841##
                   Language.PureScript.CoreImp.AST.$trModule
                   Language.PureScript.CoreImp.AST.$tc'BitwiseNot2
                   0#
                   Language.PureScript.CoreImp.AST.$tc'BitwiseNot1) -}
864aa1431427237fb55daf5e37aa7585
  $tc'BitwiseNot1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
601b7a2032750b7746fc016e57361182
  $tc'BitwiseNot2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.CoreImp.AST.$tc'BitwiseNot3) -}
3632a57582630c99d8a0c63f6e123b44
  $tc'BitwiseNot3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'BitwiseNot"#) -}
530bfcbc8abd988c9552cd9119ac2753
  $tc'BitwiseOr :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1866884747819710723##
                   11986254680598366456##
                   Language.PureScript.CoreImp.AST.$trModule
                   Language.PureScript.CoreImp.AST.$tc'BitwiseOr1
                   0#
                   Language.PureScript.CoreImp.AST.$tc'Add1) -}
fef3691458a2caedcba0b8ac574832d9
  $tc'BitwiseOr1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.CoreImp.AST.$tc'BitwiseOr2) -}
689bf8faa191b9a55182501baf5fdb74
  $tc'BitwiseOr2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'BitwiseOr"#) -}
d84f992c42c2b22a7022b05426f23602
  $tc'BitwiseXor :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2956743783456511223##
                   3794802480045878858##
                   Language.PureScript.CoreImp.AST.$trModule
                   Language.PureScript.CoreImp.AST.$tc'BitwiseXor1
                   0#
                   Language.PureScript.CoreImp.AST.$tc'Add1) -}
ae1f13915eac9033d7feca67ef3397c9
  $tc'BitwiseXor1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.CoreImp.AST.$tc'BitwiseXor2) -}
949ad7e8bd6a3c08225848d9123457eb
  $tc'BitwiseXor2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'BitwiseXor"#) -}
569e011e2a6b525b19f7d3ebba8df57b
  $tc'Block :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4653101497005231846##
                   7936004133457919412##
                   Language.PureScript.CoreImp.AST.$trModule
                   Language.PureScript.CoreImp.AST.$tc'Block1
                   0#
                   Language.PureScript.CoreImp.AST.$tc'ArrayLiteral1) -}
a00efd1badbd46cb00662592c234ecc3
  $tc'Block1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.CoreImp.AST.$tc'Block2) -}
d2a6121fad6550ddf3c8ec548dda5da4
  $tc'Block2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Block"#) -}
c61cf68f875bd5cedff3722ea77ab267
  $tc'BooleanLiteral :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8631476035269153339##
                   1491935278530055900##
                   Language.PureScript.CoreImp.AST.$trModule
                   Language.PureScript.CoreImp.AST.$tc'BooleanLiteral2
                   0#
                   Language.PureScript.CoreImp.AST.$tc'BooleanLiteral1) -}
c5fe59a91b2bc20d55a4a2cbf00013c1
  $tc'BooleanLiteral1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
eeb40f06a86ce8b4e9ff88e62a3ca08b
  $tc'BooleanLiteral2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.CoreImp.AST.$tc'BooleanLiteral3) -}
28dc97421a49ec06dcb9a04377a83280
  $tc'BooleanLiteral3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'BooleanLiteral"#) -}
bb3864d4dcde8b6965cbb80f34f376e2
  $tc'Comment :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14874230127832251181##
                   8598163946125098824##
                   Language.PureScript.CoreImp.AST.$trModule
                   Language.PureScript.CoreImp.AST.$tc'Comment2
                   0#
                   Language.PureScript.CoreImp.AST.$tc'Comment1) -}
51785de2236918c28bf314b15c11f068
  $tc'Comment1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
5e8fe7dc49c32f80a4c823a5170d4798
  $tc'Comment2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.CoreImp.AST.$tc'Comment3) -}
9e1747c2186d86d862d5aaa392c3e9a6
  $tc'Comment3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Comment"#) -}
549467547a8761c762551bb6c8245c01
  $tc'Divide :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2026963193547251526##
                   11975037419991682617##
                   Language.PureScript.CoreImp.AST.$trModule
                   Language.PureScript.CoreImp.AST.$tc'Divide1
                   0#
                   Language.PureScript.CoreImp.AST.$tc'Add1) -}
c712f4e6561f9410a6873b54804b83a0
  $tc'Divide1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.CoreImp.AST.$tc'Divide2) -}
ca15115a1ed8fc7267b8376c005304dd
  $tc'Divide2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Divide"#) -}
f4676854140282671bee5f3a7838afde
  $tc'EqualTo :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14278502820246993183##
                   15824456157857478646##
                   Language.PureScript.CoreImp.AST.$trModule
                   Language.PureScript.CoreImp.AST.$tc'EqualTo1
                   0#
                   Language.PureScript.CoreImp.AST.$tc'Add1) -}
49e8848d2c52ff7cfe433cbae1197724
  $tc'EqualTo1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.CoreImp.AST.$tc'EqualTo2) -}
b9abf5b3ccbc4ab7ea36bc3577830be3
  $tc'EqualTo2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'EqualTo"#) -}
07367511990c0d005eded9874d69c523
  $tc'For :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12040144068705208174##
                   6017445323524688##
                   Language.PureScript.CoreImp.AST.$trModule
                   Language.PureScript.CoreImp.AST.$tc'For2
                   0#
                   Language.PureScript.CoreImp.AST.$tc'For1) -}
db3fb34b652df02c713af1a50b411092
  $tc'For1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
83b05425bdfaf8ffa10b4f1c7eb32f3d
  $tc'For2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.CoreImp.AST.$tc'For3) -}
88061a654426172473faab97f655a558
  $tc'For3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'For"#) -}
0a107cbaf81673c26140d6e0b3705c2e
  $tc'ForIn :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3147507205349626392##
                   3820509991635392526##
                   Language.PureScript.CoreImp.AST.$trModule
                   Language.PureScript.CoreImp.AST.$tc'ForIn2
                   0#
                   Language.PureScript.CoreImp.AST.$tc'ForIn1) -}
e2ff7acb7a0a8ac76517a186faf9fdd6
  $tc'ForIn1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
fd4a7e5168caff7c2dce084b3fbf95db
  $tc'ForIn2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.CoreImp.AST.$tc'ForIn3) -}
21faac4e8b9de008193817c9dbc06f86
  $tc'ForIn3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ForIn"#) -}
277cb4f4c78a8502dfae66b1af490054
  $tc'Function :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   318674962880186207##
                   5015473735233871466##
                   Language.PureScript.CoreImp.AST.$trModule
                   Language.PureScript.CoreImp.AST.$tc'Function2
                   0#
                   Language.PureScript.CoreImp.AST.$tc'Function1) -}
befb45f513fb55a1d49750cbfcb30ef3
  $tc'Function1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
aec64067e4b8fc9036485e7619b1a2c4
  $tc'Function2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.CoreImp.AST.$tc'Function3) -}
3eb5b78ec83e8fc6c250c89c155ce804
  $tc'Function3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Function"#) -}
defa7ed7f560099c26ce2c7e3e5543d3
  $tc'GreaterThan :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12560312075964449385##
                   3333767552321877970##
                   Language.PureScript.CoreImp.AST.$trModule
                   Language.PureScript.CoreImp.AST.$tc'GreaterThan1
                   0#
                   Language.PureScript.CoreImp.AST.$tc'Add1) -}
2c264b4163bc7420f7a3a0e7d028a5c9
  $tc'GreaterThan1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.CoreImp.AST.$tc'GreaterThan2) -}
2515db9f6db609dadfd1ef8b2a4e8662
  $tc'GreaterThan2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'GreaterThan"#) -}
988029cbdd0e70f730847236e2554373
  $tc'GreaterThanOrEqualTo :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5277502200509773194##
                   3852879871207625265##
                   Language.PureScript.CoreImp.AST.$trModule
                   Language.PureScript.CoreImp.AST.$tc'GreaterThanOrEqualTo1
                   0#
                   Language.PureScript.CoreImp.AST.$tc'Add1) -}
b2bf240d65a7fba5f5f2bd17c464c66f
  $tc'GreaterThanOrEqualTo1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.CoreImp.AST.$tc'GreaterThanOrEqualTo2) -}
76ed31a4e452674ef7e0f1bd01170b07
  $tc'GreaterThanOrEqualTo2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'GreaterThanOrEqualTo"#) -}
204e4e06a3edbf666ce03f466bb55734
  $tc'IfElse :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17133568684893468704##
                   1782127601203185490##
                   Language.PureScript.CoreImp.AST.$trModule
                   Language.PureScript.CoreImp.AST.$tc'IfElse2
                   0#
                   Language.PureScript.CoreImp.AST.$tc'IfElse1) -}
8b777db6b630e67da92a755853737690
  $tc'IfElse1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
03184e0c756bdf3203429ec60f7c9255
  $tc'IfElse2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.CoreImp.AST.$tc'IfElse3) -}
3e4172e578794a7601178b66b01913cc
  $tc'IfElse3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IfElse"#) -}
6f3399be0ee2e1d34f5b490505890063
  $tc'Indexer :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2511313724477219672##
                   1795780432065694247##
                   Language.PureScript.CoreImp.AST.$trModule
                   Language.PureScript.CoreImp.AST.$tc'Indexer1
                   0#
                   Language.PureScript.CoreImp.AST.$tc'Assignment1) -}
4485f30b72e3c5630c2a143a27e9799b
  $tc'Indexer1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.CoreImp.AST.$tc'Indexer2) -}
7f50763a92d612e43e75e3e1924dd25a
  $tc'Indexer2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Indexer"#) -}
241cd582b41cd01d75535a575ac84a8f
  $tc'InstanceOf :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18060748697366112038##
                   17767229695137664680##
                   Language.PureScript.CoreImp.AST.$trModule
                   Language.PureScript.CoreImp.AST.$tc'InstanceOf1
                   0#
                   Language.PureScript.CoreImp.AST.$tc'Assignment1) -}
367b94368df87ed32f0e0e2fcc87c945
  $tc'InstanceOf1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.CoreImp.AST.$tc'InstanceOf2) -}
17697b2725f581e9b93176f760a03678
  $tc'InstanceOf2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'InstanceOf"#) -}
d30c9eed57f5b8cdb53021f31db88940
  $tc'LessThan :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18062848360977069216##
                   8393759980534730426##
                   Language.PureScript.CoreImp.AST.$trModule
                   Language.PureScript.CoreImp.AST.$tc'LessThan1
                   0#
                   Language.PureScript.CoreImp.AST.$tc'Add1) -}
8e0275f048d37adebb8450191d4a6918
  $tc'LessThan1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.CoreImp.AST.$tc'LessThan2) -}
e6396fee7ea3cae278d8a70c0a220a1c
  $tc'LessThan2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'LessThan"#) -}
c04901f00aec6b6ac53f72daa3ebd0b5
  $tc'LessThanOrEqualTo :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7157522628653726112##
                   10221008471769840662##
                   Language.PureScript.CoreImp.AST.$trModule
                   Language.PureScript.CoreImp.AST.$tc'LessThanOrEqualTo1
                   0#
                   Language.PureScript.CoreImp.AST.$tc'Add1) -}
a030757dde5ad475596e8075dbec999c
  $tc'LessThanOrEqualTo1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.CoreImp.AST.$tc'LessThanOrEqualTo2) -}
619782c3737fcbbc1819b0dfaad65d20
  $tc'LessThanOrEqualTo2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'LessThanOrEqualTo"#) -}
2442d569dce827a1251fbf9754c199ad
  $tc'Modulus :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7572246120236086969##
                   233641807464474924##
                   Language.PureScript.CoreImp.AST.$trModule
                   Language.PureScript.CoreImp.AST.$tc'Modulus1
                   0#
                   Language.PureScript.CoreImp.AST.$tc'Add1) -}
7dee58e2f7102c502f6b3a057c0d5978
  $tc'Modulus1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.CoreImp.AST.$tc'Modulus2) -}
9075e0117d9ef3e90e4576be5a958d34
  $tc'Modulus2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Modulus"#) -}
41800634dd0aaaf8d3959420749db5ee
  $tc'Multiply :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10623822623718128876##
                   6523503075099622694##
                   Language.PureScript.CoreImp.AST.$trModule
                   Language.PureScript.CoreImp.AST.$tc'Multiply1
                   0#
                   Language.PureScript.CoreImp.AST.$tc'Add1) -}
bbd1a50c9680a4f86884fc4ccb778851
  $tc'Multiply1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.CoreImp.AST.$tc'Multiply2) -}
ebcde2c10a14e98680524e0ad659d0b1
  $tc'Multiply2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Multiply"#) -}
b152474dbb57c7775290b80fc890739c
  $tc'Negate :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17003343186617252863##
                   1432310545358361359##
                   Language.PureScript.CoreImp.AST.$trModule
                   Language.PureScript.CoreImp.AST.$tc'Negate1
                   0#
                   Language.PureScript.CoreImp.AST.$tc'BitwiseNot1) -}
70bca4b900854696f78a006e805ee43d
  $tc'Negate1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.CoreImp.AST.$tc'Negate2) -}
aadddad9abd049dbc418ae5af93ba884
  $tc'Negate2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Negate"#) -}
0a6d0fc2376f3ceaf6ca7dd6ed49427c
  $tc'New :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8502064723038599922##
                   597737501911624803##
                   Language.PureScript.CoreImp.AST.$trModule
                   Language.PureScript.CoreImp.AST.$tc'New1
                   0#
                   Language.PureScript.CoreImp.AST.$tc'BitwiseNot1) -}
45dc5826a6687cb1ad51cb08822048a6
  $tc'New1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.CoreImp.AST.$tc'New2) -}
41baf4ea7c6f6306718e92b4e9128704
  $tc'New2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'New"#) -}
538217fea6f8e6c546dae49b31162108
  $tc'Not :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12491518666302274862##
                   12198223332343884071##
                   Language.PureScript.CoreImp.AST.$trModule
                   Language.PureScript.CoreImp.AST.$tc'Not1
                   0#
                   Language.PureScript.CoreImp.AST.$tc'BitwiseNot1) -}
ec8d0f28b0ddefca03baa15317a74a92
  $tc'Not1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.CoreImp.AST.$tc'Not2) -}
d3008ee6c4c514e38b6526fdf826d9e0
  $tc'Not2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Not"#) -}
72c43c041c0e3d94f3c749d86686965a
  $tc'NotEqualTo :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9894067338132822193##
                   16717345872954707601##
                   Language.PureScript.CoreImp.AST.$trModule
                   Language.PureScript.CoreImp.AST.$tc'NotEqualTo1
                   0#
                   Language.PureScript.CoreImp.AST.$tc'Add1) -}
522c7f5819e33aa76a1d2debd7e03952
  $tc'NotEqualTo1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.CoreImp.AST.$tc'NotEqualTo2) -}
a03ed2a2434fbdf0507d38d54055225a
  $tc'NotEqualTo2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'NotEqualTo"#) -}
9b9a013f524c33c2d7619d986f5d47e3
  $tc'NumericLiteral :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9267906331224193246##
                   13096794509739556624##
                   Language.PureScript.CoreImp.AST.$trModule
                   Language.PureScript.CoreImp.AST.$tc'NumericLiteral2
                   0#
                   Language.PureScript.CoreImp.AST.$tc'NumericLiteral1) -}
943840fe8af5c18791779a1145f88c61
  $tc'NumericLiteral1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
29f4a60e046f3572c2ee438d147f5dc0
  $tc'NumericLiteral2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.CoreImp.AST.$tc'NumericLiteral3) -}
912f2df0dab77b7748fc92240cd439aa
  $tc'NumericLiteral3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'NumericLiteral"#) -}
6194cd8b67341cf0fe6022f8045066c1
  $tc'ObjectLiteral :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2526333968052768743##
                   69911847416422025##
                   Language.PureScript.CoreImp.AST.$trModule
                   Language.PureScript.CoreImp.AST.$tc'ObjectLiteral2
                   0#
                   Language.PureScript.CoreImp.AST.$tc'ObjectLiteral1) -}
3818d3e47ef8c4f04f60fe6a7d88a22d
  $tc'ObjectLiteral1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
15a9907fcc5d36af7f3364824d746a52
  $tc'ObjectLiteral2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.CoreImp.AST.$tc'ObjectLiteral3) -}
50462c4d4e1ac5d27ea6a3e0ac68f3b6
  $tc'ObjectLiteral3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ObjectLiteral"#) -}
291c8664545f6cf25854668406b6ceb3
  $tc'Or :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9941781909590129281##
                   2672933873978074682##
                   Language.PureScript.CoreImp.AST.$trModule
                   Language.PureScript.CoreImp.AST.$tc'Or1
                   0#
                   Language.PureScript.CoreImp.AST.$tc'Add1) -}
5740313c499199e4fed37147518c5c0b
  $tc'Or1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.CoreImp.AST.$tc'Or2) -}
028dee4948adf139ec7dba7bab02e1e0
  $tc'Or2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Or"#) -}
2f77ada9f3e232ec85a808ad90687fb9
  $tc'Positive :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2127292941247998205##
                   3293096544984048004##
                   Language.PureScript.CoreImp.AST.$trModule
                   Language.PureScript.CoreImp.AST.$tc'Positive1
                   0#
                   Language.PureScript.CoreImp.AST.$tc'BitwiseNot1) -}
37e3b5c05cf54a75b8d11d106c8cc0ad
  $tc'Positive1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.CoreImp.AST.$tc'Positive2) -}
9ed48db9b3bb1bda68e2b0188d59b12f
  $tc'Positive2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Positive"#) -}
ae368ff0bb5a0dad649baa407094e2d6
  $tc'Return :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8776663371961756721##
                   14960161862050620858##
                   Language.PureScript.CoreImp.AST.$trModule
                   Language.PureScript.CoreImp.AST.$tc'Return2
                   0#
                   Language.PureScript.CoreImp.AST.$tc'Return1) -}
334f3e6185cb05e26278f70f4c395130
  $tc'Return1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
81273608e1767f1e56fa6aba0ebf2461
  $tc'Return2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.CoreImp.AST.$tc'Return3) -}
543712e68cadb8c0c22148b44de53c44
  $tc'Return3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Return"#) -}
76d9fe0f3d4d0f1907296961555f3e4e
  $tc'ReturnNoResult :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9414157426427779638##
                   304985171258980542##
                   Language.PureScript.CoreImp.AST.$trModule
                   Language.PureScript.CoreImp.AST.$tc'ReturnNoResult2
                   0#
                   Language.PureScript.CoreImp.AST.$tc'ReturnNoResult1) -}
3a0aa0399911cc0fe474b27930c8e326
  $tc'ReturnNoResult1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
5402126ab7357d414d9e79659430e450
  $tc'ReturnNoResult2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.CoreImp.AST.$tc'ReturnNoResult3) -}
40c859e2f473d8c23d45ee7a28752864
  $tc'ReturnNoResult3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ReturnNoResult"#) -}
2fb54f07c7b09c903e6b9f754019d265
  $tc'ShiftLeft :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18325971598779836165##
                   5293787063503853576##
                   Language.PureScript.CoreImp.AST.$trModule
                   Language.PureScript.CoreImp.AST.$tc'ShiftLeft1
                   0#
                   Language.PureScript.CoreImp.AST.$tc'Add1) -}
b08b705c297ef26aef34c299cb08a133
  $tc'ShiftLeft1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.CoreImp.AST.$tc'ShiftLeft2) -}
a522100086f7a5a64e652ceac504c48e
  $tc'ShiftLeft2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ShiftLeft"#) -}
47a4cd639544da13b30dbf7ff403fd15
  $tc'ShiftRight :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11602065321901307320##
                   4148132937171686229##
                   Language.PureScript.CoreImp.AST.$trModule
                   Language.PureScript.CoreImp.AST.$tc'ShiftRight1
                   0#
                   Language.PureScript.CoreImp.AST.$tc'Add1) -}
f394458ecd3da8ca1b46243b1a8b35e4
  $tc'ShiftRight1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.CoreImp.AST.$tc'ShiftRight2) -}
86ce9842930f53ab5013570a30da6b55
  $tc'ShiftRight2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ShiftRight"#) -}
4225a2ce466ed18cc4c0bcbb27c9b846
  $tc'StringLiteral :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12784955586421151616##
                   9746803567009727218##
                   Language.PureScript.CoreImp.AST.$trModule
                   Language.PureScript.CoreImp.AST.$tc'StringLiteral2
                   0#
                   Language.PureScript.CoreImp.AST.$tc'StringLiteral1) -}
39524ae2fae018d02f0edb28cfb3ce7c
  $tc'StringLiteral1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
35d42df394db1a97e9418ea385f1bb7a
  $tc'StringLiteral2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.CoreImp.AST.$tc'StringLiteral3) -}
17c91756c8aa97be396347ef5f3e1d32
  $tc'StringLiteral3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'StringLiteral"#) -}
ba42d0c95c5371895c1641d3b5507e3e
  $tc'Subtract :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16435206347539229667##
                   11895043900278620079##
                   Language.PureScript.CoreImp.AST.$trModule
                   Language.PureScript.CoreImp.AST.$tc'Subtract1
                   0#
                   Language.PureScript.CoreImp.AST.$tc'Add1) -}
edbe1eb27674a1dc0c52eaea1b5c2e64
  $tc'Subtract1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.CoreImp.AST.$tc'Subtract2) -}
39481097296c56ad630bc56d92cf416a
  $tc'Subtract2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Subtract"#) -}
44fa952980804b530436a80cbc6f8b1d
  $tc'Throw :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15624160507474042637##
                   5756794802049385510##
                   Language.PureScript.CoreImp.AST.$trModule
                   Language.PureScript.CoreImp.AST.$tc'Throw1
                   0#
                   Language.PureScript.CoreImp.AST.$tc'Return1) -}
2b98f5b0286d932bafd0934665b11afd
  $tc'Throw1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.CoreImp.AST.$tc'Throw2) -}
f563f030b1340a514daf00179a421cc1
  $tc'Throw2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Throw"#) -}
b840eca471665a115cf96bcc1f6f67ab
  $tc'Unary :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8524053543347013763##
                   1119872409837548145##
                   Language.PureScript.CoreImp.AST.$trModule
                   Language.PureScript.CoreImp.AST.$tc'Unary2
                   0#
                   Language.PureScript.CoreImp.AST.$tc'Unary1) -}
f2a133a05ea8dafb973abd7d200da660
  $tc'Unary1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
b7a2a896762c593502111ec0bff1cb6a
  $tc'Unary2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.CoreImp.AST.$tc'Unary3) -}
2393c0cde9f23a4abe21a6be2aa7a6a1
  $tc'Unary3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Unary"#) -}
bda1a9b9ec1c9bdd34e7181b852527df
  $tc'Var :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11473545743053423103##
                   6186107868757151952##
                   Language.PureScript.CoreImp.AST.$trModule
                   Language.PureScript.CoreImp.AST.$tc'Var2
                   0#
                   Language.PureScript.CoreImp.AST.$tc'Var1) -}
ce9e47618dd360f23ac266dbcf6ea1f0
  $tc'Var1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
1d66f9fa81fe10865436f155898823a3
  $tc'Var2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.CoreImp.AST.$tc'Var3) -}
331ce725931efbeeec330a8aa1189ef0
  $tc'Var3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Var"#) -}
3142056e886b7a6260b79de65ba3bddf
  $tc'VariableIntroduction :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2997588350819273851##
                   15623086803036708261##
                   Language.PureScript.CoreImp.AST.$trModule
                   Language.PureScript.CoreImp.AST.$tc'VariableIntroduction2
                   0#
                   Language.PureScript.CoreImp.AST.$tc'VariableIntroduction1) -}
526a764fd83bbe5cb1610efdedf3e47f
  $tc'VariableIntroduction1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
03d8b89a297f21fb23fe9a7684e06771
  $tc'VariableIntroduction2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.CoreImp.AST.$tc'VariableIntroduction3) -}
97dee513e742e02bcda27019b5704413
  $tc'VariableIntroduction3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'VariableIntroduction"#) -}
8a0b305cb69875ba072c9c84cce8f8ae
  $tc'While :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10431679429168400470##
                   1681769245078465691##
                   Language.PureScript.CoreImp.AST.$trModule
                   Language.PureScript.CoreImp.AST.$tc'While1
                   0#
                   Language.PureScript.CoreImp.AST.$tc'Assignment1) -}
606dfc2bc425c0e4788e9596aba137c5
  $tc'While1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.CoreImp.AST.$tc'While2) -}
1542a0db8c688d416ac91e441fec4bc2
  $tc'While2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'While"#) -}
8fbc76e9c5b98b5622def59d14cb3fa7
  $tc'ZeroFillShiftRight :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12519193249223603188##
                   16789968474941440905##
                   Language.PureScript.CoreImp.AST.$trModule
                   Language.PureScript.CoreImp.AST.$tc'ZeroFillShiftRight1
                   0#
                   Language.PureScript.CoreImp.AST.$tc'Add1) -}
98823dfdc802d14f34a098a2f9d3844b
  $tc'ZeroFillShiftRight1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.CoreImp.AST.$tc'ZeroFillShiftRight2) -}
19e2ce85241f00914afb82d126b4a6c3
  $tc'ZeroFillShiftRight2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ZeroFillShiftRight"#) -}
3ad7ab63f794ab27c1982b9549bb3609
  $tcAST :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12149549072931955532##
                   5834549082498677048##
                   Language.PureScript.CoreImp.AST.$trModule
                   Language.PureScript.CoreImp.AST.$tcAST1
                   0#
                   GHC.Types.krep$*) -}
5fecbb0ae91f41e8aee72731f43ec14c
  $tcAST1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.CoreImp.AST.$tcAST2) -}
4d5bd5cf25f011c55f61103fc8a087cd
  $tcAST2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("AST"#) -}
42f40f4b298a638da5f1c9d7af6af2d0
  $tcBinaryOperator :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13588926914091892493##
                   8139520292855331966##
                   Language.PureScript.CoreImp.AST.$trModule
                   Language.PureScript.CoreImp.AST.$tcBinaryOperator1
                   0#
                   GHC.Types.krep$*) -}
6427632e3428d287ec93f7f759f9600e
  $tcBinaryOperator1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.CoreImp.AST.$tcBinaryOperator2) -}
6f0d1a6f5c290bded208dba57335377d
  $tcBinaryOperator2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("BinaryOperator"#) -}
f4b4ec7a2f54223c68e0043bdde1ca35
  $tcUnaryOperator :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5670607568164505898##
                   11385973257054828850##
                   Language.PureScript.CoreImp.AST.$trModule
                   Language.PureScript.CoreImp.AST.$tcUnaryOperator1
                   0#
                   GHC.Types.krep$*) -}
eac189e93300a4b298cd209e472c7ce4
  $tcUnaryOperator1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.CoreImp.AST.$tcUnaryOperator2) -}
549529ca8a0b991519a1bfa230d1dc2c
  $tcUnaryOperator2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("UnaryOperator"#) -}
491399e98bd345c992b3d0235ed050f0
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Language.PureScript.CoreImp.AST.$trModule3
                   Language.PureScript.CoreImp.AST.$trModule1) -}
e7449b4126b79fda26ec177147ba6ff8
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.CoreImp.AST.$trModule2) -}
2d61afa21dd9fc8f4d3f255144998416
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Language.PureScript.CoreImp.AST"#) -}
aa223b7491f7da1055cd4a5b6c6e3076
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.CoreImp.AST.$trModule4) -}
50144cfde38e7a569a210b475cd9c1dc
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"#) -}
27e474366a6164e874a6d4e5cad82745
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> Language.PureScript.CoreImp.AST.AST -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [0] -}
489f0b1ed508c6f848c3aae91aed6e07
  $w$cshowsPrec1 ::
    Language.PureScript.CoreImp.AST.BinaryOperator
    -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0] -}
25c18297338795f6f1b7341e3c4ca5dd
  $w$cshowsPrec2 ::
    Language.PureScript.CoreImp.AST.UnaryOperator
    -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: Language.PureScript.CoreImp.AST.UnaryOperator)
                   (w1 :: GHC.Base.String) ->
                 case w of wild {
                   Language.PureScript.CoreImp.AST.Negate
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.CoreImp.AST.$fShowUnaryOperator9
                        w1
                   Language.PureScript.CoreImp.AST.Not
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.CoreImp.AST.$fShowUnaryOperator7
                        w1
                   Language.PureScript.CoreImp.AST.BitwiseNot
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.CoreImp.AST.$fShowUnaryOperator5
                        w1
                   Language.PureScript.CoreImp.AST.Positive
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.CoreImp.AST.$fShowUnaryOperator3
                        w1
                   Language.PureScript.CoreImp.AST.New
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.CoreImp.AST.$fShowUnaryOperator1
                        w1 }) -}
27e474366a6164e874a6d4e5cad82745
  data AST
    = NumericLiteral (GHC.Base.Maybe
                        Language.PureScript.AST.SourcePos.SourceSpan)
                     (Data.Either.Either GHC.Integer.Type.Integer GHC.Types.Double)
    | StringLiteral (GHC.Base.Maybe
                       Language.PureScript.AST.SourcePos.SourceSpan)
                    Language.PureScript.PSString.PSString
    | BooleanLiteral (GHC.Base.Maybe
                        Language.PureScript.AST.SourcePos.SourceSpan)
                     GHC.Types.Bool
    | Unary (GHC.Base.Maybe
               Language.PureScript.AST.SourcePos.SourceSpan)
            Language.PureScript.CoreImp.AST.UnaryOperator
            Language.PureScript.CoreImp.AST.AST
    | Binary (GHC.Base.Maybe
                Language.PureScript.AST.SourcePos.SourceSpan)
             Language.PureScript.CoreImp.AST.BinaryOperator
             Language.PureScript.CoreImp.AST.AST
             Language.PureScript.CoreImp.AST.AST
    | ArrayLiteral (GHC.Base.Maybe
                      Language.PureScript.AST.SourcePos.SourceSpan)
                   [Language.PureScript.CoreImp.AST.AST]
    | Indexer (GHC.Base.Maybe
                 Language.PureScript.AST.SourcePos.SourceSpan)
              Language.PureScript.CoreImp.AST.AST
              Language.PureScript.CoreImp.AST.AST
    | ObjectLiteral (GHC.Base.Maybe
                       Language.PureScript.AST.SourcePos.SourceSpan)
                    [(Language.PureScript.PSString.PSString,
                      Language.PureScript.CoreImp.AST.AST)]
    | Function (GHC.Base.Maybe
                  Language.PureScript.AST.SourcePos.SourceSpan)
               (GHC.Base.Maybe Data.Text.Internal.Text)
               [Data.Text.Internal.Text]
               Language.PureScript.CoreImp.AST.AST
    | App (GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan)
          Language.PureScript.CoreImp.AST.AST
          [Language.PureScript.CoreImp.AST.AST]
    | Var (GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan)
          Data.Text.Internal.Text
    | Block (GHC.Base.Maybe
               Language.PureScript.AST.SourcePos.SourceSpan)
            [Language.PureScript.CoreImp.AST.AST]
    | VariableIntroduction (GHC.Base.Maybe
                              Language.PureScript.AST.SourcePos.SourceSpan)
                           Data.Text.Internal.Text
                           (GHC.Base.Maybe Language.PureScript.CoreImp.AST.AST)
    | Assignment (GHC.Base.Maybe
                    Language.PureScript.AST.SourcePos.SourceSpan)
                 Language.PureScript.CoreImp.AST.AST
                 Language.PureScript.CoreImp.AST.AST
    | While (GHC.Base.Maybe
               Language.PureScript.AST.SourcePos.SourceSpan)
            Language.PureScript.CoreImp.AST.AST
            Language.PureScript.CoreImp.AST.AST
    | For (GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan)
          Data.Text.Internal.Text
          Language.PureScript.CoreImp.AST.AST
          Language.PureScript.CoreImp.AST.AST
          Language.PureScript.CoreImp.AST.AST
    | ForIn (GHC.Base.Maybe
               Language.PureScript.AST.SourcePos.SourceSpan)
            Data.Text.Internal.Text
            Language.PureScript.CoreImp.AST.AST
            Language.PureScript.CoreImp.AST.AST
    | IfElse (GHC.Base.Maybe
                Language.PureScript.AST.SourcePos.SourceSpan)
             Language.PureScript.CoreImp.AST.AST
             Language.PureScript.CoreImp.AST.AST
             (GHC.Base.Maybe Language.PureScript.CoreImp.AST.AST)
    | Return (GHC.Base.Maybe
                Language.PureScript.AST.SourcePos.SourceSpan)
             Language.PureScript.CoreImp.AST.AST
    | ReturnNoResult (GHC.Base.Maybe
                        Language.PureScript.AST.SourcePos.SourceSpan)
    | Throw (GHC.Base.Maybe
               Language.PureScript.AST.SourcePos.SourceSpan)
            Language.PureScript.CoreImp.AST.AST
    | InstanceOf (GHC.Base.Maybe
                    Language.PureScript.AST.SourcePos.SourceSpan)
                 Language.PureScript.CoreImp.AST.AST
                 Language.PureScript.CoreImp.AST.AST
    | Comment (GHC.Base.Maybe
                 Language.PureScript.AST.SourcePos.SourceSpan)
              [Language.PureScript.Comments.Comment]
              Language.PureScript.CoreImp.AST.AST
489f0b1ed508c6f848c3aae91aed6e07
  data BinaryOperator
    = Add
    | Subtract
    | Multiply
    | Divide
    | Modulus
    | EqualTo
    | NotEqualTo
    | LessThan
    | LessThanOrEqualTo
    | GreaterThan
    | GreaterThanOrEqualTo
    | And
    | Or
    | BitwiseAnd
    | BitwiseOr
    | BitwiseXor
    | ShiftLeft
    | ShiftRight
    | ZeroFillShiftRight
25c18297338795f6f1b7341e3c4ca5dd
  data UnaryOperator = Negate | Not | BitwiseNot | Positive | New
2db98064b3dee88f5ae4efc31c39a098
  everything ::
    (r -> r -> r)
    -> (Language.PureScript.CoreImp.AST.AST -> r)
    -> Language.PureScript.CoreImp.AST.AST
    -> r
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,C(C1(U))><L,C(U)><S,1*U> -}
b72aec4edb3793e6cf984fe7c0beffe3
  everywhere ::
    (Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST)
    -> Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 2, HasNoCafRefs, Strictness: <C(S),C(U)><S,1*U> -}
01ac618ec3874485a8c28a970ba13ab8
  everywhereTopDown ::
    (Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST)
    -> Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 2, HasNoCafRefs, Strictness: <C(S),C(U)><L,U>,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.CoreImp.AST.everywhereTopDown1
                  `cast`
                (<Language.PureScript.CoreImp.AST.AST
                  -> Language.PureScript.CoreImp.AST.AST>_R
                 ->_R <Language.PureScript.CoreImp.AST.AST>_R
                 ->_R Data.Functor.Identity.N:Identity[0]
                          <Language.PureScript.CoreImp.AST.AST>_R) -}
1979035dfec84f1d1797ec81f0ae4bce
  everywhereTopDown1 ::
    (Language.PureScript.CoreImp.AST.AST
     -> Language.PureScript.CoreImp.AST.AST)
    -> Language.PureScript.CoreImp.AST.AST
    -> Data.Functor.Identity.Identity
         Language.PureScript.CoreImp.AST.AST
  {- Arity: 2, HasNoCafRefs, Strictness: <C(S),C(U)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (f10 :: Language.PureScript.CoreImp.AST.AST
                           -> Language.PureScript.CoreImp.AST.AST)
                   (eta :: Language.PureScript.CoreImp.AST.AST) ->
                 Language.PureScript.CoreImp.AST.everywhereTopDown_$severywhereTopDownM
                   (\ (x :: Language.PureScript.CoreImp.AST.AST) -> f10 x)
                     `cast`
                   (<Language.PureScript.CoreImp.AST.AST>_R
                    ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                  <Language.PureScript.CoreImp.AST.AST>_R))
                   eta) -}
4b71f6abad916f1f31f0c3fb21573bdc
  everywhereTopDownM ::
    GHC.Base.Monad m =>
    (Language.PureScript.CoreImp.AST.AST
     -> m Language.PureScript.CoreImp.AST.AST)
    -> Language.PureScript.CoreImp.AST.AST
    -> m Language.PureScript.CoreImp.AST.AST
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LC(C(S))LLL),U(1*U(1*U(C(C1(U)),A),C(U),C(C1(U)),C(C1(C1(U))),A,A),C(C1(U)),A,A,A)><L,C(U)><L,U> -}
ac4fbda01880ac6ecae3294a482cf37a
  everywhereTopDown_$severywhereTopDownM ::
    (Language.PureScript.CoreImp.AST.AST
     -> Data.Functor.Identity.Identity
          Language.PureScript.CoreImp.AST.AST)
    -> Language.PureScript.CoreImp.AST.AST
    -> Data.Functor.Identity.Identity
         Language.PureScript.CoreImp.AST.AST
  {- Arity: 2, HasNoCafRefs, Strictness: <C(S),C(U)><L,U> -}
c04ae55c3dff3d09efa81c43bac26965
  getSourceSpan ::
    Language.PureScript.CoreImp.AST.AST
    -> GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Language.PureScript.CoreImp.AST.AST) ->
                 case ds of wild {
                   Language.PureScript.CoreImp.AST.NumericLiteral ss ds1 -> ss
                   Language.PureScript.CoreImp.AST.StringLiteral ss ds1 -> ss
                   Language.PureScript.CoreImp.AST.BooleanLiteral ss ds1 -> ss
                   Language.PureScript.CoreImp.AST.Unary ss ds1 ds2 -> ss
                   Language.PureScript.CoreImp.AST.Binary ss ds1 ds2 ds3 -> ss
                   Language.PureScript.CoreImp.AST.ArrayLiteral ss ds1 -> ss
                   Language.PureScript.CoreImp.AST.Indexer ss ds1 ds2 -> ss
                   Language.PureScript.CoreImp.AST.ObjectLiteral ss ds1 -> ss
                   Language.PureScript.CoreImp.AST.Function ss ds1 ds2 ds3 -> ss
                   Language.PureScript.CoreImp.AST.App ss ds1 ds2 -> ss
                   Language.PureScript.CoreImp.AST.Var ss ds1 -> ss
                   Language.PureScript.CoreImp.AST.Block ss ds1 -> ss
                   Language.PureScript.CoreImp.AST.VariableIntroduction ss ds1 ds2
                   -> ss
                   Language.PureScript.CoreImp.AST.Assignment ss ds1 ds2 -> ss
                   Language.PureScript.CoreImp.AST.While ss ds1 ds2 -> ss
                   Language.PureScript.CoreImp.AST.For ss ds1 ds2 ds3 ds4 -> ss
                   Language.PureScript.CoreImp.AST.ForIn ss ds1 ds2 ds3 -> ss
                   Language.PureScript.CoreImp.AST.IfElse ss ds1 ds2 ds3 -> ss
                   Language.PureScript.CoreImp.AST.Return ss ds1 -> ss
                   Language.PureScript.CoreImp.AST.ReturnNoResult ss -> ss
                   Language.PureScript.CoreImp.AST.Throw ss ds1 -> ss
                   Language.PureScript.CoreImp.AST.InstanceOf ss ds1 ds2 -> ss
                   Language.PureScript.CoreImp.AST.Comment ss ds1 ds2 -> ss }) -}
4c8030dab079a6581ef69436bfbac0a2
  withSourceSpan ::
    Language.PureScript.AST.SourcePos.SourceSpan
    -> Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>,
     Unfolding: (\ (withSpan :: Language.PureScript.AST.SourcePos.SourceSpan)
                   (eta :: Language.PureScript.CoreImp.AST.AST) ->
                 case eta of wild {
                   Language.PureScript.CoreImp.AST.NumericLiteral ds n
                   -> Language.PureScript.CoreImp.AST.NumericLiteral
                        (GHC.Base.Just
                           @ Language.PureScript.AST.SourcePos.SourceSpan
                           withSpan)
                        n
                   Language.PureScript.CoreImp.AST.StringLiteral ds s
                   -> Language.PureScript.CoreImp.AST.StringLiteral
                        (GHC.Base.Just
                           @ Language.PureScript.AST.SourcePos.SourceSpan
                           withSpan)
                        s
                   Language.PureScript.CoreImp.AST.BooleanLiteral ds b
                   -> Language.PureScript.CoreImp.AST.BooleanLiteral
                        (GHC.Base.Just
                           @ Language.PureScript.AST.SourcePos.SourceSpan
                           withSpan)
                        b
                   Language.PureScript.CoreImp.AST.Unary ds op j
                   -> Language.PureScript.CoreImp.AST.Unary
                        (GHC.Base.Just
                           @ Language.PureScript.AST.SourcePos.SourceSpan
                           withSpan)
                        op
                        j
                   Language.PureScript.CoreImp.AST.Binary ds op j1 j2
                   -> Language.PureScript.CoreImp.AST.Binary
                        (GHC.Base.Just
                           @ Language.PureScript.AST.SourcePos.SourceSpan
                           withSpan)
                        op
                        j1
                        j2
                   Language.PureScript.CoreImp.AST.ArrayLiteral ds js
                   -> Language.PureScript.CoreImp.AST.ArrayLiteral
                        (GHC.Base.Just
                           @ Language.PureScript.AST.SourcePos.SourceSpan
                           withSpan)
                        js
                   Language.PureScript.CoreImp.AST.Indexer ds j1 j2
                   -> Language.PureScript.CoreImp.AST.Indexer
                        (GHC.Base.Just
                           @ Language.PureScript.AST.SourcePos.SourceSpan
                           withSpan)
                        j1
                        j2
                   Language.PureScript.CoreImp.AST.ObjectLiteral ds js
                   -> Language.PureScript.CoreImp.AST.ObjectLiteral
                        (GHC.Base.Just
                           @ Language.PureScript.AST.SourcePos.SourceSpan
                           withSpan)
                        js
                   Language.PureScript.CoreImp.AST.Function ds name args j
                   -> Language.PureScript.CoreImp.AST.Function
                        (GHC.Base.Just
                           @ Language.PureScript.AST.SourcePos.SourceSpan
                           withSpan)
                        name
                        args
                        j
                   Language.PureScript.CoreImp.AST.App ds j js
                   -> Language.PureScript.CoreImp.AST.App
                        (GHC.Base.Just
                           @ Language.PureScript.AST.SourcePos.SourceSpan
                           withSpan)
                        j
                        js
                   Language.PureScript.CoreImp.AST.Var ds s
                   -> Language.PureScript.CoreImp.AST.Var
                        (GHC.Base.Just
                           @ Language.PureScript.AST.SourcePos.SourceSpan
                           withSpan)
                        s
                   Language.PureScript.CoreImp.AST.Block ds js
                   -> Language.PureScript.CoreImp.AST.Block
                        (GHC.Base.Just
                           @ Language.PureScript.AST.SourcePos.SourceSpan
                           withSpan)
                        js
                   Language.PureScript.CoreImp.AST.VariableIntroduction ds name j
                   -> Language.PureScript.CoreImp.AST.VariableIntroduction
                        (GHC.Base.Just
                           @ Language.PureScript.AST.SourcePos.SourceSpan
                           withSpan)
                        name
                        j
                   Language.PureScript.CoreImp.AST.Assignment ds j1 j2
                   -> Language.PureScript.CoreImp.AST.Assignment
                        (GHC.Base.Just
                           @ Language.PureScript.AST.SourcePos.SourceSpan
                           withSpan)
                        j1
                        j2
                   Language.PureScript.CoreImp.AST.While ds j1 j2
                   -> Language.PureScript.CoreImp.AST.While
                        (GHC.Base.Just
                           @ Language.PureScript.AST.SourcePos.SourceSpan
                           withSpan)
                        j1
                        j2
                   Language.PureScript.CoreImp.AST.For ds name j1 j2 j3
                   -> Language.PureScript.CoreImp.AST.For
                        (GHC.Base.Just
                           @ Language.PureScript.AST.SourcePos.SourceSpan
                           withSpan)
                        name
                        j1
                        j2
                        j3
                   Language.PureScript.CoreImp.AST.ForIn ds name j1 j2
                   -> Language.PureScript.CoreImp.AST.ForIn
                        (GHC.Base.Just
                           @ Language.PureScript.AST.SourcePos.SourceSpan
                           withSpan)
                        name
                        j1
                        j2
                   Language.PureScript.CoreImp.AST.IfElse ds j1 j2 j3
                   -> Language.PureScript.CoreImp.AST.IfElse
                        (GHC.Base.Just
                           @ Language.PureScript.AST.SourcePos.SourceSpan
                           withSpan)
                        j1
                        j2
                        j3
                   Language.PureScript.CoreImp.AST.Return ds js
                   -> Language.PureScript.CoreImp.AST.Return
                        (GHC.Base.Just
                           @ Language.PureScript.AST.SourcePos.SourceSpan
                           withSpan)
                        js
                   Language.PureScript.CoreImp.AST.ReturnNoResult ds
                   -> Language.PureScript.CoreImp.AST.ReturnNoResult
                        (GHC.Base.Just
                           @ Language.PureScript.AST.SourcePos.SourceSpan
                           withSpan)
                   Language.PureScript.CoreImp.AST.Throw ds js
                   -> Language.PureScript.CoreImp.AST.Throw
                        (GHC.Base.Just
                           @ Language.PureScript.AST.SourcePos.SourceSpan
                           withSpan)
                        js
                   Language.PureScript.CoreImp.AST.InstanceOf ds j1 j2
                   -> Language.PureScript.CoreImp.AST.InstanceOf
                        (GHC.Base.Just
                           @ Language.PureScript.AST.SourcePos.SourceSpan
                           withSpan)
                        j1
                        j2
                   Language.PureScript.CoreImp.AST.Comment ds com j
                   -> Language.PureScript.CoreImp.AST.Comment
                        (GHC.Base.Just
                           @ Language.PureScript.AST.SourcePos.SourceSpan
                           withSpan)
                        com
                        j }) -}
instance GHC.Classes.Eq [Language.PureScript.CoreImp.AST.AST]
  = Language.PureScript.CoreImp.AST.$fEqAST
instance GHC.Classes.Eq [Language.PureScript.CoreImp.AST.BinaryOperator]
  = Language.PureScript.CoreImp.AST.$fEqBinaryOperator
instance GHC.Classes.Eq [Language.PureScript.CoreImp.AST.UnaryOperator]
  = Language.PureScript.CoreImp.AST.$fEqUnaryOperator
instance GHC.Show.Show [Language.PureScript.CoreImp.AST.AST]
  = Language.PureScript.CoreImp.AST.$fShowAST
instance GHC.Show.Show [Language.PureScript.CoreImp.AST.BinaryOperator]
  = Language.PureScript.CoreImp.AST.$fShowBinaryOperator
instance GHC.Show.Show [Language.PureScript.CoreImp.AST.UnaryOperator]
  = Language.PureScript.CoreImp.AST.$fShowUnaryOperator
"SPEC everywhereTopDownM @ Identity" forall ($dMonad :: GHC.Base.Monad
                                                          Data.Functor.Identity.Identity)
  Language.PureScript.CoreImp.AST.everywhereTopDownM @ Data.Functor.Identity.Identity
                                                     $dMonad
  = Language.PureScript.CoreImp.AST.everywhereTopDown_$severywhereTopDownM
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

