
==================== FINAL INTERFACE ====================
2019-01-24 14:13:30.728415 UTC

interface purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.PSString [family instance module] 8043
  interface hash: b3d521b5572bacc84166542875ecf04e
  ABI hash: 482bcd39d274b3e3efbde5749bd9d797
  export-list hash: dedd5d31dc509736134f041863efd1d4
  orphan hash: a5b7b57136635710e06377d34754165b
  flag hash: c44f56fa568975ec54fde669ad1add1f
  opt_hash: 2c98c95d41c045ae9c2fb565ec8aabc6
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Language.PureScript.PSString.decodeString
  Language.PureScript.PSString.decodeStringEither
  Language.PureScript.PSString.decodeStringWithReplacement
  Language.PureScript.PSString.mkString
  Language.PureScript.PSString.prettyPrintString
  Language.PureScript.PSString.prettyPrintStringJS
  Language.PureScript.PSString.PSString{toUTF16CodeUnits}
module dependencies:
package dependencies: aeson-1.3.1.1 array-0.5.2.0
                      attoparsec-0.13.2.2 base-4.11.1.0 base-compat-0.10.4 binary-0.8.5.1
                      bytestring-0.10.8.2 containers-0.5.11.0 deepseq-1.4.3.0
                      dlist-0.8.0.4 ghc-boot-th-8.4.3 ghc-prim-0.5.2.0 hashable-1.2.7.0
                      integer-gmp-1.0.2.0 integer-logarithms-1.0.2.1 primitive-0.6.3.0
                      random-1.1 scientific-0.3.6.2 tagged-0.8.5
                      template-haskell-2.13.0.0 text-1.2.3.0 time-1.8.0.2
                      time-locale-compat-0.1.1.4 transformers-0.5.5.0
                      unordered-containers-0.2.9.0 uuid-types-1.0.3 vector-0.12.0.1
orphans: attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         vector-0.12.0.1:Data.Vector.Unboxed
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.0:Data.Text.Lazy
         text-1.2.3.0:Data.Text binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.5.0:Control.Monad.Trans.Error
         base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: aeson-1.3.1.1:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         dlist-0.8.0.4:Data.DList ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray tagged-0.8.5:Data.Tagged
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  aeson-1.3.1.1:Data.Aeson 108dfb08de41cf77aad4693ac1dc3d44
import  -/  aeson-1.3.1.1:Data.Aeson.Types 80d8929e36e8070f3ae205ac2577d043
import  -/  aeson-1.3.1.1:Data.Aeson.Types.FromJSON 1ea0c919856f0d29f12e53cd074d532c
import  -/  aeson-1.3.1.1:Data.Aeson.Types.Internal df76c21edff000f9355bfb6fb0dbf3e6
import  -/  aeson-1.3.1.1:Data.Aeson.Types.ToJSON 587c7d8b9444e85253d7faf5f824f568
import  -/  base-4.11.1.0:Control.Applicative 55d9b3a7491623b0362290e162d67308
import  -/  base-4.11.1.0:Control.Exception 3d8e6cda20877f889f07bc7c0f5cac36
import  -/  base-4.11.1.0:Control.Exception.Base 6b3335161fe9c47efeac02d92d6dc212
import  -/  base-4.11.1.0:Data.Bits bbb4ac3d5246b98befe8bd31900b1c2f
import  -/  base-4.11.1.0:Data.Char 3e89818e2b8ef1a2cc5393163484da72
import  -/  base-4.11.1.0:Data.Either 39d922b371c4c52d426e9ee66de8371a
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.Functor f522c3501272159820fd6f242510732f
import  -/  base-4.11.1.0:Data.List 83dc843e47bfc0c5af51e19c6f3476d5
import  -/  base-4.11.1.0:Data.Maybe 409c3da2b142470b68be39ce1d97a9f7
import  -/  base-4.11.1.0:Data.OldList 1b35aa3c6805ff7c8887a35a866fe006
import  -/  base-4.11.1.0:Data.String 1b97cff5f9627e73898d75997a9ccf7f
import  -/  base-4.11.1.0:Data.Traversable 7ad4edb9184ea1ae8e73f6b94f115c8c
import  -/  base-4.11.1.0:Data.Word 22a60783baa8ba4f33c4588b366fade3
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Char df8a8e058e3141ae6822492094eb6689
import  -/  base-4.11.1.0:GHC.Enum 8824828888f5a89ecc9e7c73f05f3151
import  -/  base-4.11.1.0:GHC.Generics 4d1469b3e29804a05a1be33d11accff6
import  -/  base-4.11.1.0:GHC.IO 1d5542cc02075c5e948018bfacea89c1
import  -/  base-4.11.1.0:GHC.IO.Unsafe c1dfcbb6f65c5fb985b7e5159499b64e
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:GHC.Real b4beb0389ba1ad5d9640aae67848c5d3
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-4.11.1.0:GHC.Word bc9bdf9b61a0f9352e5a1baeee5690a5
import  -/  base-4.11.1.0:Numeric 331f4a25ce2a0412c13064bb0891b578
import  -/  base-4.11.1.0:System.IO.Unsafe 0a2eb33ad4988fdd87ebf1fb8b419957
import  -/  base-compat-0.10.4:Prelude.Compat bb6796186ed35a1d09dc34362a3fc27e
import  -/  bytestring-0.10.8.2:Data.ByteString 6d0008c12e5c3acd7278a6b95640b4e2
import  -/  bytestring-0.10.8.2:Data.ByteString.Internal dc7d0c96ef45c703ca21607112260299
import  -/  deepseq-1.4.3.0:Control.DeepSeq 171f1f567c47ef82860df4ad686d11b1
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  scientific-0.3.6.2:Data.Scientific dcf36ccdb1cf24e6a4757a8967aa41b4
import  -/  text-1.2.3.0:Data.Text 7daa7e6c9b39d8cc1679e5ec5c64d2be
import  -/  text-1.2.3.0:Data.Text.Encoding 8e60367b574d8e5016309aaea7dc2100
import  -/  text-1.2.3.0:Data.Text.Encoding.Error bbd57fdfa12647ccbe53378b20803125
import  -/  text-1.2.3.0:Data.Text.Internal 30a0a123f71f63b26cd34c6b24f23411
import  -/  text-1.2.3.0:Data.Text.Show 3b4b6fb2985a731022d67f636682da2b
import  -/  vector-0.12.0.1:Data.Vector f729e70597cc595442dc4fc6c91177bf
96ffea2472d48cda76cc39d47ab7bb82
  $fEqPSString ::
    GHC.Classes.Eq Language.PureScript.PSString.PSString
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.PSString.PSString
                  Language.PureScript.PSString.$fEqPSString1
                    `cast`
                  (Sym (Language.PureScript.PSString.N:PSString[0])
                   ->_R Sym (Language.PureScript.PSString.N:PSString[0])
                   ->_R <GHC.Types.Bool>_R)
                  Language.PureScript.PSString.$fEqPSString_$s$fEq[]_$c/=
                    `cast`
                  (Sym (Language.PureScript.PSString.N:PSString[0])
                   ->_R Sym (Language.PureScript.PSString.N:PSString[0])
                   ->_R <GHC.Types.Bool>_R) -}
eab81a763c8d42194a33cf555a05387b
  $fEqPSString1 ::
    [GHC.Word.Word16] -> [GHC.Word.Word16] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (GHC.Classes.$fEq[]_$c==
                   @ GHC.Word.Word16
                   GHC.Word.$fEqWord16) -}
a6fd6ea482c6ab9947e5d298651339f7
  $fEqPSString_$s$fEq[]_$c/= ::
    [GHC.Word.Word16] -> [GHC.Word.Word16] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: [GHC.Word.Word16]) (y :: [GHC.Word.Word16]) ->
                 case GHC.Classes.$fEq[]_$c==
                        @ GHC.Word.Word16
                        GHC.Word.$fEqWord16
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
96ffea2472d48cda76cc39d47ab7bb82
  $fFromJSONPSString ::
    Data.Aeson.Types.FromJSON.FromJSON
      Language.PureScript.PSString.PSString
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.PSString.PSString
                  Language.PureScript.PSString.$fFromJSONPSString_$cparseJSON
                  Language.PureScript.PSString.$fFromJSONPSString_$cparseJSONList -}
59c17b0df455020ad66960a60886b835
  $fFromJSONPSString1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (", encountered "#) -}
48a906fdfa11b2fbdc92f71143288652
  $fFromJSONPSString2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("[a]"#) -}
5fe83039bc110404eb22187199a8f120
  $fFromJSONPSString3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("expected "#) -}
96ffea2472d48cda76cc39d47ab7bb82
  $fFromJSONPSString_$cparseJSON ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         Language.PureScript.PSString.PSString
  {- Arity: 1, Strictness: <L,U> -}
96ffea2472d48cda76cc39d47ab7bb82
  $fFromJSONPSString_$cparseJSONList ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         [Language.PureScript.PSString.PSString]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Data.Aeson.Types.Internal.Value) ->
                 case ds of wild {
                   DEFAULT
                   -> let {
                        msg1 :: GHC.Base.String
                        = GHC.CString.unpackAppendCString#
                            Language.PureScript.PSString.$fFromJSONPSString3
                            (GHC.CString.unpackAppendCString#
                               Language.PureScript.PSString.$fFromJSONPSString2
                               (GHC.CString.unpackAppendCString#
                                  Language.PureScript.PSString.$fFromJSONPSString1
                                  (case wild of wild1 {
                                     Data.Aeson.Types.Internal.Object ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList10
                                     Data.Aeson.Types.Internal.String ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList8
                                     Data.Aeson.Types.Internal.Number ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList6
                                     Data.Aeson.Types.Internal.Bool ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList4
                                     Data.Aeson.Types.Internal.Null
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList1 })))
                      } in
                      (\ @ f4 :: * -> *
                         @ r
                         (path :: Data.Aeson.Types.Internal.JSONPath)
                         (kf :: Data.Aeson.Types.Internal.Failure f4 r)
                         (_ks :: Data.Aeson.Types.Internal.Success
                                   [Language.PureScript.PSString.PSString] f4 r) ->
                       kf
                         (GHC.List.reverse @ Data.Aeson.Types.Internal.JSONPathElement path)
                         msg1)
                        `cast`
                      (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                <[Language.PureScript.PSString.PSString]>_R))
                   Data.Aeson.Types.Internal.Array a2
                   -> case a2 of wild1 { Data.Vector.Vector dt dt1 dt2 ->
                      letrec {
                        $wgo :: GHC.Prim.Int# -> [Data.Aeson.Types.Internal.Value]
                          {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                        = \ (ww :: GHC.Prim.Int#) ->
                          case GHC.Prim.>=# ww dt1 of lwild {
                            DEFAULT
                            -> case GHC.Prim.indexArray#
                                      @ Data.Aeson.Types.Internal.Value
                                      dt2
                                      (GHC.Prim.+# dt ww) of ds3 { Unit# ipv ->
                               GHC.Types.:
                                 @ Data.Aeson.Types.Internal.Value
                                 ipv
                                 ($wgo (GHC.Prim.+# ww 1#)) }
                            1# -> GHC.Types.[] @ Data.Aeson.Types.Internal.Value }
                      } in
                      Language.PureScript.PSString.$fFromJSONPSString_go
                        0#
                        ($wgo 0#) } }) -}
96ffea2472d48cda76cc39d47ab7bb82
  $fFromJSONPSString_go ::
    GHC.Prim.Int#
    -> [Data.Aeson.Types.Internal.Value]
    -> Data.Aeson.Types.Internal.Parser
         [Language.PureScript.PSString.PSString]
  {- Arity: 2, Strictness: <L,U><S,1*U> -}
96ffea2472d48cda76cc39d47ab7bb82
  $fGenericPSString ::
    GHC.Generics.Generic Language.PureScript.PSString.PSString
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.PSString.PSString
                  Language.PureScript.PSString.$fGenericPSString2
                    `cast`
                  (forall (x :: <*>_N).
                   <Language.PureScript.PSString.PSString>_R
                   ->_R Language.PureScript.PSString.N:PSString[0] ; (Sym (GHC.Generics.N:K1[0]
                                                                               <*>_N
                                                                               <GHC.Generics.R>_P
                                                                               <[GHC.Word.Word16]>_R
                                                                               <x>_P) ; (Sym (GHC.Generics.N:M1[0]
                                                                                                  <*>_N
                                                                                                  <GHC.Generics.S>_P
                                                                                                  <'GHC.Generics.MetaSel
                                                                                                     ('GHC.Base.Just
                                                                                                        "toUTF16CodeUnits")
                                                                                                     'GHC.Generics.NoSourceUnpackedness
                                                                                                     'GHC.Generics.NoSourceStrictness
                                                                                                     'GHC.Generics.DecidedLazy>_P
                                                                                                  <GHC.Generics.K1
                                                                                                     GHC.Generics.R
                                                                                                     [GHC.Word.Word16]>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                                                                                       <*>_N
                                                                                                                                       <GHC.Generics.C>_P
                                                                                                                                       <'GHC.Generics.MetaCons
                                                                                                                                          "PSString"
                                                                                                                                          'GHC.Generics.PrefixI
                                                                                                                                          'GHC.Types.True>_P
                                                                                                                                       <GHC.Generics.M1
                                                                                                                                          GHC.Generics.S
                                                                                                                                          ('GHC.Generics.MetaSel
                                                                                                                                             ('GHC.Base.Just
                                                                                                                                                "toUTF16CodeUnits")
                                                                                                                                             'GHC.Generics.NoSourceUnpackedness
                                                                                                                                             'GHC.Generics.NoSourceStrictness
                                                                                                                                             'GHC.Generics.DecidedLazy)
                                                                                                                                          (GHC.Generics.K1
                                                                                                                                             GHC.Generics.R
                                                                                                                                             [GHC.Word.Word16])>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                                                                                                                                <*>_N
                                                                                                                                                                                <GHC.Generics.D>_P
                                                                                                                                                                                <'GHC.Generics.MetaData
                                                                                                                                                                                   "PSString"
                                                                                                                                                                                   "Language.PureScript.PSString"
                                                                                                                                                                                   "purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"
                                                                                                                                                                                   'GHC.Types.True>_P
                                                                                                                                                                                <GHC.Generics.M1
                                                                                                                                                                                   GHC.Generics.C
                                                                                                                                                                                   ('GHC.Generics.MetaCons
                                                                                                                                                                                      "PSString"
                                                                                                                                                                                      'GHC.Generics.PrefixI
                                                                                                                                                                                      'GHC.Types.True)
                                                                                                                                                                                   (GHC.Generics.M1
                                                                                                                                                                                      GHC.Generics.S
                                                                                                                                                                                      ('GHC.Generics.MetaSel
                                                                                                                                                                                         ('GHC.Base.Just
                                                                                                                                                                                            "toUTF16CodeUnits")
                                                                                                                                                                                         'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                         'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                         'GHC.Generics.DecidedLazy)
                                                                                                                                                                                      (GHC.Generics.K1
                                                                                                                                                                                         GHC.Generics.R
                                                                                                                                                                                         [GHC.Word.Word16]))>_R) ; Sub (Sym (Language.PureScript.PSString.Rep_PSString[0]))))) <x>_N))
                  Language.PureScript.PSString.$fGenericPSString1
                    `cast`
                  (forall (x :: <*>_N).
                   <GHC.Generics.Rep Language.PureScript.PSString.PSString x>_R
                   ->_R (Sub (Language.PureScript.PSString.Rep_PSString[0]) ; (GHC.Generics.N:M1[0]
                                                                                   <*>_N
                                                                                   <GHC.Generics.D>_P
                                                                                   <'GHC.Generics.MetaData
                                                                                      "PSString"
                                                                                      "Language.PureScript.PSString"
                                                                                      "purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"
                                                                                      'GHC.Types.True>_P
                                                                                   <GHC.Generics.M1
                                                                                      GHC.Generics.C
                                                                                      ('GHC.Generics.MetaCons
                                                                                         "PSString"
                                                                                         'GHC.Generics.PrefixI
                                                                                         'GHC.Types.True)
                                                                                      (GHC.Generics.M1
                                                                                         GHC.Generics.S
                                                                                         ('GHC.Generics.MetaSel
                                                                                            ('GHC.Base.Just
                                                                                               "toUTF16CodeUnits")
                                                                                            'GHC.Generics.NoSourceUnpackedness
                                                                                            'GHC.Generics.NoSourceStrictness
                                                                                            'GHC.Generics.DecidedLazy)
                                                                                         (GHC.Generics.K1
                                                                                            GHC.Generics.R
                                                                                            [GHC.Word.Word16]))>_R ; (GHC.Generics.N:M1[0]
                                                                                                                          <*>_N
                                                                                                                          <GHC.Generics.C>_P
                                                                                                                          <'GHC.Generics.MetaCons
                                                                                                                             "PSString"
                                                                                                                             'GHC.Generics.PrefixI
                                                                                                                             'GHC.Types.True>_P
                                                                                                                          <GHC.Generics.M1
                                                                                                                             GHC.Generics.S
                                                                                                                             ('GHC.Generics.MetaSel
                                                                                                                                ('GHC.Base.Just
                                                                                                                                   "toUTF16CodeUnits")
                                                                                                                                'GHC.Generics.NoSourceUnpackedness
                                                                                                                                'GHC.Generics.NoSourceStrictness
                                                                                                                                'GHC.Generics.DecidedLazy)
                                                                                                                             (GHC.Generics.K1
                                                                                                                                GHC.Generics.R
                                                                                                                                [GHC.Word.Word16])>_R ; GHC.Generics.N:M1[0]
                                                                                                                                                            <*>_N
                                                                                                                                                            <GHC.Generics.S>_P
                                                                                                                                                            <'GHC.Generics.MetaSel
                                                                                                                                                               ('GHC.Base.Just
                                                                                                                                                                  "toUTF16CodeUnits")
                                                                                                                                                               'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                               'GHC.Generics.NoSourceStrictness
                                                                                                                                                               'GHC.Generics.DecidedLazy>_P
                                                                                                                                                            <GHC.Generics.K1
                                                                                                                                                               GHC.Generics.R
                                                                                                                                                               [GHC.Word.Word16]>_R))) <x>_N ; (GHC.Generics.N:K1[0]
                                                                                                                                                                                                    <*>_N
                                                                                                                                                                                                    <GHC.Generics.R>_P
                                                                                                                                                                                                    <[GHC.Word.Word16]>_R
                                                                                                                                                                                                    <x>_P ; Sym (Language.PureScript.PSString.N:PSString[0]))) -}
96ffea2472d48cda76cc39d47ab7bb82
  $fGenericPSString1 ::
    GHC.Generics.Rep Language.PureScript.PSString.PSString x
    -> GHC.Generics.Rep Language.PureScript.PSString.PSString x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ @ x
                   (ds :: GHC.Generics.Rep Language.PureScript.PSString.PSString x) ->
                 ds) -}
96ffea2472d48cda76cc39d47ab7bb82
  $fGenericPSString2 ::
    Language.PureScript.PSString.PSString
    -> Language.PureScript.PSString.PSString
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ @ x (x1 :: Language.PureScript.PSString.PSString) -> x1) -}
96ffea2472d48cda76cc39d47ab7bb82
  $fIsStringPSString ::
    Data.String.IsString Language.PureScript.PSString.PSString
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Language.PureScript.PSString.$fIsStringPSString1
                  `cast`
                ((<GHC.Base.String>_R
                  ->_R Sym (Language.PureScript.PSString.N:PSString[0])) ; Sym (Data.String.N:IsString[0]) <Language.PureScript.PSString.PSString>_N) -}
d415d88c479a265de965e8769965268e
  $fIsStringPSString1 :: GHC.Base.String -> [GHC.Word.Word16]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (a :: GHC.Base.String) ->
                 Language.PureScript.PSString.$fIsStringPSString_go a) -}
f74830980fa9ca9997877a3b736dda8b
  $fIsStringPSString_go :: [GHC.Types.Char] -> [GHC.Word.Word16]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
96ffea2472d48cda76cc39d47ab7bb82
  $fMonoidPSString ::
    GHC.Base.Monoid Language.PureScript.PSString.PSString
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.PSString.PSString
                  Language.PureScript.PSString.$fSemigroupPSString
                  (GHC.Types.[] @ GHC.Word.Word16)
                    `cast`
                  (Sym (Language.PureScript.PSString.N:PSString[0]))
                  (GHC.Base.++ @ GHC.Word.Word16)
                    `cast`
                  (Sym (Language.PureScript.PSString.N:PSString[0])
                   ->_R Sym (Language.PureScript.PSString.N:PSString[0])
                   ->_R Sym (Language.PureScript.PSString.N:PSString[0]))
                  (GHC.Base.$fMonoid[]_$cmconcat @ GHC.Word.Word16)
                    `cast`
                  (([Sym (Language.PureScript.PSString.N:PSString[0])])_R
                   ->_R Sym (Language.PureScript.PSString.N:PSString[0])) -}
96ffea2472d48cda76cc39d47ab7bb82
  $fNFDataPSString ::
    Control.DeepSeq.NFData Language.PureScript.PSString.PSString
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Language.PureScript.PSString.$fNFDataPSString_$crnf
                  `cast`
                (Sym (Control.DeepSeq.N:NFData[0]
                          <Language.PureScript.PSString.PSString>_N)) -}
96ffea2472d48cda76cc39d47ab7bb82
  $fNFDataPSString_$crnf ::
    Language.PureScript.PSString.PSString -> ()
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ (x :: Language.PureScript.PSString.PSString) ->
                 Language.PureScript.PSString.$fNFDataPSString_go
                   x `cast` (Language.PureScript.PSString.N:PSString[0])) -}
7d2b62357d51dd46ff30cd7fad7970b6
  $fNFDataPSString_go :: [GHC.Word.Word16] -> ()
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
96ffea2472d48cda76cc39d47ab7bb82
  $fOrdPSString ::
    GHC.Classes.Ord Language.PureScript.PSString.PSString
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.PSString.PSString
                  Language.PureScript.PSString.$fEqPSString
                  Language.PureScript.PSString.$fOrdPSString7
                    `cast`
                  (Sym (Language.PureScript.PSString.N:PSString[0])
                   ->_R Sym (Language.PureScript.PSString.N:PSString[0])
                   ->_R <GHC.Types.Ordering>_R)
                  Language.PureScript.PSString.$fOrdPSString6
                    `cast`
                  (Sym (Language.PureScript.PSString.N:PSString[0])
                   ->_R Sym (Language.PureScript.PSString.N:PSString[0])
                   ->_R <GHC.Types.Bool>_R)
                  Language.PureScript.PSString.$fOrdPSString5
                    `cast`
                  (Sym (Language.PureScript.PSString.N:PSString[0])
                   ->_R Sym (Language.PureScript.PSString.N:PSString[0])
                   ->_R <GHC.Types.Bool>_R)
                  Language.PureScript.PSString.$fOrdPSString4
                    `cast`
                  (Sym (Language.PureScript.PSString.N:PSString[0])
                   ->_R Sym (Language.PureScript.PSString.N:PSString[0])
                   ->_R <GHC.Types.Bool>_R)
                  Language.PureScript.PSString.$fOrdPSString3
                    `cast`
                  (Sym (Language.PureScript.PSString.N:PSString[0])
                   ->_R Sym (Language.PureScript.PSString.N:PSString[0])
                   ->_R <GHC.Types.Bool>_R)
                  Language.PureScript.PSString.$fOrdPSString2
                    `cast`
                  (Sym (Language.PureScript.PSString.N:PSString[0])
                   ->_R Sym (Language.PureScript.PSString.N:PSString[0])
                   ->_R Sym (Language.PureScript.PSString.N:PSString[0]))
                  Language.PureScript.PSString.$fOrdPSString1
                    `cast`
                  (Sym (Language.PureScript.PSString.N:PSString[0])
                   ->_R Sym (Language.PureScript.PSString.N:PSString[0])
                   ->_R Sym (Language.PureScript.PSString.N:PSString[0])) -}
ebd3130b30b287a7a9cbdd9c0b7eb9d4
  $fOrdPSString1 ::
    [GHC.Word.Word16] -> [GHC.Word.Word16] -> [GHC.Word.Word16]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [GHC.Word.Word16]) (y :: [GHC.Word.Word16]) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ GHC.Word.Word16
                        GHC.Word.$fOrdWord16
                        x
                        y of wild {
                   DEFAULT -> x GHC.Types.GT -> y }) -}
1a3879e4986788d500aa4f7fd6ffd78b
  $fOrdPSString2 ::
    [GHC.Word.Word16] -> [GHC.Word.Word16] -> [GHC.Word.Word16]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [GHC.Word.Word16]) (y :: [GHC.Word.Word16]) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ GHC.Word.Word16
                        GHC.Word.$fOrdWord16
                        x
                        y of wild {
                   DEFAULT -> y GHC.Types.GT -> x }) -}
f395a7241f7bd01d2a42db6257948882
  $fOrdPSString3 ::
    [GHC.Word.Word16] -> [GHC.Word.Word16] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [GHC.Word.Word16]) (y :: [GHC.Word.Word16]) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ GHC.Word.Word16
                        GHC.Word.$fOrdWord16
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }) -}
a071cc909f4da766bc21b7a4ed1dc16e
  $fOrdPSString4 ::
    [GHC.Word.Word16] -> [GHC.Word.Word16] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [GHC.Word.Word16]) (y :: [GHC.Word.Word16]) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ GHC.Word.Word16
                        GHC.Word.$fOrdWord16
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True }) -}
6787103913aed80c7220e0c435768c1c
  $fOrdPSString5 ::
    [GHC.Word.Word16] -> [GHC.Word.Word16] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [GHC.Word.Word16]) (y :: [GHC.Word.Word16]) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ GHC.Word.Word16
                        GHC.Word.$fOrdWord16
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False }) -}
8f60e8e612ec1d967e1e4e8677963d79
  $fOrdPSString6 ::
    [GHC.Word.Word16] -> [GHC.Word.Word16] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [GHC.Word.Word16]) (y :: [GHC.Word.Word16]) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ GHC.Word.Word16
                        GHC.Word.$fOrdWord16
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True }) -}
407462aa34333cbea2741e9603b95297
  $fOrdPSString7 ::
    [GHC.Word.Word16] -> [GHC.Word.Word16] -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (GHC.Classes.$fOrd[]_$ccompare
                   @ GHC.Word.Word16
                   GHC.Word.$fOrdWord16) -}
96ffea2472d48cda76cc39d47ab7bb82
  $fSemigroupPSString ::
    GHC.Base.Semigroup Language.PureScript.PSString.PSString
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.PSString.PSString
                  (GHC.Base.++ @ GHC.Word.Word16)
                    `cast`
                  (Sym (Language.PureScript.PSString.N:PSString[0])
                   ->_R Sym (Language.PureScript.PSString.N:PSString[0])
                   ->_R Sym (Language.PureScript.PSString.N:PSString[0]))
                  (GHC.Base.$fSemigroup[]_$csconcat @ GHC.Word.Word16)
                    `cast`
                  ((GHC.Base.NonEmpty
                      (Sym (Language.PureScript.PSString.N:PSString[0])))_R
                   ->_R Sym (Language.PureScript.PSString.N:PSString[0]))
                  Language.PureScript.PSString.$fSemigroupPSString1
                    `cast`
                  (forall (b :: <*>_N).
                   <GHC.Real.Integral b>_R
                   ->_R <b>_R
                   ->_R Sym (Language.PureScript.PSString.N:PSString[0])
                   ->_R Sym (Language.PureScript.PSString.N:PSString[0])) -}
1a37039f3db16726cce7d2bea12efec3
  $fSemigroupPSString1 ::
    GHC.Real.Integral b => b -> [GHC.Word.Word16] -> [GHC.Word.Word16]
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ b ($dIntegral :: GHC.Real.Integral b) ->
                 GHC.Magic.noinline
                   @ (forall b1 a. GHC.Real.Integral b1 => b1 -> [a] -> [a])
                   Data.Semigroup.Internal.stimesList
                   @ b
                   @ GHC.Word.Word16
                   $dIntegral) -}
96ffea2472d48cda76cc39d47ab7bb82
  $fShowPSString ::
    GHC.Show.Show Language.PureScript.PSString.PSString
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.PSString.PSString
                  Language.PureScript.PSString.$fShowPSString_$cshowsPrec
                  Language.PureScript.PSString.$fShowPSString_$cshow
                  Language.PureScript.PSString.$fShowPSString_$cshowList -}
96ffea2472d48cda76cc39d47ab7bb82
  $fShowPSString1 ::
    Language.PureScript.PSString.PSString -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,1*U><L,1*U>m2,
     Unfolding: (\ (w :: Language.PureScript.PSString.PSString)
                   (w1 :: GHC.Base.String) ->
                 GHC.Base.++_$s++
                   @ GHC.Types.Char
                   w1
                   GHC.Show.$fShow(,)3
                   (GHC.Show.showLitString
                      (GHC.Base.map
                         @ (Data.Either.Either GHC.Word.Word16 GHC.Types.Char)
                         @ GHC.Types.Char
                         Language.PureScript.PSString.$fShowPSString2
                         (Language.PureScript.PSString.$fShowPSString_go
                            w `cast` (Language.PureScript.PSString.N:PSString[0])))
                      GHC.Show.$fShow[]1)) -}
c1720acefffa3b99528ab5987c6074ba
  $fShowPSString2 ::
    Data.Either.Either GHC.Word.Word16 GHC.Types.Char -> GHC.Types.Char
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds1 :: Data.Either.Either
                             GHC.Word.Word16 GHC.Types.Char) ->
                 case ds1 of wild {
                   Data.Either.Left x
                   -> case x of wild1 { GHC.Word.W16# x# ->
                      let {
                        i# :: GHC.Prim.Int# = GHC.Prim.word2Int# x#
                      } in
                      case GHC.Prim.leWord# (GHC.Prim.int2Word# i#) 1114111## of lwild {
                        DEFAULT -> GHC.Char.$wlvl i#
                        1# -> GHC.Types.C# (GHC.Prim.chr# i#) } }
                   Data.Either.Right y -> y }) -}
96ffea2472d48cda76cc39d47ab7bb82
  $fShowPSString_$cshow ::
    Language.PureScript.PSString.PSString -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>m2, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.PureScript.PSString.PSString) ->
                 GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.$fShow(,)3
                   (GHC.Show.showLitString
                      (GHC.Base.map
                         @ (Data.Either.Either GHC.Word.Word16 GHC.Types.Char)
                         @ GHC.Types.Char
                         Language.PureScript.PSString.$fShowPSString2
                         (Language.PureScript.PSString.$fShowPSString_go
                            w `cast` (Language.PureScript.PSString.N:PSString[0])))
                      GHC.Show.$fShow[]1)) -}
96ffea2472d48cda76cc39d47ab7bb82
  $fShowPSString_$cshowList ::
    [Language.PureScript.PSString.PSString] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.PSString.PSString])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.PSString.PSString
                   Language.PureScript.PSString.$fShowPSString1
                   ls
                   s) -}
96ffea2472d48cda76cc39d47ab7bb82
  $fShowPSString_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.PSString.PSString -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><L,1*U><L,1*U>m2, Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.PSString.PSString)
                   (w2 :: GHC.Base.String) ->
                 GHC.Base.++_$s++
                   @ GHC.Types.Char
                   w2
                   GHC.Show.$fShow(,)3
                   (GHC.Show.showLitString
                      (GHC.Base.map
                         @ (Data.Either.Either GHC.Word.Word16 GHC.Types.Char)
                         @ GHC.Types.Char
                         Language.PureScript.PSString.$fShowPSString2
                         (Language.PureScript.PSString.$fShowPSString_go
                            w1 `cast` (Language.PureScript.PSString.N:PSString[0])))
                      GHC.Show.$fShow[]1)) -}
1bbe0ded1b46e0f065ea9fb132f7f2ff
  $fShowPSString_go ::
    [GHC.Word.Word16]
    -> [Data.Either.Either GHC.Word.Word16 GHC.Types.Char]
  {- Arity: 1, Strictness: <S,1*U> -}
96ffea2472d48cda76cc39d47ab7bb82
  $fToJSONPSString ::
    Data.Aeson.Types.ToJSON.ToJSON
      Language.PureScript.PSString.PSString
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.PSString.PSString
                  Language.PureScript.PSString.$fToJSONPSString_$ctoJSON
                  Language.PureScript.PSString.$fToJSONPSString_$ctoEncoding
                  Language.PureScript.PSString.$fToJSONPSString_$ctoJSONList
                  Language.PureScript.PSString.$fToJSONPSString_$ctoEncodingList -}
96ffea2472d48cda76cc39d47ab7bb82
  $fToJSONPSString_$ctoEncoding ::
    Language.PureScript.PSString.PSString
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Strictness: <L,U>, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (x :: Language.PureScript.PSString.PSString) ->
                 Data.Aeson.Encoding.Builder.encodeToBuilder
                   (Language.PureScript.PSString.$fToJSONPSString_$ctoJSON x))
                  `cast`
                (<Language.PureScript.PSString.PSString>_R
                 ->_R Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                               <Data.Aeson.Types.Internal.Value>_P)) -}
96ffea2472d48cda76cc39d47ab7bb82
  $fToJSONPSString_$ctoEncodingList ::
    [Language.PureScript.PSString.PSString]
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (Data.Aeson.Encoding.Internal.list
                   @ Language.PureScript.PSString.PSString
                   Language.PureScript.PSString.$fToJSONPSString_$ctoEncoding) -}
96ffea2472d48cda76cc39d47ab7bb82
  $fToJSONPSString_$ctoJSON ::
    Language.PureScript.PSString.PSString
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (str :: Language.PureScript.PSString.PSString) ->
                 case Language.PureScript.PSString.decodeString str of wild {
                   GHC.Base.Nothing
                   -> case GHC.Magic.runRW#
                             @ ('GHC.Types.TupleRep
                                  '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                             @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                  Data.Vector.Vector Data.Aeson.Types.Internal.Value #)
                             (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                              case GHC.Prim.newArray#
                                     @ Data.Aeson.Types.Internal.Value
                                     @ (Control.Monad.Primitive.PrimState
                                          (GHC.ST.ST GHC.Prim.RealWorld))
                                     0#
                                     (Data.Vector.Mutable.uninitialised
                                        @ Data.Aeson.Types.Internal.Value)
                                     s1
                                       `cast`
                                     (GHC.Prim.State#
                                        (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                  <GHC.Prim.RealWorld>_N)))_R of ds2 { (#,#) ipv ipv1 ->
                              Language.PureScript.PSString.$fToJSONPSString_$s$wfoldlM_loop
                                ipv
                                  `cast`
                                (GHC.Prim.State#
                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                        <GHC.Prim.RealWorld>_N))_R
                                (GHC.Base.map
                                   @ GHC.Word.Word16
                                   @ Data.Aeson.Types.Internal.Value
                                   Data.Aeson.Types.ToJSON.$fToJSONKeyWord16_$ctoJSON
                                   str `cast` (Language.PureScript.PSString.N:PSString[0]))
                                0#
                                ipv1
                                  `cast`
                                (GHC.Prim.MutableArray#
                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                        <GHC.Prim.RealWorld>_N)
                                   <Data.Aeson.Types.Internal.Value>_R)_R
                                0#
                                0# }) of ds1 { (#,#) ipv1 ipv2 ->
                      case ipv2 of dt { Data.Vector.Vector ipv ipv4 ipv5 ->
                      Data.Aeson.Types.Internal.Array dt } }
                   GHC.Base.Just t -> Data.Aeson.Types.Internal.$WString t }) -}
96ffea2472d48cda76cc39d47ab7bb82
  $fToJSONPSString_$ctoJSONList ::
    [Language.PureScript.PSString.PSString]
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (x :: [Language.PureScript.PSString.PSString]) ->
                 Data.Aeson.Types.Internal.$WArray
                   (Data.Vector.Generic.new
                      @ Data.Vector.Vector
                      @ Data.Aeson.Types.Internal.Value
                      (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                      (Data.Vector.Generic.New.unstream
                         @ Data.Vector.Vector
                         @ Data.Aeson.Types.Internal.Value
                         (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                         (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                            @ Data.Vector.Fusion.Util.Id
                            @ Data.Aeson.Types.Internal.Value
                            @ Data.Vector.Vector
                            Data.Vector.Fusion.Util.$fMonadId
                            Data.Vector.Fusion.Bundle.Size.Unknown
                            (GHC.Base.build
                               @ Data.Aeson.Types.Internal.Value
                               (\ @ b1
                                  (c :: Data.Aeson.Types.Internal.Value -> b1 -> b1)[OneShot]
                                  (n1 :: b1)[OneShot] ->
                                GHC.Base.foldr
                                  @ Language.PureScript.PSString.PSString
                                  @ b1
                                  (GHC.Base.mapFB
                                     @ Data.Aeson.Types.Internal.Value
                                     @ b1
                                     @ Language.PureScript.PSString.PSString
                                     c
                                     Language.PureScript.PSString.$fToJSONPSString_$ctoJSON)
                                  n1
                                  x)))))) -}
81365933064475c8fca99fea93060c5d
  $fToJSONPSString_$s$wfoldlM_loop ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> [Data.Aeson.Types.Internal.Value]
    -> GHC.Prim.Int#
    -> GHC.Prim.MutableArray#
         GHC.Prim.RealWorld Data.Aeson.Types.Internal.Value
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Vector.Vector Data.Aeson.Types.Internal.Value #)
  {- Arity: 6, Strictness: <S,U><S,1*U><L,U><S,U><L,U><L,U> -}
f3c97fbb0e2c3ba6b8eadf2a7f065477
  $tc'PSString :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13890219371507086880##
                   10483510901393779103##
                   Language.PureScript.PSString.$trModule
                   Language.PureScript.PSString.$tc'PSString2
                   0#
                   Language.PureScript.PSString.$tc'PSString1) -}
42c0feee7282b5c8b0ca25e63a93eafc
  $tc'PSString1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
85275f1bfebd4696783606831ae90371
  $tc'PSString2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.PSString.$tc'PSString3) -}
7a25f1818b0296bc7adeb794b7c7c474
  $tc'PSString3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'PSString"#) -}
5d00d9b9bde156af0f70b7b1dfb759a1
  $tcPSString :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16293066528180221584##
                   11129622906463940592##
                   Language.PureScript.PSString.$trModule
                   Language.PureScript.PSString.$tcPSString1
                   0#
                   GHC.Types.krep$*) -}
3aeb4a4b36a7e57e1883f7d2f77ee2a9
  $tcPSString1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.PSString.$tcPSString2) -}
76fbbc5b39f08ae495efc122baaf8fdd
  $tcPSString2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("PSString"#) -}
a9d82fcf51f454d27751745255029221
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Language.PureScript.PSString.$trModule3
                   Language.PureScript.PSString.$trModule1) -}
cbbd84207c9449616b9de9f027e8b50b
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.PSString.$trModule2) -}
1e6b8d509328c7af861dac66b767be16
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Language.PureScript.PSString"#) -}
dd11f2b5b3b76b605c2c61cdf96bcb6e
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.PSString.$trModule4) -}
d472e6dd9d1ec4545c253faf4340c64e
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"#) -}
ab791e0887e630444a1bb01a5f454736
  $wmkString ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int# -> GHC.Prim.Int# -> [GHC.Word.Word16]
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><S,U><S,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#) ->
                 let {
                   end :: GHC.Prim.Int# = GHC.Prim.+# ww1 ww2
                 } in
                 letrec {
                   $wunfold :: GHC.Prim.Int# -> [GHC.Types.Char]
                     {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                   = \ (ww3 :: GHC.Prim.Int#) ->
                     case GHC.Prim.>=# ww3 end of lwild {
                       DEFAULT
                       -> case GHC.Prim.indexWord16Array# ww ww3 of r# { DEFAULT ->
                          case GHC.Prim.geWord# r# 55296## of lwild1 {
                            DEFAULT
                            -> GHC.Types.:
                                 @ GHC.Types.Char
                                 (GHC.Types.C# (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                 ($wunfold (GHC.Prim.+# ww3 1#))
                            1#
                            -> case GHC.Prim.leWord# r# 56319## of lwild2 {
                                 DEFAULT
                                 -> GHC.Types.:
                                      @ GHC.Types.Char
                                      (GHC.Types.C# (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                      ($wunfold (GHC.Prim.+# ww3 1#))
                                 1#
                                 -> case GHC.Prim.indexWord16Array#
                                           ww
                                           (GHC.Prim.+# ww3 1#) of r#1 { DEFAULT ->
                                    GHC.Types.:
                                      @ GHC.Types.Char
                                      (GHC.Types.C#
                                         (GHC.Prim.chr#
                                            (GHC.Prim.+#
                                               (GHC.Prim.+#
                                                  (GHC.Prim.uncheckedIShiftL#
                                                     (GHC.Prim.-# (GHC.Prim.word2Int# r#) 55296#)
                                                     10#)
                                                  (GHC.Prim.-# (GHC.Prim.word2Int# r#1) 56320#))
                                               65536#)))
                                      ($wunfold (GHC.Prim.+# ww3 2#)) } } } }
                       1# -> GHC.Types.[] @ GHC.Types.Char }
                 } in
                 Language.PureScript.PSString.$fIsStringPSString_go
                   ($wunfold ww1)) -}
34f8727fcff5351cbddec4c05bec9cd2
  $wouter ::
    GHC.Prim.MutableByteArray# GHC.Prim.RealWorld
    -> GHC.Prim.Int#
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U><S,U><S,1*U><S,U><S,U>,
     Inline: [0] -}
96ffea2472d48cda76cc39d47ab7bb82
  newtype PSString = PSString {toUTF16CodeUnits :: [GHC.Word.Word16]}
96ffea2472d48cda76cc39d47ab7bb82
  axiom Language.PureScript.PSString.Rep_PSString::
      GHC.Generics.Rep Language.PureScript.PSString.PSString
        = GHC.Generics.D1
            ('GHC.Generics.MetaData
               "PSString"
               "Language.PureScript.PSString"
               "purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"
               'GHC.Types.True)
            (GHC.Generics.C1
               ('GHC.Generics.MetaCons
                  "PSString" 'GHC.Generics.PrefixI 'GHC.Types.True)
               (GHC.Generics.S1
                  ('GHC.Generics.MetaSel
                     ('GHC.Base.Just "toUTF16CodeUnits")
                     'GHC.Generics.NoSourceUnpackedness
                     'GHC.Generics.NoSourceStrictness
                     'GHC.Generics.DecidedLazy)
                  (GHC.Generics.Rec0 [GHC.Word.Word16])))
96ffea2472d48cda76cc39d47ab7bb82
  decodeString ::
    Language.PureScript.PSString.PSString
    -> GHC.Base.Maybe Data.Text.Internal.Text
  {- Arity: 1, Strictness: <L,1*U> -}
9fe10b6f9d6e91648b44a88974dccc80
  decodeStringEither ::
    Language.PureScript.PSString.PSString
    -> [Data.Either.Either GHC.Word.Word16 GHC.Types.Char]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: Language.PureScript.PSString.PSString) ->
                 Language.PureScript.PSString.$fShowPSString_go
                   x `cast` (Language.PureScript.PSString.N:PSString[0])) -}
4d3bd4dfdf423d9ed9fd011699696240
  decodeStringWithReplacement ::
    Language.PureScript.PSString.PSString -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.PSString.PSString) ->
                 GHC.Base.build
                   @ GHC.Types.Char
                   (\ @ b1
                      (c :: GHC.Types.Char -> b1 -> b1)[OneShot]
                      (n :: b1)[OneShot] ->
                    GHC.Base.foldr
                      @ (Data.Either.Either GHC.Word.Word16 GHC.Types.Char)
                      @ b1
                      (GHC.Base.mapFB
                         @ GHC.Types.Char
                         @ b1
                         @ (Data.Either.Either GHC.Word.Word16 GHC.Types.Char)
                         c
                         Language.PureScript.PSString.decodeStringWithReplacement1)
                      n
                      (Language.PureScript.PSString.$fShowPSString_go
                         x `cast` (Language.PureScript.PSString.N:PSString[0])))) -}
530c7169e941191dfa9c4b38836b60e1
  decodeStringWithReplacement1 ::
    Data.Either.Either GHC.Word.Word16 GHC.Types.Char -> GHC.Types.Char
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds1 :: Data.Either.Either GHC.Word.Word16 GHC.Types.Char) ->
                 case ds1 of wild {
                   Data.Either.Left x
                   -> Language.PureScript.PSString.decodeStringWithReplacement_x
                   Data.Either.Right y -> y }) -}
225ba23195fd16cd312a16b866c8f89d
  decodeStringWithReplacement_x :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.C# '\65533'#) -}
a727d038908a3b0e30ed0d1d71565e4b
  mkString ::
    Data.Text.Internal.Text -> Language.PureScript.PSString.PSString
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SSS),1*U(U,U,U)>,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.PSString.mkString1
                  `cast`
                (<Data.Text.Internal.Text>_R
                 ->_R Sym (Language.PureScript.PSString.N:PSString[0])) -}
fba5f6ecd954e90407261bd63c3ad4f5
  mkString1 :: Data.Text.Internal.Text -> [GHC.Word.Word16]
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SSS),1*U(U,U,U)>,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Data.Text.Internal.Text) ->
                 case w of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Language.PureScript.PSString.$wmkString ww1 ww2 ww3 }) -}
b1dfb53e84049d1e3f6bb311f4e41690
  prettyPrintString ::
    Language.PureScript.PSString.PSString -> Data.Text.Internal.Text
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ (x :: Language.PureScript.PSString.PSString) ->
                 case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Text.Internal.Text #)
                        (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case GHC.Prim.newByteArray#
                                @ GHC.Prim.RealWorld
                                10#
                                s1 of ds1 { (#,#) ipv ipv1 ->
                         Language.PureScript.PSString.$wouter
                           ipv1
                           4#
                           (GHC.Types.:
                              @ GHC.Types.Char
                              GHC.Show.$fShow(,)3
                              (GHC.Show.showLitString
                                 (GHC.Base.map
                                    @ (Data.Either.Either GHC.Word.Word16 GHC.Types.Char)
                                    @ GHC.Types.Char
                                    Language.PureScript.PSString.$fShowPSString2
                                    (Language.PureScript.PSString.$fShowPSString_go
                                       x `cast` (Language.PureScript.PSString.N:PSString[0])))
                                 GHC.Show.$fShow[]1))
                           0#
                           ipv }) of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
6f13b4565ca738da92f9165f1320239d
  prettyPrintStringJS ::
    Language.PureScript.PSString.PSString -> Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S,1*U> -}
96ffea2472d48cda76cc39d47ab7bb82
  toUTF16CodeUnits ::
    Language.PureScript.PSString.PSString -> [GHC.Word.Word16]
  RecSel Left Language.PureScript.PSString.PSString
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.PSString.toUTF16CodeUnits1
                  `cast`
                (<Language.PureScript.PSString.PSString>_R
                 ->_R Language.PureScript.PSString.N:PSString[0]) -}
96ffea2472d48cda76cc39d47ab7bb82
  toUTF16CodeUnits1 ::
    Language.PureScript.PSString.PSString
    -> Language.PureScript.PSString.PSString
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: Language.PureScript.PSString.PSString) -> ds) -}
instance GHC.Classes.Eq [Language.PureScript.PSString.PSString]
  = Language.PureScript.PSString.$fEqPSString
instance Data.Aeson.Types.FromJSON.FromJSON [Language.PureScript.PSString.PSString]
  = Language.PureScript.PSString.$fFromJSONPSString
instance GHC.Generics.Generic [Language.PureScript.PSString.PSString]
  = Language.PureScript.PSString.$fGenericPSString
instance Data.String.IsString [Language.PureScript.PSString.PSString]
  = Language.PureScript.PSString.$fIsStringPSString
instance GHC.Base.Monoid [Language.PureScript.PSString.PSString]
  = Language.PureScript.PSString.$fMonoidPSString
instance Control.DeepSeq.NFData [Language.PureScript.PSString.PSString]
  = Language.PureScript.PSString.$fNFDataPSString
instance GHC.Classes.Ord [Language.PureScript.PSString.PSString]
  = Language.PureScript.PSString.$fOrdPSString
instance GHC.Base.Semigroup [Language.PureScript.PSString.PSString]
  = Language.PureScript.PSString.$fSemigroupPSString
instance GHC.Show.Show [Language.PureScript.PSString.PSString]
  = Language.PureScript.PSString.$fShowPSString
instance Data.Aeson.Types.ToJSON.ToJSON [Language.PureScript.PSString.PSString]
  = Language.PureScript.PSString.$fToJSONPSString
family instance GHC.Generics.Rep [Language.PureScript.PSString.PSString]
  = Language.PureScript.PSString.Rep_PSString
"SPEC/Language.PureScript.PSString $fEq[]_$c/= @ Word16" [orphan] forall ($dEq :: GHC.Classes.Eq
                                                                                    GHC.Word.Word16)
  GHC.Classes.$fEq[]_$c/= @ GHC.Word.Word16 $dEq
  = Language.PureScript.PSString.$fEqPSString_$s$fEq[]_$c/=
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

