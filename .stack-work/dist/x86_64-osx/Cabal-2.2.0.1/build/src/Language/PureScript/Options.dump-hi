
==================== FINAL INTERFACE ====================
2019-01-24 14:13:29.814052 UTC

interface purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Options 8043
  interface hash: ac7d1e83edfedc9de3192ca8e0828274
  ABI hash: 2e36bd5fcc2b2ebbc36ff47b336cef60
  export-list hash: 95606a481170637dfadecf960e8d7bae
  orphan hash: 08e40672a96df31d62647ff11e328c47
  flag hash: 2ae478d21823b7c739b1b08c46262eb0
  opt_hash: 2c98c95d41c045ae9c2fb565ec8aabc6
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Language.PureScript.Options.codegenTargets
  Language.PureScript.Options.defaultOptions
  Language.PureScript.Options.CodegenTarget{Language.PureScript.Options.CoreFn Language.PureScript.Options.JS Language.PureScript.Options.JSSourceMap}
  Language.PureScript.Options.Options{Language.PureScript.Options.Options optionsCodegenTargets optionsNoComments optionsVerboseErrors}
module dependencies:
package dependencies: array-0.5.2.0 base-4.11.1.0
                      base-compat-0.10.4* containers-0.5.11.0 deepseq-1.4.3.0
                      ghc-prim-0.5.2.0 integer-gmp-1.0.2.0
orphans: base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Set.Internal
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-compat-0.10.4:Prelude.Compat bb6796186ed35a1d09dc34362a3fc27e
import  -/  containers-0.5.11.0:Data.Map 0dbdaec812ef695a364aa6c69e7f7d53
import  -/  containers-0.5.11.0:Data.Map.Internal 0150e210d0ae8df0f3a0669d5e32d8fa
import  -/  containers-0.5.11.0:Data.Set 7d3c64a641be4cacbcd8119445bab919
import  -/  containers-0.5.11.0:Data.Set.Internal 93fa3ef95853aa2a7aadf32d693bd451
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
01549f9098408b4144e13364de301586
  $fEqCodegenTarget ::
    GHC.Classes.Eq Language.PureScript.Options.CodegenTarget
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Options.CodegenTarget
                  Language.PureScript.Options.$fEqCodegenTarget_$c==
                  Language.PureScript.Options.$fEqCodegenTarget_$c/= -}
01549f9098408b4144e13364de301586
  $fEqCodegenTarget_$c/= ::
    Language.PureScript.Options.CodegenTarget
    -> Language.PureScript.Options.CodegenTarget -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Options.CodegenTarget)
                   (y :: Language.PureScript.Options.CodegenTarget) ->
                 case x of wild {
                   Language.PureScript.Options.JS
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.Options.JS -> GHC.Types.False }
                   Language.PureScript.Options.JSSourceMap
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.Options.JSSourceMap -> GHC.Types.False }
                   Language.PureScript.Options.CoreFn
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.Options.CoreFn -> GHC.Types.False } }) -}
01549f9098408b4144e13364de301586
  $fEqCodegenTarget_$c== ::
    Language.PureScript.Options.CodegenTarget
    -> Language.PureScript.Options.CodegenTarget -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Language.PureScript.Options.CodegenTarget)
                   (ds1 :: Language.PureScript.Options.CodegenTarget) ->
                 case ds of wild {
                   Language.PureScript.Options.JS
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Options.JS -> GHC.Types.True }
                   Language.PureScript.Options.JSSourceMap
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Options.JSSourceMap -> GHC.Types.True }
                   Language.PureScript.Options.CoreFn
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Options.CoreFn -> GHC.Types.True } }) -}
01549f9098408b4144e13364de301586
  $fOrdCodegenTarget ::
    GHC.Classes.Ord Language.PureScript.Options.CodegenTarget
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Options.CodegenTarget
                  Language.PureScript.Options.$fEqCodegenTarget
                  Language.PureScript.Options.$fOrdCodegenTarget_$ccompare
                  Language.PureScript.Options.$fOrdCodegenTarget_$c<
                  Language.PureScript.Options.$fOrdCodegenTarget_$c<=
                  Language.PureScript.Options.$fOrdCodegenTarget_$c>
                  Language.PureScript.Options.$fOrdCodegenTarget_$c>=
                  Language.PureScript.Options.$fOrdCodegenTarget_$cmax
                  Language.PureScript.Options.$fOrdCodegenTarget_$cmin -}
01549f9098408b4144e13364de301586
  $fOrdCodegenTarget_$c< ::
    Language.PureScript.Options.CodegenTarget
    -> Language.PureScript.Options.CodegenTarget -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.Options.CodegenTarget)
                   (b :: Language.PureScript.Options.CodegenTarget) ->
                 case a of wild {
                   Language.PureScript.Options.JS
                   -> case b of wild1 {
                        Language.PureScript.Options.JS -> GHC.Types.False
                        Language.PureScript.Options.JSSourceMap -> GHC.Types.True
                        Language.PureScript.Options.CoreFn -> GHC.Types.True }
                   Language.PureScript.Options.JSSourceMap
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Options.CoreFn -> GHC.Types.True }
                   Language.PureScript.Options.CoreFn
                   -> case b of wild1 { DEFAULT -> GHC.Types.False } }) -}
01549f9098408b4144e13364de301586
  $fOrdCodegenTarget_$c<= ::
    Language.PureScript.Options.CodegenTarget
    -> Language.PureScript.Options.CodegenTarget -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Language.PureScript.Options.CodegenTarget)
                   (b :: Language.PureScript.Options.CodegenTarget) ->
                 let {
                   $j :: GHC.Prim.Int# -> GHC.Types.Bool
                     <join 1> {- Arity: 1, Strictness: <S,U> -}
                   = \ (a# :: GHC.Prim.Int#)[OneShot] ->
                     case a of wild {
                       Language.PureScript.Options.JS
                       -> case GHC.Prim.<# a# 0# of lwild {
                            DEFAULT -> GHC.Types.True 1# -> GHC.Types.False }
                       Language.PureScript.Options.JSSourceMap
                       -> case GHC.Prim.<# a# 1# of lwild {
                            DEFAULT -> GHC.Types.True 1# -> GHC.Types.False }
                       Language.PureScript.Options.CoreFn
                       -> case GHC.Prim.<# a# 2# of lwild {
                            DEFAULT -> GHC.Types.True 1# -> GHC.Types.False } }
                 } in
                 case b of wild {
                   Language.PureScript.Options.JS -> $j 0#
                   Language.PureScript.Options.JSSourceMap -> $j 1#
                   Language.PureScript.Options.CoreFn -> $j 2# }) -}
01549f9098408b4144e13364de301586
  $fOrdCodegenTarget_$c> ::
    Language.PureScript.Options.CodegenTarget
    -> Language.PureScript.Options.CodegenTarget -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, True)
                (\ (a :: Language.PureScript.Options.CodegenTarget)
                   (b :: Language.PureScript.Options.CodegenTarget) ->
                 Language.PureScript.Options.$fOrdCodegenTarget_$c< b a) -}
01549f9098408b4144e13364de301586
  $fOrdCodegenTarget_$c>= ::
    Language.PureScript.Options.CodegenTarget
    -> Language.PureScript.Options.CodegenTarget -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Language.PureScript.Options.CodegenTarget)
                   (b :: Language.PureScript.Options.CodegenTarget) ->
                 let {
                   $j :: GHC.Prim.Int# -> GHC.Types.Bool
                     <join 1> {- Arity: 1, Strictness: <S,U> -}
                   = \ (a# :: GHC.Prim.Int#)[OneShot] ->
                     case b of wild {
                       Language.PureScript.Options.JS
                       -> case GHC.Prim.<# a# 0# of lwild {
                            DEFAULT -> GHC.Types.True 1# -> GHC.Types.False }
                       Language.PureScript.Options.JSSourceMap
                       -> case GHC.Prim.<# a# 1# of lwild {
                            DEFAULT -> GHC.Types.True 1# -> GHC.Types.False }
                       Language.PureScript.Options.CoreFn
                       -> case GHC.Prim.<# a# 2# of lwild {
                            DEFAULT -> GHC.Types.True 1# -> GHC.Types.False } }
                 } in
                 case a of wild {
                   Language.PureScript.Options.JS -> $j 0#
                   Language.PureScript.Options.JSSourceMap -> $j 1#
                   Language.PureScript.Options.CoreFn -> $j 2# }) -}
01549f9098408b4144e13364de301586
  $fOrdCodegenTarget_$ccompare ::
    Language.PureScript.Options.CodegenTarget
    -> Language.PureScript.Options.CodegenTarget -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Language.PureScript.Options.CodegenTarget)
                   (b :: Language.PureScript.Options.CodegenTarget) ->
                 case a of wild {
                   Language.PureScript.Options.JS
                   -> case b of wild1 {
                        Language.PureScript.Options.JS -> GHC.Types.EQ
                        Language.PureScript.Options.JSSourceMap -> GHC.Types.LT
                        Language.PureScript.Options.CoreFn -> GHC.Types.LT }
                   Language.PureScript.Options.JSSourceMap
                   -> case b of wild1 {
                        Language.PureScript.Options.JS -> GHC.Types.GT
                        Language.PureScript.Options.JSSourceMap -> GHC.Types.EQ
                        Language.PureScript.Options.CoreFn -> GHC.Types.LT }
                   Language.PureScript.Options.CoreFn
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Language.PureScript.Options.CoreFn -> GHC.Types.EQ } }) -}
01549f9098408b4144e13364de301586
  $fOrdCodegenTarget_$cmax ::
    Language.PureScript.Options.CodegenTarget
    -> Language.PureScript.Options.CodegenTarget
    -> Language.PureScript.Options.CodegenTarget
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Options.CodegenTarget)
                   (y :: Language.PureScript.Options.CodegenTarget) ->
                 case Language.PureScript.Options.$fOrdCodegenTarget_$c<=
                        x
                        y of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
01549f9098408b4144e13364de301586
  $fOrdCodegenTarget_$cmin ::
    Language.PureScript.Options.CodegenTarget
    -> Language.PureScript.Options.CodegenTarget
    -> Language.PureScript.Options.CodegenTarget
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Options.CodegenTarget)
                   (y :: Language.PureScript.Options.CodegenTarget) ->
                 case Language.PureScript.Options.$fOrdCodegenTarget_$c<=
                        x
                        y of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
01549f9098408b4144e13364de301586
  $fShowCodegenTarget ::
    GHC.Show.Show Language.PureScript.Options.CodegenTarget
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Options.CodegenTarget
                  Language.PureScript.Options.$fShowCodegenTarget_$cshowsPrec
                  Language.PureScript.Options.$fShowCodegenTarget_$cshow
                  Language.PureScript.Options.$fShowCodegenTarget_$cshowList -}
72360c0d666d33a1856e100cd67450dd
  $fShowCodegenTarget1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Options.$fShowCodegenTarget2) -}
6f72dc0b1184d218b6aaf68b39fce2c1
  $fShowCodegenTarget2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("CoreFn"#) -}
f06f13701c6be7a766293b87ef31918b
  $fShowCodegenTarget3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Options.$fShowCodegenTarget4) -}
715bec3d962730080cda60805423d593
  $fShowCodegenTarget4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("JSSourceMap"#) -}
9959f75455c2943a24df4258a5738d89
  $fShowCodegenTarget5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Options.$fShowCodegenTarget6) -}
0d044d81cce617da00d17661d8dd87a0
  $fShowCodegenTarget6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("JS"#) -}
01549f9098408b4144e13364de301586
  $fShowCodegenTarget_$cshow ::
    Language.PureScript.Options.CodegenTarget -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Options.CodegenTarget) ->
                 case x of wild {
                   Language.PureScript.Options.JS
                   -> Language.PureScript.Options.$fShowCodegenTarget5
                   Language.PureScript.Options.JSSourceMap
                   -> Language.PureScript.Options.$fShowCodegenTarget3
                   Language.PureScript.Options.CoreFn
                   -> Language.PureScript.Options.$fShowCodegenTarget1 }) -}
01549f9098408b4144e13364de301586
  $fShowCodegenTarget_$cshowList ::
    [Language.PureScript.Options.CodegenTarget] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Options.CodegenTarget])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Options.CodegenTarget
                   Language.PureScript.Options.$w$cshowsPrec
                   ls
                   s) -}
01549f9098408b4144e13364de301586
  $fShowCodegenTarget_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Options.CodegenTarget -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: [0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Options.CodegenTarget)
                   (w2 :: GHC.Base.String) ->
                 Language.PureScript.Options.$w$cshowsPrec w1 w2) -}
43e82b7ea0c416dc61c77c04548dbdd3
  $fShowOptions :: GHC.Show.Show Language.PureScript.Options.Options
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Options.Options
                  Language.PureScript.Options.$fShowOptions_$cshowsPrec
                  Language.PureScript.Options.$fShowOptions_$cshow
                  Language.PureScript.Options.$fShowOptions_$cshowList -}
43e82b7ea0c416dc61c77c04548dbdd3
  $fShowOptions1 ::
    Language.PureScript.Options.Options -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(U,U,1*U)>,
     Unfolding: (\ (w :: Language.PureScript.Options.Options) ->
                 case w of ww { Language.PureScript.Options.Options ww1 ww2 ww3 ->
                 Language.PureScript.Options.$w$cshowsPrec1 0# ww1 ww2 ww3 }) -}
07643a23fe47ca86d67670a727ecb170
  $fShowOptions2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
43e82b7ea0c416dc61c77c04548dbdd3
  $fShowOptions_$cshow ::
    Language.PureScript.Options.Options -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U,U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Options.Options) ->
                 Language.PureScript.Options.$fShowOptions_$cshowsPrec
                   Language.PureScript.Options.$fShowOptions2
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
43e82b7ea0c416dc61c77c04548dbdd3
  $fShowOptions_$cshowList ::
    [Language.PureScript.Options.Options] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Options.Options])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Options.Options
                   Language.PureScript.Options.$fShowOptions1
                   ls
                   s) -}
43e82b7ea0c416dc61c77c04548dbdd3
  $fShowOptions_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Options.Options -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(U,U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Options.Options) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Language.PureScript.Options.Options ww3 ww4 ww5 ->
                 Language.PureScript.Options.$w$cshowsPrec1 ww1 ww3 ww4 ww5 } }) -}
6e2a9b8740dd62ff125f431b1d6bea34
  $sfromList ::
    [(GHC.Base.String, a)] -> Data.Map.Internal.Map GHC.Base.String a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a (ds :: [(GHC.Base.String, a)]) ->
                 case ds of wild {
                   [] -> Data.Map.Internal.Tip @ GHC.Base.String @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case kx of dt { DEFAULT ->
                           Data.Map.Internal.Bin
                             @ GHC.Base.String
                             @ a
                             1#
                             dt
                             x
                             (Data.Map.Internal.Tip @ GHC.Base.String @ a)
                             (Data.Map.Internal.Tip @ GHC.Base.String @ a) }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case GHC.Classes.$fOrd[]_$s$ccompare1 kx ky of wild4 {
                             DEFAULT
                             -> case kx of dt { DEFAULT ->
                                Language.PureScript.Options.$sfromList_$spoly_go14
                                  @ a
                                  ky
                                  ds3
                                  ipv1
                                  (Data.Map.Internal.Bin
                                     @ GHC.Base.String
                                     @ a
                                     1#
                                     dt
                                     x
                                     (Data.Map.Internal.Tip @ GHC.Base.String @ a)
                                     (Data.Map.Internal.Tip @ GHC.Base.String @ a)) }
                             GHC.Types.LT
                             -> case kx of dt { DEFAULT ->
                                Language.PureScript.Options.$sfromList_$s$wpoly_go13
                                  @ a
                                  ky
                                  ds3
                                  ipv1
                                  (Data.Map.Internal.Bin
                                     @ GHC.Base.String
                                     @ a
                                     1#
                                     dt
                                     x
                                     (Data.Map.Internal.Tip @ GHC.Base.String @ a)
                                     (Data.Map.Internal.Tip @ GHC.Base.String @ a))
                                  1# } } } } } }) -}
77ac4afd69672e4ac3bc2595fb0f3b62
  $sfromList_$s$wpoly_go13 ::
    [GHC.Types.Char]
    -> a
    -> [([GHC.Types.Char], a)]
    -> Data.Map.Internal.Map [GHC.Types.Char] a
    -> GHC.Prim.Int#
    -> Data.Map.Internal.Map GHC.Base.String a
  {- Arity: 5, Strictness: <S,U><L,U><S,1*U><S,1*U><L,U> -}
f6385007b9773b302a8ecbafbd319f10
  $sfromList_$spoly_go14 ::
    [GHC.Types.Char]
    -> a
    -> [([GHC.Types.Char], a)]
    -> Data.Map.Internal.Map [GHC.Types.Char] a
    -> Data.Map.Internal.Map GHC.Base.String a
  {- Arity: 4, Strictness: <S,U><L,U><S,1*U><S,1*U> -}
752e7541b5b02a0a7a3d5fa5ada8642e
  $sinsert_$sgo13 ::
    GHC.Base.String
    -> GHC.Base.String
    -> a1
    -> Data.Map.Internal.Map GHC.Base.String a1
    -> Data.Map.Internal.Map GHC.Base.String a1
  {- Arity: 4, Strictness: <L,U><S,1*U><L,U><S,1*U> -}
9b6da5b4c8567ca37de9f722c0b8a37b
  $tc'CoreFn :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5836022201869121570##
                   14886765902478633104##
                   Language.PureScript.Options.$trModule
                   Language.PureScript.Options.$tc'CoreFn2
                   0#
                   Language.PureScript.Options.$tc'CoreFn1) -}
13e24ce574baa718541e8d217949252f
  $tc'CoreFn1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
53fdf788805aaa5ac6ac5b563142d8a0
  $tc'CoreFn2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Options.$tc'CoreFn3) -}
cd2c61dc84fdfba2eb1c5b8985f31e2a
  $tc'CoreFn3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'CoreFn"#) -}
aa7a10faa19c2e57dad54b945c420e8e
  $tc'JS :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14569696253776895755##
                   2701074543304432887##
                   Language.PureScript.Options.$trModule
                   Language.PureScript.Options.$tc'JS1
                   0#
                   Language.PureScript.Options.$tc'CoreFn1) -}
ca91a36b29db3392bae64159b82c0b79
  $tc'JS1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Options.$tc'JS2) -}
357b8005c6598001045655e8a6cfd31e
  $tc'JS2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'JS"#) -}
1311cc058ae69768ce2dfc55b8aaab3d
  $tc'JSSourceMap :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7460060486235826003##
                   11756360009178339802##
                   Language.PureScript.Options.$trModule
                   Language.PureScript.Options.$tc'JSSourceMap1
                   0#
                   Language.PureScript.Options.$tc'CoreFn1) -}
e355a5fdda88ef84ea467e4305594633
  $tc'JSSourceMap1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Options.$tc'JSSourceMap2) -}
7118e8d8418c6f1d13926f62988c29aa
  $tc'JSSourceMap2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'JSSourceMap"#) -}
66067c4b6b6d81eb1a4710cecbe32c6a
  $tc'Options :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4709409953745740524##
                   12148089788877516024##
                   Language.PureScript.Options.$trModule
                   Language.PureScript.Options.$tc'Options2
                   0#
                   Language.PureScript.Options.$tc'Options1) -}
8d0c1d438a8c8c4beec6eb260c785f87
  $tc'Options1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
711bf205625ff8e576794cdb57dcf0be
  $tc'Options2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Options.$tc'Options3) -}
952b09015de1f4eba8979174e33022c2
  $tc'Options3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Options"#) -}
e09d8e054f6d1a7f7f370e206fe14823
  $tcCodegenTarget :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18301850296670666825##
                   16310271548594286474##
                   Language.PureScript.Options.$trModule
                   Language.PureScript.Options.$tcCodegenTarget1
                   0#
                   GHC.Types.krep$*) -}
40691f9dd278602e431f1dc93ed755e0
  $tcCodegenTarget1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Options.$tcCodegenTarget2) -}
67736c097559aa5e27fbef2c0908127b
  $tcCodegenTarget2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("CodegenTarget"#) -}
1204aba5d89b8c5c1098beba3342a90c
  $tcOptions :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3424883701897651747##
                   14121806961962688521##
                   Language.PureScript.Options.$trModule
                   Language.PureScript.Options.$tcOptions1
                   0#
                   GHC.Types.krep$*) -}
fc9f9b5e82149dc7258d1b615ab2d49b
  $tcOptions1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Options.$tcOptions2) -}
4f0acc1840a98fe3f5d10dc39ba76bb3
  $tcOptions2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Options"#) -}
977b8126cf5cad6f7e9f5c12ee42c6bb
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Language.PureScript.Options.$trModule3
                   Language.PureScript.Options.$trModule1) -}
48aa8b1a0920d9492a3bee68361f0337
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Options.$trModule2) -}
02d4fde8bb475edaf30613da411d1944
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Language.PureScript.Options"#) -}
6a9ad77334840917efd98fa95809ff4d
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Options.$trModule4) -}
5bea566d9ab585b4be2cc0a7f8c77ed1
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"#) -}
01549f9098408b4144e13364de301586
  $w$cshowsPrec ::
    Language.PureScript.Options.CodegenTarget
    -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: Language.PureScript.Options.CodegenTarget)
                   (w1 :: GHC.Base.String) ->
                 case w of wild {
                   Language.PureScript.Options.JS
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.Options.$fShowCodegenTarget5
                        w1
                   Language.PureScript.Options.JSSourceMap
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.Options.$fShowCodegenTarget3
                        w1
                   Language.PureScript.Options.CoreFn
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.Options.$fShowCodegenTarget1
                        w1 }) -}
ec6a2a82c5e2821e5b29a93a6978271b
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> Data.Set.Internal.Set Language.PureScript.Options.CodegenTarget
    -> GHC.Show.ShowS
  {- Arity: 4, Strictness: <S,U><L,U><L,U><L,1*U>, Inline: [0] -}
01549f9098408b4144e13364de301586
  data CodegenTarget = JS | JSSourceMap | CoreFn
43e82b7ea0c416dc61c77c04548dbdd3
  data Options
    = Options {optionsVerboseErrors :: GHC.Types.Bool,
               optionsNoComments :: GHC.Types.Bool,
               optionsCodegenTargets :: Data.Set.Internal.Set
                                          Language.PureScript.Options.CodegenTarget}
d23e3e5037dca0cefb0968eca323a10a
  codegenTargets ::
    Data.Map.Internal.Map
      GHC.Base.String Language.PureScript.Options.CodegenTarget
  {- Unfolding: (Language.PureScript.Options.$sfromList
                   @ Language.PureScript.Options.CodegenTarget
                   Language.PureScript.Options.codegenTargets1) -}
9f6da97acc51caaa557800567960875b
  codegenTargets1 ::
    [(GHC.Base.String, Language.PureScript.Options.CodegenTarget)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Language.PureScript.Options.CodegenTarget)
                   Language.PureScript.Options.codegenTargets10
                   Language.PureScript.Options.codegenTargets2) -}
a84cb65b88e653083ecefd7cd4d37721
  codegenTargets10 ::
    ([GHC.Types.Char], Language.PureScript.Options.CodegenTarget)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Options.codegenTargets11,
                  Language.PureScript.Options.JS)) -}
eacf71d4daa0edfb7d4a32f1f6b374a1
  codegenTargets11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Options.codegenTargets12) -}
44f8d75fc34800738005793434391812
  codegenTargets12 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("js"#) -}
8a34766a1e391f0cbe67d2059fb22de1
  codegenTargets2 ::
    [(GHC.Base.String, Language.PureScript.Options.CodegenTarget)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Language.PureScript.Options.CodegenTarget)
                   Language.PureScript.Options.codegenTargets7
                   Language.PureScript.Options.codegenTargets3) -}
a6da436e5e3acf5fec2cfe7a5b829e22
  codegenTargets3 ::
    [(GHC.Base.String, Language.PureScript.Options.CodegenTarget)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (GHC.Base.String, Language.PureScript.Options.CodegenTarget)
                   Language.PureScript.Options.codegenTargets4
                   (GHC.Types.[]
                      @ (GHC.Base.String, Language.PureScript.Options.CodegenTarget))) -}
b56f4504fda3fa7515d3123481b99d7a
  codegenTargets4 ::
    ([GHC.Types.Char], Language.PureScript.Options.CodegenTarget)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Options.codegenTargets5,
                  Language.PureScript.Options.CoreFn)) -}
39d90de725083edbdf8b71d2d0e5c825
  codegenTargets5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Options.codegenTargets6) -}
07e0f685de486ff91ed477fa665362c5
  codegenTargets6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("corefn"#) -}
c57d596aae41bc58b711b5914d894425
  codegenTargets7 ::
    ([GHC.Types.Char], Language.PureScript.Options.CodegenTarget)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Options.codegenTargets8,
                  Language.PureScript.Options.JSSourceMap)) -}
4722631f91280f6f20ede9bf52c2a5b7
  codegenTargets8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Options.codegenTargets9) -}
94b696753be6334770a554c927cc1eeb
  codegenTargets9 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("sourcemaps"#) -}
d5de66b0cf6e3104b6ad5f0defb7954a
  defaultOptions :: Language.PureScript.Options.Options
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Language.PureScript.Options.Options
                   GHC.Types.False
                   GHC.Types.False
                   Language.PureScript.Options.defaultOptions1) -}
9d119e516e8494367cea6f7f33b6b6da
  defaultOptions1 ::
    Data.Set.Internal.Set Language.PureScript.Options.CodegenTarget
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Data.Set.Internal.Bin
                   @ Language.PureScript.Options.CodegenTarget
                   1#
                   Language.PureScript.Options.JS
                   (Data.Set.Internal.Tip @ Language.PureScript.Options.CodegenTarget)
                   (Data.Set.Internal.Tip
                      @ Language.PureScript.Options.CodegenTarget)) -}
43e82b7ea0c416dc61c77c04548dbdd3
  optionsCodegenTargets ::
    Language.PureScript.Options.Options
    -> Data.Set.Internal.Set Language.PureScript.Options.CodegenTarget
  RecSel Left Language.PureScript.Options.Options
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Options.Options) ->
                 case ds of wild { Language.PureScript.Options.Options ds1 ds2 ds3 ->
                 ds3 }) -}
43e82b7ea0c416dc61c77c04548dbdd3
  optionsNoComments ::
    Language.PureScript.Options.Options -> GHC.Types.Bool
  RecSel Left Language.PureScript.Options.Options
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Options.Options) ->
                 case ds of wild { Language.PureScript.Options.Options ds1 ds2 ds3 ->
                 ds2 }) -}
43e82b7ea0c416dc61c77c04548dbdd3
  optionsVerboseErrors ::
    Language.PureScript.Options.Options -> GHC.Types.Bool
  RecSel Left Language.PureScript.Options.Options
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Options.Options) ->
                 case ds of wild { Language.PureScript.Options.Options ds1 ds2 ds3 ->
                 ds1 }) -}
instance [safe] GHC.Classes.Eq [Language.PureScript.Options.CodegenTarget]
  = Language.PureScript.Options.$fEqCodegenTarget
instance [safe] GHC.Classes.Ord [Language.PureScript.Options.CodegenTarget]
  = Language.PureScript.Options.$fOrdCodegenTarget
instance [safe] GHC.Show.Show [Language.PureScript.Options.CodegenTarget]
  = Language.PureScript.Options.$fShowCodegenTarget
instance [safe] GHC.Show.Show [Language.PureScript.Options.Options]
  = Language.PureScript.Options.$fShowOptions
"SPEC/Language.PureScript.Options fromList @ String _" [orphan] forall @ a
                                                                       ($dOrd :: GHC.Classes.Ord
                                                                                   GHC.Base.String)
  Data.Map.Internal.fromList @ [GHC.Types.Char] @ a $dOrd
  = Language.PureScript.Options.$sfromList @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

