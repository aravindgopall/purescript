
==================== FINAL INTERFACE ====================
2019-01-24 14:17:58.719438 UTC

interface purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Ide.Imports 8043
  interface hash: ef93ae50105d9b243659d8e6b409854d
  ABI hash: 8929f780877aa034aacf930fb7ddf4fa
  export-list hash: 2df8ff803a2c45f6b4956f752c185ab7
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 5ca2b6297314332f988f1cde11325eb2
  opt_hash: 2c98c95d41c045ae9c2fb565ec8aabc6
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Language.PureScript.Ide.Imports.addExplicitImport'
  Language.PureScript.Ide.Imports.addImplicitImport
  Language.PureScript.Ide.Imports.addImplicitImport'
  Language.PureScript.Ide.Imports.addImportForIdentifier
  Language.PureScript.Ide.Imports.addQualifiedImport
  Language.PureScript.Ide.Imports.addQualifiedImport'
  Language.PureScript.Ide.Imports.answerRequest
  Language.PureScript.Ide.Imports.parseImport
  Language.PureScript.Ide.Imports.parseImportsFromFile
  Language.PureScript.Ide.Imports.prettyPrintImport'
  Language.PureScript.Ide.Imports.prettyPrintImportSection
  Language.PureScript.Ide.Imports.sliceImportSection
  Language.PureScript.Ide.Imports.Import{Language.PureScript.Ide.Imports.Import}
module dependencies: Control.Monad.Logger Control.Monad.Supply
                     Control.Monad.Supply.Class Language.PureScript
                     Language.PureScript.AST Language.PureScript.AST.Binders
                     Language.PureScript.AST.Declarations
                     Language.PureScript.AST.Exported Language.PureScript.AST.Literals
                     Language.PureScript.AST.Operators Language.PureScript.AST.SourcePos
                     Language.PureScript.AST.Traversals Language.PureScript.Bundle
                     Language.PureScript.CodeGen.JS
                     Language.PureScript.CodeGen.JS.Common
                     Language.PureScript.CodeGen.JS.Printer Language.PureScript.Comments
                     Language.PureScript.Constants Language.PureScript.CoreFn
                     Language.PureScript.CoreFn.Ann Language.PureScript.CoreFn.Binders
                     Language.PureScript.CoreFn.Desugar Language.PureScript.CoreFn.Expr
                     Language.PureScript.CoreFn.Meta Language.PureScript.CoreFn.Module
                     Language.PureScript.CoreFn.Optimizer
                     Language.PureScript.CoreFn.ToJSON
                     Language.PureScript.CoreFn.Traversals
                     Language.PureScript.CoreImp.AST
                     Language.PureScript.CoreImp.Optimizer
                     Language.PureScript.CoreImp.Optimizer.Blocks
                     Language.PureScript.CoreImp.Optimizer.Common
                     Language.PureScript.CoreImp.Optimizer.Inliner
                     Language.PureScript.CoreImp.Optimizer.MagicDo
                     Language.PureScript.CoreImp.Optimizer.TCO
                     Language.PureScript.CoreImp.Optimizer.Unused
                     Language.PureScript.Crash Language.PureScript.Docs.Convert.Single
                     Language.PureScript.Docs.RenderedCode
                     Language.PureScript.Docs.RenderedCode.RenderKind
                     Language.PureScript.Docs.RenderedCode.RenderType
                     Language.PureScript.Docs.RenderedCode.Types
                     Language.PureScript.Docs.Types
                     Language.PureScript.Docs.Utils.MonoidExtras
                     Language.PureScript.Environment Language.PureScript.Errors
                     Language.PureScript.Errors.JSON Language.PureScript.Externs
                     Language.PureScript.Ide.Completion Language.PureScript.Ide.Error
                     Language.PureScript.Ide.Externs Language.PureScript.Ide.Filter
                     Language.PureScript.Ide.Filter.Declaration
                     Language.PureScript.Ide.Logging Language.PureScript.Ide.Matcher
                     Language.PureScript.Ide.Prim Language.PureScript.Ide.Reexports
                     Language.PureScript.Ide.SourceFile Language.PureScript.Ide.State
                     Language.PureScript.Ide.Types Language.PureScript.Ide.Util
                     Language.PureScript.Kinds Language.PureScript.Label
                     Language.PureScript.Linter Language.PureScript.Linter.Exhaustive
                     Language.PureScript.Linter.Imports Language.PureScript.Make
                     Language.PureScript.Make.Actions Language.PureScript.Make.BuildPlan
                     Language.PureScript.Make.Monad
                     Language.PureScript.ModuleDependencies Language.PureScript.Names
                     Language.PureScript.Options Language.PureScript.PSString
                     Language.PureScript.Parser Language.PureScript.Parser.Common
                     Language.PureScript.Parser.Declarations
                     Language.PureScript.Parser.Kinds Language.PureScript.Parser.Lexer
                     Language.PureScript.Parser.State Language.PureScript.Parser.Types
                     Language.PureScript.Pretty Language.PureScript.Pretty.Common
                     Language.PureScript.Pretty.Kinds Language.PureScript.Pretty.Types
                     Language.PureScript.Pretty.Values
                     Language.PureScript.Publish.BoxesHelpers
                     Language.PureScript.Renamer Language.PureScript.Sugar
                     Language.PureScript.Sugar.AdoNotation
                     Language.PureScript.Sugar.BindingGroups
                     Language.PureScript.Sugar.CaseDeclarations
                     Language.PureScript.Sugar.DoNotation
                     Language.PureScript.Sugar.LetPattern
                     Language.PureScript.Sugar.Names
                     Language.PureScript.Sugar.Names.Common
                     Language.PureScript.Sugar.Names.Env
                     Language.PureScript.Sugar.Names.Exports
                     Language.PureScript.Sugar.Names.Imports
                     Language.PureScript.Sugar.ObjectWildcards
                     Language.PureScript.Sugar.Operators
                     Language.PureScript.Sugar.Operators.Binders
                     Language.PureScript.Sugar.Operators.Common
                     Language.PureScript.Sugar.Operators.Expr
                     Language.PureScript.Sugar.Operators.Types
                     Language.PureScript.Sugar.TypeClasses
                     Language.PureScript.Sugar.TypeClasses.Deriving
                     Language.PureScript.Sugar.TypeDeclarations
                     Language.PureScript.Traversals Language.PureScript.TypeChecker
                     Language.PureScript.TypeChecker.Entailment
                     Language.PureScript.TypeChecker.Kinds
                     Language.PureScript.TypeChecker.Monad
                     Language.PureScript.TypeChecker.Skolems
                     Language.PureScript.TypeChecker.Subsumption
                     Language.PureScript.TypeChecker.Synonyms
                     Language.PureScript.TypeChecker.TypeSearch
                     Language.PureScript.TypeChecker.Types
                     Language.PureScript.TypeChecker.Unify
                     Language.PureScript.TypeClassDictionaries Language.PureScript.Types
                     Paths_purescript System.IO.UTF8
package dependencies: aeson-1.3.1.1 aeson-better-errors-0.9.1.0
                      ansi-terminal-0.8.0.4 array-0.5.2.0 async-2.2.1 attoparsec-0.13.2.2
                      auto-update-0.1.4 base-4.11.1.0 base-compat-0.10.4 binary-0.8.5.1
                      blaze-builder-0.4.1.0 bower-json-1.0.0.1 boxes-0.1.5
                      bytestring-0.10.8.2 clock-0.7.2 colour-2.3.4 conduit-1.3.0.3
                      conduit-extra-1.3.0 containers-0.5.11.0 data-ordlist-0.4.7.0
                      deepseq-1.4.3.0 directory-1.3.1.5 dlist-0.8.0.4 easy-file-0.2.2
                      edit-distance-0.2.2.1 exceptions-0.10.0 fast-logger-2.4.11
                      filepath-1.4.2 ghc-boot-th-8.4.3 ghc-prim-0.5.2.0 hashable-1.2.7.0
                      integer-gmp-1.0.2.0 integer-logarithms-1.0.2.1
                      language-javascript-0.6.0.11 lifted-base-0.2.3.12 microlens-0.4.9.1
                      microlens-ghc-0.4.9 microlens-mtl-0.1.11.1
                      microlens-platform-0.3.10 microlens-th-0.4.2.1
                      monad-control-1.0.2.3 monad-logger-0.3.28.5 monad-loops-0.4.3
                      mtl-2.2.2 old-locale-1.0.0.7 old-time-1.1.0.3 parallel-3.2.1.1
                      parsec-3.1.13.0 pattern-arrows-0.0.2 pretty-1.1.3.6
                      primitive-0.6.3.0 protolude-0.2.2 random-1.1 regex-base-0.93.2
                      regex-tdfa-1.2.3.1 resourcet-1.2.1 safe-0.3.17 scientific-0.3.6.2
                      sourcemap-0.1.6 split-0.2.3.3 stm-2.4.5.0 stm-chans-3.0.0.4
                      stringsearch-0.3.6.6 syb-0.7 tagged-0.8.5 template-haskell-2.13.0.0
                      text-1.2.3.0 th-abstraction-0.2.8.0 time-1.8.0.2
                      time-locale-compat-0.1.1.4 transformers-0.5.5.0
                      transformers-base-0.4.5.2 unix-2.7.2.2 unix-time-0.3.8
                      unliftio-core-0.1.1.0 unordered-containers-0.2.9.0
                      utf8-string-1.0.1.1 uuid-types-1.0.3 vector-0.12.0.1
orphans: regex-tdfa-1.2.3.1:Text.Regex.TDFA.ByteString
         regex-tdfa-1.2.3.1:Text.Regex.TDFA.ByteString.Lazy
         regex-tdfa-1.2.3.1:Text.Regex.TDFA.Sequence
         regex-tdfa-1.2.3.1:Text.Regex.TDFA.String
         regex-base-0.93.2:Text.Regex.Base.Context
         unix-time-0.3.8:Data.UnixTime.Diff syb-0.7:Data.Generics.Instances
         colour-2.3.4:Data.Colour stm-2.4.5.0:Control.Monad.STM
         attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         microlens-platform-0.3.10:Lens.Micro.Platform
         microlens-ghc-0.4.9:Lens.Micro.GHC
         hashable-1.2.7.0:Data.Hashable.Generic
         vector-0.12.0.1:Data.Vector.Unboxed
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         text-1.2.3.0:Data.Text.Lazy text-1.2.3.0:Data.Text
         binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show
         transformers-0.5.5.0:Control.Monad.Trans.Error
         base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: aeson-1.3.1.1:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         bower-json-1.0.0.1:Web.Bower.PackageMeta.Internal
                         clock-0.7.2:System.Clock
                         conduit-1.3.0.3:Data.Conduit.Internal.Conduit
                         conduit-1.3.0.3:Data.Conduit.Internal.Pipe
                         containers-0.5.11.0:Data.Graph
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         dlist-0.8.0.4:Data.DList ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         microlens-0.4.9.1:Lens.Micro.Internal
                         microlens-ghc-0.4.9:Lens.Micro.GHC
                         microlens-mtl-0.1.11.1:Lens.Micro.Mtl.Internal
                         microlens-platform-0.3.10:Lens.Micro.Platform
                         monad-control-1.0.2.3:Control.Monad.Trans.Control
                         monad-logger-0.3.28.5:Control.Monad.Logger
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Control.Monad.Logger
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.Declarations
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.Operators
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.SourcePos
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Comments
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Docs.RenderedCode.Types
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Docs.Types
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Environment
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Ide.Reexports
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Ide.Types
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Kinds
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Label
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Make.Monad
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Names
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.PSString
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.TypeClassDictionaries
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Types
                         resourcet-1.2.1:Control.Monad.Trans.Resource.Internal
                         tagged-0.8.5:Data.Tagged
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
                         th-abstraction-0.2.8.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  base-4.11.1.0:Control.Monad c5f960c67d822497578bffbd3e4c01cf
import  -/  base-4.11.1.0:Control.Monad.IO.Class 96109c36cb3c919872278540487fa39e
import  -/  base-4.11.1.0:Data.Bifunctor a977586bad544f929bb5bc7f139aaa1c
import  -/  base-4.11.1.0:Data.Either 39d922b371c4c52d426e9ee66de8371a
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.Function 6e6aae9442025aeeb92a909c1bbc3fca
import  -/  base-4.11.1.0:Data.Functor f522c3501272159820fd6f242510732f
import  -/  base-4.11.1.0:Data.List 83dc843e47bfc0c5af51e19c6f3476d5
import  -/  base-4.11.1.0:Data.OldList 1b35aa3c6805ff7c8887a35a866fe006
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.IO 1d5542cc02075c5e948018bfacea89c1
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  containers-0.5.11.0:Data.Map 0dbdaec812ef695a364aa6c69e7f7d53
import  -/  containers-0.5.11.0:Data.Map.Internal 0150e210d0ae8df0f3a0669d5e32d8fa
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  microlens-0.4.9.1:Lens.Micro 962434009a31a5b07a9c325f04604c4d
import  -/  microlens-0.4.9.1:Lens.Micro.Internal 5d6464033dd2b487f83c604f394b1101
import  -/  microlens-platform-0.3.10:Lens.Micro.Platform 0a8b1a3c754e3254d224cc9602b42f64
import  -/  mtl-2.2.2:Control.Monad.Error.Class df146c18e27154b8df4c8637c59fd61b
import  -/  parsec-3.1.13.0:Text.Parsec 963cbe7b4116cef91451434dc005a011
import  -/  parsec-3.1.13.0:Text.Parsec.Prim 4e0ad30f54008188b8c54f509e1a8ed9
import  -/  protolude-0.2.2:Protolude 2c2d16096c8a60f59f646a3b93b0eb7b
import  -/  Language.PureScript 4a24ccd892adbf021daf2410ebd61e22
  exports: 139dcaa90af8ddcee6aa0492159f351d
import  -/  Language.PureScript.AST.Declarations 586bc75044e8737d02875208d17d4395
  DeclarationRef 1ef988d2f8db98f35f578bde9282f468
  Explicit 0e7d786f7f26f8b40dc941854a989937
  Hiding 14af127ef57cd3e7808a207407b44158
  Implicit 3dec7010cde86de5e211cd1c4e2e7a9d
  ImportDeclarationType ee54accdb974d8b355eb58984489a7af
  KindRef fdcf7f61e078f63d583e2e92289fb303
  TypeClassRef 0dfae6fa12be94e312c419132246a1f3
  TypeOpRef cd0b4bf0e37e512f28be11229ab2e497
  TypeRef 7b2aa9fe81ad40f64c659855da835def
  ValueOpRef 08efa0d335ba46b69b381a343c739614
  ValueRef 78dee2d86cdf935e8811ecdd18c169d3
  compDecRef 7ecd10c2cb7709fffc36d9d993e281f2
import  -/  Language.PureScript.AST.SourcePos 63acacac5b7be73d04e5be0047a9a89a
  SourcePos 1f89874c7dcd77e53f0f74e4d28f0a8c
  SourcePos 1e0cf2bd3ea18f97a2ff152297f09219
  SourceSpan 153dcf157f0acf76a2cdcf153aac30d3
  SourceSpan 1e0cf2bd3ea18f97a2ff152297f09219
  internalModuleSourceSpan f13de72620ea3980769d3252f1949a4a
import  -/  Language.PureScript.Constants 69f48af5637c1cbbd07a6f85918359c3
  exports: 9c458e31ccbc9e07ff15471cf48a55ee
  Prim d528e2dc5909b801bd7d210869fde176
import  -/  Language.PureScript.Errors 3c1ad933587510f8b20a8c9ec2e86ce9
  prettyPrintImport 0936b27a7dde07b00ea846cd534c7feb
  prettyPrintRef d32d22412c8469f7d4a7dbe8f28ad77d
import  -/  Language.PureScript.Ide.Completion 272946a4c81fac87f8e80f053300fdd8
  exports: 9eb5f5ff96a863487609bcfa4bbf03f0
  getExactMatches d1b777121f96261bd304a2e74bbac0eb
import  -/  Language.PureScript.Ide.Error b6eb0f8da112a6cbb4342061d1afef05
  exports: 618489d4d27b48ee8032da6edee10f0b
  GeneralError 12e806af4285c37439d91c81a0757c61
  IdeError 347304649e024d1c6990f4b438ecc115
  NotFound 7fa9c802ef794e738458cd49f8a7ba59
import  -/  Language.PureScript.Ide.Filter cfa1ebda6f0a8830c8c60e4462bab1ef
  exports: 346bf0e54a9a4816ea444c922e0ed4be
  Filter c4b7c89a6bcd0c21f2097e0bb7c93686
import  -/  Language.PureScript.Ide.Prim da89eeb3af1198cb870be4651fe94843
  exports: e7614513122a994c2a1d142a4abe3a67
  idePrimDeclarations 36cabe74587e67b12fd9d8fbaaf70bbc
import  -/  Language.PureScript.Ide.State 6596e6b1b04a4a1b7b69c0256b5b2e95
  exports: 4a5f4f202d7d05e1561b603fd2daadc9
  getAllModules 8127e3ed0115c3eb5d5fb04aec2ad4e2
import  -/  Language.PureScript.Ide.Types 4bb81e9de3788f7f63a68a23e190eb73
  exports: e5ee4d37ef25d4dfedd36ea1d435a17a
  Ide daf7e11ebbb1a4f28e92151bdfd877f7
  IdeDeclDataConstructor 8fce6bf53fa94a19e0d601b21857c083
  IdeDeclKind eadccdfcdc773a4889209905550631de
  IdeDeclType bf6a01d2f64dd736d0c0838c335e1f4d
  IdeDeclTypeClass daec5de1fc0811383493f72c17859b3c
  IdeDeclTypeOperator 942a106238947e7cdd45b0c72cd2559c
  IdeDeclTypeSynonym f16924e305412463e9d0339a34821aa8
  IdeDeclValueOperator 30db1956e4e27b3074312970c743db17
  IdeDeclaration 0c91b1320f07da0ab07b77b49d64d462
  Match 243377b70a0acc6a1f90cc91f4dfdeba
  Match fb37c344e14b1371a6bc8438855d851a
  MultilineTextResult cc043409c1f4c9dc0f7ea5fdb8f9ec19
  Success b9eb2ae0777aa82b05464c5c85d22086
  TextResult f765b116b7c60d849aa141ac9f11ab3c
  _ideTypeName 862d0466a921badc471ac4eb799b1c5c
  ideDtorName f5cb16b133f56c5181009aa7f78d9703
  ideDtorTypeName 8722317caade6850b775626bc1244b04
  ideTCName 6707b0fb5bd9d8aacf896d456424bf01
  ideTypeName 102b07c9135d8fc8731c934f05b32722
  ideTypeOpName 08dd8715bd3877a439fc94b5ef8510e9
  ideValueOpName 2164408815ac127bc2a0c935191310ce
import  -/  Language.PureScript.Ide.Util 23feade20e7d884b8e398315c4ffa11e
  exports: b783a834cebd9a63a606ae4111317a86
  discardAnn dda9d4fafbbc8df2d6404b8b09ac7a49
  ideReadFile e90a75f47b35d9b93bb00b2e97526cbb
  identifierFromIdeDeclaration d3020ece8f1e881771f78c7f6ed69758
import  -/  Language.PureScript.Names 00f694509122478d97b327fbbccae327
  Ident 71f167265716f619863a793fa311e198
  ModuleName 1b2ddf0c04464d2fa2588925f10c1966
  ProperName a7268334e0b909381550b9329cb80fcc
  TypeName 40ce511c66a72431b4e87351210f7b03
import  -/  Language.PureScript.Parser.Common d20a7af8a890a4e56d3068b2fdbe8def
  mark 83d35623fe4be371bfcc0211f3ba9f7c
  readComments e2dc65750bc1cc3664308377b00ccabd
  runTokenParser 9dae932fdac5969d57d0bce79e0d461b
  same 568fb570455053ebd4f0317b8229f51c
  withSourceSpan 400076cd3e88a80ac3e6c4190539d64b
import  -/  Language.PureScript.Parser.Declarations 4331277871d8b757c9139b8595a399c8
  parseImportDeclaration' 8a7d826550f35590da48cf6298c1b535
  parseModuleDeclaration d38e908e035bf3d799f24593f1ed81c3
import  -/  Language.PureScript.Parser.Lexer ea857194274ee8b3812ad62bbb2c9ed1
  TokenParser 6e8d7b68c7546ba407a16e8526c7556f
  lex 2288b6151bebf7b01b4d73039b433c5f
  lexLenient 04037475ff800ffd3538c5f78c35b5ca
import  -/  System.IO.UTF8 1b807f4ae9bb108bad12de3c7965d740
  exports: b890695f59b7cd7dc0fa832606deb354
  writeUTF8FileT fe49b7a6fedff9432f10c998d39a3b13
import  -/  text-1.2.3.0:Data.Text 7daa7e6c9b39d8cc1679e5ec5c64d2be
import  -/  text-1.2.3.0:Data.Text.Internal 30a0a123f71f63b26cd34c6b24f23411
517be2cd432ddf7a12617d99fc5c372c
  $fEqImport :: GHC.Classes.Eq Language.PureScript.Ide.Imports.Import
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Imports.Import
                  Language.PureScript.Ide.Imports.$fEqImport_$c==
                  Language.PureScript.Ide.Imports.$fEqImport_$c/= -}
517be2cd432ddf7a12617d99fc5c372c
  $fEqImport_$c/= ::
    Language.PureScript.Ide.Imports.Import
    -> Language.PureScript.Ide.Imports.Import -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLL),1*U(1*U,1*U,1*U)><S(SLL),1*U(1*U,1*U,1*U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Ide.Imports.Import)
                   (y :: Language.PureScript.Ide.Imports.Import) ->
                 case Language.PureScript.Ide.Imports.$fEqImport_$c== x y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
517be2cd432ddf7a12617d99fc5c372c
  $fEqImport_$c== ::
    Language.PureScript.Ide.Imports.Import
    -> Language.PureScript.Ide.Imports.Import -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLL),1*U(1*U,1*U,1*U)><S(SLL),1*U(1*U,1*U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Imports.Import)
                   (w1 :: Language.PureScript.Ide.Imports.Import) ->
                 case w of ww { Language.PureScript.Ide.Imports.Import ww1 ww2 ww3 ->
                 case w1 of ww4 { Language.PureScript.Ide.Imports.Import ww5 ww6 ww7 ->
                 Language.PureScript.Ide.Imports.$w$c==
                   ww1
                   ww2
                   ww3
                   ww5
                   ww6
                   ww7 } }) -}
517be2cd432ddf7a12617d99fc5c372c
  $fShowImport ::
    GHC.Show.Show Language.PureScript.Ide.Imports.Import
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Imports.Import
                  Language.PureScript.Ide.Imports.$fShowImport_$cshowsPrec
                  Language.PureScript.Ide.Imports.$fShowImport_$cshow
                  Language.PureScript.Ide.Imports.$fShowImport_$cshowList -}
517be2cd432ddf7a12617d99fc5c372c
  $fShowImport1 ::
    Language.PureScript.Ide.Imports.Import -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(U,U,1*U)>,
     Unfolding: (\ (w :: Language.PureScript.Ide.Imports.Import) ->
                 case w of ww { Language.PureScript.Ide.Imports.Import ww1 ww2 ww3 ->
                 Language.PureScript.Ide.Imports.$w$cshowsPrec 0# ww1 ww2 ww3 }) -}
10501a6c41f850577a5739762a220962
  $fShowImport2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Ide.Imports.$fShowImport3) -}
b7e994fb4fa0cf4027b3abdbd815524c
  $fShowImport3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Import "#) -}
7a5b33e9427fac393693ee9f4663c017
  $fShowImport4 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11#) -}
198faac4817b6662e168fd6a40557d39
  $fShowImport5 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
517be2cd432ddf7a12617d99fc5c372c
  $fShowImport_$cshow ::
    Language.PureScript.Ide.Imports.Import -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U,U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Ide.Imports.Import) ->
                 Language.PureScript.Ide.Imports.$fShowImport_$cshowsPrec
                   Language.PureScript.Ide.Imports.$fShowImport5
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
517be2cd432ddf7a12617d99fc5c372c
  $fShowImport_$cshowList ::
    [Language.PureScript.Ide.Imports.Import] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Ide.Imports.Import])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Ide.Imports.Import
                   Language.PureScript.Ide.Imports.$fShowImport1
                   ls
                   s) -}
517be2cd432ddf7a12617d99fc5c372c
  $fShowImport_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Ide.Imports.Import -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(U,U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Ide.Imports.Import) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Language.PureScript.Ide.Imports.Import ww3 ww4 ww5 ->
                 Language.PureScript.Ide.Imports.$w$cshowsPrec
                   ww1
                   ww3
                   ww4
                   ww5 } }) -}
d06206d9fff9643fd6b7b90b82cd3d10
  $tc'Import :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11532549794840794695##
                   16139057027182537761##
                   Language.PureScript.Ide.Imports.$trModule
                   Language.PureScript.Ide.Imports.$tc'Import2
                   0#
                   Language.PureScript.Ide.Imports.$tc'Import1) -}
5565dfd66392efbf8990448966e5675a
  $tc'Import1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
bdeb35a05edba59343c71afc0783ba7f
  $tc'Import2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Imports.$tc'Import3) -}
f542a90197ec3c591962d25d98e97d81
  $tc'Import3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Import"#) -}
9030b90ce2ab966732fe2921ee7d4a35
  $tc'ImportParse :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16013523348555579622##
                   9295344580432673935##
                   Language.PureScript.Ide.Imports.$trModule
                   Language.PureScript.Ide.Imports.$tc'ImportParse2
                   0#
                   Language.PureScript.Ide.Imports.$tc'ImportParse1) -}
10707c0bcce9e7becc0ab7b7353fe60d
  $tc'ImportParse1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
65d51476f053cb62b142e1f00575286b
  $tc'ImportParse2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Imports.$tc'ImportParse3) -}
fee6c08d7e8d8deb70ec44ed06b93372
  $tc'ImportParse3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ImportParse"#) -}
45ce0d76396ac85de59bed7ae91efea7
  $tcImport :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11475845091056640519##
                   1220149350168328149##
                   Language.PureScript.Ide.Imports.$trModule
                   Language.PureScript.Ide.Imports.$tcImport1
                   0#
                   GHC.Types.krep$*) -}
014e0541d6da6c8cc6b5fb407e959cf8
  $tcImport1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Imports.$tcImport2) -}
ec7c61180f8ece9520db85edcafeec04
  $tcImport2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Import"#) -}
b3ce7505e42a31889609c4d2b0edf461
  $tcImportParse :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6026097352415222696##
                   18347969075760121913##
                   Language.PureScript.Ide.Imports.$trModule
                   Language.PureScript.Ide.Imports.$tcImportParse1
                   0#
                   GHC.Types.krep$*) -}
4a4190e2b95a146c07c3e31fd68042b1
  $tcImportParse1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Imports.$tcImportParse2) -}
419b4e60a441bb7afffd714e4f312b43
  $tcImportParse2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ImportParse"#) -}
4e7ab5f0d46a0450b9c06a2d47272986
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Language.PureScript.Ide.Imports.$trModule3
                   Language.PureScript.Ide.Imports.$trModule1) -}
27648ef98024a6a34dda019d36254777
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Imports.$trModule2) -}
0524b6157d1fb1d7a1a2f6e582986fe3
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Language.PureScript.Ide.Imports"#) -}
f0354f8bab3734dfce73b9d2fee180e6
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Imports.$trModule4) -}
40d738bc9f547753015704bfad54c0c0
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"#) -}
ebf5038c601dfcc9fa473247f12e72fd
  $w$c== ::
    Language.PureScript.Names.ModuleName
    -> Language.PureScript.AST.Declarations.ImportDeclarationType
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ModuleName
    -> Language.PureScript.AST.Declarations.ImportDeclarationType
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> GHC.Types.Bool
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><L,1*U><S,1*U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: Language.PureScript.Names.ModuleName)
                   (ww1 :: Language.PureScript.AST.Declarations.ImportDeclarationType)
                   (ww2 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww3 :: Language.PureScript.Names.ModuleName)
                   (ww4 :: Language.PureScript.AST.Declarations.ImportDeclarationType)
                   (ww5 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName) ->
                 case GHC.Classes.$fEq[]_$c==
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.Namespace)
                        (Language.PureScript.Names.$fEqProperName
                           @ 'Language.PureScript.Names.Namespace)
                        ww `cast` (Language.PureScript.Names.N:ModuleName[0])
                        ww3 `cast` (Language.PureScript.Names.N:ModuleName[0]) of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case Language.PureScript.AST.Declarations.$fEqImportDeclarationType_$c==
                             ww1
                             ww4 of wild1 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> case ww2 of wild2 {
                             GHC.Base.Nothing
                             -> case ww5 of wild3 {
                                  GHC.Base.Nothing -> GHC.Types.True
                                  GHC.Base.Just ipv -> GHC.Types.False }
                             GHC.Base.Just a1
                             -> case ww5 of wild3 {
                                  GHC.Base.Nothing -> GHC.Types.False
                                  GHC.Base.Just b1
                                  -> GHC.Classes.$fEq[]_$c==
                                       @ (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.Namespace)
                                       (Language.PureScript.Names.$fEqProperName
                                          @ 'Language.PureScript.Names.Namespace)
                                       a1 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                       b1
                                         `cast`
                                       (Language.PureScript.Names.N:ModuleName[0]) } } } }) -}
3b384c458ac06a45d3437f488208dd1f
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> Language.PureScript.Names.ModuleName
    -> Language.PureScript.AST.Declarations.ImportDeclarationType
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> GHC.Show.ShowS
  {- Arity: 4, Strictness: <S,U><L,U><L,U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Language.PureScript.Names.ModuleName)
                   (ww2 :: Language.PureScript.AST.Declarations.ImportDeclarationType)
                   (ww3 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName) ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.$fShowMaybe_$cshowsPrec
                       @ Language.PureScript.Names.ModuleName
                       Language.PureScript.Names.$fShowModuleName
                       Language.PureScript.Ide.Imports.$fShowImport4
                       ww3
                 } in
                 let {
                   g1 :: GHC.Base.String -> GHC.Base.String
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String) ->
                     Language.PureScript.Names.$w$cshowsPrec
                       11#
                       ww1
                       (GHC.Types.:
                          @ GHC.Types.Char
                          GHC.Show.showSpace1
                          (Language.PureScript.AST.Declarations.$fShowImportDeclarationType_$cshowsPrec
                             Language.PureScript.Ide.Imports.$fShowImport4
                             ww2
                             (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 (g x))))
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.Ide.Imports.$fShowImport2
                        (g1 x)
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Language.PureScript.Ide.Imports.$fShowImport2
                           (g1 (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))) }) -}
68ed81b604f91d60b90cd74eb357377d
  $wgo ::
    [Language.PureScript.Ide.Imports.Import]
    -> (# [Language.PureScript.Ide.Imports.Import],
          [Language.PureScript.Ide.Imports.Import] #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0] -}
6374a0a9167a334512a7135b7824d17d
  $wprettyPrintImport' ::
    Language.PureScript.Names.ModuleName
    -> Language.PureScript.AST.Declarations.ImportDeclarationType
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Data.Text.Internal.Text
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,1*U>, Inline: [0] -}
517be2cd432ddf7a12617d99fc5c372c
  data Import
    = Import Language.PureScript.Names.ModuleName
             Language.PureScript.AST.Declarations.ImportDeclarationType
             (GHC.Base.Maybe Language.PureScript.Names.ModuleName)
c586d3202ae66e461c55c0cc44dd8ab8
  data ImportParse
    = ImportParse {ipModuleName :: Language.PureScript.Names.ModuleName,
                   ipStart :: Language.PureScript.AST.SourcePos.SourcePos,
                   ipEnd :: Language.PureScript.AST.SourcePos.SourcePos,
                   ipImports :: [Language.PureScript.Ide.Imports.Import]}
086aafa6f897bc611434782a7c39d152
  addExplicitImport' ::
    Language.PureScript.Ide.Types.IdeDeclaration
    -> Language.PureScript.Names.ModuleName
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> [Language.PureScript.Ide.Imports.Import]
    -> [Language.PureScript.Ide.Imports.Import]
  {- Arity: 4, Strictness: <L,U><S,U><L,U><S,U> -}
03875c388df35a939deae071bc90238a
  addImplicitImport ::
    (Control.Monad.IO.Class.MonadIO m,
     Control.Monad.Error.Class.MonadError
       Language.PureScript.Ide.Error.IdeError m) =>
    GHC.IO.FilePath
    -> Language.PureScript.Names.ModuleName
    -> m [Data.Text.Internal.Text]
  {- Arity: 4,
     Strictness: <S(S(LC(C(S))LLL)L),U(U(U(A,C(U),A,A,A,A),C(C1(U)),A,A,A),C(U))><L,U(A,C(U),A)><L,U><L,U>,
     Unfolding: (\ @ m :: * -> *
                   ($dMonadIO :: Control.Monad.IO.Class.MonadIO m)
                   ($dMonadError :: Control.Monad.Error.Class.MonadError
                                      Language.PureScript.Ide.Error.IdeError m)
                   (eta :: GHC.IO.FilePath)
                   (eta1 :: Language.PureScript.Names.ModuleName) ->
                 let {
                   lvl23 :: Language.PureScript.Ide.Imports.Import
                   = Language.PureScript.Ide.Imports.Import
                       eta1
                       Language.PureScript.AST.Declarations.Implicit
                       (GHC.Base.Nothing @ Language.PureScript.Names.ModuleName)
                 } in
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.IO.Class.$p1MonadIO @ m $dMonadIO
                 } in
                 let {
                   $dApplicative :: GHC.Base.Applicative m
                   = GHC.Base.$p1Monad @ m $dMonad
                 } in
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ (Language.PureScript.Names.ModuleName, [Data.Text.Internal.Text],
                      [Language.PureScript.Ide.Imports.Import],
                      [Data.Text.Internal.Text])
                   @ [Data.Text.Internal.Text]
                   (Language.PureScript.Ide.Imports.parseImportsFromFile'
                      @ m
                      $dMonadIO
                      $dMonadError
                      eta)
                   (\ (ds :: (Language.PureScript.Names.ModuleName,
                              [Data.Text.Internal.Text],
                              [Language.PureScript.Ide.Imports.Import],
                              [Data.Text.Internal.Text])) ->
                    case ds of wild { (,,,) ds1 pre imports post ->
                    GHC.Base.pure
                      @ m
                      $dApplicative
                      @ [Data.Text.Internal.Text]
                      (GHC.Base.++
                         @ Data.Text.Internal.Text
                         pre
                         (GHC.Base.++
                            @ Data.Text.Internal.Text
                            (Language.PureScript.Ide.Imports.prettyPrintImportSection
                               (GHC.Types.:
                                  @ Language.PureScript.Ide.Imports.Import
                                  lvl23
                                  imports))
                            post)) })) -}
d6c06fb49e953c25f70de6470ec27ccb
  addImplicitImport' ::
    [Language.PureScript.Ide.Imports.Import]
    -> Language.PureScript.Names.ModuleName
    -> [Data.Text.Internal.Text]
  {- Arity: 2, Strictness: <L,U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (imports :: [Language.PureScript.Ide.Imports.Import])
                   (mn :: Language.PureScript.Names.ModuleName) ->
                 Language.PureScript.Ide.Imports.prettyPrintImportSection
                   (GHC.Types.:
                      @ Language.PureScript.Ide.Imports.Import
                      (Language.PureScript.Ide.Imports.Import
                         mn
                         Language.PureScript.AST.Declarations.Implicit
                         (GHC.Base.Nothing @ Language.PureScript.Names.ModuleName))
                      imports)) -}
c2f70b7e872197ab1b4480d284443a68
  addImportForIdentifier ::
    (Language.PureScript.Ide.Types.Ide m,
     Control.Monad.Error.Class.MonadError
       Language.PureScript.Ide.Error.IdeError m) =>
    GHC.IO.FilePath
    -> Data.Text.Internal.Text
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> [Language.PureScript.Ide.Filter.Filter]
    -> m (Data.Either.Either
            [Language.PureScript.Ide.Types.Match
               Language.PureScript.Ide.Types.IdeDeclaration]
            [Data.Text.Internal.Text])
  {- Arity: 6,
     Strictness: <S(S(S(LC(C(S))LLL)L)L),U(U(U(U(U(C(C1(U)),A),C(U),A,A,A,A),C(C1(U)),A,A,A),C(U)),U(A,U,A,A))><L,U(A,C(U),A)><L,U><L,U(U,U,U)><L,U><L,U> -}
bf3124dd77e240be15e0b8ef8e79e870
  addQualifiedImport ::
    (Control.Monad.IO.Class.MonadIO m,
     Control.Monad.Error.Class.MonadError
       Language.PureScript.Ide.Error.IdeError m) =>
    GHC.IO.FilePath
    -> Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ModuleName
    -> m [Data.Text.Internal.Text]
  {- Arity: 5,
     Strictness: <S(S(LC(C(S))LLL)L),U(U(U(A,C(U),A,A,A,A),C(C1(U)),A,A,A),C(U))><L,U(A,C(U),A)><L,U><L,U><L,U>,
     Unfolding: (\ @ m :: * -> *
                   ($dMonadIO :: Control.Monad.IO.Class.MonadIO m)
                   ($dMonadError :: Control.Monad.Error.Class.MonadError
                                      Language.PureScript.Ide.Error.IdeError m)
                   (eta :: GHC.IO.FilePath)
                   (eta1 :: Language.PureScript.Names.ModuleName)
                   (eta2 :: Language.PureScript.Names.ModuleName) ->
                 let {
                   lvl23 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName
                   = GHC.Base.Just @ Language.PureScript.Names.ModuleName eta2
                 } in
                 let {
                   lvl24 :: Language.PureScript.Ide.Imports.Import
                   = Language.PureScript.Ide.Imports.Import
                       eta1
                       Language.PureScript.AST.Declarations.Implicit
                       lvl23
                 } in
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.IO.Class.$p1MonadIO @ m $dMonadIO
                 } in
                 let {
                   $dApplicative :: GHC.Base.Applicative m
                   = GHC.Base.$p1Monad @ m $dMonad
                 } in
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ (Language.PureScript.Names.ModuleName, [Data.Text.Internal.Text],
                      [Language.PureScript.Ide.Imports.Import],
                      [Data.Text.Internal.Text])
                   @ [Data.Text.Internal.Text]
                   (Language.PureScript.Ide.Imports.parseImportsFromFile'
                      @ m
                      $dMonadIO
                      $dMonadError
                      eta)
                   (\ (ds :: (Language.PureScript.Names.ModuleName,
                              [Data.Text.Internal.Text],
                              [Language.PureScript.Ide.Imports.Import],
                              [Data.Text.Internal.Text])) ->
                    case ds of wild { (,,,) ds1 pre imports post ->
                    GHC.Base.pure
                      @ m
                      $dApplicative
                      @ [Data.Text.Internal.Text]
                      (GHC.Base.++
                         @ Data.Text.Internal.Text
                         pre
                         (GHC.Base.++
                            @ Data.Text.Internal.Text
                            (Language.PureScript.Ide.Imports.prettyPrintImportSection
                               (GHC.Types.:
                                  @ Language.PureScript.Ide.Imports.Import
                                  lvl24
                                  imports))
                            post)) })) -}
592d9cfcc9e193ada14d43af8e4c95bf
  addQualifiedImport' ::
    [Language.PureScript.Ide.Imports.Import]
    -> Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ModuleName
    -> [Data.Text.Internal.Text]
  {- Arity: 3, Strictness: <L,U><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (imports :: [Language.PureScript.Ide.Imports.Import])
                   (mn :: Language.PureScript.Names.ModuleName)
                   (qualifier :: Language.PureScript.Names.ModuleName) ->
                 Language.PureScript.Ide.Imports.prettyPrintImportSection
                   (GHC.Types.:
                      @ Language.PureScript.Ide.Imports.Import
                      (Language.PureScript.Ide.Imports.Import
                         mn
                         Language.PureScript.AST.Declarations.Implicit
                         (GHC.Base.Just @ Language.PureScript.Names.ModuleName qualifier))
                      imports)) -}
3b069e20c7df89d26924c48eb163124f
  answerRequest ::
    Control.Monad.IO.Class.MonadIO m =>
    GHC.Base.Maybe GHC.IO.FilePath
    -> [Data.Text.Internal.Text]
    -> m Language.PureScript.Ide.Types.Success
  {- Arity: 3,
     Strictness: <S(SL),U(1*U(1*U(A,1*C1(U),A,A,A,A),A,1*C1(C1(U)),A,A),1*C1(U))><S,1*U><L,U> -}
c586d3202ae66e461c55c0cc44dd8ab8
  ipEnd ::
    Language.PureScript.Ide.Imports.ImportParse
    -> Language.PureScript.AST.SourcePos.SourcePos
  RecSel Left Language.PureScript.Ide.Imports.ImportParse
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSL),1*U(A,A,1*U(U,U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Imports.ImportParse) ->
                 case ds of wild { Language.PureScript.Ide.Imports.ImportParse ds1 ds2 ds3 ds4 ->
                 ds3 }) -}
c586d3202ae66e461c55c0cc44dd8ab8
  ipImports ::
    Language.PureScript.Ide.Imports.ImportParse
    -> [Language.PureScript.Ide.Imports.Import]
  RecSel Left Language.PureScript.Ide.Imports.ImportParse
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLLS),1*U(A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Imports.ImportParse) ->
                 case ds of wild { Language.PureScript.Ide.Imports.ImportParse ds1 ds2 ds3 ds4 ->
                 ds4 }) -}
c586d3202ae66e461c55c0cc44dd8ab8
  ipModuleName ::
    Language.PureScript.Ide.Imports.ImportParse
    -> Language.PureScript.Names.ModuleName
  RecSel Left Language.PureScript.Ide.Imports.ImportParse
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLLL),1*U(1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Imports.ImportParse) ->
                 case ds of wild { Language.PureScript.Ide.Imports.ImportParse ds1 ds2 ds3 ds4 ->
                 ds1 }) -}
c586d3202ae66e461c55c0cc44dd8ab8
  ipStart ::
    Language.PureScript.Ide.Imports.ImportParse
    -> Language.PureScript.AST.SourcePos.SourcePos
  RecSel Left Language.PureScript.Ide.Imports.ImportParse
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLL),1*U(A,1*U(U,U),A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Imports.ImportParse) ->
                 case ds of wild { Language.PureScript.Ide.Imports.ImportParse ds1 ds2 ds3 ds4 ->
                 ds2 }) -}
cb925adb5fc01881fade844d52cc446e
  parseImport ::
    Data.Text.Internal.Text
    -> GHC.Base.Maybe Language.PureScript.Ide.Imports.Import
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (t :: Data.Text.Internal.Text) ->
                 case (Text.Parsec.Prim.runPT
                         @ Data.Text.Internal.Text
                         @ Data.Functor.Identity.Identity
                         @ GHC.Types.Char
                         @ ()
                         @ [Language.PureScript.Parser.Lexer.PositionedToken]
                         Language.PureScript.Parser.Lexer.$s$fStreamTextmChar0
                         (Language.PureScript.Parser.Lexer.lex1 @ ())
                           `cast`
                         (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                   <Data.Text.Internal.Text>_R
                                   <()>_R
                                   <Data.Functor.Identity.Identity>_R
                                   <[Language.PureScript.Parser.Lexer.PositionedToken]>_R))
                         GHC.Tuple.()
                         Language.PureScript.Ide.Imports.parseImport1
                         t)
                        `cast`
                      (Data.Functor.Identity.N:Identity[0]
                           <Data.Either.Either
                              Text.Parsec.Error.ParseError
                              [Language.PureScript.Parser.Lexer.PositionedToken]>_R) of wild {
                   Data.Either.Left x
                   -> GHC.Base.Nothing @ Language.PureScript.Ide.Imports.Import
                   Data.Either.Right y
                   -> case (Text.Parsec.Prim.runPT
                              @ [Language.PureScript.Parser.Lexer.PositionedToken]
                              @ Data.Functor.Identity.Identity
                              @ Language.PureScript.Parser.Lexer.PositionedToken
                              @ Language.PureScript.Parser.State.ParseState
                              @ (Language.PureScript.Names.ModuleName,
                                 Language.PureScript.AST.Declarations.ImportDeclarationType,
                                 GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                              (Language.PureScript.Parser.Common.$s$fStream[]mtok
                                 @ Language.PureScript.Parser.Lexer.PositionedToken)
                              Language.PureScript.Parser.Declarations.parseImportDeclaration'1
                                `cast`
                              (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                        <[Language.PureScript.Parser.Lexer.PositionedToken]>_R
                                        <Language.PureScript.Parser.State.ParseState>_R
                                        <Data.Functor.Identity.Identity>_R
                                        <(Language.PureScript.Names.ModuleName,
                                          Language.PureScript.AST.Declarations.ImportDeclarationType,
                                          GHC.Base.Maybe Language.PureScript.Names.ModuleName)>_R))
                              Language.PureScript.Parser.Common.runTokenParser2
                              Language.PureScript.Ide.Imports.parseImport1
                              (Language.PureScript.Parser.Lexer.updatePositions y))
                             `cast`
                           (Data.Functor.Identity.N:Identity[0]
                                <Data.Either.Either
                                   Text.Parsec.Error.ParseError
                                   (Language.PureScript.Names.ModuleName,
                                    Language.PureScript.AST.Declarations.ImportDeclarationType,
                                    GHC.Base.Maybe
                                      Language.PureScript.Names.ModuleName)>_R) of wild1 {
                        Data.Either.Left ds
                        -> GHC.Base.Nothing @ Language.PureScript.Ide.Imports.Import
                        Data.Either.Right ds
                        -> case ds of wild2 { (,,) mn ds1 mmn ->
                           case ds1 of wild3 { DEFAULT ->
                           GHC.Base.Just
                             @ Language.PureScript.Ide.Imports.Import
                             (Language.PureScript.Ide.Imports.Import mn wild3 mmn) } } } }) -}
b6a70402d8f4be15a35c916a51fdb8c1
  parseImport1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Ide.Imports.parseImport2) -}
a1685b6c9f5143433a501b0478765e42
  parseImport2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("<psc-ide>"#) -}
e7a7fb9e1acec07c0e4fe81de43d3ea6
  parseImportsFromFile ::
    (Control.Monad.IO.Class.MonadIO m,
     Control.Monad.Error.Class.MonadError
       Language.PureScript.Ide.Error.IdeError m) =>
    GHC.IO.FilePath
    -> m (Language.PureScript.Names.ModuleName,
          [(Language.PureScript.Names.ModuleName,
            Language.PureScript.AST.Declarations.ImportDeclarationType,
            GHC.Base.Maybe Language.PureScript.Names.ModuleName)])
  {- Arity: 3,
     Strictness: <S(S(LC(C(S))LLL)L),U(U(U(A,C(U),A,A,A,A),C(C1(U)),A,A,A),C(U))><L,U(A,C(U),A)><L,U>,
     Unfolding: (\ @ m :: * -> *
                   ($dMonadIO :: Control.Monad.IO.Class.MonadIO m)
                   ($dMonadError :: Control.Monad.Error.Class.MonadError
                                      Language.PureScript.Ide.Error.IdeError m)
                   (eta :: GHC.IO.FilePath) ->
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.IO.Class.$p1MonadIO @ m $dMonadIO
                 } in
                 let {
                   $dApplicative :: GHC.Base.Applicative m
                   = GHC.Base.$p1Monad @ m $dMonad
                 } in
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ (Language.PureScript.Names.ModuleName, [Data.Text.Internal.Text],
                      [Language.PureScript.Ide.Imports.Import],
                      [Data.Text.Internal.Text])
                   @ (Language.PureScript.Names.ModuleName,
                      [(Language.PureScript.Names.ModuleName,
                        Language.PureScript.AST.Declarations.ImportDeclarationType,
                        GHC.Base.Maybe Language.PureScript.Names.ModuleName)])
                   (Language.PureScript.Ide.Imports.parseImportsFromFile'
                      @ m
                      $dMonadIO
                      $dMonadError
                      eta)
                   (\ (ds :: (Language.PureScript.Names.ModuleName,
                              [Data.Text.Internal.Text],
                              [Language.PureScript.Ide.Imports.Import],
                              [Data.Text.Internal.Text])) ->
                    case ds of wild { (,,,) mn ds1 imports ds2 ->
                    GHC.Base.pure
                      @ m
                      $dApplicative
                      @ (Language.PureScript.Names.ModuleName,
                         [(Language.PureScript.Names.ModuleName,
                           Language.PureScript.AST.Declarations.ImportDeclarationType,
                           GHC.Base.Maybe Language.PureScript.Names.ModuleName)])
                      (mn,
                       GHC.Base.map
                         @ Language.PureScript.Ide.Imports.Import
                         @ (Language.PureScript.Names.ModuleName,
                            Language.PureScript.AST.Declarations.ImportDeclarationType,
                            GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                         Language.PureScript.Ide.Imports.parseImportsFromFile_unwrapImport
                         imports) })) -}
293fbcce6dce7c9e729e98207a6c7044
  parseImportsFromFile' ::
    (Control.Monad.IO.Class.MonadIO m,
     Control.Monad.Error.Class.MonadError
       Language.PureScript.Ide.Error.IdeError m) =>
    GHC.IO.FilePath
    -> m (Language.PureScript.Names.ModuleName,
          [Data.Text.Internal.Text],
          [Language.PureScript.Ide.Imports.Import],
          [Data.Text.Internal.Text])
  {- Arity: 3,
     Strictness: <S(S(LC(C(S))LLL)L),U(U(U(A,C(U),A,A,A,A),C(C1(U)),A,A,A),C(U))><L,U(A,C(U),A)><L,U>,
     Unfolding: (\ @ m :: * -> *
                   ($dMonadIO :: Control.Monad.IO.Class.MonadIO m)
                   ($dMonadError :: Control.Monad.Error.Class.MonadError
                                      Language.PureScript.Ide.Error.IdeError m)
                   (eta :: GHC.IO.FilePath) ->
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.IO.Class.$p1MonadIO @ m $dMonadIO
                 } in
                 let {
                   $dApplicative :: GHC.Base.Applicative m
                   = GHC.Base.$p1Monad @ m $dMonad
                 } in
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ (GHC.IO.FilePath, Data.Text.Internal.Text)
                   @ (Language.PureScript.Names.ModuleName, [Data.Text.Internal.Text],
                      [Language.PureScript.Ide.Imports.Import],
                      [Data.Text.Internal.Text])
                   (Language.PureScript.Ide.Util.ideReadFile
                      @ m
                      $dMonadIO
                      $dMonadError
                      eta)
                   (\ (ds :: (GHC.IO.FilePath, Data.Text.Internal.Text)) ->
                    case ds of wild { (,) ds1 file ->
                    case Language.PureScript.Ide.Imports.sliceImportSection
                           (Data.Text.lines file) of wild1 {
                      Data.Either.Left err
                      -> Control.Monad.Error.Class.throwError
                           @ Language.PureScript.Ide.Error.IdeError
                           @ m
                           $dMonadError
                           @ (Language.PureScript.Names.ModuleName, [Data.Text.Internal.Text],
                              [Language.PureScript.Ide.Imports.Import],
                              [Data.Text.Internal.Text])
                           (Language.PureScript.Ide.Error.GeneralError err)
                      Data.Either.Right res
                      -> GHC.Base.pure
                           @ m
                           $dApplicative
                           @ (Language.PureScript.Names.ModuleName, [Data.Text.Internal.Text],
                              [Language.PureScript.Ide.Imports.Import],
                              [Data.Text.Internal.Text])
                           res } })) -}
a86cdf85eaa05f4ffe90ffbd03ebb125
  parseImportsFromFile_unwrapImport ::
    Language.PureScript.Ide.Imports.Import
    -> (Language.PureScript.Names.ModuleName,
        Language.PureScript.AST.Declarations.ImportDeclarationType,
        GHC.Base.Maybe Language.PureScript.Names.ModuleName)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Imports.Import) ->
                 case ds of wild { Language.PureScript.Ide.Imports.Import a b c ->
                 (a, b, c) }) -}
d847d6011c077e3752ce769482b9e5a5
  prettyPrintImport' ::
    Language.PureScript.Ide.Imports.Import -> Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S(SSS),1*U(1*U,1*U,1*U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.PureScript.Ide.Imports.Import) ->
                 case w of ww { Language.PureScript.Ide.Imports.Import ww1 ww2 ww3 ->
                 Language.PureScript.Ide.Imports.$wprettyPrintImport'
                   ww1
                   ww2
                   ww3 }) -}
0e281ce840f9eb89acb08cf786cbc0a9
  prettyPrintImportSection ::
    [Language.PureScript.Ide.Imports.Import]
    -> [Data.Text.Internal.Text]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (imports :: [Language.PureScript.Ide.Imports.Import]) ->
                 case Language.PureScript.Ide.Imports.$wgo
                        imports of ww { (#,#) ww1 ww2 ->
                 GHC.Base.++
                   @ Data.Text.Internal.Text
                   (Data.OldList.sortBy
                      @ Data.Text.Internal.Text
                      Data.Text.$fOrdText_$ccompare
                      (GHC.Base.map
                         @ Language.PureScript.Ide.Imports.Import
                         @ Data.Text.Internal.Text
                         Language.PureScript.Ide.Imports.prettyPrintImport'
                         ww1))
                   (case ww2 of wild {
                      [] -> Language.PureScript.Ide.Imports.prettyPrintImportSection1
                      : ds1 ds2
                      -> case ww1 of wild1 {
                           []
                           -> Data.OldList.sortBy
                                @ Data.Text.Internal.Text
                                Data.Text.$fOrdText_$ccompare
                                (GHC.Base.map
                                   @ Language.PureScript.Ide.Imports.Import
                                   @ Data.Text.Internal.Text
                                   Language.PureScript.Ide.Imports.prettyPrintImport'
                                   wild)
                           : ds4 ds5
                           -> GHC.Types.:
                                @ Data.Text.Internal.Text
                                Data.Text.Internal.empty_
                                (Data.OldList.sortBy
                                   @ Data.Text.Internal.Text
                                   Data.Text.$fOrdText_$ccompare
                                   (GHC.Base.map
                                      @ Language.PureScript.Ide.Imports.Import
                                      @ Data.Text.Internal.Text
                                      Language.PureScript.Ide.Imports.prettyPrintImport'
                                      wild)) } }) }) -}
46c91d2b21b74867b04faacb6dc86f6d
  prettyPrintImportSection1 :: [Data.Text.Internal.Text]
  {- Unfolding: (Data.OldList.sortBy
                   @ Data.Text.Internal.Text
                   Data.Text.$fOrdText_$ccompare
                   (GHC.Base.map
                      @ Language.PureScript.Ide.Imports.Import
                      @ Data.Text.Internal.Text
                      Language.PureScript.Ide.Imports.prettyPrintImport'
                      (GHC.Types.[] @ Language.PureScript.Ide.Imports.Import))) -}
82e5584b83ca6c17c8143644b3185ad0
  sliceImportSection ::
    [Data.Text.Internal.Text]
    -> Data.Either.Either
         Data.Text.Internal.Text
         (Language.PureScript.Names.ModuleName, [Data.Text.Internal.Text],
          [Language.PureScript.Ide.Imports.Import],
          [Data.Text.Internal.Text])
  {- Arity: 1, Strictness: <L,U> -}
instance GHC.Classes.Eq [Language.PureScript.Ide.Imports.Import]
  = Language.PureScript.Ide.Imports.$fEqImport
instance GHC.Show.Show [Language.PureScript.Ide.Imports.Import]
  = Language.PureScript.Ide.Imports.$fShowImport
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

