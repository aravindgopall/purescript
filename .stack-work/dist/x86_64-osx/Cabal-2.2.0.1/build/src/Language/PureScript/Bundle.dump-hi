
==================== FINAL INTERFACE ====================
2019-01-24 14:14:00.156317 UTC

interface purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Bundle 8043
  interface hash: 90df0cf89102d2c9da8521ba5b002e94
  ABI hash: e9fc080977a6cbbcf186d859a93ee390
  export-list hash: 7e1ffaf1974cff705339929f1490c3b6
  orphan hash: 79f5bbdc74c73218f62748e875a9c647
  flag hash: 2ae478d21823b7c739b1b08c46262eb0
  opt_hash: 2c98c95d41c045ae9c2fb565ec8aabc6
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Language.PureScript.Bundle.bundle
  Language.PureScript.Bundle.bundleSM
  Language.PureScript.Bundle.getExportedIdentifiers
  Language.PureScript.Bundle.guessModuleIdentifier
  Language.PureScript.Bundle.moduleName
  Language.PureScript.Bundle.printErrorMessage
  Language.PureScript.Bundle.ErrorMessage{Language.PureScript.Bundle.ErrorInModule Language.PureScript.Bundle.InvalidTopLevel Language.PureScript.Bundle.MissingEntryPoint Language.PureScript.Bundle.MissingMainModule Language.PureScript.Bundle.UnableToParseModule Language.PureScript.Bundle.UnsupportedExport Language.PureScript.Bundle.UnsupportedModulePath}
  Language.PureScript.Bundle.ModuleIdentifier{Language.PureScript.Bundle.ModuleIdentifier}
  Language.PureScript.Bundle.ModuleType{Language.PureScript.Bundle.Foreign Language.PureScript.Bundle.Regular}
module dependencies: Paths_purescript
package dependencies: array-0.5.2.0 async-2.2.1 base-4.11.1.0
                      base-compat-0.10.4 binary-0.8.5.1 blaze-builder-0.4.1.0
                      bytestring-0.10.8.2 containers-0.5.11.0 deepseq-1.4.3.0
                      filepath-1.4.2 ghc-prim-0.5.2.0 hashable-1.2.7.0
                      integer-gmp-1.0.2.0 language-javascript-0.6.0.11 mtl-2.2.2
                      protolude-0.2.2 sourcemap-0.1.6 stm-2.4.5.0 syb-0.7 text-1.2.3.0
                      transformers-0.5.5.0 utf8-string-1.0.1.1
orphans: stm-2.4.5.0:Control.Monad.STM
         hashable-1.2.7.0:Data.Hashable.Generic
         transformers-0.5.5.0:Control.Monad.Trans.Error
         syb-0.7:Data.Generics.Instances text-1.2.3.0:Data.Text.Lazy
         text-1.2.3.0:Data.Text binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.Graph
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
import  -/  base-4.11.1.0:Control.Arrow ce43199b5356a11ee2a8317f0ec30aee
import  -/  base-4.11.1.0:Control.Monad c5f960c67d822497578bffbd3e4c01cf
import  -/  base-4.11.1.0:Data.Char 3e89818e2b8ef1a2cc5393163484da72
import  -/  base-4.11.1.0:Data.Either 39d922b371c4c52d426e9ee66de8371a
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.Functor f522c3501272159820fd6f242510732f
import  -/  base-4.11.1.0:Data.List 83dc843e47bfc0c5af51e19c6f3476d5
import  -/  base-4.11.1.0:Data.Maybe 409c3da2b142470b68be39ce1d97a9f7
import  -/  base-4.11.1.0:Data.OldList 1b35aa3c6805ff7c8887a35a866fe006
import  -/  base-4.11.1.0:Data.Traversable 7ad4edb9184ea1ae8e73f6b94f115c8c
import  -/  base-4.11.1.0:Data.Tuple 3af66f3ac61ed95ba8a3a3f68ebc5003
import  -/  base-4.11.1.0:Data.Version 26b96b3dd83a23703e0b8110475fc04a
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Char df8a8e058e3141ae6822492094eb6689
import  -/  base-4.11.1.0:GHC.Err 5e26aa744981f14e0f1e4d29c44ac52e
import  -/  base-4.11.1.0:GHC.IO 1d5542cc02075c5e948018bfacea89c1
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:GHC.Real b4beb0389ba1ad5d9640aae67848c5d3
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-compat-0.10.4:Prelude.Compat bb6796186ed35a1d09dc34362a3fc27e
import  -/  containers-0.5.11.0:Data.Graph 62516cbabce0b5240500dc0da6a9b2cf
import  -/  containers-0.5.11.0:Data.Set 7d3c64a641be4cacbcd8119445bab919
import  -/  containers-0.5.11.0:Data.Set.Internal 93fa3ef95853aa2a7aadf32d693bd451
import  -/  filepath-1.4.2:System.FilePath a538d436328dd004b88f7d29a8b244c0
import  -/  filepath-1.4.2:System.FilePath.Posix c021b7a40cfcdd9b08724b5bb7566b59
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  language-javascript-0.6.0.11:Language.JavaScript.Parser fbf89a16f99af1afcc6e4509cec1cbf6
import  -/  language-javascript-0.6.0.11:Language.JavaScript.Parser.AST 4b3343c84045afd7e43ca1ee2b8b52cf
import  -/  language-javascript-0.6.0.11:Language.JavaScript.Parser.Parser 2d496c459b60c675679d78fbf6f9beaf
import  -/  language-javascript-0.6.0.11:Language.JavaScript.Parser.SrcLocation 418ed7031887d6434f1bc05155aa7d7f
import  -/  language-javascript-0.6.0.11:Language.JavaScript.Parser.Token e755d663d5c9fcb0657f39d170aea981
import  -/  language-javascript-0.6.0.11:Language.JavaScript.Pretty.Printer 54d109e07d8edd0e986a1a420c8213f5
import  -/  mtl-2.2.2:Control.Monad.Error.Class df146c18e27154b8df4c8637c59fd61b
import  -/  protolude-0.2.2:Protolude 2c2d16096c8a60f59f646a3b93b0eb7b
import  -/  protolude-0.2.2:Protolude.List 3a80368167450d7a4360ebf1ea443345
import  -/  Paths_purescript b471cb3641a3834bb1f308b27437a78a
  exports: 011ad501fbfaff6e4e651a7af4df7ce9
  version 3901654c5f764cf9b152bdbd41b845d0
import  -/  sourcemap-0.1.6:SourceMap.Types b775770f549711c0150c5529f935d9d4
import  -/  syb-0.7:Data.Generics 2ddc257f9ac35414fc37ff4d19b4d388
import  -/  syb-0.7:Data.Generics.Aliases a5097c06261967df51d59247bf1d4958
import  -/  syb-0.7:Data.Generics.Schemes 58bc96c8ed0bed4ad53424f237efe8b8
408795b16966833f881f527854f903ea
  $fEqExportType ::
    GHC.Classes.Eq Language.PureScript.Bundle.ExportType
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Bundle.ExportType
                  Language.PureScript.Bundle.$fEqExportType_$c==
                  Language.PureScript.Bundle.$fEqExportType_$c/= -}
408795b16966833f881f527854f903ea
  $fEqExportType_$c/= ::
    Language.PureScript.Bundle.ExportType
    -> Language.PureScript.Bundle.ExportType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Bundle.ExportType)
                   (y :: Language.PureScript.Bundle.ExportType) ->
                 case x of wild {
                   Language.PureScript.Bundle.RegularExport a1
                   -> case y of wild1 {
                        Language.PureScript.Bundle.RegularExport b1
                        -> case GHC.Base.eqString a1 b1 of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False }
                        Language.PureScript.Bundle.ForeignReexport -> GHC.Types.True }
                   Language.PureScript.Bundle.ForeignReexport
                   -> case y of wild1 {
                        Language.PureScript.Bundle.RegularExport ipv -> GHC.Types.True
                        Language.PureScript.Bundle.ForeignReexport
                        -> GHC.Types.False } }) -}
408795b16966833f881f527854f903ea
  $fEqExportType_$c== ::
    Language.PureScript.Bundle.ExportType
    -> Language.PureScript.Bundle.ExportType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Language.PureScript.Bundle.ExportType)
                   (ds1 :: Language.PureScript.Bundle.ExportType) ->
                 case ds of wild {
                   Language.PureScript.Bundle.RegularExport a1
                   -> case ds1 of wild1 {
                        Language.PureScript.Bundle.RegularExport b1
                        -> GHC.Base.eqString a1 b1
                        Language.PureScript.Bundle.ForeignReexport -> GHC.Types.False }
                   Language.PureScript.Bundle.ForeignReexport
                   -> case ds1 of wild1 {
                        Language.PureScript.Bundle.RegularExport ipv -> GHC.Types.False
                        Language.PureScript.Bundle.ForeignReexport
                        -> GHC.Types.True } }) -}
6e3d4a3a42505159bf7603316f530f69
  $fEqModuleIdentifier ::
    GHC.Classes.Eq Language.PureScript.Bundle.ModuleIdentifier
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Bundle.ModuleIdentifier
                  Language.PureScript.Bundle.$fEqModuleIdentifier_$c==
                  Language.PureScript.Bundle.$fEqModuleIdentifier_$c/= -}
6e3d4a3a42505159bf7603316f530f69
  $fEqModuleIdentifier_$c/= ::
    Language.PureScript.Bundle.ModuleIdentifier
    -> Language.PureScript.Bundle.ModuleIdentifier -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Bundle.ModuleIdentifier)
                   (y :: Language.PureScript.Bundle.ModuleIdentifier) ->
                 case x of wild { Language.PureScript.Bundle.ModuleIdentifier a1 a2 ->
                 case y of wild1 { Language.PureScript.Bundle.ModuleIdentifier b1 b2 ->
                 case GHC.Base.eqString a1 b1 of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True
                   -> case a2 of wild3 {
                        Language.PureScript.Bundle.Regular
                        -> case b2 of wild4 {
                             Language.PureScript.Bundle.Regular -> GHC.Types.False
                             Language.PureScript.Bundle.Foreign -> GHC.Types.True }
                        Language.PureScript.Bundle.Foreign
                        -> case b2 of wild4 {
                             Language.PureScript.Bundle.Regular -> GHC.Types.True
                             Language.PureScript.Bundle.Foreign -> GHC.Types.False } } } } }) -}
6e3d4a3a42505159bf7603316f530f69
  $fEqModuleIdentifier_$c== ::
    Language.PureScript.Bundle.ModuleIdentifier
    -> Language.PureScript.Bundle.ModuleIdentifier -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Bundle.ModuleIdentifier)
                   (w1 :: Language.PureScript.Bundle.ModuleIdentifier) ->
                 case w of ww { Language.PureScript.Bundle.ModuleIdentifier ww1 ww2 ->
                 case w1 of ww3 { Language.PureScript.Bundle.ModuleIdentifier ww4 ww5 ->
                 Language.PureScript.Bundle.$w$c== ww1 ww2 ww4 ww5 } }) -}
f1d9ab0b29ba35854d25beb6708a10f7
  $fEqModuleIdentifier_$c==1 ::
    Language.PureScript.Bundle.ModuleType
    -> Language.PureScript.Bundle.ModuleType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Language.PureScript.Bundle.ModuleType)
                   (ds1 :: Language.PureScript.Bundle.ModuleType) ->
                 case ds of wild {
                   Language.PureScript.Bundle.Regular
                   -> case ds1 of wild1 {
                        Language.PureScript.Bundle.Regular -> GHC.Types.True
                        Language.PureScript.Bundle.Foreign -> GHC.Types.False }
                   Language.PureScript.Bundle.Foreign
                   -> case ds1 of wild1 {
                        Language.PureScript.Bundle.Regular -> GHC.Types.False
                        Language.PureScript.Bundle.Foreign -> GHC.Types.True } }) -}
f1d9ab0b29ba35854d25beb6708a10f7
  $fEqModuleType ::
    GHC.Classes.Eq Language.PureScript.Bundle.ModuleType
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Bundle.ModuleType
                  Language.PureScript.Bundle.$fEqModuleIdentifier_$c==1
                  Language.PureScript.Bundle.$fEqModuleType_$c/= -}
f1d9ab0b29ba35854d25beb6708a10f7
  $fEqModuleType_$c/= ::
    Language.PureScript.Bundle.ModuleType
    -> Language.PureScript.Bundle.ModuleType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Bundle.ModuleType)
                   (y :: Language.PureScript.Bundle.ModuleType) ->
                 case x of wild {
                   Language.PureScript.Bundle.Regular
                   -> case y of wild1 {
                        Language.PureScript.Bundle.Regular -> GHC.Types.False
                        Language.PureScript.Bundle.Foreign -> GHC.Types.True }
                   Language.PureScript.Bundle.Foreign
                   -> case y of wild1 {
                        Language.PureScript.Bundle.Regular -> GHC.Types.True
                        Language.PureScript.Bundle.Foreign -> GHC.Types.False } }) -}
408795b16966833f881f527854f903ea
  $fOrdExportType ::
    GHC.Classes.Ord Language.PureScript.Bundle.ExportType
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Bundle.ExportType
                  Language.PureScript.Bundle.$fEqExportType
                  Language.PureScript.Bundle.$fOrdExportType_$ccompare
                  Language.PureScript.Bundle.$fOrdExportType_$c<
                  Language.PureScript.Bundle.$fOrdExportType_$c<=
                  Language.PureScript.Bundle.$fOrdExportType_$c>
                  Language.PureScript.Bundle.$fOrdExportType_$c>=
                  Language.PureScript.Bundle.$fOrdExportType_$cmax
                  Language.PureScript.Bundle.$fOrdExportType_$cmin -}
408795b16966833f881f527854f903ea
  $fOrdExportType_$c< ::
    Language.PureScript.Bundle.ExportType
    -> Language.PureScript.Bundle.ExportType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.Bundle.ExportType)
                   (b :: Language.PureScript.Bundle.ExportType) ->
                 case a of wild {
                   Language.PureScript.Bundle.RegularExport a1
                   -> case b of wild1 {
                        Language.PureScript.Bundle.RegularExport b1
                        -> GHC.Classes.$fOrd[]_$s$c<1 a1 b1
                        Language.PureScript.Bundle.ForeignReexport -> GHC.Types.True }
                   Language.PureScript.Bundle.ForeignReexport
                   -> case b of wild1 { DEFAULT -> GHC.Types.False } }) -}
408795b16966833f881f527854f903ea
  $fOrdExportType_$c<= ::
    Language.PureScript.Bundle.ExportType
    -> Language.PureScript.Bundle.ExportType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Language.PureScript.Bundle.ExportType)
                   (b :: Language.PureScript.Bundle.ExportType) ->
                 case b of wild {
                   Language.PureScript.Bundle.RegularExport a1
                   -> case a of wild1 {
                        Language.PureScript.Bundle.RegularExport b1
                        -> case GHC.Classes.$fOrd[]_$s$ccompare1 a1 b1 of wild2 {
                             DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }
                        Language.PureScript.Bundle.ForeignReexport -> GHC.Types.False }
                   Language.PureScript.Bundle.ForeignReexport
                   -> case a of wild1 { DEFAULT -> GHC.Types.True } }) -}
408795b16966833f881f527854f903ea
  $fOrdExportType_$c> ::
    Language.PureScript.Bundle.ExportType
    -> Language.PureScript.Bundle.ExportType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, True)
                (\ (a :: Language.PureScript.Bundle.ExportType)
                   (b :: Language.PureScript.Bundle.ExportType) ->
                 Language.PureScript.Bundle.$fOrdExportType_$c< b a) -}
408795b16966833f881f527854f903ea
  $fOrdExportType_$c>= ::
    Language.PureScript.Bundle.ExportType
    -> Language.PureScript.Bundle.ExportType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Language.PureScript.Bundle.ExportType)
                   (b :: Language.PureScript.Bundle.ExportType) ->
                 case a of wild {
                   Language.PureScript.Bundle.RegularExport a1
                   -> case b of wild1 {
                        Language.PureScript.Bundle.RegularExport b1
                        -> case GHC.Classes.$fOrd[]_$s$ccompare1 a1 b1 of wild2 {
                             DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }
                        Language.PureScript.Bundle.ForeignReexport -> GHC.Types.False }
                   Language.PureScript.Bundle.ForeignReexport
                   -> case b of wild1 { DEFAULT -> GHC.Types.True } }) -}
408795b16966833f881f527854f903ea
  $fOrdExportType_$ccompare ::
    Language.PureScript.Bundle.ExportType
    -> Language.PureScript.Bundle.ExportType -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.Bundle.ExportType)
                   (b :: Language.PureScript.Bundle.ExportType) ->
                 case a of wild {
                   Language.PureScript.Bundle.RegularExport a1
                   -> case b of wild1 {
                        Language.PureScript.Bundle.RegularExport b1
                        -> GHC.Classes.$fOrd[]_$s$ccompare1 a1 b1
                        Language.PureScript.Bundle.ForeignReexport -> GHC.Types.LT }
                   Language.PureScript.Bundle.ForeignReexport
                   -> case b of wild1 {
                        Language.PureScript.Bundle.RegularExport ipv -> GHC.Types.GT
                        Language.PureScript.Bundle.ForeignReexport -> GHC.Types.EQ } }) -}
408795b16966833f881f527854f903ea
  $fOrdExportType_$cmax ::
    Language.PureScript.Bundle.ExportType
    -> Language.PureScript.Bundle.ExportType
    -> Language.PureScript.Bundle.ExportType
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (x :: Language.PureScript.Bundle.ExportType)
                   (y :: Language.PureScript.Bundle.ExportType) ->
                 case y of wild {
                   Language.PureScript.Bundle.RegularExport a1
                   -> case x of wild1 {
                        Language.PureScript.Bundle.RegularExport b1
                        -> case GHC.Classes.$fOrd[]_$s$ccompare1 a1 b1 of wild2 {
                             DEFAULT -> wild GHC.Types.LT -> wild1 }
                        Language.PureScript.Bundle.ForeignReexport
                        -> Language.PureScript.Bundle.ForeignReexport }
                   Language.PureScript.Bundle.ForeignReexport
                   -> case x of wild1 { DEFAULT ->
                      Language.PureScript.Bundle.ForeignReexport } }) -}
408795b16966833f881f527854f903ea
  $fOrdExportType_$cmin ::
    Language.PureScript.Bundle.ExportType
    -> Language.PureScript.Bundle.ExportType
    -> Language.PureScript.Bundle.ExportType
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Bundle.ExportType)
                   (y :: Language.PureScript.Bundle.ExportType) ->
                 case y of wild {
                   Language.PureScript.Bundle.RegularExport a1
                   -> case x of wild1 {
                        Language.PureScript.Bundle.RegularExport b1
                        -> case GHC.Classes.$fOrd[]_$s$ccompare1 a1 b1 of wild2 {
                             DEFAULT -> wild1 GHC.Types.LT -> wild }
                        Language.PureScript.Bundle.ForeignReexport -> wild }
                   Language.PureScript.Bundle.ForeignReexport -> x }) -}
6e3d4a3a42505159bf7603316f530f69
  $fOrdModuleIdentifier ::
    GHC.Classes.Ord Language.PureScript.Bundle.ModuleIdentifier
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Bundle.ModuleIdentifier
                  Language.PureScript.Bundle.$fEqModuleIdentifier
                  Language.PureScript.Bundle.$fOrdModuleIdentifier_$ccompare
                  Language.PureScript.Bundle.$fOrdModuleIdentifier_$c<
                  Language.PureScript.Bundle.$fOrdModuleIdentifier_$c<=
                  Language.PureScript.Bundle.$fOrdModuleIdentifier_$c>
                  Language.PureScript.Bundle.$fOrdModuleIdentifier_$c>=
                  Language.PureScript.Bundle.$fOrdModuleIdentifier_$cmax
                  Language.PureScript.Bundle.$fOrdModuleIdentifier_$cmin -}
6e3d4a3a42505159bf7603316f530f69
  $fOrdModuleIdentifier_$c< ::
    Language.PureScript.Bundle.ModuleIdentifier
    -> Language.PureScript.Bundle.ModuleIdentifier -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Bundle.ModuleIdentifier)
                   (w1 :: Language.PureScript.Bundle.ModuleIdentifier) ->
                 case w of ww { Language.PureScript.Bundle.ModuleIdentifier ww1 ww2 ->
                 case w1 of ww3 { Language.PureScript.Bundle.ModuleIdentifier ww4 ww5 ->
                 Language.PureScript.Bundle.$w$c< ww1 ww2 ww4 ww5 } }) -}
f1d9ab0b29ba35854d25beb6708a10f7
  $fOrdModuleIdentifier_$c<1 ::
    Language.PureScript.Bundle.ModuleType
    -> Language.PureScript.Bundle.ModuleType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.Bundle.ModuleType)
                   (b :: Language.PureScript.Bundle.ModuleType) ->
                 case a of wild {
                   Language.PureScript.Bundle.Regular
                   -> case b of wild1 {
                        Language.PureScript.Bundle.Regular -> GHC.Types.False
                        Language.PureScript.Bundle.Foreign -> GHC.Types.True }
                   Language.PureScript.Bundle.Foreign
                   -> case b of wild1 { DEFAULT -> GHC.Types.False } }) -}
6e3d4a3a42505159bf7603316f530f69
  $fOrdModuleIdentifier_$c<= ::
    Language.PureScript.Bundle.ModuleIdentifier
    -> Language.PureScript.Bundle.ModuleIdentifier -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Bundle.ModuleIdentifier)
                   (w1 :: Language.PureScript.Bundle.ModuleIdentifier) ->
                 case w of ww { Language.PureScript.Bundle.ModuleIdentifier ww1 ww2 ->
                 case w1 of ww3 { Language.PureScript.Bundle.ModuleIdentifier ww4 ww5 ->
                 Language.PureScript.Bundle.$w$c<= ww1 ww2 ww4 ww5 } }) -}
6e3d4a3a42505159bf7603316f530f69
  $fOrdModuleIdentifier_$c> ::
    Language.PureScript.Bundle.ModuleIdentifier
    -> Language.PureScript.Bundle.ModuleIdentifier -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
     Unfolding: InlineRule (2, True, True)
                (\ (a :: Language.PureScript.Bundle.ModuleIdentifier)
                   (b :: Language.PureScript.Bundle.ModuleIdentifier) ->
                 Language.PureScript.Bundle.$fOrdModuleIdentifier_$c< b a) -}
6e3d4a3a42505159bf7603316f530f69
  $fOrdModuleIdentifier_$c>= ::
    Language.PureScript.Bundle.ModuleIdentifier
    -> Language.PureScript.Bundle.ModuleIdentifier -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Bundle.ModuleIdentifier)
                   (w1 :: Language.PureScript.Bundle.ModuleIdentifier) ->
                 case w of ww { Language.PureScript.Bundle.ModuleIdentifier ww1 ww2 ->
                 case w1 of ww3 { Language.PureScript.Bundle.ModuleIdentifier ww4 ww5 ->
                 Language.PureScript.Bundle.$w$c>= ww1 ww2 ww4 ww5 } }) -}
6e3d4a3a42505159bf7603316f530f69
  $fOrdModuleIdentifier_$ccompare ::
    Language.PureScript.Bundle.ModuleIdentifier
    -> Language.PureScript.Bundle.ModuleIdentifier
    -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Bundle.ModuleIdentifier)
                   (w1 :: Language.PureScript.Bundle.ModuleIdentifier) ->
                 case w of ww { Language.PureScript.Bundle.ModuleIdentifier ww1 ww2 ->
                 case w1 of ww3 { Language.PureScript.Bundle.ModuleIdentifier ww4 ww5 ->
                 Language.PureScript.Bundle.$w$ccompare ww1 ww2 ww4 ww5 } }) -}
f1d9ab0b29ba35854d25beb6708a10f7
  $fOrdModuleIdentifier_$ccompare1 ::
    Language.PureScript.Bundle.ModuleType
    -> Language.PureScript.Bundle.ModuleType -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.Bundle.ModuleType)
                   (b :: Language.PureScript.Bundle.ModuleType) ->
                 case a of wild {
                   Language.PureScript.Bundle.Regular
                   -> case b of wild1 {
                        Language.PureScript.Bundle.Regular -> GHC.Types.EQ
                        Language.PureScript.Bundle.Foreign -> GHC.Types.LT }
                   Language.PureScript.Bundle.Foreign
                   -> case b of wild1 {
                        Language.PureScript.Bundle.Regular -> GHC.Types.GT
                        Language.PureScript.Bundle.Foreign -> GHC.Types.EQ } }) -}
6e3d4a3a42505159bf7603316f530f69
  $fOrdModuleIdentifier_$cmax ::
    Language.PureScript.Bundle.ModuleIdentifier
    -> Language.PureScript.Bundle.ModuleIdentifier
    -> Language.PureScript.Bundle.ModuleIdentifier
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(U,U)><S(SL),1*U(U,U)>m, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Bundle.ModuleIdentifier)
                   (w1 :: Language.PureScript.Bundle.ModuleIdentifier) ->
                 case w of ww { Language.PureScript.Bundle.ModuleIdentifier ww1 ww2 ->
                 case w1 of ww3 { Language.PureScript.Bundle.ModuleIdentifier ww4 ww5 ->
                 case GHC.Classes.$fOrd[]_$s$ccompare1 ww4 ww1 of wild {
                   GHC.Types.LT -> Language.PureScript.Bundle.ModuleIdentifier ww1 ww2
                   GHC.Types.EQ
                   -> case ww5 of wild1 {
                        Language.PureScript.Bundle.Regular
                        -> case ww2 of wild2 {
                             Language.PureScript.Bundle.Regular
                             -> Language.PureScript.Bundle.ModuleIdentifier
                                  ww4
                                  Language.PureScript.Bundle.Regular
                             Language.PureScript.Bundle.Foreign
                             -> Language.PureScript.Bundle.ModuleIdentifier
                                  ww1
                                  Language.PureScript.Bundle.Foreign }
                        Language.PureScript.Bundle.Foreign
                        -> case ww2 of wild2 { DEFAULT ->
                           Language.PureScript.Bundle.ModuleIdentifier
                             ww4
                             Language.PureScript.Bundle.Foreign } }
                   GHC.Types.GT
                   -> Language.PureScript.Bundle.ModuleIdentifier ww4 ww5 } } }) -}
6e3d4a3a42505159bf7603316f530f69
  $fOrdModuleIdentifier_$cmin ::
    Language.PureScript.Bundle.ModuleIdentifier
    -> Language.PureScript.Bundle.ModuleIdentifier
    -> Language.PureScript.Bundle.ModuleIdentifier
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(U,U)><S(SL),1*U(U,U)>m, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Bundle.ModuleIdentifier)
                   (w1 :: Language.PureScript.Bundle.ModuleIdentifier) ->
                 case w of ww { Language.PureScript.Bundle.ModuleIdentifier ww1 ww2 ->
                 case w1 of ww3 { Language.PureScript.Bundle.ModuleIdentifier ww4 ww5 ->
                 case GHC.Classes.$fOrd[]_$s$ccompare1 ww4 ww1 of wild {
                   GHC.Types.LT -> Language.PureScript.Bundle.ModuleIdentifier ww4 ww5
                   GHC.Types.EQ
                   -> case ww5 of wild1 {
                        Language.PureScript.Bundle.Regular
                        -> case ww2 of wild2 {
                             Language.PureScript.Bundle.Regular
                             -> Language.PureScript.Bundle.ModuleIdentifier
                                  ww1
                                  Language.PureScript.Bundle.Regular
                             Language.PureScript.Bundle.Foreign
                             -> Language.PureScript.Bundle.ModuleIdentifier
                                  ww4
                                  Language.PureScript.Bundle.Regular }
                        Language.PureScript.Bundle.Foreign
                        -> case ww2 of wild2 { DEFAULT ->
                           Language.PureScript.Bundle.ModuleIdentifier ww1 wild2 } }
                   GHC.Types.GT
                   -> Language.PureScript.Bundle.ModuleIdentifier ww1 ww2 } } }) -}
f1d9ab0b29ba35854d25beb6708a10f7
  $fOrdModuleType ::
    GHC.Classes.Ord Language.PureScript.Bundle.ModuleType
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Bundle.ModuleType
                  Language.PureScript.Bundle.$fEqModuleType
                  Language.PureScript.Bundle.$fOrdModuleIdentifier_$ccompare1
                  Language.PureScript.Bundle.$fOrdModuleIdentifier_$c<1
                  Language.PureScript.Bundle.$fOrdModuleType_$c<=
                  Language.PureScript.Bundle.$fOrdModuleType_$c>
                  Language.PureScript.Bundle.$fOrdModuleType_$c>=
                  Language.PureScript.Bundle.$fOrdModuleType_$cmax
                  Language.PureScript.Bundle.$fOrdModuleType_$cmin -}
f1d9ab0b29ba35854d25beb6708a10f7
  $fOrdModuleType_$c<= ::
    Language.PureScript.Bundle.ModuleType
    -> Language.PureScript.Bundle.ModuleType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.Bundle.ModuleType)
                   (b :: Language.PureScript.Bundle.ModuleType) ->
                 case b of wild {
                   Language.PureScript.Bundle.Regular
                   -> case a of wild1 {
                        Language.PureScript.Bundle.Regular -> GHC.Types.True
                        Language.PureScript.Bundle.Foreign -> GHC.Types.False }
                   Language.PureScript.Bundle.Foreign
                   -> case a of wild1 { DEFAULT -> GHC.Types.True } }) -}
f1d9ab0b29ba35854d25beb6708a10f7
  $fOrdModuleType_$c> ::
    Language.PureScript.Bundle.ModuleType
    -> Language.PureScript.Bundle.ModuleType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, True)
                (\ (a :: Language.PureScript.Bundle.ModuleType)
                   (b :: Language.PureScript.Bundle.ModuleType) ->
                 Language.PureScript.Bundle.$fOrdModuleIdentifier_$c<1 b a) -}
f1d9ab0b29ba35854d25beb6708a10f7
  $fOrdModuleType_$c>= ::
    Language.PureScript.Bundle.ModuleType
    -> Language.PureScript.Bundle.ModuleType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.Bundle.ModuleType)
                   (b :: Language.PureScript.Bundle.ModuleType) ->
                 case a of wild {
                   Language.PureScript.Bundle.Regular
                   -> case b of wild1 {
                        Language.PureScript.Bundle.Regular -> GHC.Types.True
                        Language.PureScript.Bundle.Foreign -> GHC.Types.False }
                   Language.PureScript.Bundle.Foreign
                   -> case b of wild1 { DEFAULT -> GHC.Types.True } }) -}
f1d9ab0b29ba35854d25beb6708a10f7
  $fOrdModuleType_$cmax ::
    Language.PureScript.Bundle.ModuleType
    -> Language.PureScript.Bundle.ModuleType
    -> Language.PureScript.Bundle.ModuleType
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Bundle.ModuleType)
                   (y :: Language.PureScript.Bundle.ModuleType) ->
                 case y of wild {
                   Language.PureScript.Bundle.Regular -> x
                   Language.PureScript.Bundle.Foreign
                   -> case x of wild1 { DEFAULT ->
                      Language.PureScript.Bundle.Foreign } }) -}
f1d9ab0b29ba35854d25beb6708a10f7
  $fOrdModuleType_$cmin ::
    Language.PureScript.Bundle.ModuleType
    -> Language.PureScript.Bundle.ModuleType
    -> Language.PureScript.Bundle.ModuleType
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Bundle.ModuleType)
                   (y :: Language.PureScript.Bundle.ModuleType) ->
                 case y of wild {
                   Language.PureScript.Bundle.Regular
                   -> case x of wild1 { DEFAULT ->
                      Language.PureScript.Bundle.Regular }
                   Language.PureScript.Bundle.Foreign -> x }) -}
1ae2233781eec58c6f5c05da01cc27d8
  $fShowErrorMessage ::
    GHC.Show.Show Language.PureScript.Bundle.ErrorMessage
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Bundle.ErrorMessage
                  Language.PureScript.Bundle.$fShowErrorMessage_$cshowsPrec
                  Language.PureScript.Bundle.$fShowErrorMessage_$cshow
                  Language.PureScript.Bundle.$fShowErrorMessage_$cshowList -}
1ae2233781eec58c6f5c05da01cc27d8
  $fShowErrorMessage1 ::
    Language.PureScript.Bundle.ErrorMessage -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (Language.PureScript.Bundle.$fShowErrorMessage_$cshowsPrec
                   Language.PureScript.Bundle.$fShowErrorMessage2) -}
33497a2bf85859d311c30a1d22f634d8
  $fShowErrorMessage2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
1ae2233781eec58c6f5c05da01cc27d8
  $fShowErrorMessage_$cshow ::
    Language.PureScript.Bundle.ErrorMessage -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Bundle.ErrorMessage) ->
                 Language.PureScript.Bundle.$fShowErrorMessage_$s$cshowsPrec
                   (GHC.Types.[] @ GHC.Types.Char)
                   x
                   0#) -}
1ae2233781eec58c6f5c05da01cc27d8
  $fShowErrorMessage_$cshowList ::
    [Language.PureScript.Bundle.ErrorMessage] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Bundle.ErrorMessage])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Bundle.ErrorMessage
                   Language.PureScript.Bundle.$fShowErrorMessage1
                   ls
                   s) -}
1ae2233781eec58c6f5c05da01cc27d8
  $fShowErrorMessage_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Bundle.ErrorMessage -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U> -}
1ae2233781eec58c6f5c05da01cc27d8
  $fShowErrorMessage_$s$cshowsPrec ::
    [GHC.Types.Char]
    -> Language.PureScript.Bundle.ErrorMessage
    -> GHC.Prim.Int#
    -> GHC.Base.String
  {- Arity: 3, Strictness: <L,U><S,1*U><L,U> -}
408795b16966833f881f527854f903ea
  $fShowExportType ::
    GHC.Show.Show Language.PureScript.Bundle.ExportType
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Bundle.ExportType
                  Language.PureScript.Bundle.$fShowExportType_$cshowsPrec
                  Language.PureScript.Bundle.$fShowExportType_$cshow
                  Language.PureScript.Bundle.$fShowExportType_$cshowList -}
408795b16966833f881f527854f903ea
  $fShowExportType1 ::
    Language.PureScript.Bundle.ExportType -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (Language.PureScript.Bundle.$fShowExportType_$cshowsPrec
                   Language.PureScript.Bundle.$fShowErrorMessage2) -}
c0ad7deb148aa434f0d8d3dbf31194cf
  $fShowExportType2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Bundle.$fShowExportType3) -}
4bc76c128a5b5b87314a650cda1c7d4a
  $fShowExportType3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ForeignReexport"#) -}
8f84f7a054a67a3eb0ac98570ec594e0
  $fShowExportType4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("RegularExport "#) -}
f9080e49a6d71c59945b7c0e4c23e210
  $fShowExportType5 :: [GHC.Types.Char]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.$fShow(,)3
                   (GHC.Types.[] @ GHC.Types.Char)) -}
408795b16966833f881f527854f903ea
  $fShowExportType_$cshow ::
    Language.PureScript.Bundle.ExportType -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: Language.PureScript.Bundle.ExportType) ->
                 case x of wild {
                   Language.PureScript.Bundle.RegularExport b1
                   -> GHC.CString.unpackAppendCString#
                        Language.PureScript.Bundle.$fShowExportType4
                        (GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.$fShow(,)3
                           (GHC.Show.showLitString
                              b1
                              Language.PureScript.Bundle.$fShowExportType5))
                   Language.PureScript.Bundle.ForeignReexport
                   -> Language.PureScript.Bundle.$fShowExportType2 }) -}
408795b16966833f881f527854f903ea
  $fShowExportType_$cshowList ::
    [Language.PureScript.Bundle.ExportType] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Bundle.ExportType])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Bundle.ExportType
                   Language.PureScript.Bundle.$fShowExportType1
                   ls
                   s) -}
408795b16966833f881f527854f903ea
  $fShowExportType_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Bundle.ExportType -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ (a :: GHC.Types.Int)
                   (ds :: Language.PureScript.Bundle.ExportType)
                   (eta :: GHC.Base.String) ->
                 case ds of wild {
                   Language.PureScript.Bundle.RegularExport b1
                   -> case a of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.>=# x 11# of lwild {
                        DEFAULT
                        -> GHC.CString.unpackAppendCString#
                             Language.PureScript.Bundle.$fShowExportType4
                             (GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.$fShow(,)3
                                (GHC.Show.showLitString
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)3 eta)))
                        1#
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.CString.unpackAppendCString#
                                Language.PureScript.Bundle.$fShowExportType4
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.$fShow(,)3
                                   (GHC.Show.showLitString
                                      b1
                                      (GHC.Types.:
                                         @ GHC.Types.Char
                                         GHC.Show.$fShow(,)3
                                         (GHC.Types.:
                                            @ GHC.Types.Char
                                            GHC.Show.$fShow(,)2
                                            eta))))) } }
                   Language.PureScript.Bundle.ForeignReexport
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.Bundle.$fShowExportType2
                        eta }) -}
259448a8a12f4d937761388deda8668f
  $fShowModule :: GHC.Show.Show Language.PureScript.Bundle.Module
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Bundle.Module
                  Language.PureScript.Bundle.$fShowModule_$cshowsPrec
                  Language.PureScript.Bundle.$fShowModule_$cshow
                  Language.PureScript.Bundle.$fShowModule_$cshowList -}
259448a8a12f4d937761388deda8668f
  $fShowModule1 ::
    Language.PureScript.Bundle.Module -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(U(U,U),1*U,U)>,
     Unfolding: (\ (w :: Language.PureScript.Bundle.Module) ->
                 case w of ww { Language.PureScript.Bundle.Module ww1 ww2 ww3 ->
                 Language.PureScript.Bundle.$w$cshowsPrec 0# ww1 ww2 ww3 }) -}
82c93af0c6a8eb840bdce70d910121a8
  $fShowModule10 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11#) -}
95f661d80478da6ecff8bff0eefb4ac4
  $fShowModule2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Bundle.$fShowModule3) -}
2a87aa77f7c5d5a290bfe458329f8456
  $fShowModule3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Module "#) -}
5f84968028dcfaf6e60591031e9ebc17
  $fShowModule4 ::
    Language.PureScript.Bundle.ModuleElement -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (w :: Language.PureScript.Bundle.ModuleElement) ->
                 Language.PureScript.Bundle.$w$cshowsPrec1 0# w) -}
24f43b0227cef7eeb1b1e63495fc8237
  $fShowModule5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Bundle.$fShowModule6) -}
e3d62cf8937c254207c9c2c07e146412
  $fShowModule6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Foreign"#) -}
17ce06429f2a99efd9294c5e0123ec21
  $fShowModule7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Bundle.$fShowModule8) -}
61a7d7a6308d2f91900f501f270b8cec
  $fShowModule8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Regular"#) -}
b7773874ab5f3ee3f2b54894e11fedda
  $fShowModule9 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ModuleIdentifier "#) -}
5f84968028dcfaf6e60591031e9ebc17
  $fShowModuleElement ::
    GHC.Show.Show Language.PureScript.Bundle.ModuleElement
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Bundle.ModuleElement
                  Language.PureScript.Bundle.$fShowModuleElement_$cshowsPrec
                  Language.PureScript.Bundle.$fShowModuleElement_$cshow
                  Language.PureScript.Bundle.$fShowModule_$cshowList1 -}
5f84968028dcfaf6e60591031e9ebc17
  $fShowModuleElement_$cshow ::
    Language.PureScript.Bundle.ModuleElement -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Bundle.ModuleElement) ->
                 Language.PureScript.Bundle.$fShowModuleElement_$cshowsPrec
                   Language.PureScript.Bundle.$fShowErrorMessage2
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
5f84968028dcfaf6e60591031e9ebc17
  $fShowModuleElement_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Bundle.ModuleElement -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Bundle.ModuleElement) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Language.PureScript.Bundle.$w$cshowsPrec1 ww1 w1 }) -}
6e3d4a3a42505159bf7603316f530f69
  $fShowModuleIdentifier ::
    GHC.Show.Show Language.PureScript.Bundle.ModuleIdentifier
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Bundle.ModuleIdentifier
                  Language.PureScript.Bundle.$fShowModuleIdentifier_$cshowsPrec
                  Language.PureScript.Bundle.$fShowModuleIdentifier_$cshow
                  Language.PureScript.Bundle.$fShowModuleIdentifier_$cshowList -}
6e3d4a3a42505159bf7603316f530f69
  $fShowModuleIdentifier1 ::
    Language.PureScript.Bundle.ModuleIdentifier -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(1*U,1*U)><L,U>,
     Unfolding: (\ (w :: Language.PureScript.Bundle.ModuleIdentifier)
                   (w1 :: GHC.Base.String) ->
                 case w of ww { Language.PureScript.Bundle.ModuleIdentifier ww1 ww2 ->
                 Language.PureScript.Bundle.$w$cshowsPrec2 0# ww1 ww2 w1 }) -}
6e3d4a3a42505159bf7603316f530f69
  $fShowModuleIdentifier_$cshow ::
    Language.PureScript.Bundle.ModuleIdentifier -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Bundle.ModuleIdentifier) ->
                 Language.PureScript.Bundle.$fShowModuleIdentifier_$cshowsPrec
                   Language.PureScript.Bundle.$fShowErrorMessage2
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
6e3d4a3a42505159bf7603316f530f69
  $fShowModuleIdentifier_$cshowList ::
    [Language.PureScript.Bundle.ModuleIdentifier] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Bundle.ModuleIdentifier])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Bundle.ModuleIdentifier
                   Language.PureScript.Bundle.$fShowModuleIdentifier1
                   ls
                   s) -}
6e3d4a3a42505159bf7603316f530f69
  $fShowModuleIdentifier_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Bundle.ModuleIdentifier -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Bundle.ModuleIdentifier)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Language.PureScript.Bundle.ModuleIdentifier ww3 ww4 ->
                 Language.PureScript.Bundle.$w$cshowsPrec2 ww1 ww3 ww4 w2 } }) -}
f1d9ab0b29ba35854d25beb6708a10f7
  $fShowModuleType ::
    GHC.Show.Show Language.PureScript.Bundle.ModuleType
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Bundle.ModuleType
                  Language.PureScript.Bundle.$fShowModuleType_$cshowsPrec
                  Language.PureScript.Bundle.$fShowModuleType_$cshow
                  Language.PureScript.Bundle.$fShowModuleType_$cshowList -}
f1d9ab0b29ba35854d25beb6708a10f7
  $fShowModuleType1 ::
    Language.PureScript.Bundle.ModuleType -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Language.PureScript.Bundle.ModuleType)
                   (eta :: GHC.Base.String) ->
                 case ds of wild {
                   Language.PureScript.Bundle.Regular
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           Language.PureScript.Bundle.$fShowModule7)
                        eta
                   Language.PureScript.Bundle.Foreign
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           Language.PureScript.Bundle.$fShowModule5)
                        eta }) -}
f1d9ab0b29ba35854d25beb6708a10f7
  $fShowModuleType_$cshow ::
    Language.PureScript.Bundle.ModuleType -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Bundle.ModuleType) ->
                 case x of wild {
                   Language.PureScript.Bundle.Regular
                   -> Language.PureScript.Bundle.$fShowModule7
                   Language.PureScript.Bundle.Foreign
                   -> Language.PureScript.Bundle.$fShowModule5 }) -}
f1d9ab0b29ba35854d25beb6708a10f7
  $fShowModuleType_$cshowList ::
    [Language.PureScript.Bundle.ModuleType] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Bundle.ModuleType])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Bundle.ModuleType
                   Language.PureScript.Bundle.$fShowModuleType1
                   ls
                   s) -}
f1d9ab0b29ba35854d25beb6708a10f7
  $fShowModuleType_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Bundle.ModuleType -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (ds1 :: Language.PureScript.Bundle.ModuleType)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   Language.PureScript.Bundle.Regular
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           Language.PureScript.Bundle.$fShowModule7)
                        eta
                   Language.PureScript.Bundle.Foreign
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           Language.PureScript.Bundle.$fShowModule5)
                        eta }) -}
259448a8a12f4d937761388deda8668f
  $fShowModule_$cshow ::
    Language.PureScript.Bundle.Module -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U(U,U),1*U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Bundle.Module) ->
                 Language.PureScript.Bundle.$fShowModule_$cshowsPrec
                   Language.PureScript.Bundle.$fShowErrorMessage2
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
259448a8a12f4d937761388deda8668f
  $fShowModule_$cshowList ::
    [Language.PureScript.Bundle.Module] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Bundle.Module])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Bundle.Module
                   Language.PureScript.Bundle.$fShowModule1
                   ls
                   s) -}
5f84968028dcfaf6e60591031e9ebc17
  $fShowModule_$cshowList1 ::
    [Language.PureScript.Bundle.ModuleElement] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Bundle.ModuleElement])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Bundle.ModuleElement
                   Language.PureScript.Bundle.$fShowModule4
                   ls
                   s) -}
259448a8a12f4d937761388deda8668f
  $fShowModule_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Bundle.Module -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(U(U,U),1*U,U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Bundle.Module) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Language.PureScript.Bundle.Module ww3 ww4 ww5 ->
                 Language.PureScript.Bundle.$w$cshowsPrec ww1 ww3 ww4 ww5 } }) -}
bbee46ae19006fee38c9b0a133e711ec
  $s$fData[] ::
    Data.Data.Data [Language.JavaScript.Parser.AST.JSStatement]
  {- Inline: CONLIKE,
     Unfolding: DFun:.
                  @ [Language.JavaScript.Parser.AST.JSStatement]
                  (Data.Typeable.Internal.mkTrApp
                     @ *
                     @ *
                     @ []
                     @ Language.JavaScript.Parser.AST.JSStatement
                     Data.Data.$fData[]3
                     Language.JavaScript.Parser.AST.$fDataJSStatement3)
                    `cast`
                  (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <[Language.JavaScript.Parser.AST.JSStatement]>_N)
                  (Data.Data.$fData[]_$cgfoldl
                     @ Language.JavaScript.Parser.AST.JSStatement
                     Language.JavaScript.Parser.AST.$fDataJSStatement)
                  (Data.Data.$fData[]_$cgunfold
                     @ Language.JavaScript.Parser.AST.JSStatement
                     Language.JavaScript.Parser.AST.$fDataJSStatement)
                  (\ (ds :: [Language.JavaScript.Parser.AST.JSStatement]) ->
                   case ds of wild {
                     [] -> Data.Data.nilConstr : ds1 ds2 -> Data.Data.consConstr })
                  (\ (ds :: [Language.JavaScript.Parser.AST.JSStatement]) ->
                   Data.Data.listDataType)
                  (Data.Data.$fData[]_$cdataCast1
                     @ Language.JavaScript.Parser.AST.JSStatement
                     Language.JavaScript.Parser.AST.$fDataJSStatement)
                  (\ @ t :: * -> * -> *
                     @ c :: * -> *
                     ($dTypeable :: Data.Typeable.Internal.Typeable t)
                     (ds :: forall d e.
                            (Data.Data.Data d, Data.Data.Data e) =>
                            c (t d e)) ->
                   GHC.Base.Nothing
                     @ (c [Language.JavaScript.Parser.AST.JSStatement]))
                  (Data.Data.$fData[]_$cgmapT
                     @ Language.JavaScript.Parser.AST.JSStatement
                     Language.JavaScript.Parser.AST.$fDataJSStatement)
                  (Data.Data.$fData[]_$cgmapQl
                     @ Language.JavaScript.Parser.AST.JSStatement
                     Language.JavaScript.Parser.AST.$fDataJSStatement)
                  (Data.Data.$fData[]_$cgmapQr
                     @ Language.JavaScript.Parser.AST.JSStatement
                     Language.JavaScript.Parser.AST.$fDataJSStatement)
                  (Data.Data.$fData[]_$cgmapQ
                     @ Language.JavaScript.Parser.AST.JSStatement
                     Language.JavaScript.Parser.AST.$fDataJSStatement)
                  (Data.Data.$fData[]_$cgmapQi
                     @ Language.JavaScript.Parser.AST.JSStatement
                     Language.JavaScript.Parser.AST.$fDataJSStatement)
                  (Data.Data.$fData[]_$cgmapM
                     @ Language.JavaScript.Parser.AST.JSStatement
                     Language.JavaScript.Parser.AST.$fDataJSStatement)
                  (Data.Data.$fData[]_$cgmapMp
                     @ Language.JavaScript.Parser.AST.JSStatement
                     Language.JavaScript.Parser.AST.$fDataJSStatement)
                  (Data.Data.$fData[]_$cgmapMo
                     @ Language.JavaScript.Parser.AST.JSStatement
                     Language.JavaScript.Parser.AST.$fDataJSStatement) -}
c5b8cbcc8cc01605fc882f13aef398cf
  $s$fData[]7 ::
    Data.Typeable.Internal.TypeRep
      [Language.JavaScript.Parser.AST.JSStatement]
  {- Unfolding: InlineRule (0, True, False)
                (Data.Typeable.Internal.mkTrApp
                   @ *
                   @ *
                   @ []
                   @ Language.JavaScript.Parser.AST.JSStatement
                   Data.Data.$fData[]3
                   Language.JavaScript.Parser.AST.$fDataJSStatement3) -}
da12db0d8d433703212efa62223fa55b
  $s$fEq(,) ::
    GHC.Classes.Eq
      (Language.PureScript.Bundle.ModuleIdentifier, [GHC.Types.Char])
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Bundle.ModuleIdentifier, [GHC.Types.Char])
                  (GHC.Classes.$fEq(,)_$c==
                     @ Language.PureScript.Bundle.ModuleIdentifier
                     @ [GHC.Types.Char]
                     Language.PureScript.Bundle.$fEqModuleIdentifier
                     GHC.Classes.$fEq[]_$s$fEq[]1)
                  Language.PureScript.Bundle.$s$fEq(,)_$s$fEq(,)_$c/= -}
e09d6bfd050ccca40f0fb0757bb42fc3
  $s$fEq(,)_$s$fEq(,)_$c/= ::
    (Language.PureScript.Bundle.ModuleIdentifier, [GHC.Types.Char])
    -> (Language.PureScript.Bundle.ModuleIdentifier, [GHC.Types.Char])
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SL)L),1*U(1*U(1*U,1*U),1*U)><S(S(SL)L),1*U(1*U(1*U,1*U),1*U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: (Language.PureScript.Bundle.ModuleIdentifier,
                          [GHC.Types.Char]))
                   (y :: (Language.PureScript.Bundle.ModuleIdentifier,
                          [GHC.Types.Char])) ->
                 case x of wild { (,) a1 a2 ->
                 case y of wild1 { (,) b1 b2 ->
                 case a1 of wild2 { Language.PureScript.Bundle.ModuleIdentifier a4 a5 ->
                 case b1 of wild3 { Language.PureScript.Bundle.ModuleIdentifier b4 b5 ->
                 case GHC.Base.eqString a4 b4 of wild4 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True
                   -> case a5 of wild5 {
                        Language.PureScript.Bundle.Regular
                        -> case b5 of wild6 {
                             Language.PureScript.Bundle.Regular
                             -> case GHC.Base.eqString a2 b2 of wild7 {
                                  GHC.Types.False -> GHC.Types.True
                                  GHC.Types.True -> GHC.Types.False }
                             Language.PureScript.Bundle.Foreign -> GHC.Types.True }
                        Language.PureScript.Bundle.Foreign
                        -> case b5 of wild6 {
                             Language.PureScript.Bundle.Regular -> GHC.Types.True
                             Language.PureScript.Bundle.Foreign
                             -> case GHC.Base.eqString a2 b2 of wild7 {
                                  GHC.Types.False -> GHC.Types.True
                                  GHC.Types.True -> GHC.Types.False } } } } } } } }) -}
c4cd24ad994f3f177ad663cf8426270a
  $s$fOrd(,) ::
    GHC.Classes.Ord
      (Language.PureScript.Bundle.ModuleIdentifier, [GHC.Types.Char])
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Bundle.ModuleIdentifier, [GHC.Types.Char])
                  Language.PureScript.Bundle.$s$fEq(,)
                  (GHC.Classes.$fOrd(,)_$ccompare
                     @ Language.PureScript.Bundle.ModuleIdentifier
                     @ [GHC.Types.Char]
                     Language.PureScript.Bundle.$fOrdModuleIdentifier
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (GHC.Classes.$fOrd(,)_$c<
                     @ Language.PureScript.Bundle.ModuleIdentifier
                     @ [GHC.Types.Char]
                     Language.PureScript.Bundle.$fOrdModuleIdentifier
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (GHC.Classes.$fOrd(,)_$c<=
                     @ Language.PureScript.Bundle.ModuleIdentifier
                     @ [GHC.Types.Char]
                     Language.PureScript.Bundle.$fOrdModuleIdentifier
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (\ (a1 :: (Language.PureScript.Bundle.ModuleIdentifier,
                             [GHC.Types.Char]))
                     (b1 :: (Language.PureScript.Bundle.ModuleIdentifier,
                             [GHC.Types.Char])) ->
                   GHC.Classes.$fOrd(,)_$c<
                     @ Language.PureScript.Bundle.ModuleIdentifier
                     @ [GHC.Types.Char]
                     Language.PureScript.Bundle.$fOrdModuleIdentifier
                     GHC.Classes.$fOrd[]_$s$fOrd[]1
                     b1
                     a1)
                  (GHC.Classes.$fOrd(,)_$c>=
                     @ Language.PureScript.Bundle.ModuleIdentifier
                     @ [GHC.Types.Char]
                     Language.PureScript.Bundle.$fOrdModuleIdentifier
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (GHC.Classes.$fOrd(,)_$cmax
                     @ Language.PureScript.Bundle.ModuleIdentifier
                     @ [GHC.Types.Char]
                     Language.PureScript.Bundle.$fOrdModuleIdentifier
                     GHC.Classes.$fOrd[]_$s$fOrd[]1)
                  (GHC.Classes.$fOrd(,)_$cmin
                     @ Language.PureScript.Bundle.ModuleIdentifier
                     @ [GHC.Types.Char]
                     Language.PureScript.Bundle.$fOrdModuleIdentifier
                     GHC.Classes.$fOrd[]_$s$fOrd[]1) -}
1e251c0d8e06be323f5b69a070a79733
  $sconcat :: [[a]] -> [a]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ a (xs :: [[a]]) ->
                 GHC.Base.build
                   @ a
                   (\ @ b (c :: a -> b -> b)[OneShot] (n :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ [a]
                      @ b
                      (\ (x :: [a]) (y :: b)[OneShot] -> GHC.Base.foldr @ a @ b c y x)
                      n
                      xs)) -}
4653e644afa2a93279698a3bd01b98e8
  $sfromList ::
    [GHC.Base.String] -> Data.Set.Internal.Set GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [GHC.Base.String]) ->
                 case ds of wild {
                   [] -> Data.Set.Internal.Tip @ GHC.Base.String
                   : x ds1
                   -> case ds1 of wild1 {
                        []
                        -> case x of dt22 { DEFAULT ->
                           Data.Set.Internal.Bin
                             @ GHC.Base.String
                             1#
                             dt22
                             (Data.Set.Internal.Tip @ GHC.Base.String)
                             (Data.Set.Internal.Tip @ GHC.Base.String) }
                        : ipv ipv1
                        -> case GHC.Classes.$fOrd[]_$s$ccompare1 x ipv of wild2 {
                             DEFAULT
                             -> case x of dt22 { DEFAULT ->
                                Language.PureScript.Bundle.$sfromList_$sgo4
                                  ipv
                                  ipv1
                                  (Data.Set.Internal.Bin
                                     @ GHC.Base.String
                                     1#
                                     dt22
                                     (Data.Set.Internal.Tip @ GHC.Base.String)
                                     (Data.Set.Internal.Tip @ GHC.Base.String)) }
                             GHC.Types.LT
                             -> case x of dt22 { DEFAULT ->
                                Language.PureScript.Bundle.$sfromList_$s$wgo3
                                  ipv
                                  ipv1
                                  (Data.Set.Internal.Bin
                                     @ GHC.Base.String
                                     1#
                                     dt22
                                     (Data.Set.Internal.Tip @ GHC.Base.String)
                                     (Data.Set.Internal.Tip @ GHC.Base.String))
                                  1# } } } }) -}
6fc847b2d754af3c3e11eacdb65a4950
  $sfromList1 ::
    [Data.Graph.Vertex] -> Data.Set.Internal.Set Data.Graph.Vertex
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [Data.Graph.Vertex]) ->
                 case ds of wild {
                   [] -> Data.Set.Internal.Tip @ Data.Graph.Vertex
                   : x ds1
                   -> case ds1 of wild1 {
                        []
                        -> case x of dt22 { GHC.Types.I# ipv ->
                           Data.Set.Internal.Bin
                             @ Data.Graph.Vertex
                             1#
                             dt22
                             (Data.Set.Internal.Tip @ Data.Graph.Vertex)
                             (Data.Set.Internal.Tip @ Data.Graph.Vertex) }
                        : ipv ipv1
                        -> case x of wild2 { GHC.Types.I# x1 ->
                           case ipv of wild3 { GHC.Types.I# y ->
                           case GHC.Prim.>=# x1 y of lwild {
                             DEFAULT
                             -> Language.PureScript.Bundle.$sfromList_$s$wgo1
                                  y
                                  ipv1
                                  (Data.Set.Internal.Bin
                                     @ Data.Graph.Vertex
                                     1#
                                     wild2
                                     (Data.Set.Internal.Tip @ Data.Graph.Vertex)
                                     (Data.Set.Internal.Tip @ Data.Graph.Vertex))
                                  1#
                             1#
                             -> Language.PureScript.Bundle.$sfromList_$sgo1
                                  y
                                  ipv1
                                  (Data.Set.Internal.Bin
                                     @ Data.Graph.Vertex
                                     1#
                                     wild2
                                     (Data.Set.Internal.Tip @ Data.Graph.Vertex)
                                     (Data.Set.Internal.Tip @ Data.Graph.Vertex)) } } } } }) -}
398c4c4fab990197bfb448f1a7b043d6
  $sfromList_$s$wgo1 ::
    GHC.Prim.Int#
    -> [GHC.Types.Int]
    -> Data.Set.Internal.Set GHC.Types.Int
    -> GHC.Prim.Int#
    -> Data.Set.Internal.Set Data.Graph.Vertex
  {- Arity: 4, Strictness: <S,U><S,1*U><S,1*U><L,U> -}
d97a323ce8ecc107340b5aa474da2b05
  $sfromList_$s$wgo3 ::
    [GHC.Types.Char]
    -> [[GHC.Types.Char]]
    -> Data.Set.Internal.Set [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> Data.Set.Internal.Set GHC.Base.String
  {- Arity: 4, Strictness: <S,U><S,1*U><S,1*U><L,U> -}
7ff658f93f549769404eeb033807f81b
  $sfromList_$sgo1 ::
    GHC.Prim.Int#
    -> [GHC.Types.Int]
    -> Data.Set.Internal.Set GHC.Types.Int
    -> Data.Set.Internal.Set Data.Graph.Vertex
  {- Arity: 3, Strictness: <S,U><S,1*U><S,1*U> -}
c77e0653c8cae60afc50053a66297cf0
  $sfromList_$sgo4 ::
    [GHC.Types.Char]
    -> [[GHC.Types.Char]]
    -> Data.Set.Internal.Set [GHC.Types.Char]
    -> Data.Set.Internal.Set GHC.Base.String
  {- Arity: 3, Strictness: <S,U><S,1*U><S,1*U> -}
ae1d679bc07de4312556762c641a2e7a
  $sinsert_$sgo3 ::
    GHC.Base.String
    -> GHC.Base.String
    -> Data.Set.Internal.Set GHC.Base.String
    -> Data.Set.Internal.Set GHC.Base.String
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U> -}
540771ba965f98980541556031a16785
  $smember_go1 ::
    Data.Graph.Vertex
    -> Data.Set.Internal.Set Data.Graph.Vertex -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,1*U>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Data.Graph.Vertex)
                   (w1 :: Data.Set.Internal.Set Data.Graph.Vertex) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Language.PureScript.Bundle.$wgo3 ww1 w1 }) -}
d9e25fbb0ca8d74218830c907caea62e
  $smember_go3 ::
    [GHC.Types.Char]
    -> Data.Set.Internal.Set [GHC.Types.Char] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
84d10a685a2d80729d71c5bbe5ae528b
  $tc'ErrorInModule :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12884312024929887452##
                   10681829800220142718##
                   Language.PureScript.Bundle.$trModule
                   Language.PureScript.Bundle.$tc'ErrorInModule2
                   0#
                   Language.PureScript.Bundle.$tc'ErrorInModule1) -}
6703ed3a271701a7117e1ba1cb823745
  $tc'ErrorInModule1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
8b04493e85f6b97b72ee8fc633d923bf
  $tc'ErrorInModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Bundle.$tc'ErrorInModule3) -}
3c6c88621dc9c3f9cf0b8723073bd16c
  $tc'ErrorInModule3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ErrorInModule"#) -}
fb7a580a9405c2a1524cf2498f457b1f
  $tc'ExportsList :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17214221426088771494##
                   9785715709318939926##
                   Language.PureScript.Bundle.$trModule
                   Language.PureScript.Bundle.$tc'ExportsList2
                   0#
                   Language.PureScript.Bundle.$tc'ExportsList1) -}
6658fad26db9304bcc2f9cddc0fea642
  $tc'ExportsList1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
6fc79d3b867b76907016c0b38fb1b876
  $tc'ExportsList2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Bundle.$tc'ExportsList3) -}
409b78a5c513d51a7f769d81a3eb62e0
  $tc'ExportsList3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ExportsList"#) -}
d0e314323b0e89b9df32650040b49e32
  $tc'Foreign :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8093415687176491961##
                   1617907230943967632##
                   Language.PureScript.Bundle.$trModule
                   Language.PureScript.Bundle.$tc'Foreign2
                   0#
                   Language.PureScript.Bundle.$tc'Foreign1) -}
0c629479264851ceb9fa6c4244529ce2
  $tc'Foreign1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
01f39b84b0758d29d73e47f75724940e
  $tc'Foreign2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Bundle.$tc'Foreign3) -}
8e630a630a1d83c5dc9c49adcd8b94fb
  $tc'Foreign3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Foreign"#) -}
808a7bba93ce1f0c8fc1a098d3b70983
  $tc'ForeignReexport :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13742482808506040923##
                   18200153529854994801##
                   Language.PureScript.Bundle.$trModule
                   Language.PureScript.Bundle.$tc'ForeignReexport2
                   0#
                   Language.PureScript.Bundle.$tc'ForeignReexport1) -}
b22c3aaf8467e9156ee23dc1ecc6d2a9
  $tc'ForeignReexport1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
9a57bef196a6eb85b5b05f74dfef9797
  $tc'ForeignReexport2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Bundle.$tc'ForeignReexport3) -}
1a2eb01efb6299a42fa33129fb6d4141
  $tc'ForeignReexport3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ForeignReexport"#) -}
9ce47f926a0613e00d05c84f81738945
  $tc'InvalidTopLevel :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5097275744976622111##
                   12649647540739248394##
                   Language.PureScript.Bundle.$trModule
                   Language.PureScript.Bundle.$tc'InvalidTopLevel2
                   0#
                   Language.PureScript.Bundle.$tc'InvalidTopLevel1) -}
838072bc114781bb2400f7e17d822078
  $tc'InvalidTopLevel1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
fb23ef7e00aa5b1630a574e125b42857
  $tc'InvalidTopLevel2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Bundle.$tc'InvalidTopLevel3) -}
7f72126e125640f63f5adf133765df1e
  $tc'InvalidTopLevel3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'InvalidTopLevel"#) -}
3b28977177a975d08e2e0189f75f9061
  $tc'Member :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3498123199707022894##
                   520755235647675748##
                   Language.PureScript.Bundle.$trModule
                   Language.PureScript.Bundle.$tc'Member2
                   0#
                   Language.PureScript.Bundle.$tc'Member1) -}
991576c93638f8de0859bc6668a11f71
  $tc'Member1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
1f84d9eb0e93f26c17514abc58c76c68
  $tc'Member2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Bundle.$tc'Member3) -}
00f9571e602de8953dc1fb0fbfc48e73
  $tc'Member3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Member"#) -}
54f0cd8f238d9deaeaa47684505139d3
  $tc'MissingEntryPoint :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4833925451512529023##
                   3990330279390595465##
                   Language.PureScript.Bundle.$trModule
                   Language.PureScript.Bundle.$tc'MissingEntryPoint2
                   0#
                   Language.PureScript.Bundle.$tc'MissingEntryPoint1) -}
a7a54926936f7560915b93d45f378976
  $tc'MissingEntryPoint1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
3fc502df2eb92f35cf8196f5e17b34e4
  $tc'MissingEntryPoint2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Bundle.$tc'MissingEntryPoint3) -}
374c8138416c5d8db66da785f78b2543
  $tc'MissingEntryPoint3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'MissingEntryPoint"#) -}
317abfbebc82889e3373067ca05d228e
  $tc'MissingMainModule :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6968566859631295458##
                   13050080671344122597##
                   Language.PureScript.Bundle.$trModule
                   Language.PureScript.Bundle.$tc'MissingMainModule1
                   0#
                   Language.PureScript.Bundle.$tc'MissingEntryPoint1) -}
e74e15cbd283e86e78077bcf5be27184
  $tc'MissingMainModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Bundle.$tc'MissingMainModule2) -}
5e925f85f043bb1a119806220e4997cb
  $tc'MissingMainModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'MissingMainModule"#) -}
45142b69ca64386d7989de9c8648a3a2
  $tc'Module :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13456990774280037853##
                   16347201533776798557##
                   Language.PureScript.Bundle.$trModule
                   Language.PureScript.Bundle.$tc'Module2
                   0#
                   Language.PureScript.Bundle.$tc'Module1) -}
299dad105d52207f0f237f7b180af609
  $tc'Module1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
57b503bb93376fa4456673960249596f
  $tc'Module2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Bundle.$tc'Module3) -}
f813453731762455d683578d78bc4fab
  $tc'Module3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Module"#) -}
a1eb012a2e227537d14e40ed5321f94c
  $tc'ModuleIdentifier :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1618770999685261472##
                   5088071226679179382##
                   Language.PureScript.Bundle.$trModule
                   Language.PureScript.Bundle.$tc'ModuleIdentifier2
                   0#
                   Language.PureScript.Bundle.$tc'ModuleIdentifier1) -}
b8a79c4b3779252f1c322d1e6e196f2a
  $tc'ModuleIdentifier1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
98c52f010ba3608f690bbd26677fdc78
  $tc'ModuleIdentifier2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Bundle.$tc'ModuleIdentifier3) -}
a0958d10357b298d4c47b8a9ce233946
  $tc'ModuleIdentifier3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ModuleIdentifier"#) -}
a9cbd93a4ff80fefaebdec43ab7b543c
  $tc'Other :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3601877764657274025##
                   2650707842042977482##
                   Language.PureScript.Bundle.$trModule
                   Language.PureScript.Bundle.$tc'Other2
                   0#
                   Language.PureScript.Bundle.$tc'Other1) -}
d70e614b6172be17c77d8cb4f0680cd1
  $tc'Other1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
bf65ccac5da87c4d2243626d133f4813
  $tc'Other2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Bundle.$tc'Other3) -}
0f816c8af848f43af68334fb20197d71
  $tc'Other3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Other"#) -}
66591e205da45ef7adb083db4d1a8811
  $tc'Regular :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16527432532731491651##
                   12533723302781443900##
                   Language.PureScript.Bundle.$trModule
                   Language.PureScript.Bundle.$tc'Regular1
                   0#
                   Language.PureScript.Bundle.$tc'Foreign1) -}
8fe8b170b94531187c958b145e173962
  $tc'Regular1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Bundle.$tc'Regular2) -}
d98f407894024554da542c8e03877f21
  $tc'Regular2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Regular"#) -}
68ada9285fdc3f3ab41c58125283dc98
  $tc'RegularExport :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1728464851854032403##
                   803988557852486784##
                   Language.PureScript.Bundle.$trModule
                   Language.PureScript.Bundle.$tc'RegularExport2
                   0#
                   Language.PureScript.Bundle.$tc'RegularExport1) -}
d54372101ed6a4282341d88cf48843fa
  $tc'RegularExport1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
41b3272a69315cc9c4292ec7e894547a
  $tc'RegularExport2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Bundle.$tc'RegularExport3) -}
2d26bba582520a8a7b15d83ebdddf4f4
  $tc'RegularExport3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'RegularExport"#) -}
dc107cb9e1327d5765387cd67f6f9753
  $tc'Require :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14876327356376064054##
                   8312289029780321187##
                   Language.PureScript.Bundle.$trModule
                   Language.PureScript.Bundle.$tc'Require2
                   0#
                   Language.PureScript.Bundle.$tc'Require1) -}
64a6dd0b0e1e0eaea8c90d5fa0cf2e35
  $tc'Require1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
3ebabd8463ebdd084b3674466bacbb9e
  $tc'Require2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Bundle.$tc'Require3) -}
7c1adfa430d7fe556e4e05d262a66413
  $tc'Require3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Require"#) -}
d449869a55451dc1bf3ff5f345c4acf9
  $tc'Skip :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15110634595632613874##
                   17682946184166061117##
                   Language.PureScript.Bundle.$trModule
                   Language.PureScript.Bundle.$tc'Skip1
                   0#
                   Language.PureScript.Bundle.$tc'Other1) -}
51ba64492a8f5e85df336ae7efae1461
  $tc'Skip1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Bundle.$tc'Skip2) -}
22ca390b23b5a94e7f6a497a39076dbd
  $tc'Skip2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Skip"#) -}
6f0e6a257d89a3631a27a7eccae2a265
  $tc'UnableToParseModule :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8599096790634403642##
                   6060385312635419728##
                   Language.PureScript.Bundle.$trModule
                   Language.PureScript.Bundle.$tc'UnableToParseModule1
                   0#
                   Language.PureScript.Bundle.$tc'MissingEntryPoint1) -}
72335d6906a1d8a1f9efd37c11dd63fc
  $tc'UnableToParseModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Bundle.$tc'UnableToParseModule2) -}
084c323bb43227194a9f4ec0bc1b31a4
  $tc'UnableToParseModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'UnableToParseModule"#) -}
554909800160c3b7207e8d5aa21bf0f4
  $tc'UnsupportedExport :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5026668978838650977##
                   9316076867393389377##
                   Language.PureScript.Bundle.$trModule
                   Language.PureScript.Bundle.$tc'UnsupportedExport1
                   0#
                   Language.PureScript.Bundle.$tc'InvalidTopLevel1) -}
031df78b35db8632fc0c09a4470b8df7
  $tc'UnsupportedExport1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Bundle.$tc'UnsupportedExport2) -}
3a845c3de1360ae315cc1acb8f9bcbe1
  $tc'UnsupportedExport2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'UnsupportedExport"#) -}
a9c84b12e7bab249c32b54497ad311cb
  $tc'UnsupportedModulePath :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2879087601846472419##
                   6858221281788726672##
                   Language.PureScript.Bundle.$trModule
                   Language.PureScript.Bundle.$tc'UnsupportedModulePath1
                   0#
                   Language.PureScript.Bundle.$tc'MissingEntryPoint1) -}
89f17e0c976880e6bfb73ced19b36f6b
  $tc'UnsupportedModulePath1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Bundle.$tc'UnsupportedModulePath2) -}
50821370ec9961789f6405f9a6ea38a7
  $tc'UnsupportedModulePath2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'UnsupportedModulePath"#) -}
5c1956011e5ae4d2aae2b6f488d62193
  $tcErrorMessage :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7460841940677784159##
                   3571037722097082213##
                   Language.PureScript.Bundle.$trModule
                   Language.PureScript.Bundle.$tcErrorMessage1
                   0#
                   GHC.Types.krep$*) -}
9891b6b990bac95ce8ae8451d6828e57
  $tcErrorMessage1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Bundle.$tcErrorMessage2) -}
26b99600e3d1bb780c4d0ecd00146d57
  $tcErrorMessage2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ErrorMessage"#) -}
2231f153bf79ff7e4ee74d118c5cd366
  $tcExportType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2047540390578672579##
                   8586812443548195188##
                   Language.PureScript.Bundle.$trModule
                   Language.PureScript.Bundle.$tcExportType1
                   0#
                   GHC.Types.krep$*) -}
a5b6fa9a970e89dc1b9345f8cb0f3b2c
  $tcExportType1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Bundle.$tcExportType2) -}
cbf4418741ae9d54d6a62a6b145443bb
  $tcExportType2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ExportType"#) -}
9b8ae6c49b359cfcef16402c3cf118a3
  $tcModule :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1301412375548212265##
                   10494867987170002498##
                   Language.PureScript.Bundle.$trModule
                   Language.PureScript.Bundle.$tcModule1
                   0#
                   GHC.Types.krep$*) -}
ffba0d47ce500b413e06afcbc374ba41
  $tcModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Bundle.$tcModule2) -}
e6044f8a06e46253829afde4b47f22c4
  $tcModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Module"#) -}
2ba2a70707bf61bb9d40c7674100e0c8
  $tcModuleElement :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13377786970576729139##
                   17682026187414381736##
                   Language.PureScript.Bundle.$trModule
                   Language.PureScript.Bundle.$tcModuleElement1
                   0#
                   GHC.Types.krep$*) -}
6d412cb3d7a25738d7b2d0fdefce3cff
  $tcModuleElement1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Bundle.$tcModuleElement2) -}
baa4c459edbf30aa0f87944327aae44d
  $tcModuleElement2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ModuleElement"#) -}
d4c4002c47e279e9ccf3934268b198b0
  $tcModuleIdentifier :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7858788761791118742##
                   6932645955355109643##
                   Language.PureScript.Bundle.$trModule
                   Language.PureScript.Bundle.$tcModuleIdentifier1
                   0#
                   GHC.Types.krep$*) -}
3a1b96b102ad3e5c63bf5c4a05a06b9b
  $tcModuleIdentifier1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Bundle.$tcModuleIdentifier2) -}
7fcc7ebb5a093b08393b1ff17d1fc985
  $tcModuleIdentifier2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ModuleIdentifier"#) -}
375f5bb8e0b433e46f41f3ded15417f1
  $tcModuleType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12054594440450584622##
                   16468007500638867371##
                   Language.PureScript.Bundle.$trModule
                   Language.PureScript.Bundle.$tcModuleType1
                   0#
                   GHC.Types.krep$*) -}
44ebc0a711af564d7e11ca78dc09c997
  $tcModuleType1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Bundle.$tcModuleType2) -}
6427618579cfc443617888ebeba519fb
  $tcModuleType2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ModuleType"#) -}
683a277ba02d002d6b6fb035b28de46e
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Language.PureScript.Bundle.$trModule3
                   Language.PureScript.Bundle.$trModule1) -}
0468474bccae994280a47b988cf4d415
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Bundle.$trModule2) -}
f63f6b7aa5a7c4adf4709c796aac4069
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Language.PureScript.Bundle"#) -}
4a68ae48a71f040bad7808d1146edeeb
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Bundle.$trModule4) -}
ce1e1f5232fb32f81ee7515bb35f3f90
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"#) -}
bce1bd3aa419d10416539fa2c0d2521a
  $w$c< ::
    GHC.Base.String
    -> Language.PureScript.Bundle.ModuleType
    -> GHC.Base.String
    -> Language.PureScript.Bundle.ModuleType
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.String)
                   (ww1 :: Language.PureScript.Bundle.ModuleType)
                   (ww2 :: GHC.Base.String)
                   (ww3 :: Language.PureScript.Bundle.ModuleType) ->
                 case GHC.Classes.$fOrd[]_$s$ccompare1 ww ww2 of wild {
                   GHC.Types.LT -> GHC.Types.True
                   GHC.Types.EQ
                   -> Language.PureScript.Bundle.$fOrdModuleIdentifier_$c<1 ww1 ww3
                   GHC.Types.GT -> GHC.Types.False }) -}
156c63b4e33d66341adde51b91aa4292
  $w$c<= ::
    GHC.Base.String
    -> Language.PureScript.Bundle.ModuleType
    -> GHC.Base.String
    -> Language.PureScript.Bundle.ModuleType
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.String)
                   (ww1 :: Language.PureScript.Bundle.ModuleType)
                   (ww2 :: GHC.Base.String)
                   (ww3 :: Language.PureScript.Bundle.ModuleType) ->
                 case GHC.Classes.$fOrd[]_$s$ccompare1 ww2 ww of wild {
                   GHC.Types.LT -> GHC.Types.False
                   GHC.Types.EQ
                   -> case ww3 of wild1 {
                        Language.PureScript.Bundle.Regular
                        -> case ww1 of wild2 {
                             Language.PureScript.Bundle.Regular -> GHC.Types.True
                             Language.PureScript.Bundle.Foreign -> GHC.Types.False }
                        Language.PureScript.Bundle.Foreign
                        -> case ww1 of wild2 { DEFAULT -> GHC.Types.True } }
                   GHC.Types.GT -> GHC.Types.True }) -}
060e48098c65cd76537a13926c894b7d
  $w$c== ::
    GHC.Base.String
    -> Language.PureScript.Bundle.ModuleType
    -> GHC.Base.String
    -> Language.PureScript.Bundle.ModuleType
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.String)
                   (ww1 :: Language.PureScript.Bundle.ModuleType)
                   (ww2 :: GHC.Base.String)
                   (ww3 :: Language.PureScript.Bundle.ModuleType) ->
                 case GHC.Base.eqString ww ww2 of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> Language.PureScript.Bundle.$fEqModuleIdentifier_$c==1
                        ww1
                        ww3 }) -}
225234729139fa9f63778de43986681c
  $w$c>= ::
    GHC.Base.String
    -> Language.PureScript.Bundle.ModuleType
    -> GHC.Base.String
    -> Language.PureScript.Bundle.ModuleType
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.String)
                   (ww1 :: Language.PureScript.Bundle.ModuleType)
                   (ww2 :: GHC.Base.String)
                   (ww3 :: Language.PureScript.Bundle.ModuleType) ->
                 case GHC.Classes.$fOrd[]_$s$ccompare1 ww ww2 of wild {
                   GHC.Types.LT -> GHC.Types.False
                   GHC.Types.EQ
                   -> case ww1 of wild1 {
                        Language.PureScript.Bundle.Regular
                        -> case ww3 of wild2 {
                             Language.PureScript.Bundle.Regular -> GHC.Types.True
                             Language.PureScript.Bundle.Foreign -> GHC.Types.False }
                        Language.PureScript.Bundle.Foreign
                        -> case ww3 of wild2 { DEFAULT -> GHC.Types.True } }
                   GHC.Types.GT -> GHC.Types.True }) -}
62959bc808a581d3b420524da45ed4d5
  $w$ccompare ::
    GHC.Base.String
    -> Language.PureScript.Bundle.ModuleType
    -> GHC.Base.String
    -> Language.PureScript.Bundle.ModuleType
    -> GHC.Types.Ordering
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.String)
                   (ww1 :: Language.PureScript.Bundle.ModuleType)
                   (ww2 :: GHC.Base.String)
                   (ww3 :: Language.PureScript.Bundle.ModuleType) ->
                 case GHC.Classes.$fOrd[]_$s$ccompare1 ww ww2 of wild {
                   GHC.Types.LT -> GHC.Types.LT
                   GHC.Types.EQ
                   -> Language.PureScript.Bundle.$fOrdModuleIdentifier_$ccompare1
                        ww1
                        ww3
                   GHC.Types.GT -> GHC.Types.GT }) -}
e8595e042782f7ab18c6652e272771c8
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> Language.PureScript.Bundle.ModuleIdentifier
    -> GHC.Base.Maybe GHC.IO.FilePath
    -> [Language.PureScript.Bundle.ModuleElement]
    -> GHC.Show.ShowS
  {- Arity: 4, Strictness: <S,U><L,U(U,U)><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Language.PureScript.Bundle.ModuleIdentifier)
                   (ww2 :: GHC.Base.Maybe GHC.IO.FilePath)
                   (ww3 :: [Language.PureScript.Bundle.ModuleElement]) ->
                 let {
                   f6 :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.$fShowMaybe_$cshowsPrec
                       @ [GHC.Types.Char]
                       GHC.Show.$fShow[]_$s$fShow[]1
                       Language.PureScript.Bundle.$fShowModule10
                       ww2
                 } in
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String) ->
                     case ww1 of ww4 { Language.PureScript.Bundle.ModuleIdentifier ww5 ww6 ->
                     Language.PureScript.Bundle.$w$cshowsPrec2
                       11#
                       ww5
                       ww6
                       (GHC.Types.:
                          @ GHC.Types.Char
                          GHC.Show.showSpace1
                          (f6
                             (GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.showSpace1
                                (Language.PureScript.Bundle.$fShowModule_$cshowList1 ww3 x)))) }
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.Bundle.$fShowModule2
                        (g x)
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Language.PureScript.Bundle.$fShowModule2
                           (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))) }) -}
5f84968028dcfaf6e60591031e9ebc17
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> Language.PureScript.Bundle.ModuleElement -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [0] -}
b61afe997eab1a02f49436c1bc8c96b9
  $w$cshowsPrec2 ::
    GHC.Prim.Int#
    -> GHC.Base.String
    -> Language.PureScript.Bundle.ModuleType
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 4, Strictness: <S,U><L,1*U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Base.String)
                   (ww2 :: Language.PureScript.Bundle.ModuleType)
                   (w :: GHC.Base.String) ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     GHC.CString.unpackAppendCString#
                       Language.PureScript.Bundle.$fShowModule9
                       (GHC.Types.:
                          @ GHC.Types.Char
                          GHC.Show.$fShow(,)3
                          (GHC.Show.showLitString
                             ww1
                             (GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.$fShow(,)3
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.showSpace1
                                   (case ww2 of wild {
                                      Language.PureScript.Bundle.Regular
                                      -> GHC.Base.++
                                           @ GHC.Types.Char
                                           Language.PureScript.Bundle.$fShowModule7
                                           x
                                      Language.PureScript.Bundle.Foreign
                                      -> GHC.Base.++
                                           @ GHC.Types.Char
                                           Language.PureScript.Bundle.$fShowModule5
                                           x })))))
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT -> p w
                   1#
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 w)) }) -}
ece362dbf47d3bab0a9689d11fc72fe1
  $w$sgo3 ::
    Data.Graph.Vertex
    -> GHC.Prim.Int#
    -> Data.Set.Internal.Set Data.Graph.Vertex
    -> Data.Set.Internal.Set Data.Graph.Vertex
  {- Arity: 3, Strictness: <L,U><L,U><S,1*U>, Inline: [0] -}
290f82c4fa0caae01f878443a123404e
  $wgo3 ::
    GHC.Prim.Int#
    -> Data.Set.Internal.Set Data.Graph.Vertex -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>, Inline: [0] -}
f16479a5e7d62a2a3a1c105d9eecb3f9
  $wprintErrorMessage ::
    Language.PureScript.Bundle.ErrorMessage
    -> (# GHC.Base.String, [GHC.Base.String] #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
1ae2233781eec58c6f5c05da01cc27d8
  data ErrorMessage
    = UnsupportedModulePath GHC.Base.String
    | InvalidTopLevel
    | UnableToParseModule GHC.Base.String
    | UnsupportedExport
    | ErrorInModule Language.PureScript.Bundle.ModuleIdentifier
                    Language.PureScript.Bundle.ErrorMessage
    | MissingEntryPoint GHC.Base.String
    | MissingMainModule GHC.Base.String
408795b16966833f881f527854f903ea
  data ExportType = RegularExport GHC.Base.String | ForeignReexport
f7db662264315c164f0b1df90dd796c0
  type Key =
    (Language.PureScript.Bundle.ModuleIdentifier, GHC.Base.String)
259448a8a12f4d937761388deda8668f
  data Module
    = Module Language.PureScript.Bundle.ModuleIdentifier
             (GHC.Base.Maybe GHC.IO.FilePath)
             [Language.PureScript.Bundle.ModuleElement]
5f84968028dcfaf6e60591031e9ebc17
  data ModuleElement
    = Require Language.JavaScript.Parser.AST.JSStatement
              GHC.Base.String
              (Data.Either.Either
                 GHC.Base.String Language.PureScript.Bundle.ModuleIdentifier)
    | Member Language.JavaScript.Parser.AST.JSStatement
             GHC.Types.Bool
             GHC.Base.String
             Language.JavaScript.Parser.AST.JSExpression
             [Language.PureScript.Bundle.Key]
    | ExportsList [(Language.PureScript.Bundle.ExportType,
                    GHC.Base.String, Language.JavaScript.Parser.AST.JSExpression,
                    [Language.PureScript.Bundle.Key])]
    | Other Language.JavaScript.Parser.AST.JSStatement
    | Skip Language.JavaScript.Parser.AST.JSStatement
6e3d4a3a42505159bf7603316f530f69
  data ModuleIdentifier
    = ModuleIdentifier GHC.Base.String
                       Language.PureScript.Bundle.ModuleType
f1d9ab0b29ba35854d25beb6708a10f7
  data ModuleType = Regular | Foreign
bc5807ec31aedb9aabd4cfc6a1574cc7
  bundle ::
    Control.Monad.Error.Class.MonadError
      Language.PureScript.Bundle.ErrorMessage m =>
    [(Language.PureScript.Bundle.ModuleIdentifier, GHC.Base.String)]
    -> [Language.PureScript.Bundle.ModuleIdentifier]
    -> GHC.Base.Maybe GHC.Base.String
    -> GHC.Base.String
    -> m GHC.Base.String
  {- Arity: 5,
     Strictness: <S(S(S(S(C(C(S))L)LLLLL)LLLL)LL),U(U(U(U(C(C(U)),A),C(U),C(C1(U)),C(C1(C1(U))),A,A),C(C1(U)),C(C1(U)),C(U),A),C(U),A)><L,1*U><L,U><L,U><L,U>,
     Unfolding: (\ @ m :: * -> *
                   ($dMonadError :: Control.Monad.Error.Class.MonadError
                                      Language.PureScript.Bundle.ErrorMessage m)
                   (eta :: [(Language.PureScript.Bundle.ModuleIdentifier,
                             GHC.Base.String)])
                   (eta1 :: [Language.PureScript.Bundle.ModuleIdentifier])
                   (eta2 :: GHC.Base.Maybe GHC.Base.String)
                   (eta3 :: GHC.Base.String) ->
                 GHC.Base.fmap
                   @ m
                   (GHC.Base.$p1Applicative
                      @ m
                      (GHC.Base.$p1Monad
                         @ m
                         (Control.Monad.Error.Class.$p1MonadError
                            @ Language.PureScript.Bundle.ErrorMessage
                            @ m
                            $dMonadError)))
                   @ (GHC.Base.Maybe SourceMap.Types.SourceMapping, GHC.Base.String)
                   @ GHC.Base.String
                   (Data.Tuple.snd
                      @ (GHC.Base.Maybe SourceMap.Types.SourceMapping)
                      @ GHC.Base.String)
                   (Language.PureScript.Bundle.bundleSM
                      @ m
                      $dMonadError
                      (GHC.Base.map
                         @ (Language.PureScript.Bundle.ModuleIdentifier, GHC.Base.String)
                         @ (Language.PureScript.Bundle.ModuleIdentifier,
                            GHC.Base.Maybe GHC.IO.FilePath, GHC.Base.String)
                         Language.PureScript.Bundle.bundle1
                         eta)
                      eta1
                      eta2
                      eta3
                      (GHC.Base.Nothing @ GHC.IO.FilePath))) -}
cb00bd853465649cd5053ccfa47d204d
  bundle1 ::
    (Language.PureScript.Bundle.ModuleIdentifier, GHC.Base.String)
    -> (Language.PureScript.Bundle.ModuleIdentifier,
        GHC.Base.Maybe GHC.IO.FilePath, GHC.Base.String)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: (Language.PureScript.Bundle.ModuleIdentifier,
                           GHC.Base.String)) ->
                 case ds of wild { (,) a b ->
                 (a, GHC.Base.Nothing @ GHC.IO.FilePath, b) }) -}
2ebbccba1652feaa1ac0072f6a4a13e2
  bundleSM ::
    Control.Monad.Error.Class.MonadError
      Language.PureScript.Bundle.ErrorMessage m =>
    [(Language.PureScript.Bundle.ModuleIdentifier,
      GHC.Base.Maybe GHC.IO.FilePath, GHC.Base.String)]
    -> [Language.PureScript.Bundle.ModuleIdentifier]
    -> GHC.Base.Maybe GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.Maybe GHC.IO.FilePath
    -> m (GHC.Base.Maybe SourceMap.Types.SourceMapping,
          GHC.Base.String)
  {- Arity: 6,
     Strictness: <S(S(LLC(C(S))LL)LL),U(1*U(1*U(U(C(C(U)),A),C(U),C(C1(U)),C(C1(C1(U))),A,A),C(C1(U)),C(C1(U)),C(U),A),C(U),A)><L,U><L,U><L,U><L,U><L,U> -}
cf43c78f0f571cc04e04c40fb408a98c
  getExportedIdentifiers ::
    Control.Monad.Error.Class.MonadError
      Language.PureScript.Bundle.ErrorMessage m =>
    GHC.Base.String
    -> Language.JavaScript.Parser.AST.JSAST -> m [GHC.Base.String]
  {- Arity: 3,
     Strictness: <S,U(1*U(1*U(1*U(1*C1(C1(U)),A),C(U),A,C(C1(C1(U))),A,A),A,A,A,A),1*C1(U),A)><L,U><S,1*U> -}
6acde8415ed636cc0973232b7d2938a1
  guessModuleIdentifier ::
    Control.Monad.Error.Class.MonadError
      Language.PureScript.Bundle.ErrorMessage m =>
    GHC.IO.FilePath -> m Language.PureScript.Bundle.ModuleIdentifier
  {- Arity: 2,
     Strictness: <S(S(S(S(C(C(S))L)LLLLL)LLLL)LL),U(U(U(1*U(1*C1(C1(U)),A),1*C1(U),A,A,A,A),A,A,A,A),1*C1(U),A)><L,U>,
     Unfolding: (\ @ m :: * -> *
                   ($dMonadError :: Control.Monad.Error.Class.MonadError
                                      Language.PureScript.Bundle.ErrorMessage m)
                   (eta :: GHC.IO.FilePath) ->
                 GHC.Base.fmap
                   @ m
                   (GHC.Base.$p1Applicative
                      @ m
                      (GHC.Base.$p1Monad
                         @ m
                         (Control.Monad.Error.Class.$p1MonadError
                            @ Language.PureScript.Bundle.ErrorMessage
                            @ m
                            $dMonadError)))
                   @ Language.PureScript.Bundle.ModuleType
                   @ Language.PureScript.Bundle.ModuleIdentifier
                   (Language.PureScript.Bundle.ModuleIdentifier
                      (case System.FilePath.Posix.$wsplitFileName_
                              (System.FilePath.Posix.takeDirectory eta) of ww { (#,#) ww1 ww2 ->
                       ww2 }))
                   (case System.FilePath.Posix.$wsplitFileName_
                           eta of ww { (#,#) ww1 ww2 ->
                    case GHC.Base.eqString
                           ww2
                           Language.PureScript.Bundle.guessModuleIdentifier3 of wild {
                      GHC.Types.False
                      -> case GHC.Base.eqString
                                ww2
                                Language.PureScript.Bundle.guessModuleIdentifier1 of wild1 {
                           GHC.Types.False
                           -> Control.Monad.Error.Class.throwError
                                @ Language.PureScript.Bundle.ErrorMessage
                                @ m
                                $dMonadError
                                @ Language.PureScript.Bundle.ModuleType
                                (Language.PureScript.Bundle.UnsupportedModulePath ww2)
                           GHC.Types.True
                           -> GHC.Base.pure
                                @ m
                                (GHC.Base.$p1Monad
                                   @ m
                                   (Control.Monad.Error.Class.$p1MonadError
                                      @ Language.PureScript.Bundle.ErrorMessage
                                      @ m
                                      $dMonadError))
                                @ Language.PureScript.Bundle.ModuleType
                                Language.PureScript.Bundle.Regular }
                      GHC.Types.True
                      -> GHC.Base.pure
                           @ m
                           (GHC.Base.$p1Monad
                              @ m
                              (Control.Monad.Error.Class.$p1MonadError
                                 @ Language.PureScript.Bundle.ErrorMessage
                                 @ m
                                 $dMonadError))
                           @ Language.PureScript.Bundle.ModuleType
                           Language.PureScript.Bundle.Foreign } })) -}
864a664c7e6fa11a72aef0f6279a9238
  guessModuleIdentifier1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Bundle.guessModuleIdentifier2) -}
40121ee2149951321bf2c8af40efede6
  guessModuleIdentifier2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("index.js"#) -}
9cdab3e1003e909d6e761c7f94ce4a2a
  guessModuleIdentifier3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Bundle.guessModuleIdentifier4) -}
9e89881860c1151edf2241aa9960821c
  guessModuleIdentifier4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("foreign.js"#) -}
20b07fdbba334194d3c88555e762f15a
  moduleName ::
    Language.PureScript.Bundle.ModuleIdentifier -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Bundle.ModuleIdentifier) ->
                 case ds of wild { Language.PureScript.Bundle.ModuleIdentifier name ds1 ->
                 name }) -}
ea1fcd78f92f8c085dfe9f9b5c0c36d3
  printErrorMessage ::
    Language.PureScript.Bundle.ErrorMessage -> [GHC.Base.String]
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.PureScript.Bundle.ErrorMessage) ->
                 case Language.PureScript.Bundle.$wprintErrorMessage
                        w of ww { (#,#) ww1 ww2 ->
                 GHC.Types.: @ GHC.Base.String ww1 ww2 }) -}
instance GHC.Classes.Eq [Language.PureScript.Bundle.ExportType]
  = Language.PureScript.Bundle.$fEqExportType
instance GHC.Classes.Eq [Language.PureScript.Bundle.ModuleIdentifier]
  = Language.PureScript.Bundle.$fEqModuleIdentifier
instance GHC.Classes.Eq [Language.PureScript.Bundle.ModuleType]
  = Language.PureScript.Bundle.$fEqModuleType
instance GHC.Classes.Ord [Language.PureScript.Bundle.ExportType]
  = Language.PureScript.Bundle.$fOrdExportType
instance GHC.Classes.Ord [Language.PureScript.Bundle.ModuleIdentifier]
  = Language.PureScript.Bundle.$fOrdModuleIdentifier
instance GHC.Classes.Ord [Language.PureScript.Bundle.ModuleType]
  = Language.PureScript.Bundle.$fOrdModuleType
instance GHC.Show.Show [Language.PureScript.Bundle.ErrorMessage]
  = Language.PureScript.Bundle.$fShowErrorMessage
instance GHC.Show.Show [Language.PureScript.Bundle.ExportType]
  = Language.PureScript.Bundle.$fShowExportType
instance GHC.Show.Show [Language.PureScript.Bundle.Module]
  = Language.PureScript.Bundle.$fShowModule
instance GHC.Show.Show [Language.PureScript.Bundle.ModuleElement]
  = Language.PureScript.Bundle.$fShowModuleElement
instance GHC.Show.Show [Language.PureScript.Bundle.ModuleIdentifier]
  = Language.PureScript.Bundle.$fShowModuleIdentifier
instance GHC.Show.Show [Language.PureScript.Bundle.ModuleType]
  = Language.PureScript.Bundle.$fShowModuleType
"SC:$cshowsPrec0" forall (sc :: [GHC.Types.Char])
                         (sc1 :: Language.PureScript.Bundle.ErrorMessage)
                         (sc2 :: GHC.Prim.Int#)
  Language.PureScript.Bundle.$fShowErrorMessage_$cshowsPrec (GHC.Types.I#
                                                               sc2)
                                                            sc1
                                                            sc
  = Language.PureScript.Bundle.$fShowErrorMessage_$s$cshowsPrec
      sc
      sc1
      sc2
"SPEC/Language.PureScript.Bundle $fData[] @ JSStatement" [orphan] forall (v :: Data.Data.Data
                                                                                 Language.JavaScript.Parser.AST.JSStatement)
  Data.Data.$fData[] @ Language.JavaScript.Parser.AST.JSStatement v
  = Language.PureScript.Bundle.$s$fData[]
"SPEC/Language.PureScript.Bundle $fData[]7 @ JSStatement" [orphan] forall ($dData :: Data.Data.Data
                                                                                       Language.JavaScript.Parser.AST.JSStatement)
  Data.Data.$fData[]7 @ Language.JavaScript.Parser.AST.JSStatement
                      $dData
  = Language.PureScript.Bundle.$s$fData[]7
"SPEC/Language.PureScript.Bundle $fEq(,) @ ModuleIdentifier @ [Char]" forall (v1 :: GHC.Classes.Eq
                                                                                      [GHC.Types.Char])
                                                                             (v :: GHC.Classes.Eq
                                                                                     Language.PureScript.Bundle.ModuleIdentifier)
  GHC.Classes.$fEq(,) @ Language.PureScript.Bundle.ModuleIdentifier
                      @ [GHC.Types.Char]
                      v
                      v1
  = Language.PureScript.Bundle.$s$fEq(,)
"SPEC/Language.PureScript.Bundle $fEq(,)_$c/= @ ModuleIdentifier @ [Char]" forall ($dEq1 :: GHC.Classes.Eq
                                                                                              [GHC.Types.Char])
                                                                                  ($dEq :: GHC.Classes.Eq
                                                                                             Language.PureScript.Bundle.ModuleIdentifier)
  GHC.Classes.$fEq(,)_$c/= @ Language.PureScript.Bundle.ModuleIdentifier
                           @ [GHC.Types.Char]
                           $dEq
                           $dEq1
  = Language.PureScript.Bundle.$s$fEq(,)_$s$fEq(,)_$c/=
"SPEC/Language.PureScript.Bundle $fOrd(,) @ ModuleIdentifier @ [Char]" forall (v1 :: GHC.Classes.Ord
                                                                                       [GHC.Types.Char])
                                                                              (v :: GHC.Classes.Ord
                                                                                      Language.PureScript.Bundle.ModuleIdentifier)
  GHC.Classes.$fOrd(,) @ Language.PureScript.Bundle.ModuleIdentifier
                       @ [GHC.Types.Char]
                       v
                       v1
  = Language.PureScript.Bundle.$s$fOrd(,)
"SPEC/Language.PureScript.Bundle concat @ [] _" [orphan] forall @ a
                                                                ($dFoldable :: Data.Foldable.Foldable
                                                                                 [])
  Data.Foldable.concat @ [] @ a $dFoldable
  = Language.PureScript.Bundle.$sconcat @ a
"SPEC/Language.PureScript.Bundle fromList @ String" [orphan] forall ($dOrd :: GHC.Classes.Ord
                                                                                GHC.Base.String)
  Data.Set.Internal.fromList @ [GHC.Types.Char] $dOrd
  = Language.PureScript.Bundle.$sfromList
"SPEC/Language.PureScript.Bundle fromList @ Vertex" [orphan] forall ($dOrd :: GHC.Classes.Ord
                                                                                Data.Graph.Vertex)
  Data.Set.Internal.fromList @ GHC.Types.Int $dOrd
  = Language.PureScript.Bundle.$sfromList1
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

