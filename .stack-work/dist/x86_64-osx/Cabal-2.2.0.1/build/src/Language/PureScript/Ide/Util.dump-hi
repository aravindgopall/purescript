
==================== FINAL INTERFACE ====================
2019-01-24 14:17:41.22069 UTC

interface purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Ide.Util 8043
  interface hash: 1ec542a81bec626ad4567717ce39e9ac
  ABI hash: 23feade20e7d884b8e398315c4ffa11e
  export-list hash: b783a834cebd9a63a606ae4111317a86
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 5ca2b6297314332f988f1cde11325eb2
  opt_hash: 2c98c95d41c045ae9c2fb565ec8aabc6
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Language.PureScript.Ide.Logging.displayTimeSpec
  Language.PureScript.Ide.Logging.labelTimespec
  Language.PureScript.Ide.Logging.logPerf
  Language.PureScript.Ide.Logging.runLogger
  Language.PureScript.Ide.Util.decodeT
  Language.PureScript.Ide.Util.discardAnn
  Language.PureScript.Ide.Util.encodeT
  Language.PureScript.Ide.Util.ideReadFile
  Language.PureScript.Ide.Util.identT
  Language.PureScript.Ide.Util.identifierFromIdeDeclaration
  Language.PureScript.Ide.Util.namespaceForDeclaration
  Language.PureScript.Ide.Util.opNameT
  Language.PureScript.Ide.Util.properNameT
  Language.PureScript.Ide.Util.typeOperatorAliasT
  Language.PureScript.Ide.Util.unwrapMatch
  Language.PureScript.Ide.Util.valueOperatorAliasT
  Language.PureScript.Ide.Util.withEmptyAnn
module dependencies: Control.Monad.Logger Control.Monad.Supply
                     Control.Monad.Supply.Class Language.PureScript
                     Language.PureScript.AST Language.PureScript.AST.Binders
                     Language.PureScript.AST.Declarations
                     Language.PureScript.AST.Exported Language.PureScript.AST.Literals
                     Language.PureScript.AST.Operators Language.PureScript.AST.SourcePos
                     Language.PureScript.AST.Traversals Language.PureScript.Bundle
                     Language.PureScript.CodeGen.JS
                     Language.PureScript.CodeGen.JS.Common
                     Language.PureScript.CodeGen.JS.Printer Language.PureScript.Comments
                     Language.PureScript.Constants Language.PureScript.CoreFn
                     Language.PureScript.CoreFn.Ann Language.PureScript.CoreFn.Binders
                     Language.PureScript.CoreFn.Desugar Language.PureScript.CoreFn.Expr
                     Language.PureScript.CoreFn.Meta Language.PureScript.CoreFn.Module
                     Language.PureScript.CoreFn.Optimizer
                     Language.PureScript.CoreFn.ToJSON
                     Language.PureScript.CoreFn.Traversals
                     Language.PureScript.CoreImp.AST
                     Language.PureScript.CoreImp.Optimizer
                     Language.PureScript.CoreImp.Optimizer.Blocks
                     Language.PureScript.CoreImp.Optimizer.Common
                     Language.PureScript.CoreImp.Optimizer.Inliner
                     Language.PureScript.CoreImp.Optimizer.MagicDo
                     Language.PureScript.CoreImp.Optimizer.TCO
                     Language.PureScript.CoreImp.Optimizer.Unused
                     Language.PureScript.Crash Language.PureScript.Environment
                     Language.PureScript.Errors Language.PureScript.Errors.JSON
                     Language.PureScript.Externs Language.PureScript.Ide.Error
                     Language.PureScript.Ide.Logging Language.PureScript.Ide.Types
                     Language.PureScript.Kinds Language.PureScript.Label
                     Language.PureScript.Linter Language.PureScript.Linter.Exhaustive
                     Language.PureScript.Linter.Imports Language.PureScript.Make
                     Language.PureScript.Make.Actions Language.PureScript.Make.BuildPlan
                     Language.PureScript.Make.Monad
                     Language.PureScript.ModuleDependencies Language.PureScript.Names
                     Language.PureScript.Options Language.PureScript.PSString
                     Language.PureScript.Parser Language.PureScript.Parser.Common
                     Language.PureScript.Parser.Declarations
                     Language.PureScript.Parser.Kinds Language.PureScript.Parser.Lexer
                     Language.PureScript.Parser.State Language.PureScript.Parser.Types
                     Language.PureScript.Pretty Language.PureScript.Pretty.Common
                     Language.PureScript.Pretty.Kinds Language.PureScript.Pretty.Types
                     Language.PureScript.Pretty.Values
                     Language.PureScript.Publish.BoxesHelpers
                     Language.PureScript.Renamer Language.PureScript.Sugar
                     Language.PureScript.Sugar.AdoNotation
                     Language.PureScript.Sugar.BindingGroups
                     Language.PureScript.Sugar.CaseDeclarations
                     Language.PureScript.Sugar.DoNotation
                     Language.PureScript.Sugar.LetPattern
                     Language.PureScript.Sugar.Names
                     Language.PureScript.Sugar.Names.Common
                     Language.PureScript.Sugar.Names.Env
                     Language.PureScript.Sugar.Names.Exports
                     Language.PureScript.Sugar.Names.Imports
                     Language.PureScript.Sugar.ObjectWildcards
                     Language.PureScript.Sugar.Operators
                     Language.PureScript.Sugar.Operators.Binders
                     Language.PureScript.Sugar.Operators.Common
                     Language.PureScript.Sugar.Operators.Expr
                     Language.PureScript.Sugar.Operators.Types
                     Language.PureScript.Sugar.TypeClasses
                     Language.PureScript.Sugar.TypeClasses.Deriving
                     Language.PureScript.Sugar.TypeDeclarations
                     Language.PureScript.Traversals Language.PureScript.TypeChecker
                     Language.PureScript.TypeChecker.Entailment
                     Language.PureScript.TypeChecker.Kinds
                     Language.PureScript.TypeChecker.Monad
                     Language.PureScript.TypeChecker.Skolems
                     Language.PureScript.TypeChecker.Subsumption
                     Language.PureScript.TypeChecker.Synonyms
                     Language.PureScript.TypeChecker.TypeSearch
                     Language.PureScript.TypeChecker.Types
                     Language.PureScript.TypeChecker.Unify
                     Language.PureScript.TypeClassDictionaries Language.PureScript.Types
                     Paths_purescript System.IO.UTF8
package dependencies: aeson-1.3.1.1 ansi-terminal-0.8.0.4
                      array-0.5.2.0 async-2.2.1 attoparsec-0.13.2.2 auto-update-0.1.4
                      base-4.11.1.0 base-compat-0.10.4 binary-0.8.5.1
                      blaze-builder-0.4.1.0 boxes-0.1.5 bytestring-0.10.8.2 clock-0.7.2
                      colour-2.3.4 conduit-1.3.0.3 conduit-extra-1.3.0
                      containers-0.5.11.0 data-ordlist-0.4.7.0 deepseq-1.4.3.0
                      directory-1.3.1.5 dlist-0.8.0.4 easy-file-0.2.2 exceptions-0.10.0
                      fast-logger-2.4.11 filepath-1.4.2 ghc-boot-th-8.4.3
                      ghc-prim-0.5.2.0 hashable-1.2.7.0 integer-gmp-1.0.2.0
                      integer-logarithms-1.0.2.1 language-javascript-0.6.0.11
                      lifted-base-0.2.3.12 microlens-0.4.9.1 microlens-ghc-0.4.9
                      microlens-mtl-0.1.11.1 microlens-platform-0.3.10
                      microlens-th-0.4.2.1 monad-control-1.0.2.3 monad-logger-0.3.28.5
                      monad-loops-0.4.3 mtl-2.2.2 old-locale-1.0.0.7 old-time-1.1.0.3
                      parallel-3.2.1.1 parsec-3.1.13.0 pattern-arrows-0.0.2
                      pretty-1.1.3.6 primitive-0.6.3.0 protolude-0.2.2 random-1.1
                      resourcet-1.2.1 safe-0.3.17 scientific-0.3.6.2 sourcemap-0.1.6
                      split-0.2.3.3 stm-2.4.5.0 stm-chans-3.0.0.4 stringsearch-0.3.6.6
                      syb-0.7 tagged-0.8.5 template-haskell-2.13.0.0 text-1.2.3.0
                      th-abstraction-0.2.8.0 time-1.8.0.2 time-locale-compat-0.1.1.4
                      transformers-0.5.5.0 transformers-base-0.4.5.2 unix-2.7.2.2
                      unix-time-0.3.8 unliftio-core-0.1.1.0 unordered-containers-0.2.9.0
                      utf8-string-1.0.1.1 uuid-types-1.0.3 vector-0.12.0.1
orphans: unix-time-0.3.8:Data.UnixTime.Diff
         syb-0.7:Data.Generics.Instances colour-2.3.4:Data.Colour
         stm-2.4.5.0:Control.Monad.STM
         attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         microlens-platform-0.3.10:Lens.Micro.Platform
         microlens-ghc-0.4.9:Lens.Micro.GHC
         hashable-1.2.7.0:Data.Hashable.Generic
         vector-0.12.0.1:Data.Vector.Unboxed
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.5.0:Control.Monad.Trans.Error
         text-1.2.3.0:Data.Text.Lazy text-1.2.3.0:Data.Text
         binary-0.8.5.1:Data.Binary.Generic text-1.2.3.0:Data.Text.Show
         bytestring-0.10.8.2:Data.ByteString.Builder
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: aeson-1.3.1.1:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         clock-0.7.2:System.Clock
                         conduit-1.3.0.3:Data.Conduit.Internal.Conduit
                         conduit-1.3.0.3:Data.Conduit.Internal.Pipe
                         containers-0.5.11.0:Data.Graph
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         dlist-0.8.0.4:Data.DList ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         microlens-0.4.9.1:Lens.Micro.Internal
                         microlens-ghc-0.4.9:Lens.Micro.GHC
                         microlens-mtl-0.1.11.1:Lens.Micro.Mtl.Internal
                         microlens-platform-0.3.10:Lens.Micro.Platform
                         monad-control-1.0.2.3:Control.Monad.Trans.Control
                         monad-logger-0.3.28.5:Control.Monad.Logger
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Control.Monad.Logger
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.Declarations
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.Operators
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.SourcePos
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Comments
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Environment
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Ide.Types
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Kinds
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Label
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Make.Monad
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Names
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.PSString
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.TypeClassDictionaries
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Types
                         resourcet-1.2.1:Control.Monad.Trans.Resource.Internal
                         tagged-0.8.5:Data.Tagged
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
                         th-abstraction-0.2.8.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  aeson-1.3.1.1:Data.Aeson 108dfb08de41cf77aad4693ac1dc3d44
import  -/  aeson-1.3.1.1:Data.Aeson.Types.FromJSON 1ea0c919856f0d29f12e53cd074d532c
import  -/  aeson-1.3.1.1:Data.Aeson.Types.ToJSON 587c7d8b9444e85253d7faf5f824f568
import  -/  base-4.11.1.0:Control.Exception.Base 6b3335161fe9c47efeac02d92d6dc212
import  -/  base-4.11.1.0:Control.Monad.IO.Class 96109c36cb3c919872278540487fa39e
import  -/  base-4.11.1.0:Data.Either 39d922b371c4c52d426e9ee66de8371a
import  -/  base-4.11.1.0:Data.Function 6e6aae9442025aeeb92a909c1bbc3fca
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.IO 1d5542cc02075c5e948018bfacea89c1
import  -/  base-4.11.1.0:GHC.IO.Exception acc060dca2e46d8b8275d06ee7d5d60d
import  -/  directory-1.3.1.5:System.Directory bc76216f25ffcaf1c91b529f41ea3bf7
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  microlens-0.4.9.1:Lens.Micro 962434009a31a5b07a9c325f04604c4d
import  -/  microlens-0.4.9.1:Lens.Micro.Type 60377ed102f710af0bf94059aa466f74
import  -/  microlens-platform-0.3.10:Lens.Micro.Platform 0a8b1a3c754e3254d224cc9602b42f64
import  -/  mtl-2.2.2:Control.Monad.Error.Class df146c18e27154b8df4c8637c59fd61b
import  -/  protolude-0.2.2:Protolude 2c2d16096c8a60f59f646a3b93b0eb7b
import  -/  Language.PureScript 4a24ccd892adbf021daf2410ebd61e22
  exports: 139dcaa90af8ddcee6aa0492159f351d
import  -/  Language.PureScript.Ide.Error b6eb0f8da112a6cbb4342061d1afef05
  exports: 618489d4d27b48ee8032da6edee10f0b
  GeneralError 12e806af4285c37439d91c81a0757c61
  IdeError 347304649e024d1c6990f4b438ecc115
import  -/  Language.PureScript.Ide.Logging 7a72afda66c50413f726f7fcff793207
  exports: a81d71de8acd1b222a31676827fd6862
  displayTimeSpec 5c7684646ff91cc182566a2e4c9574a1
  labelTimespec 0d907ef0de3979242901311139028d3a
  logPerf 0e0bef938e0140f679afbba754e2f391
  runLogger 59824604358c607560bbe67cfd41a713
import  -/  Language.PureScript.Ide.Types 4bb81e9de3788f7f63a68a23e190eb73
  exports: e5ee4d37ef25d4dfedd36ea1d435a17a
  IdeDeclDataConstructor 8fce6bf53fa94a19e0d601b21857c083
  IdeDeclKind eadccdfcdc773a4889209905550631de
  IdeDeclType bf6a01d2f64dd736d0c0838c335e1f4d
  IdeDeclTypeClass daec5de1fc0811383493f72c17859b3c
  IdeDeclTypeOperator 942a106238947e7cdd45b0c72cd2559c
  IdeDeclTypeSynonym f16924e305412463e9d0339a34821aa8
  IdeDeclValue cff86d395b09e6db0f9fde8980f34310
  IdeDeclValueOperator 30db1956e4e27b3074312970c743db17
  IdeDeclaration 0c91b1320f07da0ab07b77b49d64d462
  IdeDeclarationAnn 1d5bc37494f0e43867ff35908b352362
  IdeDeclarationAnn b02d1e3d0d65a3bc0459005430392eb1
  IdeNSKind 63c32c9e96311fb6e946631828a18da8
  IdeNSType 5ff5d8cffb71ed2b7340691cc23499b1
  IdeNSValue b1143d15c5f600d17f9f80fdbd679c78
  IdeNamespace a433d742d266c5a84cd109a4a3bf8314
  Match 243377b70a0acc6a1f90cc91f4dfdeba
  Match fb37c344e14b1371a6bc8438855d851a
  emptyAnn c6db26e1c9b1e1721bc8c428d1f879f7
  ideDtorName f5cb16b133f56c5181009aa7f78d9703
  ideSynonymName dba058d7cc24bbf5f5716fc90da609d5
  ideTCName 6707b0fb5bd9d8aacf896d456424bf01
  ideTypeName 102b07c9135d8fc8731c934f05b32722
  ideTypeOpName 08dd8715bd3877a439fc94b5ef8510e9
  ideValueIdent e8d6898aa2565d8b04f5faf56de63fbb
  ideValueOpName 2164408815ac127bc2a0c935191310ce
import  -/  Language.PureScript.Names 00f694509122478d97b327fbbccae327
  ConstructorName 84054a8bbbe827ba2ce7da83056a95ee
  Ident bad3562aa6138b6192713ac281080869
  OpName 9af301165f72160425c5e0dde6525338
  ProperName a7268334e0b909381550b9329cb80fcc
  Qualified 1b2ddf0c04464d2fa2588925f10c1966
  TypeName 40ce511c66a72431b4e87351210f7b03
  runIdent f4727e6f001b3b7d933fd4e8122af572
  runOpName 9af301165f72160425c5e0dde6525338
  runProperName a7268334e0b909381550b9329cb80fcc
  showQualified 5ab4b15825b0e65e211bc57f19d57784
import  -/  System.IO.UTF8 1b807f4ae9bb108bad12de3c7965d740
  exports: b890695f59b7cd7dc0fa832606deb354
  readUTF8FileT c9d7b500c7ee522d2a9d4fdf08b8faca
import  -/  text-1.2.3.0:Data.Text.Internal 30a0a123f71f63b26cd34c6b24f23411
import  -/  text-1.2.3.0:Data.Text.Lazy e275f9e261def5ef9a77f6818730405e
import  -/  text-1.2.3.0:Data.Text.Lazy.Encoding 6f85b2e2535121fd9df0fcdf4c1c4164
a22254b6936f27cbed7d34e5681c3a3a
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Language.PureScript.Ide.Util.$trModule3
                   Language.PureScript.Ide.Util.$trModule1) -}
b24e4482437a844aca7e87d0b2b4e606
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Util.$trModule2) -}
fd9ca0919dbc35a3fc958f8d6923e993
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Language.PureScript.Ide.Util"#) -}
934221096427bec867ac09620c2dfe85
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Util.$trModule4) -}
6c1309aa98cc6169e172f2f3e2b156ad
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"#) -}
07187fd22df5924335329ab55b583efd
  $wdecodeT ::
    Data.Aeson.Types.FromJSON.FromJSON a =>
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Base.Maybe a
  {- Arity: 4,
     Strictness: <L,1*U(1*C1(C1(C1(C1(U)))),A)><L,U><L,U><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: Data.Aeson.Types.FromJSON.FromJSON a)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#) ->
                 let {
                   $j :: GHC.Base.Maybe a <join 0>
                   = case Language.PureScript.Ide.Util.decodeT3 of wild {
                       Data.Attoparsec.ByteString.Lazy.Fail ipv ipv1 ipv2
                       -> GHC.Base.Nothing @ a
                       Data.Attoparsec.ByteString.Lazy.Done ds v2
                       -> case (Data.Aeson.Types.FromJSON.parseJSON @ a w v2)
                                 `cast`
                               (Data.Aeson.Types.Internal.N:Parser[0] <a>_R)
                                 @ Data.Aeson.Types.Internal.Result
                                 @ a
                                 (GHC.Types.[] @ Data.Aeson.Types.Internal.JSONPathElement)
                                 (Language.PureScript.Ide.Util.decodeT2 @ a)
                                 (Data.Aeson.Types.Internal.Success @ a) of wild1 {
                            Data.Aeson.Types.Internal.Error ipv -> GHC.Base.Nothing @ a
                            Data.Aeson.Types.Internal.Success a1 -> GHC.Base.Just @ a a1 } }
                 } in
                 let {
                   $j1 :: GHC.Prim.Addr#
                          -> GHC.ForeignPtr.ForeignPtrContents
                          -> GHC.Prim.Int#
                          -> GHC.Prim.Int#
                          -> Data.ByteString.Lazy.Internal.ByteString
                          -> GHC.Base.Maybe a
                     <join 5> {- Arity: 5, Strictness: <S,U><L,U><S,U><S,U><L,U> -}
                   = \ (dt :: GHC.Prim.Addr#)[OneShot]
                       (dt1 :: GHC.ForeignPtr.ForeignPtrContents)[OneShot]
                       (dt2 :: GHC.Prim.Int#)[OneShot]
                       (dt3 :: GHC.Prim.Int#)[OneShot]
                       (xs :: Data.ByteString.Lazy.Internal.ByteString)[OneShot] ->
                     case Data.Attoparsec.ByteString.Lazy.parse_go
                            @ Data.Aeson.Types.Internal.Value
                            (Data.Aeson.Parser.Internal.$wjsonEOF
                               @ Data.Aeson.Types.Internal.Value
                               dt
                               dt1
                               dt2
                               dt3
                               dt3
                               0#
                               0#
                               Data.Attoparsec.Internal.Types.Incomplete
                               (Data.Attoparsec.ByteString.Internal.failK
                                  @ Data.Aeson.Types.Internal.Value)
                                 `cast`
                               (Sub (Sym (Data.Attoparsec.Internal.Types.D:R:StateByteString[0]))
                                ->_R <Data.Attoparsec.Internal.Types.Pos
                                      -> Data.Attoparsec.Internal.Types.More
                                      -> [GHC.Base.String]
                                      -> GHC.Base.String
                                      -> Data.Attoparsec.Internal.Types.IResult
                                           Data.ByteString.Internal.ByteString
                                           Data.Aeson.Types.Internal.Value>_R)
                               (Data.Attoparsec.ByteString.Internal.successK
                                  @ Data.Aeson.Types.Internal.Value)
                                 `cast`
                               (Sub (Sym (Data.Attoparsec.Internal.Types.D:R:StateByteString[0]))
                                ->_R <Data.Attoparsec.Internal.Types.Pos
                                      -> Data.Attoparsec.Internal.Types.More
                                      -> Data.Aeson.Types.Internal.Value
                                      -> Data.Attoparsec.Internal.Types.IResult
                                           Data.ByteString.Internal.ByteString
                                           Data.Aeson.Types.Internal.Value>_R))
                            xs of wild {
                       Data.Attoparsec.ByteString.Lazy.Fail ipv ipv1 ipv2
                       -> GHC.Base.Nothing @ a
                       Data.Attoparsec.ByteString.Lazy.Done ds v2
                       -> case (Data.Aeson.Types.FromJSON.parseJSON @ a w v2)
                                 `cast`
                               (Data.Aeson.Types.Internal.N:Parser[0] <a>_R)
                                 @ Data.Aeson.Types.Internal.Result
                                 @ a
                                 (GHC.Types.[] @ Data.Aeson.Types.Internal.JSONPathElement)
                                 (Language.PureScript.Ide.Util.decodeT2 @ a)
                                 (Data.Aeson.Types.Internal.Success @ a) of wild1 {
                            Data.Aeson.Types.Internal.Error ipv -> GHC.Base.Nothing @ a
                            Data.Aeson.Types.Internal.Success a1 -> GHC.Base.Just @ a a1 } }
                 } in
                 case ww2 of wild1 {
                   DEFAULT
                   -> case Data.Text.Lazy.Encoding.encodeUtf8
                             (Data.Text.Internal.Lazy.Chunk
                                ww
                                ww1
                                wild1
                                Data.Text.Internal.Lazy.Empty) of wild {
                        Data.ByteString.Lazy.Internal.Empty -> $j
                        Data.ByteString.Lazy.Internal.Chunk dt dt1 dt2 dt3 xs
                        -> $j1 dt dt1 dt2 dt3 xs }
                   0#
                   -> case Language.PureScript.Ide.Util.decodeT1 of wild {
                        Data.ByteString.Lazy.Internal.Empty -> $j
                        Data.ByteString.Lazy.Internal.Chunk dt dt1 dt2 dt3 xs
                        -> $j1 dt dt1 dt2 dt3 xs } }) -}
aa0246f74e3b107b6540eab1f68bdb4d
  decodeT ::
    Data.Aeson.Types.FromJSON.FromJSON a =>
    Data.Text.Internal.Text -> GHC.Base.Maybe a
  {- Arity: 2,
     Strictness: <L,1*U(1*C1(C1(C1(C1(U)))),A)><S(SSS),1*U(U,U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (w :: Data.Aeson.Types.FromJSON.FromJSON a)
                   (w1 :: Data.Text.Internal.Text) ->
                 case w1 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Language.PureScript.Ide.Util.$wdecodeT @ a w ww1 ww2 ww3 }) -}
46e6b9cd1dedcd27f3debe2af1867b79
  decodeT1 :: Data.ByteString.Lazy.Internal.ByteString
  {- Unfolding: (Data.Text.Lazy.Encoding.encodeUtf8
                   Data.Text.Internal.Lazy.Empty) -}
9bc6d398dcaae8fe53aeba6117c3f6fb
  decodeT2 ::
    Data.Aeson.Types.Internal.JSONPath
    -> GHC.Base.String -> Data.Aeson.Types.Internal.Result a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><L,U>m1,
     Unfolding: InlineRule (2, True, True)
                (\ @ a
                   (ds :: Data.Aeson.Types.Internal.JSONPath)
                   (eta :: GHC.Base.String) ->
                 Data.Aeson.Types.Internal.Error @ a eta) -}
ab6186731deb9ee6c510b6539257c6f5
  decodeT3 ::
    Data.Attoparsec.ByteString.Lazy.Result
      Data.Aeson.Types.Internal.Value
  {- Unfolding: (Data.Attoparsec.ByteString.Lazy.parse_$sgo
                   @ Data.Aeson.Types.Internal.Value
                   (Data.Aeson.Parser.Internal.$wjsonEOF
                      @ Data.Aeson.Types.Internal.Value
                      __NULL
                      Data.ByteString.Internal.$fMonoidByteString1
                      0#
                      0#
                      0#
                      0#
                      0#
                      Data.Attoparsec.Internal.Types.Incomplete
                      (Data.Attoparsec.ByteString.Internal.failK
                         @ Data.Aeson.Types.Internal.Value)
                        `cast`
                      (Sub (Sym (Data.Attoparsec.Internal.Types.D:R:StateByteString[0]))
                       ->_R <Data.Attoparsec.Internal.Types.Pos
                             -> Data.Attoparsec.Internal.Types.More
                             -> [GHC.Base.String]
                             -> GHC.Base.String
                             -> Data.Attoparsec.Internal.Types.IResult
                                  Data.ByteString.Internal.ByteString
                                  Data.Aeson.Types.Internal.Value>_R)
                      (Data.Attoparsec.ByteString.Internal.successK
                         @ Data.Aeson.Types.Internal.Value)
                        `cast`
                      (Sub (Sym (Data.Attoparsec.Internal.Types.D:R:StateByteString[0]))
                       ->_R <Data.Attoparsec.Internal.Types.Pos
                             -> Data.Attoparsec.Internal.Types.More
                             -> Data.Aeson.Types.Internal.Value
                             -> Data.Attoparsec.Internal.Types.IResult
                                  Data.ByteString.Internal.ByteString
                                  Data.Aeson.Types.Internal.Value>_R))) -}
dda9d4fafbbc8df2d6404b8b09ac7a49
  discardAnn ::
    Language.PureScript.Ide.Types.IdeDeclarationAnn
    -> Language.PureScript.Ide.Types.IdeDeclaration
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Types.IdeDeclarationAnn) ->
                 case ds of wild { Language.PureScript.Ide.Types.IdeDeclarationAnn ds1 d ->
                 d }) -}
432c128b6a5b6d70192618cb212fdff7
  encodeT ::
    Data.Aeson.Types.ToJSON.ToJSON a => a -> Data.Text.Internal.Text
  {- Arity: 2, Strictness: <L,1*U(A,1*C1(U),A,A)><L,U>,
     Unfolding: (\ @ a
                   ($dToJSON :: Data.Aeson.Types.ToJSON.ToJSON a)
                   (x :: a) ->
                 Data.Text.concat
                   (Data.Text.Lazy.dropEnd_go
                      (Data.Text.Lazy.Encoding.decodeUtf8With
                         Data.Text.Encoding.Error.strictDecode
                         (Data.ByteString.Builder.toLazyByteString
                            (Data.Aeson.Types.ToJSON.toEncoding @ a $dToJSON x)
                              `cast`
                            (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                 <Data.Aeson.Types.Internal.Value>_P))))) -}
e90a75f47b35d9b93bb00b2e97526cbb
  ideReadFile ::
    (Control.Monad.IO.Class.MonadIO m,
     Control.Monad.Error.Class.MonadError
       Language.PureScript.Ide.Error.IdeError m) =>
    GHC.IO.FilePath -> m (GHC.IO.FilePath, Data.Text.Internal.Text)
  {- Arity: 3,
     Strictness: <S(S(LC(C(S))LLL)L),U(1*U(1*U(A,C(U),A,A,A,A),C(C1(U)),A,A,A),C(U))><L,U(A,C(U),A)><L,U> -}
dcd564adce62283fa7a9b3c22bf893ce
  identT ::
    Lens.Micro.Type.Getting
      r Language.PureScript.Names.Ident Data.Text.Internal.Text
  {- Arity: 2,
     Unfolding: (\ @ r ->
                 Lens.Micro.to
                   @ Language.PureScript.Names.Ident
                   @ Data.Text.Internal.Text
                   Language.PureScript.Names.runIdent
                   @ r) -}
d3020ece8f1e881771f78c7f6ed69758
  identifierFromIdeDeclaration ::
    Language.PureScript.Ide.Types.IdeDeclaration
    -> Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (d :: Language.PureScript.Ide.Types.IdeDeclaration) ->
                 case d of wild {
                   Language.PureScript.Ide.Types.IdeDeclValue v
                   -> case v of wild1 { Language.PureScript.Ide.Types.IdeValue x x1 ->
                      Language.PureScript.Names.runIdent x }
                   Language.PureScript.Ide.Types.IdeDeclType t
                   -> case t of wild1 { Language.PureScript.Ide.Types.IdeType x x1 x2 ->
                      x `cast`
                      (Language.PureScript.Names.N:ProperName[0]
                           <'Language.PureScript.Names.TypeName>_P) }
                   Language.PureScript.Ide.Types.IdeDeclTypeSynonym s
                   -> case s of wild1 { Language.PureScript.Ide.Types.IdeTypeSynonym x x1 x2 ->
                      x `cast`
                      (Language.PureScript.Names.N:ProperName[0]
                           <'Language.PureScript.Names.TypeName>_P) }
                   Language.PureScript.Ide.Types.IdeDeclDataConstructor dtor
                   -> case dtor of wild1 { Language.PureScript.Ide.Types.IdeDataConstructor x x1 x2 ->
                      x `cast`
                      (Language.PureScript.Names.N:ProperName[0]
                           <'Language.PureScript.Names.ConstructorName>_P) }
                   Language.PureScript.Ide.Types.IdeDeclTypeClass tc
                   -> case tc of wild1 { Language.PureScript.Ide.Types.IdeTypeClass x x1 x2 ->
                      x `cast`
                      (Language.PureScript.Names.N:ProperName[0]
                           <'Language.PureScript.Names.ClassName>_P) }
                   Language.PureScript.Ide.Types.IdeDeclValueOperator op
                   -> case op of wild1 { Language.PureScript.Ide.Types.IdeValueOperator x x1 x2 x3 x4 ->
                      x `cast`
                      (Language.PureScript.Names.N:OpName[0]
                           <'Language.PureScript.Names.ValueOpName>_P) }
                   Language.PureScript.Ide.Types.IdeDeclTypeOperator op
                   -> case op of wild1 { Language.PureScript.Ide.Types.IdeTypeOperator x x1 x2 x3 x4 ->
                      x `cast`
                      (Language.PureScript.Names.N:OpName[0]
                           <'Language.PureScript.Names.TypeOpName>_P) }
                   Language.PureScript.Ide.Types.IdeDeclKind name
                   -> name
                        `cast`
                      (Language.PureScript.Names.N:ProperName[0]
                           <'Language.PureScript.Names.KindName>_P) }) -}
118407e31332438e83d40344230582f8
  namespaceForDeclaration ::
    Language.PureScript.Ide.Types.IdeDeclaration
    -> Language.PureScript.Ide.Types.IdeNamespace
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (d :: Language.PureScript.Ide.Types.IdeDeclaration) ->
                 case d of wild {
                   DEFAULT -> Language.PureScript.Ide.Types.IdeNSValue
                   Language.PureScript.Ide.Types.IdeDeclType ds
                   -> Language.PureScript.Ide.Types.IdeNSType
                   Language.PureScript.Ide.Types.IdeDeclTypeSynonym ds
                   -> Language.PureScript.Ide.Types.IdeNSType
                   Language.PureScript.Ide.Types.IdeDeclTypeClass ds
                   -> Language.PureScript.Ide.Types.IdeNSType
                   Language.PureScript.Ide.Types.IdeDeclTypeOperator ds
                   -> Language.PureScript.Ide.Types.IdeNSType
                   Language.PureScript.Ide.Types.IdeDeclKind ds
                   -> Language.PureScript.Ide.Types.IdeNSKind }) -}
a168fd52f08b9cb2d567b1e880a7a253
  opNameT ::
    Lens.Micro.Type.Getting
      r (Language.PureScript.Names.OpName a) Data.Text.Internal.Text
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (\ @ r @ a :: Language.PureScript.Names.OpNameType ->
                 Lens.Micro.to
                   @ (Language.PureScript.Names.OpName a)
                   @ Data.Text.Internal.Text
                   (Language.PureScript.Names.eraseOpName1 @ a)
                     `cast`
                   (<Language.PureScript.Names.OpName a>_R
                    ->_R Language.PureScript.Names.N:OpName[0] <a>_P)
                   @ r) -}
e4d3618214ff774dcbb219a8feb710a8
  properNameT ::
    Lens.Micro.Type.Getting
      r (Language.PureScript.Names.ProperName a) Data.Text.Internal.Text
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (\ @ r
                   @ a :: Language.PureScript.Names.ProperNameType ->
                 Lens.Micro.to
                   @ (Language.PureScript.Names.ProperName a)
                   @ Data.Text.Internal.Text
                   (Language.PureScript.Names.coerceProperName1 @ a)
                     `cast`
                   (<Language.PureScript.Names.ProperName a>_R
                    ->_R Language.PureScript.Names.N:ProperName[0] <a>_P)
                   @ r) -}
7ec9a1d0a4d6371fdacfa5c7b8291c41
  typeOperatorAliasT ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName)
    -> Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S(SL),1*U(1*U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (i :: Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.TypeName)) ->
                 case i of ww { Language.PureScript.Names.Qualified ww1 ww2 ->
                 Language.PureScript.Names.$wshowQualified
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.TypeName)
                   (Language.PureScript.Names.coerceProperName1
                      @ 'Language.PureScript.Names.TypeName)
                     `cast`
                   (<Language.PureScript.Names.ProperName
                       'Language.PureScript.Names.TypeName>_R
                    ->_R Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.TypeName>_P)
                   ww1
                   ww2 }) -}
48ad73e4915892dbc3f86775eaa9c52c
  unwrapMatch :: Language.PureScript.Ide.Types.Match a -> a
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: Language.PureScript.Ide.Types.Match a) ->
                 case ds
                        `cast`
                      (Language.PureScript.Ide.Types.N:Match[0] <a>_N) of wild { (,) ds1 ed ->
                 ed }) -}
2b58245662f3e76a76ba5ed13b0d0223
  valueOperatorAliasT ::
    Language.PureScript.Names.Qualified
      (Data.Either.Either
         Language.PureScript.Names.Ident
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ConstructorName))
    -> Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S(SL),1*U(1*U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (i :: Language.PureScript.Names.Qualified
                           (Data.Either.Either
                              Language.PureScript.Names.Ident
                              (Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.ConstructorName))) ->
                 case i of ww { Language.PureScript.Names.Qualified ww1 ww2 ->
                 Language.PureScript.Names.$wshowQualified
                   @ (Data.Either.Either
                        Language.PureScript.Names.Ident
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.ConstructorName))
                   Language.PureScript.Ide.Util.valueOperatorAliasT1
                   ww1
                   ww2 }) -}
9ca466e58d49d53d38112f863da0ad4a
  valueOperatorAliasT1 ::
    Data.Either.Either
      Language.PureScript.Names.Ident
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ConstructorName)
    -> Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds1 :: Data.Either.Either
                             Language.PureScript.Names.Ident
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ConstructorName))[OneShot] ->
                 case ds1 of wild {
                   Data.Either.Left x -> Language.PureScript.Names.runIdent x
                   Data.Either.Right y
                   -> y `cast`
                      (Language.PureScript.Names.N:ProperName[0]
                           <'Language.PureScript.Names.ConstructorName>_P) }) -}
44bc12c82340eac1939edbe2f3a854f1
  withEmptyAnn ::
    Language.PureScript.Ide.Types.IdeDeclaration
    -> Language.PureScript.Ide.Types.IdeDeclarationAnn
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (Language.PureScript.Ide.Types.IdeDeclarationAnn
                   Language.PureScript.Ide.Types.emptyAnn) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

