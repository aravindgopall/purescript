
==================== FINAL INTERFACE ====================
2019-01-24 14:15:43.982482 UTC

interface purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Sugar.Operators.Common 8043
  interface hash: 35300d433c54cd2858326a2acc8c6f36
  ABI hash: e88c8e400a261924d9af6cf01505736c
  export-list hash: 4b08e646ed124a30b98475a4e3fdf27e
  orphan hash: 45d9713fbb6cf8cc07413fde933fb998
  flag hash: 4d9d5651992e23893b931ac76ed000be
  opt_hash: 2c98c95d41c045ae9c2fb565ec8aabc6
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Language.PureScript.Sugar.Operators.Common.matchOp
  Language.PureScript.Sugar.Operators.Common.matchOperators
  Language.PureScript.Sugar.Operators.Common.opTable
  Language.PureScript.Sugar.Operators.Common.parseOp
  Language.PureScript.Sugar.Operators.Common.parseValue
  Language.PureScript.Sugar.Operators.Common.toAssoc
  Language.PureScript.Sugar.Operators.Common.token
  Language.PureScript.Sugar.Operators.Common.Chain
  Language.PureScript.Sugar.Operators.Common.FromOp
  Language.PureScript.Sugar.Operators.Common.Reapply
module dependencies: Control.Monad.Supply
                     Control.Monad.Supply.Class Language.PureScript.AST
                     Language.PureScript.AST.Binders
                     Language.PureScript.AST.Declarations
                     Language.PureScript.AST.Exported Language.PureScript.AST.Literals
                     Language.PureScript.AST.Operators Language.PureScript.AST.SourcePos
                     Language.PureScript.AST.Traversals Language.PureScript.Bundle
                     Language.PureScript.Comments Language.PureScript.Constants
                     Language.PureScript.Crash Language.PureScript.Environment
                     Language.PureScript.Errors Language.PureScript.Kinds
                     Language.PureScript.Label Language.PureScript.Names
                     Language.PureScript.PSString Language.PureScript.Parser.Lexer
                     Language.PureScript.Parser.State Language.PureScript.Pretty
                     Language.PureScript.Pretty.Common Language.PureScript.Pretty.Kinds
                     Language.PureScript.Pretty.Types Language.PureScript.Pretty.Values
                     Language.PureScript.Publish.BoxesHelpers
                     Language.PureScript.Traversals
                     Language.PureScript.TypeClassDictionaries Language.PureScript.Types
                     Paths_purescript
package dependencies: aeson-1.3.1.1 ansi-terminal-0.8.0.4
                      array-0.5.2.0 async-2.2.1 attoparsec-0.13.2.2 base-4.11.1.0
                      base-compat-0.10.4 binary-0.8.5.1 blaze-builder-0.4.1.0 boxes-0.1.5
                      bytestring-0.10.8.2 colour-2.3.4 containers-0.5.11.0
                      deepseq-1.4.3.0 dlist-0.8.0.4 filepath-1.4.2 ghc-boot-th-8.4.3
                      ghc-prim-0.5.2.0 hashable-1.2.7.0 integer-gmp-1.0.2.0
                      integer-logarithms-1.0.2.1 language-javascript-0.6.0.11
                      microlens-0.4.9.1 microlens-ghc-0.4.9 microlens-mtl-0.1.11.1
                      microlens-platform-0.3.10 microlens-th-0.4.2.1 mtl-2.2.2
                      parsec-3.1.13.0 pattern-arrows-0.0.2 pretty-1.1.3.6
                      primitive-0.6.3.0 protolude-0.2.2 random-1.1 scientific-0.3.6.2
                      sourcemap-0.1.6 split-0.2.3.3 stm-2.4.5.0 syb-0.7 tagged-0.8.5
                      template-haskell-2.13.0.0 text-1.2.3.0 th-abstraction-0.2.8.0
                      time-1.8.0.2 time-locale-compat-0.1.1.4 transformers-0.5.5.0
                      unordered-containers-0.2.9.0 utf8-string-1.0.1.1 uuid-types-1.0.3
                      vector-0.12.0.1
orphans: syb-0.7:Data.Generics.Instances
         stm-2.4.5.0:Control.Monad.STM
         microlens-platform-0.3.10:Lens.Micro.Platform
         microlens-ghc-0.4.9:Lens.Micro.GHC colour-2.3.4:Data.Colour
         attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         vector-0.12.0.1:Data.Vector.Unboxed
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.0:Data.Text.Lazy
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.5.0:Control.Monad.Trans.Error
         text-1.2.3.0:Data.Text binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: aeson-1.3.1.1:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.Graph
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         dlist-0.8.0.4:Data.DList ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         microlens-0.4.9.1:Lens.Micro.Internal
                         microlens-ghc-0.4.9:Lens.Micro.GHC
                         microlens-mtl-0.1.11.1:Lens.Micro.Mtl.Internal
                         microlens-platform-0.3.10:Lens.Micro.Platform
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.Declarations
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.Operators
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.SourcePos
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Comments
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Environment
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Kinds
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Label
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Names
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.PSString
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.TypeClassDictionaries
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Types
                         tagged-0.8.5:Data.Tagged
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
                         th-abstraction-0.2.8.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  base-4.11.1.0:Control.Monad c5f960c67d822497578bffbd3e4c01cf
import  -/  base-4.11.1.0:Data.Either 39d922b371c4c52d426e9ee66de8371a
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.Functor f522c3501272159820fd6f242510732f
import  -/  base-4.11.1.0:Data.Functor.Identity 9430dcaadd71c129eeb5ca7b963c9b54
import  -/  base-4.11.1.0:Data.List 83dc843e47bfc0c5af51e19c6f3476d5
import  -/  base-4.11.1.0:Data.List.NonEmpty 595ee3baddcadebc4831ea7541427984
import  -/  base-4.11.1.0:Data.Maybe 409c3da2b142470b68be39ce1d97a9f7
import  -/  base-4.11.1.0:Data.OldList 1b35aa3c6805ff7c8887a35a866fe006
import  -/  base-4.11.1.0:Data.Tuple 3af66f3ac61ed95ba8a3a3f68ebc5003
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-compat-0.10.4:Prelude.Compat bb6796186ed35a1d09dc34362a3fc27e
import  -/  containers-0.5.11.0:Data.Map 0dbdaec812ef695a364aa6c69e7f7d53
import  -/  containers-0.5.11.0:Data.Map.Internal 0150e210d0ae8df0f3a0669d5e32d8fa
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  integer-gmp-1.0.2.0:GHC.Integer.Type f3d5169c3d3830854b19f6565b265403
import  -/  mtl-2.2.2:Control.Monad.Error.Class df146c18e27154b8df4c8637c59fd61b
import  -/  mtl-2.2.2:Control.Monad.Except a6fe75d3c5548ea9e926864b8cbfe1ee
import  -/  mtl-2.2.2:Control.Monad.State 1f28325cb5ef11b6b40ffadfe4bc2ca3
import  -/  parsec-3.1.13.0:Text.Parsec 963cbe7b4116cef91451434dc005a011
import  -/  parsec-3.1.13.0:Text.Parsec.Combinator 86d872425bd48a2d67c0d1ce1a8ccc8b
import  -/  parsec-3.1.13.0:Text.Parsec.Expr 6898ea405cda9f4ced72197883fcde5c
import  -/  parsec-3.1.13.0:Text.Parsec.Pos 85d30a347a2120f1b5f286869826a471
import  -/  parsec-3.1.13.0:Text.Parsec.Prim 4e0ad30f54008188b8c54f509e1a8ed9
import  -/  Language.PureScript.AST e89b59f8e201961eafd3ff905a683659
  exports: be73d3bb7d4ebe5df082453f6d572075
import  -/  Language.PureScript.AST.Declarations 586bc75044e8737d02875208d17d4395
  ErrorMessage b0470a74191782e72607e7c5b87318de
  ErrorMessage 7268a73b9f5bbe5a70110aa90f7e1194
  MixedAssociativityError 1d14d5929573da82d4205da8fc45cc8f
  NonAssociativeError 826c4decdc006663e21a3ae7e60e3ed8
  PositionedError c387f6033b140fe80063a1c6ade0cde7
  SimpleErrorMessage 85049d3cbfbe9dc15f83f3061172f760
import  -/  Language.PureScript.AST.Operators 615a873c5f62908f354b9d4840cbeb63
  Associativity 228a0ef1b3774b11d1a92fae92fb43a0
  Infix acee26fe4e59790dddcfdcb22d39c630
  Infixl 7a053ccfe48a809d0f2fd5ed84616765
  Infixr bbdac94db5d55a0387eb84cc7a57bedf
import  -/  Language.PureScript.AST.SourcePos 63acacac5b7be73d04e5be0047a9a89a
  SourceSpan 1e0cf2bd3ea18f97a2ff152297f09219
import  -/  Language.PureScript.Crash 3dd739d57f17e8a1e9cd97afd3faf067
  exports: a9d2725f359c2d113bd38076e88ec681
  internalError d33c2a09c5cbe8e68c0bc27d1500ba1a
import  -/  Language.PureScript.Errors 3c1ad933587510f8b20a8c9ec2e86ce9
  exports: 8e61484c4664eceb943d9fc4820c721b
  MultipleErrors e10d32697d8bc85ed39c4a4d256bc383
  MultipleErrors e1ef6a17348ccfe3ef65185d3c5f9026
import  -/  Language.PureScript.Names 00f694509122478d97b327fbbccae327
  exports: ad7ae34f85124c68e8ba1c90fb2e732f
  OpName 9af301165f72160425c5e0dde6525338
  Qualified 1b2ddf0c04464d2fa2588925f10c1966
  eraseOpName 5a45dc426e525e743596411595463e09
4358d4d7516b3446bb0efd2fbe7daaa9
  $s$fStream[]mtok ::
    Text.Parsec.Prim.Stream [tok] Data.Functor.Identity.Identity tok
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ tok.
                  @ [tok]
                  @ Data.Functor.Identity.Identity
                  @ tok
                  Data.Functor.Identity.$fMonadIdentity
                  (Language.PureScript.Sugar.Operators.Common.$s$fStream[]mtok_$s$fStream[]mtok_$cuncons
                     @ tok) -}
ce857ae50ab298df242d5b26e028003e
  $s$fStream[]mtok_$s$fStream[]mtok_$cuncons ::
    [tok]
    -> Data.Functor.Identity.Identity (GHC.Base.Maybe (tok, [tok]))
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ tok (ds :: [tok]) ->
                 case ds of wild {
                   []
                   -> (GHC.Base.Nothing @ (tok, [tok]))
                        `cast`
                      (Sym (Data.Functor.Identity.N:Identity[0]
                                <GHC.Base.Maybe (tok, [tok])>_R))
                   : t ts
                   -> (GHC.Base.Just @ (tok, [tok]) (t, ts))
                        `cast`
                      (Sym (Data.Functor.Identity.N:Identity[0]
                                <GHC.Base.Maybe (tok, [tok])>_R)) }) -}
7cde2772adcca48d5a054cb2558a0621
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Language.PureScript.Sugar.Operators.Common.$trModule3
                   Language.PureScript.Sugar.Operators.Common.$trModule1) -}
98c3b1669d936c1e6ccf6ddc63f9a17e
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Sugar.Operators.Common.$trModule2) -}
0eb38f090e2db745fda7082b7ba74930
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Language.PureScript.Sugar.Operators.Common"#) -}
c0e14c938955d188bd79b7519e704c32
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Sugar.Operators.Common.$trModule4) -}
27361957b49e892872bf699d22061a2f
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"#) -}
a93d1ca64859e0609339039cb8b3e14b
  type Chain a = [Data.Either.Either a a]
fd2c17f8bad51d0b43c906d8aa49b19b
  type FromOp (nameType :: Language.PureScript.Names.OpNameType) a =
    a
    -> GHC.Base.Maybe
         (Language.PureScript.AST.SourcePos.SourceSpan,
          Language.PureScript.Names.Qualified
            (Language.PureScript.Names.OpName nameType))
d70bb01a0a2d0d9ab8e4397f834e3369
  type Reapply (nameType :: Language.PureScript.Names.OpNameType) a =
    Language.PureScript.AST.SourcePos.SourceSpan
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.OpName nameType)
    -> a
    -> a
    -> a
da1613c4d4a721883046e2ea29ed35aa
  matchOp ::
    Language.PureScript.Sugar.Operators.Common.FromOp nameType a
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.OpName nameType)
    -> Text.Parsec.Prim.Parsec
         (Language.PureScript.Sugar.Operators.Common.Chain a)
         ()
         Language.PureScript.AST.SourcePos.SourceSpan
  {- Arity: 7,
     Strictness: <L,1*C1(U)><L,U(U,U(U,U,U))><L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Sugar.Operators.Common.matchOp1
                  `cast`
                (forall (nameType :: <Language.PureScript.Names.OpNameType>_N) (a :: <*>_N).
                 <Language.PureScript.Sugar.Operators.Common.FromOp nameType a>_R
                 ->_R <Language.PureScript.Names.Qualified
                         (Language.PureScript.Names.OpName nameType)>_R
                 ->_R Sym (Text.Parsec.Prim.N:ParsecT[0]
                               <[Data.Either.Either a a]>_R
                               <()>_R
                               <Data.Functor.Identity.Identity>_R
                               <Language.PureScript.AST.SourcePos.SourceSpan>_R)) -}
4f96d6a84149bb8b80608a4a1aebcca8
  matchOp1 ::
    Language.PureScript.Sugar.Operators.Common.FromOp nameType a
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.OpName nameType)
    -> forall b.
       Text.Parsec.Prim.State [Data.Either.Either a a] ()
       -> (Language.PureScript.AST.SourcePos.SourceSpan
           -> Text.Parsec.Prim.State [Data.Either.Either a a] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Language.PureScript.AST.SourcePos.SourceSpan
           -> Text.Parsec.Prim.State [Data.Either.Either a a] ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> Data.Functor.Identity.Identity b
  {- Arity: 7,
     Strictness: <L,1*C1(U)><L,U(U,U(U,U,U))><L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)> -}
0ed92771035f7cf97c3d107845e42b2f
  matchOperators ::
    (GHC.Show.Show a,
     Control.Monad.Error.Class.MonadError
       Language.PureScript.Errors.MultipleErrors m) =>
    (a -> GHC.Types.Bool)
    -> (a -> GHC.Base.Maybe (a, a, a))
    -> Language.PureScript.Sugar.Operators.Common.FromOp nameType a
    -> Language.PureScript.Sugar.Operators.Common.Reapply nameType a
    -> ([[Text.Parsec.Expr.Operator
            (Language.PureScript.Sugar.Operators.Common.Chain a)
            ()
            Data.Functor.Identity.Identity
            a]]
        -> Text.Parsec.Expr.OperatorTable
             (Language.PureScript.Sugar.Operators.Common.Chain a)
             ()
             Data.Functor.Identity.Identity
             a)
    -> [[(Language.PureScript.Names.Qualified
            (Language.PureScript.Names.OpName nameType),
          Language.PureScript.AST.Operators.Associativity)]]
    -> a
    -> m a
  {- Arity: 2,
     Strictness: <L,U(C(C1(C(U))),A,A)><L,U(1*U(1*U(A,C(U),A,A,A,A),A,A,A,A),C(U),A)> -}
b64afdf722a4cfceca6d6091ce1e260e
  opTable ::
    [[(Language.PureScript.Names.Qualified
         (Language.PureScript.Names.OpName nameType),
       Language.PureScript.AST.Operators.Associativity)]]
    -> Language.PureScript.Sugar.Operators.Common.FromOp nameType a
    -> Language.PureScript.Sugar.Operators.Common.Reapply nameType a
    -> [[Text.Parsec.Expr.Operator
           (Language.PureScript.Sugar.Operators.Common.Chain a)
           ()
           Data.Functor.Identity.Identity
           a]]
  {- Arity: 3, Strictness: <S,1*U><L,C(U)><L,C(C1(U))>,
     Unfolding: (\ @ nameType :: Language.PureScript.Names.OpNameType
                   @ a
                   (ops :: [[(Language.PureScript.Names.Qualified
                                (Language.PureScript.Names.OpName nameType),
                              Language.PureScript.AST.Operators.Associativity)]])
                   (fromOp :: Language.PureScript.Sugar.Operators.Common.FromOp
                                nameType a)
                   (reapply :: Language.PureScript.Sugar.Operators.Common.Reapply
                                 nameType a) ->
                 GHC.Base.map
                   @ [(Language.PureScript.Names.Qualified
                         (Language.PureScript.Names.OpName nameType),
                       Language.PureScript.AST.Operators.Associativity)]
                   @ [Text.Parsec.Expr.Operator
                        (Language.PureScript.Sugar.Operators.Common.Chain a)
                        ()
                        Data.Functor.Identity.Identity
                        a]
                   (GHC.Base.map
                      @ (Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.OpName nameType),
                         Language.PureScript.AST.Operators.Associativity)
                      @ (Text.Parsec.Expr.Operator
                           (Language.PureScript.Sugar.Operators.Common.Chain a)
                           ()
                           Data.Functor.Identity.Identity
                           a)
                      (\ (ds :: (Language.PureScript.Names.Qualified
                                   (Language.PureScript.Names.OpName nameType),
                                 Language.PureScript.AST.Operators.Associativity)) ->
                       case ds of wild { (,) name a1 ->
                       Text.Parsec.Expr.Infix
                         @ (Language.PureScript.Sugar.Operators.Common.Chain a)
                         @ ()
                         @ Data.Functor.Identity.Identity
                         @ a
                         (\ @ b1
                            (s1 :: Text.Parsec.Prim.State [Data.Either.Either a a] ())
                            (cok :: (a -> a -> a)
                                    -> Text.Parsec.Prim.State [Data.Either.Either a a] ()
                                    -> Text.Parsec.Error.ParseError
                                    -> Data.Functor.Identity.Identity b1)
                            (cerr :: Text.Parsec.Error.ParseError
                                     -> Data.Functor.Identity.Identity b1)
                            (eok :: (a -> a -> a)
                                    -> Text.Parsec.Prim.State [Data.Either.Either a a] ()
                                    -> Text.Parsec.Error.ParseError
                                    -> Data.Functor.Identity.Identity b1)
                            (eerr :: Text.Parsec.Error.ParseError
                                     -> Data.Functor.Identity.Identity b1) ->
                          Language.PureScript.Sugar.Operators.Common.matchOp1
                            @ nameType
                            @ a
                            fromOp
                            name
                            @ b1
                            s1
                            (\ (x :: Language.PureScript.AST.SourcePos.SourceSpan)
                               (s2 :: Text.Parsec.Prim.State [Data.Either.Either a a] ())[OneShot]
                               (err :: Text.Parsec.Error.ParseError)[OneShot] ->
                             cok
                               (reapply x name)
                               s2
                               (case s2 of wild1 { Text.Parsec.Prim.State ds3 ds4 ds5 ->
                                case ds4 of ww10 { Text.Parsec.Pos.SourcePos ww11 ww12 ww13 ->
                                case err of ww { Text.Parsec.Error.ParseError ww1 ww2 ->
                                case ww1 of ww3 { Text.Parsec.Pos.SourcePos ww4 ww5 ww6 ->
                                case Text.Parsec.Error.$wmergeError
                                       ww4
                                       ww5
                                       ww6
                                       ww2
                                       ww11
                                       ww12
                                       ww13
                                       (GHC.Types.[]
                                          @ Text.Parsec.Error.Message) of ww14 { (#,#) ww15 ww16 ->
                                Text.Parsec.Error.ParseError ww15 ww16 } } } } }))
                            eerr
                            (\ (x :: Language.PureScript.AST.SourcePos.SourceSpan)
                               (s2 :: Text.Parsec.Prim.State [Data.Either.Either a a] ())[OneShot]
                               (err :: Text.Parsec.Error.ParseError)[OneShot] ->
                             eok
                               (reapply x name)
                               s2
                               (case s2 of wild1 { Text.Parsec.Prim.State ds3 ds4 ds5 ->
                                case ds4 of ww10 { Text.Parsec.Pos.SourcePos ww11 ww12 ww13 ->
                                case err of ww { Text.Parsec.Error.ParseError ww1 ww2 ->
                                case ww1 of ww3 { Text.Parsec.Pos.SourcePos ww4 ww5 ww6 ->
                                case Text.Parsec.Error.$wmergeError
                                       ww4
                                       ww5
                                       ww6
                                       ww2
                                       ww11
                                       ww12
                                       ww13
                                       (GHC.Types.[]
                                          @ Text.Parsec.Error.Message) of ww14 { (#,#) ww15 ww16 ->
                                Text.Parsec.Error.ParseError ww15 ww16 } } } } }))
                            eerr)
                           `cast`
                         (Sym (Text.Parsec.Prim.N:ParsecT[0]
                                   <[Data.Either.Either a a]>_R
                                   <()>_R
                                   <Data.Functor.Identity.Identity>_R
                                   <a -> a -> a>_R))
                         (Language.PureScript.Sugar.Operators.Common.toAssoc a1) }))
                   ops) -}
69cb2bfa63d5734580da523772779b7a
  parseOp ::
    Language.PureScript.Sugar.Operators.Common.FromOp nameType a
    -> Text.Parsec.Prim.Parsec
         (Language.PureScript.Sugar.Operators.Common.Chain a)
         ()
         (Language.PureScript.AST.SourcePos.SourceSpan,
          Language.PureScript.Names.Qualified
            (Language.PureScript.Names.OpName nameType))
  {- Arity: 6,
     Strictness: <L,1*C1(U)><L,U><L,U><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Sugar.Operators.Common.parseOp1
                  `cast`
                (forall (nameType :: <Language.PureScript.Names.OpNameType>_N) (a :: <*>_N).
                 <Language.PureScript.Sugar.Operators.Common.FromOp nameType a>_R
                 ->_R Sym (Text.Parsec.Prim.N:ParsecT[0]
                               <Language.PureScript.Sugar.Operators.Common.Chain a>_R
                               <()>_R
                               <Data.Functor.Identity.Identity>_R
                               <(Language.PureScript.AST.SourcePos.SourceSpan,
                                 Language.PureScript.Names.Qualified
                                   (Language.PureScript.Names.OpName nameType))>_R)) -}
a6ae70e4cbb3afad4817807204e0c0df
  parseOp1 ::
    Language.PureScript.Sugar.Operators.Common.FromOp nameType a
    -> forall b.
       Text.Parsec.Prim.State
         (Language.PureScript.Sugar.Operators.Common.Chain a) ()
       -> ((Language.PureScript.AST.SourcePos.SourceSpan,
            Language.PureScript.Names.Qualified
              (Language.PureScript.Names.OpName nameType))
           -> Text.Parsec.Prim.State
                (Language.PureScript.Sugar.Operators.Common.Chain a) ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> ((Language.PureScript.AST.SourcePos.SourceSpan,
            Language.PureScript.Names.Qualified
              (Language.PureScript.Names.OpName nameType))
           -> Text.Parsec.Prim.State
                (Language.PureScript.Sugar.Operators.Common.Chain a) ()
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> Data.Functor.Identity.Identity b
  {- Arity: 6,
     Strictness: <L,1*C1(U)><L,U><L,U><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: (\ @ nameType :: Language.PureScript.Names.OpNameType
                   @ a
                   (fromOp :: Language.PureScript.Sugar.Operators.Common.FromOp
                                nameType a)
                   @ b
                   (eta :: Text.Parsec.Prim.State
                             (Language.PureScript.Sugar.Operators.Common.Chain a) ())
                   (eta1 :: (Language.PureScript.AST.SourcePos.SourceSpan,
                             Language.PureScript.Names.Qualified
                               (Language.PureScript.Names.OpName nameType))
                            -> Text.Parsec.Prim.State
                                 (Language.PureScript.Sugar.Operators.Common.Chain a) ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b)
                   (eta2 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b)
                   (eta3 :: (Language.PureScript.AST.SourcePos.SourceSpan,
                             Language.PureScript.Names.Qualified
                               (Language.PureScript.Names.OpName nameType))
                            -> Text.Parsec.Prim.State
                                 (Language.PureScript.Sugar.Operators.Common.Chain a) ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b)
                   (eta4 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b) ->
                 Text.Parsec.Prim.<?>2
                   @ (Language.PureScript.Sugar.Operators.Common.Chain a)
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ (Language.PureScript.AST.SourcePos.SourceSpan,
                      Language.PureScript.Names.Qualified
                        (Language.PureScript.Names.OpName nameType))
                   (\ @ b1
                      (eta5 :: Text.Parsec.Prim.State
                                 (Language.PureScript.Sugar.Operators.Common.Chain a) ())[OneShot]
                      (eta6 :: (Language.PureScript.AST.SourcePos.SourceSpan,
                                Language.PureScript.Names.Qualified
                                  (Language.PureScript.Names.OpName nameType))
                               -> Text.Parsec.Prim.State
                                    (Language.PureScript.Sugar.Operators.Common.Chain a) ()
                               -> Text.Parsec.Error.ParseError
                               -> Data.Functor.Identity.Identity b1)[OneShot]
                      (eta7 :: Text.Parsec.Error.ParseError
                               -> Data.Functor.Identity.Identity b1)[OneShot]
                      (eta8 :: (Language.PureScript.AST.SourcePos.SourceSpan,
                                Language.PureScript.Names.Qualified
                                  (Language.PureScript.Names.OpName nameType))
                               -> Text.Parsec.Prim.State
                                    (Language.PureScript.Sugar.Operators.Common.Chain a) ()
                               -> Text.Parsec.Error.ParseError
                               -> Data.Functor.Identity.Identity b1)[OneShot]
                      (eta9 :: Text.Parsec.Error.ParseError
                               -> Data.Functor.Identity.Identity b1)[OneShot] ->
                    case eta5 of ww { Text.Parsec.Prim.State ww1 ww2 ww3 ->
                    case ww1 of wild {
                      []
                      -> eta9 (Text.Parsec.Error.ParseError ww2 Text.Parsec.Prim.token2)
                      : t ts
                      -> case t of wild1 {
                           Data.Either.Left x
                           -> eta9
                                (Text.Parsec.Error.ParseError
                                   ww2
                                   Language.PureScript.Sugar.Operators.Common.parseOp5)
                           Data.Either.Right y
                           -> case fromOp y of wild2 {
                                GHC.Base.Nothing
                                -> eta9
                                     (Text.Parsec.Error.ParseError
                                        ww2
                                        Language.PureScript.Sugar.Operators.Common.parseOp5)
                                GHC.Base.Just x
                                -> case ts of wild3 {
                                     []
                                     -> eta6
                                          x
                                          (Text.Parsec.Prim.State
                                             @ (Language.PureScript.Sugar.Operators.Common.Chain a)
                                             @ ()
                                             (GHC.Types.[] @ (Data.Either.Either a a))
                                             Language.PureScript.Sugar.Operators.Common.parseOp_x
                                             ww3)
                                          Language.PureScript.Sugar.Operators.Common.parseOp4
                                     : t1 ts1
                                     -> eta6
                                          x
                                          (Text.Parsec.Prim.State
                                             @ (Language.PureScript.Sugar.Operators.Common.Chain a)
                                             @ ()
                                             wild3
                                             Language.PureScript.Sugar.Operators.Common.parseOp_x
                                             ww3)
                                          Language.PureScript.Sugar.Operators.Common.parseOp4 } } } } })
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <Language.PureScript.Sugar.Operators.Common.Chain a>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <(Language.PureScript.AST.SourcePos.SourceSpan,
                               Language.PureScript.Names.Qualified
                                 (Language.PureScript.Names.OpName nameType))>_R))
                   Language.PureScript.Sugar.Operators.Common.parseOp2
                   @ b
                   eta
                   eta1
                   eta2
                   eta3
                   eta4) -}
c873e97a0e6b07a505b35d581ccf0c05
  parseOp2 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Language.PureScript.Sugar.Operators.Common.parseOp_msg
                   (GHC.Types.[] @ GHC.Base.String)) -}
0bea5c15a881bc52f2de65043b30b8f0
  parseOp3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("operator"#) -}
12dc4e31c2ba4d4637ef81a3cd976e12
  parseOp4 :: Text.Parsec.Error.ParseError
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Text.Parsec.Error.ParseError
                   Language.PureScript.Sugar.Operators.Common.parseOp_x
                   (GHC.Types.[] @ Text.Parsec.Error.Message)) -}
e67ce7afc500a7a0827488dee5a82831
  parseOp5 :: [Text.Parsec.Error.Message]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Text.Parsec.Error.Message
                   Language.PureScript.Sugar.Operators.Common.parseOp6
                   (GHC.Types.[] @ Text.Parsec.Error.Message)) -}
d297b8134df846bfe9c1fa11c49a5f97
  parseOp6 :: Text.Parsec.Error.Message
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Text.Parsec.Error.SysUnExpect
                   (GHC.Types.[] @ GHC.Types.Char)) -}
8cd78d7d4917fa8fe018f42dfdf68238
  parseOp_msg :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Sugar.Operators.Common.parseOp3) -}
853d67bd7897d8c14301956deba511f8
  parseOp_x :: Text.Parsec.Pos.SourcePos
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Text.Parsec.Pos.SourcePos
                   (GHC.Types.[] @ GHC.Types.Char)
                   1#
                   1#) -}
27ef0890ea4b350c78e4e3becccd1e2d
  parseValue ::
    Text.Parsec.Prim.Parsec
      (Language.PureScript.Sugar.Operators.Common.Chain a) () a
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Sugar.Operators.Common.parseValue1
                  `cast`
                (forall (a :: <*>_N).
                 Sym (Text.Parsec.Prim.N:ParsecT[0]
                          <Language.PureScript.Sugar.Operators.Common.Chain a>_R
                          <()>_R
                          <Data.Functor.Identity.Identity>_R
                          <a>_R)) -}
6cb9a7cb0ce1f87f0f5e281f0bb6369a
  parseValue1 ::
    Text.Parsec.Prim.State
      (Language.PureScript.Sugar.Operators.Common.Chain a) ()
    -> (a
        -> Text.Parsec.Prim.State
             (Language.PureScript.Sugar.Operators.Common.Chain a) ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (a
        -> Text.Parsec.Prim.State
             (Language.PureScript.Sugar.Operators.Common.Chain a) ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   @ b
                   (eta :: Text.Parsec.Prim.State
                             (Language.PureScript.Sugar.Operators.Common.Chain a) ())
                   (eta1 :: a
                            -> Text.Parsec.Prim.State
                                 (Language.PureScript.Sugar.Operators.Common.Chain a) ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b)
                   (eta2 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b)
                   (eta3 :: a
                            -> Text.Parsec.Prim.State
                                 (Language.PureScript.Sugar.Operators.Common.Chain a) ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b)
                   (eta4 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b) ->
                 Text.Parsec.Prim.<?>2
                   @ (Language.PureScript.Sugar.Operators.Common.Chain a)
                   @ ()
                   @ Data.Functor.Identity.Identity
                   @ a
                   (Language.PureScript.Sugar.Operators.Common.parseValue4 @ a)
                     `cast`
                   (Sym (Text.Parsec.Prim.N:ParsecT[0]
                             <Language.PureScript.Sugar.Operators.Common.Chain a>_R
                             <()>_R
                             <Data.Functor.Identity.Identity>_R
                             <a>_R))
                   Language.PureScript.Sugar.Operators.Common.parseValue2
                   @ b
                   eta
                   eta1
                   eta2
                   eta3
                   eta4) -}
b056d925e10b094c3e18ae022df325d2
  parseValue2 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Language.PureScript.Sugar.Operators.Common.parseValue_msg
                   (GHC.Types.[] @ GHC.Base.String)) -}
e2e5e564540d84c3f8453df673b4a438
  parseValue3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("expression"#) -}
6df94b0061c2a79174cc03203f684e3f
  parseValue4 ::
    Text.Parsec.Prim.State
      (Language.PureScript.Sugar.Operators.Common.Chain a) ()
    -> (a
        -> Text.Parsec.Prim.State
             (Language.PureScript.Sugar.Operators.Common.Chain a) ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (a
        -> Text.Parsec.Prim.State
             (Language.PureScript.Sugar.Operators.Common.Chain a) ()
        -> Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> (Text.Parsec.Error.ParseError
        -> Data.Functor.Identity.Identity b)
    -> Data.Functor.Identity.Identity b
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(SSS),1*U(1*U,U,U)><L,1*C1(C1(C1(U)))><L,A><L,A><L,1*C1(U)>,
     Unfolding: (\ @ a
                   @ b
                   (eta :: Text.Parsec.Prim.State
                             (Language.PureScript.Sugar.Operators.Common.Chain a) ())
                   (eta1 :: a
                            -> Text.Parsec.Prim.State
                                 (Language.PureScript.Sugar.Operators.Common.Chain a) ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b)
                   (eta2 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b)
                   (eta3 :: a
                            -> Text.Parsec.Prim.State
                                 (Language.PureScript.Sugar.Operators.Common.Chain a) ()
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b)
                   (eta4 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b) ->
                 case eta of ww { Text.Parsec.Prim.State ww1 ww2 ww3 ->
                 case ww1 of wild {
                   []
                   -> eta4 (Text.Parsec.Error.ParseError ww2 Text.Parsec.Prim.token2)
                   : t ts
                   -> case t of wild1 {
                        Data.Either.Left x
                        -> case ts of wild2 {
                             []
                             -> eta1
                                  x
                                  (Text.Parsec.Prim.State
                                     @ (Language.PureScript.Sugar.Operators.Common.Chain a)
                                     @ ()
                                     (GHC.Types.[] @ (Data.Either.Either a a))
                                     Language.PureScript.Sugar.Operators.Common.parseOp_x
                                     ww3)
                                  Language.PureScript.Sugar.Operators.Common.parseOp4
                             : t1 ts1
                             -> eta1
                                  x
                                  (Text.Parsec.Prim.State
                                     @ (Language.PureScript.Sugar.Operators.Common.Chain a)
                                     @ ()
                                     wild2
                                     Language.PureScript.Sugar.Operators.Common.parseOp_x
                                     ww3)
                                  Language.PureScript.Sugar.Operators.Common.parseOp4 }
                        Data.Either.Right y
                        -> eta4
                             (Text.Parsec.Error.ParseError
                                ww2
                                Language.PureScript.Sugar.Operators.Common.parseOp5) } } }) -}
4152272125069f3488c6438dab0dbbba
  parseValue_msg :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Sugar.Operators.Common.parseValue3) -}
1e7f0bd346db3d6ffd606fb8335058a4
  toAssoc ::
    Language.PureScript.AST.Operators.Associativity
    -> Text.Parsec.Expr.Assoc
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.AST.Operators.Associativity) ->
                 case ds of wild {
                   Language.PureScript.AST.Operators.Infixl
                   -> Text.Parsec.Expr.AssocLeft
                   Language.PureScript.AST.Operators.Infixr
                   -> Text.Parsec.Expr.AssocRight
                   Language.PureScript.AST.Operators.Infix
                   -> Text.Parsec.Expr.AssocNone }) -}
93a25b3ae4d9465724aa77da9a935817
  token ::
    Text.Parsec.Prim.Stream s Data.Functor.Identity.Identity t =>
    (t -> GHC.Base.Maybe a) -> Text.Parsec.Prim.Parsec s u a
  {- Arity: 7, HasNoCafRefs,
     Strictness: <S(S(LC(C(S))LLL)L),U(U(A,C(C1(U)),A,A,A),C(U))><L,C(U)><S(LSS),1*U(U,U,U)><L,C(C1(C1(U)))><L,A><L,A><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Sugar.Operators.Common.token1
                  `cast`
                (forall (s :: <*>_N) (t :: <*>_N) (a :: <*>_N) (u :: <*>_N).
                 <Text.Parsec.Prim.Stream s Data.Functor.Identity.Identity t>_R
                 ->_R <t -> GHC.Base.Maybe a>_R
                 ->_R Sym (Text.Parsec.Prim.N:ParsecT[0]
                               <s>_R <u>_R <Data.Functor.Identity.Identity>_R <a>_R)) -}
43793efdb0c6e26313348508c280205d
  token1 ::
    Text.Parsec.Prim.Stream s Data.Functor.Identity.Identity t =>
    (t -> GHC.Base.Maybe a)
    -> forall b.
       Text.Parsec.Prim.State s u
       -> (a
           -> Text.Parsec.Prim.State s u
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (a
           -> Text.Parsec.Prim.State s u
           -> Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> (Text.Parsec.Error.ParseError
           -> Data.Functor.Identity.Identity b)
       -> Data.Functor.Identity.Identity b
  {- Arity: 7, HasNoCafRefs,
     Strictness: <S(S(LC(C(S))LLL)L),U(U(A,C(C1(U)),A,A,A),C(U))><L,C(U)><S(LSS),1*U(U,U,U)><L,C(C1(C1(U)))><L,A><L,A><L,C(U)>,
     Unfolding: InlineRule (7, True, False)
                (\ @ s
                   @ t
                   @ a
                   @ u
                   ($dStream :: Text.Parsec.Prim.Stream
                                  s Data.Functor.Identity.Identity t)
                   (eta :: t -> GHC.Base.Maybe a)
                   @ b
                   (eta1 :: Text.Parsec.Prim.State s u)
                   (eta2 :: a
                            -> Text.Parsec.Prim.State s u
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b)
                   (eta3 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b)
                   (eta4 :: a
                            -> Text.Parsec.Prim.State s u
                            -> Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b)
                   (eta5 :: Text.Parsec.Error.ParseError
                            -> Data.Functor.Identity.Identity b) ->
                 case eta1 of ww { Text.Parsec.Prim.State ww1 ww2 ww3 ->
                 Text.Parsec.Prim.$wtoken
                   @ s
                   @ t
                   @ a
                   @ u
                   $dStream
                   (Language.PureScript.Sugar.Operators.Common.token3 @ t)
                   (Language.PureScript.Sugar.Operators.Common.token2 @ t)
                   eta
                   @ b
                   ww1
                   ww2
                   ww3
                   eta2
                   eta5 }) -}
13d5b30f1f4ebad81c4ec08300ccaef1
  token2 :: t -> Text.Parsec.Pos.SourcePos
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>m,
     Unfolding: InlineRule (1, True, True)
                (\ @ t (ds :: t) ->
                 Language.PureScript.Sugar.Operators.Common.parseOp_x) -}
4600a2563c706644608b102a44ff126f
  token3 :: t -> [GHC.Types.Char]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ t (ds :: t) -> GHC.Types.[] @ GHC.Types.Char) -}
"SPEC/Language.PureScript.Sugar.Operators.Common $fStream[]mtok @ Identity _" [orphan] forall @ tok
                                                                                              (v :: GHC.Base.Monad
                                                                                                      Data.Functor.Identity.Identity)
  Text.Parsec.Prim.$fStream[]mtok @ Data.Functor.Identity.Identity
                                  @ tok
                                  v
  = Language.PureScript.Sugar.Operators.Common.$s$fStream[]mtok @ tok
"SPEC/Language.PureScript.Sugar.Operators.Common $fStream[]mtok_$cuncons @ Identity _" [orphan] forall @ tok
                                                                                                       ($dMonad :: GHC.Base.Monad
                                                                                                                     Data.Functor.Identity.Identity)
  Text.Parsec.Prim.$fStream[]mtok_$cuncons @ Data.Functor.Identity.Identity
                                           @ tok
                                           $dMonad
  = Language.PureScript.Sugar.Operators.Common.$s$fStream[]mtok_$s$fStream[]mtok_$cuncons
      @ tok
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

