
==================== FINAL INTERFACE ====================
2019-01-24 14:14:11.239126 UTC

interface purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.Traversals 8043
  interface hash: 7c32a197463ed88118430e9c4c46d4e4
  ABI hash: f5adaf844c5e9d0f0678a8b574a32aa6
  export-list hash: a3387abb8e15fc740358f1f69c313aad
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: de35dcd1d43076a5ced1b1f2744d7ead
  opt_hash: 2c98c95d41c045ae9c2fb565ec8aabc6
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Language.PureScript.AST.Traversals.accumKinds
  Language.PureScript.AST.Traversals.accumTypes
  Language.PureScript.AST.Traversals.everythingOnValues
  Language.PureScript.AST.Traversals.everythingWithContextOnValues
  Language.PureScript.AST.Traversals.everythingWithScope
  Language.PureScript.AST.Traversals.everywhereOnValues
  Language.PureScript.AST.Traversals.everywhereOnValuesM
  Language.PureScript.AST.Traversals.everywhereOnValuesTopDownM
  Language.PureScript.AST.Traversals.everywhereWithContextOnValuesM
  Language.PureScript.AST.Traversals.guardedExprM
  Language.PureScript.AST.Traversals.inScope
  Language.PureScript.AST.Traversals.litM
  Language.PureScript.AST.Traversals.mapGuardedExpr
  Language.PureScript.AST.Traversals.overTypes
  Language.PureScript.AST.Traversals.ScopedIdent{Language.PureScript.AST.Traversals.LocalIdent Language.PureScript.AST.Traversals.ToplevelIdent}
module dependencies: Control.Monad.Supply
                     Control.Monad.Supply.Class Language.PureScript.AST.Binders
                     Language.PureScript.AST.Declarations
                     Language.PureScript.AST.Literals Language.PureScript.AST.Operators
                     Language.PureScript.AST.SourcePos Language.PureScript.Bundle
                     Language.PureScript.Comments Language.PureScript.Constants
                     Language.PureScript.Crash Language.PureScript.Environment
                     Language.PureScript.Kinds Language.PureScript.Label
                     Language.PureScript.Names Language.PureScript.PSString
                     Language.PureScript.Traversals
                     Language.PureScript.TypeClassDictionaries Language.PureScript.Types
                     Paths_purescript
package dependencies: aeson-1.3.1.1 array-0.5.2.0 async-2.2.1
                      attoparsec-0.13.2.2 base-4.11.1.0 base-compat-0.10.4 binary-0.8.5.1
                      blaze-builder-0.4.1.0 bytestring-0.10.8.2 containers-0.5.11.0
                      deepseq-1.4.3.0 dlist-0.8.0.4 filepath-1.4.2 ghc-boot-th-8.4.3
                      ghc-prim-0.5.2.0 hashable-1.2.7.0 integer-gmp-1.0.2.0
                      integer-logarithms-1.0.2.1 language-javascript-0.6.0.11
                      microlens-0.4.9.1 microlens-ghc-0.4.9 microlens-mtl-0.1.11.1
                      microlens-platform-0.3.10 microlens-th-0.4.2.1 mtl-2.2.2
                      parsec-3.1.13.0 pretty-1.1.3.6 primitive-0.6.3.0 protolude-0.2.2
                      random-1.1 scientific-0.3.6.2 sourcemap-0.1.6 stm-2.4.5.0 syb-0.7
                      tagged-0.8.5 template-haskell-2.13.0.0 text-1.2.3.0
                      th-abstraction-0.2.8.0 time-1.8.0.2 time-locale-compat-0.1.1.4
                      transformers-0.5.5.0 unordered-containers-0.2.9.0
                      utf8-string-1.0.1.1 uuid-types-1.0.3 vector-0.12.0.1
orphans: syb-0.7:Data.Generics.Instances
         stm-2.4.5.0:Control.Monad.STM
         attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         microlens-platform-0.3.10:Lens.Micro.Platform
         microlens-ghc-0.4.9:Lens.Micro.GHC
         hashable-1.2.7.0:Data.Hashable.Generic
         vector-0.12.0.1:Data.Vector.Unboxed
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.5.0:Control.Monad.Trans.Error
         text-1.2.3.0:Data.Text.Lazy text-1.2.3.0:Data.Text
         binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: aeson-1.3.1.1:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.Graph
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         dlist-0.8.0.4:Data.DList ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         microlens-0.4.9.1:Lens.Micro.Internal
                         microlens-ghc-0.4.9:Lens.Micro.GHC
                         microlens-mtl-0.1.11.1:Lens.Micro.Mtl.Internal
                         microlens-platform-0.3.10:Lens.Micro.Platform
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.Declarations
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.Operators
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.SourcePos
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Comments
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Environment
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Kinds
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Label
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Names
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.PSString
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.TypeClassDictionaries
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Types
                         tagged-0.8.5:Data.Tagged
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
                         th-abstraction-0.2.8.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  base-4.11.1.0:Control.Monad c5f960c67d822497578bffbd3e4c01cf
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.Functor f522c3501272159820fd6f242510732f
import  -/  base-4.11.1.0:Data.List 83dc843e47bfc0c5af51e19c6f3476d5
import  -/  base-4.11.1.0:Data.List.NonEmpty 595ee3baddcadebc4831ea7541427984
import  -/  base-4.11.1.0:Data.Maybe 409c3da2b142470b68be39ce1d97a9f7
import  -/  base-4.11.1.0:Data.Traversable 7ad4edb9184ea1ae8e73f6b94f115c8c
import  -/  base-4.11.1.0:Data.Tuple 3af66f3ac61ed95ba8a3a3f68ebc5003
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-compat-0.10.4:Prelude.Compat bb6796186ed35a1d09dc34362a3fc27e
import  -/  containers-0.5.11.0:Data.Set 7d3c64a641be4cacbcd8119445bab919
import  -/  containers-0.5.11.0:Data.Set.Internal 93fa3ef95853aa2a7aadf32d693bd451
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  Language.PureScript.AST.Binders 482af52ec934a93b1ca6ec424fbe30f2
  exports: 21ca217e42d8560f3b797ca3690c6ebc
  BinaryNoParensBinder fa245b4b20e4d00bda41b59e19ae05a3
  Binder c96edaac3b5fcb24a174f6f4b3f084d4
  ConstructorBinder 82c410a4d9e21c325ba3e1527c50daff
  LiteralBinder 0a5559e7d3aabf0cf9c897b797edff85
  NamedBinder 0800b3be0f9ce7a64f901e627e87a982
  ParensInBinder 5997f08e343521a086fe234687cfa21a
  PositionedBinder a6b770e5a8f88247c6ef23a04722a775
  TypedBinder 69e3490135b9eb76e3f2c68250002721
  binderNames 810a1bcb74988444206bd4c3a504cf72
import  -/  Language.PureScript.AST.Declarations 586bc75044e8737d02875208d17d4395
  exports: ca3189140688cddb12d34cdf2c0663e4
  Abs dae9a514c0c54a50406a57cd533f800a
  Accessor 75238d8cd32188d181bffb473f6c4802
  Ado aa51ec093a5d30de9008b28e35a2b3e8
  App ae4e12e545757da5fb62189548835120
  BinaryNoParens fcc835654893b3cf82da9962f92ae61e
  BindingGroupDeclaration fe3c1705a7a0108b856351d712879737
  BoundValueDeclaration c15036e292c80286a90dbb25f336202d
  Case dbf8d0b5ac1a603149b8bb1459575de0
  CaseAlternative 8464f1c9f0c33f15833817399a071704
  CaseAlternative e92f6ee78a22c0eadc3566d7d1f48d5b
  ConditionGuard de13c04599b5971ac3f21a1186c6e658
  DataBindingGroupDeclaration dd96274a1938234d4bfdc2a1d4e8e0ff
  DataDeclaration 2fcba6ad709595ed3c4d0926de54bc2c
  Declaration e92f6ee78a22c0eadc3566d7d1f48d5b
  DeferredDictionary 4767b924c347cb558c8259d23777dc47
  Do 61408a6943b45292f7b373e76e9ffa63
  DoNotationBind 3860cb3df901dc1a4468bed348d53a88
  DoNotationElement e92f6ee78a22c0eadc3566d7d1f48d5b
  DoNotationLet cb7748a003aec3a844b46797cc9f3089
  DoNotationValue 8d573316807fe6334d3059181f3f010a
  ExplicitInstance 7626e63238a07a99c1bae428b77d3f66
  Expr e92f6ee78a22c0eadc3566d7d1f48d5b
  ExternDataDeclaration 45e3d2e61e8f85403449183876d3af2f
  ExternDeclaration 180e172298441327dfef1022795a10e0
  Guard e92f6ee78a22c0eadc3566d7d1f48d5b
  GuardedExpr 811952f37a620b8d78cc4a6176d99a2c
  GuardedExpr e92f6ee78a22c0eadc3566d7d1f48d5b
  IfThenElse 8071f8c4795174e5283a3ecdaa8b3c8f
  Let 5843430a3e31a1977aadcfb94efa8312
  Literal bdcf4b137a448fe7c2ed57fe33a72cd3
  ObjectUpdate 14b4ffe7d1b68ac321d3f2c2a27a17eb
  ObjectUpdateNested fdcbd615f1a1d120ea9765eaceb58198
  Parens ce804ea11612979be1464b51c74c24ab
  PatternGuard a27d707167917ad112543851031e65f9
  PositionedDoNotationElement dae30f378bb2ebb85464560daefe1b0b
  PositionedValue b90293950702fd6b659d7cd86d309f72
  TypeClassDeclaration 19936abcaf3693a6825ccbc13b2590dc
  TypeClassDictionary 531ed710fa3e0860894127586614f844
  TypeClassDictionaryConstructorApp f15387264e84e75b0e5ed1f08eacb958
  TypeDeclaration 28394461dbd073cca9cdbd263dbb4335
  TypeInstanceDeclaration 46d66658dd5a30ba03e36fc960162f20
  TypeSynonymDeclaration 1cfe9af195a40456074b96ff0ca4519c
  TypedValue 0acc3ace791a36484dcda3706df33cef
  UnaryMinus 00e8f54110f0049331236b115b108a07
  ValueDecl 97b38919d86cd9182cb8d86b6f4ae734
  ValueDeclaration 3d506e6b33aef3e239802bd27220a2e5
  caseAlternativeBinders e92f6ee78a22c0eadc3566d7d1f48d5b
  caseAlternativeResult e92f6ee78a22c0eadc3566d7d1f48d5b
  mapTypeInstanceBody 8c10e95933c92cb479ab081da10c3627
  traverseTypeInstanceBody b3dc0429061d0ff256d8d3e4cc7c9512
  tydeclIdent c947d6d8aff56f68d1789e1833a9fcd2
  tydeclType c947d6d8aff56f68d1789e1833a9fcd2
  valdeclBinders dc3fe29a39c3efd97807e85c8c5dc302
  valdeclExpression dc3fe29a39c3efd97807e85c8c5dc302
  valdeclIdent dc3fe29a39c3efd97807e85c8c5dc302
import  -/  Language.PureScript.AST.Literals da2ec269f063125450b272321f85468a
  exports: ab5af4e7482c5a8cbf79fdfd52ee94e2
  ArrayLiteral 7cbd15adda8a5ed2a81035be22e2eae2
  Literal 4b6b35be8d89b746a77fcd3d0c0a71d4
  ObjectLiteral d17d3a090fe8a89f303c679b0a417ae9
import  -/  Language.PureScript.Kinds e26b9cf8211f7e72bb44fdd3faed066e
  exports: fe71635ad7964c0d620fb0685614a050
  SourceKind 4cdf50d4b2444221832ca704f3a0c468
import  -/  Language.PureScript.Names 00f694509122478d97b327fbbccae327
  exports: ad7ae34f85124c68e8ba1c90fb2e732f
  Ident bad3562aa6138b6192713ac281080869
import  -/  Language.PureScript.Traversals e97764d7972cc6ba421a6be0a3ce6bda
  exports: cbb821b2ee7c6d00cdf62285e1dbe432
  sndM c93ef73e127a3a54c4cd1e5e2194b237
  thirdM ff8e8fc8ea147bba13179156ecb5143a
import  -/  Language.PureScript.Types 80a51f62cb3e6c71f024289b88f07b7f
  exports: 229bb7528146da886cffbefad5822e19
  KindedType 7d9c2ac5dbbe89c236f431d3c9412617
  SourceType 0ac818517c14fedd280ef5885ae0cdc3
  constraintArgs d5fc19231e8a71936895da17eade4f5b
  mapConstraintArgs 271f74f3dadd31332938099ff1d312ff
a9386d37e7ebee7cdf58474c3889e380
  $fEqScopedIdent ::
    GHC.Classes.Eq Language.PureScript.AST.Traversals.ScopedIdent
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.AST.Traversals.ScopedIdent
                  Language.PureScript.AST.Traversals.$fEqScopedIdent_$c==
                  Language.PureScript.AST.Traversals.$fEqScopedIdent_$c/= -}
a9386d37e7ebee7cdf58474c3889e380
  $fEqScopedIdent_$c/= ::
    Language.PureScript.AST.Traversals.ScopedIdent
    -> Language.PureScript.AST.Traversals.ScopedIdent -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.AST.Traversals.ScopedIdent)
                   (y :: Language.PureScript.AST.Traversals.ScopedIdent) ->
                 case x of wild {
                   Language.PureScript.AST.Traversals.LocalIdent a1
                   -> case y of wild1 {
                        Language.PureScript.AST.Traversals.LocalIdent b1
                        -> case Language.PureScript.Names.$fEqIdent_$c== a1 b1 of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False }
                        Language.PureScript.AST.Traversals.ToplevelIdent ipv
                        -> GHC.Types.True }
                   Language.PureScript.AST.Traversals.ToplevelIdent a1
                   -> case y of wild1 {
                        Language.PureScript.AST.Traversals.LocalIdent ipv -> GHC.Types.True
                        Language.PureScript.AST.Traversals.ToplevelIdent b1
                        -> case Language.PureScript.Names.$fEqIdent_$c== a1 b1 of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False } } }) -}
a9386d37e7ebee7cdf58474c3889e380
  $fEqScopedIdent_$c== ::
    Language.PureScript.AST.Traversals.ScopedIdent
    -> Language.PureScript.AST.Traversals.ScopedIdent -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Language.PureScript.AST.Traversals.ScopedIdent)
                   (ds1 :: Language.PureScript.AST.Traversals.ScopedIdent) ->
                 case ds of wild {
                   Language.PureScript.AST.Traversals.LocalIdent a1
                   -> case ds1 of wild1 {
                        Language.PureScript.AST.Traversals.LocalIdent b1
                        -> Language.PureScript.Names.$fEqIdent_$c== a1 b1
                        Language.PureScript.AST.Traversals.ToplevelIdent ipv
                        -> GHC.Types.False }
                   Language.PureScript.AST.Traversals.ToplevelIdent a1
                   -> case ds1 of wild1 {
                        Language.PureScript.AST.Traversals.LocalIdent ipv
                        -> GHC.Types.False
                        Language.PureScript.AST.Traversals.ToplevelIdent b1
                        -> Language.PureScript.Names.$fEqIdent_$c== a1 b1 } }) -}
a9386d37e7ebee7cdf58474c3889e380
  $fOrdScopedIdent ::
    GHC.Classes.Ord Language.PureScript.AST.Traversals.ScopedIdent
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.AST.Traversals.ScopedIdent
                  Language.PureScript.AST.Traversals.$fEqScopedIdent
                  Language.PureScript.AST.Traversals.$fOrdScopedIdent_$ccompare
                  Language.PureScript.AST.Traversals.$fOrdScopedIdent_$c<
                  Language.PureScript.AST.Traversals.$fOrdScopedIdent_$c<=
                  Language.PureScript.AST.Traversals.$fOrdScopedIdent_$c>
                  Language.PureScript.AST.Traversals.$fOrdScopedIdent_$c>=
                  Language.PureScript.AST.Traversals.$fOrdScopedIdent_$cmax
                  Language.PureScript.AST.Traversals.$fOrdScopedIdent_$cmin -}
a9386d37e7ebee7cdf58474c3889e380
  $fOrdScopedIdent_$c< ::
    Language.PureScript.AST.Traversals.ScopedIdent
    -> Language.PureScript.AST.Traversals.ScopedIdent -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Language.PureScript.AST.Traversals.ScopedIdent)
                   (b :: Language.PureScript.AST.Traversals.ScopedIdent) ->
                 case a of wild {
                   Language.PureScript.AST.Traversals.LocalIdent a1
                   -> case b of wild1 {
                        Language.PureScript.AST.Traversals.LocalIdent b1
                        -> Language.PureScript.Names.$fOrdIdent_$c< a1 b1
                        Language.PureScript.AST.Traversals.ToplevelIdent ipv
                        -> GHC.Types.True }
                   Language.PureScript.AST.Traversals.ToplevelIdent a1
                   -> case b of wild1 {
                        Language.PureScript.AST.Traversals.LocalIdent ipv
                        -> GHC.Types.False
                        Language.PureScript.AST.Traversals.ToplevelIdent b1
                        -> Language.PureScript.Names.$fOrdIdent_$c< a1 b1 } }) -}
a9386d37e7ebee7cdf58474c3889e380
  $fOrdScopedIdent_$c<= ::
    Language.PureScript.AST.Traversals.ScopedIdent
    -> Language.PureScript.AST.Traversals.ScopedIdent -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Language.PureScript.AST.Traversals.ScopedIdent)
                   (b :: Language.PureScript.AST.Traversals.ScopedIdent) ->
                 case b of wild {
                   Language.PureScript.AST.Traversals.LocalIdent a1
                   -> case a of wild1 {
                        Language.PureScript.AST.Traversals.LocalIdent b1
                        -> case Language.PureScript.Names.$fOrdIdent_$c< a1 b1 of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False }
                        Language.PureScript.AST.Traversals.ToplevelIdent ipv
                        -> GHC.Types.False }
                   Language.PureScript.AST.Traversals.ToplevelIdent a1
                   -> case a of wild1 {
                        Language.PureScript.AST.Traversals.LocalIdent ipv -> GHC.Types.True
                        Language.PureScript.AST.Traversals.ToplevelIdent b1
                        -> case Language.PureScript.Names.$fOrdIdent_$c< a1 b1 of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False } } }) -}
a9386d37e7ebee7cdf58474c3889e380
  $fOrdScopedIdent_$c> ::
    Language.PureScript.AST.Traversals.ScopedIdent
    -> Language.PureScript.AST.Traversals.ScopedIdent -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, True)
                (\ (a :: Language.PureScript.AST.Traversals.ScopedIdent)
                   (b :: Language.PureScript.AST.Traversals.ScopedIdent) ->
                 Language.PureScript.AST.Traversals.$fOrdScopedIdent_$c< b a) -}
a9386d37e7ebee7cdf58474c3889e380
  $fOrdScopedIdent_$c>= ::
    Language.PureScript.AST.Traversals.ScopedIdent
    -> Language.PureScript.AST.Traversals.ScopedIdent -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Language.PureScript.AST.Traversals.ScopedIdent)
                   (b :: Language.PureScript.AST.Traversals.ScopedIdent) ->
                 case a of wild {
                   Language.PureScript.AST.Traversals.LocalIdent a1
                   -> case b of wild1 {
                        Language.PureScript.AST.Traversals.LocalIdent b1
                        -> case Language.PureScript.Names.$fOrdIdent_$c< a1 b1 of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False }
                        Language.PureScript.AST.Traversals.ToplevelIdent ipv
                        -> GHC.Types.False }
                   Language.PureScript.AST.Traversals.ToplevelIdent a1
                   -> case b of wild1 {
                        Language.PureScript.AST.Traversals.LocalIdent ipv -> GHC.Types.True
                        Language.PureScript.AST.Traversals.ToplevelIdent b1
                        -> case Language.PureScript.Names.$fOrdIdent_$c< a1 b1 of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False } } }) -}
a9386d37e7ebee7cdf58474c3889e380
  $fOrdScopedIdent_$ccompare ::
    Language.PureScript.AST.Traversals.ScopedIdent
    -> Language.PureScript.AST.Traversals.ScopedIdent
    -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Language.PureScript.AST.Traversals.ScopedIdent)
                   (b :: Language.PureScript.AST.Traversals.ScopedIdent) ->
                 case a of wild {
                   Language.PureScript.AST.Traversals.LocalIdent a1
                   -> case b of wild1 {
                        Language.PureScript.AST.Traversals.LocalIdent b1
                        -> Language.PureScript.Names.$fOrdIdent_$ccompare a1 b1
                        Language.PureScript.AST.Traversals.ToplevelIdent ipv
                        -> GHC.Types.LT }
                   Language.PureScript.AST.Traversals.ToplevelIdent a1
                   -> case b of wild1 {
                        Language.PureScript.AST.Traversals.LocalIdent ipv -> GHC.Types.GT
                        Language.PureScript.AST.Traversals.ToplevelIdent b1
                        -> Language.PureScript.Names.$fOrdIdent_$ccompare a1 b1 } }) -}
a9386d37e7ebee7cdf58474c3889e380
  $fOrdScopedIdent_$cmax ::
    Language.PureScript.AST.Traversals.ScopedIdent
    -> Language.PureScript.AST.Traversals.ScopedIdent
    -> Language.PureScript.AST.Traversals.ScopedIdent
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (x :: Language.PureScript.AST.Traversals.ScopedIdent)
                   (y :: Language.PureScript.AST.Traversals.ScopedIdent) ->
                 case y of wild {
                   Language.PureScript.AST.Traversals.LocalIdent a1
                   -> case x of wild1 {
                        Language.PureScript.AST.Traversals.LocalIdent b1
                        -> case Language.PureScript.Names.$fOrdIdent_$c< a1 b1 of wild2 {
                             GHC.Types.False -> wild GHC.Types.True -> wild1 }
                        Language.PureScript.AST.Traversals.ToplevelIdent ipv -> wild1 }
                   Language.PureScript.AST.Traversals.ToplevelIdent a1
                   -> case x of wild1 {
                        Language.PureScript.AST.Traversals.LocalIdent ipv -> wild
                        Language.PureScript.AST.Traversals.ToplevelIdent b1
                        -> case Language.PureScript.Names.$fOrdIdent_$c< a1 b1 of wild2 {
                             GHC.Types.False -> wild GHC.Types.True -> wild1 } } }) -}
a9386d37e7ebee7cdf58474c3889e380
  $fOrdScopedIdent_$cmin ::
    Language.PureScript.AST.Traversals.ScopedIdent
    -> Language.PureScript.AST.Traversals.ScopedIdent
    -> Language.PureScript.AST.Traversals.ScopedIdent
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (x :: Language.PureScript.AST.Traversals.ScopedIdent)
                   (y :: Language.PureScript.AST.Traversals.ScopedIdent) ->
                 case y of wild {
                   Language.PureScript.AST.Traversals.LocalIdent a1
                   -> case x of wild1 {
                        Language.PureScript.AST.Traversals.LocalIdent b1
                        -> case Language.PureScript.Names.$fOrdIdent_$c< a1 b1 of wild2 {
                             GHC.Types.False -> wild1 GHC.Types.True -> wild }
                        Language.PureScript.AST.Traversals.ToplevelIdent ipv -> wild }
                   Language.PureScript.AST.Traversals.ToplevelIdent a1
                   -> case x of wild1 {
                        Language.PureScript.AST.Traversals.LocalIdent ipv -> wild1
                        Language.PureScript.AST.Traversals.ToplevelIdent b1
                        -> case Language.PureScript.Names.$fOrdIdent_$c< a1 b1 of wild2 {
                             GHC.Types.False -> wild1 GHC.Types.True -> wild } } }) -}
a9386d37e7ebee7cdf58474c3889e380
  $fShowScopedIdent ::
    GHC.Show.Show Language.PureScript.AST.Traversals.ScopedIdent
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.AST.Traversals.ScopedIdent
                  Language.PureScript.AST.Traversals.$fShowScopedIdent_$cshowsPrec
                  Language.PureScript.AST.Traversals.$fShowScopedIdent_$cshow
                  Language.PureScript.AST.Traversals.$fShowScopedIdent_$cshowList -}
a9386d37e7ebee7cdf58474c3889e380
  $fShowScopedIdent1 ::
    Language.PureScript.AST.Traversals.ScopedIdent -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (w :: Language.PureScript.AST.Traversals.ScopedIdent) ->
                 Language.PureScript.AST.Traversals.$w$cshowsPrec 0# w) -}
69fd8b540a612baf09a2ded0ac8e777a
  $fShowScopedIdent2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.AST.Traversals.$fShowScopedIdent3) -}
52296425eabde460549ac33390a972dd
  $fShowScopedIdent3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ToplevelIdent "#) -}
f30c343bb7161290f3ef0ba4b36895fa
  $fShowScopedIdent4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.AST.Traversals.$fShowScopedIdent5) -}
d0117798f9eabd38e3466849d86bc615
  $fShowScopedIdent5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("LocalIdent "#) -}
58775cff0e6b68a1322cdf756dbaf971
  $fShowScopedIdent6 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11#) -}
a9386d37e7ebee7cdf58474c3889e380
  $fShowScopedIdent_$cshow ::
    Language.PureScript.AST.Traversals.ScopedIdent -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: Language.PureScript.AST.Traversals.ScopedIdent) ->
                 case x of wild {
                   Language.PureScript.AST.Traversals.LocalIdent b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.AST.Traversals.$fShowScopedIdent4
                        (Language.PureScript.Names.$fShowIdent_$cshowsPrec
                           Language.PureScript.AST.Traversals.$fShowScopedIdent6
                           b1
                           (GHC.Types.[] @ GHC.Types.Char))
                   Language.PureScript.AST.Traversals.ToplevelIdent b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.AST.Traversals.$fShowScopedIdent2
                        (Language.PureScript.Names.$fShowIdent_$cshowsPrec
                           Language.PureScript.AST.Traversals.$fShowScopedIdent6
                           b1
                           (GHC.Types.[] @ GHC.Types.Char)) }) -}
a9386d37e7ebee7cdf58474c3889e380
  $fShowScopedIdent_$cshowList ::
    [Language.PureScript.AST.Traversals.ScopedIdent] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.AST.Traversals.ScopedIdent])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.AST.Traversals.ScopedIdent
                   Language.PureScript.AST.Traversals.$fShowScopedIdent1
                   ls
                   s) -}
a9386d37e7ebee7cdf58474c3889e380
  $fShowScopedIdent_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.AST.Traversals.ScopedIdent -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.AST.Traversals.ScopedIdent) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Language.PureScript.AST.Traversals.$w$cshowsPrec ww1 w1 }) -}
56c302480bf4c344a73f89599ab2588a
  $s$wsplitS ::
    Language.PureScript.AST.Traversals.ScopedIdent
    -> Data.Set.Internal.Set
         Language.PureScript.AST.Traversals.ScopedIdent
    -> (# Data.Set.Internal.Set
            Language.PureScript.AST.Traversals.ScopedIdent,
          Data.Set.Internal.Set
            Language.PureScript.AST.Traversals.ScopedIdent #)
  {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [~] -}
0ec96c33b46b8653104549d2c9d8e6cc
  $sfromList ::
    [Language.PureScript.AST.Traversals.ScopedIdent]
    -> Data.Set.Internal.Set
         Language.PureScript.AST.Traversals.ScopedIdent
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [Language.PureScript.AST.Traversals.ScopedIdent]) ->
                 case ds of wild {
                   []
                   -> Data.Set.Internal.Tip
                        @ Language.PureScript.AST.Traversals.ScopedIdent
                   : x ds1
                   -> case ds1 of wild1 {
                        []
                        -> case x of dt { DEFAULT ->
                           Data.Set.Internal.Bin
                             @ Language.PureScript.AST.Traversals.ScopedIdent
                             1#
                             dt
                             (Data.Set.Internal.Tip
                                @ Language.PureScript.AST.Traversals.ScopedIdent)
                             (Data.Set.Internal.Tip
                                @ Language.PureScript.AST.Traversals.ScopedIdent) }
                        : ipv ipv1
                        -> case x of wild2 {
                             Language.PureScript.AST.Traversals.LocalIdent a1
                             -> case ipv of wild3 {
                                  Language.PureScript.AST.Traversals.LocalIdent b1
                                  -> case Language.PureScript.Names.$fOrdIdent_$c< a1 b1 of wild4 {
                                       GHC.Types.False
                                       -> Language.PureScript.AST.Traversals.$sfromList_$sgo4
                                            wild3
                                            ipv1
                                            (Data.Set.Internal.Bin
                                               @ Language.PureScript.AST.Traversals.ScopedIdent
                                               1#
                                               wild2
                                               (Data.Set.Internal.Tip
                                                  @ Language.PureScript.AST.Traversals.ScopedIdent)
                                               (Data.Set.Internal.Tip
                                                  @ Language.PureScript.AST.Traversals.ScopedIdent))
                                       GHC.Types.True
                                       -> Language.PureScript.AST.Traversals.$sfromList_$s$wgo1
                                            b1
                                            ipv1
                                            (Data.Set.Internal.Bin
                                               @ Language.PureScript.AST.Traversals.ScopedIdent
                                               1#
                                               wild2
                                               (Data.Set.Internal.Tip
                                                  @ Language.PureScript.AST.Traversals.ScopedIdent)
                                               (Data.Set.Internal.Tip
                                                  @ Language.PureScript.AST.Traversals.ScopedIdent))
                                            1# }
                                  Language.PureScript.AST.Traversals.ToplevelIdent ipv2
                                  -> Language.PureScript.AST.Traversals.$sfromList_$s$wgo3
                                       ipv2
                                       ipv1
                                       (Data.Set.Internal.Bin
                                          @ Language.PureScript.AST.Traversals.ScopedIdent
                                          1#
                                          wild2
                                          (Data.Set.Internal.Tip
                                             @ Language.PureScript.AST.Traversals.ScopedIdent)
                                          (Data.Set.Internal.Tip
                                             @ Language.PureScript.AST.Traversals.ScopedIdent))
                                       1# }
                             Language.PureScript.AST.Traversals.ToplevelIdent a1
                             -> case ipv of wild3 {
                                  Language.PureScript.AST.Traversals.LocalIdent ipv2
                                  -> Language.PureScript.AST.Traversals.$sfromList_$sgo4
                                       wild3
                                       ipv1
                                       (Data.Set.Internal.Bin
                                          @ Language.PureScript.AST.Traversals.ScopedIdent
                                          1#
                                          wild2
                                          (Data.Set.Internal.Tip
                                             @ Language.PureScript.AST.Traversals.ScopedIdent)
                                          (Data.Set.Internal.Tip
                                             @ Language.PureScript.AST.Traversals.ScopedIdent))
                                  Language.PureScript.AST.Traversals.ToplevelIdent b1
                                  -> case Language.PureScript.Names.$fOrdIdent_$c< a1 b1 of wild4 {
                                       GHC.Types.False
                                       -> Language.PureScript.AST.Traversals.$sfromList_$sgo4
                                            wild3
                                            ipv1
                                            (Data.Set.Internal.Bin
                                               @ Language.PureScript.AST.Traversals.ScopedIdent
                                               1#
                                               wild2
                                               (Data.Set.Internal.Tip
                                                  @ Language.PureScript.AST.Traversals.ScopedIdent)
                                               (Data.Set.Internal.Tip
                                                  @ Language.PureScript.AST.Traversals.ScopedIdent))
                                       GHC.Types.True
                                       -> Language.PureScript.AST.Traversals.$sfromList_$s$wgo3
                                            b1
                                            ipv1
                                            (Data.Set.Internal.Bin
                                               @ Language.PureScript.AST.Traversals.ScopedIdent
                                               1#
                                               wild2
                                               (Data.Set.Internal.Tip
                                                  @ Language.PureScript.AST.Traversals.ScopedIdent)
                                               (Data.Set.Internal.Tip
                                                  @ Language.PureScript.AST.Traversals.ScopedIdent))
                                            1# } } } } }) -}
f457a9809f72a17fa45addd2b2832b46
  $sfromList_$s$wgo1 ::
    Language.PureScript.Names.Ident
    -> [Language.PureScript.AST.Traversals.ScopedIdent]
    -> Data.Set.Internal.Set
         Language.PureScript.AST.Traversals.ScopedIdent
    -> GHC.Prim.Int#
    -> Data.Set.Internal.Set
         Language.PureScript.AST.Traversals.ScopedIdent
  {- Arity: 4, Strictness: <L,U><S,1*U><S,1*U><L,U> -}
77fd3cf230e9a1649869c39b4ccdbe36
  $sfromList_$s$wgo3 ::
    Language.PureScript.Names.Ident
    -> [Language.PureScript.AST.Traversals.ScopedIdent]
    -> Data.Set.Internal.Set
         Language.PureScript.AST.Traversals.ScopedIdent
    -> GHC.Prim.Int#
    -> Data.Set.Internal.Set
         Language.PureScript.AST.Traversals.ScopedIdent
  {- Arity: 4, Strictness: <L,U><S,1*U><S,1*U><L,U> -}
eadef7009ab9cac71b4e410ba41f54b9
  $sfromList_$sgo4 ::
    Language.PureScript.AST.Traversals.ScopedIdent
    -> [Language.PureScript.AST.Traversals.ScopedIdent]
    -> Data.Set.Internal.Set
         Language.PureScript.AST.Traversals.ScopedIdent
    -> Data.Set.Internal.Set
         Language.PureScript.AST.Traversals.ScopedIdent
  {- Arity: 3, Strictness: <S,U><S,1*U><S,1*U> -}
3a7f88bed74d5aca1b752b76911081b1
  $sinsertR_$sgo3 ::
    Language.PureScript.AST.Traversals.ScopedIdent
    -> Language.PureScript.AST.Traversals.ScopedIdent
    -> Data.Set.Internal.Set
         Language.PureScript.AST.Traversals.ScopedIdent
    -> Data.Set.Internal.Set
         Language.PureScript.AST.Traversals.ScopedIdent
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U> -}
5c35f1024bff9903b6319b4956ad77fa
  $sinsert_$s$sgo1 ::
    Data.Set.Internal.Set
      Language.PureScript.AST.Traversals.ScopedIdent
    -> Language.PureScript.Names.Ident
    -> Language.PureScript.AST.Traversals.ScopedIdent
    -> Data.Set.Internal.Set
         Language.PureScript.AST.Traversals.ScopedIdent
  {- Arity: 3, Strictness: <S,1*U><L,U><L,U> -}
55a9272e2c51fe46fe55680e98c34223
  $sinsert_$s$sgo2 ::
    Data.Set.Internal.Set
      Language.PureScript.AST.Traversals.ScopedIdent
    -> Language.PureScript.Names.Ident
    -> Language.PureScript.AST.Traversals.ScopedIdent
    -> Data.Set.Internal.Set
         Language.PureScript.AST.Traversals.ScopedIdent
  {- Arity: 3, Strictness: <S,1*U><L,U><L,U> -}
e92ced007d1ead15a0d1f8a12e4f1499
  $sinsert_$s$sgo3 ::
    GHC.Prim.Int#
    -> Language.PureScript.AST.Traversals.ScopedIdent
    -> Data.Set.Internal.Set
         Language.PureScript.AST.Traversals.ScopedIdent
    -> Data.Set.Internal.Set
         Language.PureScript.AST.Traversals.ScopedIdent
    -> Language.PureScript.AST.Traversals.ScopedIdent
    -> Language.PureScript.AST.Traversals.ScopedIdent
    -> Data.Set.Internal.Set
         Language.PureScript.AST.Traversals.ScopedIdent
  {- Arity: 6, Strictness: <L,U><S,U><L,U><L,U><S,1*U><L,U> -}
7ae4b8a84ea7512e85913eb89d0fc2cb
  $sinsert_$sgo3 ::
    Language.PureScript.AST.Traversals.ScopedIdent
    -> Language.PureScript.AST.Traversals.ScopedIdent
    -> Data.Set.Internal.Set
         Language.PureScript.AST.Traversals.ScopedIdent
    -> Data.Set.Internal.Set
         Language.PureScript.AST.Traversals.ScopedIdent
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U> -}
f4936cde33349466a597bd6d68542063
  $smember_$sgo1 ::
    Data.Set.Internal.Set
      Language.PureScript.AST.Traversals.ScopedIdent
    -> Language.PureScript.Names.Ident -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U> -}
255348738d2bb6f44e353b20288f54b9
  $smember_$sgo3 ::
    Data.Set.Internal.Set
      Language.PureScript.AST.Traversals.ScopedIdent
    -> Language.PureScript.Names.Ident -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U> -}
9994b56410ffc02641a06d160bb5e661
  $sunion ::
    Data.Set.Internal.Set
      Language.PureScript.AST.Traversals.ScopedIdent
    -> Data.Set.Internal.Set
         Language.PureScript.AST.Traversals.ScopedIdent
    -> Data.Set.Internal.Set
         Language.PureScript.AST.Traversals.ScopedIdent
  {- Arity: 2, Strictness: <S,1*U><S,1*U>, Inline: [~] -}
cf343fbaa57f824bded950937419a828
  $tc'LocalIdent :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1089513976252614936##
                   11284945250555403417##
                   Language.PureScript.AST.Traversals.$trModule
                   Language.PureScript.AST.Traversals.$tc'LocalIdent2
                   0#
                   Language.PureScript.AST.Traversals.$tc'LocalIdent1) -}
7bf8d4bc11770afde74db1d1342ea73f
  $tc'LocalIdent1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
7ac74ed812eec1d10968bce42d76a221
  $tc'LocalIdent2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Traversals.$tc'LocalIdent3) -}
8f565ab66808a9c88ce96ebdc0b42092
  $tc'LocalIdent3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'LocalIdent"#) -}
1357c283b6a254accc02bb6e04cf8b0b
  $tc'ToplevelIdent :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10060660324586292972##
                   1438329454535084444##
                   Language.PureScript.AST.Traversals.$trModule
                   Language.PureScript.AST.Traversals.$tc'ToplevelIdent1
                   0#
                   Language.PureScript.AST.Traversals.$tc'LocalIdent1) -}
b6d6b891d01249159fb1b0c7bc3e2d71
  $tc'ToplevelIdent1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Traversals.$tc'ToplevelIdent2) -}
7101ff381e103efb6d205be16f9c227b
  $tc'ToplevelIdent2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ToplevelIdent"#) -}
01b35c56de73b406ccf91d52ac5c890f
  $tcScopedIdent :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   722705261964764726##
                   12124064082942490346##
                   Language.PureScript.AST.Traversals.$trModule
                   Language.PureScript.AST.Traversals.$tcScopedIdent1
                   0#
                   GHC.Types.krep$*) -}
b997f553f6b26256c0c76d4d7dd5fedb
  $tcScopedIdent1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Traversals.$tcScopedIdent2) -}
9870d7b7d63a9dba1f2a3925c319dcbf
  $tcScopedIdent2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ScopedIdent"#) -}
e3e9e5ed0f19127c7a3b6b416dbf034b
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Language.PureScript.AST.Traversals.$trModule3
                   Language.PureScript.AST.Traversals.$trModule1) -}
84dc93d4c7baafd81e21850054317bf1
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Traversals.$trModule2) -}
b1bcef365bdff3cdc62cc7e35441be73
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Language.PureScript.AST.Traversals"#) -}
576b31c8f4a7d7e2a5c07f549e81ec50
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Traversals.$trModule4) -}
d8b13ce37a3c54288b48bc80e84b5881
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"#) -}
a9386d37e7ebee7cdf58474c3889e380
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> Language.PureScript.AST.Traversals.ScopedIdent -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: Language.PureScript.AST.Traversals.ScopedIdent) ->
                 case w of wild {
                   Language.PureScript.AST.Traversals.LocalIdent b1
                   -> let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = Language.PureScript.Names.$fShowIdent_$cshowsPrec
                            Language.PureScript.AST.Traversals.$fShowScopedIdent6
                            b1
                      } in
                      case GHC.Prim.>=# ww 11# of lwild {
                        DEFAULT
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             Language.PureScript.AST.Traversals.$fShowScopedIdent4
                             (g x)
                        1#
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Language.PureScript.AST.Traversals.$fShowScopedIdent4
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))) }
                   Language.PureScript.AST.Traversals.ToplevelIdent b1
                   -> let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = Language.PureScript.Names.$fShowIdent_$cshowsPrec
                            Language.PureScript.AST.Traversals.$fShowScopedIdent6
                            b1
                      } in
                      case GHC.Prim.>=# ww 11# of lwild {
                        DEFAULT
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             Language.PureScript.AST.Traversals.$fShowScopedIdent2
                             (g x)
                        1#
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Language.PureScript.AST.Traversals.$fShowScopedIdent2
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))) } }) -}
06ad8155f8fa03e096c4c72ece1c31f5
  $waccumKinds ::
    GHC.Base.Monoid r =>
    (Language.PureScript.Kinds.SourceKind -> r)
    -> (# Language.PureScript.AST.Declarations.Declaration -> r,
          Language.PureScript.AST.Declarations.Expr -> r,
          Language.PureScript.AST.Binders.Binder -> r,
          Language.PureScript.AST.Declarations.CaseAlternative -> r,
          Language.PureScript.AST.Declarations.DoNotationElement -> r #)
  {- Arity: 2,
     Strictness: <L,U(1*U(C(C1(U)),A,A),1*U,C(C1(U)),A)><L,C(U)>,
     Inline: [0] -}
eaa40a6605a2bd1d475e2174d63e416e
  $waccumTypes ::
    GHC.Base.Monoid r =>
    (Language.PureScript.Types.SourceType -> r)
    -> (# Language.PureScript.AST.Declarations.Declaration -> r,
          Language.PureScript.AST.Declarations.Expr -> r,
          Language.PureScript.AST.Binders.Binder -> r,
          Language.PureScript.AST.Declarations.CaseAlternative -> r,
          Language.PureScript.AST.Declarations.DoNotationElement -> r #)
  {- Arity: 2,
     Strictness: <L,U(1*U(C(C1(U)),A,A),1*U,1*C(C1(U)),C(U))><L,C(U)>,
     Inline: [0] -}
1755d2aad5f9e9c8d4820400b211a72f
  $weverythingOnValues ::
    (r -> r -> r)
    -> (Language.PureScript.AST.Declarations.Declaration -> r)
    -> (Language.PureScript.AST.Declarations.Expr -> r)
    -> (Language.PureScript.AST.Binders.Binder -> r)
    -> (Language.PureScript.AST.Declarations.CaseAlternative -> r)
    -> (Language.PureScript.AST.Declarations.DoNotationElement -> r)
    -> (# Language.PureScript.AST.Declarations.Declaration -> r,
          Language.PureScript.AST.Declarations.Expr -> r,
          Language.PureScript.AST.Binders.Binder -> r,
          Language.PureScript.AST.Declarations.CaseAlternative -> r,
          Language.PureScript.AST.Declarations.DoNotationElement -> r #)
  {- Arity: 6,
     Strictness: <L,C(C1(U))><L,C(U)><L,C(U)><L,C(U)><L,C(U)><L,C(U)>,
     Inline: [0] -}
92efbaa58d90873561bf1664c05189ad
  $weverythingWithContextOnValues ::
    s
    -> r
    -> (r -> r -> r)
    -> (s
        -> Language.PureScript.AST.Declarations.Declaration -> (s, r))
    -> (s -> Language.PureScript.AST.Declarations.Expr -> (s, r))
    -> (s -> Language.PureScript.AST.Binders.Binder -> (s, r))
    -> (s
        -> Language.PureScript.AST.Declarations.CaseAlternative -> (s, r))
    -> (s
        -> Language.PureScript.AST.Declarations.DoNotationElement
        -> (s, r))
    -> (# Language.PureScript.AST.Declarations.Declaration -> r,
          Language.PureScript.AST.Declarations.Expr -> r,
          Language.PureScript.AST.Binders.Binder -> r,
          Language.PureScript.AST.Declarations.CaseAlternative -> r,
          Language.PureScript.AST.Declarations.DoNotationElement -> r #)
  {- Arity: 8,
     Strictness: <L,U><L,U><L,C(C1(U))><L,C(C1(U(1*U,1*U)))><L,C(C1(U(1*U,1*U)))><L,C(C1(U(1*U,1*U)))><L,C(C1(U(1*U,1*U)))><L,C(C1(U(1*U,1*U)))>,
     Inline: [0] -}
b8b38d5a68ddd224799a69503b85ca89
  $weverythingWithScope ::
    GHC.Base.Monoid r =>
    (Data.Set.Internal.Set
       Language.PureScript.AST.Traversals.ScopedIdent
     -> Language.PureScript.AST.Declarations.Declaration -> r)
    -> (Data.Set.Internal.Set
          Language.PureScript.AST.Traversals.ScopedIdent
        -> Language.PureScript.AST.Declarations.Expr -> r)
    -> (Data.Set.Internal.Set
          Language.PureScript.AST.Traversals.ScopedIdent
        -> Language.PureScript.AST.Binders.Binder -> r)
    -> (Data.Set.Internal.Set
          Language.PureScript.AST.Traversals.ScopedIdent
        -> Language.PureScript.AST.Declarations.CaseAlternative -> r)
    -> (Data.Set.Internal.Set
          Language.PureScript.AST.Traversals.ScopedIdent
        -> Language.PureScript.AST.Declarations.DoNotationElement -> r)
    -> (# Data.Set.Internal.Set
            Language.PureScript.AST.Traversals.ScopedIdent
          -> Language.PureScript.AST.Declarations.Declaration -> r,
          Data.Set.Internal.Set
            Language.PureScript.AST.Traversals.ScopedIdent
          -> Language.PureScript.AST.Declarations.Expr -> r,
          Data.Set.Internal.Set
            Language.PureScript.AST.Traversals.ScopedIdent
          -> Language.PureScript.AST.Binders.Binder -> r,
          Data.Set.Internal.Set
            Language.PureScript.AST.Traversals.ScopedIdent
          -> Language.PureScript.AST.Declarations.CaseAlternative -> r,
          Data.Set.Internal.Set
            Language.PureScript.AST.Traversals.ScopedIdent
          -> Language.PureScript.AST.Declarations.DoNotationElement -> r #)
  {- Arity: 6,
     Strictness: <L,U(1*U(C(C1(U)),A,A),U,C(C1(U)),A)><L,C(C1(U))><L,C(C1(U))><L,C(C1(U))><L,C(C1(U))><L,C(C1(U))>,
     Inline: [0] -}
9ffb00f98999d78b04396573e0fa554f
  $weverywhereOnValues ::
    (Language.PureScript.AST.Declarations.Declaration
     -> Language.PureScript.AST.Declarations.Declaration)
    -> (Language.PureScript.AST.Declarations.Expr
        -> Language.PureScript.AST.Declarations.Expr)
    -> (Language.PureScript.AST.Binders.Binder
        -> Language.PureScript.AST.Binders.Binder)
    -> (# Language.PureScript.AST.Declarations.Declaration
          -> Language.PureScript.AST.Declarations.Declaration,
          Language.PureScript.AST.Declarations.Expr
          -> Language.PureScript.AST.Declarations.Expr,
          Language.PureScript.AST.Binders.Binder
          -> Language.PureScript.AST.Binders.Binder #)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,C(U)><L,C(U)><L,C(U)>,
     Inline: [0] -}
e51e86b681aab7186ae61c4267243bed
  $weverywhereOnValuesM ::
    GHC.Base.Monad m =>
    (Language.PureScript.AST.Declarations.Declaration
     -> m Language.PureScript.AST.Declarations.Declaration)
    -> (Language.PureScript.AST.Declarations.Expr
        -> m Language.PureScript.AST.Declarations.Expr)
    -> (Language.PureScript.AST.Binders.Binder
        -> m Language.PureScript.AST.Binders.Binder)
    -> (# Language.PureScript.AST.Declarations.Declaration
          -> m Language.PureScript.AST.Declarations.Declaration,
          Language.PureScript.AST.Declarations.Expr
          -> m Language.PureScript.AST.Declarations.Expr,
          Language.PureScript.AST.Binders.Binder
          -> m Language.PureScript.AST.Binders.Binder #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(U(U(C(C1(U)),A),C(U),C(C1(U)),C(C1(C1(U))),A,A),C(C1(U)),A,A,A)><L,U><L,U><L,U>,
     Inline: [0] -}
f6ac150fc82100fbdcb0288537756e1b
  $weverywhereOnValuesTopDownM ::
    GHC.Base.Monad m =>
    (Language.PureScript.AST.Declarations.Declaration
     -> m Language.PureScript.AST.Declarations.Declaration)
    -> (Language.PureScript.AST.Declarations.Expr
        -> m Language.PureScript.AST.Declarations.Expr)
    -> (Language.PureScript.AST.Binders.Binder
        -> m Language.PureScript.AST.Binders.Binder)
    -> (# Language.PureScript.AST.Declarations.Declaration
          -> m Language.PureScript.AST.Declarations.Declaration,
          Language.PureScript.AST.Declarations.Expr
          -> m Language.PureScript.AST.Declarations.Expr,
          Language.PureScript.AST.Binders.Binder
          -> m Language.PureScript.AST.Binders.Binder #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(U(U(C(C1(U)),A),C(U),C(C1(U)),C(C1(C1(U))),A,A),C(C1(U)),A,A,A)><L,C(U)><L,C(U)><L,C(U)>,
     Inline: [0] -}
7568f02fec936c0732ba1a733a08a525
  $weverywhereWithContextOnValuesM ::
    GHC.Base.Monad m =>
    s
    -> (s
        -> Language.PureScript.AST.Declarations.Declaration
        -> m (s, Language.PureScript.AST.Declarations.Declaration))
    -> (s
        -> Language.PureScript.AST.Declarations.Expr
        -> m (s, Language.PureScript.AST.Declarations.Expr))
    -> (s
        -> Language.PureScript.AST.Binders.Binder
        -> m (s, Language.PureScript.AST.Binders.Binder))
    -> (s
        -> Language.PureScript.AST.Declarations.CaseAlternative
        -> m (s, Language.PureScript.AST.Declarations.CaseAlternative))
    -> (s
        -> Language.PureScript.AST.Declarations.DoNotationElement
        -> m (s, Language.PureScript.AST.Declarations.DoNotationElement))
    -> (# Language.PureScript.AST.Declarations.Declaration
          -> m Language.PureScript.AST.Declarations.Declaration,
          Language.PureScript.AST.Declarations.Expr
          -> m Language.PureScript.AST.Declarations.Expr,
          Language.PureScript.AST.Binders.Binder
          -> m Language.PureScript.AST.Binders.Binder,
          Language.PureScript.AST.Declarations.CaseAlternative
          -> m Language.PureScript.AST.Declarations.CaseAlternative,
          Language.PureScript.AST.Declarations.DoNotationElement
          -> m Language.PureScript.AST.Declarations.DoNotationElement #)
  {- Arity: 7, HasNoCafRefs,
     Strictness: <L,U(1*U(U(C(C1(U)),A),C(U),C(C1(U)),C(C1(C1(U))),A,A),C(C1(U)),A,C(U),A)><L,U><L,C(C(U))><L,C(C(U))><L,C(C(U))><L,C(C(U))><L,C(C(U))>,
     Inline: [0] -}
611a28c9a8339786f63d6db5cf22ad94
  $wguardedExprM ::
    GHC.Base.Applicative m =>
    (Language.PureScript.AST.Declarations.Guard
     -> m Language.PureScript.AST.Declarations.Guard)
    -> (Language.PureScript.AST.Declarations.Expr
        -> m Language.PureScript.AST.Declarations.Expr)
    -> [Language.PureScript.AST.Declarations.Guard]
    -> Language.PureScript.AST.Declarations.Expr
    -> m Language.PureScript.AST.Declarations.GuardedExpr
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LLC(C(S))LLL),U(1*U(1*C1(C1(U)),A),1*C1(U),1*C1(C1(U)),C(C1(C1(U))),A,A)><L,C(U)><L,1*C1(U)><L,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ @ m :: * -> *
                   (w :: GHC.Base.Applicative m)
                   (w1 :: Language.PureScript.AST.Declarations.Guard
                          -> m Language.PureScript.AST.Declarations.Guard)
                   (w2 :: Language.PureScript.AST.Declarations.Expr
                          -> m Language.PureScript.AST.Declarations.Expr)
                   (ww :: [Language.PureScript.AST.Declarations.Guard])
                   (ww1 :: Language.PureScript.AST.Declarations.Expr) ->
                 GHC.Base.<*>
                   @ m
                   w
                   @ Language.PureScript.AST.Declarations.Expr
                   @ Language.PureScript.AST.Declarations.GuardedExpr
                   (GHC.Base.fmap
                      @ m
                      (GHC.Base.$p1Applicative @ m w)
                      @ [Language.PureScript.AST.Declarations.Guard]
                      @ (Language.PureScript.AST.Declarations.Expr
                         -> Language.PureScript.AST.Declarations.GuardedExpr)
                      Language.PureScript.AST.Declarations.GuardedExpr
                      (let {
                         z :: m [Language.PureScript.AST.Declarations.Guard]
                         = GHC.Base.pure
                             @ m
                             w
                             @ [Language.PureScript.AST.Declarations.Guard]
                             (GHC.Types.[] @ Language.PureScript.AST.Declarations.Guard)
                       } in
                       letrec {
                         go5 :: [Language.PureScript.AST.Declarations.Guard]
                                -> m [Language.PureScript.AST.Declarations.Guard]
                           {- Arity: 1, Strictness: <S,1*U> -}
                         = \ (ds :: [Language.PureScript.AST.Declarations.Guard]) ->
                           case ds of wild {
                             [] -> z
                             : y ys
                             -> GHC.Base.liftA2
                                  @ m
                                  w
                                  @ Language.PureScript.AST.Declarations.Guard
                                  @ [Language.PureScript.AST.Declarations.Guard]
                                  @ [Language.PureScript.AST.Declarations.Guard]
                                  (GHC.Types.: @ Language.PureScript.AST.Declarations.Guard)
                                  (w1 y)
                                  (go5 ys) }
                       } in
                       go5 ww))
                   (w2 ww1)) -}
a9386d37e7ebee7cdf58474c3889e380
  data ScopedIdent
    = LocalIdent Language.PureScript.Names.Ident
    | ToplevelIdent Language.PureScript.Names.Ident
2c08759b6d6e363e3d39db46e55510eb
  accumKinds ::
    GHC.Base.Monoid r =>
    (Language.PureScript.Kinds.SourceKind -> r)
    -> (Language.PureScript.AST.Declarations.Declaration -> r,
        Language.PureScript.AST.Declarations.Expr -> r,
        Language.PureScript.AST.Binders.Binder -> r,
        Language.PureScript.AST.Declarations.CaseAlternative -> r,
        Language.PureScript.AST.Declarations.DoNotationElement -> r)
  {- Arity: 2,
     Strictness: <L,U(U(C(C1(U)),A,A),U,C(C1(U)),A)><L,C(U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: GHC.Base.Monoid r)
                   (w1 :: Language.PureScript.Kinds.SourceKind -> r) ->
                 case Language.PureScript.AST.Traversals.$waccumKinds
                        @ r
                        w
                        w1 of ww { (#,,,,#) ww1 ww2 ww3 ww4 ww5 ->
                 (ww1, ww2, ww3, ww4, ww5) }) -}
e488d62caf91c6b0af9b2261ad19da8d
  accumTypes ::
    GHC.Base.Monoid r =>
    (Language.PureScript.Types.SourceType -> r)
    -> (Language.PureScript.AST.Declarations.Declaration -> r,
        Language.PureScript.AST.Declarations.Expr -> r,
        Language.PureScript.AST.Binders.Binder -> r,
        Language.PureScript.AST.Declarations.CaseAlternative -> r,
        Language.PureScript.AST.Declarations.DoNotationElement -> r)
  {- Arity: 2,
     Strictness: <L,U(U(C(C1(U)),A,A),U,C(C1(U)),C(U))><L,C(U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ r
                   (w :: GHC.Base.Monoid r)
                   (w1 :: Language.PureScript.Types.SourceType -> r) ->
                 case Language.PureScript.AST.Traversals.$waccumTypes
                        @ r
                        w
                        w1 of ww { (#,,,,#) ww1 ww2 ww3 ww4 ww5 ->
                 (ww1, ww2, ww3, ww4, ww5) }) -}
d1f804aed21f7e21280e0cf1f8ea4257
  everythingOnValues ::
    (r -> r -> r)
    -> (Language.PureScript.AST.Declarations.Declaration -> r)
    -> (Language.PureScript.AST.Declarations.Expr -> r)
    -> (Language.PureScript.AST.Binders.Binder -> r)
    -> (Language.PureScript.AST.Declarations.CaseAlternative -> r)
    -> (Language.PureScript.AST.Declarations.DoNotationElement -> r)
    -> (Language.PureScript.AST.Declarations.Declaration -> r,
        Language.PureScript.AST.Declarations.Expr -> r,
        Language.PureScript.AST.Binders.Binder -> r,
        Language.PureScript.AST.Declarations.CaseAlternative -> r,
        Language.PureScript.AST.Declarations.DoNotationElement -> r)
  {- Arity: 6,
     Strictness: <L,C(C1(U))><L,C(U)><L,C(U)><L,C(U)><L,C(U)><L,C(U)>m,
     Inline: [0],
     Unfolding: InlineRule (6, True, False)
                (\ @ r
                   (w :: r -> r -> r)
                   (w1 :: Language.PureScript.AST.Declarations.Declaration -> r)
                   (w2 :: Language.PureScript.AST.Declarations.Expr -> r)
                   (w3 :: Language.PureScript.AST.Binders.Binder -> r)
                   (w4 :: Language.PureScript.AST.Declarations.CaseAlternative -> r)
                   (w5 :: Language.PureScript.AST.Declarations.DoNotationElement
                          -> r) ->
                 case Language.PureScript.AST.Traversals.$weverythingOnValues
                        @ r
                        w
                        w1
                        w2
                        w3
                        w4
                        w5 of ww { (#,,,,#) ww1 ww2 ww3 ww4 ww5 ->
                 (ww1, ww2, ww3, ww4, ww5) }) -}
b6cfbe573edb2754803b960a4d02edab
  everythingWithContextOnValues ::
    s
    -> r
    -> (r -> r -> r)
    -> (s
        -> Language.PureScript.AST.Declarations.Declaration -> (s, r))
    -> (s -> Language.PureScript.AST.Declarations.Expr -> (s, r))
    -> (s -> Language.PureScript.AST.Binders.Binder -> (s, r))
    -> (s
        -> Language.PureScript.AST.Declarations.CaseAlternative -> (s, r))
    -> (s
        -> Language.PureScript.AST.Declarations.DoNotationElement
        -> (s, r))
    -> (Language.PureScript.AST.Declarations.Declaration -> r,
        Language.PureScript.AST.Declarations.Expr -> r,
        Language.PureScript.AST.Binders.Binder -> r,
        Language.PureScript.AST.Declarations.CaseAlternative -> r,
        Language.PureScript.AST.Declarations.DoNotationElement -> r)
  {- Arity: 8,
     Strictness: <L,U><L,U><L,C(C1(U))><L,C(C1(U(1*U,1*U)))><L,C(C1(U(1*U,1*U)))><L,C(C1(U(1*U,1*U)))><L,C(C1(U(1*U,1*U)))><L,C(C1(U(1*U,1*U)))>m,
     Inline: [0],
     Unfolding: InlineRule (8, True, False)
                (\ @ s
                   @ r
                   (w :: s)
                   (w1 :: r)
                   (w2 :: r -> r -> r)
                   (w3 :: s
                          -> Language.PureScript.AST.Declarations.Declaration -> (s, r))
                   (w4 :: s -> Language.PureScript.AST.Declarations.Expr -> (s, r))
                   (w5 :: s -> Language.PureScript.AST.Binders.Binder -> (s, r))
                   (w6 :: s
                          -> Language.PureScript.AST.Declarations.CaseAlternative -> (s, r))
                   (w7 :: s
                          -> Language.PureScript.AST.Declarations.DoNotationElement
                          -> (s, r)) ->
                 case Language.PureScript.AST.Traversals.$weverythingWithContextOnValues
                        @ s
                        @ r
                        w
                        w1
                        w2
                        w3
                        w4
                        w5
                        w6
                        w7 of ww { (#,,,,#) ww1 ww2 ww3 ww4 ww5 ->
                 (ww1, ww2, ww3, ww4, ww5) }) -}
569a5e5bf677f3eba029adc5853b1579
  everythingWithScope ::
    GHC.Base.Monoid r =>
    (Data.Set.Internal.Set
       Language.PureScript.AST.Traversals.ScopedIdent
     -> Language.PureScript.AST.Declarations.Declaration -> r)
    -> (Data.Set.Internal.Set
          Language.PureScript.AST.Traversals.ScopedIdent
        -> Language.PureScript.AST.Declarations.Expr -> r)
    -> (Data.Set.Internal.Set
          Language.PureScript.AST.Traversals.ScopedIdent
        -> Language.PureScript.AST.Binders.Binder -> r)
    -> (Data.Set.Internal.Set
          Language.PureScript.AST.Traversals.ScopedIdent
        -> Language.PureScript.AST.Declarations.CaseAlternative -> r)
    -> (Data.Set.Internal.Set
          Language.PureScript.AST.Traversals.ScopedIdent
        -> Language.PureScript.AST.Declarations.DoNotationElement -> r)
    -> (Data.Set.Internal.Set
          Language.PureScript.AST.Traversals.ScopedIdent
        -> Language.PureScript.AST.Declarations.Declaration -> r,
        Data.Set.Internal.Set
          Language.PureScript.AST.Traversals.ScopedIdent
        -> Language.PureScript.AST.Declarations.Expr -> r,
        Data.Set.Internal.Set
          Language.PureScript.AST.Traversals.ScopedIdent
        -> Language.PureScript.AST.Binders.Binder -> r,
        Data.Set.Internal.Set
          Language.PureScript.AST.Traversals.ScopedIdent
        -> Language.PureScript.AST.Declarations.CaseAlternative -> r,
        Data.Set.Internal.Set
          Language.PureScript.AST.Traversals.ScopedIdent
        -> Language.PureScript.AST.Declarations.DoNotationElement -> r)
  {- Arity: 6,
     Strictness: <L,U(U(C(C1(U)),A,A),U,C(C1(U)),A)><L,C(C1(U))><L,C(C1(U))><L,C(C1(U))><L,C(C1(U))><L,C(C1(U))>m,
     Inline: [0],
     Unfolding: InlineRule (6, True, False)
                (\ @ r
                   (w :: GHC.Base.Monoid r)
                   (w1 :: Data.Set.Internal.Set
                            Language.PureScript.AST.Traversals.ScopedIdent
                          -> Language.PureScript.AST.Declarations.Declaration -> r)
                   (w2 :: Data.Set.Internal.Set
                            Language.PureScript.AST.Traversals.ScopedIdent
                          -> Language.PureScript.AST.Declarations.Expr -> r)
                   (w3 :: Data.Set.Internal.Set
                            Language.PureScript.AST.Traversals.ScopedIdent
                          -> Language.PureScript.AST.Binders.Binder -> r)
                   (w4 :: Data.Set.Internal.Set
                            Language.PureScript.AST.Traversals.ScopedIdent
                          -> Language.PureScript.AST.Declarations.CaseAlternative -> r)
                   (w5 :: Data.Set.Internal.Set
                            Language.PureScript.AST.Traversals.ScopedIdent
                          -> Language.PureScript.AST.Declarations.DoNotationElement -> r) ->
                 case Language.PureScript.AST.Traversals.$weverythingWithScope
                        @ r
                        w
                        w1
                        w2
                        w3
                        w4
                        w5 of ww { (#,,,,#) ww1 ww2 ww3 ww4 ww5 ->
                 (ww1, ww2, ww3, ww4, ww5) }) -}
f4659f155225bd0f038ec5ce751367f9
  everywhereOnValues ::
    (Language.PureScript.AST.Declarations.Declaration
     -> Language.PureScript.AST.Declarations.Declaration)
    -> (Language.PureScript.AST.Declarations.Expr
        -> Language.PureScript.AST.Declarations.Expr)
    -> (Language.PureScript.AST.Binders.Binder
        -> Language.PureScript.AST.Binders.Binder)
    -> (Language.PureScript.AST.Declarations.Declaration
        -> Language.PureScript.AST.Declarations.Declaration,
        Language.PureScript.AST.Declarations.Expr
        -> Language.PureScript.AST.Declarations.Expr,
        Language.PureScript.AST.Binders.Binder
        -> Language.PureScript.AST.Binders.Binder)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,C(U)><L,C(U)><L,C(U)>m,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Language.PureScript.AST.Declarations.Declaration
                         -> Language.PureScript.AST.Declarations.Declaration)
                   (w1 :: Language.PureScript.AST.Declarations.Expr
                          -> Language.PureScript.AST.Declarations.Expr)
                   (w2 :: Language.PureScript.AST.Binders.Binder
                          -> Language.PureScript.AST.Binders.Binder) ->
                 case Language.PureScript.AST.Traversals.$weverywhereOnValues
                        w
                        w1
                        w2 of ww { (#,,#) ww1 ww2 ww3 ->
                 (ww1, ww2, ww3) }) -}
1c0cb3e06c4593fe6cb03329a6249e6d
  everywhereOnValuesM ::
    GHC.Base.Monad m =>
    (Language.PureScript.AST.Declarations.Declaration
     -> m Language.PureScript.AST.Declarations.Declaration)
    -> (Language.PureScript.AST.Declarations.Expr
        -> m Language.PureScript.AST.Declarations.Expr)
    -> (Language.PureScript.AST.Binders.Binder
        -> m Language.PureScript.AST.Binders.Binder)
    -> (Language.PureScript.AST.Declarations.Declaration
        -> m Language.PureScript.AST.Declarations.Declaration,
        Language.PureScript.AST.Declarations.Expr
        -> m Language.PureScript.AST.Declarations.Expr,
        Language.PureScript.AST.Binders.Binder
        -> m Language.PureScript.AST.Binders.Binder)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(U(U(C(C1(U)),A),C(U),C(C1(U)),C(C1(C1(U))),A,A),C(C1(U)),A,A,A)><L,U><L,U><L,U>m,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ @ m :: * -> *
                   (w :: GHC.Base.Monad m)
                   (w1 :: Language.PureScript.AST.Declarations.Declaration
                          -> m Language.PureScript.AST.Declarations.Declaration)
                   (w2 :: Language.PureScript.AST.Declarations.Expr
                          -> m Language.PureScript.AST.Declarations.Expr)
                   (w3 :: Language.PureScript.AST.Binders.Binder
                          -> m Language.PureScript.AST.Binders.Binder) ->
                 case Language.PureScript.AST.Traversals.$weverywhereOnValuesM
                        @ m
                        w
                        w1
                        w2
                        w3 of ww { (#,,#) ww1 ww2 ww3 ->
                 (ww1, ww2, ww3) }) -}
75fdf2701c3b1d9ebfea98053cfea0c4
  everywhereOnValuesTopDownM ::
    GHC.Base.Monad m =>
    (Language.PureScript.AST.Declarations.Declaration
     -> m Language.PureScript.AST.Declarations.Declaration)
    -> (Language.PureScript.AST.Declarations.Expr
        -> m Language.PureScript.AST.Declarations.Expr)
    -> (Language.PureScript.AST.Binders.Binder
        -> m Language.PureScript.AST.Binders.Binder)
    -> (Language.PureScript.AST.Declarations.Declaration
        -> m Language.PureScript.AST.Declarations.Declaration,
        Language.PureScript.AST.Declarations.Expr
        -> m Language.PureScript.AST.Declarations.Expr,
        Language.PureScript.AST.Binders.Binder
        -> m Language.PureScript.AST.Binders.Binder)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(U(U(C(C1(U)),A),C(U),C(C1(U)),C(C1(C1(U))),A,A),C(C1(U)),A,A,A)><L,C(U)><L,C(U)><L,C(U)>m,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ @ m :: * -> *
                   (w :: GHC.Base.Monad m)
                   (w1 :: Language.PureScript.AST.Declarations.Declaration
                          -> m Language.PureScript.AST.Declarations.Declaration)
                   (w2 :: Language.PureScript.AST.Declarations.Expr
                          -> m Language.PureScript.AST.Declarations.Expr)
                   (w3 :: Language.PureScript.AST.Binders.Binder
                          -> m Language.PureScript.AST.Binders.Binder) ->
                 case Language.PureScript.AST.Traversals.$weverywhereOnValuesTopDownM
                        @ m
                        w
                        w1
                        w2
                        w3 of ww { (#,,#) ww1 ww2 ww3 ->
                 (ww1, ww2, ww3) }) -}
8b088f6a1ad3879e25631321bc5daeec
  everywhereWithContextOnValuesM ::
    GHC.Base.Monad m =>
    s
    -> (s
        -> Language.PureScript.AST.Declarations.Declaration
        -> m (s, Language.PureScript.AST.Declarations.Declaration))
    -> (s
        -> Language.PureScript.AST.Declarations.Expr
        -> m (s, Language.PureScript.AST.Declarations.Expr))
    -> (s
        -> Language.PureScript.AST.Binders.Binder
        -> m (s, Language.PureScript.AST.Binders.Binder))
    -> (s
        -> Language.PureScript.AST.Declarations.CaseAlternative
        -> m (s, Language.PureScript.AST.Declarations.CaseAlternative))
    -> (s
        -> Language.PureScript.AST.Declarations.DoNotationElement
        -> m (s, Language.PureScript.AST.Declarations.DoNotationElement))
    -> (Language.PureScript.AST.Declarations.Declaration
        -> m Language.PureScript.AST.Declarations.Declaration,
        Language.PureScript.AST.Declarations.Expr
        -> m Language.PureScript.AST.Declarations.Expr,
        Language.PureScript.AST.Binders.Binder
        -> m Language.PureScript.AST.Binders.Binder,
        Language.PureScript.AST.Declarations.CaseAlternative
        -> m Language.PureScript.AST.Declarations.CaseAlternative,
        Language.PureScript.AST.Declarations.DoNotationElement
        -> m Language.PureScript.AST.Declarations.DoNotationElement)
  {- Arity: 7, HasNoCafRefs,
     Strictness: <L,U(U(U(C(C1(U)),A),C(U),C(C1(U)),C(C1(C1(U))),A,A),C(C1(U)),A,C(U),A)><L,U><L,C(C(U))><L,C(C(U))><L,C(C(U))><L,C(C(U))><L,C(C(U))>m,
     Inline: [0],
     Unfolding: InlineRule (7, True, False)
                (\ @ m :: * -> *
                   @ s
                   (w :: GHC.Base.Monad m)
                   (w1 :: s)
                   (w2 :: s
                          -> Language.PureScript.AST.Declarations.Declaration
                          -> m (s, Language.PureScript.AST.Declarations.Declaration))
                   (w3 :: s
                          -> Language.PureScript.AST.Declarations.Expr
                          -> m (s, Language.PureScript.AST.Declarations.Expr))
                   (w4 :: s
                          -> Language.PureScript.AST.Binders.Binder
                          -> m (s, Language.PureScript.AST.Binders.Binder))
                   (w5 :: s
                          -> Language.PureScript.AST.Declarations.CaseAlternative
                          -> m (s, Language.PureScript.AST.Declarations.CaseAlternative))
                   (w6 :: s
                          -> Language.PureScript.AST.Declarations.DoNotationElement
                          -> m (s,
                                Language.PureScript.AST.Declarations.DoNotationElement)) ->
                 case Language.PureScript.AST.Traversals.$weverywhereWithContextOnValuesM
                        @ m
                        @ s
                        w
                        w1
                        w2
                        w3
                        w4
                        w5
                        w6 of ww { (#,,,,#) ww1 ww2 ww3 ww4 ww5 ->
                 (ww1, ww2, ww3, ww4, ww5) }) -}
5b1f6760ac0efff4fc97873db2fa9a2e
  guardedExprM ::
    GHC.Base.Applicative m =>
    (Language.PureScript.AST.Declarations.Guard
     -> m Language.PureScript.AST.Declarations.Guard)
    -> (Language.PureScript.AST.Declarations.Expr
        -> m Language.PureScript.AST.Declarations.Expr)
    -> Language.PureScript.AST.Declarations.GuardedExpr
    -> m Language.PureScript.AST.Declarations.GuardedExpr
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LLC(C(S))LLL),U(U(C(C1(U)),A),C(U),C(C1(U)),C(C1(C1(U))),A,A)><L,C(U)><L,1*C1(U)><S,1*U(1*U,U)>,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ @ m :: * -> *
                   (w :: GHC.Base.Applicative m)
                   (w1 :: Language.PureScript.AST.Declarations.Guard
                          -> m Language.PureScript.AST.Declarations.Guard)
                   (w2 :: Language.PureScript.AST.Declarations.Expr
                          -> m Language.PureScript.AST.Declarations.Expr)
                   (w3 :: Language.PureScript.AST.Declarations.GuardedExpr) ->
                 case w3 of ww { Language.PureScript.AST.Declarations.GuardedExpr ww1 ww2 ->
                 Language.PureScript.AST.Traversals.$wguardedExprM
                   @ m
                   w
                   w1
                   w2
                   ww1
                   ww2 }) -}
4071e4e3e23b5d4575aa2c5345069566
  inScope ::
    Language.PureScript.Names.Ident
    -> Data.Set.Internal.Set
         Language.PureScript.AST.Traversals.ScopedIdent
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,U>,
     Unfolding: (\ (i :: Language.PureScript.Names.Ident)
                   (s :: Data.Set.Internal.Set
                           Language.PureScript.AST.Traversals.ScopedIdent) ->
                 case Language.PureScript.AST.Traversals.$smember_$sgo1
                        s
                        i of wild {
                   GHC.Types.False
                   -> Language.PureScript.AST.Traversals.$smember_$sgo3 s i
                   GHC.Types.True -> GHC.Types.True }) -}
22c057d6921be8440814b92979717a96
  litM ::
    GHC.Base.Monad m =>
    (a -> m a)
    -> Language.PureScript.AST.Literals.Literal a
    -> m (Language.PureScript.AST.Literals.Literal a)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(SLLLL),1*U(1*U(1*U(C(C1(U)),A),1*C1(U),A,C(C1(C1(U))),A,A),A,A,A,A)><L,C(U)><S,1*U>,
     Unfolding: (\ @ m :: * -> *
                   @ a
                   ($dMonad :: GHC.Base.Monad m)
                   (eta :: a -> m a)
                   (eta1 :: Language.PureScript.AST.Literals.Literal a) ->
                 let {
                   $dApplicative :: GHC.Base.Applicative m
                   = GHC.Base.$p1Monad @ m $dMonad
                 } in
                 case eta1 of wild {
                   DEFAULT
                   -> GHC.Base.pure
                        @ m
                        $dApplicative
                        @ (Language.PureScript.AST.Literals.Literal a)
                        wild
                   Language.PureScript.AST.Literals.ArrayLiteral as
                   -> GHC.Base.fmap
                        @ m
                        (GHC.Base.$p1Applicative @ m $dApplicative)
                        @ [a]
                        @ (Language.PureScript.AST.Literals.Literal a)
                        (Language.PureScript.AST.Literals.ArrayLiteral @ a)
                        (let {
                           z :: m [a]
                           = GHC.Base.pure @ m $dApplicative @ [a] (GHC.Types.[] @ a)
                         } in
                         letrec {
                           go5 :: [a] -> m [a] {- Arity: 1, Strictness: <S,1*U> -}
                           = \ (ds :: [a]) ->
                             case ds of wild1 {
                               [] -> z
                               : y ys
                               -> GHC.Base.liftA2
                                    @ m
                                    $dApplicative
                                    @ a
                                    @ [a]
                                    @ [a]
                                    (GHC.Types.: @ a)
                                    (eta y)
                                    (go5 ys) }
                         } in
                         go5 as)
                   Language.PureScript.AST.Literals.ObjectLiteral as
                   -> let {
                        $dFunctor :: GHC.Base.Functor m
                        = GHC.Base.$p1Applicative @ m $dApplicative
                      } in
                      GHC.Base.fmap
                        @ m
                        $dFunctor
                        @ [(Language.PureScript.PSString.PSString, a)]
                        @ (Language.PureScript.AST.Literals.Literal a)
                        (Language.PureScript.AST.Literals.ObjectLiteral @ a)
                        (let {
                           z :: m [(Language.PureScript.PSString.PSString, a)]
                           = GHC.Base.pure
                               @ m
                               $dApplicative
                               @ [(Language.PureScript.PSString.PSString, a)]
                               (GHC.Types.[] @ (Language.PureScript.PSString.PSString, a))
                         } in
                         letrec {
                           go5 :: [(Language.PureScript.PSString.PSString, a)]
                                  -> m [(Language.PureScript.PSString.PSString, a)]
                             {- Arity: 1, Strictness: <S,1*U> -}
                           = \ (ds :: [(Language.PureScript.PSString.PSString, a)]) ->
                             case ds of wild1 {
                               [] -> z
                               : y ys
                               -> GHC.Base.liftA2
                                    @ m
                                    $dApplicative
                                    @ (Language.PureScript.PSString.PSString, a)
                                    @ [(Language.PureScript.PSString.PSString, a)]
                                    @ [(Language.PureScript.PSString.PSString, a)]
                                    (GHC.Types.: @ (Language.PureScript.PSString.PSString, a))
                                    (case y of wild2 { (,) a1 b1 ->
                                     GHC.Base.fmap
                                       @ m
                                       $dFunctor
                                       @ a
                                       @ (Language.PureScript.PSString.PSString, a)
                                       (GHC.Tuple.(,)
                                          @ Language.PureScript.PSString.PSString
                                          @ a
                                          a1)
                                       (eta b1) })
                                    (go5 ys) }
                         } in
                         go5 as) }) -}
a2524c33840358be0ec96b6f41c2df4f
  mapGuardedExpr ::
    (Language.PureScript.AST.Declarations.Guard
     -> Language.PureScript.AST.Declarations.Guard)
    -> (Language.PureScript.AST.Declarations.Expr
        -> Language.PureScript.AST.Declarations.Expr)
    -> Language.PureScript.AST.Declarations.GuardedExpr
    -> Language.PureScript.AST.Declarations.GuardedExpr
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,C(U)><L,1*C1(U)><S,1*U(1*U,U)>m,
     Unfolding: InlineRule (3, True, False)
                (\ (f :: Language.PureScript.AST.Declarations.Guard
                         -> Language.PureScript.AST.Declarations.Guard)
                   (g :: Language.PureScript.AST.Declarations.Expr
                         -> Language.PureScript.AST.Declarations.Expr)
                   (ds :: Language.PureScript.AST.Declarations.GuardedExpr) ->
                 case ds of wild { Language.PureScript.AST.Declarations.GuardedExpr guards rhs ->
                 Language.PureScript.AST.Declarations.GuardedExpr
                   (GHC.Base.build
                      @ Language.PureScript.AST.Declarations.Guard
                      (\ @ b1
                         (c :: Language.PureScript.AST.Declarations.Guard
                               -> b1 -> b1)[OneShot]
                         (n :: b1)[OneShot] ->
                       GHC.Base.foldr
                         @ Language.PureScript.AST.Declarations.Guard
                         @ b1
                         (GHC.Base.mapFB
                            @ Language.PureScript.AST.Declarations.Guard
                            @ b1
                            @ Language.PureScript.AST.Declarations.Guard
                            c
                            f)
                         n
                         guards))
                   (g rhs) }) -}
c5ba43021920ffb02d62737e1c4527b2
  overTypes ::
    (Language.PureScript.Types.SourceType
     -> Language.PureScript.Types.SourceType)
    -> Language.PureScript.AST.Declarations.Expr
    -> Language.PureScript.AST.Declarations.Expr
  {- Arity: 1, HasNoCafRefs, Strictness: <L,C(U)>,
     Unfolding: (\ (f :: Language.PureScript.Types.SourceType
                         -> Language.PureScript.Types.SourceType) ->
                 case Language.PureScript.AST.Traversals.$weverywhereOnValues
                        (GHC.Base.id @ Language.PureScript.AST.Declarations.Declaration)
                        (\ (ds :: Language.PureScript.AST.Declarations.Expr) ->
                         case ds of wild {
                           DEFAULT -> wild
                           Language.PureScript.AST.Declarations.TypedValue checkTy val t
                           -> Language.PureScript.AST.Declarations.TypedValue
                                checkTy
                                val
                                (f t)
                           Language.PureScript.AST.Declarations.TypeClassDictionary c sco hints
                           -> Language.PureScript.AST.Declarations.TypeClassDictionary
                                (case c of wild1 { Language.PureScript.Types.Constraint ds1 ds2 ds3 ds4 ->
                                 Language.PureScript.Types.Constraint
                                   @ Language.PureScript.AST.SourcePos.SourceAnn
                                   ds1
                                   ds2
                                   (GHC.Base.map
                                      @ (Language.PureScript.Types.Type
                                           Language.PureScript.AST.SourcePos.SourceAnn)
                                      @ (Language.PureScript.Types.Type
                                           Language.PureScript.AST.SourcePos.SourceAnn)
                                      f
                                      ds3)
                                   ds4 })
                                sco
                                hints })
                        (GHC.Base.id
                           @ Language.PureScript.AST.Binders.Binder) of ww { (#,,#) ww1 ww2 ww3 ->
                 ww2 }) -}
instance GHC.Classes.Eq [Language.PureScript.AST.Traversals.ScopedIdent]
  = Language.PureScript.AST.Traversals.$fEqScopedIdent
instance GHC.Classes.Ord [Language.PureScript.AST.Traversals.ScopedIdent]
  = Language.PureScript.AST.Traversals.$fOrdScopedIdent
instance GHC.Show.Show [Language.PureScript.AST.Traversals.ScopedIdent]
  = Language.PureScript.AST.Traversals.$fShowScopedIdent
"SC:$sgo30" forall (sc :: Data.Set.Internal.Set
                            Language.PureScript.AST.Traversals.ScopedIdent)
                   (sc1 :: Language.PureScript.Names.Ident)
                   (sc2 :: Language.PureScript.AST.Traversals.ScopedIdent)
  Language.PureScript.AST.Traversals.$sinsert_$sgo3 sc2
                                                    (Language.PureScript.AST.Traversals.LocalIdent
                                                       sc1)
                                                    sc
  = Language.PureScript.AST.Traversals.$sinsert_$s$sgo2 sc sc1 sc2
"SC:$sgo31" forall (sc :: Data.Set.Internal.Set
                            Language.PureScript.AST.Traversals.ScopedIdent)
                   (sc1 :: Language.PureScript.Names.Ident)
                   (sc2 :: Language.PureScript.AST.Traversals.ScopedIdent)
  Language.PureScript.AST.Traversals.$sinsert_$sgo3 sc2
                                                    (Language.PureScript.AST.Traversals.ToplevelIdent
                                                       sc1)
                                                    sc
  = Language.PureScript.AST.Traversals.$sinsert_$s$sgo1 sc sc1 sc2
"SC:$sgo32" forall (sc :: GHC.Prim.Int#)
                   (sc1 :: Language.PureScript.AST.Traversals.ScopedIdent)
                   (sc2 :: Data.Set.Internal.Set
                             Language.PureScript.AST.Traversals.ScopedIdent)
                   (sc3 :: Data.Set.Internal.Set
                             Language.PureScript.AST.Traversals.ScopedIdent)
                   (sc4 :: Language.PureScript.AST.Traversals.ScopedIdent)
                   (sc5 :: Language.PureScript.AST.Traversals.ScopedIdent)
  Language.PureScript.AST.Traversals.$sinsert_$sgo3 sc5
                                                    sc4
                                                    (Data.Set.Internal.Bin
                                                       @ Language.PureScript.AST.Traversals.ScopedIdent
                                                       sc
                                                       sc1
                                                       sc2
                                                       sc3)
  = Language.PureScript.AST.Traversals.$sinsert_$s$sgo3
      sc
      sc1
      sc2
      sc3
      sc4
      sc5
"SPEC/Language.PureScript.AST.Traversals $wsplitS @ ScopedIdent" [0] forall (w :: GHC.Classes.Ord
                                                                                    Language.PureScript.AST.Traversals.ScopedIdent)
  Data.Set.Internal.$wsplitS @ Language.PureScript.AST.Traversals.ScopedIdent
                             w
  = Language.PureScript.AST.Traversals.$s$wsplitS
"SPEC/Language.PureScript.AST.Traversals fromList @ ScopedIdent" forall ($dOrd :: GHC.Classes.Ord
                                                                                    Language.PureScript.AST.Traversals.ScopedIdent)
  Data.Set.Internal.fromList @ Language.PureScript.AST.Traversals.ScopedIdent
                             $dOrd
  = Language.PureScript.AST.Traversals.$sfromList
"SPEC/Language.PureScript.AST.Traversals union @ ScopedIdent" forall ($dOrd :: GHC.Classes.Ord
                                                                                 Language.PureScript.AST.Traversals.ScopedIdent)
  Data.Set.Internal.union @ Language.PureScript.AST.Traversals.ScopedIdent
                          $dOrd
  = Language.PureScript.AST.Traversals.$sunion
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

