
==================== FINAL INTERFACE ====================
2018-11-30 19:26:13.599663 UTC

interface purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.CoreFn.Meta 8043
  interface hash: b7e9bb148d62d0250f95026f13a1ff00
  ABI hash: f9a7ac55ab29a2359120679a28dbcec4
  export-list hash: 86c925965109c41139b9fcdaeca934b9
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 354630b2248d720ba62df5ccf315f8dd
  opt_hash: 2c98c95d41c045ae9c2fb565ec8aabc6
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Language.PureScript.CoreFn.Meta.ConstructorType{Language.PureScript.CoreFn.Meta.ProductType Language.PureScript.CoreFn.Meta.SumType}
  Language.PureScript.CoreFn.Meta.Meta{Language.PureScript.CoreFn.Meta.IsConstructor Language.PureScript.CoreFn.Meta.IsForeign Language.PureScript.CoreFn.Meta.IsNewtype Language.PureScript.CoreFn.Meta.IsTypeClassConstructor Language.PureScript.CoreFn.Meta.IsWhere}
module dependencies: Control.Monad.Supply
                     Control.Monad.Supply.Class Language.PureScript.Names
package dependencies: aeson-1.3.1.1 array-0.5.2.0
                      attoparsec-0.13.2.2 base-4.11.1.0 base-compat-0.10.4 binary-0.8.5.1
                      bytestring-0.10.8.2 containers-0.5.11.0 deepseq-1.4.3.0
                      dlist-0.8.0.4 ghc-boot-th-8.4.3 ghc-prim-0.5.2.0 hashable-1.2.7.0
                      integer-gmp-1.0.2.0 integer-logarithms-1.0.2.1 mtl-2.2.2
                      pretty-1.1.3.6 primitive-0.6.3.0 random-1.1 scientific-0.3.6.2
                      tagged-0.8.5 template-haskell-2.13.0.0 text-1.2.3.0
                      th-abstraction-0.2.8.0 time-1.8.0.2 time-locale-compat-0.1.1.4
                      transformers-0.5.5.0 unordered-containers-0.2.9.0 uuid-types-1.0.3
                      vector-0.12.0.1
orphans: attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         vector-0.12.0.1:Data.Vector.Unboxed
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.0:Data.Text.Lazy
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.5.0:Control.Monad.Trans.Error
         text-1.2.3.0:Data.Text binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: aeson-1.3.1.1:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         dlist-0.8.0.4:Data.DList ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Names
                         tagged-0.8.5:Data.Tagged
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
                         th-abstraction-0.2.8.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-compat-0.10.4:Prelude.Compat bb6796186ed35a1d09dc34362a3fc27e
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  Language.PureScript.Names b3bf151840f3e8f2eb61eff186432886
  exports: f7f3503d20957194bda83c16bb5f1288
  Ident ab98a56ffa88760dad1380079e8ee35a
9edd685b62d103ebb006c133b17a3203
  $fEqConstructorType ::
    GHC.Classes.Eq Language.PureScript.CoreFn.Meta.ConstructorType
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.CoreFn.Meta.ConstructorType
                  Language.PureScript.CoreFn.Meta.$fEqConstructorType_$c==
                  Language.PureScript.CoreFn.Meta.$fEqConstructorType_$c/= -}
9edd685b62d103ebb006c133b17a3203
  $fEqConstructorType_$c/= ::
    Language.PureScript.CoreFn.Meta.ConstructorType
    -> Language.PureScript.CoreFn.Meta.ConstructorType
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.CoreFn.Meta.ConstructorType)
                   (y :: Language.PureScript.CoreFn.Meta.ConstructorType) ->
                 case x of wild {
                   Language.PureScript.CoreFn.Meta.ProductType
                   -> case y of wild1 {
                        Language.PureScript.CoreFn.Meta.ProductType -> GHC.Types.False
                        Language.PureScript.CoreFn.Meta.SumType -> GHC.Types.True }
                   Language.PureScript.CoreFn.Meta.SumType
                   -> case y of wild1 {
                        Language.PureScript.CoreFn.Meta.ProductType -> GHC.Types.True
                        Language.PureScript.CoreFn.Meta.SumType -> GHC.Types.False } }) -}
9edd685b62d103ebb006c133b17a3203
  $fEqConstructorType_$c== ::
    Language.PureScript.CoreFn.Meta.ConstructorType
    -> Language.PureScript.CoreFn.Meta.ConstructorType
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Language.PureScript.CoreFn.Meta.ConstructorType)
                   (ds1 :: Language.PureScript.CoreFn.Meta.ConstructorType) ->
                 case ds of wild {
                   Language.PureScript.CoreFn.Meta.ProductType
                   -> case ds1 of wild1 {
                        Language.PureScript.CoreFn.Meta.ProductType -> GHC.Types.True
                        Language.PureScript.CoreFn.Meta.SumType -> GHC.Types.False }
                   Language.PureScript.CoreFn.Meta.SumType
                   -> case ds1 of wild1 {
                        Language.PureScript.CoreFn.Meta.ProductType -> GHC.Types.False
                        Language.PureScript.CoreFn.Meta.SumType -> GHC.Types.True } }) -}
64697b0465a5e56c5f6fda6d38c37f56
  $fEqMeta :: GHC.Classes.Eq Language.PureScript.CoreFn.Meta.Meta
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.CoreFn.Meta.Meta
                  Language.PureScript.CoreFn.Meta.$fEqMeta_$c==
                  Language.PureScript.CoreFn.Meta.$fEqMeta_$c/= -}
64697b0465a5e56c5f6fda6d38c37f56
  $fEqMeta_$c/= ::
    Language.PureScript.CoreFn.Meta.Meta
    -> Language.PureScript.CoreFn.Meta.Meta -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.CoreFn.Meta.Meta)
                   (y :: Language.PureScript.CoreFn.Meta.Meta) ->
                 case Language.PureScript.CoreFn.Meta.$fEqMeta_$c== x y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
64697b0465a5e56c5f6fda6d38c37f56
  $fEqMeta_$c== ::
    Language.PureScript.CoreFn.Meta.Meta
    -> Language.PureScript.CoreFn.Meta.Meta -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Language.PureScript.CoreFn.Meta.Meta)
                   (ds1 :: Language.PureScript.CoreFn.Meta.Meta) ->
                 case ds of wild {
                   Language.PureScript.CoreFn.Meta.IsConstructor a1 a2
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.CoreFn.Meta.IsConstructor b1 b2
                        -> case a1 of wild2 {
                             Language.PureScript.CoreFn.Meta.ProductType
                             -> case b1 of wild3 {
                                  Language.PureScript.CoreFn.Meta.ProductType
                                  -> GHC.Classes.$fEq[]_$c==
                                       @ Language.PureScript.Names.Ident
                                       Language.PureScript.Names.$fEqIdent
                                       a2
                                       b2
                                  Language.PureScript.CoreFn.Meta.SumType -> GHC.Types.False }
                             Language.PureScript.CoreFn.Meta.SumType
                             -> case b1 of wild3 {
                                  Language.PureScript.CoreFn.Meta.ProductType -> GHC.Types.False
                                  Language.PureScript.CoreFn.Meta.SumType
                                  -> GHC.Classes.$fEq[]_$c==
                                       @ Language.PureScript.Names.Ident
                                       Language.PureScript.Names.$fEqIdent
                                       a2
                                       b2 } } }
                   Language.PureScript.CoreFn.Meta.IsNewtype
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.CoreFn.Meta.IsNewtype -> GHC.Types.True }
                   Language.PureScript.CoreFn.Meta.IsTypeClassConstructor
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.CoreFn.Meta.IsTypeClassConstructor
                        -> GHC.Types.True }
                   Language.PureScript.CoreFn.Meta.IsForeign
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.CoreFn.Meta.IsForeign -> GHC.Types.True }
                   Language.PureScript.CoreFn.Meta.IsWhere
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.CoreFn.Meta.IsWhere -> GHC.Types.True } }) -}
9edd685b62d103ebb006c133b17a3203
  $fOrdConstructorType ::
    GHC.Classes.Ord Language.PureScript.CoreFn.Meta.ConstructorType
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.CoreFn.Meta.ConstructorType
                  Language.PureScript.CoreFn.Meta.$fEqConstructorType
                  Language.PureScript.CoreFn.Meta.$fOrdConstructorType_$ccompare
                  Language.PureScript.CoreFn.Meta.$fOrdConstructorType_$c<
                  Language.PureScript.CoreFn.Meta.$fOrdConstructorType_$c<=
                  Language.PureScript.CoreFn.Meta.$fOrdConstructorType_$c>
                  Language.PureScript.CoreFn.Meta.$fOrdConstructorType_$c>=
                  Language.PureScript.CoreFn.Meta.$fOrdConstructorType_$cmax
                  Language.PureScript.CoreFn.Meta.$fOrdConstructorType_$cmin -}
9edd685b62d103ebb006c133b17a3203
  $fOrdConstructorType_$c< ::
    Language.PureScript.CoreFn.Meta.ConstructorType
    -> Language.PureScript.CoreFn.Meta.ConstructorType
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.CoreFn.Meta.ConstructorType)
                   (b :: Language.PureScript.CoreFn.Meta.ConstructorType) ->
                 case a of wild {
                   Language.PureScript.CoreFn.Meta.ProductType
                   -> case b of wild1 {
                        Language.PureScript.CoreFn.Meta.ProductType -> GHC.Types.False
                        Language.PureScript.CoreFn.Meta.SumType -> GHC.Types.True }
                   Language.PureScript.CoreFn.Meta.SumType
                   -> case b of wild1 { DEFAULT -> GHC.Types.False } }) -}
9edd685b62d103ebb006c133b17a3203
  $fOrdConstructorType_$c<= ::
    Language.PureScript.CoreFn.Meta.ConstructorType
    -> Language.PureScript.CoreFn.Meta.ConstructorType
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.CoreFn.Meta.ConstructorType)
                   (b :: Language.PureScript.CoreFn.Meta.ConstructorType) ->
                 case b of wild {
                   Language.PureScript.CoreFn.Meta.ProductType
                   -> case a of wild1 {
                        Language.PureScript.CoreFn.Meta.ProductType -> GHC.Types.True
                        Language.PureScript.CoreFn.Meta.SumType -> GHC.Types.False }
                   Language.PureScript.CoreFn.Meta.SumType
                   -> case a of wild1 { DEFAULT -> GHC.Types.True } }) -}
9edd685b62d103ebb006c133b17a3203
  $fOrdConstructorType_$c> ::
    Language.PureScript.CoreFn.Meta.ConstructorType
    -> Language.PureScript.CoreFn.Meta.ConstructorType
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, True)
                (\ (a :: Language.PureScript.CoreFn.Meta.ConstructorType)
                   (b :: Language.PureScript.CoreFn.Meta.ConstructorType) ->
                 Language.PureScript.CoreFn.Meta.$fOrdConstructorType_$c< b a) -}
9edd685b62d103ebb006c133b17a3203
  $fOrdConstructorType_$c>= ::
    Language.PureScript.CoreFn.Meta.ConstructorType
    -> Language.PureScript.CoreFn.Meta.ConstructorType
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.CoreFn.Meta.ConstructorType)
                   (b :: Language.PureScript.CoreFn.Meta.ConstructorType) ->
                 case a of wild {
                   Language.PureScript.CoreFn.Meta.ProductType
                   -> case b of wild1 {
                        Language.PureScript.CoreFn.Meta.ProductType -> GHC.Types.True
                        Language.PureScript.CoreFn.Meta.SumType -> GHC.Types.False }
                   Language.PureScript.CoreFn.Meta.SumType
                   -> case b of wild1 { DEFAULT -> GHC.Types.True } }) -}
9edd685b62d103ebb006c133b17a3203
  $fOrdConstructorType_$ccompare ::
    Language.PureScript.CoreFn.Meta.ConstructorType
    -> Language.PureScript.CoreFn.Meta.ConstructorType
    -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.CoreFn.Meta.ConstructorType)
                   (b :: Language.PureScript.CoreFn.Meta.ConstructorType) ->
                 case a of wild {
                   Language.PureScript.CoreFn.Meta.ProductType
                   -> case b of wild1 {
                        Language.PureScript.CoreFn.Meta.ProductType -> GHC.Types.EQ
                        Language.PureScript.CoreFn.Meta.SumType -> GHC.Types.LT }
                   Language.PureScript.CoreFn.Meta.SumType
                   -> case b of wild1 {
                        Language.PureScript.CoreFn.Meta.ProductType -> GHC.Types.GT
                        Language.PureScript.CoreFn.Meta.SumType -> GHC.Types.EQ } }) -}
9edd685b62d103ebb006c133b17a3203
  $fOrdConstructorType_$cmax ::
    Language.PureScript.CoreFn.Meta.ConstructorType
    -> Language.PureScript.CoreFn.Meta.ConstructorType
    -> Language.PureScript.CoreFn.Meta.ConstructorType
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.CoreFn.Meta.ConstructorType)
                   (y :: Language.PureScript.CoreFn.Meta.ConstructorType) ->
                 case y of wild {
                   Language.PureScript.CoreFn.Meta.ProductType -> x
                   Language.PureScript.CoreFn.Meta.SumType
                   -> case x of wild1 { DEFAULT ->
                      Language.PureScript.CoreFn.Meta.SumType } }) -}
9edd685b62d103ebb006c133b17a3203
  $fOrdConstructorType_$cmin ::
    Language.PureScript.CoreFn.Meta.ConstructorType
    -> Language.PureScript.CoreFn.Meta.ConstructorType
    -> Language.PureScript.CoreFn.Meta.ConstructorType
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.CoreFn.Meta.ConstructorType)
                   (y :: Language.PureScript.CoreFn.Meta.ConstructorType) ->
                 case y of wild {
                   Language.PureScript.CoreFn.Meta.ProductType
                   -> case x of wild1 { DEFAULT ->
                      Language.PureScript.CoreFn.Meta.ProductType }
                   Language.PureScript.CoreFn.Meta.SumType -> x }) -}
64697b0465a5e56c5f6fda6d38c37f56
  $fOrdMeta :: GHC.Classes.Ord Language.PureScript.CoreFn.Meta.Meta
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.CoreFn.Meta.Meta
                  Language.PureScript.CoreFn.Meta.$fEqMeta
                  Language.PureScript.CoreFn.Meta.$fOrdMeta_$ccompare
                  Language.PureScript.CoreFn.Meta.$fOrdMeta_$c<
                  Language.PureScript.CoreFn.Meta.$fOrdMeta_$c<=
                  Language.PureScript.CoreFn.Meta.$fOrdMeta_$c>
                  Language.PureScript.CoreFn.Meta.$fOrdMeta_$c>=
                  Language.PureScript.CoreFn.Meta.$fOrdMeta_$cmax
                  Language.PureScript.CoreFn.Meta.$fOrdMeta_$cmin -}
64697b0465a5e56c5f6fda6d38c37f56
  $fOrdMeta_$c< ::
    Language.PureScript.CoreFn.Meta.Meta
    -> Language.PureScript.CoreFn.Meta.Meta -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.CoreFn.Meta.Meta)
                   (y :: Language.PureScript.CoreFn.Meta.Meta) ->
                 case Language.PureScript.CoreFn.Meta.$fOrdMeta_$ccompare
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True }) -}
64697b0465a5e56c5f6fda6d38c37f56
  $fOrdMeta_$c<= ::
    Language.PureScript.CoreFn.Meta.Meta
    -> Language.PureScript.CoreFn.Meta.Meta -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.CoreFn.Meta.Meta)
                   (y :: Language.PureScript.CoreFn.Meta.Meta) ->
                 case Language.PureScript.CoreFn.Meta.$fOrdMeta_$ccompare
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False }) -}
64697b0465a5e56c5f6fda6d38c37f56
  $fOrdMeta_$c> ::
    Language.PureScript.CoreFn.Meta.Meta
    -> Language.PureScript.CoreFn.Meta.Meta -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.CoreFn.Meta.Meta)
                   (y :: Language.PureScript.CoreFn.Meta.Meta) ->
                 case Language.PureScript.CoreFn.Meta.$fOrdMeta_$ccompare
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True }) -}
64697b0465a5e56c5f6fda6d38c37f56
  $fOrdMeta_$c>= ::
    Language.PureScript.CoreFn.Meta.Meta
    -> Language.PureScript.CoreFn.Meta.Meta -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.CoreFn.Meta.Meta)
                   (y :: Language.PureScript.CoreFn.Meta.Meta) ->
                 case Language.PureScript.CoreFn.Meta.$fOrdMeta_$ccompare
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }) -}
64697b0465a5e56c5f6fda6d38c37f56
  $fOrdMeta_$ccompare ::
    Language.PureScript.CoreFn.Meta.Meta
    -> Language.PureScript.CoreFn.Meta.Meta -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Language.PureScript.CoreFn.Meta.Meta)
                   (b :: Language.PureScript.CoreFn.Meta.Meta) ->
                 case a of wild {
                   Language.PureScript.CoreFn.Meta.IsConstructor a1 a2
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.LT
                        Language.PureScript.CoreFn.Meta.IsConstructor b1 b2
                        -> case a1 of wild2 {
                             Language.PureScript.CoreFn.Meta.ProductType
                             -> case b1 of wild3 {
                                  Language.PureScript.CoreFn.Meta.ProductType
                                  -> GHC.Classes.$fOrd[]_$ccompare
                                       @ Language.PureScript.Names.Ident
                                       Language.PureScript.Names.$fOrdIdent
                                       a2
                                       b2
                                  Language.PureScript.CoreFn.Meta.SumType -> GHC.Types.LT }
                             Language.PureScript.CoreFn.Meta.SumType
                             -> case b1 of wild3 {
                                  Language.PureScript.CoreFn.Meta.ProductType -> GHC.Types.GT
                                  Language.PureScript.CoreFn.Meta.SumType
                                  -> GHC.Classes.$fOrd[]_$ccompare
                                       @ Language.PureScript.Names.Ident
                                       Language.PureScript.Names.$fOrdIdent
                                       a2
                                       b2 } } }
                   Language.PureScript.CoreFn.Meta.IsNewtype
                   -> case b of wild1 {
                        Language.PureScript.CoreFn.Meta.IsConstructor ds ds1
                        -> GHC.Types.GT
                        Language.PureScript.CoreFn.Meta.IsNewtype -> GHC.Types.EQ
                        Language.PureScript.CoreFn.Meta.IsTypeClassConstructor
                        -> GHC.Types.LT
                        Language.PureScript.CoreFn.Meta.IsForeign -> GHC.Types.LT
                        Language.PureScript.CoreFn.Meta.IsWhere -> GHC.Types.LT }
                   Language.PureScript.CoreFn.Meta.IsTypeClassConstructor
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Language.PureScript.CoreFn.Meta.IsTypeClassConstructor
                        -> GHC.Types.EQ
                        Language.PureScript.CoreFn.Meta.IsForeign -> GHC.Types.LT
                        Language.PureScript.CoreFn.Meta.IsWhere -> GHC.Types.LT }
                   Language.PureScript.CoreFn.Meta.IsForeign
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Language.PureScript.CoreFn.Meta.IsForeign -> GHC.Types.EQ
                        Language.PureScript.CoreFn.Meta.IsWhere -> GHC.Types.LT }
                   Language.PureScript.CoreFn.Meta.IsWhere
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Language.PureScript.CoreFn.Meta.IsWhere -> GHC.Types.EQ } }) -}
64697b0465a5e56c5f6fda6d38c37f56
  $fOrdMeta_$cmax ::
    Language.PureScript.CoreFn.Meta.Meta
    -> Language.PureScript.CoreFn.Meta.Meta
    -> Language.PureScript.CoreFn.Meta.Meta
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.CoreFn.Meta.Meta)
                   (y :: Language.PureScript.CoreFn.Meta.Meta) ->
                 case Language.PureScript.CoreFn.Meta.$fOrdMeta_$ccompare
                        x
                        y of wild {
                   DEFAULT -> y GHC.Types.GT -> x }) -}
64697b0465a5e56c5f6fda6d38c37f56
  $fOrdMeta_$cmin ::
    Language.PureScript.CoreFn.Meta.Meta
    -> Language.PureScript.CoreFn.Meta.Meta
    -> Language.PureScript.CoreFn.Meta.Meta
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.CoreFn.Meta.Meta)
                   (y :: Language.PureScript.CoreFn.Meta.Meta) ->
                 case Language.PureScript.CoreFn.Meta.$fOrdMeta_$ccompare
                        x
                        y of wild {
                   DEFAULT -> x GHC.Types.GT -> y }) -}
9edd685b62d103ebb006c133b17a3203
  $fShowConstructorType ::
    GHC.Show.Show Language.PureScript.CoreFn.Meta.ConstructorType
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.CoreFn.Meta.ConstructorType
                  Language.PureScript.CoreFn.Meta.$fShowConstructorType_$cshowsPrec
                  Language.PureScript.CoreFn.Meta.$fShowConstructorType_$cshow
                  Language.PureScript.CoreFn.Meta.$fShowConstructorType_$cshowList -}
9edd685b62d103ebb006c133b17a3203
  $fShowConstructorType1 ::
    Language.PureScript.CoreFn.Meta.ConstructorType -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Language.PureScript.CoreFn.Meta.ConstructorType)
                   (eta :: GHC.Base.String) ->
                 case ds of wild {
                   Language.PureScript.CoreFn.Meta.ProductType
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           Language.PureScript.CoreFn.Meta.$fShowConstructorType4)
                        eta
                   Language.PureScript.CoreFn.Meta.SumType
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           Language.PureScript.CoreFn.Meta.$fShowConstructorType2)
                        eta }) -}
9be942f91116b3627873a4266b50bab7
  $fShowConstructorType2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.CoreFn.Meta.$fShowConstructorType3) -}
16e9c188f2d5f346cd0c78be62ce112f
  $fShowConstructorType3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("SumType"#) -}
f6a5fa257fe447032fad41227883da1d
  $fShowConstructorType4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.CoreFn.Meta.$fShowConstructorType5) -}
15f0fbb62a3b1f7f5c7e8be19c0bbf71
  $fShowConstructorType5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ProductType"#) -}
9edd685b62d103ebb006c133b17a3203
  $fShowConstructorType_$cshow ::
    Language.PureScript.CoreFn.Meta.ConstructorType -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.CoreFn.Meta.ConstructorType) ->
                 case x of wild {
                   Language.PureScript.CoreFn.Meta.ProductType
                   -> Language.PureScript.CoreFn.Meta.$fShowConstructorType4
                   Language.PureScript.CoreFn.Meta.SumType
                   -> Language.PureScript.CoreFn.Meta.$fShowConstructorType2 }) -}
9edd685b62d103ebb006c133b17a3203
  $fShowConstructorType_$cshowList ::
    [Language.PureScript.CoreFn.Meta.ConstructorType] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.CoreFn.Meta.ConstructorType])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.CoreFn.Meta.ConstructorType
                   Language.PureScript.CoreFn.Meta.$fShowConstructorType1
                   ls
                   s) -}
9edd685b62d103ebb006c133b17a3203
  $fShowConstructorType_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.CoreFn.Meta.ConstructorType
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (ds1 :: Language.PureScript.CoreFn.Meta.ConstructorType)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   Language.PureScript.CoreFn.Meta.ProductType
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           Language.PureScript.CoreFn.Meta.$fShowConstructorType4)
                        eta
                   Language.PureScript.CoreFn.Meta.SumType
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           Language.PureScript.CoreFn.Meta.$fShowConstructorType2)
                        eta }) -}
64697b0465a5e56c5f6fda6d38c37f56
  $fShowMeta :: GHC.Show.Show Language.PureScript.CoreFn.Meta.Meta
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.CoreFn.Meta.Meta
                  Language.PureScript.CoreFn.Meta.$fShowMeta_$cshowsPrec
                  Language.PureScript.CoreFn.Meta.$fShowMeta_$cshow
                  Language.PureScript.CoreFn.Meta.$fShowMeta_$cshowList -}
64697b0465a5e56c5f6fda6d38c37f56
  $fShowMeta1 ::
    Language.PureScript.CoreFn.Meta.Meta -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (Language.PureScript.CoreFn.Meta.$fShowMeta_$cshowsPrec
                   Language.PureScript.CoreFn.Meta.$fShowMeta2) -}
7f688355fa86591e25d3e633bd139b26
  $fShowMeta10 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IsNewtype"#) -}
6720e75f448081403e5fa58d5cd21f02
  $fShowMeta11 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IsConstructor "#) -}
18fe899aa79b09dc1a1bcf39124cdaec
  $fShowMeta12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackAppendCString#
                   GHC.Show.showList__4
                   (GHC.Types.[] @ GHC.Types.Char)) -}
190e9a9607e615bdcc2f29a74d92fdfe
  $fShowMeta2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
aebb10b004e525b7474708a09dd531fa
  $fShowMeta3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.CoreFn.Meta.$fShowMeta4) -}
dc9ee53d7c98039cb31a40e4e237388d
  $fShowMeta4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IsWhere"#) -}
3255b76038eebef1ef139e87be7b52a0
  $fShowMeta5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.CoreFn.Meta.$fShowMeta6) -}
cfb56468790df9d6154715ee1c93b271
  $fShowMeta6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IsForeign"#) -}
012630ea04f696e15b57df0e0c25eb44
  $fShowMeta7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.CoreFn.Meta.$fShowMeta8) -}
3afbb7ec6da05e8f596dd68c667a5d28
  $fShowMeta8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IsTypeClassConstructor"#) -}
f08ea3e7490fab26746b53ed29267e9b
  $fShowMeta9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.CoreFn.Meta.$fShowMeta10) -}
64697b0465a5e56c5f6fda6d38c37f56
  $fShowMeta_$cshow ::
    Language.PureScript.CoreFn.Meta.Meta -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: Language.PureScript.CoreFn.Meta.Meta) ->
                 case x of wild {
                   Language.PureScript.CoreFn.Meta.IsConstructor b1 b2
                   -> GHC.CString.unpackAppendCString#
                        Language.PureScript.CoreFn.Meta.$fShowMeta11
                        (let {
                           eta :: [GHC.Types.Char]
                           = case b2 of wild1 {
                               [] -> Language.PureScript.CoreFn.Meta.$fShowMeta12
                               : x1 xs
                               -> GHC.Types.:
                                    @ GHC.Types.Char
                                    GHC.Show.showList__3
                                    (Language.PureScript.Names.$fShowIdent_$cshowsPrec
                                       Language.PureScript.Names.$fShowIdent2
                                       x1
                                       (Language.PureScript.CoreFn.Meta.$fShowMeta_showl xs)) }
                         } in
                         case b1 of wild1 {
                           Language.PureScript.CoreFn.Meta.ProductType
                           -> GHC.Base.++
                                @ GHC.Types.Char
                                Language.PureScript.CoreFn.Meta.$fShowConstructorType4
                                (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 eta)
                           Language.PureScript.CoreFn.Meta.SumType
                           -> GHC.Base.++
                                @ GHC.Types.Char
                                Language.PureScript.CoreFn.Meta.$fShowConstructorType2
                                (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 eta) })
                   Language.PureScript.CoreFn.Meta.IsNewtype
                   -> Language.PureScript.CoreFn.Meta.$fShowMeta9
                   Language.PureScript.CoreFn.Meta.IsTypeClassConstructor
                   -> Language.PureScript.CoreFn.Meta.$fShowMeta7
                   Language.PureScript.CoreFn.Meta.IsForeign
                   -> Language.PureScript.CoreFn.Meta.$fShowMeta5
                   Language.PureScript.CoreFn.Meta.IsWhere
                   -> Language.PureScript.CoreFn.Meta.$fShowMeta3 }) -}
64697b0465a5e56c5f6fda6d38c37f56
  $fShowMeta_$cshowList ::
    [Language.PureScript.CoreFn.Meta.Meta] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.CoreFn.Meta.Meta])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.CoreFn.Meta.Meta
                   Language.PureScript.CoreFn.Meta.$fShowMeta1
                   ls
                   s) -}
64697b0465a5e56c5f6fda6d38c37f56
  $fShowMeta_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.CoreFn.Meta.Meta -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ (a :: GHC.Types.Int)
                   (ds :: Language.PureScript.CoreFn.Meta.Meta)
                   (eta :: GHC.Base.String) ->
                 case ds of wild {
                   Language.PureScript.CoreFn.Meta.IsConstructor b1 b2
                   -> case a of wild1 { GHC.Types.I# x ->
                      let {
                        p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                        = \ (x1 :: GHC.Base.String)[OneShot] ->
                          GHC.CString.unpackAppendCString#
                            Language.PureScript.CoreFn.Meta.$fShowMeta11
                            (let {
                               eta1 :: [GHC.Types.Char]
                               = case b2 of wild2 {
                                   [] -> GHC.CString.unpackAppendCString# GHC.Show.showList__4 x1
                                   : x2 xs
                                   -> GHC.Types.:
                                        @ GHC.Types.Char
                                        GHC.Show.showList__3
                                        (Language.PureScript.Names.$fShowIdent_$cshowsPrec
                                           Language.PureScript.Names.$fShowIdent2
                                           x2
                                           (let {
                                              lvl1 :: [GHC.Types.Char]
                                              = GHC.Types.: @ GHC.Types.Char GHC.Show.showList__2 x1
                                            } in
                                            letrec {
                                              showl :: [Language.PureScript.Names.Ident]
                                                       -> GHC.Base.String
                                                {- Arity: 1, Strictness: <S,1*U> -}
                                              = \ (ds2 :: [Language.PureScript.Names.Ident]) ->
                                                case ds2 of wild3 {
                                                  [] -> lvl1
                                                  : y ys
                                                  -> GHC.Types.:
                                                       @ GHC.Types.Char
                                                       GHC.Show.showList__1
                                                       (Language.PureScript.Names.$fShowIdent_$cshowsPrec
                                                          Language.PureScript.Names.$fShowIdent2
                                                          y
                                                          (showl ys)) }
                                            } in
                                            showl xs)) }
                             } in
                             case b1 of wild2 {
                               Language.PureScript.CoreFn.Meta.ProductType
                               -> GHC.Base.++
                                    @ GHC.Types.Char
                                    Language.PureScript.CoreFn.Meta.$fShowConstructorType4
                                    (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 eta1)
                               Language.PureScript.CoreFn.Meta.SumType
                               -> GHC.Base.++
                                    @ GHC.Types.Char
                                    Language.PureScript.CoreFn.Meta.$fShowConstructorType2
                                    (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 eta1) })
                      } in
                      case GHC.Prim.>=# x 11# of lwild {
                        DEFAULT -> p eta
                        1#
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 eta)) } }
                   Language.PureScript.CoreFn.Meta.IsNewtype
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.CoreFn.Meta.$fShowMeta9
                        eta
                   Language.PureScript.CoreFn.Meta.IsTypeClassConstructor
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.CoreFn.Meta.$fShowMeta7
                        eta
                   Language.PureScript.CoreFn.Meta.IsForeign
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.CoreFn.Meta.$fShowMeta5
                        eta
                   Language.PureScript.CoreFn.Meta.IsWhere
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.CoreFn.Meta.$fShowMeta3
                        eta }) -}
1d5f2cc60410079682ca0df2f1776b35
  $fShowMeta_showl ::
    [Language.PureScript.Names.Ident] -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>m2 -}
ebbe273e09be72ad0b6db0efe835a65c
  $tc'IsConstructor :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13794286569333522963##
                   12068432229401624594##
                   Language.PureScript.CoreFn.Meta.$trModule
                   Language.PureScript.CoreFn.Meta.$tc'IsConstructor2
                   0#
                   Language.PureScript.CoreFn.Meta.$tc'IsConstructor1) -}
f7adc61ec2037d3385cc7c31c957a2c9
  $tc'IsConstructor1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
7726ea7e84e69dbb955ffe3ad2ca90e6
  $tc'IsConstructor2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.CoreFn.Meta.$tc'IsConstructor3) -}
16337e01274c690d550c25b1b4a32599
  $tc'IsConstructor3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IsConstructor"#) -}
6757fe35307a8b2efe03aca909a7ca9a
  $tc'IsForeign :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11126282603665108474##
                   11873023816871256802##
                   Language.PureScript.CoreFn.Meta.$trModule
                   Language.PureScript.CoreFn.Meta.$tc'IsForeign2
                   0#
                   Language.PureScript.CoreFn.Meta.$tc'IsForeign1) -}
ed9b85ac4c4c1e0a42ab78ab93c6622c
  $tc'IsForeign1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
d6fb7b9615f8558e06335d77327e4f32
  $tc'IsForeign2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.CoreFn.Meta.$tc'IsForeign3) -}
2a86c045f0740c629064959849ef1682
  $tc'IsForeign3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IsForeign"#) -}
2738c0b4b2330d61ef1a827b0f7004ec
  $tc'IsNewtype :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15524528042601767617##
                   12430610101181680599##
                   Language.PureScript.CoreFn.Meta.$trModule
                   Language.PureScript.CoreFn.Meta.$tc'IsNewtype1
                   0#
                   Language.PureScript.CoreFn.Meta.$tc'IsForeign1) -}
73dd9be9a1aa983b0dbbdebc1ae31548
  $tc'IsNewtype1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.CoreFn.Meta.$tc'IsNewtype2) -}
7097aa8d8cbf72eade24abad64976e81
  $tc'IsNewtype2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IsNewtype"#) -}
cabd8ab894801d93d0574e32b6dd3c0b
  $tc'IsTypeClassConstructor :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5001558353561374936##
                   9607461121039366679##
                   Language.PureScript.CoreFn.Meta.$trModule
                   Language.PureScript.CoreFn.Meta.$tc'IsTypeClassConstructor1
                   0#
                   Language.PureScript.CoreFn.Meta.$tc'IsForeign1) -}
0111d5677070aefcbba670a1766a7bef
  $tc'IsTypeClassConstructor1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.CoreFn.Meta.$tc'IsTypeClassConstructor2) -}
1e441e60cd37c35b72946492f363e290
  $tc'IsTypeClassConstructor2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IsTypeClassConstructor"#) -}
12c7e3323b983204707545505e59ea8f
  $tc'IsWhere :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6769353299066261805##
                   7667078067050566056##
                   Language.PureScript.CoreFn.Meta.$trModule
                   Language.PureScript.CoreFn.Meta.$tc'IsWhere1
                   0#
                   Language.PureScript.CoreFn.Meta.$tc'IsForeign1) -}
2bb2942f738eb307b2fa3ffc8548d5d4
  $tc'IsWhere1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.CoreFn.Meta.$tc'IsWhere2) -}
6971f8f7b6d5bf1d5bb6731970676c1c
  $tc'IsWhere2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IsWhere"#) -}
f47b15efa5736b9e7b1ecd9830ad2cb3
  $tc'ProductType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16521590495744621969##
                   4668028669497476243##
                   Language.PureScript.CoreFn.Meta.$trModule
                   Language.PureScript.CoreFn.Meta.$tc'ProductType2
                   0#
                   Language.PureScript.CoreFn.Meta.$tc'ProductType1) -}
963fea15bb57451520eb6a49e5358d15
  $tc'ProductType1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
cd776b6acbadba96beba4139bfcb5745
  $tc'ProductType2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.CoreFn.Meta.$tc'ProductType3) -}
a27ab5569f6758a77e69b466589e3a1d
  $tc'ProductType3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ProductType"#) -}
b66a0117fd5615d90d65a94f839fabfe
  $tc'SumType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2960037839786601319##
                   847467567679732815##
                   Language.PureScript.CoreFn.Meta.$trModule
                   Language.PureScript.CoreFn.Meta.$tc'SumType1
                   0#
                   Language.PureScript.CoreFn.Meta.$tc'ProductType1) -}
3c31ca56a9ba22de7a10defc5ab153d5
  $tc'SumType1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.CoreFn.Meta.$tc'SumType2) -}
75987940404d3a5bce5956c1a8ae8eb5
  $tc'SumType2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'SumType"#) -}
3e8cfd503d90d9c997ec254922ccc8e5
  $tcConstructorType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16531393869955357815##
                   4994208058838502431##
                   Language.PureScript.CoreFn.Meta.$trModule
                   Language.PureScript.CoreFn.Meta.$tcConstructorType1
                   0#
                   GHC.Types.krep$*) -}
48ca2f78e8a26135b29b7e59afb3ce8d
  $tcConstructorType1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.CoreFn.Meta.$tcConstructorType2) -}
4dd890d365f62b21e70de86a9aeec955
  $tcConstructorType2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ConstructorType"#) -}
0ea7047ebbae811d96a3ada2d5edb080
  $tcMeta :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18173594936895220681##
                   14551213769777697688##
                   Language.PureScript.CoreFn.Meta.$trModule
                   Language.PureScript.CoreFn.Meta.$tcMeta1
                   0#
                   GHC.Types.krep$*) -}
0e2f4ff2e8d2fd283d3484d5b02a3c19
  $tcMeta1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.CoreFn.Meta.$tcMeta2) -}
8ec255a1046f8f7c2569eba708b23f4d
  $tcMeta2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Meta"#) -}
9cd726194d46d052180df760fdaf6ce5
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Language.PureScript.CoreFn.Meta.$trModule3
                   Language.PureScript.CoreFn.Meta.$trModule1) -}
f5a506c361de17e81e6ce75059923b6a
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.CoreFn.Meta.$trModule2) -}
f81813c1848cdca3986f34c17128b7d9
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Language.PureScript.CoreFn.Meta"#) -}
c325db8da09ac45bd156870feed0331a
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.CoreFn.Meta.$trModule4) -}
33495679f85e86e22967f59a7a3d83a0
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"#) -}
9edd685b62d103ebb006c133b17a3203
  data ConstructorType = ProductType | SumType
64697b0465a5e56c5f6fda6d38c37f56
  data Meta
    = IsConstructor Language.PureScript.CoreFn.Meta.ConstructorType
                    [Language.PureScript.Names.Ident]
    | IsNewtype
    | IsTypeClassConstructor
    | IsForeign
    | IsWhere
instance GHC.Classes.Eq [Language.PureScript.CoreFn.Meta.ConstructorType]
  = Language.PureScript.CoreFn.Meta.$fEqConstructorType
instance GHC.Classes.Eq [Language.PureScript.CoreFn.Meta.Meta]
  = Language.PureScript.CoreFn.Meta.$fEqMeta
instance GHC.Classes.Ord [Language.PureScript.CoreFn.Meta.ConstructorType]
  = Language.PureScript.CoreFn.Meta.$fOrdConstructorType
instance GHC.Classes.Ord [Language.PureScript.CoreFn.Meta.Meta]
  = Language.PureScript.CoreFn.Meta.$fOrdMeta
instance GHC.Show.Show [Language.PureScript.CoreFn.Meta.ConstructorType]
  = Language.PureScript.CoreFn.Meta.$fShowConstructorType
instance GHC.Show.Show [Language.PureScript.CoreFn.Meta.Meta]
  = Language.PureScript.CoreFn.Meta.$fShowMeta
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

