
==================== FINAL INTERFACE ====================
2019-01-24 14:16:23.633678 UTC

interface purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Renamer 8043
  interface hash: 7cfb7e84675064fa87a8e903f3387ac2
  ABI hash: 79f1967bbf37ae0e092495dd1c39cc47
  export-list hash: d637ec8d4999ff42ae8316fc411d6bf7
  orphan hash: 533bbbe05dd036d208faaa0c8d8a7d9f
  flag hash: 2ae478d21823b7c739b1b08c46262eb0
  opt_hash: 2c98c95d41c045ae9c2fb565ec8aabc6
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Language.PureScript.Renamer.renameInModules
module dependencies: Control.Monad.Supply
                     Control.Monad.Supply.Class Language.PureScript.AST
                     Language.PureScript.AST.Binders
                     Language.PureScript.AST.Declarations
                     Language.PureScript.AST.Exported Language.PureScript.AST.Literals
                     Language.PureScript.AST.Operators Language.PureScript.AST.SourcePos
                     Language.PureScript.AST.Traversals Language.PureScript.Bundle
                     Language.PureScript.Comments Language.PureScript.Constants
                     Language.PureScript.CoreFn Language.PureScript.CoreFn.Ann
                     Language.PureScript.CoreFn.Binders
                     Language.PureScript.CoreFn.Desugar Language.PureScript.CoreFn.Expr
                     Language.PureScript.CoreFn.Meta Language.PureScript.CoreFn.Module
                     Language.PureScript.CoreFn.Optimizer
                     Language.PureScript.CoreFn.Traversals Language.PureScript.Crash
                     Language.PureScript.Environment Language.PureScript.Errors
                     Language.PureScript.Externs Language.PureScript.Kinds
                     Language.PureScript.Label Language.PureScript.Names
                     Language.PureScript.PSString Language.PureScript.Parser.Lexer
                     Language.PureScript.Parser.State Language.PureScript.Pretty
                     Language.PureScript.Pretty.Common Language.PureScript.Pretty.Kinds
                     Language.PureScript.Pretty.Types Language.PureScript.Pretty.Values
                     Language.PureScript.Publish.BoxesHelpers
                     Language.PureScript.Sugar.CaseDeclarations
                     Language.PureScript.Sugar.TypeClasses
                     Language.PureScript.Traversals
                     Language.PureScript.TypeChecker.Monad
                     Language.PureScript.TypeClassDictionaries Language.PureScript.Types
                     Paths_purescript
package dependencies: aeson-1.3.1.1 ansi-terminal-0.8.0.4
                      array-0.5.2.0 async-2.2.1 attoparsec-0.13.2.2 base-4.11.1.0
                      base-compat-0.10.4 binary-0.8.5.1 blaze-builder-0.4.1.0 boxes-0.1.5
                      bytestring-0.10.8.2 colour-2.3.4 containers-0.5.11.0
                      deepseq-1.4.3.0 dlist-0.8.0.4 filepath-1.4.2 ghc-boot-th-8.4.3
                      ghc-prim-0.5.2.0 hashable-1.2.7.0 integer-gmp-1.0.2.0
                      integer-logarithms-1.0.2.1 language-javascript-0.6.0.11
                      microlens-0.4.9.1 microlens-ghc-0.4.9 microlens-mtl-0.1.11.1
                      microlens-platform-0.3.10 microlens-th-0.4.2.1 mtl-2.2.2
                      parsec-3.1.13.0 pattern-arrows-0.0.2 pretty-1.1.3.6
                      primitive-0.6.3.0 protolude-0.2.2 random-1.1 scientific-0.3.6.2
                      sourcemap-0.1.6 split-0.2.3.3 stm-2.4.5.0 syb-0.7 tagged-0.8.5
                      template-haskell-2.13.0.0 text-1.2.3.0 th-abstraction-0.2.8.0
                      time-1.8.0.2 time-locale-compat-0.1.1.4 transformers-0.5.5.0
                      unordered-containers-0.2.9.0 utf8-string-1.0.1.1 uuid-types-1.0.3
                      vector-0.12.0.1
orphans: colour-2.3.4:Data.Colour syb-0.7:Data.Generics.Instances
         stm-2.4.5.0:Control.Monad.STM
         microlens-platform-0.3.10:Lens.Micro.Platform
         microlens-ghc-0.4.9:Lens.Micro.GHC
         attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         vector-0.12.0.1:Data.Vector.Unboxed
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.0:Data.Text.Lazy
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.5.0:Control.Monad.Trans.Error
         text-1.2.3.0:Data.Text binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: aeson-1.3.1.1:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.Graph
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         dlist-0.8.0.4:Data.DList ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         microlens-0.4.9.1:Lens.Micro.Internal
                         microlens-ghc-0.4.9:Lens.Micro.GHC
                         microlens-mtl-0.1.11.1:Lens.Micro.Mtl.Internal
                         microlens-platform-0.3.10:Lens.Micro.Platform
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.Declarations
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.Operators
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.SourcePos
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Comments
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Environment
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Kinds
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Label
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Names
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.PSString
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.TypeClassDictionaries
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Types
                         tagged-0.8.5:Data.Tagged
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
                         th-abstraction-0.2.8.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.Functor f522c3501272159820fd6f242510732f
import  -/  base-4.11.1.0:Data.List 83dc843e47bfc0c5af51e19c6f3476d5
import  -/  base-4.11.1.0:Data.Maybe 409c3da2b142470b68be39ce1d97a9f7
import  -/  base-4.11.1.0:Data.Traversable 7ad4edb9184ea1ae8e73f6b94f115c8c
import  -/  base-4.11.1.0:Data.Tuple 3af66f3ac61ed95ba8a3a3f68ebc5003
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Err 5e26aa744981f14e0f1e4d29c44ac52e
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-compat-0.10.4:Prelude.Compat bb6796186ed35a1d09dc34362a3fc27e
import  -/  containers-0.5.11.0:Data.Map 0dbdaec812ef695a364aa6c69e7f7d53
import  -/  containers-0.5.11.0:Data.Map.Internal 0150e210d0ae8df0f3a0669d5e32d8fa
import  -/  containers-0.5.11.0:Data.Set 7d3c64a641be4cacbcd8119445bab919
import  -/  containers-0.5.11.0:Data.Set.Internal 93fa3ef95853aa2a7aadf32d693bd451
import  -/  mtl-2.2.2:Control.Monad.State 1f28325cb5ef11b6b40ffadfe4bc2ca3
import  -/  mtl-2.2.2:Control.Monad.State.Class acc76e93f44ac4486524db1a327e0a0a
import  -/  Language.PureScript.AST.Literals da2ec269f063125450b272321f85468a
  ArrayLiteral 7cbd15adda8a5ed2a81035be22e2eae2
  Literal 4b6b35be8d89b746a77fcd3d0c0a71d4
  ObjectLiteral d17d3a090fe8a89f303c679b0a417ae9
import  -/  Language.PureScript.CoreFn 78a124ab2a2768521a0a6badbcf964b7
  exports: c4dde03505d5acac46f08d49121ce713
import  -/  Language.PureScript.CoreFn.Ann 0cc10e6f1cceeb9ce4110421e8890aeb
  Ann e57ea12399f1ca8b453bd48df393acd5
import  -/  Language.PureScript.CoreFn.Binders e5c76c3a1335bec879bb8abeb15c812b
  Binder 52f739b4003bef459f95e2c6f2571980
  ConstructorBinder d268adacb3e913f97478e11624c247a5
  LiteralBinder 67b0f1f7203d6311865d1202410431c3
  NamedBinder 548b8c55f02c4c5cba66e58baa3c2e2d
  NullBinder 5f1533c54a778f7ff2a8cafcd1848824
  VarBinder 7a24840a29c7ebc13fef40c52cb4fd40
import  -/  Language.PureScript.CoreFn.Expr fc76100f222fb80b0ed958c173fcf851
  Abs 879b7781b01ce75646ed3b7d7fe446c8
  Accessor aacc319cb87e79500b037bd4015d2999
  App e7da6186c368c0c53437cc6010ef2046
  Bind 22c7241ad0e882392beaf38a652acec4
  Case 82be24c5449b2c0e64cb911b5bb205a8
  CaseAlternative 3f8677cc5bb8940c990258f0503e9535
  CaseAlternative 22c7241ad0e882392beaf38a652acec4
  Constructor 457cdac6ebeb5b0530790d1c57ab5f9c
  Expr 22c7241ad0e882392beaf38a652acec4
  Let 508ebd624e6ff40e13ed51784aa9f31b
  Literal a25bc4074e2795aa5298934dd42c147e
  NonRec a95f5d1c62d025a420679d7c06a4c6a2
  ObjectUpdate 04495684e93872b2890f68b7a845b4dd
  Rec 73dafad7971223bee6d30f2190205572
  Var 3575d73ba62de334246ced44e6486014
import  -/  Language.PureScript.CoreFn.Meta 933865642c71d3e31c492dedea84a663
  IsTypeClassConstructor d7278815e996fb83077c83a9e70484bd
import  -/  Language.PureScript.CoreFn.Module 9dd7adb25f29cf9fbaca42c3a9ee6567
  Module 454865f9c7e6b8ec365bdc73daab8201
  Module b29880c812af4e08648f58735ebf94f4
  moduleDecls b29880c812af4e08648f58735ebf94f4
import  -/  Language.PureScript.Names 00f694509122478d97b327fbbccae327
  exports: ad7ae34f85124c68e8ba1c90fb2e732f
  GenIdent ee4cd9bd4570298e92da1d7c98aef59d
  Ident 71f167265716f619863a793fa311e198
  Ident bad3562aa6138b6192713ac281080869
  Qualified b6e1bc9e7244a41d3c6149c9b5c2d6d8
  UnusedIdent 57c338f8a1023bf312d293d7cd04b9e5
  runIdent f4727e6f001b3b7d933fd4e8122af572
  showIdent 6e8d83433e1fcc9da5f1cf76585fd968
import  -/  Language.PureScript.Traversals e97764d7972cc6ba421a6be0a3ce6bda
  exports: cbb821b2ee7c6d00cdf62285e1dbe432
  eitherM 2af36357e3acd760921cb6efef427400
  pairM f8a24624fde2d3fa102dce305c36545d
  sndM c93ef73e127a3a54c4cd1e5e2194b237
import  -/  text-1.2.3.0:Data.Text 7daa7e6c9b39d8cc1679e5ec5c64d2be
import  -/  text-1.2.3.0:Data.Text.Show 3b4b6fb2985a731022d67f636682da2b
import  -/  transformers-0.5.5.0:Control.Monad.Trans.State.Lazy bb07ba19cd14893d125b163b03c16c98
29e8c7da595f2fe475c795c2d04e65ae
  $sfromList ::
    [(Language.PureScript.Names.Ident, a)]
    -> Data.Map.Internal.Map Language.PureScript.Names.Ident a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a (ds :: [(Language.PureScript.Names.Ident, a)]) ->
                 case ds of wild {
                   [] -> Data.Map.Internal.Tip @ Language.PureScript.Names.Ident @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case kx of dt { DEFAULT ->
                           Data.Map.Internal.Bin
                             @ Language.PureScript.Names.Ident
                             @ a
                             1#
                             dt
                             x
                             (Data.Map.Internal.Tip @ Language.PureScript.Names.Ident @ a)
                             (Data.Map.Internal.Tip @ Language.PureScript.Names.Ident @ a) }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case Language.PureScript.Names.$fOrdIdent_$c< kx ky of wild4 {
                             GHC.Types.False
                             -> case kx of dt { DEFAULT ->
                                Language.PureScript.Renamer.$sfromList_$spoly_go14
                                  @ a
                                  ky
                                  ds3
                                  ipv1
                                  (Data.Map.Internal.Bin
                                     @ Language.PureScript.Names.Ident
                                     @ a
                                     1#
                                     dt
                                     x
                                     (Data.Map.Internal.Tip @ Language.PureScript.Names.Ident @ a)
                                     (Data.Map.Internal.Tip
                                        @ Language.PureScript.Names.Ident
                                        @ a)) }
                             GHC.Types.True
                             -> case kx of dt { DEFAULT ->
                                Language.PureScript.Renamer.$sfromList_$s$wpoly_go13
                                  @ a
                                  ky
                                  ds3
                                  ipv1
                                  (Data.Map.Internal.Bin
                                     @ Language.PureScript.Names.Ident
                                     @ a
                                     1#
                                     dt
                                     x
                                     (Data.Map.Internal.Tip @ Language.PureScript.Names.Ident @ a)
                                     (Data.Map.Internal.Tip @ Language.PureScript.Names.Ident @ a))
                                  1# } } } } } }) -}
d6ebf83a6c61f2a7b2c9ddc7b4446302
  $sfromList1 ::
    [Language.PureScript.Names.Ident]
    -> Data.Set.Internal.Set Language.PureScript.Names.Ident
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [Language.PureScript.Names.Ident]) ->
                 case ds of wild {
                   [] -> Data.Set.Internal.Tip @ Language.PureScript.Names.Ident
                   : x ds1
                   -> case ds1 of wild1 {
                        []
                        -> case x of dt { DEFAULT ->
                           Data.Set.Internal.Bin
                             @ Language.PureScript.Names.Ident
                             1#
                             dt
                             (Data.Set.Internal.Tip @ Language.PureScript.Names.Ident)
                             (Data.Set.Internal.Tip @ Language.PureScript.Names.Ident) }
                        : ipv ipv1
                        -> case Language.PureScript.Names.$fOrdIdent_$c< x ipv of wild2 {
                             GHC.Types.False
                             -> case x of dt { DEFAULT ->
                                Language.PureScript.Renamer.$sfromList_$sgo4
                                  ipv
                                  ipv1
                                  (Data.Set.Internal.Bin
                                     @ Language.PureScript.Names.Ident
                                     1#
                                     dt
                                     (Data.Set.Internal.Tip @ Language.PureScript.Names.Ident)
                                     (Data.Set.Internal.Tip @ Language.PureScript.Names.Ident)) }
                             GHC.Types.True
                             -> case x of dt { DEFAULT ->
                                Language.PureScript.Renamer.$sfromList_$s$wgo3
                                  ipv
                                  ipv1
                                  (Data.Set.Internal.Bin
                                     @ Language.PureScript.Names.Ident
                                     1#
                                     dt
                                     (Data.Set.Internal.Tip @ Language.PureScript.Names.Ident)
                                     (Data.Set.Internal.Tip @ Language.PureScript.Names.Ident))
                                  1# } } } }) -}
4d0f3b61c9663097ce11d1c3e529a57f
  $sfromList_$s$wgo3 ::
    Language.PureScript.Names.Ident
    -> [Language.PureScript.Names.Ident]
    -> Data.Set.Internal.Set Language.PureScript.Names.Ident
    -> GHC.Prim.Int#
    -> Data.Set.Internal.Set Language.PureScript.Names.Ident
  {- Arity: 4, Strictness: <S,U><S,1*U><S,1*U><L,U> -}
90052dea9a9b39012329f744d927976b
  $sfromList_$s$wpoly_go13 ::
    Language.PureScript.Names.Ident
    -> a
    -> [(Language.PureScript.Names.Ident, a)]
    -> Data.Map.Internal.Map Language.PureScript.Names.Ident a
    -> GHC.Prim.Int#
    -> Data.Map.Internal.Map Language.PureScript.Names.Ident a
  {- Arity: 5, Strictness: <S,U><L,U><S,1*U><S,1*U><L,U> -}
92eea9c99d1bd7913dc1233f90f58963
  $sfromList_$sgo4 ::
    Language.PureScript.Names.Ident
    -> [Language.PureScript.Names.Ident]
    -> Data.Set.Internal.Set Language.PureScript.Names.Ident
    -> Data.Set.Internal.Set Language.PureScript.Names.Ident
  {- Arity: 3, Strictness: <S,U><S,1*U><S,1*U> -}
4b573fc166232baa8c532caef6f8ed69
  $sfromList_$spoly_go14 ::
    Language.PureScript.Names.Ident
    -> a
    -> [(Language.PureScript.Names.Ident, a)]
    -> Data.Map.Internal.Map Language.PureScript.Names.Ident a
    -> Data.Map.Internal.Map Language.PureScript.Names.Ident a
  {- Arity: 4, Strictness: <S,U><L,U><S,1*U><S,1*U> -}
5140601329be0d3a260724c5bff5b940
  $sinsert_$sgo13 ::
    Language.PureScript.Names.Ident
    -> Language.PureScript.Names.Ident
    -> a1
    -> Data.Map.Internal.Map Language.PureScript.Names.Ident a1
    -> Data.Map.Internal.Map Language.PureScript.Names.Ident a1
  {- Arity: 4, Strictness: <L,U><S,1*U><L,U><S,1*U> -}
063ca248014808e4842d65d47b4068b4
  $sinsert_$sgo3 ::
    Language.PureScript.Names.Ident
    -> Language.PureScript.Names.Ident
    -> Data.Set.Internal.Set Language.PureScript.Names.Ident
    -> Data.Set.Internal.Set Language.PureScript.Names.Ident
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U> -}
12db10c09bb201e53a939c7ba502b7eb
  $slookup1 ::
    Language.PureScript.Names.Ident
    -> Data.Map.Internal.Map Language.PureScript.Names.Ident a
    -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
53ed6594d4763572824286d9a3b67d1e
  $slookup_$spoly_go1 ::
    Data.Map.Internal.Map Language.PureScript.Names.Ident a
    -> GHC.Base.Maybe Data.Text.Internal.Text
    -> GHC.Integer.Type.Integer
    -> GHC.Base.Maybe a
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,1*U><L,U> -}
420d76587cda42677e39efae897e8d0c
  $slookup_$spoly_go13 ::
    Data.Map.Internal.Map Language.PureScript.Names.Ident a
    -> GHC.Base.Maybe a
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
e8c3b7f3b69f030d0a223a51e9966f6a
  $slookup_$spoly_go2 ::
    Data.Map.Internal.Map Language.PureScript.Names.Ident a
    -> Data.Text.Internal.Text -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U(U,U,U)> -}
66e3f773543dfc426c1c65ad3eb478be
  $smember_$sgo1 ::
    Data.Set.Internal.Set Language.PureScript.Names.Ident
    -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
21f21c3198a15d3194f0f6dd0515f3ff
  $smember_$sgo2 ::
    Data.Set.Internal.Set Language.PureScript.Names.Ident
    -> GHC.Base.Maybe Data.Text.Internal.Text
    -> GHC.Integer.Type.Integer
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,1*U><L,U> -}
f6b62d7a5624421faf794841b929a2e1
  $smember_$sgo3 ::
    Data.Set.Internal.Set Language.PureScript.Names.Ident
    -> Data.Text.Internal.Text -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U(U,U,U)> -}
fc2d60d5b4f9d61ee5bc0db6156aa7ea
  $smember_go3 ::
    Language.PureScript.Names.Ident
    -> Data.Set.Internal.Set Language.PureScript.Names.Ident
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
75fc6635d97b935bb554b27707a15aba
  $tc'RenameState :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12029325724317234668##
                   4974169535466096286##
                   Language.PureScript.Renamer.$trModule
                   Language.PureScript.Renamer.$tc'RenameState2
                   0#
                   Language.PureScript.Renamer.$tc'RenameState1) -}
b58f4f4225195c6790467d0ebf8cc76d
  $tc'RenameState1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
c6f3d2e065decfa524fe43f85c74866c
  $tc'RenameState2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Renamer.$tc'RenameState3) -}
17474efc09324f3108312a9138ef86ca
  $tc'RenameState3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'RenameState"#) -}
aef44d24e68507048f76f3e8687267f3
  $tcRenameState :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2593799632226932083##
                   9711063533610926111##
                   Language.PureScript.Renamer.$trModule
                   Language.PureScript.Renamer.$tcRenameState1
                   0#
                   GHC.Types.krep$*) -}
2da4543b7c981081e22a88bf3b42176c
  $tcRenameState1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Renamer.$tcRenameState2) -}
f1444ab81ce06864f48263d9388f75d9
  $tcRenameState2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("RenameState"#) -}
ad2f25c15613a5f3ee3576027df43ef0
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Language.PureScript.Renamer.$trModule3
                   Language.PureScript.Renamer.$trModule1) -}
5b0d759b1371a44b03d3880725becbf2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Renamer.$trModule2) -}
42afbd1cdacf19a6191ba6e7195affde
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Language.PureScript.Renamer"#) -}
aa76f12cbc194e2ee4954dcdfdd16d32
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Renamer.$trModule4) -}
434aeb99332a7372b46636a770af22da
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"#) -}
e1790a3ccee54c3d80cd83b7a8c3924b
  $wgo ::
    [((Language.PureScript.CoreFn.Ann.Ann,
       Language.PureScript.Names.Ident),
      Language.PureScript.CoreFn.Expr.Expr
        Language.PureScript.CoreFn.Ann.Ann)]
    -> Language.PureScript.Renamer.RenameState
    -> (# [((Language.PureScript.CoreFn.Ann.Ann,
             Language.PureScript.Names.Ident),
            Language.PureScript.CoreFn.Expr.Expr
              Language.PureScript.CoreFn.Ann.Ann)],
          Language.PureScript.Renamer.RenameState #)
  {- Arity: 2, Strictness: <S,1*U><L,U>, Inline: [0] -}
8ab39d39b4d946ae3e942d845d02e3cc
  type Rename =
    Control.Monad.Trans.State.Lazy.State
      Language.PureScript.Renamer.RenameState
    :: * -> *
2e8dcdc5ad90149391c9eeec09923d9f
  data RenameState
    = RenameState {rsBoundNames :: Data.Map.Internal.Map
                                     Language.PureScript.Names.Ident
                                     Language.PureScript.Names.Ident,
                   rsUsedNames :: Data.Set.Internal.Set
                                    Language.PureScript.Names.Ident}
13127d45d90ddf8e4e1a1e51a533a7d1
  renameInModules ::
    [Language.PureScript.CoreFn.Module.Module
       Language.PureScript.CoreFn.Ann.Ann]
    -> [Language.PureScript.CoreFn.Module.Module
          Language.PureScript.CoreFn.Ann.Ann]
  {- Arity: 1,
     Unfolding: (GHC.Base.map
                   @ (Language.PureScript.CoreFn.Module.Module
                        Language.PureScript.CoreFn.Ann.Ann)
                   @ (Language.PureScript.CoreFn.Module.Module
                        Language.PureScript.CoreFn.Ann.Ann)
                   Language.PureScript.Renamer.renameInModules_go) -}
4f4c2e0de60cf4eb47d603f3e61176b3
  renameInModules1 ::
    Language.PureScript.CoreFn.Expr.Bind
      (Language.PureScript.AST.SourcePos.SourceSpan,
       [Language.PureScript.Comments.Comment],
       GHC.Base.Maybe
         (Language.PureScript.Types.Type
            (Language.PureScript.AST.SourcePos.SourceSpan,
             [Language.PureScript.Comments.Comment])),
       GHC.Base.Maybe Language.PureScript.CoreFn.Meta.Meta)
    -> Language.PureScript.Renamer.RenameState
    -> Data.Functor.Identity.Identity
         (Language.PureScript.CoreFn.Expr.Bind
            Language.PureScript.CoreFn.Ann.Ann,
          Language.PureScript.Renamer.RenameState)
  {- Arity: 2, Strictness: <S,1*U><L,U>m,
     Unfolding: (\ (sc :: Language.PureScript.CoreFn.Expr.Bind
                            (Language.PureScript.AST.SourcePos.SourceSpan,
                             [Language.PureScript.Comments.Comment],
                             GHC.Base.Maybe
                               (Language.PureScript.Types.Type
                                  (Language.PureScript.AST.SourcePos.SourceSpan,
                                   [Language.PureScript.Comments.Comment])),
                             GHC.Base.Maybe Language.PureScript.CoreFn.Meta.Meta))
                   (eta :: Language.PureScript.Renamer.RenameState) ->
                 case sc of wild {
                   Language.PureScript.CoreFn.Expr.NonRec a name val
                   -> let {
                        ds :: Data.Functor.Identity.Identity
                                (Language.PureScript.CoreFn.Expr.Expr
                                   Language.PureScript.CoreFn.Ann.Ann,
                                 Language.PureScript.Renamer.RenameState)
                        = (Language.PureScript.Renamer.renameInValue val)
                            `cast`
                          (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <Language.PureScript.Renamer.RenameState>_N
                               <Data.Functor.Identity.Identity>_R
                               <Language.PureScript.CoreFn.Expr.Expr
                                  Language.PureScript.CoreFn.Ann.Ann>_N)
                            eta
                      } in
                      (Language.PureScript.CoreFn.Expr.NonRec
                         @ Language.PureScript.CoreFn.Ann.Ann
                         a
                         name
                         (case ds
                                 `cast`
                               (Data.Functor.Identity.N:Identity[0]
                                    <(Language.PureScript.CoreFn.Expr.Expr
                                        Language.PureScript.CoreFn.Ann.Ann,
                                      Language.PureScript.Renamer.RenameState)>_R) of wild1 { (,) a1 s' ->
                          a1 }),
                       case ds
                              `cast`
                            (Data.Functor.Identity.N:Identity[0]
                                 <(Language.PureScript.CoreFn.Expr.Expr
                                     Language.PureScript.CoreFn.Ann.Ann,
                                   Language.PureScript.Renamer.RenameState)>_R) of wild1 { (,) a1 s' ->
                       s' })
                        `cast`
                      (Sym (Data.Functor.Identity.N:Identity[0]
                                <(Language.PureScript.CoreFn.Expr.Bind
                                    Language.PureScript.CoreFn.Ann.Ann,
                                  Language.PureScript.Renamer.RenameState)>_R))
                   Language.PureScript.CoreFn.Expr.Rec ds
                   -> letrec {
                        go8 :: [((Language.PureScript.CoreFn.Ann.Ann,
                                  Language.PureScript.Names.Ident),
                                 Language.PureScript.CoreFn.Expr.Expr
                                   Language.PureScript.CoreFn.Ann.Ann)]
                               -> Language.PureScript.Renamer.RenameState
                               -> Data.Functor.Identity.Identity
                                    ([((Language.PureScript.CoreFn.Ann.Ann,
                                        Language.PureScript.Names.Ident),
                                       Language.PureScript.CoreFn.Expr.Expr
                                         Language.PureScript.CoreFn.Ann.Ann)],
                                     Language.PureScript.Renamer.RenameState)
                          {- Arity: 2, Strictness: <S,1*U><L,U>m -}
                        = \ (ds1 :: [((Language.PureScript.CoreFn.Ann.Ann,
                                       Language.PureScript.Names.Ident),
                                      Language.PureScript.CoreFn.Expr.Expr
                                        Language.PureScript.CoreFn.Ann.Ann)])
                            (eta1 :: Language.PureScript.Renamer.RenameState) ->
                          case ds1 of wild1 {
                            []
                            -> (Language.PureScript.Renamer.renameInModules2 eta1)
                                 `cast`
                               (Sym (Data.Functor.Identity.N:Identity[0]
                                         <([((Language.PureScript.CoreFn.Ann.Ann,
                                              Language.PureScript.Names.Ident),
                                             Language.PureScript.CoreFn.Expr.Expr
                                               Language.PureScript.CoreFn.Ann.Ann)],
                                           Language.PureScript.Renamer.RenameState)>_R))
                            : y ys
                            -> let {
                                 ds2 :: Data.Functor.Identity.Identity
                                          ([((Language.PureScript.CoreFn.Ann.Ann,
                                              Language.PureScript.Names.Ident),
                                             Language.PureScript.CoreFn.Expr.Expr
                                               Language.PureScript.CoreFn.Ann.Ann)],
                                           Language.PureScript.Renamer.RenameState)
                                 = go8
                                     ys
                                     (case y of wild2 { (,) ds3 val ->
                                      case ds3 of wild3 { (,) a name -> eta1 } })
                               } in
                               (GHC.Types.:
                                  @ ((Language.PureScript.CoreFn.Ann.Ann,
                                      Language.PureScript.Names.Ident),
                                     Language.PureScript.CoreFn.Expr.Expr
                                       Language.PureScript.CoreFn.Ann.Ann)
                                  (case y of wild2 { (,) ds3 val ->
                                   case ds3 of wild3 { (,) a name -> ((a, name), val) } })
                                  (case ds2
                                          `cast`
                                        (Data.Functor.Identity.N:Identity[0]
                                             <([((Language.PureScript.CoreFn.Ann.Ann,
                                                  Language.PureScript.Names.Ident),
                                                 Language.PureScript.CoreFn.Expr.Expr
                                                   Language.PureScript.CoreFn.Ann.Ann)],
                                               Language.PureScript.Renamer.RenameState)>_R) of wild2 { (,) x1 s'' ->
                                   x1 }),
                                case ds2
                                       `cast`
                                     (Data.Functor.Identity.N:Identity[0]
                                          <([((Language.PureScript.CoreFn.Ann.Ann,
                                               Language.PureScript.Names.Ident),
                                              Language.PureScript.CoreFn.Expr.Expr
                                                Language.PureScript.CoreFn.Ann.Ann)],
                                            Language.PureScript.Renamer.RenameState)>_R) of wild2 { (,) x1 s'' ->
                                s'' })
                                 `cast`
                               (Sym (Data.Functor.Identity.N:Identity[0]
                                         <([((Language.PureScript.CoreFn.Ann.Ann,
                                              Language.PureScript.Names.Ident),
                                             Language.PureScript.CoreFn.Expr.Expr
                                               Language.PureScript.CoreFn.Ann.Ann)],
                                           Language.PureScript.Renamer.RenameState)>_R)) }
                      } in
                      let {
                        ds1 :: Data.Functor.Identity.Identity
                                 ([((Language.PureScript.CoreFn.Ann.Ann,
                                     Language.PureScript.Names.Ident),
                                    Language.PureScript.CoreFn.Expr.Expr
                                      Language.PureScript.CoreFn.Ann.Ann)],
                                  Language.PureScript.Renamer.RenameState)
                        = case (go8 ds eta)
                                 `cast`
                               (Data.Functor.Identity.N:Identity[0]
                                    <([((Language.PureScript.CoreFn.Ann.Ann,
                                         Language.PureScript.Names.Ident),
                                        Language.PureScript.CoreFn.Expr.Expr
                                          Language.PureScript.CoreFn.Ann.Ann)],
                                      Language.PureScript.Renamer.RenameState)>_R) of wild1 { (,) a1 s' ->
                          case Language.PureScript.Renamer.$wgo
                                 a1
                                 s' of ww { (#,#) ww1 ww2 ->
                          (ww1, ww2)
                            `cast`
                          (Sym (Data.Functor.Identity.N:Identity[0]
                                    <([((Language.PureScript.CoreFn.Ann.Ann,
                                         Language.PureScript.Names.Ident),
                                        Language.PureScript.CoreFn.Expr.Expr
                                          Language.PureScript.CoreFn.Ann.Ann)],
                                      Language.PureScript.Renamer.RenameState)>_R)) } }
                      } in
                      (Language.PureScript.CoreFn.Expr.Rec
                         @ Language.PureScript.CoreFn.Ann.Ann
                         (case ds1
                                 `cast`
                               (Data.Functor.Identity.N:Identity[0]
                                    <([((Language.PureScript.CoreFn.Ann.Ann,
                                         Language.PureScript.Names.Ident),
                                        Language.PureScript.CoreFn.Expr.Expr
                                          Language.PureScript.CoreFn.Ann.Ann)],
                                      Language.PureScript.Renamer.RenameState)>_R) of wild1 { (,) a1 s' ->
                          a1 }),
                       case ds1
                              `cast`
                            (Data.Functor.Identity.N:Identity[0]
                                 <([((Language.PureScript.CoreFn.Ann.Ann,
                                      Language.PureScript.Names.Ident),
                                     Language.PureScript.CoreFn.Expr.Expr
                                       Language.PureScript.CoreFn.Ann.Ann)],
                                   Language.PureScript.Renamer.RenameState)>_R) of wild1 { (,) a1 s' ->
                       s' })
                        `cast`
                      (Sym (Data.Functor.Identity.N:Identity[0]
                                <(Language.PureScript.CoreFn.Expr.Bind
                                    Language.PureScript.CoreFn.Ann.Ann,
                                  Language.PureScript.Renamer.RenameState)>_R)) }) -}
96f128da53336890ff75dfe52c0465ec
  renameInModules2 ::
    Language.PureScript.Renamer.RenameState
    -> ([((Language.PureScript.CoreFn.Ann.Ann,
           Language.PureScript.Names.Ident),
          Language.PureScript.CoreFn.Expr.Expr
            Language.PureScript.CoreFn.Ann.Ann)],
        Language.PureScript.Renamer.RenameState)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (s1 :: Language.PureScript.Renamer.RenameState) ->
                 (GHC.Types.[]
                    @ ((Language.PureScript.CoreFn.Ann.Ann,
                        Language.PureScript.Names.Ident),
                       Language.PureScript.CoreFn.Expr.Expr
                         Language.PureScript.CoreFn.Ann.Ann),
                  s1)) -}
139b852937b42ec93d0d218997f5a2d5
  renameInModules_go ::
    Language.PureScript.CoreFn.Module.Module
      Language.PureScript.CoreFn.Ann.Ann
    -> Language.PureScript.CoreFn.Module.Module
         Language.PureScript.CoreFn.Ann.Ann
  {- Arity: 1, Strictness: <S,1*U(U,U,U,U,U,U,U,U)>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.PureScript.CoreFn.Module.Module
                           Language.PureScript.CoreFn.Ann.Ann) ->
                 case w of ww { Language.PureScript.CoreFn.Module.Module ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 Language.PureScript.CoreFn.Module.Module
                   @ Language.PureScript.CoreFn.Ann.Ann
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   (GHC.Base.map
                      @ (Language.PureScript.CoreFn.Expr.Bind
                           Language.PureScript.CoreFn.Ann.Ann)
                      @ (Language.PureScript.CoreFn.Expr.Bind
                           Language.PureScript.CoreFn.Ann.Ann)
                      (let {
                         scope :: [Language.PureScript.Names.Ident]
                         = Language.PureScript.Renamer.renameInModules_go1 ww8
                       } in
                       let {
                         x :: Data.Map.Internal.Map
                                Language.PureScript.Names.Ident Language.PureScript.Names.Ident
                         = Language.PureScript.Renamer.$sfromList
                             @ Language.PureScript.Names.Ident
                             (GHC.List.zip
                                @ Language.PureScript.Names.Ident
                                @ Language.PureScript.Names.Ident
                                scope
                                scope)
                       } in
                       let {
                         x1 :: Data.Set.Internal.Set Language.PureScript.Names.Ident
                         = Language.PureScript.Renamer.$sfromList1 scope
                       } in
                       let {
                         x2 :: Language.PureScript.Renamer.RenameState
                         = Language.PureScript.Renamer.RenameState x x1
                       } in
                       \ (x3 :: Language.PureScript.CoreFn.Expr.Bind
                                  Language.PureScript.CoreFn.Ann.Ann) ->
                       case (Language.PureScript.Renamer.renameInModules1 x3 x2)
                              `cast`
                            (Data.Functor.Identity.N:Identity[0]
                                 <(Language.PureScript.CoreFn.Expr.Bind
                                     Language.PureScript.CoreFn.Ann.Ann,
                                   Language.PureScript.Renamer.RenameState)>_R) of wild { (,) x4 ds1 ->
                       x4 })
                      ww8) }) -}
53ff1414a6a2ec961b5bc9ed31834e9b
  renameInModules_go1 ::
    [Language.PureScript.CoreFn.Expr.Bind
       Language.PureScript.CoreFn.Ann.Ann]
    -> [Language.PureScript.Names.Ident]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
ac459cc2767dad501040d4e7afb0a7a0
  renameInValue ::
    Language.PureScript.CoreFn.Expr.Expr
      Language.PureScript.CoreFn.Ann.Ann
    -> Language.PureScript.Renamer.Rename
         (Language.PureScript.CoreFn.Expr.Expr
            Language.PureScript.CoreFn.Ann.Ann)
  {- Arity: 1, Strictness: <S,1*U> -}
2e8dcdc5ad90149391c9eeec09923d9f
  rsBoundNames ::
    Language.PureScript.Renamer.RenameState
    -> Data.Map.Internal.Map
         Language.PureScript.Names.Ident Language.PureScript.Names.Ident
  RecSel Left Language.PureScript.Renamer.RenameState
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Renamer.RenameState) ->
                 case ds of wild { Language.PureScript.Renamer.RenameState ds1 ds2 ->
                 ds1 }) -}
2e8dcdc5ad90149391c9eeec09923d9f
  rsUsedNames ::
    Language.PureScript.Renamer.RenameState
    -> Data.Set.Internal.Set Language.PureScript.Names.Ident
  RecSel Left Language.PureScript.Renamer.RenameState
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Renamer.RenameState) ->
                 case ds of wild { Language.PureScript.Renamer.RenameState ds1 ds2 ->
                 ds2 }) -}
"SC:go30" forall (sc :: Data.Set.Internal.Set
                          Language.PureScript.Names.Ident)
                 (sc1 :: Data.Text.Internal.Text)
  Language.PureScript.Renamer.$smember_go3 (Language.PureScript.Names.Ident
                                              sc1)
                                           sc
  = Language.PureScript.Renamer.$smember_$sgo3 sc sc1
"SC:go31" forall (sc :: Data.Set.Internal.Set
                          Language.PureScript.Names.Ident)
                 (sc1 :: GHC.Base.Maybe Data.Text.Internal.Text)
                 (sc2 :: GHC.Integer.Type.Integer)
  Language.PureScript.Renamer.$smember_go3 (Language.PureScript.Names.GenIdent
                                              sc1
                                              sc2)
                                           sc
  = Language.PureScript.Renamer.$smember_$sgo2 sc sc1 sc2
"SC:go32" forall (sc :: Data.Set.Internal.Set
                          Language.PureScript.Names.Ident)
  Language.PureScript.Renamer.$smember_go3 Language.PureScript.Names.UnusedIdent
                                           sc
  = Language.PureScript.Renamer.$smember_$sgo1 sc
"SC:poly_go130" forall @ a
                       (sc :: Data.Map.Internal.Map Language.PureScript.Names.Ident a)
                       (sc1 :: Data.Text.Internal.Text)
  Language.PureScript.Renamer.$slookup1 @ a
                                        (Language.PureScript.Names.Ident sc1)
                                        sc
  = Language.PureScript.Renamer.$slookup_$spoly_go2 @ a sc sc1
"SC:poly_go131" forall @ a
                       (sc :: Data.Map.Internal.Map Language.PureScript.Names.Ident a)
                       (sc1 :: GHC.Base.Maybe Data.Text.Internal.Text)
                       (sc2 :: GHC.Integer.Type.Integer)
  Language.PureScript.Renamer.$slookup1 @ a
                                        (Language.PureScript.Names.GenIdent sc1 sc2)
                                        sc
  = Language.PureScript.Renamer.$slookup_$spoly_go1 @ a sc sc1 sc2
"SC:poly_go132" forall @ a
                       (sc :: Data.Map.Internal.Map Language.PureScript.Names.Ident a)
  Language.PureScript.Renamer.$slookup1 @ a
                                        Language.PureScript.Names.UnusedIdent
                                        sc
  = Language.PureScript.Renamer.$slookup_$spoly_go13 @ a sc
"SPEC/Language.PureScript.Renamer fromList @ Ident" [orphan] forall ($dOrd :: GHC.Classes.Ord
                                                                                Language.PureScript.Names.Ident)
  Data.Set.Internal.fromList @ Language.PureScript.Names.Ident $dOrd
  = Language.PureScript.Renamer.$sfromList1
"SPEC/Language.PureScript.Renamer fromList @ Ident _" [orphan] forall @ a
                                                                      ($dOrd :: GHC.Classes.Ord
                                                                                  Language.PureScript.Names.Ident)
  Data.Map.Internal.fromList @ Language.PureScript.Names.Ident
                             @ a
                             $dOrd
  = Language.PureScript.Renamer.$sfromList @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

