
==================== FINAL INTERFACE ====================
2019-01-24 14:16:49.462331 UTC

interface purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Hierarchy 8043
  interface hash: f24c1348346f617c01e01a92bfc0d3c7
  ABI hash: fad6b7934ef03b79e9cb7d2a8da51718
  export-list hash: 5f66d29aa05c28bf22070c6abb4cd568
  orphan hash: 711f21295aa2bc660a1f38665766615a
  flag hash: 2ae478d21823b7c739b1b08c46262eb0
  opt_hash: 2c98c95d41c045ae9c2fb565ec8aabc6
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Language.PureScript.Hierarchy.prettyPrint
  Language.PureScript.Hierarchy.runModuleName
  Language.PureScript.Hierarchy.superClasses
  Language.PureScript.Hierarchy.typeClassBody
  Language.PureScript.Hierarchy.typeClassEpilogue
  Language.PureScript.Hierarchy.typeClassGraph
  Language.PureScript.Hierarchy.typeClassPrologue
  Language.PureScript.Hierarchy.typeClasses
  Language.PureScript.Hierarchy.Digraph{Language.PureScript.Hierarchy.Digraph _unDigraph}
  Language.PureScript.Hierarchy.Graph{Language.PureScript.Hierarchy.Graph digraph graphName}
  Language.PureScript.Hierarchy.GraphName{Language.PureScript.Hierarchy.GraphName _unGraphName}
  Language.PureScript.Hierarchy.SuperMap{Language.PureScript.Hierarchy.SuperMap _unSuperMap}
module dependencies: Control.Monad.Logger Control.Monad.Supply
                     Control.Monad.Supply.Class Language.PureScript
                     Language.PureScript.AST Language.PureScript.AST.Binders
                     Language.PureScript.AST.Declarations
                     Language.PureScript.AST.Exported Language.PureScript.AST.Literals
                     Language.PureScript.AST.Operators Language.PureScript.AST.SourcePos
                     Language.PureScript.AST.Traversals Language.PureScript.Bundle
                     Language.PureScript.CodeGen.JS
                     Language.PureScript.CodeGen.JS.Common
                     Language.PureScript.CodeGen.JS.Printer Language.PureScript.Comments
                     Language.PureScript.Constants Language.PureScript.CoreFn
                     Language.PureScript.CoreFn.Ann Language.PureScript.CoreFn.Binders
                     Language.PureScript.CoreFn.Desugar Language.PureScript.CoreFn.Expr
                     Language.PureScript.CoreFn.Meta Language.PureScript.CoreFn.Module
                     Language.PureScript.CoreFn.Optimizer
                     Language.PureScript.CoreFn.ToJSON
                     Language.PureScript.CoreFn.Traversals
                     Language.PureScript.CoreImp.AST
                     Language.PureScript.CoreImp.Optimizer
                     Language.PureScript.CoreImp.Optimizer.Blocks
                     Language.PureScript.CoreImp.Optimizer.Common
                     Language.PureScript.CoreImp.Optimizer.Inliner
                     Language.PureScript.CoreImp.Optimizer.MagicDo
                     Language.PureScript.CoreImp.Optimizer.TCO
                     Language.PureScript.CoreImp.Optimizer.Unused
                     Language.PureScript.Crash Language.PureScript.Environment
                     Language.PureScript.Errors Language.PureScript.Externs
                     Language.PureScript.Kinds Language.PureScript.Label
                     Language.PureScript.Linter Language.PureScript.Linter.Exhaustive
                     Language.PureScript.Linter.Imports Language.PureScript.Make
                     Language.PureScript.Make.Actions Language.PureScript.Make.BuildPlan
                     Language.PureScript.Make.Monad
                     Language.PureScript.ModuleDependencies Language.PureScript.Names
                     Language.PureScript.Options Language.PureScript.PSString
                     Language.PureScript.Parser Language.PureScript.Parser.Common
                     Language.PureScript.Parser.Declarations
                     Language.PureScript.Parser.Kinds Language.PureScript.Parser.Lexer
                     Language.PureScript.Parser.State Language.PureScript.Parser.Types
                     Language.PureScript.Pretty Language.PureScript.Pretty.Common
                     Language.PureScript.Pretty.Kinds Language.PureScript.Pretty.Types
                     Language.PureScript.Pretty.Values
                     Language.PureScript.Publish.BoxesHelpers
                     Language.PureScript.Renamer Language.PureScript.Sugar
                     Language.PureScript.Sugar.AdoNotation
                     Language.PureScript.Sugar.BindingGroups
                     Language.PureScript.Sugar.CaseDeclarations
                     Language.PureScript.Sugar.DoNotation
                     Language.PureScript.Sugar.LetPattern
                     Language.PureScript.Sugar.Names
                     Language.PureScript.Sugar.Names.Common
                     Language.PureScript.Sugar.Names.Env
                     Language.PureScript.Sugar.Names.Exports
                     Language.PureScript.Sugar.Names.Imports
                     Language.PureScript.Sugar.ObjectWildcards
                     Language.PureScript.Sugar.Operators
                     Language.PureScript.Sugar.Operators.Binders
                     Language.PureScript.Sugar.Operators.Common
                     Language.PureScript.Sugar.Operators.Expr
                     Language.PureScript.Sugar.Operators.Types
                     Language.PureScript.Sugar.TypeClasses
                     Language.PureScript.Sugar.TypeClasses.Deriving
                     Language.PureScript.Sugar.TypeDeclarations
                     Language.PureScript.Traversals Language.PureScript.TypeChecker
                     Language.PureScript.TypeChecker.Entailment
                     Language.PureScript.TypeChecker.Kinds
                     Language.PureScript.TypeChecker.Monad
                     Language.PureScript.TypeChecker.Skolems
                     Language.PureScript.TypeChecker.Subsumption
                     Language.PureScript.TypeChecker.Synonyms
                     Language.PureScript.TypeChecker.TypeSearch
                     Language.PureScript.TypeChecker.Types
                     Language.PureScript.TypeChecker.Unify
                     Language.PureScript.TypeClassDictionaries Language.PureScript.Types
                     Paths_purescript
package dependencies: aeson-1.3.1.1 ansi-terminal-0.8.0.4
                      array-0.5.2.0 async-2.2.1 attoparsec-0.13.2.2 base-4.11.1.0
                      base-compat-0.10.4 binary-0.8.5.1 blaze-builder-0.4.1.0 boxes-0.1.5
                      bytestring-0.10.8.2 colour-2.3.4 containers-0.5.11.0
                      data-ordlist-0.4.7.0 deepseq-1.4.3.0 directory-1.3.1.5
                      dlist-0.8.0.4 filepath-1.4.2 ghc-boot-th-8.4.3 ghc-prim-0.5.2.0
                      hashable-1.2.7.0 integer-gmp-1.0.2.0 integer-logarithms-1.0.2.1
                      language-javascript-0.6.0.11 lifted-base-0.2.3.12 microlens-0.4.9.1
                      microlens-ghc-0.4.9 microlens-mtl-0.1.11.1
                      microlens-platform-0.3.10 microlens-th-0.4.2.1
                      monad-control-1.0.2.3 mtl-2.2.2 parallel-3.2.1.1 parsec-3.1.13.0
                      pattern-arrows-0.0.2 pretty-1.1.3.6 primitive-0.6.3.0
                      protolude-0.2.2 random-1.1 safe-0.3.17 scientific-0.3.6.2
                      sourcemap-0.1.6 split-0.2.3.3 stm-2.4.5.0 syb-0.7 tagged-0.8.5
                      template-haskell-2.13.0.0 text-1.2.3.0 th-abstraction-0.2.8.0
                      time-1.8.0.2 time-locale-compat-0.1.1.4 transformers-0.5.5.0
                      transformers-base-0.4.5.2 unix-2.7.2.2 unordered-containers-0.2.9.0
                      utf8-string-1.0.1.1 uuid-types-1.0.3 vector-0.12.0.1
orphans: syb-0.7:Data.Generics.Instances colour-2.3.4:Data.Colour
         stm-2.4.5.0:Control.Monad.STM
         attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         microlens-platform-0.3.10:Lens.Micro.Platform
         microlens-ghc-0.4.9:Lens.Micro.GHC
         hashable-1.2.7.0:Data.Hashable.Generic
         vector-0.12.0.1:Data.Vector.Unboxed
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.5.0:Control.Monad.Trans.Error
         text-1.2.3.0:Data.Text.Lazy text-1.2.3.0:Data.Text
         binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: aeson-1.3.1.1:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.Graph
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         dlist-0.8.0.4:Data.DList ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         microlens-0.4.9.1:Lens.Micro.Internal
                         microlens-ghc-0.4.9:Lens.Micro.GHC
                         microlens-mtl-0.1.11.1:Lens.Micro.Mtl.Internal
                         microlens-platform-0.3.10:Lens.Micro.Platform
                         monad-control-1.0.2.3:Control.Monad.Trans.Control
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Control.Monad.Logger
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.Declarations
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.Operators
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.SourcePos
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Comments
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Environment
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Kinds
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Label
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Make.Monad
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Names
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.PSString
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.TypeClassDictionaries
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Types
                         tagged-0.8.5:Data.Tagged
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
                         th-abstraction-0.2.8.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  base-4.11.1.0:Data.Either 39d922b371c4c52d426e9ee66de8371a
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.Functor f522c3501272159820fd6f242510732f
import  -/  base-4.11.1.0:Data.List 83dc843e47bfc0c5af51e19c6f3476d5
import  -/  base-4.11.1.0:Data.OldList 1b35aa3c6805ff7c8887a35a866fe006
import  -/  base-4.11.1.0:Data.Tuple 3af66f3ac61ed95ba8a3a3f68ebc5003
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-compat-0.10.4:Prelude.Compat bb6796186ed35a1d09dc34362a3fc27e
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  protolude-0.2.2:Protolude 2c2d16096c8a60f59f646a3b93b0eb7b
import  -/  protolude-0.2.2:Protolude.List 3a80368167450d7a4360ebf1ea443345
import  -/  Language.PureScript 4a24ccd892adbf021daf2410ebd61e22
  exports: 139dcaa90af8ddcee6aa0492159f351d
import  -/  Language.PureScript.AST.Declarations 586bc75044e8737d02875208d17d4395
  Declaration e92f6ee78a22c0eadc3566d7d1f48d5b
  Module 305128e30e200d34d712365aa2d509df
  Module 3342e00ee072addfd009ee61e87fb865
  TypeClassDeclaration 19936abcaf3693a6825ccbc13b2590dc
import  -/  Language.PureScript.Names 00f694509122478d97b327fbbccae327
  ClassName c5d98a635cb261f6a93bf01096d0c6ed
  ModuleName e77bf9e056798332a9668212060e8e06
  ModuleName 1b2ddf0c04464d2fa2588925f10c1966
  ProperName a7268334e0b909381550b9329cb80fcc
  Qualified b6e1bc9e7244a41d3c6149c9b5c2d6d8
  runProperName a7268334e0b909381550b9329cb80fcc
import  -/  Language.PureScript.Types 80a51f62cb3e6c71f024289b88f07b7f
  Constraint a0b1e737f9fdb5b2f711c97dd5895f69
import  -/  text-1.2.3.0:Data.Text 7daa7e6c9b39d8cc1679e5ec5c64d2be
import  -/  text-1.2.3.0:Data.Text.Internal 30a0a123f71f63b26cd34c6b24f23411
2d51ba0b03e77e97f81353e5d2f94b99
  $fEqDigraph :: GHC.Classes.Eq Language.PureScript.Hierarchy.Digraph
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Hierarchy.Digraph
                  Data.Text.$fEqText_$c==
                    `cast`
                  (Sym (Language.PureScript.Hierarchy.N:Digraph[0])
                   ->_R Sym (Language.PureScript.Hierarchy.N:Digraph[0])
                   ->_R <GHC.Types.Bool>_R)
                  Data.Text.$fEqText_$c/=
                    `cast`
                  (Sym (Language.PureScript.Hierarchy.N:Digraph[0])
                   ->_R Sym (Language.PureScript.Hierarchy.N:Digraph[0])
                   ->_R <GHC.Types.Bool>_R) -}
8da3608d4e0e707f6d9c2b80ebf52281
  $fEqGraph :: GHC.Classes.Eq Language.PureScript.Hierarchy.Graph
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Hierarchy.Graph
                  Language.PureScript.Hierarchy.$fEqGraph_$c==
                  Language.PureScript.Hierarchy.$fEqGraph_$c/= -}
70221964a1d62df4f122a19a7ef7f612
  $fEqGraphName ::
    GHC.Classes.Eq Language.PureScript.Hierarchy.GraphName
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Hierarchy.GraphName
                  Data.Text.$fEqText_$c==
                    `cast`
                  (Sym (Language.PureScript.Hierarchy.N:GraphName[0])
                   ->_R Sym (Language.PureScript.Hierarchy.N:GraphName[0])
                   ->_R <GHC.Types.Bool>_R)
                  Data.Text.$fEqText_$c/=
                    `cast`
                  (Sym (Language.PureScript.Hierarchy.N:GraphName[0])
                   ->_R Sym (Language.PureScript.Hierarchy.N:GraphName[0])
                   ->_R <GHC.Types.Bool>_R) -}
8da3608d4e0e707f6d9c2b80ebf52281
  $fEqGraph_$c/= ::
    Language.PureScript.Hierarchy.Graph
    -> Language.PureScript.Hierarchy.Graph -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LLS)L),1*U(1*U(U,U,U),1*U(U,U,U))><S(S(LLS)L),1*U(1*U(U,U,U),1*U(U,U,U))>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Hierarchy.Graph)
                   (y :: Language.PureScript.Hierarchy.Graph) ->
                 case Language.PureScript.Hierarchy.$fEqGraph_$c== x y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
8da3608d4e0e707f6d9c2b80ebf52281
  $fEqGraph_$c== ::
    Language.PureScript.Hierarchy.Graph
    -> Language.PureScript.Hierarchy.Graph -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)L),1*U(1*U(U,U,U),1*U(U,U,U))><S(S(SSS)L),1*U(1*U(U,U,U),1*U(U,U,U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Hierarchy.Graph)
                   (w1 :: Language.PureScript.Hierarchy.Graph) ->
                 case w of ww { Language.PureScript.Hierarchy.Graph ww1 ww2 ->
                 case ww1
                        `cast`
                      (Language.PureScript.Hierarchy.N:GraphName[0]) of ww3 { Data.Text.Internal.Text ww4 ww5 ww6 ->
                 case w1 of ww7 { Language.PureScript.Hierarchy.Graph ww8 ww9 ->
                 case ww8
                        `cast`
                      (Language.PureScript.Hierarchy.N:GraphName[0]) of ww10 { Data.Text.Internal.Text ww11 ww12 ww13 ->
                 Language.PureScript.Hierarchy.$w$c==
                   ww4
                   ww5
                   ww6
                   ww2
                   ww11
                   ww12
                   ww13
                   ww9 } } } }) -}
1182d4f6d53c8d52eaf5c1a7efcda606
  $fEqSuperMap ::
    GHC.Classes.Eq Language.PureScript.Hierarchy.SuperMap
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Hierarchy.SuperMap
                  Language.PureScript.Hierarchy.$fEqSuperMap1
                    `cast`
                  (Sym (Language.PureScript.Hierarchy.N:SuperMap[0])
                   ->_R Sym (Language.PureScript.Hierarchy.N:SuperMap[0])
                   ->_R <GHC.Types.Bool>_R)
                  Language.PureScript.Hierarchy.$fEqSuperMap_$s$fEqEither_$c/=
                    `cast`
                  (Sym (Language.PureScript.Hierarchy.N:SuperMap[0])
                   ->_R Sym (Language.PureScript.Hierarchy.N:SuperMap[0])
                   ->_R <GHC.Types.Bool>_R) -}
79ee7b651282537db3a5acbd2004d29e
  $fEqSuperMap1 ::
    Data.Either.Either
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName,
       Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
    -> Data.Either.Either
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName,
          Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Data.Either.Either
                            (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.ClassName)
                            (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.ClassName,
                             Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.ClassName))
                   (ds1 :: Data.Either.Either
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ClassName)
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ClassName,
                              Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ClassName)) ->
                 case ds of wild {
                   Data.Either.Left a1
                   -> case ds1 of wild1 {
                        Data.Either.Left b1
                        -> Data.Text.$fEqText_$c==
                             a1
                               `cast`
                             (Language.PureScript.Names.N:ProperName[0]
                                  <'Language.PureScript.Names.ClassName>_P)
                             b1
                               `cast`
                             (Language.PureScript.Names.N:ProperName[0]
                                  <'Language.PureScript.Names.ClassName>_P)
                        Data.Either.Right ipv -> GHC.Types.False }
                   Data.Either.Right a1
                   -> case ds1 of wild1 {
                        Data.Either.Left ipv -> GHC.Types.False
                        Data.Either.Right b1
                        -> case a1 of ww { (,) ww1 ww2 ->
                           case b1 of ww3 { (,) ww4 ww5 ->
                           case ww1
                                  `cast`
                                (Language.PureScript.Names.N:ProperName[0]
                                     <'Language.PureScript.Names.ClassName>_P) of wild2 { Data.Text.Internal.Text dt dt1 dt2 ->
                           case ww4
                                  `cast`
                                (Language.PureScript.Names.N:ProperName[0]
                                     <'Language.PureScript.Names.ClassName>_P) of wild3 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                           case GHC.Prim.==# dt2 dt5 of lwild {
                             DEFAULT -> GHC.Types.False
                             1#
                             -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.ByteArray#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.State# GHC.Prim.RealWorld
                                                               -> (# GHC.Prim.State#
                                                                       GHC.Prim.RealWorld,
                                                                     GHC.Prim.Int# #)}
                                       dt
                                       (GHC.Prim.int2Word# dt1)
                                       dt3
                                       (GHC.Prim.int2Word# dt4)
                                       (GHC.Prim.int2Word# dt2)
                                       GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                                case GHC.Prim.narrow32Int# ds3 of wild4 {
                                  DEFAULT -> GHC.Types.False
                                  0#
                                  -> Data.Text.$fEqText_$c==
                                       ww2
                                         `cast`
                                       (Language.PureScript.Names.N:ProperName[0]
                                            <'Language.PureScript.Names.ClassName>_P)
                                       ww5
                                         `cast`
                                       (Language.PureScript.Names.N:ProperName[0]
                                            <'Language.PureScript.Names.ClassName>_P) } } } } } } } } }) -}
32429cbc436ff1a0acabfef318816337
  $fEqSuperMap_$s$fEqEither_$c/= ::
    Data.Either.Either
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName,
       Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
    -> Data.Either.Either
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName,
          Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Data.Either.Either
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ClassName)
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ClassName,
                            Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ClassName))
                   (y :: Data.Either.Either
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ClassName)
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ClassName,
                            Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ClassName)) ->
                 case x of wild {
                   Data.Either.Left a1
                   -> case y of wild1 {
                        Data.Either.Left b1
                        -> case a1
                                  `cast`
                                (Language.PureScript.Names.N:ProperName[0]
                                     <'Language.PureScript.Names.ClassName>_P) of wild2 { Data.Text.Internal.Text dt dt1 dt2 ->
                           case b1
                                  `cast`
                                (Language.PureScript.Names.N:ProperName[0]
                                     <'Language.PureScript.Names.ClassName>_P) of wild3 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                           case GHC.Classes.eqInt
                                  (GHC.Types.I# dt2)
                                  (GHC.Types.I# dt5) of wild4 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True
                             -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.ByteArray#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.State# GHC.Prim.RealWorld
                                                               -> (# GHC.Prim.State#
                                                                       GHC.Prim.RealWorld,
                                                                     GHC.Prim.Int# #)}
                                       dt
                                       (GHC.Prim.int2Word# dt1)
                                       dt3
                                       (GHC.Prim.int2Word# dt4)
                                       (GHC.Prim.int2Word# dt2)
                                       GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                                case GHC.Int.eqInt32
                                       (GHC.Int.I32# (GHC.Prim.narrow32Int# ds3))
                                       (GHC.Int.I32# 0#) of wild6 {
                                  GHC.Types.False -> GHC.Types.True
                                  GHC.Types.True -> GHC.Types.False } } } } }
                        Data.Either.Right ipv -> GHC.Types.True }
                   Data.Either.Right a1
                   -> case y of wild1 {
                        Data.Either.Left ipv -> GHC.Types.True
                        Data.Either.Right b1
                        -> case GHC.Classes.$fEq(,)_$c==
                                  @ (Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.ClassName)
                                  @ (Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.ClassName)
                                  (Language.PureScript.Names.$fEqProperName
                                     @ 'Language.PureScript.Names.ClassName)
                                  (Language.PureScript.Names.$fEqProperName
                                     @ 'Language.PureScript.Names.ClassName)
                                  a1
                                  b1 of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False } } }) -}
1182d4f6d53c8d52eaf5c1a7efcda606
  $fOrdSuperMap ::
    GHC.Classes.Ord Language.PureScript.Hierarchy.SuperMap
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Hierarchy.SuperMap
                  Language.PureScript.Hierarchy.$fEqSuperMap
                  Language.PureScript.Hierarchy.$fOrdSuperMap_$ccompare
                  Language.PureScript.Hierarchy.$fOrdSuperMap_$c<
                  Language.PureScript.Hierarchy.$fOrdSuperMap_$c<=
                  Language.PureScript.Hierarchy.$fOrdSuperMap_$c>
                  Language.PureScript.Hierarchy.$fOrdSuperMap_$c>=
                  Language.PureScript.Hierarchy.$fOrdSuperMap_$cmax
                  Language.PureScript.Hierarchy.$fOrdSuperMap_$cmin -}
1182d4f6d53c8d52eaf5c1a7efcda606
  $fOrdSuperMap_$c< ::
    Language.PureScript.Hierarchy.SuperMap
    -> Language.PureScript.Hierarchy.SuperMap -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Hierarchy.SuperMap)
                   (y :: Language.PureScript.Hierarchy.SuperMap) ->
                 case Language.PureScript.Hierarchy.$fOrdSuperMap_$ccompare
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True }) -}
1182d4f6d53c8d52eaf5c1a7efcda606
  $fOrdSuperMap_$c<= ::
    Language.PureScript.Hierarchy.SuperMap
    -> Language.PureScript.Hierarchy.SuperMap -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Hierarchy.SuperMap)
                   (y :: Language.PureScript.Hierarchy.SuperMap) ->
                 case Language.PureScript.Hierarchy.$fOrdSuperMap_$ccompare
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False }) -}
1182d4f6d53c8d52eaf5c1a7efcda606
  $fOrdSuperMap_$c> ::
    Language.PureScript.Hierarchy.SuperMap
    -> Language.PureScript.Hierarchy.SuperMap -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Hierarchy.SuperMap)
                   (y :: Language.PureScript.Hierarchy.SuperMap) ->
                 case Language.PureScript.Hierarchy.$fOrdSuperMap_$ccompare
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True }) -}
1182d4f6d53c8d52eaf5c1a7efcda606
  $fOrdSuperMap_$c>= ::
    Language.PureScript.Hierarchy.SuperMap
    -> Language.PureScript.Hierarchy.SuperMap -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Hierarchy.SuperMap)
                   (y :: Language.PureScript.Hierarchy.SuperMap) ->
                 case Language.PureScript.Hierarchy.$fOrdSuperMap_$ccompare
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }) -}
1182d4f6d53c8d52eaf5c1a7efcda606
  $fOrdSuperMap_$ccompare ::
    Language.PureScript.Hierarchy.SuperMap
    -> Language.PureScript.Hierarchy.SuperMap -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Language.PureScript.Hierarchy.SuperMap)
                   (ds1 :: Language.PureScript.Hierarchy.SuperMap) ->
                 case ds
                        `cast`
                      (Language.PureScript.Hierarchy.N:SuperMap[0]) of wild {
                   Data.Either.Left x
                   -> case ds1
                             `cast`
                           (Language.PureScript.Hierarchy.N:SuperMap[0]) of wild1 {
                        Data.Either.Left x1
                        -> Data.Text.$fOrdText_$ccompare
                             x `cast`
                             (Language.PureScript.Names.N:ProperName[0]
                                  <'Language.PureScript.Names.ClassName>_P)
                             x1
                               `cast`
                             (Language.PureScript.Names.N:ProperName[0]
                                  <'Language.PureScript.Names.ClassName>_P)
                        Data.Either.Right y
                        -> case y of wild2 { (,) ds2 y1 ->
                           Data.Text.$fOrdText_$ccompare
                             x `cast`
                             (Language.PureScript.Names.N:ProperName[0]
                                  <'Language.PureScript.Names.ClassName>_P)
                             y1
                               `cast`
                             (Language.PureScript.Names.N:ProperName[0]
                                  <'Language.PureScript.Names.ClassName>_P) } }
                   Data.Either.Right y
                   -> case y of wild1 { (,) ds2 y1 ->
                      case ds1
                             `cast`
                           (Language.PureScript.Hierarchy.N:SuperMap[0]) of wild2 {
                        Data.Either.Left x
                        -> Data.Text.$fOrdText_$ccompare
                             y1
                               `cast`
                             (Language.PureScript.Names.N:ProperName[0]
                                  <'Language.PureScript.Names.ClassName>_P)
                             x `cast`
                             (Language.PureScript.Names.N:ProperName[0]
                                  <'Language.PureScript.Names.ClassName>_P)
                        Data.Either.Right y2
                        -> case y2 of wild3 { (,) ds3 y3 ->
                           Data.Text.$fOrdText_$ccompare
                             y1
                               `cast`
                             (Language.PureScript.Names.N:ProperName[0]
                                  <'Language.PureScript.Names.ClassName>_P)
                             y3
                               `cast`
                             (Language.PureScript.Names.N:ProperName[0]
                                  <'Language.PureScript.Names.ClassName>_P) } } } }) -}
1182d4f6d53c8d52eaf5c1a7efcda606
  $fOrdSuperMap_$cmax ::
    Language.PureScript.Hierarchy.SuperMap
    -> Language.PureScript.Hierarchy.SuperMap
    -> Language.PureScript.Hierarchy.SuperMap
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Hierarchy.SuperMap)
                   (y :: Language.PureScript.Hierarchy.SuperMap) ->
                 case Language.PureScript.Hierarchy.$fOrdSuperMap_$ccompare
                        x
                        y of wild {
                   DEFAULT -> y GHC.Types.GT -> x }) -}
1182d4f6d53c8d52eaf5c1a7efcda606
  $fOrdSuperMap_$cmin ::
    Language.PureScript.Hierarchy.SuperMap
    -> Language.PureScript.Hierarchy.SuperMap
    -> Language.PureScript.Hierarchy.SuperMap
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Hierarchy.SuperMap)
                   (y :: Language.PureScript.Hierarchy.SuperMap) ->
                 case Language.PureScript.Hierarchy.$fOrdSuperMap_$ccompare
                        x
                        y of wild {
                   DEFAULT -> x GHC.Types.GT -> y }) -}
2d51ba0b03e77e97f81353e5d2f94b99
  $fShowDigraph ::
    GHC.Show.Show Language.PureScript.Hierarchy.Digraph
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Hierarchy.Digraph
                  Language.PureScript.Hierarchy.$fShowDigraph_$cshowsPrec
                  Language.PureScript.Hierarchy.$fShowDigraph_$cshow
                  Language.PureScript.Hierarchy.$fShowDigraph_$cshowList -}
2d51ba0b03e77e97f81353e5d2f94b99
  $fShowDigraph1 ::
    Language.PureScript.Hierarchy.Digraph -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,1*U(U,U,U)><L,U>,
     Unfolding: (\ (w :: Language.PureScript.Hierarchy.Digraph)
                   (w1 :: GHC.Base.String) ->
                 Language.PureScript.Hierarchy.$w$cshowsPrec 0# w w1) -}
3d4dd1e5d256dbd4f589591cd7fd4b67
  $fShowDigraph2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("}"#) -}
25262d9a668bf0200b6a41dc0fdc8c22
  $fShowDigraph3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("_unDigraph = "#) -}
6e877636d12fa425ce6385e30b7e89a8
  $fShowDigraph4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Digraph {"#) -}
85fa54e3c8405402be69ddc24b7b8d9d
  $fShowDigraph5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Hierarchy.$fShowDigraph2) -}
2d51ba0b03e77e97f81353e5d2f94b99
  $fShowDigraph_$cshow ::
    Language.PureScript.Hierarchy.Digraph -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U(U,U,U)>,
     Unfolding: (\ (x :: Language.PureScript.Hierarchy.Digraph) ->
                 GHC.CString.unpackAppendCString#
                   Language.PureScript.Hierarchy.$fShowDigraph4
                   (GHC.CString.unpackAppendCString#
                      Language.PureScript.Hierarchy.$fShowDigraph3
                      (case Data.Text.Show.$w$cshowsPrec
                              x `cast` (Language.PureScript.Hierarchy.N:Digraph[0])
                              Language.PureScript.Hierarchy.$fShowDigraph5 of ww { (#,#) ww1 ww2 ->
                       GHC.Types.: @ GHC.Types.Char ww1 ww2 }))) -}
2d51ba0b03e77e97f81353e5d2f94b99
  $fShowDigraph_$cshowList ::
    [Language.PureScript.Hierarchy.Digraph] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Hierarchy.Digraph])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Hierarchy.Digraph
                   Language.PureScript.Hierarchy.$fShowDigraph1
                   ls
                   s) -}
2d51ba0b03e77e97f81353e5d2f94b99
  $fShowDigraph_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Hierarchy.Digraph -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><L,1*U(U,U,U)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Hierarchy.Digraph)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Language.PureScript.Hierarchy.$w$cshowsPrec ww1 w1 w2 }) -}
8da3608d4e0e707f6d9c2b80ebf52281
  $fShowGraph :: GHC.Show.Show Language.PureScript.Hierarchy.Graph
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Hierarchy.Graph
                  Language.PureScript.Hierarchy.$fShowGraph_$cshowsPrec
                  Language.PureScript.Hierarchy.$fShowGraph_$cshow
                  Language.PureScript.Hierarchy.$fShowGraph_$cshowList -}
8da3608d4e0e707f6d9c2b80ebf52281
  $fShowGraph1 ::
    Language.PureScript.Hierarchy.Graph -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(1*U(U,U,U),1*U(U,U,U))><L,U>,
     Unfolding: (\ (w :: Language.PureScript.Hierarchy.Graph)
                   (w1 :: GHC.Base.String) ->
                 case w of ww { Language.PureScript.Hierarchy.Graph ww1 ww2 ->
                 Language.PureScript.Hierarchy.$w$cshowsPrec1 0# ww1 ww2 w1 }) -}
cccc8f7dc5bf2c65ac0fe237e99ebdb8
  $fShowGraph2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("digraph = "#) -}
0a9420885afc67835ae8ca3a2bce3907
  $fShowGraph3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("_unGraphName = "#) -}
cadb7c2a0229981b541a82923189b9c3
  $fShowGraph4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("GraphName {"#) -}
021b2c57b7c66a40488925a2cb19a925
  $fShowGraph5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("graphName = "#) -}
99a6ee0211929a370df2ec91c0f73b20
  $fShowGraph6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Graph {"#) -}
56dd73f43f2d3952ab7920dae934ebde
  $fShowGraph7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Hierarchy.$fShowGraph8) -}
ac4c233e9ff6a1e504993f2a2a56b927
  $fShowGraph8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("}}"#) -}
70221964a1d62df4f122a19a7ef7f612
  $fShowGraphName ::
    GHC.Show.Show Language.PureScript.Hierarchy.GraphName
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Hierarchy.GraphName
                  Language.PureScript.Hierarchy.$fShowGraphName_$cshowsPrec
                  Language.PureScript.Hierarchy.$fShowGraphName_$cshow
                  Language.PureScript.Hierarchy.$fShowGraphName_$cshowList -}
70221964a1d62df4f122a19a7ef7f612
  $fShowGraphName1 ::
    Language.PureScript.Hierarchy.GraphName -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,1*U(U,U,U)><L,U>,
     Unfolding: (\ (w :: Language.PureScript.Hierarchy.GraphName)
                   (w1 :: GHC.Base.String) ->
                 Language.PureScript.Hierarchy.$w$cshowsPrec2 0# w w1) -}
70221964a1d62df4f122a19a7ef7f612
  $fShowGraphName_$cshow ::
    Language.PureScript.Hierarchy.GraphName -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U(U,U,U)>,
     Unfolding: (\ (x :: Language.PureScript.Hierarchy.GraphName) ->
                 GHC.CString.unpackAppendCString#
                   Language.PureScript.Hierarchy.$fShowGraph4
                   (GHC.CString.unpackAppendCString#
                      Language.PureScript.Hierarchy.$fShowGraph3
                      (case Data.Text.Show.$w$cshowsPrec
                              x `cast` (Language.PureScript.Hierarchy.N:GraphName[0])
                              Language.PureScript.Hierarchy.$fShowDigraph5 of ww { (#,#) ww1 ww2 ->
                       GHC.Types.: @ GHC.Types.Char ww1 ww2 }))) -}
70221964a1d62df4f122a19a7ef7f612
  $fShowGraphName_$cshowList ::
    [Language.PureScript.Hierarchy.GraphName] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Hierarchy.GraphName])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Hierarchy.GraphName
                   Language.PureScript.Hierarchy.$fShowGraphName1
                   ls
                   s) -}
70221964a1d62df4f122a19a7ef7f612
  $fShowGraphName_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Hierarchy.GraphName -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><L,1*U(U,U,U)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Hierarchy.GraphName)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Language.PureScript.Hierarchy.$w$cshowsPrec2 ww1 w1 w2 }) -}
8da3608d4e0e707f6d9c2b80ebf52281
  $fShowGraph_$cshow ::
    Language.PureScript.Hierarchy.Graph -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U(U,U,U),1*U(U,U,U))>,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.PureScript.Hierarchy.Graph) ->
                 case w of ww { Language.PureScript.Hierarchy.Graph ww1 ww2 ->
                 Language.PureScript.Hierarchy.$w$cshow ww1 ww2 }) -}
8da3608d4e0e707f6d9c2b80ebf52281
  $fShowGraph_$cshowList ::
    [Language.PureScript.Hierarchy.Graph] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Hierarchy.Graph])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Hierarchy.Graph
                   Language.PureScript.Hierarchy.$fShowGraph1
                   ls
                   s) -}
8da3608d4e0e707f6d9c2b80ebf52281
  $fShowGraph_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Hierarchy.Graph -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <S(S),1*U(U)><S,1*U(1*U(U,U,U),1*U(U,U,U))><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Hierarchy.Graph)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Language.PureScript.Hierarchy.Graph ww3 ww4 ->
                 Language.PureScript.Hierarchy.$w$cshowsPrec1 ww1 ww3 ww4 w2 } }) -}
640e5e87c3fce750b3e0e41d678d7d2d
  $tc'Digraph :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1132957146784766019##
                   10999923607034844117##
                   Language.PureScript.Hierarchy.$trModule
                   Language.PureScript.Hierarchy.$tc'Digraph2
                   0#
                   Language.PureScript.Hierarchy.$tc'Digraph1) -}
280dd685ab09d7c89de6a461478f8faf
  $tc'Digraph1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
19b7aebe988b3483e67b47db3be7d269
  $tc'Digraph2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Hierarchy.$tc'Digraph3) -}
5554a1dfb0f830ebd8259322527ea5f9
  $tc'Digraph3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Digraph"#) -}
ba07f007bfac38bf4e093510ae67cb13
  $tc'Graph :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11985945972300419294##
                   11842873400925878844##
                   Language.PureScript.Hierarchy.$trModule
                   Language.PureScript.Hierarchy.$tc'Graph2
                   0#
                   Language.PureScript.Hierarchy.$tc'Graph1) -}
52f50df990a15ab09d835156c727649c
  $tc'Graph1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
571a00123b6b1cd88739c91991cc0cf6
  $tc'Graph2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Hierarchy.$tc'Graph3) -}
fe177f3700b3c39bc22d417bb1038471
  $tc'Graph3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Graph"#) -}
82f67f54a4d9823c724a6af6ae86fbc5
  $tc'GraphName :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   294422471314882194##
                   11552172556532007974##
                   Language.PureScript.Hierarchy.$trModule
                   Language.PureScript.Hierarchy.$tc'GraphName2
                   0#
                   Language.PureScript.Hierarchy.$tc'GraphName1) -}
90324d690fae6d20f40c0e8ebc3e4dcb
  $tc'GraphName1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
2164988b7a96740c5a8dc68935d8500a
  $tc'GraphName2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Hierarchy.$tc'GraphName3) -}
7852f3616d3a3b3217a3f839f48105a0
  $tc'GraphName3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'GraphName"#) -}
1b5d35e64ef803b968278ca396993ff4
  $tc'SuperMap :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5900992438468741969##
                   2274979536336290905##
                   Language.PureScript.Hierarchy.$trModule
                   Language.PureScript.Hierarchy.$tc'SuperMap2
                   0#
                   Language.PureScript.Hierarchy.$tc'SuperMap1) -}
f313d9287aaa5e39acb00b5fe14fd23f
  $tc'SuperMap1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
9381c2a3ec5a2005757e0638a4f939c1
  $tc'SuperMap2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Hierarchy.$tc'SuperMap3) -}
7d832991c7cb2d9079c207118d27be57
  $tc'SuperMap3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'SuperMap"#) -}
285eee5f181f16cd691c4601db61470f
  $tcDigraph :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8167077801715667295##
                   15623124794194716247##
                   Language.PureScript.Hierarchy.$trModule
                   Language.PureScript.Hierarchy.$tcDigraph1
                   0#
                   GHC.Types.krep$*) -}
0d5f67e8b641097e9f9fa959934a27e9
  $tcDigraph1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Hierarchy.$tcDigraph2) -}
a3c3d10fd83410b646991c610f440230
  $tcDigraph2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Digraph"#) -}
390075e302e9eab19a22cee3f27bdea1
  $tcGraph :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6025866409376424811##
                   12930568821112201962##
                   Language.PureScript.Hierarchy.$trModule
                   Language.PureScript.Hierarchy.$tcGraph1
                   0#
                   GHC.Types.krep$*) -}
4e2069a4692f6651fbb486b12d36af87
  $tcGraph1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Hierarchy.$tcGraph2) -}
bd782101015347e00bc6802584dcaaa4
  $tcGraph2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Graph"#) -}
ea5bca91d71ea73ce3d98df7df36715d
  $tcGraphName :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2358592745415033658##
                   17146250625260712477##
                   Language.PureScript.Hierarchy.$trModule
                   Language.PureScript.Hierarchy.$tcGraphName1
                   0#
                   GHC.Types.krep$*) -}
7dfc4b1853da24451622364a12925b84
  $tcGraphName1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Hierarchy.$tcGraphName2) -}
26b40bda235ad0341ff24e2598b62a75
  $tcGraphName2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("GraphName"#) -}
470e2eacb518d93c66c3b625667103e2
  $tcSuperMap :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6518562602423563470##
                   2769259048611717552##
                   Language.PureScript.Hierarchy.$trModule
                   Language.PureScript.Hierarchy.$tcSuperMap1
                   0#
                   GHC.Types.krep$*) -}
5edd19a4119d216c01e4ee325f830a59
  $tcSuperMap1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Hierarchy.$tcSuperMap2) -}
0d576f03b1fe9ee6126987f1032af6b9
  $tcSuperMap2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("SuperMap"#) -}
caae3e5c13c6de8c1b4b35fbb25dddcf
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Language.PureScript.Hierarchy.$trModule3
                   Language.PureScript.Hierarchy.$trModule1) -}
0dd6eeeef5b12b24c6a0a9b54de82f83
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Hierarchy.$trModule2) -}
c4b382a5351d9b0d5e53128d8803db53
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Language.PureScript.Hierarchy"#) -}
302b747709823d8697e2a7bdfbc9219a
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Hierarchy.$trModule4) -}
5e654b1ba3bf7eb2666aafee2e05bfea
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"#) -}
58bfc36d54bcad464fae2a65c72c5f28
  $w$c== ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Language.PureScript.Hierarchy.Digraph
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Language.PureScript.Hierarchy.Digraph
    -> GHC.Types.Bool
  {- Arity: 8, HasNoCafRefs,
     Strictness: <L,U><L,U><S,U><L,1*U(U,U,U)><L,U><L,U><S,U><L,1*U(U,U,U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: Language.PureScript.Hierarchy.Digraph)
                   (ww4 :: GHC.Prim.ByteArray#)
                   (ww5 :: GHC.Prim.Int#)
                   (ww6 :: GHC.Prim.Int#)
                   (ww7 :: Language.PureScript.Hierarchy.Digraph) ->
                 case GHC.Prim.==# ww2 ww6 of lwild {
                   DEFAULT -> GHC.Types.False
                   1#
                   -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                     -> GHC.Prim.Word#
                                                     -> GHC.Prim.ByteArray#
                                                     -> GHC.Prim.Word#
                                                     -> GHC.Prim.Word#
                                                     -> GHC.Prim.State# GHC.Prim.RealWorld
                                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                           GHC.Prim.Int# #)}
                             ww
                             (GHC.Prim.int2Word# ww1)
                             ww4
                             (GHC.Prim.int2Word# ww5)
                             (GHC.Prim.int2Word# ww2)
                             GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                      case GHC.Prim.narrow32Int# ds3 of wild {
                        DEFAULT -> GHC.Types.False
                        0#
                        -> Data.Text.$fEqText_$c==
                             ww3 `cast` (Language.PureScript.Hierarchy.N:Digraph[0])
                             ww7 `cast` (Language.PureScript.Hierarchy.N:Digraph[0]) } } }) -}
9e138587c44919c3d635e625afd51e78
  $w$cshow ::
    Language.PureScript.Hierarchy.GraphName
    -> Language.PureScript.Hierarchy.Digraph -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U(U,U,U)><L,1*U(U,U,U)>, Inline: [0],
     Unfolding: (\ (ww :: Language.PureScript.Hierarchy.GraphName)
                   (ww1 :: Language.PureScript.Hierarchy.Digraph) ->
                 GHC.CString.unpackAppendCString#
                   Language.PureScript.Hierarchy.$fShowGraph6
                   (GHC.CString.unpackAppendCString#
                      Language.PureScript.Hierarchy.$fShowGraph5
                      (GHC.CString.unpackAppendCString#
                         Language.PureScript.Hierarchy.$fShowGraph4
                         (GHC.CString.unpackAppendCString#
                            Language.PureScript.Hierarchy.$fShowGraph3
                            (case Data.Text.Show.$w$cshowsPrec
                                    ww `cast` (Language.PureScript.Hierarchy.N:GraphName[0])
                                    (GHC.CString.unpackAppendCString#
                                       Language.PureScript.Hierarchy.$fShowDigraph2
                                       (GHC.Base.++
                                          @ GHC.Types.Char
                                          GHC.Show.showCommaSpace1
                                          (GHC.CString.unpackAppendCString#
                                             Language.PureScript.Hierarchy.$fShowGraph2
                                             (GHC.CString.unpackAppendCString#
                                                Language.PureScript.Hierarchy.$fShowDigraph4
                                                (GHC.CString.unpackAppendCString#
                                                   Language.PureScript.Hierarchy.$fShowDigraph3
                                                   (case Data.Text.Show.$w$cshowsPrec
                                                           ww1
                                                             `cast`
                                                           (Language.PureScript.Hierarchy.N:Digraph[0])
                                                           Language.PureScript.Hierarchy.$fShowGraph7 of ww2 { (#,#) ww3 ww4 ->
                                                    GHC.Types.:
                                                      @ GHC.Types.Char
                                                      ww3
                                                      ww4 })))))) of ww2 { (#,#) ww3 ww4 ->
                             GHC.Types.: @ GHC.Types.Char ww3 ww4 }))))) -}
2d51ba0b03e77e97f81353e5d2f94b99
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> Language.PureScript.Hierarchy.Digraph
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><L,1*U(U,U,U)><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: Language.PureScript.Hierarchy.Digraph)
                   (w1 :: GHC.Base.String) ->
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> GHC.CString.unpackAppendCString#
                        Language.PureScript.Hierarchy.$fShowDigraph4
                        (GHC.CString.unpackAppendCString#
                           Language.PureScript.Hierarchy.$fShowDigraph3
                           (case Data.Text.Show.$w$cshowsPrec
                                   w `cast` (Language.PureScript.Hierarchy.N:Digraph[0])
                                   (GHC.CString.unpackAppendCString#
                                      Language.PureScript.Hierarchy.$fShowDigraph2
                                      w1) of ww1 { (#,#) ww2 ww3 ->
                            GHC.Types.: @ GHC.Types.Char ww2 ww3 }))
                   1#
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.CString.unpackAppendCString#
                           Language.PureScript.Hierarchy.$fShowDigraph4
                           (GHC.CString.unpackAppendCString#
                              Language.PureScript.Hierarchy.$fShowDigraph3
                              (case Data.Text.Show.$w$cshowsPrec
                                      w `cast` (Language.PureScript.Hierarchy.N:Digraph[0])
                                      (GHC.CString.unpackAppendCString#
                                         Language.PureScript.Hierarchy.$fShowDigraph2
                                         (GHC.Types.:
                                            @ GHC.Types.Char
                                            GHC.Show.$fShow(,)2
                                            w1)) of ww1 { (#,#) ww2 ww3 ->
                               GHC.Types.: @ GHC.Types.Char ww2 ww3 }))) }) -}
5f82a5c706603c6bc3fc8df8e8348605
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> Language.PureScript.Hierarchy.GraphName
    -> Language.PureScript.Hierarchy.Digraph
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 4, Strictness: <S,U><L,1*U(U,U,U)><L,1*U(U,U,U)><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Language.PureScript.Hierarchy.GraphName)
                   (ww2 :: Language.PureScript.Hierarchy.Digraph)
                   (w :: GHC.Base.String) ->
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> GHC.CString.unpackAppendCString#
                        Language.PureScript.Hierarchy.$fShowGraph6
                        (GHC.CString.unpackAppendCString#
                           Language.PureScript.Hierarchy.$fShowGraph5
                           (Language.PureScript.Hierarchy.$w$cshowsPrec2
                              0#
                              ww1
                              (GHC.Base.++
                                 @ GHC.Types.Char
                                 GHC.Show.showCommaSpace1
                                 (GHC.CString.unpackAppendCString#
                                    Language.PureScript.Hierarchy.$fShowGraph2
                                    (Language.PureScript.Hierarchy.$w$cshowsPrec
                                       0#
                                       ww2
                                       (GHC.CString.unpackAppendCString#
                                          Language.PureScript.Hierarchy.$fShowDigraph2
                                          w))))))
                   1#
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.CString.unpackAppendCString#
                           Language.PureScript.Hierarchy.$fShowGraph6
                           (GHC.CString.unpackAppendCString#
                              Language.PureScript.Hierarchy.$fShowGraph5
                              (Language.PureScript.Hierarchy.$w$cshowsPrec2
                                 0#
                                 ww1
                                 (GHC.Base.++
                                    @ GHC.Types.Char
                                    GHC.Show.showCommaSpace1
                                    (GHC.CString.unpackAppendCString#
                                       Language.PureScript.Hierarchy.$fShowGraph2
                                       (Language.PureScript.Hierarchy.$w$cshowsPrec
                                          0#
                                          ww2
                                          (GHC.CString.unpackAppendCString#
                                             Language.PureScript.Hierarchy.$fShowDigraph2
                                             (GHC.Types.:
                                                @ GHC.Types.Char
                                                GHC.Show.$fShow(,)2
                                                w)))))))) }) -}
70221964a1d62df4f122a19a7ef7f612
  $w$cshowsPrec2 ::
    GHC.Prim.Int#
    -> Language.PureScript.Hierarchy.GraphName
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><L,1*U(U,U,U)><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: Language.PureScript.Hierarchy.GraphName)
                   (w1 :: GHC.Base.String) ->
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> GHC.CString.unpackAppendCString#
                        Language.PureScript.Hierarchy.$fShowGraph4
                        (GHC.CString.unpackAppendCString#
                           Language.PureScript.Hierarchy.$fShowGraph3
                           (case Data.Text.Show.$w$cshowsPrec
                                   w `cast` (Language.PureScript.Hierarchy.N:GraphName[0])
                                   (GHC.CString.unpackAppendCString#
                                      Language.PureScript.Hierarchy.$fShowDigraph2
                                      w1) of ww1 { (#,#) ww2 ww3 ->
                            GHC.Types.: @ GHC.Types.Char ww2 ww3 }))
                   1#
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.CString.unpackAppendCString#
                           Language.PureScript.Hierarchy.$fShowGraph4
                           (GHC.CString.unpackAppendCString#
                              Language.PureScript.Hierarchy.$fShowGraph3
                              (case Data.Text.Show.$w$cshowsPrec
                                      w `cast` (Language.PureScript.Hierarchy.N:GraphName[0])
                                      (GHC.CString.unpackAppendCString#
                                         Language.PureScript.Hierarchy.$fShowDigraph2
                                         (GHC.Types.:
                                            @ GHC.Types.Char
                                            GHC.Show.$fShow(,)2
                                            w1)) of ww1 { (#,#) ww2 ww3 ->
                               GHC.Types.: @ GHC.Types.Char ww2 ww3 }))) }) -}
9079d792da5cedb4e44d554c2f2f03c9
  $wtypeClassGraph ::
    Language.PureScript.Names.ModuleName
    -> [Language.PureScript.AST.Declarations.Declaration]
    -> GHC.Base.Maybe Language.PureScript.Hierarchy.Graph
  {- Arity: 2, Strictness: <L,1*U><S,1*U>, Inline: [0] -}
d135d0bdd139aea78ce1ebf2dc08edaa
  $wtypeClassPrologue ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int# -> GHC.Prim.Int# -> Data.Text.Internal.Text
  {- Arity: 3, Strictness: <L,U><S,U><S,U>, Inline: [0] -}
2d51ba0b03e77e97f81353e5d2f94b99
  newtype Digraph = Digraph {_unDigraph :: Data.Text.Internal.Text}
8da3608d4e0e707f6d9c2b80ebf52281
  data Graph
    = Graph {graphName :: Language.PureScript.Hierarchy.GraphName,
             digraph :: Language.PureScript.Hierarchy.Digraph}
70221964a1d62df4f122a19a7ef7f612
  newtype GraphName
    = GraphName {_unGraphName :: Data.Text.Internal.Text}
1182d4f6d53c8d52eaf5c1a7efcda606
  newtype SuperMap
    = SuperMap {_unSuperMap :: Data.Either.Either
                                 (Language.PureScript.Names.ProperName
                                    'Language.PureScript.Names.ClassName)
                                 (Language.PureScript.Names.ProperName
                                    'Language.PureScript.Names.ClassName,
                                  Language.PureScript.Names.ProperName
                                    'Language.PureScript.Names.ClassName)}
2d51ba0b03e77e97f81353e5d2f94b99
  _unDigraph ::
    Language.PureScript.Hierarchy.Digraph -> Data.Text.Internal.Text
  RecSel Left Language.PureScript.Hierarchy.Digraph
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U)>m,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Hierarchy._unDigraph1
                  `cast`
                (<Language.PureScript.Hierarchy.Digraph>_R
                 ->_R Language.PureScript.Hierarchy.N:Digraph[0]) -}
2d51ba0b03e77e97f81353e5d2f94b99
  _unDigraph1 ::
    Language.PureScript.Hierarchy.Digraph
    -> Language.PureScript.Hierarchy.Digraph
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U)>m,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: Language.PureScript.Hierarchy.Digraph) -> ds) -}
70221964a1d62df4f122a19a7ef7f612
  _unGraphName ::
    Language.PureScript.Hierarchy.GraphName -> Data.Text.Internal.Text
  RecSel Left Language.PureScript.Hierarchy.GraphName
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U)>m,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Hierarchy._unGraphName1
                  `cast`
                (<Language.PureScript.Hierarchy.GraphName>_R
                 ->_R Language.PureScript.Hierarchy.N:GraphName[0]) -}
70221964a1d62df4f122a19a7ef7f612
  _unGraphName1 ::
    Language.PureScript.Hierarchy.GraphName
    -> Language.PureScript.Hierarchy.GraphName
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U)>m,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: Language.PureScript.Hierarchy.GraphName) -> ds) -}
1182d4f6d53c8d52eaf5c1a7efcda606
  _unSuperMap ::
    Language.PureScript.Hierarchy.SuperMap
    -> Data.Either.Either
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName,
          Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
  RecSel Left Language.PureScript.Hierarchy.SuperMap
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Hierarchy._unSuperMap1
                  `cast`
                (<Language.PureScript.Hierarchy.SuperMap>_R
                 ->_R Language.PureScript.Hierarchy.N:SuperMap[0]) -}
1182d4f6d53c8d52eaf5c1a7efcda606
  _unSuperMap1 ::
    Language.PureScript.Hierarchy.SuperMap
    -> Language.PureScript.Hierarchy.SuperMap
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: Language.PureScript.Hierarchy.SuperMap) -> ds) -}
8da3608d4e0e707f6d9c2b80ebf52281
  digraph ::
    Language.PureScript.Hierarchy.Graph
    -> Language.PureScript.Hierarchy.Digraph
  RecSel Left Language.PureScript.Hierarchy.Graph
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U(U,U,U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Hierarchy.Graph) ->
                 case ds of wild { Language.PureScript.Hierarchy.Graph ds1 ds2 ->
                 ds2 }) -}
8da3608d4e0e707f6d9c2b80ebf52281
  graphName ::
    Language.PureScript.Hierarchy.Graph
    -> Language.PureScript.Hierarchy.GraphName
  RecSel Left Language.PureScript.Hierarchy.Graph
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U(U,U,U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Hierarchy.Graph) ->
                 case ds of wild { Language.PureScript.Hierarchy.Graph ds1 ds2 ->
                 ds1 }) -}
f0ca9fd9e02dae466267dfde31d10c7c
  prettyPrint ::
    Language.PureScript.Hierarchy.SuperMap -> Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S,1*U> -}
fa5ce692677de11dc9381a6bf264f0ea
  runModuleName ::
    Language.PureScript.Names.ModuleName
    -> Language.PureScript.Hierarchy.GraphName
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Names.ModuleName) ->
                 case ds
                        `cast`
                      (Language.PureScript.Names.N:ModuleName[0] ; ([Language.PureScript.Names.N:ProperName[0]
                                                                         <'Language.PureScript.Names.Namespace>_P])_R) of wild {
                   []
                   -> Language.PureScript.Hierarchy.runModuleName1
                        `cast`
                      (Sym (Language.PureScript.Hierarchy.N:GraphName[0]))
                   : x1 xs
                   -> (Data.Text.concat
                         (GHC.Types.:
                            @ Data.Text.Internal.Text
                            x1
                            (Language.PureScript.Hierarchy.runModuleName_go1 xs)))
                        `cast`
                      (Sym (Language.PureScript.Hierarchy.N:GraphName[0])) }) -}
1dc97ff1347aeaa33fa0f18d63ee0c11
  runModuleName1 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.concat
                   (GHC.Types.[] @ Data.Text.Internal.Text)) -}
cd23ad3efa1b9c5ff7df5408e5d5cf20
  runModuleName_go1 ::
    [Data.Text.Internal.Text] -> [Data.Text.Internal.Text]
  {- Arity: 1, Strictness: <S,1*U> -}
3ec10ff83b724be439ac8877887ada2d
  superClasses ::
    Language.PureScript.AST.Declarations.Declaration
    -> [Language.PureScript.Hierarchy.SuperMap]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Language.PureScript.AST.Declarations.Declaration) ->
                 case ds of wild {
                   DEFAULT -> GHC.Types.[] @ Language.PureScript.Hierarchy.SuperMap
                   Language.PureScript.AST.Declarations.TypeClassDeclaration ds1 sub ds2 supers ds3 ds4
                   -> case supers of wild1 {
                        []
                        -> GHC.Types.:
                             @ Language.PureScript.Hierarchy.SuperMap
                             (Data.Either.Left
                                @ (Language.PureScript.Names.ProperName
                                     'Language.PureScript.Names.ClassName)
                                @ (Language.PureScript.Names.ProperName
                                     'Language.PureScript.Names.ClassName,
                                   Language.PureScript.Names.ProperName
                                     'Language.PureScript.Names.ClassName)
                                sub)
                               `cast`
                             (Sym (Language.PureScript.Hierarchy.N:SuperMap[0]))
                             (GHC.Types.[] @ Language.PureScript.Hierarchy.SuperMap)
                        : ds5 ds6
                        -> GHC.Base.map
                             @ (Language.PureScript.Types.Constraint
                                  Language.PureScript.AST.SourcePos.SourceAnn)
                             @ Language.PureScript.Hierarchy.SuperMap
                             (\ (ds7 :: Language.PureScript.Types.Constraint
                                          Language.PureScript.AST.SourcePos.SourceAnn) ->
                              case ds7 of wild2 { Language.PureScript.Types.Constraint ds8 ds9 ds10 ds11 ->
                              case ds9 of wild3 { Language.PureScript.Names.Qualified ds12 super ->
                              (Data.Either.Right
                                 @ (Language.PureScript.Names.ProperName
                                      'Language.PureScript.Names.ClassName)
                                 @ (Language.PureScript.Names.ProperName
                                      'Language.PureScript.Names.ClassName,
                                    Language.PureScript.Names.ProperName
                                      'Language.PureScript.Names.ClassName)
                                 (super, sub))
                                `cast`
                              (Sym (Language.PureScript.Hierarchy.N:SuperMap[0])) } })
                             wild1 } }) -}
96d4fa691dcdf1bb108a4915582dda23
  typeClassBody ::
    [Language.PureScript.Hierarchy.SuperMap] -> Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (supers :: [Language.PureScript.Hierarchy.SuperMap]) ->
                 case GHC.Base.map
                        @ Language.PureScript.Hierarchy.SuperMap
                        @ Data.Text.Internal.Text
                        Language.PureScript.Hierarchy.prettyPrint
                        supers of wild {
                   [] -> Language.PureScript.Hierarchy.runModuleName1
                   : x1 xs
                   -> Data.Text.concat
                        (GHC.Types.:
                           @ Data.Text.Internal.Text
                           x1
                           (Language.PureScript.Hierarchy.typeClassBody_go1 xs)) }) -}
b60b25f06aaa80a77ba7503e7118c69f
  typeClassBody_go1 ::
    [Data.Text.Internal.Text] -> [Data.Text.Internal.Text]
  {- Arity: 1, Strictness: <S,1*U> -}
33c134ff5f3c37776db9f0762e4cc318
  typeClassEpilogue :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Hierarchy.typeClassEpilogue1) -}
413516ac0d235ecd35a0e8016b1681d5
  typeClassEpilogue1 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\n\
                 \}"#) -}
849828cedfcaae09625ffa5956b77d59
  typeClassGraph ::
    Language.PureScript.AST.Declarations.Module
    -> GHC.Base.Maybe Language.PureScript.Hierarchy.Graph
  {- Arity: 1, Strictness: <S(LLLSL),1*U(A,A,1*U,1*U,A)>,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.PureScript.AST.Declarations.Module) ->
                 case w of ww { Language.PureScript.AST.Declarations.Module ww1 ww2 ww3 ww4 ww5 ->
                 Language.PureScript.Hierarchy.$wtypeClassGraph ww3 ww4 }) -}
f4b780e0ad5c3e8d946ab0724fecbf4a
  typeClassPrologue ::
    Language.PureScript.Hierarchy.GraphName -> Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S(SSS),1*U(U,U,U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.PureScript.Hierarchy.GraphName) ->
                 case w `cast`
                      (Language.PureScript.Hierarchy.N:GraphName[0]) of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Language.PureScript.Hierarchy.$wtypeClassPrologue ww1 ww2 ww3 }) -}
45cdca15800ea426ee77c393732fe62b
  typeClasses ::
    GHC.Base.Functor f =>
    f Language.PureScript.AST.Declarations.Module
    -> f (GHC.Base.Maybe Language.PureScript.Hierarchy.Graph)
  {- Arity: 1, Strictness: <S(C(S)L),1*U(1*C1(U),A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ f :: * -> * ($dFunctor :: GHC.Base.Functor f) ->
                 GHC.Base.fmap
                   @ f
                   $dFunctor
                   @ Language.PureScript.AST.Declarations.Module
                   @ (GHC.Base.Maybe Language.PureScript.Hierarchy.Graph)
                   Language.PureScript.Hierarchy.typeClassGraph) -}
instance GHC.Classes.Eq [Language.PureScript.Hierarchy.Digraph]
  = Language.PureScript.Hierarchy.$fEqDigraph
instance GHC.Classes.Eq [Language.PureScript.Hierarchy.Graph]
  = Language.PureScript.Hierarchy.$fEqGraph
instance GHC.Classes.Eq [Language.PureScript.Hierarchy.GraphName]
  = Language.PureScript.Hierarchy.$fEqGraphName
instance GHC.Classes.Eq [Language.PureScript.Hierarchy.SuperMap]
  = Language.PureScript.Hierarchy.$fEqSuperMap
instance GHC.Classes.Ord [Language.PureScript.Hierarchy.SuperMap]
  = Language.PureScript.Hierarchy.$fOrdSuperMap
instance GHC.Show.Show [Language.PureScript.Hierarchy.Digraph]
  = Language.PureScript.Hierarchy.$fShowDigraph
instance GHC.Show.Show [Language.PureScript.Hierarchy.Graph]
  = Language.PureScript.Hierarchy.$fShowGraph
instance GHC.Show.Show [Language.PureScript.Hierarchy.GraphName]
  = Language.PureScript.Hierarchy.$fShowGraphName
"SPEC/Language.PureScript.Hierarchy $fEqEither_$c/= @ (ProperName
                                                        'ClassName) @ (ProperName 'ClassName,
                                                                       ProperName 'ClassName)" [orphan] forall ($dEq1 :: GHC.Classes.Eq
                                                                                                                                                                                                                                                                                           (Language.PureScript.Names.ProperName
                                                                                                                                                                                                                                                                                              'Language.PureScript.Names.ClassName,
                                                                                                                                                                                                                                                                                            Language.PureScript.Names.ProperName
                                                                                                                                                                                                                                                                                              'Language.PureScript.Names.ClassName))
                                                                                                                                                                                                                                                                               ($dEq :: GHC.Classes.Eq
                                                                                                                                                                                                                                                                                          (Language.PureScript.Names.ProperName
                                                                                                                                                                                                                                                                                             'Language.PureScript.Names.ClassName))
  Data.Either.$fEqEither_$c/= @ (Language.PureScript.Names.ProperName
                                   'Language.PureScript.Names.ClassName)
                              @ (Language.PureScript.Names.ProperName
                                   'Language.PureScript.Names.ClassName,
                                 Language.PureScript.Names.ProperName
                                   'Language.PureScript.Names.ClassName)
                              $dEq
                              $dEq1
  = Language.PureScript.Hierarchy.$fEqSuperMap_$s$fEqEither_$c/=
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

