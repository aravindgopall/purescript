
==================== FINAL INTERFACE ====================
2019-01-24 14:16:06.052542 UTC

interface purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Sugar.Names 8043
  interface hash: be01d3573085f6513731946218fe8748
  ABI hash: 07ea3fdb360ca116350b995d48cbf3db
  export-list hash: 506e9e9333d0a5f9c14fcb44b8a8ff90
  orphan hash: cb83ed45598695e77062933fef3b5233
  flag hash: 69d8350f4fac920b6d109c2ab05c8489
  opt_hash: 2c98c95d41c045ae9c2fb565ec8aabc6
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Language.PureScript.Sugar.Names.desugarImports
  Language.PureScript.Sugar.Names.desugarImportsWithEnv
  Language.PureScript.Sugar.Names.Env.primEnv
  Language.PureScript.Sugar.Names.Env.Env
  Language.PureScript.Sugar.Names.Env.Exports{Language.PureScript.Sugar.Names.Env.Exports exportedKinds exportedTypeClasses exportedTypeOps exportedTypes exportedValueOps exportedValues}
  Language.PureScript.Sugar.Names.Env.ImportProvenance{Language.PureScript.Sugar.Names.Env.FromExplicit Language.PureScript.Sugar.Names.Env.FromImplicit Language.PureScript.Sugar.Names.Env.Local Language.PureScript.Sugar.Names.Env.Prim}
  Language.PureScript.Sugar.Names.Env.ImportRecord{Language.PureScript.Sugar.Names.Env.ImportRecord importName importProvenance importSourceModule importSourceSpan}
  Language.PureScript.Sugar.Names.Env.Imports{Language.PureScript.Sugar.Names.Env.Imports importedDataConstructors importedKinds importedModules importedQualModules importedTypeClasses importedTypeOps importedTypes importedValueOps importedValues}
module dependencies: Control.Monad.Supply
                     Control.Monad.Supply.Class Language.PureScript.AST
                     Language.PureScript.AST.Binders
                     Language.PureScript.AST.Declarations
                     Language.PureScript.AST.Exported Language.PureScript.AST.Literals
                     Language.PureScript.AST.Operators Language.PureScript.AST.SourcePos
                     Language.PureScript.AST.Traversals Language.PureScript.Bundle
                     Language.PureScript.Comments Language.PureScript.Constants
                     Language.PureScript.Crash Language.PureScript.Environment
                     Language.PureScript.Errors Language.PureScript.Externs
                     Language.PureScript.Kinds Language.PureScript.Label
                     Language.PureScript.Linter.Imports Language.PureScript.Names
                     Language.PureScript.PSString Language.PureScript.Parser.Lexer
                     Language.PureScript.Parser.State Language.PureScript.Pretty
                     Language.PureScript.Pretty.Common Language.PureScript.Pretty.Kinds
                     Language.PureScript.Pretty.Types Language.PureScript.Pretty.Values
                     Language.PureScript.Publish.BoxesHelpers
                     Language.PureScript.Sugar.Names.Common
                     Language.PureScript.Sugar.Names.Env
                     Language.PureScript.Sugar.Names.Exports
                     Language.PureScript.Sugar.Names.Imports
                     Language.PureScript.Traversals
                     Language.PureScript.TypeClassDictionaries Language.PureScript.Types
                     Paths_purescript
package dependencies: aeson-1.3.1.1 ansi-terminal-0.8.0.4
                      array-0.5.2.0 async-2.2.1 attoparsec-0.13.2.2 base-4.11.1.0
                      base-compat-0.10.4 binary-0.8.5.1 blaze-builder-0.4.1.0 boxes-0.1.5
                      bytestring-0.10.8.2 colour-2.3.4 containers-0.5.11.0
                      deepseq-1.4.3.0 dlist-0.8.0.4 filepath-1.4.2 ghc-boot-th-8.4.3
                      ghc-prim-0.5.2.0 hashable-1.2.7.0 integer-gmp-1.0.2.0
                      integer-logarithms-1.0.2.1 language-javascript-0.6.0.11
                      microlens-0.4.9.1 microlens-ghc-0.4.9 microlens-mtl-0.1.11.1
                      microlens-platform-0.3.10 microlens-th-0.4.2.1 mtl-2.2.2
                      parsec-3.1.13.0 pattern-arrows-0.0.2 pretty-1.1.3.6
                      primitive-0.6.3.0 protolude-0.2.2 random-1.1 safe-0.3.17
                      scientific-0.3.6.2 sourcemap-0.1.6 split-0.2.3.3 stm-2.4.5.0
                      syb-0.7 tagged-0.8.5 template-haskell-2.13.0.0 text-1.2.3.0
                      th-abstraction-0.2.8.0 time-1.8.0.2 time-locale-compat-0.1.1.4
                      transformers-0.5.5.0 unordered-containers-0.2.9.0
                      utf8-string-1.0.1.1 uuid-types-1.0.3 vector-0.12.0.1
orphans: syb-0.7:Data.Generics.Instances colour-2.3.4:Data.Colour
         stm-2.4.5.0:Control.Monad.STM
         attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         microlens-platform-0.3.10:Lens.Micro.Platform
         microlens-ghc-0.4.9:Lens.Micro.GHC
         hashable-1.2.7.0:Data.Hashable.Generic
         vector-0.12.0.1:Data.Vector.Unboxed
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.5.0:Control.Monad.Trans.Error
         text-1.2.3.0:Data.Text.Lazy text-1.2.3.0:Data.Text
         binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: aeson-1.3.1.1:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.Graph
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         dlist-0.8.0.4:Data.DList ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         microlens-0.4.9.1:Lens.Micro.Internal
                         microlens-ghc-0.4.9:Lens.Micro.GHC
                         microlens-mtl-0.1.11.1:Lens.Micro.Mtl.Internal
                         microlens-platform-0.3.10:Lens.Micro.Platform
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.Declarations
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.Operators
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.SourcePos
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Comments
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Environment
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Kinds
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Label
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Names
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.PSString
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.TypeClassDictionaries
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Types
                         tagged-0.8.5:Data.Tagged
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
                         th-abstraction-0.2.8.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  base-4.11.1.0:Control.Arrow ce43199b5356a11ee2a8317f0ec30aee
import  -/  base-4.11.1.0:Control.Monad c5f960c67d822497578bffbd3e4c01cf
import  -/  base-4.11.1.0:Data.Either 39d922b371c4c52d426e9ee66de8371a
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.Function 6e6aae9442025aeeb92a909c1bbc3fca
import  -/  base-4.11.1.0:Data.Functor f522c3501272159820fd6f242510732f
import  -/  base-4.11.1.0:Data.Maybe 409c3da2b142470b68be39ce1d97a9f7
import  -/  base-4.11.1.0:Data.OldList 1b35aa3c6805ff7c8887a35a866fe006
import  -/  base-4.11.1.0:Data.Traversable 7ad4edb9184ea1ae8e73f6b94f115c8c
import  -/  base-4.11.1.0:Data.Tuple 3af66f3ac61ed95ba8a3a3f68ebc5003
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-compat-0.10.4:Prelude.Compat bb6796186ed35a1d09dc34362a3fc27e
import  -/  containers-0.5.11.0:Data.Map 0dbdaec812ef695a364aa6c69e7f7d53
import  -/  containers-0.5.11.0:Data.Map.Internal 0150e210d0ae8df0f3a0669d5e32d8fa
import  -/  containers-0.5.11.0:Data.Set 7d3c64a641be4cacbcd8119445bab919
import  -/  containers-0.5.11.0:Data.Set.Internal 93fa3ef95853aa2a7aadf32d693bd451
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  mtl-2.2.2:Control.Monad.Error.Class df146c18e27154b8df4c8637c59fd61b
import  -/  mtl-2.2.2:Control.Monad.State.Class acc76e93f44ac4486524db1a327e0a0a
import  -/  mtl-2.2.2:Control.Monad.State.Lazy f8ee64596a088338bed8c51f9750dde2
import  -/  mtl-2.2.2:Control.Monad.Writer b86905dc6b5d4d3a09dfa93d3ac3bb98
import  -/  mtl-2.2.2:Control.Monad.Writer.Class 69f540e019eada69892c26d267276458
import  -/  protolude-0.2.2:Protolude 2c2d16096c8a60f59f646a3b93b0eb7b
import  -/  protolude-0.2.2:Protolude.List 3a80368167450d7a4360ebf1ea443345
import  -/  Language.PureScript.AST e89b59f8e201961eafd3ff905a683659
  exports: be73d3bb7d4ebe5df082453f6d572075
import  -/  Language.PureScript.AST.Binders 482af52ec934a93b1ca6ec424fbe30f2
  Binder c96edaac3b5fcb24a174f6f4b3f084d4
  ConstructorBinder 82c410a4d9e21c325ba3e1527c50daff
  OpBinder a4e859ef3c8b2681b04a2dfae6eb0fb8
  PositionedBinder a6b770e5a8f88247c6ef23a04722a775
  TypedBinder 69e3490135b9eb76e3f2c68250002721
  VarBinder 2e20c3df0430901107dc9b8bd4a6015c
  binderNames 810a1bcb74988444206bd4c3a504cf72
import  -/  Language.PureScript.AST.Declarations 586bc75044e8737d02875208d17d4395
  Abs dae9a514c0c54a50406a57cd533f800a
  CaseAlternative 8464f1c9f0c33f15833817399a071704
  CaseAlternative e92f6ee78a22c0eadc3566d7d1f48d5b
  Constructor ea2b7d92995197a177f6abf42269c377
  DataDeclaration 2fcba6ad709595ed3c4d0926de54bc2c
  Declaration e92f6ee78a22c0eadc3566d7d1f48d5b
  DeclarationRef 1ef988d2f8db98f35f578bde9282f468
  ErrorInModule fa705731a479914ad1b2d8aff2d06ff6
  Expr e92f6ee78a22c0eadc3566d7d1f48d5b
  ExternDataDeclaration 45e3d2e61e8f85403449183876d3af2f
  ExternDeclaration 180e172298441327dfef1022795a10e0
  GuardedExpr 811952f37a620b8d78cc4a6176d99a2c
  GuardedExpr e92f6ee78a22c0eadc3566d7d1f48d5b
  KindRef fdcf7f61e078f63d583e2e92289fb303
  Let 5843430a3e31a1977aadcfb94efa8312
  Module 305128e30e200d34d712365aa2d509df
  Module 3342e00ee072addfd009ee61e87fb865
  Op bbe2a0a58ceeace944ccf429f680f6bc
  OverlappingNamesInLet 085f9e30de57cd4f95a01e47912680cb
  PatternGuard a27d707167917ad112543851031e65f9
  PositionedValue b90293950702fd6b659d7cd86d309f72
  ReExportRef 2fef75d8ce745db15f225b0cb5e0c76d
  TypeClassDeclaration 19936abcaf3693a6825ccbc13b2590dc
  TypeClassRef 0dfae6fa12be94e312c419132246a1f3
  TypeDeclaration 28394461dbd073cca9cdbd263dbb4335
  TypeDeclarationData 3e894c7cbf790244173310e6e620d669
  TypeFixityDeclaration 5a4e2ba83bf57ee4021fdafe70b4eb9a
  TypeInstanceDeclaration 46d66658dd5a30ba03e36fc960162f20
  TypeOpRef cd0b4bf0e37e512f28be11229ab2e497
  TypeRef 7b2aa9fe81ad40f64c659855da835def
  TypeSynonymDeclaration 1cfe9af195a40456074b96ff0ca4519c
  TypedValue 0acc3ace791a36484dcda3706df33cef
  UnknownName 4183c70ff29ad805571bed2cb1e6b9e3
  ValueFixityDeclaration 6da09cca72fc0dd8bafa2b8ed78d033e
  ValueOpRef 08efa0d335ba46b69b381a343c739614
  ValueRef 78dee2d86cdf935e8811ecdd18c169d3
  Var 5fd1e80d993ab2f76a4e002bbbfc9990
  declName 346365fb28af384d04391dc396f98282
  declRefName a467a4d4938967e35bf0f7f0e0d07090
  declSourceSpan 56c2d6f201f67f106a4f2e1dc3f0bb49
  getKindRef e3282980e675c7ad2175d21e599edc5c
  getTypeClassRef ea53048ed8eefd170e41dcd88fa96d29
  getTypeOpRef f544549c7044502c660701544ec93b94
  getValueDeclaration f4b5979539c3f43c9aac0104c9b38c92
  getValueOpRef 47a2050f95b57da4a8d94869a8fe7a30
  getValueRef 1fbe007758d53e3ecefa02005d694679
  isModuleRef e813ecefaf7692c4fa135ceea4ce559c
  valdeclIdent dc3fe29a39c3efd97807e85c8c5dc302
import  -/  Language.PureScript.AST.SourcePos 63acacac5b7be73d04e5be0047a9a89a
  SourceSpan 1e0cf2bd3ea18f97a2ff152297f09219
import  -/  Language.PureScript.AST.Traversals f5adaf844c5e9d0f0678a8b574a32aa6
  everywhereWithContextOnValuesM 8b088f6a1ad3879e25631321bc5daeec
import  -/  Language.PureScript.Crash 3dd739d57f17e8a1e9cd97afd3faf067
  exports: a9d2725f359c2d113bd38076e88ec681
  internalError d33c2a09c5cbe8e68c0bc27d1500ba1a
import  -/  Language.PureScript.Errors 3c1ad933587510f8b20a8c9ec2e86ce9
  exports: 8e61484c4664eceb943d9fc4820c721b
  MultipleErrors e1ef6a17348ccfe3ef65185d3c5f9026
  addHint 4d7c0f041e7397261babf0b1c1669b2a
  errorMessage 4308e76c0636918842d6acdb173a8e4b
  errorMessage' d5b3fcc13faf321f693b39ae31b8bd13
  parU ba83f09a68cd72d36addca6319b4b6e0
  warnAndRethrow 09f641606a5fc3036a7fc4bb9c410020
  warnAndRethrowWithPosition 15effeb3aa9f232bcc53dc3061683016
import  -/  Language.PureScript.Externs cf933be49760ec7d1e991d8ad7f6146f
  exports: caea0e8e36630f9e250d475ec2e68707
  EDDataConstructor 94c27508c5f32e87b7712899818bb5c7
  ExternsDeclaration a7fb565ada874d78b726c57090b05102
  ExternsFile 3c90d25a909106e2dfae91839ad7749d
  ExternsFile c010c09fe85776adf7c6787c7d79c898
  ExternsImport a0c06180974368a22aa990853f271778
  efDeclarations c010c09fe85776adf7c6787c7d79c898
  efExports c010c09fe85776adf7c6787c7d79c898
  efFixities c010c09fe85776adf7c6787c7d79c898
  efImports c010c09fe85776adf7c6787c7d79c898
  efModuleName c010c09fe85776adf7c6787c7d79c898
  efSourceSpan c010c09fe85776adf7c6787c7d79c898
  efTypeFixities c010c09fe85776adf7c6787c7d79c898
  efVersion c010c09fe85776adf7c6787c7d79c898
import  -/  Language.PureScript.Kinds e26b9cf8211f7e72bb44fdd3faed066e
  exports: fe71635ad7964c0d620fb0685614a050
  Kind 5e0361ee324aa435f4976ea2eac1777d
  NamedKind b009a23b35083771c6f52aa92ab5803a
  everywhereOnKindsM ff21b2e3cdf5ffd79b2d8bb43dd752d9
import  -/  Language.PureScript.Linter.Imports aefa9ff6006527af6830c71138331d72
  exports: a5703a90a81364728aef16783aa10d3e
  UsedImports 1fd6dfd4cba68941f850cb59562298e5
  lintImports 2cbe883cf0e056e9d20b04dc4422e515
import  -/  Language.PureScript.Names 00f694509122478d97b327fbbccae327
  exports: ad7ae34f85124c68e8ba1c90fb2e732f
  ClassName c5d98a635cb261f6a93bf01096d0c6ed
  ConstructorName 84054a8bbbe827ba2ce7da83056a95ee
  DctorName 058beae22056ca37fdd3776575b08a7a
  Ident bad3562aa6138b6192713ac281080869
  IdentName f85afb00b35a2b992fb8ad7cbb2f9711
  KiName 3648c75d7b729914a2a52509b0a9365e
  KindName 7782d66ce60bd67282cf566485701e07
  ModName bdc8f8682bdb984467bbbfa35cbd8589
  ModuleName 1b2ddf0c04464d2fa2588925f10c1966
  Name d04047edf96c18708b7b5f72cb565394
  OpName 9af301165f72160425c5e0dde6525338
  ProperName a7268334e0b909381550b9329cb80fcc
  Qualified b6e1bc9e7244a41d3c6149c9b5c2d6d8
  Qualified 1b2ddf0c04464d2fa2588925f10c1966
  TyClassName e53bd54ac0d1b704756a477849dbd836
  TyName 6bd149eabdb95c312f9b6bf9d9f06c67
  TyOpName 440dd328b811fbf1c8a081bffcb8593d
  TypeName 40ce511c66a72431b4e87351210f7b03
  TypeOpName db73fc39fef75f034a0b4a8074947dd9
  ValOpName c1457b90b10104e4d37147e7648f89b9
  ValueOpName 11964a7dc7a3029edbea30fc5b4578c2
import  -/  Language.PureScript.Sugar.Names.Env 97518f893bef0c5e5749cfa9e4ca9265
  exports: 1be6fa0858c130408a65d60cd8c577b4
  Env 2b6b2822bde15bda4afeb3aa3ef04e79
  Exports 7c4ca55fcb65d59830554b5419ec17fa
  Exports d2107d9c7383e14684c4687121fab2f3
  FromExplicit 13ed70bacf2f4f62060b18f3edd6a0ef
  FromImplicit 9a3c1cd7631438f2a2a4b7f7e9f3b574
  ImportProvenance 9eac2b49272ec0935fc080f37f37f0d8
  ImportRecord 5e10112f1717b877af1abe56772c155d
  ImportRecord 06c97ba5c09e065ef1b4ac69ccbfcc9e
  Imports 7c9c72c7228b1f42ba0fd828c0903103
  Imports 330f296cc3ed68256ee5fc6aa457fa42
  Local 202b3bfbcd0e55b7ad28981c7d0ee7cb
  Prim 2ea0c6934299748ec10ca03e85048eb5
  checkImportConflicts b8b504c1ae9bea5df4104ea2ebc0fe56
  exportedKinds d2107d9c7383e14684c4687121fab2f3
  exportedTypeClasses d2107d9c7383e14684c4687121fab2f3
  exportedTypeOps d2107d9c7383e14684c4687121fab2f3
  exportedTypes d2107d9c7383e14684c4687121fab2f3
  exportedValueOps d2107d9c7383e14684c4687121fab2f3
  exportedValues d2107d9c7383e14684c4687121fab2f3
  importName 06c97ba5c09e065ef1b4ac69ccbfcc9e
  importProvenance 06c97ba5c09e065ef1b4ac69ccbfcc9e
  importSourceModule 06c97ba5c09e065ef1b4ac69ccbfcc9e
  importSourceSpan 06c97ba5c09e065ef1b4ac69ccbfcc9e
  importedDataConstructors 330f296cc3ed68256ee5fc6aa457fa42
  importedKinds 330f296cc3ed68256ee5fc6aa457fa42
  importedModules 330f296cc3ed68256ee5fc6aa457fa42
  importedQualModules 330f296cc3ed68256ee5fc6aa457fa42
  importedTypeClasses 330f296cc3ed68256ee5fc6aa457fa42
  importedTypeOps 330f296cc3ed68256ee5fc6aa457fa42
  importedTypes 330f296cc3ed68256ee5fc6aa457fa42
  importedValueOps 330f296cc3ed68256ee5fc6aa457fa42
  importedValues 330f296cc3ed68256ee5fc6aa457fa42
  nullImports 5dfc688b52efa485e2b0285fa84553d6
  primEnv 8c4c1c2bebe4ba66e6b4639be4e62264
import  -/  Language.PureScript.Sugar.Names.Exports 3b5132341ad10275003b4520ddf27177
  exports: 963dc8947b023a3f9cb46aca0031de3b
  findExportable 9fe8257cce9f55b140e936d7fcf948f3
  resolveExports ed6efddb04666d77046e856244878825
import  -/  Language.PureScript.Sugar.Names.Imports ea0651e4823445a2f538974ee903c975
  exports: 85f8dff5874a25bd218daea1d8bb4d26
  resolveImports 04b450297daa20ef3026037975cea79f
  resolveModuleImport e8d056b5d314360439332a832f40b7e5
import  -/  Language.PureScript.Traversals e97764d7972cc6ba421a6be0a3ce6bda
  exports: cbb821b2ee7c6d00cdf62285e1dbe432
  defS d63aa97f74d8b43282d6090aabe13394
  sndM c93ef73e127a3a54c4cd1e5e2194b237
import  -/  Language.PureScript.Types 80a51f62cb3e6c71f024289b88f07b7f
  exports: 229bb7528146da886cffbefad5822e19
  ConstrainedType 7b7b9fe5fc37a912cec5b01815c7784d
  Constraint a0b1e737f9fdb5b2f711c97dd5895f69
  Constraint d5fc19231e8a71936895da17eade4f5b
  KindedType 7d9c2ac5dbbe89c236f431d3c9412617
  Type d5fc19231e8a71936895da17eade4f5b
  TypeConstructor c7b7bcec494a17e684a206aeb55ef57b
  TypeOp c293e95b09cf540c33c1d0b1480f5f80
  everywhereOnTypesM 3778d2154e8de7bd894aef40e0e2cb61
import  -/  transformers-0.5.5.0:Control.Monad.Trans.State.Lazy bb07ba19cd14893d125b163b03c16c98
89aa3379a71af7df27cdec1b4cdd09d5
  $sfromList ::
    [(Language.PureScript.Names.ProperName
        'Language.PureScript.Names.KindName,
      a)]
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.KindName)
         a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a
                   (ds :: [(Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.KindName,
                            a)]) ->
                 case ds of wild {
                   []
                   -> Data.Map.Internal.Tip
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.KindName)
                        @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case kx
                                  `cast`
                                (Language.PureScript.Names.N:ProperName[0]
                                     <'Language.PureScript.Names.KindName>_P) of nt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                           Data.Map.Internal.Bin
                             @ (Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.KindName)
                             @ a
                             1#
                             nt
                               `cast`
                             (Sym (Language.PureScript.Names.N:ProperName[0]
                                       <'Language.PureScript.Names.KindName>_P))
                             x
                             (Data.Map.Internal.Tip
                                @ (Language.PureScript.Names.ProperName
                                     'Language.PureScript.Names.KindName)
                                @ a)
                             (Data.Map.Internal.Tip
                                @ (Language.PureScript.Names.ProperName
                                     'Language.PureScript.Names.KindName)
                                @ a) }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case kx
                                  `cast`
                                (Language.PureScript.Names.N:ProperName[0]
                                     <'Language.PureScript.Names.KindName>_P) of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                           case ky
                                  `cast`
                                (Language.PureScript.Names.N:ProperName[0]
                                     <'Language.PureScript.Names.KindName>_P) of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                           case Data.Text.$w$ccompare ww1 ww2 ww3 ww5 ww6 ww7 of wild4 {
                             DEFAULT
                             -> Language.PureScript.Sugar.Names.$sfromList_$spoly_go14
                                  @ a
                                  ww4
                                    `cast`
                                  (Sym (Language.PureScript.Names.N:ProperName[0]
                                            <'Language.PureScript.Names.KindName>_P))
                                  ds3
                                  ipv1
                                  (Data.Map.Internal.Bin
                                     @ (Language.PureScript.Names.ProperName
                                          'Language.PureScript.Names.KindName)
                                     @ a
                                     1#
                                     ww
                                       `cast`
                                     (Sym (Language.PureScript.Names.N:ProperName[0]
                                               <'Language.PureScript.Names.KindName>_P))
                                     x
                                     (Data.Map.Internal.Tip
                                        @ (Language.PureScript.Names.ProperName
                                             'Language.PureScript.Names.KindName)
                                        @ a)
                                     (Data.Map.Internal.Tip
                                        @ (Language.PureScript.Names.ProperName
                                             'Language.PureScript.Names.KindName)
                                        @ a))
                             GHC.Types.LT
                             -> Language.PureScript.Sugar.Names.$sfromList_$s$wpoly_go13
                                  @ a
                                  ww4
                                    `cast`
                                  (Sym (Language.PureScript.Names.N:ProperName[0]
                                            <'Language.PureScript.Names.KindName>_P))
                                  ds3
                                  ipv1
                                  (Data.Map.Internal.Bin
                                     @ (Language.PureScript.Names.ProperName
                                          'Language.PureScript.Names.KindName)
                                     @ a
                                     1#
                                     ww
                                       `cast`
                                     (Sym (Language.PureScript.Names.N:ProperName[0]
                                               <'Language.PureScript.Names.KindName>_P))
                                     x
                                     (Data.Map.Internal.Tip
                                        @ (Language.PureScript.Names.ProperName
                                             'Language.PureScript.Names.KindName)
                                        @ a)
                                     (Data.Map.Internal.Tip
                                        @ (Language.PureScript.Names.ProperName
                                             'Language.PureScript.Names.KindName)
                                        @ a))
                                  1# } } } } } } }) -}
8393618cc37c78d52791c0066651333f
  $sfromList1 ::
    [(Language.PureScript.Names.OpName
        'Language.PureScript.Names.ValueOpName,
      a)]
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.ValueOpName)
         a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a
                   (ds :: [(Language.PureScript.Names.OpName
                              'Language.PureScript.Names.ValueOpName,
                            a)]) ->
                 case ds of wild {
                   []
                   -> Data.Map.Internal.Tip
                        @ (Language.PureScript.Names.OpName
                             'Language.PureScript.Names.ValueOpName)
                        @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case kx
                                  `cast`
                                (Language.PureScript.Names.N:OpName[0]
                                     <'Language.PureScript.Names.ValueOpName>_P) of nt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                           Data.Map.Internal.Bin
                             @ (Language.PureScript.Names.OpName
                                  'Language.PureScript.Names.ValueOpName)
                             @ a
                             1#
                             nt
                               `cast`
                             (Sym (Language.PureScript.Names.N:OpName[0]
                                       <'Language.PureScript.Names.ValueOpName>_P))
                             x
                             (Data.Map.Internal.Tip
                                @ (Language.PureScript.Names.OpName
                                     'Language.PureScript.Names.ValueOpName)
                                @ a)
                             (Data.Map.Internal.Tip
                                @ (Language.PureScript.Names.OpName
                                     'Language.PureScript.Names.ValueOpName)
                                @ a) }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case kx
                                  `cast`
                                (Language.PureScript.Names.N:OpName[0]
                                     <'Language.PureScript.Names.ValueOpName>_P) of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                           case ky
                                  `cast`
                                (Language.PureScript.Names.N:OpName[0]
                                     <'Language.PureScript.Names.ValueOpName>_P) of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                           case Data.Text.$w$ccompare ww1 ww2 ww3 ww5 ww6 ww7 of wild4 {
                             DEFAULT
                             -> Language.PureScript.Sugar.Names.$sfromList_$spoly_go1
                                  @ a
                                  ww4
                                    `cast`
                                  (Sym (Language.PureScript.Names.N:OpName[0]
                                            <'Language.PureScript.Names.ValueOpName>_P))
                                  ds3
                                  ipv1
                                  (Data.Map.Internal.Bin
                                     @ (Language.PureScript.Names.OpName
                                          'Language.PureScript.Names.ValueOpName)
                                     @ a
                                     1#
                                     ww
                                       `cast`
                                     (Sym (Language.PureScript.Names.N:OpName[0]
                                               <'Language.PureScript.Names.ValueOpName>_P))
                                     x
                                     (Data.Map.Internal.Tip
                                        @ (Language.PureScript.Names.OpName
                                             'Language.PureScript.Names.ValueOpName)
                                        @ a)
                                     (Data.Map.Internal.Tip
                                        @ (Language.PureScript.Names.OpName
                                             'Language.PureScript.Names.ValueOpName)
                                        @ a))
                             GHC.Types.LT
                             -> Language.PureScript.Sugar.Names.$sfromList_$s$wpoly_go1
                                  @ a
                                  ww4
                                    `cast`
                                  (Sym (Language.PureScript.Names.N:OpName[0]
                                            <'Language.PureScript.Names.ValueOpName>_P))
                                  ds3
                                  ipv1
                                  (Data.Map.Internal.Bin
                                     @ (Language.PureScript.Names.OpName
                                          'Language.PureScript.Names.ValueOpName)
                                     @ a
                                     1#
                                     ww
                                       `cast`
                                     (Sym (Language.PureScript.Names.N:OpName[0]
                                               <'Language.PureScript.Names.ValueOpName>_P))
                                     x
                                     (Data.Map.Internal.Tip
                                        @ (Language.PureScript.Names.OpName
                                             'Language.PureScript.Names.ValueOpName)
                                        @ a)
                                     (Data.Map.Internal.Tip
                                        @ (Language.PureScript.Names.OpName
                                             'Language.PureScript.Names.ValueOpName)
                                        @ a))
                                  1# } } } } } } }) -}
0f87af49a18a43aeb6a372bf1f92cc09
  $sfromList2 ::
    [(Language.PureScript.Names.Ident, a)]
    -> Data.Map.Internal.Map Language.PureScript.Names.Ident a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a (ds :: [(Language.PureScript.Names.Ident, a)]) ->
                 case ds of wild {
                   [] -> Data.Map.Internal.Tip @ Language.PureScript.Names.Ident @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case kx of dt { DEFAULT ->
                           Data.Map.Internal.Bin
                             @ Language.PureScript.Names.Ident
                             @ a
                             1#
                             dt
                             x
                             (Data.Map.Internal.Tip @ Language.PureScript.Names.Ident @ a)
                             (Data.Map.Internal.Tip @ Language.PureScript.Names.Ident @ a) }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case Language.PureScript.Names.$fOrdIdent_$c< kx ky of wild4 {
                             GHC.Types.False
                             -> case kx of dt { DEFAULT ->
                                Language.PureScript.Sugar.Names.$sfromList_$spoly_go2
                                  @ a
                                  ky
                                  ds3
                                  ipv1
                                  (Data.Map.Internal.Bin
                                     @ Language.PureScript.Names.Ident
                                     @ a
                                     1#
                                     dt
                                     x
                                     (Data.Map.Internal.Tip @ Language.PureScript.Names.Ident @ a)
                                     (Data.Map.Internal.Tip
                                        @ Language.PureScript.Names.Ident
                                        @ a)) }
                             GHC.Types.True
                             -> case kx of dt { DEFAULT ->
                                Language.PureScript.Sugar.Names.$sfromList_$s$wpoly_go2
                                  @ a
                                  ky
                                  ds3
                                  ipv1
                                  (Data.Map.Internal.Bin
                                     @ Language.PureScript.Names.Ident
                                     @ a
                                     1#
                                     dt
                                     x
                                     (Data.Map.Internal.Tip @ Language.PureScript.Names.Ident @ a)
                                     (Data.Map.Internal.Tip @ Language.PureScript.Names.Ident @ a))
                                  1# } } } } } }) -}
37d55b12e36195c97af23e08a7dd4213
  $sfromList3 ::
    [(Language.PureScript.Names.ProperName
        'Language.PureScript.Names.ClassName,
      a)]
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
         a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a
                   (ds :: [(Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ClassName,
                            a)]) ->
                 case ds of wild {
                   []
                   -> Data.Map.Internal.Tip
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ClassName)
                        @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case kx
                                  `cast`
                                (Language.PureScript.Names.N:ProperName[0]
                                     <'Language.PureScript.Names.ClassName>_P) of nt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                           Data.Map.Internal.Bin
                             @ (Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.ClassName)
                             @ a
                             1#
                             nt
                               `cast`
                             (Sym (Language.PureScript.Names.N:ProperName[0]
                                       <'Language.PureScript.Names.ClassName>_P))
                             x
                             (Data.Map.Internal.Tip
                                @ (Language.PureScript.Names.ProperName
                                     'Language.PureScript.Names.ClassName)
                                @ a)
                             (Data.Map.Internal.Tip
                                @ (Language.PureScript.Names.ProperName
                                     'Language.PureScript.Names.ClassName)
                                @ a) }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case kx
                                  `cast`
                                (Language.PureScript.Names.N:ProperName[0]
                                     <'Language.PureScript.Names.ClassName>_P) of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                           case ky
                                  `cast`
                                (Language.PureScript.Names.N:ProperName[0]
                                     <'Language.PureScript.Names.ClassName>_P) of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                           case Data.Text.$w$ccompare ww1 ww2 ww3 ww5 ww6 ww7 of wild4 {
                             DEFAULT
                             -> Language.PureScript.Sugar.Names.$sfromList_$spoly_go3
                                  @ a
                                  ww4
                                    `cast`
                                  (Sym (Language.PureScript.Names.N:ProperName[0]
                                            <'Language.PureScript.Names.ClassName>_P))
                                  ds3
                                  ipv1
                                  (Data.Map.Internal.Bin
                                     @ (Language.PureScript.Names.ProperName
                                          'Language.PureScript.Names.ClassName)
                                     @ a
                                     1#
                                     ww
                                       `cast`
                                     (Sym (Language.PureScript.Names.N:ProperName[0]
                                               <'Language.PureScript.Names.ClassName>_P))
                                     x
                                     (Data.Map.Internal.Tip
                                        @ (Language.PureScript.Names.ProperName
                                             'Language.PureScript.Names.ClassName)
                                        @ a)
                                     (Data.Map.Internal.Tip
                                        @ (Language.PureScript.Names.ProperName
                                             'Language.PureScript.Names.ClassName)
                                        @ a))
                             GHC.Types.LT
                             -> Language.PureScript.Sugar.Names.$sfromList_$s$wpoly_go3
                                  @ a
                                  ww4
                                    `cast`
                                  (Sym (Language.PureScript.Names.N:ProperName[0]
                                            <'Language.PureScript.Names.ClassName>_P))
                                  ds3
                                  ipv1
                                  (Data.Map.Internal.Bin
                                     @ (Language.PureScript.Names.ProperName
                                          'Language.PureScript.Names.ClassName)
                                     @ a
                                     1#
                                     ww
                                       `cast`
                                     (Sym (Language.PureScript.Names.N:ProperName[0]
                                               <'Language.PureScript.Names.ClassName>_P))
                                     x
                                     (Data.Map.Internal.Tip
                                        @ (Language.PureScript.Names.ProperName
                                             'Language.PureScript.Names.ClassName)
                                        @ a)
                                     (Data.Map.Internal.Tip
                                        @ (Language.PureScript.Names.ProperName
                                             'Language.PureScript.Names.ClassName)
                                        @ a))
                                  1# } } } } } } }) -}
859edb5d4071f85097d444cee384ed6a
  $sfromList4 ::
    [(Language.PureScript.Names.OpName
        'Language.PureScript.Names.TypeOpName,
      a)]
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.TypeOpName)
         a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a
                   (ds :: [(Language.PureScript.Names.OpName
                              'Language.PureScript.Names.TypeOpName,
                            a)]) ->
                 case ds of wild {
                   []
                   -> Data.Map.Internal.Tip
                        @ (Language.PureScript.Names.OpName
                             'Language.PureScript.Names.TypeOpName)
                        @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case kx
                                  `cast`
                                (Language.PureScript.Names.N:OpName[0]
                                     <'Language.PureScript.Names.TypeOpName>_P) of nt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                           Data.Map.Internal.Bin
                             @ (Language.PureScript.Names.OpName
                                  'Language.PureScript.Names.TypeOpName)
                             @ a
                             1#
                             nt
                               `cast`
                             (Sym (Language.PureScript.Names.N:OpName[0]
                                       <'Language.PureScript.Names.TypeOpName>_P))
                             x
                             (Data.Map.Internal.Tip
                                @ (Language.PureScript.Names.OpName
                                     'Language.PureScript.Names.TypeOpName)
                                @ a)
                             (Data.Map.Internal.Tip
                                @ (Language.PureScript.Names.OpName
                                     'Language.PureScript.Names.TypeOpName)
                                @ a) }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case kx
                                  `cast`
                                (Language.PureScript.Names.N:OpName[0]
                                     <'Language.PureScript.Names.TypeOpName>_P) of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                           case ky
                                  `cast`
                                (Language.PureScript.Names.N:OpName[0]
                                     <'Language.PureScript.Names.TypeOpName>_P) of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                           case Data.Text.$w$ccompare ww1 ww2 ww3 ww5 ww6 ww7 of wild4 {
                             DEFAULT
                             -> Language.PureScript.Sugar.Names.$sfromList_$spoly_go4
                                  @ a
                                  ww4
                                    `cast`
                                  (Sym (Language.PureScript.Names.N:OpName[0]
                                            <'Language.PureScript.Names.TypeOpName>_P))
                                  ds3
                                  ipv1
                                  (Data.Map.Internal.Bin
                                     @ (Language.PureScript.Names.OpName
                                          'Language.PureScript.Names.TypeOpName)
                                     @ a
                                     1#
                                     ww
                                       `cast`
                                     (Sym (Language.PureScript.Names.N:OpName[0]
                                               <'Language.PureScript.Names.TypeOpName>_P))
                                     x
                                     (Data.Map.Internal.Tip
                                        @ (Language.PureScript.Names.OpName
                                             'Language.PureScript.Names.TypeOpName)
                                        @ a)
                                     (Data.Map.Internal.Tip
                                        @ (Language.PureScript.Names.OpName
                                             'Language.PureScript.Names.TypeOpName)
                                        @ a))
                             GHC.Types.LT
                             -> Language.PureScript.Sugar.Names.$sfromList_$s$wpoly_go4
                                  @ a
                                  ww4
                                    `cast`
                                  (Sym (Language.PureScript.Names.N:OpName[0]
                                            <'Language.PureScript.Names.TypeOpName>_P))
                                  ds3
                                  ipv1
                                  (Data.Map.Internal.Bin
                                     @ (Language.PureScript.Names.OpName
                                          'Language.PureScript.Names.TypeOpName)
                                     @ a
                                     1#
                                     ww
                                       `cast`
                                     (Sym (Language.PureScript.Names.N:OpName[0]
                                               <'Language.PureScript.Names.TypeOpName>_P))
                                     x
                                     (Data.Map.Internal.Tip
                                        @ (Language.PureScript.Names.OpName
                                             'Language.PureScript.Names.TypeOpName)
                                        @ a)
                                     (Data.Map.Internal.Tip
                                        @ (Language.PureScript.Names.OpName
                                             'Language.PureScript.Names.TypeOpName)
                                        @ a))
                                  1# } } } } } } }) -}
cc37b397e0301dfde1e1670f1c6c5df6
  $sfromList5 ::
    [(Language.PureScript.Names.ProperName
        'Language.PureScript.Names.TypeName,
      a)]
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName)
         a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a
                   (ds :: [(Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.TypeName,
                            a)]) ->
                 case ds of wild {
                   []
                   -> Data.Map.Internal.Tip
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.TypeName)
                        @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case kx
                                  `cast`
                                (Language.PureScript.Names.N:ProperName[0]
                                     <'Language.PureScript.Names.TypeName>_P) of nt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                           Data.Map.Internal.Bin
                             @ (Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.TypeName)
                             @ a
                             1#
                             nt
                               `cast`
                             (Sym (Language.PureScript.Names.N:ProperName[0]
                                       <'Language.PureScript.Names.TypeName>_P))
                             x
                             (Data.Map.Internal.Tip
                                @ (Language.PureScript.Names.ProperName
                                     'Language.PureScript.Names.TypeName)
                                @ a)
                             (Data.Map.Internal.Tip
                                @ (Language.PureScript.Names.ProperName
                                     'Language.PureScript.Names.TypeName)
                                @ a) }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case kx
                                  `cast`
                                (Language.PureScript.Names.N:ProperName[0]
                                     <'Language.PureScript.Names.TypeName>_P) of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                           case ky
                                  `cast`
                                (Language.PureScript.Names.N:ProperName[0]
                                     <'Language.PureScript.Names.TypeName>_P) of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                           case Data.Text.$w$ccompare ww1 ww2 ww3 ww5 ww6 ww7 of wild4 {
                             DEFAULT
                             -> Language.PureScript.Sugar.Names.$sfromList_$spoly_go5
                                  @ a
                                  ww4
                                    `cast`
                                  (Sym (Language.PureScript.Names.N:ProperName[0]
                                            <'Language.PureScript.Names.TypeName>_P))
                                  ds3
                                  ipv1
                                  (Data.Map.Internal.Bin
                                     @ (Language.PureScript.Names.ProperName
                                          'Language.PureScript.Names.TypeName)
                                     @ a
                                     1#
                                     ww
                                       `cast`
                                     (Sym (Language.PureScript.Names.N:ProperName[0]
                                               <'Language.PureScript.Names.TypeName>_P))
                                     x
                                     (Data.Map.Internal.Tip
                                        @ (Language.PureScript.Names.ProperName
                                             'Language.PureScript.Names.TypeName)
                                        @ a)
                                     (Data.Map.Internal.Tip
                                        @ (Language.PureScript.Names.ProperName
                                             'Language.PureScript.Names.TypeName)
                                        @ a))
                             GHC.Types.LT
                             -> Language.PureScript.Sugar.Names.$sfromList_$s$wpoly_go5
                                  @ a
                                  ww4
                                    `cast`
                                  (Sym (Language.PureScript.Names.N:ProperName[0]
                                            <'Language.PureScript.Names.TypeName>_P))
                                  ds3
                                  ipv1
                                  (Data.Map.Internal.Bin
                                     @ (Language.PureScript.Names.ProperName
                                          'Language.PureScript.Names.TypeName)
                                     @ a
                                     1#
                                     ww
                                       `cast`
                                     (Sym (Language.PureScript.Names.N:ProperName[0]
                                               <'Language.PureScript.Names.TypeName>_P))
                                     x
                                     (Data.Map.Internal.Tip
                                        @ (Language.PureScript.Names.ProperName
                                             'Language.PureScript.Names.TypeName)
                                        @ a)
                                     (Data.Map.Internal.Tip
                                        @ (Language.PureScript.Names.ProperName
                                             'Language.PureScript.Names.TypeName)
                                        @ a))
                                  1# } } } } } } }) -}
843bcd566f9470f49b88885cbb897371
  $sfromList6 ::
    [(Language.PureScript.Names.Name, a)]
    -> Data.Map.Internal.Map Language.PureScript.Names.Name a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a (ds :: [(Language.PureScript.Names.Name, a)]) ->
                 case ds of wild {
                   [] -> Data.Map.Internal.Tip @ Language.PureScript.Names.Name @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case kx of dt { DEFAULT ->
                           Data.Map.Internal.Bin
                             @ Language.PureScript.Names.Name
                             @ a
                             1#
                             dt
                             x
                             (Data.Map.Internal.Tip @ Language.PureScript.Names.Name @ a)
                             (Data.Map.Internal.Tip @ Language.PureScript.Names.Name @ a) }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case Language.PureScript.Names.$fOrdName_$ccompare kx ky of wild4 {
                             DEFAULT
                             -> case kx of dt { DEFAULT ->
                                Language.PureScript.Sugar.Names.$sfromList_$spoly_go6
                                  @ a
                                  ky
                                  ds3
                                  ipv1
                                  (Data.Map.Internal.Bin
                                     @ Language.PureScript.Names.Name
                                     @ a
                                     1#
                                     dt
                                     x
                                     (Data.Map.Internal.Tip @ Language.PureScript.Names.Name @ a)
                                     (Data.Map.Internal.Tip @ Language.PureScript.Names.Name @ a)) }
                             GHC.Types.LT
                             -> case kx of dt { DEFAULT ->
                                Language.PureScript.Sugar.Names.$sfromList_$s$wpoly_go6
                                  @ a
                                  ky
                                  ds3
                                  ipv1
                                  (Data.Map.Internal.Bin
                                     @ Language.PureScript.Names.Name
                                     @ a
                                     1#
                                     dt
                                     x
                                     (Data.Map.Internal.Tip @ Language.PureScript.Names.Name @ a)
                                     (Data.Map.Internal.Tip @ Language.PureScript.Names.Name @ a))
                                  1# } } } } } }) -}
2acefdece6bcc7d070560806e76caeb8
  $sfromList_$s$wpoly_go1 ::
    Language.PureScript.Names.OpName
      'Language.PureScript.Names.ValueOpName
    -> a
    -> [(Language.PureScript.Names.OpName
           'Language.PureScript.Names.ValueOpName,
         a)]
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.ValueOpName)
         a
    -> GHC.Prim.Int#
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.ValueOpName)
         a
  {- Arity: 5, Strictness: <S,1*U(U,U,U)><L,U><S,1*U><S,1*U><L,U> -}
3ed1fde30c61e24229961cdd3c205dd2
  $sfromList_$s$wpoly_go13 ::
    Language.PureScript.Names.ProperName
      'Language.PureScript.Names.KindName
    -> a
    -> [(Language.PureScript.Names.ProperName
           'Language.PureScript.Names.KindName,
         a)]
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.KindName)
         a
    -> GHC.Prim.Int#
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.KindName)
         a
  {- Arity: 5, Strictness: <S,1*U(U,U,U)><L,U><S,1*U><S,1*U><L,U> -}
1e67f575849640961fc3ec4156b351e8
  $sfromList_$s$wpoly_go2 ::
    Language.PureScript.Names.Ident
    -> a
    -> [(Language.PureScript.Names.Ident, a)]
    -> Data.Map.Internal.Map Language.PureScript.Names.Ident a
    -> GHC.Prim.Int#
    -> Data.Map.Internal.Map Language.PureScript.Names.Ident a
  {- Arity: 5, Strictness: <S,U><L,U><S,1*U><S,1*U><L,U> -}
98b7205b88f40c69d7d0f11a0bd83085
  $sfromList_$s$wpoly_go3 ::
    Language.PureScript.Names.ProperName
      'Language.PureScript.Names.ClassName
    -> a
    -> [(Language.PureScript.Names.ProperName
           'Language.PureScript.Names.ClassName,
         a)]
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
         a
    -> GHC.Prim.Int#
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
         a
  {- Arity: 5, Strictness: <S,1*U(U,U,U)><L,U><S,1*U><S,1*U><L,U> -}
62a33715fba8b7563adaddad5a438766
  $sfromList_$s$wpoly_go4 ::
    Language.PureScript.Names.OpName
      'Language.PureScript.Names.TypeOpName
    -> a
    -> [(Language.PureScript.Names.OpName
           'Language.PureScript.Names.TypeOpName,
         a)]
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.TypeOpName)
         a
    -> GHC.Prim.Int#
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.TypeOpName)
         a
  {- Arity: 5, Strictness: <S,1*U(U,U,U)><L,U><S,1*U><S,1*U><L,U> -}
51923610bb36430f68586e2faae78247
  $sfromList_$s$wpoly_go5 ::
    Language.PureScript.Names.ProperName
      'Language.PureScript.Names.TypeName
    -> a
    -> [(Language.PureScript.Names.ProperName
           'Language.PureScript.Names.TypeName,
         a)]
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName)
         a
    -> GHC.Prim.Int#
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName)
         a
  {- Arity: 5, Strictness: <S,1*U(U,U,U)><L,U><S,1*U><S,1*U><L,U> -}
584d3e0740a88360704abe15dc114f09
  $sfromList_$s$wpoly_go6 ::
    Language.PureScript.Names.Name
    -> a
    -> [(Language.PureScript.Names.Name, a)]
    -> Data.Map.Internal.Map Language.PureScript.Names.Name a
    -> GHC.Prim.Int#
    -> Data.Map.Internal.Map Language.PureScript.Names.Name a
  {- Arity: 5, Strictness: <S,U><L,U><S,1*U><S,1*U><L,U> -}
d90caabae502bfb01193fbfdefbdf872
  $sfromList_$spoly_go1 ::
    Language.PureScript.Names.OpName
      'Language.PureScript.Names.ValueOpName
    -> a
    -> [(Language.PureScript.Names.OpName
           'Language.PureScript.Names.ValueOpName,
         a)]
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.ValueOpName)
         a
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.ValueOpName)
         a
  {- Arity: 4, Strictness: <S(SSS),1*U(U,U,U)><L,U><S,1*U><S,1*U> -}
ac02e3a7ecfbc9ae6f36ee0c147db0a8
  $sfromList_$spoly_go14 ::
    Language.PureScript.Names.ProperName
      'Language.PureScript.Names.KindName
    -> a
    -> [(Language.PureScript.Names.ProperName
           'Language.PureScript.Names.KindName,
         a)]
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.KindName)
         a
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.KindName)
         a
  {- Arity: 4, Strictness: <S(SSS),1*U(U,U,U)><L,U><S,1*U><S,1*U> -}
755dd0b4d035bc687f2b9e6d698fd3ef
  $sfromList_$spoly_go2 ::
    Language.PureScript.Names.Ident
    -> a
    -> [(Language.PureScript.Names.Ident, a)]
    -> Data.Map.Internal.Map Language.PureScript.Names.Ident a
    -> Data.Map.Internal.Map Language.PureScript.Names.Ident a
  {- Arity: 4, Strictness: <S,U><L,U><S,1*U><S,1*U> -}
6699e51e9e2916d301ddf40dd005799b
  $sfromList_$spoly_go3 ::
    Language.PureScript.Names.ProperName
      'Language.PureScript.Names.ClassName
    -> a
    -> [(Language.PureScript.Names.ProperName
           'Language.PureScript.Names.ClassName,
         a)]
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
         a
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
         a
  {- Arity: 4, Strictness: <S(SSS),1*U(U,U,U)><L,U><S,1*U><S,1*U> -}
64ac5d559709c22ab9f51e525cdbf7f7
  $sfromList_$spoly_go4 ::
    Language.PureScript.Names.OpName
      'Language.PureScript.Names.TypeOpName
    -> a
    -> [(Language.PureScript.Names.OpName
           'Language.PureScript.Names.TypeOpName,
         a)]
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.TypeOpName)
         a
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.TypeOpName)
         a
  {- Arity: 4, Strictness: <S(SSS),1*U(U,U,U)><L,U><S,1*U><S,1*U> -}
150063df2044803154f224b03fb51386
  $sfromList_$spoly_go5 ::
    Language.PureScript.Names.ProperName
      'Language.PureScript.Names.TypeName
    -> a
    -> [(Language.PureScript.Names.ProperName
           'Language.PureScript.Names.TypeName,
         a)]
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName)
         a
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName)
         a
  {- Arity: 4, Strictness: <S(SSS),1*U(U,U,U)><L,U><S,1*U><S,1*U> -}
f307f4ac6e29b7790fd082ce7ab2472f
  $sfromList_$spoly_go6 ::
    Language.PureScript.Names.Name
    -> a
    -> [(Language.PureScript.Names.Name, a)]
    -> Data.Map.Internal.Map Language.PureScript.Names.Name a
    -> Data.Map.Internal.Map Language.PureScript.Names.Name a
  {- Arity: 4, Strictness: <S,U><L,U><S,1*U><S,1*U> -}
b9b8bf6b8f02332605b4028bd4b2d1aa
  $sinsertWith_$sgo13 ::
    (a1 -> a1 -> a1)
    -> Language.PureScript.Names.ModuleName
    -> a1
    -> Data.Map.Internal.Map Language.PureScript.Names.ModuleName a1
    -> Data.Map.Internal.Map Language.PureScript.Names.ModuleName a1
  {- Arity: 4, Strictness: <L,1*C1(C1(U))><S,1*U><L,U><S,1*U> -}
136c78c5670a7f4dec916ddf672a2c1f
  $sinsert_$sgo2 ::
    Language.PureScript.Names.Ident
    -> Language.PureScript.Names.Ident
    -> a1
    -> Data.Map.Internal.Map Language.PureScript.Names.Ident a1
    -> Data.Map.Internal.Map Language.PureScript.Names.Ident a1
  {- Arity: 4, Strictness: <L,U><S,1*U><L,U><S,1*U> -}
be0a3e1f53022c2c7cded59133257a7d
  $sinsert_$sgo6 ::
    Language.PureScript.Names.Name
    -> Language.PureScript.Names.Name
    -> a1
    -> Data.Map.Internal.Map Language.PureScript.Names.Name a1
    -> Data.Map.Internal.Map Language.PureScript.Names.Name a1
  {- Arity: 4, Strictness: <L,U><S,1*U><L,U><S,1*U> -}
694d7abb726a3b120cf3a5370bbe26e0
  $sinsert_$sgo7 ::
    Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ModuleName
    -> a1
    -> Data.Map.Internal.Map Language.PureScript.Names.ModuleName a1
    -> Data.Map.Internal.Map Language.PureScript.Names.ModuleName a1
  {- Arity: 4, Strictness: <L,U><S,1*U><L,U><S,1*U> -}
1eab3946536b123567526ae4694ffed4
  $slookup15 ::
    Language.PureScript.Names.ModuleName
    -> Data.Map.Internal.Map Language.PureScript.Names.ModuleName a
    -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
71d2d91f5a727dd24c6b442577fbabea
  $slookup17 ::
    Language.PureScript.Names.Name
    -> Data.Map.Internal.Map Language.PureScript.Names.Name a
    -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
1f021519a3947cd10bfbdbfbf946b552
  $slookup_$s$wpoly_go1 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.KindName))
      a
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.KindName
    -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U(U,U,U)> -}
f257b4f862cb14ce8f292d7f8849d003
  $slookup_$s$wpoly_go10 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName))
      a
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> ((Data.Text.Internal.Text :: *)
        ~R# (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName :: *)) =>
       GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S,1*U><L,U><L,U><L,U><L,U> -}
61d3c2742f16fed192a60b998d3d5cc4
  $slookup_$s$wpoly_go11 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ConstructorName))
      a
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ConstructorName
    -> Language.PureScript.Names.ModuleName
    -> GHC.Base.Maybe a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U(U,U,U)><L,U> -}
e28506e8693221fc2c3aaa43f0ff44e7
  $slookup_$s$wpoly_go12 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ConstructorName))
      a
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ConstructorName
    -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U(U,U,U)> -}
6be6e9eb13cb4f9b644dc264a58aab8b
  $slookup_$s$wpoly_go13 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.KindName))
      a
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.KindName
    -> Language.PureScript.Names.ModuleName
    -> GHC.Base.Maybe a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U(U,U,U)><L,U> -}
242ff2e0ec5b9af40b6dbe005010d34d
  $slookup_$s$wpoly_go14 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ConstructorName))
      a
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> ((Data.Text.Internal.Text :: *)
        ~R# (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ConstructorName :: *)) =>
       GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S,1*U><L,U><L,U><L,U><L,U> -}
ddccdc33175ba6843b99c24b46e85dcc
  $slookup_$s$wpoly_go15 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.TypeOpName))
      a
    -> Language.PureScript.Names.OpName
         'Language.PureScript.Names.TypeOpName
    -> Language.PureScript.Names.ModuleName
    -> GHC.Base.Maybe a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U(U,U,U)><L,U> -}
2cddbe2c750aa5dd51d612dc781c82c2
  $slookup_$s$wpoly_go16 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.TypeOpName))
      a
    -> Language.PureScript.Names.OpName
         'Language.PureScript.Names.TypeOpName
    -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U(U,U,U)> -}
031442241ea59c501c66c4d819857cf8
  $slookup_$s$wpoly_go17 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.TypeOpName))
      a
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> ((Data.Text.Internal.Text :: *)
        ~R# (Language.PureScript.Names.OpName
               'Language.PureScript.Names.TypeOpName :: *)) =>
       GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S,1*U><L,U><L,U><L,U><L,U> -}
d69b091676b7c17e24d1726ef0d894c5
  $slookup_$s$wpoly_go18 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName))
      a
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName
    -> Language.PureScript.Names.ModuleName
    -> GHC.Base.Maybe a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U(U,U,U)><L,U> -}
7881af34a8d03e4e429a3cc5c195b604
  $slookup_$s$wpoly_go19 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName))
      a
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName
    -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U(U,U,U)> -}
46d156a8b9b46ba29e54eeace8ef966a
  $slookup_$s$wpoly_go2 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.KindName))
      a
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> ((Data.Text.Internal.Text :: *)
        ~R# (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.KindName :: *)) =>
       GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S,1*U><L,U><L,U><L,U><L,U> -}
f7036c84b55a5d0f260bb7f2e0f792c3
  $slookup_$s$wpoly_go20 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName))
      a
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> ((Data.Text.Internal.Text :: *)
        ~R# (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.TypeName :: *)) =>
       GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S,1*U><L,U><L,U><L,U><L,U> -}
50fe50ac811dc9c8117de694b4bb42bb
  $slookup_$s$wpoly_go3 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.ValueOpName))
      a
    -> Language.PureScript.Names.OpName
         'Language.PureScript.Names.ValueOpName
    -> Language.PureScript.Names.ModuleName
    -> GHC.Base.Maybe a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U(U,U,U)><L,U> -}
b46194e73efecc5b10f009ef0f2eccf1
  $slookup_$s$wpoly_go4 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.ValueOpName))
      a
    -> Language.PureScript.Names.OpName
         'Language.PureScript.Names.ValueOpName
    -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U(U,U,U)> -}
1486bee74b1d448bf95316ca0bf7070b
  $slookup_$s$wpoly_go5 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.ValueOpName))
      a
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> ((Data.Text.Internal.Text :: *)
        ~R# (Language.PureScript.Names.OpName
               'Language.PureScript.Names.ValueOpName :: *)) =>
       GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S,1*U><L,U><L,U><L,U><L,U> -}
4d52ab801c3e9660cfa0b3fdead73aa8
  $slookup_$s$wpoly_go6 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         Language.PureScript.Names.Ident)
      [Language.PureScript.Sugar.Names.Env.ImportRecord
         Language.PureScript.Names.Ident]
    -> Language.PureScript.Names.Ident
    -> Language.PureScript.Names.ModuleName
    -> GHC.Base.Maybe
         [Language.PureScript.Sugar.Names.Env.ImportRecord
            Language.PureScript.Names.Ident]
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,U><L,U> -}
68081bfe471d1d2969a1864c67cf51c6
  $slookup_$s$wpoly_go7 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         Language.PureScript.Names.Ident)
      [Language.PureScript.Sugar.Names.Env.ImportRecord
         Language.PureScript.Names.Ident]
    -> Language.PureScript.Names.Ident
    -> GHC.Base.Maybe
         [Language.PureScript.Sugar.Names.Env.ImportRecord
            Language.PureScript.Names.Ident]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U> -}
50d1332440f9721235c0504b575b0d44
  $slookup_$s$wpoly_go8 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName))
      a
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> Language.PureScript.Names.ModuleName
    -> GHC.Base.Maybe a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U(U,U,U)><L,U> -}
aa5d984e18129bb01bf2ab48df272517
  $slookup_$s$wpoly_go9 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName))
      a
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U(U,U,U)> -}
86398ff41448d9e25c077d18be55d439
  $smember_go3 ::
    Language.PureScript.Names.ModuleName
    -> Data.Set.Internal.Set Language.PureScript.Names.ModuleName
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
ada52b086dada71ef81f2cef5a87eb7b
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Language.PureScript.Sugar.Names.$trModule3
                   Language.PureScript.Sugar.Names.$trModule1) -}
15f4c3cbea20cf4918552a21e78a3bd9
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Sugar.Names.$trModule2) -}
e702232eb3897379accdb96140a7bba9
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Language.PureScript.Sugar.Names"#) -}
5355fee3007b6698c4e7812c3a550212
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Sugar.Names.$trModule4) -}
be33caa07f6e9ebb8e9c566e0856e57a
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"#) -}
5d28937d1910c68270cb1a2ccc645a01
  $w$sgo1 ::
    Language.PureScript.Names.OpName
      'Language.PureScript.Names.ValueOpName
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> a1
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.ValueOpName)
         a1
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.ValueOpName)
         a1
  {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><L,U><S,1*U>,
     Inline: [0] -}
1039d90e149be2c1d81130c078b035c8
  $w$sgo13 ::
    Language.PureScript.Names.ProperName
      'Language.PureScript.Names.KindName
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> a1
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.KindName)
         a1
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.KindName)
         a1
  {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><L,U><S,1*U>,
     Inline: [0] -}
fe76c21d8a0b7aca78b6a52aaf629b6e
  $w$sgo2 ::
    Language.PureScript.Names.ProperName
      'Language.PureScript.Names.ClassName
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> a1
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
         a1
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
         a1
  {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><L,U><S,1*U>,
     Inline: [0] -}
c43b471037321fa144d2eb7630ee27bf
  $w$sgo3 ::
    Language.PureScript.Names.OpName
      'Language.PureScript.Names.TypeOpName
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> a1
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.TypeOpName)
         a1
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.TypeOpName)
         a1
  {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><L,U><S,1*U>,
     Inline: [0] -}
816dc9bc520aec169e29f14d3b220e70
  $w$sgo4 ::
    Language.PureScript.Names.ProperName
      'Language.PureScript.Names.TypeName
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> a1
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName)
         a1
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName)
         a1
  {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><L,U><S,1*U>,
     Inline: [0] -}
765bdc6d445646856a65a8222cab2360
  $wpoly_go1 ::
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.OpName
         'Language.PureScript.Names.ValueOpName
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.OpName
               'Language.PureScript.Names.ValueOpName))
         a
    -> GHC.Base.Maybe a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U><L,1*U(U,U,U)><S,1*U>, Inline: [0],
     Unfolding: (\ @ a
                   (ww :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww1 :: Language.PureScript.Names.OpName
                             'Language.PureScript.Names.ValueOpName)
                   (w :: Data.Map.Internal.Map
                           (Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.OpName
                                 'Language.PureScript.Names.ValueOpName))
                           a) ->
                 case w of wild {
                   Data.Map.Internal.Bin ipv ipv1 ipv2 ipv3 ipv4
                   -> case ipv1 of ww3 { Language.PureScript.Names.Qualified ww4 ww5 ->
                      case ww of wild1 {
                        GHC.Base.Nothing
                        -> case ww4 of wild2 {
                             GHC.Base.Nothing
                             -> case ww1
                                       `cast`
                                     (Language.PureScript.Names.N:OpName[0]
                                          <'Language.PureScript.Names.ValueOpName>_P) of ww2 { Data.Text.Internal.Text ww6 ww7 ww8 ->
                                case ww5
                                       `cast`
                                     (Language.PureScript.Names.N:OpName[0]
                                          <'Language.PureScript.Names.ValueOpName>_P) of ww9 { Data.Text.Internal.Text ww10 ww11 ww12 ->
                                case Data.Text.$w$ccompare ww6 ww7 ww8 ww10 ww11 ww12 of wild3 {
                                  GHC.Types.LT
                                  -> Language.PureScript.Sugar.Names.$slookup_$s$wpoly_go5
                                       @ a
                                       ipv3
                                       ww6
                                       ww7
                                       ww8
                                       @~ (Sym (Language.PureScript.Names.N:OpName[0]
                                                    <'Language.PureScript.Names.ValueOpName>_P))
                                  GHC.Types.EQ -> GHC.Base.Just @ a ipv2
                                  GHC.Types.GT
                                  -> Language.PureScript.Sugar.Names.$slookup_$s$wpoly_go5
                                       @ a
                                       ipv4
                                       ww6
                                       ww7
                                       ww8
                                       @~ (Sym (Language.PureScript.Names.N:OpName[0]
                                                    <'Language.PureScript.Names.ValueOpName>_P)) } } }
                             GHC.Base.Just ipv7
                             -> Language.PureScript.Sugar.Names.$slookup_$s$wpoly_go4
                                  @ a
                                  ipv3
                                  ww1 }
                        GHC.Base.Just a2
                        -> case ww4 of wild2 {
                             GHC.Base.Nothing
                             -> Language.PureScript.Sugar.Names.$slookup_$s$wpoly_go3
                                  @ a
                                  ipv4
                                  ww1
                                  a2
                             GHC.Base.Just b1
                             -> case GHC.Classes.$fOrd[]_$ccompare
                                       @ (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.Namespace)
                                       (Language.PureScript.Names.$fOrdProperName
                                          @ 'Language.PureScript.Names.Namespace)
                                       a2 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                       b1
                                         `cast`
                                       (Language.PureScript.Names.N:ModuleName[0]) of wild3 {
                                  GHC.Types.LT
                                  -> Language.PureScript.Sugar.Names.$slookup_$s$wpoly_go3
                                       @ a
                                       ipv3
                                       ww1
                                       a2
                                  GHC.Types.EQ
                                  -> case ww1
                                            `cast`
                                          (Language.PureScript.Names.N:OpName[0]
                                               <'Language.PureScript.Names.ValueOpName>_P) of ww2 { Data.Text.Internal.Text ww6 ww7 ww8 ->
                                     case ww5
                                            `cast`
                                          (Language.PureScript.Names.N:OpName[0]
                                               <'Language.PureScript.Names.ValueOpName>_P) of ww9 { Data.Text.Internal.Text ww10 ww11 ww12 ->
                                     case Data.Text.$w$ccompare
                                            ww6
                                            ww7
                                            ww8
                                            ww10
                                            ww11
                                            ww12 of wild4 {
                                       GHC.Types.LT
                                       -> Language.PureScript.Sugar.Names.$slookup_$s$wpoly_go3
                                            @ a
                                            ipv3
                                            ww2
                                              `cast`
                                            (Sym (Language.PureScript.Names.N:OpName[0]
                                                      <'Language.PureScript.Names.ValueOpName>_P))
                                            a2
                                       GHC.Types.EQ -> GHC.Base.Just @ a ipv2
                                       GHC.Types.GT
                                       -> Language.PureScript.Sugar.Names.$slookup_$s$wpoly_go3
                                            @ a
                                            ipv4
                                            ww2
                                              `cast`
                                            (Sym (Language.PureScript.Names.N:OpName[0]
                                                      <'Language.PureScript.Names.ValueOpName>_P))
                                            a2 } } }
                                  GHC.Types.GT
                                  -> Language.PureScript.Sugar.Names.$slookup_$s$wpoly_go3
                                       @ a
                                       ipv4
                                       ww1
                                       a2 } } } }
                   Data.Map.Internal.Tip -> GHC.Base.Nothing @ a }) -}
ed77393364ff80d3b3c39b09eb1227ac
  $wpoly_go13 ::
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.KindName
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.KindName))
         a
    -> GHC.Base.Maybe a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U><L,1*U(U,U,U)><S,1*U>, Inline: [0],
     Unfolding: (\ @ a
                   (ww :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww1 :: Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.KindName)
                   (w :: Data.Map.Internal.Map
                           (Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.KindName))
                           a) ->
                 case w of wild {
                   Data.Map.Internal.Bin ipv ipv1 ipv2 ipv3 ipv4
                   -> case ipv1 of ww3 { Language.PureScript.Names.Qualified ww4 ww5 ->
                      case ww of wild1 {
                        GHC.Base.Nothing
                        -> case ww4 of wild2 {
                             GHC.Base.Nothing
                             -> case ww1
                                       `cast`
                                     (Language.PureScript.Names.N:ProperName[0]
                                          <'Language.PureScript.Names.KindName>_P) of ww2 { Data.Text.Internal.Text ww6 ww7 ww8 ->
                                case ww5
                                       `cast`
                                     (Language.PureScript.Names.N:ProperName[0]
                                          <'Language.PureScript.Names.KindName>_P) of ww9 { Data.Text.Internal.Text ww10 ww11 ww12 ->
                                case Data.Text.$w$ccompare ww6 ww7 ww8 ww10 ww11 ww12 of wild3 {
                                  GHC.Types.LT
                                  -> Language.PureScript.Sugar.Names.$slookup_$s$wpoly_go2
                                       @ a
                                       ipv3
                                       ww6
                                       ww7
                                       ww8
                                       @~ (Sym (Language.PureScript.Names.N:ProperName[0]
                                                    <'Language.PureScript.Names.KindName>_P))
                                  GHC.Types.EQ -> GHC.Base.Just @ a ipv2
                                  GHC.Types.GT
                                  -> Language.PureScript.Sugar.Names.$slookup_$s$wpoly_go2
                                       @ a
                                       ipv4
                                       ww6
                                       ww7
                                       ww8
                                       @~ (Sym (Language.PureScript.Names.N:ProperName[0]
                                                    <'Language.PureScript.Names.KindName>_P)) } } }
                             GHC.Base.Just ipv7
                             -> Language.PureScript.Sugar.Names.$slookup_$s$wpoly_go1
                                  @ a
                                  ipv3
                                  ww1 }
                        GHC.Base.Just a2
                        -> case ww4 of wild2 {
                             GHC.Base.Nothing
                             -> Language.PureScript.Sugar.Names.$slookup_$s$wpoly_go13
                                  @ a
                                  ipv4
                                  ww1
                                  a2
                             GHC.Base.Just b1
                             -> case GHC.Classes.$fOrd[]_$ccompare
                                       @ (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.Namespace)
                                       (Language.PureScript.Names.$fOrdProperName
                                          @ 'Language.PureScript.Names.Namespace)
                                       a2 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                       b1
                                         `cast`
                                       (Language.PureScript.Names.N:ModuleName[0]) of wild3 {
                                  GHC.Types.LT
                                  -> Language.PureScript.Sugar.Names.$slookup_$s$wpoly_go13
                                       @ a
                                       ipv3
                                       ww1
                                       a2
                                  GHC.Types.EQ
                                  -> case ww1
                                            `cast`
                                          (Language.PureScript.Names.N:ProperName[0]
                                               <'Language.PureScript.Names.KindName>_P) of ww2 { Data.Text.Internal.Text ww6 ww7 ww8 ->
                                     case ww5
                                            `cast`
                                          (Language.PureScript.Names.N:ProperName[0]
                                               <'Language.PureScript.Names.KindName>_P) of ww9 { Data.Text.Internal.Text ww10 ww11 ww12 ->
                                     case Data.Text.$w$ccompare
                                            ww6
                                            ww7
                                            ww8
                                            ww10
                                            ww11
                                            ww12 of wild4 {
                                       GHC.Types.LT
                                       -> Language.PureScript.Sugar.Names.$slookup_$s$wpoly_go13
                                            @ a
                                            ipv3
                                            ww2
                                              `cast`
                                            (Sym (Language.PureScript.Names.N:ProperName[0]
                                                      <'Language.PureScript.Names.KindName>_P))
                                            a2
                                       GHC.Types.EQ -> GHC.Base.Just @ a ipv2
                                       GHC.Types.GT
                                       -> Language.PureScript.Sugar.Names.$slookup_$s$wpoly_go13
                                            @ a
                                            ipv4
                                            ww2
                                              `cast`
                                            (Sym (Language.PureScript.Names.N:ProperName[0]
                                                      <'Language.PureScript.Names.KindName>_P))
                                            a2 } } }
                                  GHC.Types.GT
                                  -> Language.PureScript.Sugar.Names.$slookup_$s$wpoly_go13
                                       @ a
                                       ipv4
                                       ww1
                                       a2 } } } }
                   Data.Map.Internal.Tip -> GHC.Base.Nothing @ a }) -}
5d02e493f4ef52af3f801c96d6ec0b42
  $wpoly_go2 ::
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.Ident
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            Language.PureScript.Names.Ident)
         a
    -> GHC.Base.Maybe a
  {- Arity: 3, HasNoCafRefs, Strictness: <L,1*U><L,U><S,1*U>,
     Inline: [0] -}
3b81e28815a87c831f29da7574f1cf3d
  $wpoly_go3 ::
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName))
         a
    -> GHC.Base.Maybe a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U><L,1*U(U,U,U)><S,1*U>, Inline: [0],
     Unfolding: (\ @ a
                   (ww :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww1 :: Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ClassName)
                   (w :: Data.Map.Internal.Map
                           (Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.ClassName))
                           a) ->
                 case w of wild {
                   Data.Map.Internal.Bin ipv ipv1 ipv2 ipv3 ipv4
                   -> case ipv1 of ww3 { Language.PureScript.Names.Qualified ww4 ww5 ->
                      case ww of wild1 {
                        GHC.Base.Nothing
                        -> case ww4 of wild2 {
                             GHC.Base.Nothing
                             -> case ww1
                                       `cast`
                                     (Language.PureScript.Names.N:ProperName[0]
                                          <'Language.PureScript.Names.ClassName>_P) of ww2 { Data.Text.Internal.Text ww6 ww7 ww8 ->
                                case ww5
                                       `cast`
                                     (Language.PureScript.Names.N:ProperName[0]
                                          <'Language.PureScript.Names.ClassName>_P) of ww9 { Data.Text.Internal.Text ww10 ww11 ww12 ->
                                case Data.Text.$w$ccompare ww6 ww7 ww8 ww10 ww11 ww12 of wild3 {
                                  GHC.Types.LT
                                  -> Language.PureScript.Sugar.Names.$slookup_$s$wpoly_go10
                                       @ a
                                       ipv3
                                       ww6
                                       ww7
                                       ww8
                                       @~ (Sym (Language.PureScript.Names.N:ProperName[0]
                                                    <'Language.PureScript.Names.ClassName>_P))
                                  GHC.Types.EQ -> GHC.Base.Just @ a ipv2
                                  GHC.Types.GT
                                  -> Language.PureScript.Sugar.Names.$slookup_$s$wpoly_go10
                                       @ a
                                       ipv4
                                       ww6
                                       ww7
                                       ww8
                                       @~ (Sym (Language.PureScript.Names.N:ProperName[0]
                                                    <'Language.PureScript.Names.ClassName>_P)) } } }
                             GHC.Base.Just ipv7
                             -> Language.PureScript.Sugar.Names.$slookup_$s$wpoly_go9
                                  @ a
                                  ipv3
                                  ww1 }
                        GHC.Base.Just a2
                        -> case ww4 of wild2 {
                             GHC.Base.Nothing
                             -> Language.PureScript.Sugar.Names.$slookup_$s$wpoly_go8
                                  @ a
                                  ipv4
                                  ww1
                                  a2
                             GHC.Base.Just b1
                             -> case GHC.Classes.$fOrd[]_$ccompare
                                       @ (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.Namespace)
                                       (Language.PureScript.Names.$fOrdProperName
                                          @ 'Language.PureScript.Names.Namespace)
                                       a2 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                       b1
                                         `cast`
                                       (Language.PureScript.Names.N:ModuleName[0]) of wild3 {
                                  GHC.Types.LT
                                  -> Language.PureScript.Sugar.Names.$slookup_$s$wpoly_go8
                                       @ a
                                       ipv3
                                       ww1
                                       a2
                                  GHC.Types.EQ
                                  -> case ww1
                                            `cast`
                                          (Language.PureScript.Names.N:ProperName[0]
                                               <'Language.PureScript.Names.ClassName>_P) of ww2 { Data.Text.Internal.Text ww6 ww7 ww8 ->
                                     case ww5
                                            `cast`
                                          (Language.PureScript.Names.N:ProperName[0]
                                               <'Language.PureScript.Names.ClassName>_P) of ww9 { Data.Text.Internal.Text ww10 ww11 ww12 ->
                                     case Data.Text.$w$ccompare
                                            ww6
                                            ww7
                                            ww8
                                            ww10
                                            ww11
                                            ww12 of wild4 {
                                       GHC.Types.LT
                                       -> Language.PureScript.Sugar.Names.$slookup_$s$wpoly_go8
                                            @ a
                                            ipv3
                                            ww2
                                              `cast`
                                            (Sym (Language.PureScript.Names.N:ProperName[0]
                                                      <'Language.PureScript.Names.ClassName>_P))
                                            a2
                                       GHC.Types.EQ -> GHC.Base.Just @ a ipv2
                                       GHC.Types.GT
                                       -> Language.PureScript.Sugar.Names.$slookup_$s$wpoly_go8
                                            @ a
                                            ipv4
                                            ww2
                                              `cast`
                                            (Sym (Language.PureScript.Names.N:ProperName[0]
                                                      <'Language.PureScript.Names.ClassName>_P))
                                            a2 } } }
                                  GHC.Types.GT
                                  -> Language.PureScript.Sugar.Names.$slookup_$s$wpoly_go8
                                       @ a
                                       ipv4
                                       ww1
                                       a2 } } } }
                   Data.Map.Internal.Tip -> GHC.Base.Nothing @ a }) -}
f4fd7bd7a8b5b4f36e3dc5a4d6146b1b
  $wpoly_go4 ::
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ConstructorName
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ConstructorName))
         a
    -> GHC.Base.Maybe a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U><L,1*U(U,U,U)><S,1*U>, Inline: [0],
     Unfolding: (\ @ a
                   (ww :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww1 :: Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ConstructorName)
                   (w :: Data.Map.Internal.Map
                           (Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.ConstructorName))
                           a) ->
                 case w of wild {
                   Data.Map.Internal.Bin ipv ipv1 ipv2 ipv3 ipv4
                   -> case ipv1 of ww3 { Language.PureScript.Names.Qualified ww4 ww5 ->
                      case ww of wild1 {
                        GHC.Base.Nothing
                        -> case ww4 of wild2 {
                             GHC.Base.Nothing
                             -> case ww1
                                       `cast`
                                     (Language.PureScript.Names.N:ProperName[0]
                                          <'Language.PureScript.Names.ConstructorName>_P) of ww2 { Data.Text.Internal.Text ww6 ww7 ww8 ->
                                case ww5
                                       `cast`
                                     (Language.PureScript.Names.N:ProperName[0]
                                          <'Language.PureScript.Names.ConstructorName>_P) of ww9 { Data.Text.Internal.Text ww10 ww11 ww12 ->
                                case Data.Text.$w$ccompare ww6 ww7 ww8 ww10 ww11 ww12 of wild3 {
                                  GHC.Types.LT
                                  -> Language.PureScript.Sugar.Names.$slookup_$s$wpoly_go14
                                       @ a
                                       ipv3
                                       ww6
                                       ww7
                                       ww8
                                       @~ (Sym (Language.PureScript.Names.N:ProperName[0]
                                                    <'Language.PureScript.Names.ConstructorName>_P))
                                  GHC.Types.EQ -> GHC.Base.Just @ a ipv2
                                  GHC.Types.GT
                                  -> Language.PureScript.Sugar.Names.$slookup_$s$wpoly_go14
                                       @ a
                                       ipv4
                                       ww6
                                       ww7
                                       ww8
                                       @~ (Sym (Language.PureScript.Names.N:ProperName[0]
                                                    <'Language.PureScript.Names.ConstructorName>_P)) } } }
                             GHC.Base.Just ipv7
                             -> Language.PureScript.Sugar.Names.$slookup_$s$wpoly_go12
                                  @ a
                                  ipv3
                                  ww1 }
                        GHC.Base.Just a2
                        -> case ww4 of wild2 {
                             GHC.Base.Nothing
                             -> Language.PureScript.Sugar.Names.$slookup_$s$wpoly_go11
                                  @ a
                                  ipv4
                                  ww1
                                  a2
                             GHC.Base.Just b1
                             -> case GHC.Classes.$fOrd[]_$ccompare
                                       @ (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.Namespace)
                                       (Language.PureScript.Names.$fOrdProperName
                                          @ 'Language.PureScript.Names.Namespace)
                                       a2 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                       b1
                                         `cast`
                                       (Language.PureScript.Names.N:ModuleName[0]) of wild3 {
                                  GHC.Types.LT
                                  -> Language.PureScript.Sugar.Names.$slookup_$s$wpoly_go11
                                       @ a
                                       ipv3
                                       ww1
                                       a2
                                  GHC.Types.EQ
                                  -> case ww1
                                            `cast`
                                          (Language.PureScript.Names.N:ProperName[0]
                                               <'Language.PureScript.Names.ConstructorName>_P) of ww2 { Data.Text.Internal.Text ww6 ww7 ww8 ->
                                     case ww5
                                            `cast`
                                          (Language.PureScript.Names.N:ProperName[0]
                                               <'Language.PureScript.Names.ConstructorName>_P) of ww9 { Data.Text.Internal.Text ww10 ww11 ww12 ->
                                     case Data.Text.$w$ccompare
                                            ww6
                                            ww7
                                            ww8
                                            ww10
                                            ww11
                                            ww12 of wild4 {
                                       GHC.Types.LT
                                       -> Language.PureScript.Sugar.Names.$slookup_$s$wpoly_go11
                                            @ a
                                            ipv3
                                            ww2
                                              `cast`
                                            (Sym (Language.PureScript.Names.N:ProperName[0]
                                                      <'Language.PureScript.Names.ConstructorName>_P))
                                            a2
                                       GHC.Types.EQ -> GHC.Base.Just @ a ipv2
                                       GHC.Types.GT
                                       -> Language.PureScript.Sugar.Names.$slookup_$s$wpoly_go11
                                            @ a
                                            ipv4
                                            ww2
                                              `cast`
                                            (Sym (Language.PureScript.Names.N:ProperName[0]
                                                      <'Language.PureScript.Names.ConstructorName>_P))
                                            a2 } } }
                                  GHC.Types.GT
                                  -> Language.PureScript.Sugar.Names.$slookup_$s$wpoly_go11
                                       @ a
                                       ipv4
                                       ww1
                                       a2 } } } }
                   Data.Map.Internal.Tip -> GHC.Base.Nothing @ a }) -}
2ddae141aaf18c1aef749366223c5c21
  $wpoly_go5 ::
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.OpName
         'Language.PureScript.Names.TypeOpName
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.OpName
               'Language.PureScript.Names.TypeOpName))
         a
    -> GHC.Base.Maybe a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U><L,1*U(U,U,U)><S,1*U>, Inline: [0],
     Unfolding: (\ @ a
                   (ww :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww1 :: Language.PureScript.Names.OpName
                             'Language.PureScript.Names.TypeOpName)
                   (w :: Data.Map.Internal.Map
                           (Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.OpName
                                 'Language.PureScript.Names.TypeOpName))
                           a) ->
                 case w of wild {
                   Data.Map.Internal.Bin ipv ipv1 ipv2 ipv3 ipv4
                   -> case ipv1 of ww3 { Language.PureScript.Names.Qualified ww4 ww5 ->
                      case ww of wild1 {
                        GHC.Base.Nothing
                        -> case ww4 of wild2 {
                             GHC.Base.Nothing
                             -> case ww1
                                       `cast`
                                     (Language.PureScript.Names.N:OpName[0]
                                          <'Language.PureScript.Names.TypeOpName>_P) of ww2 { Data.Text.Internal.Text ww6 ww7 ww8 ->
                                case ww5
                                       `cast`
                                     (Language.PureScript.Names.N:OpName[0]
                                          <'Language.PureScript.Names.TypeOpName>_P) of ww9 { Data.Text.Internal.Text ww10 ww11 ww12 ->
                                case Data.Text.$w$ccompare ww6 ww7 ww8 ww10 ww11 ww12 of wild3 {
                                  GHC.Types.LT
                                  -> Language.PureScript.Sugar.Names.$slookup_$s$wpoly_go17
                                       @ a
                                       ipv3
                                       ww6
                                       ww7
                                       ww8
                                       @~ (Sym (Language.PureScript.Names.N:OpName[0]
                                                    <'Language.PureScript.Names.TypeOpName>_P))
                                  GHC.Types.EQ -> GHC.Base.Just @ a ipv2
                                  GHC.Types.GT
                                  -> Language.PureScript.Sugar.Names.$slookup_$s$wpoly_go17
                                       @ a
                                       ipv4
                                       ww6
                                       ww7
                                       ww8
                                       @~ (Sym (Language.PureScript.Names.N:OpName[0]
                                                    <'Language.PureScript.Names.TypeOpName>_P)) } } }
                             GHC.Base.Just ipv7
                             -> Language.PureScript.Sugar.Names.$slookup_$s$wpoly_go16
                                  @ a
                                  ipv3
                                  ww1 }
                        GHC.Base.Just a2
                        -> case ww4 of wild2 {
                             GHC.Base.Nothing
                             -> Language.PureScript.Sugar.Names.$slookup_$s$wpoly_go15
                                  @ a
                                  ipv4
                                  ww1
                                  a2
                             GHC.Base.Just b1
                             -> case GHC.Classes.$fOrd[]_$ccompare
                                       @ (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.Namespace)
                                       (Language.PureScript.Names.$fOrdProperName
                                          @ 'Language.PureScript.Names.Namespace)
                                       a2 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                       b1
                                         `cast`
                                       (Language.PureScript.Names.N:ModuleName[0]) of wild3 {
                                  GHC.Types.LT
                                  -> Language.PureScript.Sugar.Names.$slookup_$s$wpoly_go15
                                       @ a
                                       ipv3
                                       ww1
                                       a2
                                  GHC.Types.EQ
                                  -> case ww1
                                            `cast`
                                          (Language.PureScript.Names.N:OpName[0]
                                               <'Language.PureScript.Names.TypeOpName>_P) of ww2 { Data.Text.Internal.Text ww6 ww7 ww8 ->
                                     case ww5
                                            `cast`
                                          (Language.PureScript.Names.N:OpName[0]
                                               <'Language.PureScript.Names.TypeOpName>_P) of ww9 { Data.Text.Internal.Text ww10 ww11 ww12 ->
                                     case Data.Text.$w$ccompare
                                            ww6
                                            ww7
                                            ww8
                                            ww10
                                            ww11
                                            ww12 of wild4 {
                                       GHC.Types.LT
                                       -> Language.PureScript.Sugar.Names.$slookup_$s$wpoly_go15
                                            @ a
                                            ipv3
                                            ww2
                                              `cast`
                                            (Sym (Language.PureScript.Names.N:OpName[0]
                                                      <'Language.PureScript.Names.TypeOpName>_P))
                                            a2
                                       GHC.Types.EQ -> GHC.Base.Just @ a ipv2
                                       GHC.Types.GT
                                       -> Language.PureScript.Sugar.Names.$slookup_$s$wpoly_go15
                                            @ a
                                            ipv4
                                            ww2
                                              `cast`
                                            (Sym (Language.PureScript.Names.N:OpName[0]
                                                      <'Language.PureScript.Names.TypeOpName>_P))
                                            a2 } } }
                                  GHC.Types.GT
                                  -> Language.PureScript.Sugar.Names.$slookup_$s$wpoly_go15
                                       @ a
                                       ipv4
                                       ww1
                                       a2 } } } }
                   Data.Map.Internal.Tip -> GHC.Base.Nothing @ a }) -}
0eb90afc4a09cee43248f1e29f3c687e
  $wpoly_go6 ::
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.TypeName))
         a
    -> GHC.Base.Maybe a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U><L,1*U(U,U,U)><S,1*U>, Inline: [0],
     Unfolding: (\ @ a
                   (ww :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww1 :: Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.TypeName)
                   (w :: Data.Map.Internal.Map
                           (Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.TypeName))
                           a) ->
                 case w of wild {
                   Data.Map.Internal.Bin ipv ipv1 ipv2 ipv3 ipv4
                   -> case ipv1 of ww3 { Language.PureScript.Names.Qualified ww4 ww5 ->
                      case ww of wild1 {
                        GHC.Base.Nothing
                        -> case ww4 of wild2 {
                             GHC.Base.Nothing
                             -> case ww1
                                       `cast`
                                     (Language.PureScript.Names.N:ProperName[0]
                                          <'Language.PureScript.Names.TypeName>_P) of ww2 { Data.Text.Internal.Text ww6 ww7 ww8 ->
                                case ww5
                                       `cast`
                                     (Language.PureScript.Names.N:ProperName[0]
                                          <'Language.PureScript.Names.TypeName>_P) of ww9 { Data.Text.Internal.Text ww10 ww11 ww12 ->
                                case Data.Text.$w$ccompare ww6 ww7 ww8 ww10 ww11 ww12 of wild3 {
                                  GHC.Types.LT
                                  -> Language.PureScript.Sugar.Names.$slookup_$s$wpoly_go20
                                       @ a
                                       ipv3
                                       ww6
                                       ww7
                                       ww8
                                       @~ (Sym (Language.PureScript.Names.N:ProperName[0]
                                                    <'Language.PureScript.Names.TypeName>_P))
                                  GHC.Types.EQ -> GHC.Base.Just @ a ipv2
                                  GHC.Types.GT
                                  -> Language.PureScript.Sugar.Names.$slookup_$s$wpoly_go20
                                       @ a
                                       ipv4
                                       ww6
                                       ww7
                                       ww8
                                       @~ (Sym (Language.PureScript.Names.N:ProperName[0]
                                                    <'Language.PureScript.Names.TypeName>_P)) } } }
                             GHC.Base.Just ipv7
                             -> Language.PureScript.Sugar.Names.$slookup_$s$wpoly_go19
                                  @ a
                                  ipv3
                                  ww1 }
                        GHC.Base.Just a2
                        -> case ww4 of wild2 {
                             GHC.Base.Nothing
                             -> Language.PureScript.Sugar.Names.$slookup_$s$wpoly_go18
                                  @ a
                                  ipv4
                                  ww1
                                  a2
                             GHC.Base.Just b1
                             -> case GHC.Classes.$fOrd[]_$ccompare
                                       @ (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.Namespace)
                                       (Language.PureScript.Names.$fOrdProperName
                                          @ 'Language.PureScript.Names.Namespace)
                                       a2 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                       b1
                                         `cast`
                                       (Language.PureScript.Names.N:ModuleName[0]) of wild3 {
                                  GHC.Types.LT
                                  -> Language.PureScript.Sugar.Names.$slookup_$s$wpoly_go18
                                       @ a
                                       ipv3
                                       ww1
                                       a2
                                  GHC.Types.EQ
                                  -> case ww1
                                            `cast`
                                          (Language.PureScript.Names.N:ProperName[0]
                                               <'Language.PureScript.Names.TypeName>_P) of ww2 { Data.Text.Internal.Text ww6 ww7 ww8 ->
                                     case ww5
                                            `cast`
                                          (Language.PureScript.Names.N:ProperName[0]
                                               <'Language.PureScript.Names.TypeName>_P) of ww9 { Data.Text.Internal.Text ww10 ww11 ww12 ->
                                     case Data.Text.$w$ccompare
                                            ww6
                                            ww7
                                            ww8
                                            ww10
                                            ww11
                                            ww12 of wild4 {
                                       GHC.Types.LT
                                       -> Language.PureScript.Sugar.Names.$slookup_$s$wpoly_go18
                                            @ a
                                            ipv3
                                            ww2
                                              `cast`
                                            (Sym (Language.PureScript.Names.N:ProperName[0]
                                                      <'Language.PureScript.Names.TypeName>_P))
                                            a2
                                       GHC.Types.EQ -> GHC.Base.Just @ a ipv2
                                       GHC.Types.GT
                                       -> Language.PureScript.Sugar.Names.$slookup_$s$wpoly_go18
                                            @ a
                                            ipv4
                                            ww2
                                              `cast`
                                            (Sym (Language.PureScript.Names.N:ProperName[0]
                                                      <'Language.PureScript.Names.TypeName>_P))
                                            a2 } } }
                                  GHC.Types.GT
                                  -> Language.PureScript.Sugar.Names.$slookup_$s$wpoly_go18
                                       @ a
                                       ipv4
                                       ww1
                                       a2 } } } }
                   Data.Map.Internal.Tip -> GHC.Base.Nothing @ a }) -}
e9acfb03b335c8073ea0cb1ced5a80ec
  desugarImports ::
    (Control.Monad.Error.Class.MonadError
       Language.PureScript.Errors.MultipleErrors m,
     Control.Monad.Writer.Class.MonadWriter
       Language.PureScript.Errors.MultipleErrors m) =>
    [Language.PureScript.Externs.ExternsFile]
    -> [Language.PureScript.AST.Declarations.Module]
    -> m [Language.PureScript.AST.Declarations.Module]
  {- Arity: 4,
     Strictness: <S(S(S(S(C(C(S))L)LLLLL)LLLL)LL),U(U(U(U(C(C(U)),C(C1(U))),C(U),A,C(C1(C1(U))),C(C1(U)),A),C(C1(U)),C(C1(U)),U,C(U)),C(U),C(C1(U)))><L,U(U,U(U(U(C(C1(U)),A),C(U),A,C(C1(C1(U))),C(C1(U)),A),C(C1(U)),C(C1(U)),U,C(U)),C(U),C(U),C(U),C(U))><L,U><L,U>,
     Unfolding: (\ @ m :: * -> *
                   ($dMonadError :: Control.Monad.Error.Class.MonadError
                                      Language.PureScript.Errors.MultipleErrors m)
                   ($dMonadWriter :: Control.Monad.Writer.Class.MonadWriter
                                       Language.PureScript.Errors.MultipleErrors m)
                   (eta :: [Language.PureScript.Externs.ExternsFile])
                   (eta1 :: [Language.PureScript.AST.Declarations.Module]) ->
                 GHC.Base.fmap
                   @ m
                   (GHC.Base.$p1Applicative
                      @ m
                      (GHC.Base.$p1Monad
                         @ m
                         (Control.Monad.Error.Class.$p1MonadError
                            @ Language.PureScript.Errors.MultipleErrors
                            @ m
                            $dMonadError)))
                   @ (Language.PureScript.Sugar.Names.Env.Env,
                      [Language.PureScript.AST.Declarations.Module])
                   @ [Language.PureScript.AST.Declarations.Module]
                   (Data.Tuple.snd
                      @ Language.PureScript.Sugar.Names.Env.Env
                      @ [Language.PureScript.AST.Declarations.Module])
                   (Language.PureScript.Sugar.Names.desugarImportsWithEnv
                      @ m
                      $dMonadError
                      $dMonadWriter
                      eta
                      eta1)) -}
7236deb978d551ace461b9e7500d9b1e
  desugarImportsWithEnv ::
    (Control.Monad.Error.Class.MonadError
       Language.PureScript.Errors.MultipleErrors m,
     Control.Monad.Writer.Class.MonadWriter
       Language.PureScript.Errors.MultipleErrors m) =>
    [Language.PureScript.Externs.ExternsFile]
    -> [Language.PureScript.AST.Declarations.Module]
    -> m (Language.PureScript.Sugar.Names.Env.Env,
          [Language.PureScript.AST.Declarations.Module])
  {- Arity: 2,
     Strictness: <L,U(U(U(U(C(C(U)),C(C1(U))),C(U),A,C(C1(C1(U))),C(C1(U)),A),C(C1(U)),C(C1(U)),U,C(U)),C(U),C(C1(U)))><L,U(U,U(U(U(C(C1(U)),A),C(U),A,C(C1(C1(U))),C(C1(U)),A),C(C1(U)),C(C1(U)),U,C(U)),C(U),C(U),C(U),C(U))> -}
"SC:$wpoly_go130" [0] forall @ a
                             (sc :: Data.Map.Internal.Map
                                      (Language.PureScript.Names.Qualified
                                         (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.KindName))
                                      a)
                             (sc1 :: Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.KindName)
  Language.PureScript.Sugar.Names.$wpoly_go13 @ a
                                              (GHC.Base.Nothing
                                                 @ Language.PureScript.Names.ModuleName)
                                              sc1
                                              sc
  = Language.PureScript.Sugar.Names.$slookup_$s$wpoly_go1 @ a sc sc1
"SC:$wpoly_go130" [0] forall @ a
                             (sc :: Data.Map.Internal.Map
                                      (Language.PureScript.Names.Qualified
                                         (Language.PureScript.Names.OpName
                                            'Language.PureScript.Names.ValueOpName))
                                      a)
                             (sc1 :: Language.PureScript.Names.OpName
                                       'Language.PureScript.Names.ValueOpName)
  Language.PureScript.Sugar.Names.$wpoly_go1 @ a
                                             (GHC.Base.Nothing
                                                @ Language.PureScript.Names.ModuleName)
                                             sc1
                                             sc
  = Language.PureScript.Sugar.Names.$slookup_$s$wpoly_go4 @ a sc sc1
"SC:$wpoly_go130" [0] forall (sc :: Data.Map.Internal.Map
                                      (Language.PureScript.Names.Qualified
                                         Language.PureScript.Names.Ident)
                                      [Language.PureScript.Sugar.Names.Env.ImportRecord
                                         Language.PureScript.Names.Ident])
                             (sc1 :: Language.PureScript.Names.Ident)
  Language.PureScript.Sugar.Names.$wpoly_go2 @ [Language.PureScript.Sugar.Names.Env.ImportRecord
                                                  Language.PureScript.Names.Ident]
                                             (GHC.Base.Nothing
                                                @ Language.PureScript.Names.ModuleName)
                                             sc1
                                             sc
  = Language.PureScript.Sugar.Names.$slookup_$s$wpoly_go7 sc sc1
"SC:$wpoly_go130" [0] forall @ a
                             (sc :: Data.Map.Internal.Map
                                      (Language.PureScript.Names.Qualified
                                         (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.ClassName))
                                      a)
                             (sc1 :: Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.ClassName)
  Language.PureScript.Sugar.Names.$wpoly_go3 @ a
                                             (GHC.Base.Nothing
                                                @ Language.PureScript.Names.ModuleName)
                                             sc1
                                             sc
  = Language.PureScript.Sugar.Names.$slookup_$s$wpoly_go9 @ a sc sc1
"SC:$wpoly_go130" [0] forall @ a
                             (sc :: Data.Map.Internal.Map
                                      (Language.PureScript.Names.Qualified
                                         (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.ConstructorName))
                                      a)
                             (sc1 :: Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.ConstructorName)
  Language.PureScript.Sugar.Names.$wpoly_go4 @ a
                                             (GHC.Base.Nothing
                                                @ Language.PureScript.Names.ModuleName)
                                             sc1
                                             sc
  = Language.PureScript.Sugar.Names.$slookup_$s$wpoly_go12 @ a sc sc1
"SC:$wpoly_go130" [0] forall @ a
                             (sc :: Data.Map.Internal.Map
                                      (Language.PureScript.Names.Qualified
                                         (Language.PureScript.Names.OpName
                                            'Language.PureScript.Names.TypeOpName))
                                      a)
                             (sc1 :: Language.PureScript.Names.OpName
                                       'Language.PureScript.Names.TypeOpName)
  Language.PureScript.Sugar.Names.$wpoly_go5 @ a
                                             (GHC.Base.Nothing
                                                @ Language.PureScript.Names.ModuleName)
                                             sc1
                                             sc
  = Language.PureScript.Sugar.Names.$slookup_$s$wpoly_go16 @ a sc sc1
"SC:$wpoly_go130" [0] forall @ a
                             (sc :: Data.Map.Internal.Map
                                      (Language.PureScript.Names.Qualified
                                         (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.TypeName))
                                      a)
                             (sc1 :: Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.TypeName)
  Language.PureScript.Sugar.Names.$wpoly_go6 @ a
                                             (GHC.Base.Nothing
                                                @ Language.PureScript.Names.ModuleName)
                                             sc1
                                             sc
  = Language.PureScript.Sugar.Names.$slookup_$s$wpoly_go19 @ a sc sc1
"SC:$wpoly_go131" [0] forall @ a
                             (sc :: Data.Map.Internal.Map
                                      (Language.PureScript.Names.Qualified
                                         (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.KindName))
                                      a)
                             (sc1 :: Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.KindName)
                             (sc2 :: Language.PureScript.Names.ModuleName)
  Language.PureScript.Sugar.Names.$wpoly_go13 @ a
                                              (GHC.Base.Just
                                                 @ Language.PureScript.Names.ModuleName
                                                 sc2)
                                              sc1
                                              sc
  = Language.PureScript.Sugar.Names.$slookup_$s$wpoly_go13
      @ a
      sc
      sc1
      sc2
"SC:$wpoly_go131" [0] forall @ a
                             (sc :: Data.Map.Internal.Map
                                      (Language.PureScript.Names.Qualified
                                         (Language.PureScript.Names.OpName
                                            'Language.PureScript.Names.ValueOpName))
                                      a)
                             (sc1 :: Language.PureScript.Names.OpName
                                       'Language.PureScript.Names.ValueOpName)
                             (sc2 :: Language.PureScript.Names.ModuleName)
  Language.PureScript.Sugar.Names.$wpoly_go1 @ a
                                             (GHC.Base.Just
                                                @ Language.PureScript.Names.ModuleName
                                                sc2)
                                             sc1
                                             sc
  = Language.PureScript.Sugar.Names.$slookup_$s$wpoly_go3
      @ a
      sc
      sc1
      sc2
"SC:$wpoly_go131" [0] forall (sc :: Data.Map.Internal.Map
                                      (Language.PureScript.Names.Qualified
                                         Language.PureScript.Names.Ident)
                                      [Language.PureScript.Sugar.Names.Env.ImportRecord
                                         Language.PureScript.Names.Ident])
                             (sc1 :: Language.PureScript.Names.Ident)
                             (sc2 :: Language.PureScript.Names.ModuleName)
  Language.PureScript.Sugar.Names.$wpoly_go2 @ [Language.PureScript.Sugar.Names.Env.ImportRecord
                                                  Language.PureScript.Names.Ident]
                                             (GHC.Base.Just
                                                @ Language.PureScript.Names.ModuleName
                                                sc2)
                                             sc1
                                             sc
  = Language.PureScript.Sugar.Names.$slookup_$s$wpoly_go6 sc sc1 sc2
"SC:$wpoly_go131" [0] forall @ a
                             (sc :: Data.Map.Internal.Map
                                      (Language.PureScript.Names.Qualified
                                         (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.ClassName))
                                      a)
                             (sc1 :: Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.ClassName)
                             (sc2 :: Language.PureScript.Names.ModuleName)
  Language.PureScript.Sugar.Names.$wpoly_go3 @ a
                                             (GHC.Base.Just
                                                @ Language.PureScript.Names.ModuleName
                                                sc2)
                                             sc1
                                             sc
  = Language.PureScript.Sugar.Names.$slookup_$s$wpoly_go8
      @ a
      sc
      sc1
      sc2
"SC:$wpoly_go131" [0] forall @ a
                             (sc :: Data.Map.Internal.Map
                                      (Language.PureScript.Names.Qualified
                                         (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.ConstructorName))
                                      a)
                             (sc1 :: Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.ConstructorName)
                             (sc2 :: Language.PureScript.Names.ModuleName)
  Language.PureScript.Sugar.Names.$wpoly_go4 @ a
                                             (GHC.Base.Just
                                                @ Language.PureScript.Names.ModuleName
                                                sc2)
                                             sc1
                                             sc
  = Language.PureScript.Sugar.Names.$slookup_$s$wpoly_go11
      @ a
      sc
      sc1
      sc2
"SC:$wpoly_go131" [0] forall @ a
                             (sc :: Data.Map.Internal.Map
                                      (Language.PureScript.Names.Qualified
                                         (Language.PureScript.Names.OpName
                                            'Language.PureScript.Names.TypeOpName))
                                      a)
                             (sc1 :: Language.PureScript.Names.OpName
                                       'Language.PureScript.Names.TypeOpName)
                             (sc2 :: Language.PureScript.Names.ModuleName)
  Language.PureScript.Sugar.Names.$wpoly_go5 @ a
                                             (GHC.Base.Just
                                                @ Language.PureScript.Names.ModuleName
                                                sc2)
                                             sc1
                                             sc
  = Language.PureScript.Sugar.Names.$slookup_$s$wpoly_go15
      @ a
      sc
      sc1
      sc2
"SC:$wpoly_go131" [0] forall @ a
                             (sc :: Data.Map.Internal.Map
                                      (Language.PureScript.Names.Qualified
                                         (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.TypeName))
                                      a)
                             (sc1 :: Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.TypeName)
                             (sc2 :: Language.PureScript.Names.ModuleName)
  Language.PureScript.Sugar.Names.$wpoly_go6 @ a
                                             (GHC.Base.Just
                                                @ Language.PureScript.Names.ModuleName
                                                sc2)
                                             sc1
                                             sc
  = Language.PureScript.Sugar.Names.$slookup_$s$wpoly_go18
      @ a
      sc
      sc1
      sc2
"SC:$wpoly_go132" [0] forall @ a
                             (sc :: Data.Map.Internal.Map
                                      (Language.PureScript.Names.Qualified
                                         (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.KindName))
                                      a)
                             (sc1 :: GHC.Prim.ByteArray#)
                             (sc2 :: GHC.Prim.Int#)
                             (sc3 :: GHC.Prim.Int#)
                             (sg :: (Data.Text.Internal.Text :: *)
                                    ~R# (Language.PureScript.Names.ProperName
                                           'Language.PureScript.Names.KindName :: *))
  Language.PureScript.Sugar.Names.$wpoly_go13 @ a
                                              (GHC.Base.Nothing
                                                 @ Language.PureScript.Names.ModuleName)
                                              (Data.Text.Internal.Text sc1 sc2 sc3) `cast` sg
                                              sc
  = Language.PureScript.Sugar.Names.$slookup_$s$wpoly_go2
      @ a
      sc
      sc1
      sc2
      sc3
      @~ sg
"SC:$wpoly_go132" [0] forall @ a
                             (sc :: Data.Map.Internal.Map
                                      (Language.PureScript.Names.Qualified
                                         (Language.PureScript.Names.OpName
                                            'Language.PureScript.Names.ValueOpName))
                                      a)
                             (sc1 :: GHC.Prim.ByteArray#)
                             (sc2 :: GHC.Prim.Int#)
                             (sc3 :: GHC.Prim.Int#)
                             (sg :: (Data.Text.Internal.Text :: *)
                                    ~R# (Language.PureScript.Names.OpName
                                           'Language.PureScript.Names.ValueOpName :: *))
  Language.PureScript.Sugar.Names.$wpoly_go1 @ a
                                             (GHC.Base.Nothing
                                                @ Language.PureScript.Names.ModuleName)
                                             (Data.Text.Internal.Text sc1 sc2 sc3) `cast` sg
                                             sc
  = Language.PureScript.Sugar.Names.$slookup_$s$wpoly_go5
      @ a
      sc
      sc1
      sc2
      sc3
      @~ sg
"SC:$wpoly_go132" [0] forall @ a
                             (sc :: Data.Map.Internal.Map
                                      (Language.PureScript.Names.Qualified
                                         (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.ClassName))
                                      a)
                             (sc1 :: GHC.Prim.ByteArray#)
                             (sc2 :: GHC.Prim.Int#)
                             (sc3 :: GHC.Prim.Int#)
                             (sg :: (Data.Text.Internal.Text :: *)
                                    ~R# (Language.PureScript.Names.ProperName
                                           'Language.PureScript.Names.ClassName :: *))
  Language.PureScript.Sugar.Names.$wpoly_go3 @ a
                                             (GHC.Base.Nothing
                                                @ Language.PureScript.Names.ModuleName)
                                             (Data.Text.Internal.Text sc1 sc2 sc3) `cast` sg
                                             sc
  = Language.PureScript.Sugar.Names.$slookup_$s$wpoly_go10
      @ a
      sc
      sc1
      sc2
      sc3
      @~ sg
"SC:$wpoly_go132" [0] forall @ a
                             (sc :: Data.Map.Internal.Map
                                      (Language.PureScript.Names.Qualified
                                         (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.ConstructorName))
                                      a)
                             (sc1 :: GHC.Prim.ByteArray#)
                             (sc2 :: GHC.Prim.Int#)
                             (sc3 :: GHC.Prim.Int#)
                             (sg :: (Data.Text.Internal.Text :: *)
                                    ~R# (Language.PureScript.Names.ProperName
                                           'Language.PureScript.Names.ConstructorName :: *))
  Language.PureScript.Sugar.Names.$wpoly_go4 @ a
                                             (GHC.Base.Nothing
                                                @ Language.PureScript.Names.ModuleName)
                                             (Data.Text.Internal.Text sc1 sc2 sc3) `cast` sg
                                             sc
  = Language.PureScript.Sugar.Names.$slookup_$s$wpoly_go14
      @ a
      sc
      sc1
      sc2
      sc3
      @~ sg
"SC:$wpoly_go132" [0] forall @ a
                             (sc :: Data.Map.Internal.Map
                                      (Language.PureScript.Names.Qualified
                                         (Language.PureScript.Names.OpName
                                            'Language.PureScript.Names.TypeOpName))
                                      a)
                             (sc1 :: GHC.Prim.ByteArray#)
                             (sc2 :: GHC.Prim.Int#)
                             (sc3 :: GHC.Prim.Int#)
                             (sg :: (Data.Text.Internal.Text :: *)
                                    ~R# (Language.PureScript.Names.OpName
                                           'Language.PureScript.Names.TypeOpName :: *))
  Language.PureScript.Sugar.Names.$wpoly_go5 @ a
                                             (GHC.Base.Nothing
                                                @ Language.PureScript.Names.ModuleName)
                                             (Data.Text.Internal.Text sc1 sc2 sc3) `cast` sg
                                             sc
  = Language.PureScript.Sugar.Names.$slookup_$s$wpoly_go17
      @ a
      sc
      sc1
      sc2
      sc3
      @~ sg
"SC:$wpoly_go132" [0] forall @ a
                             (sc :: Data.Map.Internal.Map
                                      (Language.PureScript.Names.Qualified
                                         (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.TypeName))
                                      a)
                             (sc1 :: GHC.Prim.ByteArray#)
                             (sc2 :: GHC.Prim.Int#)
                             (sc3 :: GHC.Prim.Int#)
                             (sg :: (Data.Text.Internal.Text :: *)
                                    ~R# (Language.PureScript.Names.ProperName
                                           'Language.PureScript.Names.TypeName :: *))
  Language.PureScript.Sugar.Names.$wpoly_go6 @ a
                                             (GHC.Base.Nothing
                                                @ Language.PureScript.Names.ModuleName)
                                             (Data.Text.Internal.Text sc1 sc2 sc3) `cast` sg
                                             sc
  = Language.PureScript.Sugar.Names.$slookup_$s$wpoly_go20
      @ a
      sc
      sc1
      sc2
      sc3
      @~ sg
"SPEC/Language.PureScript.Sugar.Names fromList @ (OpName
                                                   'TypeOpName) _" [orphan] forall @ a
                                                                                                                                            ($dOrd :: GHC.Classes.Ord
                                                                                                                                                        (Language.PureScript.Names.OpName
                                                                                                                                                           'Language.PureScript.Names.TypeOpName))
  Data.Map.Internal.fromList @ (Language.PureScript.Names.OpName
                                  'Language.PureScript.Names.TypeOpName)
                             @ a
                             $dOrd
  = Language.PureScript.Sugar.Names.$sfromList4 @ a
"SPEC/Language.PureScript.Sugar.Names fromList @ (OpName
                                                   'ValueOpName) _" [orphan] forall @ a
                                                                                                                                             ($dOrd :: GHC.Classes.Ord
                                                                                                                                                         (Language.PureScript.Names.OpName
                                                                                                                                                            'Language.PureScript.Names.ValueOpName))
  Data.Map.Internal.fromList @ (Language.PureScript.Names.OpName
                                  'Language.PureScript.Names.ValueOpName)
                             @ a
                             $dOrd
  = Language.PureScript.Sugar.Names.$sfromList1 @ a
"SPEC/Language.PureScript.Sugar.Names fromList @ (ProperName
                                                   'ClassName) _" [orphan] forall @ a
                                                                                                                                               ($dOrd :: GHC.Classes.Ord
                                                                                                                                                           (Language.PureScript.Names.ProperName
                                                                                                                                                              'Language.PureScript.Names.ClassName))
  Data.Map.Internal.fromList @ (Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.ClassName)
                             @ a
                             $dOrd
  = Language.PureScript.Sugar.Names.$sfromList3 @ a
"SPEC/Language.PureScript.Sugar.Names fromList @ (ProperName
                                                   'KindName) _" [orphan] forall @ a
                                                                                                                                              ($dOrd :: GHC.Classes.Ord
                                                                                                                                                          (Language.PureScript.Names.ProperName
                                                                                                                                                             'Language.PureScript.Names.KindName))
  Data.Map.Internal.fromList @ (Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.KindName)
                             @ a
                             $dOrd
  = Language.PureScript.Sugar.Names.$sfromList @ a
"SPEC/Language.PureScript.Sugar.Names fromList @ (ProperName
                                                   'TypeName) _" [orphan] forall @ a
                                                                                                                                              ($dOrd :: GHC.Classes.Ord
                                                                                                                                                          (Language.PureScript.Names.ProperName
                                                                                                                                                             'Language.PureScript.Names.TypeName))
  Data.Map.Internal.fromList @ (Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.TypeName)
                             @ a
                             $dOrd
  = Language.PureScript.Sugar.Names.$sfromList5 @ a
"SPEC/Language.PureScript.Sugar.Names fromList @ Ident _" [orphan] forall @ a
                                                                          ($dOrd :: GHC.Classes.Ord
                                                                                      Language.PureScript.Names.Ident)
  Data.Map.Internal.fromList @ Language.PureScript.Names.Ident
                             @ a
                             $dOrd
  = Language.PureScript.Sugar.Names.$sfromList2 @ a
"SPEC/Language.PureScript.Sugar.Names fromList @ Name _" [orphan] forall @ a
                                                                         ($dOrd :: GHC.Classes.Ord
                                                                                     Language.PureScript.Names.Name)
  Data.Map.Internal.fromList @ Language.PureScript.Names.Name
                             @ a
                             $dOrd
  = Language.PureScript.Sugar.Names.$sfromList6 @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

