
==================== FINAL INTERFACE ====================
2018-11-30 20:47:46.404025 UTC

interface purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.ModuleDependencies 8043
  interface hash: c78a800dcd094af1aa2e8aeb9045a890
  ABI hash: 1456e1c61b632ed249552f0f17f5d005
  export-list hash: e3d360cc358fed19177578edade1e517
  orphan hash: 845fddbbc80a8d5481908416faeaf510
  flag hash: 2ae478d21823b7c739b1b08c46262eb0
  opt_hash: 2c98c95d41c045ae9c2fb565ec8aabc6
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Language.PureScript.ModuleDependencies.sortModules
  Language.PureScript.ModuleDependencies.ModuleGraph
module dependencies: Control.Monad.Supply
                     Control.Monad.Supply.Class Language.PureScript.AST
                     Language.PureScript.AST.Binders
                     Language.PureScript.AST.Declarations
                     Language.PureScript.AST.Exported Language.PureScript.AST.Literals
                     Language.PureScript.AST.Operators Language.PureScript.AST.SourcePos
                     Language.PureScript.AST.Traversals Language.PureScript.Bundle
                     Language.PureScript.Comments Language.PureScript.Constants
                     Language.PureScript.Crash Language.PureScript.Environment
                     Language.PureScript.Errors Language.PureScript.Kinds
                     Language.PureScript.Label Language.PureScript.Names
                     Language.PureScript.PSString Language.PureScript.Parser.Lexer
                     Language.PureScript.Parser.State Language.PureScript.Pretty
                     Language.PureScript.Pretty.Common Language.PureScript.Pretty.Kinds
                     Language.PureScript.Pretty.Types Language.PureScript.Pretty.Values
                     Language.PureScript.Publish.BoxesHelpers
                     Language.PureScript.Traversals
                     Language.PureScript.TypeClassDictionaries Language.PureScript.Types
                     Paths_purescript
package dependencies: aeson-1.3.1.1 aeson-better-errors-0.9.1.0
                      ansi-terminal-0.8.0.4 array-0.5.2.0 async-2.2.1 attoparsec-0.13.2.2
                      base-4.11.1.0 base-compat-0.10.4 binary-0.8.5.1
                      blaze-builder-0.4.1.0 boxes-0.1.5 bytestring-0.10.8.2 colour-2.3.4
                      containers-0.5.11.0 deepseq-1.4.3.0 dlist-0.8.0.4 filepath-1.4.2
                      ghc-boot-th-8.4.3 ghc-prim-0.5.2.0 hashable-1.2.7.0
                      integer-gmp-1.0.2.0 integer-logarithms-1.0.2.1
                      language-javascript-0.6.0.11 mtl-2.2.2 parsec-3.1.13.0
                      pattern-arrows-0.0.2 pretty-1.1.3.6 primitive-0.6.3.0
                      protolude-0.2.2 random-1.1 scientific-0.3.6.2 sourcemap-0.1.6
                      split-0.2.3.3 stm-2.4.5.0 syb-0.7 tagged-0.8.5
                      template-haskell-2.13.0.0 text-1.2.3.0 th-abstraction-0.2.8.0
                      time-1.8.0.2 time-locale-compat-0.1.1.4 transformers-0.5.5.0
                      unordered-containers-0.2.9.0 utf8-string-1.0.1.1 uuid-types-1.0.3
                      vector-0.12.0.1
orphans: syb-0.7:Data.Generics.Instances
         stm-2.4.5.0:Control.Monad.STM colour-2.3.4:Data.Colour
         attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         vector-0.12.0.1:Data.Vector.Unboxed
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.0:Data.Text.Lazy
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.5.0:Control.Monad.Trans.Error
         text-1.2.3.0:Data.Text binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: aeson-1.3.1.1:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.Graph
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         dlist-0.8.0.4:Data.DList ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.AST.Declarations
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.AST.Operators
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.AST.SourcePos
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Environment
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Kinds
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Label
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Names
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.PSString
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.TypeClassDictionaries
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Types
                         tagged-0.8.5:Data.Tagged
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
                         th-abstraction-0.2.8.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.Functor f522c3501272159820fd6f242510732f
import  -/  base-4.11.1.0:Data.List.NonEmpty 595ee3baddcadebc4831ea7541427984
import  -/  base-4.11.1.0:Data.Maybe 409c3da2b142470b68be39ce1d97a9f7
import  -/  base-4.11.1.0:Data.Tuple 3af66f3ac61ed95ba8a3a3f68ebc5003
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  containers-0.5.11.0:Data.Graph 62516cbabce0b5240500dc0da6a9b2cf
import  -/  containers-0.5.11.0:Data.Set 7d3c64a641be4cacbcd8119445bab919
import  -/  containers-0.5.11.0:Data.Set.Internal 93fa3ef95853aa2a7aadf32d693bd451
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  mtl-2.2.2:Control.Monad.Error.Class df146c18e27154b8df4c8637c59fd61b
import  -/  protolude-0.2.2:Protolude 2c2d16096c8a60f59f646a3b93b0eb7b
import  -/  protolude-0.2.2:Protolude.List 3a80368167450d7a4360ebf1ea443345
import  -/  Language.PureScript.AST 7ed0e74bfed5b6489b8a5eabab5c0241
  exports: 0d53d92339536cd6d8d7dcfcad8e7c7e
import  -/  Language.PureScript.AST.Declarations 568e046fbf27b243bfc96f09017d4782
  CycleInModules 5b05ad783f47450cdabd6fc8a4ee82af
  Declaration b31d94d0c7b90700d40f9ba6ec420e41
  ErrorInModule 30c97edb8a43314700377edb3b90ccc8
  ImportDeclaration 0c2bc2f3ca892343473f34859c93a6e3
  Module b9e5d519f3251f7053b581e4ecd9e6bf
  Module 7cf4b96f7d4b51b446726a099ab87bb6
  ModuleNotFound c101418e68b6f071d1da8cea61bf23ae
  getModuleName 578b1d81b22244b5aeca14680df8f57d
  getModuleSourceSpan 1047991bfe9f810dab3d8fd03d3b2cf6
import  -/  Language.PureScript.AST.SourcePos b3f67f807f2dce79528bbb15bd9c7104
  SourceSpan 73c071552214b3f18e94970349d3affc
import  -/  Language.PureScript.Constants d290cccb0db8657cab5f1253ab0da1ee
  exports: cd83a0f5b6591e5c66c598e34359260d
  primModules d9355e396a04309f4d117a0106a262c8
import  -/  Language.PureScript.Crash 1bc11bf824676e9581610d0d05d26761
  exports: 8a971f39d6ef3f27956f413640cb0a24
  internalError f3db7e23c75878c9d13888d6d114012d
import  -/  Language.PureScript.Errors 15d6eb6b2d4d480750061a0585d4e64c
  exports: 142ea650dec62642d1cff09ef1eee74e
  MultipleErrors ad1de73a1d5a6b0ccd9657dedebc94f3
  addHint c2d92e868230119a30631ae026505b5b
  errorMessage' 5055fef8b372f878a840ac9e7783f39a
  errorMessage'' a09a519bda696e6220386c7e3360c932
  parU da72186e6c92f529dd0bd0ac4699ef1e
import  -/  Language.PureScript.Names b3bf151840f3e8f2eb61eff186432886
  exports: f7f3503d20957194bda83c16bb5f1288
  ModuleName 5a70062bbdf29e6dc659ad8bf5326b50
42197d6462e37d1d23fb938a3cfa352e
  $s$fEq(,) ::
    GHC.Classes.Eq
      (Language.PureScript.Names.ModuleName,
       Language.PureScript.AST.SourcePos.SourceSpan)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.ModuleName,
                     Language.PureScript.AST.SourcePos.SourceSpan)
                  (GHC.Classes.$fEq(,)_$c==
                     @ Language.PureScript.Names.ModuleName
                     @ Language.PureScript.AST.SourcePos.SourceSpan
                     Language.PureScript.Names.$fEqModuleName
                     Language.PureScript.AST.SourcePos.$fEqSourceSpan)
                  Language.PureScript.ModuleDependencies.$s$fEq(,)_$s$fEq(,)_$c/= -}
4619afcbcfcf00076fdb893f20be02f1
  $s$fEq(,)_$s$fEq(,)_$c/= ::
    (Language.PureScript.Names.ModuleName,
     Language.PureScript.AST.SourcePos.SourceSpan)
    -> (Language.PureScript.Names.ModuleName,
        Language.PureScript.AST.SourcePos.SourceSpan)
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U(1*U,1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U))))><S(SL),1*U(1*U,1*U(1*U,1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U))))>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: (Language.PureScript.Names.ModuleName,
                          Language.PureScript.AST.SourcePos.SourceSpan))
                   (y :: (Language.PureScript.Names.ModuleName,
                          Language.PureScript.AST.SourcePos.SourceSpan)) ->
                 case x of wild { (,) a1 a2 ->
                 case y of wild1 { (,) b1 b2 ->
                 case GHC.Classes.$fEq[]_$c==
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.Namespace)
                        (Language.PureScript.Names.$fEqProperName
                           @ 'Language.PureScript.Names.Namespace)
                        a1 `cast` (Language.PureScript.Names.N:ModuleName[0])
                        b1 `cast` (Language.PureScript.Names.N:ModuleName[0]) of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True
                   -> case Language.PureScript.AST.SourcePos.$fEqSourceSpan_$c==
                             a2
                             b2 of wild3 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True -> GHC.Types.False } } } }) -}
eec81d6063a5ed637d84aea009a20fa7
  $s$fOrd(,) ::
    GHC.Classes.Ord
      (Language.PureScript.Names.ModuleName,
       Language.PureScript.AST.SourcePos.SourceSpan)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.ModuleName,
                     Language.PureScript.AST.SourcePos.SourceSpan)
                  Language.PureScript.ModuleDependencies.$s$fEq(,)
                  (GHC.Classes.$fOrd(,)_$ccompare
                     @ Language.PureScript.Names.ModuleName
                     @ Language.PureScript.AST.SourcePos.SourceSpan
                     Language.PureScript.Names.$fOrdModuleName
                     Language.PureScript.AST.SourcePos.$fOrdSourceSpan)
                  (GHC.Classes.$fOrd(,)_$c<
                     @ Language.PureScript.Names.ModuleName
                     @ Language.PureScript.AST.SourcePos.SourceSpan
                     Language.PureScript.Names.$fOrdModuleName
                     Language.PureScript.AST.SourcePos.$fOrdSourceSpan)
                  (GHC.Classes.$fOrd(,)_$c<=
                     @ Language.PureScript.Names.ModuleName
                     @ Language.PureScript.AST.SourcePos.SourceSpan
                     Language.PureScript.Names.$fOrdModuleName
                     Language.PureScript.AST.SourcePos.$fOrdSourceSpan)
                  (\ (a1 :: (Language.PureScript.Names.ModuleName,
                             Language.PureScript.AST.SourcePos.SourceSpan))
                     (b1 :: (Language.PureScript.Names.ModuleName,
                             Language.PureScript.AST.SourcePos.SourceSpan)) ->
                   GHC.Classes.$fOrd(,)_$c<
                     @ Language.PureScript.Names.ModuleName
                     @ Language.PureScript.AST.SourcePos.SourceSpan
                     Language.PureScript.Names.$fOrdModuleName
                     Language.PureScript.AST.SourcePos.$fOrdSourceSpan
                     b1
                     a1)
                  (GHC.Classes.$fOrd(,)_$c>=
                     @ Language.PureScript.Names.ModuleName
                     @ Language.PureScript.AST.SourcePos.SourceSpan
                     Language.PureScript.Names.$fOrdModuleName
                     Language.PureScript.AST.SourcePos.$fOrdSourceSpan)
                  (GHC.Classes.$fOrd(,)_$cmax
                     @ Language.PureScript.Names.ModuleName
                     @ Language.PureScript.AST.SourcePos.SourceSpan
                     Language.PureScript.Names.$fOrdModuleName
                     Language.PureScript.AST.SourcePos.$fOrdSourceSpan)
                  (GHC.Classes.$fOrd(,)_$cmin
                     @ Language.PureScript.Names.ModuleName
                     @ Language.PureScript.AST.SourcePos.SourceSpan
                     Language.PureScript.Names.$fOrdModuleName
                     Language.PureScript.AST.SourcePos.$fOrdSourceSpan) -}
2690064e09dbac942efd0ea0f0e1bea5
  $s$fOrd(,)_$cmax ::
    (Language.PureScript.Names.ModuleName,
     Language.PureScript.AST.SourcePos.SourceSpan)
    -> (Language.PureScript.Names.ModuleName,
        Language.PureScript.AST.SourcePos.SourceSpan)
    -> (Language.PureScript.Names.ModuleName,
        Language.PureScript.AST.SourcePos.SourceSpan)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(U,U(U,U(U(U),U(U)),U(U(U),U(U))))><S(SL),1*U(U,U(U,U(U(U),U(U)),U(U(U),U(U))))>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w2 :: (Language.PureScript.Names.ModuleName,
                           Language.PureScript.AST.SourcePos.SourceSpan))
                   (w3 :: (Language.PureScript.Names.ModuleName,
                           Language.PureScript.AST.SourcePos.SourceSpan)) ->
                 case w2 of ww { (,) ww1 ww2 ->
                 case w3 of ww3 { (,) ww4 ww5 ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.Namespace)
                        (Language.PureScript.Names.$fOrdProperName
                           @ 'Language.PureScript.Names.Namespace)
                        ww4 `cast` (Language.PureScript.Names.N:ModuleName[0])
                        ww1 `cast` (Language.PureScript.Names.N:ModuleName[0]) of wild {
                   GHC.Types.LT -> (ww1, ww2)
                   GHC.Types.EQ
                   -> case ww5 of ww7 { Language.PureScript.AST.SourcePos.SourceSpan ww8 ww9 ww10 ->
                      case ww2 of ww11 { Language.PureScript.AST.SourcePos.SourceSpan ww12 ww6 ww13 ->
                      case Language.PureScript.AST.SourcePos.$w$c<1
                             ww8
                             ww9
                             ww10
                             ww12
                             ww6
                             ww13 of wild1 {
                        GHC.Types.False -> (ww4, ww7) GHC.Types.True -> (ww1, ww11) } } }
                   GHC.Types.GT -> (ww4, ww5) } } }) -}
fab5ee9e32b42ef8ff1c9f89c5ccbf49
  $s$fOrd(,)_$cmin ::
    (Language.PureScript.Names.ModuleName,
     Language.PureScript.AST.SourcePos.SourceSpan)
    -> (Language.PureScript.Names.ModuleName,
        Language.PureScript.AST.SourcePos.SourceSpan)
    -> (Language.PureScript.Names.ModuleName,
        Language.PureScript.AST.SourcePos.SourceSpan)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(U,U(U,U(U(U),U(U)),U(U(U),U(U))))><S(SL),1*U(U,U(U,U(U(U),U(U)),U(U(U),U(U))))>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w2 :: (Language.PureScript.Names.ModuleName,
                           Language.PureScript.AST.SourcePos.SourceSpan))
                   (w3 :: (Language.PureScript.Names.ModuleName,
                           Language.PureScript.AST.SourcePos.SourceSpan)) ->
                 case w2 of ww { (,) ww1 ww2 ->
                 case w3 of ww3 { (,) ww4 ww5 ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.Namespace)
                        (Language.PureScript.Names.$fOrdProperName
                           @ 'Language.PureScript.Names.Namespace)
                        ww4 `cast` (Language.PureScript.Names.N:ModuleName[0])
                        ww1 `cast` (Language.PureScript.Names.N:ModuleName[0]) of wild {
                   GHC.Types.LT -> (ww4, ww5)
                   GHC.Types.EQ
                   -> case ww5 of ww7 { Language.PureScript.AST.SourcePos.SourceSpan ww8 ww9 ww10 ->
                      case ww2 of ww11 { Language.PureScript.AST.SourcePos.SourceSpan ww12 ww6 ww13 ->
                      case Language.PureScript.AST.SourcePos.$w$c<1
                             ww8
                             ww9
                             ww10
                             ww12
                             ww6
                             ww13 of wild1 {
                        GHC.Types.False -> (ww1, ww11) GHC.Types.True -> (ww4, ww7) } } }
                   GHC.Types.GT -> (ww1, ww2) } } }) -}
bde5e72a791158ebde9ea5006ca7d22a
  $sfromList ::
    [Language.PureScript.Names.ModuleName]
    -> Data.Set.Internal.Set Language.PureScript.Names.ModuleName
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [Language.PureScript.Names.ModuleName]) ->
                 case ds of wild {
                   [] -> Data.Set.Internal.Tip @ Language.PureScript.Names.ModuleName
                   : x ds1
                   -> case ds1 of wild1 {
                        []
                        -> case x `cast`
                                (Language.PureScript.Names.N:ModuleName[0]) of nt { DEFAULT ->
                           Data.Set.Internal.Bin
                             @ Language.PureScript.Names.ModuleName
                             1#
                             nt `cast` (Sym (Language.PureScript.Names.N:ModuleName[0]))
                             (Data.Set.Internal.Tip @ Language.PureScript.Names.ModuleName)
                             (Data.Set.Internal.Tip @ Language.PureScript.Names.ModuleName) }
                        : ipv ipv1
                        -> case GHC.Classes.$fOrd[]_$ccompare
                                  @ (Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.Namespace)
                                  (Language.PureScript.Names.$fOrdProperName
                                     @ 'Language.PureScript.Names.Namespace)
                                  x `cast` (Language.PureScript.Names.N:ModuleName[0])
                                  ipv `cast` (Language.PureScript.Names.N:ModuleName[0]) of wild2 {
                             DEFAULT
                             -> case x `cast`
                                     (Language.PureScript.Names.N:ModuleName[0]) of nt { DEFAULT ->
                                Language.PureScript.ModuleDependencies.$sfromList_$sgo4
                                  ipv
                                  ipv1
                                  (Data.Set.Internal.Bin
                                     @ Language.PureScript.Names.ModuleName
                                     1#
                                     nt `cast` (Sym (Language.PureScript.Names.N:ModuleName[0]))
                                     (Data.Set.Internal.Tip @ Language.PureScript.Names.ModuleName)
                                     (Data.Set.Internal.Tip
                                        @ Language.PureScript.Names.ModuleName)) }
                             GHC.Types.LT
                             -> case x `cast`
                                     (Language.PureScript.Names.N:ModuleName[0]) of nt { DEFAULT ->
                                Language.PureScript.ModuleDependencies.$sfromList_$s$wgo3
                                  ipv
                                  ipv1
                                  (Data.Set.Internal.Bin
                                     @ Language.PureScript.Names.ModuleName
                                     1#
                                     nt `cast` (Sym (Language.PureScript.Names.N:ModuleName[0]))
                                     (Data.Set.Internal.Tip @ Language.PureScript.Names.ModuleName)
                                     (Data.Set.Internal.Tip @ Language.PureScript.Names.ModuleName))
                                  1# } } } }) -}
3f4d922341603ffe07889fff277c7178
  $sfromList_$s$wgo3 ::
    Language.PureScript.Names.ModuleName
    -> [Language.PureScript.Names.ModuleName]
    -> Data.Set.Internal.Set Language.PureScript.Names.ModuleName
    -> GHC.Prim.Int#
    -> Data.Set.Internal.Set Language.PureScript.Names.ModuleName
  {- Arity: 4, Strictness: <S,U><S,1*U><S,1*U><L,U> -}
9584f95ce94e98349d49798c67bc9293
  $sfromList_$sgo4 ::
    Language.PureScript.Names.ModuleName
    -> [Language.PureScript.Names.ModuleName]
    -> Data.Set.Internal.Set Language.PureScript.Names.ModuleName
    -> Data.Set.Internal.Set Language.PureScript.Names.ModuleName
  {- Arity: 3, Strictness: <S,U><S,1*U><S,1*U> -}
9d56c0b980d4167fe905aefbcb023f66
  $sinsert_$sgo3 ::
    Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ModuleName
    -> Data.Set.Internal.Set Language.PureScript.Names.ModuleName
    -> Data.Set.Internal.Set Language.PureScript.Names.ModuleName
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U> -}
afb518c08b9689d382ad9a6977ae4a48
  $smember_go3 ::
    Language.PureScript.Names.ModuleName
    -> Data.Set.Internal.Set Language.PureScript.Names.ModuleName
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
2d85272324ec2f488ab51e51feafaba9
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Language.PureScript.ModuleDependencies.$trModule3
                   Language.PureScript.ModuleDependencies.$trModule1) -}
844d1809215f8faa690296832a89737d
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.ModuleDependencies.$trModule2) -}
b1d6bb700d47e4afe70d73be3cba32e8
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Language.PureScript.ModuleDependencies"#) -}
e73a6a2de6763292912dfbb1b1741a1d
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.ModuleDependencies.$trModule4) -}
a54940b419816f3ca03d1be472522166
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"#) -}
b5135937ed6a423177a064e2c9d5b307
  type ModuleGraph =
    [(Language.PureScript.Names.ModuleName,
      [Language.PureScript.Names.ModuleName])]
0e0eaebbb4227ed05134f6145ca9b6c7
  sortModules ::
    Control.Monad.Error.Class.MonadError
      Language.PureScript.Errors.MultipleErrors m =>
    [Language.PureScript.AST.Declarations.Module]
    -> m ([Language.PureScript.AST.Declarations.Module],
          Language.PureScript.ModuleDependencies.ModuleGraph)
  {- Arity: 2,
     Strictness: <S(S(LC(C(S))LLL)LL),U(U(U(U(C(C1(U)),C(C1(U))),C(U),A,C(C1(C1(U))),A,A),C(C1(U)),C(C1(U)),C(U),A),C(U),C(C1(U)))><L,U> -}
"SPEC/Language.PureScript.ModuleDependencies $fEq(,) @ ModuleName @ SourceSpan" [orphan] forall (v1 :: GHC.Classes.Eq
                                                                                                         Language.PureScript.AST.SourcePos.SourceSpan)
                                                                                                (v :: GHC.Classes.Eq
                                                                                                        Language.PureScript.Names.ModuleName)
  GHC.Classes.$fEq(,) @ Language.PureScript.Names.ModuleName
                      @ Language.PureScript.AST.SourcePos.SourceSpan
                      v
                      v1
  = Language.PureScript.ModuleDependencies.$s$fEq(,)
"SPEC/Language.PureScript.ModuleDependencies $fEq(,)_$c/= @ ModuleName @ SourceSpan" [orphan] forall ($dEq1 :: GHC.Classes.Eq
                                                                                                                 Language.PureScript.AST.SourcePos.SourceSpan)
                                                                                                     ($dEq :: GHC.Classes.Eq
                                                                                                                Language.PureScript.Names.ModuleName)
  GHC.Classes.$fEq(,)_$c/= @ Language.PureScript.Names.ModuleName
                           @ Language.PureScript.AST.SourcePos.SourceSpan
                           $dEq
                           $dEq1
  = Language.PureScript.ModuleDependencies.$s$fEq(,)_$s$fEq(,)_$c/=
"SPEC/Language.PureScript.ModuleDependencies $fOrd(,) @ ModuleName @ SourceSpan" [orphan] forall (v1 :: GHC.Classes.Ord
                                                                                                          Language.PureScript.AST.SourcePos.SourceSpan)
                                                                                                 (v :: GHC.Classes.Ord
                                                                                                         Language.PureScript.Names.ModuleName)
  GHC.Classes.$fOrd(,) @ Language.PureScript.Names.ModuleName
                       @ Language.PureScript.AST.SourcePos.SourceSpan
                       v
                       v1
  = Language.PureScript.ModuleDependencies.$s$fOrd(,)
"SPEC/Language.PureScript.ModuleDependencies $fOrd(,)_$cmax @ ModuleName @ SourceSpan" [orphan] [0] forall (w1 :: GHC.Classes.Ord
                                                                                                                    Language.PureScript.AST.SourcePos.SourceSpan)
                                                                                                           (w :: GHC.Classes.Ord
                                                                                                                   Language.PureScript.Names.ModuleName)
  GHC.Classes.$fOrd(,)_$cmax @ Language.PureScript.Names.ModuleName
                             @ Language.PureScript.AST.SourcePos.SourceSpan
                             w
                             w1
  = Language.PureScript.ModuleDependencies.$s$fOrd(,)_$cmax
"SPEC/Language.PureScript.ModuleDependencies $fOrd(,)_$cmin @ ModuleName @ SourceSpan" [orphan] [0] forall (w1 :: GHC.Classes.Ord
                                                                                                                    Language.PureScript.AST.SourcePos.SourceSpan)
                                                                                                           (w :: GHC.Classes.Ord
                                                                                                                   Language.PureScript.Names.ModuleName)
  GHC.Classes.$fOrd(,)_$cmin @ Language.PureScript.Names.ModuleName
                             @ Language.PureScript.AST.SourcePos.SourceSpan
                             w
                             w1
  = Language.PureScript.ModuleDependencies.$s$fOrd(,)_$cmin
"SPEC/Language.PureScript.ModuleDependencies fromList @ ModuleName" [orphan] forall ($dOrd :: GHC.Classes.Ord
                                                                                                Language.PureScript.Names.ModuleName)
  Data.Set.Internal.fromList @ Language.PureScript.Names.ModuleName
                             $dOrd
  = Language.PureScript.ModuleDependencies.$sfromList
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

