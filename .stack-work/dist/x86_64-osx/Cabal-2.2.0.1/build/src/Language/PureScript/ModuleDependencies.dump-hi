
==================== FINAL INTERFACE ====================
2019-01-24 14:16:01.110496 UTC

interface purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.ModuleDependencies 8043
  interface hash: 6ff3f42c61c3abc42aa66365177437b6
  ABI hash: 76745f43818037b936a9569d78efb462
  export-list hash: f66aa6d5fb2fb0e69d4136dd2c6c7a5f
  orphan hash: 5b4c5ab683d0ab285f4d923dfe062c4c
  flag hash: 2ae478d21823b7c739b1b08c46262eb0
  opt_hash: 2c98c95d41c045ae9c2fb565ec8aabc6
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Language.PureScript.ModuleDependencies.sortModules
  Language.PureScript.ModuleDependencies.ModuleGraph
module dependencies: Control.Monad.Supply
                     Control.Monad.Supply.Class Language.PureScript.AST
                     Language.PureScript.AST.Binders
                     Language.PureScript.AST.Declarations
                     Language.PureScript.AST.Exported Language.PureScript.AST.Literals
                     Language.PureScript.AST.Operators Language.PureScript.AST.SourcePos
                     Language.PureScript.AST.Traversals Language.PureScript.Bundle
                     Language.PureScript.Comments Language.PureScript.Constants
                     Language.PureScript.Crash Language.PureScript.Environment
                     Language.PureScript.Errors Language.PureScript.Kinds
                     Language.PureScript.Label Language.PureScript.Names
                     Language.PureScript.PSString Language.PureScript.Parser.Lexer
                     Language.PureScript.Parser.State Language.PureScript.Pretty
                     Language.PureScript.Pretty.Common Language.PureScript.Pretty.Kinds
                     Language.PureScript.Pretty.Types Language.PureScript.Pretty.Values
                     Language.PureScript.Publish.BoxesHelpers
                     Language.PureScript.Traversals
                     Language.PureScript.TypeClassDictionaries Language.PureScript.Types
                     Paths_purescript
package dependencies: aeson-1.3.1.1 ansi-terminal-0.8.0.4
                      array-0.5.2.0 async-2.2.1 attoparsec-0.13.2.2 base-4.11.1.0
                      base-compat-0.10.4 binary-0.8.5.1 blaze-builder-0.4.1.0 boxes-0.1.5
                      bytestring-0.10.8.2 colour-2.3.4 containers-0.5.11.0
                      deepseq-1.4.3.0 dlist-0.8.0.4 filepath-1.4.2 ghc-boot-th-8.4.3
                      ghc-prim-0.5.2.0 hashable-1.2.7.0 integer-gmp-1.0.2.0
                      integer-logarithms-1.0.2.1 language-javascript-0.6.0.11
                      microlens-0.4.9.1 microlens-ghc-0.4.9 microlens-mtl-0.1.11.1
                      microlens-platform-0.3.10 microlens-th-0.4.2.1 mtl-2.2.2
                      parsec-3.1.13.0 pattern-arrows-0.0.2 pretty-1.1.3.6
                      primitive-0.6.3.0 protolude-0.2.2 random-1.1 scientific-0.3.6.2
                      sourcemap-0.1.6 split-0.2.3.3 stm-2.4.5.0 syb-0.7 tagged-0.8.5
                      template-haskell-2.13.0.0 text-1.2.3.0 th-abstraction-0.2.8.0
                      time-1.8.0.2 time-locale-compat-0.1.1.4 transformers-0.5.5.0
                      unordered-containers-0.2.9.0 utf8-string-1.0.1.1 uuid-types-1.0.3
                      vector-0.12.0.1
orphans: syb-0.7:Data.Generics.Instances
         stm-2.4.5.0:Control.Monad.STM
         microlens-platform-0.3.10:Lens.Micro.Platform
         microlens-ghc-0.4.9:Lens.Micro.GHC colour-2.3.4:Data.Colour
         attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         vector-0.12.0.1:Data.Vector.Unboxed
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.0:Data.Text.Lazy
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.5.0:Control.Monad.Trans.Error
         text-1.2.3.0:Data.Text binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: aeson-1.3.1.1:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.Graph
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         dlist-0.8.0.4:Data.DList ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         microlens-0.4.9.1:Lens.Micro.Internal
                         microlens-ghc-0.4.9:Lens.Micro.GHC
                         microlens-mtl-0.1.11.1:Lens.Micro.Mtl.Internal
                         microlens-platform-0.3.10:Lens.Micro.Platform
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.Declarations
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.Operators
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.SourcePos
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Comments
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Environment
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Kinds
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Label
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Names
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.PSString
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.TypeClassDictionaries
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Types
                         tagged-0.8.5:Data.Tagged
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
                         th-abstraction-0.2.8.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.Functor f522c3501272159820fd6f242510732f
import  -/  base-4.11.1.0:Data.List.NonEmpty 595ee3baddcadebc4831ea7541427984
import  -/  base-4.11.1.0:Data.Maybe 409c3da2b142470b68be39ce1d97a9f7
import  -/  base-4.11.1.0:Data.Tuple 3af66f3ac61ed95ba8a3a3f68ebc5003
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  containers-0.5.11.0:Data.Graph 62516cbabce0b5240500dc0da6a9b2cf
import  -/  containers-0.5.11.0:Data.Set 7d3c64a641be4cacbcd8119445bab919
import  -/  containers-0.5.11.0:Data.Set.Internal 93fa3ef95853aa2a7aadf32d693bd451
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  mtl-2.2.2:Control.Monad.Error.Class df146c18e27154b8df4c8637c59fd61b
import  -/  protolude-0.2.2:Protolude 2c2d16096c8a60f59f646a3b93b0eb7b
import  -/  protolude-0.2.2:Protolude.List 3a80368167450d7a4360ebf1ea443345
import  -/  Language.PureScript.AST e89b59f8e201961eafd3ff905a683659
  exports: be73d3bb7d4ebe5df082453f6d572075
import  -/  Language.PureScript.AST.Declarations 586bc75044e8737d02875208d17d4395
  CycleInModules 0af9e32ca1a469832094fae4e417174f
  Declaration e92f6ee78a22c0eadc3566d7d1f48d5b
  ErrorInModule fa705731a479914ad1b2d8aff2d06ff6
  ImportDeclaration b98a8b3e9f19a9a91825a99d72954601
  Module 305128e30e200d34d712365aa2d509df
  Module 3342e00ee072addfd009ee61e87fb865
  ModuleNotFound 7d08cbb5754760a5207e995e4aaee1c8
  getModuleName 7aa2ed3fa39338f5edb2f1938e29c924
  getModuleSourceSpan 9836f61824b534227aa948fd618b76f6
import  -/  Language.PureScript.AST.SourcePos 63acacac5b7be73d04e5be0047a9a89a
  SourceSpan 1e0cf2bd3ea18f97a2ff152297f09219
import  -/  Language.PureScript.Constants 69f48af5637c1cbbd07a6f85918359c3
  exports: 9c458e31ccbc9e07ff15471cf48a55ee
  primModules 357fd5e56d4f01a182cfde64b7dbba2c
import  -/  Language.PureScript.Crash 3dd739d57f17e8a1e9cd97afd3faf067
  exports: a9d2725f359c2d113bd38076e88ec681
  internalError d33c2a09c5cbe8e68c0bc27d1500ba1a
import  -/  Language.PureScript.Errors 3c1ad933587510f8b20a8c9ec2e86ce9
  exports: 8e61484c4664eceb943d9fc4820c721b
  MultipleErrors e1ef6a17348ccfe3ef65185d3c5f9026
  addHint 4d7c0f041e7397261babf0b1c1669b2a
  errorMessage' d5b3fcc13faf321f693b39ae31b8bd13
  errorMessage'' 7a0d1df22a3e37310e2eb01dd8bb5d96
  parU ba83f09a68cd72d36addca6319b4b6e0
import  -/  Language.PureScript.Names 00f694509122478d97b327fbbccae327
  exports: ad7ae34f85124c68e8ba1c90fb2e732f
  ModuleName 1b2ddf0c04464d2fa2588925f10c1966
2a0e0fa96f61f918f25b9a6af62c6cef
  $s$fEq(,) ::
    GHC.Classes.Eq
      (Language.PureScript.Names.ModuleName,
       Language.PureScript.AST.SourcePos.SourceSpan)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.ModuleName,
                     Language.PureScript.AST.SourcePos.SourceSpan)
                  (GHC.Classes.$fEq(,)_$c==
                     @ Language.PureScript.Names.ModuleName
                     @ Language.PureScript.AST.SourcePos.SourceSpan
                     Language.PureScript.Names.$fEqModuleName
                     Language.PureScript.AST.SourcePos.$fEqSourceSpan)
                  Language.PureScript.ModuleDependencies.$s$fEq(,)_$s$fEq(,)_$c/= -}
aa81d9ba1f979d110b2e10758f5a6ee7
  $s$fEq(,)_$s$fEq(,)_$c/= ::
    (Language.PureScript.Names.ModuleName,
     Language.PureScript.AST.SourcePos.SourceSpan)
    -> (Language.PureScript.Names.ModuleName,
        Language.PureScript.AST.SourcePos.SourceSpan)
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U(1*U,1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U))))><S(SL),1*U(1*U,1*U(1*U,1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U))))>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: (Language.PureScript.Names.ModuleName,
                          Language.PureScript.AST.SourcePos.SourceSpan))
                   (y :: (Language.PureScript.Names.ModuleName,
                          Language.PureScript.AST.SourcePos.SourceSpan)) ->
                 case x of wild { (,) a1 a2 ->
                 case y of wild1 { (,) b1 b2 ->
                 case GHC.Classes.$fEq[]_$c==
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.Namespace)
                        (Language.PureScript.Names.$fEqProperName
                           @ 'Language.PureScript.Names.Namespace)
                        a1 `cast` (Language.PureScript.Names.N:ModuleName[0])
                        b1 `cast` (Language.PureScript.Names.N:ModuleName[0]) of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True
                   -> case Language.PureScript.AST.SourcePos.$fEqSourceSpan_$c==
                             a2
                             b2 of wild3 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True -> GHC.Types.False } } } }) -}
0de2c77d7bac622ddf95960063b1578c
  $s$fOrd(,) ::
    GHC.Classes.Ord
      (Language.PureScript.Names.ModuleName,
       Language.PureScript.AST.SourcePos.SourceSpan)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.ModuleName,
                     Language.PureScript.AST.SourcePos.SourceSpan)
                  Language.PureScript.ModuleDependencies.$s$fEq(,)
                  (GHC.Classes.$fOrd(,)_$ccompare
                     @ Language.PureScript.Names.ModuleName
                     @ Language.PureScript.AST.SourcePos.SourceSpan
                     Language.PureScript.Names.$fOrdModuleName
                     Language.PureScript.AST.SourcePos.$fOrdSourceSpan)
                  (GHC.Classes.$fOrd(,)_$c<
                     @ Language.PureScript.Names.ModuleName
                     @ Language.PureScript.AST.SourcePos.SourceSpan
                     Language.PureScript.Names.$fOrdModuleName
                     Language.PureScript.AST.SourcePos.$fOrdSourceSpan)
                  (GHC.Classes.$fOrd(,)_$c<=
                     @ Language.PureScript.Names.ModuleName
                     @ Language.PureScript.AST.SourcePos.SourceSpan
                     Language.PureScript.Names.$fOrdModuleName
                     Language.PureScript.AST.SourcePos.$fOrdSourceSpan)
                  (\ (a1 :: (Language.PureScript.Names.ModuleName,
                             Language.PureScript.AST.SourcePos.SourceSpan))
                     (b1 :: (Language.PureScript.Names.ModuleName,
                             Language.PureScript.AST.SourcePos.SourceSpan)) ->
                   GHC.Classes.$fOrd(,)_$c<
                     @ Language.PureScript.Names.ModuleName
                     @ Language.PureScript.AST.SourcePos.SourceSpan
                     Language.PureScript.Names.$fOrdModuleName
                     Language.PureScript.AST.SourcePos.$fOrdSourceSpan
                     b1
                     a1)
                  (GHC.Classes.$fOrd(,)_$c>=
                     @ Language.PureScript.Names.ModuleName
                     @ Language.PureScript.AST.SourcePos.SourceSpan
                     Language.PureScript.Names.$fOrdModuleName
                     Language.PureScript.AST.SourcePos.$fOrdSourceSpan)
                  (GHC.Classes.$fOrd(,)_$cmax
                     @ Language.PureScript.Names.ModuleName
                     @ Language.PureScript.AST.SourcePos.SourceSpan
                     Language.PureScript.Names.$fOrdModuleName
                     Language.PureScript.AST.SourcePos.$fOrdSourceSpan)
                  (GHC.Classes.$fOrd(,)_$cmin
                     @ Language.PureScript.Names.ModuleName
                     @ Language.PureScript.AST.SourcePos.SourceSpan
                     Language.PureScript.Names.$fOrdModuleName
                     Language.PureScript.AST.SourcePos.$fOrdSourceSpan) -}
8e2b81fde3515ff88b5fe9be238fdcdd
  $s$fOrd(,)_$cmax ::
    (Language.PureScript.Names.ModuleName,
     Language.PureScript.AST.SourcePos.SourceSpan)
    -> (Language.PureScript.Names.ModuleName,
        Language.PureScript.AST.SourcePos.SourceSpan)
    -> (Language.PureScript.Names.ModuleName,
        Language.PureScript.AST.SourcePos.SourceSpan)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(U,U(U,U(U(U),U(U)),U(U(U),U(U))))><S(SL),1*U(U,U(U,U(U(U),U(U)),U(U(U),U(U))))>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w2 :: (Language.PureScript.Names.ModuleName,
                           Language.PureScript.AST.SourcePos.SourceSpan))
                   (w3 :: (Language.PureScript.Names.ModuleName,
                           Language.PureScript.AST.SourcePos.SourceSpan)) ->
                 case w2 of ww { (,) ww1 ww2 ->
                 case w3 of ww3 { (,) ww4 ww5 ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.Namespace)
                        (Language.PureScript.Names.$fOrdProperName
                           @ 'Language.PureScript.Names.Namespace)
                        ww4 `cast` (Language.PureScript.Names.N:ModuleName[0])
                        ww1 `cast` (Language.PureScript.Names.N:ModuleName[0]) of wild {
                   GHC.Types.LT -> (ww1, ww2)
                   GHC.Types.EQ
                   -> case ww5 of ww7 { Language.PureScript.AST.SourcePos.SourceSpan ww8 ww9 ww10 ->
                      case ww2 of ww11 { Language.PureScript.AST.SourcePos.SourceSpan ww12 ww6 ww13 ->
                      case Language.PureScript.AST.SourcePos.$w$c<1
                             ww8
                             ww9
                             ww10
                             ww12
                             ww6
                             ww13 of wild1 {
                        GHC.Types.False -> (ww4, ww7) GHC.Types.True -> (ww1, ww11) } } }
                   GHC.Types.GT -> (ww4, ww5) } } }) -}
8ce2507a6f2ed13e73319986445ef042
  $s$fOrd(,)_$cmin ::
    (Language.PureScript.Names.ModuleName,
     Language.PureScript.AST.SourcePos.SourceSpan)
    -> (Language.PureScript.Names.ModuleName,
        Language.PureScript.AST.SourcePos.SourceSpan)
    -> (Language.PureScript.Names.ModuleName,
        Language.PureScript.AST.SourcePos.SourceSpan)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(U,U(U,U(U(U),U(U)),U(U(U),U(U))))><S(SL),1*U(U,U(U,U(U(U),U(U)),U(U(U),U(U))))>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w2 :: (Language.PureScript.Names.ModuleName,
                           Language.PureScript.AST.SourcePos.SourceSpan))
                   (w3 :: (Language.PureScript.Names.ModuleName,
                           Language.PureScript.AST.SourcePos.SourceSpan)) ->
                 case w2 of ww { (,) ww1 ww2 ->
                 case w3 of ww3 { (,) ww4 ww5 ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.Namespace)
                        (Language.PureScript.Names.$fOrdProperName
                           @ 'Language.PureScript.Names.Namespace)
                        ww4 `cast` (Language.PureScript.Names.N:ModuleName[0])
                        ww1 `cast` (Language.PureScript.Names.N:ModuleName[0]) of wild {
                   GHC.Types.LT -> (ww4, ww5)
                   GHC.Types.EQ
                   -> case ww5 of ww7 { Language.PureScript.AST.SourcePos.SourceSpan ww8 ww9 ww10 ->
                      case ww2 of ww11 { Language.PureScript.AST.SourcePos.SourceSpan ww12 ww6 ww13 ->
                      case Language.PureScript.AST.SourcePos.$w$c<1
                             ww8
                             ww9
                             ww10
                             ww12
                             ww6
                             ww13 of wild1 {
                        GHC.Types.False -> (ww1, ww11) GHC.Types.True -> (ww4, ww7) } } }
                   GHC.Types.GT -> (ww1, ww2) } } }) -}
30c95402e99435c86e8e1566659b04a2
  $sfromList ::
    [Language.PureScript.Names.ModuleName]
    -> Data.Set.Internal.Set Language.PureScript.Names.ModuleName
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [Language.PureScript.Names.ModuleName]) ->
                 case ds of wild {
                   [] -> Data.Set.Internal.Tip @ Language.PureScript.Names.ModuleName
                   : x ds1
                   -> case ds1 of wild1 {
                        []
                        -> case x `cast`
                                (Language.PureScript.Names.N:ModuleName[0]) of nt { DEFAULT ->
                           Data.Set.Internal.Bin
                             @ Language.PureScript.Names.ModuleName
                             1#
                             nt `cast` (Sym (Language.PureScript.Names.N:ModuleName[0]))
                             (Data.Set.Internal.Tip @ Language.PureScript.Names.ModuleName)
                             (Data.Set.Internal.Tip @ Language.PureScript.Names.ModuleName) }
                        : ipv ipv1
                        -> case GHC.Classes.$fOrd[]_$ccompare
                                  @ (Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.Namespace)
                                  (Language.PureScript.Names.$fOrdProperName
                                     @ 'Language.PureScript.Names.Namespace)
                                  x `cast` (Language.PureScript.Names.N:ModuleName[0])
                                  ipv `cast` (Language.PureScript.Names.N:ModuleName[0]) of wild2 {
                             DEFAULT
                             -> case x `cast`
                                     (Language.PureScript.Names.N:ModuleName[0]) of nt { DEFAULT ->
                                Language.PureScript.ModuleDependencies.$sfromList_$sgo4
                                  ipv
                                  ipv1
                                  (Data.Set.Internal.Bin
                                     @ Language.PureScript.Names.ModuleName
                                     1#
                                     nt `cast` (Sym (Language.PureScript.Names.N:ModuleName[0]))
                                     (Data.Set.Internal.Tip @ Language.PureScript.Names.ModuleName)
                                     (Data.Set.Internal.Tip
                                        @ Language.PureScript.Names.ModuleName)) }
                             GHC.Types.LT
                             -> case x `cast`
                                     (Language.PureScript.Names.N:ModuleName[0]) of nt { DEFAULT ->
                                Language.PureScript.ModuleDependencies.$sfromList_$s$wgo3
                                  ipv
                                  ipv1
                                  (Data.Set.Internal.Bin
                                     @ Language.PureScript.Names.ModuleName
                                     1#
                                     nt `cast` (Sym (Language.PureScript.Names.N:ModuleName[0]))
                                     (Data.Set.Internal.Tip @ Language.PureScript.Names.ModuleName)
                                     (Data.Set.Internal.Tip @ Language.PureScript.Names.ModuleName))
                                  1# } } } }) -}
2f315bfd2faab000f95431b77dec8ca9
  $sfromList_$s$wgo3 ::
    Language.PureScript.Names.ModuleName
    -> [Language.PureScript.Names.ModuleName]
    -> Data.Set.Internal.Set Language.PureScript.Names.ModuleName
    -> GHC.Prim.Int#
    -> Data.Set.Internal.Set Language.PureScript.Names.ModuleName
  {- Arity: 4, Strictness: <S,U><S,1*U><S,1*U><L,U> -}
692e693c366f55d082a821a99513ffb8
  $sfromList_$sgo4 ::
    Language.PureScript.Names.ModuleName
    -> [Language.PureScript.Names.ModuleName]
    -> Data.Set.Internal.Set Language.PureScript.Names.ModuleName
    -> Data.Set.Internal.Set Language.PureScript.Names.ModuleName
  {- Arity: 3, Strictness: <S,U><S,1*U><S,1*U> -}
05a7437f99bc2dd183edc1bb771d271c
  $sinsert_$sgo3 ::
    Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ModuleName
    -> Data.Set.Internal.Set Language.PureScript.Names.ModuleName
    -> Data.Set.Internal.Set Language.PureScript.Names.ModuleName
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U> -}
67eeb4788b4796fadfa356aa7471f9ff
  $smember_go3 ::
    Language.PureScript.Names.ModuleName
    -> Data.Set.Internal.Set Language.PureScript.Names.ModuleName
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
84269d1506314830d2b81a7502726651
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Language.PureScript.ModuleDependencies.$trModule3
                   Language.PureScript.ModuleDependencies.$trModule1) -}
ef084742ff27583d6c935f7090564869
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.ModuleDependencies.$trModule2) -}
b02acb7328b4f9082a8bf75c376f9f44
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Language.PureScript.ModuleDependencies"#) -}
fb9491d992c2633781bd84c3b37b64e2
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.ModuleDependencies.$trModule4) -}
9a26776091c6fd9d8ad0db5390516f78
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"#) -}
52d00cc19862b65170cca7812049d04b
  type ModuleGraph =
    [(Language.PureScript.Names.ModuleName,
      [Language.PureScript.Names.ModuleName])]
9064a8fe73bfe27487e0064715babcbf
  sortModules ::
    Control.Monad.Error.Class.MonadError
      Language.PureScript.Errors.MultipleErrors m =>
    [Language.PureScript.AST.Declarations.Module]
    -> m ([Language.PureScript.AST.Declarations.Module],
          Language.PureScript.ModuleDependencies.ModuleGraph)
  {- Arity: 2,
     Strictness: <S(S(LC(C(S))LLL)LL),U(U(U(U(C(C1(U)),C(C1(U))),C(U),A,C(C1(C1(U))),A,A),C(C1(U)),C(C1(U)),C(U),A),C(U),C(C1(U)))><L,U> -}
"SPEC/Language.PureScript.ModuleDependencies $fEq(,) @ ModuleName @ SourceSpan" [orphan] forall (v1 :: GHC.Classes.Eq
                                                                                                         Language.PureScript.AST.SourcePos.SourceSpan)
                                                                                                (v :: GHC.Classes.Eq
                                                                                                        Language.PureScript.Names.ModuleName)
  GHC.Classes.$fEq(,) @ Language.PureScript.Names.ModuleName
                      @ Language.PureScript.AST.SourcePos.SourceSpan
                      v
                      v1
  = Language.PureScript.ModuleDependencies.$s$fEq(,)
"SPEC/Language.PureScript.ModuleDependencies $fEq(,)_$c/= @ ModuleName @ SourceSpan" [orphan] forall ($dEq1 :: GHC.Classes.Eq
                                                                                                                 Language.PureScript.AST.SourcePos.SourceSpan)
                                                                                                     ($dEq :: GHC.Classes.Eq
                                                                                                                Language.PureScript.Names.ModuleName)
  GHC.Classes.$fEq(,)_$c/= @ Language.PureScript.Names.ModuleName
                           @ Language.PureScript.AST.SourcePos.SourceSpan
                           $dEq
                           $dEq1
  = Language.PureScript.ModuleDependencies.$s$fEq(,)_$s$fEq(,)_$c/=
"SPEC/Language.PureScript.ModuleDependencies $fOrd(,) @ ModuleName @ SourceSpan" [orphan] forall (v1 :: GHC.Classes.Ord
                                                                                                          Language.PureScript.AST.SourcePos.SourceSpan)
                                                                                                 (v :: GHC.Classes.Ord
                                                                                                         Language.PureScript.Names.ModuleName)
  GHC.Classes.$fOrd(,) @ Language.PureScript.Names.ModuleName
                       @ Language.PureScript.AST.SourcePos.SourceSpan
                       v
                       v1
  = Language.PureScript.ModuleDependencies.$s$fOrd(,)
"SPEC/Language.PureScript.ModuleDependencies $fOrd(,)_$cmax @ ModuleName @ SourceSpan" [orphan] [0] forall (w1 :: GHC.Classes.Ord
                                                                                                                    Language.PureScript.AST.SourcePos.SourceSpan)
                                                                                                           (w :: GHC.Classes.Ord
                                                                                                                   Language.PureScript.Names.ModuleName)
  GHC.Classes.$fOrd(,)_$cmax @ Language.PureScript.Names.ModuleName
                             @ Language.PureScript.AST.SourcePos.SourceSpan
                             w
                             w1
  = Language.PureScript.ModuleDependencies.$s$fOrd(,)_$cmax
"SPEC/Language.PureScript.ModuleDependencies $fOrd(,)_$cmin @ ModuleName @ SourceSpan" [orphan] [0] forall (w1 :: GHC.Classes.Ord
                                                                                                                    Language.PureScript.AST.SourcePos.SourceSpan)
                                                                                                           (w :: GHC.Classes.Ord
                                                                                                                   Language.PureScript.Names.ModuleName)
  GHC.Classes.$fOrd(,)_$cmin @ Language.PureScript.Names.ModuleName
                             @ Language.PureScript.AST.SourcePos.SourceSpan
                             w
                             w1
  = Language.PureScript.ModuleDependencies.$s$fOrd(,)_$cmin
"SPEC/Language.PureScript.ModuleDependencies fromList @ ModuleName" [orphan] forall ($dOrd :: GHC.Classes.Ord
                                                                                                Language.PureScript.Names.ModuleName)
  Data.Set.Internal.fromList @ Language.PureScript.Names.ModuleName
                             $dOrd
  = Language.PureScript.ModuleDependencies.$sfromList
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

