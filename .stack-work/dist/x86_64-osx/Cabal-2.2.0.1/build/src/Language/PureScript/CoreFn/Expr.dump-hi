
==================== FINAL INTERFACE ====================
2019-01-24 14:13:31.866091 UTC

interface purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.CoreFn.Expr 8043
  interface hash: 39992c063cbff22c761a6aad7b2eed93
  ABI hash: fc76100f222fb80b0ed958c173fcf851
  export-list hash: 46aca17cf6e6b6ff6130ffc5fc5adc10
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 354630b2248d720ba62df5ccf315f8dd
  opt_hash: 2c98c95d41c045ae9c2fb565ec8aabc6
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Language.PureScript.CoreFn.Expr.extractAnn
  Language.PureScript.CoreFn.Expr.modifyAnn
  Language.PureScript.CoreFn.Expr.Bind{Language.PureScript.CoreFn.Expr.NonRec Language.PureScript.CoreFn.Expr.Rec}
  Language.PureScript.CoreFn.Expr.CaseAlternative{Language.PureScript.CoreFn.Expr.CaseAlternative caseAlternativeBinders caseAlternativeResult}
  Language.PureScript.CoreFn.Expr.Expr{Language.PureScript.CoreFn.Expr.Abs Language.PureScript.CoreFn.Expr.Accessor Language.PureScript.CoreFn.Expr.App Language.PureScript.CoreFn.Expr.Case Language.PureScript.CoreFn.Expr.Constructor Language.PureScript.CoreFn.Expr.Let Language.PureScript.CoreFn.Expr.Literal Language.PureScript.CoreFn.Expr.ObjectUpdate Language.PureScript.CoreFn.Expr.Var}
  Language.PureScript.CoreFn.Expr.Guard
module dependencies: Control.Monad.Supply
                     Control.Monad.Supply.Class Language.PureScript.AST.Literals
                     Language.PureScript.CoreFn.Binders Language.PureScript.Names
                     Language.PureScript.PSString
package dependencies: aeson-1.3.1.1 array-0.5.2.0
                      attoparsec-0.13.2.2 base-4.11.1.0 base-compat-0.10.4 binary-0.8.5.1
                      bytestring-0.10.8.2 containers-0.5.11.0 deepseq-1.4.3.0
                      dlist-0.8.0.4 ghc-boot-th-8.4.3 ghc-prim-0.5.2.0 hashable-1.2.7.0
                      integer-gmp-1.0.2.0 integer-logarithms-1.0.2.1 mtl-2.2.2
                      pretty-1.1.3.6 primitive-0.6.3.0 random-1.1 scientific-0.3.6.2
                      tagged-0.8.5 template-haskell-2.13.0.0 text-1.2.3.0
                      th-abstraction-0.2.8.0 time-1.8.0.2 time-locale-compat-0.1.1.4
                      transformers-0.5.5.0 unordered-containers-0.2.9.0 uuid-types-1.0.3
                      vector-0.12.0.1
orphans: attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         vector-0.12.0.1:Data.Vector.Unboxed
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.0:Data.Text.Lazy
         text-1.2.3.0:Data.Text binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.5.0:Control.Monad.Trans.Error
         base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: aeson-1.3.1.1:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         dlist-0.8.0.4:Data.DList ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Names
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.PSString
                         tagged-0.8.5:Data.Tagged
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
                         th-abstraction-0.2.8.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  base-4.11.1.0:Control.Arrow ce43199b5356a11ee2a8317f0ec30aee
import  -/  base-4.11.1.0:Data.Either 39d922b371c4c52d426e9ee66de8371a
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-compat-0.10.4:Prelude.Compat bb6796186ed35a1d09dc34362a3fc27e
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  Language.PureScript.AST.Literals da2ec269f063125450b272321f85468a
  exports: ab5af4e7482c5a8cbf79fdfd52ee94e2
  Literal 4b6b35be8d89b746a77fcd3d0c0a71d4
import  -/  Language.PureScript.CoreFn.Binders e5c76c3a1335bec879bb8abeb15c812b
  exports: 0044d6c8e85aa325494d3ca89c5568c6
  Binder 52f739b4003bef459f95e2c6f2571980
import  -/  Language.PureScript.Names 00f694509122478d97b327fbbccae327
  exports: ad7ae34f85124c68e8ba1c90fb2e732f
  ConstructorName 84054a8bbbe827ba2ce7da83056a95ee
  Ident bad3562aa6138b6192713ac281080869
  ProperName a7268334e0b909381550b9329cb80fcc
  Qualified 1b2ddf0c04464d2fa2588925f10c1966
  TypeName 40ce511c66a72431b4e87351210f7b03
import  -/  Language.PureScript.PSString 482bcd39d274b3e3efbde5749bd9d797
  exports: dedd5d31dc509736134f041863efd1d4
  PSString 96ffea2472d48cda76cc39d47ab7bb82
22c7241ad0e882392beaf38a652acec4
  $fFunctorBind ::
    GHC.Base.Functor Language.PureScript.CoreFn.Expr.Bind
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.CoreFn.Expr.Bind
                  Language.PureScript.CoreFn.Expr.$fFunctorBind_$cfmap
                  Language.PureScript.CoreFn.Expr.$fFunctorBind_$c<$ -}
22c7241ad0e882392beaf38a652acec4
  $fFunctorBind_$c<$ ::
    a
    -> Language.PureScript.CoreFn.Expr.Bind b
    -> Language.PureScript.CoreFn.Expr.Bind a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>,
     Unfolding: (\ @ a
                   @ b
                   (z :: a)
                   (ds :: Language.PureScript.CoreFn.Expr.Bind b) ->
                 case ds of wild {
                   Language.PureScript.CoreFn.Expr.NonRec a1 a2 a3
                   -> Language.PureScript.CoreFn.Expr.NonRec
                        @ a
                        z
                        a2
                        (Language.PureScript.CoreFn.Expr.$fFunctorBind_$c<$1 @ a @ b z a3)
                   Language.PureScript.CoreFn.Expr.Rec a1
                   -> Language.PureScript.CoreFn.Expr.Rec
                        @ a
                        (GHC.Base.map
                           @ ((b, Language.PureScript.Names.Ident),
                              Language.PureScript.CoreFn.Expr.Expr b)
                           @ ((a, Language.PureScript.Names.Ident),
                              Language.PureScript.CoreFn.Expr.Expr a)
                           (\ (b5 :: ((b, Language.PureScript.Names.Ident),
                                      Language.PureScript.CoreFn.Expr.Expr b)) ->
                            case b5 of wild1 { (,) a2 a3 ->
                            (case a2 of wild2 { (,) a4 a5 -> (z, a5) },
                             Language.PureScript.CoreFn.Expr.$fFunctorBind_$c<$1
                               @ a
                               @ b
                               z
                               a3) })
                           a1) }) -}
22c7241ad0e882392beaf38a652acec4
  $fFunctorBind_$c<$1 ::
    a
    -> Language.PureScript.CoreFn.Expr.Expr b
    -> Language.PureScript.CoreFn.Expr.Expr a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U> -}
22c7241ad0e882392beaf38a652acec4
  $fFunctorBind_$cfmap ::
    (a -> b)
    -> Language.PureScript.CoreFn.Expr.Bind a
    -> Language.PureScript.CoreFn.Expr.Bind b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U>,
     Unfolding: (\ @ a
                   @ b
                   (f4 :: a -> b)
                   (ds :: Language.PureScript.CoreFn.Expr.Bind a) ->
                 case ds of wild {
                   Language.PureScript.CoreFn.Expr.NonRec a1 a2 a3
                   -> Language.PureScript.CoreFn.Expr.NonRec
                        @ b
                        (f4 a1)
                        a2
                        (Language.PureScript.CoreFn.Expr.$fFunctorBind_$cfmap1
                           @ a
                           @ b
                           f4
                           a3)
                   Language.PureScript.CoreFn.Expr.Rec a1
                   -> Language.PureScript.CoreFn.Expr.Rec
                        @ b
                        (GHC.Base.map
                           @ ((a, Language.PureScript.Names.Ident),
                              Language.PureScript.CoreFn.Expr.Expr a)
                           @ ((b, Language.PureScript.Names.Ident),
                              Language.PureScript.CoreFn.Expr.Expr b)
                           (\ (b3 :: ((a, Language.PureScript.Names.Ident),
                                      Language.PureScript.CoreFn.Expr.Expr a)) ->
                            case b3 of wild1 { (,) a2 a3 ->
                            (case a2 of wild2 { (,) a4 a5 -> (f4 a4, a5) },
                             Language.PureScript.CoreFn.Expr.$fFunctorBind_$cfmap1
                               @ a
                               @ b
                               f4
                               a3) })
                           a1) }) -}
22c7241ad0e882392beaf38a652acec4
  $fFunctorBind_$cfmap1 ::
    (a -> b)
    -> Language.PureScript.CoreFn.Expr.Expr a
    -> Language.PureScript.CoreFn.Expr.Expr b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U> -}
22c7241ad0e882392beaf38a652acec4
  $fFunctorCaseAlternative ::
    GHC.Base.Functor Language.PureScript.CoreFn.Expr.CaseAlternative
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.CoreFn.Expr.CaseAlternative
                  Language.PureScript.CoreFn.Expr.$fFunctorCaseAlternative_$cfmap
                  Language.PureScript.CoreFn.Expr.$fFunctorCaseAlternative_$c<$ -}
22c7241ad0e882392beaf38a652acec4
  $fFunctorCaseAlternative_$c<$ ::
    a
    -> Language.PureScript.CoreFn.Expr.CaseAlternative b
    -> Language.PureScript.CoreFn.Expr.CaseAlternative a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U(1*U,1*U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   (x :: a)
                   (eta :: Language.PureScript.CoreFn.Expr.CaseAlternative b) ->
                 Language.PureScript.CoreFn.Expr.$fFunctorCaseAlternative_$cfmap
                   @ b
                   @ a
                   (\ (ds :: b) -> x)
                   eta) -}
22c7241ad0e882392beaf38a652acec4
  $fFunctorCaseAlternative_$cfmap ::
    (a -> b)
    -> Language.PureScript.CoreFn.Expr.CaseAlternative a
    -> Language.PureScript.CoreFn.Expr.CaseAlternative b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U(1*U,1*U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   (w :: a -> b)
                   (w1 :: Language.PureScript.CoreFn.Expr.CaseAlternative a) ->
                 case w1 of ww { Language.PureScript.CoreFn.Expr.CaseAlternative ww1 ww2 ->
                 case Language.PureScript.CoreFn.Expr.$w$cfmap
                        @ a
                        @ b
                        w
                        ww1
                        ww2 of ww3 { (#,#) ww4 ww5 ->
                 Language.PureScript.CoreFn.Expr.CaseAlternative @ b ww4 ww5 } }) -}
22c7241ad0e882392beaf38a652acec4
  $fFunctorExpr ::
    GHC.Base.Functor Language.PureScript.CoreFn.Expr.Expr
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.CoreFn.Expr.Expr
                  Language.PureScript.CoreFn.Expr.$fFunctorBind_$cfmap1
                  Language.PureScript.CoreFn.Expr.$fFunctorBind_$c<$1 -}
22c7241ad0e882392beaf38a652acec4
  $fShowBind ::
    GHC.Show.Show a =>
    GHC.Show.Show (Language.PureScript.CoreFn.Expr.Bind a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Show.Show a).
                  @ (Language.PureScript.CoreFn.Expr.Bind a)
                  (Language.PureScript.CoreFn.Expr.$fShowBind_$cshowsPrec @ a v)
                  (Language.PureScript.CoreFn.Expr.$fShowBind_$cshow @ a v)
                  (Language.PureScript.CoreFn.Expr.$fShowBind_$cshowList @ a v) -}
cfbc25870dbf5214805903c85eb59fca
  $fShowBind1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
22c7241ad0e882392beaf38a652acec4
  $fShowBind_$cshow ::
    GHC.Show.Show a =>
    Language.PureScript.CoreFn.Expr.Bind a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U(C(C1(C(U))),A,A)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (x :: Language.PureScript.CoreFn.Expr.Bind a) ->
                 Language.PureScript.CoreFn.Expr.$fShowBind_$cshowsPrec
                   @ a
                   $dShow
                   Language.PureScript.CoreFn.Expr.$fShowBind1
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
22c7241ad0e882392beaf38a652acec4
  $fShowBind_$cshowList ::
    GHC.Show.Show a =>
    [Language.PureScript.CoreFn.Expr.Bind a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (ls :: [Language.PureScript.CoreFn.Expr.Bind a])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Language.PureScript.CoreFn.Expr.Bind a)
                   (Language.PureScript.CoreFn.Expr.$fShowBind_$cshowsPrec
                      @ a
                      $dShow
                      Language.PureScript.CoreFn.Expr.$fShowBind1)
                   ls
                   s) -}
22c7241ad0e882392beaf38a652acec4
  $fShowBind_$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Types.Int
    -> Language.PureScript.CoreFn.Expr.Bind a -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,U(C(C1(C(U))),A,A)><S(S),1*U(U)><S,1*U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: GHC.Show.Show a)
                   (w1 :: GHC.Types.Int)
                   (w2 :: Language.PureScript.CoreFn.Expr.Bind a) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 Language.PureScript.CoreFn.Expr.$w$cshowsPrec @ a w ww1 w2 }) -}
22c7241ad0e882392beaf38a652acec4
  $fShowCaseAlternative ::
    GHC.Show.Show a =>
    GHC.Show.Show (Language.PureScript.CoreFn.Expr.CaseAlternative a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Show.Show a).
                  @ (Language.PureScript.CoreFn.Expr.CaseAlternative a)
                  (Language.PureScript.CoreFn.Expr.$fShowCaseAlternative_$cshowsPrec
                     @ a
                     v)
                  (Language.PureScript.CoreFn.Expr.$fShowCaseAlternative_$cshow
                     @ a
                     v)
                  (Language.PureScript.CoreFn.Expr.$fShowCaseAlternative_$cshowList
                     @ a
                     v) -}
dac285f6f46005f85c52c422c7bb506c
  $fShowCaseAlternative1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("}"#) -}
f51783f27e132e809b60a88d4f5c52e0
  $fShowCaseAlternative2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("caseAlternativeResult = "#) -}
91cf667dc6d23ab396e8b717be805bbc
  $fShowCaseAlternative3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("caseAlternativeBinders = "#) -}
4235d209ff1e0abc7c60b79bf5e1f0b0
  $fShowCaseAlternative4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("CaseAlternative {"#) -}
22c7241ad0e882392beaf38a652acec4
  $fShowCaseAlternative_$cshow ::
    GHC.Show.Show a =>
    Language.PureScript.CoreFn.Expr.CaseAlternative a
    -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U(C(C1(C(U))),A,A)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (x :: Language.PureScript.CoreFn.Expr.CaseAlternative a) ->
                 Language.PureScript.CoreFn.Expr.$fShowCaseAlternative_$cshowsPrec
                   @ a
                   $dShow
                   Language.PureScript.CoreFn.Expr.$fShowBind1
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
22c7241ad0e882392beaf38a652acec4
  $fShowCaseAlternative_$cshowList ::
    GHC.Show.Show a =>
    [Language.PureScript.CoreFn.Expr.CaseAlternative a]
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (ls :: [Language.PureScript.CoreFn.Expr.CaseAlternative a])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Language.PureScript.CoreFn.Expr.CaseAlternative a)
                   (Language.PureScript.CoreFn.Expr.$fShowCaseAlternative_$cshowsPrec
                      @ a
                      $dShow
                      Language.PureScript.CoreFn.Expr.$fShowBind1)
                   ls
                   s) -}
22c7241ad0e882392beaf38a652acec4
  $fShowCaseAlternative_$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Types.Int
    -> Language.PureScript.CoreFn.Expr.CaseAlternative a
    -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)>,
     Unfolding: (\ @ a ($dShow :: GHC.Show.Show a) ->
                 let {
                   lvl10 :: Language.PureScript.CoreFn.Binders.Binder a
                            -> GHC.Show.ShowS
                   = Language.PureScript.CoreFn.Binders.$fShowBinder_$cshowsPrec
                       @ a
                       $dShow
                       Language.PureScript.CoreFn.Binders.$fShowBinder1
                 } in
                 let {
                   $dShow1 :: GHC.Show.Show (Language.PureScript.CoreFn.Expr.Expr a)
                   = Language.PureScript.CoreFn.Expr.$fShowExpr @ a $dShow
                 } in
                 let {
                   $dShow2 :: GHC.Show.Show
                                (Language.PureScript.CoreFn.Expr.Guard a,
                                 Language.PureScript.CoreFn.Expr.Expr a)
                   = GHC.Show.$fShow(,)
                       @ (Language.PureScript.CoreFn.Expr.Expr a)
                       @ (Language.PureScript.CoreFn.Expr.Expr a)
                       $dShow1
                       $dShow1
                 } in
                 let {
                   $dShow3 :: GHC.Show.Show
                                [(Language.PureScript.CoreFn.Expr.Guard a,
                                  Language.PureScript.CoreFn.Expr.Expr a)]
                   = GHC.Show.$fShow[]
                       @ (Language.PureScript.CoreFn.Expr.Guard a,
                          Language.PureScript.CoreFn.Expr.Expr a)
                       $dShow2
                 } in
                 \ (a1 :: GHC.Types.Int)
                   (ds :: Language.PureScript.CoreFn.Expr.CaseAlternative a) ->
                 case ds of wild { Language.PureScript.CoreFn.Expr.CaseAlternative b1 b2 ->
                 case a1 of wild1 { GHC.Types.I# x ->
                 let {
                   f4 :: GHC.Base.String -> GHC.Base.String
                   = Data.Either.$w$cshowsPrec
                       @ [(Language.PureScript.CoreFn.Expr.Guard a,
                           Language.PureScript.CoreFn.Expr.Expr a)]
                       @ (Language.PureScript.CoreFn.Expr.Expr a)
                       $dShow3
                       $dShow1
                       0#
                       b2
                 } in
                 case GHC.Prim.>=# x 11# of lwild {
                   DEFAULT
                   -> \ (x1 :: GHC.Base.String) ->
                      GHC.CString.unpackAppendCString#
                        Language.PureScript.CoreFn.Expr.$fShowCaseAlternative4
                        (GHC.CString.unpackAppendCString#
                           Language.PureScript.CoreFn.Expr.$fShowCaseAlternative3
                           (GHC.Show.showList__
                              @ (Language.PureScript.CoreFn.Binders.Binder a)
                              lvl10
                              b1
                              (GHC.Base.++
                                 @ GHC.Types.Char
                                 GHC.Show.showCommaSpace1
                                 (GHC.CString.unpackAppendCString#
                                    Language.PureScript.CoreFn.Expr.$fShowCaseAlternative2
                                    (f4
                                       (GHC.CString.unpackAppendCString#
                                          Language.PureScript.CoreFn.Expr.$fShowCaseAlternative1
                                          x1))))))
                   1#
                   -> \ (x1 :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.CString.unpackAppendCString#
                           Language.PureScript.CoreFn.Expr.$fShowCaseAlternative4
                           (GHC.CString.unpackAppendCString#
                              Language.PureScript.CoreFn.Expr.$fShowCaseAlternative3
                              (GHC.Show.showList__
                                 @ (Language.PureScript.CoreFn.Binders.Binder a)
                                 lvl10
                                 b1
                                 (GHC.Base.++
                                    @ GHC.Types.Char
                                    GHC.Show.showCommaSpace1
                                    (GHC.CString.unpackAppendCString#
                                       Language.PureScript.CoreFn.Expr.$fShowCaseAlternative2
                                       (f4
                                          (GHC.CString.unpackAppendCString#
                                             Language.PureScript.CoreFn.Expr.$fShowCaseAlternative1
                                             (GHC.Types.:
                                                @ GHC.Types.Char
                                                GHC.Show.$fShow(,)2
                                                x1)))))))) } } }) -}
22c7241ad0e882392beaf38a652acec4
  $fShowExpr ::
    GHC.Show.Show a =>
    GHC.Show.Show (Language.PureScript.CoreFn.Expr.Expr a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Show.Show a).
                  @ (Language.PureScript.CoreFn.Expr.Expr a)
                  (Language.PureScript.CoreFn.Expr.$fShowExpr_$cshowsPrec @ a v)
                  (Language.PureScript.CoreFn.Expr.$fShowExpr_$cshow @ a v)
                  (Language.PureScript.CoreFn.Expr.$fShowExpr_$cshowList @ a v) -}
22c7241ad0e882392beaf38a652acec4
  $fShowExpr_$cshow ::
    GHC.Show.Show a =>
    Language.PureScript.CoreFn.Expr.Expr a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U(C(C1(C(U))),A,A)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (x :: Language.PureScript.CoreFn.Expr.Expr a) ->
                 Language.PureScript.CoreFn.Expr.$fShowExpr_$cshowsPrec
                   @ a
                   $dShow
                   Language.PureScript.CoreFn.Expr.$fShowBind1
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
22c7241ad0e882392beaf38a652acec4
  $fShowExpr_$cshowList ::
    GHC.Show.Show a =>
    [Language.PureScript.CoreFn.Expr.Expr a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (ls :: [Language.PureScript.CoreFn.Expr.Expr a])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Language.PureScript.CoreFn.Expr.Expr a)
                   (Language.PureScript.CoreFn.Expr.$fShowExpr_$cshowsPrec
                      @ a
                      $dShow
                      Language.PureScript.CoreFn.Expr.$fShowBind1)
                   ls
                   s) -}
22c7241ad0e882392beaf38a652acec4
  $fShowExpr_$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Types.Int
    -> Language.PureScript.CoreFn.Expr.Expr a -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)> -}
7fe72b1e9116bd5228b23a5427aca2c4
  $tc'Abs :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14386548461615580736##
                   18010810605246619102##
                   Language.PureScript.CoreFn.Expr.$trModule
                   Language.PureScript.CoreFn.Expr.$tc'Abs2
                   1#
                   Language.PureScript.CoreFn.Expr.$tc'Abs1) -}
a17b7661fa2152bbe5a97d250bfb2dc7
  $tc'Abs1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
607994c2be56fca8b07f71f13f602501
  $tc'Abs2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.CoreFn.Expr.$tc'Abs3) -}
cc01f7d5ada16518c29a9d0faebde85c
  $tc'Abs3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Abs"#) -}
96f5dd7107727cf44ddd713796b945b4
  $tc'Accessor :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14361466958838340165##
                   4037819521427626218##
                   Language.PureScript.CoreFn.Expr.$trModule
                   Language.PureScript.CoreFn.Expr.$tc'Accessor2
                   1#
                   Language.PureScript.CoreFn.Expr.$tc'Accessor1) -}
0bc733e37833fdadab560e1a63ae43f7
  $tc'Accessor1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
2797ad6c98c2ef674b3c5470a29be6b3
  $tc'Accessor2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.CoreFn.Expr.$tc'Accessor3) -}
0982f05e505697a2e7c08c1aa70596da
  $tc'Accessor3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Accessor"#) -}
8dd0264837fc1fad243d0cb2883f4aea
  $tc'App :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5475340114323784399##
                   12455444927217491406##
                   Language.PureScript.CoreFn.Expr.$trModule
                   Language.PureScript.CoreFn.Expr.$tc'App2
                   1#
                   Language.PureScript.CoreFn.Expr.$tc'App1) -}
558163ead038903f7441be247acc9c7b
  $tc'App1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
07577bfd1bef436ed1feba1749a59e70
  $tc'App2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.CoreFn.Expr.$tc'App3) -}
81645e617cbc588f0b208d5f1574b8da
  $tc'App3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'App"#) -}
e48013f69f9a4bf7aa93af7ba44dbfc9
  $tc'Case :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9350876216211334139##
                   10037386770369963311##
                   Language.PureScript.CoreFn.Expr.$trModule
                   Language.PureScript.CoreFn.Expr.$tc'Case2
                   1#
                   Language.PureScript.CoreFn.Expr.$tc'Case1) -}
765a5e53a83ca3eaa85f32c69e2b0871
  $tc'Case1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
304a09679e97b4604e38f9fd091b67d6
  $tc'Case2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.CoreFn.Expr.$tc'Case3) -}
e309a97a4de8fbdc46e7a5ed577d681b
  $tc'Case3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Case"#) -}
30ad79423cda72ab3e4285d5007c407f
  $tc'CaseAlternative :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17614209456113627293##
                   7754204800500315414##
                   Language.PureScript.CoreFn.Expr.$trModule
                   Language.PureScript.CoreFn.Expr.$tc'CaseAlternative2
                   1#
                   Language.PureScript.CoreFn.Expr.$tc'CaseAlternative1) -}
f2e4ac91e7c0605611565ef8098dcb1f
  $tc'CaseAlternative1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
a74314f9fc5fa6559d03780a8f4dc55e
  $tc'CaseAlternative2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.CoreFn.Expr.$tc'CaseAlternative3) -}
f0a48b682661504362157afcdd875fc6
  $tc'CaseAlternative3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'CaseAlternative"#) -}
4bf7eb7626838ed68ebed6fa40c2a73d
  $tc'Constructor :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17901621752436190917##
                   9256498579654801677##
                   Language.PureScript.CoreFn.Expr.$trModule
                   Language.PureScript.CoreFn.Expr.$tc'Constructor2
                   1#
                   Language.PureScript.CoreFn.Expr.$tc'Constructor1) -}
52f22902ed06447f050433a692db8c2c
  $tc'Constructor1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
b65fbad56cccacaabcead6481d7e1200
  $tc'Constructor2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.CoreFn.Expr.$tc'Constructor3) -}
0815a04e32f3a8d799f878fe410f51b3
  $tc'Constructor3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Constructor"#) -}
a874622aea89835b607adbbef0360306
  $tc'Let :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3604285433463747047##
                   12477310559020957458##
                   Language.PureScript.CoreFn.Expr.$trModule
                   Language.PureScript.CoreFn.Expr.$tc'Let2
                   1#
                   Language.PureScript.CoreFn.Expr.$tc'Let1) -}
c1347f9465dc6753f55462db016638c5
  $tc'Let1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
d01085ce4493fbb967ca8be5a1826aac
  $tc'Let2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.CoreFn.Expr.$tc'Let3) -}
781917ee6bc4a0e5f0efb70f74799f4a
  $tc'Let3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Let"#) -}
d422a827102fae2d62d5ff620f32ed08
  $tc'Literal :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3746857551039107196##
                   9233379815368705##
                   Language.PureScript.CoreFn.Expr.$trModule
                   Language.PureScript.CoreFn.Expr.$tc'Literal2
                   1#
                   Language.PureScript.CoreFn.Expr.$tc'Literal1) -}
e25807b627c109d7d94201b93a8bfd80
  $tc'Literal1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
472978a28d7108793d6482d60efb0fc5
  $tc'Literal2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.CoreFn.Expr.$tc'Literal3) -}
ca715e6b98f33cdd5902bd18a13ed3f5
  $tc'Literal3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Literal"#) -}
b88fdd700d7f726e421738fe3b409df2
  $tc'NonRec :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1926723017442110352##
                   15734190738891646274##
                   Language.PureScript.CoreFn.Expr.$trModule
                   Language.PureScript.CoreFn.Expr.$tc'NonRec2
                   1#
                   Language.PureScript.CoreFn.Expr.$tc'NonRec1) -}
4c734d10e0498f3609cb69f94dbe445c
  $tc'NonRec1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
bdc963702905067ad054d8692606e3ec
  $tc'NonRec2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.CoreFn.Expr.$tc'NonRec3) -}
3fff8fd732dc15ff4e6db6b344a0b25b
  $tc'NonRec3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'NonRec"#) -}
e65946a89c64b925eaf364fe78e6a81e
  $tc'ObjectUpdate :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5499284258424798367##
                   4623071828016100988##
                   Language.PureScript.CoreFn.Expr.$trModule
                   Language.PureScript.CoreFn.Expr.$tc'ObjectUpdate2
                   1#
                   Language.PureScript.CoreFn.Expr.$tc'ObjectUpdate1) -}
60d569d0b6b411a8eb44141addf6fa43
  $tc'ObjectUpdate1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
57796c3e95eb2dc69e19761aa7754507
  $tc'ObjectUpdate2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.CoreFn.Expr.$tc'ObjectUpdate3) -}
d5ffa4e4669da6cce320b5b64c7841b3
  $tc'ObjectUpdate3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ObjectUpdate"#) -}
36bbdf57d096a07926c2ddf0de12040d
  $tc'Rec :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13830683938987717183##
                   7769803704294064602##
                   Language.PureScript.CoreFn.Expr.$trModule
                   Language.PureScript.CoreFn.Expr.$tc'Rec2
                   1#
                   Language.PureScript.CoreFn.Expr.$tc'Rec1) -}
5502b3da839099ab60be7d17f0357126
  $tc'Rec1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
9d0aba6f30817a8ed0945cc9e92a8cfa
  $tc'Rec2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.CoreFn.Expr.$tc'Rec3) -}
75f71fabe6e8674ff05af46a874c422c
  $tc'Rec3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Rec"#) -}
c1996ff8049c78848bb273b2ef65d38c
  $tc'Var :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11772828253921702129##
                   5921480838697135029##
                   Language.PureScript.CoreFn.Expr.$trModule
                   Language.PureScript.CoreFn.Expr.$tc'Var2
                   1#
                   Language.PureScript.CoreFn.Expr.$tc'Var1) -}
545fb1d2822d1e39e05cf068e9426ea8
  $tc'Var1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
794cc9eed78a03ad16bd48dc47af0d7b
  $tc'Var2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.CoreFn.Expr.$tc'Var3) -}
e8ddb4413a78b23b49280f0224265f0a
  $tc'Var3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Var"#) -}
4d58670c703d2adfc71e17ca5a15e8ec
  $tcBind :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14273358484686784066##
                   2806131929645865021##
                   Language.PureScript.CoreFn.Expr.$trModule
                   Language.PureScript.CoreFn.Expr.$tcBind1
                   0#
                   GHC.Types.krep$*Arr*) -}
30f2f6a20e86317f1c593e0f2b7df16f
  $tcBind1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.CoreFn.Expr.$tcBind2) -}
a7e64b7d330d125d430a62a0ab8eb07c
  $tcBind2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Bind"#) -}
31295aafb85a1964629bd8788ed8b3c1
  $tcCaseAlternative :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12199565174465578205##
                   12609495594658510227##
                   Language.PureScript.CoreFn.Expr.$trModule
                   Language.PureScript.CoreFn.Expr.$tcCaseAlternative1
                   0#
                   GHC.Types.krep$*Arr*) -}
fa2681335fc19ee226a03dd10ef78d79
  $tcCaseAlternative1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.CoreFn.Expr.$tcCaseAlternative2) -}
3352a342a1b1cb7a2ff9f299ee9cd7d7
  $tcCaseAlternative2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("CaseAlternative"#) -}
1b1569aa2c216228c146f00cf7f6b1d5
  $tcExpr :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14581387446049953954##
                   16061425603839160144##
                   Language.PureScript.CoreFn.Expr.$trModule
                   Language.PureScript.CoreFn.Expr.$tcExpr1
                   0#
                   GHC.Types.krep$*Arr*) -}
d08f0bb867ec3c6a99957408abb16375
  $tcExpr1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.CoreFn.Expr.$tcExpr2) -}
2b464dec14773bca1aee13cf333bd6cc
  $tcExpr2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Expr"#) -}
19af40e67f3b8ed23766c18bf0f884ba
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Language.PureScript.CoreFn.Expr.$trModule3
                   Language.PureScript.CoreFn.Expr.$trModule1) -}
83279317aafe9f9d6c02679e540d8167
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.CoreFn.Expr.$trModule2) -}
8cc239280d15f455d2d6da2abaab847e
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Language.PureScript.CoreFn.Expr"#) -}
be21e22192ad77be68204442bc384af0
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.CoreFn.Expr.$trModule4) -}
61ddc4fe9668616a979aec7619eb9326
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"#) -}
22c7241ad0e882392beaf38a652acec4
  $w$cfmap ::
    (a -> b)
    -> [Language.PureScript.CoreFn.Binders.Binder a]
    -> Data.Either.Either
         [(Language.PureScript.CoreFn.Expr.Guard a,
           Language.PureScript.CoreFn.Expr.Expr a)]
         (Language.PureScript.CoreFn.Expr.Expr a)
    -> (# [Language.PureScript.CoreFn.Binders.Binder b],
          Data.Either.Either
            [(Language.PureScript.CoreFn.Expr.Guard b,
              Language.PureScript.CoreFn.Expr.Expr b)]
            (Language.PureScript.CoreFn.Expr.Expr b) #)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,C(U)><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   (w :: a -> b)
                   (ww :: [Language.PureScript.CoreFn.Binders.Binder a])
                   (ww1 :: Data.Either.Either
                             [(Language.PureScript.CoreFn.Expr.Guard a,
                               Language.PureScript.CoreFn.Expr.Expr a)]
                             (Language.PureScript.CoreFn.Expr.Expr a)) ->
                 (# GHC.Base.map
                      @ (Language.PureScript.CoreFn.Binders.Binder a)
                      @ (Language.PureScript.CoreFn.Binders.Binder b)
                      (Language.PureScript.CoreFn.Binders.$fFunctorBinder_$cfmap
                         @ a
                         @ b
                         w)
                      ww,
                    case ww1 of wild {
                      Data.Either.Left x
                      -> Data.Either.Left
                           @ [(Language.PureScript.CoreFn.Expr.Guard b,
                               Language.PureScript.CoreFn.Expr.Expr b)]
                           @ (Language.PureScript.CoreFn.Expr.Expr b)
                           (GHC.Base.map
                              @ (Language.PureScript.CoreFn.Expr.Guard a,
                                 Language.PureScript.CoreFn.Expr.Expr a)
                              @ (Language.PureScript.CoreFn.Expr.Guard b,
                                 Language.PureScript.CoreFn.Expr.Expr b)
                              (\ (ds :: (Language.PureScript.CoreFn.Expr.Expr a,
                                         Language.PureScript.CoreFn.Expr.Expr a)) ->
                               (case ds of wild1 { (,) x1 y ->
                                Language.PureScript.CoreFn.Expr.$fFunctorBind_$cfmap1
                                  @ a
                                  @ b
                                  w
                                  x1 },
                                case ds of wild1 { (,) x1 y ->
                                Language.PureScript.CoreFn.Expr.$fFunctorBind_$cfmap1
                                  @ a
                                  @ b
                                  w
                                  y }))
                              x)
                      Data.Either.Right y
                      -> Data.Either.Right
                           @ [(Language.PureScript.CoreFn.Expr.Guard b,
                               Language.PureScript.CoreFn.Expr.Expr b)]
                           @ (Language.PureScript.CoreFn.Expr.Expr b)
                           (Language.PureScript.CoreFn.Expr.$fFunctorBind_$cfmap1
                              @ a
                              @ b
                              w
                              y) } #)) -}
22c7241ad0e882392beaf38a652acec4
  $w$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Prim.Int#
    -> Language.PureScript.CoreFn.Expr.Bind a -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C(U))),A,A)><S,U><S,1*U>,
     Inline: [0] -}
22c7241ad0e882392beaf38a652acec4
  data Bind a
    = NonRec a
             Language.PureScript.Names.Ident
             (Language.PureScript.CoreFn.Expr.Expr a)
    | Rec [((a, Language.PureScript.Names.Ident),
            Language.PureScript.CoreFn.Expr.Expr a)]
22c7241ad0e882392beaf38a652acec4
  data CaseAlternative a
    = CaseAlternative {caseAlternativeBinders :: [Language.PureScript.CoreFn.Binders.Binder
                                                    a],
                       caseAlternativeResult :: Data.Either.Either
                                                  [(Language.PureScript.CoreFn.Expr.Guard a,
                                                    Language.PureScript.CoreFn.Expr.Expr a)]
                                                  (Language.PureScript.CoreFn.Expr.Expr a)}
22c7241ad0e882392beaf38a652acec4
  data Expr a
    = Literal a
              (Language.PureScript.AST.Literals.Literal
                 (Language.PureScript.CoreFn.Expr.Expr a))
    | Constructor a
                  (Language.PureScript.Names.ProperName
                     'Language.PureScript.Names.TypeName)
                  (Language.PureScript.Names.ProperName
                     'Language.PureScript.Names.ConstructorName)
                  [Language.PureScript.Names.Ident]
    | Accessor a
               Language.PureScript.PSString.PSString
               (Language.PureScript.CoreFn.Expr.Expr a)
    | ObjectUpdate a
                   (Language.PureScript.CoreFn.Expr.Expr a)
                   [(Language.PureScript.PSString.PSString,
                     Language.PureScript.CoreFn.Expr.Expr a)]
    | Abs a
          Language.PureScript.Names.Ident
          (Language.PureScript.CoreFn.Expr.Expr a)
    | App a
          (Language.PureScript.CoreFn.Expr.Expr a)
          (Language.PureScript.CoreFn.Expr.Expr a)
    | Var a
          (Language.PureScript.Names.Qualified
             Language.PureScript.Names.Ident)
    | Case a
           [Language.PureScript.CoreFn.Expr.Expr a]
           [Language.PureScript.CoreFn.Expr.CaseAlternative a]
    | Let a
          [Language.PureScript.CoreFn.Expr.Bind a]
          (Language.PureScript.CoreFn.Expr.Expr a)
22c7241ad0e882392beaf38a652acec4
  type Guard a = Language.PureScript.CoreFn.Expr.Expr a
22c7241ad0e882392beaf38a652acec4
  caseAlternativeBinders ::
    Language.PureScript.CoreFn.Expr.CaseAlternative a
    -> [Language.PureScript.CoreFn.Binders.Binder a]
  RecSel Left Language.PureScript.CoreFn.Expr.CaseAlternative
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: Language.PureScript.CoreFn.Expr.CaseAlternative a) ->
                 case ds of wild { Language.PureScript.CoreFn.Expr.CaseAlternative ds1 ds2 ->
                 ds1 }) -}
22c7241ad0e882392beaf38a652acec4
  caseAlternativeResult ::
    Language.PureScript.CoreFn.Expr.CaseAlternative a
    -> Data.Either.Either
         [(Language.PureScript.CoreFn.Expr.Guard a,
           Language.PureScript.CoreFn.Expr.Expr a)]
         (Language.PureScript.CoreFn.Expr.Expr a)
  RecSel Left Language.PureScript.CoreFn.Expr.CaseAlternative
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: Language.PureScript.CoreFn.Expr.CaseAlternative a) ->
                 case ds of wild { Language.PureScript.CoreFn.Expr.CaseAlternative ds1 ds2 ->
                 ds2 }) -}
5a39e1c70aaf47aca244f2239015eaa3
  extractAnn :: Language.PureScript.CoreFn.Expr.Expr a -> a
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ @ a (ds :: Language.PureScript.CoreFn.Expr.Expr a) ->
                 case ds of wild {
                   Language.PureScript.CoreFn.Expr.Literal a1 ds1 -> a1
                   Language.PureScript.CoreFn.Expr.Constructor a1 ds1 ds2 ds3 -> a1
                   Language.PureScript.CoreFn.Expr.Accessor a1 ds1 ds2 -> a1
                   Language.PureScript.CoreFn.Expr.ObjectUpdate a1 ds1 ds2 -> a1
                   Language.PureScript.CoreFn.Expr.Abs a1 ds1 ds2 -> a1
                   Language.PureScript.CoreFn.Expr.App a1 ds1 ds2 -> a1
                   Language.PureScript.CoreFn.Expr.Var a1 ds1 -> a1
                   Language.PureScript.CoreFn.Expr.Case a1 ds1 ds2 -> a1
                   Language.PureScript.CoreFn.Expr.Let a1 ds1 ds2 -> a1 }) -}
69a24888b99d3ad5023757519aa2036a
  modifyAnn ::
    (a -> a)
    -> Language.PureScript.CoreFn.Expr.Expr a
    -> Language.PureScript.CoreFn.Expr.Expr a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><S,1*U>,
     Unfolding: (\ @ a
                   (f4 :: a -> a)
                   (ds :: Language.PureScript.CoreFn.Expr.Expr a) ->
                 case ds of wild {
                   Language.PureScript.CoreFn.Expr.Literal a1 b
                   -> Language.PureScript.CoreFn.Expr.Literal @ a (f4 a1) b
                   Language.PureScript.CoreFn.Expr.Constructor a1 b c d
                   -> Language.PureScript.CoreFn.Expr.Constructor @ a (f4 a1) b c d
                   Language.PureScript.CoreFn.Expr.Accessor a1 b c
                   -> Language.PureScript.CoreFn.Expr.Accessor @ a (f4 a1) b c
                   Language.PureScript.CoreFn.Expr.ObjectUpdate a1 b c
                   -> Language.PureScript.CoreFn.Expr.ObjectUpdate @ a (f4 a1) b c
                   Language.PureScript.CoreFn.Expr.Abs a1 b c
                   -> Language.PureScript.CoreFn.Expr.Abs @ a (f4 a1) b c
                   Language.PureScript.CoreFn.Expr.App a1 b c
                   -> Language.PureScript.CoreFn.Expr.App @ a (f4 a1) b c
                   Language.PureScript.CoreFn.Expr.Var a1 b
                   -> Language.PureScript.CoreFn.Expr.Var @ a (f4 a1) b
                   Language.PureScript.CoreFn.Expr.Case a1 b c
                   -> Language.PureScript.CoreFn.Expr.Case @ a (f4 a1) b c
                   Language.PureScript.CoreFn.Expr.Let a1 b c
                   -> Language.PureScript.CoreFn.Expr.Let @ a (f4 a1) b c }) -}
instance GHC.Base.Functor [Language.PureScript.CoreFn.Expr.Bind]
  = Language.PureScript.CoreFn.Expr.$fFunctorBind
instance GHC.Base.Functor [Language.PureScript.CoreFn.Expr.CaseAlternative]
  = Language.PureScript.CoreFn.Expr.$fFunctorCaseAlternative
instance GHC.Base.Functor [Language.PureScript.CoreFn.Expr.Expr]
  = Language.PureScript.CoreFn.Expr.$fFunctorExpr
instance GHC.Show.Show [Language.PureScript.CoreFn.Expr.Bind]
  = Language.PureScript.CoreFn.Expr.$fShowBind
instance GHC.Show.Show [Language.PureScript.CoreFn.Expr.CaseAlternative]
  = Language.PureScript.CoreFn.Expr.$fShowCaseAlternative
instance GHC.Show.Show [Language.PureScript.CoreFn.Expr.Expr]
  = Language.PureScript.CoreFn.Expr.$fShowExpr
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

