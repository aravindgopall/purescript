
==================== FINAL INTERFACE ====================
2019-01-24 14:15:44.206201 UTC

interface purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Sugar.Operators.Types 8043
  interface hash: 7cccdf857b033f8559057858d5addf2a
  ABI hash: a2a4b60083e37658c6f1cf6c05a5af2b
  export-list hash: 64dcfbfd715be2ce244c86e2678b5514
  orphan hash: 2496c2473aff1a4e2f80412a1b3222d9
  flag hash: 4d9d5651992e23893b931ac76ed000be
  opt_hash: 2c98c95d41c045ae9c2fb565ec8aabc6
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Language.PureScript.Sugar.Operators.Types.matchTypeOperators
module dependencies: Control.Monad.Supply
                     Control.Monad.Supply.Class Language.PureScript.AST
                     Language.PureScript.AST.Binders
                     Language.PureScript.AST.Declarations
                     Language.PureScript.AST.Exported Language.PureScript.AST.Literals
                     Language.PureScript.AST.Operators Language.PureScript.AST.SourcePos
                     Language.PureScript.AST.Traversals Language.PureScript.Bundle
                     Language.PureScript.Comments Language.PureScript.Constants
                     Language.PureScript.Crash Language.PureScript.Environment
                     Language.PureScript.Errors Language.PureScript.Kinds
                     Language.PureScript.Label Language.PureScript.Names
                     Language.PureScript.PSString Language.PureScript.Parser.Lexer
                     Language.PureScript.Parser.State Language.PureScript.Pretty
                     Language.PureScript.Pretty.Common Language.PureScript.Pretty.Kinds
                     Language.PureScript.Pretty.Types Language.PureScript.Pretty.Values
                     Language.PureScript.Publish.BoxesHelpers
                     Language.PureScript.Sugar.Operators.Common
                     Language.PureScript.Traversals
                     Language.PureScript.TypeClassDictionaries Language.PureScript.Types
                     Paths_purescript
package dependencies: aeson-1.3.1.1 ansi-terminal-0.8.0.4
                      array-0.5.2.0 async-2.2.1 attoparsec-0.13.2.2 base-4.11.1.0
                      base-compat-0.10.4 binary-0.8.5.1 blaze-builder-0.4.1.0 boxes-0.1.5
                      bytestring-0.10.8.2 colour-2.3.4 containers-0.5.11.0
                      deepseq-1.4.3.0 dlist-0.8.0.4 filepath-1.4.2 ghc-boot-th-8.4.3
                      ghc-prim-0.5.2.0 hashable-1.2.7.0 integer-gmp-1.0.2.0
                      integer-logarithms-1.0.2.1 language-javascript-0.6.0.11
                      microlens-0.4.9.1 microlens-ghc-0.4.9 microlens-mtl-0.1.11.1
                      microlens-platform-0.3.10 microlens-th-0.4.2.1 mtl-2.2.2
                      parsec-3.1.13.0 pattern-arrows-0.0.2 pretty-1.1.3.6
                      primitive-0.6.3.0 protolude-0.2.2 random-1.1 scientific-0.3.6.2
                      sourcemap-0.1.6 split-0.2.3.3 stm-2.4.5.0 syb-0.7 tagged-0.8.5
                      template-haskell-2.13.0.0 text-1.2.3.0 th-abstraction-0.2.8.0
                      time-1.8.0.2 time-locale-compat-0.1.1.4 transformers-0.5.5.0
                      unordered-containers-0.2.9.0 utf8-string-1.0.1.1 uuid-types-1.0.3
                      vector-0.12.0.1
orphans: syb-0.7:Data.Generics.Instances colour-2.3.4:Data.Colour
         stm-2.4.5.0:Control.Monad.STM
         attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         microlens-platform-0.3.10:Lens.Micro.Platform
         microlens-ghc-0.4.9:Lens.Micro.GHC
         hashable-1.2.7.0:Data.Hashable.Generic
         vector-0.12.0.1:Data.Vector.Unboxed
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.5.0:Control.Monad.Trans.Error
         text-1.2.3.0:Data.Text.Lazy text-1.2.3.0:Data.Text
         binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: aeson-1.3.1.1:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.Graph
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         dlist-0.8.0.4:Data.DList ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         microlens-0.4.9.1:Lens.Micro.Internal
                         microlens-ghc-0.4.9:Lens.Micro.GHC
                         microlens-mtl-0.1.11.1:Lens.Micro.Mtl.Internal
                         microlens-platform-0.3.10:Lens.Micro.Platform
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.Declarations
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.Operators
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.SourcePos
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Comments
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Environment
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Kinds
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Label
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Names
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.PSString
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.TypeClassDictionaries
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Types
                         tagged-0.8.5:Data.Tagged
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
                         th-abstraction-0.2.8.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-compat-0.10.4:Prelude.Compat bb6796186ed35a1d09dc34362a3fc27e
import  -/  mtl-2.2.2:Control.Monad.Error.Class df146c18e27154b8df4c8637c59fd61b
import  -/  mtl-2.2.2:Control.Monad.Except a6fe75d3c5548ea9e926864b8cbfe1ee
import  -/  Language.PureScript.AST e89b59f8e201961eafd3ff905a683659
  exports: be73d3bb7d4ebe5df082453f6d572075
import  -/  Language.PureScript.AST.Operators 615a873c5f62908f354b9d4840cbeb63
  Associativity 228a0ef1b3774b11d1a92fae92fb43a0
import  -/  Language.PureScript.AST.SourcePos 63acacac5b7be73d04e5be0047a9a89a
  SourceSpan 1e0cf2bd3ea18f97a2ff152297f09219
import  -/  Language.PureScript.Errors 3c1ad933587510f8b20a8c9ec2e86ce9
  exports: 8e61484c4664eceb943d9fc4820c721b
  MultipleErrors e1ef6a17348ccfe3ef65185d3c5f9026
import  -/  Language.PureScript.Names 00f694509122478d97b327fbbccae327
  exports: ad7ae34f85124c68e8ba1c90fb2e732f
  OpName 1de386ff6f2b8aed453243e73483f454
  OpName 9af301165f72160425c5e0dde6525338
  Qualified b6e1bc9e7244a41d3c6149c9b5c2d6d8
  Qualified 1b2ddf0c04464d2fa2588925f10c1966
  TypeOpName db73fc39fef75f034a0b4a8074947dd9
import  -/  Language.PureScript.Sugar.Operators.Common e88c8e400a261924d9af6cf01505736c
  exports: 4b08e646ed124a30b98475a4e3fdf27e
  matchOperators 0ed92771035f7cf97c3d107845e42b2f
import  -/  Language.PureScript.Types 80a51f62cb3e6c71f024289b88f07b7f
  exports: 229bb7528146da886cffbefad5822e19
  BinaryNoParensType e0f6df16f0ffaf49053e71d305a7063a
  SourceType 0ac818517c14fedd280ef5885ae0cdc3
  TypeOp c293e95b09cf540c33c1d0b1480f5f80
  srcBinaryNoParensType b2631a0d19be39174b0def8fd6ebeab1
  srcTypeOp 9e7462b7a991eb34096ca69a2979fb7d
dbf0721a931539d8e10e9d9987cbc3c8
  $s$fShow(,) ::
    GHC.Show.Show
      (Language.PureScript.AST.SourcePos.SourceSpan,
       [Language.PureScript.Comments.Comment])
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.AST.SourcePos.SourceSpan,
                     [Language.PureScript.Comments.Comment])
                  (GHC.Show.$fShow(,)_$cshowsPrec
                     @ Language.PureScript.AST.SourcePos.SourceSpan
                     @ [Language.PureScript.Comments.Comment]
                     Language.PureScript.AST.SourcePos.$fShowSourceSpan
                     Language.PureScript.Sugar.Operators.Types.$s$fShow(,)_$s$fShow[])
                  (\ (x :: (Language.PureScript.AST.SourcePos.SourceSpan,
                            [Language.PureScript.Comments.Comment])) ->
                   GHC.Show.$fShow(,)_$cshowsPrec
                     @ Language.PureScript.AST.SourcePos.SourceSpan
                     @ [Language.PureScript.Comments.Comment]
                     Language.PureScript.AST.SourcePos.$fShowSourceSpan
                     Language.PureScript.Sugar.Operators.Types.$s$fShow(,)_$s$fShow[]
                     GHC.Show.$fShow(,)1
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [(Language.PureScript.AST.SourcePos.SourceSpan,
                              [Language.PureScript.Comments.Comment])])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Language.PureScript.AST.SourcePos.SourceSpan,
                        [Language.PureScript.Comments.Comment])
                     (GHC.Show.$fShow(,)_$cshowsPrec
                        @ Language.PureScript.AST.SourcePos.SourceSpan
                        @ [Language.PureScript.Comments.Comment]
                        Language.PureScript.AST.SourcePos.$fShowSourceSpan
                        Language.PureScript.Sugar.Operators.Types.$s$fShow(,)_$s$fShow[]
                        GHC.Show.$fShow(,)1)
                     ls
                     s) -}
8fdf310fc5cba63e2b8237283977a884
  $s$fShow(,)_$s$fShow[] ::
    GHC.Show.Show [Language.PureScript.Comments.Comment]
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ [Language.PureScript.Comments.Comment]
                  (\ (ds :: GHC.Types.Int) ->
                   Language.PureScript.Comments.$fShowComment_$cshowList)
                  (\ (x :: [Language.PureScript.Comments.Comment]) ->
                   GHC.Show.showList__
                     @ Language.PureScript.Comments.Comment
                     Language.PureScript.Comments.$fShowComment1
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [[Language.PureScript.Comments.Comment]])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ [Language.PureScript.Comments.Comment]
                     Language.PureScript.Comments.$fShowComment_$cshowList
                     ls
                     s) -}
2f0f645440933a9b44d050090176d15e
  $s$fShowType ::
    GHC.Show.Show
      (Language.PureScript.Types.Type
         (Language.PureScript.AST.SourcePos.SourceSpan,
          [Language.PureScript.Comments.Comment]))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Types.Type
                       (Language.PureScript.AST.SourcePos.SourceSpan,
                        [Language.PureScript.Comments.Comment]))
                  (Language.PureScript.Types.$fShowType_$cshowsPrec
                     @ (Language.PureScript.AST.SourcePos.SourceSpan,
                        [Language.PureScript.Comments.Comment])
                     Language.PureScript.Sugar.Operators.Types.$s$fShow(,))
                  (\ (x :: Language.PureScript.Types.Type
                             (Language.PureScript.AST.SourcePos.SourceSpan,
                              [Language.PureScript.Comments.Comment])) ->
                   Language.PureScript.Types.$fShowType_$cshowsPrec
                     @ (Language.PureScript.AST.SourcePos.SourceSpan,
                        [Language.PureScript.Comments.Comment])
                     Language.PureScript.Sugar.Operators.Types.$s$fShow(,)
                     Language.PureScript.Types.$fFoldableConstraint4
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [Language.PureScript.Types.Type
                               (Language.PureScript.AST.SourcePos.SourceSpan,
                                [Language.PureScript.Comments.Comment])])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Language.PureScript.Types.Type
                          (Language.PureScript.AST.SourcePos.SourceSpan,
                           [Language.PureScript.Comments.Comment]))
                     (Language.PureScript.Types.$fShowType_$cshowsPrec
                        @ (Language.PureScript.AST.SourcePos.SourceSpan,
                           [Language.PureScript.Comments.Comment])
                        Language.PureScript.Sugar.Operators.Types.$s$fShow(,)
                        Language.PureScript.Types.$fFoldableConstraint4)
                     ls
                     s) -}
de8fc715661bef95f4dce41ec8594990
  $s$fShow[]_$cshow ::
    [Language.PureScript.Comments.Comment] -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: [Language.PureScript.Comments.Comment]) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Comments.Comment
                   Language.PureScript.Comments.$fShowComment1
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
1cd44cb12ff0e85ae2960a020c7b6098
  $s$fShow[]_$cshowList ::
    [[Language.PureScript.Comments.Comment]] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [[Language.PureScript.Comments.Comment]])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ [Language.PureScript.Comments.Comment]
                   Language.PureScript.Comments.$fShowComment_$cshowList
                   ls
                   s) -}
06ae9ff426003a735b89d3130fd4ebae
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Language.PureScript.Sugar.Operators.Types.$trModule3
                   Language.PureScript.Sugar.Operators.Types.$trModule1) -}
6d4636c827c96419d2d2217649d6433c
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Sugar.Operators.Types.$trModule2) -}
3c85706c2519d4f8d643a86f11a8d56c
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Language.PureScript.Sugar.Operators.Types"#) -}
494986926d0c32f81cabf02cbb266149
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Sugar.Operators.Types.$trModule4) -}
b09a0a4387a47ed26f8ec2c492dd238f
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"#) -}
183fc7ed253816e7967f9bfeb6718f14
  matchTypeOperators ::
    Control.Monad.Error.Class.MonadError
      Language.PureScript.Errors.MultipleErrors m =>
    Language.PureScript.AST.SourcePos.SourceSpan
    -> [[(Language.PureScript.Names.Qualified
            (Language.PureScript.Names.OpName
               'Language.PureScript.Names.TypeOpName),
          Language.PureScript.AST.Operators.Associativity)]]
    -> Language.PureScript.Types.SourceType
    -> m Language.PureScript.Types.SourceType
  {- Arity: 2,
     Strictness: <L,U(U(U(A,C(U),A,A,A,A),A,A,A,A),C(U),A)><L,U>,
     Unfolding: (\ @ m :: * -> *
                   ($dMonadError :: Control.Monad.Error.Class.MonadError
                                      Language.PureScript.Errors.MultipleErrors m)
                   (ss :: Language.PureScript.AST.SourcePos.SourceSpan) ->
                 Language.PureScript.Sugar.Operators.Common.matchOperators
                   @ m
                   @ Language.PureScript.Types.SourceType
                   @ 'Language.PureScript.Names.TypeOpName
                   Language.PureScript.Sugar.Operators.Types.$s$fShowType
                   $dMonadError
                   Language.PureScript.Sugar.Operators.Types.matchTypeOperators3
                   Language.PureScript.Sugar.Operators.Types.matchTypeOperators2
                   (\ (ds :: Language.PureScript.Types.Type
                               Language.PureScript.AST.SourcePos.SourceAnn) ->
                    case ds of wild {
                      DEFAULT
                      -> GHC.Base.Nothing
                           @ (Language.PureScript.AST.SourcePos.SourceSpan,
                              Language.PureScript.Names.Qualified
                                (Language.PureScript.Names.OpName
                                   'Language.PureScript.Names.TypeOpName))
                      Language.PureScript.Types.TypeOp ds1 q
                      -> case q of wild1 { Language.PureScript.Names.Qualified ds2 ds3 ->
                         GHC.Base.Just
                           @ (Language.PureScript.AST.SourcePos.SourceSpan,
                              Language.PureScript.Names.Qualified
                                (Language.PureScript.Names.OpName
                                   'Language.PureScript.Names.TypeOpName))
                           (ss, wild1) } })
                   Language.PureScript.Sugar.Operators.Types.matchTypeOperators1
                   (GHC.Base.id
                      @ (Text.Parsec.Expr.OperatorTable
                           (Language.PureScript.Sugar.Operators.Common.Chain
                              Language.PureScript.Types.SourceType)
                           ()
                           Data.Functor.Identity.Identity
                           Language.PureScript.Types.SourceType))) -}
ab429710f4a02504f2886ef55bd53bf6
  matchTypeOperators1 ::
    Language.PureScript.AST.SourcePos.SourceSpan
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.TypeOpName)
    -> Language.PureScript.Types.Type
         Language.PureScript.AST.SourcePos.SourceAnn
    -> Language.PureScript.Types.Type
         Language.PureScript.AST.SourcePos.SourceAnn
    -> Language.PureScript.Types.Type
         Language.PureScript.AST.SourcePos.SourceAnn
  {- Arity: 4, HasNoCafRefs, Strictness: <L,A><L,U><L,U><L,U>m14,
     Unfolding: InlineRule (4, True, False)
                (\ (ds :: Language.PureScript.AST.SourcePos.SourceSpan)
                   (x :: Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.OpName
                              'Language.PureScript.Names.TypeOpName))
                   (eta :: Language.PureScript.Types.Type
                             Language.PureScript.AST.SourcePos.SourceAnn)
                   (eta1 :: Language.PureScript.Types.Type
                              Language.PureScript.AST.SourcePos.SourceAnn) ->
                 Language.PureScript.Types.BinaryNoParensType
                   @ Language.PureScript.AST.SourcePos.SourceAnn
                   Language.PureScript.AST.SourcePos.$bNullSourceAnn
                   (Language.PureScript.Types.TypeOp
                      @ Language.PureScript.AST.SourcePos.SourceAnn
                      Language.PureScript.AST.SourcePos.$bNullSourceAnn
                      x)
                   eta
                   eta1) -}
e02f7b2aa8c91d2698bb723926b37f9e
  matchTypeOperators2 ::
    Language.PureScript.Types.Type
      Language.PureScript.AST.SourcePos.SourceAnn
    -> GHC.Base.Maybe
         (Language.PureScript.Types.SourceType,
          Language.PureScript.Types.SourceType,
          Language.PureScript.Types.SourceType)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Types.Type
                            Language.PureScript.AST.SourcePos.SourceAnn) ->
                 case ds of wild {
                   DEFAULT
                   -> GHC.Base.Nothing
                        @ (Language.PureScript.Types.SourceType,
                           Language.PureScript.Types.SourceType,
                           Language.PureScript.Types.SourceType)
                   Language.PureScript.Types.BinaryNoParensType ds1 op l r
                   -> GHC.Base.Just
                        @ (Language.PureScript.Types.Type
                             Language.PureScript.AST.SourcePos.SourceAnn,
                           Language.PureScript.Types.Type
                             Language.PureScript.AST.SourcePos.SourceAnn,
                           Language.PureScript.Types.Type
                             Language.PureScript.AST.SourcePos.SourceAnn)
                        (op, l, r) }) -}
c06d315002feb36ab2924fedca7f37ac
  matchTypeOperators3 ::
    Language.PureScript.Types.Type
      Language.PureScript.AST.SourcePos.SourceAnn
    -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Types.Type
                            Language.PureScript.AST.SourcePos.SourceAnn) ->
                 case ds of wild {
                   DEFAULT -> GHC.Types.False
                   Language.PureScript.Types.BinaryNoParensType ds1 ds2 ds3 ds4
                   -> GHC.Types.True }) -}
"SPEC/Language.PureScript.Sugar.Operators.Types $fShow(,) @ SourceSpan @ [Comment]" [orphan] forall (v1 :: GHC.Show.Show
                                                                                                             [Language.PureScript.Comments.Comment])
                                                                                                    (v :: GHC.Show.Show
                                                                                                            Language.PureScript.AST.SourcePos.SourceSpan)
  GHC.Show.$fShow(,) @ Language.PureScript.AST.SourcePos.SourceSpan
                     @ [Language.PureScript.Comments.Comment]
                     v
                     v1
  = Language.PureScript.Sugar.Operators.Types.$s$fShow(,)
"SPEC/Language.PureScript.Sugar.Operators.Types $fShowType @ (SourceSpan,
                                                             [Comment])" [orphan] forall (v :: GHC.Show.Show
                                                                                                                                                                           (Language.PureScript.AST.SourcePos.SourceSpan,
                                                                                                                                                                            [Language.PureScript.Comments.Comment]))
  Language.PureScript.Types.$fShowType @ (Language.PureScript.AST.SourcePos.SourceSpan,
                                          [Language.PureScript.Comments.Comment])
                                       v
  = Language.PureScript.Sugar.Operators.Types.$s$fShowType
"SPEC/Language.PureScript.Sugar.Operators.Types $fShow[] @ Comment" [orphan] forall (v :: GHC.Show.Show
                                                                                            Language.PureScript.Comments.Comment)
  GHC.Show.$fShow[] @ Language.PureScript.Comments.Comment v
  = Language.PureScript.Sugar.Operators.Types.$s$fShow(,)_$s$fShow[]
"SPEC/Language.PureScript.Sugar.Operators.Types $fShow[]_$cshow @ Comment" [orphan] forall ($dShow :: GHC.Show.Show
                                                                                                        Language.PureScript.Comments.Comment)
  GHC.Show.$fShow[]_$cshow @ Language.PureScript.Comments.Comment
                           $dShow
  = Language.PureScript.Sugar.Operators.Types.$s$fShow[]_$cshow
"SPEC/Language.PureScript.Sugar.Operators.Types $fShow[]_$cshowList @ Comment" [orphan] forall ($dShow :: GHC.Show.Show
                                                                                                            Language.PureScript.Comments.Comment)
  GHC.Show.$fShow[]_$cshowList @ Language.PureScript.Comments.Comment
                               $dShow
  = Language.PureScript.Sugar.Operators.Types.$s$fShow[]_$cshowList
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

