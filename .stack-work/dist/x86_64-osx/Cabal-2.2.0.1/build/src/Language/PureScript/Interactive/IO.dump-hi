
==================== FINAL INTERFACE ====================
2018-11-30 19:26:09.84519 UTC

interface purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Interactive.IO 8043
  interface hash: b3ddc796e497536e21cfaa0208ebde95
  ABI hash: b1c5ce61acd8876be2ed86384ba77724
  export-list hash: 94bd8e06a2ed25bff90c8e17834e488b
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 6b91193d6f95e3c74259a28b4bb30bdf
  opt_hash: 2c98c95d41c045ae9c2fb565ec8aabc6
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Language.PureScript.Interactive.IO.findNodeProcess
  Language.PureScript.Interactive.IO.getHistoryFilename
module dependencies:
package dependencies: array-0.5.2.0 base-4.11.1.0*
                      base-compat-0.10.4* deepseq-1.4.3.0 directory-1.3.1.5
                      filepath-1.4.2 ghc-prim-0.5.2.0 integer-gmp-1.0.2.0 time-1.8.0.2
                      transformers-0.5.5.0 unix-2.7.2.2
orphans: time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
import  -/  base-4.11.1.0:Control.Monad c5f960c67d822497578bffbd3e4c01cf
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.IO 1d5542cc02075c5e948018bfacea89c1
import  -/  base-compat-0.10.4:Prelude.Compat bb6796186ed35a1d09dc34362a3fc27e
import  -/  directory-1.3.1.5:System.Directory bc76216f25ffcaf1c91b529f41ea3bf7
import  -/  filepath-1.4.2:System.FilePath a538d436328dd004b88f7d29a8b244c0
import  -/  filepath-1.4.2:System.FilePath.Posix c021b7a40cfcdd9b08724b5bb7566b59
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  transformers-0.5.5.0:Control.Monad.Trans.Maybe d8c1b6e39f3b898d0e318440d310cfa9
f11cbdcf6d877b91f03b9821815b28bc
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Language.PureScript.Interactive.IO.$trModule3
                   Language.PureScript.Interactive.IO.$trModule1) -}
942c8172101fce5ed579206e63c7b437
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.IO.$trModule2) -}
caa1807401e4f9535a6fe8462412313e
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Language.PureScript.Interactive.IO"#) -}
ded9c273481a76aae7db009e62535d16
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.IO.$trModule4) -}
e6018e9e1027dcbed339d80b1153b179
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"#) -}
08f2ddefb47f29aa9a71dbdc82dbab60
  findNodeProcess :: GHC.Types.IO (GHC.Base.Maybe GHC.Base.String)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Interactive.IO.findNodeProcess1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <GHC.Base.Maybe GHC.IO.FilePath>_R)) -}
339cae72612d035ed2974ec995e8b644
  findNodeProcess1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          GHC.Base.Maybe GHC.IO.FilePath #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case System.Directory.findExecutable1
                        Language.PureScript.Interactive.IO.findNodeProcess4
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   GHC.Base.Nothing
                   -> case System.Directory.findExecutable1
                             Language.PureScript.Interactive.IO.findNodeProcess2
                             ipv of ds2 { (#,#) ipv2 ipv3 ->
                      case ipv3 of wild1 {
                        GHC.Base.Nothing -> (# ipv2, GHC.Base.Nothing @ GHC.IO.FilePath #)
                        GHC.Base.Just ds -> ds2 } }
                   GHC.Base.Just ds -> ds1 } }) -}
1fd38ccd71c2ba0c6199f0615593e266
  findNodeProcess2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Interactive.IO.findNodeProcess3) -}
5cf5001c3a77a11780717267071047ea
  findNodeProcess3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("node"#) -}
03fdfa005a30baec41104db2d6780444
  findNodeProcess4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Interactive.IO.findNodeProcess5) -}
0204e6328cee857f8827099c954c2efa
  findNodeProcess5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("nodejs"#) -}
eaaccd4a327cf8f60b446820d4695f34
  getHistoryFilename :: GHC.Types.IO GHC.IO.FilePath
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Interactive.IO.getHistoryFilename1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <GHC.IO.FilePath>_R)) -}
27ab693cf722526f957bcff35ff1f499
  getHistoryFilename1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.IO.FilePath #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case System.Directory.getAppUserDataDirectory1
                        Language.PureScript.Interactive.IO.getHistoryFilename5
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.Prim.catch#
                        @ GHC.Types.Bool
                        @ GHC.Exception.SomeException
                        (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case System.Directory.createDirectoryIfMissing6
                                (System.FilePath.Posix.combine
                                   ipv1
                                   (GHC.CString.unpackCString#
                                      Language.PureScript.Interactive.IO.getHistoryFilename4))
                                s1 of ds10 { (#,#) ipv2 ipv3 ->
                         (# ipv2, GHC.Classes.not ipv3 #) })
                        System.Directory.doesDirectoryExist2
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case ipv3 of wild {
                   GHC.Types.False
                   -> case System.IO.Error.modifyIOError1
                             @ GHC.IO.FilePath
                             System.Directory.getXdgDirectory14
                             Language.PureScript.Interactive.IO.getHistoryFilename2
                               `cast`
                             (Sym (GHC.Types.N:IO[0] <GHC.IO.FilePath>_R))
                             ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                      let {
                        filename :: GHC.IO.FilePath
                        = System.FilePath.Posix.combine
                            ipv5
                            (GHC.CString.unpackCString#
                               Language.PureScript.Interactive.IO.getHistoryFilename4)
                      } in
                      case System.FilePath.Posix.$wsplitFileName_
                             filename of ww { (#,#) ww1 ww2 ->
                      let {
                        $j :: GHC.IO.FilePath
                              -> [GHC.IO.FilePath]
                              -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.IO.FilePath #)
                          <join 2> {- Arity: 2, Strictness: <L,U><L,1*U> -}
                        = \ (x :: GHC.IO.FilePath)[OneShot]
                            (xs :: [GHC.IO.FilePath])[OneShot] ->
                          case System.Directory.createDirectoryIfMissing4
                                 (GHC.List.reverse1
                                    @ GHC.IO.FilePath
                                    (GHC.Types.:
                                       @ GHC.IO.FilePath
                                       x
                                       (case GHC.List.$wscanlGo
                                               @ GHC.IO.FilePath
                                               @ GHC.IO.FilePath
                                               @ GHC.IO.FilePath
                                               @ GHC.IO.FilePath
                                               System.FilePath.Posix.combine
                                               x
                                               xs of ww4 { (#,#) ww5 ww6 ->
                                        ww6 }))
                                    (GHC.Types.[] @ GHC.IO.FilePath))
                                 ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                          (# ipv6, filename #) }
                      } in
                      case ww1 of wild1 {
                        []
                        -> case System.Directory.createDirectoryIfMissing_g
                                  (System.FilePath.Posix.dropTrailingPathSeparator
                                     System.FilePath.Posix.dropFileName1) of wild2 {
                             []
                             -> case System.Directory.createDirectoryIfMissing4
                                       System.Directory.createDirectoryIfMissing2
                                       ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                                (# ipv6, filename #) }
                             : x xs -> $j x xs }
                        : ds4 ds5
                        -> case System.Directory.createDirectoryIfMissing_g
                                  (System.FilePath.Posix.dropTrailingPathSeparator wild1) of wild2 {
                             []
                             -> case System.Directory.createDirectoryIfMissing4
                                       System.Directory.createDirectoryIfMissing2
                                       ipv4 of ds6 { (#,#) ipv6 ipv7 ->
                                (# ipv6, filename #) }
                             : x xs -> $j x xs } } } }
                   GHC.Types.True
                   -> (# ipv2,
                         System.FilePath.Posix.combine
                           ipv1
                           (GHC.CString.unpackCString#
                              Language.PureScript.Interactive.IO.getHistoryFilename4) #) } } }) -}
e1ac8b8f2f4312ce41590c03d03e0586
  getHistoryFilename2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.IO.FilePath #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case System.Directory.$wget
                        @ GHC.Types.Bool
                        System.Directory.getXdgDirectory12
                        System.Directory.getXdgDirectory10
                        s of ds10 { (#,#) ipv ipv1 ->
                 (# ipv,
                    System.FilePath.Posix.normalise
                      (System.FilePath.Posix.combine
                         ipv1
                         (GHC.CString.unpackCString#
                            Language.PureScript.Interactive.IO.getHistoryFilename3)) #) }) -}
143d58f0f7c6cc4878e7f6e1afdca1d7
  getHistoryFilename3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("purescript"#) -}
95342dcd6ca93d0755b522849f7b3dd0
  getHistoryFilename4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("psci_history"#) -}
c72b3a316ca1e7700a8595b1b5b608e4
  getHistoryFilename5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Interactive.IO.getHistoryFilename3) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

