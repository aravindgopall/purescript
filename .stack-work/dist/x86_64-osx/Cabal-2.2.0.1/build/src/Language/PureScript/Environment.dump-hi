
==================== FINAL INTERFACE ====================
2018-11-30 19:26:37.770131 UTC

interface purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Environment [family instance module] 8043
  interface hash: 3faaa1b8b574a271d61809f7b343568e
  ABI hash: 31667499b7017b19998bb405474fbe93
  export-list hash: 56b1ef0ac6132b4c113ce26a807dcfb6
  orphan hash: bdee9d52cd46875530a0f8290ccffde5
  flag hash: 4ebcce6d18a0f87d1e176e401bb022d3
  opt_hash: 2c98c95d41c045ae9c2fb565ec8aabc6
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Language.PureScript.Environment.-:>
  Language.PureScript.Environment.allPrimClasses
  Language.PureScript.Environment.allPrimKinds
  Language.PureScript.Environment.allPrimTypes
  Language.PureScript.Environment.function
  Language.PureScript.Environment.initEnvironment
  Language.PureScript.Environment.isFunction
  Language.PureScript.Environment.isNewtypeConstructor
  Language.PureScript.Environment.isObject
  Language.PureScript.Environment.isTypeOrApplied
  Language.PureScript.Environment.kindConstraint
  Language.PureScript.Environment.kindDoc
  Language.PureScript.Environment.kindOrdering
  Language.PureScript.Environment.kindRowList
  Language.PureScript.Environment.kindSymbol
  Language.PureScript.Environment.kindType
  Language.PureScript.Environment.lookupConstructor
  Language.PureScript.Environment.lookupValue
  Language.PureScript.Environment.makeTypeClassData
  Language.PureScript.Environment.primClasses
  Language.PureScript.Environment.primKind
  Language.PureScript.Environment.primKinds
  Language.PureScript.Environment.primName
  Language.PureScript.Environment.primOrderingKinds
  Language.PureScript.Environment.primOrderingTypes
  Language.PureScript.Environment.primRowClasses
  Language.PureScript.Environment.primRowListClasses
  Language.PureScript.Environment.primRowListKinds
  Language.PureScript.Environment.primRowListTypes
  Language.PureScript.Environment.primRowTypes
  Language.PureScript.Environment.primSubKind
  Language.PureScript.Environment.primSubName
  Language.PureScript.Environment.primSymbolClasses
  Language.PureScript.Environment.primSymbolTypes
  Language.PureScript.Environment.primTy
  Language.PureScript.Environment.primTypeErrorClasses
  Language.PureScript.Environment.primTypeErrorKinds
  Language.PureScript.Environment.primTypeErrorTypes
  Language.PureScript.Environment.primTypes
  Language.PureScript.Environment.showDataDeclType
  Language.PureScript.Environment.tyArray
  Language.PureScript.Environment.tyBoolean
  Language.PureScript.Environment.tyChar
  Language.PureScript.Environment.tyFunction
  Language.PureScript.Environment.tyInt
  Language.PureScript.Environment.tyNumber
  Language.PureScript.Environment.tyRecord
  Language.PureScript.Environment.tyString
  Language.PureScript.Environment.DataDeclType{Language.PureScript.Environment.Data Language.PureScript.Environment.Newtype}
  Language.PureScript.Environment.Environment{Language.PureScript.Environment.Environment dataConstructors kinds names typeClassDictionaries typeClasses typeSynonyms types}
  Language.PureScript.Environment.FunctionalDependency{Language.PureScript.Environment.FunctionalDependency fdDetermined fdDeterminers}
  Language.PureScript.Environment.NameKind{Language.PureScript.Environment.External Language.PureScript.Environment.Private Language.PureScript.Environment.Public}
  Language.PureScript.Environment.NameVisibility{Language.PureScript.Environment.Defined Language.PureScript.Environment.Undefined}
  Language.PureScript.Environment.TypeClassData{Language.PureScript.Environment.TypeClassData typeClassArguments typeClassCoveringSets typeClassDependencies typeClassDeterminedArguments typeClassMembers typeClassSuperclasses}
  Language.PureScript.Environment.TypeKind{Language.PureScript.Environment.DataType Language.PureScript.Environment.ExternData Language.PureScript.Environment.LocalTypeVariable Language.PureScript.Environment.ScopedTypeVar Language.PureScript.Environment.TypeSynonym}
module dependencies: Control.Monad.Supply
                     Control.Monad.Supply.Class Language.PureScript.AST.SourcePos
                     Language.PureScript.Comments Language.PureScript.Constants
                     Language.PureScript.Crash Language.PureScript.Kinds
                     Language.PureScript.Label Language.PureScript.Names
                     Language.PureScript.PSString
                     Language.PureScript.TypeClassDictionaries Language.PureScript.Types
package dependencies: aeson-1.3.1.1 aeson-better-errors-0.9.1.0
                      array-0.5.2.0 async-2.2.1 attoparsec-0.13.2.2 base-4.11.1.0
                      base-compat-0.10.4 binary-0.8.5.1 bytestring-0.10.8.2
                      containers-0.5.11.0 deepseq-1.4.3.0 dlist-0.8.0.4 filepath-1.4.2
                      ghc-boot-th-8.4.3 ghc-prim-0.5.2.0 hashable-1.2.7.0
                      integer-gmp-1.0.2.0 integer-logarithms-1.0.2.1 mtl-2.2.2
                      pretty-1.1.3.6 primitive-0.6.3.0 protolude-0.2.2 random-1.1
                      scientific-0.3.6.2 stm-2.4.5.0 tagged-0.8.5
                      template-haskell-2.13.0.0 text-1.2.3.0 th-abstraction-0.2.8.0
                      time-1.8.0.2 time-locale-compat-0.1.1.4 transformers-0.5.5.0
                      unordered-containers-0.2.9.0 uuid-types-1.0.3 vector-0.12.0.1
orphans: stm-2.4.5.0:Control.Monad.STM
         attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         vector-0.12.0.1:Data.Vector.Unboxed
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.0:Data.Text.Lazy
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.5.0:Control.Monad.Trans.Error
         text-1.2.3.0:Data.Text binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: aeson-1.3.1.1:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.Graph
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         dlist-0.8.0.4:Data.DList ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.AST.SourcePos
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Kinds
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Label
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Names
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.PSString
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.TypeClassDictionaries
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Types
                         tagged-0.8.5:Data.Tagged
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
                         th-abstraction-0.2.8.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  aeson-1.3.1.1:Data.Aeson 108dfb08de41cf77aad4693ac1dc3d44
import  -/  aeson-1.3.1.1:Data.Aeson.Types.FromJSON 1ea0c919856f0d29f12e53cd074d532c
import  -/  aeson-1.3.1.1:Data.Aeson.Types.Internal df76c21edff000f9355bfb6fb0dbf3e6
import  -/  aeson-1.3.1.1:Data.Aeson.Types.ToJSON 587c7d8b9444e85253d7faf5f824f568
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.Functor f522c3501272159820fd6f242510732f
import  -/  base-4.11.1.0:Data.Maybe 409c3da2b142470b68be39ce1d97a9f7
import  -/  base-4.11.1.0:Data.Traversable 7ad4edb9184ea1ae8e73f6b94f115c8c
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Generics 4d1469b3e29804a05a1be33d11accff6
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-compat-0.10.4:Prelude.Compat bb6796186ed35a1d09dc34362a3fc27e
import  -/  containers-0.5.11.0:Data.Graph 62516cbabce0b5240500dc0da6a9b2cf
import  -/  containers-0.5.11.0:Data.Map 0dbdaec812ef695a364aa6c69e7f7d53
import  -/  containers-0.5.11.0:Data.Map.Internal 0150e210d0ae8df0f3a0669d5e32d8fa
import  -/  containers-0.5.11.0:Data.Set 7d3c64a641be4cacbcd8119445bab919
import  -/  containers-0.5.11.0:Data.Set.Internal 93fa3ef95853aa2a7aadf32d693bd451
import  -/  containers-0.5.11.0:Data.Tree 334e5590b70599cff00c9af57a2f6140
import  -/  deepseq-1.4.3.0:Control.DeepSeq 171f1f567c47ef82860df4ad686d11b1
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  protolude-0.2.2:Protolude 2c2d16096c8a60f59f646a3b93b0eb7b
import  -/  protolude-0.2.2:Protolude.List 3a80368167450d7a4360ebf1ea443345
import  -/  Language.PureScript.Constants d290cccb0db8657cab5f1253ab0da1ee
  exports: cd83a0f5b6591e5c66c598e34359260d
  doc 416618f9e4c30c262f7a6015a9f16497
  kindOrdering 4454fdd926de26fc68c7aeadd559d9a7
  kindRowList a5a2b3a9baf6f2e1ad9c2ea9fb9dbaab
  moduleOrdering b233c6e06a75c36a6f19851f6ce162db
  moduleRow 8faa84976762a55de8316bf0fcd7a622
  moduleRowList f3edc39eec650dba5ff0e99253f270d3
  moduleSymbol 8366c7a32babb889903e4f4cc2b91a5b
  prim 48b048c216cc1c04ce512572fd809a92
  symbol b3e315dfc840415af5029bb88d09778d
  typ d8456deef0e987ab34ac0f04f316fb63
  typeError 94a173c1579f7d0f54304ec190a8c730
import  -/  Language.PureScript.Crash 1bc11bf824676e9581610d0d05d26761
  exports: 8a971f39d6ef3f27956f413640cb0a24
  internalError f3db7e23c75878c9d13888d6d114012d
import  -/  Language.PureScript.Kinds bf1fc2fd18b06658330fcf93fe50e737
  exports: 2c2448e43e622d2466a59b9cd8f4db91
  FunKind beae73ee9677be9920dc1399ab9ff2dc
  Kind 3e1e213eb647453235d33b0d1b36ec59
  NamedKind 536943c580461ebe2091622f07457ca3
  Row d8dbf332ec637cbe742053215d12b58e
import  -/  Language.PureScript.Names b3bf151840f3e8f2eb61eff186432886
  exports: f7f3503d20957194bda83c16bb5f1288
  ClassName e69348bcf8c43a2174540a1d5983bfaa
  ConstructorName 9fb88e980342b224c2a4e4b58fa9fe33
  Ident ab98a56ffa88760dad1380079e8ee35a
  KindName 681d490d18bc7da009f3503010a994f8
  ModuleName 0cb2c8b6c90c347a41315bf0e0fd925c
  ModuleName 5a70062bbdf29e6dc659ad8bf5326b50
  ProperName 9eb330c84db102abf2d0f2652fe4a144
  ProperName 29f101e190cc99df85623423972e606f
  Qualified d600a7f01c8203cf5504999de99c923c
  Qualified 5a70062bbdf29e6dc659ad8bf5326b50
  TypeName da42c92f73f4f363c63ecaf77b6335b9
import  -/  Language.PureScript.TypeClassDictionaries 85b2520728908ad345f56b1c2cbe3fca
  exports: cc9c93841004965313696be0c74a01eb
  NamedDict 1c7eb5af0357b976dbe077e65975eac8
import  -/  Language.PureScript.Types 74562e642f5297557b3a23aac7819ad1
  exports: ae97bc75fcebc59f59c970736847a827
  Constraint 93223f8afa90d0facc05a03f863dc72d
  Type 93223f8afa90d0facc05a03f863dc72d
  TypeApp 8aa2c93426facb8054d5caf77ff9d922
  TypeConstructor 5e1c42d22ac701f08c049fde0171d9ac
import  -/  text-1.2.3.0:Data.Text 7daa7e6c9b39d8cc1679e5ec5c64d2be
import  -/  text-1.2.3.0:Data.Text.Internal 30a0a123f71f63b26cd34c6b24f23411
import  -/  text-1.2.3.0:Data.Text.Show 3b4b6fb2985a731022d67f636682da2b
fixities infixr 4 -:>
c291d940fae22a3f1400d8c90f26bdd4
  $fEqDataDeclType ::
    GHC.Classes.Eq Language.PureScript.Environment.DataDeclType
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Environment.DataDeclType
                  Language.PureScript.Environment.$fEqDataDeclType_$c==
                  Language.PureScript.Environment.$fEqDataDeclType_$c/= -}
c291d940fae22a3f1400d8c90f26bdd4
  $fEqDataDeclType_$c/= ::
    Language.PureScript.Environment.DataDeclType
    -> Language.PureScript.Environment.DataDeclType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Environment.DataDeclType)
                   (y :: Language.PureScript.Environment.DataDeclType) ->
                 case x of wild {
                   Language.PureScript.Environment.Data
                   -> case y of wild1 {
                        Language.PureScript.Environment.Data -> GHC.Types.False
                        Language.PureScript.Environment.Newtype -> GHC.Types.True }
                   Language.PureScript.Environment.Newtype
                   -> case y of wild1 {
                        Language.PureScript.Environment.Data -> GHC.Types.True
                        Language.PureScript.Environment.Newtype -> GHC.Types.False } }) -}
c291d940fae22a3f1400d8c90f26bdd4
  $fEqDataDeclType_$c== ::
    Language.PureScript.Environment.DataDeclType
    -> Language.PureScript.Environment.DataDeclType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Language.PureScript.Environment.DataDeclType)
                   (ds1 :: Language.PureScript.Environment.DataDeclType) ->
                 case ds of wild {
                   Language.PureScript.Environment.Data
                   -> case ds1 of wild1 {
                        Language.PureScript.Environment.Data -> GHC.Types.True
                        Language.PureScript.Environment.Newtype -> GHC.Types.False }
                   Language.PureScript.Environment.Newtype
                   -> case ds1 of wild1 {
                        Language.PureScript.Environment.Data -> GHC.Types.False
                        Language.PureScript.Environment.Newtype -> GHC.Types.True } }) -}
90ac7b5e1c331fe4ca4a3a5c9b2afcbd
  $fEqNameKind ::
    GHC.Classes.Eq Language.PureScript.Environment.NameKind
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Environment.NameKind
                  Language.PureScript.Environment.$fEqNameKind_$c==
                  Language.PureScript.Environment.$fEqNameKind_$c/= -}
90ac7b5e1c331fe4ca4a3a5c9b2afcbd
  $fEqNameKind_$c/= ::
    Language.PureScript.Environment.NameKind
    -> Language.PureScript.Environment.NameKind -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Environment.NameKind)
                   (y :: Language.PureScript.Environment.NameKind) ->
                 case x of wild {
                   Language.PureScript.Environment.Private
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.Environment.Private -> GHC.Types.False }
                   Language.PureScript.Environment.Public
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.Environment.Public -> GHC.Types.False }
                   Language.PureScript.Environment.External
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.Environment.External -> GHC.Types.False } }) -}
90ac7b5e1c331fe4ca4a3a5c9b2afcbd
  $fEqNameKind_$c== ::
    Language.PureScript.Environment.NameKind
    -> Language.PureScript.Environment.NameKind -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Language.PureScript.Environment.NameKind)
                   (ds1 :: Language.PureScript.Environment.NameKind) ->
                 case ds of wild {
                   Language.PureScript.Environment.Private
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Environment.Private -> GHC.Types.True }
                   Language.PureScript.Environment.Public
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Environment.Public -> GHC.Types.True }
                   Language.PureScript.Environment.External
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Environment.External -> GHC.Types.True } }) -}
610613df6c74f57795f9d575591a7472
  $fEqNameVisibility ::
    GHC.Classes.Eq Language.PureScript.Environment.NameVisibility
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Environment.NameVisibility
                  Language.PureScript.Environment.$fEqNameVisibility_$c==
                  Language.PureScript.Environment.$fEqNameVisibility_$c/= -}
610613df6c74f57795f9d575591a7472
  $fEqNameVisibility_$c/= ::
    Language.PureScript.Environment.NameVisibility
    -> Language.PureScript.Environment.NameVisibility -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Environment.NameVisibility)
                   (y :: Language.PureScript.Environment.NameVisibility) ->
                 case x of wild {
                   Language.PureScript.Environment.Undefined
                   -> case y of wild1 {
                        Language.PureScript.Environment.Undefined -> GHC.Types.False
                        Language.PureScript.Environment.Defined -> GHC.Types.True }
                   Language.PureScript.Environment.Defined
                   -> case y of wild1 {
                        Language.PureScript.Environment.Undefined -> GHC.Types.True
                        Language.PureScript.Environment.Defined -> GHC.Types.False } }) -}
610613df6c74f57795f9d575591a7472
  $fEqNameVisibility_$c== ::
    Language.PureScript.Environment.NameVisibility
    -> Language.PureScript.Environment.NameVisibility -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Language.PureScript.Environment.NameVisibility)
                   (ds1 :: Language.PureScript.Environment.NameVisibility) ->
                 case ds of wild {
                   Language.PureScript.Environment.Undefined
                   -> case ds1 of wild1 {
                        Language.PureScript.Environment.Undefined -> GHC.Types.True
                        Language.PureScript.Environment.Defined -> GHC.Types.False }
                   Language.PureScript.Environment.Defined
                   -> case ds1 of wild1 {
                        Language.PureScript.Environment.Undefined -> GHC.Types.False
                        Language.PureScript.Environment.Defined -> GHC.Types.True } }) -}
0a0df18a3a5bbdd9f1dda59baf0fb992
  $fEqTypeKind ::
    GHC.Classes.Eq Language.PureScript.Environment.TypeKind
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Environment.TypeKind
                  Language.PureScript.Environment.$fEqTypeKind_$c==
                  Language.PureScript.Environment.$fEqTypeKind_$c/= -}
0a0df18a3a5bbdd9f1dda59baf0fb992
  $fEqTypeKind_$c/= ::
    Language.PureScript.Environment.TypeKind
    -> Language.PureScript.Environment.TypeKind -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Environment.TypeKind)
                   (y :: Language.PureScript.Environment.TypeKind) ->
                 case Language.PureScript.Environment.$fEqTypeKind_$c==
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
0a0df18a3a5bbdd9f1dda59baf0fb992
  $fEqTypeKind_$c== ::
    Language.PureScript.Environment.TypeKind
    -> Language.PureScript.Environment.TypeKind -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Language.PureScript.Environment.TypeKind)
                   (ds1 :: Language.PureScript.Environment.TypeKind) ->
                 case ds of wild {
                   Language.PureScript.Environment.DataType a1 a2
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Environment.DataType b1 b2
                        -> case GHC.Classes.$fEq[]_$c==
                                  @ (Data.Text.Internal.Text,
                                     GHC.Base.Maybe Language.PureScript.Kinds.Kind)
                                  Language.PureScript.Environment.$fEqTypeKind_$s$fEq(,)1
                                  a1
                                  b1 of wild2 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True
                             -> GHC.Classes.$fEq[]_$c==
                                  @ (Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.ConstructorName,
                                     [Language.PureScript.Types.Type])
                                  Language.PureScript.Environment.$fEqTypeKind_$s$fEq(,)
                                  a2
                                  b2 } }
                   Language.PureScript.Environment.TypeSynonym
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Environment.TypeSynonym -> GHC.Types.True }
                   Language.PureScript.Environment.ExternData
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Environment.ExternData -> GHC.Types.True }
                   Language.PureScript.Environment.LocalTypeVariable
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Environment.LocalTypeVariable
                        -> GHC.Types.True }
                   Language.PureScript.Environment.ScopedTypeVar
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Environment.ScopedTypeVar
                        -> GHC.Types.True } }) -}
d299dccbac791060c6145cae36dfc9ff
  $fEqTypeKind_$s$fEq(,) ::
    GHC.Classes.Eq
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ConstructorName,
       [Language.PureScript.Types.Type])
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.ProperName
                       'Language.PureScript.Names.ConstructorName,
                     [Language.PureScript.Types.Type])
                  (GHC.Classes.$fEq(,)_$c==
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ConstructorName)
                     @ [Language.PureScript.Types.Type]
                     (Language.PureScript.Names.$fEqProperName
                        @ 'Language.PureScript.Names.ConstructorName)
                     Language.PureScript.Environment.$fEqTypeKind_$s$fEq[])
                  Language.PureScript.Environment.$fEqTypeKind_$s$fEq(,)_$c/= -}
bbbd2ed022b54acd7d638fc4a11baf7e
  $fEqTypeKind_$s$fEq(,)1 ::
    GHC.Classes.Eq
      (Data.Text.Internal.Text,
       GHC.Base.Maybe Language.PureScript.Kinds.Kind)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Text.Internal.Text,
                     GHC.Base.Maybe Language.PureScript.Kinds.Kind)
                  (GHC.Classes.$fEq(,)_$c==
                     @ Data.Text.Internal.Text
                     @ (GHC.Base.Maybe Language.PureScript.Kinds.Kind)
                     Data.Text.$fEqText
                     Language.PureScript.Environment.$fEqTypeKind_$s$fEqMaybe)
                  Language.PureScript.Environment.$fEqTypeKind_$s$fEq(,)_$c/=1 -}
75456764467c64f303123d58f5c0da28
  $fEqTypeKind_$s$fEq(,)_$c/= ::
    (Language.PureScript.Names.ProperName
       'Language.PureScript.Names.ConstructorName,
     [Language.PureScript.Types.Type])
    -> (Language.PureScript.Names.ProperName
          'Language.PureScript.Names.ConstructorName,
        [Language.PureScript.Types.Type])
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LLS)L),1*U(1*U(U,U,U),1*U)><S(S(LLS)L),1*U(1*U(U,U,U),1*U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: (Language.PureScript.Names.ProperName
                            'Language.PureScript.Names.ConstructorName,
                          [Language.PureScript.Types.Type]))
                   (y :: (Language.PureScript.Names.ProperName
                            'Language.PureScript.Names.ConstructorName,
                          [Language.PureScript.Types.Type])) ->
                 case x of wild { (,) a1 a2 ->
                 case y of wild1 { (,) b1 b2 ->
                 case a1
                        `cast`
                      (Language.PureScript.Names.N:ProperName[0]
                           <'Language.PureScript.Names.ConstructorName>_P) of wild2 { Data.Text.Internal.Text dt dt1 dt2 ->
                 case b1
                        `cast`
                      (Language.PureScript.Names.N:ProperName[0]
                           <'Language.PureScript.Names.ConstructorName>_P) of wild3 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                 case GHC.Classes.eqInt
                        (GHC.Types.I# dt2)
                        (GHC.Types.I# dt5) of wild4 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True
                   -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                     -> GHC.Prim.Word#
                                                     -> GHC.Prim.ByteArray#
                                                     -> GHC.Prim.Word#
                                                     -> GHC.Prim.Word#
                                                     -> GHC.Prim.State# GHC.Prim.RealWorld
                                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                           GHC.Prim.Int# #)}
                             dt
                             (GHC.Prim.int2Word# dt1)
                             dt3
                             (GHC.Prim.int2Word# dt4)
                             (GHC.Prim.int2Word# dt2)
                             GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                      case GHC.Int.eqInt32
                             (GHC.Int.I32# (GHC.Prim.narrow32Int# ds3))
                             (GHC.Int.I32# 0#) of wild6 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True
                        -> case GHC.Classes.$fEq[]_$c==
                                  @ Language.PureScript.Types.Type
                                  Language.PureScript.Types.$fEqType
                                  a2
                                  b2 of wild7 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False } } } } } } } }) -}
9dbbc100c98e252ef09e12d5669ab0f6
  $fEqTypeKind_$s$fEq(,)_$c/=1 ::
    (Data.Text.Internal.Text,
     GHC.Base.Maybe Language.PureScript.Kinds.Kind)
    -> (Data.Text.Internal.Text,
        GHC.Base.Maybe Language.PureScript.Kinds.Kind)
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LLS)L),1*U(1*U(U,U,U),1*U)><S(S(LLS)L),1*U(1*U(U,U,U),1*U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: (Data.Text.Internal.Text,
                          GHC.Base.Maybe Language.PureScript.Kinds.Kind))
                   (y :: (Data.Text.Internal.Text,
                          GHC.Base.Maybe Language.PureScript.Kinds.Kind)) ->
                 case x of wild { (,) a1 a2 ->
                 case y of wild1 { (,) b1 b2 ->
                 case a1 of wild2 { Data.Text.Internal.Text dt dt1 dt2 ->
                 case b1 of wild3 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                 case GHC.Classes.eqInt
                        (GHC.Types.I# dt2)
                        (GHC.Types.I# dt5) of wild4 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True
                   -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                     -> GHC.Prim.Word#
                                                     -> GHC.Prim.ByteArray#
                                                     -> GHC.Prim.Word#
                                                     -> GHC.Prim.Word#
                                                     -> GHC.Prim.State# GHC.Prim.RealWorld
                                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                           GHC.Prim.Int# #)}
                             dt
                             (GHC.Prim.int2Word# dt1)
                             dt3
                             (GHC.Prim.int2Word# dt4)
                             (GHC.Prim.int2Word# dt2)
                             GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                      case GHC.Int.eqInt32
                             (GHC.Int.I32# (GHC.Prim.narrow32Int# ds3))
                             (GHC.Int.I32# 0#) of wild6 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True
                        -> case a2 of wild7 {
                             GHC.Base.Nothing
                             -> case b2 of wild8 {
                                  GHC.Base.Nothing -> GHC.Types.False
                                  GHC.Base.Just ipv -> GHC.Types.True }
                             GHC.Base.Just a4
                             -> case b2 of wild8 {
                                  GHC.Base.Nothing -> GHC.Types.True
                                  GHC.Base.Just b4
                                  -> case Language.PureScript.Kinds.$fEqKind_$c== a4 b4 of wild9 {
                                       GHC.Types.False -> GHC.Types.True
                                       GHC.Types.True -> GHC.Types.False } } } } } } } } } }) -}
5cd5eee103358514c5a0acfc5fbd280e
  $fEqTypeKind_$s$fEqMaybe ::
    GHC.Classes.Eq (GHC.Base.Maybe Language.PureScript.Kinds.Kind)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Base.Maybe Language.PureScript.Kinds.Kind)
                  (\ (ds :: GHC.Base.Maybe Language.PureScript.Kinds.Kind)
                     (ds1 :: GHC.Base.Maybe Language.PureScript.Kinds.Kind) ->
                   case ds of wild {
                     GHC.Base.Nothing
                     -> case ds1 of wild1 {
                          GHC.Base.Nothing -> GHC.Types.True
                          GHC.Base.Just ipv -> GHC.Types.False }
                     GHC.Base.Just a1
                     -> case ds1 of wild1 {
                          GHC.Base.Nothing -> GHC.Types.False
                          GHC.Base.Just b1
                          -> Language.PureScript.Kinds.$fEqKind_$c== a1 b1 } })
                  Language.PureScript.Environment.$fEqTypeKind_$s$fEqMaybe_$c/= -}
973a75098ffaa998ff98ea687495c002
  $fEqTypeKind_$s$fEqMaybe_$c/= ::
    GHC.Base.Maybe Language.PureScript.Kinds.Kind
    -> GHC.Base.Maybe Language.PureScript.Kinds.Kind -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: GHC.Base.Maybe Language.PureScript.Kinds.Kind)
                   (y :: GHC.Base.Maybe Language.PureScript.Kinds.Kind) ->
                 case x of wild {
                   GHC.Base.Nothing
                   -> case y of wild1 {
                        GHC.Base.Nothing -> GHC.Types.False
                        GHC.Base.Just ipv -> GHC.Types.True }
                   GHC.Base.Just a1
                   -> case y of wild1 {
                        GHC.Base.Nothing -> GHC.Types.True
                        GHC.Base.Just b1
                        -> case Language.PureScript.Kinds.$fEqKind_$c== a1 b1 of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False } } }) -}
bb22f8ac57492ee840dbc5c7691807f9
  $fEqTypeKind_$s$fEq[] ::
    GHC.Classes.Eq [Language.PureScript.Types.Type]
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ [Language.PureScript.Types.Type]
                  (GHC.Classes.$fEq[]_$c==
                     @ Language.PureScript.Types.Type
                     Language.PureScript.Types.$fEqType)
                  Language.PureScript.Environment.$fEqTypeKind_$s$fEq[]_$c/= -}
f6d5be6df8a802e41ccf79529fd11570
  $fEqTypeKind_$s$fEq[]_$c/= ::
    [Language.PureScript.Types.Type]
    -> [Language.PureScript.Types.Type] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: [Language.PureScript.Types.Type])
                   (y :: [Language.PureScript.Types.Type]) ->
                 case GHC.Classes.$fEq[]_$c==
                        @ Language.PureScript.Types.Type
                        Language.PureScript.Types.$fEqType
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
c291d940fae22a3f1400d8c90f26bdd4
  $fFromJSONDataDeclType ::
    Data.Aeson.Types.FromJSON.FromJSON
      Language.PureScript.Environment.DataDeclType
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Environment.DataDeclType
                  Language.PureScript.Environment.$fFromJSONDataDeclType_$cparseJSON
                  Language.PureScript.Environment.$fFromJSONDataDeclType_$cparseJSONList -}
49e22826964ebd14cf4426a5c07a10d7
  $fFromJSONDataDeclType1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (", encountered "#) -}
7dec3c61d6f664dadffa0615506d90bf
  $fFromJSONDataDeclType10 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Environment.$fFromJSONDataDeclType11) -}
64009752b54a3bd7fda18220c84091d9
  $fFromJSONDataDeclType11 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("newtype"#) -}
4035b0826ea8f5e530dcdc6cd687a5fd
  $fFromJSONDataDeclType12 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Environment.$fFromJSONDataDeclType13) -}
aaafc3454d5290093a3f0f72085771ad
  $fFromJSONDataDeclType13 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("data"#) -}
1b21bc1551924822f7a20156d9ca5723
  $fFromJSONDataDeclType14 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Environment.$fFromJSONDataDeclType15) -}
66d6870761225a5afbad5c819662e85a
  $fFromJSONDataDeclType15 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("DataDeclType"#) -}
b46a09b33e18e5911ca4ca4f309ab8e4
  $fFromJSONDataDeclType2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("[a]"#) -}
7a15bc929351867e17f136b359e5ac0a
  $fFromJSONDataDeclType3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("expected "#) -}
c291d940fae22a3f1400d8c90f26bdd4
  $fFromJSONDataDeclType4 ::
    Data.Text.Internal.Text
    -> Data.Aeson.Types.Internal.Parser
         Language.PureScript.Environment.DataDeclType
  {- Arity: 1, Strictness: <S(SSS),1*U(U,U,U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Data.Text.Internal.Text) ->
                 case w of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Language.PureScript.Environment.$w$cparseJSON ww1 ww2 ww3 }) -}
c291d940fae22a3f1400d8c90f26bdd4
  $fFromJSONDataDeclType5 ::
    Data.Aeson.Types.Internal.JSONPath
    -> Data.Aeson.Types.Internal.Failure f4 r
    -> Data.Aeson.Types.Internal.Success
         Language.PureScript.Environment.DataDeclType f4 r
    -> f4 r
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (3, True, True)
                (\ @ f4 :: * -> *
                   @ r
                   (_path :: Data.Aeson.Types.Internal.JSONPath)
                   (_kf :: Data.Aeson.Types.Internal.Failure f4 r)
                   (ks :: Data.Aeson.Types.Internal.Success
                            Language.PureScript.Environment.DataDeclType f4 r) ->
                 ks Language.PureScript.Environment.Data) -}
c291d940fae22a3f1400d8c90f26bdd4
  $fFromJSONDataDeclType6 ::
    Data.Aeson.Types.Internal.JSONPath
    -> Data.Aeson.Types.Internal.Failure f4 r
    -> Data.Aeson.Types.Internal.Success
         Language.PureScript.Environment.DataDeclType f4 r
    -> f4 r
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (3, True, True)
                (\ @ f4 :: * -> *
                   @ r
                   (_path :: Data.Aeson.Types.Internal.JSONPath)
                   (_kf :: Data.Aeson.Types.Internal.Failure f4 r)
                   (ks :: Data.Aeson.Types.Internal.Success
                            Language.PureScript.Environment.DataDeclType f4 r) ->
                 ks Language.PureScript.Environment.Newtype) -}
35025a58699a18f714d947a09863e993
  $fFromJSONDataDeclType7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Environment.$fFromJSONDataDeclType8) -}
c15e41b239653d6f7995fdadd7fe971b
  $fFromJSONDataDeclType8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'"#) -}
18dfa042e6448e31394d2f369dead1e0
  $fFromJSONDataDeclType9 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("invalid type: '"#) -}
c291d940fae22a3f1400d8c90f26bdd4
  $fFromJSONDataDeclType_$cparseJSON ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         Language.PureScript.Environment.DataDeclType
  {- Arity: 1,
     Unfolding: (Data.Aeson.Types.FromJSON.withText
                   @ Language.PureScript.Environment.DataDeclType
                   Language.PureScript.Environment.$fFromJSONDataDeclType14
                   Language.PureScript.Environment.$fFromJSONDataDeclType4) -}
c291d940fae22a3f1400d8c90f26bdd4
  $fFromJSONDataDeclType_$cparseJSONList ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         [Language.PureScript.Environment.DataDeclType]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Data.Aeson.Types.Internal.Value) ->
                 case ds of wild {
                   DEFAULT
                   -> let {
                        msg5 :: GHC.Base.String
                        = GHC.CString.unpackAppendCString#
                            Language.PureScript.Environment.$fFromJSONDataDeclType3
                            (GHC.CString.unpackAppendCString#
                               Language.PureScript.Environment.$fFromJSONDataDeclType2
                               (GHC.CString.unpackAppendCString#
                                  Language.PureScript.Environment.$fFromJSONDataDeclType1
                                  (case wild of wild1 {
                                     Data.Aeson.Types.Internal.Object ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList10
                                     Data.Aeson.Types.Internal.String ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList8
                                     Data.Aeson.Types.Internal.Number ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList6
                                     Data.Aeson.Types.Internal.Bool ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList4
                                     Data.Aeson.Types.Internal.Null
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList1 })))
                      } in
                      (\ @ f4 :: * -> *
                         @ r
                         (path :: Data.Aeson.Types.Internal.JSONPath)
                         (kf :: Data.Aeson.Types.Internal.Failure f4 r)
                         (_ks :: Data.Aeson.Types.Internal.Success
                                   [Language.PureScript.Environment.DataDeclType] f4 r) ->
                       kf
                         (GHC.List.reverse @ Data.Aeson.Types.Internal.JSONPathElement path)
                         msg5)
                        `cast`
                      (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                <[Language.PureScript.Environment.DataDeclType]>_R))
                   Data.Aeson.Types.Internal.Array a2
                   -> case a2 of wild1 { Data.Vector.Vector dt dt1 dt2 ->
                      letrec {
                        $wgo :: GHC.Prim.Int# -> [Data.Aeson.Types.Internal.Value]
                          {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                        = \ (ww :: GHC.Prim.Int#) ->
                          case GHC.Prim.>=# ww dt1 of lwild {
                            DEFAULT
                            -> case GHC.Prim.indexArray#
                                      @ Data.Aeson.Types.Internal.Value
                                      dt2
                                      (GHC.Prim.+# dt ww) of ds3 { Unit# ipv ->
                               GHC.Types.:
                                 @ Data.Aeson.Types.Internal.Value
                                 ipv
                                 ($wgo (GHC.Prim.+# ww 1#)) }
                            1# -> GHC.Types.[] @ Data.Aeson.Types.Internal.Value }
                      } in
                      Language.PureScript.Environment.$fFromJSONDataDeclType_go
                        0#
                        ($wgo 0#) } }) -}
c291d940fae22a3f1400d8c90f26bdd4
  $fFromJSONDataDeclType_go ::
    GHC.Prim.Int#
    -> [Data.Aeson.Types.Internal.Value]
    -> Data.Aeson.Types.Internal.Parser
         [Language.PureScript.Environment.DataDeclType]
  {- Arity: 2, Strictness: <L,U><S,1*U> -}
ef672654cffb5adb82634076fd85ad4a
  $fFromJSONFunctionalDependency ::
    Data.Aeson.Types.FromJSON.FromJSON
      Language.PureScript.Environment.FunctionalDependency
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Environment.FunctionalDependency
                  Language.PureScript.Environment.$fFromJSONFunctionalDependency_$cparseJSON
                  Language.PureScript.Environment.$fFromJSONFunctionalDependency_$cparseJSONList -}
ef672654cffb5adb82634076fd85ad4a
  $fFromJSONFunctionalDependency1 ::
    Data.Aeson.Types.Internal.Object
    -> Data.Aeson.Types.Internal.Parser
         Language.PureScript.Environment.FunctionalDependency
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (o :: Data.Aeson.Types.Internal.Object) ->
                 let {
                   m :: Data.Aeson.Types.Internal.Parser [GHC.Types.Int]
                   = case Language.PureScript.Environment.$fFromJSONFunctionalDependency9 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                     case Data.Aeson.Types.FromJSON.$w$slookup
                            @ Data.Aeson.Types.Internal.Value
                            ww1
                            ww2
                            ww3
                            o of wild {
                       GHC.Base.Nothing
                       -> Language.PureScript.Environment.$fFromJSONFunctionalDependency11
                            `cast`
                          (Sym (Data.Aeson.Types.Internal.N:Parser[0] <[GHC.Types.Int]>_R))
                       GHC.Base.Just v
                       -> let {
                            p1 :: Data.Aeson.Types.Internal.Parser [GHC.Types.Int]
                            = Data.Aeson.Types.FromJSON.$fFromJSON1IntMap_$cparseJSONList v
                          } in
                          (\ @ f4 :: * -> *
                             @ r
                             (path :: Data.Aeson.Types.Internal.JSONPath)
                             (kf :: Data.Aeson.Types.Internal.Failure f4 r)[OneShot]
                             (ks :: Data.Aeson.Types.Internal.Success
                                      [GHC.Types.Int] f4 r)[OneShot] ->
                           p1
                             `cast`
                           (Data.Aeson.Types.Internal.N:Parser[0] <[GHC.Types.Int]>_R)
                             @ f4
                             @ r
                             (GHC.Types.:
                                @ Data.Aeson.Types.Internal.JSONPathElement
                                Language.PureScript.Environment.$fFromJSONFunctionalDependency_pathElem1
                                path)
                             kf
                             ks)
                            `cast`
                          (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                    <[GHC.Types.Int]>_R)) } }
                 } in
                 let {
                   e :: Data.Aeson.Types.Internal.Parser [GHC.Types.Int]
                   = case Language.PureScript.Environment.$fFromJSONFunctionalDependency2 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                     case Data.Aeson.Types.FromJSON.$w$slookup
                            @ Data.Aeson.Types.Internal.Value
                            ww1
                            ww2
                            ww3
                            o of wild {
                       GHC.Base.Nothing
                       -> Language.PureScript.Environment.$fFromJSONFunctionalDependency4
                            `cast`
                          (Sym (Data.Aeson.Types.Internal.N:Parser[0] <[GHC.Types.Int]>_R))
                       GHC.Base.Just v
                       -> let {
                            p1 :: Data.Aeson.Types.Internal.Parser [GHC.Types.Int]
                            = Data.Aeson.Types.FromJSON.$fFromJSON1IntMap_$cparseJSONList v
                          } in
                          (\ @ f4 :: * -> *
                             @ r
                             (path :: Data.Aeson.Types.Internal.JSONPath)
                             (kf :: Data.Aeson.Types.Internal.Failure f4 r)[OneShot]
                             (ks :: Data.Aeson.Types.Internal.Success
                                      [GHC.Types.Int] f4 r)[OneShot] ->
                           p1
                             `cast`
                           (Data.Aeson.Types.Internal.N:Parser[0] <[GHC.Types.Int]>_R)
                             @ f4
                             @ r
                             (GHC.Types.:
                                @ Data.Aeson.Types.Internal.JSONPathElement
                                Language.PureScript.Environment.$fFromJSONFunctionalDependency_pathElem16
                                path)
                             kf
                             ks)
                            `cast`
                          (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                    <[GHC.Types.Int]>_R)) } }
                 } in
                 (\ @ f4 :: * -> *
                    @ r
                    (path :: Data.Aeson.Types.Internal.JSONPath)
                    (kf :: Data.Aeson.Types.Internal.Failure f4 r)
                    (ks :: Data.Aeson.Types.Internal.Success
                             Language.PureScript.Environment.FunctionalDependency f4 r) ->
                  m `cast`
                  (Data.Aeson.Types.Internal.N:Parser[0] <[GHC.Types.Int]>_R)
                    @ f4
                    @ r
                    path
                    kf
                    (\ (a1 :: [GHC.Types.Int]) ->
                     e `cast`
                     (Data.Aeson.Types.Internal.N:Parser[0] <[GHC.Types.Int]>_R)
                       @ f4
                       @ r
                       path
                       kf
                       (\ (a2 :: [GHC.Types.Int]) ->
                        ks (Language.PureScript.Environment.FunctionalDependency a1 a2))))
                   `cast`
                 (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                           <Language.PureScript.Environment.FunctionalDependency>_R))) -}
fd2d45fabaeb6475f2d29fb083fe6211
  $fFromJSONFunctionalDependency10 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("determiners"#) -}
f81ed8876f5f7d3f8f86420522e38533
  $fFromJSONFunctionalDependency11 ::
    Data.Aeson.Types.Internal.JSONPath
    -> Data.Aeson.Types.Internal.Failure f4 r
    -> Data.Aeson.Types.Internal.Success [GHC.Types.Int] f4 r
    -> f4 r
  {- Arity: 3, Strictness: <L,1*U><C(C(S)),1*C1(C1(U))><L,A>,
     Unfolding: InlineRule (3, True, False)
                (\ @ f4 :: * -> *
                   @ r
                   (path :: Data.Aeson.Types.Internal.JSONPath)
                   (kf :: Data.Aeson.Types.Internal.Failure f4 r)
                   (_ks :: Data.Aeson.Types.Internal.Success [GHC.Types.Int] f4 r) ->
                 kf
                   (GHC.List.reverse @ Data.Aeson.Types.Internal.JSONPathElement path)
                   Language.PureScript.Environment.$fFromJSONFunctionalDependency_msg1) -}
04bf341fedada8522bd0efebc3482aac
  $fFromJSONFunctionalDependency12 :: [GHC.Types.Char]
  {- Unfolding: (case Data.Text.Show.$w$cshow
                        Language.PureScript.Environment.$fFromJSONFunctionalDependency9 of ww { (#,#) ww1 ww2 ->
                 GHC.Base.++_$s++
                   @ GHC.Types.Char
                   Language.PureScript.Environment.$fFromJSONFunctionalDependency6
                   ww1
                   ww2 }) -}
00c3daa774491e808a782175b4afa0d9
  $fFromJSONFunctionalDependency13 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Environment.$fFromJSONFunctionalDependency14) -}
f19a874a587e8c64e94f2f6f2d20f74e
  $fFromJSONFunctionalDependency14 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("FunctionalDependency"#) -}
0bf16604718bfd80ced3511145727833
  $fFromJSONFunctionalDependency2 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Environment.$fFromJSONFunctionalDependency3) -}
ed8264e263a5015d55d19084111e4ce3
  $fFromJSONFunctionalDependency3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("determined"#) -}
9df4b69723ed515ef2ce76454bf6fb01
  $fFromJSONFunctionalDependency4 ::
    Data.Aeson.Types.Internal.JSONPath
    -> Data.Aeson.Types.Internal.Failure f4 r
    -> Data.Aeson.Types.Internal.Success [GHC.Types.Int] f4 r
    -> f4 r
  {- Arity: 3, Strictness: <L,1*U><C(C(S)),1*C1(C1(U))><L,A>,
     Unfolding: InlineRule (3, True, False)
                (\ @ f4 :: * -> *
                   @ r
                   (path :: Data.Aeson.Types.Internal.JSONPath)
                   (kf :: Data.Aeson.Types.Internal.Failure f4 r)
                   (_ks :: Data.Aeson.Types.Internal.Success [GHC.Types.Int] f4 r) ->
                 kf
                   (GHC.List.reverse @ Data.Aeson.Types.Internal.JSONPathElement path)
                   Language.PureScript.Environment.$fFromJSONFunctionalDependency_msg19) -}
a9de392d3dec848273c8cb63878cad23
  $fFromJSONFunctionalDependency5 :: [GHC.Types.Char]
  {- Unfolding: (case Data.Text.Show.$w$cshow
                        Language.PureScript.Environment.$fFromJSONFunctionalDependency2 of ww { (#,#) ww1 ww2 ->
                 GHC.Base.++_$s++
                   @ GHC.Types.Char
                   Language.PureScript.Environment.$fFromJSONFunctionalDependency6
                   ww1
                   ww2 }) -}
30bb605dfee7f43ccd435544954069fa
  $fFromJSONFunctionalDependency6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Environment.$fFromJSONFunctionalDependency7) -}
f54e5f5ecc46aa90a0dadedb350f37d0
  $fFromJSONFunctionalDependency7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (" not present"#) -}
5a7bba0c34a7e203b6fe62d6f70b13ca
  $fFromJSONFunctionalDependency8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("key "#) -}
08b845e91db33462f88957bd3660dde3
  $fFromJSONFunctionalDependency9 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Environment.$fFromJSONFunctionalDependency10) -}
ef672654cffb5adb82634076fd85ad4a
  $fFromJSONFunctionalDependency_$cparseJSON ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         Language.PureScript.Environment.FunctionalDependency
  {- Arity: 1,
     Unfolding: (Data.Aeson.Types.FromJSON.withObject
                   @ Language.PureScript.Environment.FunctionalDependency
                   Language.PureScript.Environment.$fFromJSONFunctionalDependency13
                   Language.PureScript.Environment.$fFromJSONFunctionalDependency1) -}
ef672654cffb5adb82634076fd85ad4a
  $fFromJSONFunctionalDependency_$cparseJSONList ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         [Language.PureScript.Environment.FunctionalDependency]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Data.Aeson.Types.Internal.Value) ->
                 case ds of wild {
                   DEFAULT
                   -> let {
                        msg5 :: GHC.Base.String
                        = GHC.CString.unpackAppendCString#
                            Language.PureScript.Environment.$fFromJSONDataDeclType3
                            (GHC.CString.unpackAppendCString#
                               Language.PureScript.Environment.$fFromJSONDataDeclType2
                               (GHC.CString.unpackAppendCString#
                                  Language.PureScript.Environment.$fFromJSONDataDeclType1
                                  (case wild of wild1 {
                                     Data.Aeson.Types.Internal.Object ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList10
                                     Data.Aeson.Types.Internal.String ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList8
                                     Data.Aeson.Types.Internal.Number ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList6
                                     Data.Aeson.Types.Internal.Bool ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList4
                                     Data.Aeson.Types.Internal.Null
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList1 })))
                      } in
                      (\ @ f4 :: * -> *
                         @ r
                         (path :: Data.Aeson.Types.Internal.JSONPath)
                         (kf :: Data.Aeson.Types.Internal.Failure f4 r)
                         (_ks :: Data.Aeson.Types.Internal.Success
                                   [Language.PureScript.Environment.FunctionalDependency] f4 r) ->
                       kf
                         (GHC.List.reverse @ Data.Aeson.Types.Internal.JSONPathElement path)
                         msg5)
                        `cast`
                      (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                <[Language.PureScript.Environment.FunctionalDependency]>_R))
                   Data.Aeson.Types.Internal.Array a2
                   -> case a2 of wild1 { Data.Vector.Vector dt dt1 dt2 ->
                      letrec {
                        $wgo :: GHC.Prim.Int# -> [Data.Aeson.Types.Internal.Value]
                          {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                        = \ (ww :: GHC.Prim.Int#) ->
                          case GHC.Prim.>=# ww dt1 of lwild {
                            DEFAULT
                            -> case GHC.Prim.indexArray#
                                      @ Data.Aeson.Types.Internal.Value
                                      dt2
                                      (GHC.Prim.+# dt ww) of ds3 { Unit# ipv ->
                               GHC.Types.:
                                 @ Data.Aeson.Types.Internal.Value
                                 ipv
                                 ($wgo (GHC.Prim.+# ww 1#)) }
                            1# -> GHC.Types.[] @ Data.Aeson.Types.Internal.Value }
                      } in
                      Language.PureScript.Environment.$fFromJSONFunctionalDependency_go
                        0#
                        ($wgo 0#) } }) -}
ef672654cffb5adb82634076fd85ad4a
  $fFromJSONFunctionalDependency_go ::
    GHC.Prim.Int#
    -> [Data.Aeson.Types.Internal.Value]
    -> Data.Aeson.Types.Internal.Parser
         [Language.PureScript.Environment.FunctionalDependency]
  {- Arity: 2, Strictness: <L,U><S,1*U> -}
fee51969862392a061fd3154cabdba05
  $fFromJSONFunctionalDependency_msg1 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackAppendCString#
                   Language.PureScript.Environment.$fFromJSONFunctionalDependency8
                   Language.PureScript.Environment.$fFromJSONFunctionalDependency12) -}
43e9fd07a8a9b42cb537d66fefb609a2
  $fFromJSONFunctionalDependency_msg19 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackAppendCString#
                   Language.PureScript.Environment.$fFromJSONFunctionalDependency8
                   Language.PureScript.Environment.$fFromJSONFunctionalDependency5) -}
14ed42dbb5824d37e76b37a0561492e2
  $fFromJSONFunctionalDependency_pathElem1 ::
    Data.Aeson.Types.Internal.JSONPathElement
  {- Strictness: m1,
     Unfolding: (Data.Aeson.Types.Internal.Key
                   Language.PureScript.Environment.$fFromJSONFunctionalDependency9) -}
61ba299b5a98502124e600eed3a9fee2
  $fFromJSONFunctionalDependency_pathElem16 ::
    Data.Aeson.Types.Internal.JSONPathElement
  {- Strictness: m1,
     Unfolding: (Data.Aeson.Types.Internal.Key
                   Language.PureScript.Environment.$fFromJSONFunctionalDependency2) -}
0a0df18a3a5bbdd9f1dda59baf0fb992
  $fFromJSONTypeKind ::
    Data.Aeson.Types.FromJSON.FromJSON
      Language.PureScript.Environment.TypeKind
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Environment.TypeKind
                  Language.PureScript.Environment.$fFromJSONTypeKind_$cparseJSON
                  Language.PureScript.Environment.$fFromJSONTypeKind_$cparseJSONList -}
0a0df18a3a5bbdd9f1dda59baf0fb992
  $fFromJSONTypeKind_$cparseJSON ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         Language.PureScript.Environment.TypeKind
  {- Arity: 1, Strictness: <S,1*U> -}
0a0df18a3a5bbdd9f1dda59baf0fb992
  $fFromJSONTypeKind_$cparseJSONList ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         [Language.PureScript.Environment.TypeKind]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Data.Aeson.Types.Internal.Value) ->
                 case ds of wild {
                   DEFAULT
                   -> let {
                        msg5 :: GHC.Base.String
                        = GHC.CString.unpackAppendCString#
                            Language.PureScript.Environment.$fFromJSONDataDeclType3
                            (GHC.CString.unpackAppendCString#
                               Language.PureScript.Environment.$fFromJSONDataDeclType2
                               (GHC.CString.unpackAppendCString#
                                  Language.PureScript.Environment.$fFromJSONDataDeclType1
                                  (case wild of wild1 {
                                     Data.Aeson.Types.Internal.Object ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList10
                                     Data.Aeson.Types.Internal.String ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList8
                                     Data.Aeson.Types.Internal.Number ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList6
                                     Data.Aeson.Types.Internal.Bool ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList4
                                     Data.Aeson.Types.Internal.Null
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList1 })))
                      } in
                      (\ @ f4 :: * -> *
                         @ r
                         (path :: Data.Aeson.Types.Internal.JSONPath)
                         (kf :: Data.Aeson.Types.Internal.Failure f4 r)
                         (_ks :: Data.Aeson.Types.Internal.Success
                                   [Language.PureScript.Environment.TypeKind] f4 r) ->
                       kf
                         (GHC.List.reverse @ Data.Aeson.Types.Internal.JSONPathElement path)
                         msg5)
                        `cast`
                      (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                <[Language.PureScript.Environment.TypeKind]>_R))
                   Data.Aeson.Types.Internal.Array a2
                   -> case a2 of wild1 { Data.Vector.Vector dt dt1 dt2 ->
                      letrec {
                        $wgo :: GHC.Prim.Int# -> [Data.Aeson.Types.Internal.Value]
                          {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                        = \ (ww :: GHC.Prim.Int#) ->
                          case GHC.Prim.>=# ww dt1 of lwild {
                            DEFAULT
                            -> case GHC.Prim.indexArray#
                                      @ Data.Aeson.Types.Internal.Value
                                      dt2
                                      (GHC.Prim.+# dt ww) of ds3 { Unit# ipv ->
                               GHC.Types.:
                                 @ Data.Aeson.Types.Internal.Value
                                 ipv
                                 ($wgo (GHC.Prim.+# ww 1#)) }
                            1# -> GHC.Types.[] @ Data.Aeson.Types.Internal.Value }
                      } in
                      Language.PureScript.Environment.$fFromJSONTypeKind_go
                        0#
                        ($wgo 0#) } }) -}
0a0df18a3a5bbdd9f1dda59baf0fb992
  $fFromJSONTypeKind_go ::
    GHC.Prim.Int#
    -> [Data.Aeson.Types.Internal.Value]
    -> Data.Aeson.Types.Internal.Parser
         [Language.PureScript.Environment.TypeKind]
  {- Arity: 2, Strictness: <L,U><S,1*U> -}
c291d940fae22a3f1400d8c90f26bdd4
  $fGenericDataDeclType ::
    GHC.Generics.Generic Language.PureScript.Environment.DataDeclType
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Environment.DataDeclType
                  Language.PureScript.Environment.$fGenericDataDeclType1
                    `cast`
                  (forall (x :: <*>_N).
                   <Language.PureScript.Environment.DataDeclType>_R
                   ->_R (Sym (GHC.Generics.N:M1[0]
                                  <*>_N
                                  <GHC.Generics.D>_P
                                  <'GHC.Generics.MetaData
                                     "DataDeclType"
                                     "Language.PureScript.Environment"
                                     "purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"
                                     'GHC.Types.False>_P
                                  <GHC.Generics.M1
                                     GHC.Generics.C
                                     ('GHC.Generics.MetaCons
                                        "Data" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                     GHC.Generics.U1
                                   GHC.Generics.:+: GHC.Generics.M1
                                                      GHC.Generics.C
                                                      ('GHC.Generics.MetaCons
                                                         "Newtype"
                                                         'GHC.Generics.PrefixI
                                                         'GHC.Types.False)
                                                      GHC.Generics.U1>_R) ; Sub (Sym (Language.PureScript.Environment.Rep_DataDeclType[0]))) <x>_N)
                  Language.PureScript.Environment.$fGenericDataDeclType_$cto -}
c291d940fae22a3f1400d8c90f26bdd4
  $fGenericDataDeclType1 ::
    Language.PureScript.Environment.DataDeclType
    -> (GHC.Generics.:+:)
         (GHC.Generics.M1
            GHC.Generics.C
            ('GHC.Generics.MetaCons
               "Data" 'GHC.Generics.PrefixI 'GHC.Types.False)
            GHC.Generics.U1)
         (GHC.Generics.M1
            GHC.Generics.C
            ('GHC.Generics.MetaCons
               "Newtype" 'GHC.Generics.PrefixI 'GHC.Types.False)
            GHC.Generics.U1)
         x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ x (x1 :: Language.PureScript.Environment.DataDeclType) ->
                 case x1 of wild {
                   Language.PureScript.Environment.Data
                   -> Language.PureScript.Environment.$fGenericDataDeclType3 @ x
                   Language.PureScript.Environment.Newtype
                   -> Language.PureScript.Environment.$fGenericDataDeclType2 @ x }) -}
56deeac9adc337e70f352f56c70ad94b
  $fGenericDataDeclType2 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Data" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Newtype" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (\ @ x ->
                 GHC.Generics.R1
                   @ *
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Data" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Newtype" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ x
                   (GHC.Generics.U1 @ * @ x)
                     `cast`
                   (Sym (GHC.Generics.N:M1[0]
                             <*>_N
                             <GHC.Generics.C>_P
                             <'GHC.Generics.MetaCons
                                "Newtype" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                             <GHC.Generics.U1>_R) <x>_N)) -}
a0498a402daccfbc949caecb06d478d9
  $fGenericDataDeclType3 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Data" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Newtype" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (\ @ x ->
                 GHC.Generics.L1
                   @ *
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Data" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Newtype" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ x
                   (GHC.Generics.U1 @ * @ x)
                     `cast`
                   (Sym (GHC.Generics.N:M1[0]
                             <*>_N
                             <GHC.Generics.C>_P
                             <'GHC.Generics.MetaCons
                                "Data" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                             <GHC.Generics.U1>_R) <x>_N)) -}
c291d940fae22a3f1400d8c90f26bdd4
  $fGenericDataDeclType_$cto ::
    GHC.Generics.Rep Language.PureScript.Environment.DataDeclType x
    -> Language.PureScript.Environment.DataDeclType
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ x
                   (ds :: GHC.Generics.Rep
                            Language.PureScript.Environment.DataDeclType x) ->
                 case ds
                        `cast`
                      ((Sub (Language.PureScript.Environment.Rep_DataDeclType[0]) ; GHC.Generics.N:M1[0]
                                                                                        <*>_N
                                                                                        <GHC.Generics.D>_P
                                                                                        <'GHC.Generics.MetaData
                                                                                           "DataDeclType"
                                                                                           "Language.PureScript.Environment"
                                                                                           "purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"
                                                                                           'GHC.Types.False>_P
                                                                                        <GHC.Generics.M1
                                                                                           GHC.Generics.C
                                                                                           ('GHC.Generics.MetaCons
                                                                                              "Data"
                                                                                              'GHC.Generics.PrefixI
                                                                                              'GHC.Types.False)
                                                                                           GHC.Generics.U1
                                                                                         GHC.Generics.:+: GHC.Generics.M1
                                                                                                            GHC.Generics.C
                                                                                                            ('GHC.Generics.MetaCons
                                                                                                               "Newtype"
                                                                                                               'GHC.Generics.PrefixI
                                                                                                               'GHC.Types.False)
                                                                                                            GHC.Generics.U1>_R) <x>_N) of wild {
                   GHC.Generics.L1 ds1
                   -> case ds1
                             `cast`
                           (GHC.Generics.N:M1[0]
                                <*>_N
                                <GHC.Generics.C>_P
                                <'GHC.Generics.MetaCons
                                   "Data" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                <GHC.Generics.U1>_R <x>_N) of wild1 { GHC.Generics.U1 ->
                      Language.PureScript.Environment.Data }
                   GHC.Generics.R1 ds1
                   -> case ds1
                             `cast`
                           (GHC.Generics.N:M1[0]
                                <*>_N
                                <GHC.Generics.C>_P
                                <'GHC.Generics.MetaCons
                                   "Newtype" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                <GHC.Generics.U1>_R <x>_N) of wild1 { GHC.Generics.U1 ->
                      Language.PureScript.Environment.Newtype } }) -}
c291d940fae22a3f1400d8c90f26bdd4
  $fGenericEnvironment ::
    GHC.Generics.Generic Language.PureScript.Environment.Environment
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Environment.Environment
                  Language.PureScript.Environment.$fGenericEnvironment1
                    `cast`
                  (forall (x :: <*>_N).
                   <Language.PureScript.Environment.Environment>_R
                   ->_R (Sym (GHC.Generics.N:M1[0]
                                  <*>_N
                                  <GHC.Generics.D>_P
                                  <'GHC.Generics.MetaData
                                     "Environment"
                                     "Language.PureScript.Environment"
                                     "purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"
                                     'GHC.Types.False>_P
                                  <GHC.Generics.M1
                                     GHC.Generics.C
                                     ('GHC.Generics.MetaCons
                                        "Environment" 'GHC.Generics.PrefixI 'GHC.Types.True)
                                     ((GHC.Generics.M1
                                         GHC.Generics.S
                                         ('GHC.Generics.MetaSel
                                            ('GHC.Base.Just "names")
                                            'GHC.Generics.NoSourceUnpackedness
                                            'GHC.Generics.NoSourceStrictness
                                            'GHC.Generics.DecidedLazy)
                                         (GHC.Generics.K1
                                            GHC.Generics.R
                                            (Data.Map.Internal.Map
                                               (Language.PureScript.Names.Qualified
                                                  Language.PureScript.Names.Ident)
                                               (Language.PureScript.Types.Type,
                                                Language.PureScript.Environment.NameKind,
                                                Language.PureScript.Environment.NameVisibility)))
                                       GHC.Generics.:*: (GHC.Generics.M1
                                                           GHC.Generics.S
                                                           ('GHC.Generics.MetaSel
                                                              ('GHC.Base.Just "types")
                                                              'GHC.Generics.NoSourceUnpackedness
                                                              'GHC.Generics.NoSourceStrictness
                                                              'GHC.Generics.DecidedLazy)
                                                           (GHC.Generics.K1
                                                              GHC.Generics.R
                                                              (Data.Map.Internal.Map
                                                                 (Language.PureScript.Names.Qualified
                                                                    (Language.PureScript.Names.ProperName
                                                                       'Language.PureScript.Names.TypeName))
                                                                 (Language.PureScript.Kinds.Kind,
                                                                  Language.PureScript.Environment.TypeKind)))
                                                         GHC.Generics.:*: GHC.Generics.M1
                                                                            GHC.Generics.S
                                                                            ('GHC.Generics.MetaSel
                                                                               ('GHC.Base.Just
                                                                                  "dataConstructors")
                                                                               'GHC.Generics.NoSourceUnpackedness
                                                                               'GHC.Generics.NoSourceStrictness
                                                                               'GHC.Generics.DecidedLazy)
                                                                            (GHC.Generics.K1
                                                                               GHC.Generics.R
                                                                               (Data.Map.Internal.Map
                                                                                  (Language.PureScript.Names.Qualified
                                                                                     (Language.PureScript.Names.ProperName
                                                                                        'Language.PureScript.Names.ConstructorName))
                                                                                  (Language.PureScript.Environment.DataDeclType,
                                                                                   Language.PureScript.Names.ProperName
                                                                                     'Language.PureScript.Names.TypeName,
                                                                                   Language.PureScript.Types.Type,
                                                                                   [Language.PureScript.Names.Ident])))))
                                      GHC.Generics.:*: ((GHC.Generics.M1
                                                           GHC.Generics.S
                                                           ('GHC.Generics.MetaSel
                                                              ('GHC.Base.Just "typeSynonyms")
                                                              'GHC.Generics.NoSourceUnpackedness
                                                              'GHC.Generics.NoSourceStrictness
                                                              'GHC.Generics.DecidedLazy)
                                                           (GHC.Generics.K1
                                                              GHC.Generics.R
                                                              (Data.Map.Internal.Map
                                                                 (Language.PureScript.Names.Qualified
                                                                    (Language.PureScript.Names.ProperName
                                                                       'Language.PureScript.Names.TypeName))
                                                                 ([(Data.Text.Internal.Text,
                                                                    GHC.Base.Maybe
                                                                      Language.PureScript.Kinds.Kind)],
                                                                  Language.PureScript.Types.Type)))
                                                         GHC.Generics.:*: GHC.Generics.M1
                                                                            GHC.Generics.S
                                                                            ('GHC.Generics.MetaSel
                                                                               ('GHC.Base.Just
                                                                                  "typeClassDictionaries")
                                                                               'GHC.Generics.NoSourceUnpackedness
                                                                               'GHC.Generics.NoSourceStrictness
                                                                               'GHC.Generics.DecidedLazy)
                                                                            (GHC.Generics.K1
                                                                               GHC.Generics.R
                                                                               (Data.Map.Internal.Map
                                                                                  (GHC.Base.Maybe
                                                                                     Language.PureScript.Names.ModuleName)
                                                                                  (Data.Map.Internal.Map
                                                                                     (Language.PureScript.Names.Qualified
                                                                                        (Language.PureScript.Names.ProperName
                                                                                           'Language.PureScript.Names.ClassName))
                                                                                     (Data.Map.Internal.Map
                                                                                        (Language.PureScript.Names.Qualified
                                                                                           Language.PureScript.Names.Ident)
                                                                                        Language.PureScript.TypeClassDictionaries.NamedDict)))))
                                                        GHC.Generics.:*: (GHC.Generics.M1
                                                                            GHC.Generics.S
                                                                            ('GHC.Generics.MetaSel
                                                                               ('GHC.Base.Just
                                                                                  "typeClasses")
                                                                               'GHC.Generics.NoSourceUnpackedness
                                                                               'GHC.Generics.NoSourceStrictness
                                                                               'GHC.Generics.DecidedLazy)
                                                                            (GHC.Generics.K1
                                                                               GHC.Generics.R
                                                                               (Data.Map.Internal.Map
                                                                                  (Language.PureScript.Names.Qualified
                                                                                     (Language.PureScript.Names.ProperName
                                                                                        'Language.PureScript.Names.ClassName))
                                                                                  Language.PureScript.Environment.TypeClassData))
                                                                          GHC.Generics.:*: GHC.Generics.M1
                                                                                             GHC.Generics.S
                                                                                             ('GHC.Generics.MetaSel
                                                                                                ('GHC.Base.Just
                                                                                                   "kinds")
                                                                                                'GHC.Generics.NoSourceUnpackedness
                                                                                                'GHC.Generics.NoSourceStrictness
                                                                                                'GHC.Generics.DecidedLazy)
                                                                                             (GHC.Generics.K1
                                                                                                GHC.Generics.R
                                                                                                (Data.Set.Internal.Set
                                                                                                   (Language.PureScript.Names.Qualified
                                                                                                      (Language.PureScript.Names.ProperName
                                                                                                         'Language.PureScript.Names.KindName)))))))>_R) ; Sub (Sym (Language.PureScript.Environment.Rep_Environment[0]))) <x>_N)
                  Language.PureScript.Environment.$fGenericEnvironment_$cto -}
c291d940fae22a3f1400d8c90f26bdd4
  $fGenericEnvironment1 ::
    Language.PureScript.Environment.Environment
    -> GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Environment" 'GHC.Generics.PrefixI 'GHC.Types.True)
         ((GHC.Generics.M1
             GHC.Generics.S
             ('GHC.Generics.MetaSel
                ('GHC.Base.Just "names")
                'GHC.Generics.NoSourceUnpackedness
                'GHC.Generics.NoSourceStrictness
                'GHC.Generics.DecidedLazy)
             (GHC.Generics.K1
                GHC.Generics.R
                (Data.Map.Internal.Map
                   (Language.PureScript.Names.Qualified
                      Language.PureScript.Names.Ident)
                   (Language.PureScript.Types.Type,
                    Language.PureScript.Environment.NameKind,
                    Language.PureScript.Environment.NameVisibility)))
           GHC.Generics.:*: (GHC.Generics.M1
                               GHC.Generics.S
                               ('GHC.Generics.MetaSel
                                  ('GHC.Base.Just "types")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy)
                               (GHC.Generics.K1
                                  GHC.Generics.R
                                  (Data.Map.Internal.Map
                                     (Language.PureScript.Names.Qualified
                                        (Language.PureScript.Names.ProperName
                                           'Language.PureScript.Names.TypeName))
                                     (Language.PureScript.Kinds.Kind,
                                      Language.PureScript.Environment.TypeKind)))
                             GHC.Generics.:*: GHC.Generics.M1
                                                GHC.Generics.S
                                                ('GHC.Generics.MetaSel
                                                   ('GHC.Base.Just "dataConstructors")
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy)
                                                (GHC.Generics.K1
                                                   GHC.Generics.R
                                                   (Data.Map.Internal.Map
                                                      (Language.PureScript.Names.Qualified
                                                         (Language.PureScript.Names.ProperName
                                                            'Language.PureScript.Names.ConstructorName))
                                                      (Language.PureScript.Environment.DataDeclType,
                                                       Language.PureScript.Names.ProperName
                                                         'Language.PureScript.Names.TypeName,
                                                       Language.PureScript.Types.Type,
                                                       [Language.PureScript.Names.Ident])))))
          GHC.Generics.:*: ((GHC.Generics.M1
                               GHC.Generics.S
                               ('GHC.Generics.MetaSel
                                  ('GHC.Base.Just "typeSynonyms")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy)
                               (GHC.Generics.K1
                                  GHC.Generics.R
                                  (Data.Map.Internal.Map
                                     (Language.PureScript.Names.Qualified
                                        (Language.PureScript.Names.ProperName
                                           'Language.PureScript.Names.TypeName))
                                     ([(Data.Text.Internal.Text,
                                        GHC.Base.Maybe Language.PureScript.Kinds.Kind)],
                                      Language.PureScript.Types.Type)))
                             GHC.Generics.:*: GHC.Generics.M1
                                                GHC.Generics.S
                                                ('GHC.Generics.MetaSel
                                                   ('GHC.Base.Just "typeClassDictionaries")
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy)
                                                (GHC.Generics.K1
                                                   GHC.Generics.R
                                                   (Data.Map.Internal.Map
                                                      (GHC.Base.Maybe
                                                         Language.PureScript.Names.ModuleName)
                                                      (Data.Map.Internal.Map
                                                         (Language.PureScript.Names.Qualified
                                                            (Language.PureScript.Names.ProperName
                                                               'Language.PureScript.Names.ClassName))
                                                         (Data.Map.Internal.Map
                                                            (Language.PureScript.Names.Qualified
                                                               Language.PureScript.Names.Ident)
                                                            Language.PureScript.TypeClassDictionaries.NamedDict)))))
                            GHC.Generics.:*: (GHC.Generics.M1
                                                GHC.Generics.S
                                                ('GHC.Generics.MetaSel
                                                   ('GHC.Base.Just "typeClasses")
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy)
                                                (GHC.Generics.K1
                                                   GHC.Generics.R
                                                   (Data.Map.Internal.Map
                                                      (Language.PureScript.Names.Qualified
                                                         (Language.PureScript.Names.ProperName
                                                            'Language.PureScript.Names.ClassName))
                                                      Language.PureScript.Environment.TypeClassData))
                                              GHC.Generics.:*: GHC.Generics.M1
                                                                 GHC.Generics.S
                                                                 ('GHC.Generics.MetaSel
                                                                    ('GHC.Base.Just "kinds")
                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                    'GHC.Generics.NoSourceStrictness
                                                                    'GHC.Generics.DecidedLazy)
                                                                 (GHC.Generics.K1
                                                                    GHC.Generics.R
                                                                    (Data.Set.Internal.Set
                                                                       (Language.PureScript.Names.Qualified
                                                                          (Language.PureScript.Names.ProperName
                                                                             'Language.PureScript.Names.KindName)))))))
         x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U,U,U,U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ x (x1 :: Language.PureScript.Environment.Environment) ->
                 case x1 of wild { Language.PureScript.Environment.Environment g1 g2 g3 g4 g5 g6 g7 ->
                 (GHC.Generics.:*:
                    @ *
                    @ (GHC.Generics.M1
                         GHC.Generics.S
                         ('GHC.Generics.MetaSel
                            ('GHC.Base.Just "names")
                            'GHC.Generics.NoSourceUnpackedness
                            'GHC.Generics.NoSourceStrictness
                            'GHC.Generics.DecidedLazy)
                         (GHC.Generics.K1
                            GHC.Generics.R
                            (Data.Map.Internal.Map
                               (Language.PureScript.Names.Qualified
                                  Language.PureScript.Names.Ident)
                               (Language.PureScript.Types.Type,
                                Language.PureScript.Environment.NameKind,
                                Language.PureScript.Environment.NameVisibility)))
                       GHC.Generics.:*: (GHC.Generics.M1
                                           GHC.Generics.S
                                           ('GHC.Generics.MetaSel
                                              ('GHC.Base.Just "types")
                                              'GHC.Generics.NoSourceUnpackedness
                                              'GHC.Generics.NoSourceStrictness
                                              'GHC.Generics.DecidedLazy)
                                           (GHC.Generics.K1
                                              GHC.Generics.R
                                              (Data.Map.Internal.Map
                                                 (Language.PureScript.Names.Qualified
                                                    (Language.PureScript.Names.ProperName
                                                       'Language.PureScript.Names.TypeName))
                                                 (Language.PureScript.Kinds.Kind,
                                                  Language.PureScript.Environment.TypeKind)))
                                         GHC.Generics.:*: GHC.Generics.M1
                                                            GHC.Generics.S
                                                            ('GHC.Generics.MetaSel
                                                               ('GHC.Base.Just "dataConstructors")
                                                               'GHC.Generics.NoSourceUnpackedness
                                                               'GHC.Generics.NoSourceStrictness
                                                               'GHC.Generics.DecidedLazy)
                                                            (GHC.Generics.K1
                                                               GHC.Generics.R
                                                               (Data.Map.Internal.Map
                                                                  (Language.PureScript.Names.Qualified
                                                                     (Language.PureScript.Names.ProperName
                                                                        'Language.PureScript.Names.ConstructorName))
                                                                  (Language.PureScript.Environment.DataDeclType,
                                                                   Language.PureScript.Names.ProperName
                                                                     'Language.PureScript.Names.TypeName,
                                                                   Language.PureScript.Types.Type,
                                                                   [Language.PureScript.Names.Ident])))))
                    @ ((GHC.Generics.M1
                          GHC.Generics.S
                          ('GHC.Generics.MetaSel
                             ('GHC.Base.Just "typeSynonyms")
                             'GHC.Generics.NoSourceUnpackedness
                             'GHC.Generics.NoSourceStrictness
                             'GHC.Generics.DecidedLazy)
                          (GHC.Generics.K1
                             GHC.Generics.R
                             (Data.Map.Internal.Map
                                (Language.PureScript.Names.Qualified
                                   (Language.PureScript.Names.ProperName
                                      'Language.PureScript.Names.TypeName))
                                ([(Data.Text.Internal.Text,
                                   GHC.Base.Maybe Language.PureScript.Kinds.Kind)],
                                 Language.PureScript.Types.Type)))
                        GHC.Generics.:*: GHC.Generics.M1
                                           GHC.Generics.S
                                           ('GHC.Generics.MetaSel
                                              ('GHC.Base.Just "typeClassDictionaries")
                                              'GHC.Generics.NoSourceUnpackedness
                                              'GHC.Generics.NoSourceStrictness
                                              'GHC.Generics.DecidedLazy)
                                           (GHC.Generics.K1
                                              GHC.Generics.R
                                              (Data.Map.Internal.Map
                                                 (GHC.Base.Maybe
                                                    Language.PureScript.Names.ModuleName)
                                                 (Data.Map.Internal.Map
                                                    (Language.PureScript.Names.Qualified
                                                       (Language.PureScript.Names.ProperName
                                                          'Language.PureScript.Names.ClassName))
                                                    (Data.Map.Internal.Map
                                                       (Language.PureScript.Names.Qualified
                                                          Language.PureScript.Names.Ident)
                                                       Language.PureScript.TypeClassDictionaries.NamedDict)))))
                       GHC.Generics.:*: (GHC.Generics.M1
                                           GHC.Generics.S
                                           ('GHC.Generics.MetaSel
                                              ('GHC.Base.Just "typeClasses")
                                              'GHC.Generics.NoSourceUnpackedness
                                              'GHC.Generics.NoSourceStrictness
                                              'GHC.Generics.DecidedLazy)
                                           (GHC.Generics.K1
                                              GHC.Generics.R
                                              (Data.Map.Internal.Map
                                                 (Language.PureScript.Names.Qualified
                                                    (Language.PureScript.Names.ProperName
                                                       'Language.PureScript.Names.ClassName))
                                                 Language.PureScript.Environment.TypeClassData))
                                         GHC.Generics.:*: GHC.Generics.M1
                                                            GHC.Generics.S
                                                            ('GHC.Generics.MetaSel
                                                               ('GHC.Base.Just "kinds")
                                                               'GHC.Generics.NoSourceUnpackedness
                                                               'GHC.Generics.NoSourceStrictness
                                                               'GHC.Generics.DecidedLazy)
                                                            (GHC.Generics.K1
                                                               GHC.Generics.R
                                                               (Data.Set.Internal.Set
                                                                  (Language.PureScript.Names.Qualified
                                                                     (Language.PureScript.Names.ProperName
                                                                        'Language.PureScript.Names.KindName))))))
                    @ x
                    (GHC.Generics.:*:
                       @ *
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "names")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.K1
                               GHC.Generics.R
                               (Data.Map.Internal.Map
                                  (Language.PureScript.Names.Qualified
                                     Language.PureScript.Names.Ident)
                                  (Language.PureScript.Types.Type,
                                   Language.PureScript.Environment.NameKind,
                                   Language.PureScript.Environment.NameVisibility))))
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "types")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.K1
                               GHC.Generics.R
                               (Data.Map.Internal.Map
                                  (Language.PureScript.Names.Qualified
                                     (Language.PureScript.Names.ProperName
                                        'Language.PureScript.Names.TypeName))
                                  (Language.PureScript.Kinds.Kind,
                                   Language.PureScript.Environment.TypeKind)))
                          GHC.Generics.:*: GHC.Generics.M1
                                             GHC.Generics.S
                                             ('GHC.Generics.MetaSel
                                                ('GHC.Base.Just "dataConstructors")
                                                'GHC.Generics.NoSourceUnpackedness
                                                'GHC.Generics.NoSourceStrictness
                                                'GHC.Generics.DecidedLazy)
                                             (GHC.Generics.K1
                                                GHC.Generics.R
                                                (Data.Map.Internal.Map
                                                   (Language.PureScript.Names.Qualified
                                                      (Language.PureScript.Names.ProperName
                                                         'Language.PureScript.Names.ConstructorName))
                                                   (Language.PureScript.Environment.DataDeclType,
                                                    Language.PureScript.Names.ProperName
                                                      'Language.PureScript.Names.TypeName,
                                                    Language.PureScript.Types.Type,
                                                    [Language.PureScript.Names.Ident]))))
                       @ x
                       g1
                         `cast`
                       (Sym (GHC.Generics.N:K1[0]
                                 <*>_N
                                 <GHC.Generics.R>_P
                                 <Data.Map.Internal.Map
                                    (Language.PureScript.Names.Qualified
                                       Language.PureScript.Names.Ident)
                                    (Language.PureScript.Types.Type,
                                     Language.PureScript.Environment.NameKind,
                                     Language.PureScript.Environment.NameVisibility)>_R
                                 <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                   <*>_N
                                                   <GHC.Generics.S>_P
                                                   <'GHC.Generics.MetaSel
                                                      ('GHC.Base.Just "names")
                                                      'GHC.Generics.NoSourceUnpackedness
                                                      'GHC.Generics.NoSourceStrictness
                                                      'GHC.Generics.DecidedLazy>_P
                                                   <GHC.Generics.K1
                                                      GHC.Generics.R
                                                      (Data.Map.Internal.Map
                                                         (Language.PureScript.Names.Qualified
                                                            Language.PureScript.Names.Ident)
                                                         (Language.PureScript.Types.Type,
                                                          Language.PureScript.Environment.NameKind,
                                                          Language.PureScript.Environment.NameVisibility))>_R) <x>_N)
                       (GHC.Generics.:*:
                          @ *
                          @ (GHC.Generics.M1
                               GHC.Generics.S
                               ('GHC.Generics.MetaSel
                                  ('GHC.Base.Just "types")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy)
                               (GHC.Generics.K1
                                  GHC.Generics.R
                                  (Data.Map.Internal.Map
                                     (Language.PureScript.Names.Qualified
                                        (Language.PureScript.Names.ProperName
                                           'Language.PureScript.Names.TypeName))
                                     (Language.PureScript.Kinds.Kind,
                                      Language.PureScript.Environment.TypeKind))))
                          @ (GHC.Generics.M1
                               GHC.Generics.S
                               ('GHC.Generics.MetaSel
                                  ('GHC.Base.Just "dataConstructors")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy)
                               (GHC.Generics.K1
                                  GHC.Generics.R
                                  (Data.Map.Internal.Map
                                     (Language.PureScript.Names.Qualified
                                        (Language.PureScript.Names.ProperName
                                           'Language.PureScript.Names.ConstructorName))
                                     (Language.PureScript.Environment.DataDeclType,
                                      Language.PureScript.Names.ProperName
                                        'Language.PureScript.Names.TypeName,
                                      Language.PureScript.Types.Type,
                                      [Language.PureScript.Names.Ident]))))
                          @ x
                          g2
                            `cast`
                          (Sym (GHC.Generics.N:K1[0]
                                    <*>_N
                                    <GHC.Generics.R>_P
                                    <Data.Map.Internal.Map
                                       (Language.PureScript.Names.Qualified
                                          (Language.PureScript.Names.ProperName
                                             'Language.PureScript.Names.TypeName))
                                       (Language.PureScript.Kinds.Kind,
                                        Language.PureScript.Environment.TypeKind)>_R
                                    <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                      <*>_N
                                                      <GHC.Generics.S>_P
                                                      <'GHC.Generics.MetaSel
                                                         ('GHC.Base.Just "types")
                                                         'GHC.Generics.NoSourceUnpackedness
                                                         'GHC.Generics.NoSourceStrictness
                                                         'GHC.Generics.DecidedLazy>_P
                                                      <GHC.Generics.K1
                                                         GHC.Generics.R
                                                         (Data.Map.Internal.Map
                                                            (Language.PureScript.Names.Qualified
                                                               (Language.PureScript.Names.ProperName
                                                                  'Language.PureScript.Names.TypeName))
                                                            (Language.PureScript.Kinds.Kind,
                                                             Language.PureScript.Environment.TypeKind))>_R) <x>_N)
                          g3
                            `cast`
                          (Sym (GHC.Generics.N:K1[0]
                                    <*>_N
                                    <GHC.Generics.R>_P
                                    <Data.Map.Internal.Map
                                       (Language.PureScript.Names.Qualified
                                          (Language.PureScript.Names.ProperName
                                             'Language.PureScript.Names.ConstructorName))
                                       (Language.PureScript.Environment.DataDeclType,
                                        Language.PureScript.Names.ProperName
                                          'Language.PureScript.Names.TypeName,
                                        Language.PureScript.Types.Type,
                                        [Language.PureScript.Names.Ident])>_R
                                    <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                      <*>_N
                                                      <GHC.Generics.S>_P
                                                      <'GHC.Generics.MetaSel
                                                         ('GHC.Base.Just "dataConstructors")
                                                         'GHC.Generics.NoSourceUnpackedness
                                                         'GHC.Generics.NoSourceStrictness
                                                         'GHC.Generics.DecidedLazy>_P
                                                      <GHC.Generics.K1
                                                         GHC.Generics.R
                                                         (Data.Map.Internal.Map
                                                            (Language.PureScript.Names.Qualified
                                                               (Language.PureScript.Names.ProperName
                                                                  'Language.PureScript.Names.ConstructorName))
                                                            (Language.PureScript.Environment.DataDeclType,
                                                             Language.PureScript.Names.ProperName
                                                               'Language.PureScript.Names.TypeName,
                                                             Language.PureScript.Types.Type,
                                                             [Language.PureScript.Names.Ident]))>_R) <x>_N)))
                    (GHC.Generics.:*:
                       @ *
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "typeSynonyms")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.K1
                               GHC.Generics.R
                               (Data.Map.Internal.Map
                                  (Language.PureScript.Names.Qualified
                                     (Language.PureScript.Names.ProperName
                                        'Language.PureScript.Names.TypeName))
                                  ([(Data.Text.Internal.Text,
                                     GHC.Base.Maybe Language.PureScript.Kinds.Kind)],
                                   Language.PureScript.Types.Type)))
                          GHC.Generics.:*: GHC.Generics.M1
                                             GHC.Generics.S
                                             ('GHC.Generics.MetaSel
                                                ('GHC.Base.Just "typeClassDictionaries")
                                                'GHC.Generics.NoSourceUnpackedness
                                                'GHC.Generics.NoSourceStrictness
                                                'GHC.Generics.DecidedLazy)
                                             (GHC.Generics.K1
                                                GHC.Generics.R
                                                (Data.Map.Internal.Map
                                                   (GHC.Base.Maybe
                                                      Language.PureScript.Names.ModuleName)
                                                   (Data.Map.Internal.Map
                                                      (Language.PureScript.Names.Qualified
                                                         (Language.PureScript.Names.ProperName
                                                            'Language.PureScript.Names.ClassName))
                                                      (Data.Map.Internal.Map
                                                         (Language.PureScript.Names.Qualified
                                                            Language.PureScript.Names.Ident)
                                                         Language.PureScript.TypeClassDictionaries.NamedDict)))))
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "typeClasses")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.K1
                               GHC.Generics.R
                               (Data.Map.Internal.Map
                                  (Language.PureScript.Names.Qualified
                                     (Language.PureScript.Names.ProperName
                                        'Language.PureScript.Names.ClassName))
                                  Language.PureScript.Environment.TypeClassData))
                          GHC.Generics.:*: GHC.Generics.M1
                                             GHC.Generics.S
                                             ('GHC.Generics.MetaSel
                                                ('GHC.Base.Just "kinds")
                                                'GHC.Generics.NoSourceUnpackedness
                                                'GHC.Generics.NoSourceStrictness
                                                'GHC.Generics.DecidedLazy)
                                             (GHC.Generics.K1
                                                GHC.Generics.R
                                                (Data.Set.Internal.Set
                                                   (Language.PureScript.Names.Qualified
                                                      (Language.PureScript.Names.ProperName
                                                         'Language.PureScript.Names.KindName)))))
                       @ x
                       (GHC.Generics.:*:
                          @ *
                          @ (GHC.Generics.M1
                               GHC.Generics.S
                               ('GHC.Generics.MetaSel
                                  ('GHC.Base.Just "typeSynonyms")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy)
                               (GHC.Generics.K1
                                  GHC.Generics.R
                                  (Data.Map.Internal.Map
                                     (Language.PureScript.Names.Qualified
                                        (Language.PureScript.Names.ProperName
                                           'Language.PureScript.Names.TypeName))
                                     ([(Data.Text.Internal.Text,
                                        GHC.Base.Maybe Language.PureScript.Kinds.Kind)],
                                      Language.PureScript.Types.Type))))
                          @ (GHC.Generics.M1
                               GHC.Generics.S
                               ('GHC.Generics.MetaSel
                                  ('GHC.Base.Just "typeClassDictionaries")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy)
                               (GHC.Generics.K1
                                  GHC.Generics.R
                                  (Data.Map.Internal.Map
                                     (GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                                     (Data.Map.Internal.Map
                                        (Language.PureScript.Names.Qualified
                                           (Language.PureScript.Names.ProperName
                                              'Language.PureScript.Names.ClassName))
                                        (Data.Map.Internal.Map
                                           (Language.PureScript.Names.Qualified
                                              Language.PureScript.Names.Ident)
                                           Language.PureScript.TypeClassDictionaries.NamedDict)))))
                          @ x
                          g4
                            `cast`
                          (Sym (GHC.Generics.N:K1[0]
                                    <*>_N
                                    <GHC.Generics.R>_P
                                    <Data.Map.Internal.Map
                                       (Language.PureScript.Names.Qualified
                                          (Language.PureScript.Names.ProperName
                                             'Language.PureScript.Names.TypeName))
                                       ([(Data.Text.Internal.Text,
                                          GHC.Base.Maybe Language.PureScript.Kinds.Kind)],
                                        Language.PureScript.Types.Type)>_R
                                    <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                      <*>_N
                                                      <GHC.Generics.S>_P
                                                      <'GHC.Generics.MetaSel
                                                         ('GHC.Base.Just "typeSynonyms")
                                                         'GHC.Generics.NoSourceUnpackedness
                                                         'GHC.Generics.NoSourceStrictness
                                                         'GHC.Generics.DecidedLazy>_P
                                                      <GHC.Generics.K1
                                                         GHC.Generics.R
                                                         (Data.Map.Internal.Map
                                                            (Language.PureScript.Names.Qualified
                                                               (Language.PureScript.Names.ProperName
                                                                  'Language.PureScript.Names.TypeName))
                                                            ([(Data.Text.Internal.Text,
                                                               GHC.Base.Maybe
                                                                 Language.PureScript.Kinds.Kind)],
                                                             Language.PureScript.Types.Type))>_R) <x>_N)
                          g5
                            `cast`
                          (Sym (GHC.Generics.N:K1[0]
                                    <*>_N
                                    <GHC.Generics.R>_P
                                    <Data.Map.Internal.Map
                                       (GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                                       (Data.Map.Internal.Map
                                          (Language.PureScript.Names.Qualified
                                             (Language.PureScript.Names.ProperName
                                                'Language.PureScript.Names.ClassName))
                                          (Data.Map.Internal.Map
                                             (Language.PureScript.Names.Qualified
                                                Language.PureScript.Names.Ident)
                                             Language.PureScript.TypeClassDictionaries.NamedDict))>_R
                                    <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                      <*>_N
                                                      <GHC.Generics.S>_P
                                                      <'GHC.Generics.MetaSel
                                                         ('GHC.Base.Just "typeClassDictionaries")
                                                         'GHC.Generics.NoSourceUnpackedness
                                                         'GHC.Generics.NoSourceStrictness
                                                         'GHC.Generics.DecidedLazy>_P
                                                      <GHC.Generics.K1
                                                         GHC.Generics.R
                                                         (Data.Map.Internal.Map
                                                            (GHC.Base.Maybe
                                                               Language.PureScript.Names.ModuleName)
                                                            (Data.Map.Internal.Map
                                                               (Language.PureScript.Names.Qualified
                                                                  (Language.PureScript.Names.ProperName
                                                                     'Language.PureScript.Names.ClassName))
                                                               (Data.Map.Internal.Map
                                                                  (Language.PureScript.Names.Qualified
                                                                     Language.PureScript.Names.Ident)
                                                                  Language.PureScript.TypeClassDictionaries.NamedDict)))>_R) <x>_N))
                       (GHC.Generics.:*:
                          @ *
                          @ (GHC.Generics.M1
                               GHC.Generics.S
                               ('GHC.Generics.MetaSel
                                  ('GHC.Base.Just "typeClasses")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy)
                               (GHC.Generics.K1
                                  GHC.Generics.R
                                  (Data.Map.Internal.Map
                                     (Language.PureScript.Names.Qualified
                                        (Language.PureScript.Names.ProperName
                                           'Language.PureScript.Names.ClassName))
                                     Language.PureScript.Environment.TypeClassData)))
                          @ (GHC.Generics.M1
                               GHC.Generics.S
                               ('GHC.Generics.MetaSel
                                  ('GHC.Base.Just "kinds")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy)
                               (GHC.Generics.K1
                                  GHC.Generics.R
                                  (Data.Set.Internal.Set
                                     (Language.PureScript.Names.Qualified
                                        (Language.PureScript.Names.ProperName
                                           'Language.PureScript.Names.KindName)))))
                          @ x
                          g6
                            `cast`
                          (Sym (GHC.Generics.N:K1[0]
                                    <*>_N
                                    <GHC.Generics.R>_P
                                    <Data.Map.Internal.Map
                                       (Language.PureScript.Names.Qualified
                                          (Language.PureScript.Names.ProperName
                                             'Language.PureScript.Names.ClassName))
                                       Language.PureScript.Environment.TypeClassData>_R
                                    <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                      <*>_N
                                                      <GHC.Generics.S>_P
                                                      <'GHC.Generics.MetaSel
                                                         ('GHC.Base.Just "typeClasses")
                                                         'GHC.Generics.NoSourceUnpackedness
                                                         'GHC.Generics.NoSourceStrictness
                                                         'GHC.Generics.DecidedLazy>_P
                                                      <GHC.Generics.K1
                                                         GHC.Generics.R
                                                         (Data.Map.Internal.Map
                                                            (Language.PureScript.Names.Qualified
                                                               (Language.PureScript.Names.ProperName
                                                                  'Language.PureScript.Names.ClassName))
                                                            Language.PureScript.Environment.TypeClassData)>_R) <x>_N)
                          g7
                            `cast`
                          (Sym (GHC.Generics.N:K1[0]
                                    <*>_N
                                    <GHC.Generics.R>_P
                                    <Data.Set.Internal.Set
                                       (Language.PureScript.Names.Qualified
                                          (Language.PureScript.Names.ProperName
                                             'Language.PureScript.Names.KindName))>_R
                                    <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                      <*>_N
                                                      <GHC.Generics.S>_P
                                                      <'GHC.Generics.MetaSel
                                                         ('GHC.Base.Just "kinds")
                                                         'GHC.Generics.NoSourceUnpackedness
                                                         'GHC.Generics.NoSourceStrictness
                                                         'GHC.Generics.DecidedLazy>_P
                                                      <GHC.Generics.K1
                                                         GHC.Generics.R
                                                         (Data.Set.Internal.Set
                                                            (Language.PureScript.Names.Qualified
                                                               (Language.PureScript.Names.ProperName
                                                                  'Language.PureScript.Names.KindName)))>_R) <x>_N))))
                   `cast`
                 (Sym (GHC.Generics.N:M1[0]
                           <*>_N
                           <GHC.Generics.C>_P
                           <'GHC.Generics.MetaCons
                              "Environment" 'GHC.Generics.PrefixI 'GHC.Types.True>_P
                           <(GHC.Generics.M1
                               GHC.Generics.S
                               ('GHC.Generics.MetaSel
                                  ('GHC.Base.Just "names")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy)
                               (GHC.Generics.K1
                                  GHC.Generics.R
                                  (Data.Map.Internal.Map
                                     (Language.PureScript.Names.Qualified
                                        Language.PureScript.Names.Ident)
                                     (Language.PureScript.Types.Type,
                                      Language.PureScript.Environment.NameKind,
                                      Language.PureScript.Environment.NameVisibility)))
                             GHC.Generics.:*: (GHC.Generics.M1
                                                 GHC.Generics.S
                                                 ('GHC.Generics.MetaSel
                                                    ('GHC.Base.Just "types")
                                                    'GHC.Generics.NoSourceUnpackedness
                                                    'GHC.Generics.NoSourceStrictness
                                                    'GHC.Generics.DecidedLazy)
                                                 (GHC.Generics.K1
                                                    GHC.Generics.R
                                                    (Data.Map.Internal.Map
                                                       (Language.PureScript.Names.Qualified
                                                          (Language.PureScript.Names.ProperName
                                                             'Language.PureScript.Names.TypeName))
                                                       (Language.PureScript.Kinds.Kind,
                                                        Language.PureScript.Environment.TypeKind)))
                                               GHC.Generics.:*: GHC.Generics.M1
                                                                  GHC.Generics.S
                                                                  ('GHC.Generics.MetaSel
                                                                     ('GHC.Base.Just
                                                                        "dataConstructors")
                                                                     'GHC.Generics.NoSourceUnpackedness
                                                                     'GHC.Generics.NoSourceStrictness
                                                                     'GHC.Generics.DecidedLazy)
                                                                  (GHC.Generics.K1
                                                                     GHC.Generics.R
                                                                     (Data.Map.Internal.Map
                                                                        (Language.PureScript.Names.Qualified
                                                                           (Language.PureScript.Names.ProperName
                                                                              'Language.PureScript.Names.ConstructorName))
                                                                        (Language.PureScript.Environment.DataDeclType,
                                                                         Language.PureScript.Names.ProperName
                                                                           'Language.PureScript.Names.TypeName,
                                                                         Language.PureScript.Types.Type,
                                                                         [Language.PureScript.Names.Ident])))))
                            GHC.Generics.:*: ((GHC.Generics.M1
                                                 GHC.Generics.S
                                                 ('GHC.Generics.MetaSel
                                                    ('GHC.Base.Just "typeSynonyms")
                                                    'GHC.Generics.NoSourceUnpackedness
                                                    'GHC.Generics.NoSourceStrictness
                                                    'GHC.Generics.DecidedLazy)
                                                 (GHC.Generics.K1
                                                    GHC.Generics.R
                                                    (Data.Map.Internal.Map
                                                       (Language.PureScript.Names.Qualified
                                                          (Language.PureScript.Names.ProperName
                                                             'Language.PureScript.Names.TypeName))
                                                       ([(Data.Text.Internal.Text,
                                                          GHC.Base.Maybe
                                                            Language.PureScript.Kinds.Kind)],
                                                        Language.PureScript.Types.Type)))
                                               GHC.Generics.:*: GHC.Generics.M1
                                                                  GHC.Generics.S
                                                                  ('GHC.Generics.MetaSel
                                                                     ('GHC.Base.Just
                                                                        "typeClassDictionaries")
                                                                     'GHC.Generics.NoSourceUnpackedness
                                                                     'GHC.Generics.NoSourceStrictness
                                                                     'GHC.Generics.DecidedLazy)
                                                                  (GHC.Generics.K1
                                                                     GHC.Generics.R
                                                                     (Data.Map.Internal.Map
                                                                        (GHC.Base.Maybe
                                                                           Language.PureScript.Names.ModuleName)
                                                                        (Data.Map.Internal.Map
                                                                           (Language.PureScript.Names.Qualified
                                                                              (Language.PureScript.Names.ProperName
                                                                                 'Language.PureScript.Names.ClassName))
                                                                           (Data.Map.Internal.Map
                                                                              (Language.PureScript.Names.Qualified
                                                                                 Language.PureScript.Names.Ident)
                                                                              Language.PureScript.TypeClassDictionaries.NamedDict)))))
                                              GHC.Generics.:*: (GHC.Generics.M1
                                                                  GHC.Generics.S
                                                                  ('GHC.Generics.MetaSel
                                                                     ('GHC.Base.Just "typeClasses")
                                                                     'GHC.Generics.NoSourceUnpackedness
                                                                     'GHC.Generics.NoSourceStrictness
                                                                     'GHC.Generics.DecidedLazy)
                                                                  (GHC.Generics.K1
                                                                     GHC.Generics.R
                                                                     (Data.Map.Internal.Map
                                                                        (Language.PureScript.Names.Qualified
                                                                           (Language.PureScript.Names.ProperName
                                                                              'Language.PureScript.Names.ClassName))
                                                                        Language.PureScript.Environment.TypeClassData))
                                                                GHC.Generics.:*: GHC.Generics.M1
                                                                                   GHC.Generics.S
                                                                                   ('GHC.Generics.MetaSel
                                                                                      ('GHC.Base.Just
                                                                                         "kinds")
                                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                                      'GHC.Generics.NoSourceStrictness
                                                                                      'GHC.Generics.DecidedLazy)
                                                                                   (GHC.Generics.K1
                                                                                      GHC.Generics.R
                                                                                      (Data.Set.Internal.Set
                                                                                         (Language.PureScript.Names.Qualified
                                                                                            (Language.PureScript.Names.ProperName
                                                                                               'Language.PureScript.Names.KindName))))))>_R) <x>_N) }) -}
c291d940fae22a3f1400d8c90f26bdd4
  $fGenericEnvironment_$cto ::
    GHC.Generics.Rep Language.PureScript.Environment.Environment x
    -> Language.PureScript.Environment.Environment
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(S(LS)S(SS)),1*U(1*U(U,1*U(U,U)),1*U(1*U(U,U),1*U(U,U)))>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ x
                   (ds :: GHC.Generics.Rep
                            Language.PureScript.Environment.Environment x) ->
                 case ds
                        `cast`
                      ((Sub (Language.PureScript.Environment.Rep_Environment[0]) ; (GHC.Generics.N:M1[0]
                                                                                        <*>_N
                                                                                        <GHC.Generics.D>_P
                                                                                        <'GHC.Generics.MetaData
                                                                                           "Environment"
                                                                                           "Language.PureScript.Environment"
                                                                                           "purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"
                                                                                           'GHC.Types.False>_P
                                                                                        <GHC.Generics.M1
                                                                                           GHC.Generics.C
                                                                                           ('GHC.Generics.MetaCons
                                                                                              "Environment"
                                                                                              'GHC.Generics.PrefixI
                                                                                              'GHC.Types.True)
                                                                                           ((GHC.Generics.M1
                                                                                               GHC.Generics.S
                                                                                               ('GHC.Generics.MetaSel
                                                                                                  ('GHC.Base.Just
                                                                                                     "names")
                                                                                                  'GHC.Generics.NoSourceUnpackedness
                                                                                                  'GHC.Generics.NoSourceStrictness
                                                                                                  'GHC.Generics.DecidedLazy)
                                                                                               (GHC.Generics.K1
                                                                                                  GHC.Generics.R
                                                                                                  (Data.Map.Internal.Map
                                                                                                     (Language.PureScript.Names.Qualified
                                                                                                        Language.PureScript.Names.Ident)
                                                                                                     (Language.PureScript.Types.Type,
                                                                                                      Language.PureScript.Environment.NameKind,
                                                                                                      Language.PureScript.Environment.NameVisibility)))
                                                                                             GHC.Generics.:*: (GHC.Generics.M1
                                                                                                                 GHC.Generics.S
                                                                                                                 ('GHC.Generics.MetaSel
                                                                                                                    ('GHC.Base.Just
                                                                                                                       "types")
                                                                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                                                                    'GHC.Generics.NoSourceStrictness
                                                                                                                    'GHC.Generics.DecidedLazy)
                                                                                                                 (GHC.Generics.K1
                                                                                                                    GHC.Generics.R
                                                                                                                    (Data.Map.Internal.Map
                                                                                                                       (Language.PureScript.Names.Qualified
                                                                                                                          (Language.PureScript.Names.ProperName
                                                                                                                             'Language.PureScript.Names.TypeName))
                                                                                                                       (Language.PureScript.Kinds.Kind,
                                                                                                                        Language.PureScript.Environment.TypeKind)))
                                                                                                               GHC.Generics.:*: GHC.Generics.M1
                                                                                                                                  GHC.Generics.S
                                                                                                                                  ('GHC.Generics.MetaSel
                                                                                                                                     ('GHC.Base.Just
                                                                                                                                        "dataConstructors")
                                                                                                                                     'GHC.Generics.NoSourceUnpackedness
                                                                                                                                     'GHC.Generics.NoSourceStrictness
                                                                                                                                     'GHC.Generics.DecidedLazy)
                                                                                                                                  (GHC.Generics.K1
                                                                                                                                     GHC.Generics.R
                                                                                                                                     (Data.Map.Internal.Map
                                                                                                                                        (Language.PureScript.Names.Qualified
                                                                                                                                           (Language.PureScript.Names.ProperName
                                                                                                                                              'Language.PureScript.Names.ConstructorName))
                                                                                                                                        (Language.PureScript.Environment.DataDeclType,
                                                                                                                                         Language.PureScript.Names.ProperName
                                                                                                                                           'Language.PureScript.Names.TypeName,
                                                                                                                                         Language.PureScript.Types.Type,
                                                                                                                                         [Language.PureScript.Names.Ident])))))
                                                                                            GHC.Generics.:*: ((GHC.Generics.M1
                                                                                                                 GHC.Generics.S
                                                                                                                 ('GHC.Generics.MetaSel
                                                                                                                    ('GHC.Base.Just
                                                                                                                       "typeSynonyms")
                                                                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                                                                    'GHC.Generics.NoSourceStrictness
                                                                                                                    'GHC.Generics.DecidedLazy)
                                                                                                                 (GHC.Generics.K1
                                                                                                                    GHC.Generics.R
                                                                                                                    (Data.Map.Internal.Map
                                                                                                                       (Language.PureScript.Names.Qualified
                                                                                                                          (Language.PureScript.Names.ProperName
                                                                                                                             'Language.PureScript.Names.TypeName))
                                                                                                                       ([(Data.Text.Internal.Text,
                                                                                                                          GHC.Base.Maybe
                                                                                                                            Language.PureScript.Kinds.Kind)],
                                                                                                                        Language.PureScript.Types.Type)))
                                                                                                               GHC.Generics.:*: GHC.Generics.M1
                                                                                                                                  GHC.Generics.S
                                                                                                                                  ('GHC.Generics.MetaSel
                                                                                                                                     ('GHC.Base.Just
                                                                                                                                        "typeClassDictionaries")
                                                                                                                                     'GHC.Generics.NoSourceUnpackedness
                                                                                                                                     'GHC.Generics.NoSourceStrictness
                                                                                                                                     'GHC.Generics.DecidedLazy)
                                                                                                                                  (GHC.Generics.K1
                                                                                                                                     GHC.Generics.R
                                                                                                                                     (Data.Map.Internal.Map
                                                                                                                                        (GHC.Base.Maybe
                                                                                                                                           Language.PureScript.Names.ModuleName)
                                                                                                                                        (Data.Map.Internal.Map
                                                                                                                                           (Language.PureScript.Names.Qualified
                                                                                                                                              (Language.PureScript.Names.ProperName
                                                                                                                                                 'Language.PureScript.Names.ClassName))
                                                                                                                                           (Data.Map.Internal.Map
                                                                                                                                              (Language.PureScript.Names.Qualified
                                                                                                                                                 Language.PureScript.Names.Ident)
                                                                                                                                              Language.PureScript.TypeClassDictionaries.NamedDict)))))
                                                                                                              GHC.Generics.:*: (GHC.Generics.M1
                                                                                                                                  GHC.Generics.S
                                                                                                                                  ('GHC.Generics.MetaSel
                                                                                                                                     ('GHC.Base.Just
                                                                                                                                        "typeClasses")
                                                                                                                                     'GHC.Generics.NoSourceUnpackedness
                                                                                                                                     'GHC.Generics.NoSourceStrictness
                                                                                                                                     'GHC.Generics.DecidedLazy)
                                                                                                                                  (GHC.Generics.K1
                                                                                                                                     GHC.Generics.R
                                                                                                                                     (Data.Map.Internal.Map
                                                                                                                                        (Language.PureScript.Names.Qualified
                                                                                                                                           (Language.PureScript.Names.ProperName
                                                                                                                                              'Language.PureScript.Names.ClassName))
                                                                                                                                        Language.PureScript.Environment.TypeClassData))
                                                                                                                                GHC.Generics.:*: GHC.Generics.M1
                                                                                                                                                   GHC.Generics.S
                                                                                                                                                   ('GHC.Generics.MetaSel
                                                                                                                                                      ('GHC.Base.Just
                                                                                                                                                         "kinds")
                                                                                                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                      'GHC.Generics.NoSourceStrictness
                                                                                                                                                      'GHC.Generics.DecidedLazy)
                                                                                                                                                   (GHC.Generics.K1
                                                                                                                                                      GHC.Generics.R
                                                                                                                                                      (Data.Set.Internal.Set
                                                                                                                                                         (Language.PureScript.Names.Qualified
                                                                                                                                                            (Language.PureScript.Names.ProperName
                                                                                                                                                               'Language.PureScript.Names.KindName)))))))>_R ; GHC.Generics.N:M1[0]
                                                                                                                                                                                                                   <*>_N
                                                                                                                                                                                                                   <GHC.Generics.C>_P
                                                                                                                                                                                                                   <'GHC.Generics.MetaCons
                                                                                                                                                                                                                      "Environment"
                                                                                                                                                                                                                      'GHC.Generics.PrefixI
                                                                                                                                                                                                                      'GHC.Types.True>_P
                                                                                                                                                                                                                   <(GHC.Generics.M1
                                                                                                                                                                                                                       GHC.Generics.S
                                                                                                                                                                                                                       ('GHC.Generics.MetaSel
                                                                                                                                                                                                                          ('GHC.Base.Just
                                                                                                                                                                                                                             "names")
                                                                                                                                                                                                                          'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                                          'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                                          'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                                       (GHC.Generics.K1
                                                                                                                                                                                                                          GHC.Generics.R
                                                                                                                                                                                                                          (Data.Map.Internal.Map
                                                                                                                                                                                                                             (Language.PureScript.Names.Qualified
                                                                                                                                                                                                                                Language.PureScript.Names.Ident)
                                                                                                                                                                                                                             (Language.PureScript.Types.Type,
                                                                                                                                                                                                                              Language.PureScript.Environment.NameKind,
                                                                                                                                                                                                                              Language.PureScript.Environment.NameVisibility)))
                                                                                                                                                                                                                     GHC.Generics.:*: (GHC.Generics.M1
                                                                                                                                                                                                                                         GHC.Generics.S
                                                                                                                                                                                                                                         ('GHC.Generics.MetaSel
                                                                                                                                                                                                                                            ('GHC.Base.Just
                                                                                                                                                                                                                                               "types")
                                                                                                                                                                                                                                            'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                                                            'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                                                            'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                                                         (GHC.Generics.K1
                                                                                                                                                                                                                                            GHC.Generics.R
                                                                                                                                                                                                                                            (Data.Map.Internal.Map
                                                                                                                                                                                                                                               (Language.PureScript.Names.Qualified
                                                                                                                                                                                                                                                  (Language.PureScript.Names.ProperName
                                                                                                                                                                                                                                                     'Language.PureScript.Names.TypeName))
                                                                                                                                                                                                                                               (Language.PureScript.Kinds.Kind,
                                                                                                                                                                                                                                                Language.PureScript.Environment.TypeKind)))
                                                                                                                                                                                                                                       GHC.Generics.:*: GHC.Generics.M1
                                                                                                                                                                                                                                                          GHC.Generics.S
                                                                                                                                                                                                                                                          ('GHC.Generics.MetaSel
                                                                                                                                                                                                                                                             ('GHC.Base.Just
                                                                                                                                                                                                                                                                "dataConstructors")
                                                                                                                                                                                                                                                             'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                                                                             'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                                                                             'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                                                                          (GHC.Generics.K1
                                                                                                                                                                                                                                                             GHC.Generics.R
                                                                                                                                                                                                                                                             (Data.Map.Internal.Map
                                                                                                                                                                                                                                                                (Language.PureScript.Names.Qualified
                                                                                                                                                                                                                                                                   (Language.PureScript.Names.ProperName
                                                                                                                                                                                                                                                                      'Language.PureScript.Names.ConstructorName))
                                                                                                                                                                                                                                                                (Language.PureScript.Environment.DataDeclType,
                                                                                                                                                                                                                                                                 Language.PureScript.Names.ProperName
                                                                                                                                                                                                                                                                   'Language.PureScript.Names.TypeName,
                                                                                                                                                                                                                                                                 Language.PureScript.Types.Type,
                                                                                                                                                                                                                                                                 [Language.PureScript.Names.Ident])))))
                                                                                                                                                                                                                    GHC.Generics.:*: ((GHC.Generics.M1
                                                                                                                                                                                                                                         GHC.Generics.S
                                                                                                                                                                                                                                         ('GHC.Generics.MetaSel
                                                                                                                                                                                                                                            ('GHC.Base.Just
                                                                                                                                                                                                                                               "typeSynonyms")
                                                                                                                                                                                                                                            'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                                                            'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                                                            'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                                                         (GHC.Generics.K1
                                                                                                                                                                                                                                            GHC.Generics.R
                                                                                                                                                                                                                                            (Data.Map.Internal.Map
                                                                                                                                                                                                                                               (Language.PureScript.Names.Qualified
                                                                                                                                                                                                                                                  (Language.PureScript.Names.ProperName
                                                                                                                                                                                                                                                     'Language.PureScript.Names.TypeName))
                                                                                                                                                                                                                                               ([(Data.Text.Internal.Text,
                                                                                                                                                                                                                                                  GHC.Base.Maybe
                                                                                                                                                                                                                                                    Language.PureScript.Kinds.Kind)],
                                                                                                                                                                                                                                                Language.PureScript.Types.Type)))
                                                                                                                                                                                                                                       GHC.Generics.:*: GHC.Generics.M1
                                                                                                                                                                                                                                                          GHC.Generics.S
                                                                                                                                                                                                                                                          ('GHC.Generics.MetaSel
                                                                                                                                                                                                                                                             ('GHC.Base.Just
                                                                                                                                                                                                                                                                "typeClassDictionaries")
                                                                                                                                                                                                                                                             'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                                                                             'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                                                                             'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                                                                          (GHC.Generics.K1
                                                                                                                                                                                                                                                             GHC.Generics.R
                                                                                                                                                                                                                                                             (Data.Map.Internal.Map
                                                                                                                                                                                                                                                                (GHC.Base.Maybe
                                                                                                                                                                                                                                                                   Language.PureScript.Names.ModuleName)
                                                                                                                                                                                                                                                                (Data.Map.Internal.Map
                                                                                                                                                                                                                                                                   (Language.PureScript.Names.Qualified
                                                                                                                                                                                                                                                                      (Language.PureScript.Names.ProperName
                                                                                                                                                                                                                                                                         'Language.PureScript.Names.ClassName))
                                                                                                                                                                                                                                                                   (Data.Map.Internal.Map
                                                                                                                                                                                                                                                                      (Language.PureScript.Names.Qualified
                                                                                                                                                                                                                                                                         Language.PureScript.Names.Ident)
                                                                                                                                                                                                                                                                      Language.PureScript.TypeClassDictionaries.NamedDict)))))
                                                                                                                                                                                                                                      GHC.Generics.:*: (GHC.Generics.M1
                                                                                                                                                                                                                                                          GHC.Generics.S
                                                                                                                                                                                                                                                          ('GHC.Generics.MetaSel
                                                                                                                                                                                                                                                             ('GHC.Base.Just
                                                                                                                                                                                                                                                                "typeClasses")
                                                                                                                                                                                                                                                             'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                                                                             'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                                                                             'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                                                                          (GHC.Generics.K1
                                                                                                                                                                                                                                                             GHC.Generics.R
                                                                                                                                                                                                                                                             (Data.Map.Internal.Map
                                                                                                                                                                                                                                                                (Language.PureScript.Names.Qualified
                                                                                                                                                                                                                                                                   (Language.PureScript.Names.ProperName
                                                                                                                                                                                                                                                                      'Language.PureScript.Names.ClassName))
                                                                                                                                                                                                                                                                Language.PureScript.Environment.TypeClassData))
                                                                                                                                                                                                                                                        GHC.Generics.:*: GHC.Generics.M1
                                                                                                                                                                                                                                                                           GHC.Generics.S
                                                                                                                                                                                                                                                                           ('GHC.Generics.MetaSel
                                                                                                                                                                                                                                                                              ('GHC.Base.Just
                                                                                                                                                                                                                                                                                 "kinds")
                                                                                                                                                                                                                                                                              'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                                                                                              'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                                                                                              'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                                                                                           (GHC.Generics.K1
                                                                                                                                                                                                                                                                              GHC.Generics.R
                                                                                                                                                                                                                                                                              (Data.Set.Internal.Set
                                                                                                                                                                                                                                                                                 (Language.PureScript.Names.Qualified
                                                                                                                                                                                                                                                                                    (Language.PureScript.Names.ProperName
                                                                                                                                                                                                                                                                                       'Language.PureScript.Names.KindName))))))>_R)) <x>_N) of wild { GHC.Generics.:*: ds1 ds2 ->
                 case ds1 of wild1 { GHC.Generics.:*: ds3 ds4 ->
                 case ds4 of wild2 { GHC.Generics.:*: ds5 ds6 ->
                 case ds2 of wild3 { GHC.Generics.:*: ds7 ds8 ->
                 case ds7 of wild4 { GHC.Generics.:*: ds9 ds10 ->
                 case ds8 of wild5 { GHC.Generics.:*: ds11 ds12 ->
                 Language.PureScript.Environment.Environment
                   ds3
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           ('GHC.Base.Just "names")
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1
                           GHC.Generics.R
                           (Data.Map.Internal.Map
                              (Language.PureScript.Names.Qualified
                                 Language.PureScript.Names.Ident)
                              (Language.PureScript.Types.Type,
                               Language.PureScript.Environment.NameKind,
                               Language.PureScript.Environment.NameVisibility))>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                               <*>_N
                                                                                               <GHC.Generics.R>_P
                                                                                               <Data.Map.Internal.Map
                                                                                                  (Language.PureScript.Names.Qualified
                                                                                                     Language.PureScript.Names.Ident)
                                                                                                  (Language.PureScript.Types.Type,
                                                                                                   Language.PureScript.Environment.NameKind,
                                                                                                   Language.PureScript.Environment.NameVisibility)>_R
                                                                                               <x>_P)
                   ds5
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           ('GHC.Base.Just "types")
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1
                           GHC.Generics.R
                           (Data.Map.Internal.Map
                              (Language.PureScript.Names.Qualified
                                 (Language.PureScript.Names.ProperName
                                    'Language.PureScript.Names.TypeName))
                              (Language.PureScript.Kinds.Kind,
                               Language.PureScript.Environment.TypeKind))>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                         <*>_N
                                                                                         <GHC.Generics.R>_P
                                                                                         <Data.Map.Internal.Map
                                                                                            (Language.PureScript.Names.Qualified
                                                                                               (Language.PureScript.Names.ProperName
                                                                                                  'Language.PureScript.Names.TypeName))
                                                                                            (Language.PureScript.Kinds.Kind,
                                                                                             Language.PureScript.Environment.TypeKind)>_R
                                                                                         <x>_P)
                   ds6
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           ('GHC.Base.Just "dataConstructors")
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1
                           GHC.Generics.R
                           (Data.Map.Internal.Map
                              (Language.PureScript.Names.Qualified
                                 (Language.PureScript.Names.ProperName
                                    'Language.PureScript.Names.ConstructorName))
                              (Language.PureScript.Environment.DataDeclType,
                               Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.TypeName,
                               Language.PureScript.Types.Type,
                               [Language.PureScript.Names.Ident]))>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                  <*>_N
                                                                                  <GHC.Generics.R>_P
                                                                                  <Data.Map.Internal.Map
                                                                                     (Language.PureScript.Names.Qualified
                                                                                        (Language.PureScript.Names.ProperName
                                                                                           'Language.PureScript.Names.ConstructorName))
                                                                                     (Language.PureScript.Environment.DataDeclType,
                                                                                      Language.PureScript.Names.ProperName
                                                                                        'Language.PureScript.Names.TypeName,
                                                                                      Language.PureScript.Types.Type,
                                                                                      [Language.PureScript.Names.Ident])>_R
                                                                                  <x>_P)
                   ds9
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           ('GHC.Base.Just "typeSynonyms")
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1
                           GHC.Generics.R
                           (Data.Map.Internal.Map
                              (Language.PureScript.Names.Qualified
                                 (Language.PureScript.Names.ProperName
                                    'Language.PureScript.Names.TypeName))
                              ([(Data.Text.Internal.Text,
                                 GHC.Base.Maybe Language.PureScript.Kinds.Kind)],
                               Language.PureScript.Types.Type))>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                               <*>_N
                                                                               <GHC.Generics.R>_P
                                                                               <Data.Map.Internal.Map
                                                                                  (Language.PureScript.Names.Qualified
                                                                                     (Language.PureScript.Names.ProperName
                                                                                        'Language.PureScript.Names.TypeName))
                                                                                  ([(Data.Text.Internal.Text,
                                                                                     GHC.Base.Maybe
                                                                                       Language.PureScript.Kinds.Kind)],
                                                                                   Language.PureScript.Types.Type)>_R
                                                                               <x>_P)
                   ds10
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           ('GHC.Base.Just "typeClassDictionaries")
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1
                           GHC.Generics.R
                           (Data.Map.Internal.Map
                              (GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                              (Data.Map.Internal.Map
                                 (Language.PureScript.Names.Qualified
                                    (Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.ClassName))
                                 (Data.Map.Internal.Map
                                    (Language.PureScript.Names.Qualified
                                       Language.PureScript.Names.Ident)
                                    Language.PureScript.TypeClassDictionaries.NamedDict)))>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                                          <*>_N
                                                                                                          <GHC.Generics.R>_P
                                                                                                          <Data.Map.Internal.Map
                                                                                                             (GHC.Base.Maybe
                                                                                                                Language.PureScript.Names.ModuleName)
                                                                                                             (Data.Map.Internal.Map
                                                                                                                (Language.PureScript.Names.Qualified
                                                                                                                   (Language.PureScript.Names.ProperName
                                                                                                                      'Language.PureScript.Names.ClassName))
                                                                                                                (Data.Map.Internal.Map
                                                                                                                   (Language.PureScript.Names.Qualified
                                                                                                                      Language.PureScript.Names.Ident)
                                                                                                                   Language.PureScript.TypeClassDictionaries.NamedDict))>_R
                                                                                                          <x>_P)
                   ds11
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           ('GHC.Base.Just "typeClasses")
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1
                           GHC.Generics.R
                           (Data.Map.Internal.Map
                              (Language.PureScript.Names.Qualified
                                 (Language.PureScript.Names.ProperName
                                    'Language.PureScript.Names.ClassName))
                              Language.PureScript.Environment.TypeClassData)>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                            <*>_N
                                                                                            <GHC.Generics.R>_P
                                                                                            <Data.Map.Internal.Map
                                                                                               (Language.PureScript.Names.Qualified
                                                                                                  (Language.PureScript.Names.ProperName
                                                                                                     'Language.PureScript.Names.ClassName))
                                                                                               Language.PureScript.Environment.TypeClassData>_R
                                                                                            <x>_P)
                   ds12
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           ('GHC.Base.Just "kinds")
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1
                           GHC.Generics.R
                           (Data.Set.Internal.Set
                              (Language.PureScript.Names.Qualified
                                 (Language.PureScript.Names.ProperName
                                    'Language.PureScript.Names.KindName)))>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                          <*>_N
                                                                                          <GHC.Generics.R>_P
                                                                                          <Data.Set.Internal.Set
                                                                                             (Language.PureScript.Names.Qualified
                                                                                                (Language.PureScript.Names.ProperName
                                                                                                   'Language.PureScript.Names.KindName))>_R
                                                                                          <x>_P) } } } } } }) -}
ef672654cffb5adb82634076fd85ad4a
  $fGenericFunctionalDependency ::
    GHC.Generics.Generic
      Language.PureScript.Environment.FunctionalDependency
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Environment.FunctionalDependency
                  Language.PureScript.Environment.$fGenericFunctionalDependency1
                    `cast`
                  (forall (x :: <*>_N).
                   <Language.PureScript.Environment.FunctionalDependency>_R
                   ->_R (Sym (GHC.Generics.N:M1[0]
                                  <*>_N
                                  <GHC.Generics.D>_P
                                  <'GHC.Generics.MetaData
                                     "FunctionalDependency"
                                     "Language.PureScript.Environment"
                                     "purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"
                                     'GHC.Types.False>_P
                                  <GHC.Generics.M1
                                     GHC.Generics.C
                                     ('GHC.Generics.MetaCons
                                        "FunctionalDependency"
                                        'GHC.Generics.PrefixI
                                        'GHC.Types.True)
                                     (GHC.Generics.M1
                                        GHC.Generics.S
                                        ('GHC.Generics.MetaSel
                                           ('GHC.Base.Just "fdDeterminers")
                                           'GHC.Generics.NoSourceUnpackedness
                                           'GHC.Generics.NoSourceStrictness
                                           'GHC.Generics.DecidedLazy)
                                        (GHC.Generics.K1 GHC.Generics.R [GHC.Types.Int])
                                      GHC.Generics.:*: GHC.Generics.M1
                                                         GHC.Generics.S
                                                         ('GHC.Generics.MetaSel
                                                            ('GHC.Base.Just "fdDetermined")
                                                            'GHC.Generics.NoSourceUnpackedness
                                                            'GHC.Generics.NoSourceStrictness
                                                            'GHC.Generics.DecidedLazy)
                                                         (GHC.Generics.K1
                                                            GHC.Generics.R
                                                            [GHC.Types.Int]))>_R) ; Sub (Sym (Language.PureScript.Environment.Rep_FunctionalDependency[0]))) <x>_N)
                  Language.PureScript.Environment.$fGenericFunctionalDependency_$cto -}
ef672654cffb5adb82634076fd85ad4a
  $fGenericFunctionalDependency1 ::
    Language.PureScript.Environment.FunctionalDependency
    -> GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "FunctionalDependency" 'GHC.Generics.PrefixI 'GHC.Types.True)
         (GHC.Generics.M1
            GHC.Generics.S
            ('GHC.Generics.MetaSel
               ('GHC.Base.Just "fdDeterminers")
               'GHC.Generics.NoSourceUnpackedness
               'GHC.Generics.NoSourceStrictness
               'GHC.Generics.DecidedLazy)
            (GHC.Generics.K1 GHC.Generics.R [GHC.Types.Int])
          GHC.Generics.:*: GHC.Generics.M1
                             GHC.Generics.S
                             ('GHC.Generics.MetaSel
                                ('GHC.Base.Just "fdDetermined")
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy)
                             (GHC.Generics.K1 GHC.Generics.R [GHC.Types.Int]))
         x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ x
                   (x1 :: Language.PureScript.Environment.FunctionalDependency) ->
                 case x1 of wild { Language.PureScript.Environment.FunctionalDependency g1 g2 ->
                 (GHC.Generics.:*:
                    @ *
                    @ (GHC.Generics.M1
                         GHC.Generics.S
                         ('GHC.Generics.MetaSel
                            ('GHC.Base.Just "fdDeterminers")
                            'GHC.Generics.NoSourceUnpackedness
                            'GHC.Generics.NoSourceStrictness
                            'GHC.Generics.DecidedLazy)
                         (GHC.Generics.K1 GHC.Generics.R [GHC.Types.Int]))
                    @ (GHC.Generics.M1
                         GHC.Generics.S
                         ('GHC.Generics.MetaSel
                            ('GHC.Base.Just "fdDetermined")
                            'GHC.Generics.NoSourceUnpackedness
                            'GHC.Generics.NoSourceStrictness
                            'GHC.Generics.DecidedLazy)
                         (GHC.Generics.K1 GHC.Generics.R [GHC.Types.Int]))
                    @ x
                    g1
                      `cast`
                    (Sym (GHC.Generics.N:K1[0]
                              <*>_N
                              <GHC.Generics.R>_P
                              <[GHC.Types.Int]>_R
                              <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                <*>_N
                                                <GHC.Generics.S>_P
                                                <'GHC.Generics.MetaSel
                                                   ('GHC.Base.Just "fdDeterminers")
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy>_P
                                                <GHC.Generics.K1
                                                   GHC.Generics.R [GHC.Types.Int]>_R) <x>_N)
                    g2
                      `cast`
                    (Sym (GHC.Generics.N:K1[0]
                              <*>_N
                              <GHC.Generics.R>_P
                              <[GHC.Types.Int]>_R
                              <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                <*>_N
                                                <GHC.Generics.S>_P
                                                <'GHC.Generics.MetaSel
                                                   ('GHC.Base.Just "fdDetermined")
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy>_P
                                                <GHC.Generics.K1
                                                   GHC.Generics.R [GHC.Types.Int]>_R) <x>_N))
                   `cast`
                 (Sym (GHC.Generics.N:M1[0]
                           <*>_N
                           <GHC.Generics.C>_P
                           <'GHC.Generics.MetaCons
                              "FunctionalDependency" 'GHC.Generics.PrefixI 'GHC.Types.True>_P
                           <GHC.Generics.M1
                              GHC.Generics.S
                              ('GHC.Generics.MetaSel
                                 ('GHC.Base.Just "fdDeterminers")
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (GHC.Generics.K1 GHC.Generics.R [GHC.Types.Int])
                            GHC.Generics.:*: GHC.Generics.M1
                                               GHC.Generics.S
                                               ('GHC.Generics.MetaSel
                                                  ('GHC.Base.Just "fdDetermined")
                                                  'GHC.Generics.NoSourceUnpackedness
                                                  'GHC.Generics.NoSourceStrictness
                                                  'GHC.Generics.DecidedLazy)
                                               (GHC.Generics.K1
                                                  GHC.Generics.R [GHC.Types.Int])>_R) <x>_N) }) -}
ef672654cffb5adb82634076fd85ad4a
  $fGenericFunctionalDependency_$cto ::
    GHC.Generics.Rep
      Language.PureScript.Environment.FunctionalDependency x
    -> Language.PureScript.Environment.FunctionalDependency
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ x
                   (ds :: GHC.Generics.Rep
                            Language.PureScript.Environment.FunctionalDependency x) ->
                 case ds
                        `cast`
                      ((Sub (Language.PureScript.Environment.Rep_FunctionalDependency[0]) ; (GHC.Generics.N:M1[0]
                                                                                                 <*>_N
                                                                                                 <GHC.Generics.D>_P
                                                                                                 <'GHC.Generics.MetaData
                                                                                                    "FunctionalDependency"
                                                                                                    "Language.PureScript.Environment"
                                                                                                    "purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"
                                                                                                    'GHC.Types.False>_P
                                                                                                 <GHC.Generics.M1
                                                                                                    GHC.Generics.C
                                                                                                    ('GHC.Generics.MetaCons
                                                                                                       "FunctionalDependency"
                                                                                                       'GHC.Generics.PrefixI
                                                                                                       'GHC.Types.True)
                                                                                                    (GHC.Generics.M1
                                                                                                       GHC.Generics.S
                                                                                                       ('GHC.Generics.MetaSel
                                                                                                          ('GHC.Base.Just
                                                                                                             "fdDeterminers")
                                                                                                          'GHC.Generics.NoSourceUnpackedness
                                                                                                          'GHC.Generics.NoSourceStrictness
                                                                                                          'GHC.Generics.DecidedLazy)
                                                                                                       (GHC.Generics.K1
                                                                                                          GHC.Generics.R
                                                                                                          [GHC.Types.Int])
                                                                                                     GHC.Generics.:*: GHC.Generics.M1
                                                                                                                        GHC.Generics.S
                                                                                                                        ('GHC.Generics.MetaSel
                                                                                                                           ('GHC.Base.Just
                                                                                                                              "fdDetermined")
                                                                                                                           'GHC.Generics.NoSourceUnpackedness
                                                                                                                           'GHC.Generics.NoSourceStrictness
                                                                                                                           'GHC.Generics.DecidedLazy)
                                                                                                                        (GHC.Generics.K1
                                                                                                                           GHC.Generics.R
                                                                                                                           [GHC.Types.Int]))>_R ; GHC.Generics.N:M1[0]
                                                                                                                                                      <*>_N
                                                                                                                                                      <GHC.Generics.C>_P
                                                                                                                                                      <'GHC.Generics.MetaCons
                                                                                                                                                         "FunctionalDependency"
                                                                                                                                                         'GHC.Generics.PrefixI
                                                                                                                                                         'GHC.Types.True>_P
                                                                                                                                                      <GHC.Generics.M1
                                                                                                                                                         GHC.Generics.S
                                                                                                                                                         ('GHC.Generics.MetaSel
                                                                                                                                                            ('GHC.Base.Just
                                                                                                                                                               "fdDeterminers")
                                                                                                                                                            'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                            'GHC.Generics.NoSourceStrictness
                                                                                                                                                            'GHC.Generics.DecidedLazy)
                                                                                                                                                         (GHC.Generics.K1
                                                                                                                                                            GHC.Generics.R
                                                                                                                                                            [GHC.Types.Int])
                                                                                                                                                       GHC.Generics.:*: GHC.Generics.M1
                                                                                                                                                                          GHC.Generics.S
                                                                                                                                                                          ('GHC.Generics.MetaSel
                                                                                                                                                                             ('GHC.Base.Just
                                                                                                                                                                                "fdDetermined")
                                                                                                                                                                             'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                             'GHC.Generics.NoSourceStrictness
                                                                                                                                                                             'GHC.Generics.DecidedLazy)
                                                                                                                                                                          (GHC.Generics.K1
                                                                                                                                                                             GHC.Generics.R
                                                                                                                                                                             [GHC.Types.Int])>_R)) <x>_N) of wild { GHC.Generics.:*: ds1 ds2 ->
                 Language.PureScript.Environment.FunctionalDependency
                   ds1
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           ('GHC.Base.Just "fdDeterminers")
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1
                           GHC.Generics.R [GHC.Types.Int]>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                         <*>_N
                                                                         <GHC.Generics.R>_P
                                                                         <[GHC.Types.Int]>_R
                                                                         <x>_P)
                   ds2
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           ('GHC.Base.Just "fdDetermined")
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1
                           GHC.Generics.R [GHC.Types.Int]>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                         <*>_N
                                                                         <GHC.Generics.R>_P
                                                                         <[GHC.Types.Int]>_R
                                                                         <x>_P) }) -}
90ac7b5e1c331fe4ca4a3a5c9b2afcbd
  $fGenericNameKind ::
    GHC.Generics.Generic Language.PureScript.Environment.NameKind
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Environment.NameKind
                  Language.PureScript.Environment.$fGenericNameKind1
                    `cast`
                  (forall (x :: <*>_N).
                   <Language.PureScript.Environment.NameKind>_R
                   ->_R (Sym (GHC.Generics.N:M1[0]
                                  <*>_N
                                  <GHC.Generics.D>_P
                                  <'GHC.Generics.MetaData
                                     "NameKind"
                                     "Language.PureScript.Environment"
                                     "purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"
                                     'GHC.Types.False>_P
                                  <GHC.Generics.M1
                                     GHC.Generics.C
                                     ('GHC.Generics.MetaCons
                                        "Private" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                     GHC.Generics.U1
                                   GHC.Generics.:+: (GHC.Generics.M1
                                                       GHC.Generics.C
                                                       ('GHC.Generics.MetaCons
                                                          "Public"
                                                          'GHC.Generics.PrefixI
                                                          'GHC.Types.False)
                                                       GHC.Generics.U1
                                                     GHC.Generics.:+: GHC.Generics.M1
                                                                        GHC.Generics.C
                                                                        ('GHC.Generics.MetaCons
                                                                           "External"
                                                                           'GHC.Generics.PrefixI
                                                                           'GHC.Types.False)
                                                                        GHC.Generics.U1)>_R) ; Sub (Sym (Language.PureScript.Environment.Rep_NameKind[0]))) <x>_N)
                  Language.PureScript.Environment.$fGenericNameKind_$cto -}
90ac7b5e1c331fe4ca4a3a5c9b2afcbd
  $fGenericNameKind1 ::
    Language.PureScript.Environment.NameKind
    -> (GHC.Generics.:+:)
         (GHC.Generics.M1
            GHC.Generics.C
            ('GHC.Generics.MetaCons
               "Private" 'GHC.Generics.PrefixI 'GHC.Types.False)
            GHC.Generics.U1)
         (GHC.Generics.M1
            GHC.Generics.C
            ('GHC.Generics.MetaCons
               "Public" 'GHC.Generics.PrefixI 'GHC.Types.False)
            GHC.Generics.U1
          GHC.Generics.:+: GHC.Generics.M1
                             GHC.Generics.C
                             ('GHC.Generics.MetaCons
                                "External" 'GHC.Generics.PrefixI 'GHC.Types.False)
                             GHC.Generics.U1)
         x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ x (x1 :: Language.PureScript.Environment.NameKind) ->
                 case x1 of wild {
                   Language.PureScript.Environment.Private
                   -> Language.PureScript.Environment.$fGenericNameKind6 @ x
                   Language.PureScript.Environment.Public
                   -> Language.PureScript.Environment.$fGenericNameKind4 @ x
                   Language.PureScript.Environment.External
                   -> Language.PureScript.Environment.$fGenericNameKind2 @ x }) -}
a8a25273fa518f6132de6394a551877e
  $fGenericNameKind2 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Private" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Public" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1
       GHC.Generics.:+: GHC.Generics.M1
                          GHC.Generics.C
                          ('GHC.Generics.MetaCons
                             "External" 'GHC.Generics.PrefixI 'GHC.Types.False)
                          GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (\ @ x ->
                 GHC.Generics.R1
                   @ *
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Private" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Public" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1
                      GHC.Generics.:+: GHC.Generics.M1
                                         GHC.Generics.C
                                         ('GHC.Generics.MetaCons
                                            "External" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                         GHC.Generics.U1)
                   @ x
                   (Language.PureScript.Environment.$fGenericNameKind3 @ x)) -}
e8d0038940f83c2367ce8b9625bc7da8
  $fGenericNameKind3 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Public" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "External" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (\ @ x ->
                 GHC.Generics.R1
                   @ *
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Public" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "External" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ x
                   (GHC.Generics.U1 @ * @ x)
                     `cast`
                   (Sym (GHC.Generics.N:M1[0]
                             <*>_N
                             <GHC.Generics.C>_P
                             <'GHC.Generics.MetaCons
                                "External" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                             <GHC.Generics.U1>_R) <x>_N)) -}
f56356c6a75ceccf5d791a4b1ab24e0d
  $fGenericNameKind4 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Private" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Public" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1
       GHC.Generics.:+: GHC.Generics.M1
                          GHC.Generics.C
                          ('GHC.Generics.MetaCons
                             "External" 'GHC.Generics.PrefixI 'GHC.Types.False)
                          GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (\ @ x ->
                 GHC.Generics.R1
                   @ *
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Private" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Public" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1
                      GHC.Generics.:+: GHC.Generics.M1
                                         GHC.Generics.C
                                         ('GHC.Generics.MetaCons
                                            "External" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                         GHC.Generics.U1)
                   @ x
                   (Language.PureScript.Environment.$fGenericNameKind5 @ x)) -}
8c5d4ef28441967e9d4693cc4eba499e
  $fGenericNameKind5 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Public" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "External" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (\ @ x ->
                 GHC.Generics.L1
                   @ *
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Public" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "External" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ x
                   (GHC.Generics.U1 @ * @ x)
                     `cast`
                   (Sym (GHC.Generics.N:M1[0]
                             <*>_N
                             <GHC.Generics.C>_P
                             <'GHC.Generics.MetaCons
                                "Public" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                             <GHC.Generics.U1>_R) <x>_N)) -}
65209b472590f6a182d64cee6e72d8d4
  $fGenericNameKind6 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Private" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Public" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1
       GHC.Generics.:+: GHC.Generics.M1
                          GHC.Generics.C
                          ('GHC.Generics.MetaCons
                             "External" 'GHC.Generics.PrefixI 'GHC.Types.False)
                          GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (\ @ x ->
                 GHC.Generics.L1
                   @ *
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Private" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Public" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1
                      GHC.Generics.:+: GHC.Generics.M1
                                         GHC.Generics.C
                                         ('GHC.Generics.MetaCons
                                            "External" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                         GHC.Generics.U1)
                   @ x
                   (GHC.Generics.U1 @ * @ x)
                     `cast`
                   (Sym (GHC.Generics.N:M1[0]
                             <*>_N
                             <GHC.Generics.C>_P
                             <'GHC.Generics.MetaCons
                                "Private" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                             <GHC.Generics.U1>_R) <x>_N)) -}
90ac7b5e1c331fe4ca4a3a5c9b2afcbd
  $fGenericNameKind_$cto ::
    GHC.Generics.Rep Language.PureScript.Environment.NameKind x
    -> Language.PureScript.Environment.NameKind
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ x
                   (ds :: GHC.Generics.Rep
                            Language.PureScript.Environment.NameKind x) ->
                 case ds
                        `cast`
                      ((Sub (Language.PureScript.Environment.Rep_NameKind[0]) ; GHC.Generics.N:M1[0]
                                                                                    <*>_N
                                                                                    <GHC.Generics.D>_P
                                                                                    <'GHC.Generics.MetaData
                                                                                       "NameKind"
                                                                                       "Language.PureScript.Environment"
                                                                                       "purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"
                                                                                       'GHC.Types.False>_P
                                                                                    <GHC.Generics.M1
                                                                                       GHC.Generics.C
                                                                                       ('GHC.Generics.MetaCons
                                                                                          "Private"
                                                                                          'GHC.Generics.PrefixI
                                                                                          'GHC.Types.False)
                                                                                       GHC.Generics.U1
                                                                                     GHC.Generics.:+: (GHC.Generics.M1
                                                                                                         GHC.Generics.C
                                                                                                         ('GHC.Generics.MetaCons
                                                                                                            "Public"
                                                                                                            'GHC.Generics.PrefixI
                                                                                                            'GHC.Types.False)
                                                                                                         GHC.Generics.U1
                                                                                                       GHC.Generics.:+: GHC.Generics.M1
                                                                                                                          GHC.Generics.C
                                                                                                                          ('GHC.Generics.MetaCons
                                                                                                                             "External"
                                                                                                                             'GHC.Generics.PrefixI
                                                                                                                             'GHC.Types.False)
                                                                                                                          GHC.Generics.U1)>_R) <x>_N) of wild {
                   GHC.Generics.L1 ds1
                   -> case ds1
                             `cast`
                           (GHC.Generics.N:M1[0]
                                <*>_N
                                <GHC.Generics.C>_P
                                <'GHC.Generics.MetaCons
                                   "Private" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                <GHC.Generics.U1>_R <x>_N) of wild1 { GHC.Generics.U1 ->
                      Language.PureScript.Environment.Private }
                   GHC.Generics.R1 ds1
                   -> case ds1 of wild1 {
                        GHC.Generics.L1 ds2
                        -> case ds2
                                  `cast`
                                (GHC.Generics.N:M1[0]
                                     <*>_N
                                     <GHC.Generics.C>_P
                                     <'GHC.Generics.MetaCons
                                        "Public" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                     <GHC.Generics.U1>_R <x>_N) of wild2 { GHC.Generics.U1 ->
                           Language.PureScript.Environment.Public }
                        GHC.Generics.R1 ds2
                        -> case ds2
                                  `cast`
                                (GHC.Generics.N:M1[0]
                                     <*>_N
                                     <GHC.Generics.C>_P
                                     <'GHC.Generics.MetaCons
                                        "External" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                     <GHC.Generics.U1>_R <x>_N) of wild2 { GHC.Generics.U1 ->
                           Language.PureScript.Environment.External } } }) -}
610613df6c74f57795f9d575591a7472
  $fGenericNameVisibility ::
    GHC.Generics.Generic Language.PureScript.Environment.NameVisibility
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Environment.NameVisibility
                  Language.PureScript.Environment.$fGenericNameVisibility1
                    `cast`
                  (forall (x :: <*>_N).
                   <Language.PureScript.Environment.NameVisibility>_R
                   ->_R (Sym (GHC.Generics.N:M1[0]
                                  <*>_N
                                  <GHC.Generics.D>_P
                                  <'GHC.Generics.MetaData
                                     "NameVisibility"
                                     "Language.PureScript.Environment"
                                     "purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"
                                     'GHC.Types.False>_P
                                  <GHC.Generics.M1
                                     GHC.Generics.C
                                     ('GHC.Generics.MetaCons
                                        "Undefined" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                     GHC.Generics.U1
                                   GHC.Generics.:+: GHC.Generics.M1
                                                      GHC.Generics.C
                                                      ('GHC.Generics.MetaCons
                                                         "Defined"
                                                         'GHC.Generics.PrefixI
                                                         'GHC.Types.False)
                                                      GHC.Generics.U1>_R) ; Sub (Sym (Language.PureScript.Environment.Rep_NameVisibility[0]))) <x>_N)
                  Language.PureScript.Environment.$fGenericNameVisibility_$cto -}
610613df6c74f57795f9d575591a7472
  $fGenericNameVisibility1 ::
    Language.PureScript.Environment.NameVisibility
    -> (GHC.Generics.:+:)
         (GHC.Generics.M1
            GHC.Generics.C
            ('GHC.Generics.MetaCons
               "Undefined" 'GHC.Generics.PrefixI 'GHC.Types.False)
            GHC.Generics.U1)
         (GHC.Generics.M1
            GHC.Generics.C
            ('GHC.Generics.MetaCons
               "Defined" 'GHC.Generics.PrefixI 'GHC.Types.False)
            GHC.Generics.U1)
         x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ x (x1 :: Language.PureScript.Environment.NameVisibility) ->
                 case x1 of wild {
                   Language.PureScript.Environment.Undefined
                   -> Language.PureScript.Environment.$fGenericNameVisibility3 @ x
                   Language.PureScript.Environment.Defined
                   -> Language.PureScript.Environment.$fGenericNameVisibility2
                        @ x }) -}
70fc2d913248cad66d7033746eb04ab7
  $fGenericNameVisibility2 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Undefined" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Defined" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (\ @ x ->
                 GHC.Generics.R1
                   @ *
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Undefined" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Defined" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ x
                   (GHC.Generics.U1 @ * @ x)
                     `cast`
                   (Sym (GHC.Generics.N:M1[0]
                             <*>_N
                             <GHC.Generics.C>_P
                             <'GHC.Generics.MetaCons
                                "Defined" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                             <GHC.Generics.U1>_R) <x>_N)) -}
135ed32d5cdda8a3ae55d46ff46341a5
  $fGenericNameVisibility3 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Undefined" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Defined" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (\ @ x ->
                 GHC.Generics.L1
                   @ *
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Undefined" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Defined" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ x
                   (GHC.Generics.U1 @ * @ x)
                     `cast`
                   (Sym (GHC.Generics.N:M1[0]
                             <*>_N
                             <GHC.Generics.C>_P
                             <'GHC.Generics.MetaCons
                                "Undefined" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                             <GHC.Generics.U1>_R) <x>_N)) -}
610613df6c74f57795f9d575591a7472
  $fGenericNameVisibility_$cto ::
    GHC.Generics.Rep Language.PureScript.Environment.NameVisibility x
    -> Language.PureScript.Environment.NameVisibility
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ x
                   (ds :: GHC.Generics.Rep
                            Language.PureScript.Environment.NameVisibility x) ->
                 case ds
                        `cast`
                      ((Sub (Language.PureScript.Environment.Rep_NameVisibility[0]) ; GHC.Generics.N:M1[0]
                                                                                          <*>_N
                                                                                          <GHC.Generics.D>_P
                                                                                          <'GHC.Generics.MetaData
                                                                                             "NameVisibility"
                                                                                             "Language.PureScript.Environment"
                                                                                             "purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"
                                                                                             'GHC.Types.False>_P
                                                                                          <GHC.Generics.M1
                                                                                             GHC.Generics.C
                                                                                             ('GHC.Generics.MetaCons
                                                                                                "Undefined"
                                                                                                'GHC.Generics.PrefixI
                                                                                                'GHC.Types.False)
                                                                                             GHC.Generics.U1
                                                                                           GHC.Generics.:+: GHC.Generics.M1
                                                                                                              GHC.Generics.C
                                                                                                              ('GHC.Generics.MetaCons
                                                                                                                 "Defined"
                                                                                                                 'GHC.Generics.PrefixI
                                                                                                                 'GHC.Types.False)
                                                                                                              GHC.Generics.U1>_R) <x>_N) of wild {
                   GHC.Generics.L1 ds1
                   -> case ds1
                             `cast`
                           (GHC.Generics.N:M1[0]
                                <*>_N
                                <GHC.Generics.C>_P
                                <'GHC.Generics.MetaCons
                                   "Undefined" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                <GHC.Generics.U1>_R <x>_N) of wild1 { GHC.Generics.U1 ->
                      Language.PureScript.Environment.Undefined }
                   GHC.Generics.R1 ds1
                   -> case ds1
                             `cast`
                           (GHC.Generics.N:M1[0]
                                <*>_N
                                <GHC.Generics.C>_P
                                <'GHC.Generics.MetaCons
                                   "Defined" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                <GHC.Generics.U1>_R <x>_N) of wild1 { GHC.Generics.U1 ->
                      Language.PureScript.Environment.Defined } }) -}
ef672654cffb5adb82634076fd85ad4a
  $fGenericTypeClassData ::
    GHC.Generics.Generic Language.PureScript.Environment.TypeClassData
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Environment.TypeClassData
                  Language.PureScript.Environment.$fGenericTypeClassData1
                    `cast`
                  (forall (x :: <*>_N).
                   <Language.PureScript.Environment.TypeClassData>_R
                   ->_R (Sym (GHC.Generics.N:M1[0]
                                  <*>_N
                                  <GHC.Generics.D>_P
                                  <'GHC.Generics.MetaData
                                     "TypeClassData"
                                     "Language.PureScript.Environment"
                                     "purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"
                                     'GHC.Types.False>_P
                                  <GHC.Generics.M1
                                     GHC.Generics.C
                                     ('GHC.Generics.MetaCons
                                        "TypeClassData" 'GHC.Generics.PrefixI 'GHC.Types.True)
                                     ((GHC.Generics.M1
                                         GHC.Generics.S
                                         ('GHC.Generics.MetaSel
                                            ('GHC.Base.Just "typeClassArguments")
                                            'GHC.Generics.NoSourceUnpackedness
                                            'GHC.Generics.NoSourceStrictness
                                            'GHC.Generics.DecidedLazy)
                                         (GHC.Generics.K1
                                            GHC.Generics.R
                                            [(Data.Text.Internal.Text,
                                              GHC.Base.Maybe Language.PureScript.Kinds.Kind)])
                                       GHC.Generics.:*: (GHC.Generics.M1
                                                           GHC.Generics.S
                                                           ('GHC.Generics.MetaSel
                                                              ('GHC.Base.Just "typeClassMembers")
                                                              'GHC.Generics.NoSourceUnpackedness
                                                              'GHC.Generics.NoSourceStrictness
                                                              'GHC.Generics.DecidedLazy)
                                                           (GHC.Generics.K1
                                                              GHC.Generics.R
                                                              [(Language.PureScript.Names.Ident,
                                                                Language.PureScript.Types.Type)])
                                                         GHC.Generics.:*: GHC.Generics.M1
                                                                            GHC.Generics.S
                                                                            ('GHC.Generics.MetaSel
                                                                               ('GHC.Base.Just
                                                                                  "typeClassSuperclasses")
                                                                               'GHC.Generics.NoSourceUnpackedness
                                                                               'GHC.Generics.NoSourceStrictness
                                                                               'GHC.Generics.DecidedLazy)
                                                                            (GHC.Generics.K1
                                                                               GHC.Generics.R
                                                                               [Language.PureScript.Types.Constraint])))
                                      GHC.Generics.:*: (GHC.Generics.M1
                                                          GHC.Generics.S
                                                          ('GHC.Generics.MetaSel
                                                             ('GHC.Base.Just
                                                                "typeClassDependencies")
                                                             'GHC.Generics.NoSourceUnpackedness
                                                             'GHC.Generics.NoSourceStrictness
                                                             'GHC.Generics.DecidedLazy)
                                                          (GHC.Generics.K1
                                                             GHC.Generics.R
                                                             [Language.PureScript.Environment.FunctionalDependency])
                                                        GHC.Generics.:*: (GHC.Generics.M1
                                                                            GHC.Generics.S
                                                                            ('GHC.Generics.MetaSel
                                                                               ('GHC.Base.Just
                                                                                  "typeClassDeterminedArguments")
                                                                               'GHC.Generics.NoSourceUnpackedness
                                                                               'GHC.Generics.NoSourceStrictness
                                                                               'GHC.Generics.DecidedLazy)
                                                                            (GHC.Generics.K1
                                                                               GHC.Generics.R
                                                                               (Data.Set.Internal.Set
                                                                                  GHC.Types.Int))
                                                                          GHC.Generics.:*: GHC.Generics.M1
                                                                                             GHC.Generics.S
                                                                                             ('GHC.Generics.MetaSel
                                                                                                ('GHC.Base.Just
                                                                                                   "typeClassCoveringSets")
                                                                                                'GHC.Generics.NoSourceUnpackedness
                                                                                                'GHC.Generics.NoSourceStrictness
                                                                                                'GHC.Generics.DecidedLazy)
                                                                                             (GHC.Generics.K1
                                                                                                GHC.Generics.R
                                                                                                (Data.Set.Internal.Set
                                                                                                   (Data.Set.Internal.Set
                                                                                                      GHC.Types.Int))))))>_R) ; Sub (Sym (Language.PureScript.Environment.Rep_TypeClassData[0]))) <x>_N)
                  Language.PureScript.Environment.$fGenericTypeClassData_$cto -}
ef672654cffb5adb82634076fd85ad4a
  $fGenericTypeClassData1 ::
    Language.PureScript.Environment.TypeClassData
    -> GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "TypeClassData" 'GHC.Generics.PrefixI 'GHC.Types.True)
         ((GHC.Generics.M1
             GHC.Generics.S
             ('GHC.Generics.MetaSel
                ('GHC.Base.Just "typeClassArguments")
                'GHC.Generics.NoSourceUnpackedness
                'GHC.Generics.NoSourceStrictness
                'GHC.Generics.DecidedLazy)
             (GHC.Generics.K1
                GHC.Generics.R
                [(Data.Text.Internal.Text,
                  GHC.Base.Maybe Language.PureScript.Kinds.Kind)])
           GHC.Generics.:*: (GHC.Generics.M1
                               GHC.Generics.S
                               ('GHC.Generics.MetaSel
                                  ('GHC.Base.Just "typeClassMembers")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy)
                               (GHC.Generics.K1
                                  GHC.Generics.R
                                  [(Language.PureScript.Names.Ident,
                                    Language.PureScript.Types.Type)])
                             GHC.Generics.:*: GHC.Generics.M1
                                                GHC.Generics.S
                                                ('GHC.Generics.MetaSel
                                                   ('GHC.Base.Just "typeClassSuperclasses")
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy)
                                                (GHC.Generics.K1
                                                   GHC.Generics.R
                                                   [Language.PureScript.Types.Constraint])))
          GHC.Generics.:*: (GHC.Generics.M1
                              GHC.Generics.S
                              ('GHC.Generics.MetaSel
                                 ('GHC.Base.Just "typeClassDependencies")
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (GHC.Generics.K1
                                 GHC.Generics.R
                                 [Language.PureScript.Environment.FunctionalDependency])
                            GHC.Generics.:*: (GHC.Generics.M1
                                                GHC.Generics.S
                                                ('GHC.Generics.MetaSel
                                                   ('GHC.Base.Just "typeClassDeterminedArguments")
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy)
                                                (GHC.Generics.K1
                                                   GHC.Generics.R
                                                   (Data.Set.Internal.Set GHC.Types.Int))
                                              GHC.Generics.:*: GHC.Generics.M1
                                                                 GHC.Generics.S
                                                                 ('GHC.Generics.MetaSel
                                                                    ('GHC.Base.Just
                                                                       "typeClassCoveringSets")
                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                    'GHC.Generics.NoSourceStrictness
                                                                    'GHC.Generics.DecidedLazy)
                                                                 (GHC.Generics.K1
                                                                    GHC.Generics.R
                                                                    (Data.Set.Internal.Set
                                                                       (Data.Set.Internal.Set
                                                                          GHC.Types.Int))))))
         x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U,U,U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ x (x1 :: Language.PureScript.Environment.TypeClassData) ->
                 case x1 of wild { Language.PureScript.Environment.TypeClassData g1 g2 g3 g4 g5 g6 ->
                 (GHC.Generics.:*:
                    @ *
                    @ (GHC.Generics.M1
                         GHC.Generics.S
                         ('GHC.Generics.MetaSel
                            ('GHC.Base.Just "typeClassArguments")
                            'GHC.Generics.NoSourceUnpackedness
                            'GHC.Generics.NoSourceStrictness
                            'GHC.Generics.DecidedLazy)
                         (GHC.Generics.K1
                            GHC.Generics.R
                            [(Data.Text.Internal.Text,
                              GHC.Base.Maybe Language.PureScript.Kinds.Kind)])
                       GHC.Generics.:*: (GHC.Generics.M1
                                           GHC.Generics.S
                                           ('GHC.Generics.MetaSel
                                              ('GHC.Base.Just "typeClassMembers")
                                              'GHC.Generics.NoSourceUnpackedness
                                              'GHC.Generics.NoSourceStrictness
                                              'GHC.Generics.DecidedLazy)
                                           (GHC.Generics.K1
                                              GHC.Generics.R
                                              [(Language.PureScript.Names.Ident,
                                                Language.PureScript.Types.Type)])
                                         GHC.Generics.:*: GHC.Generics.M1
                                                            GHC.Generics.S
                                                            ('GHC.Generics.MetaSel
                                                               ('GHC.Base.Just
                                                                  "typeClassSuperclasses")
                                                               'GHC.Generics.NoSourceUnpackedness
                                                               'GHC.Generics.NoSourceStrictness
                                                               'GHC.Generics.DecidedLazy)
                                                            (GHC.Generics.K1
                                                               GHC.Generics.R
                                                               [Language.PureScript.Types.Constraint])))
                    @ (GHC.Generics.M1
                         GHC.Generics.S
                         ('GHC.Generics.MetaSel
                            ('GHC.Base.Just "typeClassDependencies")
                            'GHC.Generics.NoSourceUnpackedness
                            'GHC.Generics.NoSourceStrictness
                            'GHC.Generics.DecidedLazy)
                         (GHC.Generics.K1
                            GHC.Generics.R
                            [Language.PureScript.Environment.FunctionalDependency])
                       GHC.Generics.:*: (GHC.Generics.M1
                                           GHC.Generics.S
                                           ('GHC.Generics.MetaSel
                                              ('GHC.Base.Just "typeClassDeterminedArguments")
                                              'GHC.Generics.NoSourceUnpackedness
                                              'GHC.Generics.NoSourceStrictness
                                              'GHC.Generics.DecidedLazy)
                                           (GHC.Generics.K1
                                              GHC.Generics.R (Data.Set.Internal.Set GHC.Types.Int))
                                         GHC.Generics.:*: GHC.Generics.M1
                                                            GHC.Generics.S
                                                            ('GHC.Generics.MetaSel
                                                               ('GHC.Base.Just
                                                                  "typeClassCoveringSets")
                                                               'GHC.Generics.NoSourceUnpackedness
                                                               'GHC.Generics.NoSourceStrictness
                                                               'GHC.Generics.DecidedLazy)
                                                            (GHC.Generics.K1
                                                               GHC.Generics.R
                                                               (Data.Set.Internal.Set
                                                                  (Data.Set.Internal.Set
                                                                     GHC.Types.Int)))))
                    @ x
                    (GHC.Generics.:*:
                       @ *
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "typeClassArguments")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.K1
                               GHC.Generics.R
                               [(Data.Text.Internal.Text,
                                 GHC.Base.Maybe Language.PureScript.Kinds.Kind)]))
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "typeClassMembers")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.K1
                               GHC.Generics.R
                               [(Language.PureScript.Names.Ident,
                                 Language.PureScript.Types.Type)])
                          GHC.Generics.:*: GHC.Generics.M1
                                             GHC.Generics.S
                                             ('GHC.Generics.MetaSel
                                                ('GHC.Base.Just "typeClassSuperclasses")
                                                'GHC.Generics.NoSourceUnpackedness
                                                'GHC.Generics.NoSourceStrictness
                                                'GHC.Generics.DecidedLazy)
                                             (GHC.Generics.K1
                                                GHC.Generics.R
                                                [Language.PureScript.Types.Constraint]))
                       @ x
                       g1
                         `cast`
                       (Sym (GHC.Generics.N:K1[0]
                                 <*>_N
                                 <GHC.Generics.R>_P
                                 <[(Data.Text.Internal.Text,
                                    GHC.Base.Maybe Language.PureScript.Kinds.Kind)]>_R
                                 <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                   <*>_N
                                                   <GHC.Generics.S>_P
                                                   <'GHC.Generics.MetaSel
                                                      ('GHC.Base.Just "typeClassArguments")
                                                      'GHC.Generics.NoSourceUnpackedness
                                                      'GHC.Generics.NoSourceStrictness
                                                      'GHC.Generics.DecidedLazy>_P
                                                   <GHC.Generics.K1
                                                      GHC.Generics.R
                                                      [(Data.Text.Internal.Text,
                                                        GHC.Base.Maybe
                                                          Language.PureScript.Kinds.Kind)]>_R) <x>_N)
                       (GHC.Generics.:*:
                          @ *
                          @ (GHC.Generics.M1
                               GHC.Generics.S
                               ('GHC.Generics.MetaSel
                                  ('GHC.Base.Just "typeClassMembers")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy)
                               (GHC.Generics.K1
                                  GHC.Generics.R
                                  [(Language.PureScript.Names.Ident,
                                    Language.PureScript.Types.Type)]))
                          @ (GHC.Generics.M1
                               GHC.Generics.S
                               ('GHC.Generics.MetaSel
                                  ('GHC.Base.Just "typeClassSuperclasses")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy)
                               (GHC.Generics.K1
                                  GHC.Generics.R [Language.PureScript.Types.Constraint]))
                          @ x
                          g2
                            `cast`
                          (Sym (GHC.Generics.N:K1[0]
                                    <*>_N
                                    <GHC.Generics.R>_P
                                    <[(Language.PureScript.Names.Ident,
                                       Language.PureScript.Types.Type)]>_R
                                    <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                      <*>_N
                                                      <GHC.Generics.S>_P
                                                      <'GHC.Generics.MetaSel
                                                         ('GHC.Base.Just "typeClassMembers")
                                                         'GHC.Generics.NoSourceUnpackedness
                                                         'GHC.Generics.NoSourceStrictness
                                                         'GHC.Generics.DecidedLazy>_P
                                                      <GHC.Generics.K1
                                                         GHC.Generics.R
                                                         [(Language.PureScript.Names.Ident,
                                                           Language.PureScript.Types.Type)]>_R) <x>_N)
                          g3
                            `cast`
                          (Sym (GHC.Generics.N:K1[0]
                                    <*>_N
                                    <GHC.Generics.R>_P
                                    <[Language.PureScript.Types.Constraint]>_R
                                    <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                      <*>_N
                                                      <GHC.Generics.S>_P
                                                      <'GHC.Generics.MetaSel
                                                         ('GHC.Base.Just "typeClassSuperclasses")
                                                         'GHC.Generics.NoSourceUnpackedness
                                                         'GHC.Generics.NoSourceStrictness
                                                         'GHC.Generics.DecidedLazy>_P
                                                      <GHC.Generics.K1
                                                         GHC.Generics.R
                                                         [Language.PureScript.Types.Constraint]>_R) <x>_N)))
                    (GHC.Generics.:*:
                       @ *
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "typeClassDependencies")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.K1
                               GHC.Generics.R
                               [Language.PureScript.Environment.FunctionalDependency]))
                       @ (GHC.Generics.M1
                            GHC.Generics.S
                            ('GHC.Generics.MetaSel
                               ('GHC.Base.Just "typeClassDeterminedArguments")
                               'GHC.Generics.NoSourceUnpackedness
                               'GHC.Generics.NoSourceStrictness
                               'GHC.Generics.DecidedLazy)
                            (GHC.Generics.K1
                               GHC.Generics.R (Data.Set.Internal.Set GHC.Types.Int))
                          GHC.Generics.:*: GHC.Generics.M1
                                             GHC.Generics.S
                                             ('GHC.Generics.MetaSel
                                                ('GHC.Base.Just "typeClassCoveringSets")
                                                'GHC.Generics.NoSourceUnpackedness
                                                'GHC.Generics.NoSourceStrictness
                                                'GHC.Generics.DecidedLazy)
                                             (GHC.Generics.K1
                                                GHC.Generics.R
                                                (Data.Set.Internal.Set
                                                   (Data.Set.Internal.Set GHC.Types.Int))))
                       @ x
                       g4
                         `cast`
                       (Sym (GHC.Generics.N:K1[0]
                                 <*>_N
                                 <GHC.Generics.R>_P
                                 <[Language.PureScript.Environment.FunctionalDependency]>_R
                                 <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                   <*>_N
                                                   <GHC.Generics.S>_P
                                                   <'GHC.Generics.MetaSel
                                                      ('GHC.Base.Just "typeClassDependencies")
                                                      'GHC.Generics.NoSourceUnpackedness
                                                      'GHC.Generics.NoSourceStrictness
                                                      'GHC.Generics.DecidedLazy>_P
                                                   <GHC.Generics.K1
                                                      GHC.Generics.R
                                                      [Language.PureScript.Environment.FunctionalDependency]>_R) <x>_N)
                       (GHC.Generics.:*:
                          @ *
                          @ (GHC.Generics.M1
                               GHC.Generics.S
                               ('GHC.Generics.MetaSel
                                  ('GHC.Base.Just "typeClassDeterminedArguments")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy)
                               (GHC.Generics.K1
                                  GHC.Generics.R (Data.Set.Internal.Set GHC.Types.Int)))
                          @ (GHC.Generics.M1
                               GHC.Generics.S
                               ('GHC.Generics.MetaSel
                                  ('GHC.Base.Just "typeClassCoveringSets")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy)
                               (GHC.Generics.K1
                                  GHC.Generics.R
                                  (Data.Set.Internal.Set (Data.Set.Internal.Set GHC.Types.Int))))
                          @ x
                          g5
                            `cast`
                          (Sym (GHC.Generics.N:K1[0]
                                    <*>_N
                                    <GHC.Generics.R>_P
                                    <Data.Set.Internal.Set GHC.Types.Int>_R
                                    <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                      <*>_N
                                                      <GHC.Generics.S>_P
                                                      <'GHC.Generics.MetaSel
                                                         ('GHC.Base.Just
                                                            "typeClassDeterminedArguments")
                                                         'GHC.Generics.NoSourceUnpackedness
                                                         'GHC.Generics.NoSourceStrictness
                                                         'GHC.Generics.DecidedLazy>_P
                                                      <GHC.Generics.K1
                                                         GHC.Generics.R
                                                         (Data.Set.Internal.Set
                                                            GHC.Types.Int)>_R) <x>_N)
                          g6
                            `cast`
                          (Sym (GHC.Generics.N:K1[0]
                                    <*>_N
                                    <GHC.Generics.R>_P
                                    <Data.Set.Internal.Set (Data.Set.Internal.Set GHC.Types.Int)>_R
                                    <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                      <*>_N
                                                      <GHC.Generics.S>_P
                                                      <'GHC.Generics.MetaSel
                                                         ('GHC.Base.Just "typeClassCoveringSets")
                                                         'GHC.Generics.NoSourceUnpackedness
                                                         'GHC.Generics.NoSourceStrictness
                                                         'GHC.Generics.DecidedLazy>_P
                                                      <GHC.Generics.K1
                                                         GHC.Generics.R
                                                         (Data.Set.Internal.Set
                                                            (Data.Set.Internal.Set
                                                               GHC.Types.Int))>_R) <x>_N))))
                   `cast`
                 (Sym (GHC.Generics.N:M1[0]
                           <*>_N
                           <GHC.Generics.C>_P
                           <'GHC.Generics.MetaCons
                              "TypeClassData" 'GHC.Generics.PrefixI 'GHC.Types.True>_P
                           <(GHC.Generics.M1
                               GHC.Generics.S
                               ('GHC.Generics.MetaSel
                                  ('GHC.Base.Just "typeClassArguments")
                                  'GHC.Generics.NoSourceUnpackedness
                                  'GHC.Generics.NoSourceStrictness
                                  'GHC.Generics.DecidedLazy)
                               (GHC.Generics.K1
                                  GHC.Generics.R
                                  [(Data.Text.Internal.Text,
                                    GHC.Base.Maybe Language.PureScript.Kinds.Kind)])
                             GHC.Generics.:*: (GHC.Generics.M1
                                                 GHC.Generics.S
                                                 ('GHC.Generics.MetaSel
                                                    ('GHC.Base.Just "typeClassMembers")
                                                    'GHC.Generics.NoSourceUnpackedness
                                                    'GHC.Generics.NoSourceStrictness
                                                    'GHC.Generics.DecidedLazy)
                                                 (GHC.Generics.K1
                                                    GHC.Generics.R
                                                    [(Language.PureScript.Names.Ident,
                                                      Language.PureScript.Types.Type)])
                                               GHC.Generics.:*: GHC.Generics.M1
                                                                  GHC.Generics.S
                                                                  ('GHC.Generics.MetaSel
                                                                     ('GHC.Base.Just
                                                                        "typeClassSuperclasses")
                                                                     'GHC.Generics.NoSourceUnpackedness
                                                                     'GHC.Generics.NoSourceStrictness
                                                                     'GHC.Generics.DecidedLazy)
                                                                  (GHC.Generics.K1
                                                                     GHC.Generics.R
                                                                     [Language.PureScript.Types.Constraint])))
                            GHC.Generics.:*: (GHC.Generics.M1
                                                GHC.Generics.S
                                                ('GHC.Generics.MetaSel
                                                   ('GHC.Base.Just "typeClassDependencies")
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy)
                                                (GHC.Generics.K1
                                                   GHC.Generics.R
                                                   [Language.PureScript.Environment.FunctionalDependency])
                                              GHC.Generics.:*: (GHC.Generics.M1
                                                                  GHC.Generics.S
                                                                  ('GHC.Generics.MetaSel
                                                                     ('GHC.Base.Just
                                                                        "typeClassDeterminedArguments")
                                                                     'GHC.Generics.NoSourceUnpackedness
                                                                     'GHC.Generics.NoSourceStrictness
                                                                     'GHC.Generics.DecidedLazy)
                                                                  (GHC.Generics.K1
                                                                     GHC.Generics.R
                                                                     (Data.Set.Internal.Set
                                                                        GHC.Types.Int))
                                                                GHC.Generics.:*: GHC.Generics.M1
                                                                                   GHC.Generics.S
                                                                                   ('GHC.Generics.MetaSel
                                                                                      ('GHC.Base.Just
                                                                                         "typeClassCoveringSets")
                                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                                      'GHC.Generics.NoSourceStrictness
                                                                                      'GHC.Generics.DecidedLazy)
                                                                                   (GHC.Generics.K1
                                                                                      GHC.Generics.R
                                                                                      (Data.Set.Internal.Set
                                                                                         (Data.Set.Internal.Set
                                                                                            GHC.Types.Int)))))>_R) <x>_N) }) -}
ef672654cffb5adb82634076fd85ad4a
  $fGenericTypeClassData_$cto ::
    GHC.Generics.Rep Language.PureScript.Environment.TypeClassData x
    -> Language.PureScript.Environment.TypeClassData
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(S(LS)S(LS)),1*U(1*U(U,1*U(U,U)),1*U(U,1*U(U,U)))>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ x
                   (ds :: GHC.Generics.Rep
                            Language.PureScript.Environment.TypeClassData x) ->
                 case ds
                        `cast`
                      ((Sub (Language.PureScript.Environment.Rep_TypeClassData[0]) ; (GHC.Generics.N:M1[0]
                                                                                          <*>_N
                                                                                          <GHC.Generics.D>_P
                                                                                          <'GHC.Generics.MetaData
                                                                                             "TypeClassData"
                                                                                             "Language.PureScript.Environment"
                                                                                             "purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"
                                                                                             'GHC.Types.False>_P
                                                                                          <GHC.Generics.M1
                                                                                             GHC.Generics.C
                                                                                             ('GHC.Generics.MetaCons
                                                                                                "TypeClassData"
                                                                                                'GHC.Generics.PrefixI
                                                                                                'GHC.Types.True)
                                                                                             ((GHC.Generics.M1
                                                                                                 GHC.Generics.S
                                                                                                 ('GHC.Generics.MetaSel
                                                                                                    ('GHC.Base.Just
                                                                                                       "typeClassArguments")
                                                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                                                    'GHC.Generics.NoSourceStrictness
                                                                                                    'GHC.Generics.DecidedLazy)
                                                                                                 (GHC.Generics.K1
                                                                                                    GHC.Generics.R
                                                                                                    [(Data.Text.Internal.Text,
                                                                                                      GHC.Base.Maybe
                                                                                                        Language.PureScript.Kinds.Kind)])
                                                                                               GHC.Generics.:*: (GHC.Generics.M1
                                                                                                                   GHC.Generics.S
                                                                                                                   ('GHC.Generics.MetaSel
                                                                                                                      ('GHC.Base.Just
                                                                                                                         "typeClassMembers")
                                                                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                                                                      'GHC.Generics.NoSourceStrictness
                                                                                                                      'GHC.Generics.DecidedLazy)
                                                                                                                   (GHC.Generics.K1
                                                                                                                      GHC.Generics.R
                                                                                                                      [(Language.PureScript.Names.Ident,
                                                                                                                        Language.PureScript.Types.Type)])
                                                                                                                 GHC.Generics.:*: GHC.Generics.M1
                                                                                                                                    GHC.Generics.S
                                                                                                                                    ('GHC.Generics.MetaSel
                                                                                                                                       ('GHC.Base.Just
                                                                                                                                          "typeClassSuperclasses")
                                                                                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                                                                                       'GHC.Generics.NoSourceStrictness
                                                                                                                                       'GHC.Generics.DecidedLazy)
                                                                                                                                    (GHC.Generics.K1
                                                                                                                                       GHC.Generics.R
                                                                                                                                       [Language.PureScript.Types.Constraint])))
                                                                                              GHC.Generics.:*: (GHC.Generics.M1
                                                                                                                  GHC.Generics.S
                                                                                                                  ('GHC.Generics.MetaSel
                                                                                                                     ('GHC.Base.Just
                                                                                                                        "typeClassDependencies")
                                                                                                                     'GHC.Generics.NoSourceUnpackedness
                                                                                                                     'GHC.Generics.NoSourceStrictness
                                                                                                                     'GHC.Generics.DecidedLazy)
                                                                                                                  (GHC.Generics.K1
                                                                                                                     GHC.Generics.R
                                                                                                                     [Language.PureScript.Environment.FunctionalDependency])
                                                                                                                GHC.Generics.:*: (GHC.Generics.M1
                                                                                                                                    GHC.Generics.S
                                                                                                                                    ('GHC.Generics.MetaSel
                                                                                                                                       ('GHC.Base.Just
                                                                                                                                          "typeClassDeterminedArguments")
                                                                                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                                                                                       'GHC.Generics.NoSourceStrictness
                                                                                                                                       'GHC.Generics.DecidedLazy)
                                                                                                                                    (GHC.Generics.K1
                                                                                                                                       GHC.Generics.R
                                                                                                                                       (Data.Set.Internal.Set
                                                                                                                                          GHC.Types.Int))
                                                                                                                                  GHC.Generics.:*: GHC.Generics.M1
                                                                                                                                                     GHC.Generics.S
                                                                                                                                                     ('GHC.Generics.MetaSel
                                                                                                                                                        ('GHC.Base.Just
                                                                                                                                                           "typeClassCoveringSets")
                                                                                                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                        'GHC.Generics.NoSourceStrictness
                                                                                                                                                        'GHC.Generics.DecidedLazy)
                                                                                                                                                     (GHC.Generics.K1
                                                                                                                                                        GHC.Generics.R
                                                                                                                                                        (Data.Set.Internal.Set
                                                                                                                                                           (Data.Set.Internal.Set
                                                                                                                                                              GHC.Types.Int))))))>_R ; GHC.Generics.N:M1[0]
                                                                                                                                                                                           <*>_N
                                                                                                                                                                                           <GHC.Generics.C>_P
                                                                                                                                                                                           <'GHC.Generics.MetaCons
                                                                                                                                                                                              "TypeClassData"
                                                                                                                                                                                              'GHC.Generics.PrefixI
                                                                                                                                                                                              'GHC.Types.True>_P
                                                                                                                                                                                           <(GHC.Generics.M1
                                                                                                                                                                                               GHC.Generics.S
                                                                                                                                                                                               ('GHC.Generics.MetaSel
                                                                                                                                                                                                  ('GHC.Base.Just
                                                                                                                                                                                                     "typeClassArguments")
                                                                                                                                                                                                  'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                  'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                  'GHC.Generics.DecidedLazy)
                                                                                                                                                                                               (GHC.Generics.K1
                                                                                                                                                                                                  GHC.Generics.R
                                                                                                                                                                                                  [(Data.Text.Internal.Text,
                                                                                                                                                                                                    GHC.Base.Maybe
                                                                                                                                                                                                      Language.PureScript.Kinds.Kind)])
                                                                                                                                                                                             GHC.Generics.:*: (GHC.Generics.M1
                                                                                                                                                                                                                 GHC.Generics.S
                                                                                                                                                                                                                 ('GHC.Generics.MetaSel
                                                                                                                                                                                                                    ('GHC.Base.Just
                                                                                                                                                                                                                       "typeClassMembers")
                                                                                                                                                                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                                    'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                                    'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                                 (GHC.Generics.K1
                                                                                                                                                                                                                    GHC.Generics.R
                                                                                                                                                                                                                    [(Language.PureScript.Names.Ident,
                                                                                                                                                                                                                      Language.PureScript.Types.Type)])
                                                                                                                                                                                                               GHC.Generics.:*: GHC.Generics.M1
                                                                                                                                                                                                                                  GHC.Generics.S
                                                                                                                                                                                                                                  ('GHC.Generics.MetaSel
                                                                                                                                                                                                                                     ('GHC.Base.Just
                                                                                                                                                                                                                                        "typeClassSuperclasses")
                                                                                                                                                                                                                                     'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                                                     'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                                                     'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                                                  (GHC.Generics.K1
                                                                                                                                                                                                                                     GHC.Generics.R
                                                                                                                                                                                                                                     [Language.PureScript.Types.Constraint])))
                                                                                                                                                                                            GHC.Generics.:*: (GHC.Generics.M1
                                                                                                                                                                                                                GHC.Generics.S
                                                                                                                                                                                                                ('GHC.Generics.MetaSel
                                                                                                                                                                                                                   ('GHC.Base.Just
                                                                                                                                                                                                                      "typeClassDependencies")
                                                                                                                                                                                                                   'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                                   'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                                   'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                                (GHC.Generics.K1
                                                                                                                                                                                                                   GHC.Generics.R
                                                                                                                                                                                                                   [Language.PureScript.Environment.FunctionalDependency])
                                                                                                                                                                                                              GHC.Generics.:*: (GHC.Generics.M1
                                                                                                                                                                                                                                  GHC.Generics.S
                                                                                                                                                                                                                                  ('GHC.Generics.MetaSel
                                                                                                                                                                                                                                     ('GHC.Base.Just
                                                                                                                                                                                                                                        "typeClassDeterminedArguments")
                                                                                                                                                                                                                                     'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                                                     'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                                                     'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                                                  (GHC.Generics.K1
                                                                                                                                                                                                                                     GHC.Generics.R
                                                                                                                                                                                                                                     (Data.Set.Internal.Set
                                                                                                                                                                                                                                        GHC.Types.Int))
                                                                                                                                                                                                                                GHC.Generics.:*: GHC.Generics.M1
                                                                                                                                                                                                                                                   GHC.Generics.S
                                                                                                                                                                                                                                                   ('GHC.Generics.MetaSel
                                                                                                                                                                                                                                                      ('GHC.Base.Just
                                                                                                                                                                                                                                                         "typeClassCoveringSets")
                                                                                                                                                                                                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                                                                      'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                                                                      'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                                                                   (GHC.Generics.K1
                                                                                                                                                                                                                                                      GHC.Generics.R
                                                                                                                                                                                                                                                      (Data.Set.Internal.Set
                                                                                                                                                                                                                                                         (Data.Set.Internal.Set
                                                                                                                                                                                                                                                            GHC.Types.Int)))))>_R)) <x>_N) of wild { GHC.Generics.:*: ds1 ds2 ->
                 case ds1 of wild1 { GHC.Generics.:*: ds3 ds4 ->
                 case ds4 of wild2 { GHC.Generics.:*: ds5 ds6 ->
                 case ds2 of wild3 { GHC.Generics.:*: ds7 ds8 ->
                 case ds8 of wild4 { GHC.Generics.:*: ds9 ds10 ->
                 Language.PureScript.Environment.TypeClassData
                   ds3
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           ('GHC.Base.Just "typeClassArguments")
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1
                           GHC.Generics.R
                           [(Data.Text.Internal.Text,
                             GHC.Base.Maybe
                               Language.PureScript.Kinds.Kind)]>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                               <*>_N
                                                                               <GHC.Generics.R>_P
                                                                               <[(Data.Text.Internal.Text,
                                                                                  GHC.Base.Maybe
                                                                                    Language.PureScript.Kinds.Kind)]>_R
                                                                               <x>_P)
                   ds5
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           ('GHC.Base.Just "typeClassMembers")
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1
                           GHC.Generics.R
                           [(Language.PureScript.Names.Ident,
                             Language.PureScript.Types.Type)]>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                             <*>_N
                                                                             <GHC.Generics.R>_P
                                                                             <[(Language.PureScript.Names.Ident,
                                                                                Language.PureScript.Types.Type)]>_R
                                                                             <x>_P)
                   ds6
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           ('GHC.Base.Just "typeClassSuperclasses")
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1
                           GHC.Generics.R
                           [Language.PureScript.Types.Constraint]>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                 <*>_N
                                                                                 <GHC.Generics.R>_P
                                                                                 <[Language.PureScript.Types.Constraint]>_R
                                                                                 <x>_P)
                   ds7
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           ('GHC.Base.Just "typeClassDependencies")
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1
                           GHC.Generics.R
                           [Language.PureScript.Environment.FunctionalDependency]>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                                 <*>_N
                                                                                                 <GHC.Generics.R>_P
                                                                                                 <[Language.PureScript.Environment.FunctionalDependency]>_R
                                                                                                 <x>_P)
                   ds9
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           ('GHC.Base.Just "typeClassDeterminedArguments")
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1
                           GHC.Generics.R
                           (Data.Set.Internal.Set
                              GHC.Types.Int)>_R <x>_N ; GHC.Generics.N:K1[0]
                                                            <*>_N
                                                            <GHC.Generics.R>_P
                                                            <Data.Set.Internal.Set GHC.Types.Int>_R
                                                            <x>_P)
                   ds10
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           ('GHC.Base.Just "typeClassCoveringSets")
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1
                           GHC.Generics.R
                           (Data.Set.Internal.Set
                              (Data.Set.Internal.Set
                                 GHC.Types.Int))>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                <*>_N
                                                                <GHC.Generics.R>_P
                                                                <Data.Set.Internal.Set
                                                                   (Data.Set.Internal.Set
                                                                      GHC.Types.Int)>_R
                                                                <x>_P) } } } } }) -}
0a0df18a3a5bbdd9f1dda59baf0fb992
  $fGenericTypeKind ::
    GHC.Generics.Generic Language.PureScript.Environment.TypeKind
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Environment.TypeKind
                  Language.PureScript.Environment.$fGenericTypeKind1
                    `cast`
                  (forall (x :: <*>_N).
                   <Language.PureScript.Environment.TypeKind>_R
                   ->_R (Sym (GHC.Generics.N:M1[0]
                                  <*>_N
                                  <GHC.Generics.D>_P
                                  <'GHC.Generics.MetaData
                                     "TypeKind"
                                     "Language.PureScript.Environment"
                                     "purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"
                                     'GHC.Types.False>_P
                                  <(GHC.Generics.M1
                                      GHC.Generics.C
                                      ('GHC.Generics.MetaCons
                                         "DataType" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                      (GHC.Generics.M1
                                         GHC.Generics.S
                                         ('GHC.Generics.MetaSel
                                            'GHC.Base.Nothing
                                            'GHC.Generics.NoSourceUnpackedness
                                            'GHC.Generics.NoSourceStrictness
                                            'GHC.Generics.DecidedLazy)
                                         (GHC.Generics.K1
                                            GHC.Generics.R
                                            [(Data.Text.Internal.Text,
                                              GHC.Base.Maybe Language.PureScript.Kinds.Kind)])
                                       GHC.Generics.:*: GHC.Generics.M1
                                                          GHC.Generics.S
                                                          ('GHC.Generics.MetaSel
                                                             'GHC.Base.Nothing
                                                             'GHC.Generics.NoSourceUnpackedness
                                                             'GHC.Generics.NoSourceStrictness
                                                             'GHC.Generics.DecidedLazy)
                                                          (GHC.Generics.K1
                                                             GHC.Generics.R
                                                             [(Language.PureScript.Names.ProperName
                                                                 'Language.PureScript.Names.ConstructorName,
                                                               [Language.PureScript.Types.Type])]))
                                    GHC.Generics.:+: GHC.Generics.M1
                                                       GHC.Generics.C
                                                       ('GHC.Generics.MetaCons
                                                          "TypeSynonym"
                                                          'GHC.Generics.PrefixI
                                                          'GHC.Types.False)
                                                       GHC.Generics.U1)
                                   GHC.Generics.:+: (GHC.Generics.M1
                                                       GHC.Generics.C
                                                       ('GHC.Generics.MetaCons
                                                          "ExternData"
                                                          'GHC.Generics.PrefixI
                                                          'GHC.Types.False)
                                                       GHC.Generics.U1
                                                     GHC.Generics.:+: (GHC.Generics.M1
                                                                         GHC.Generics.C
                                                                         ('GHC.Generics.MetaCons
                                                                            "LocalTypeVariable"
                                                                            'GHC.Generics.PrefixI
                                                                            'GHC.Types.False)
                                                                         GHC.Generics.U1
                                                                       GHC.Generics.:+: GHC.Generics.M1
                                                                                          GHC.Generics.C
                                                                                          ('GHC.Generics.MetaCons
                                                                                             "ScopedTypeVar"
                                                                                             'GHC.Generics.PrefixI
                                                                                             'GHC.Types.False)
                                                                                          GHC.Generics.U1))>_R) ; Sub (Sym (Language.PureScript.Environment.Rep_TypeKind[0]))) <x>_N)
                  Language.PureScript.Environment.$fGenericTypeKind_$cto -}
0a0df18a3a5bbdd9f1dda59baf0fb992
  $fGenericTypeKind1 ::
    Language.PureScript.Environment.TypeKind
    -> (GHC.Generics.:+:)
         (GHC.Generics.M1
            GHC.Generics.C
            ('GHC.Generics.MetaCons
               "DataType" 'GHC.Generics.PrefixI 'GHC.Types.False)
            (GHC.Generics.M1
               GHC.Generics.S
               ('GHC.Generics.MetaSel
                  'GHC.Base.Nothing
                  'GHC.Generics.NoSourceUnpackedness
                  'GHC.Generics.NoSourceStrictness
                  'GHC.Generics.DecidedLazy)
               (GHC.Generics.K1
                  GHC.Generics.R
                  [(Data.Text.Internal.Text,
                    GHC.Base.Maybe Language.PureScript.Kinds.Kind)])
             GHC.Generics.:*: GHC.Generics.M1
                                GHC.Generics.S
                                ('GHC.Generics.MetaSel
                                   'GHC.Base.Nothing
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (GHC.Generics.K1
                                   GHC.Generics.R
                                   [(Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.ConstructorName,
                                     [Language.PureScript.Types.Type])]))
          GHC.Generics.:+: GHC.Generics.M1
                             GHC.Generics.C
                             ('GHC.Generics.MetaCons
                                "TypeSynonym" 'GHC.Generics.PrefixI 'GHC.Types.False)
                             GHC.Generics.U1)
         (GHC.Generics.M1
            GHC.Generics.C
            ('GHC.Generics.MetaCons
               "ExternData" 'GHC.Generics.PrefixI 'GHC.Types.False)
            GHC.Generics.U1
          GHC.Generics.:+: (GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "LocalTypeVariable" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              GHC.Generics.U1
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "ScopedTypeVar"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               GHC.Generics.U1))
         x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ x (x1 :: Language.PureScript.Environment.TypeKind) ->
                 case x1 of wild {
                   Language.PureScript.Environment.DataType g1 g2
                   -> GHC.Generics.L1
                        @ *
                        @ (GHC.Generics.M1
                             GHC.Generics.C
                             ('GHC.Generics.MetaCons
                                "DataType" 'GHC.Generics.PrefixI 'GHC.Types.False)
                             (GHC.Generics.M1
                                GHC.Generics.S
                                ('GHC.Generics.MetaSel
                                   'GHC.Base.Nothing
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (GHC.Generics.K1
                                   GHC.Generics.R
                                   [(Data.Text.Internal.Text,
                                     GHC.Base.Maybe Language.PureScript.Kinds.Kind)])
                              GHC.Generics.:*: GHC.Generics.M1
                                                 GHC.Generics.S
                                                 ('GHC.Generics.MetaSel
                                                    'GHC.Base.Nothing
                                                    'GHC.Generics.NoSourceUnpackedness
                                                    'GHC.Generics.NoSourceStrictness
                                                    'GHC.Generics.DecidedLazy)
                                                 (GHC.Generics.K1
                                                    GHC.Generics.R
                                                    [(Language.PureScript.Names.ProperName
                                                        'Language.PureScript.Names.ConstructorName,
                                                      [Language.PureScript.Types.Type])]))
                           GHC.Generics.:+: GHC.Generics.M1
                                              GHC.Generics.C
                                              ('GHC.Generics.MetaCons
                                                 "TypeSynonym"
                                                 'GHC.Generics.PrefixI
                                                 'GHC.Types.False)
                                              GHC.Generics.U1)
                        @ (GHC.Generics.M1
                             GHC.Generics.C
                             ('GHC.Generics.MetaCons
                                "ExternData" 'GHC.Generics.PrefixI 'GHC.Types.False)
                             GHC.Generics.U1
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "LocalTypeVariable"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               GHC.Generics.U1
                                             GHC.Generics.:+: GHC.Generics.M1
                                                                GHC.Generics.C
                                                                ('GHC.Generics.MetaCons
                                                                   "ScopedTypeVar"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.False)
                                                                GHC.Generics.U1))
                        @ x
                        (GHC.Generics.L1
                           @ *
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "DataType" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R
                                      [(Data.Text.Internal.Text,
                                        GHC.Base.Maybe Language.PureScript.Kinds.Kind)])
                                 GHC.Generics.:*: GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       [(Language.PureScript.Names.ProperName
                                                           'Language.PureScript.Names.ConstructorName,
                                                         [Language.PureScript.Types.Type])])))
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "TypeSynonym" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                GHC.Generics.U1)
                           @ x
                           (GHC.Generics.:*:
                              @ *
                              @ (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R
                                      [(Data.Text.Internal.Text,
                                        GHC.Base.Maybe Language.PureScript.Kinds.Kind)]))
                              @ (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R
                                      [(Language.PureScript.Names.ProperName
                                          'Language.PureScript.Names.ConstructorName,
                                        [Language.PureScript.Types.Type])]))
                              @ x
                              g1
                                `cast`
                              (Sym (GHC.Generics.N:K1[0]
                                        <*>_N
                                        <GHC.Generics.R>_P
                                        <[(Data.Text.Internal.Text,
                                           GHC.Base.Maybe Language.PureScript.Kinds.Kind)]>_R
                                        <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                          <*>_N
                                                          <GHC.Generics.S>_P
                                                          <'GHC.Generics.MetaSel
                                                             'GHC.Base.Nothing
                                                             'GHC.Generics.NoSourceUnpackedness
                                                             'GHC.Generics.NoSourceStrictness
                                                             'GHC.Generics.DecidedLazy>_P
                                                          <GHC.Generics.K1
                                                             GHC.Generics.R
                                                             [(Data.Text.Internal.Text,
                                                               GHC.Base.Maybe
                                                                 Language.PureScript.Kinds.Kind)]>_R) <x>_N)
                              g2
                                `cast`
                              (Sym (GHC.Generics.N:K1[0]
                                        <*>_N
                                        <GHC.Generics.R>_P
                                        <[(Language.PureScript.Names.ProperName
                                             'Language.PureScript.Names.ConstructorName,
                                           [Language.PureScript.Types.Type])]>_R
                                        <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                          <*>_N
                                                          <GHC.Generics.S>_P
                                                          <'GHC.Generics.MetaSel
                                                             'GHC.Base.Nothing
                                                             'GHC.Generics.NoSourceUnpackedness
                                                             'GHC.Generics.NoSourceStrictness
                                                             'GHC.Generics.DecidedLazy>_P
                                                          <GHC.Generics.K1
                                                             GHC.Generics.R
                                                             [(Language.PureScript.Names.ProperName
                                                                 'Language.PureScript.Names.ConstructorName,
                                                               [Language.PureScript.Types.Type])]>_R) <x>_N))
                             `cast`
                           (Sym (GHC.Generics.N:M1[0]
                                     <*>_N
                                     <GHC.Generics.C>_P
                                     <'GHC.Generics.MetaCons
                                        "DataType" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                     <GHC.Generics.M1
                                        GHC.Generics.S
                                        ('GHC.Generics.MetaSel
                                           'GHC.Base.Nothing
                                           'GHC.Generics.NoSourceUnpackedness
                                           'GHC.Generics.NoSourceStrictness
                                           'GHC.Generics.DecidedLazy)
                                        (GHC.Generics.K1
                                           GHC.Generics.R
                                           [(Data.Text.Internal.Text,
                                             GHC.Base.Maybe Language.PureScript.Kinds.Kind)])
                                      GHC.Generics.:*: GHC.Generics.M1
                                                         GHC.Generics.S
                                                         ('GHC.Generics.MetaSel
                                                            'GHC.Base.Nothing
                                                            'GHC.Generics.NoSourceUnpackedness
                                                            'GHC.Generics.NoSourceStrictness
                                                            'GHC.Generics.DecidedLazy)
                                                         (GHC.Generics.K1
                                                            GHC.Generics.R
                                                            [(Language.PureScript.Names.ProperName
                                                                'Language.PureScript.Names.ConstructorName,
                                                              [Language.PureScript.Types.Type])])>_R) <x>_N))
                   Language.PureScript.Environment.TypeSynonym
                   -> Language.PureScript.Environment.$fGenericTypeKind10 @ x
                   Language.PureScript.Environment.ExternData
                   -> Language.PureScript.Environment.$fGenericTypeKind8 @ x
                   Language.PureScript.Environment.LocalTypeVariable
                   -> Language.PureScript.Environment.$fGenericTypeKind5 @ x
                   Language.PureScript.Environment.ScopedTypeVar
                   -> Language.PureScript.Environment.$fGenericTypeKind2 @ x }) -}
3e965b0f9feb2dcf423074a87e5077fb
  $fGenericTypeKind10 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "DataType" 'GHC.Generics.PrefixI 'GHC.Types.False)
         (GHC.Generics.M1
            GHC.Generics.S
            ('GHC.Generics.MetaSel
               'GHC.Base.Nothing
               'GHC.Generics.NoSourceUnpackedness
               'GHC.Generics.NoSourceStrictness
               'GHC.Generics.DecidedLazy)
            (GHC.Generics.K1
               GHC.Generics.R
               [(Data.Text.Internal.Text,
                 GHC.Base.Maybe Language.PureScript.Kinds.Kind)])
          GHC.Generics.:*: GHC.Generics.M1
                             GHC.Generics.S
                             ('GHC.Generics.MetaSel
                                'GHC.Base.Nothing
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy)
                             (GHC.Generics.K1
                                GHC.Generics.R
                                [(Language.PureScript.Names.ProperName
                                    'Language.PureScript.Names.ConstructorName,
                                  [Language.PureScript.Types.Type])]))
       GHC.Generics.:+: GHC.Generics.M1
                          GHC.Generics.C
                          ('GHC.Generics.MetaCons
                             "TypeSynonym" 'GHC.Generics.PrefixI 'GHC.Types.False)
                          GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "ExternData" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1
       GHC.Generics.:+: (GHC.Generics.M1
                           GHC.Generics.C
                           ('GHC.Generics.MetaCons
                              "LocalTypeVariable" 'GHC.Generics.PrefixI 'GHC.Types.False)
                           GHC.Generics.U1
                         GHC.Generics.:+: GHC.Generics.M1
                                            GHC.Generics.C
                                            ('GHC.Generics.MetaCons
                                               "ScopedTypeVar"
                                               'GHC.Generics.PrefixI
                                               'GHC.Types.False)
                                            GHC.Generics.U1))
      x
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (\ @ x ->
                 GHC.Generics.L1
                   @ *
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "DataType" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        (GHC.Generics.M1
                           GHC.Generics.S
                           ('GHC.Generics.MetaSel
                              'GHC.Base.Nothing
                              'GHC.Generics.NoSourceUnpackedness
                              'GHC.Generics.NoSourceStrictness
                              'GHC.Generics.DecidedLazy)
                           (GHC.Generics.K1
                              GHC.Generics.R
                              [(Data.Text.Internal.Text,
                                GHC.Base.Maybe Language.PureScript.Kinds.Kind)])
                         GHC.Generics.:*: GHC.Generics.M1
                                            GHC.Generics.S
                                            ('GHC.Generics.MetaSel
                                               'GHC.Base.Nothing
                                               'GHC.Generics.NoSourceUnpackedness
                                               'GHC.Generics.NoSourceStrictness
                                               'GHC.Generics.DecidedLazy)
                                            (GHC.Generics.K1
                                               GHC.Generics.R
                                               [(Language.PureScript.Names.ProperName
                                                   'Language.PureScript.Names.ConstructorName,
                                                 [Language.PureScript.Types.Type])]))
                      GHC.Generics.:+: GHC.Generics.M1
                                         GHC.Generics.C
                                         ('GHC.Generics.MetaCons
                                            "TypeSynonym" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                         GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "ExternData" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1
                      GHC.Generics.:+: (GHC.Generics.M1
                                          GHC.Generics.C
                                          ('GHC.Generics.MetaCons
                                             "LocalTypeVariable"
                                             'GHC.Generics.PrefixI
                                             'GHC.Types.False)
                                          GHC.Generics.U1
                                        GHC.Generics.:+: GHC.Generics.M1
                                                           GHC.Generics.C
                                                           ('GHC.Generics.MetaCons
                                                              "ScopedTypeVar"
                                                              'GHC.Generics.PrefixI
                                                              'GHC.Types.False)
                                                           GHC.Generics.U1))
                   @ x
                   (Language.PureScript.Environment.$fGenericTypeKind11 @ x)) -}
83ee8450e9247fa631032f0ec3787030
  $fGenericTypeKind11 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "DataType" 'GHC.Generics.PrefixI 'GHC.Types.False)
         (GHC.Generics.M1
            GHC.Generics.S
            ('GHC.Generics.MetaSel
               'GHC.Base.Nothing
               'GHC.Generics.NoSourceUnpackedness
               'GHC.Generics.NoSourceStrictness
               'GHC.Generics.DecidedLazy)
            (GHC.Generics.K1
               GHC.Generics.R
               [(Data.Text.Internal.Text,
                 GHC.Base.Maybe Language.PureScript.Kinds.Kind)])
          GHC.Generics.:*: GHC.Generics.M1
                             GHC.Generics.S
                             ('GHC.Generics.MetaSel
                                'GHC.Base.Nothing
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy)
                             (GHC.Generics.K1
                                GHC.Generics.R
                                [(Language.PureScript.Names.ProperName
                                    'Language.PureScript.Names.ConstructorName,
                                  [Language.PureScript.Types.Type])])))
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "TypeSynonym" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (\ @ x ->
                 GHC.Generics.R1
                   @ *
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "DataType" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        (GHC.Generics.M1
                           GHC.Generics.S
                           ('GHC.Generics.MetaSel
                              'GHC.Base.Nothing
                              'GHC.Generics.NoSourceUnpackedness
                              'GHC.Generics.NoSourceStrictness
                              'GHC.Generics.DecidedLazy)
                           (GHC.Generics.K1
                              GHC.Generics.R
                              [(Data.Text.Internal.Text,
                                GHC.Base.Maybe Language.PureScript.Kinds.Kind)])
                         GHC.Generics.:*: GHC.Generics.M1
                                            GHC.Generics.S
                                            ('GHC.Generics.MetaSel
                                               'GHC.Base.Nothing
                                               'GHC.Generics.NoSourceUnpackedness
                                               'GHC.Generics.NoSourceStrictness
                                               'GHC.Generics.DecidedLazy)
                                            (GHC.Generics.K1
                                               GHC.Generics.R
                                               [(Language.PureScript.Names.ProperName
                                                   'Language.PureScript.Names.ConstructorName,
                                                 [Language.PureScript.Types.Type])])))
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "TypeSynonym" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ x
                   (GHC.Generics.U1 @ * @ x)
                     `cast`
                   (Sym (GHC.Generics.N:M1[0]
                             <*>_N
                             <GHC.Generics.C>_P
                             <'GHC.Generics.MetaCons
                                "TypeSynonym" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                             <GHC.Generics.U1>_R) <x>_N)) -}
e8db91b0ed67d53b08c3b723236af37d
  $fGenericTypeKind2 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "DataType" 'GHC.Generics.PrefixI 'GHC.Types.False)
         (GHC.Generics.M1
            GHC.Generics.S
            ('GHC.Generics.MetaSel
               'GHC.Base.Nothing
               'GHC.Generics.NoSourceUnpackedness
               'GHC.Generics.NoSourceStrictness
               'GHC.Generics.DecidedLazy)
            (GHC.Generics.K1
               GHC.Generics.R
               [(Data.Text.Internal.Text,
                 GHC.Base.Maybe Language.PureScript.Kinds.Kind)])
          GHC.Generics.:*: GHC.Generics.M1
                             GHC.Generics.S
                             ('GHC.Generics.MetaSel
                                'GHC.Base.Nothing
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy)
                             (GHC.Generics.K1
                                GHC.Generics.R
                                [(Language.PureScript.Names.ProperName
                                    'Language.PureScript.Names.ConstructorName,
                                  [Language.PureScript.Types.Type])]))
       GHC.Generics.:+: GHC.Generics.M1
                          GHC.Generics.C
                          ('GHC.Generics.MetaCons
                             "TypeSynonym" 'GHC.Generics.PrefixI 'GHC.Types.False)
                          GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "ExternData" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1
       GHC.Generics.:+: (GHC.Generics.M1
                           GHC.Generics.C
                           ('GHC.Generics.MetaCons
                              "LocalTypeVariable" 'GHC.Generics.PrefixI 'GHC.Types.False)
                           GHC.Generics.U1
                         GHC.Generics.:+: GHC.Generics.M1
                                            GHC.Generics.C
                                            ('GHC.Generics.MetaCons
                                               "ScopedTypeVar"
                                               'GHC.Generics.PrefixI
                                               'GHC.Types.False)
                                            GHC.Generics.U1))
      x
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (\ @ x ->
                 GHC.Generics.R1
                   @ *
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "DataType" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        (GHC.Generics.M1
                           GHC.Generics.S
                           ('GHC.Generics.MetaSel
                              'GHC.Base.Nothing
                              'GHC.Generics.NoSourceUnpackedness
                              'GHC.Generics.NoSourceStrictness
                              'GHC.Generics.DecidedLazy)
                           (GHC.Generics.K1
                              GHC.Generics.R
                              [(Data.Text.Internal.Text,
                                GHC.Base.Maybe Language.PureScript.Kinds.Kind)])
                         GHC.Generics.:*: GHC.Generics.M1
                                            GHC.Generics.S
                                            ('GHC.Generics.MetaSel
                                               'GHC.Base.Nothing
                                               'GHC.Generics.NoSourceUnpackedness
                                               'GHC.Generics.NoSourceStrictness
                                               'GHC.Generics.DecidedLazy)
                                            (GHC.Generics.K1
                                               GHC.Generics.R
                                               [(Language.PureScript.Names.ProperName
                                                   'Language.PureScript.Names.ConstructorName,
                                                 [Language.PureScript.Types.Type])]))
                      GHC.Generics.:+: GHC.Generics.M1
                                         GHC.Generics.C
                                         ('GHC.Generics.MetaCons
                                            "TypeSynonym" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                         GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "ExternData" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1
                      GHC.Generics.:+: (GHC.Generics.M1
                                          GHC.Generics.C
                                          ('GHC.Generics.MetaCons
                                             "LocalTypeVariable"
                                             'GHC.Generics.PrefixI
                                             'GHC.Types.False)
                                          GHC.Generics.U1
                                        GHC.Generics.:+: GHC.Generics.M1
                                                           GHC.Generics.C
                                                           ('GHC.Generics.MetaCons
                                                              "ScopedTypeVar"
                                                              'GHC.Generics.PrefixI
                                                              'GHC.Types.False)
                                                           GHC.Generics.U1))
                   @ x
                   (Language.PureScript.Environment.$fGenericTypeKind3 @ x)) -}
b150ce17167f9f04ebffca831cd9775b
  $fGenericTypeKind3 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "ExternData" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "LocalTypeVariable" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1
       GHC.Generics.:+: GHC.Generics.M1
                          GHC.Generics.C
                          ('GHC.Generics.MetaCons
                             "ScopedTypeVar" 'GHC.Generics.PrefixI 'GHC.Types.False)
                          GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (\ @ x ->
                 GHC.Generics.R1
                   @ *
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "ExternData" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "LocalTypeVariable" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1
                      GHC.Generics.:+: GHC.Generics.M1
                                         GHC.Generics.C
                                         ('GHC.Generics.MetaCons
                                            "ScopedTypeVar" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                         GHC.Generics.U1)
                   @ x
                   (Language.PureScript.Environment.$fGenericTypeKind4 @ x)) -}
7108a7c8cfc53edd3f99308dd042f384
  $fGenericTypeKind4 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "LocalTypeVariable" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "ScopedTypeVar" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (\ @ x ->
                 GHC.Generics.R1
                   @ *
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "LocalTypeVariable" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "ScopedTypeVar" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ x
                   (GHC.Generics.U1 @ * @ x)
                     `cast`
                   (Sym (GHC.Generics.N:M1[0]
                             <*>_N
                             <GHC.Generics.C>_P
                             <'GHC.Generics.MetaCons
                                "ScopedTypeVar" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                             <GHC.Generics.U1>_R) <x>_N)) -}
9176bc833d6654629eee267aa72d335c
  $fGenericTypeKind5 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "DataType" 'GHC.Generics.PrefixI 'GHC.Types.False)
         (GHC.Generics.M1
            GHC.Generics.S
            ('GHC.Generics.MetaSel
               'GHC.Base.Nothing
               'GHC.Generics.NoSourceUnpackedness
               'GHC.Generics.NoSourceStrictness
               'GHC.Generics.DecidedLazy)
            (GHC.Generics.K1
               GHC.Generics.R
               [(Data.Text.Internal.Text,
                 GHC.Base.Maybe Language.PureScript.Kinds.Kind)])
          GHC.Generics.:*: GHC.Generics.M1
                             GHC.Generics.S
                             ('GHC.Generics.MetaSel
                                'GHC.Base.Nothing
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy)
                             (GHC.Generics.K1
                                GHC.Generics.R
                                [(Language.PureScript.Names.ProperName
                                    'Language.PureScript.Names.ConstructorName,
                                  [Language.PureScript.Types.Type])]))
       GHC.Generics.:+: GHC.Generics.M1
                          GHC.Generics.C
                          ('GHC.Generics.MetaCons
                             "TypeSynonym" 'GHC.Generics.PrefixI 'GHC.Types.False)
                          GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "ExternData" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1
       GHC.Generics.:+: (GHC.Generics.M1
                           GHC.Generics.C
                           ('GHC.Generics.MetaCons
                              "LocalTypeVariable" 'GHC.Generics.PrefixI 'GHC.Types.False)
                           GHC.Generics.U1
                         GHC.Generics.:+: GHC.Generics.M1
                                            GHC.Generics.C
                                            ('GHC.Generics.MetaCons
                                               "ScopedTypeVar"
                                               'GHC.Generics.PrefixI
                                               'GHC.Types.False)
                                            GHC.Generics.U1))
      x
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (\ @ x ->
                 GHC.Generics.R1
                   @ *
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "DataType" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        (GHC.Generics.M1
                           GHC.Generics.S
                           ('GHC.Generics.MetaSel
                              'GHC.Base.Nothing
                              'GHC.Generics.NoSourceUnpackedness
                              'GHC.Generics.NoSourceStrictness
                              'GHC.Generics.DecidedLazy)
                           (GHC.Generics.K1
                              GHC.Generics.R
                              [(Data.Text.Internal.Text,
                                GHC.Base.Maybe Language.PureScript.Kinds.Kind)])
                         GHC.Generics.:*: GHC.Generics.M1
                                            GHC.Generics.S
                                            ('GHC.Generics.MetaSel
                                               'GHC.Base.Nothing
                                               'GHC.Generics.NoSourceUnpackedness
                                               'GHC.Generics.NoSourceStrictness
                                               'GHC.Generics.DecidedLazy)
                                            (GHC.Generics.K1
                                               GHC.Generics.R
                                               [(Language.PureScript.Names.ProperName
                                                   'Language.PureScript.Names.ConstructorName,
                                                 [Language.PureScript.Types.Type])]))
                      GHC.Generics.:+: GHC.Generics.M1
                                         GHC.Generics.C
                                         ('GHC.Generics.MetaCons
                                            "TypeSynonym" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                         GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "ExternData" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1
                      GHC.Generics.:+: (GHC.Generics.M1
                                          GHC.Generics.C
                                          ('GHC.Generics.MetaCons
                                             "LocalTypeVariable"
                                             'GHC.Generics.PrefixI
                                             'GHC.Types.False)
                                          GHC.Generics.U1
                                        GHC.Generics.:+: GHC.Generics.M1
                                                           GHC.Generics.C
                                                           ('GHC.Generics.MetaCons
                                                              "ScopedTypeVar"
                                                              'GHC.Generics.PrefixI
                                                              'GHC.Types.False)
                                                           GHC.Generics.U1))
                   @ x
                   (Language.PureScript.Environment.$fGenericTypeKind6 @ x)) -}
b65672716b6e41625f4a20d149ab9240
  $fGenericTypeKind6 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "ExternData" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "LocalTypeVariable" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1
       GHC.Generics.:+: GHC.Generics.M1
                          GHC.Generics.C
                          ('GHC.Generics.MetaCons
                             "ScopedTypeVar" 'GHC.Generics.PrefixI 'GHC.Types.False)
                          GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (\ @ x ->
                 GHC.Generics.R1
                   @ *
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "ExternData" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "LocalTypeVariable" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1
                      GHC.Generics.:+: GHC.Generics.M1
                                         GHC.Generics.C
                                         ('GHC.Generics.MetaCons
                                            "ScopedTypeVar" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                         GHC.Generics.U1)
                   @ x
                   (Language.PureScript.Environment.$fGenericTypeKind7 @ x)) -}
9563d8a97e68b1e21140f5ae5ada8908
  $fGenericTypeKind7 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "LocalTypeVariable" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "ScopedTypeVar" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (\ @ x ->
                 GHC.Generics.L1
                   @ *
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "LocalTypeVariable" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "ScopedTypeVar" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ x
                   (GHC.Generics.U1 @ * @ x)
                     `cast`
                   (Sym (GHC.Generics.N:M1[0]
                             <*>_N
                             <GHC.Generics.C>_P
                             <'GHC.Generics.MetaCons
                                "LocalTypeVariable" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                             <GHC.Generics.U1>_R) <x>_N)) -}
bee2a3305b19d903dd1dea434038e80d
  $fGenericTypeKind8 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "DataType" 'GHC.Generics.PrefixI 'GHC.Types.False)
         (GHC.Generics.M1
            GHC.Generics.S
            ('GHC.Generics.MetaSel
               'GHC.Base.Nothing
               'GHC.Generics.NoSourceUnpackedness
               'GHC.Generics.NoSourceStrictness
               'GHC.Generics.DecidedLazy)
            (GHC.Generics.K1
               GHC.Generics.R
               [(Data.Text.Internal.Text,
                 GHC.Base.Maybe Language.PureScript.Kinds.Kind)])
          GHC.Generics.:*: GHC.Generics.M1
                             GHC.Generics.S
                             ('GHC.Generics.MetaSel
                                'GHC.Base.Nothing
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy)
                             (GHC.Generics.K1
                                GHC.Generics.R
                                [(Language.PureScript.Names.ProperName
                                    'Language.PureScript.Names.ConstructorName,
                                  [Language.PureScript.Types.Type])]))
       GHC.Generics.:+: GHC.Generics.M1
                          GHC.Generics.C
                          ('GHC.Generics.MetaCons
                             "TypeSynonym" 'GHC.Generics.PrefixI 'GHC.Types.False)
                          GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "ExternData" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1
       GHC.Generics.:+: (GHC.Generics.M1
                           GHC.Generics.C
                           ('GHC.Generics.MetaCons
                              "LocalTypeVariable" 'GHC.Generics.PrefixI 'GHC.Types.False)
                           GHC.Generics.U1
                         GHC.Generics.:+: GHC.Generics.M1
                                            GHC.Generics.C
                                            ('GHC.Generics.MetaCons
                                               "ScopedTypeVar"
                                               'GHC.Generics.PrefixI
                                               'GHC.Types.False)
                                            GHC.Generics.U1))
      x
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (\ @ x ->
                 GHC.Generics.R1
                   @ *
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "DataType" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        (GHC.Generics.M1
                           GHC.Generics.S
                           ('GHC.Generics.MetaSel
                              'GHC.Base.Nothing
                              'GHC.Generics.NoSourceUnpackedness
                              'GHC.Generics.NoSourceStrictness
                              'GHC.Generics.DecidedLazy)
                           (GHC.Generics.K1
                              GHC.Generics.R
                              [(Data.Text.Internal.Text,
                                GHC.Base.Maybe Language.PureScript.Kinds.Kind)])
                         GHC.Generics.:*: GHC.Generics.M1
                                            GHC.Generics.S
                                            ('GHC.Generics.MetaSel
                                               'GHC.Base.Nothing
                                               'GHC.Generics.NoSourceUnpackedness
                                               'GHC.Generics.NoSourceStrictness
                                               'GHC.Generics.DecidedLazy)
                                            (GHC.Generics.K1
                                               GHC.Generics.R
                                               [(Language.PureScript.Names.ProperName
                                                   'Language.PureScript.Names.ConstructorName,
                                                 [Language.PureScript.Types.Type])]))
                      GHC.Generics.:+: GHC.Generics.M1
                                         GHC.Generics.C
                                         ('GHC.Generics.MetaCons
                                            "TypeSynonym" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                         GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "ExternData" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1
                      GHC.Generics.:+: (GHC.Generics.M1
                                          GHC.Generics.C
                                          ('GHC.Generics.MetaCons
                                             "LocalTypeVariable"
                                             'GHC.Generics.PrefixI
                                             'GHC.Types.False)
                                          GHC.Generics.U1
                                        GHC.Generics.:+: GHC.Generics.M1
                                                           GHC.Generics.C
                                                           ('GHC.Generics.MetaCons
                                                              "ScopedTypeVar"
                                                              'GHC.Generics.PrefixI
                                                              'GHC.Types.False)
                                                           GHC.Generics.U1))
                   @ x
                   (Language.PureScript.Environment.$fGenericTypeKind9 @ x)) -}
dcb3eb7a70e004d5e52187eb4fda4fd6
  $fGenericTypeKind9 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "ExternData" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "LocalTypeVariable" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1
       GHC.Generics.:+: GHC.Generics.M1
                          GHC.Generics.C
                          ('GHC.Generics.MetaCons
                             "ScopedTypeVar" 'GHC.Generics.PrefixI 'GHC.Types.False)
                          GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (\ @ x ->
                 GHC.Generics.L1
                   @ *
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "ExternData" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "LocalTypeVariable" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1
                      GHC.Generics.:+: GHC.Generics.M1
                                         GHC.Generics.C
                                         ('GHC.Generics.MetaCons
                                            "ScopedTypeVar" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                         GHC.Generics.U1)
                   @ x
                   (GHC.Generics.U1 @ * @ x)
                     `cast`
                   (Sym (GHC.Generics.N:M1[0]
                             <*>_N
                             <GHC.Generics.C>_P
                             <'GHC.Generics.MetaCons
                                "ExternData" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                             <GHC.Generics.U1>_R) <x>_N)) -}
0a0df18a3a5bbdd9f1dda59baf0fb992
  $fGenericTypeKind_$cto ::
    GHC.Generics.Rep Language.PureScript.Environment.TypeKind x
    -> Language.PureScript.Environment.TypeKind
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ @ x
                   (ds :: GHC.Generics.Rep
                            Language.PureScript.Environment.TypeKind x) ->
                 case ds
                        `cast`
                      ((Sub (Language.PureScript.Environment.Rep_TypeKind[0]) ; GHC.Generics.N:M1[0]
                                                                                    <*>_N
                                                                                    <GHC.Generics.D>_P
                                                                                    <'GHC.Generics.MetaData
                                                                                       "TypeKind"
                                                                                       "Language.PureScript.Environment"
                                                                                       "purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"
                                                                                       'GHC.Types.False>_P
                                                                                    <(GHC.Generics.M1
                                                                                        GHC.Generics.C
                                                                                        ('GHC.Generics.MetaCons
                                                                                           "DataType"
                                                                                           'GHC.Generics.PrefixI
                                                                                           'GHC.Types.False)
                                                                                        (GHC.Generics.M1
                                                                                           GHC.Generics.S
                                                                                           ('GHC.Generics.MetaSel
                                                                                              'GHC.Base.Nothing
                                                                                              'GHC.Generics.NoSourceUnpackedness
                                                                                              'GHC.Generics.NoSourceStrictness
                                                                                              'GHC.Generics.DecidedLazy)
                                                                                           (GHC.Generics.K1
                                                                                              GHC.Generics.R
                                                                                              [(Data.Text.Internal.Text,
                                                                                                GHC.Base.Maybe
                                                                                                  Language.PureScript.Kinds.Kind)])
                                                                                         GHC.Generics.:*: GHC.Generics.M1
                                                                                                            GHC.Generics.S
                                                                                                            ('GHC.Generics.MetaSel
                                                                                                               'GHC.Base.Nothing
                                                                                                               'GHC.Generics.NoSourceUnpackedness
                                                                                                               'GHC.Generics.NoSourceStrictness
                                                                                                               'GHC.Generics.DecidedLazy)
                                                                                                            (GHC.Generics.K1
                                                                                                               GHC.Generics.R
                                                                                                               [(Language.PureScript.Names.ProperName
                                                                                                                   'Language.PureScript.Names.ConstructorName,
                                                                                                                 [Language.PureScript.Types.Type])]))
                                                                                      GHC.Generics.:+: GHC.Generics.M1
                                                                                                         GHC.Generics.C
                                                                                                         ('GHC.Generics.MetaCons
                                                                                                            "TypeSynonym"
                                                                                                            'GHC.Generics.PrefixI
                                                                                                            'GHC.Types.False)
                                                                                                         GHC.Generics.U1)
                                                                                     GHC.Generics.:+: (GHC.Generics.M1
                                                                                                         GHC.Generics.C
                                                                                                         ('GHC.Generics.MetaCons
                                                                                                            "ExternData"
                                                                                                            'GHC.Generics.PrefixI
                                                                                                            'GHC.Types.False)
                                                                                                         GHC.Generics.U1
                                                                                                       GHC.Generics.:+: (GHC.Generics.M1
                                                                                                                           GHC.Generics.C
                                                                                                                           ('GHC.Generics.MetaCons
                                                                                                                              "LocalTypeVariable"
                                                                                                                              'GHC.Generics.PrefixI
                                                                                                                              'GHC.Types.False)
                                                                                                                           GHC.Generics.U1
                                                                                                                         GHC.Generics.:+: GHC.Generics.M1
                                                                                                                                            GHC.Generics.C
                                                                                                                                            ('GHC.Generics.MetaCons
                                                                                                                                               "ScopedTypeVar"
                                                                                                                                               'GHC.Generics.PrefixI
                                                                                                                                               'GHC.Types.False)
                                                                                                                                            GHC.Generics.U1))>_R) <x>_N) of wild {
                   GHC.Generics.L1 ds1
                   -> case ds1 of wild1 {
                        GHC.Generics.L1 ds2
                        -> case ds2
                                  `cast`
                                (GHC.Generics.N:M1[0]
                                     <*>_N
                                     <GHC.Generics.C>_P
                                     <'GHC.Generics.MetaCons
                                        "DataType" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                     <GHC.Generics.M1
                                        GHC.Generics.S
                                        ('GHC.Generics.MetaSel
                                           'GHC.Base.Nothing
                                           'GHC.Generics.NoSourceUnpackedness
                                           'GHC.Generics.NoSourceStrictness
                                           'GHC.Generics.DecidedLazy)
                                        (GHC.Generics.K1
                                           GHC.Generics.R
                                           [(Data.Text.Internal.Text,
                                             GHC.Base.Maybe Language.PureScript.Kinds.Kind)])
                                      GHC.Generics.:*: GHC.Generics.M1
                                                         GHC.Generics.S
                                                         ('GHC.Generics.MetaSel
                                                            'GHC.Base.Nothing
                                                            'GHC.Generics.NoSourceUnpackedness
                                                            'GHC.Generics.NoSourceStrictness
                                                            'GHC.Generics.DecidedLazy)
                                                         (GHC.Generics.K1
                                                            GHC.Generics.R
                                                            [(Language.PureScript.Names.ProperName
                                                                'Language.PureScript.Names.ConstructorName,
                                                              [Language.PureScript.Types.Type])])>_R <x>_N) of wild2 { GHC.Generics.:*: ds3 ds4 ->
                           Language.PureScript.Environment.DataType
                             ds3
                               `cast`
                             (GHC.Generics.N:M1[0]
                                  <*>_N
                                  <GHC.Generics.S>_P
                                  <'GHC.Generics.MetaSel
                                     'GHC.Base.Nothing
                                     'GHC.Generics.NoSourceUnpackedness
                                     'GHC.Generics.NoSourceStrictness
                                     'GHC.Generics.DecidedLazy>_P
                                  <GHC.Generics.K1
                                     GHC.Generics.R
                                     [(Data.Text.Internal.Text,
                                       GHC.Base.Maybe
                                         Language.PureScript.Kinds.Kind)]>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                         <*>_N
                                                                                         <GHC.Generics.R>_P
                                                                                         <[(Data.Text.Internal.Text,
                                                                                            GHC.Base.Maybe
                                                                                              Language.PureScript.Kinds.Kind)]>_R
                                                                                         <x>_P)
                             ds4
                               `cast`
                             (GHC.Generics.N:M1[0]
                                  <*>_N
                                  <GHC.Generics.S>_P
                                  <'GHC.Generics.MetaSel
                                     'GHC.Base.Nothing
                                     'GHC.Generics.NoSourceUnpackedness
                                     'GHC.Generics.NoSourceStrictness
                                     'GHC.Generics.DecidedLazy>_P
                                  <GHC.Generics.K1
                                     GHC.Generics.R
                                     [(Language.PureScript.Names.ProperName
                                         'Language.PureScript.Names.ConstructorName,
                                       [Language.PureScript.Types.Type])]>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                         <*>_N
                                                                                         <GHC.Generics.R>_P
                                                                                         <[(Language.PureScript.Names.ProperName
                                                                                              'Language.PureScript.Names.ConstructorName,
                                                                                            [Language.PureScript.Types.Type])]>_R
                                                                                         <x>_P) }
                        GHC.Generics.R1 ds2
                        -> case ds2
                                  `cast`
                                (GHC.Generics.N:M1[0]
                                     <*>_N
                                     <GHC.Generics.C>_P
                                     <'GHC.Generics.MetaCons
                                        "TypeSynonym" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                     <GHC.Generics.U1>_R <x>_N) of wild2 { GHC.Generics.U1 ->
                           Language.PureScript.Environment.TypeSynonym } }
                   GHC.Generics.R1 ds1
                   -> case ds1 of wild1 {
                        GHC.Generics.L1 ds2
                        -> case ds2
                                  `cast`
                                (GHC.Generics.N:M1[0]
                                     <*>_N
                                     <GHC.Generics.C>_P
                                     <'GHC.Generics.MetaCons
                                        "ExternData" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                     <GHC.Generics.U1>_R <x>_N) of wild2 { GHC.Generics.U1 ->
                           Language.PureScript.Environment.ExternData }
                        GHC.Generics.R1 ds2
                        -> case ds2 of wild2 {
                             GHC.Generics.L1 ds3
                             -> case ds3
                                       `cast`
                                     (GHC.Generics.N:M1[0]
                                          <*>_N
                                          <GHC.Generics.C>_P
                                          <'GHC.Generics.MetaCons
                                             "LocalTypeVariable"
                                             'GHC.Generics.PrefixI
                                             'GHC.Types.False>_P
                                          <GHC.Generics.U1>_R <x>_N) of wild3 { GHC.Generics.U1 ->
                                Language.PureScript.Environment.LocalTypeVariable }
                             GHC.Generics.R1 ds3
                             -> case ds3
                                       `cast`
                                     (GHC.Generics.N:M1[0]
                                          <*>_N
                                          <GHC.Generics.C>_P
                                          <'GHC.Generics.MetaCons
                                             "ScopedTypeVar"
                                             'GHC.Generics.PrefixI
                                             'GHC.Types.False>_P
                                          <GHC.Generics.U1>_R <x>_N) of wild3 { GHC.Generics.U1 ->
                                Language.PureScript.Environment.ScopedTypeVar } } } }) -}
c291d940fae22a3f1400d8c90f26bdd4
  $fNFDataDataDeclType ::
    Control.DeepSeq.NFData Language.PureScript.Environment.DataDeclType
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Language.PureScript.Environment.$fNFDataDataDeclType_$crnf
                  `cast`
                (Sym (Control.DeepSeq.N:NFData[0]
                          <Language.PureScript.Environment.DataDeclType>_N)) -}
c291d940fae22a3f1400d8c90f26bdd4
  $fNFDataDataDeclType_$crnf ::
    Language.PureScript.Environment.DataDeclType -> ()
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Environment.DataDeclType) ->
                 case x of wild { DEFAULT -> GHC.Tuple.() }) -}
c291d940fae22a3f1400d8c90f26bdd4
  $fNFDataEnvironment ::
    Control.DeepSeq.NFData Language.PureScript.Environment.Environment
  DFunId
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SSSSSSS),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U)>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Language.PureScript.Environment.$fNFDataEnvironment_$crnf
                  `cast`
                (Sym (Control.DeepSeq.N:NFData[0]
                          <Language.PureScript.Environment.Environment>_N)) -}
8c0dacf38267abdc59a2be28ac2e6e7c
  $fNFDataEnvironment1 ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.KindName)
    -> ()
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SS),1*U(1*U,1*H)>,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.KindName)) ->
                 case w of ww { Language.PureScript.Names.Qualified ww1 ww2 ->
                 case ww2
                        `cast`
                      (Language.PureScript.Names.N:ProperName[0]
                           <'Language.PureScript.Names.KindName>_P) of nt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 case ww1 of wild {
                   GHC.Base.Nothing -> GHC.Tuple.()
                   GHC.Base.Just x
                   -> Language.PureScript.Names.$fNFDataModuleName_go
                        x `cast` (Language.PureScript.Names.N:ModuleName[0]) } } }) -}
c291d940fae22a3f1400d8c90f26bdd4
  $fNFDataEnvironment10 ::
    (Language.PureScript.Environment.DataDeclType,
     Language.PureScript.Names.ProperName
       'Language.PureScript.Names.TypeName,
     Language.PureScript.Types.Type, [Language.PureScript.Names.Ident])
    -> ()
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SSSS),1*U(1*U,1*H,1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: (Language.PureScript.Environment.DataDeclType,
                           Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.TypeName,
                           Language.PureScript.Types.Type,
                           [Language.PureScript.Names.Ident])) ->
                 case ds of wild { (,,,) x1 x2 x3 x4 ->
                 case x1 of wild1 { DEFAULT ->
                 case x2
                        `cast`
                      (Language.PureScript.Names.N:ProperName[0]
                           <'Language.PureScript.Names.TypeName>_P) of ds1 { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 case Language.PureScript.Types.$fNFDataType_$crnf
                        x3 of wild3 { () ->
                 Language.PureScript.Environment.$fNFDataEnvironment_go4
                   x4 } } } }) -}
d31f14b519b55d541b577272dd403dac
  $fNFDataEnvironment11 ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ConstructorName)
    -> ()
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SS),1*U(1*U,1*H)>,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ConstructorName)) ->
                 case w of ww { Language.PureScript.Names.Qualified ww1 ww2 ->
                 case ww2
                        `cast`
                      (Language.PureScript.Names.N:ProperName[0]
                           <'Language.PureScript.Names.ConstructorName>_P) of nt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 case ww1 of wild {
                   GHC.Base.Nothing -> GHC.Tuple.()
                   GHC.Base.Just x
                   -> Language.PureScript.Names.$fNFDataModuleName_go
                        x `cast` (Language.PureScript.Names.N:ModuleName[0]) } } }) -}
f8c2b00dba20982503274df3ff8c7035
  $fNFDataEnvironment12 ::
    (Language.PureScript.Kinds.Kind,
     Language.PureScript.Environment.TypeKind)
    -> ()
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SS),1*U(1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: (Language.PureScript.Kinds.Kind,
                           Language.PureScript.Environment.TypeKind)) ->
                 case ds of wild { (,) x y ->
                 case Language.PureScript.Kinds.$fNFDataKind_$crnf
                        x of wild1 { () ->
                 Language.PureScript.Environment.$fNFDataEnvironment_$crnf2
                   y } }) -}
f456a40f0fbb1e1f2b890d9826c45dad
  $fNFDataEnvironment13 ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName)
    -> ()
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SS),1*U(1*U,1*H)>,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.TypeName)) ->
                 case w of ww { Language.PureScript.Names.Qualified ww1 ww2 ->
                 case ww2
                        `cast`
                      (Language.PureScript.Names.N:ProperName[0]
                           <'Language.PureScript.Names.TypeName>_P) of nt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 case ww1 of wild {
                   GHC.Base.Nothing -> GHC.Tuple.()
                   GHC.Base.Just x
                   -> Language.PureScript.Names.$fNFDataModuleName_go
                        x `cast` (Language.PureScript.Names.N:ModuleName[0]) } } }) -}
b9e26b9c18e8cc3860d9819611f75c34
  $fNFDataEnvironment14 ::
    (Language.PureScript.Types.Type,
     Language.PureScript.Environment.NameKind,
     Language.PureScript.Environment.NameVisibility)
    -> ()
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SSS),1*U(1*U,1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: (Language.PureScript.Types.Type,
                           Language.PureScript.Environment.NameKind,
                           Language.PureScript.Environment.NameVisibility)) ->
                 case ds of wild { (,,) x1 x2 x3 ->
                 case Language.PureScript.Types.$fNFDataType_$crnf
                        x1 of wild1 { () ->
                 case x2 of wild2 { DEFAULT ->
                 case x3 of wild3 { DEFAULT -> GHC.Tuple.() } } } }) -}
7606412c872384e0621629eab8f1da32
  $fNFDataEnvironment2 :: Data.Set.Internal.Set GHC.Types.Int -> ()
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (Data.Set.Internal.$fNFDataSet_$crnf
                   @ GHC.Types.Int
                   (Control.DeepSeq.rwhnf @ GHC.Types.Int)
                     `cast`
                   (Sym (Control.DeepSeq.N:NFData[0] <GHC.Types.Int>_N))) -}
0970d2d2dfea5db948f3106432e7af3f
  $fNFDataEnvironment3 ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
    -> ()
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SS),1*U(1*U,1*H)>,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ClassName)) ->
                 case w of ww { Language.PureScript.Names.Qualified ww1 ww2 ->
                 case ww2
                        `cast`
                      (Language.PureScript.Names.N:ProperName[0]
                           <'Language.PureScript.Names.ClassName>_P) of nt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 case ww1 of wild {
                   GHC.Base.Nothing -> GHC.Tuple.()
                   GHC.Base.Just x
                   -> Language.PureScript.Names.$fNFDataModuleName_go
                        x `cast` (Language.PureScript.Names.N:ModuleName[0]) } } }) -}
dd076fc194429b37d883657531892374
  $fNFDataEnvironment4 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName))
      (Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            Language.PureScript.Names.Ident)
         Language.PureScript.TypeClassDictionaries.NamedDict)
    -> ()
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (Data.Map.Internal.$fNFDataMap_$crnf
                   @ (Language.PureScript.Names.Qualified
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.ClassName))
                   @ (Data.Map.Internal.Map
                        (Language.PureScript.Names.Qualified
                           Language.PureScript.Names.Ident)
                        Language.PureScript.TypeClassDictionaries.NamedDict)
                   Language.PureScript.Environment.$fNFDataEnvironment3
                     `cast`
                   (Sym (Control.DeepSeq.N:NFData[0]
                             <Language.PureScript.Names.Qualified
                                (Language.PureScript.Names.ProperName
                                   'Language.PureScript.Names.ClassName)>_N))
                   Language.PureScript.Environment.$fNFDataEnvironment5
                     `cast`
                   (Sym (Control.DeepSeq.N:NFData[0]
                             <Data.Map.Internal.Map
                                (Language.PureScript.Names.Qualified
                                   Language.PureScript.Names.Ident)
                                (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
                                   (Language.PureScript.Names.Qualified
                                      Language.PureScript.Names.Ident))>_N))) -}
815e87781be156f43de95acd7f553eb3
  $fNFDataEnvironment5 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         Language.PureScript.Names.Ident)
      (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
         (Language.PureScript.Names.Qualified
            Language.PureScript.Names.Ident))
    -> ()
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (Data.Map.Internal.$fNFDataMap_$crnf
                   @ (Language.PureScript.Names.Qualified
                        Language.PureScript.Names.Ident)
                   @ (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
                        (Language.PureScript.Names.Qualified
                           Language.PureScript.Names.Ident))
                   Language.PureScript.Environment.$fNFDataEnvironment7
                     `cast`
                   (Sym (Control.DeepSeq.N:NFData[0]
                             <Language.PureScript.Names.Qualified
                                Language.PureScript.Names.Ident>_N))
                   Language.PureScript.Environment.$fNFDataEnvironment6
                     `cast`
                   (Sym (Control.DeepSeq.N:NFData[0]
                             <Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
                                (Language.PureScript.Names.Qualified
                                   Language.PureScript.Names.Ident)>_N))) -}
4965612151af9800c0d4a9863df2435c
  $fNFDataEnvironment6 ::
    Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
      (Language.PureScript.Names.Qualified
         Language.PureScript.Names.Ident)
    -> ()
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SSS(SS)SS(SS)SS),1*U(1*U,1*U,1*U(1*U,1*U),1*U,1*U(1*U,1*H),1*U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
                           (Language.PureScript.Names.Qualified
                              Language.PureScript.Names.Ident)) ->
                 case w of ww { Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope ww1 ww2 ww3 ww4 ww5 ww6 ww7 ->
                 case ww3 of ww8 { Language.PureScript.Names.Qualified ww9 ww10 ->
                 case ww5 of ww11 { Language.PureScript.Names.Qualified ww12 ww13 ->
                 case ww13
                        `cast`
                      (Language.PureScript.Names.N:ProperName[0]
                           <'Language.PureScript.Names.ClassName>_P) of nt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 Language.PureScript.Environment.$w$dNFData
                   ww1
                   ww2
                   ww9
                   ww10
                   ww4
                   ww12
                   nt
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.ClassName>_P))
                   ww6
                   ww7 } } } }) -}
6b4150eb91ff8b2045065359207c2b09
  $fNFDataEnvironment7 ::
    Language.PureScript.Names.Qualified Language.PureScript.Names.Ident
    -> ()
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SS),1*U(1*U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.PureScript.Names.Qualified
                           Language.PureScript.Names.Ident) ->
                 case w of ww { Language.PureScript.Names.Qualified ww1 ww2 ->
                 Language.PureScript.Environment.$w$dNFData1 ww1 ww2 }) -}
e2b62e0e9dc3524d98843581aeb01626
  $fNFDataEnvironment8 ::
    GHC.Base.Maybe Language.PureScript.Names.ModuleName -> ()
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GHC.Base.Maybe Language.PureScript.Names.ModuleName) ->
                 case ds of wild {
                   GHC.Base.Nothing -> GHC.Tuple.()
                   GHC.Base.Just x
                   -> Language.PureScript.Names.$fNFDataModuleName_go
                        x `cast` (Language.PureScript.Names.N:ModuleName[0]) }) -}
9e59514044e75a5c639630a640f66b5b
  $fNFDataEnvironment9 ::
    ([(Data.Text.Internal.Text,
       GHC.Base.Maybe Language.PureScript.Kinds.Kind)],
     Language.PureScript.Types.Type)
    -> ()
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SS),1*U(1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: ([(Data.Text.Internal.Text,
                             GHC.Base.Maybe Language.PureScript.Kinds.Kind)],
                           Language.PureScript.Types.Type)) ->
                 case ds of wild { (,) x y ->
                 case Language.PureScript.Environment.$fNFDataEnvironment_go3
                        x of wild1 { () ->
                 Language.PureScript.Types.$fNFDataType_$crnf y } }) -}
c291d940fae22a3f1400d8c90f26bdd4
  $fNFDataEnvironment_$crnf ::
    Language.PureScript.Environment.Environment -> ()
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SSSSSSS),1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.PureScript.Environment.Environment) ->
                 case w of ww { Language.PureScript.Environment.Environment ww1 ww2 ww3 ww4 ww5 ww6 ww7 ->
                 Language.PureScript.Environment.$w$crnf
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7 }) -}
ef672654cffb5adb82634076fd85ad4a
  $fNFDataEnvironment_$crnf1 ::
    Language.PureScript.Environment.TypeClassData -> ()
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SSSSSS),1*U(1*U,1*U,1*U,1*U,1*U,1*U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.PureScript.Environment.TypeClassData) ->
                 case w of ww { Language.PureScript.Environment.TypeClassData ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Language.PureScript.Environment.$w$crnf1
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
0a0df18a3a5bbdd9f1dda59baf0fb992
  $fNFDataEnvironment_$crnf2 ::
    Language.PureScript.Environment.TypeKind -> ()
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (x :: Language.PureScript.Environment.TypeKind) ->
                 case x of wild {
                   Language.PureScript.Environment.DataType g1 g2
                   -> case Language.PureScript.Environment.$fNFDataEnvironment_go3
                             g1 of wild1 { () ->
                      Language.PureScript.Environment.$fNFDataEnvironment_go5 g2 }
                   Language.PureScript.Environment.TypeSynonym -> GHC.Tuple.()
                   Language.PureScript.Environment.ExternData -> GHC.Tuple.()
                   Language.PureScript.Environment.LocalTypeVariable -> GHC.Tuple.()
                   Language.PureScript.Environment.ScopedTypeVar -> GHC.Tuple.() }) -}
ef672654cffb5adb82634076fd85ad4a
  $fNFDataEnvironment_go ::
    [Language.PureScript.Environment.FunctionalDependency] -> ()
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
ee01cb478dbaf4c363b619ca9a8ac9c7
  $fNFDataEnvironment_go1 ::
    [Language.PureScript.Types.Constraint] -> ()
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
7ad9394eea7bdb1a3525809dbaf1e9c0
  $fNFDataEnvironment_go2 ::
    [(Language.PureScript.Names.Ident, Language.PureScript.Types.Type)]
    -> ()
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
c92b823035846ef61cd3ad834c216c04
  $fNFDataEnvironment_go3 ::
    [(Data.Text.Internal.Text,
      GHC.Base.Maybe Language.PureScript.Kinds.Kind)]
    -> ()
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
516124a4cf8bce16d303d8dc7b7ac4cc
  $fNFDataEnvironment_go4 :: [Language.PureScript.Names.Ident] -> ()
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
4a2b9de1880758a15f3adf5bfea76f5b
  $fNFDataEnvironment_go5 ::
    [(Language.PureScript.Names.ProperName
        'Language.PureScript.Names.ConstructorName,
      [Language.PureScript.Types.Type])]
    -> ()
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
ef672654cffb5adb82634076fd85ad4a
  $fNFDataFunctionalDependency ::
    Control.DeepSeq.NFData
      Language.PureScript.Environment.FunctionalDependency
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SS),1*U(1*U,1*U)>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Language.PureScript.Environment.$fNFDataFunctionalDependency_$crnf
                  `cast`
                (Sym (Control.DeepSeq.N:NFData[0]
                          <Language.PureScript.Environment.FunctionalDependency>_N)) -}
ef672654cffb5adb82634076fd85ad4a
  $fNFDataFunctionalDependency_$crnf ::
    Language.PureScript.Environment.FunctionalDependency -> ()
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SS),1*U(1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Environment.FunctionalDependency) ->
                 case x of wild { Language.PureScript.Environment.FunctionalDependency g1 g2 ->
                 case Language.PureScript.Environment.$fNFDataFunctionalDependency_go
                        g1 of wild1 { () ->
                 Language.PureScript.Environment.$fNFDataFunctionalDependency_go
                   g2 } }) -}
e4ef356a76d77cc77873d93990691b5d
  $fNFDataFunctionalDependency_go :: [GHC.Types.Int] -> ()
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
90ac7b5e1c331fe4ca4a3a5c9b2afcbd
  $fNFDataNameKind ::
    Control.DeepSeq.NFData Language.PureScript.Environment.NameKind
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Language.PureScript.Environment.$fNFDataNameKind_$crnf
                  `cast`
                (Sym (Control.DeepSeq.N:NFData[0]
                          <Language.PureScript.Environment.NameKind>_N)) -}
90ac7b5e1c331fe4ca4a3a5c9b2afcbd
  $fNFDataNameKind_$crnf ::
    Language.PureScript.Environment.NameKind -> ()
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Environment.NameKind) ->
                 case x of wild { DEFAULT -> GHC.Tuple.() }) -}
610613df6c74f57795f9d575591a7472
  $fNFDataNameVisibility ::
    Control.DeepSeq.NFData
      Language.PureScript.Environment.NameVisibility
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Language.PureScript.Environment.$fNFDataNameVisibility_$crnf
                  `cast`
                (Sym (Control.DeepSeq.N:NFData[0]
                          <Language.PureScript.Environment.NameVisibility>_N)) -}
610613df6c74f57795f9d575591a7472
  $fNFDataNameVisibility_$crnf ::
    Language.PureScript.Environment.NameVisibility -> ()
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Environment.NameVisibility) ->
                 case x of wild { DEFAULT -> GHC.Tuple.() }) -}
ef672654cffb5adb82634076fd85ad4a
  $fNFDataTypeClassData ::
    Control.DeepSeq.NFData
      Language.PureScript.Environment.TypeClassData
  DFunId
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SSSSSS),1*U(1*U,1*U,1*U,1*U,1*U,1*U)>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Language.PureScript.Environment.$fNFDataEnvironment_$crnf1
                  `cast`
                (Sym (Control.DeepSeq.N:NFData[0]
                          <Language.PureScript.Environment.TypeClassData>_N)) -}
0a0df18a3a5bbdd9f1dda59baf0fb992
  $fNFDataTypeKind ::
    Control.DeepSeq.NFData Language.PureScript.Environment.TypeKind
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Language.PureScript.Environment.$fNFDataEnvironment_$crnf2
                  `cast`
                (Sym (Control.DeepSeq.N:NFData[0]
                          <Language.PureScript.Environment.TypeKind>_N)) -}
c291d940fae22a3f1400d8c90f26bdd4
  $fOrdDataDeclType ::
    GHC.Classes.Ord Language.PureScript.Environment.DataDeclType
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Environment.DataDeclType
                  Language.PureScript.Environment.$fEqDataDeclType
                  Language.PureScript.Environment.$fOrdDataDeclType_$ccompare
                  Language.PureScript.Environment.$fOrdDataDeclType_$c<
                  Language.PureScript.Environment.$fOrdDataDeclType_$c<=
                  Language.PureScript.Environment.$fOrdDataDeclType_$c>
                  Language.PureScript.Environment.$fOrdDataDeclType_$c>=
                  Language.PureScript.Environment.$fOrdDataDeclType_$cmax
                  Language.PureScript.Environment.$fOrdDataDeclType_$cmin -}
c291d940fae22a3f1400d8c90f26bdd4
  $fOrdDataDeclType_$c< ::
    Language.PureScript.Environment.DataDeclType
    -> Language.PureScript.Environment.DataDeclType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.Environment.DataDeclType)
                   (b :: Language.PureScript.Environment.DataDeclType) ->
                 case a of wild {
                   Language.PureScript.Environment.Data
                   -> case b of wild1 {
                        Language.PureScript.Environment.Data -> GHC.Types.False
                        Language.PureScript.Environment.Newtype -> GHC.Types.True }
                   Language.PureScript.Environment.Newtype
                   -> case b of wild1 { DEFAULT -> GHC.Types.False } }) -}
c291d940fae22a3f1400d8c90f26bdd4
  $fOrdDataDeclType_$c<= ::
    Language.PureScript.Environment.DataDeclType
    -> Language.PureScript.Environment.DataDeclType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.Environment.DataDeclType)
                   (b :: Language.PureScript.Environment.DataDeclType) ->
                 case b of wild {
                   Language.PureScript.Environment.Data
                   -> case a of wild1 {
                        Language.PureScript.Environment.Data -> GHC.Types.True
                        Language.PureScript.Environment.Newtype -> GHC.Types.False }
                   Language.PureScript.Environment.Newtype
                   -> case a of wild1 { DEFAULT -> GHC.Types.True } }) -}
c291d940fae22a3f1400d8c90f26bdd4
  $fOrdDataDeclType_$c> ::
    Language.PureScript.Environment.DataDeclType
    -> Language.PureScript.Environment.DataDeclType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, True)
                (\ (a :: Language.PureScript.Environment.DataDeclType)
                   (b :: Language.PureScript.Environment.DataDeclType) ->
                 Language.PureScript.Environment.$fOrdDataDeclType_$c< b a) -}
c291d940fae22a3f1400d8c90f26bdd4
  $fOrdDataDeclType_$c>= ::
    Language.PureScript.Environment.DataDeclType
    -> Language.PureScript.Environment.DataDeclType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.Environment.DataDeclType)
                   (b :: Language.PureScript.Environment.DataDeclType) ->
                 case a of wild {
                   Language.PureScript.Environment.Data
                   -> case b of wild1 {
                        Language.PureScript.Environment.Data -> GHC.Types.True
                        Language.PureScript.Environment.Newtype -> GHC.Types.False }
                   Language.PureScript.Environment.Newtype
                   -> case b of wild1 { DEFAULT -> GHC.Types.True } }) -}
c291d940fae22a3f1400d8c90f26bdd4
  $fOrdDataDeclType_$ccompare ::
    Language.PureScript.Environment.DataDeclType
    -> Language.PureScript.Environment.DataDeclType
    -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.Environment.DataDeclType)
                   (b :: Language.PureScript.Environment.DataDeclType) ->
                 case a of wild {
                   Language.PureScript.Environment.Data
                   -> case b of wild1 {
                        Language.PureScript.Environment.Data -> GHC.Types.EQ
                        Language.PureScript.Environment.Newtype -> GHC.Types.LT }
                   Language.PureScript.Environment.Newtype
                   -> case b of wild1 {
                        Language.PureScript.Environment.Data -> GHC.Types.GT
                        Language.PureScript.Environment.Newtype -> GHC.Types.EQ } }) -}
c291d940fae22a3f1400d8c90f26bdd4
  $fOrdDataDeclType_$cmax ::
    Language.PureScript.Environment.DataDeclType
    -> Language.PureScript.Environment.DataDeclType
    -> Language.PureScript.Environment.DataDeclType
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Environment.DataDeclType)
                   (y :: Language.PureScript.Environment.DataDeclType) ->
                 case y of wild {
                   Language.PureScript.Environment.Data -> x
                   Language.PureScript.Environment.Newtype
                   -> case x of wild1 { DEFAULT ->
                      Language.PureScript.Environment.Newtype } }) -}
c291d940fae22a3f1400d8c90f26bdd4
  $fOrdDataDeclType_$cmin ::
    Language.PureScript.Environment.DataDeclType
    -> Language.PureScript.Environment.DataDeclType
    -> Language.PureScript.Environment.DataDeclType
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Environment.DataDeclType)
                   (y :: Language.PureScript.Environment.DataDeclType) ->
                 case y of wild {
                   Language.PureScript.Environment.Data
                   -> case x of wild1 { DEFAULT ->
                      Language.PureScript.Environment.Data }
                   Language.PureScript.Environment.Newtype -> x }) -}
c291d940fae22a3f1400d8c90f26bdd4
  $fShowDataDeclType ::
    GHC.Show.Show Language.PureScript.Environment.DataDeclType
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Environment.DataDeclType
                  Language.PureScript.Environment.$fShowDataDeclType_$cshowsPrec
                  Language.PureScript.Environment.$fShowDataDeclType_$cshow
                  Language.PureScript.Environment.$fShowDataDeclType_$cshowList -}
c291d940fae22a3f1400d8c90f26bdd4
  $fShowDataDeclType1 ::
    Language.PureScript.Environment.DataDeclType -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Language.PureScript.Environment.DataDeclType)
                   (eta :: GHC.Base.String) ->
                 case ds of wild {
                   Language.PureScript.Environment.Data
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           Language.PureScript.Environment.$fShowDataDeclType4)
                        eta
                   Language.PureScript.Environment.Newtype
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           Language.PureScript.Environment.$fShowDataDeclType2)
                        eta }) -}
8270a611204d717afcfd41d5c2be0687
  $fShowDataDeclType2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Environment.$fShowDataDeclType3) -}
235a7c9719ec3ea21eae7b6c3261b520
  $fShowDataDeclType3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Newtype"#) -}
8ec8266f99a56764e5a1ae01f0d21e87
  $fShowDataDeclType4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Environment.$fShowDataDeclType5) -}
1c3b001263b6ca538011c1a3a11cb0a5
  $fShowDataDeclType5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Data"#) -}
c291d940fae22a3f1400d8c90f26bdd4
  $fShowDataDeclType_$cshow ::
    Language.PureScript.Environment.DataDeclType -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Environment.DataDeclType) ->
                 case x of wild {
                   Language.PureScript.Environment.Data
                   -> Language.PureScript.Environment.$fShowDataDeclType4
                   Language.PureScript.Environment.Newtype
                   -> Language.PureScript.Environment.$fShowDataDeclType2 }) -}
c291d940fae22a3f1400d8c90f26bdd4
  $fShowDataDeclType_$cshowList ::
    [Language.PureScript.Environment.DataDeclType] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Environment.DataDeclType])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Environment.DataDeclType
                   Language.PureScript.Environment.$fShowDataDeclType1
                   ls
                   s) -}
c291d940fae22a3f1400d8c90f26bdd4
  $fShowDataDeclType_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Environment.DataDeclType -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (ds1 :: Language.PureScript.Environment.DataDeclType)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   Language.PureScript.Environment.Data
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           Language.PureScript.Environment.$fShowDataDeclType4)
                        eta
                   Language.PureScript.Environment.Newtype
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           Language.PureScript.Environment.$fShowDataDeclType2)
                        eta }) -}
c291d940fae22a3f1400d8c90f26bdd4
  $fShowEnvironment ::
    GHC.Show.Show Language.PureScript.Environment.Environment
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Environment.Environment
                  Language.PureScript.Environment.$fShowEnvironment_$cshowsPrec
                  Language.PureScript.Environment.$fShowEnvironment_$cshow
                  Language.PureScript.Environment.$fShowEnvironment_$cshowList -}
c291d940fae22a3f1400d8c90f26bdd4
  $fShowEnvironment1 ::
    Language.PureScript.Environment.Environment -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U)>,
     Unfolding: (\ (w :: Language.PureScript.Environment.Environment) ->
                 case w of ww { Language.PureScript.Environment.Environment ww1 ww2 ww3 ww4 ww5 ww6 ww7 ->
                 Language.PureScript.Environment.$w$cshowsPrec
                   0#
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7 }) -}
260c5f31ae5944141e32852c82c92b39
  $fShowEnvironment2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
c291d940fae22a3f1400d8c90f26bdd4
  $fShowEnvironment_$cshow ::
    Language.PureScript.Environment.Environment -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Environment.Environment) ->
                 Language.PureScript.Environment.$fShowEnvironment_$cshowsPrec
                   Language.PureScript.Environment.$fShowEnvironment2
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
c291d940fae22a3f1400d8c90f26bdd4
  $fShowEnvironment_$cshowList ::
    [Language.PureScript.Environment.Environment] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Environment.Environment])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Environment.Environment
                   Language.PureScript.Environment.$fShowEnvironment1
                   ls
                   s) -}
c291d940fae22a3f1400d8c90f26bdd4
  $fShowEnvironment_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Environment.Environment -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Environment.Environment) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Language.PureScript.Environment.Environment ww3 ww4 ww5 ww6 ww7 ww8 ww9 ->
                 Language.PureScript.Environment.$w$cshowsPrec
                   ww1
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9 } }) -}
ef672654cffb5adb82634076fd85ad4a
  $fShowFunctionalDependency ::
    GHC.Show.Show Language.PureScript.Environment.FunctionalDependency
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Environment.FunctionalDependency
                  Language.PureScript.Environment.$fShowFunctionalDependency_$cshowsPrec
                  Language.PureScript.Environment.$fShowFunctionalDependency_$cshow
                  Language.PureScript.Environment.$fShowFunctionalDependency_$cshowList -}
ef672654cffb5adb82634076fd85ad4a
  $fShowFunctionalDependency1 ::
    Language.PureScript.Environment.FunctionalDependency
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(1*U,1*U)><L,U>,
     Unfolding: (\ (w :: Language.PureScript.Environment.FunctionalDependency)
                   (w1 :: GHC.Base.String) ->
                 case w of ww { Language.PureScript.Environment.FunctionalDependency ww1 ww2 ->
                 Language.PureScript.Environment.$w$cshowsPrec1 0# ww1 ww2 w1 }) -}
ef672654cffb5adb82634076fd85ad4a
  $fShowFunctionalDependency_$cshow ::
    Language.PureScript.Environment.FunctionalDependency
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Environment.FunctionalDependency) ->
                 Language.PureScript.Environment.$fShowFunctionalDependency_$cshowsPrec
                   Language.PureScript.Environment.$fShowEnvironment2
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
ef672654cffb5adb82634076fd85ad4a
  $fShowFunctionalDependency_$cshowList ::
    [Language.PureScript.Environment.FunctionalDependency]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Environment.FunctionalDependency])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Environment.FunctionalDependency
                   Language.PureScript.Environment.$fShowFunctionalDependency1
                   ls
                   s) -}
ef672654cffb5adb82634076fd85ad4a
  $fShowFunctionalDependency_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Environment.FunctionalDependency
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Environment.FunctionalDependency)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Language.PureScript.Environment.FunctionalDependency ww3 ww4 ->
                 Language.PureScript.Environment.$w$cshowsPrec1
                   ww1
                   ww3
                   ww4
                   w2 } }) -}
90ac7b5e1c331fe4ca4a3a5c9b2afcbd
  $fShowNameKind ::
    GHC.Show.Show Language.PureScript.Environment.NameKind
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Environment.NameKind
                  Language.PureScript.Environment.$fShowNameKind_$cshowsPrec
                  Language.PureScript.Environment.$fShowNameKind_$cshow
                  Language.PureScript.Environment.$fShowNameKind_$cshowList -}
4a89ec8b7ce81d065d713247578ad9f0
  $fShowNameKind1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Environment.$fShowNameKind2) -}
bc7af2279322f6c9dd444a9c9315e715
  $fShowNameKind2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("External"#) -}
ba6c527c211fb616a4fe4278b76e357e
  $fShowNameKind3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Environment.$fShowNameKind4) -}
3fce7f7b5f3acb868887f3a59df938dd
  $fShowNameKind4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Public"#) -}
ce05bc1547cf2f9ed74d5ff164ecffe9
  $fShowNameKind5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Environment.$fShowNameKind6) -}
235c794ec925aab10b8389b26b6b1501
  $fShowNameKind6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Private"#) -}
90ac7b5e1c331fe4ca4a3a5c9b2afcbd
  $fShowNameKind_$cshow ::
    Language.PureScript.Environment.NameKind -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Environment.NameKind) ->
                 case x of wild {
                   Language.PureScript.Environment.Private
                   -> Language.PureScript.Environment.$fShowNameKind5
                   Language.PureScript.Environment.Public
                   -> Language.PureScript.Environment.$fShowNameKind3
                   Language.PureScript.Environment.External
                   -> Language.PureScript.Environment.$fShowNameKind1 }) -}
90ac7b5e1c331fe4ca4a3a5c9b2afcbd
  $fShowNameKind_$cshowList ::
    [Language.PureScript.Environment.NameKind] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Environment.NameKind])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Environment.NameKind
                   Language.PureScript.Environment.$w$cshowsPrec2
                   ls
                   s) -}
90ac7b5e1c331fe4ca4a3a5c9b2afcbd
  $fShowNameKind_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Environment.NameKind -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: [0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Environment.NameKind)
                   (w2 :: GHC.Base.String) ->
                 Language.PureScript.Environment.$w$cshowsPrec2 w1 w2) -}
610613df6c74f57795f9d575591a7472
  $fShowNameVisibility ::
    GHC.Show.Show Language.PureScript.Environment.NameVisibility
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Environment.NameVisibility
                  Language.PureScript.Environment.$fShowNameVisibility_$cshowsPrec
                  Language.PureScript.Environment.$fShowNameVisibility_$cshow
                  Language.PureScript.Environment.$fShowNameVisibility_$cshowList -}
610613df6c74f57795f9d575591a7472
  $fShowNameVisibility1 ::
    Language.PureScript.Environment.NameVisibility -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Language.PureScript.Environment.NameVisibility)
                   (eta :: GHC.Base.String) ->
                 case ds of wild {
                   Language.PureScript.Environment.Undefined
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           Language.PureScript.Environment.$fShowNameVisibility4)
                        eta
                   Language.PureScript.Environment.Defined
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           Language.PureScript.Environment.$fShowNameVisibility2)
                        eta }) -}
ff7f53a4f2f104881251dacef81785fb
  $fShowNameVisibility2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Environment.$fShowNameVisibility3) -}
55db8247405f3c7fe37bf183fd176bd9
  $fShowNameVisibility3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Defined"#) -}
61587da09a92c0be4d1cd81a95c3361d
  $fShowNameVisibility4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Environment.$fShowNameVisibility5) -}
e53ef7767e95ff27525072181014e5ba
  $fShowNameVisibility5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Undefined"#) -}
610613df6c74f57795f9d575591a7472
  $fShowNameVisibility_$cshow ::
    Language.PureScript.Environment.NameVisibility -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Environment.NameVisibility) ->
                 case x of wild {
                   Language.PureScript.Environment.Undefined
                   -> Language.PureScript.Environment.$fShowNameVisibility4
                   Language.PureScript.Environment.Defined
                   -> Language.PureScript.Environment.$fShowNameVisibility2 }) -}
610613df6c74f57795f9d575591a7472
  $fShowNameVisibility_$cshowList ::
    [Language.PureScript.Environment.NameVisibility] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Environment.NameVisibility])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Environment.NameVisibility
                   Language.PureScript.Environment.$fShowNameVisibility1
                   ls
                   s) -}
610613df6c74f57795f9d575591a7472
  $fShowNameVisibility_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Environment.NameVisibility -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (ds1 :: Language.PureScript.Environment.NameVisibility)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   Language.PureScript.Environment.Undefined
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           Language.PureScript.Environment.$fShowNameVisibility4)
                        eta
                   Language.PureScript.Environment.Defined
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           Language.PureScript.Environment.$fShowNameVisibility2)
                        eta }) -}
ef672654cffb5adb82634076fd85ad4a
  $fShowTypeClassData ::
    GHC.Show.Show Language.PureScript.Environment.TypeClassData
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Environment.TypeClassData
                  Language.PureScript.Environment.$fShowTypeClassData_$cshowsPrec
                  Language.PureScript.Environment.$fShowTypeClassData_$cshow
                  Language.PureScript.Environment.$fShowTypeClassData_$cshowList -}
ef672654cffb5adb82634076fd85ad4a
  $fShowTypeClassData1 ::
    Language.PureScript.Environment.TypeClassData -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(U,U,U,U,1*U,1*U)>,
     Unfolding: (\ (w :: Language.PureScript.Environment.TypeClassData) ->
                 case w of ww { Language.PureScript.Environment.TypeClassData ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Language.PureScript.Environment.$w$cshowsPrec3
                   0#
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
ef672654cffb5adb82634076fd85ad4a
  $fShowTypeClassData_$cshow ::
    Language.PureScript.Environment.TypeClassData -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U,U,U,U,1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Environment.TypeClassData) ->
                 Language.PureScript.Environment.$fShowTypeClassData_$cshowsPrec
                   Language.PureScript.Environment.$fShowEnvironment2
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
ef672654cffb5adb82634076fd85ad4a
  $fShowTypeClassData_$cshowList ::
    [Language.PureScript.Environment.TypeClassData] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Environment.TypeClassData])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Environment.TypeClassData
                   Language.PureScript.Environment.$fShowTypeClassData1
                   ls
                   s) -}
ef672654cffb5adb82634076fd85ad4a
  $fShowTypeClassData_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Environment.TypeClassData -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(U,U,U,U,1*U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Environment.TypeClassData) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Language.PureScript.Environment.TypeClassData ww3 ww4 ww5 ww6 ww7 ww8 ->
                 Language.PureScript.Environment.$w$cshowsPrec3
                   ww1
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8 } }) -}
0a0df18a3a5bbdd9f1dda59baf0fb992
  $fShowTypeKind ::
    GHC.Show.Show Language.PureScript.Environment.TypeKind
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Environment.TypeKind
                  Language.PureScript.Environment.$fShowTypeKind_$cshowsPrec
                  Language.PureScript.Environment.$fShowTypeKind_$cshow
                  Language.PureScript.Environment.$fShowTypeKind_$cshowList -}
0a0df18a3a5bbdd9f1dda59baf0fb992
  $fShowTypeKind1 ::
    Language.PureScript.Environment.TypeKind -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (Language.PureScript.Environment.$fShowTypeKind_$cshowsPrec
                   Language.PureScript.Environment.$fShowEnvironment2) -}
1e2e6f7ed14d1e0e2e99b80bf9d5f4fe
  $fShowTypeKind10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Environment.$fShowTypeKind11) -}
d25d04bd9be2095465a33b166e4d6cbb
  $fShowTypeKind11 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("DataType "#) -}
a039c010276d8b3c51b2a219ed2abf9c
  $fShowTypeKind12 ::
    (Language.PureScript.Names.ProperName
       'Language.PureScript.Names.ConstructorName,
     [Language.PureScript.Types.Type])
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(1*U(U,U,U),1*U)><L,U>m2,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: (Language.PureScript.Names.ProperName
                            'Language.PureScript.Names.ConstructorName,
                          [Language.PureScript.Types.Type]))
                   (w1 :: GHC.Base.String) ->
                 case w of ww { (,) ww1 ww2 ->
                 GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.$fShow(,)4
                   (Language.PureScript.Names.$w$cshowsPrec2
                      @ 'Language.PureScript.Names.ConstructorName
                      0#
                      ww1
                      (GHC.Types.:
                         @ GHC.Types.Char
                         GHC.Show.showList__1
                         (GHC.Show.$fShow(,)_$sgo1
                            (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 w1)
                            (Language.PureScript.Types.$fShowType_$cshowList ww2)
                            (GHC.Types.[] @ GHC.Show.ShowS)))) }) -}
2bfc746c987792b0c91c1c2f42004b42
  $fShowTypeKind13 ::
    (Data.Text.Internal.Text,
     GHC.Base.Maybe Language.PureScript.Kinds.Kind)
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(1*U(U,U,U),1*U)><L,U>m2,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: (Data.Text.Internal.Text,
                          GHC.Base.Maybe Language.PureScript.Kinds.Kind))
                   (w1 :: GHC.Base.String) ->
                 case w of ww { (,) ww1 ww2 ->
                 case Language.PureScript.Environment.$wlvl
                        ww1
                        ww2
                        w1 of ww3 { (#,#) ww4 ww5 ->
                 GHC.Types.: @ GHC.Types.Char ww4 ww5 } }) -}
2ba05342df779fe3d34cdc185248161e
  $fShowTypeKind2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Environment.$fShowTypeKind3) -}
5882a1fd2855afae70fe58886d293ddb
  $fShowTypeKind3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ScopedTypeVar"#) -}
e61ccea165063928907b268e29b4f650
  $fShowTypeKind4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Environment.$fShowTypeKind5) -}
89e5844551fa8b4eecceec4bf771dc02
  $fShowTypeKind5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("LocalTypeVariable"#) -}
c1c38bf58ef45a0ccb83cce7766e9022
  $fShowTypeKind6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Environment.$fShowTypeKind7) -}
21c2a52ccbe538bb91a8c0069af94928
  $fShowTypeKind7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ExternData"#) -}
3abe072ef86105e8655dc4a961dab6de
  $fShowTypeKind8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Environment.$fShowTypeKind9) -}
dec941e7a42a819a7abd9e033ee7a96e
  $fShowTypeKind9 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("TypeSynonym"#) -}
0a0df18a3a5bbdd9f1dda59baf0fb992
  $fShowTypeKind_$cshow ::
    Language.PureScript.Environment.TypeKind -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U> -}
0a0df18a3a5bbdd9f1dda59baf0fb992
  $fShowTypeKind_$cshowList ::
    [Language.PureScript.Environment.TypeKind] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Environment.TypeKind])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Environment.TypeKind
                   Language.PureScript.Environment.$fShowTypeKind1
                   ls
                   s) -}
0a0df18a3a5bbdd9f1dda59baf0fb992
  $fShowTypeKind_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Environment.TypeKind -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ (a :: GHC.Types.Int)
                   (ds :: Language.PureScript.Environment.TypeKind)
                   (eta :: GHC.Base.String) ->
                 case ds of wild {
                   Language.PureScript.Environment.DataType b1 b2
                   -> case a of wild1 { GHC.Types.I# x ->
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                          {- Arity: 1, Strictness: <L,U> -}
                        = \ (x1 :: GHC.Base.String)[OneShot] ->
                          GHC.Show.showList__
                            @ (Data.Text.Internal.Text,
                               GHC.Base.Maybe Language.PureScript.Kinds.Kind)
                            Language.PureScript.Environment.$fShowTypeKind13
                            b1
                            (GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.showSpace1
                               (GHC.Show.showList__
                                  @ (Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.ConstructorName,
                                     [Language.PureScript.Types.Type])
                                  Language.PureScript.Environment.$fShowTypeKind12
                                  b2
                                  x1))
                      } in
                      case GHC.Prim.>=# x 11# of lwild {
                        DEFAULT
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             Language.PureScript.Environment.$fShowTypeKind10
                             (g eta)
                        1#
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Language.PureScript.Environment.$fShowTypeKind10
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 eta))) } }
                   Language.PureScript.Environment.TypeSynonym
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.Environment.$fShowTypeKind8
                        eta
                   Language.PureScript.Environment.ExternData
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.Environment.$fShowTypeKind6
                        eta
                   Language.PureScript.Environment.LocalTypeVariable
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.Environment.$fShowTypeKind4
                        eta
                   Language.PureScript.Environment.ScopedTypeVar
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.Environment.$fShowTypeKind2
                        eta }) -}
c291d940fae22a3f1400d8c90f26bdd4
  $fToJSONDataDeclType ::
    Data.Aeson.Types.ToJSON.ToJSON
      Language.PureScript.Environment.DataDeclType
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Environment.DataDeclType
                  Language.PureScript.Environment.$fToJSONDataDeclType_$ctoJSON
                  Language.PureScript.Environment.$fToJSONDataDeclType_$ctoEncoding
                  Language.PureScript.Environment.$fToJSONDataDeclType_$ctoJSONList
                  Language.PureScript.Environment.$fToJSONDataDeclType_$ctoEncodingList -}
c291d940fae22a3f1400d8c90f26bdd4
  $fToJSONDataDeclType_$ctoEncoding ::
    Language.PureScript.Environment.DataDeclType
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Strictness: <S,1*U>, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (x :: Language.PureScript.Environment.DataDeclType) ->
                 case x of wild {
                   Language.PureScript.Environment.Data
                   -> case Language.PureScript.Environment.$fFromJSONDataDeclType12 of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                      Data.Aeson.Encoding.Builder.encodeToBuilder
                        (Data.Aeson.Types.Internal.String dt) }
                   Language.PureScript.Environment.Newtype
                   -> case Language.PureScript.Environment.$fFromJSONDataDeclType10 of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                      Data.Aeson.Encoding.Builder.encodeToBuilder
                        (Data.Aeson.Types.Internal.String dt) } })
                  `cast`
                (<Language.PureScript.Environment.DataDeclType>_R
                 ->_R Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                               <Data.Aeson.Types.Internal.Value>_P)) -}
c291d940fae22a3f1400d8c90f26bdd4
  $fToJSONDataDeclType_$ctoEncodingList ::
    [Language.PureScript.Environment.DataDeclType]
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (Data.Aeson.Encoding.Internal.list
                   @ Language.PureScript.Environment.DataDeclType
                   Language.PureScript.Environment.$fToJSONDataDeclType_$ctoEncoding) -}
c291d940fae22a3f1400d8c90f26bdd4
  $fToJSONDataDeclType_$ctoJSON ::
    Language.PureScript.Environment.DataDeclType
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>m3,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Environment.DataDeclType) ->
                 case x of wild {
                   Language.PureScript.Environment.Data
                   -> case Language.PureScript.Environment.$fFromJSONDataDeclType12 of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                      Data.Aeson.Types.Internal.String dt }
                   Language.PureScript.Environment.Newtype
                   -> case Language.PureScript.Environment.$fFromJSONDataDeclType10 of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                      Data.Aeson.Types.Internal.String dt } }) -}
c291d940fae22a3f1400d8c90f26bdd4
  $fToJSONDataDeclType_$ctoJSONList ::
    [Language.PureScript.Environment.DataDeclType]
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (x :: [Language.PureScript.Environment.DataDeclType]) ->
                 Data.Aeson.Types.Internal.$WArray
                   (Data.Vector.Generic.new
                      @ Data.Vector.Vector
                      @ Data.Aeson.Types.Internal.Value
                      (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                      (Data.Vector.Generic.New.unstream
                         @ Data.Vector.Vector
                         @ Data.Aeson.Types.Internal.Value
                         (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                         (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                            @ Data.Vector.Fusion.Util.Id
                            @ Data.Aeson.Types.Internal.Value
                            @ Data.Vector.Vector
                            Data.Vector.Fusion.Util.$fMonadId
                            Data.Vector.Fusion.Bundle.Size.Unknown
                            (GHC.Base.build
                               @ Data.Aeson.Types.Internal.Value
                               (\ @ b1
                                  (c :: Data.Aeson.Types.Internal.Value -> b1 -> b1)[OneShot]
                                  (n1 :: b1)[OneShot] ->
                                GHC.Base.foldr
                                  @ Language.PureScript.Environment.DataDeclType
                                  @ b1
                                  (GHC.Base.mapFB
                                     @ Data.Aeson.Types.Internal.Value
                                     @ b1
                                     @ Language.PureScript.Environment.DataDeclType
                                     c
                                     Language.PureScript.Environment.$fToJSONDataDeclType_$ctoJSON)
                                  n1
                                  x)))))) -}
ef672654cffb5adb82634076fd85ad4a
  $fToJSONFunctionalDependency ::
    Data.Aeson.Types.ToJSON.ToJSON
      Language.PureScript.Environment.FunctionalDependency
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Environment.FunctionalDependency
                  Language.PureScript.Environment.$fToJSONFunctionalDependency_$ctoJSON
                  Language.PureScript.Environment.$fToJSONFunctionalDependency_$ctoEncoding
                  Language.PureScript.Environment.$fToJSONFunctionalDependency_$ctoJSONList
                  Language.PureScript.Environment.$fToJSONFunctionalDependency_$ctoEncodingList -}
ef672654cffb5adb82634076fd85ad4a
  $fToJSONFunctionalDependency_$ctoEncoding ::
    Language.PureScript.Environment.FunctionalDependency
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Strictness: <S(SL),1*U(1*U,1*U)>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (x :: Language.PureScript.Environment.FunctionalDependency) ->
                 Data.Aeson.Encoding.Builder.encodeToBuilder
                   (Language.PureScript.Environment.$fToJSONFunctionalDependency_$ctoJSON
                      x))
                  `cast`
                (<Language.PureScript.Environment.FunctionalDependency>_R
                 ->_R Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                               <Data.Aeson.Types.Internal.Value>_P)) -}
ef672654cffb5adb82634076fd85ad4a
  $fToJSONFunctionalDependency_$ctoEncodingList ::
    [Language.PureScript.Environment.FunctionalDependency]
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (Data.Aeson.Encoding.Internal.list
                   @ Language.PureScript.Environment.FunctionalDependency
                   Language.PureScript.Environment.$fToJSONFunctionalDependency_$ctoEncoding) -}
ef672654cffb5adb82634076fd85ad4a
  $fToJSONFunctionalDependency_$ctoJSON ::
    Language.PureScript.Environment.FunctionalDependency
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S(SL),1*U(1*U,1*U)>m1, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.PureScript.Environment.FunctionalDependency) ->
                 case w of ww { Language.PureScript.Environment.FunctionalDependency ww1 ww2 ->
                 case Language.PureScript.Environment.$w$ctoJSON
                        ww1
                        ww2 of ww3 { Unit# ww4 ->
                 Data.Aeson.Types.Internal.Object ww4 } }) -}
ef672654cffb5adb82634076fd85ad4a
  $fToJSONFunctionalDependency_$ctoJSONList ::
    [Language.PureScript.Environment.FunctionalDependency]
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (x :: [Language.PureScript.Environment.FunctionalDependency]) ->
                 Data.Aeson.Types.Internal.$WArray
                   (Data.Vector.Generic.new
                      @ Data.Vector.Vector
                      @ Data.Aeson.Types.Internal.Value
                      (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                      (Data.Vector.Generic.New.unstream
                         @ Data.Vector.Vector
                         @ Data.Aeson.Types.Internal.Value
                         (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                         (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                            @ Data.Vector.Fusion.Util.Id
                            @ Data.Aeson.Types.Internal.Value
                            @ Data.Vector.Vector
                            Data.Vector.Fusion.Util.$fMonadId
                            Data.Vector.Fusion.Bundle.Size.Unknown
                            (GHC.Base.build
                               @ Data.Aeson.Types.Internal.Value
                               (\ @ b1
                                  (c :: Data.Aeson.Types.Internal.Value -> b1 -> b1)[OneShot]
                                  (n1 :: b1)[OneShot] ->
                                GHC.Base.foldr
                                  @ Language.PureScript.Environment.FunctionalDependency
                                  @ b1
                                  (GHC.Base.mapFB
                                     @ Data.Aeson.Types.Internal.Value
                                     @ b1
                                     @ Language.PureScript.Environment.FunctionalDependency
                                     c
                                     Language.PureScript.Environment.$fToJSONFunctionalDependency_$ctoJSON)
                                  n1
                                  x)))))) -}
ca245c77911f223376e5bc0dfe255729
  $fToJSONFunctionalDependency_$s$wfoldlM_loop ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> [Data.Aeson.Types.Internal.Value]
    -> GHC.Prim.Int#
    -> GHC.Prim.MutableArray#
         GHC.Prim.RealWorld Data.Aeson.Types.Internal.Value
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Vector.Vector Data.Aeson.Types.Internal.Value #)
  {- Arity: 6, Strictness: <S,U><S,1*U><L,U><S,U><L,U><L,U> -}
0a0df18a3a5bbdd9f1dda59baf0fb992
  $fToJSONTypeKind ::
    Data.Aeson.Types.ToJSON.ToJSON
      Language.PureScript.Environment.TypeKind
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Environment.TypeKind
                  Language.PureScript.Environment.$fToJSONTypeKind_$ctoJSON
                  Language.PureScript.Environment.$fToJSONTypeKind_$ctoEncoding
                  Language.PureScript.Environment.$fToJSONTypeKind_$ctoJSONList
                  Language.PureScript.Environment.$fToJSONTypeKind_$ctoEncodingList -}
d3870c0d00a1c8d7450ba46b256fa3ea
  $fToJSONTypeKind1 :: Data.Aeson.Types.Internal.Value
  {- Unfolding: (case Language.PureScript.Environment.$fToJSONTypeKind2 of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 Data.Aeson.Types.Internal.String dt }) -}
aac18cc84db727da9b6feec1cdcd78ae
  $fToJSONTypeKind10 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ctors"#) -}
9c524b57f55b19da4bbc445d7188bafd
  $fToJSONTypeKind11 ::
    (Language.PureScript.Names.ProperName
       'Language.PureScript.Names.ConstructorName,
     [Language.PureScript.Types.Type])
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1,
     Unfolding: (Data.Aeson.Types.ToJSON.$fToJSON(,)_$cliftToJSON2
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.ConstructorName)
                   @ [Language.PureScript.Types.Type]
                   Data.Aeson.Types.Internal.$WString
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.ConstructorName>_P)
                    ->_R <Data.Aeson.Types.Internal.Value>_R)
                   (Language.PureScript.Names.$fToJSONProperName_$ctoJSONList
                      @ 'Language.PureScript.Names.ConstructorName)
                   Language.PureScript.Types.$fToJSONType_$ctoJSONList
                   Language.PureScript.Environment.$fToJSONTypeKind12) -}
a1f056c8540039f711c437d8167ced4d
  $fToJSONTypeKind12 ::
    [[Language.PureScript.Types.Type]]
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: [[Language.PureScript.Types.Type]]) ->
                 case Language.PureScript.Environment.$wlvl1 w of ww { Unit# ww1 ->
                 Data.Aeson.Types.Internal.Array ww1 }) -}
47cc14a434294d0503449b3dc80e8ab0
  $fToJSONTypeKind13 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("args"#) -}
a47272fd0ece4ebbe1c2b206332697c3
  $fToJSONTypeKind14 ::
    (Data.Text.Internal.Text,
     GHC.Base.Maybe Language.PureScript.Kinds.Kind)
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1,
     Unfolding: (Data.Aeson.Types.ToJSON.$fToJSON(,)_$cliftToJSON2
                   @ Data.Text.Internal.Text
                   @ (GHC.Base.Maybe Language.PureScript.Kinds.Kind)
                   Data.Aeson.Types.Internal.$WString
                   Data.Aeson.Types.ToJSON.$fToJSONKeyText0_$ctoJSONList
                   Language.PureScript.Environment.$fToJSONTypeKind_f7
                   Language.PureScript.Environment.$fToJSONTypeKind15) -}
22f72c9d0fad27eafa485c29a7d2260f
  $fToJSONTypeKind15 ::
    [GHC.Base.Maybe Language.PureScript.Kinds.Kind]
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: [GHC.Base.Maybe Language.PureScript.Kinds.Kind]) ->
                 case Language.PureScript.Environment.$wlvl2 w of ww { Unit# ww1 ->
                 Data.Aeson.Types.Internal.Array ww1 }) -}
ffd16475d8ad423b794a0ba55d8edd7f
  $fToJSONTypeKind2 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Environment.$fShowTypeKind3) -}
063e0a8756f60295b9d43a75da53281c
  $fToJSONTypeKind3 :: Data.Aeson.Types.Internal.Value
  {- Unfolding: (case Language.PureScript.Environment.$fToJSONTypeKind4 of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 Data.Aeson.Types.Internal.String dt }) -}
529b3fea6124480e9b9b9a7b03107b7a
  $fToJSONTypeKind4 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Environment.$fShowTypeKind5) -}
a5764a8c93ba55565649eba7e5cae24a
  $fToJSONTypeKind5 :: Data.Aeson.Types.Internal.Value
  {- Unfolding: (case Language.PureScript.Environment.$fToJSONTypeKind6 of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 Data.Aeson.Types.Internal.String dt }) -}
fef9313d40f1886c5c5be83861b005dd
  $fToJSONTypeKind6 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Environment.$fShowTypeKind7) -}
c66fb5b537fbfaf15af4bfe84241b53e
  $fToJSONTypeKind7 :: Data.Aeson.Types.Internal.Value
  {- Unfolding: (case Language.PureScript.Environment.$fToJSONTypeKind8 of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 Data.Aeson.Types.Internal.String dt }) -}
a87d0f4e703edb2603194bf5dad994a6
  $fToJSONTypeKind8 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Environment.$fShowTypeKind9) -}
873f239ecd666626078dadd9ccb04149
  $fToJSONTypeKind9 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("DataType"#) -}
0a0df18a3a5bbdd9f1dda59baf0fb992
  $fToJSONTypeKind_$ctoEncoding ::
    Language.PureScript.Environment.TypeKind
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Strictness: <S,1*U>, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (x :: Language.PureScript.Environment.TypeKind) ->
                 Data.Aeson.Encoding.Builder.encodeToBuilder
                   (Language.PureScript.Environment.$fToJSONTypeKind_$ctoJSON x))
                  `cast`
                (<Language.PureScript.Environment.TypeKind>_R
                 ->_R Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                               <Data.Aeson.Types.Internal.Value>_P)) -}
0a0df18a3a5bbdd9f1dda59baf0fb992
  $fToJSONTypeKind_$ctoEncodingList ::
    [Language.PureScript.Environment.TypeKind]
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (Data.Aeson.Encoding.Internal.list
                   @ Language.PureScript.Environment.TypeKind
                   Language.PureScript.Environment.$fToJSONTypeKind_$ctoEncoding) -}
0a0df18a3a5bbdd9f1dda59baf0fb992
  $fToJSONTypeKind_$ctoJSON ::
    Language.PureScript.Environment.TypeKind
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Language.PureScript.Environment.TypeKind) ->
                 case ds of wild {
                   Language.PureScript.Environment.DataType args ctors
                   -> case GHC.Magic.runRW#
                             @ ('GHC.Types.TupleRep
                                  '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                             @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                  Data.Vector.Vector Data.Aeson.Types.Internal.Value #)
                             (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                              case GHC.Prim.newArray#
                                     @ Data.Aeson.Types.Internal.Value
                                     @ (Control.Monad.Primitive.PrimState
                                          (GHC.ST.ST GHC.Prim.RealWorld))
                                     0#
                                     (Data.Vector.Mutable.uninitialised
                                        @ Data.Aeson.Types.Internal.Value)
                                     s1
                                       `cast`
                                     (GHC.Prim.State#
                                        (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                  <GHC.Prim.RealWorld>_N)))_R of ds2 { (#,#) ipv ipv1 ->
                              Language.PureScript.Environment.$fToJSONFunctionalDependency_$s$wfoldlM_loop
                                ipv
                                  `cast`
                                (GHC.Prim.State#
                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                        <GHC.Prim.RealWorld>_N))_R
                                (GHC.Base.map
                                   @ (Data.Text.Internal.Text,
                                      GHC.Base.Maybe Language.PureScript.Kinds.Kind)
                                   @ Data.Aeson.Types.Internal.Value
                                   Language.PureScript.Environment.$fToJSONTypeKind14
                                   args)
                                0#
                                ipv1
                                  `cast`
                                (GHC.Prim.MutableArray#
                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                        <GHC.Prim.RealWorld>_N)
                                   <Data.Aeson.Types.Internal.Value>_R)_R
                                0#
                                0# }) of ds1 { (#,#) ipv1 ipv2 ->
                      case ipv2 of dt { Data.Vector.Vector ipv ipv4 ipv5 ->
                      case Language.PureScript.Environment.$fToJSONTypeKind_key3 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                      case Data.Aeson.Types.Internal.$w$sunsafeInsert
                             @ Data.Aeson.Types.Internal.Value
                             ww1
                             ww2
                             ww3
                             (Data.Aeson.Types.Internal.Array dt)
                             (Data.HashMap.Base.Empty
                                @ Data.Text.Internal.Text
                                @ Data.Aeson.Types.Internal.Value) of z23 { DEFAULT ->
                      case GHC.Magic.runRW#
                             @ ('GHC.Types.TupleRep
                                  '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                             @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                  Data.Vector.Vector Data.Aeson.Types.Internal.Value #)
                             (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                              case GHC.Prim.newArray#
                                     @ Data.Aeson.Types.Internal.Value
                                     @ (Control.Monad.Primitive.PrimState
                                          (GHC.ST.ST GHC.Prim.RealWorld))
                                     0#
                                     (Data.Vector.Mutable.uninitialised
                                        @ Data.Aeson.Types.Internal.Value)
                                     s1
                                       `cast`
                                     (GHC.Prim.State#
                                        (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                  <GHC.Prim.RealWorld>_N)))_R of ds2 { (#,#) ipv6 ipv7 ->
                              Language.PureScript.Environment.$fToJSONFunctionalDependency_$s$wfoldlM_loop
                                ipv6
                                  `cast`
                                (GHC.Prim.State#
                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                        <GHC.Prim.RealWorld>_N))_R
                                (GHC.Base.map
                                   @ (Language.PureScript.Names.ProperName
                                        'Language.PureScript.Names.ConstructorName,
                                      [Language.PureScript.Types.Type])
                                   @ Data.Aeson.Types.Internal.Value
                                   Language.PureScript.Environment.$fToJSONTypeKind11
                                   ctors)
                                0#
                                ipv7
                                  `cast`
                                (GHC.Prim.MutableArray#
                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                        <GHC.Prim.RealWorld>_N)
                                   <Data.Aeson.Types.Internal.Value>_R)_R
                                0#
                                0# }) of ds2 { (#,#) ipv6 ipv7 ->
                      case ipv7 of dt1 { Data.Vector.Vector ipv8 ipv9 ipv10 ->
                      case Language.PureScript.Environment.$fToJSONTypeKind_key1 of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                      case Data.Aeson.Types.Internal.$w$sunsafeInsert
                             @ Data.Aeson.Types.Internal.Value
                             ww5
                             ww6
                             ww7
                             (Data.Aeson.Types.Internal.Array dt1)
                             z23 of dt2 { DEFAULT ->
                      case Language.PureScript.Environment.$fToJSONTypeKind_key2 of ww8 { Data.Text.Internal.Text ww9 ww10 ww11 ->
                      case Data.Aeson.Types.Internal.$w$sunsafeInsert
                             @ Data.Aeson.Types.Internal.Value
                             ww9
                             ww10
                             ww11
                             (Data.Aeson.Types.Internal.Object dt2)
                             (Data.HashMap.Base.Empty
                                @ Data.Text.Internal.Text
                                @ Data.Aeson.Types.Internal.Value) of dt3 { DEFAULT ->
                      Data.Aeson.Types.Internal.Object dt3 } } } } } } } } } }
                   Language.PureScript.Environment.TypeSynonym
                   -> Language.PureScript.Environment.$fToJSONTypeKind7
                   Language.PureScript.Environment.ExternData
                   -> Language.PureScript.Environment.$fToJSONTypeKind5
                   Language.PureScript.Environment.LocalTypeVariable
                   -> Language.PureScript.Environment.$fToJSONTypeKind3
                   Language.PureScript.Environment.ScopedTypeVar
                   -> Language.PureScript.Environment.$fToJSONTypeKind1 }) -}
0a0df18a3a5bbdd9f1dda59baf0fb992
  $fToJSONTypeKind_$ctoJSONList ::
    [Language.PureScript.Environment.TypeKind]
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (x :: [Language.PureScript.Environment.TypeKind]) ->
                 Data.Aeson.Types.Internal.$WArray
                   (Data.Vector.Generic.new
                      @ Data.Vector.Vector
                      @ Data.Aeson.Types.Internal.Value
                      (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                      (Data.Vector.Generic.New.unstream
                         @ Data.Vector.Vector
                         @ Data.Aeson.Types.Internal.Value
                         (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                         (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                            @ Data.Vector.Fusion.Util.Id
                            @ Data.Aeson.Types.Internal.Value
                            @ Data.Vector.Vector
                            Data.Vector.Fusion.Util.$fMonadId
                            Data.Vector.Fusion.Bundle.Size.Unknown
                            (GHC.Base.build
                               @ Data.Aeson.Types.Internal.Value
                               (\ @ b1
                                  (c :: Data.Aeson.Types.Internal.Value -> b1 -> b1)[OneShot]
                                  (n1 :: b1)[OneShot] ->
                                GHC.Base.foldr
                                  @ Language.PureScript.Environment.TypeKind
                                  @ b1
                                  (GHC.Base.mapFB
                                     @ Data.Aeson.Types.Internal.Value
                                     @ b1
                                     @ Language.PureScript.Environment.TypeKind
                                     c
                                     Language.PureScript.Environment.$fToJSONTypeKind_$ctoJSON)
                                  n1
                                  x)))))) -}
86e57e4d0f4d62854ca58667fb27dc25
  $fToJSONTypeKind_f7 ::
    GHC.Base.Maybe Language.PureScript.Kinds.Kind
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1,
     Unfolding: (Data.Aeson.Types.ToJSON.$fToJSON1Maybe_$cliftToJSON
                   @ Language.PureScript.Kinds.Kind
                   Language.PureScript.Kinds.$fToJSONKind_$ctoJSON
                   Language.PureScript.Kinds.$fToJSONKind_$ctoJSONList) -}
e18994085b381c7f15f4f6eab33c2d83
  $fToJSONTypeKind_key1 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Environment.$fToJSONTypeKind10) -}
4b9e3ae78cb5ef1e435ea23f24a12d4a
  $fToJSONTypeKind_key2 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Environment.$fToJSONTypeKind9) -}
d00eeac0fb42e6506cc5e418ac3eaecc
  $fToJSONTypeKind_key3 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Environment.$fToJSONTypeKind13) -}
09ce67a2a2a4481ae5ad428177b84002
  $s$fFromJSONMaybe ::
    Data.Aeson.Types.FromJSON.FromJSON
      (GHC.Base.Maybe Language.PureScript.Kinds.Kind)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Base.Maybe Language.PureScript.Kinds.Kind)
                  (Data.Aeson.Types.FromJSON.$fFromJSON1Maybe_$cliftParseJSON
                     @ Language.PureScript.Kinds.Kind
                     Language.PureScript.Kinds.$fFromJSONKind_$cparseJSON
                     Language.PureScript.Kinds.$fFromJSONKind_$cparseJSONList)
                  (Data.Aeson.Types.FromJSON.$fFromJSONMaybe_$cparseJSONList
                     @ Language.PureScript.Kinds.Kind
                     Language.PureScript.Kinds.$fFromJSONKind) -}
4d2d24be0849a49ae0e1659107f7bfc6
  $s$fFromJSON[] ::
    Data.Aeson.Types.FromJSON.FromJSON [Language.PureScript.Types.Type]
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ [Language.PureScript.Types.Type]
                  Language.PureScript.Types.$fFromJSONType_$cparseJSONList
                  (Data.Aeson.Types.FromJSON.$fFromJSONKey[]_$cparseJSONList
                     @ Language.PureScript.Types.Type
                     Language.PureScript.Types.$fFromJSONType) -}
ddf4bdfee44fb43f2d99b43be51eab7f
  $s$fShow(,)1 ::
    GHC.Show.Show
      (Language.PureScript.Kinds.Kind,
       Language.PureScript.Environment.TypeKind)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Kinds.Kind,
                     Language.PureScript.Environment.TypeKind)
                  (GHC.Show.$fShow(,)_$cshowsPrec
                     @ Language.PureScript.Kinds.Kind
                     @ Language.PureScript.Environment.TypeKind
                     Language.PureScript.Kinds.$fShowKind
                     Language.PureScript.Environment.$fShowTypeKind)
                  (\ (x :: (Language.PureScript.Kinds.Kind,
                            Language.PureScript.Environment.TypeKind)) ->
                   GHC.Show.$fShow(,)_$cshowsPrec
                     @ Language.PureScript.Kinds.Kind
                     @ Language.PureScript.Environment.TypeKind
                     Language.PureScript.Kinds.$fShowKind
                     Language.PureScript.Environment.$fShowTypeKind
                     GHC.Show.$fShow(,)1
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [(Language.PureScript.Kinds.Kind,
                              Language.PureScript.Environment.TypeKind)])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Language.PureScript.Kinds.Kind,
                        Language.PureScript.Environment.TypeKind)
                     (GHC.Show.$fShow(,)_$cshowsPrec
                        @ Language.PureScript.Kinds.Kind
                        @ Language.PureScript.Environment.TypeKind
                        Language.PureScript.Kinds.$fShowKind
                        Language.PureScript.Environment.$fShowTypeKind
                        GHC.Show.$fShow(,)1)
                     ls
                     s) -}
47ea941176d0e06677d51aae9496dc7d
  $s$fShow(,)_$cshowsPrec2 ::
    GHC.Types.Int
    -> (Language.PureScript.Kinds.Kind,
        Language.PureScript.Environment.TypeKind)
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U(1*U,1*U)><L,U>m2, Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w2 :: GHC.Types.Int)
                   (w3 :: (Language.PureScript.Kinds.Kind,
                           Language.PureScript.Environment.TypeKind))
                   (w4 :: GHC.Base.String) ->
                 case w3 of ww { (,) ww1 ww2 ->
                 GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.$fShow(,)4
                   (Language.PureScript.Kinds.$w$cshowsPrec
                      0#
                      ww1
                      (GHC.Types.:
                         @ GHC.Types.Char
                         GHC.Show.showList__1
                         (GHC.Show.$fShow(,)_$sgo1
                            (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 w4)
                            (Language.PureScript.Environment.$fShowTypeKind_$cshowsPrec
                               GHC.Show.$fShow(,)1
                               ww2)
                            (GHC.Types.[] @ GHC.Show.ShowS)))) }) -}
091ad97fb47c7b03fc36b16a083915b8
  $s$fShow(,)_$s$fShowMaybe ::
    GHC.Show.Show (GHC.Base.Maybe Language.PureScript.Kinds.Kind)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Base.Maybe Language.PureScript.Kinds.Kind)
                  (GHC.Show.$fShowMaybe_$cshowsPrec
                     @ Language.PureScript.Kinds.Kind
                     Language.PureScript.Kinds.$fShowKind)
                  (\ (x :: GHC.Base.Maybe Language.PureScript.Kinds.Kind) ->
                   case x of wild {
                     GHC.Base.Nothing -> GHC.Show.$fShowMaybe4
                     GHC.Base.Just b1
                     -> GHC.Base.augment
                          @ GHC.Types.Char
                          (\ @ b
                             (c :: GHC.Types.Char -> b -> b)[OneShot]
                             (n :: b)[OneShot] ->
                           GHC.Base.foldr @ GHC.Types.Char @ b c n GHC.Show.$fShowMaybe1)
                          (Language.PureScript.Kinds.$fShowKind_$cshowsPrec
                             GHC.Show.appPrec1
                             b1
                             (GHC.Types.[] @ GHC.Types.Char)) })
                  (\ (ls :: [GHC.Base.Maybe Language.PureScript.Kinds.Kind])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (GHC.Base.Maybe Language.PureScript.Kinds.Kind)
                     (GHC.Show.$fShowMaybe_$cshowsPrec
                        @ Language.PureScript.Kinds.Kind
                        Language.PureScript.Kinds.$fShowKind
                        GHC.Show.$fShow(,)1)
                     ls
                     s) -}
63d0a0beb9c496f3b2d8be619004014d
  $s$fShow(,,) ::
    GHC.Show.Show
      (Language.PureScript.Types.Type,
       Language.PureScript.Environment.NameKind,
       Language.PureScript.Environment.NameVisibility)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Types.Type,
                     Language.PureScript.Environment.NameKind,
                     Language.PureScript.Environment.NameVisibility)
                  (GHC.Show.$fShow(,,)_$cshowsPrec
                     @ Language.PureScript.Types.Type
                     @ Language.PureScript.Environment.NameKind
                     @ Language.PureScript.Environment.NameVisibility
                     Language.PureScript.Types.$fShowType
                     Language.PureScript.Environment.$fShowNameKind
                     Language.PureScript.Environment.$fShowNameVisibility)
                  (\ (x :: (Language.PureScript.Types.Type,
                            Language.PureScript.Environment.NameKind,
                            Language.PureScript.Environment.NameVisibility)) ->
                   GHC.Show.$fShow(,,)_$cshowsPrec
                     @ Language.PureScript.Types.Type
                     @ Language.PureScript.Environment.NameKind
                     @ Language.PureScript.Environment.NameVisibility
                     Language.PureScript.Types.$fShowType
                     Language.PureScript.Environment.$fShowNameKind
                     Language.PureScript.Environment.$fShowNameVisibility
                     GHC.Show.$fShow(,)1
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [(Language.PureScript.Types.Type,
                              Language.PureScript.Environment.NameKind,
                              Language.PureScript.Environment.NameVisibility)])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Language.PureScript.Types.Type,
                        Language.PureScript.Environment.NameKind,
                        Language.PureScript.Environment.NameVisibility)
                     (GHC.Show.$fShow(,,)_$cshowsPrec
                        @ Language.PureScript.Types.Type
                        @ Language.PureScript.Environment.NameKind
                        @ Language.PureScript.Environment.NameVisibility
                        Language.PureScript.Types.$fShowType
                        Language.PureScript.Environment.$fShowNameKind
                        Language.PureScript.Environment.$fShowNameVisibility
                        GHC.Show.$fShow(,)1)
                     ls
                     s) -}
e8abf08ee1ccffa4ec1d90caaf763ff9
  $s$fShow(,,,) ::
    GHC.Show.Show
      (Language.PureScript.Environment.DataDeclType,
       Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName,
       Language.PureScript.Types.Type, [Language.PureScript.Names.Ident])
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Environment.DataDeclType,
                     Language.PureScript.Names.ProperName
                       'Language.PureScript.Names.TypeName,
                     Language.PureScript.Types.Type, [Language.PureScript.Names.Ident])
                  (GHC.Show.$fShow(,,,)_$cshowsPrec
                     @ Language.PureScript.Environment.DataDeclType
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.TypeName)
                     @ Language.PureScript.Types.Type
                     @ [Language.PureScript.Names.Ident]
                     Language.PureScript.Environment.$fShowDataDeclType
                     (Language.PureScript.Names.$fShowProperName
                        @ 'Language.PureScript.Names.TypeName)
                     Language.PureScript.Types.$fShowType
                     Language.PureScript.Environment.$s$fShow(,,,)_$s$fShow[])
                  (\ (x :: (Language.PureScript.Environment.DataDeclType,
                            Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.TypeName,
                            Language.PureScript.Types.Type,
                            [Language.PureScript.Names.Ident])) ->
                   GHC.Show.$fShow(,,,)_$cshowsPrec
                     @ Language.PureScript.Environment.DataDeclType
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.TypeName)
                     @ Language.PureScript.Types.Type
                     @ [Language.PureScript.Names.Ident]
                     Language.PureScript.Environment.$fShowDataDeclType
                     (Language.PureScript.Names.$fShowProperName
                        @ 'Language.PureScript.Names.TypeName)
                     Language.PureScript.Types.$fShowType
                     Language.PureScript.Environment.$s$fShow(,,,)_$s$fShow[]
                     GHC.Show.$fShow(,)1
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [(Language.PureScript.Environment.DataDeclType,
                              Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.TypeName,
                              Language.PureScript.Types.Type,
                              [Language.PureScript.Names.Ident])])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Language.PureScript.Environment.DataDeclType,
                        Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.TypeName,
                        Language.PureScript.Types.Type, [Language.PureScript.Names.Ident])
                     (GHC.Show.$fShow(,,,)_$cshowsPrec
                        @ Language.PureScript.Environment.DataDeclType
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.TypeName)
                        @ Language.PureScript.Types.Type
                        @ [Language.PureScript.Names.Ident]
                        Language.PureScript.Environment.$fShowDataDeclType
                        (Language.PureScript.Names.$fShowProperName
                           @ 'Language.PureScript.Names.TypeName)
                        Language.PureScript.Types.$fShowType
                        Language.PureScript.Environment.$s$fShow(,,,)_$s$fShow[]
                        GHC.Show.$fShow(,)1)
                     ls
                     s) -}
8f3ff6dd27844b6eaf9eb250edc7adbb
  $s$fShow(,,,)_$s$fShow[] ::
    GHC.Show.Show [Language.PureScript.Names.Ident]
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ [Language.PureScript.Names.Ident]
                  (\ (ds :: GHC.Types.Int) ->
                   Language.PureScript.Names.$fShowIdent_$cshowList)
                  (\ (x :: [Language.PureScript.Names.Ident]) ->
                   GHC.Show.showList__
                     @ Language.PureScript.Names.Ident
                     Language.PureScript.Names.$fShowIdent1
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [[Language.PureScript.Names.Ident]])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ [Language.PureScript.Names.Ident]
                     Language.PureScript.Names.$fShowIdent_$cshowList
                     ls
                     s) -}
5bbe2ec1858a1a2cfac4c3c4cbf70a06
  $s$fShowMap ::
    GHC.Show.Show
      (Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            Language.PureScript.Names.Ident)
         (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
            (Language.PureScript.Names.Qualified
               Language.PureScript.Names.Ident)))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Map.Internal.Map
                       (Language.PureScript.Names.Qualified
                          Language.PureScript.Names.Ident)
                       (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
                          (Language.PureScript.Names.Qualified
                             Language.PureScript.Names.Ident)))
                  (Data.Map.Internal.$fShowMap_$cshowsPrec
                     @ (Language.PureScript.Names.Qualified
                          Language.PureScript.Names.Ident)
                     @ (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
                          (Language.PureScript.Names.Qualified
                             Language.PureScript.Names.Ident))
                     Language.PureScript.Environment.$s$fShowMap_$s$fShowQualified
                     Language.PureScript.Environment.$s$fShowMap_$s$fShowTypeClassDictionaryInScope)
                  (\ (x :: Data.Map.Internal.Map
                             (Language.PureScript.Names.Qualified
                                Language.PureScript.Names.Ident)
                             (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
                                (Language.PureScript.Names.Qualified
                                   Language.PureScript.Names.Ident))) ->
                   Data.Map.Internal.$fShowMap_$cshowsPrec
                     @ (Language.PureScript.Names.Qualified
                          Language.PureScript.Names.Ident)
                     @ (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
                          (Language.PureScript.Names.Qualified
                             Language.PureScript.Names.Ident))
                     Language.PureScript.Environment.$s$fShowMap_$s$fShowQualified
                     Language.PureScript.Environment.$s$fShowMap_$s$fShowTypeClassDictionaryInScope
                     Data.Map.Internal.$fDataMap3
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [Data.Map.Internal.Map
                               (Language.PureScript.Names.Qualified
                                  Language.PureScript.Names.Ident)
                               (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
                                  (Language.PureScript.Names.Qualified
                                     Language.PureScript.Names.Ident))])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Data.Map.Internal.Map
                          (Language.PureScript.Names.Qualified
                             Language.PureScript.Names.Ident)
                          (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
                             (Language.PureScript.Names.Qualified
                                Language.PureScript.Names.Ident)))
                     (Data.Map.Internal.$fShowMap_$cshowsPrec
                        @ (Language.PureScript.Names.Qualified
                             Language.PureScript.Names.Ident)
                        @ (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
                             (Language.PureScript.Names.Qualified
                                Language.PureScript.Names.Ident))
                        Language.PureScript.Environment.$s$fShowMap_$s$fShowQualified
                        Language.PureScript.Environment.$s$fShowMap_$s$fShowTypeClassDictionaryInScope
                        Data.Map.Internal.$fDataMap3)
                     ls
                     s) -}
1fd3ccd3c2120650823b2e2ca591c240
  $s$fShowMap_$cshow ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         Language.PureScript.Names.Ident)
      (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
         (Language.PureScript.Names.Qualified
            Language.PureScript.Names.Ident))
    -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Map.Internal.Map
                           (Language.PureScript.Names.Qualified
                              Language.PureScript.Names.Ident)
                           (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
                              (Language.PureScript.Names.Qualified
                                 Language.PureScript.Names.Ident))) ->
                 Data.Map.Internal.$fShowMap_$cshowsPrec
                   @ (Language.PureScript.Names.Qualified
                        Language.PureScript.Names.Ident)
                   @ (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
                        (Language.PureScript.Names.Qualified
                           Language.PureScript.Names.Ident))
                   Language.PureScript.Environment.$s$fShowMap_$s$fShowQualified
                   Language.PureScript.Environment.$s$fShowMap_$s$fShowTypeClassDictionaryInScope
                   Data.Map.Internal.$fDataMap3
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
debfe0626903a388f0a6e682e26ae55e
  $s$fShowMap_$cshowList ::
    [Data.Map.Internal.Map
       (Language.PureScript.Names.Qualified
          Language.PureScript.Names.Ident)
       (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
          (Language.PureScript.Names.Qualified
             Language.PureScript.Names.Ident))]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Data.Map.Internal.Map
                             (Language.PureScript.Names.Qualified
                                Language.PureScript.Names.Ident)
                             (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
                                (Language.PureScript.Names.Qualified
                                   Language.PureScript.Names.Ident))])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Data.Map.Internal.Map
                        (Language.PureScript.Names.Qualified
                           Language.PureScript.Names.Ident)
                        (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
                           (Language.PureScript.Names.Qualified
                              Language.PureScript.Names.Ident)))
                   (Data.Map.Internal.$fShowMap_$cshowsPrec
                      @ (Language.PureScript.Names.Qualified
                           Language.PureScript.Names.Ident)
                      @ (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
                           (Language.PureScript.Names.Qualified
                              Language.PureScript.Names.Ident))
                      Language.PureScript.Environment.$s$fShowMap_$s$fShowQualified
                      Language.PureScript.Environment.$s$fShowMap_$s$fShowTypeClassDictionaryInScope
                      Data.Map.Internal.$fDataMap3)
                   ls
                   s) -}
e4d009eb1387f8ac3b8031e37edba404
  $s$fShowMap_$cshowsPrec ::
    GHC.Types.Int
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            Language.PureScript.Names.Ident)
         (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
            (Language.PureScript.Names.Qualified
               Language.PureScript.Names.Ident))
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,1*U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w2 :: GHC.Types.Int)
                   (w3 :: Data.Map.Internal.Map
                            (Language.PureScript.Names.Qualified
                               Language.PureScript.Names.Ident)
                            (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
                               (Language.PureScript.Names.Qualified
                                  Language.PureScript.Names.Ident))) ->
                 case w2 of ww { GHC.Types.I# ww1 ->
                 Data.Map.Internal.$w$cshowsPrec
                   @ (Language.PureScript.Names.Qualified
                        Language.PureScript.Names.Ident)
                   @ (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
                        (Language.PureScript.Names.Qualified
                           Language.PureScript.Names.Ident))
                   Language.PureScript.Environment.$s$fShowMap_$s$fShowQualified
                   Language.PureScript.Environment.$s$fShowMap_$s$fShowTypeClassDictionaryInScope
                   ww1
                   w3 }) -}
9da2511a66e0d6403a8315805c6b9fa3
  $s$fShowMap_$cshowsPrec2 ::
    GHC.Show.Show
      (Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName))
         (Data.Map.Internal.Map
            (Language.PureScript.Names.Qualified
               Language.PureScript.Names.Ident)
            Language.PureScript.TypeClassDictionaries.NamedDict))
  {- Unfolding: (Data.Map.Internal.$fShowMap
                   @ (Language.PureScript.Names.Qualified
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.ClassName))
                   @ (Data.Map.Internal.Map
                        (Language.PureScript.Names.Qualified
                           Language.PureScript.Names.Ident)
                        Language.PureScript.TypeClassDictionaries.NamedDict)
                   Language.PureScript.Environment.$s$fShowMap_$cshowsPrec_$s$fShowQualified
                   Language.PureScript.Environment.$s$fShowMap) -}
9ee221526c072359ca763461018de1e3
  $s$fShowMap_$cshowsPrec6 ::
    GHC.Show.Show
      ([(Data.Text.Internal.Text,
         GHC.Base.Maybe Language.PureScript.Kinds.Kind)],
       Language.PureScript.Types.Type)
  {- Unfolding: (GHC.Show.$fShow(,)
                   @ [(Data.Text.Internal.Text,
                       GHC.Base.Maybe Language.PureScript.Kinds.Kind)]
                   @ Language.PureScript.Types.Type
                   Language.PureScript.Environment.$s$fShowMap_$cshowsPrec_$s$fShow[]
                   Language.PureScript.Types.$fShowType) -}
165fa58467867dc79738cf070965bbad
  $s$fShowMap_$cshowsPrec_$s$fShowMaybe ::
    GHC.Show.Show (GHC.Base.Maybe Language.PureScript.Names.ModuleName)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                  (GHC.Show.$fShowMaybe_$cshowsPrec
                     @ Language.PureScript.Names.ModuleName
                     Language.PureScript.Names.$fShowModuleName)
                  (\ (x :: GHC.Base.Maybe Language.PureScript.Names.ModuleName) ->
                   case x of wild {
                     GHC.Base.Nothing -> GHC.Show.$fShowMaybe4
                     GHC.Base.Just b1
                     -> GHC.Base.augment
                          @ GHC.Types.Char
                          (\ @ b
                             (c :: GHC.Types.Char -> b -> b)[OneShot]
                             (n :: b)[OneShot] ->
                           GHC.Base.foldr @ GHC.Types.Char @ b c n GHC.Show.$fShowMaybe1)
                          (Language.PureScript.Names.$fShowModuleName_$cshowsPrec
                             GHC.Show.appPrec1
                             b1
                             (GHC.Types.[] @ GHC.Types.Char)) })
                  (\ (ls :: [GHC.Base.Maybe Language.PureScript.Names.ModuleName])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                     (GHC.Show.$fShowMaybe_$cshowsPrec
                        @ Language.PureScript.Names.ModuleName
                        Language.PureScript.Names.$fShowModuleName
                        GHC.Show.$fShow(,)1)
                     ls
                     s) -}
6666393a56167b263db850fbcc3d9c0b
  $s$fShowMap_$cshowsPrec_$s$fShowQualified ::
    GHC.Show.Show
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.Qualified
                       (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ClassName))
                  (Language.PureScript.Names.$fShowQualified_$cshowsPrec
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ClassName)
                     (Language.PureScript.Names.$fShowProperName
                        @ 'Language.PureScript.Names.ClassName))
                  (\ (x :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ClassName)) ->
                   Language.PureScript.Names.$fShowQualified_$cshowsPrec
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ClassName)
                     (Language.PureScript.Names.$fShowProperName
                        @ 'Language.PureScript.Names.ClassName)
                     Language.PureScript.Names.$fShowIdent2
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [Language.PureScript.Names.Qualified
                               (Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.ClassName)])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Language.PureScript.Names.Qualified
                          (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ClassName))
                     (Language.PureScript.Names.$fShowQualified_$cshowsPrec
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ClassName)
                        (Language.PureScript.Names.$fShowProperName
                           @ 'Language.PureScript.Names.ClassName)
                        Language.PureScript.Names.$fShowIdent2)
                     ls
                     s) -}
5ab0e97f2c8e6160a893ba144ab948bd
  $s$fShowMap_$cshowsPrec_$s$fShowQualified1 ::
    GHC.Show.Show
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ConstructorName))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.Qualified
                       (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ConstructorName))
                  (Language.PureScript.Names.$fShowQualified_$cshowsPrec
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ConstructorName)
                     (Language.PureScript.Names.$fShowProperName
                        @ 'Language.PureScript.Names.ConstructorName))
                  (\ (x :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ConstructorName)) ->
                   Language.PureScript.Names.$fShowQualified_$cshowsPrec
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ConstructorName)
                     (Language.PureScript.Names.$fShowProperName
                        @ 'Language.PureScript.Names.ConstructorName)
                     Language.PureScript.Names.$fShowIdent2
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [Language.PureScript.Names.Qualified
                               (Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.ConstructorName)])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Language.PureScript.Names.Qualified
                          (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ConstructorName))
                     (Language.PureScript.Names.$fShowQualified_$cshowsPrec
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ConstructorName)
                        (Language.PureScript.Names.$fShowProperName
                           @ 'Language.PureScript.Names.ConstructorName)
                        Language.PureScript.Names.$fShowIdent2)
                     ls
                     s) -}
2745bc7b2e75a269e311c1106ece9003
  $s$fShowMap_$cshowsPrec_$s$fShowQualified2 ::
    GHC.Show.Show
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.Qualified
                       (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.TypeName))
                  (Language.PureScript.Names.$fShowQualified_$cshowsPrec
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.TypeName)
                     (Language.PureScript.Names.$fShowProperName
                        @ 'Language.PureScript.Names.TypeName))
                  (\ (x :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.TypeName)) ->
                   Language.PureScript.Names.$fShowQualified_$cshowsPrec
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.TypeName)
                     (Language.PureScript.Names.$fShowProperName
                        @ 'Language.PureScript.Names.TypeName)
                     Language.PureScript.Names.$fShowIdent2
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [Language.PureScript.Names.Qualified
                               (Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.TypeName)])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Language.PureScript.Names.Qualified
                          (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.TypeName))
                     (Language.PureScript.Names.$fShowQualified_$cshowsPrec
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.TypeName)
                        (Language.PureScript.Names.$fShowProperName
                           @ 'Language.PureScript.Names.TypeName)
                        Language.PureScript.Names.$fShowIdent2)
                     ls
                     s) -}
a280470b86006f8c535b6f6906af1376
  $s$fShowMap_$cshowsPrec_$s$fShow[] ::
    GHC.Show.Show
      [(Data.Text.Internal.Text,
        GHC.Base.Maybe Language.PureScript.Kinds.Kind)]
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ [(Data.Text.Internal.Text,
                      GHC.Base.Maybe Language.PureScript.Kinds.Kind)]
                  (\ (ds :: GHC.Types.Int)
                     (ls :: [(Data.Text.Internal.Text,
                              GHC.Base.Maybe Language.PureScript.Kinds.Kind)])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Data.Text.Internal.Text,
                        GHC.Base.Maybe Language.PureScript.Kinds.Kind)
                     (GHC.Show.$fShow(,)_$cshowsPrec
                        @ Data.Text.Internal.Text
                        @ (GHC.Base.Maybe Language.PureScript.Kinds.Kind)
                        Data.Text.Show.$fShowText
                        Language.PureScript.Environment.$s$fShow(,)_$s$fShowMaybe
                        GHC.Show.$fShow(,)1)
                     ls
                     s)
                  (\ (x :: [(Data.Text.Internal.Text,
                             GHC.Base.Maybe Language.PureScript.Kinds.Kind)]) ->
                   GHC.Show.showList__
                     @ (Data.Text.Internal.Text,
                        GHC.Base.Maybe Language.PureScript.Kinds.Kind)
                     (GHC.Show.$fShow(,)_$cshowsPrec
                        @ Data.Text.Internal.Text
                        @ (GHC.Base.Maybe Language.PureScript.Kinds.Kind)
                        Data.Text.Show.$fShowText
                        Language.PureScript.Environment.$s$fShow(,)_$s$fShowMaybe
                        GHC.Show.$fShow(,)1)
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [[(Data.Text.Internal.Text,
                               GHC.Base.Maybe Language.PureScript.Kinds.Kind)]])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ [(Data.Text.Internal.Text,
                         GHC.Base.Maybe Language.PureScript.Kinds.Kind)]
                     (\ (ls1 :: [(Data.Text.Internal.Text,
                                  GHC.Base.Maybe Language.PureScript.Kinds.Kind)])
                        (s1 :: GHC.Base.String)[OneShot] ->
                      GHC.Show.showList__
                        @ (Data.Text.Internal.Text,
                           GHC.Base.Maybe Language.PureScript.Kinds.Kind)
                        (GHC.Show.$fShow(,)_$cshowsPrec
                           @ Data.Text.Internal.Text
                           @ (GHC.Base.Maybe Language.PureScript.Kinds.Kind)
                           Data.Text.Show.$fShowText
                           Language.PureScript.Environment.$s$fShow(,)_$s$fShowMaybe
                           GHC.Show.$fShow(,)1)
                        ls1
                        s1)
                     ls
                     s) -}
073387b5f5fa102437988f9661b7244d
  $s$fShowMap_$s$fShowQualified ::
    GHC.Show.Show
      (Language.PureScript.Names.Qualified
         Language.PureScript.Names.Ident)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.Qualified
                       Language.PureScript.Names.Ident)
                  (Language.PureScript.Names.$fShowQualified_$cshowsPrec
                     @ Language.PureScript.Names.Ident
                     Language.PureScript.Names.$fShowIdent)
                  (\ (x :: Language.PureScript.Names.Qualified
                             Language.PureScript.Names.Ident) ->
                   Language.PureScript.Names.$fShowQualified_$cshowsPrec
                     @ Language.PureScript.Names.Ident
                     Language.PureScript.Names.$fShowIdent
                     Language.PureScript.Names.$fShowIdent2
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [Language.PureScript.Names.Qualified
                               Language.PureScript.Names.Ident])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Language.PureScript.Names.Qualified
                          Language.PureScript.Names.Ident)
                     (Language.PureScript.Names.$fShowQualified_$cshowsPrec
                        @ Language.PureScript.Names.Ident
                        Language.PureScript.Names.$fShowIdent
                        Language.PureScript.Names.$fShowIdent2)
                     ls
                     s) -}
e8ece9d65cd8a14d187e91400a75b633
  $s$fShowMap_$s$fShowTypeClassDictionaryInScope ::
    GHC.Show.Show
      (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
         (Language.PureScript.Names.Qualified
            Language.PureScript.Names.Ident))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
                       (Language.PureScript.Names.Qualified
                          Language.PureScript.Names.Ident))
                  (Language.PureScript.TypeClassDictionaries.$fShowTypeClassDictionaryInScope_$cshowsPrec
                     @ (Language.PureScript.Names.Qualified
                          Language.PureScript.Names.Ident)
                     Language.PureScript.Environment.$s$fShowMap_$s$fShowQualified)
                  (\ (x :: Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
                             (Language.PureScript.Names.Qualified
                                Language.PureScript.Names.Ident)) ->
                   Language.PureScript.TypeClassDictionaries.$fShowTypeClassDictionaryInScope_$cshowsPrec
                     @ (Language.PureScript.Names.Qualified
                          Language.PureScript.Names.Ident)
                     Language.PureScript.Environment.$s$fShowMap_$s$fShowQualified
                     Language.PureScript.TypeClassDictionaries.$fShowTypeClassDictionaryInScope1
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
                               (Language.PureScript.Names.Qualified
                                  Language.PureScript.Names.Ident)])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
                          (Language.PureScript.Names.Qualified
                             Language.PureScript.Names.Ident))
                     (Language.PureScript.TypeClassDictionaries.$fShowTypeClassDictionaryInScope_$cshowsPrec
                        @ (Language.PureScript.Names.Qualified
                             Language.PureScript.Names.Ident)
                        Language.PureScript.Environment.$s$fShowMap_$s$fShowQualified
                        Language.PureScript.TypeClassDictionaries.$fShowTypeClassDictionaryInScope1)
                     ls
                     s) -}
3708203c754d06fdf6153e75eb57574c
  $s$fShowQualified ::
    GHC.Show.Show
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.KindName))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.Qualified
                       (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.KindName))
                  (Language.PureScript.Names.$fShowQualified_$cshowsPrec
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.KindName)
                     (Language.PureScript.Names.$fShowProperName
                        @ 'Language.PureScript.Names.KindName))
                  (\ (x :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.KindName)) ->
                   Language.PureScript.Names.$fShowQualified_$cshowsPrec
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.KindName)
                     (Language.PureScript.Names.$fShowProperName
                        @ 'Language.PureScript.Names.KindName)
                     Language.PureScript.Names.$fShowIdent2
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [Language.PureScript.Names.Qualified
                               (Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.KindName)])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Language.PureScript.Names.Qualified
                          (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.KindName))
                     (Language.PureScript.Names.$fShowQualified_$cshowsPrec
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.KindName)
                        (Language.PureScript.Names.$fShowProperName
                           @ 'Language.PureScript.Names.KindName)
                        Language.PureScript.Names.$fShowIdent2)
                     ls
                     s) -}
0bf1c580bc6bb4fd635aa78a5d089bfb
  $s$fShowSet :: GHC.Show.Show (Data.Set.Internal.Set GHC.Types.Int)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Set.Internal.Set GHC.Types.Int)
                  (Data.Set.Internal.$fShowSet_$cshowsPrec
                     @ GHC.Types.Int
                     GHC.Show.$fShowInt)
                  (\ (x :: Data.Set.Internal.Set GHC.Types.Int) ->
                   GHC.Base.augment
                     @ GHC.Types.Char
                     (\ @ b
                        (c :: GHC.Types.Char -> b -> b)[OneShot]
                        (n :: b)[OneShot] ->
                      GHC.Base.foldr
                        @ GHC.Types.Char
                        @ b
                        c
                        n
                        Data.Set.Internal.$fShowSet1)
                     (case Data.Set.Internal.$fDataSet_go
                             @ GHC.Types.Int
                             (GHC.Types.[] @ GHC.Types.Int)
                             x of wild {
                        []
                        -> GHC.CString.unpackAppendCString#
                             GHC.Show.showList__4
                             (GHC.Types.[] @ GHC.Types.Char)
                        : x1 xs
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.showList__3
                             (case x1 of ww { GHC.Types.I# ww1 ->
                              case GHC.Show.$wshowSignedInt
                                     0#
                                     ww1
                                     (let {
                                        lvl178 :: [GHC.Types.Char]
                                        = GHC.Types.:
                                            @ GHC.Types.Char
                                            GHC.Show.showList__2
                                            (GHC.Types.[] @ GHC.Types.Char)
                                      } in
                                      letrec {
                                        showl2 :: [GHC.Types.Int] -> GHC.Base.String
                                          {- Arity: 1, Strictness: <S,1*U> -}
                                        = \ (ds2 :: [GHC.Types.Int]) ->
                                          case ds2 of wild1 {
                                            [] -> lvl178
                                            : y ys
                                            -> GHC.Types.:
                                                 @ GHC.Types.Char
                                                 GHC.Show.showList__1
                                                 (case y of ww2 { GHC.Types.I# ww3 ->
                                                  case GHC.Show.$wshowSignedInt
                                                         0#
                                                         ww3
                                                         (showl2 ys) of ww4 { (#,#) ww5 ww6 ->
                                                  GHC.Types.: @ GHC.Types.Char ww5 ww6 } }) }
                                      } in
                                      showl2 xs) of ww2 { (#,#) ww3 ww4 ->
                              GHC.Types.: @ GHC.Types.Char ww3 ww4 } }) }))
                  (\ (ls :: [Data.Set.Internal.Set GHC.Types.Int])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Data.Set.Internal.Set GHC.Types.Int)
                     (Data.Set.Internal.$fShowSet_$cshowsPrec
                        @ GHC.Types.Int
                        GHC.Show.$fShowInt
                        Data.Set.Internal.$fReadSet3)
                     ls
                     s) -}
5dd55953eed7812763c51950aab8c91d
  $s$wsplitS ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.KindName)
    -> Data.Set.Internal.Set
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.KindName))
    -> (# Data.Set.Internal.Set
            (Language.PureScript.Names.Qualified
               (Language.PureScript.Names.ProperName
                  'Language.PureScript.Names.KindName)),
          Data.Set.Internal.Set
            (Language.PureScript.Names.Qualified
               (Language.PureScript.Names.ProperName
                  'Language.PureScript.Names.KindName)) #)
  {- Arity: 2, Strictness: <L,1*U(U,U(U,U,U))><S,1*U>, Inline: [~] -}
7ae85457f3c67629b6ff4bda753c4388
  $s$wsplit_$s$wpoly_go1 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName))
      a
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> (# Data.Map.Internal.Map
            (Language.PureScript.Names.Qualified
               (Language.PureScript.Names.ProperName
                  'Language.PureScript.Names.ClassName))
            a,
          Data.Map.Internal.Map
            (Language.PureScript.Names.Qualified
               (Language.PureScript.Names.ProperName
                  'Language.PureScript.Names.ClassName))
            a #)
  {- Arity: 3, Strictness: <S,1*U><L,U><L,U(U,U,U)> -}
bf21121375cad7852822839ee105e9f7
  $s$wsplit_$s$wpoly_go13 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName))
      a
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName
    -> (# Data.Map.Internal.Map
            (Language.PureScript.Names.Qualified
               (Language.PureScript.Names.ProperName
                  'Language.PureScript.Names.TypeName))
            a,
          Data.Map.Internal.Map
            (Language.PureScript.Names.Qualified
               (Language.PureScript.Names.ProperName
                  'Language.PureScript.Names.TypeName))
            a #)
  {- Arity: 3, Strictness: <S,1*U><L,U><L,U(U,U,U)> -}
5dbbe6262a9ca747ada3243902ff7a63
  $sfromList ::
    [(Language.PureScript.Names.Qualified
        (Language.PureScript.Names.ProperName
           'Language.PureScript.Names.TypeName),
      a)]
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.TypeName))
         a
  {- Arity: 1, Strictness: <S,1*U> -}
76d6255b737b5a3c6f8b94338d4f451d
  $sfromList1 ::
    [(Language.PureScript.Names.Qualified
        (Language.PureScript.Names.ProperName
           'Language.PureScript.Names.ClassName),
      a)]
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName))
         a
  {- Arity: 1, Strictness: <S,1*U> -}
627ccdbd3975e826f12b37e4107e4f48
  $sfromList2 ::
    [GHC.Types.Int] -> Data.Set.Internal.Set GHC.Types.Int
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [GHC.Types.Int]) ->
                 case ds of wild {
                   [] -> Data.Set.Internal.Tip @ GHC.Types.Int
                   : x ds1
                   -> case ds1 of wild1 {
                        []
                        -> case x of dt { GHC.Types.I# ipv ->
                           Data.Set.Internal.Bin
                             @ GHC.Types.Int
                             1#
                             dt
                             (Data.Set.Internal.Tip @ GHC.Types.Int)
                             (Data.Set.Internal.Tip @ GHC.Types.Int) }
                        : ipv ipv1
                        -> case x of wild2 { GHC.Types.I# x1 ->
                           case ipv of wild3 { GHC.Types.I# y ->
                           case GHC.Prim.>=# x1 y of lwild {
                             DEFAULT
                             -> Language.PureScript.Environment.$sfromList_$s$wgo3
                                  y
                                  ipv1
                                  (Data.Set.Internal.Bin
                                     @ GHC.Types.Int
                                     1#
                                     wild2
                                     (Data.Set.Internal.Tip @ GHC.Types.Int)
                                     (Data.Set.Internal.Tip @ GHC.Types.Int))
                                  1#
                             1#
                             -> Language.PureScript.Environment.$sfromList_$sgo4
                                  y
                                  ipv1
                                  (Data.Set.Internal.Bin
                                     @ GHC.Types.Int
                                     1#
                                     wild2
                                     (Data.Set.Internal.Tip @ GHC.Types.Int)
                                     (Data.Set.Internal.Tip @ GHC.Types.Int)) } } } } }) -}
b64e9eb9339773756102a2b86bd7f916
  $sfromList3 ::
    [Data.Set.Internal.Set GHC.Types.Int]
    -> Data.Set.Internal.Set (Data.Set.Internal.Set GHC.Types.Int)
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [Data.Set.Internal.Set GHC.Types.Int]) ->
                 case ds of wild {
                   [] -> Data.Set.Internal.Tip @ (Data.Set.Internal.Set GHC.Types.Int)
                   : x ds1
                   -> case ds1 of wild1 {
                        []
                        -> case x of dt { DEFAULT ->
                           Data.Set.Internal.Bin
                             @ (Data.Set.Internal.Set GHC.Types.Int)
                             1#
                             dt
                             (Data.Set.Internal.Tip @ (Data.Set.Internal.Set GHC.Types.Int))
                             (Data.Set.Internal.Tip @ (Data.Set.Internal.Set GHC.Types.Int)) }
                        : ipv ipv1
                        -> case GHC.Classes.$fOrd[]_$s$ccompare
                                  (Data.Set.Internal.$fDataSet_go
                                     @ GHC.Types.Int
                                     (GHC.Types.[] @ GHC.Types.Int)
                                     x)
                                  (Data.Set.Internal.$fDataSet_go
                                     @ GHC.Types.Int
                                     (GHC.Types.[] @ GHC.Types.Int)
                                     ipv) of wild2 {
                             DEFAULT
                             -> case x of dt { DEFAULT ->
                                Language.PureScript.Environment.$sfromList_$sgo1
                                  ipv
                                  ipv1
                                  (Data.Set.Internal.Bin
                                     @ (Data.Set.Internal.Set GHC.Types.Int)
                                     1#
                                     dt
                                     (Data.Set.Internal.Tip @ (Data.Set.Internal.Set GHC.Types.Int))
                                     (Data.Set.Internal.Tip
                                        @ (Data.Set.Internal.Set GHC.Types.Int))) }
                             GHC.Types.LT
                             -> case x of dt { DEFAULT ->
                                Language.PureScript.Environment.$sfromList_$s$wgo1
                                  ipv
                                  ipv1
                                  (Data.Set.Internal.Bin
                                     @ (Data.Set.Internal.Set GHC.Types.Int)
                                     1#
                                     dt
                                     (Data.Set.Internal.Tip @ (Data.Set.Internal.Set GHC.Types.Int))
                                     (Data.Set.Internal.Tip
                                        @ (Data.Set.Internal.Set GHC.Types.Int)))
                                  1# } } } }) -}
e451fb4e94e11335c6401fab30b68d2c
  $sfromList4 ::
    [Language.PureScript.Names.Qualified
       (Language.PureScript.Names.ProperName
          'Language.PureScript.Names.KindName)]
    -> Data.Set.Internal.Set
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.KindName))
  {- Arity: 1, Strictness: <S,1*U> -}
8b01a176b6e636b4ac6da5bbaea122db
  $sfromList_$s$wgo1 ::
    Data.Set.Internal.Set GHC.Types.Int
    -> [Data.Set.Internal.Set GHC.Types.Int]
    -> Data.Set.Internal.Set (Data.Set.Internal.Set GHC.Types.Int)
    -> GHC.Prim.Int#
    -> Data.Set.Internal.Set (Data.Set.Internal.Set GHC.Types.Int)
  {- Arity: 4, Strictness: <S,U><S,1*U><S,1*U><L,U> -}
4340eabb490e4b38f2d5eaf93311a5e3
  $sfromList_$s$wgo3 ::
    GHC.Prim.Int#
    -> [GHC.Types.Int]
    -> Data.Set.Internal.Set GHC.Types.Int
    -> GHC.Prim.Int#
    -> Data.Set.Internal.Set GHC.Types.Int
  {- Arity: 4, Strictness: <S,U><S,1*U><S,1*U><L,U> -}
8d0ba13539dc955135a525c539500bc1
  $sfromList_$sgo1 ::
    Data.Set.Internal.Set GHC.Types.Int
    -> [Data.Set.Internal.Set GHC.Types.Int]
    -> Data.Set.Internal.Set (Data.Set.Internal.Set GHC.Types.Int)
    -> Data.Set.Internal.Set (Data.Set.Internal.Set GHC.Types.Int)
  {- Arity: 3, Strictness: <S,U><S,1*U><S,1*U> -}
67a70df534121cf6e19aa9edd43a0bed
  $sfromList_$sgo4 ::
    GHC.Prim.Int#
    -> [GHC.Types.Int]
    -> Data.Set.Internal.Set GHC.Types.Int
    -> Data.Set.Internal.Set GHC.Types.Int
  {- Arity: 3, Strictness: <S,U><S,1*U><S,1*U> -}
0c6fe976824f348642599e85bfac64b0
  $sinsertWithKey_$s$w$sgo13 ::
    Data.Map.Internal.Map GHC.Types.Int [GHC.Types.Int]
    -> [GHC.Types.Int]
    -> GHC.Prim.Int#
    -> Data.Map.Internal.Map GHC.Types.Int [GHC.Types.Int]
  {- Arity: 3, Strictness: <S,1*U><L,U><L,U> -}
ca4b3269fd5abd265f3dcfd522412b6b
  $sinsert_$s$w$sgo1 ::
    GHC.Prim.Int#
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> a
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName))
         a
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName))
         a
    -> a
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName))
         a
  {- Arity: 10,
     Strictness: <L,U><S,U><L,U(U,U,U)><L,U><L,U><L,U><L,U><L,U(U,U,U)><S,U><L,U> -}
75ab7d5dc48a9745d502fb93c1b77e3e
  $sinsert_$s$w$sgo13 ::
    GHC.Prim.Int#
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName
    -> a
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.TypeName))
         a
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.TypeName))
         a
    -> a
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName)
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.TypeName))
         a
  {- Arity: 10,
     Strictness: <L,U><S,U><L,U(U,U,U)><L,U><L,U><L,U><L,U><L,U(U,U,U)><S,U><L,U> -}
338f572f4c819b7e38000bdfab5fa1af
  $sinsert_$s$w$sgo3 ::
    GHC.Prim.Int#
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.KindName
    -> Data.Set.Internal.Set
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.KindName))
    -> Data.Set.Internal.Set
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.KindName))
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.KindName
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.KindName)
    -> Data.Set.Internal.Set
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.KindName))
  {- Arity: 8,
     Strictness: <L,U><S,U><L,U(U,U,U)><L,U><L,U><L,U(U,U,U)><S,U><L,U> -}
074fa283880a2a3bd4c7d812055cb562
  $sinsert_$sgo1 ::
    Data.Set.Internal.Set GHC.Types.Int
    -> Data.Set.Internal.Set GHC.Types.Int
    -> Data.Set.Internal.Set (Data.Set.Internal.Set GHC.Types.Int)
    -> Data.Set.Internal.Set (Data.Set.Internal.Set GHC.Types.Int)
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U> -}
35ac2ebbc6bf13b2eea01f9c5d5124d7
  $slookup1 ::
    Language.PureScript.Names.Qualified Language.PureScript.Names.Ident
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            Language.PureScript.Names.Ident)
         a
    -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(1*U,U)><S,1*U>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (w :: Language.PureScript.Names.Qualified
                           Language.PureScript.Names.Ident)
                   (w1 :: Data.Map.Internal.Map
                            (Language.PureScript.Names.Qualified
                               Language.PureScript.Names.Ident)
                            a) ->
                 case w of ww { Language.PureScript.Names.Qualified ww1 ww2 ->
                 Language.PureScript.Environment.$wpoly_go13 @ a ww1 ww2 w1 }) -}
36c8636e235e35f6bf19f9373f50df24
  $slookup3 ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ConstructorName)
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ConstructorName))
         a
    -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S,1*U(1*U,1*U(U,U,U))><S,1*U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (w :: Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ConstructorName))
                   (w1 :: Data.Map.Internal.Map
                            (Language.PureScript.Names.Qualified
                               (Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.ConstructorName))
                            a) ->
                 case w of ww { Language.PureScript.Names.Qualified ww1 ww2 ->
                 Language.PureScript.Environment.$wpoly_go1 @ a ww1 ww2 w1 }) -}
cfcf4540efb1fd3b5ec352c6449d0787
  $slookup_$s$wpoly_go1 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         Language.PureScript.Names.Ident)
      a
    -> Language.PureScript.Names.Ident -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U> -}
8e67da64bb472a4dacf4d6ebda482388
  $slookup_$s$wpoly_go13 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         Language.PureScript.Names.Ident)
      a
    -> Language.PureScript.Names.Ident
    -> Language.PureScript.Names.ModuleName
    -> GHC.Base.Maybe a
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,U><L,U> -}
e31913cf338dfb76634ff7dbb1fa99ac
  $slookup_$s$wpoly_go2 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ConstructorName))
      a
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ConstructorName
    -> Language.PureScript.Names.ModuleName
    -> GHC.Base.Maybe a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U(U,U,U)><L,U> -}
e84412309e35a9524d1d7d9490df04e0
  $slookup_$s$wpoly_go3 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ConstructorName))
      a
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ConstructorName
    -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U(U,U,U)> -}
4836c2c42f6b2bfaaf94c7f6e47d19f3
  $slookup_$s$wpoly_go4 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ConstructorName))
      a
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> ((Data.Text.Internal.Text :: *)
        ~R# (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ConstructorName :: *)) =>
       GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S,1*U><L,U><L,U><L,U><L,U> -}
4e9abedb5582e0fe74873f82b321a6fd
  $sunion ::
    Data.Set.Internal.Set
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.KindName))
    -> Data.Set.Internal.Set
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.KindName))
    -> Data.Set.Internal.Set
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.KindName))
  {- Arity: 2, Strictness: <S,1*U><S,1*U>, Inline: [~] -}
28b441048a92b36d0fae76252cdbf677
  $sunion1 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName))
      a
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.TypeName))
         a
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.TypeName))
         a
  {- Arity: 2, Strictness: <S,1*U><S,1*U>, Inline: [~] -}
19f7949b57cf448aff38c98e9e6f9193
  $sunion2 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName))
      a
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName))
         a
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName))
         a
  {- Arity: 2, Strictness: <S,1*U><S,1*U>, Inline: [~] -}
8d5a6dd137df19710922154d28d21bef
  $tc'Data :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7719160866147746077##
                   7867422211011653409##
                   Language.PureScript.Environment.$trModule
                   Language.PureScript.Environment.$tc'Data2
                   0#
                   Language.PureScript.Environment.$tc'Data1) -}
e3abf54746000fb4df68b7133587b3c2
  $tc'Data1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
d3a1dddc087c14d7c606ea82cd96370b
  $tc'Data2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Environment.$tc'Data3) -}
99b0386fcad0b8862f84382c4a85e36a
  $tc'Data3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Data"#) -}
5d6618c318e32c32418db783b448f6e0
  $tc'DataType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11861088205814505696##
                   11915108779107609319##
                   Language.PureScript.Environment.$trModule
                   Language.PureScript.Environment.$tc'DataType2
                   0#
                   Language.PureScript.Environment.$tc'DataType1) -}
a898da1c18b60b699b0ee9dbae371d03
  $tc'DataType1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
019eb417f793b017f4b9ad227e376e4d
  $tc'DataType2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Environment.$tc'DataType3) -}
bc76f38763ea9a08b0bf2a250291cd30
  $tc'DataType3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'DataType"#) -}
2b4ebb83755e8d17e595f9df48fa1dd1
  $tc'Defined :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15210608761171459579##
                   14360673469245050393##
                   Language.PureScript.Environment.$trModule
                   Language.PureScript.Environment.$tc'Defined2
                   0#
                   Language.PureScript.Environment.$tc'Defined1) -}
9054b0126442af6f8b9790e32227a25e
  $tc'Defined1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
68581e9be5bc6183276bf4bfaa141148
  $tc'Defined2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Environment.$tc'Defined3) -}
a275e5e83294db517219188e4eeed9e7
  $tc'Defined3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Defined"#) -}
a9064d1146161c34a924444daa922f6b
  $tc'Environment :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2021134665366871173##
                   14470115643374938119##
                   Language.PureScript.Environment.$trModule
                   Language.PureScript.Environment.$tc'Environment2
                   0#
                   Language.PureScript.Environment.$tc'Environment1) -}
bc70edec7372b2abbef9004dc3f2fb00
  $tc'Environment1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
e62b9189dee6f6746add290ca1df594b
  $tc'Environment2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Environment.$tc'Environment3) -}
6032413fe26cbad2807d6ba1c97e4a8d
  $tc'Environment3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Environment"#) -}
9f73f89ab2209af9b80930a2c8088f3d
  $tc'ExternData :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18130355367257364624##
                   1696629672000909491##
                   Language.PureScript.Environment.$trModule
                   Language.PureScript.Environment.$tc'ExternData2
                   0#
                   Language.PureScript.Environment.$tc'ExternData1) -}
49807dbf3fc2dcbeadac7a280df232a0
  $tc'ExternData1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
9d6fc2dfc55569621599cb6a09fd3495
  $tc'ExternData2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Environment.$tc'ExternData3) -}
627de919bc200e11144e32d585041702
  $tc'ExternData3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ExternData"#) -}
0cd46b4b0ecfde26c78ba4fd05c02a33
  $tc'External :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5967555618882453536##
                   17492010151187784638##
                   Language.PureScript.Environment.$trModule
                   Language.PureScript.Environment.$tc'External2
                   0#
                   Language.PureScript.Environment.$tc'External1) -}
e1eed57e160efc41e4f26ff0073112b3
  $tc'External1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
2499a4feeca982b169988096f30d91d1
  $tc'External2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Environment.$tc'External3) -}
c81396274d383bffbc756acd3608286d
  $tc'External3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'External"#) -}
8b82bdd76b0db0b7c3b1de83c59ead66
  $tc'FunctionalDependency :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9903605161777801826##
                   15270840160016233974##
                   Language.PureScript.Environment.$trModule
                   Language.PureScript.Environment.$tc'FunctionalDependency2
                   0#
                   Language.PureScript.Environment.$tc'FunctionalDependency1) -}
d0ee89a6e78df8c11a01217a77163392
  $tc'FunctionalDependency1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
5a69ac52b50618fc9cbb464de073ffe0
  $tc'FunctionalDependency2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Environment.$tc'FunctionalDependency3) -}
8e091ce9ce5f7436571cf597d5affc30
  $tc'FunctionalDependency3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'FunctionalDependency"#) -}
230caaaca8116429a2b9c10a859e288c
  $tc'LocalTypeVariable :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2903261458729697948##
                   10018690153871578539##
                   Language.PureScript.Environment.$trModule
                   Language.PureScript.Environment.$tc'LocalTypeVariable1
                   0#
                   Language.PureScript.Environment.$tc'ExternData1) -}
d598f88a528dd31ab926f72954679293
  $tc'LocalTypeVariable1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Environment.$tc'LocalTypeVariable2) -}
ab66ac5a00c1b77a4beb6287f9420afe
  $tc'LocalTypeVariable2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'LocalTypeVariable"#) -}
bb1831692cda647e06efb30918192e2a
  $tc'Newtype :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7818834822953734428##
                   14185380767009588527##
                   Language.PureScript.Environment.$trModule
                   Language.PureScript.Environment.$tc'Newtype1
                   0#
                   Language.PureScript.Environment.$tc'Data1) -}
188fb2969dfde4157699b7efc7d58681
  $tc'Newtype1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Environment.$tc'Newtype2) -}
d5bcd4a0c7e08b7cb975ec19a3a7ed46
  $tc'Newtype2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Newtype"#) -}
9334c52d8ec67fbc31e1b418744555b1
  $tc'Private :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10728845330492224514##
                   850682653703446808##
                   Language.PureScript.Environment.$trModule
                   Language.PureScript.Environment.$tc'Private1
                   0#
                   Language.PureScript.Environment.$tc'External1) -}
39bbbd841d13d46fb2870326ef09f127
  $tc'Private1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Environment.$tc'Private2) -}
f2eb1dbf7c6da30abadaddd413a344bb
  $tc'Private2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Private"#) -}
40681bd191deaa1a68e8325e7c9a3ca3
  $tc'Public :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14023547869640631701##
                   10362881333994788701##
                   Language.PureScript.Environment.$trModule
                   Language.PureScript.Environment.$tc'Public1
                   0#
                   Language.PureScript.Environment.$tc'External1) -}
c44e80a1452d5429830917056fe6cce3
  $tc'Public1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Environment.$tc'Public2) -}
bda92c166c28cc9e9118ed16b4f02bc1
  $tc'Public2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Public"#) -}
f268e0ded01599f01f4d4fa2f87c1897
  $tc'ScopedTypeVar :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9056070691389008112##
                   10029707848068762002##
                   Language.PureScript.Environment.$trModule
                   Language.PureScript.Environment.$tc'ScopedTypeVar1
                   0#
                   Language.PureScript.Environment.$tc'ExternData1) -}
d95d110c2456def191041c2f599ef71a
  $tc'ScopedTypeVar1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Environment.$tc'ScopedTypeVar2) -}
66be0295a099aa02138115638a8e4440
  $tc'ScopedTypeVar2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ScopedTypeVar"#) -}
b4244dfc4fc7a50ee6fe54bda2dc55ad
  $tc'TypeClassData :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18099892942647464340##
                   10294010839876630253##
                   Language.PureScript.Environment.$trModule
                   Language.PureScript.Environment.$tc'TypeClassData2
                   0#
                   Language.PureScript.Environment.$tc'TypeClassData1) -}
58714e8f13c54d6d7bc6836bcca461f2
  $tc'TypeClassData1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
38a5c7571aedf83f108662f624cd877d
  $tc'TypeClassData2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Environment.$tc'TypeClassData3) -}
eecb7690e9ea9958d8c21b1ed1ab948e
  $tc'TypeClassData3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TypeClassData"#) -}
0daf46cd9ec1036e9e607a202f02c55b
  $tc'TypeSynonym :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5043240632503210296##
                   4143028179724485870##
                   Language.PureScript.Environment.$trModule
                   Language.PureScript.Environment.$tc'TypeSynonym1
                   0#
                   Language.PureScript.Environment.$tc'ExternData1) -}
0becf6e3704a1c32cd17a0e8b981bb83
  $tc'TypeSynonym1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Environment.$tc'TypeSynonym2) -}
8610322e22f50a8b7b0899c11c7a4b60
  $tc'TypeSynonym2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TypeSynonym"#) -}
8efd504bfe91b70ff252b9bcaa388290
  $tc'Undefined :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17823105959772334007##
                   14868088309807972057##
                   Language.PureScript.Environment.$trModule
                   Language.PureScript.Environment.$tc'Undefined1
                   0#
                   Language.PureScript.Environment.$tc'Defined1) -}
95fce7009ea437a447cf8a0d95ce2fdd
  $tc'Undefined1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Environment.$tc'Undefined2) -}
b89d968db3e93d0be0364a5bb4e4dfbf
  $tc'Undefined2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Undefined"#) -}
c11068f58f58279a080c206e0c509834
  $tcDataDeclType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2648633610826862332##
                   2944579507822148634##
                   Language.PureScript.Environment.$trModule
                   Language.PureScript.Environment.$tcDataDeclType1
                   0#
                   GHC.Types.krep$*) -}
3a6b76605a960cd8ca7d0caf878f53ff
  $tcDataDeclType1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Environment.$fFromJSONDataDeclType15) -}
2dd107d184f06a19a820ea042164aed1
  $tcEnvironment :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6670654296373816053##
                   2869235398218170588##
                   Language.PureScript.Environment.$trModule
                   Language.PureScript.Environment.$tcEnvironment1
                   0#
                   GHC.Types.krep$*) -}
910c476e117b907e129b776601fbde97
  $tcEnvironment1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Environment.$tcEnvironment2) -}
dc5a0665ed87a363ef7db20d6a11f6c5
  $tcEnvironment2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Environment"#) -}
81de14f62187f15c9279475516cd0324
  $tcFunctionalDependency :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11088093685081968411##
                   11600191923818608082##
                   Language.PureScript.Environment.$trModule
                   Language.PureScript.Environment.$tcFunctionalDependency1
                   0#
                   GHC.Types.krep$*) -}
9f634d20fef1dfef5b5abefdb0d40c45
  $tcFunctionalDependency1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Environment.$fFromJSONFunctionalDependency14) -}
a3d9d76a6d826fee0e8cbdf8fb822783
  $tcNameKind :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6337000308305785564##
                   17337317668224513595##
                   Language.PureScript.Environment.$trModule
                   Language.PureScript.Environment.$tcNameKind1
                   0#
                   GHC.Types.krep$*) -}
632fc0c3ec200ec13cacc8b26b7e1fd0
  $tcNameKind1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Environment.$tcNameKind2) -}
d4c2c549a65f5baecbdd061996fa7522
  $tcNameKind2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("NameKind"#) -}
a0eb15439a9c84b2ec1cb1eafb8edfda
  $tcNameVisibility :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5015077580825378155##
                   3403133383800532983##
                   Language.PureScript.Environment.$trModule
                   Language.PureScript.Environment.$tcNameVisibility1
                   0#
                   GHC.Types.krep$*) -}
1130677375c4549c7e0261ef5e54d09b
  $tcNameVisibility1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Environment.$tcNameVisibility2) -}
c7ca486ae88083d302c0b0a8a89b5ad7
  $tcNameVisibility2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("NameVisibility"#) -}
6b37abbd7e71a5c79b14a08b9685cf09
  $tcTypeClassData :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2323319744139629329##
                   18242561353467241467##
                   Language.PureScript.Environment.$trModule
                   Language.PureScript.Environment.$tcTypeClassData1
                   0#
                   GHC.Types.krep$*) -}
1aa6e8ab8205dc7f6e2c4f7b4458f47c
  $tcTypeClassData1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Environment.$tcTypeClassData2) -}
e6e10009a413e8f742b01ba237adc90b
  $tcTypeClassData2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("TypeClassData"#) -}
b4b33be9382a529d510489c4379e509d
  $tcTypeKind :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13123671712228626747##
                   11404793094170680237##
                   Language.PureScript.Environment.$trModule
                   Language.PureScript.Environment.$tcTypeKind1
                   0#
                   GHC.Types.krep$*) -}
9d663bd94e524016a3689ad7c914b844
  $tcTypeKind1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Environment.$tcTypeKind2) -}
fa17c3d755fdf71278cdb09d12f1586e
  $tcTypeKind2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("TypeKind"#) -}
af7c71a349b618f7d6bcb16b6b822f1d
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Language.PureScript.Environment.$trModule3
                   Language.PureScript.Environment.$trModule1) -}
8c64394c3e0e838dc289d0e42808c852
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Environment.$trModule2) -}
053b071fbe2accc6061a7aaf801cf099
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Language.PureScript.Environment"#) -}
152339f08b14d8c563d91d19ade1fe7c
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Environment.$trModule4) -}
23f0ffb54254eccb6d202c51098b18fe
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"#) -}
c291d940fae22a3f1400d8c90f26bdd4
  $w$cparseJSON ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Aeson.Types.Internal.Parser
         Language.PureScript.Environment.DataDeclType
  {- Arity: 3, Strictness: <L,U><L,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#) ->
                 case Language.PureScript.Environment.$fFromJSONDataDeclType12 of wild1 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                 let {
                   $j :: Data.Aeson.Types.Internal.Parser
                           Language.PureScript.Environment.DataDeclType
                     <join 0>
                   = case Language.PureScript.Environment.$fFromJSONDataDeclType10 of wild2 { Data.Text.Internal.Text dt1 dt2 dt6 ->
                     let {
                       $j1 :: Data.Aeson.Types.Internal.Parser
                                Language.PureScript.Environment.DataDeclType
                         <join 0>
                       = let {
                           msg5 :: GHC.Base.String
                           = GHC.CString.unpackAppendCString#
                               Language.PureScript.Environment.$fFromJSONDataDeclType9
                               (let {
                                  end :: GHC.Prim.Int# = GHC.Prim.+# ww1 ww2
                                } in
                                letrec {
                                  $wunfold :: GHC.Prim.Int# -> [GHC.Types.Char]
                                    {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                                  = \ (ww3 :: GHC.Prim.Int#) ->
                                    case GHC.Prim.>=# ww3 end of lwild {
                                      DEFAULT
                                      -> case GHC.Prim.indexWord16Array# ww ww3 of r# { DEFAULT ->
                                         case GHC.Prim.geWord# r# 55296## of lwild1 {
                                           DEFAULT
                                           -> GHC.Types.:
                                                @ GHC.Types.Char
                                                (GHC.Types.C#
                                                   (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                                ($wunfold (GHC.Prim.+# ww3 1#))
                                           1#
                                           -> case GHC.Prim.leWord# r# 56319## of lwild2 {
                                                DEFAULT
                                                -> GHC.Types.:
                                                     @ GHC.Types.Char
                                                     (GHC.Types.C#
                                                        (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                                     ($wunfold (GHC.Prim.+# ww3 1#))
                                                1#
                                                -> case GHC.Prim.indexWord16Array#
                                                          ww
                                                          (GHC.Prim.+# ww3 1#) of r#1 { DEFAULT ->
                                                   GHC.Types.:
                                                     @ GHC.Types.Char
                                                     (GHC.Types.C#
                                                        (GHC.Prim.chr#
                                                           (GHC.Prim.+#
                                                              (GHC.Prim.+#
                                                                 (GHC.Prim.uncheckedIShiftL#
                                                                    (GHC.Prim.-#
                                                                       (GHC.Prim.word2Int# r#)
                                                                       55296#)
                                                                    10#)
                                                                 (GHC.Prim.-#
                                                                    (GHC.Prim.word2Int# r#1)
                                                                    56320#))
                                                              65536#)))
                                                     ($wunfold (GHC.Prim.+# ww3 2#)) } } } }
                                      1# -> GHC.Types.[] @ GHC.Types.Char }
                                } in
                                GHC.Base.++
                                  @ GHC.Types.Char
                                  ($wunfold ww1)
                                  Language.PureScript.Environment.$fFromJSONDataDeclType7)
                         } in
                         (\ @ f4 :: * -> *
                            @ r
                            (path :: Data.Aeson.Types.Internal.JSONPath)
                            (kf :: Data.Aeson.Types.Internal.Failure f4 r)
                            (_ks :: Data.Aeson.Types.Internal.Success
                                      Language.PureScript.Environment.DataDeclType f4 r) ->
                          kf
                            (GHC.List.reverse @ Data.Aeson.Types.Internal.JSONPathElement path)
                            msg5)
                           `cast`
                         (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                   <Language.PureScript.Environment.DataDeclType>_R))
                     } in
                     case GHC.Prim.==# ww2 dt6 of lwild {
                       DEFAULT -> $j1
                       1#
                       -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                         -> GHC.Prim.Word#
                                                         -> GHC.Prim.ByteArray#
                                                         -> GHC.Prim.Word#
                                                         -> GHC.Prim.Word#
                                                         -> GHC.Prim.State# GHC.Prim.RealWorld
                                                         -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                               GHC.Prim.Int# #)}
                                 ww
                                 (GHC.Prim.int2Word# ww1)
                                 dt1
                                 (GHC.Prim.int2Word# dt2)
                                 (GHC.Prim.int2Word# ww2)
                                 GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                          case GHC.Prim.narrow32Int# ds3 of wild {
                            DEFAULT -> $j1
                            0#
                            -> Language.PureScript.Environment.$fFromJSONDataDeclType6
                                 `cast`
                               (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                         <Language.PureScript.Environment.DataDeclType>_R)) } } } }
                 } in
                 case GHC.Prim.==# ww2 dt5 of lwild {
                   DEFAULT -> $j
                   1#
                   -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                     -> GHC.Prim.Word#
                                                     -> GHC.Prim.ByteArray#
                                                     -> GHC.Prim.Word#
                                                     -> GHC.Prim.Word#
                                                     -> GHC.Prim.State# GHC.Prim.RealWorld
                                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                           GHC.Prim.Int# #)}
                             ww
                             (GHC.Prim.int2Word# ww1)
                             dt3
                             (GHC.Prim.int2Word# dt4)
                             (GHC.Prim.int2Word# ww2)
                             GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                      case GHC.Prim.narrow32Int# ds3 of wild {
                        DEFAULT -> $j
                        0#
                        -> Language.PureScript.Environment.$fFromJSONDataDeclType5
                             `cast`
                           (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                     <Language.PureScript.Environment.DataDeclType>_R)) } } } }) -}
c291d940fae22a3f1400d8c90f26bdd4
  $w$crnf ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         Language.PureScript.Names.Ident)
      (Language.PureScript.Types.Type,
       Language.PureScript.Environment.NameKind,
       Language.PureScript.Environment.NameVisibility)
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.TypeName))
         (Language.PureScript.Kinds.Kind,
          Language.PureScript.Environment.TypeKind)
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ConstructorName))
         (Language.PureScript.Environment.DataDeclType,
          Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName,
          Language.PureScript.Types.Type, [Language.PureScript.Names.Ident])
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.TypeName))
         ([(Data.Text.Internal.Text,
            GHC.Base.Maybe Language.PureScript.Kinds.Kind)],
          Language.PureScript.Types.Type)
    -> Data.Map.Internal.Map
         (GHC.Base.Maybe Language.PureScript.Names.ModuleName)
         (Data.Map.Internal.Map
            (Language.PureScript.Names.Qualified
               (Language.PureScript.Names.ProperName
                  'Language.PureScript.Names.ClassName))
            (Data.Map.Internal.Map
               (Language.PureScript.Names.Qualified
                  Language.PureScript.Names.Ident)
               Language.PureScript.TypeClassDictionaries.NamedDict))
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName))
         Language.PureScript.Environment.TypeClassData
    -> Data.Set.Internal.Set
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.KindName))
    -> ()
  {- Arity: 7, HasNoCafRefs,
     Strictness: <S,1*U><S,1*U><S,1*U><S,1*U><S,1*U><S,1*U><S,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: Data.Map.Internal.Map
                            (Language.PureScript.Names.Qualified
                               Language.PureScript.Names.Ident)
                            (Language.PureScript.Types.Type,
                             Language.PureScript.Environment.NameKind,
                             Language.PureScript.Environment.NameVisibility))
                   (ww1 :: Data.Map.Internal.Map
                             (Language.PureScript.Names.Qualified
                                (Language.PureScript.Names.ProperName
                                   'Language.PureScript.Names.TypeName))
                             (Language.PureScript.Kinds.Kind,
                              Language.PureScript.Environment.TypeKind))
                   (ww2 :: Data.Map.Internal.Map
                             (Language.PureScript.Names.Qualified
                                (Language.PureScript.Names.ProperName
                                   'Language.PureScript.Names.ConstructorName))
                             (Language.PureScript.Environment.DataDeclType,
                              Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.TypeName,
                              Language.PureScript.Types.Type, [Language.PureScript.Names.Ident]))
                   (ww3 :: Data.Map.Internal.Map
                             (Language.PureScript.Names.Qualified
                                (Language.PureScript.Names.ProperName
                                   'Language.PureScript.Names.TypeName))
                             ([(Data.Text.Internal.Text,
                                GHC.Base.Maybe Language.PureScript.Kinds.Kind)],
                              Language.PureScript.Types.Type))
                   (ww4 :: Data.Map.Internal.Map
                             (GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                             (Data.Map.Internal.Map
                                (Language.PureScript.Names.Qualified
                                   (Language.PureScript.Names.ProperName
                                      'Language.PureScript.Names.ClassName))
                                (Data.Map.Internal.Map
                                   (Language.PureScript.Names.Qualified
                                      Language.PureScript.Names.Ident)
                                   Language.PureScript.TypeClassDictionaries.NamedDict)))
                   (ww5 :: Data.Map.Internal.Map
                             (Language.PureScript.Names.Qualified
                                (Language.PureScript.Names.ProperName
                                   'Language.PureScript.Names.ClassName))
                             Language.PureScript.Environment.TypeClassData)
                   (ww6 :: Data.Set.Internal.Set
                             (Language.PureScript.Names.Qualified
                                (Language.PureScript.Names.ProperName
                                   'Language.PureScript.Names.KindName))) ->
                 case Data.Map.Internal.$fNFDataMap_$crnf
                        @ (Language.PureScript.Names.Qualified
                             Language.PureScript.Names.Ident)
                        @ (Language.PureScript.Types.Type,
                           Language.PureScript.Environment.NameKind,
                           Language.PureScript.Environment.NameVisibility)
                        Language.PureScript.Environment.$fNFDataEnvironment7
                          `cast`
                        (Sym (Control.DeepSeq.N:NFData[0]
                                  <Language.PureScript.Names.Qualified
                                     Language.PureScript.Names.Ident>_N))
                        Language.PureScript.Environment.$fNFDataEnvironment14
                          `cast`
                        (Sym (Control.DeepSeq.N:NFData[0]
                                  <(Language.PureScript.Types.Type,
                                    Language.PureScript.Environment.NameKind,
                                    Language.PureScript.Environment.NameVisibility)>_N))
                        ww of wild1 { () ->
                 case Data.Map.Internal.$fNFDataMap_$crnf
                        @ (Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.TypeName))
                        @ (Language.PureScript.Kinds.Kind,
                           Language.PureScript.Environment.TypeKind)
                        Language.PureScript.Environment.$fNFDataEnvironment13
                          `cast`
                        (Sym (Control.DeepSeq.N:NFData[0]
                                  <Language.PureScript.Names.Qualified
                                     (Language.PureScript.Names.ProperName
                                        'Language.PureScript.Names.TypeName)>_N))
                        Language.PureScript.Environment.$fNFDataEnvironment12
                          `cast`
                        (Sym (Control.DeepSeq.N:NFData[0]
                                  <(Language.PureScript.Kinds.Kind,
                                    Language.PureScript.Environment.TypeKind)>_N))
                        ww1 of wild2 { () ->
                 case Data.Map.Internal.$fNFDataMap_$crnf
                        @ (Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ConstructorName))
                        @ (Language.PureScript.Environment.DataDeclType,
                           Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.TypeName,
                           Language.PureScript.Types.Type, [Language.PureScript.Names.Ident])
                        Language.PureScript.Environment.$fNFDataEnvironment11
                          `cast`
                        (Sym (Control.DeepSeq.N:NFData[0]
                                  <Language.PureScript.Names.Qualified
                                     (Language.PureScript.Names.ProperName
                                        'Language.PureScript.Names.ConstructorName)>_N))
                        Language.PureScript.Environment.$fNFDataEnvironment10
                          `cast`
                        (Sym (Control.DeepSeq.N:NFData[0]
                                  <(Language.PureScript.Environment.DataDeclType,
                                    Language.PureScript.Names.ProperName
                                      'Language.PureScript.Names.TypeName,
                                    Language.PureScript.Types.Type,
                                    [Language.PureScript.Names.Ident])>_N))
                        ww2 of wild3 { () ->
                 case Data.Map.Internal.$fNFDataMap_$crnf
                        @ (Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.TypeName))
                        @ ([(Data.Text.Internal.Text,
                             GHC.Base.Maybe Language.PureScript.Kinds.Kind)],
                           Language.PureScript.Types.Type)
                        Language.PureScript.Environment.$fNFDataEnvironment13
                          `cast`
                        (Sym (Control.DeepSeq.N:NFData[0]
                                  <Language.PureScript.Names.Qualified
                                     (Language.PureScript.Names.ProperName
                                        'Language.PureScript.Names.TypeName)>_N))
                        Language.PureScript.Environment.$fNFDataEnvironment9
                          `cast`
                        (Sym (Control.DeepSeq.N:NFData[0]
                                  <([(Data.Text.Internal.Text,
                                      GHC.Base.Maybe Language.PureScript.Kinds.Kind)],
                                    Language.PureScript.Types.Type)>_N))
                        ww3 of wild4 { () ->
                 case Data.Map.Internal.$fNFDataMap_$crnf
                        @ (GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                        @ (Data.Map.Internal.Map
                             (Language.PureScript.Names.Qualified
                                (Language.PureScript.Names.ProperName
                                   'Language.PureScript.Names.ClassName))
                             (Data.Map.Internal.Map
                                (Language.PureScript.Names.Qualified
                                   Language.PureScript.Names.Ident)
                                Language.PureScript.TypeClassDictionaries.NamedDict))
                        Language.PureScript.Environment.$fNFDataEnvironment8
                          `cast`
                        (Sym (Control.DeepSeq.N:NFData[0]
                                  <GHC.Base.Maybe Language.PureScript.Names.ModuleName>_N))
                        Language.PureScript.Environment.$fNFDataEnvironment4
                          `cast`
                        (Sym (Control.DeepSeq.N:NFData[0]
                                  <Data.Map.Internal.Map
                                     (Language.PureScript.Names.Qualified
                                        (Language.PureScript.Names.ProperName
                                           'Language.PureScript.Names.ClassName))
                                     (Data.Map.Internal.Map
                                        (Language.PureScript.Names.Qualified
                                           Language.PureScript.Names.Ident)
                                        Language.PureScript.TypeClassDictionaries.NamedDict)>_N))
                        ww4 of wild5 { () ->
                 case Data.Map.Internal.$fNFDataMap_$crnf
                        @ (Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ClassName))
                        @ Language.PureScript.Environment.TypeClassData
                        Language.PureScript.Environment.$fNFDataEnvironment3
                          `cast`
                        (Sym (Control.DeepSeq.N:NFData[0]
                                  <Language.PureScript.Names.Qualified
                                     (Language.PureScript.Names.ProperName
                                        'Language.PureScript.Names.ClassName)>_N))
                        Language.PureScript.Environment.$fNFDataEnvironment_$crnf1
                          `cast`
                        (Sym (Control.DeepSeq.N:NFData[0]
                                  <Language.PureScript.Environment.TypeClassData>_N))
                        ww5 of wild6 { () ->
                 Data.Set.Internal.$fNFDataSet_$crnf
                   @ (Language.PureScript.Names.Qualified
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.KindName))
                   Language.PureScript.Environment.$fNFDataEnvironment1
                     `cast`
                   (Sym (Control.DeepSeq.N:NFData[0]
                             <Language.PureScript.Names.Qualified
                                (Language.PureScript.Names.ProperName
                                   'Language.PureScript.Names.KindName)>_N))
                   ww6 } } } } } }) -}
ef672654cffb5adb82634076fd85ad4a
  $w$crnf1 ::
    [(Data.Text.Internal.Text,
      GHC.Base.Maybe Language.PureScript.Kinds.Kind)]
    -> [(Language.PureScript.Names.Ident,
         Language.PureScript.Types.Type)]
    -> [Language.PureScript.Types.Constraint]
    -> [Language.PureScript.Environment.FunctionalDependency]
    -> Data.Set.Internal.Set GHC.Types.Int
    -> Data.Set.Internal.Set (Data.Set.Internal.Set GHC.Types.Int)
    -> ()
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S,1*U><S,1*U><S,1*U><S,1*U><S,1*U><S,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: [(Data.Text.Internal.Text,
                            GHC.Base.Maybe Language.PureScript.Kinds.Kind)])
                   (ww1 :: [(Language.PureScript.Names.Ident,
                             Language.PureScript.Types.Type)])
                   (ww2 :: [Language.PureScript.Types.Constraint])
                   (ww3 :: [Language.PureScript.Environment.FunctionalDependency])
                   (ww4 :: Data.Set.Internal.Set GHC.Types.Int)
                   (ww5 :: Data.Set.Internal.Set
                             (Data.Set.Internal.Set GHC.Types.Int)) ->
                 case Language.PureScript.Environment.$fNFDataEnvironment_go3
                        ww of wild1 { () ->
                 case Language.PureScript.Environment.$fNFDataEnvironment_go2
                        ww1 of wild2 { () ->
                 case Language.PureScript.Environment.$fNFDataEnvironment_go1
                        ww2 of wild3 { () ->
                 case Language.PureScript.Environment.$fNFDataEnvironment_go
                        ww3 of wild4 { () ->
                 case Data.Set.Internal.$fNFDataSet_$crnf
                        @ GHC.Types.Int
                        (Control.DeepSeq.rwhnf @ GHC.Types.Int)
                          `cast`
                        (Sym (Control.DeepSeq.N:NFData[0] <GHC.Types.Int>_N))
                        ww4 of wild5 { () ->
                 Data.Set.Internal.$fNFDataSet_$crnf
                   @ (Data.Set.Internal.Set GHC.Types.Int)
                   Language.PureScript.Environment.$fNFDataEnvironment2
                     `cast`
                   (Sym (Control.DeepSeq.N:NFData[0]
                             <Data.Set.Internal.Set GHC.Types.Int>_N))
                   ww5 } } } } }) -}
c291d940fae22a3f1400d8c90f26bdd4
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            Language.PureScript.Names.Ident)
         (Language.PureScript.Types.Type,
          Language.PureScript.Environment.NameKind,
          Language.PureScript.Environment.NameVisibility)
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.TypeName))
         (Language.PureScript.Kinds.Kind,
          Language.PureScript.Environment.TypeKind)
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ConstructorName))
         (Language.PureScript.Environment.DataDeclType,
          Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName,
          Language.PureScript.Types.Type, [Language.PureScript.Names.Ident])
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.TypeName))
         ([(Data.Text.Internal.Text,
            GHC.Base.Maybe Language.PureScript.Kinds.Kind)],
          Language.PureScript.Types.Type)
    -> Data.Map.Internal.Map
         (GHC.Base.Maybe Language.PureScript.Names.ModuleName)
         (Data.Map.Internal.Map
            (Language.PureScript.Names.Qualified
               (Language.PureScript.Names.ProperName
                  'Language.PureScript.Names.ClassName))
            (Data.Map.Internal.Map
               (Language.PureScript.Names.Qualified
                  Language.PureScript.Names.Ident)
               Language.PureScript.TypeClassDictionaries.NamedDict))
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName))
         Language.PureScript.Environment.TypeClassData
    -> Data.Set.Internal.Set
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.KindName))
    -> GHC.Show.ShowS
  {- Arity: 8,
     Strictness: <S,U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U>,
     Inline: [0] -}
8cea0d0f0f8e9ee6c72e84b3db044f16
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> [GHC.Types.Int]
    -> [GHC.Types.Int]
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 4, Strictness: <S,U><L,1*U><L,1*U><L,U>, Inline: [0] -}
90ac7b5e1c331fe4ca4a3a5c9b2afcbd
  $w$cshowsPrec2 ::
    Language.PureScript.Environment.NameKind
    -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: Language.PureScript.Environment.NameKind)
                   (w1 :: GHC.Base.String) ->
                 case w of wild {
                   Language.PureScript.Environment.Private
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.Environment.$fShowNameKind5
                        w1
                   Language.PureScript.Environment.Public
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.Environment.$fShowNameKind3
                        w1
                   Language.PureScript.Environment.External
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.Environment.$fShowNameKind1
                        w1 }) -}
ef672654cffb5adb82634076fd85ad4a
  $w$cshowsPrec3 ::
    GHC.Prim.Int#
    -> [(Data.Text.Internal.Text,
         GHC.Base.Maybe Language.PureScript.Kinds.Kind)]
    -> [(Language.PureScript.Names.Ident,
         Language.PureScript.Types.Type)]
    -> [Language.PureScript.Types.Constraint]
    -> [Language.PureScript.Environment.FunctionalDependency]
    -> Data.Set.Internal.Set GHC.Types.Int
    -> Data.Set.Internal.Set (Data.Set.Internal.Set GHC.Types.Int)
    -> GHC.Show.ShowS
  {- Arity: 7, Strictness: <S,U><L,U><L,U><L,U><L,U><L,1*U><L,1*U>,
     Inline: [0] -}
32728136ea44b82ca41fe72e88535892
  $w$ctoJSON ::
    [GHC.Types.Int]
    -> [GHC.Types.Int] -> (# Data.Aeson.Types.Internal.Object #)
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: [GHC.Types.Int]) (ww1 :: [GHC.Types.Int]) ->
                 case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                             Data.Vector.Vector Data.Aeson.Types.Internal.Value #)
                        (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case GHC.Prim.newArray#
                                @ Data.Aeson.Types.Internal.Value
                                @ (Control.Monad.Primitive.PrimState
                                     (GHC.ST.ST GHC.Prim.RealWorld))
                                0#
                                (Data.Vector.Mutable.uninitialised
                                   @ Data.Aeson.Types.Internal.Value)
                                s1
                                  `cast`
                                (GHC.Prim.State#
                                   (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                             <GHC.Prim.RealWorld>_N)))_R of ds2 { (#,#) ipv ipv1 ->
                         Language.PureScript.Environment.$fToJSONFunctionalDependency_$s$wfoldlM_loop
                           ipv
                             `cast`
                           (GHC.Prim.State#
                              (Control.Monad.Primitive.D:R:PrimStateST[0]
                                   <GHC.Prim.RealWorld>_N))_R
                           (GHC.Base.map
                              @ GHC.Types.Int
                              @ Data.Aeson.Types.Internal.Value
                              Data.Aeson.Types.ToJSON.$fToJSON1IntMap_$ctoJSON
                              ww)
                           0#
                           ipv1
                             `cast`
                           (GHC.Prim.MutableArray#
                              (Control.Monad.Primitive.D:R:PrimStateST[0] <GHC.Prim.RealWorld>_N)
                              <Data.Aeson.Types.Internal.Value>_R)_R
                           0#
                           0# }) of ds1 { (#,#) ipv1 ipv2 ->
                 case ipv2 of dt { Data.Vector.Vector ipv ipv4 ipv5 ->
                 case Language.PureScript.Environment.$fFromJSONFunctionalDependency9 of ww2 { Data.Text.Internal.Text ww3 ww4 ww5 ->
                 case Data.Aeson.Types.Internal.$w$sunsafeInsert
                        @ Data.Aeson.Types.Internal.Value
                        ww3
                        ww4
                        ww5
                        (Data.Aeson.Types.Internal.Array dt)
                        (Data.HashMap.Base.Empty
                           @ Data.Text.Internal.Text
                           @ Data.Aeson.Types.Internal.Value) of z23 { DEFAULT ->
                 case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                             Data.Vector.Vector Data.Aeson.Types.Internal.Value #)
                        (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case GHC.Prim.newArray#
                                @ Data.Aeson.Types.Internal.Value
                                @ (Control.Monad.Primitive.PrimState
                                     (GHC.ST.ST GHC.Prim.RealWorld))
                                0#
                                (Data.Vector.Mutable.uninitialised
                                   @ Data.Aeson.Types.Internal.Value)
                                s1
                                  `cast`
                                (GHC.Prim.State#
                                   (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                             <GHC.Prim.RealWorld>_N)))_R of ds2 { (#,#) ipv6 ipv7 ->
                         Language.PureScript.Environment.$fToJSONFunctionalDependency_$s$wfoldlM_loop
                           ipv6
                             `cast`
                           (GHC.Prim.State#
                              (Control.Monad.Primitive.D:R:PrimStateST[0]
                                   <GHC.Prim.RealWorld>_N))_R
                           (GHC.Base.map
                              @ GHC.Types.Int
                              @ Data.Aeson.Types.Internal.Value
                              Data.Aeson.Types.ToJSON.$fToJSON1IntMap_$ctoJSON
                              ww1)
                           0#
                           ipv7
                             `cast`
                           (GHC.Prim.MutableArray#
                              (Control.Monad.Primitive.D:R:PrimStateST[0] <GHC.Prim.RealWorld>_N)
                              <Data.Aeson.Types.Internal.Value>_R)_R
                           0#
                           0# }) of ds2 { (#,#) ipv6 ipv7 ->
                 case ipv7 of dt1 { Data.Vector.Vector ipv8 ipv9 ipv10 ->
                 case Language.PureScript.Environment.$fFromJSONFunctionalDependency2 of ww6 { Data.Text.Internal.Text ww7 ww8 ww9 ->
                 case Data.Aeson.Types.Internal.$w$sunsafeInsert
                        @ Data.Aeson.Types.Internal.Value
                        ww7
                        ww8
                        ww9
                        (Data.Aeson.Types.Internal.Array dt1)
                        z23 of dt2 { DEFAULT ->
                 (# dt2 #) } } } } } } } }) -}
c21b36ca1af1a098e7cb2f917f75e26c
  $w$dNFData ::
    [Language.PureScript.Names.Qualified
       Language.PureScript.Names.Ident]
    -> GHC.Integer.Type.Integer
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.Ident
    -> [(Language.PureScript.Names.Qualified
           (Language.PureScript.Names.ProperName
              'Language.PureScript.Names.ClassName),
         GHC.Integer.Type.Integer)]
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> [Language.PureScript.Types.Type]
    -> GHC.Base.Maybe [Language.PureScript.Types.Constraint]
    -> ()
  {- Arity: 9, HasNoCafRefs,
     Strictness: <S,1*U><S,1*U><S,1*U><S,1*U><S,1*U><S,1*U><L,A><S,1*U><S,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: [Language.PureScript.Names.Qualified
                             Language.PureScript.Names.Ident])
                   (ww1 :: GHC.Integer.Type.Integer)
                   (ww2 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww3 :: Language.PureScript.Names.Ident)
                   (ww4 :: [(Language.PureScript.Names.Qualified
                               (Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.ClassName),
                             GHC.Integer.Type.Integer)])
                   (ww5 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww6 :: Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ClassName)
                   (ww7 :: [Language.PureScript.Types.Type])
                   (ww8 :: GHC.Base.Maybe [Language.PureScript.Types.Constraint]) ->
                 case Language.PureScript.TypeClassDictionaries.$fNFDataTypeClassDictionaryInScope_go3
                        ww of wild1 { () ->
                 case ww1 of ds1 { DEFAULT ->
                 let {
                   $j :: () <join 0>
                   = case Language.PureScript.TypeClassDictionaries.$fNFDataTypeClassDictionaryInScope_go2
                            ww4 of wild3 { () ->
                     let {
                       $j1 :: () <join 0>
                       = case Language.PureScript.TypeClassDictionaries.$fNFDataTypeClassDictionaryInScope_go1
                                ww7 of wild4 { () ->
                         case ww8 of wild {
                           GHC.Base.Nothing -> GHC.Tuple.()
                           GHC.Base.Just x
                           -> Language.PureScript.TypeClassDictionaries.$fNFDataTypeClassDictionaryInScope_go
                                x } }
                     } in
                     case ww5 of wild {
                       GHC.Base.Nothing -> $j1
                       GHC.Base.Just x
                       -> case Language.PureScript.Names.$fNFDataModuleName_go
                                 x `cast`
                                 (Language.PureScript.Names.N:ModuleName[0]) of wild4 { () ->
                          $j1 } } }
                 } in
                 case ww2 of wild {
                   GHC.Base.Nothing
                   -> case ww3 of wild2 {
                        Language.PureScript.Names.Ident g1
                        -> case g1 of ds2 { Data.Text.Internal.Text ipv ipv1 ipv2 -> $j }
                        Language.PureScript.Names.GenIdent g1 g2
                        -> case g1 of wild3 {
                             GHC.Base.Nothing -> case g2 of ds2 { DEFAULT -> $j }
                             GHC.Base.Just x1
                             -> case x1 of ds2 { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                                case g2 of ds3 { DEFAULT -> $j } } }
                        Language.PureScript.Names.UnusedIdent -> $j }
                   GHC.Base.Just x
                   -> case Language.PureScript.Names.$fNFDataModuleName_go
                             x `cast`
                             (Language.PureScript.Names.N:ModuleName[0]) of wild2 { () ->
                      case ww3 of wild3 {
                        Language.PureScript.Names.Ident g1
                        -> case g1 of ds2 { Data.Text.Internal.Text ipv ipv1 ipv2 -> $j }
                        Language.PureScript.Names.GenIdent g1 g2
                        -> case g1 of wild4 {
                             GHC.Base.Nothing -> case g2 of ds2 { DEFAULT -> $j }
                             GHC.Base.Just x1
                             -> case x1 of ds2 { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                                case g2 of ds3 { DEFAULT -> $j } } }
                        Language.PureScript.Names.UnusedIdent -> $j } } } } }) -}
d2f655c4423c7f2ef855c84e5da85e83
  $w$dNFData1 ::
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.Ident -> ()
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.Maybe
                            Language.PureScript.Names.ModuleName)
                   (ww1 :: Language.PureScript.Names.Ident) ->
                 case ww of wild {
                   GHC.Base.Nothing
                   -> Language.PureScript.Names.$fNFDataIdent_$crnf ww1
                   GHC.Base.Just x
                   -> case Language.PureScript.Names.$fNFDataModuleName_go
                             x `cast`
                             (Language.PureScript.Names.N:ModuleName[0]) of wild1 { () ->
                      Language.PureScript.Names.$fNFDataIdent_$crnf ww1 } }) -}
06726cf109d9a7adcfd85cd773e1a3c5
  $w$sgo1 ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> a1
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName))
         a1
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName))
         a1
  {- Arity: 5, Strictness: <L,U><L,U><L,U(U,U,U)><L,U><S,1*U>,
     Inline: [0] -}
4983db0dc893d9014fc9a66a0737eb9e
  $w$sgo13 ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName)
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName
    -> a1
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.TypeName))
         a1
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.TypeName))
         a1
  {- Arity: 5, Strictness: <L,U><L,U><L,U(U,U,U)><L,U><S,1*U>,
     Inline: [0] -}
02c7bf9ba253bd67d3f1a757e2f2423c
  $w$sgo2 ::
    GHC.Types.Int
    -> GHC.Prim.Int#
    -> Data.Set.Internal.Set GHC.Types.Int
    -> Data.Set.Internal.Set GHC.Types.Int
  {- Arity: 3, Strictness: <L,U><L,U><S,1*U>, Inline: [0] -}
b2965c35e8167e70d0448359f896237c
  $w$sgo3 ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.KindName)
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.KindName
    -> Data.Set.Internal.Set
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.KindName))
    -> Data.Set.Internal.Set
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.KindName))
  {- Arity: 4, Strictness: <L,U><L,U><L,U(U,U,U)><S,1*U>,
     Inline: [0] -}
171732428ed554a348d38774153a225b
  $w$sgo4 ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.KindName)
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.KindName
    -> Data.Set.Internal.Set
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.KindName))
    -> Data.Set.Internal.Set
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.KindName))
  {- Arity: 4, Strictness: <L,U><L,U><L,U(U,U,U)><S,1*U>,
     Inline: [0] -}
31d7da4984cff0a22c3cac883c499f1f
  $w$sgo5 ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName)
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName
    -> a1
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.TypeName))
         a1
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.TypeName))
         a1
  {- Arity: 5, Strictness: <L,U><L,U><L,U(U,U,U)><L,U><S,1*U>,
     Inline: [0] -}
6edf5b9f1ade0f7ab40a59420ba16719
  $w$sgo6 ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> a1
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName))
         a1
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName))
         a1
  {- Arity: 5, Strictness: <L,U><L,U><L,U(U,U,U)><L,U><S,1*U>,
     Inline: [0] -}
ac1a1c1a7becafdf21cab74ef353c46b
  $wlvl ::
    Data.Text.Internal.Text
    -> GHC.Base.Maybe Language.PureScript.Kinds.Kind
    -> GHC.Base.String
    -> (# GHC.Types.Char, [GHC.Types.Char] #)
  {- Arity: 3, Strictness: <L,1*U(U,U,U)><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: Data.Text.Internal.Text)
                   (ww1 :: GHC.Base.Maybe Language.PureScript.Kinds.Kind)
                   (w :: GHC.Base.String) ->
                 (# GHC.Show.$fShow(,)4,
                    case Data.Text.Show.$w$cshowsPrec
                           ww
                           (GHC.Types.:
                              @ GHC.Types.Char
                              GHC.Show.showList__1
                              (GHC.Show.$fShow(,)_$sgo1
                                 (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 w)
                                 (GHC.Show.$fShowMaybe_$cshowsPrec
                                    @ Language.PureScript.Kinds.Kind
                                    Language.PureScript.Kinds.$fShowKind
                                    GHC.Show.$fShow(,)1
                                    ww1)
                                 (GHC.Types.[] @ GHC.Show.ShowS))) of ww2 { (#,#) ww3 ww4 ->
                    GHC.Types.: @ GHC.Types.Char ww3 ww4 } #)) -}
2bf2ca3b5c16edbb21bf46892ee70e9e
  $wlvl1 ::
    [[Language.PureScript.Types.Type]]
    -> (# Data.Aeson.Types.Internal.Array #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ (w :: [[Language.PureScript.Types.Type]]) ->
                 case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                             Data.Vector.Vector Data.Aeson.Types.Internal.Value #)
                        (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case GHC.Prim.newArray#
                                @ Data.Aeson.Types.Internal.Value
                                @ (Control.Monad.Primitive.PrimState
                                     (GHC.ST.ST GHC.Prim.RealWorld))
                                0#
                                (Data.Vector.Mutable.uninitialised
                                   @ Data.Aeson.Types.Internal.Value)
                                s1
                                  `cast`
                                (GHC.Prim.State#
                                   (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                             <GHC.Prim.RealWorld>_N)))_R of ds2 { (#,#) ipv ipv1 ->
                         Language.PureScript.Environment.$fToJSONFunctionalDependency_$s$wfoldlM_loop
                           ipv
                             `cast`
                           (GHC.Prim.State#
                              (Control.Monad.Primitive.D:R:PrimStateST[0]
                                   <GHC.Prim.RealWorld>_N))_R
                           (GHC.Base.map
                              @ [Language.PureScript.Types.Type]
                              @ Data.Aeson.Types.Internal.Value
                              Language.PureScript.Types.$fToJSONType_$ctoJSONList
                              w)
                           0#
                           ipv1
                             `cast`
                           (GHC.Prim.MutableArray#
                              (Control.Monad.Primitive.D:R:PrimStateST[0] <GHC.Prim.RealWorld>_N)
                              <Data.Aeson.Types.Internal.Value>_R)_R
                           0#
                           0# }) of ds1 { (#,#) ipv1 ipv2 ->
                 case ipv2 of dt { Data.Vector.Vector ipv ipv4 ipv5 ->
                 (# dt #) } }) -}
74922132eb4b5283eb0fae45ba3b5283
  $wlvl2 ::
    [GHC.Base.Maybe Language.PureScript.Kinds.Kind]
    -> (# Data.Aeson.Types.Internal.Array #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ (w :: [GHC.Base.Maybe
                            Language.PureScript.Kinds.Kind]) ->
                 case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                             Data.Vector.Vector Data.Aeson.Types.Internal.Value #)
                        (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case GHC.Prim.newArray#
                                @ Data.Aeson.Types.Internal.Value
                                @ (Control.Monad.Primitive.PrimState
                                     (GHC.ST.ST GHC.Prim.RealWorld))
                                0#
                                (Data.Vector.Mutable.uninitialised
                                   @ Data.Aeson.Types.Internal.Value)
                                s1
                                  `cast`
                                (GHC.Prim.State#
                                   (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                             <GHC.Prim.RealWorld>_N)))_R of ds2 { (#,#) ipv ipv1 ->
                         Language.PureScript.Environment.$fToJSONFunctionalDependency_$s$wfoldlM_loop
                           ipv
                             `cast`
                           (GHC.Prim.State#
                              (Control.Monad.Primitive.D:R:PrimStateST[0]
                                   <GHC.Prim.RealWorld>_N))_R
                           (GHC.Base.map
                              @ (GHC.Base.Maybe Language.PureScript.Kinds.Kind)
                              @ Data.Aeson.Types.Internal.Value
                              Language.PureScript.Environment.$fToJSONTypeKind_f7
                              w)
                           0#
                           ipv1
                             `cast`
                           (GHC.Prim.MutableArray#
                              (Control.Monad.Primitive.D:R:PrimStateST[0] <GHC.Prim.RealWorld>_N)
                              <Data.Aeson.Types.Internal.Value>_R)_R
                           0#
                           0# }) of ds1 { (#,#) ipv1 ipv2 ->
                 case ipv2 of dt { Data.Vector.Vector ipv ipv4 ipv5 ->
                 (# dt #) } }) -}
f3151d634a7f8b684e28e8b17f5e31b0
  $wmakeTypeClassData ::
    [(Data.Text.Internal.Text,
      GHC.Base.Maybe Language.PureScript.Kinds.Kind)]
    -> [(Language.PureScript.Names.Ident,
         Language.PureScript.Types.Type)]
    -> [Language.PureScript.Types.Constraint]
    -> [Language.PureScript.Environment.FunctionalDependency]
    -> (# [(Data.Text.Internal.Text,
            GHC.Base.Maybe Language.PureScript.Kinds.Kind)],
          [(Language.PureScript.Names.Ident,
            Language.PureScript.Types.Type)],
          [Language.PureScript.Types.Constraint],
          [Language.PureScript.Environment.FunctionalDependency],
          Data.Set.Internal.Set GHC.Types.Int,
          Data.Set.Internal.Set (Data.Set.Internal.Set GHC.Types.Int) #)
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>, Inline: [0] -}
15f78f846245764d638ba891ecaa4c1e
  $wpoly_go1 ::
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ConstructorName
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ConstructorName))
         a
    -> GHC.Base.Maybe a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U><L,1*U(U,U,U)><S,1*U>, Inline: [0],
     Unfolding: (\ @ a
                   (ww :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww1 :: Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ConstructorName)
                   (w :: Data.Map.Internal.Map
                           (Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.ConstructorName))
                           a) ->
                 case w of wild {
                   Data.Map.Internal.Bin ipv ipv1 ipv2 ipv3 ipv4
                   -> case ipv1 of ww3 { Language.PureScript.Names.Qualified ww4 ww5 ->
                      case ww of wild1 {
                        GHC.Base.Nothing
                        -> case ww4 of wild2 {
                             GHC.Base.Nothing
                             -> case ww1
                                       `cast`
                                     (Language.PureScript.Names.N:ProperName[0]
                                          <'Language.PureScript.Names.ConstructorName>_P) of ww2 { Data.Text.Internal.Text ww6 ww7 ww8 ->
                                case ww5
                                       `cast`
                                     (Language.PureScript.Names.N:ProperName[0]
                                          <'Language.PureScript.Names.ConstructorName>_P) of ww9 { Data.Text.Internal.Text ww10 ww11 ww12 ->
                                case Data.Text.$w$ccompare ww6 ww7 ww8 ww10 ww11 ww12 of wild3 {
                                  GHC.Types.LT
                                  -> Language.PureScript.Environment.$slookup_$s$wpoly_go4
                                       @ a
                                       ipv3
                                       ww6
                                       ww7
                                       ww8
                                       @~ (Sym (Language.PureScript.Names.N:ProperName[0]
                                                    <'Language.PureScript.Names.ConstructorName>_P))
                                  GHC.Types.EQ -> GHC.Base.Just @ a ipv2
                                  GHC.Types.GT
                                  -> Language.PureScript.Environment.$slookup_$s$wpoly_go4
                                       @ a
                                       ipv4
                                       ww6
                                       ww7
                                       ww8
                                       @~ (Sym (Language.PureScript.Names.N:ProperName[0]
                                                    <'Language.PureScript.Names.ConstructorName>_P)) } } }
                             GHC.Base.Just ipv7
                             -> Language.PureScript.Environment.$slookup_$s$wpoly_go3
                                  @ a
                                  ipv3
                                  ww1 }
                        GHC.Base.Just a2
                        -> case ww4 of wild2 {
                             GHC.Base.Nothing
                             -> Language.PureScript.Environment.$slookup_$s$wpoly_go2
                                  @ a
                                  ipv4
                                  ww1
                                  a2
                             GHC.Base.Just b1
                             -> case GHC.Classes.$fOrd[]_$ccompare
                                       @ (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.Namespace)
                                       (Language.PureScript.Names.$fOrdProperName
                                          @ 'Language.PureScript.Names.Namespace)
                                       a2 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                       b1
                                         `cast`
                                       (Language.PureScript.Names.N:ModuleName[0]) of wild3 {
                                  GHC.Types.LT
                                  -> Language.PureScript.Environment.$slookup_$s$wpoly_go2
                                       @ a
                                       ipv3
                                       ww1
                                       a2
                                  GHC.Types.EQ
                                  -> case ww1
                                            `cast`
                                          (Language.PureScript.Names.N:ProperName[0]
                                               <'Language.PureScript.Names.ConstructorName>_P) of ww2 { Data.Text.Internal.Text ww6 ww7 ww8 ->
                                     case ww5
                                            `cast`
                                          (Language.PureScript.Names.N:ProperName[0]
                                               <'Language.PureScript.Names.ConstructorName>_P) of ww9 { Data.Text.Internal.Text ww10 ww11 ww12 ->
                                     case Data.Text.$w$ccompare
                                            ww6
                                            ww7
                                            ww8
                                            ww10
                                            ww11
                                            ww12 of wild4 {
                                       GHC.Types.LT
                                       -> Language.PureScript.Environment.$slookup_$s$wpoly_go2
                                            @ a
                                            ipv3
                                            ww2
                                              `cast`
                                            (Sym (Language.PureScript.Names.N:ProperName[0]
                                                      <'Language.PureScript.Names.ConstructorName>_P))
                                            a2
                                       GHC.Types.EQ -> GHC.Base.Just @ a ipv2
                                       GHC.Types.GT
                                       -> Language.PureScript.Environment.$slookup_$s$wpoly_go2
                                            @ a
                                            ipv4
                                            ww2
                                              `cast`
                                            (Sym (Language.PureScript.Names.N:ProperName[0]
                                                      <'Language.PureScript.Names.ConstructorName>_P))
                                            a2 } } }
                                  GHC.Types.GT
                                  -> Language.PureScript.Environment.$slookup_$s$wpoly_go2
                                       @ a
                                       ipv4
                                       ww1
                                       a2 } } } }
                   Data.Map.Internal.Tip -> GHC.Base.Nothing @ a }) -}
6bf9cf0eb4daa43e9ecf0ae713ec581e
  $wpoly_go13 ::
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.Ident
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            Language.PureScript.Names.Ident)
         a
    -> GHC.Base.Maybe a
  {- Arity: 3, HasNoCafRefs, Strictness: <L,1*U><L,U><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (ww :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww1 :: Language.PureScript.Names.Ident)
                   (w :: Data.Map.Internal.Map
                           (Language.PureScript.Names.Qualified
                              Language.PureScript.Names.Ident)
                           a) ->
                 case w of wild {
                   Data.Map.Internal.Bin ipv ipv1 ipv2 ipv3 ipv4
                   -> case ipv1 of ww3 { Language.PureScript.Names.Qualified ww4 ww5 ->
                      case ww of wild1 {
                        GHC.Base.Nothing
                        -> case ww4 of wild2 {
                             GHC.Base.Nothing
                             -> case Language.PureScript.Names.$fOrdIdent_$ccompare
                                       ww1
                                       ww5 of wild3 {
                                  GHC.Types.LT
                                  -> Language.PureScript.Environment.$slookup_$s$wpoly_go1
                                       @ a
                                       ipv3
                                       ww1
                                  GHC.Types.EQ -> GHC.Base.Just @ a ipv2
                                  GHC.Types.GT
                                  -> Language.PureScript.Environment.$slookup_$s$wpoly_go1
                                       @ a
                                       ipv4
                                       ww1 }
                             GHC.Base.Just ipv7
                             -> Language.PureScript.Environment.$slookup_$s$wpoly_go1
                                  @ a
                                  ipv3
                                  ww1 }
                        GHC.Base.Just a2
                        -> case ww4 of wild2 {
                             GHC.Base.Nothing
                             -> Language.PureScript.Environment.$slookup_$s$wpoly_go13
                                  @ a
                                  ipv4
                                  ww1
                                  a2
                             GHC.Base.Just b1
                             -> case GHC.Classes.$fOrd[]_$ccompare
                                       @ (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.Namespace)
                                       (Language.PureScript.Names.$fOrdProperName
                                          @ 'Language.PureScript.Names.Namespace)
                                       a2 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                       b1
                                         `cast`
                                       (Language.PureScript.Names.N:ModuleName[0]) of wild3 {
                                  GHC.Types.LT
                                  -> Language.PureScript.Environment.$slookup_$s$wpoly_go13
                                       @ a
                                       ipv3
                                       ww1
                                       a2
                                  GHC.Types.EQ
                                  -> case Language.PureScript.Names.$fOrdIdent_$ccompare
                                            ww1
                                            ww5 of wild4 {
                                       GHC.Types.LT
                                       -> Language.PureScript.Environment.$slookup_$s$wpoly_go13
                                            @ a
                                            ipv3
                                            ww1
                                            a2
                                       GHC.Types.EQ -> GHC.Base.Just @ a ipv2
                                       GHC.Types.GT
                                       -> Language.PureScript.Environment.$slookup_$s$wpoly_go13
                                            @ a
                                            ipv4
                                            ww1
                                            a2 }
                                  GHC.Types.GT
                                  -> Language.PureScript.Environment.$slookup_$s$wpoly_go13
                                       @ a
                                       ipv4
                                       ww1
                                       a2 } } } }
                   Data.Map.Internal.Tip -> GHC.Base.Nothing @ a }) -}
cb2150eeaca52867a27d0392a88201aa
  (-:>) ::
    Language.PureScript.Kinds.Kind
    -> Language.PureScript.Kinds.Kind -> Language.PureScript.Kinds.Kind
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m3,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Kinds.FunKind -}
c291d940fae22a3f1400d8c90f26bdd4
  data DataDeclType = Data | Newtype
c291d940fae22a3f1400d8c90f26bdd4
  data Environment
    = Environment {names :: Data.Map.Internal.Map
                              (Language.PureScript.Names.Qualified
                                 Language.PureScript.Names.Ident)
                              (Language.PureScript.Types.Type,
                               Language.PureScript.Environment.NameKind,
                               Language.PureScript.Environment.NameVisibility),
                   types :: Data.Map.Internal.Map
                              (Language.PureScript.Names.Qualified
                                 (Language.PureScript.Names.ProperName
                                    'Language.PureScript.Names.TypeName))
                              (Language.PureScript.Kinds.Kind,
                               Language.PureScript.Environment.TypeKind),
                   dataConstructors :: Data.Map.Internal.Map
                                         (Language.PureScript.Names.Qualified
                                            (Language.PureScript.Names.ProperName
                                               'Language.PureScript.Names.ConstructorName))
                                         (Language.PureScript.Environment.DataDeclType,
                                          Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.TypeName,
                                          Language.PureScript.Types.Type,
                                          [Language.PureScript.Names.Ident]),
                   typeSynonyms :: Data.Map.Internal.Map
                                     (Language.PureScript.Names.Qualified
                                        (Language.PureScript.Names.ProperName
                                           'Language.PureScript.Names.TypeName))
                                     ([(Data.Text.Internal.Text,
                                        GHC.Base.Maybe Language.PureScript.Kinds.Kind)],
                                      Language.PureScript.Types.Type),
                   typeClassDictionaries :: Data.Map.Internal.Map
                                              (GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                                              (Data.Map.Internal.Map
                                                 (Language.PureScript.Names.Qualified
                                                    (Language.PureScript.Names.ProperName
                                                       'Language.PureScript.Names.ClassName))
                                                 (Data.Map.Internal.Map
                                                    (Language.PureScript.Names.Qualified
                                                       Language.PureScript.Names.Ident)
                                                    Language.PureScript.TypeClassDictionaries.NamedDict)),
                   typeClasses :: Data.Map.Internal.Map
                                    (Language.PureScript.Names.Qualified
                                       (Language.PureScript.Names.ProperName
                                          'Language.PureScript.Names.ClassName))
                                    Language.PureScript.Environment.TypeClassData,
                   kinds :: Data.Set.Internal.Set
                              (Language.PureScript.Names.Qualified
                                 (Language.PureScript.Names.ProperName
                                    'Language.PureScript.Names.KindName))}
ef672654cffb5adb82634076fd85ad4a
  data FunctionalDependency
    = FunctionalDependency {fdDeterminers :: [GHC.Types.Int],
                            fdDetermined :: [GHC.Types.Int]}
90ac7b5e1c331fe4ca4a3a5c9b2afcbd
  data NameKind = Private | Public | External
610613df6c74f57795f9d575591a7472
  data NameVisibility = Undefined | Defined
c291d940fae22a3f1400d8c90f26bdd4
  axiom Language.PureScript.Environment.Rep_DataDeclType::
      GHC.Generics.Rep Language.PureScript.Environment.DataDeclType
        = GHC.Generics.D1
            ('GHC.Generics.MetaData
               "DataDeclType"
               "Language.PureScript.Environment"
               "purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"
               'GHC.Types.False)
            (GHC.Generics.C1
               ('GHC.Generics.MetaCons
                  "Data" 'GHC.Generics.PrefixI 'GHC.Types.False)
               GHC.Generics.U1
             GHC.Generics.:+: GHC.Generics.C1
                                ('GHC.Generics.MetaCons
                                   "Newtype" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                GHC.Generics.U1)
c291d940fae22a3f1400d8c90f26bdd4
  axiom Language.PureScript.Environment.Rep_Environment::
      GHC.Generics.Rep Language.PureScript.Environment.Environment
        = GHC.Generics.D1
            ('GHC.Generics.MetaData
               "Environment"
               "Language.PureScript.Environment"
               "purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"
               'GHC.Types.False)
            (GHC.Generics.C1
               ('GHC.Generics.MetaCons
                  "Environment" 'GHC.Generics.PrefixI 'GHC.Types.True)
               ((GHC.Generics.S1
                   ('GHC.Generics.MetaSel
                      ('GHC.Base.Just "names")
                      'GHC.Generics.NoSourceUnpackedness
                      'GHC.Generics.NoSourceStrictness
                      'GHC.Generics.DecidedLazy)
                   (GHC.Generics.Rec0
                      (Data.Map.Internal.Map
                         (Language.PureScript.Names.Qualified
                            Language.PureScript.Names.Ident)
                         (Language.PureScript.Types.Type,
                          Language.PureScript.Environment.NameKind,
                          Language.PureScript.Environment.NameVisibility)))
                 GHC.Generics.:*: (GHC.Generics.S1
                                     ('GHC.Generics.MetaSel
                                        ('GHC.Base.Just "types")
                                        'GHC.Generics.NoSourceUnpackedness
                                        'GHC.Generics.NoSourceStrictness
                                        'GHC.Generics.DecidedLazy)
                                     (GHC.Generics.Rec0
                                        (Data.Map.Internal.Map
                                           (Language.PureScript.Names.Qualified
                                              (Language.PureScript.Names.ProperName
                                                 'Language.PureScript.Names.TypeName))
                                           (Language.PureScript.Kinds.Kind,
                                            Language.PureScript.Environment.TypeKind)))
                                   GHC.Generics.:*: GHC.Generics.S1
                                                      ('GHC.Generics.MetaSel
                                                         ('GHC.Base.Just "dataConstructors")
                                                         'GHC.Generics.NoSourceUnpackedness
                                                         'GHC.Generics.NoSourceStrictness
                                                         'GHC.Generics.DecidedLazy)
                                                      (GHC.Generics.Rec0
                                                         (Data.Map.Internal.Map
                                                            (Language.PureScript.Names.Qualified
                                                               (Language.PureScript.Names.ProperName
                                                                  'Language.PureScript.Names.ConstructorName))
                                                            (Language.PureScript.Environment.DataDeclType,
                                                             Language.PureScript.Names.ProperName
                                                               'Language.PureScript.Names.TypeName,
                                                             Language.PureScript.Types.Type,
                                                             [Language.PureScript.Names.Ident])))))
                GHC.Generics.:*: ((GHC.Generics.S1
                                     ('GHC.Generics.MetaSel
                                        ('GHC.Base.Just "typeSynonyms")
                                        'GHC.Generics.NoSourceUnpackedness
                                        'GHC.Generics.NoSourceStrictness
                                        'GHC.Generics.DecidedLazy)
                                     (GHC.Generics.Rec0
                                        (Data.Map.Internal.Map
                                           (Language.PureScript.Names.Qualified
                                              (Language.PureScript.Names.ProperName
                                                 'Language.PureScript.Names.TypeName))
                                           ([(Data.Text.Internal.Text,
                                              GHC.Base.Maybe Language.PureScript.Kinds.Kind)],
                                            Language.PureScript.Types.Type)))
                                   GHC.Generics.:*: GHC.Generics.S1
                                                      ('GHC.Generics.MetaSel
                                                         ('GHC.Base.Just "typeClassDictionaries")
                                                         'GHC.Generics.NoSourceUnpackedness
                                                         'GHC.Generics.NoSourceStrictness
                                                         'GHC.Generics.DecidedLazy)
                                                      (GHC.Generics.Rec0
                                                         (Data.Map.Internal.Map
                                                            (GHC.Base.Maybe
                                                               Language.PureScript.Names.ModuleName)
                                                            (Data.Map.Internal.Map
                                                               (Language.PureScript.Names.Qualified
                                                                  (Language.PureScript.Names.ProperName
                                                                     'Language.PureScript.Names.ClassName))
                                                               (Data.Map.Internal.Map
                                                                  (Language.PureScript.Names.Qualified
                                                                     Language.PureScript.Names.Ident)
                                                                  Language.PureScript.TypeClassDictionaries.NamedDict)))))
                                  GHC.Generics.:*: (GHC.Generics.S1
                                                      ('GHC.Generics.MetaSel
                                                         ('GHC.Base.Just "typeClasses")
                                                         'GHC.Generics.NoSourceUnpackedness
                                                         'GHC.Generics.NoSourceStrictness
                                                         'GHC.Generics.DecidedLazy)
                                                      (GHC.Generics.Rec0
                                                         (Data.Map.Internal.Map
                                                            (Language.PureScript.Names.Qualified
                                                               (Language.PureScript.Names.ProperName
                                                                  'Language.PureScript.Names.ClassName))
                                                            Language.PureScript.Environment.TypeClassData))
                                                    GHC.Generics.:*: GHC.Generics.S1
                                                                       ('GHC.Generics.MetaSel
                                                                          ('GHC.Base.Just "kinds")
                                                                          'GHC.Generics.NoSourceUnpackedness
                                                                          'GHC.Generics.NoSourceStrictness
                                                                          'GHC.Generics.DecidedLazy)
                                                                       (GHC.Generics.Rec0
                                                                          (Data.Set.Internal.Set
                                                                             (Language.PureScript.Names.Qualified
                                                                                (Language.PureScript.Names.ProperName
                                                                                   'Language.PureScript.Names.KindName))))))))
ef672654cffb5adb82634076fd85ad4a
  axiom Language.PureScript.Environment.Rep_FunctionalDependency::
      GHC.Generics.Rep
        Language.PureScript.Environment.FunctionalDependency
        = GHC.Generics.D1
            ('GHC.Generics.MetaData
               "FunctionalDependency"
               "Language.PureScript.Environment"
               "purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"
               'GHC.Types.False)
            (GHC.Generics.C1
               ('GHC.Generics.MetaCons
                  "FunctionalDependency" 'GHC.Generics.PrefixI 'GHC.Types.True)
               (GHC.Generics.S1
                  ('GHC.Generics.MetaSel
                     ('GHC.Base.Just "fdDeterminers")
                     'GHC.Generics.NoSourceUnpackedness
                     'GHC.Generics.NoSourceStrictness
                     'GHC.Generics.DecidedLazy)
                  (GHC.Generics.Rec0 [GHC.Types.Int])
                GHC.Generics.:*: GHC.Generics.S1
                                   ('GHC.Generics.MetaSel
                                      ('GHC.Base.Just "fdDetermined")
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.Rec0 [GHC.Types.Int])))
90ac7b5e1c331fe4ca4a3a5c9b2afcbd
  axiom Language.PureScript.Environment.Rep_NameKind::
      GHC.Generics.Rep Language.PureScript.Environment.NameKind
        = GHC.Generics.D1
            ('GHC.Generics.MetaData
               "NameKind"
               "Language.PureScript.Environment"
               "purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"
               'GHC.Types.False)
            (GHC.Generics.C1
               ('GHC.Generics.MetaCons
                  "Private" 'GHC.Generics.PrefixI 'GHC.Types.False)
               GHC.Generics.U1
             GHC.Generics.:+: (GHC.Generics.C1
                                 ('GHC.Generics.MetaCons
                                    "Public" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                 GHC.Generics.U1
                               GHC.Generics.:+: GHC.Generics.C1
                                                  ('GHC.Generics.MetaCons
                                                     "External"
                                                     'GHC.Generics.PrefixI
                                                     'GHC.Types.False)
                                                  GHC.Generics.U1))
610613df6c74f57795f9d575591a7472
  axiom Language.PureScript.Environment.Rep_NameVisibility::
      GHC.Generics.Rep Language.PureScript.Environment.NameVisibility
        = GHC.Generics.D1
            ('GHC.Generics.MetaData
               "NameVisibility"
               "Language.PureScript.Environment"
               "purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"
               'GHC.Types.False)
            (GHC.Generics.C1
               ('GHC.Generics.MetaCons
                  "Undefined" 'GHC.Generics.PrefixI 'GHC.Types.False)
               GHC.Generics.U1
             GHC.Generics.:+: GHC.Generics.C1
                                ('GHC.Generics.MetaCons
                                   "Defined" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                GHC.Generics.U1)
ef672654cffb5adb82634076fd85ad4a
  axiom Language.PureScript.Environment.Rep_TypeClassData::
      GHC.Generics.Rep Language.PureScript.Environment.TypeClassData
        = GHC.Generics.D1
            ('GHC.Generics.MetaData
               "TypeClassData"
               "Language.PureScript.Environment"
               "purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"
               'GHC.Types.False)
            (GHC.Generics.C1
               ('GHC.Generics.MetaCons
                  "TypeClassData" 'GHC.Generics.PrefixI 'GHC.Types.True)
               ((GHC.Generics.S1
                   ('GHC.Generics.MetaSel
                      ('GHC.Base.Just "typeClassArguments")
                      'GHC.Generics.NoSourceUnpackedness
                      'GHC.Generics.NoSourceStrictness
                      'GHC.Generics.DecidedLazy)
                   (GHC.Generics.Rec0
                      [(Data.Text.Internal.Text,
                        GHC.Base.Maybe Language.PureScript.Kinds.Kind)])
                 GHC.Generics.:*: (GHC.Generics.S1
                                     ('GHC.Generics.MetaSel
                                        ('GHC.Base.Just "typeClassMembers")
                                        'GHC.Generics.NoSourceUnpackedness
                                        'GHC.Generics.NoSourceStrictness
                                        'GHC.Generics.DecidedLazy)
                                     (GHC.Generics.Rec0
                                        [(Language.PureScript.Names.Ident,
                                          Language.PureScript.Types.Type)])
                                   GHC.Generics.:*: GHC.Generics.S1
                                                      ('GHC.Generics.MetaSel
                                                         ('GHC.Base.Just "typeClassSuperclasses")
                                                         'GHC.Generics.NoSourceUnpackedness
                                                         'GHC.Generics.NoSourceStrictness
                                                         'GHC.Generics.DecidedLazy)
                                                      (GHC.Generics.Rec0
                                                         [Language.PureScript.Types.Constraint])))
                GHC.Generics.:*: (GHC.Generics.S1
                                    ('GHC.Generics.MetaSel
                                       ('GHC.Base.Just "typeClassDependencies")
                                       'GHC.Generics.NoSourceUnpackedness
                                       'GHC.Generics.NoSourceStrictness
                                       'GHC.Generics.DecidedLazy)
                                    (GHC.Generics.Rec0
                                       [Language.PureScript.Environment.FunctionalDependency])
                                  GHC.Generics.:*: (GHC.Generics.S1
                                                      ('GHC.Generics.MetaSel
                                                         ('GHC.Base.Just
                                                            "typeClassDeterminedArguments")
                                                         'GHC.Generics.NoSourceUnpackedness
                                                         'GHC.Generics.NoSourceStrictness
                                                         'GHC.Generics.DecidedLazy)
                                                      (GHC.Generics.Rec0
                                                         (Data.Set.Internal.Set GHC.Types.Int))
                                                    GHC.Generics.:*: GHC.Generics.S1
                                                                       ('GHC.Generics.MetaSel
                                                                          ('GHC.Base.Just
                                                                             "typeClassCoveringSets")
                                                                          'GHC.Generics.NoSourceUnpackedness
                                                                          'GHC.Generics.NoSourceStrictness
                                                                          'GHC.Generics.DecidedLazy)
                                                                       (GHC.Generics.Rec0
                                                                          (Data.Set.Internal.Set
                                                                             (Data.Set.Internal.Set
                                                                                GHC.Types.Int)))))))
0a0df18a3a5bbdd9f1dda59baf0fb992
  axiom Language.PureScript.Environment.Rep_TypeKind::
      GHC.Generics.Rep Language.PureScript.Environment.TypeKind
        = GHC.Generics.D1
            ('GHC.Generics.MetaData
               "TypeKind"
               "Language.PureScript.Environment"
               "purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"
               'GHC.Types.False)
            ((GHC.Generics.C1
                ('GHC.Generics.MetaCons
                   "DataType" 'GHC.Generics.PrefixI 'GHC.Types.False)
                (GHC.Generics.S1
                   ('GHC.Generics.MetaSel
                      'GHC.Base.Nothing
                      'GHC.Generics.NoSourceUnpackedness
                      'GHC.Generics.NoSourceStrictness
                      'GHC.Generics.DecidedLazy)
                   (GHC.Generics.Rec0
                      [(Data.Text.Internal.Text,
                        GHC.Base.Maybe Language.PureScript.Kinds.Kind)])
                 GHC.Generics.:*: GHC.Generics.S1
                                    ('GHC.Generics.MetaSel
                                       'GHC.Base.Nothing
                                       'GHC.Generics.NoSourceUnpackedness
                                       'GHC.Generics.NoSourceStrictness
                                       'GHC.Generics.DecidedLazy)
                                    (GHC.Generics.Rec0
                                       [(Language.PureScript.Names.ProperName
                                           'Language.PureScript.Names.ConstructorName,
                                         [Language.PureScript.Types.Type])]))
              GHC.Generics.:+: GHC.Generics.C1
                                 ('GHC.Generics.MetaCons
                                    "TypeSynonym" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                 GHC.Generics.U1)
             GHC.Generics.:+: (GHC.Generics.C1
                                 ('GHC.Generics.MetaCons
                                    "ExternData" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                 GHC.Generics.U1
                               GHC.Generics.:+: (GHC.Generics.C1
                                                   ('GHC.Generics.MetaCons
                                                      "LocalTypeVariable"
                                                      'GHC.Generics.PrefixI
                                                      'GHC.Types.False)
                                                   GHC.Generics.U1
                                                 GHC.Generics.:+: GHC.Generics.C1
                                                                    ('GHC.Generics.MetaCons
                                                                       "ScopedTypeVar"
                                                                       'GHC.Generics.PrefixI
                                                                       'GHC.Types.False)
                                                                    GHC.Generics.U1)))
ef672654cffb5adb82634076fd85ad4a
  data TypeClassData
    = TypeClassData {typeClassArguments :: [(Data.Text.Internal.Text,
                                             GHC.Base.Maybe Language.PureScript.Kinds.Kind)],
                     typeClassMembers :: [(Language.PureScript.Names.Ident,
                                           Language.PureScript.Types.Type)],
                     typeClassSuperclasses :: [Language.PureScript.Types.Constraint],
                     typeClassDependencies :: [Language.PureScript.Environment.FunctionalDependency],
                     typeClassDeterminedArguments :: Data.Set.Internal.Set
                                                       GHC.Types.Int,
                     typeClassCoveringSets :: Data.Set.Internal.Set
                                                (Data.Set.Internal.Set GHC.Types.Int)}
0a0df18a3a5bbdd9f1dda59baf0fb992
  data TypeKind
    = DataType [(Data.Text.Internal.Text,
                 GHC.Base.Maybe Language.PureScript.Kinds.Kind)]
               [(Language.PureScript.Names.ProperName
                   'Language.PureScript.Names.ConstructorName,
                 [Language.PureScript.Types.Type])]
    | TypeSynonym
    | ExternData
    | LocalTypeVariable
    | ScopedTypeVar
d1c09759429d64d2095e7df9da407b32
  allPrimClasses ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName))
      Language.PureScript.Environment.TypeClassData
  {- Unfolding: (Language.PureScript.Environment.allPrimClasses_$sgo13
                   Language.PureScript.Environment.primClasses
                   Language.PureScript.Environment.allPrimClasses1
                   (Data.Map.Internal.Tip
                      @ (Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ClassName))
                      @ Language.PureScript.Environment.TypeClassData)) -}
bb1616903c7fd773afdce78513947f71
  allPrimClasses1 ::
    [Data.Map.Internal.Map
       (Language.PureScript.Names.Qualified
          (Language.PureScript.Names.ProperName
             'Language.PureScript.Names.ClassName))
       Language.PureScript.Environment.TypeClassData]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Map.Internal.Map
                        (Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ClassName))
                        Language.PureScript.Environment.TypeClassData)
                   Language.PureScript.Environment.primRowClasses
                   Language.PureScript.Environment.allPrimClasses2) -}
c2675cfbf57fee7099ef75d9d01d6b3a
  allPrimClasses2 ::
    [Data.Map.Internal.Map
       (Language.PureScript.Names.Qualified
          (Language.PureScript.Names.ProperName
             'Language.PureScript.Names.ClassName))
       Language.PureScript.Environment.TypeClassData]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Map.Internal.Map
                        (Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ClassName))
                        Language.PureScript.Environment.TypeClassData)
                   Language.PureScript.Environment.primRowListClasses
                   Language.PureScript.Environment.allPrimClasses3) -}
0dd006fc3b3ecadbcb515ed1126933fe
  allPrimClasses3 ::
    [Data.Map.Internal.Map
       (Language.PureScript.Names.Qualified
          (Language.PureScript.Names.ProperName
             'Language.PureScript.Names.ClassName))
       Language.PureScript.Environment.TypeClassData]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Map.Internal.Map
                        (Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ClassName))
                        Language.PureScript.Environment.TypeClassData)
                   Language.PureScript.Environment.primSymbolClasses
                   Language.PureScript.Environment.allPrimClasses4) -}
df338504f9884ac5bc678c3996ce54db
  allPrimClasses4 ::
    [Data.Map.Internal.Map
       (Language.PureScript.Names.Qualified
          (Language.PureScript.Names.ProperName
             'Language.PureScript.Names.ClassName))
       Language.PureScript.Environment.TypeClassData]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Map.Internal.Map
                        (Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ClassName))
                        Language.PureScript.Environment.TypeClassData)
                   Language.PureScript.Environment.primTypeErrorClasses
                   (GHC.Types.[]
                      @ (Data.Map.Internal.Map
                           (Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.ClassName))
                           Language.PureScript.Environment.TypeClassData))) -}
bb28e7361230af1081b5067e6132449a
  allPrimClasses_$sgo13 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName))
      Language.PureScript.Environment.TypeClassData
    -> [Data.Map.Internal.Map
          (Language.PureScript.Names.Qualified
             (Language.PureScript.Names.ProperName
                'Language.PureScript.Names.ClassName))
          Language.PureScript.Environment.TypeClassData]
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName))
         Language.PureScript.Environment.TypeClassData
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName))
         Language.PureScript.Environment.TypeClassData
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,1*U> -}
82700151231525dfec53674b979c882e
  allPrimKinds ::
    Data.Set.Internal.Set
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.KindName))
  {- Unfolding: (Language.PureScript.Environment.allPrimKinds_$sgo
                   Language.PureScript.Environment.primKinds
                   Language.PureScript.Environment.allPrimKinds1) -}
c639365a42a5936de21e9b0ce407e8f1
  allPrimKinds1 ::
    [Data.Set.Internal.Set
       (Language.PureScript.Names.Qualified
          (Language.PureScript.Names.ProperName
             'Language.PureScript.Names.KindName))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Set.Internal.Set
                        (Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.KindName)))
                   Language.PureScript.Environment.primOrderingKinds
                   Language.PureScript.Environment.allPrimKinds2) -}
de743b5daada300657203fc14af8e80d
  allPrimKinds2 ::
    [Data.Set.Internal.Set
       (Language.PureScript.Names.Qualified
          (Language.PureScript.Names.ProperName
             'Language.PureScript.Names.KindName))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Set.Internal.Set
                        (Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.KindName)))
                   Language.PureScript.Environment.primRowListKinds
                   Language.PureScript.Environment.allPrimKinds3) -}
d877ce316b2068c68f8e41d523089fe4
  allPrimKinds3 ::
    [Data.Set.Internal.Set
       (Language.PureScript.Names.Qualified
          (Language.PureScript.Names.ProperName
             'Language.PureScript.Names.KindName))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Set.Internal.Set
                        (Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.KindName)))
                   Language.PureScript.Environment.primTypeErrorKinds
                   (GHC.Types.[]
                      @ (Data.Set.Internal.Set
                           (Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.KindName))))) -}
80f3fc90ca3afeb92c314345252898a7
  allPrimKinds_$sgo ::
    Data.Set.Internal.Set
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.KindName))
    -> [Data.Set.Internal.Set
          (Language.PureScript.Names.Qualified
             (Language.PureScript.Names.ProperName
                'Language.PureScript.Names.KindName))]
    -> Data.Set.Internal.Set
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.KindName))
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
fb04d14179fad00b421f8c3af5f730d5
  allPrimTypes ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName))
      (Language.PureScript.Kinds.Kind,
       Language.PureScript.Environment.TypeKind)
  {- Unfolding: (Language.PureScript.Environment.allPrimTypes_$sgo13
                   Language.PureScript.Environment.primTypes
                   Language.PureScript.Environment.allPrimTypes1
                   (Data.Map.Internal.Tip
                      @ (Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.TypeName))
                      @ (Language.PureScript.Kinds.Kind,
                         Language.PureScript.Environment.TypeKind))) -}
0514e6d55c4a5572e62ecf4cfab17c08
  allPrimTypes1 ::
    [Data.Map.Internal.Map
       (Language.PureScript.Names.Qualified
          (Language.PureScript.Names.ProperName
             'Language.PureScript.Names.TypeName))
       (Language.PureScript.Kinds.Kind,
        Language.PureScript.Environment.TypeKind)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Map.Internal.Map
                        (Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.TypeName))
                        (Language.PureScript.Kinds.Kind,
                         Language.PureScript.Environment.TypeKind))
                   Language.PureScript.Environment.primOrderingTypes
                   Language.PureScript.Environment.allPrimTypes2) -}
7dec892061904d64e6fcbff517afdf46
  allPrimTypes2 ::
    [Data.Map.Internal.Map
       (Language.PureScript.Names.Qualified
          (Language.PureScript.Names.ProperName
             'Language.PureScript.Names.TypeName))
       (Language.PureScript.Kinds.Kind,
        Language.PureScript.Environment.TypeKind)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Map.Internal.Map
                        (Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.TypeName))
                        (Language.PureScript.Kinds.Kind,
                         Language.PureScript.Environment.TypeKind))
                   Language.PureScript.Environment.primRowTypes
                   Language.PureScript.Environment.allPrimTypes3) -}
41331c7dc21ad4bd2655becc1fbb70d3
  allPrimTypes3 ::
    [Data.Map.Internal.Map
       (Language.PureScript.Names.Qualified
          (Language.PureScript.Names.ProperName
             'Language.PureScript.Names.TypeName))
       (Language.PureScript.Kinds.Kind,
        Language.PureScript.Environment.TypeKind)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Map.Internal.Map
                        (Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.TypeName))
                        (Language.PureScript.Kinds.Kind,
                         Language.PureScript.Environment.TypeKind))
                   Language.PureScript.Environment.primRowListTypes
                   Language.PureScript.Environment.allPrimTypes4) -}
948966575d40dfbcd965af39ff7ba32d
  allPrimTypes4 ::
    [Data.Map.Internal.Map
       (Language.PureScript.Names.Qualified
          (Language.PureScript.Names.ProperName
             'Language.PureScript.Names.TypeName))
       (Language.PureScript.Kinds.Kind,
        Language.PureScript.Environment.TypeKind)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Map.Internal.Map
                        (Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.TypeName))
                        (Language.PureScript.Kinds.Kind,
                         Language.PureScript.Environment.TypeKind))
                   Language.PureScript.Environment.primSymbolTypes
                   Language.PureScript.Environment.allPrimTypes5) -}
211e979443c964367ec7b83123a31548
  allPrimTypes5 ::
    [Data.Map.Internal.Map
       (Language.PureScript.Names.Qualified
          (Language.PureScript.Names.ProperName
             'Language.PureScript.Names.TypeName))
       (Language.PureScript.Kinds.Kind,
        Language.PureScript.Environment.TypeKind)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Map.Internal.Map
                        (Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.TypeName))
                        (Language.PureScript.Kinds.Kind,
                         Language.PureScript.Environment.TypeKind))
                   Language.PureScript.Environment.primTypeErrorTypes
                   (GHC.Types.[]
                      @ (Data.Map.Internal.Map
                           (Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.TypeName))
                           (Language.PureScript.Kinds.Kind,
                            Language.PureScript.Environment.TypeKind)))) -}
d6d102c8ff42f6bc220370661a671801
  allPrimTypes_$sgo13 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName))
      (Language.PureScript.Kinds.Kind,
       Language.PureScript.Environment.TypeKind)
    -> [Data.Map.Internal.Map
          (Language.PureScript.Names.Qualified
             (Language.PureScript.Names.ProperName
                'Language.PureScript.Names.TypeName))
          (Language.PureScript.Kinds.Kind,
           Language.PureScript.Environment.TypeKind)]
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.TypeName))
         (Language.PureScript.Kinds.Kind,
          Language.PureScript.Environment.TypeKind)
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.TypeName))
         (Language.PureScript.Kinds.Kind,
          Language.PureScript.Environment.TypeKind)
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,1*U> -}
c291d940fae22a3f1400d8c90f26bdd4
  dataConstructors ::
    Language.PureScript.Environment.Environment
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ConstructorName))
         (Language.PureScript.Environment.DataDeclType,
          Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName,
          Language.PureScript.Types.Type, [Language.PureScript.Names.Ident])
  RecSel Left Language.PureScript.Environment.Environment
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLLLL),1*U(A,A,1*U,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Environment.Environment) ->
                 case ds of wild { Language.PureScript.Environment.Environment ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds3 }) -}
ef672654cffb5adb82634076fd85ad4a
  fdDetermined ::
    Language.PureScript.Environment.FunctionalDependency
    -> [GHC.Types.Int]
  RecSel Left Language.PureScript.Environment.FunctionalDependency
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Environment.FunctionalDependency) ->
                 case ds of wild { Language.PureScript.Environment.FunctionalDependency ds1 ds2 ->
                 ds2 }) -}
ef672654cffb5adb82634076fd85ad4a
  fdDeterminers ::
    Language.PureScript.Environment.FunctionalDependency
    -> [GHC.Types.Int]
  RecSel Left Language.PureScript.Environment.FunctionalDependency
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Environment.FunctionalDependency) ->
                 case ds of wild { Language.PureScript.Environment.FunctionalDependency ds1 ds2 ->
                 ds1 }) -}
08e389ba3708611725513f2230036026
  function ::
    Language.PureScript.Types.Type
    -> Language.PureScript.Types.Type -> Language.PureScript.Types.Type
  {- Arity: 2, Strictness: <L,U><L,U>m7,
     Unfolding: InlineRule (2, True, False)
                (\ (t1 :: Language.PureScript.Types.Type)
                   (eta :: Language.PureScript.Types.Type) ->
                 Language.PureScript.Types.TypeApp
                   (Language.PureScript.Types.TypeApp
                      Language.PureScript.Environment.tyFunction
                      t1)
                   eta) -}
7e43632077c77373180c2c3d6aac18ae
  initEnvironment :: Language.PureScript.Environment.Environment
  {- Strictness: m,
     Unfolding: (Language.PureScript.Environment.Environment
                   (Data.Map.Internal.Tip
                      @ (Language.PureScript.Names.Qualified
                           Language.PureScript.Names.Ident)
                      @ (Language.PureScript.Types.Type,
                         Language.PureScript.Environment.NameKind,
                         Language.PureScript.Environment.NameVisibility))
                   Language.PureScript.Environment.allPrimTypes
                   (Data.Map.Internal.Tip
                      @ (Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ConstructorName))
                      @ (Language.PureScript.Environment.DataDeclType,
                         Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.TypeName,
                         Language.PureScript.Types.Type, [Language.PureScript.Names.Ident]))
                   (Data.Map.Internal.Tip
                      @ (Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.TypeName))
                      @ ([(Data.Text.Internal.Text,
                           GHC.Base.Maybe Language.PureScript.Kinds.Kind)],
                         Language.PureScript.Types.Type))
                   (Data.Map.Internal.Tip
                      @ (GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                      @ (Data.Map.Internal.Map
                           (Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.ClassName))
                           (Data.Map.Internal.Map
                              (Language.PureScript.Names.Qualified
                                 Language.PureScript.Names.Ident)
                              Language.PureScript.TypeClassDictionaries.NamedDict)))
                   Language.PureScript.Environment.allPrimClasses
                   Language.PureScript.Environment.allPrimKinds) -}
53dcc4a97d90f124266837df07776653
  isFunction :: Language.PureScript.Types.Type -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Types.Type) ->
                 case ds of wild {
                   DEFAULT
                   -> Language.PureScript.Types.$fEqType_$c==
                        Language.PureScript.Environment.tyFunction
                        wild
                   Language.PureScript.Types.TypeApp t2 ds1
                   -> Language.PureScript.Types.$fEqType_$c==
                        Language.PureScript.Environment.tyFunction
                        t2 }) -}
afcc83bd395d23342166dae91ead61de
  isNewtypeConstructor ::
    Language.PureScript.Environment.Environment
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ConstructorName)
    -> GHC.Types.Bool
  {- Arity: 2,
     Strictness: <S(LLSLLLL),1*U(A,A,1*U,A,A,A,A)><S,1*U(1*U,1*U(U,U,U))>,
     Unfolding: InlineRule (2, True, False)
                (\ (e :: Language.PureScript.Environment.Environment)
                   (ctor :: Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.ConstructorName)) ->
                 case e of wild { Language.PureScript.Environment.Environment ds ds1 ds2 ds3 ds4 ds5 ds6 ->
                 case Language.PureScript.Environment.$slookup3
                        @ (Language.PureScript.Environment.DataDeclType,
                           Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.TypeName,
                           Language.PureScript.Types.Type, [Language.PureScript.Names.Ident])
                        ctor
                        ds2 of wild1 {
                   GHC.Base.Nothing
                   -> case Language.PureScript.Environment.isNewtypeConstructor1
                      ret_ty GHC.Types.Bool
                      of {}
                   GHC.Base.Just v
                   -> case v of wild2 { (,,,) ds7 ds8 ds9 ds10 ->
                      case ds7 of wild3 {
                        Language.PureScript.Environment.Data -> GHC.Types.False
                        Language.PureScript.Environment.Newtype
                        -> GHC.Types.True } } } }) -}
132d5204f43d37cdec0e8fe37234733f
  isNewtypeConstructor1 ::
    (Language.PureScript.Environment.DataDeclType,
     Language.PureScript.Names.ProperName
       'Language.PureScript.Names.TypeName,
     Language.PureScript.Types.Type, [Language.PureScript.Names.Ident])
  {- Strictness: x -}
5982f3294c4fad7163229d6e15a9c077
  isObject :: Language.PureScript.Types.Type -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Types.Type) ->
                 case ds of wild {
                   DEFAULT
                   -> Language.PureScript.Types.$fEqType_$c==
                        Language.PureScript.Environment.tyRecord
                        wild
                   Language.PureScript.Types.TypeApp t2 ds1
                   -> Language.PureScript.Types.$fEqType_$c==
                        Language.PureScript.Environment.tyRecord
                        t2 }) -}
e827e2f5497d891cd86927ccea151bc3
  isTypeOrApplied ::
    Language.PureScript.Types.Type
    -> Language.PureScript.Types.Type -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (t1 :: Language.PureScript.Types.Type)
                   (ds :: Language.PureScript.Types.Type) ->
                 case ds of wild {
                   DEFAULT -> Language.PureScript.Types.$fEqType_$c== t1 wild
                   Language.PureScript.Types.TypeApp t2 ds1
                   -> Language.PureScript.Types.$fEqType_$c== t1 t2 }) -}
4e39017ed550ab17b689516d72427a54
  kindConstraint :: Language.PureScript.Kinds.Kind
  {- Strictness: m4,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Environment.kindType -}
8d3eeb04a6fb9c487e0504febd7c5d90
  kindDoc :: Language.PureScript.Kinds.Kind
  {- Strictness: m4,
     Unfolding: (Language.PureScript.Kinds.NamedKind
                   Language.PureScript.Environment.kindDoc1) -}
cd50a949e448460f581a548982254c01
  kindDoc1 ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.KindName)
  {- Strictness: m,
     Unfolding: (Language.PureScript.Names.Qualified
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.KindName)
                   Language.PureScript.Environment.kindDoc3
                   Language.PureScript.Environment.kindDoc2
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.KindName>_P))) -}
f0beebd147275ad44325bea8e3f4a0d1
  kindDoc2 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Constants.doc2) -}
ebabce2f41a841238f022df20acb61cb
  kindDoc3 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ Language.PureScript.Names.ModuleName
                   Language.PureScript.Environment.kindDoc4
                     `cast`
                   (Sym (Language.PureScript.Names.N:ModuleName[0]))) -}
fc954a747f776182e7e67ed3b49d689a
  kindDoc4 ::
    [Language.PureScript.Names.ProperName
       'Language.PureScript.Names.Namespace]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.Namespace)
                   Language.PureScript.Environment.kindDoc7
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.Namespace>_P))
                   Language.PureScript.Environment.kindDoc5) -}
51cca7aa09c376d68e0add44b4a10da8
  kindDoc5 ::
    [Language.PureScript.Names.ProperName
       'Language.PureScript.Names.Namespace]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.Namespace)
                   Language.PureScript.Environment.kindDoc6
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.Namespace>_P))
                   (GHC.Types.[]
                      @ (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.Namespace))) -}
d809fc43d0e44bea6aa5e75c11416bb4
  kindDoc6 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Constants.$bFail7) -}
310c061e6cdb68889a7ebad5de1b89ca
  kindDoc7 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Constants.$bFail9) -}
0eab3c68ecc2c0e02990f5b9ad4ded6d
  kindOrdering :: Language.PureScript.Kinds.Kind
  {- Strictness: m4,
     Unfolding: (Language.PureScript.Kinds.NamedKind
                   Language.PureScript.Environment.kindOrdering1) -}
22a25c51139274bd9e5c9beba1186cb8
  kindOrdering1 ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.KindName)
  {- Strictness: m,
     Unfolding: (Language.PureScript.Names.Qualified
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.KindName)
                   Language.PureScript.Environment.kindOrdering3
                   Language.PureScript.Environment.kindOrdering2
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.KindName>_P))) -}
a38fe18f46ae2225677631a401f8e7ce
  kindOrdering2 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Constants.$bPrimOrdering4) -}
7f28c9862d0eb626690cebda6a609361
  kindOrdering3 ::
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ Language.PureScript.Names.ModuleName
                   Language.PureScript.Environment.kindOrdering4
                     `cast`
                   (Sym (Language.PureScript.Names.N:ModuleName[0]))) -}
81ad14e57d87dfbddd73b8b9d69b9772
  kindOrdering4 ::
    [Language.PureScript.Names.ProperName
       'Language.PureScript.Names.Namespace]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.Namespace)
                   Language.PureScript.Environment.kindDoc7
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.Namespace>_P))
                   Language.PureScript.Environment.kindOrdering5) -}
f071d19e5b572edcae099e23abd252a8
  kindOrdering5 ::
    [Language.PureScript.Names.ProperName
       'Language.PureScript.Names.Namespace]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.Namespace)
                   Language.PureScript.Environment.kindOrdering2
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.Namespace>_P))
                   (GHC.Types.[]
                      @ (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.Namespace))) -}
29c504ca53b9647df562cef5a741ee85
  kindRowList :: Language.PureScript.Kinds.Kind
  {- Strictness: m4,
     Unfolding: (Language.PureScript.Kinds.NamedKind
                   Language.PureScript.Environment.kindRowList1) -}
01819bb62e81fa23aec72a48e2e12ef4
  kindRowList1 ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.KindName)
  {- Strictness: m,
     Unfolding: (Language.PureScript.Names.Qualified
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.KindName)
                   Language.PureScript.Environment.kindRowList3
                   Language.PureScript.Environment.kindRowList2
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.KindName>_P))) -}
c1539a8a40410316f94bfd2806721ef5
  kindRowList2 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Constants.$bPrimRowList4) -}
5b97c2e3d2c6696c6a600b262e85bff2
  kindRowList3 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ Language.PureScript.Names.ModuleName
                   Language.PureScript.Environment.kindRowList4
                     `cast`
                   (Sym (Language.PureScript.Names.N:ModuleName[0]))) -}
9be7f3f9ca0665e9f551509342f0d053
  kindRowList4 ::
    [Language.PureScript.Names.ProperName
       'Language.PureScript.Names.Namespace]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.Namespace)
                   Language.PureScript.Environment.kindDoc7
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.Namespace>_P))
                   Language.PureScript.Environment.kindRowList5) -}
0901dc0f49389e2f3a04548b6908de5e
  kindRowList5 ::
    [Language.PureScript.Names.ProperName
       'Language.PureScript.Names.Namespace]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.Namespace)
                   Language.PureScript.Environment.kindRowList2
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.Namespace>_P))
                   (GHC.Types.[]
                      @ (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.Namespace))) -}
5e5bae75bce85f621af8d6c438ea99d1
  kindSymbol :: Language.PureScript.Kinds.Kind
  {- Strictness: m4,
     Unfolding: (Language.PureScript.Kinds.NamedKind
                   Language.PureScript.Environment.kindSymbol1) -}
d5490eaefb964f42b47bbb0555e2be3e
  kindSymbol1 ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.KindName)
  {- Strictness: m,
     Unfolding: (Language.PureScript.Names.Qualified
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.KindName)
                   Language.PureScript.Environment.kindSymbol3
                   Language.PureScript.Environment.kindSymbol2
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.KindName>_P))) -}
af46959257d376bc9cfaa477beeccd20
  kindSymbol2 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Constants.$bDataSymbol4) -}
c993fc0c7f3d1847403c9e36ae23348f
  kindSymbol3 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ Language.PureScript.Names.ModuleName
                   Language.PureScript.Environment.kindSymbol4
                     `cast`
                   (Sym (Language.PureScript.Names.N:ModuleName[0]))) -}
a87c40df4808e212c5b43bb3ae1d2392
  kindSymbol4 ::
    [Language.PureScript.Names.ProperName
       'Language.PureScript.Names.Namespace]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.Namespace)
                   Language.PureScript.Environment.kindDoc7
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.Namespace>_P))
                   (GHC.Types.[]
                      @ (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.Namespace))) -}
48cea3ba64f9da0332e747a1d7b5f120
  kindType :: Language.PureScript.Kinds.Kind
  {- Strictness: m4,
     Unfolding: (Language.PureScript.Kinds.NamedKind
                   Language.PureScript.Environment.kindType1) -}
43fa7c3e3f8856bd735148368212e1c6
  kindType1 ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.KindName)
  {- Strictness: m,
     Unfolding: (Language.PureScript.Names.Qualified
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.KindName)
                   Language.PureScript.Environment.kindSymbol3
                   Language.PureScript.Environment.kindType2
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.KindName>_P))) -}
3bcfbf96e8b6f5f9a5a4c665795f9803
  kindType2 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Constants.typ2) -}
c291d940fae22a3f1400d8c90f26bdd4
  kinds ::
    Language.PureScript.Environment.Environment
    -> Data.Set.Internal.Set
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.KindName))
  RecSel Left Language.PureScript.Environment.Environment
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLS),1*U(A,A,A,A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Environment.Environment) ->
                 case ds of wild { Language.PureScript.Environment.Environment ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds7 }) -}
81f8444b2ec9974e397ee60b1d03a69a
  lookupConstructor ::
    Language.PureScript.Environment.Environment
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ConstructorName)
    -> (Language.PureScript.Environment.DataDeclType,
        Language.PureScript.Names.ProperName
          'Language.PureScript.Names.TypeName,
        Language.PureScript.Types.Type, [Language.PureScript.Names.Ident])
  {- Arity: 2,
     Strictness: <S(LLSLLLL),1*U(A,A,1*U,A,A,A,A)><S,1*U(1*U,1*U(U,U,U))>,
     Unfolding: InlineRule (2, True, False)
                (\ (env :: Language.PureScript.Environment.Environment)
                   (ctor :: Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.ConstructorName)) ->
                 case env of wild { Language.PureScript.Environment.Environment ds ds1 ds2 ds3 ds4 ds5 ds6 ->
                 case Language.PureScript.Environment.$slookup3
                        @ (Language.PureScript.Environment.DataDeclType,
                           Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.TypeName,
                           Language.PureScript.Types.Type, [Language.PureScript.Names.Ident])
                        ctor
                        ds2 of wild1 {
                   GHC.Base.Nothing
                   -> Language.PureScript.Environment.isNewtypeConstructor1
                   GHC.Base.Just v -> v } }) -}
e819d1e2e9d9d6e2f9b93f0d45945100
  lookupValue ::
    Language.PureScript.Environment.Environment
    -> Language.PureScript.Names.Qualified
         Language.PureScript.Names.Ident
    -> GHC.Base.Maybe
         (Language.PureScript.Types.Type,
          Language.PureScript.Environment.NameKind,
          Language.PureScript.Environment.NameVisibility)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLLLLL),1*U(1*U,A,A,A,A,A,A)><S,1*U(1*U,U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (env :: Language.PureScript.Environment.Environment)
                   (ident :: Language.PureScript.Names.Qualified
                               Language.PureScript.Names.Ident) ->
                 case env of wild { Language.PureScript.Environment.Environment ds ds1 ds2 ds3 ds4 ds5 ds6 ->
                 Language.PureScript.Environment.$slookup1
                   @ (Language.PureScript.Types.Type,
                      Language.PureScript.Environment.NameKind,
                      Language.PureScript.Environment.NameVisibility)
                   ident
                   ds }) -}
042b5db094550bfdec5273875526277b
  makeTypeClassData ::
    [(Data.Text.Internal.Text,
      GHC.Base.Maybe Language.PureScript.Kinds.Kind)]
    -> [(Language.PureScript.Names.Ident,
         Language.PureScript.Types.Type)]
    -> [Language.PureScript.Types.Constraint]
    -> [Language.PureScript.Environment.FunctionalDependency]
    -> Language.PureScript.Environment.TypeClassData
  {- Arity: 4, Strictness: <L,U><L,U><L,U><L,U>m, Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: [(Data.Text.Internal.Text,
                           GHC.Base.Maybe Language.PureScript.Kinds.Kind)])
                   (w1 :: [(Language.PureScript.Names.Ident,
                            Language.PureScript.Types.Type)])
                   (w2 :: [Language.PureScript.Types.Constraint])
                   (w3 :: [Language.PureScript.Environment.FunctionalDependency]) ->
                 case Language.PureScript.Environment.$wmakeTypeClassData
                        w
                        w1
                        w2
                        w3 of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Language.PureScript.Environment.TypeClassData
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
c291d940fae22a3f1400d8c90f26bdd4
  names ::
    Language.PureScript.Environment.Environment
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            Language.PureScript.Names.Ident)
         (Language.PureScript.Types.Type,
          Language.PureScript.Environment.NameKind,
          Language.PureScript.Environment.NameVisibility)
  RecSel Left Language.PureScript.Environment.Environment
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLLLL),1*U(1*U,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Environment.Environment) ->
                 case ds of wild { Language.PureScript.Environment.Environment ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds1 }) -}
e04c0f6927d66c9c5b7003e7d1297414
  primClasses ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName))
      Language.PureScript.Environment.TypeClassData
  {- Unfolding: (Language.PureScript.Environment.$sfromList1
                   @ Language.PureScript.Environment.TypeClassData
                   Language.PureScript.Environment.primClasses1) -}
7ac4e7685adaaafdeaf568fc66a00aec
  primClasses1 ::
    [(Language.PureScript.Names.Qualified
        (Language.PureScript.Names.ProperName
           'Language.PureScript.Names.ClassName),
      Language.PureScript.Environment.TypeClassData)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.Qualified
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.ClassName),
                      Language.PureScript.Environment.TypeClassData)
                   Language.PureScript.Environment.primClasses2
                   (GHC.Types.[]
                      @ (Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ClassName),
                         Language.PureScript.Environment.TypeClassData))) -}
7b9253133f73990d2a2e14aa61735e4c
  primClasses2 ::
    (Language.PureScript.Names.Qualified
       (Language.PureScript.Names.ProperName
          'Language.PureScript.Names.ClassName),
     Language.PureScript.Environment.TypeClassData)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Environment.primClasses4,
                  Language.PureScript.Environment.primClasses3)) -}
8b1f7ccc774b3f86691a8b7a914c849f
  primClasses3 :: Language.PureScript.Environment.TypeClassData
  {- Unfolding: (case Language.PureScript.Environment.$wmakeTypeClassData
                        (GHC.Types.[]
                           @ (Data.Text.Internal.Text,
                              GHC.Base.Maybe Language.PureScript.Kinds.Kind))
                        (GHC.Types.[]
                           @ (Language.PureScript.Names.Ident,
                              Language.PureScript.Types.Type))
                        (GHC.Types.[] @ Language.PureScript.Types.Constraint)
                        (GHC.Types.[]
                           @ Language.PureScript.Environment.FunctionalDependency) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Language.PureScript.Environment.TypeClassData
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
2ece6256bd5f730cb4021d2cff485846
  primClasses4 ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
  {- Strictness: m,
     Unfolding: (Language.PureScript.Names.Qualified
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.ClassName)
                   Language.PureScript.Environment.kindSymbol3
                   Language.PureScript.Environment.primClasses5
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.ClassName>_P))) -}
2a3fa9beccc55febd799f3b17b258a45
  primClasses5 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Environment.primClasses6) -}
7f39734efbdff6901f14145028b5e382
  primClasses6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Partial"#) -}
31c5cca94b391931ca0106474e70be7d
  primKind ::
    Data.Text.Internal.Text -> Language.PureScript.Kinds.Kind
  {- Arity: 1, Strictness: <L,U>m4,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Text.Internal.Text) ->
                 Language.PureScript.Kinds.NamedKind
                   (Language.PureScript.Names.Qualified
                      @ (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.KindName)
                      Language.PureScript.Environment.kindSymbol3
                      x `cast`
                      (Sym (Language.PureScript.Names.N:ProperName[0]
                                <'Language.PureScript.Names.KindName>_P)))) -}
93d7b5a023c5895b45b6ccfee1aea643
  primKinds ::
    Data.Set.Internal.Set
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.KindName))
  {- Unfolding: (Language.PureScript.Environment.$sfromList4
                   Language.PureScript.Environment.primKinds1) -}
b2870dd83526c0722b9b21db8cd66fcf
  primKinds1 ::
    [Language.PureScript.Names.Qualified
       (Language.PureScript.Names.ProperName
          'Language.PureScript.Names.KindName)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.Qualified
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.KindName))
                   Language.PureScript.Environment.kindType1
                   Language.PureScript.Environment.primKinds2) -}
d91213c38eb28b66fa63732c8da6cb50
  primKinds2 ::
    [Language.PureScript.Names.Qualified
       (Language.PureScript.Names.ProperName
          'Language.PureScript.Names.KindName)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.Qualified
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.KindName))
                   Language.PureScript.Environment.kindSymbol1
                   (GHC.Types.[]
                      @ (Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.KindName)))) -}
5e15b9bf36f86eec18f83f0016d9ede9
  primName ::
    Data.Text.Internal.Text
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName a)
  {- Arity: 1, Strictness: <L,U>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ a :: Language.PureScript.Names.ProperNameType
                   (x :: Data.Text.Internal.Text) ->
                 Language.PureScript.Names.Qualified
                   @ (Language.PureScript.Names.ProperName a)
                   Language.PureScript.Environment.kindSymbol3
                   x `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0] <a>_P))) -}
e5df1d43e31326206be7c6b3dbdf5f1d
  primOrderingKinds ::
    Data.Set.Internal.Set
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.KindName))
  {- Unfolding: (Language.PureScript.Environment.$sfromList4
                   Language.PureScript.Environment.primOrderingKinds1) -}
804f5ac59c2211bb4e5c3286f64c3f92
  primOrderingKinds1 ::
    [Language.PureScript.Names.Qualified
       (Language.PureScript.Names.ProperName
          'Language.PureScript.Names.KindName)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.Qualified
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.KindName))
                   Language.PureScript.Environment.kindOrdering1
                   (GHC.Types.[]
                      @ (Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.KindName)))) -}
2a8beee477866e8fe9a77137cd24ca00
  primOrderingTypes ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName))
      (Language.PureScript.Kinds.Kind,
       Language.PureScript.Environment.TypeKind)
  {- Unfolding: (Language.PureScript.Environment.$sfromList
                   @ (Language.PureScript.Kinds.Kind,
                      Language.PureScript.Environment.TypeKind)
                   Language.PureScript.Environment.primOrderingTypes1) -}
36e6a66c60db857a5588ad70443a82ae
  primOrderingTypes1 ::
    [(Language.PureScript.Names.Qualified
        (Language.PureScript.Names.ProperName
           'Language.PureScript.Names.TypeName),
      (Language.PureScript.Kinds.Kind,
       Language.PureScript.Environment.TypeKind))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.Qualified
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.TypeName),
                      (Language.PureScript.Kinds.Kind,
                       Language.PureScript.Environment.TypeKind))
                   Language.PureScript.Environment.primOrderingTypes13
                   Language.PureScript.Environment.primOrderingTypes2) -}
81ecb5075bf867ad2f74b9efece20192
  primOrderingTypes10 ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName)
  {- Strictness: m,
     Unfolding: (Language.PureScript.Names.Qualified
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.TypeName)
                   Language.PureScript.Environment.kindOrdering3
                   Language.PureScript.Environment.primOrderingTypes11
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.TypeName>_P))) -}
f52905a4c0b3f7fcbf37c50b5fe89491
  primOrderingTypes11 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Environment.primOrderingTypes12) -}
1866a0437f874f073390a5e5a80764fa
  primOrderingTypes12 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("EQ"#) -}
cf4eee4ac2601e7b9ae1cd40de9a59e8
  primOrderingTypes13 ::
    (Language.PureScript.Names.Qualified
       (Language.PureScript.Names.ProperName
          'Language.PureScript.Names.TypeName),
     (Language.PureScript.Kinds.Kind,
      Language.PureScript.Environment.TypeKind))
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Environment.primOrderingTypes14,
                  Language.PureScript.Environment.primOrderingTypes5)) -}
16a5c6474db326a1cab7b791dcc8123e
  primOrderingTypes14 ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName)
  {- Strictness: m,
     Unfolding: (Language.PureScript.Names.Qualified
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.TypeName)
                   Language.PureScript.Environment.kindOrdering3
                   Language.PureScript.Environment.primOrderingTypes15
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.TypeName>_P))) -}
18237461b007de7ccfa2c4d44663bd2c
  primOrderingTypes15 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Environment.primOrderingTypes16) -}
a219b6fa217f89bb3383e655050b4336
  primOrderingTypes16 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("LT"#) -}
c69d42a1a47c514c563139c4d656f9a5
  primOrderingTypes2 ::
    [(Language.PureScript.Names.Qualified
        (Language.PureScript.Names.ProperName
           'Language.PureScript.Names.TypeName),
      (Language.PureScript.Kinds.Kind,
       Language.PureScript.Environment.TypeKind))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.Qualified
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.TypeName),
                      (Language.PureScript.Kinds.Kind,
                       Language.PureScript.Environment.TypeKind))
                   Language.PureScript.Environment.primOrderingTypes9
                   Language.PureScript.Environment.primOrderingTypes3) -}
b594f2382f6ae98c00571cb608e68254
  primOrderingTypes3 ::
    [(Language.PureScript.Names.Qualified
        (Language.PureScript.Names.ProperName
           'Language.PureScript.Names.TypeName),
      (Language.PureScript.Kinds.Kind,
       Language.PureScript.Environment.TypeKind))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.Qualified
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.TypeName),
                      (Language.PureScript.Kinds.Kind,
                       Language.PureScript.Environment.TypeKind))
                   Language.PureScript.Environment.primOrderingTypes4
                   (GHC.Types.[]
                      @ (Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.TypeName),
                         (Language.PureScript.Kinds.Kind,
                          Language.PureScript.Environment.TypeKind)))) -}
9f9873d6d87a6f4498e4fe9dcedc1d6f
  primOrderingTypes4 ::
    (Language.PureScript.Names.Qualified
       (Language.PureScript.Names.ProperName
          'Language.PureScript.Names.TypeName),
     (Language.PureScript.Kinds.Kind,
      Language.PureScript.Environment.TypeKind))
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Environment.primOrderingTypes6,
                  Language.PureScript.Environment.primOrderingTypes5)) -}
cb90e3b4f544b7c5e719eb9ccbbc30a4
  primOrderingTypes5 ::
    (Language.PureScript.Kinds.Kind,
     Language.PureScript.Environment.TypeKind)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Environment.kindOrdering,
                  Language.PureScript.Environment.ExternData)) -}
f4f1089b9078dfc5c271a0b98c24d431
  primOrderingTypes6 ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName)
  {- Strictness: m,
     Unfolding: (Language.PureScript.Names.Qualified
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.TypeName)
                   Language.PureScript.Environment.kindOrdering3
                   Language.PureScript.Environment.primOrderingTypes7
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.TypeName>_P))) -}
94d4c97f6226a472051dc39ce82d9632
  primOrderingTypes7 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Environment.primOrderingTypes8) -}
9b3d8e1771cb1bfe7adaca40955168fa
  primOrderingTypes8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("GT"#) -}
30eefa5fd7d84176629ba816b3f2684c
  primOrderingTypes9 ::
    (Language.PureScript.Names.Qualified
       (Language.PureScript.Names.ProperName
          'Language.PureScript.Names.TypeName),
     (Language.PureScript.Kinds.Kind,
      Language.PureScript.Environment.TypeKind))
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Environment.primOrderingTypes10,
                  Language.PureScript.Environment.primOrderingTypes5)) -}
b41eadfae84a641c919e2db41e798c7a
  primRowClasses ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName))
      Language.PureScript.Environment.TypeClassData
  {- Unfolding: (Language.PureScript.Environment.$sfromList1
                   @ Language.PureScript.Environment.TypeClassData
                   Language.PureScript.Environment.primRowClasses1) -}
b54a454815629ea0a878ffce68da2cdf
  primRowClasses1 ::
    [(Language.PureScript.Names.Qualified
        (Language.PureScript.Names.ProperName
           'Language.PureScript.Names.ClassName),
      Language.PureScript.Environment.TypeClassData)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.Qualified
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.ClassName),
                      Language.PureScript.Environment.TypeClassData)
                   Language.PureScript.Environment.primRowClasses51
                   Language.PureScript.Environment.primRowClasses2) -}
7b11b5510cd73acd3644a0d19664d01e
  primRowClasses10 :: [GHC.Types.Int]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Int
                   Language.PureScript.Environment.$fShowEnvironment2
                   Language.PureScript.Environment.primRowClasses11) -}
80bd2d12644d11c593b15169c0415bc8
  primRowClasses11 :: [GHC.Types.Int]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Int
                   Language.PureScript.Environment.primRowClasses12
                   (GHC.Types.[] @ GHC.Types.Int)) -}
fbe2991b66dcb2231a25ca03ed841875
  primRowClasses12 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 3#) -}
61b757e16cbd7679a73baa9cf0403fc8
  primRowClasses13 ::
    Language.PureScript.Environment.FunctionalDependency
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Language.PureScript.Environment.FunctionalDependency
                   Language.PureScript.Environment.primRowClasses14
                   Language.PureScript.Environment.primRowClasses11) -}
e48ceeb1197d0e88fc4e18d179a0fc4b
  primRowClasses14 :: [GHC.Types.Int]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Int
                   Language.PureScript.Environment.$fShowEnvironment2
                   Language.PureScript.Environment.primSymbolClasses62) -}
570c8fec1ff4cd02a8614e8709436f9d
  primRowClasses15 ::
    [(Data.Text.Internal.Text,
      GHC.Base.Maybe Language.PureScript.Kinds.Kind)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text,
                      GHC.Base.Maybe Language.PureScript.Kinds.Kind)
                   Language.PureScript.Environment.primRowClasses24
                   Language.PureScript.Environment.primRowClasses16) -}
cf34482c7e2e2c164bc5680b4951431c
  primRowClasses16 ::
    [(Data.Text.Internal.Text,
      GHC.Base.Maybe Language.PureScript.Kinds.Kind)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text,
                      GHC.Base.Maybe Language.PureScript.Kinds.Kind)
                   Language.PureScript.Environment.primRowClasses20
                   Language.PureScript.Environment.primRowClasses17) -}
4373a76d59fed60d391c4c94a2f08130
  primRowClasses17 ::
    [(Data.Text.Internal.Text,
      GHC.Base.Maybe Language.PureScript.Kinds.Kind)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text,
                      GHC.Base.Maybe Language.PureScript.Kinds.Kind)
                   Language.PureScript.Environment.primRowClasses19
                   Language.PureScript.Environment.primRowClasses18) -}
795f224598ff8c97905e3561dcdf814c
  primRowClasses18 ::
    [(Data.Text.Internal.Text,
      GHC.Base.Maybe Language.PureScript.Kinds.Kind)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text,
                      GHC.Base.Maybe Language.PureScript.Kinds.Kind)
                   Language.PureScript.Environment.primRowListClasses12
                   (GHC.Types.[]
                      @ (Data.Text.Internal.Text,
                         GHC.Base.Maybe Language.PureScript.Kinds.Kind))) -}
9401d524b66931a0826bd2c1e6c53cd9
  primRowClasses19 ::
    (Data.Text.Internal.Text,
     GHC.Base.Maybe Language.PureScript.Kinds.Kind)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Environment.primSymbolClasses23,
                  Language.PureScript.Environment.primRowListClasses13)) -}
eeb38ba63313093039259ca2be4e2f18
  primRowClasses2 ::
    [(Language.PureScript.Names.Qualified
        (Language.PureScript.Names.ProperName
           'Language.PureScript.Names.ClassName),
      Language.PureScript.Environment.TypeClassData)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.Qualified
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.ClassName),
                      Language.PureScript.Environment.TypeClassData)
                   Language.PureScript.Environment.primRowClasses38
                   Language.PureScript.Environment.primRowClasses3) -}
9bdfe0f6c107f3d2e9d82dac87e37c12
  primRowClasses20 ::
    (Data.Text.Internal.Text,
     GHC.Base.Maybe Language.PureScript.Kinds.Kind)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Environment.primRowClasses22,
                  Language.PureScript.Environment.primRowClasses21)) -}
589765c2b5c0682f631bd2ecf345f7e9
  primRowClasses21 :: GHC.Base.Maybe Language.PureScript.Kinds.Kind
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ Language.PureScript.Kinds.Kind
                   Language.PureScript.Environment.kindType) -}
682cfb1d5bc182d192f52319e73ba352
  primRowClasses22 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Environment.primRowClasses23) -}
e0774405240d3276fee084d3b5a89f86
  primRowClasses23 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("a"#) -}
5ab853cbb138aa0b962f2f4bb0a1934f
  primRowClasses24 ::
    (Data.Text.Internal.Text,
     GHC.Base.Maybe Language.PureScript.Kinds.Kind)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Environment.primRowClasses25,
                  Language.PureScript.Environment.primSymbolClasses19)) -}
32ddb8b15cb691538d009cddb989db25
  primRowClasses25 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Environment.primRowClasses26) -}
dc8d2188fda7cf73de4ac33289dbef0d
  primRowClasses26 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("label"#) -}
2c1a7384c88bbe4a7648f21e5df653bc
  primRowClasses27 ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
  {- Strictness: m,
     Unfolding: (Language.PureScript.Names.Qualified
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.ClassName)
                   Language.PureScript.Environment.primRowClasses28
                   Language.PureScript.Environment.primSymbolClasses29
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.ClassName>_P))) -}
c1f1fef830c4f2c8c30d1d0bf3fa94f4
  primRowClasses28 ::
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ Language.PureScript.Names.ModuleName
                   Language.PureScript.Environment.primRowClasses29
                     `cast`
                   (Sym (Language.PureScript.Names.N:ModuleName[0]))) -}
9ba80ac8526abac7dcd723db2bba401a
  primRowClasses29 ::
    [Language.PureScript.Names.ProperName
       'Language.PureScript.Names.Namespace]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.Namespace)
                   Language.PureScript.Environment.kindDoc7
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.Namespace>_P))
                   Language.PureScript.Environment.primRowClasses30) -}
0e513f016de087f949076a4bb0cebad9
  primRowClasses3 ::
    [(Language.PureScript.Names.Qualified
        (Language.PureScript.Names.ProperName
           'Language.PureScript.Names.ClassName),
      Language.PureScript.Environment.TypeClassData)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.Qualified
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.ClassName),
                      Language.PureScript.Environment.TypeClassData)
                   Language.PureScript.Environment.primRowClasses32
                   Language.PureScript.Environment.primRowClasses4) -}
0226677e7951cac7758bc02ca319becc
  primRowClasses30 ::
    [Language.PureScript.Names.ProperName
       'Language.PureScript.Names.Namespace]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.Namespace)
                   Language.PureScript.Environment.primRowClasses31
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.Namespace>_P))
                   (GHC.Types.[]
                      @ (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.Namespace))) -}
e9d54c2341d0049c25c8ec305d8efcbc
  primRowClasses31 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Constants.$bPrimRow4) -}
d95ccb81df3f5307ac9eab165f66f747
  primRowClasses32 ::
    (Language.PureScript.Names.Qualified
       (Language.PureScript.Names.ProperName
          'Language.PureScript.Names.ClassName),
     Language.PureScript.Environment.TypeClassData)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Environment.primRowClasses35,
                  Language.PureScript.Environment.primRowClasses33)) -}
b8470a10fdf2c834881c01e4c7dec095
  primRowClasses33 :: Language.PureScript.Environment.TypeClassData
  {- Unfolding: (case Language.PureScript.Environment.$wmakeTypeClassData
                        Language.PureScript.Environment.primRowClasses34
                        (GHC.Types.[]
                           @ (Language.PureScript.Names.Ident,
                              Language.PureScript.Types.Type))
                        (GHC.Types.[] @ Language.PureScript.Types.Constraint)
                        (GHC.Types.[]
                           @ Language.PureScript.Environment.FunctionalDependency) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Language.PureScript.Environment.TypeClassData
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
749bebf2913c0fcdf2517082f4a8614d
  primRowClasses34 ::
    [(Data.Text.Internal.Text,
      GHC.Base.Maybe Language.PureScript.Kinds.Kind)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text,
                      GHC.Base.Maybe Language.PureScript.Kinds.Kind)
                   Language.PureScript.Environment.primRowClasses24
                   Language.PureScript.Environment.primRowClasses18) -}
656185526f92780239a7c82b6f6797ea
  primRowClasses35 ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
  {- Strictness: m,
     Unfolding: (Language.PureScript.Names.Qualified
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.ClassName)
                   Language.PureScript.Environment.primRowClasses28
                   Language.PureScript.Environment.primRowClasses36
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.ClassName>_P))) -}
a78de40ba930efa2d1fbb7c42ae0e15f
  primRowClasses36 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Environment.primRowClasses37) -}
c8a46db01a2b4fe3ddebfe5e19fb6141
  primRowClasses37 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Lacks"#) -}
b19802c54ed85da90dbdc1b0d67dd006
  primRowClasses38 ::
    (Language.PureScript.Names.Qualified
       (Language.PureScript.Names.ProperName
          'Language.PureScript.Names.ClassName),
     Language.PureScript.Environment.TypeClassData)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Environment.primRowClasses48,
                  Language.PureScript.Environment.primRowClasses39)) -}
dc85e61058bc191abc5a012cad5a2880
  primRowClasses39 :: Language.PureScript.Environment.TypeClassData
  {- Unfolding: (case Language.PureScript.Environment.$wmakeTypeClassData
                        Language.PureScript.Environment.primRowClasses40
                        (GHC.Types.[]
                           @ (Language.PureScript.Names.Ident,
                              Language.PureScript.Types.Type))
                        (GHC.Types.[] @ Language.PureScript.Types.Constraint)
                        Language.PureScript.Environment.primRowListClasses4 of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Language.PureScript.Environment.TypeClassData
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
fab7cea172308b1d88be3ac39fc0a971
  primRowClasses4 ::
    [(Language.PureScript.Names.Qualified
        (Language.PureScript.Names.ProperName
           'Language.PureScript.Names.ClassName),
      Language.PureScript.Environment.TypeClassData)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.Qualified
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.ClassName),
                      Language.PureScript.Environment.TypeClassData)
                   Language.PureScript.Environment.primRowClasses5
                   (GHC.Types.[]
                      @ (Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ClassName),
                         Language.PureScript.Environment.TypeClassData))) -}
7937ce9331146d2016d6fe0f6b29103e
  primRowClasses40 ::
    [(Data.Text.Internal.Text,
      GHC.Base.Maybe Language.PureScript.Kinds.Kind)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text,
                      GHC.Base.Maybe Language.PureScript.Kinds.Kind)
                   Language.PureScript.Environment.primRowClasses45
                   Language.PureScript.Environment.primRowClasses41) -}
407dfa282c0d938c120f98c634c7477b
  primRowClasses41 ::
    [(Data.Text.Internal.Text,
      GHC.Base.Maybe Language.PureScript.Kinds.Kind)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text,
                      GHC.Base.Maybe Language.PureScript.Kinds.Kind)
                   Language.PureScript.Environment.primRowClasses42
                   (GHC.Types.[]
                      @ (Data.Text.Internal.Text,
                         GHC.Base.Maybe Language.PureScript.Kinds.Kind))) -}
a6fdc6214d10b3748824ee911c97cb7b
  primRowClasses42 ::
    (Data.Text.Internal.Text,
     GHC.Base.Maybe Language.PureScript.Kinds.Kind)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Environment.primRowClasses43,
                  Language.PureScript.Environment.primRowListClasses13)) -}
f61ea6700ba318e5cbb24ae76ca4aa36
  primRowClasses43 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Environment.primRowClasses44) -}
c606de7d68d82fe4d52fa1730c856467
  primRowClasses44 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("nubbed"#) -}
ac61af3d85913274ff377940b849ba5a
  primRowClasses45 ::
    (Data.Text.Internal.Text,
     GHC.Base.Maybe Language.PureScript.Kinds.Kind)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Environment.primRowClasses46,
                  Language.PureScript.Environment.primRowListClasses13)) -}
e7d91556b26372a282bc16d646cbca0c
  primRowClasses46 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Environment.primRowClasses47) -}
a4b3fce89ca7e84ab0ba1e142eee99dc
  primRowClasses47 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("original"#) -}
875e2603c5d7b04d553f265d8eb16df5
  primRowClasses48 ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
  {- Strictness: m,
     Unfolding: (Language.PureScript.Names.Qualified
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.ClassName)
                   Language.PureScript.Environment.primRowClasses28
                   Language.PureScript.Environment.primRowClasses49
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.ClassName>_P))) -}
27350a0bce60933f54a323b84a2a1b8f
  primRowClasses49 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Environment.primRowClasses50) -}
b04a7486ce758640edc46bf629a38bed
  primRowClasses5 ::
    (Language.PureScript.Names.Qualified
       (Language.PureScript.Names.ProperName
          'Language.PureScript.Names.ClassName),
     Language.PureScript.Environment.TypeClassData)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Environment.primRowClasses27,
                  Language.PureScript.Environment.primRowClasses6)) -}
47bcb70fb431c9348ea73d613f613c50
  primRowClasses50 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Nub"#) -}
9a78ce511b9e12820106eca3c8a43a90
  primRowClasses51 ::
    (Language.PureScript.Names.Qualified
       (Language.PureScript.Names.ProperName
          'Language.PureScript.Names.ClassName),
     Language.PureScript.Environment.TypeClassData)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Environment.primRowClasses61,
                  Language.PureScript.Environment.primRowClasses52)) -}
32602dc60cf89212ab900d71378de959
  primRowClasses52 :: Language.PureScript.Environment.TypeClassData
  {- Unfolding: (case Language.PureScript.Environment.$wmakeTypeClassData
                        Language.PureScript.Environment.primRowClasses53
                        (GHC.Types.[]
                           @ (Language.PureScript.Names.Ident,
                              Language.PureScript.Types.Type))
                        (GHC.Types.[] @ Language.PureScript.Types.Constraint)
                        Language.PureScript.Environment.primSymbolClasses55 of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Language.PureScript.Environment.TypeClassData
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
0cc095925d7d0353af860020d2378182
  primRowClasses53 ::
    [(Data.Text.Internal.Text,
      GHC.Base.Maybe Language.PureScript.Kinds.Kind)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text,
                      GHC.Base.Maybe Language.PureScript.Kinds.Kind)
                   Language.PureScript.Environment.primRowClasses60
                   Language.PureScript.Environment.primRowClasses54) -}
035f764e844b3115ce16d022b34d09bd
  primRowClasses54 ::
    [(Data.Text.Internal.Text,
      GHC.Base.Maybe Language.PureScript.Kinds.Kind)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text,
                      GHC.Base.Maybe Language.PureScript.Kinds.Kind)
                   Language.PureScript.Environment.primRowClasses59
                   Language.PureScript.Environment.primRowClasses55) -}
d44283e2c8521b09629077c36e26965f
  primRowClasses55 ::
    [(Data.Text.Internal.Text,
      GHC.Base.Maybe Language.PureScript.Kinds.Kind)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text,
                      GHC.Base.Maybe Language.PureScript.Kinds.Kind)
                   Language.PureScript.Environment.primRowClasses56
                   (GHC.Types.[]
                      @ (Data.Text.Internal.Text,
                         GHC.Base.Maybe Language.PureScript.Kinds.Kind))) -}
7ac871ce2b9f1a776efc46128924bf97
  primRowClasses56 ::
    (Data.Text.Internal.Text,
     GHC.Base.Maybe Language.PureScript.Kinds.Kind)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Environment.primRowClasses57,
                  Language.PureScript.Environment.primRowListClasses13)) -}
ce4d6144d1b2cd507bac37a933a4fcd0
  primRowClasses57 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Environment.primRowClasses58) -}
4b6d103909e8a41c0bd1f5d486a1664a
  primRowClasses58 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("union"#) -}
d85baddf291dc0778a2cb4f1c3778298
  primRowClasses59 ::
    (Data.Text.Internal.Text,
     GHC.Base.Maybe Language.PureScript.Kinds.Kind)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Environment.primSymbolClasses45,
                  Language.PureScript.Environment.primRowListClasses13)) -}
2ca6d765da752ab6ec5732964262792f
  primRowClasses6 :: Language.PureScript.Environment.TypeClassData
  {- Unfolding: (case Language.PureScript.Environment.$wmakeTypeClassData
                        Language.PureScript.Environment.primRowClasses15
                        (GHC.Types.[]
                           @ (Language.PureScript.Names.Ident,
                              Language.PureScript.Types.Type))
                        (GHC.Types.[] @ Language.PureScript.Types.Constraint)
                        Language.PureScript.Environment.primRowClasses7 of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Language.PureScript.Environment.TypeClassData
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
2201bd739cf59920603723456783b2a5
  primRowClasses60 ::
    (Data.Text.Internal.Text,
     GHC.Base.Maybe Language.PureScript.Kinds.Kind)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Environment.primSymbolClasses48,
                  Language.PureScript.Environment.primRowListClasses13)) -}
66af66beb8f3ea296ceb97d942becebc
  primRowClasses61 ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
  {- Strictness: m,
     Unfolding: (Language.PureScript.Names.Qualified
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.ClassName)
                   Language.PureScript.Environment.primRowClasses28
                   Language.PureScript.Environment.primRowClasses62
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.ClassName>_P))) -}
df8a7b2f5e2245048c88f657072d38e0
  primRowClasses62 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Environment.primRowClasses63) -}
353e3f7a8c2cec394d8c9713279a14f6
  primRowClasses63 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Union"#) -}
214d9342845e08ba6a3ab0a5d448f67e
  primRowClasses7 ::
    [Language.PureScript.Environment.FunctionalDependency]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Language.PureScript.Environment.FunctionalDependency
                   Language.PureScript.Environment.primRowClasses13
                   Language.PureScript.Environment.primRowClasses8) -}
4cbcbaa51e7b02279f17e9bbe0942d30
  primRowClasses8 ::
    [Language.PureScript.Environment.FunctionalDependency]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Language.PureScript.Environment.FunctionalDependency
                   Language.PureScript.Environment.primRowClasses9
                   (GHC.Types.[]
                      @ Language.PureScript.Environment.FunctionalDependency)) -}
bdaeeb7306048522d0a4632ed7391ee9
  primRowClasses9 ::
    Language.PureScript.Environment.FunctionalDependency
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Language.PureScript.Environment.FunctionalDependency
                   Language.PureScript.Environment.primRowClasses10
                   Language.PureScript.Environment.primSymbolClasses62) -}
4e5c034b17f2d0f499462e58c15b9e77
  primRowListClasses ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName))
      Language.PureScript.Environment.TypeClassData
  {- Unfolding: (Language.PureScript.Environment.$sfromList1
                   @ Language.PureScript.Environment.TypeClassData
                   Language.PureScript.Environment.primRowListClasses1) -}
eff070fa18ee4294c9a9830246d7ddf4
  primRowListClasses1 ::
    [(Language.PureScript.Names.Qualified
        (Language.PureScript.Names.ProperName
           'Language.PureScript.Names.ClassName),
      Language.PureScript.Environment.TypeClassData)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.Qualified
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.ClassName),
                      Language.PureScript.Environment.TypeClassData)
                   Language.PureScript.Environment.primRowListClasses2
                   (GHC.Types.[]
                      @ (Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ClassName),
                         Language.PureScript.Environment.TypeClassData))) -}
bce968acecc7cc8f6c9baa9ca0617796
  primRowListClasses10 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Environment.primRowListClasses11) -}
0f16a782b5c776cc8710e30ec31cf25e
  primRowListClasses11 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("list"#) -}
5471c4f1d4116ec5a5762eca20aa6072
  primRowListClasses12 ::
    (Data.Text.Internal.Text,
     GHC.Base.Maybe Language.PureScript.Kinds.Kind)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Environment.primRowListClasses15,
                  Language.PureScript.Environment.primRowListClasses13)) -}
c7973285408e3f9f4757653aef838f73
  primRowListClasses13 ::
    GHC.Base.Maybe Language.PureScript.Kinds.Kind
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ Language.PureScript.Kinds.Kind
                   Language.PureScript.Environment.primRowListClasses14) -}
60874845c805e754c59d9a756f00e7bd
  primRowListClasses14 :: Language.PureScript.Kinds.Kind
  {- Strictness: m2,
     Unfolding: (Language.PureScript.Kinds.Row
                   Language.PureScript.Environment.kindType) -}
55ff72ae4fc3de4b92571bc03427bc6b
  primRowListClasses15 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Environment.primRowListClasses16) -}
0f73bacc6e04b8c279c3200b1df21bd6
  primRowListClasses16 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("row"#) -}
4b00bc2e9b89a027c576bd20214c10b3
  primRowListClasses17 ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
  {- Strictness: m,
     Unfolding: (Language.PureScript.Names.Qualified
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.ClassName)
                   Language.PureScript.Environment.kindRowList3
                   Language.PureScript.Environment.primRowListClasses18
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.ClassName>_P))) -}
649c3c7296e8b450a93b09a60c1e70b4
  primRowListClasses18 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Environment.primRowListClasses19) -}
bdbf6148fddf706837febef292bdb115
  primRowListClasses19 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("RowToList"#) -}
541f04021f246bbe2dd8ae0f33c843bd
  primRowListClasses2 ::
    (Language.PureScript.Names.Qualified
       (Language.PureScript.Names.ProperName
          'Language.PureScript.Names.ClassName),
     Language.PureScript.Environment.TypeClassData)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Environment.primRowListClasses17,
                  Language.PureScript.Environment.primRowListClasses3)) -}
24450506858072508ce6485df3ef9e55
  primRowListClasses3 ::
    Language.PureScript.Environment.TypeClassData
  {- Unfolding: (case Language.PureScript.Environment.$wmakeTypeClassData
                        Language.PureScript.Environment.primRowListClasses6
                        (GHC.Types.[]
                           @ (Language.PureScript.Names.Ident,
                              Language.PureScript.Types.Type))
                        (GHC.Types.[] @ Language.PureScript.Types.Constraint)
                        Language.PureScript.Environment.primRowListClasses4 of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Language.PureScript.Environment.TypeClassData
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
8f8580ace371c5bc3afbf26cda75bcf2
  primRowListClasses4 ::
    [Language.PureScript.Environment.FunctionalDependency]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Language.PureScript.Environment.FunctionalDependency
                   Language.PureScript.Environment.primRowListClasses5
                   (GHC.Types.[]
                      @ Language.PureScript.Environment.FunctionalDependency)) -}
d065268f12daf83bcb95365206402461
  primRowListClasses5 ::
    Language.PureScript.Environment.FunctionalDependency
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Language.PureScript.Environment.FunctionalDependency
                   Language.PureScript.Environment.primSymbolClasses60
                   Language.PureScript.Environment.primSymbolClasses10) -}
15755f05298fa1c38c619a870e24ad23
  primRowListClasses6 ::
    [(Data.Text.Internal.Text,
      GHC.Base.Maybe Language.PureScript.Kinds.Kind)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text,
                      GHC.Base.Maybe Language.PureScript.Kinds.Kind)
                   Language.PureScript.Environment.primRowListClasses12
                   Language.PureScript.Environment.primRowListClasses7) -}
f6b0112ede0277536d9bf62c77bba0a9
  primRowListClasses7 ::
    [(Data.Text.Internal.Text,
      GHC.Base.Maybe Language.PureScript.Kinds.Kind)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text,
                      GHC.Base.Maybe Language.PureScript.Kinds.Kind)
                   Language.PureScript.Environment.primRowListClasses8
                   (GHC.Types.[]
                      @ (Data.Text.Internal.Text,
                         GHC.Base.Maybe Language.PureScript.Kinds.Kind))) -}
69bffb97f1f4b56f5bfe81af132c906a
  primRowListClasses8 ::
    (Data.Text.Internal.Text,
     GHC.Base.Maybe Language.PureScript.Kinds.Kind)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Environment.primRowListClasses10,
                  Language.PureScript.Environment.primRowListClasses9)) -}
71d521e19cec1f6e1220905be59a70b1
  primRowListClasses9 ::
    GHC.Base.Maybe Language.PureScript.Kinds.Kind
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ Language.PureScript.Kinds.Kind
                   Language.PureScript.Environment.kindRowList) -}
ee3d1153e5d4b329818e5bf0301ad7ae
  primRowListKinds ::
    Data.Set.Internal.Set
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.KindName))
  {- Unfolding: (Language.PureScript.Environment.$sfromList4
                   Language.PureScript.Environment.primRowListKinds1) -}
6ae2920caf0f98e76b5e91f4a92a1932
  primRowListKinds1 ::
    [Language.PureScript.Names.Qualified
       (Language.PureScript.Names.ProperName
          'Language.PureScript.Names.KindName)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.Qualified
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.KindName))
                   Language.PureScript.Environment.kindRowList1
                   (GHC.Types.[]
                      @ (Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.KindName)))) -}
482236308086237752c5d1b4cfb30446
  primRowListTypes ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName))
      (Language.PureScript.Kinds.Kind,
       Language.PureScript.Environment.TypeKind)
  {- Unfolding: (Language.PureScript.Environment.$sfromList
                   @ (Language.PureScript.Kinds.Kind,
                      Language.PureScript.Environment.TypeKind)
                   Language.PureScript.Environment.primRowListTypes1) -}
75e849081023d50b7822115d0f789ea4
  primRowListTypes1 ::
    [(Language.PureScript.Names.Qualified
        (Language.PureScript.Names.ProperName
           'Language.PureScript.Names.TypeName),
      (Language.PureScript.Kinds.Kind,
       Language.PureScript.Environment.TypeKind))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.Qualified
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.TypeName),
                      (Language.PureScript.Kinds.Kind,
                       Language.PureScript.Environment.TypeKind))
                   Language.PureScript.Environment.primRowListTypes14
                   Language.PureScript.Environment.primRowListTypes2) -}
7412459358002abc4e436901cdbc6e96
  primRowListTypes10 ::
    (Language.PureScript.Kinds.Kind,
     Language.PureScript.Environment.TypeKind)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Environment.kindRowList,
                  Language.PureScript.Environment.ExternData)) -}
9c90d6ea3e859203251cc18050b6aadd
  primRowListTypes11 ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName)
  {- Strictness: m,
     Unfolding: (Language.PureScript.Names.Qualified
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.TypeName)
                   Language.PureScript.Environment.kindRowList3
                   Language.PureScript.Environment.primRowListTypes12
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.TypeName>_P))) -}
7ad525e7ca88a54adb98dec7b5c5a3f1
  primRowListTypes12 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Environment.primRowListTypes13) -}
1f541f46484bb8e190efb45404c71c66
  primRowListTypes13 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Nil"#) -}
79dc529fe50be1bee98c30fad367000e
  primRowListTypes14 ::
    (Language.PureScript.Names.Qualified
       (Language.PureScript.Names.ProperName
          'Language.PureScript.Names.TypeName),
     (Language.PureScript.Kinds.Kind,
      Language.PureScript.Environment.TypeKind))
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Environment.primRowListTypes19,
                  Language.PureScript.Environment.primRowListTypes15)) -}
5be08a823b7da7b0bf6db34fb2c73883
  primRowListTypes15 ::
    (Language.PureScript.Kinds.Kind,
     Language.PureScript.Environment.TypeKind)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Environment.primRowListTypes16,
                  Language.PureScript.Environment.ExternData)) -}
775cc97bfaf62839c28e5e09a4df5a00
  primRowListTypes16 :: Language.PureScript.Kinds.Kind
  {- Strictness: m3,
     Unfolding: (Language.PureScript.Kinds.FunKind
                   Language.PureScript.Environment.kindSymbol
                   Language.PureScript.Environment.primRowListTypes17) -}
9c3975e472e2f9cfba4ea81170dffb2f
  primRowListTypes17 :: Language.PureScript.Kinds.Kind
  {- Strictness: m3,
     Unfolding: (Language.PureScript.Kinds.FunKind
                   Language.PureScript.Environment.kindType
                   Language.PureScript.Environment.primRowListTypes18) -}
cd3571e2b4afca2a7c2e4a9d6bd52cd3
  primRowListTypes18 :: Language.PureScript.Kinds.Kind
  {- Strictness: m3,
     Unfolding: (Language.PureScript.Kinds.FunKind
                   Language.PureScript.Environment.kindRowList
                   Language.PureScript.Environment.kindRowList) -}
6b20962efecb1b82c23601a8cdd6e762
  primRowListTypes19 ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName)
  {- Strictness: m,
     Unfolding: (Language.PureScript.Names.Qualified
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.TypeName)
                   Language.PureScript.Environment.kindRowList3
                   Language.PureScript.Environment.primSymbolClasses29
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.TypeName>_P))) -}
f971985b9463a47300d42c5a78982e2a
  primRowListTypes2 ::
    [(Language.PureScript.Names.Qualified
        (Language.PureScript.Names.ProperName
           'Language.PureScript.Names.TypeName),
      (Language.PureScript.Kinds.Kind,
       Language.PureScript.Environment.TypeKind))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.Qualified
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.TypeName),
                      (Language.PureScript.Kinds.Kind,
                       Language.PureScript.Environment.TypeKind))
                   Language.PureScript.Environment.primRowListTypes9
                   Language.PureScript.Environment.primRowListTypes3) -}
2c0027e14cdae0778a4d51925aeab27c
  primRowListTypes3 ::
    [(Language.PureScript.Names.Qualified
        (Language.PureScript.Names.ProperName
           'Language.PureScript.Names.TypeName),
      (Language.PureScript.Kinds.Kind,
       Language.PureScript.Environment.TypeKind))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.Qualified
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.TypeName),
                      (Language.PureScript.Kinds.Kind,
                       Language.PureScript.Environment.TypeKind))
                   Language.PureScript.Environment.primRowListTypes4
                   (GHC.Types.[]
                      @ (Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.TypeName),
                         (Language.PureScript.Kinds.Kind,
                          Language.PureScript.Environment.TypeKind)))) -}
ef777a0148371974484f08eb9a3dff94
  primRowListTypes4 ::
    (Language.PureScript.Names.Qualified
       (Language.PureScript.Names.ProperName
          'Language.PureScript.Names.TypeName),
     (Language.PureScript.Kinds.Kind,
      Language.PureScript.Environment.TypeKind))
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Environment.primRowListTypes8,
                  Language.PureScript.Environment.primRowListTypes5)) -}
bfef257384628a600dc2d679e36556d4
  primRowListTypes5 ::
    (Language.PureScript.Kinds.Kind,
     Language.PureScript.Environment.TypeKind)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Environment.primRowListTypes6,
                  Language.PureScript.Environment.ExternData)) -}
e7088fb4e96372064fd21f7d27db88e1
  primRowListTypes6 :: Language.PureScript.Kinds.Kind
  {- Strictness: m3,
     Unfolding: (Language.PureScript.Kinds.FunKind
                   Language.PureScript.Environment.primRowListClasses14
                   Language.PureScript.Environment.primRowListTypes7) -}
03ace8aed19ebf0cf41e102b6f84ba93
  primRowListTypes7 :: Language.PureScript.Kinds.Kind
  {- Strictness: m3,
     Unfolding: (Language.PureScript.Kinds.FunKind
                   Language.PureScript.Environment.kindRowList
                   Language.PureScript.Environment.kindType) -}
f939967bb3acf9ea0a7e7747a662c858
  primRowListTypes8 ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName)
  {- Strictness: m,
     Unfolding: (Language.PureScript.Names.Qualified
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.TypeName)
                   Language.PureScript.Environment.kindRowList3
                   Language.PureScript.Environment.primRowListClasses18
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.TypeName>_P))) -}
5ae37fcfd1f52444f54286b815d3fdde
  primRowListTypes9 ::
    (Language.PureScript.Names.Qualified
       (Language.PureScript.Names.ProperName
          'Language.PureScript.Names.TypeName),
     (Language.PureScript.Kinds.Kind,
      Language.PureScript.Environment.TypeKind))
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Environment.primRowListTypes11,
                  Language.PureScript.Environment.primRowListTypes10)) -}
1695b971680ee9f603db85cfecb73d0b
  primRowTypes ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName))
      (Language.PureScript.Kinds.Kind,
       Language.PureScript.Environment.TypeKind)
  {- Unfolding: (Language.PureScript.Environment.$sfromList
                   @ (Language.PureScript.Kinds.Kind,
                      Language.PureScript.Environment.TypeKind)
                   Language.PureScript.Environment.primRowTypes1) -}
1ad23e57c77c36e796ec29d4fdb7847c
  primRowTypes1 ::
    [(Language.PureScript.Names.Qualified
        (Language.PureScript.Names.ProperName
           'Language.PureScript.Names.TypeName),
      (Language.PureScript.Kinds.Kind,
       Language.PureScript.Environment.TypeKind))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.Qualified
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.TypeName),
                      (Language.PureScript.Kinds.Kind,
                       Language.PureScript.Environment.TypeKind))
                   Language.PureScript.Environment.primRowTypes19
                   Language.PureScript.Environment.primRowTypes2) -}
c3254e1ae90fcce323037fc6fda6138d
  primRowTypes10 :: Language.PureScript.Kinds.Kind
  {- Strictness: m3,
     Unfolding: (Language.PureScript.Kinds.FunKind
                   Language.PureScript.Environment.primRowListClasses14
                   Language.PureScript.Environment.kindType) -}
e369d4e4159187cca0f1acd07f75c51b
  primRowTypes11 ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName)
  {- Strictness: m,
     Unfolding: (Language.PureScript.Names.Qualified
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.TypeName)
                   Language.PureScript.Environment.primRowClasses28
                   Language.PureScript.Environment.primSymbolClasses29
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.TypeName>_P))) -}
b479e93b0f1f98a0cda7fd552dce1fc0
  primRowTypes12 ::
    (Language.PureScript.Names.Qualified
       (Language.PureScript.Names.ProperName
          'Language.PureScript.Names.TypeName),
     (Language.PureScript.Kinds.Kind,
      Language.PureScript.Environment.TypeKind))
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Environment.primRowTypes15,
                  Language.PureScript.Environment.primRowTypes13)) -}
4cabdc0d96b076bea843c3bb576edf5e
  primRowTypes13 ::
    (Language.PureScript.Kinds.Kind,
     Language.PureScript.Environment.TypeKind)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Environment.primRowTypes14,
                  Language.PureScript.Environment.ExternData)) -}
154a797bca3df3436267a8a21aa8aca1
  primRowTypes14 :: Language.PureScript.Kinds.Kind
  {- Strictness: m3,
     Unfolding: (Language.PureScript.Kinds.FunKind
                   Language.PureScript.Environment.kindSymbol
                   Language.PureScript.Environment.primRowTypes10) -}
7aebecbd03659410d4dbc393056b1bb8
  primRowTypes15 ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName)
  {- Strictness: m,
     Unfolding: (Language.PureScript.Names.Qualified
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.TypeName)
                   Language.PureScript.Environment.primRowClasses28
                   Language.PureScript.Environment.primRowClasses36
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.TypeName>_P))) -}
76b50a164a1d199582da2d8a9d871a9b
  primRowTypes16 ::
    (Language.PureScript.Names.Qualified
       (Language.PureScript.Names.ProperName
          'Language.PureScript.Names.TypeName),
     (Language.PureScript.Kinds.Kind,
      Language.PureScript.Environment.TypeKind))
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Environment.primRowTypes18,
                  Language.PureScript.Environment.primRowTypes17)) -}
c6ea0b008b754fe971f36cd085caf511
  primRowTypes17 ::
    (Language.PureScript.Kinds.Kind,
     Language.PureScript.Environment.TypeKind)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Environment.primRowTypes9,
                  Language.PureScript.Environment.ExternData)) -}
a6e6b62b78251a0ca6fe7b469c8ce784
  primRowTypes18 ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName)
  {- Strictness: m,
     Unfolding: (Language.PureScript.Names.Qualified
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.TypeName)
                   Language.PureScript.Environment.primRowClasses28
                   Language.PureScript.Environment.primRowClasses49
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.TypeName>_P))) -}
c778210fdad08f8222376f32f99085e5
  primRowTypes19 ::
    (Language.PureScript.Names.Qualified
       (Language.PureScript.Names.ProperName
          'Language.PureScript.Names.TypeName),
     (Language.PureScript.Kinds.Kind,
      Language.PureScript.Environment.TypeKind))
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Environment.primRowTypes22,
                  Language.PureScript.Environment.primRowTypes20)) -}
1f544fd0bd9d37aa759bb9a95dee3cad
  primRowTypes2 ::
    [(Language.PureScript.Names.Qualified
        (Language.PureScript.Names.ProperName
           'Language.PureScript.Names.TypeName),
      (Language.PureScript.Kinds.Kind,
       Language.PureScript.Environment.TypeKind))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.Qualified
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.TypeName),
                      (Language.PureScript.Kinds.Kind,
                       Language.PureScript.Environment.TypeKind))
                   Language.PureScript.Environment.primRowTypes16
                   Language.PureScript.Environment.primRowTypes3) -}
4226c5fb645519482723da7318643642
  primRowTypes20 ::
    (Language.PureScript.Kinds.Kind,
     Language.PureScript.Environment.TypeKind)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Environment.primRowTypes21,
                  Language.PureScript.Environment.ExternData)) -}
4fa8c5d405af68bf955f0c9cf8bfd4a1
  primRowTypes21 :: Language.PureScript.Kinds.Kind
  {- Strictness: m3,
     Unfolding: (Language.PureScript.Kinds.FunKind
                   Language.PureScript.Environment.primRowListClasses14
                   Language.PureScript.Environment.primRowTypes9) -}
dd709f7bc9c27ae125c161756fa352e0
  primRowTypes22 ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName)
  {- Strictness: m,
     Unfolding: (Language.PureScript.Names.Qualified
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.TypeName)
                   Language.PureScript.Environment.primRowClasses28
                   Language.PureScript.Environment.primRowClasses62
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.TypeName>_P))) -}
840d35c2669a25002686537efa590d80
  primRowTypes3 ::
    [(Language.PureScript.Names.Qualified
        (Language.PureScript.Names.ProperName
           'Language.PureScript.Names.TypeName),
      (Language.PureScript.Kinds.Kind,
       Language.PureScript.Environment.TypeKind))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.Qualified
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.TypeName),
                      (Language.PureScript.Kinds.Kind,
                       Language.PureScript.Environment.TypeKind))
                   Language.PureScript.Environment.primRowTypes12
                   Language.PureScript.Environment.primRowTypes4) -}
7eb4da610bd913d588717797d223c7a7
  primRowTypes4 ::
    [(Language.PureScript.Names.Qualified
        (Language.PureScript.Names.ProperName
           'Language.PureScript.Names.TypeName),
      (Language.PureScript.Kinds.Kind,
       Language.PureScript.Environment.TypeKind))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.Qualified
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.TypeName),
                      (Language.PureScript.Kinds.Kind,
                       Language.PureScript.Environment.TypeKind))
                   Language.PureScript.Environment.primRowTypes5
                   (GHC.Types.[]
                      @ (Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.TypeName),
                         (Language.PureScript.Kinds.Kind,
                          Language.PureScript.Environment.TypeKind)))) -}
f4dcf27ce0e7580151e2a9e2aea4fb61
  primRowTypes5 ::
    (Language.PureScript.Names.Qualified
       (Language.PureScript.Names.ProperName
          'Language.PureScript.Names.TypeName),
     (Language.PureScript.Kinds.Kind,
      Language.PureScript.Environment.TypeKind))
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Environment.primRowTypes11,
                  Language.PureScript.Environment.primRowTypes6)) -}
5dc7b2e001d5589d37c565e9702dbad9
  primRowTypes6 ::
    (Language.PureScript.Kinds.Kind,
     Language.PureScript.Environment.TypeKind)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Environment.primRowTypes7,
                  Language.PureScript.Environment.ExternData)) -}
311262abafdeb4c762e58f37b3ed1449
  primRowTypes7 :: Language.PureScript.Kinds.Kind
  {- Strictness: m3,
     Unfolding: (Language.PureScript.Kinds.FunKind
                   Language.PureScript.Environment.kindSymbol
                   Language.PureScript.Environment.primRowTypes8) -}
0fd810e018429312c7f0a0007c445ab0
  primRowTypes8 :: Language.PureScript.Kinds.Kind
  {- Strictness: m3,
     Unfolding: (Language.PureScript.Kinds.FunKind
                   Language.PureScript.Environment.kindType
                   Language.PureScript.Environment.primRowTypes9) -}
053cbccd07dad5fb9ebb93b7b5ae4aba
  primRowTypes9 :: Language.PureScript.Kinds.Kind
  {- Strictness: m3,
     Unfolding: (Language.PureScript.Kinds.FunKind
                   Language.PureScript.Environment.primRowListClasses14
                   Language.PureScript.Environment.primRowTypes10) -}
6547bd58fea393228c77de14b023f274
  primSubKind ::
    Data.Text.Internal.Text
    -> Data.Text.Internal.Text -> Language.PureScript.Kinds.Kind
  {- Arity: 2, Strictness: <L,U><L,U>m4,
     Unfolding: InlineRule (2, True, False)
                (\ (sub :: Data.Text.Internal.Text)
                   (eta :: Data.Text.Internal.Text) ->
                 Language.PureScript.Kinds.NamedKind
                   (Language.PureScript.Names.Qualified
                      @ (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.KindName)
                      (GHC.Base.Just
                         @ Language.PureScript.Names.ModuleName
                         (GHC.Types.:
                            @ (Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.Namespace)
                            Language.PureScript.Environment.kindDoc7
                              `cast`
                            (Sym (Language.PureScript.Names.N:ProperName[0]
                                      <'Language.PureScript.Names.Namespace>_P))
                            (GHC.Types.:
                               @ (Language.PureScript.Names.ProperName
                                    'Language.PureScript.Names.Namespace)
                               sub
                                 `cast`
                               (Sym (Language.PureScript.Names.N:ProperName[0]
                                         <'Language.PureScript.Names.Namespace>_P))
                               (GHC.Types.[]
                                  @ (Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.Namespace))))
                           `cast`
                         (Sym (Language.PureScript.Names.N:ModuleName[0])))
                      eta
                        `cast`
                      (Sym (Language.PureScript.Names.N:ProperName[0]
                                <'Language.PureScript.Names.KindName>_P)))) -}
3d90bbc2bc70b1d013f6cebe8acaa937
  primSubName ::
    Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName a)
  {- Arity: 2, Strictness: <L,U><L,U>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ a :: Language.PureScript.Names.ProperNameType
                   (sub :: Data.Text.Internal.Text)
                   (eta :: Data.Text.Internal.Text) ->
                 Language.PureScript.Names.Qualified
                   @ (Language.PureScript.Names.ProperName a)
                   (GHC.Base.Just
                      @ Language.PureScript.Names.ModuleName
                      (GHC.Types.:
                         @ (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.Namespace)
                         Language.PureScript.Environment.kindDoc7
                           `cast`
                         (Sym (Language.PureScript.Names.N:ProperName[0]
                                   <'Language.PureScript.Names.Namespace>_P))
                         (GHC.Types.:
                            @ (Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.Namespace)
                            sub
                              `cast`
                            (Sym (Language.PureScript.Names.N:ProperName[0]
                                      <'Language.PureScript.Names.Namespace>_P))
                            (GHC.Types.[]
                               @ (Language.PureScript.Names.ProperName
                                    'Language.PureScript.Names.Namespace))))
                        `cast`
                      (Sym (Language.PureScript.Names.N:ModuleName[0])))
                   eta
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0] <a>_P))) -}
81ba1c8bd931e153acae374abd41ad87
  primSymbolClasses ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName))
      Language.PureScript.Environment.TypeClassData
  {- Unfolding: (Language.PureScript.Environment.$sfromList1
                   @ Language.PureScript.Environment.TypeClassData
                   Language.PureScript.Environment.primSymbolClasses1) -}
87a977ddc71b3637fd980e51e86b919c
  primSymbolClasses1 ::
    [(Language.PureScript.Names.Qualified
        (Language.PureScript.Names.ProperName
           'Language.PureScript.Names.ClassName),
      Language.PureScript.Environment.TypeClassData)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.Qualified
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.ClassName),
                      Language.PureScript.Environment.TypeClassData)
                   Language.PureScript.Environment.primSymbolClasses53
                   Language.PureScript.Environment.primSymbolClasses2) -}
9d2351905a2b246564e7756205b9920a
  primSymbolClasses10 :: [GHC.Types.Int]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Int
                   Language.PureScript.Environment.primSymbolClasses11
                   (GHC.Types.[] @ GHC.Types.Int)) -}
5c8752ce68da3b00b8720f0d7e6855eb
  primSymbolClasses11 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
e3846afebb2211f2170e87ca25a8ab9c
  primSymbolClasses12 :: [GHC.Types.Int]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Int
                   Language.PureScript.Environment.primSymbolClasses13
                   (GHC.Types.[] @ GHC.Types.Int)) -}
60778c5a8e164e6aaa00932be4a10331
  primSymbolClasses13 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 2#) -}
1d66d38c066fbcf10c6e5f946c0a177b
  primSymbolClasses14 ::
    Language.PureScript.Environment.FunctionalDependency
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Language.PureScript.Environment.FunctionalDependency
                   Language.PureScript.Environment.primSymbolClasses9
                   Language.PureScript.Environment.primSymbolClasses12) -}
0e87a8270fcc71c39201ed6921815517
  primSymbolClasses15 ::
    [(Data.Text.Internal.Text,
      GHC.Base.Maybe Language.PureScript.Kinds.Kind)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text,
                      GHC.Base.Maybe Language.PureScript.Kinds.Kind)
                   Language.PureScript.Environment.primSymbolClasses25
                   Language.PureScript.Environment.primSymbolClasses16) -}
b893ff87bfb2272aa2311d12f0057ac8
  primSymbolClasses16 ::
    [(Data.Text.Internal.Text,
      GHC.Base.Maybe Language.PureScript.Kinds.Kind)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text,
                      GHC.Base.Maybe Language.PureScript.Kinds.Kind)
                   Language.PureScript.Environment.primSymbolClasses22
                   Language.PureScript.Environment.primSymbolClasses17) -}
1bafc280b70d335d102b95a9dc3004ec
  primSymbolClasses17 ::
    [(Data.Text.Internal.Text,
      GHC.Base.Maybe Language.PureScript.Kinds.Kind)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text,
                      GHC.Base.Maybe Language.PureScript.Kinds.Kind)
                   Language.PureScript.Environment.primSymbolClasses18
                   (GHC.Types.[]
                      @ (Data.Text.Internal.Text,
                         GHC.Base.Maybe Language.PureScript.Kinds.Kind))) -}
0180fb92cc5f24d2fab7717d646aec86
  primSymbolClasses18 ::
    (Data.Text.Internal.Text,
     GHC.Base.Maybe Language.PureScript.Kinds.Kind)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Environment.primSymbolClasses20,
                  Language.PureScript.Environment.primSymbolClasses19)) -}
8b3c6ea063cf3194af92d095cca88d31
  primSymbolClasses19 ::
    GHC.Base.Maybe Language.PureScript.Kinds.Kind
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ Language.PureScript.Kinds.Kind
                   Language.PureScript.Environment.kindSymbol) -}
2dac86bd96da2baac903001a415fd05e
  primSymbolClasses2 ::
    [(Language.PureScript.Names.Qualified
        (Language.PureScript.Names.ProperName
           'Language.PureScript.Names.ClassName),
      Language.PureScript.Environment.TypeClassData)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.Qualified
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.ClassName),
                      Language.PureScript.Environment.TypeClassData)
                   Language.PureScript.Environment.primSymbolClasses34
                   Language.PureScript.Environment.primSymbolClasses3) -}
75c92ef981c63ddabd5e9372797062a6
  primSymbolClasses20 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Environment.primSymbolClasses21) -}
128268f3c49d6dfbf1e294c3d14b88b5
  primSymbolClasses21 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("symbol"#) -}
ba1faedc220c93bf07f6022f2eed588f
  primSymbolClasses22 ::
    (Data.Text.Internal.Text,
     GHC.Base.Maybe Language.PureScript.Kinds.Kind)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Environment.primSymbolClasses23,
                  Language.PureScript.Environment.primSymbolClasses19)) -}
5291b622165c58d7aae0b3926777aa5d
  primSymbolClasses23 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Environment.primSymbolClasses24) -}
25d6f653c3c76bc548febf424d29fcc1
  primSymbolClasses24 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("tail"#) -}
f495827de52672188325195468d8c331
  primSymbolClasses25 ::
    (Data.Text.Internal.Text,
     GHC.Base.Maybe Language.PureScript.Kinds.Kind)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Environment.primSymbolClasses26,
                  Language.PureScript.Environment.primSymbolClasses19)) -}
47af8295737b4551c4b86c5ebf54010b
  primSymbolClasses26 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Environment.primSymbolClasses27) -}
3dd6ecfd75f18ef3a30bb303be80d01f
  primSymbolClasses27 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("head"#) -}
8a3ccfb0e05a3cb855e90c7da63d6891
  primSymbolClasses28 ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
  {- Strictness: m,
     Unfolding: (Language.PureScript.Names.Qualified
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.ClassName)
                   Language.PureScript.Environment.primSymbolClasses31
                   Language.PureScript.Environment.primSymbolClasses29
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.ClassName>_P))) -}
64db7077e439aee41b40cb232f108856
  primSymbolClasses29 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Environment.primSymbolClasses30) -}
c079182b2e5aca84b52c8ed23e922691
  primSymbolClasses3 ::
    [(Language.PureScript.Names.Qualified
        (Language.PureScript.Names.ProperName
           'Language.PureScript.Names.ClassName),
      Language.PureScript.Environment.TypeClassData)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.Qualified
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.ClassName),
                      Language.PureScript.Environment.TypeClassData)
                   Language.PureScript.Environment.primSymbolClasses4
                   (GHC.Types.[]
                      @ (Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ClassName),
                         Language.PureScript.Environment.TypeClassData))) -}
5c9d047a0b20597877bff35459815ab0
  primSymbolClasses30 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Cons"#) -}
e0a429781b941caf22ebbf08df20114b
  primSymbolClasses31 ::
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ Language.PureScript.Names.ModuleName
                   Language.PureScript.Environment.primSymbolClasses32
                     `cast`
                   (Sym (Language.PureScript.Names.N:ModuleName[0]))) -}
17e3d5513208e4395ef9dd9bf7bddee5
  primSymbolClasses32 ::
    [Language.PureScript.Names.ProperName
       'Language.PureScript.Names.Namespace]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.Namespace)
                   Language.PureScript.Environment.kindDoc7
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.Namespace>_P))
                   Language.PureScript.Environment.primSymbolClasses33) -}
73566cb4f6d1be6cea75e14eb4b3e4d2
  primSymbolClasses33 ::
    [Language.PureScript.Names.ProperName
       'Language.PureScript.Names.Namespace]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.Namespace)
                   Language.PureScript.Environment.kindSymbol2
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.Namespace>_P))
                   (GHC.Types.[]
                      @ (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.Namespace))) -}
ff91b2deb9c78bed8172a8281c08c6b0
  primSymbolClasses34 ::
    (Language.PureScript.Names.Qualified
       (Language.PureScript.Names.ProperName
          'Language.PureScript.Names.ClassName),
     Language.PureScript.Environment.TypeClassData)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Environment.primSymbolClasses50,
                  Language.PureScript.Environment.primSymbolClasses35)) -}
f640986c6467c7e6ecc8c4122c0ef5e3
  primSymbolClasses35 ::
    Language.PureScript.Environment.TypeClassData
  {- Unfolding: (case Language.PureScript.Environment.$wmakeTypeClassData
                        Language.PureScript.Environment.primSymbolClasses37
                        (GHC.Types.[]
                           @ (Language.PureScript.Names.Ident,
                              Language.PureScript.Types.Type))
                        (GHC.Types.[] @ Language.PureScript.Types.Constraint)
                        Language.PureScript.Environment.primSymbolClasses36 of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Language.PureScript.Environment.TypeClassData
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
67c355839fcff7d8588b8f241673de00
  primSymbolClasses36 ::
    [Language.PureScript.Environment.FunctionalDependency]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Language.PureScript.Environment.FunctionalDependency
                   Language.PureScript.Environment.primSymbolClasses14
                   (GHC.Types.[]
                      @ Language.PureScript.Environment.FunctionalDependency)) -}
0951c32c568d5aad5a6a84b97d10bb75
  primSymbolClasses37 ::
    [(Data.Text.Internal.Text,
      GHC.Base.Maybe Language.PureScript.Kinds.Kind)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text,
                      GHC.Base.Maybe Language.PureScript.Kinds.Kind)
                   Language.PureScript.Environment.primSymbolClasses47
                   Language.PureScript.Environment.primSymbolClasses38) -}
bb72a43ec17cedbfb10d372070ad976c
  primSymbolClasses38 ::
    [(Data.Text.Internal.Text,
      GHC.Base.Maybe Language.PureScript.Kinds.Kind)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text,
                      GHC.Base.Maybe Language.PureScript.Kinds.Kind)
                   Language.PureScript.Environment.primSymbolClasses44
                   Language.PureScript.Environment.primSymbolClasses39) -}
23aaec4d082e7ce6b59c3d3651efe7d9
  primSymbolClasses39 ::
    [(Data.Text.Internal.Text,
      GHC.Base.Maybe Language.PureScript.Kinds.Kind)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text,
                      GHC.Base.Maybe Language.PureScript.Kinds.Kind)
                   Language.PureScript.Environment.primSymbolClasses40
                   (GHC.Types.[]
                      @ (Data.Text.Internal.Text,
                         GHC.Base.Maybe Language.PureScript.Kinds.Kind))) -}
d3f2aec61130ee48f1e6c25656f738d3
  primSymbolClasses4 ::
    (Language.PureScript.Names.Qualified
       (Language.PureScript.Names.ProperName
          'Language.PureScript.Names.ClassName),
     Language.PureScript.Environment.TypeClassData)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Environment.primSymbolClasses28,
                  Language.PureScript.Environment.primSymbolClasses5)) -}
9a038f7acff9f8b3badbfe59e0be14f7
  primSymbolClasses40 ::
    (Data.Text.Internal.Text,
     GHC.Base.Maybe Language.PureScript.Kinds.Kind)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Environment.primSymbolClasses42,
                  Language.PureScript.Environment.primSymbolClasses41)) -}
723914bf0eed33d7dbc3dfd5419b0435
  primSymbolClasses41 ::
    GHC.Base.Maybe Language.PureScript.Kinds.Kind
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ Language.PureScript.Kinds.Kind
                   Language.PureScript.Environment.kindOrdering) -}
a9caf5a0be17a1af7e3fa984d01acb75
  primSymbolClasses42 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Environment.primSymbolClasses43) -}
e411b3c8a72ecdc479ab66cb9b3c75bc
  primSymbolClasses43 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ordering"#) -}
3faeeca36debe3cdd9d43ea498ee29c1
  primSymbolClasses44 ::
    (Data.Text.Internal.Text,
     GHC.Base.Maybe Language.PureScript.Kinds.Kind)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Environment.primSymbolClasses45,
                  Language.PureScript.Environment.primSymbolClasses19)) -}
18fa7fac10b31f397146b3d358e23d6e
  primSymbolClasses45 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Environment.primSymbolClasses46) -}
3f3ad66c15ece9f1cb3b93346d1f683f
  primSymbolClasses46 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("right"#) -}
6a0bb1f82dba9eaf20747b9597769e11
  primSymbolClasses47 ::
    (Data.Text.Internal.Text,
     GHC.Base.Maybe Language.PureScript.Kinds.Kind)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Environment.primSymbolClasses48,
                  Language.PureScript.Environment.primSymbolClasses19)) -}
49a3dd08f1ffa04d86c62a89a590fb5b
  primSymbolClasses48 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Environment.primSymbolClasses49) -}
f120360b5dc3ddf8df426b688fbb66bf
  primSymbolClasses49 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("left"#) -}
e4d0772fc7e1af1e74546ea9d66949f7
  primSymbolClasses5 :: Language.PureScript.Environment.TypeClassData
  {- Unfolding: (case Language.PureScript.Environment.$wmakeTypeClassData
                        Language.PureScript.Environment.primSymbolClasses15
                        (GHC.Types.[]
                           @ (Language.PureScript.Names.Ident,
                              Language.PureScript.Types.Type))
                        (GHC.Types.[] @ Language.PureScript.Types.Constraint)
                        Language.PureScript.Environment.primSymbolClasses6 of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Language.PureScript.Environment.TypeClassData
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
607c193a836a70033e3f77bfa73a9947
  primSymbolClasses50 ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
  {- Strictness: m,
     Unfolding: (Language.PureScript.Names.Qualified
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.ClassName)
                   Language.PureScript.Environment.primSymbolClasses31
                   Language.PureScript.Environment.primSymbolClasses51
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.ClassName>_P))) -}
4299e6ed5eeec6442f4adc53eeba1b12
  primSymbolClasses51 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Environment.primSymbolClasses52) -}
4a68bca7400c2e2d164e0c21e96746d8
  primSymbolClasses52 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Compare"#) -}
897d941a06093f4a1f3b28bc56aaa142
  primSymbolClasses53 ::
    (Language.PureScript.Names.Qualified
       (Language.PureScript.Names.ProperName
          'Language.PureScript.Names.ClassName),
     Language.PureScript.Environment.TypeClassData)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Environment.primSymbolClasses69,
                  Language.PureScript.Environment.primSymbolClasses54)) -}
e0ce8473bec22e01d47ff459ada128d5
  primSymbolClasses54 ::
    Language.PureScript.Environment.TypeClassData
  {- Unfolding: (case Language.PureScript.Environment.$wmakeTypeClassData
                        Language.PureScript.Environment.primSymbolClasses63
                        (GHC.Types.[]
                           @ (Language.PureScript.Names.Ident,
                              Language.PureScript.Types.Type))
                        (GHC.Types.[] @ Language.PureScript.Types.Constraint)
                        Language.PureScript.Environment.primSymbolClasses55 of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Language.PureScript.Environment.TypeClassData
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
b80bd831aa1915851c6998804d505ba0
  primSymbolClasses55 ::
    [Language.PureScript.Environment.FunctionalDependency]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Language.PureScript.Environment.FunctionalDependency
                   Language.PureScript.Environment.primSymbolClasses14
                   Language.PureScript.Environment.primSymbolClasses56) -}
0225493cf87380dad385da4e854ec8a9
  primSymbolClasses56 ::
    [Language.PureScript.Environment.FunctionalDependency]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Language.PureScript.Environment.FunctionalDependency
                   Language.PureScript.Environment.primSymbolClasses61
                   Language.PureScript.Environment.primSymbolClasses57) -}
71120d21e3250bd1008da1359906f28b
  primSymbolClasses57 ::
    [Language.PureScript.Environment.FunctionalDependency]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Language.PureScript.Environment.FunctionalDependency
                   Language.PureScript.Environment.primSymbolClasses58
                   (GHC.Types.[]
                      @ Language.PureScript.Environment.FunctionalDependency)) -}
7de39b509b0cd1073144c6c2abfb0e9b
  primSymbolClasses58 ::
    Language.PureScript.Environment.FunctionalDependency
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Language.PureScript.Environment.FunctionalDependency
                   Language.PureScript.Environment.primSymbolClasses59
                   Language.PureScript.Environment.primSymbolClasses10) -}
6e76b6eee1dee97a29c7c5a067617b05
  primSymbolClasses59 :: [GHC.Types.Int]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Int
                   Language.PureScript.Environment.primSymbolClasses13
                   Language.PureScript.Environment.primSymbolClasses60) -}
d00851b70807d614d77a6429798e73dd
  primSymbolClasses6 ::
    [Language.PureScript.Environment.FunctionalDependency]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Language.PureScript.Environment.FunctionalDependency
                   Language.PureScript.Environment.primSymbolClasses14
                   Language.PureScript.Environment.primSymbolClasses7) -}
41027178a730fed53b22db7234e074c9
  primSymbolClasses60 :: [GHC.Types.Int]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Int
                   Language.PureScript.Environment.$fShowEnvironment2
                   (GHC.Types.[] @ GHC.Types.Int)) -}
54d32856bacbbf9c053f4b3b6a1c1cec
  primSymbolClasses61 ::
    Language.PureScript.Environment.FunctionalDependency
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Language.PureScript.Environment.FunctionalDependency
                   Language.PureScript.Environment.primSymbolClasses62
                   Language.PureScript.Environment.primSymbolClasses60) -}
06aa9e2d49374c7b8280b063663f7434
  primSymbolClasses62 :: [GHC.Types.Int]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Int
                   Language.PureScript.Environment.primSymbolClasses11
                   Language.PureScript.Environment.primSymbolClasses12) -}
b4d05dd9e183753f39f812d953f30293
  primSymbolClasses63 ::
    [(Data.Text.Internal.Text,
      GHC.Base.Maybe Language.PureScript.Kinds.Kind)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text,
                      GHC.Base.Maybe Language.PureScript.Kinds.Kind)
                   Language.PureScript.Environment.primSymbolClasses47
                   Language.PureScript.Environment.primSymbolClasses64) -}
ccc655ff855d31834c97514f3dc072ee
  primSymbolClasses64 ::
    [(Data.Text.Internal.Text,
      GHC.Base.Maybe Language.PureScript.Kinds.Kind)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text,
                      GHC.Base.Maybe Language.PureScript.Kinds.Kind)
                   Language.PureScript.Environment.primSymbolClasses44
                   Language.PureScript.Environment.primSymbolClasses65) -}
87087001c0f5c53c07c2b686bc18fcb4
  primSymbolClasses65 ::
    [(Data.Text.Internal.Text,
      GHC.Base.Maybe Language.PureScript.Kinds.Kind)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text,
                      GHC.Base.Maybe Language.PureScript.Kinds.Kind)
                   Language.PureScript.Environment.primSymbolClasses66
                   (GHC.Types.[]
                      @ (Data.Text.Internal.Text,
                         GHC.Base.Maybe Language.PureScript.Kinds.Kind))) -}
fd4c980674368ba51299507d3bdbb1d1
  primSymbolClasses66 ::
    (Data.Text.Internal.Text,
     GHC.Base.Maybe Language.PureScript.Kinds.Kind)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Environment.primSymbolClasses67,
                  Language.PureScript.Environment.primSymbolClasses19)) -}
88b18371a01fdbf6a328fc524c13425d
  primSymbolClasses67 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Environment.primSymbolClasses68) -}
cf9a2695af8afd6e9e3eb3a21ec7ef7a
  primSymbolClasses68 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("appended"#) -}
b9bbe2b442ba0a45f691610d75c9e7f6
  primSymbolClasses69 ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
  {- Strictness: m,
     Unfolding: (Language.PureScript.Names.Qualified
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.ClassName)
                   Language.PureScript.Environment.primSymbolClasses31
                   Language.PureScript.Environment.primSymbolClasses70
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.ClassName>_P))) -}
6d8d0d06dfa09b131cca99ec308dc4df
  primSymbolClasses7 ::
    [Language.PureScript.Environment.FunctionalDependency]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Language.PureScript.Environment.FunctionalDependency
                   Language.PureScript.Environment.primSymbolClasses8
                   (GHC.Types.[]
                      @ Language.PureScript.Environment.FunctionalDependency)) -}
381780ad971a718959a79cdb043c6ab5
  primSymbolClasses70 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Environment.primSymbolClasses71) -}
51d3c106f4e78c74d92501904cceb265
  primSymbolClasses71 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Append"#) -}
a835f5582275a5d5b227c4678e040f8b
  primSymbolClasses8 ::
    Language.PureScript.Environment.FunctionalDependency
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Language.PureScript.Environment.FunctionalDependency
                   Language.PureScript.Environment.primSymbolClasses12
                   Language.PureScript.Environment.primSymbolClasses9) -}
49726769f021f585f38a628e550a7e04
  primSymbolClasses9 :: [GHC.Types.Int]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Int
                   Language.PureScript.Environment.$fShowEnvironment2
                   Language.PureScript.Environment.primSymbolClasses10) -}
839499877351246ed8f3bffc63075f56
  primSymbolTypes ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName))
      (Language.PureScript.Kinds.Kind,
       Language.PureScript.Environment.TypeKind)
  {- Unfolding: (Language.PureScript.Environment.$sfromList
                   @ (Language.PureScript.Kinds.Kind,
                      Language.PureScript.Environment.TypeKind)
                   Language.PureScript.Environment.primSymbolTypes1) -}
77f88ef18f6da3ef453386b9ca2a30d2
  primSymbolTypes1 ::
    [(Language.PureScript.Names.Qualified
        (Language.PureScript.Names.ProperName
           'Language.PureScript.Names.TypeName),
      (Language.PureScript.Kinds.Kind,
       Language.PureScript.Environment.TypeKind))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.Qualified
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.TypeName),
                      (Language.PureScript.Kinds.Kind,
                       Language.PureScript.Environment.TypeKind))
                   Language.PureScript.Environment.primSymbolTypes16
                   Language.PureScript.Environment.primSymbolTypes2) -}
2e5b1b042ecca341c52ee1f9067e5eb2
  primSymbolTypes10 ::
    (Language.PureScript.Names.Qualified
       (Language.PureScript.Names.ProperName
          'Language.PureScript.Names.TypeName),
     (Language.PureScript.Kinds.Kind,
      Language.PureScript.Environment.TypeKind))
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Environment.primSymbolTypes15,
                  Language.PureScript.Environment.primSymbolTypes11)) -}
3de66a0e4db754b87bf97d42d93f8d2a
  primSymbolTypes11 ::
    (Language.PureScript.Kinds.Kind,
     Language.PureScript.Environment.TypeKind)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Environment.primSymbolTypes12,
                  Language.PureScript.Environment.ExternData)) -}
0afda6e80a463ab575652688e1aa6bef
  primSymbolTypes12 :: Language.PureScript.Kinds.Kind
  {- Strictness: m3,
     Unfolding: (Language.PureScript.Kinds.FunKind
                   Language.PureScript.Environment.kindSymbol
                   Language.PureScript.Environment.primSymbolTypes13) -}
8ef98692a87e1bbd8172d07dcf21bc02
  primSymbolTypes13 :: Language.PureScript.Kinds.Kind
  {- Strictness: m3,
     Unfolding: (Language.PureScript.Kinds.FunKind
                   Language.PureScript.Environment.kindSymbol
                   Language.PureScript.Environment.primSymbolTypes14) -}
22aa8581efb6552640b488f382aebfd2
  primSymbolTypes14 :: Language.PureScript.Kinds.Kind
  {- Strictness: m3,
     Unfolding: (Language.PureScript.Kinds.FunKind
                   Language.PureScript.Environment.kindOrdering
                   Language.PureScript.Environment.kindType) -}
7f4a5cad93e3e1c6c300f56d7cc123fc
  primSymbolTypes15 ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName)
  {- Strictness: m,
     Unfolding: (Language.PureScript.Names.Qualified
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.TypeName)
                   Language.PureScript.Environment.primSymbolClasses31
                   Language.PureScript.Environment.primSymbolClasses51
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.TypeName>_P))) -}
566795df17a57a60cd86bf5df7f67ee1
  primSymbolTypes16 ::
    (Language.PureScript.Names.Qualified
       (Language.PureScript.Names.ProperName
          'Language.PureScript.Names.TypeName),
     (Language.PureScript.Kinds.Kind,
      Language.PureScript.Environment.TypeKind))
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Environment.primSymbolTypes17,
                  Language.PureScript.Environment.primSymbolTypes5)) -}
d4a4559278f42d48e2a9887512019633
  primSymbolTypes17 ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName)
  {- Strictness: m,
     Unfolding: (Language.PureScript.Names.Qualified
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.TypeName)
                   Language.PureScript.Environment.primSymbolClasses31
                   Language.PureScript.Environment.primSymbolClasses70
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.TypeName>_P))) -}
77be92dbfb4ec8a340bef9df48c46599
  primSymbolTypes2 ::
    [(Language.PureScript.Names.Qualified
        (Language.PureScript.Names.ProperName
           'Language.PureScript.Names.TypeName),
      (Language.PureScript.Kinds.Kind,
       Language.PureScript.Environment.TypeKind))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.Qualified
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.TypeName),
                      (Language.PureScript.Kinds.Kind,
                       Language.PureScript.Environment.TypeKind))
                   Language.PureScript.Environment.primSymbolTypes10
                   Language.PureScript.Environment.primSymbolTypes3) -}
7296b6765bd1b27cc978fa9498d2af3d
  primSymbolTypes3 ::
    [(Language.PureScript.Names.Qualified
        (Language.PureScript.Names.ProperName
           'Language.PureScript.Names.TypeName),
      (Language.PureScript.Kinds.Kind,
       Language.PureScript.Environment.TypeKind))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.Qualified
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.TypeName),
                      (Language.PureScript.Kinds.Kind,
                       Language.PureScript.Environment.TypeKind))
                   Language.PureScript.Environment.primSymbolTypes4
                   (GHC.Types.[]
                      @ (Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.TypeName),
                         (Language.PureScript.Kinds.Kind,
                          Language.PureScript.Environment.TypeKind)))) -}
c5d790e541f5f1db381e1b6deb10f37e
  primSymbolTypes4 ::
    (Language.PureScript.Names.Qualified
       (Language.PureScript.Names.ProperName
          'Language.PureScript.Names.TypeName),
     (Language.PureScript.Kinds.Kind,
      Language.PureScript.Environment.TypeKind))
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Environment.primSymbolTypes9,
                  Language.PureScript.Environment.primSymbolTypes5)) -}
cd89b744a8b8d2812751bcc9c6775650
  primSymbolTypes5 ::
    (Language.PureScript.Kinds.Kind,
     Language.PureScript.Environment.TypeKind)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Environment.primSymbolTypes6,
                  Language.PureScript.Environment.ExternData)) -}
6c2a74c866e3874648c91bb625487885
  primSymbolTypes6 :: Language.PureScript.Kinds.Kind
  {- Strictness: m3,
     Unfolding: (Language.PureScript.Kinds.FunKind
                   Language.PureScript.Environment.kindSymbol
                   Language.PureScript.Environment.primSymbolTypes7) -}
297e613c641e511155ca98717b6438c6
  primSymbolTypes7 :: Language.PureScript.Kinds.Kind
  {- Strictness: m3,
     Unfolding: (Language.PureScript.Kinds.FunKind
                   Language.PureScript.Environment.kindSymbol
                   Language.PureScript.Environment.primSymbolTypes8) -}
0a2ce79aea7d05e9f26714ce414308e7
  primSymbolTypes8 :: Language.PureScript.Kinds.Kind
  {- Strictness: m3,
     Unfolding: (Language.PureScript.Kinds.FunKind
                   Language.PureScript.Environment.kindSymbol
                   Language.PureScript.Environment.kindType) -}
1eec765a3f1d85dd7ccba455bbb8a473
  primSymbolTypes9 ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName)
  {- Strictness: m,
     Unfolding: (Language.PureScript.Names.Qualified
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.TypeName)
                   Language.PureScript.Environment.primSymbolClasses31
                   Language.PureScript.Environment.primSymbolClasses29
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.TypeName>_P))) -}
a241f193f17cd08a3b19d45fd48a9860
  primTy :: Data.Text.Internal.Text -> Language.PureScript.Types.Type
  {- Arity: 1, Strictness: <L,U>m5,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Text.Internal.Text) ->
                 Language.PureScript.Types.TypeConstructor
                   (Language.PureScript.Names.Qualified
                      @ (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.TypeName)
                      Language.PureScript.Environment.kindSymbol3
                      x `cast`
                      (Sym (Language.PureScript.Names.N:ProperName[0]
                                <'Language.PureScript.Names.TypeName>_P)))) -}
e081b3b947d60966d2b35454fcb78bd0
  primTypeErrorClasses ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName))
      Language.PureScript.Environment.TypeClassData
  {- Unfolding: (Language.PureScript.Environment.$sfromList1
                   @ Language.PureScript.Environment.TypeClassData
                   Language.PureScript.Environment.primTypeErrorClasses1) -}
640454c3c2d6ef6c0bd010ea2a277f57
  primTypeErrorClasses1 ::
    [(Language.PureScript.Names.Qualified
        (Language.PureScript.Names.ProperName
           'Language.PureScript.Names.ClassName),
      Language.PureScript.Environment.TypeClassData)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.Qualified
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.ClassName),
                      Language.PureScript.Environment.TypeClassData)
                   Language.PureScript.Environment.primTypeErrorClasses13
                   Language.PureScript.Environment.primTypeErrorClasses2) -}
4979caf9836575ae0e0cc1810af39115
  primTypeErrorClasses10 ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
  {- Strictness: m,
     Unfolding: (Language.PureScript.Names.Qualified
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.ClassName)
                   Language.PureScript.Environment.kindDoc3
                   Language.PureScript.Environment.primTypeErrorClasses11
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.ClassName>_P))) -}
52706ec4e06de125c029ba0dcd0b7c2b
  primTypeErrorClasses11 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Environment.primTypeErrorClasses12) -}
0b33bdd3e6c8e1206eff7f02fdc3670f
  primTypeErrorClasses12 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Warn"#) -}
4883405ac04ab634ead86271249ccffb
  primTypeErrorClasses13 ::
    (Language.PureScript.Names.Qualified
       (Language.PureScript.Names.ProperName
          'Language.PureScript.Names.ClassName),
     Language.PureScript.Environment.TypeClassData)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Environment.primTypeErrorClasses14,
                  Language.PureScript.Environment.primTypeErrorClasses4)) -}
b3bfcd5b932f17f1c36d7c4b03db2e76
  primTypeErrorClasses14 ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
  {- Strictness: m,
     Unfolding: (Language.PureScript.Names.Qualified
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.ClassName)
                   Language.PureScript.Environment.kindDoc3
                   Language.PureScript.Environment.primTypeErrorClasses15
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.ClassName>_P))) -}
625afa21a5c6a9f590c7ecd37ac673d8
  primTypeErrorClasses15 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Environment.primTypeErrorClasses16) -}
6cd4616d72bb5415e6d4b9a2cec1b972
  primTypeErrorClasses16 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Fail"#) -}
41c72efd804371927392f92ae35f2fc5
  primTypeErrorClasses2 ::
    [(Language.PureScript.Names.Qualified
        (Language.PureScript.Names.ProperName
           'Language.PureScript.Names.ClassName),
      Language.PureScript.Environment.TypeClassData)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.Qualified
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.ClassName),
                      Language.PureScript.Environment.TypeClassData)
                   Language.PureScript.Environment.primTypeErrorClasses3
                   (GHC.Types.[]
                      @ (Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ClassName),
                         Language.PureScript.Environment.TypeClassData))) -}
6dc11339b1f96620ff0ad76e52008556
  primTypeErrorClasses3 ::
    (Language.PureScript.Names.Qualified
       (Language.PureScript.Names.ProperName
          'Language.PureScript.Names.ClassName),
     Language.PureScript.Environment.TypeClassData)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Environment.primTypeErrorClasses10,
                  Language.PureScript.Environment.primTypeErrorClasses4)) -}
a89cf69aacd786433b7d30e7bbb3e71b
  primTypeErrorClasses4 ::
    Language.PureScript.Environment.TypeClassData
  {- Unfolding: (case Language.PureScript.Environment.$wmakeTypeClassData
                        Language.PureScript.Environment.primTypeErrorClasses5
                        (GHC.Types.[]
                           @ (Language.PureScript.Names.Ident,
                              Language.PureScript.Types.Type))
                        (GHC.Types.[] @ Language.PureScript.Types.Constraint)
                        (GHC.Types.[]
                           @ Language.PureScript.Environment.FunctionalDependency) of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Language.PureScript.Environment.TypeClassData
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
6543cbe0097e6aff5a982285185710f5
  primTypeErrorClasses5 ::
    [(Data.Text.Internal.Text,
      GHC.Base.Maybe Language.PureScript.Kinds.Kind)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text,
                      GHC.Base.Maybe Language.PureScript.Kinds.Kind)
                   Language.PureScript.Environment.primTypeErrorClasses6
                   (GHC.Types.[]
                      @ (Data.Text.Internal.Text,
                         GHC.Base.Maybe Language.PureScript.Kinds.Kind))) -}
484a380ceabf15e1a6d02ebe40b9be13
  primTypeErrorClasses6 ::
    (Data.Text.Internal.Text,
     GHC.Base.Maybe Language.PureScript.Kinds.Kind)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Environment.primTypeErrorClasses8,
                  Language.PureScript.Environment.primTypeErrorClasses7)) -}
ea6a4a4636571973dffaf8f5222a0ac2
  primTypeErrorClasses7 ::
    GHC.Base.Maybe Language.PureScript.Kinds.Kind
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ Language.PureScript.Kinds.Kind
                   Language.PureScript.Environment.kindDoc) -}
7759ae50418ad02ee8efdaf745c0a689
  primTypeErrorClasses8 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Environment.primTypeErrorClasses9) -}
6f021f837a6c3d85d51358a7d4998672
  primTypeErrorClasses9 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("message"#) -}
e15bb216740ba8be61b21fdb91eaa5de
  primTypeErrorKinds ::
    Data.Set.Internal.Set
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.KindName))
  {- Unfolding: (Language.PureScript.Environment.$sfromList4
                   Language.PureScript.Environment.primTypeErrorKinds1) -}
8c0ba27e6b4c74073dadb13d55c5aac8
  primTypeErrorKinds1 ::
    [Language.PureScript.Names.Qualified
       (Language.PureScript.Names.ProperName
          'Language.PureScript.Names.KindName)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.Qualified
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.KindName))
                   Language.PureScript.Environment.kindDoc1
                   (GHC.Types.[]
                      @ (Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.KindName)))) -}
e564b775490f3d134ed5641bf3a4871e
  primTypeErrorTypes ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName))
      (Language.PureScript.Kinds.Kind,
       Language.PureScript.Environment.TypeKind)
  {- Unfolding: (Language.PureScript.Environment.$sfromList
                   @ (Language.PureScript.Kinds.Kind,
                      Language.PureScript.Environment.TypeKind)
                   Language.PureScript.Environment.primTypeErrorTypes1) -}
d1a910eba5a4053a127fc7523c05d6d9
  primTypeErrorTypes1 ::
    [(Language.PureScript.Names.Qualified
        (Language.PureScript.Names.ProperName
           'Language.PureScript.Names.TypeName),
      (Language.PureScript.Kinds.Kind,
       Language.PureScript.Environment.TypeKind))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.Qualified
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.TypeName),
                      (Language.PureScript.Kinds.Kind,
                       Language.PureScript.Environment.TypeKind))
                   Language.PureScript.Environment.primTypeErrorTypes39
                   Language.PureScript.Environment.primTypeErrorTypes2) -}
189ee6911962b501fb68ac39f1c6de1d
  primTypeErrorTypes10 :: Language.PureScript.Kinds.Kind
  {- Strictness: m3,
     Unfolding: (Language.PureScript.Kinds.FunKind
                   Language.PureScript.Environment.kindDoc
                   Language.PureScript.Environment.primTypeErrorTypes11) -}
fd79e0c5296b3c95e119c4d456873271
  primTypeErrorTypes11 :: Language.PureScript.Kinds.Kind
  {- Strictness: m3,
     Unfolding: (Language.PureScript.Kinds.FunKind
                   Language.PureScript.Environment.kindDoc
                   Language.PureScript.Environment.kindDoc) -}
a764dbe4be265f8d583c5585f54ea8ad
  primTypeErrorTypes12 ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName)
  {- Strictness: m,
     Unfolding: (Language.PureScript.Names.Qualified
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.TypeName)
                   Language.PureScript.Environment.kindDoc3
                   Language.PureScript.Environment.primTypeErrorTypes13
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.TypeName>_P))) -}
42f647a6ead51c03a06ff00bf690ceb8
  primTypeErrorTypes13 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Environment.primTypeErrorTypes14) -}
f3a6bc5a20625d22b1f9acc4cc5b2996
  primTypeErrorTypes14 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Above"#) -}
ff1cf2810f1f702c0a61776945b0a1e6
  primTypeErrorTypes15 ::
    (Language.PureScript.Names.Qualified
       (Language.PureScript.Names.ProperName
          'Language.PureScript.Names.TypeName),
     (Language.PureScript.Kinds.Kind,
      Language.PureScript.Environment.TypeKind))
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Environment.primTypeErrorTypes16,
                  Language.PureScript.Environment.primTypeErrorTypes9)) -}
597a0dfed40d51b9e7355aa8b367f134
  primTypeErrorTypes16 ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName)
  {- Strictness: m,
     Unfolding: (Language.PureScript.Names.Qualified
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.TypeName)
                   Language.PureScript.Environment.kindDoc3
                   Language.PureScript.Environment.primTypeErrorTypes17
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.TypeName>_P))) -}
91160436b5000f37aa600e3f40e4b835
  primTypeErrorTypes17 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Environment.primTypeErrorTypes18) -}
f5b29061f0cbc4ad574ca07667abe46a
  primTypeErrorTypes18 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Beside"#) -}
eb6cae46ce64e79fd6ae5e8c7c4a406c
  primTypeErrorTypes19 ::
    (Language.PureScript.Names.Qualified
       (Language.PureScript.Names.ProperName
          'Language.PureScript.Names.TypeName),
     (Language.PureScript.Kinds.Kind,
      Language.PureScript.Environment.TypeKind))
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Environment.primTypeErrorTypes22,
                  Language.PureScript.Environment.primTypeErrorTypes20)) -}
3d8ba871dcfa764fc83b0efc4532daaf
  primTypeErrorTypes2 ::
    [(Language.PureScript.Names.Qualified
        (Language.PureScript.Names.ProperName
           'Language.PureScript.Names.TypeName),
      (Language.PureScript.Kinds.Kind,
       Language.PureScript.Environment.TypeKind))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.Qualified
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.TypeName),
                      (Language.PureScript.Kinds.Kind,
                       Language.PureScript.Environment.TypeKind))
                   Language.PureScript.Environment.primTypeErrorTypes35
                   Language.PureScript.Environment.primTypeErrorTypes3) -}
5bd72e3f9b50c9365600d92bf029b804
  primTypeErrorTypes20 ::
    (Language.PureScript.Kinds.Kind,
     Language.PureScript.Environment.TypeKind)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Environment.primTypeErrorTypes21,
                  Language.PureScript.Environment.ExternData)) -}
b194e8821a01f2c044924e713e7d847b
  primTypeErrorTypes21 :: Language.PureScript.Kinds.Kind
  {- Strictness: m3,
     Unfolding: (Language.PureScript.Kinds.FunKind
                   Language.PureScript.Environment.kindSymbol
                   Language.PureScript.Environment.kindDoc) -}
d793608fa8495c158ca7f717d962f800
  primTypeErrorTypes22 ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName)
  {- Strictness: m,
     Unfolding: (Language.PureScript.Names.Qualified
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.TypeName)
                   Language.PureScript.Environment.kindDoc3
                   Language.PureScript.Environment.primTypeErrorTypes23
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.TypeName>_P))) -}
85ad49fa7046f53c8f491335be3fec7d
  primTypeErrorTypes23 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Environment.primTypeErrorTypes24) -}
bcf5ce9c564dd4fdef7db1244e75b1d6
  primTypeErrorTypes24 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("QuoteLabel"#) -}
138cde635110e7f737a9570d13c5e00b
  primTypeErrorTypes25 ::
    (Language.PureScript.Names.Qualified
       (Language.PureScript.Names.ProperName
          'Language.PureScript.Names.TypeName),
     (Language.PureScript.Kinds.Kind,
      Language.PureScript.Environment.TypeKind))
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Environment.primTypeErrorTypes28,
                  Language.PureScript.Environment.primTypeErrorTypes26)) -}
ed3cc29b5e84e5b0b72acbae6b0c912d
  primTypeErrorTypes26 ::
    (Language.PureScript.Kinds.Kind,
     Language.PureScript.Environment.TypeKind)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Environment.primTypeErrorTypes27,
                  Language.PureScript.Environment.ExternData)) -}
8f737805693fb50e5e32412febd8bafb
  primTypeErrorTypes27 :: Language.PureScript.Kinds.Kind
  {- Strictness: m3,
     Unfolding: (Language.PureScript.Kinds.FunKind
                   Language.PureScript.Environment.kindType
                   Language.PureScript.Environment.kindDoc) -}
899ef90cb90839f3a4188d1647abeb0c
  primTypeErrorTypes28 ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName)
  {- Strictness: m,
     Unfolding: (Language.PureScript.Names.Qualified
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.TypeName)
                   Language.PureScript.Environment.kindDoc3
                   Language.PureScript.Environment.primTypeErrorTypes29
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.TypeName>_P))) -}
8acf7029a65290b5c5768d20a299a62a
  primTypeErrorTypes29 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Environment.primTypeErrorTypes30) -}
4d7b0eb072ab9741b8abd96729d1ec0e
  primTypeErrorTypes3 ::
    [(Language.PureScript.Names.Qualified
        (Language.PureScript.Names.ProperName
           'Language.PureScript.Names.TypeName),
      (Language.PureScript.Kinds.Kind,
       Language.PureScript.Environment.TypeKind))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.Qualified
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.TypeName),
                      (Language.PureScript.Kinds.Kind,
                       Language.PureScript.Environment.TypeKind))
                   Language.PureScript.Environment.primTypeErrorTypes31
                   Language.PureScript.Environment.primTypeErrorTypes4) -}
d16f2c9964785019a228d81fde91f726
  primTypeErrorTypes30 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Quote"#) -}
6cb0e2b6ba1b435bf15ea5ccae6219d6
  primTypeErrorTypes31 ::
    (Language.PureScript.Names.Qualified
       (Language.PureScript.Names.ProperName
          'Language.PureScript.Names.TypeName),
     (Language.PureScript.Kinds.Kind,
      Language.PureScript.Environment.TypeKind))
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Environment.primTypeErrorTypes32,
                  Language.PureScript.Environment.primTypeErrorTypes20)) -}
5889c949571aeb0a746781c43f7fd916
  primTypeErrorTypes32 ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName)
  {- Strictness: m,
     Unfolding: (Language.PureScript.Names.Qualified
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.TypeName)
                   Language.PureScript.Environment.kindDoc3
                   Language.PureScript.Environment.primTypeErrorTypes33
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.TypeName>_P))) -}
b7cc1d785264f8695539978a4e765c78
  primTypeErrorTypes33 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Environment.primTypeErrorTypes34) -}
3ef689a035dd76569952d199634077ac
  primTypeErrorTypes34 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Text"#) -}
94e0dcb2bebfc557d192495cfe8763df
  primTypeErrorTypes35 ::
    (Language.PureScript.Names.Qualified
       (Language.PureScript.Names.ProperName
          'Language.PureScript.Names.TypeName),
     (Language.PureScript.Kinds.Kind,
      Language.PureScript.Environment.TypeKind))
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Environment.primTypeErrorTypes38,
                  Language.PureScript.Environment.primTypeErrorTypes36)) -}
0e7baf9d77388212500c212b55d98bd0
  primTypeErrorTypes36 ::
    (Language.PureScript.Kinds.Kind,
     Language.PureScript.Environment.TypeKind)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Environment.primTypeErrorTypes37,
                  Language.PureScript.Environment.ExternData)) -}
9e18b459ac87158e3b50cb128bc4d282
  primTypeErrorTypes37 :: Language.PureScript.Kinds.Kind
  {- Strictness: m3,
     Unfolding: (Language.PureScript.Kinds.FunKind
                   Language.PureScript.Environment.kindDoc
                   Language.PureScript.Environment.kindType) -}
93132d44ac1fd23167ed2be765e2f5a7
  primTypeErrorTypes38 ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName)
  {- Strictness: m,
     Unfolding: (Language.PureScript.Names.Qualified
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.TypeName)
                   Language.PureScript.Environment.kindDoc3
                   Language.PureScript.Environment.primTypeErrorClasses11
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.TypeName>_P))) -}
f90177398d989ada22f4a243997f9a90
  primTypeErrorTypes39 ::
    (Language.PureScript.Names.Qualified
       (Language.PureScript.Names.ProperName
          'Language.PureScript.Names.TypeName),
     (Language.PureScript.Kinds.Kind,
      Language.PureScript.Environment.TypeKind))
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Environment.primTypeErrorTypes40,
                  Language.PureScript.Environment.primTypeErrorTypes36)) -}
2e8a1169d1d68255e5a10e3f36899661
  primTypeErrorTypes4 ::
    [(Language.PureScript.Names.Qualified
        (Language.PureScript.Names.ProperName
           'Language.PureScript.Names.TypeName),
      (Language.PureScript.Kinds.Kind,
       Language.PureScript.Environment.TypeKind))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.Qualified
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.TypeName),
                      (Language.PureScript.Kinds.Kind,
                       Language.PureScript.Environment.TypeKind))
                   Language.PureScript.Environment.primTypeErrorTypes25
                   Language.PureScript.Environment.primTypeErrorTypes5) -}
0c98c0552ed249120ecf2d482bb88b80
  primTypeErrorTypes40 ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName)
  {- Strictness: m,
     Unfolding: (Language.PureScript.Names.Qualified
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.TypeName)
                   Language.PureScript.Environment.kindDoc3
                   Language.PureScript.Environment.primTypeErrorClasses15
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.TypeName>_P))) -}
74dfb8a0d64ecb6bb6e6d54e8306a48e
  primTypeErrorTypes5 ::
    [(Language.PureScript.Names.Qualified
        (Language.PureScript.Names.ProperName
           'Language.PureScript.Names.TypeName),
      (Language.PureScript.Kinds.Kind,
       Language.PureScript.Environment.TypeKind))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.Qualified
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.TypeName),
                      (Language.PureScript.Kinds.Kind,
                       Language.PureScript.Environment.TypeKind))
                   Language.PureScript.Environment.primTypeErrorTypes19
                   Language.PureScript.Environment.primTypeErrorTypes6) -}
99f25ed5023aa2565b08e78b01f69ce0
  primTypeErrorTypes6 ::
    [(Language.PureScript.Names.Qualified
        (Language.PureScript.Names.ProperName
           'Language.PureScript.Names.TypeName),
      (Language.PureScript.Kinds.Kind,
       Language.PureScript.Environment.TypeKind))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.Qualified
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.TypeName),
                      (Language.PureScript.Kinds.Kind,
                       Language.PureScript.Environment.TypeKind))
                   Language.PureScript.Environment.primTypeErrorTypes15
                   Language.PureScript.Environment.primTypeErrorTypes7) -}
a177bb4069738fa48a57ac4b3dab81c6
  primTypeErrorTypes7 ::
    [(Language.PureScript.Names.Qualified
        (Language.PureScript.Names.ProperName
           'Language.PureScript.Names.TypeName),
      (Language.PureScript.Kinds.Kind,
       Language.PureScript.Environment.TypeKind))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.Qualified
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.TypeName),
                      (Language.PureScript.Kinds.Kind,
                       Language.PureScript.Environment.TypeKind))
                   Language.PureScript.Environment.primTypeErrorTypes8
                   (GHC.Types.[]
                      @ (Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.TypeName),
                         (Language.PureScript.Kinds.Kind,
                          Language.PureScript.Environment.TypeKind)))) -}
24374849bf2a82f7c70eb0144fbd4d1c
  primTypeErrorTypes8 ::
    (Language.PureScript.Names.Qualified
       (Language.PureScript.Names.ProperName
          'Language.PureScript.Names.TypeName),
     (Language.PureScript.Kinds.Kind,
      Language.PureScript.Environment.TypeKind))
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Environment.primTypeErrorTypes12,
                  Language.PureScript.Environment.primTypeErrorTypes9)) -}
402d76e88b75f3549708dd159fcba964
  primTypeErrorTypes9 ::
    (Language.PureScript.Kinds.Kind,
     Language.PureScript.Environment.TypeKind)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Environment.primTypeErrorTypes10,
                  Language.PureScript.Environment.ExternData)) -}
dbfe3aecab24a65c2a6e34eaac90cf89
  primTypes ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName))
      (Language.PureScript.Kinds.Kind,
       Language.PureScript.Environment.TypeKind)
  {- Unfolding: (Language.PureScript.Environment.$sfromList
                   @ (Language.PureScript.Kinds.Kind,
                      Language.PureScript.Environment.TypeKind)
                   Language.PureScript.Environment.primTypes1) -}
7969d449aa309220582e89a6fc2fce7a
  primTypes1 ::
    [(Language.PureScript.Names.Qualified
        (Language.PureScript.Names.ProperName
           'Language.PureScript.Names.TypeName),
      (Language.PureScript.Kinds.Kind,
       Language.PureScript.Environment.TypeKind))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.Qualified
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.TypeName),
                      (Language.PureScript.Kinds.Kind,
                       Language.PureScript.Environment.TypeKind))
                   Language.PureScript.Environment.primTypes44
                   Language.PureScript.Environment.primTypes2) -}
94bd2185af8d18689b6f102bf52f1ca6
  primTypes10 ::
    (Language.PureScript.Names.Qualified
       (Language.PureScript.Names.ProperName
          'Language.PureScript.Names.TypeName),
     (Language.PureScript.Kinds.Kind,
      Language.PureScript.Environment.TypeKind))
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Environment.primTypes12,
                  Language.PureScript.Environment.primTypes11)) -}
48a5a1b02716042d28d03825d706cf5c
  primTypes11 ::
    (Language.PureScript.Kinds.Kind,
     Language.PureScript.Environment.TypeKind)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Environment.kindType,
                  Language.PureScript.Environment.ExternData)) -}
89a5955f169919ff72623f0e6a6115bc
  primTypes12 ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName)
  {- Strictness: m,
     Unfolding: (Language.PureScript.Names.Qualified
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.TypeName)
                   Language.PureScript.Environment.kindSymbol3
                   Language.PureScript.Environment.primClasses5
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.TypeName>_P))) -}
13a651dd538ff0faa95243b56a893548
  primTypes13 ::
    (Language.PureScript.Names.Qualified
       (Language.PureScript.Names.ProperName
          'Language.PureScript.Names.TypeName),
     (Language.PureScript.Kinds.Kind,
      Language.PureScript.Environment.TypeKind))
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Environment.primTypes14,
                  Language.PureScript.Environment.primTypes11)) -}
86fdd6e5864be6a8f815c7eb6658af8e
  primTypes14 ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName)
  {- Strictness: m,
     Unfolding: (Language.PureScript.Names.Qualified
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.TypeName)
                   Language.PureScript.Environment.kindSymbol3
                   Language.PureScript.Environment.primTypes15
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.TypeName>_P))) -}
3f2c9cd35e7a4d3b3334111faa6c6cbd
  primTypes15 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Environment.primTypes16) -}
6c1b65fa7fc2d02667b404a3b9f249a5
  primTypes16 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Boolean"#) -}
0a2869ccd65278ba66937c9a12787262
  primTypes17 ::
    (Language.PureScript.Names.Qualified
       (Language.PureScript.Names.ProperName
          'Language.PureScript.Names.TypeName),
     (Language.PureScript.Kinds.Kind,
      Language.PureScript.Environment.TypeKind))
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Environment.primTypes18,
                  Language.PureScript.Environment.primTypes11)) -}
46c69495ee85156f378558aa9219c7a6
  primTypes18 ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName)
  {- Strictness: m,
     Unfolding: (Language.PureScript.Names.Qualified
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.TypeName)
                   Language.PureScript.Environment.kindSymbol3
                   Language.PureScript.Environment.primTypes19
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.TypeName>_P))) -}
35ab803bfaf2c477045777d97eecdf36
  primTypes19 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Environment.primTypes20) -}
4d302a58a4dd1113b28de58cf637e2ef
  primTypes2 ::
    [(Language.PureScript.Names.Qualified
        (Language.PureScript.Names.ProperName
           'Language.PureScript.Names.TypeName),
      (Language.PureScript.Kinds.Kind,
       Language.PureScript.Environment.TypeKind))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.Qualified
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.TypeName),
                      (Language.PureScript.Kinds.Kind,
                       Language.PureScript.Environment.TypeKind))
                   Language.PureScript.Environment.primTypes38
                   Language.PureScript.Environment.primTypes3) -}
8c8a18b340ffcac25c1577c7ae4b0f53
  primTypes20 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Int"#) -}
3dca0dc17ee5ea0351d68a4b166d04d2
  primTypes21 ::
    (Language.PureScript.Names.Qualified
       (Language.PureScript.Names.ProperName
          'Language.PureScript.Names.TypeName),
     (Language.PureScript.Kinds.Kind,
      Language.PureScript.Environment.TypeKind))
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Environment.primTypes22,
                  Language.PureScript.Environment.primTypes11)) -}
8144db2ab168f608cbeccf12c7cdccff
  primTypes22 ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName)
  {- Strictness: m,
     Unfolding: (Language.PureScript.Names.Qualified
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.TypeName)
                   Language.PureScript.Environment.kindSymbol3
                   Language.PureScript.Environment.primTypes23
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.TypeName>_P))) -}
69dcebb3bbb804f664c15904e7cb730f
  primTypes23 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Environment.primTypes24) -}
8fef35ca4cb0a25351c23fbc16b32cc4
  primTypes24 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Number"#) -}
e2090a1bd3f2c8d7e77ffcb436dc2df5
  primTypes25 ::
    (Language.PureScript.Names.Qualified
       (Language.PureScript.Names.ProperName
          'Language.PureScript.Names.TypeName),
     (Language.PureScript.Kinds.Kind,
      Language.PureScript.Environment.TypeKind))
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Environment.primTypes26,
                  Language.PureScript.Environment.primTypes11)) -}
8a0e29847daf36f96010f7369267332e
  primTypes26 ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName)
  {- Strictness: m,
     Unfolding: (Language.PureScript.Names.Qualified
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.TypeName)
                   Language.PureScript.Environment.kindSymbol3
                   Language.PureScript.Environment.primTypes27
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.TypeName>_P))) -}
8346e8da3e682e14648ea0fbbc25c340
  primTypes27 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Environment.primTypes28) -}
1c1a4aaf88f5b7b18c4336a2513e8e18
  primTypes28 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Char"#) -}
9ce4c841f628904e57ee4799c1fba6a5
  primTypes29 ::
    (Language.PureScript.Names.Qualified
       (Language.PureScript.Names.ProperName
          'Language.PureScript.Names.TypeName),
     (Language.PureScript.Kinds.Kind,
      Language.PureScript.Environment.TypeKind))
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Environment.primTypes30,
                  Language.PureScript.Environment.primTypes11)) -}
18462cd36d027511a946efad545d38c3
  primTypes3 ::
    [(Language.PureScript.Names.Qualified
        (Language.PureScript.Names.ProperName
           'Language.PureScript.Names.TypeName),
      (Language.PureScript.Kinds.Kind,
       Language.PureScript.Environment.TypeKind))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.Qualified
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.TypeName),
                      (Language.PureScript.Kinds.Kind,
                       Language.PureScript.Environment.TypeKind))
                   Language.PureScript.Environment.primTypes33
                   Language.PureScript.Environment.primTypes4) -}
cc47a10cc446633a092e0a21ca8b2418
  primTypes30 ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName)
  {- Strictness: m,
     Unfolding: (Language.PureScript.Names.Qualified
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.TypeName)
                   Language.PureScript.Environment.kindSymbol3
                   Language.PureScript.Environment.primTypes31
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.TypeName>_P))) -}
1f3060ed0f68a357431b867a99bdcb5a
  primTypes31 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Environment.primTypes32) -}
4685e6d10d2b30fdf79bc189ac869e5a
  primTypes32 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("String"#) -}
66076c9b72def95c08c41e819f6aa2d3
  primTypes33 ::
    (Language.PureScript.Names.Qualified
       (Language.PureScript.Names.ProperName
          'Language.PureScript.Names.TypeName),
     (Language.PureScript.Kinds.Kind,
      Language.PureScript.Environment.TypeKind))
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Environment.primTypes35,
                  Language.PureScript.Environment.primTypes34)) -}
d5483374b456b4452abd2975173e59db
  primTypes34 ::
    (Language.PureScript.Kinds.Kind,
     Language.PureScript.Environment.TypeKind)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Environment.primRowTypes10,
                  Language.PureScript.Environment.ExternData)) -}
5e87e7470805faa736129dab131a7f89
  primTypes35 ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName)
  {- Strictness: m,
     Unfolding: (Language.PureScript.Names.Qualified
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.TypeName)
                   Language.PureScript.Environment.kindSymbol3
                   Language.PureScript.Environment.primTypes36
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.TypeName>_P))) -}
aaaf622b22e17bf6b17f3c674480275b
  primTypes36 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Environment.primTypes37) -}
dc829136fd58e0f7061796b3e9d416de
  primTypes37 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Record"#) -}
b38e671eff02976dd8702d97c0a188e5
  primTypes38 ::
    (Language.PureScript.Names.Qualified
       (Language.PureScript.Names.ProperName
          'Language.PureScript.Names.TypeName),
     (Language.PureScript.Kinds.Kind,
      Language.PureScript.Environment.TypeKind))
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Environment.primTypes41,
                  Language.PureScript.Environment.primTypes39)) -}
ef85c6fd47bc8f8253f182fabe8a7951
  primTypes39 ::
    (Language.PureScript.Kinds.Kind,
     Language.PureScript.Environment.TypeKind)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Environment.primTypes40,
                  Language.PureScript.Environment.ExternData)) -}
375350c9d28ddca73da401d051f530f4
  primTypes4 ::
    [(Language.PureScript.Names.Qualified
        (Language.PureScript.Names.ProperName
           'Language.PureScript.Names.TypeName),
      (Language.PureScript.Kinds.Kind,
       Language.PureScript.Environment.TypeKind))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.Qualified
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.TypeName),
                      (Language.PureScript.Kinds.Kind,
                       Language.PureScript.Environment.TypeKind))
                   Language.PureScript.Environment.primTypes29
                   Language.PureScript.Environment.primTypes5) -}
75c531515af06afe0292a3e019a9df81
  primTypes40 :: Language.PureScript.Kinds.Kind
  {- Strictness: m3,
     Unfolding: (Language.PureScript.Kinds.FunKind
                   Language.PureScript.Environment.kindType
                   Language.PureScript.Environment.kindType) -}
1e5b0fbddab8bc9de07c85f8b62d2fd3
  primTypes41 ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName)
  {- Strictness: m,
     Unfolding: (Language.PureScript.Names.Qualified
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.TypeName)
                   Language.PureScript.Environment.kindSymbol3
                   Language.PureScript.Environment.primTypes42
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.TypeName>_P))) -}
b2438afff59df4d6ecc7ca88fb11befe
  primTypes42 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Environment.primTypes43) -}
068db744f068bd0ee5862be4a88394d4
  primTypes43 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Array"#) -}
2613ebd7dc5585dd9c879c684f6eccea
  primTypes44 ::
    (Language.PureScript.Names.Qualified
       (Language.PureScript.Names.ProperName
          'Language.PureScript.Names.TypeName),
     (Language.PureScript.Kinds.Kind,
      Language.PureScript.Environment.TypeKind))
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Environment.primTypes47,
                  Language.PureScript.Environment.primTypes45)) -}
58791b5bca566626f5b7b24ff213d37e
  primTypes45 ::
    (Language.PureScript.Kinds.Kind,
     Language.PureScript.Environment.TypeKind)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Environment.primTypes46,
                  Language.PureScript.Environment.ExternData)) -}
d73f10f062e7155c0fa49ec6bd33d5ef
  primTypes46 :: Language.PureScript.Kinds.Kind
  {- Strictness: m3,
     Unfolding: (Language.PureScript.Kinds.FunKind
                   Language.PureScript.Environment.kindType
                   Language.PureScript.Environment.primTypes40) -}
178d63e9f780c91ad09c646b77d39c5b
  primTypes47 ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName)
  {- Strictness: m,
     Unfolding: (Language.PureScript.Names.Qualified
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.TypeName)
                   Language.PureScript.Environment.kindSymbol3
                   Language.PureScript.Environment.primTypes48
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.TypeName>_P))) -}
977a17589f80efe53a4fae5686286ef6
  primTypes48 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Environment.primTypes49) -}
69a9da2f63312f47eb9f8ab4744172b7
  primTypes49 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Function"#) -}
525169e84387abf1d2f0be5ca46e01e5
  primTypes5 ::
    [(Language.PureScript.Names.Qualified
        (Language.PureScript.Names.ProperName
           'Language.PureScript.Names.TypeName),
      (Language.PureScript.Kinds.Kind,
       Language.PureScript.Environment.TypeKind))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.Qualified
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.TypeName),
                      (Language.PureScript.Kinds.Kind,
                       Language.PureScript.Environment.TypeKind))
                   Language.PureScript.Environment.primTypes25
                   Language.PureScript.Environment.primTypes6) -}
1483f1547b0e3c1ce23e98465e42d4d1
  primTypes6 ::
    [(Language.PureScript.Names.Qualified
        (Language.PureScript.Names.ProperName
           'Language.PureScript.Names.TypeName),
      (Language.PureScript.Kinds.Kind,
       Language.PureScript.Environment.TypeKind))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.Qualified
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.TypeName),
                      (Language.PureScript.Kinds.Kind,
                       Language.PureScript.Environment.TypeKind))
                   Language.PureScript.Environment.primTypes21
                   Language.PureScript.Environment.primTypes7) -}
3533cd11eb30466ac6daa2d6ccacd231
  primTypes7 ::
    [(Language.PureScript.Names.Qualified
        (Language.PureScript.Names.ProperName
           'Language.PureScript.Names.TypeName),
      (Language.PureScript.Kinds.Kind,
       Language.PureScript.Environment.TypeKind))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.Qualified
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.TypeName),
                      (Language.PureScript.Kinds.Kind,
                       Language.PureScript.Environment.TypeKind))
                   Language.PureScript.Environment.primTypes17
                   Language.PureScript.Environment.primTypes8) -}
6919585fcb3ec45279b0619769d12dec
  primTypes8 ::
    [(Language.PureScript.Names.Qualified
        (Language.PureScript.Names.ProperName
           'Language.PureScript.Names.TypeName),
      (Language.PureScript.Kinds.Kind,
       Language.PureScript.Environment.TypeKind))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.Qualified
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.TypeName),
                      (Language.PureScript.Kinds.Kind,
                       Language.PureScript.Environment.TypeKind))
                   Language.PureScript.Environment.primTypes13
                   Language.PureScript.Environment.primTypes9) -}
96318630beb2926ef725b5293ad76f31
  primTypes9 ::
    [(Language.PureScript.Names.Qualified
        (Language.PureScript.Names.ProperName
           'Language.PureScript.Names.TypeName),
      (Language.PureScript.Kinds.Kind,
       Language.PureScript.Environment.TypeKind))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.Qualified
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.TypeName),
                      (Language.PureScript.Kinds.Kind,
                       Language.PureScript.Environment.TypeKind))
                   Language.PureScript.Environment.primTypes10
                   (GHC.Types.[]
                      @ (Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.TypeName),
                         (Language.PureScript.Kinds.Kind,
                          Language.PureScript.Environment.TypeKind)))) -}
48c211f66429380bb92dd8655ff634a6
  showDataDeclType ::
    Language.PureScript.Environment.DataDeclType
    -> Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Environment.DataDeclType) ->
                 case ds of wild {
                   Language.PureScript.Environment.Data
                   -> Language.PureScript.Environment.$fFromJSONDataDeclType12
                   Language.PureScript.Environment.Newtype
                   -> Language.PureScript.Environment.$fFromJSONDataDeclType10 }) -}
81f14ae728cec93bb11eabd18758f146
  tyArray :: Language.PureScript.Types.Type
  {- Strictness: m5,
     Unfolding: (Language.PureScript.Types.TypeConstructor
                   Language.PureScript.Environment.primTypes41) -}
b6b014651bd347e6306756e774ac09f3
  tyBoolean :: Language.PureScript.Types.Type
  {- Strictness: m5,
     Unfolding: (Language.PureScript.Types.TypeConstructor
                   Language.PureScript.Environment.primTypes14) -}
3f83c8eacac1227da7046fd75e410585
  tyChar :: Language.PureScript.Types.Type
  {- Strictness: m5,
     Unfolding: (Language.PureScript.Types.TypeConstructor
                   Language.PureScript.Environment.primTypes26) -}
9783ce0b37378c763c53f9a28f7311d6
  tyFunction :: Language.PureScript.Types.Type
  {- Strictness: m5,
     Unfolding: (Language.PureScript.Types.TypeConstructor
                   Language.PureScript.Environment.primTypes47) -}
864447955e1494a59378982ed1647643
  tyInt :: Language.PureScript.Types.Type
  {- Strictness: m5,
     Unfolding: (Language.PureScript.Types.TypeConstructor
                   Language.PureScript.Environment.primTypes18) -}
845e1bfbb371abdae358bdc11b014cc3
  tyNumber :: Language.PureScript.Types.Type
  {- Strictness: m5,
     Unfolding: (Language.PureScript.Types.TypeConstructor
                   Language.PureScript.Environment.primTypes22) -}
fcace11d48da9699cb692901edeeb943
  tyRecord :: Language.PureScript.Types.Type
  {- Strictness: m5,
     Unfolding: (Language.PureScript.Types.TypeConstructor
                   Language.PureScript.Environment.primTypes35) -}
73f340bef1bd8d60703cf847c38446bd
  tyString :: Language.PureScript.Types.Type
  {- Strictness: m5,
     Unfolding: (Language.PureScript.Types.TypeConstructor
                   Language.PureScript.Environment.primTypes30) -}
ef672654cffb5adb82634076fd85ad4a
  typeClassArguments ::
    Language.PureScript.Environment.TypeClassData
    -> [(Data.Text.Internal.Text,
         GHC.Base.Maybe Language.PureScript.Kinds.Kind)]
  RecSel Left Language.PureScript.Environment.TypeClassData
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLLL),1*U(1*U,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Environment.TypeClassData) ->
                 case ds of wild { Language.PureScript.Environment.TypeClassData ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds1 }) -}
ef672654cffb5adb82634076fd85ad4a
  typeClassCoveringSets ::
    Language.PureScript.Environment.TypeClassData
    -> Data.Set.Internal.Set (Data.Set.Internal.Set GHC.Types.Int)
  RecSel Left Language.PureScript.Environment.TypeClassData
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLS),1*U(A,A,A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Environment.TypeClassData) ->
                 case ds of wild { Language.PureScript.Environment.TypeClassData ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds6 }) -}
ef672654cffb5adb82634076fd85ad4a
  typeClassDependencies ::
    Language.PureScript.Environment.TypeClassData
    -> [Language.PureScript.Environment.FunctionalDependency]
  RecSel Left Language.PureScript.Environment.TypeClassData
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSLL),1*U(A,A,A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Environment.TypeClassData) ->
                 case ds of wild { Language.PureScript.Environment.TypeClassData ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds4 }) -}
ef672654cffb5adb82634076fd85ad4a
  typeClassDeterminedArguments ::
    Language.PureScript.Environment.TypeClassData
    -> Data.Set.Internal.Set GHC.Types.Int
  RecSel Left Language.PureScript.Environment.TypeClassData
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLSL),1*U(A,A,A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Environment.TypeClassData) ->
                 case ds of wild { Language.PureScript.Environment.TypeClassData ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds5 }) -}
c291d940fae22a3f1400d8c90f26bdd4
  typeClassDictionaries ::
    Language.PureScript.Environment.Environment
    -> Data.Map.Internal.Map
         (GHC.Base.Maybe Language.PureScript.Names.ModuleName)
         (Data.Map.Internal.Map
            (Language.PureScript.Names.Qualified
               (Language.PureScript.Names.ProperName
                  'Language.PureScript.Names.ClassName))
            (Data.Map.Internal.Map
               (Language.PureScript.Names.Qualified
                  Language.PureScript.Names.Ident)
               Language.PureScript.TypeClassDictionaries.NamedDict))
  RecSel Left Language.PureScript.Environment.Environment
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLSLL),1*U(A,A,A,A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Environment.Environment) ->
                 case ds of wild { Language.PureScript.Environment.Environment ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds5 }) -}
ef672654cffb5adb82634076fd85ad4a
  typeClassMembers ::
    Language.PureScript.Environment.TypeClassData
    -> [(Language.PureScript.Names.Ident,
         Language.PureScript.Types.Type)]
  RecSel Left Language.PureScript.Environment.TypeClassData
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLLL),1*U(A,1*U,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Environment.TypeClassData) ->
                 case ds of wild { Language.PureScript.Environment.TypeClassData ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds2 }) -}
ef672654cffb5adb82634076fd85ad4a
  typeClassSuperclasses ::
    Language.PureScript.Environment.TypeClassData
    -> [Language.PureScript.Types.Constraint]
  RecSel Left Language.PureScript.Environment.TypeClassData
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLLL),1*U(A,A,1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Environment.TypeClassData) ->
                 case ds of wild { Language.PureScript.Environment.TypeClassData ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds3 }) -}
c291d940fae22a3f1400d8c90f26bdd4
  typeClasses ::
    Language.PureScript.Environment.Environment
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName))
         Language.PureScript.Environment.TypeClassData
  RecSel Left Language.PureScript.Environment.Environment
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLSL),1*U(A,A,A,A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Environment.Environment) ->
                 case ds of wild { Language.PureScript.Environment.Environment ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds6 }) -}
c291d940fae22a3f1400d8c90f26bdd4
  typeSynonyms ::
    Language.PureScript.Environment.Environment
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.TypeName))
         ([(Data.Text.Internal.Text,
            GHC.Base.Maybe Language.PureScript.Kinds.Kind)],
          Language.PureScript.Types.Type)
  RecSel Left Language.PureScript.Environment.Environment
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSLLL),1*U(A,A,A,1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Environment.Environment) ->
                 case ds of wild { Language.PureScript.Environment.Environment ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds4 }) -}
c291d940fae22a3f1400d8c90f26bdd4
  types ::
    Language.PureScript.Environment.Environment
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.TypeName))
         (Language.PureScript.Kinds.Kind,
          Language.PureScript.Environment.TypeKind)
  RecSel Left Language.PureScript.Environment.Environment
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLLLL),1*U(A,1*U,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Environment.Environment) ->
                 case ds of wild { Language.PureScript.Environment.Environment ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds2 }) -}
instance GHC.Classes.Eq [Language.PureScript.Environment.DataDeclType]
  = Language.PureScript.Environment.$fEqDataDeclType
instance GHC.Classes.Eq [Language.PureScript.Environment.NameKind]
  = Language.PureScript.Environment.$fEqNameKind
instance GHC.Classes.Eq [Language.PureScript.Environment.NameVisibility]
  = Language.PureScript.Environment.$fEqNameVisibility
instance GHC.Classes.Eq [Language.PureScript.Environment.TypeKind]
  = Language.PureScript.Environment.$fEqTypeKind
instance Data.Aeson.Types.FromJSON.FromJSON [Language.PureScript.Environment.DataDeclType]
  = Language.PureScript.Environment.$fFromJSONDataDeclType
instance Data.Aeson.Types.FromJSON.FromJSON [Language.PureScript.Environment.FunctionalDependency]
  = Language.PureScript.Environment.$fFromJSONFunctionalDependency
instance Data.Aeson.Types.FromJSON.FromJSON [Language.PureScript.Environment.TypeKind]
  = Language.PureScript.Environment.$fFromJSONTypeKind
instance GHC.Generics.Generic [Language.PureScript.Environment.DataDeclType]
  = Language.PureScript.Environment.$fGenericDataDeclType
instance GHC.Generics.Generic [Language.PureScript.Environment.Environment]
  = Language.PureScript.Environment.$fGenericEnvironment
instance GHC.Generics.Generic [Language.PureScript.Environment.FunctionalDependency]
  = Language.PureScript.Environment.$fGenericFunctionalDependency
instance GHC.Generics.Generic [Language.PureScript.Environment.NameKind]
  = Language.PureScript.Environment.$fGenericNameKind
instance GHC.Generics.Generic [Language.PureScript.Environment.NameVisibility]
  = Language.PureScript.Environment.$fGenericNameVisibility
instance GHC.Generics.Generic [Language.PureScript.Environment.TypeClassData]
  = Language.PureScript.Environment.$fGenericTypeClassData
instance GHC.Generics.Generic [Language.PureScript.Environment.TypeKind]
  = Language.PureScript.Environment.$fGenericTypeKind
instance Control.DeepSeq.NFData [Language.PureScript.Environment.DataDeclType]
  = Language.PureScript.Environment.$fNFDataDataDeclType
instance Control.DeepSeq.NFData [Language.PureScript.Environment.Environment]
  = Language.PureScript.Environment.$fNFDataEnvironment
instance Control.DeepSeq.NFData [Language.PureScript.Environment.FunctionalDependency]
  = Language.PureScript.Environment.$fNFDataFunctionalDependency
instance Control.DeepSeq.NFData [Language.PureScript.Environment.NameKind]
  = Language.PureScript.Environment.$fNFDataNameKind
instance Control.DeepSeq.NFData [Language.PureScript.Environment.NameVisibility]
  = Language.PureScript.Environment.$fNFDataNameVisibility
instance Control.DeepSeq.NFData [Language.PureScript.Environment.TypeClassData]
  = Language.PureScript.Environment.$fNFDataTypeClassData
instance Control.DeepSeq.NFData [Language.PureScript.Environment.TypeKind]
  = Language.PureScript.Environment.$fNFDataTypeKind
instance GHC.Classes.Ord [Language.PureScript.Environment.DataDeclType]
  = Language.PureScript.Environment.$fOrdDataDeclType
instance GHC.Show.Show [Language.PureScript.Environment.DataDeclType]
  = Language.PureScript.Environment.$fShowDataDeclType
instance GHC.Show.Show [Language.PureScript.Environment.Environment]
  = Language.PureScript.Environment.$fShowEnvironment
instance GHC.Show.Show [Language.PureScript.Environment.FunctionalDependency]
  = Language.PureScript.Environment.$fShowFunctionalDependency
instance GHC.Show.Show [Language.PureScript.Environment.NameKind]
  = Language.PureScript.Environment.$fShowNameKind
instance GHC.Show.Show [Language.PureScript.Environment.NameVisibility]
  = Language.PureScript.Environment.$fShowNameVisibility
instance GHC.Show.Show [Language.PureScript.Environment.TypeClassData]
  = Language.PureScript.Environment.$fShowTypeClassData
instance GHC.Show.Show [Language.PureScript.Environment.TypeKind]
  = Language.PureScript.Environment.$fShowTypeKind
instance Data.Aeson.Types.ToJSON.ToJSON [Language.PureScript.Environment.DataDeclType]
  = Language.PureScript.Environment.$fToJSONDataDeclType
instance Data.Aeson.Types.ToJSON.ToJSON [Language.PureScript.Environment.FunctionalDependency]
  = Language.PureScript.Environment.$fToJSONFunctionalDependency
instance Data.Aeson.Types.ToJSON.ToJSON [Language.PureScript.Environment.TypeKind]
  = Language.PureScript.Environment.$fToJSONTypeKind
family instance GHC.Generics.Rep [Language.PureScript.Environment.Environment]
  = Language.PureScript.Environment.Rep_Environment
family instance GHC.Generics.Rep [Language.PureScript.Environment.DataDeclType]
  = Language.PureScript.Environment.Rep_DataDeclType
family instance GHC.Generics.Rep [Language.PureScript.Environment.TypeKind]
  = Language.PureScript.Environment.Rep_TypeKind
family instance GHC.Generics.Rep [Language.PureScript.Environment.NameKind]
  = Language.PureScript.Environment.Rep_NameKind
family instance GHC.Generics.Rep [Language.PureScript.Environment.NameVisibility]
  = Language.PureScript.Environment.Rep_NameVisibility
family instance GHC.Generics.Rep [Language.PureScript.Environment.TypeClassData]
  = Language.PureScript.Environment.Rep_TypeClassData
family instance GHC.Generics.Rep [Language.PureScript.Environment.FunctionalDependency]
  = Language.PureScript.Environment.Rep_FunctionalDependency
"SC:$w$sgo130" [0] forall @ a
                          (sc :: GHC.Prim.Int#)
                          (sc1 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                          (sc2 :: Language.PureScript.Names.ProperName
                                    'Language.PureScript.Names.TypeName)
                          (sc3 :: a)
                          (sc4 :: Data.Map.Internal.Map
                                    (Language.PureScript.Names.Qualified
                                       (Language.PureScript.Names.ProperName
                                          'Language.PureScript.Names.TypeName))
                                    a)
                          (sc5 :: Data.Map.Internal.Map
                                    (Language.PureScript.Names.Qualified
                                       (Language.PureScript.Names.ProperName
                                          'Language.PureScript.Names.TypeName))
                                    a)
                          (sc6 :: a)
                          (sc7 :: Language.PureScript.Names.ProperName
                                    'Language.PureScript.Names.TypeName)
                          (sc8 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                          (sc9 :: Language.PureScript.Names.Qualified
                                    (Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.TypeName))
  Language.PureScript.Environment.$w$sgo13 @ a
                                           sc9
                                           sc8
                                           sc7
                                           sc6
                                           (Data.Map.Internal.Bin
                                              @ (Language.PureScript.Names.Qualified
                                                   (Language.PureScript.Names.ProperName
                                                      'Language.PureScript.Names.TypeName))
                                              @ a
                                              sc
                                              (Language.PureScript.Names.Qualified
                                                 @ (Language.PureScript.Names.ProperName
                                                      'Language.PureScript.Names.TypeName)
                                                 sc1
                                                 sc2)
                                              sc3
                                              sc4
                                              sc5)
  = Language.PureScript.Environment.$sinsert_$s$w$sgo13
      @ a
      sc
      sc1
      sc2
      sc3
      sc4
      sc5
      sc6
      sc7
      sc8
      sc9
"SC:$w$sgo130" [0] forall @ a
                          (sc :: GHC.Prim.Int#)
                          (sc1 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                          (sc2 :: Language.PureScript.Names.ProperName
                                    'Language.PureScript.Names.ClassName)
                          (sc3 :: a)
                          (sc4 :: Data.Map.Internal.Map
                                    (Language.PureScript.Names.Qualified
                                       (Language.PureScript.Names.ProperName
                                          'Language.PureScript.Names.ClassName))
                                    a)
                          (sc5 :: Data.Map.Internal.Map
                                    (Language.PureScript.Names.Qualified
                                       (Language.PureScript.Names.ProperName
                                          'Language.PureScript.Names.ClassName))
                                    a)
                          (sc6 :: a)
                          (sc7 :: Language.PureScript.Names.ProperName
                                    'Language.PureScript.Names.ClassName)
                          (sc8 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                          (sc9 :: Language.PureScript.Names.Qualified
                                    (Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.ClassName))
  Language.PureScript.Environment.$w$sgo1 @ a
                                          sc9
                                          sc8
                                          sc7
                                          sc6
                                          (Data.Map.Internal.Bin
                                             @ (Language.PureScript.Names.Qualified
                                                  (Language.PureScript.Names.ProperName
                                                     'Language.PureScript.Names.ClassName))
                                             @ a
                                             sc
                                             (Language.PureScript.Names.Qualified
                                                @ (Language.PureScript.Names.ProperName
                                                     'Language.PureScript.Names.ClassName)
                                                sc1
                                                sc2)
                                             sc3
                                             sc4
                                             sc5)
  = Language.PureScript.Environment.$sinsert_$s$w$sgo1
      @ a
      sc
      sc1
      sc2
      sc3
      sc4
      sc5
      sc6
      sc7
      sc8
      sc9
"SC:$w$sgo30" [0] forall (sc :: GHC.Prim.Int#)
                         (sc1 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                         (sc2 :: Language.PureScript.Names.ProperName
                                   'Language.PureScript.Names.KindName)
                         (sc3 :: Data.Set.Internal.Set
                                   (Language.PureScript.Names.Qualified
                                      (Language.PureScript.Names.ProperName
                                         'Language.PureScript.Names.KindName)))
                         (sc4 :: Data.Set.Internal.Set
                                   (Language.PureScript.Names.Qualified
                                      (Language.PureScript.Names.ProperName
                                         'Language.PureScript.Names.KindName)))
                         (sc5 :: Language.PureScript.Names.ProperName
                                   'Language.PureScript.Names.KindName)
                         (sc6 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                         (sc7 :: Language.PureScript.Names.Qualified
                                   (Language.PureScript.Names.ProperName
                                      'Language.PureScript.Names.KindName))
  Language.PureScript.Environment.$w$sgo3 sc7
                                          sc6
                                          sc5
                                          (Data.Set.Internal.Bin
                                             @ (Language.PureScript.Names.Qualified
                                                  (Language.PureScript.Names.ProperName
                                                     'Language.PureScript.Names.KindName))
                                             sc
                                             (Language.PureScript.Names.Qualified
                                                @ (Language.PureScript.Names.ProperName
                                                     'Language.PureScript.Names.KindName)
                                                sc1
                                                sc2)
                                             sc3
                                             sc4)
  = Language.PureScript.Environment.$sinsert_$s$w$sgo3
      sc
      sc1
      sc2
      sc3
      sc4
      sc5
      sc6
      sc7
"SC:$wpoly_go130" [0] forall @ a
                             (sc :: Data.Map.Internal.Map
                                      (Language.PureScript.Names.Qualified
                                         Language.PureScript.Names.Ident)
                                      a)
                             (sc1 :: Language.PureScript.Names.Ident)
  Language.PureScript.Environment.$wpoly_go13 @ a
                                              (GHC.Base.Nothing
                                                 @ Language.PureScript.Names.ModuleName)
                                              sc1
                                              sc
  = Language.PureScript.Environment.$slookup_$s$wpoly_go1 @ a sc sc1
"SC:$wpoly_go130" [0] forall @ a
                             (sc :: Data.Map.Internal.Map
                                      (Language.PureScript.Names.Qualified
                                         (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.ConstructorName))
                                      a)
                             (sc1 :: Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.ConstructorName)
  Language.PureScript.Environment.$wpoly_go1 @ a
                                             (GHC.Base.Nothing
                                                @ Language.PureScript.Names.ModuleName)
                                             sc1
                                             sc
  = Language.PureScript.Environment.$slookup_$s$wpoly_go3 @ a sc sc1
"SC:$wpoly_go131" [0] forall @ a
                             (sc :: Data.Map.Internal.Map
                                      (Language.PureScript.Names.Qualified
                                         Language.PureScript.Names.Ident)
                                      a)
                             (sc1 :: Language.PureScript.Names.Ident)
                             (sc2 :: Language.PureScript.Names.ModuleName)
  Language.PureScript.Environment.$wpoly_go13 @ a
                                              (GHC.Base.Just
                                                 @ Language.PureScript.Names.ModuleName
                                                 sc2)
                                              sc1
                                              sc
  = Language.PureScript.Environment.$slookup_$s$wpoly_go13
      @ a
      sc
      sc1
      sc2
"SC:$wpoly_go131" [0] forall @ a
                             (sc :: Data.Map.Internal.Map
                                      (Language.PureScript.Names.Qualified
                                         (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.ConstructorName))
                                      a)
                             (sc1 :: Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.ConstructorName)
                             (sc2 :: Language.PureScript.Names.ModuleName)
  Language.PureScript.Environment.$wpoly_go1 @ a
                                             (GHC.Base.Just
                                                @ Language.PureScript.Names.ModuleName
                                                sc2)
                                             sc1
                                             sc
  = Language.PureScript.Environment.$slookup_$s$wpoly_go2
      @ a
      sc
      sc1
      sc2
"SC:$wpoly_go132" [0] forall @ a
                             (sc :: Data.Map.Internal.Map
                                      (Language.PureScript.Names.Qualified
                                         (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.ConstructorName))
                                      a)
                             (sc1 :: GHC.Prim.ByteArray#)
                             (sc2 :: GHC.Prim.Int#)
                             (sc3 :: GHC.Prim.Int#)
                             (sg :: (Data.Text.Internal.Text :: *)
                                    ~R# (Language.PureScript.Names.ProperName
                                           'Language.PureScript.Names.ConstructorName :: *))
  Language.PureScript.Environment.$wpoly_go1 @ a
                                             (GHC.Base.Nothing
                                                @ Language.PureScript.Names.ModuleName)
                                             (Data.Text.Internal.Text sc1 sc2 sc3) `cast` sg
                                             sc
  = Language.PureScript.Environment.$slookup_$s$wpoly_go4
      @ a
      sc
      sc1
      sc2
      sc3
      @~ sg
"SPEC/Language.PureScript.Environment $fEq(,) @ (ProperName
                                                  'ConstructorName) @ [Type]" [orphan] forall (v1 :: GHC.Classes.Eq
                                                                                                                                                                   [Language.PureScript.Types.Type])
                                                                                                                                                          (v :: GHC.Classes.Eq
                                                                                                                                                                  (Language.PureScript.Names.ProperName
                                                                                                                                                                     'Language.PureScript.Names.ConstructorName))
  GHC.Classes.$fEq(,) @ (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.ConstructorName)
                      @ [Language.PureScript.Types.Type]
                      v
                      v1
  = Language.PureScript.Environment.$fEqTypeKind_$s$fEq(,)
"SPEC/Language.PureScript.Environment $fEq(,) @ Text @ (Maybe Kind)" [orphan] forall (v1 :: GHC.Classes.Eq
                                                                                              (GHC.Base.Maybe
                                                                                                 Language.PureScript.Kinds.Kind))
                                                                                     (v :: GHC.Classes.Eq
                                                                                             Data.Text.Internal.Text)
  GHC.Classes.$fEq(,) @ Data.Text.Internal.Text
                      @ (GHC.Base.Maybe Language.PureScript.Kinds.Kind)
                      v
                      v1
  = Language.PureScript.Environment.$fEqTypeKind_$s$fEq(,)1
"SPEC/Language.PureScript.Environment $fEq(,)_$c/= @ (ProperName
                                                       'ConstructorName) @ [Type]" [orphan] forall ($dEq1 :: GHC.Classes.Eq
                                                                                                                                                                                [Language.PureScript.Types.Type])
                                                                                                                                                                    ($dEq :: GHC.Classes.Eq
                                                                                                                                                                               (Language.PureScript.Names.ProperName
                                                                                                                                                                                  'Language.PureScript.Names.ConstructorName))
  GHC.Classes.$fEq(,)_$c/= @ (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ConstructorName)
                           @ [Language.PureScript.Types.Type]
                           $dEq
                           $dEq1
  = Language.PureScript.Environment.$fEqTypeKind_$s$fEq(,)_$c/=
"SPEC/Language.PureScript.Environment $fEq(,)_$c/= @ Text @ (Maybe
                                                              Kind)" [orphan] forall ($dEq1 :: GHC.Classes.Eq
                                                                                                                                                                    (GHC.Base.Maybe
                                                                                                                                                                       Language.PureScript.Kinds.Kind))
                                                                                                                                                        ($dEq :: GHC.Classes.Eq
                                                                                                                                                                   Data.Text.Internal.Text)
  GHC.Classes.$fEq(,)_$c/= @ Data.Text.Internal.Text
                           @ (GHC.Base.Maybe Language.PureScript.Kinds.Kind)
                           $dEq
                           $dEq1
  = Language.PureScript.Environment.$fEqTypeKind_$s$fEq(,)_$c/=1
"SPEC/Language.PureScript.Environment $fEqMaybe @ Kind" [orphan] forall (v :: GHC.Classes.Eq
                                                                                Language.PureScript.Kinds.Kind)
  GHC.Base.$fEqMaybe @ Language.PureScript.Kinds.Kind v
  = Language.PureScript.Environment.$fEqTypeKind_$s$fEqMaybe
"SPEC/Language.PureScript.Environment $fEqMaybe_$c/= @ Kind" [orphan] forall ($dEq :: GHC.Classes.Eq
                                                                                        Language.PureScript.Kinds.Kind)
  GHC.Base.$fEqMaybe_$c/= @ Language.PureScript.Kinds.Kind $dEq
  = Language.PureScript.Environment.$fEqTypeKind_$s$fEqMaybe_$c/=
"SPEC/Language.PureScript.Environment $fEq[] @ Type" [orphan] forall (v :: GHC.Classes.Eq
                                                                             Language.PureScript.Types.Type)
  GHC.Classes.$fEq[] @ Language.PureScript.Types.Type v
  = Language.PureScript.Environment.$fEqTypeKind_$s$fEq[]
"SPEC/Language.PureScript.Environment $fEq[]_$c/= @ Type" [orphan] forall ($dEq :: GHC.Classes.Eq
                                                                                     Language.PureScript.Types.Type)
  GHC.Classes.$fEq[]_$c/= @ Language.PureScript.Types.Type $dEq
  = Language.PureScript.Environment.$fEqTypeKind_$s$fEq[]_$c/=
"SPEC/Language.PureScript.Environment $fFromJSONMaybe @ Kind" [orphan] forall (v :: Data.Aeson.Types.FromJSON.FromJSON
                                                                                      Language.PureScript.Kinds.Kind)
  Data.Aeson.Types.FromJSON.$fFromJSONMaybe @ Language.PureScript.Kinds.Kind
                                            v
  = Language.PureScript.Environment.$s$fFromJSONMaybe
"SPEC/Language.PureScript.Environment $fFromJSON[] @ Type" [orphan] forall (v :: Data.Aeson.Types.FromJSON.FromJSON
                                                                                   Language.PureScript.Types.Type)
  Data.Aeson.Types.FromJSON.$fFromJSON[] @ Language.PureScript.Types.Type
                                         v
  = Language.PureScript.Environment.$s$fFromJSON[]
"SPEC/Language.PureScript.Environment $fShow(,) @ Kind @ TypeKind" forall (v1 :: GHC.Show.Show
                                                                                   Language.PureScript.Environment.TypeKind)
                                                                          (v :: GHC.Show.Show
                                                                                  Language.PureScript.Kinds.Kind)
  GHC.Show.$fShow(,) @ Language.PureScript.Kinds.Kind
                     @ Language.PureScript.Environment.TypeKind
                     v
                     v1
  = Language.PureScript.Environment.$s$fShow(,)1
"SPEC/Language.PureScript.Environment $fShow(,)_$cshowsPrec @ Kind @ TypeKind" [0] forall (w1 :: GHC.Show.Show
                                                                                                   Language.PureScript.Environment.TypeKind)
                                                                                          (w :: GHC.Show.Show
                                                                                                  Language.PureScript.Kinds.Kind)
  GHC.Show.$fShow(,)_$cshowsPrec @ Language.PureScript.Kinds.Kind
                                 @ Language.PureScript.Environment.TypeKind
                                 w
                                 w1
  = Language.PureScript.Environment.$s$fShow(,)_$cshowsPrec2
"SPEC/Language.PureScript.Environment $fShow(,,) @ Type @ NameKind @ NameVisibility" forall (v2 :: GHC.Show.Show
                                                                                                     Language.PureScript.Environment.NameVisibility)
                                                                                            (v1 :: GHC.Show.Show
                                                                                                     Language.PureScript.Environment.NameKind)
                                                                                            (v :: GHC.Show.Show
                                                                                                    Language.PureScript.Types.Type)
  GHC.Show.$fShow(,,) @ Language.PureScript.Types.Type
                      @ Language.PureScript.Environment.NameKind
                      @ Language.PureScript.Environment.NameVisibility
                      v
                      v1
                      v2
  = Language.PureScript.Environment.$s$fShow(,,)
"SPEC/Language.PureScript.Environment $fShow(,,,) @ DataDeclType @ (ProperName
                                                                     'TypeName) @ Type @ [Ident]" forall (v3 :: GHC.Show.Show
                                                                                                                                                                                                 [Language.PureScript.Names.Ident])
                                                                                                                                                                                        (v2 :: GHC.Show.Show
                                                                                                                                                                                                 Language.PureScript.Types.Type)
                                                                                                                                                                                        (v1 :: GHC.Show.Show
                                                                                                                                                                                                 (Language.PureScript.Names.ProperName
                                                                                                                                                                                                    'Language.PureScript.Names.TypeName))
                                                                                                                                                                                        (v :: GHC.Show.Show
                                                                                                                                                                                                Language.PureScript.Environment.DataDeclType)
  GHC.Show.$fShow(,,,) @ Language.PureScript.Environment.DataDeclType
                       @ (Language.PureScript.Names.ProperName
                            'Language.PureScript.Names.TypeName)
                       @ Language.PureScript.Types.Type
                       @ [Language.PureScript.Names.Ident]
                       v
                       v1
                       v2
                       v3
  = Language.PureScript.Environment.$s$fShow(,,,)
"SPEC/Language.PureScript.Environment $fShowMap @ (Qualified
                                                    Ident) @ (TypeClassDictionaryInScope
                                                                (Qualified Ident))" [orphan] forall (v1 :: GHC.Show.Show
                                                                                                                                                                                                                                                                   (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
                                                                                                                                                                                                                                                                      (Language.PureScript.Names.Qualified
                                                                                                                                                                                                                                                                         Language.PureScript.Names.Ident)))
                                                                                                                                                                                                                                                          (v :: GHC.Show.Show
                                                                                                                                                                                                                                                                  (Language.PureScript.Names.Qualified
                                                                                                                                                                                                                                                                     Language.PureScript.Names.Ident))
  Data.Map.Internal.$fShowMap @ (Language.PureScript.Names.Qualified
                                   Language.PureScript.Names.Ident)
                              @ (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
                                   (Language.PureScript.Names.Qualified
                                      Language.PureScript.Names.Ident))
                              v
                              v1
  = Language.PureScript.Environment.$s$fShowMap
"SPEC/Language.PureScript.Environment $fShowMap_$cshow @ (Qualified
                                                           Ident) @ (TypeClassDictionaryInScope
                                                                       (Qualified Ident))" [orphan] forall ($dShow1 :: GHC.Show.Show
                                                                                                                                                                                                                                                                                             (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
                                                                                                                                                                                                                                                                                                (Language.PureScript.Names.Qualified
                                                                                                                                                                                                                                                                                                   Language.PureScript.Names.Ident)))
                                                                                                                                                                                                                                                                               ($dShow :: GHC.Show.Show
                                                                                                                                                                                                                                                                                            (Language.PureScript.Names.Qualified
                                                                                                                                                                                                                                                                                               Language.PureScript.Names.Ident))
  Data.Map.Internal.$fShowMap_$cshow @ (Language.PureScript.Names.Qualified
                                          Language.PureScript.Names.Ident)
                                     @ (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
                                          (Language.PureScript.Names.Qualified
                                             Language.PureScript.Names.Ident))
                                     $dShow
                                     $dShow1
  = Language.PureScript.Environment.$s$fShowMap_$cshow
"SPEC/Language.PureScript.Environment $fShowMap_$cshowList @ (Qualified
                                                               Ident) @ (TypeClassDictionaryInScope
                                                                           (Qualified Ident))" [orphan] forall ($dShow1 :: GHC.Show.Show
                                                                                                                                                                                                                                                                                                         (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
                                                                                                                                                                                                                                                                                                            (Language.PureScript.Names.Qualified
                                                                                                                                                                                                                                                                                                               Language.PureScript.Names.Ident)))
                                                                                                                                                                                                                                                                                           ($dShow :: GHC.Show.Show
                                                                                                                                                                                                                                                                                                        (Language.PureScript.Names.Qualified
                                                                                                                                                                                                                                                                                                           Language.PureScript.Names.Ident))
  Data.Map.Internal.$fShowMap_$cshowList @ (Language.PureScript.Names.Qualified
                                              Language.PureScript.Names.Ident)
                                         @ (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
                                              (Language.PureScript.Names.Qualified
                                                 Language.PureScript.Names.Ident))
                                         $dShow
                                         $dShow1
  = Language.PureScript.Environment.$s$fShowMap_$cshowList
"SPEC/Language.PureScript.Environment $fShowMap_$cshowsPrec @ (Qualified
                                                                Ident) @ (TypeClassDictionaryInScope
                                                                            (Qualified Ident))" [orphan] [0] forall (w1 :: GHC.Show.Show
                                                                                                                                                                                                                                                                                                           (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
                                                                                                                                                                                                                                                                                                              (Language.PureScript.Names.Qualified
                                                                                                                                                                                                                                                                                                                 Language.PureScript.Names.Ident)))
                                                                                                                                                                                                                                                                                                  (w :: GHC.Show.Show
                                                                                                                                                                                                                                                                                                          (Language.PureScript.Names.Qualified
                                                                                                                                                                                                                                                                                                             Language.PureScript.Names.Ident))
  Data.Map.Internal.$fShowMap_$cshowsPrec @ (Language.PureScript.Names.Qualified
                                               Language.PureScript.Names.Ident)
                                          @ (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
                                               (Language.PureScript.Names.Qualified
                                                  Language.PureScript.Names.Ident))
                                          w
                                          w1
  = Language.PureScript.Environment.$s$fShowMap_$cshowsPrec
"SPEC/Language.PureScript.Environment $fShowMaybe @ Kind" [orphan] forall (v :: GHC.Show.Show
                                                                                  Language.PureScript.Kinds.Kind)
  GHC.Show.$fShowMaybe @ Language.PureScript.Kinds.Kind v
  = Language.PureScript.Environment.$s$fShow(,)_$s$fShowMaybe
"SPEC/Language.PureScript.Environment $fShowMaybe @ ModuleName" [orphan] forall (v :: GHC.Show.Show
                                                                                        Language.PureScript.Names.ModuleName)
  GHC.Show.$fShowMaybe @ Language.PureScript.Names.ModuleName v
  = Language.PureScript.Environment.$s$fShowMap_$cshowsPrec_$s$fShowMaybe
"SPEC/Language.PureScript.Environment $fShowQualified @ (ProperName
                                                          'ClassName)" [orphan] forall (v :: GHC.Show.Show
                                                                                                                                                                   (Language.PureScript.Names.ProperName
                                                                                                                                                                      'Language.PureScript.Names.ClassName))
  Language.PureScript.Names.$fShowQualified @ (Language.PureScript.Names.ProperName
                                                 'Language.PureScript.Names.ClassName)
                                            v
  = Language.PureScript.Environment.$s$fShowMap_$cshowsPrec_$s$fShowQualified
"SPEC/Language.PureScript.Environment $fShowQualified @ (ProperName
                                                          'ConstructorName)" [orphan] forall (v :: GHC.Show.Show
                                                                                                                                                                         (Language.PureScript.Names.ProperName
                                                                                                                                                                            'Language.PureScript.Names.ConstructorName))
  Language.PureScript.Names.$fShowQualified @ (Language.PureScript.Names.ProperName
                                                 'Language.PureScript.Names.ConstructorName)
                                            v
  = Language.PureScript.Environment.$s$fShowMap_$cshowsPrec_$s$fShowQualified1
"SPEC/Language.PureScript.Environment $fShowQualified @ (ProperName
                                                          'KindName)" [orphan] forall (v :: GHC.Show.Show
                                                                                                                                                                  (Language.PureScript.Names.ProperName
                                                                                                                                                                     'Language.PureScript.Names.KindName))
  Language.PureScript.Names.$fShowQualified @ (Language.PureScript.Names.ProperName
                                                 'Language.PureScript.Names.KindName)
                                            v
  = Language.PureScript.Environment.$s$fShowQualified
"SPEC/Language.PureScript.Environment $fShowQualified @ (ProperName
                                                          'TypeName)" [orphan] forall (v :: GHC.Show.Show
                                                                                                                                                                  (Language.PureScript.Names.ProperName
                                                                                                                                                                     'Language.PureScript.Names.TypeName))
  Language.PureScript.Names.$fShowQualified @ (Language.PureScript.Names.ProperName
                                                 'Language.PureScript.Names.TypeName)
                                            v
  = Language.PureScript.Environment.$s$fShowMap_$cshowsPrec_$s$fShowQualified2
"SPEC/Language.PureScript.Environment $fShowQualified @ Ident" [orphan] forall (v :: GHC.Show.Show
                                                                                       Language.PureScript.Names.Ident)
  Language.PureScript.Names.$fShowQualified @ Language.PureScript.Names.Ident
                                            v
  = Language.PureScript.Environment.$s$fShowMap_$s$fShowQualified
"SPEC/Language.PureScript.Environment $fShowSet @ Int" [orphan] forall (v :: GHC.Show.Show
                                                                               GHC.Types.Int)
  Data.Set.Internal.$fShowSet @ GHC.Types.Int v
  = Language.PureScript.Environment.$s$fShowSet
"SPEC/Language.PureScript.Environment $fShowTypeClassDictionaryInScope @ (Qualified
                                                                           Ident)" [orphan] forall (v1 :: GHC.Show.Show
                                                                                                                                                                                                (Language.PureScript.Names.Qualified
                                                                                                                                                                                                   Language.PureScript.Names.Ident))
  Language.PureScript.TypeClassDictionaries.$fShowTypeClassDictionaryInScope @ (Language.PureScript.Names.Qualified
                                                                                  Language.PureScript.Names.Ident)
                                                                             v1
  = Language.PureScript.Environment.$s$fShowMap_$s$fShowTypeClassDictionaryInScope
"SPEC/Language.PureScript.Environment $fShow[] @ (Text, Maybe Kind)" [orphan] forall (v :: GHC.Show.Show
                                                                                             (Data.Text.Internal.Text,
                                                                                              GHC.Base.Maybe
                                                                                                Language.PureScript.Kinds.Kind))
  GHC.Show.$fShow[] @ (Data.Text.Internal.Text,
                       GHC.Base.Maybe Language.PureScript.Kinds.Kind)
                    v
  = Language.PureScript.Environment.$s$fShowMap_$cshowsPrec_$s$fShow[]
"SPEC/Language.PureScript.Environment $fShow[] @ Ident" [orphan] forall (v :: GHC.Show.Show
                                                                                Language.PureScript.Names.Ident)
  GHC.Show.$fShow[] @ Language.PureScript.Names.Ident v
  = Language.PureScript.Environment.$s$fShow(,,,)_$s$fShow[]
"SPEC/Language.PureScript.Environment $wsplitS @ (Qualified
                                                   (ProperName 'KindName))" [orphan] [0] forall (w :: GHC.Classes.Ord
                                                                                                                                                                    (Language.PureScript.Names.Qualified
                                                                                                                                                                       (Language.PureScript.Names.ProperName
                                                                                                                                                                          'Language.PureScript.Names.KindName)))
  Data.Set.Internal.$wsplitS @ (Language.PureScript.Names.Qualified
                                  (Language.PureScript.Names.ProperName
                                     'Language.PureScript.Names.KindName))
                             w
  = Language.PureScript.Environment.$s$wsplitS
"SPEC/Language.PureScript.Environment fromList @ (Qualified
                                                   (ProperName 'ClassName)) _" [orphan] forall @ a
                                                                                                                                                           ($dOrd :: GHC.Classes.Ord
                                                                                                                                                                       (Language.PureScript.Names.Qualified
                                                                                                                                                                          (Language.PureScript.Names.ProperName
                                                                                                                                                                             'Language.PureScript.Names.ClassName)))
  Data.Map.Internal.fromList @ (Language.PureScript.Names.Qualified
                                  (Language.PureScript.Names.ProperName
                                     'Language.PureScript.Names.ClassName))
                             @ a
                             $dOrd
  = Language.PureScript.Environment.$sfromList1 @ a
"SPEC/Language.PureScript.Environment fromList @ (Qualified
                                                   (ProperName 'KindName))" [orphan] forall ($dOrd :: GHC.Classes.Ord
                                                                                                                                                                    (Language.PureScript.Names.Qualified
                                                                                                                                                                       (Language.PureScript.Names.ProperName
                                                                                                                                                                          'Language.PureScript.Names.KindName)))
  Data.Set.Internal.fromList @ (Language.PureScript.Names.Qualified
                                  (Language.PureScript.Names.ProperName
                                     'Language.PureScript.Names.KindName))
                             $dOrd
  = Language.PureScript.Environment.$sfromList4
"SPEC/Language.PureScript.Environment fromList @ (Qualified
                                                   (ProperName 'TypeName)) _" [orphan] forall @ a
                                                                                                                                                          ($dOrd :: GHC.Classes.Ord
                                                                                                                                                                      (Language.PureScript.Names.Qualified
                                                                                                                                                                         (Language.PureScript.Names.ProperName
                                                                                                                                                                            'Language.PureScript.Names.TypeName)))
  Data.Map.Internal.fromList @ (Language.PureScript.Names.Qualified
                                  (Language.PureScript.Names.ProperName
                                     'Language.PureScript.Names.TypeName))
                             @ a
                             $dOrd
  = Language.PureScript.Environment.$sfromList @ a
"SPEC/Language.PureScript.Environment fromList @ (Set Int)" [orphan] forall ($dOrd :: GHC.Classes.Ord
                                                                                        (Data.Set.Internal.Set
                                                                                           GHC.Types.Int))
  Data.Set.Internal.fromList @ (Data.Set.Internal.Set GHC.Types.Int)
                             $dOrd
  = Language.PureScript.Environment.$sfromList3
"SPEC/Language.PureScript.Environment fromList @ Int" [orphan] forall ($dOrd :: GHC.Classes.Ord
                                                                                  GHC.Types.Int)
  Data.Set.Internal.fromList @ GHC.Types.Int $dOrd
  = Language.PureScript.Environment.$sfromList2
"SPEC/Language.PureScript.Environment union @ (Qualified
                                                (ProperName 'ClassName)) _" [orphan] forall @ a
                                                                                                                                                     ($dOrd :: GHC.Classes.Ord
                                                                                                                                                                 (Language.PureScript.Names.Qualified
                                                                                                                                                                    (Language.PureScript.Names.ProperName
                                                                                                                                                                       'Language.PureScript.Names.ClassName)))
  Data.Map.Internal.union @ (Language.PureScript.Names.Qualified
                               (Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.ClassName))
                          @ a
                          $dOrd
  = Language.PureScript.Environment.$sunion2 @ a
"SPEC/Language.PureScript.Environment union @ (Qualified
                                                (ProperName 'KindName))" [orphan] forall ($dOrd :: GHC.Classes.Ord
                                                                                                                                                              (Language.PureScript.Names.Qualified
                                                                                                                                                                 (Language.PureScript.Names.ProperName
                                                                                                                                                                    'Language.PureScript.Names.KindName)))
  Data.Set.Internal.union @ (Language.PureScript.Names.Qualified
                               (Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.KindName))
                          $dOrd
  = Language.PureScript.Environment.$sunion
"SPEC/Language.PureScript.Environment union @ (Qualified
                                                (ProperName 'TypeName)) _" [orphan] forall @ a
                                                                                                                                                    ($dOrd :: GHC.Classes.Ord
                                                                                                                                                                (Language.PureScript.Names.Qualified
                                                                                                                                                                   (Language.PureScript.Names.ProperName
                                                                                                                                                                      'Language.PureScript.Names.TypeName)))
  Data.Map.Internal.union @ (Language.PureScript.Names.Qualified
                               (Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.TypeName))
                          @ a
                          $dOrd
  = Language.PureScript.Environment.$sunion1 @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

