
==================== FINAL INTERFACE ====================
2018-11-30 19:28:21.517511 UTC

interface purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Docs.RenderedCode.Types [family instance module] 8043
  interface hash: e8125dfe348e0cf54035c629601b42af
  ABI hash: 043476f1219ebaba7bef38f3035bc7df
  export-list hash: 5c846e39a8e35d0cd82e369fdbd93a5f
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 38a54ede511c0f64849c216068b06e96
  opt_hash: 2c98c95d41c045ae9c2fb565ec8aabc6
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Language.PureScript.Docs.RenderedCode.Types.alias
  Language.PureScript.Docs.RenderedCode.Types.aliasName
  Language.PureScript.Docs.RenderedCode.Types.asContainingModule
  Language.PureScript.Docs.RenderedCode.Types.asRenderedCode
  Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement
  Language.PureScript.Docs.RenderedCode.Types.containingModuleToMaybe
  Language.PureScript.Docs.RenderedCode.Types.dataCtor
  Language.PureScript.Docs.RenderedCode.Types.fromContainingModule
  Language.PureScript.Docs.RenderedCode.Types.fromQualified
  Language.PureScript.Docs.RenderedCode.Types.ident
  Language.PureScript.Docs.RenderedCode.Types.keyword
  Language.PureScript.Docs.RenderedCode.Types.keywordAs
  Language.PureScript.Docs.RenderedCode.Types.keywordClass
  Language.PureScript.Docs.RenderedCode.Types.keywordData
  Language.PureScript.Docs.RenderedCode.Types.keywordFixity
  Language.PureScript.Docs.RenderedCode.Types.keywordForall
  Language.PureScript.Docs.RenderedCode.Types.keywordInstance
  Language.PureScript.Docs.RenderedCode.Types.keywordKind
  Language.PureScript.Docs.RenderedCode.Types.keywordNewtype
  Language.PureScript.Docs.RenderedCode.Types.keywordType
  Language.PureScript.Docs.RenderedCode.Types.keywordWhere
  Language.PureScript.Docs.RenderedCode.Types.kind
  Language.PureScript.Docs.RenderedCode.Types.maybeToContainingModule
  Language.PureScript.Docs.RenderedCode.Types.outputWith
  Language.PureScript.Docs.RenderedCode.Types.parens
  Language.PureScript.Docs.RenderedCode.Types.sp
  Language.PureScript.Docs.RenderedCode.Types.syntax
  Language.PureScript.Docs.RenderedCode.Types.typeCtor
  Language.PureScript.Docs.RenderedCode.Types.typeOp
  Language.PureScript.Docs.RenderedCode.Types.typeVar
  Language.PureScript.Docs.RenderedCode.Types.ContainingModule{Language.PureScript.Docs.RenderedCode.Types.OtherModule Language.PureScript.Docs.RenderedCode.Types.ThisModule}
  Language.PureScript.Docs.RenderedCode.Types.FixityAlias
  Language.PureScript.Docs.RenderedCode.Types.Link{Language.PureScript.Docs.RenderedCode.Types.Link Language.PureScript.Docs.RenderedCode.Types.NoLink}
  Language.PureScript.Docs.RenderedCode.Types.Namespace{Language.PureScript.Docs.RenderedCode.Types.KindLevel Language.PureScript.Docs.RenderedCode.Types.TypeLevel Language.PureScript.Docs.RenderedCode.Types.ValueLevel}
  Language.PureScript.Docs.RenderedCode.Types.RenderedCode
  Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement{Language.PureScript.Docs.RenderedCode.Types.Keyword Language.PureScript.Docs.RenderedCode.Types.Space Language.PureScript.Docs.RenderedCode.Types.Symbol Language.PureScript.Docs.RenderedCode.Types.Syntax}
module dependencies: Control.Monad.Supply
                     Control.Monad.Supply.Class Language.PureScript.AST
                     Language.PureScript.AST.Binders
                     Language.PureScript.AST.Declarations
                     Language.PureScript.AST.Exported Language.PureScript.AST.Literals
                     Language.PureScript.AST.Operators Language.PureScript.AST.SourcePos
                     Language.PureScript.AST.Traversals Language.PureScript.Bundle
                     Language.PureScript.Comments Language.PureScript.Constants
                     Language.PureScript.Crash Language.PureScript.Environment
                     Language.PureScript.Kinds Language.PureScript.Label
                     Language.PureScript.Names Language.PureScript.PSString
                     Language.PureScript.Traversals
                     Language.PureScript.TypeClassDictionaries Language.PureScript.Types
                     Paths_purescript
package dependencies: aeson-1.3.1.1 aeson-better-errors-0.9.1.0
                      array-0.5.2.0 async-2.2.1 attoparsec-0.13.2.2 base-4.11.1.0
                      base-compat-0.10.4 binary-0.8.5.1 blaze-builder-0.4.1.0
                      bytestring-0.10.8.2 containers-0.5.11.0 deepseq-1.4.3.0
                      dlist-0.8.0.4 filepath-1.4.2 ghc-boot-th-8.4.3 ghc-prim-0.5.2.0
                      hashable-1.2.7.0 integer-gmp-1.0.2.0 integer-logarithms-1.0.2.1
                      language-javascript-0.6.0.11 mtl-2.2.2 parsec-3.1.13.0
                      pretty-1.1.3.6 primitive-0.6.3.0 protolude-0.2.2 random-1.1
                      scientific-0.3.6.2 sourcemap-0.1.6 stm-2.4.5.0 syb-0.7 tagged-0.8.5
                      template-haskell-2.13.0.0 text-1.2.3.0 th-abstraction-0.2.8.0
                      time-1.8.0.2 time-locale-compat-0.1.1.4 transformers-0.5.5.0
                      unordered-containers-0.2.9.0 utf8-string-1.0.1.1 uuid-types-1.0.3
                      vector-0.12.0.1
orphans: syb-0.7:Data.Generics.Instances
         stm-2.4.5.0:Control.Monad.STM
         attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         vector-0.12.0.1:Data.Vector.Unboxed
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.0:Data.Text.Lazy
         text-1.2.3.0:Data.Text binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.5.0:Control.Monad.Trans.Error
         base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: aeson-1.3.1.1:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.Graph
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         dlist-0.8.0.4:Data.DList ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.AST.Declarations
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.AST.Operators
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.AST.SourcePos
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Environment
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Kinds
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Label
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Names
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.PSString
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.TypeClassDictionaries
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Types
                         tagged-0.8.5:Data.Tagged
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
                         th-abstraction-0.2.8.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  aeson-1.3.1.1:Data.Aeson 108dfb08de41cf77aad4693ac1dc3d44
import  -/  aeson-1.3.1.1:Data.Aeson.Types.FromJSON 1ea0c919856f0d29f12e53cd074d532c
import  -/  aeson-1.3.1.1:Data.Aeson.Types.Internal df76c21edff000f9355bfb6fb0dbf3e6
import  -/  aeson-1.3.1.1:Data.Aeson.Types.ToJSON 587c7d8b9444e85253d7faf5f824f568
import  -/  aeson-better-errors-0.9.1.0:Data.Aeson.BetterErrors ff0e80615ece0f0dd064c946f929132c
import  -/  aeson-better-errors-0.9.1.0:Data.Aeson.BetterErrors.Internal 066898b2dd92d5d1cfd1d0f21692c75d
import  -/  base-4.11.1.0:Data.Either 39d922b371c4c52d426e9ee66de8371a
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.Functor f522c3501272159820fd6f242510732f
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Generics 4d1469b3e29804a05a1be33d11accff6
import  -/  base-4.11.1.0:GHC.Real b4beb0389ba1ad5d9640aae67848c5d3
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-compat-0.10.4:Prelude.Compat bb6796186ed35a1d09dc34362a3fc27e
import  -/  bytestring-0.10.8.2:Data.ByteString.Lazy b6cb59a78204810b2a79502bf5b4c1fc
import  -/  deepseq-1.4.3.0:Control.DeepSeq 171f1f567c47ef82860df4ad686d11b1
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  mtl-2.2.2:Control.Monad.Error.Class df146c18e27154b8df4c8637c59fd61b
import  -/  Language.PureScript.AST 7ed0e74bfed5b6489b8a5eabab5c0241
  exports: 0d53d92339536cd6d8d7dcfcad8e7c7e
import  -/  Language.PureScript.AST.Operators be736e316462ef3abce53315e7361a17
  Associativity 17f2097426b72eb751701f86cd97792c
  Infix 48da7304e58a5ef64ef55f219a639205
  Infixl c355232652b8d07dc6f4cc3d968cd69f
  Infixr e374de6c2504281f30a71346ea589bed
import  -/  Language.PureScript.Crash 1bc11bf824676e9581610d0d05d26761
  exports: 8a971f39d6ef3f27956f413640cb0a24
  internalError f3db7e23c75878c9d13888d6d114012d
import  -/  Language.PureScript.Names b3bf151840f3e8f2eb61eff186432886
  exports: f7f3503d20957194bda83c16bb5f1288
  ConstructorName 9fb88e980342b224c2a4e4b58fa9fe33
  Ident 0ccd7f2221de64569e50634367691253
  Ident ab98a56ffa88760dad1380079e8ee35a
  KindName 681d490d18bc7da009f3503010a994f8
  ModuleName 5a70062bbdf29e6dc659ad8bf5326b50
  OpName 1522672b880b192c6e05e6cf8a45712d
  ProperName 9eb330c84db102abf2d0f2652fe4a144
  ProperName 29f101e190cc99df85623423972e606f
  Qualified d600a7f01c8203cf5504999de99c923c
  Qualified 5a70062bbdf29e6dc659ad8bf5326b50
  TypeName da42c92f73f4f363c63ecaf77b6335b9
  TypeOpName 34023316af2b751c6196ece0b5420c6b
  moduleNameFromString 79d26c792a293f252a003f5d0f01ddc4
  runIdent bc5cc3d3ba9d105c169eb6038c65d1a8
  runModuleName e07c63fa3ece350e6976663ef993edbb
  runOpName 1522672b880b192c6e05e6cf8a45712d
  runProperName 29f101e190cc99df85623423972e606f
import  -/  text-1.2.3.0:Data.Text 7daa7e6c9b39d8cc1679e5ec5c64d2be
import  -/  text-1.2.3.0:Data.Text.Encoding 8e60367b574d8e5016309aaea7dc2100
import  -/  text-1.2.3.0:Data.Text.Internal 30a0a123f71f63b26cd34c6b24f23411
7fd78b3d6be6c8453ba17c402b4bd2a1
  $fEqContainingModule ::
    GHC.Classes.Eq
      Language.PureScript.Docs.RenderedCode.Types.ContainingModule
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Docs.RenderedCode.Types.ContainingModule
                  Language.PureScript.Docs.RenderedCode.Types.$fEqContainingModule_$c==
                  Language.PureScript.Docs.RenderedCode.Types.$fEqContainingModule_$c/= -}
7fd78b3d6be6c8453ba17c402b4bd2a1
  $fEqContainingModule_$c/= ::
    Language.PureScript.Docs.RenderedCode.Types.ContainingModule
    -> Language.PureScript.Docs.RenderedCode.Types.ContainingModule
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Docs.RenderedCode.Types.ContainingModule)
                   (y :: Language.PureScript.Docs.RenderedCode.Types.ContainingModule) ->
                 case x of wild {
                   Language.PureScript.Docs.RenderedCode.Types.ThisModule
                   -> case y of wild1 {
                        Language.PureScript.Docs.RenderedCode.Types.ThisModule
                        -> GHC.Types.False
                        Language.PureScript.Docs.RenderedCode.Types.OtherModule ipv
                        -> GHC.Types.True }
                   Language.PureScript.Docs.RenderedCode.Types.OtherModule a1
                   -> case y of wild1 {
                        Language.PureScript.Docs.RenderedCode.Types.ThisModule
                        -> GHC.Types.True
                        Language.PureScript.Docs.RenderedCode.Types.OtherModule b1
                        -> case GHC.Classes.$fEq[]_$c==
                                  @ (Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.Namespace)
                                  (Language.PureScript.Names.$fEqProperName
                                     @ 'Language.PureScript.Names.Namespace)
                                  a1 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                  b1 `cast` (Language.PureScript.Names.N:ModuleName[0]) of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False } } }) -}
7fd78b3d6be6c8453ba17c402b4bd2a1
  $fEqContainingModule_$c== ::
    Language.PureScript.Docs.RenderedCode.Types.ContainingModule
    -> Language.PureScript.Docs.RenderedCode.Types.ContainingModule
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Language.PureScript.Docs.RenderedCode.Types.ContainingModule)
                   (ds1 :: Language.PureScript.Docs.RenderedCode.Types.ContainingModule) ->
                 case ds of wild {
                   Language.PureScript.Docs.RenderedCode.Types.ThisModule
                   -> case ds1 of wild1 {
                        Language.PureScript.Docs.RenderedCode.Types.ThisModule
                        -> GHC.Types.True
                        Language.PureScript.Docs.RenderedCode.Types.OtherModule ipv
                        -> GHC.Types.False }
                   Language.PureScript.Docs.RenderedCode.Types.OtherModule a1
                   -> case ds1 of wild1 {
                        Language.PureScript.Docs.RenderedCode.Types.ThisModule
                        -> GHC.Types.False
                        Language.PureScript.Docs.RenderedCode.Types.OtherModule b1
                        -> GHC.Classes.$fEq[]_$c==
                             @ (Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.Namespace)
                             (Language.PureScript.Names.$fEqProperName
                                @ 'Language.PureScript.Names.Namespace)
                             a1 `cast` (Language.PureScript.Names.N:ModuleName[0])
                             b1 `cast` (Language.PureScript.Names.N:ModuleName[0]) } }) -}
5e36da664b08e623162b4c76cb76fcf5
  $fEqLink ::
    GHC.Classes.Eq Language.PureScript.Docs.RenderedCode.Types.Link
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Docs.RenderedCode.Types.Link
                  Language.PureScript.Docs.RenderedCode.Types.$fEqLink_$c==
                  Language.PureScript.Docs.RenderedCode.Types.$fEqLink_$c/= -}
5e36da664b08e623162b4c76cb76fcf5
  $fEqLink_$c/= ::
    Language.PureScript.Docs.RenderedCode.Types.Link
    -> Language.PureScript.Docs.RenderedCode.Types.Link
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Docs.RenderedCode.Types.Link)
                   (y :: Language.PureScript.Docs.RenderedCode.Types.Link) ->
                 case x of wild {
                   Language.PureScript.Docs.RenderedCode.Types.NoLink
                   -> case y of wild1 {
                        Language.PureScript.Docs.RenderedCode.Types.NoLink
                        -> GHC.Types.False
                        Language.PureScript.Docs.RenderedCode.Types.Link ipv
                        -> GHC.Types.True }
                   Language.PureScript.Docs.RenderedCode.Types.Link a1
                   -> case y of wild1 {
                        Language.PureScript.Docs.RenderedCode.Types.NoLink
                        -> GHC.Types.True
                        Language.PureScript.Docs.RenderedCode.Types.Link b1
                        -> case a1 of wild2 {
                             Language.PureScript.Docs.RenderedCode.Types.ThisModule
                             -> case b1 of wild3 {
                                  Language.PureScript.Docs.RenderedCode.Types.ThisModule
                                  -> GHC.Types.False
                                  Language.PureScript.Docs.RenderedCode.Types.OtherModule ipv
                                  -> GHC.Types.True }
                             Language.PureScript.Docs.RenderedCode.Types.OtherModule a2
                             -> case b1 of wild3 {
                                  Language.PureScript.Docs.RenderedCode.Types.ThisModule
                                  -> GHC.Types.True
                                  Language.PureScript.Docs.RenderedCode.Types.OtherModule b2
                                  -> case GHC.Classes.$fEq[]_$c==
                                            @ (Language.PureScript.Names.ProperName
                                                 'Language.PureScript.Names.Namespace)
                                            (Language.PureScript.Names.$fEqProperName
                                               @ 'Language.PureScript.Names.Namespace)
                                            a2 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                            b2
                                              `cast`
                                            (Language.PureScript.Names.N:ModuleName[0]) of wild4 {
                                       GHC.Types.False -> GHC.Types.True
                                       GHC.Types.True -> GHC.Types.False } } } } }) -}
5e36da664b08e623162b4c76cb76fcf5
  $fEqLink_$c== ::
    Language.PureScript.Docs.RenderedCode.Types.Link
    -> Language.PureScript.Docs.RenderedCode.Types.Link
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Language.PureScript.Docs.RenderedCode.Types.Link)
                   (ds1 :: Language.PureScript.Docs.RenderedCode.Types.Link) ->
                 case ds of wild {
                   Language.PureScript.Docs.RenderedCode.Types.NoLink
                   -> case ds1 of wild1 {
                        Language.PureScript.Docs.RenderedCode.Types.NoLink
                        -> GHC.Types.True
                        Language.PureScript.Docs.RenderedCode.Types.Link ipv
                        -> GHC.Types.False }
                   Language.PureScript.Docs.RenderedCode.Types.Link a1
                   -> case ds1 of wild1 {
                        Language.PureScript.Docs.RenderedCode.Types.NoLink
                        -> GHC.Types.False
                        Language.PureScript.Docs.RenderedCode.Types.Link b1
                        -> Language.PureScript.Docs.RenderedCode.Types.$fEqContainingModule_$c==
                             a1
                             b1 } }) -}
0bf68f95cc438605559d4d420b903a78
  $fEqNamespace ::
    GHC.Classes.Eq
      Language.PureScript.Docs.RenderedCode.Types.Namespace
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Docs.RenderedCode.Types.Namespace
                  Language.PureScript.Docs.RenderedCode.Types.$fEqNamespace_$c==
                  Language.PureScript.Docs.RenderedCode.Types.$fEqNamespace_$c/= -}
0bf68f95cc438605559d4d420b903a78
  $fEqNamespace_$c/= ::
    Language.PureScript.Docs.RenderedCode.Types.Namespace
    -> Language.PureScript.Docs.RenderedCode.Types.Namespace
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Docs.RenderedCode.Types.Namespace)
                   (y :: Language.PureScript.Docs.RenderedCode.Types.Namespace) ->
                 case x of wild {
                   Language.PureScript.Docs.RenderedCode.Types.ValueLevel
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.Docs.RenderedCode.Types.ValueLevel
                        -> GHC.Types.False }
                   Language.PureScript.Docs.RenderedCode.Types.TypeLevel
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.Docs.RenderedCode.Types.TypeLevel
                        -> GHC.Types.False }
                   Language.PureScript.Docs.RenderedCode.Types.KindLevel
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.Docs.RenderedCode.Types.KindLevel
                        -> GHC.Types.False } }) -}
0bf68f95cc438605559d4d420b903a78
  $fEqNamespace_$c== ::
    Language.PureScript.Docs.RenderedCode.Types.Namespace
    -> Language.PureScript.Docs.RenderedCode.Types.Namespace
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Language.PureScript.Docs.RenderedCode.Types.Namespace)
                   (ds1 :: Language.PureScript.Docs.RenderedCode.Types.Namespace) ->
                 case ds of wild {
                   Language.PureScript.Docs.RenderedCode.Types.ValueLevel
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Docs.RenderedCode.Types.ValueLevel
                        -> GHC.Types.True }
                   Language.PureScript.Docs.RenderedCode.Types.TypeLevel
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Docs.RenderedCode.Types.TypeLevel
                        -> GHC.Types.True }
                   Language.PureScript.Docs.RenderedCode.Types.KindLevel
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Docs.RenderedCode.Types.KindLevel
                        -> GHC.Types.True } }) -}
4660ea0ffbba09617bc864a10b08d72f
  $fEqRenderedCode ::
    GHC.Classes.Eq
      Language.PureScript.Docs.RenderedCode.Types.RenderedCode
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Docs.RenderedCode.Types.RenderedCode
                  Language.PureScript.Docs.RenderedCode.Types.$fEqRenderedCode1
                    `cast`
                  (Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])
                   ->_R Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])
                   ->_R <GHC.Types.Bool>_R)
                  Language.PureScript.Docs.RenderedCode.Types.$fEqRenderedCode_$s$fEq[]_$c/=
                    `cast`
                  (Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])
                   ->_R Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])
                   ->_R <GHC.Types.Bool>_R) -}
785ea6585d3b21aec191f1d0ccd56a88
  $fEqRenderedCode1 ::
    [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
    -> [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (GHC.Classes.$fEq[]_$c==
                   @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                   Language.PureScript.Docs.RenderedCode.Types.$fEqRenderedCodeElement) -}
171153e7e2ed40b7058dbb86502105f3
  $fEqRenderedCodeElement ::
    GHC.Classes.Eq
      Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                  Language.PureScript.Docs.RenderedCode.Types.$fEqRenderedCodeElement_$c==
                  Language.PureScript.Docs.RenderedCode.Types.$fEqRenderedCodeElement_$c/= -}
171153e7e2ed40b7058dbb86502105f3
  $fEqRenderedCodeElement_$c/= ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
    -> Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)
                   (y :: Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement) ->
                 case Language.PureScript.Docs.RenderedCode.Types.$fEqRenderedCodeElement_$c==
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
171153e7e2ed40b7058dbb86502105f3
  $fEqRenderedCodeElement_$c== ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
    -> Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)
                   (ds1 :: Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement) ->
                 case ds of wild {
                   Language.PureScript.Docs.RenderedCode.Types.Syntax a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Docs.RenderedCode.Types.Syntax b1
                        -> Data.Text.$fEqText_$c== a1 b1 }
                   Language.PureScript.Docs.RenderedCode.Types.Keyword a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Docs.RenderedCode.Types.Keyword b1
                        -> Data.Text.$fEqText_$c== a1 b1 }
                   Language.PureScript.Docs.RenderedCode.Types.Space
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Docs.RenderedCode.Types.Space
                        -> GHC.Types.True }
                   Language.PureScript.Docs.RenderedCode.Types.Symbol a1 a2 a3
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Docs.RenderedCode.Types.Symbol b1 b2 b3
                        -> let {
                             $j :: GHC.Types.Bool <join 0>
                             = case a2 of wild2 { Data.Text.Internal.Text dt dt1 dt2 ->
                               case b2 of wild3 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                               case GHC.Prim.==# dt2 dt5 of lwild {
                                 DEFAULT -> GHC.Types.False
                                 1#
                                 -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                                   -> GHC.Prim.Word#
                                                                   -> GHC.Prim.ByteArray#
                                                                   -> GHC.Prim.Word#
                                                                   -> GHC.Prim.Word#
                                                                   -> GHC.Prim.State#
                                                                        GHC.Prim.RealWorld
                                                                   -> (# GHC.Prim.State#
                                                                           GHC.Prim.RealWorld,
                                                                         GHC.Prim.Int# #)}
                                           dt
                                           (GHC.Prim.int2Word# dt1)
                                           dt3
                                           (GHC.Prim.int2Word# dt4)
                                           (GHC.Prim.int2Word# dt2)
                                           GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                                    case GHC.Prim.narrow32Int# ds3 of wild4 {
                                      DEFAULT -> GHC.Types.False
                                      0#
                                      -> Language.PureScript.Docs.RenderedCode.Types.$fEqLink_$c==
                                           a3
                                           b3 } } } } }
                           } in
                           case a1 of wild2 {
                             Language.PureScript.Docs.RenderedCode.Types.ValueLevel
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.False
                                  Language.PureScript.Docs.RenderedCode.Types.ValueLevel -> $j }
                             Language.PureScript.Docs.RenderedCode.Types.TypeLevel
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.False
                                  Language.PureScript.Docs.RenderedCode.Types.TypeLevel -> $j }
                             Language.PureScript.Docs.RenderedCode.Types.KindLevel
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.False
                                  Language.PureScript.Docs.RenderedCode.Types.KindLevel
                                  -> $j } } } }) -}
7d495009e0b1a6db980541613b188f86
  $fEqRenderedCode_$s$fEq[]_$c/= ::
    [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
    -> [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement])
                   (y :: [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]) ->
                 case GHC.Classes.$fEq[]_$c==
                        @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                        Language.PureScript.Docs.RenderedCode.Types.$fEqRenderedCodeElement
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
7fd78b3d6be6c8453ba17c402b4bd2a1
  $fFromJSONContainingModule ::
    Data.Aeson.Types.FromJSON.FromJSON
      Language.PureScript.Docs.RenderedCode.Types.ContainingModule
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Docs.RenderedCode.Types.ContainingModule
                  Language.PureScript.Docs.RenderedCode.Types.$fFromJSONContainingModule_$cparseJSON
                  Language.PureScript.Docs.RenderedCode.Types.$fFromJSONContainingModule_$cparseJSONList -}
29b5deecab4b1e010e3b60b694daab95
  $fFromJSONContainingModule1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (", encountered "#) -}
f673c82bfe7d49701d09dc6c2d9a0bba
  $fFromJSONContainingModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("[a]"#) -}
209d5950e9fa9a276d5fb843e1a7910b
  $fFromJSONContainingModule3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("expected "#) -}
7fd78b3d6be6c8453ba17c402b4bd2a1
  $fFromJSONContainingModule_$cparseJSON ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         Language.PureScript.Docs.RenderedCode.Types.ContainingModule
  {- Arity: 1,
     Unfolding: (Data.Aeson.BetterErrors.Internal.toAesonParser
                   @ Data.Text.Internal.Text
                   @ Language.PureScript.Docs.RenderedCode.Types.ContainingModule
                   (GHC.Base.id @ Data.Text.Internal.Text)
                   Language.PureScript.Docs.RenderedCode.Types.asContainingModule) -}
7fd78b3d6be6c8453ba17c402b4bd2a1
  $fFromJSONContainingModule_$cparseJSONList ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         [Language.PureScript.Docs.RenderedCode.Types.ContainingModule]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Data.Aeson.Types.Internal.Value) ->
                 case ds of wild {
                   DEFAULT
                   -> let {
                        msg19 :: GHC.Base.String
                        = GHC.CString.unpackAppendCString#
                            Language.PureScript.Docs.RenderedCode.Types.$fFromJSONContainingModule3
                            (GHC.CString.unpackAppendCString#
                               Language.PureScript.Docs.RenderedCode.Types.$fFromJSONContainingModule2
                               (GHC.CString.unpackAppendCString#
                                  Language.PureScript.Docs.RenderedCode.Types.$fFromJSONContainingModule1
                                  (case wild of wild1 {
                                     Data.Aeson.Types.Internal.Object ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList10
                                     Data.Aeson.Types.Internal.String ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList8
                                     Data.Aeson.Types.Internal.Number ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList6
                                     Data.Aeson.Types.Internal.Bool ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList4
                                     Data.Aeson.Types.Internal.Null
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList1 })))
                      } in
                      (\ @ f4 :: * -> *
                         @ r
                         (path :: Data.Aeson.Types.Internal.JSONPath)
                         (kf :: Data.Aeson.Types.Internal.Failure f4 r)
                         (_ks :: Data.Aeson.Types.Internal.Success
                                   [Language.PureScript.Docs.RenderedCode.Types.ContainingModule]
                                   f4
                                   r) ->
                       kf
                         (GHC.List.reverse @ Data.Aeson.Types.Internal.JSONPathElement path)
                         msg19)
                        `cast`
                      (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                <[Language.PureScript.Docs.RenderedCode.Types.ContainingModule]>_R))
                   Data.Aeson.Types.Internal.Array a2
                   -> case a2 of wild1 { Data.Vector.Vector dt dt1 dt2 ->
                      letrec {
                        $wgo :: GHC.Prim.Int# -> [Data.Aeson.Types.Internal.Value]
                          {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                        = \ (ww :: GHC.Prim.Int#) ->
                          case GHC.Prim.>=# ww dt1 of lwild {
                            DEFAULT
                            -> case GHC.Prim.indexArray#
                                      @ Data.Aeson.Types.Internal.Value
                                      dt2
                                      (GHC.Prim.+# dt ww) of ds3 { Unit# ipv ->
                               GHC.Types.:
                                 @ Data.Aeson.Types.Internal.Value
                                 ipv
                                 ($wgo (GHC.Prim.+# ww 1#)) }
                            1# -> GHC.Types.[] @ Data.Aeson.Types.Internal.Value }
                      } in
                      Language.PureScript.Docs.RenderedCode.Types.$fFromJSONContainingModule_go
                        0#
                        ($wgo 0#) } }) -}
7fd78b3d6be6c8453ba17c402b4bd2a1
  $fFromJSONContainingModule_go ::
    GHC.Prim.Int#
    -> [Data.Aeson.Types.Internal.Value]
    -> Data.Aeson.Types.Internal.Parser
         [Language.PureScript.Docs.RenderedCode.Types.ContainingModule]
  {- Arity: 2, Strictness: <L,U><S,1*U> -}
5e36da664b08e623162b4c76cb76fcf5
  $fFromJSONLink ::
    Data.Aeson.Types.FromJSON.FromJSON
      Language.PureScript.Docs.RenderedCode.Types.Link
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Docs.RenderedCode.Types.Link
                  Language.PureScript.Docs.RenderedCode.Types.$fFromJSONLink_$cparseJSON
                  Language.PureScript.Docs.RenderedCode.Types.$fFromJSONLink_$cparseJSONList -}
5e36da664b08e623162b4c76cb76fcf5
  $fFromJSONLink1 ::
    [Data.Aeson.BetterErrors.Internal.Parse
       Data.Text.Internal.Text
       Language.PureScript.Docs.RenderedCode.Types.Link]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Aeson.BetterErrors.Internal.Parse
                        Data.Text.Internal.Text
                        Language.PureScript.Docs.RenderedCode.Types.Link)
                   Language.PureScript.Docs.RenderedCode.Types.$fFromJSONLink7
                     `cast`
                   ((<Data.Aeson.BetterErrors.Internal.ParseReader>_R
                     ->_R Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                   <Data.Aeson.BetterErrors.Internal.ParseError
                                      Data.Text.Internal.Text>_N
                                   <Data.Functor.Identity.Identity>_R
                                   <Language.PureScript.Docs.RenderedCode.Types.Link>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                      <*>_N
                                                                                                      <Data.Aeson.BetterErrors.Internal.ParseReader>_R
                                                                                                      <Control.Monad.Trans.Except.ExceptT
                                                                                                         (Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                            Data.Text.Internal.Text)
                                                                                                         Data.Functor.Identity.Identity>_R
                                                                                                      <Language.PureScript.Docs.RenderedCode.Types.Link>_N) ; Sym (Data.Aeson.BetterErrors.Internal.N:ParseT[0]
                                                                                                                                                                       <Data.Text.Internal.Text>_N
                                                                                                                                                                       <Data.Functor.Identity.Identity>_R) <Language.PureScript.Docs.RenderedCode.Types.Link>_N))
                   Language.PureScript.Docs.RenderedCode.Types.$fFromJSONLink2) -}
2151cb7feaf34937edada1776d18a27e
  $fFromJSONLink10 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Docs.RenderedCode.Types.$fFromJSONLink11) -}
c3627b4a23cd5250c2b50567b8218218
  $fFromJSONLink11 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("NoLink"#) -}
85c6ca3b5f1ad91146c978caa118e053
  $fFromJSONLink12 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Docs.RenderedCode.Types.$fFromJSONLink13) -}
f61698a17b4f9434a171670f9b36073d
  $fFromJSONLink13 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("link"#) -}
5e36da664b08e623162b4c76cb76fcf5
  $fFromJSONLink2 ::
    [Data.Aeson.BetterErrors.Internal.Parse
       Data.Text.Internal.Text
       Language.PureScript.Docs.RenderedCode.Types.Link]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Aeson.BetterErrors.Internal.Parse
                        Data.Text.Internal.Text
                        Language.PureScript.Docs.RenderedCode.Types.Link)
                   Language.PureScript.Docs.RenderedCode.Types.$fFromJSONLink3
                     `cast`
                   ((<Data.Aeson.BetterErrors.Internal.ParseReader>_R
                     ->_R Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                   <Data.Aeson.BetterErrors.Internal.ParseError
                                      Data.Text.Internal.Text>_N
                                   <Data.Functor.Identity.Identity>_R
                                   <Language.PureScript.Docs.RenderedCode.Types.Link>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                      <*>_N
                                                                                                      <Data.Aeson.BetterErrors.Internal.ParseReader>_R
                                                                                                      <Control.Monad.Trans.Except.ExceptT
                                                                                                         (Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                            Data.Text.Internal.Text)
                                                                                                         Data.Functor.Identity.Identity>_R
                                                                                                      <Language.PureScript.Docs.RenderedCode.Types.Link>_N) ; Sym (Data.Aeson.BetterErrors.Internal.N:ParseT[0]
                                                                                                                                                                       <Data.Text.Internal.Text>_N
                                                                                                                                                                       <Data.Functor.Identity.Identity>_R) <Language.PureScript.Docs.RenderedCode.Types.Link>_N))
                   (GHC.Types.[]
                      @ (Data.Aeson.BetterErrors.Internal.Parse
                           Data.Text.Internal.Text
                           Language.PureScript.Docs.RenderedCode.Types.Link))) -}
5e36da664b08e623162b4c76cb76fcf5
  $fFromJSONLink3 ::
    Data.Aeson.BetterErrors.Internal.ParseReader
    -> Data.Functor.Identity.Identity
         (Data.Either.Either
            (Data.Aeson.BetterErrors.Internal.ParseError
               Data.Text.Internal.Text)
            Language.PureScript.Docs.RenderedCode.Types.Link)
  {- Arity: 1,
     Unfolding: (Language.PureScript.Docs.RenderedCode.Types.asContainingModule12
                   @ Language.PureScript.Docs.RenderedCode.Types.Link
                   Language.PureScript.Docs.RenderedCode.Types.$fFromJSONLink5
                   Language.PureScript.Docs.RenderedCode.Types.$fFromJSONLink4
                     `cast`
                   ((<Data.Aeson.BetterErrors.Internal.ParseReader>_R
                     ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                   <Data.Either.Either
                                      (Data.Aeson.BetterErrors.Internal.ParseError
                                         Data.Text.Internal.Text)
                                      Language.PureScript.Docs.RenderedCode.Types.Link>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                      <Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                         Data.Text.Internal.Text>_N
                                                                                                      <Data.Functor.Identity.Identity>_R
                                                                                                      <Language.PureScript.Docs.RenderedCode.Types.Link>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                                                                         <*>_N
                                                                                                                                                                         <Data.Aeson.BetterErrors.Internal.ParseReader>_R
                                                                                                                                                                         <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                            (Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                                                                                               Data.Text.Internal.Text)
                                                                                                                                                                            Data.Functor.Identity.Identity>_R
                                                                                                                                                                         <Language.PureScript.Docs.RenderedCode.Types.Link>_N) ; Sym (Data.Aeson.BetterErrors.Internal.N:ParseT[0]
                                                                                                                                                                                                                                          <Data.Text.Internal.Text>_N
                                                                                                                                                                                                                                          <Data.Functor.Identity.Identity>_R) <Language.PureScript.Docs.RenderedCode.Types.Link>_N))) -}
5e36da664b08e623162b4c76cb76fcf5
  $fFromJSONLink4 ::
    Data.Aeson.BetterErrors.Internal.ParseReader
    -> Data.Either.Either
         (Data.Aeson.BetterErrors.Internal.ParseError
            Data.Text.Internal.Text)
         Language.PureScript.Docs.RenderedCode.Types.Link
  {- Arity: 1, Strictness: <L,U(U,U)>,
     Unfolding: (\ (x :: Data.Aeson.BetterErrors.Internal.ParseReader) ->
                 case (Data.Aeson.BetterErrors.Internal.$wnth
                         @ Data.Functor.Identity.Identity
                         @ Data.Text.Internal.Text
                         @ Language.PureScript.Docs.RenderedCode.Types.ContainingModule
                         Data.Functor.Identity.$fMonadIdentity
                         Language.PureScript.Docs.RenderedCode.Types.asContainingModule9
                         Language.PureScript.Docs.RenderedCode.Types.asContainingModule
                         x)
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <Data.Aeson.BetterErrors.Internal.ParseError
                              Data.Text.Internal.Text>_N
                           <Data.Functor.Identity.Identity>_R
                           <Language.PureScript.Docs.RenderedCode.Types.ContainingModule>_N ; Data.Functor.Identity.N:Identity[0]
                                                                                                  <Data.Either.Either
                                                                                                     (Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                        Data.Text.Internal.Text)
                                                                                                     Language.PureScript.Docs.RenderedCode.Types.ContainingModule>_R) of wild {
                   Data.Either.Left x1
                   -> Data.Either.Left
                        @ (Data.Aeson.BetterErrors.Internal.ParseError
                             Data.Text.Internal.Text)
                        @ Language.PureScript.Docs.RenderedCode.Types.Link
                        x1
                   Data.Either.Right y
                   -> Data.Either.Right
                        @ (Data.Aeson.BetterErrors.Internal.ParseError
                             Data.Text.Internal.Text)
                        @ Language.PureScript.Docs.RenderedCode.Types.Link
                        (Language.PureScript.Docs.RenderedCode.Types.Link y) }) -}
c56e34e274c68ee6bdb20b600384c917
  $fFromJSONLink5 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Docs.RenderedCode.Types.$fFromJSONLink6) -}
b17912cb39ff4f77ff6a63320870c5c2
  $fFromJSONLink6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Link"#) -}
5e36da664b08e623162b4c76cb76fcf5
  $fFromJSONLink7 ::
    Data.Aeson.BetterErrors.Internal.ParseReader
    -> Data.Functor.Identity.Identity
         (Data.Either.Either
            (Data.Aeson.BetterErrors.Internal.ParseError
               Data.Text.Internal.Text)
            Language.PureScript.Docs.RenderedCode.Types.Link)
  {- Arity: 1,
     Unfolding: (Language.PureScript.Docs.RenderedCode.Types.asContainingModule12
                   @ Language.PureScript.Docs.RenderedCode.Types.Link
                   Language.PureScript.Docs.RenderedCode.Types.$fFromJSONLink10
                   Language.PureScript.Docs.RenderedCode.Types.$fFromJSONLink8
                     `cast`
                   ((<Data.Aeson.BetterErrors.Internal.ParseReader>_R
                     ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                   <Data.Either.Either
                                      (Data.Aeson.BetterErrors.Internal.ParseError
                                         Data.Text.Internal.Text)
                                      Language.PureScript.Docs.RenderedCode.Types.Link>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                      <Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                         Data.Text.Internal.Text>_N
                                                                                                      <Data.Functor.Identity.Identity>_R
                                                                                                      <Language.PureScript.Docs.RenderedCode.Types.Link>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                                                                         <*>_N
                                                                                                                                                                         <Data.Aeson.BetterErrors.Internal.ParseReader>_R
                                                                                                                                                                         <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                            (Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                                                                                               Data.Text.Internal.Text)
                                                                                                                                                                            Data.Functor.Identity.Identity>_R
                                                                                                                                                                         <Language.PureScript.Docs.RenderedCode.Types.Link>_N) ; Sym (Data.Aeson.BetterErrors.Internal.N:ParseT[0]
                                                                                                                                                                                                                                          <Data.Text.Internal.Text>_N
                                                                                                                                                                                                                                          <Data.Functor.Identity.Identity>_R) <Language.PureScript.Docs.RenderedCode.Types.Link>_N))) -}
5e36da664b08e623162b4c76cb76fcf5
  $fFromJSONLink8 ::
    Data.Aeson.BetterErrors.Internal.ParseReader
    -> Data.Either.Either
         (Data.Aeson.BetterErrors.Internal.ParseError
            Data.Text.Internal.Text)
         Language.PureScript.Docs.RenderedCode.Types.Link
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>m2,
     Unfolding: (\ (ds :: Data.Aeson.BetterErrors.Internal.ParseReader) ->
                 Language.PureScript.Docs.RenderedCode.Types.$fFromJSONLink9) -}
5e36da664b08e623162b4c76cb76fcf5
  $fFromJSONLink9 ::
    Data.Either.Either
      (Data.Aeson.BetterErrors.Internal.ParseError
         Data.Text.Internal.Text)
      Language.PureScript.Docs.RenderedCode.Types.Link
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Data.Either.Right
                   @ (Data.Aeson.BetterErrors.Internal.ParseError
                        Data.Text.Internal.Text)
                   @ Language.PureScript.Docs.RenderedCode.Types.Link
                   Language.PureScript.Docs.RenderedCode.Types.NoLink) -}
5e36da664b08e623162b4c76cb76fcf5
  $fFromJSONLink_$cparseJSON ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         Language.PureScript.Docs.RenderedCode.Types.Link
  {- Arity: 1,
     Unfolding: (Data.Aeson.BetterErrors.Internal.toAesonParser
                   @ Data.Text.Internal.Text
                   @ Language.PureScript.Docs.RenderedCode.Types.Link
                   (GHC.Base.id @ Data.Text.Internal.Text)
                   Language.PureScript.Docs.RenderedCode.Types.asLink) -}
5e36da664b08e623162b4c76cb76fcf5
  $fFromJSONLink_$cparseJSONList ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         [Language.PureScript.Docs.RenderedCode.Types.Link]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Data.Aeson.Types.Internal.Value) ->
                 case ds of wild {
                   DEFAULT
                   -> let {
                        msg19 :: GHC.Base.String
                        = GHC.CString.unpackAppendCString#
                            Language.PureScript.Docs.RenderedCode.Types.$fFromJSONContainingModule3
                            (GHC.CString.unpackAppendCString#
                               Language.PureScript.Docs.RenderedCode.Types.$fFromJSONContainingModule2
                               (GHC.CString.unpackAppendCString#
                                  Language.PureScript.Docs.RenderedCode.Types.$fFromJSONContainingModule1
                                  (case wild of wild1 {
                                     Data.Aeson.Types.Internal.Object ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList10
                                     Data.Aeson.Types.Internal.String ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList8
                                     Data.Aeson.Types.Internal.Number ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList6
                                     Data.Aeson.Types.Internal.Bool ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList4
                                     Data.Aeson.Types.Internal.Null
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList1 })))
                      } in
                      (\ @ f4 :: * -> *
                         @ r
                         (path :: Data.Aeson.Types.Internal.JSONPath)
                         (kf :: Data.Aeson.Types.Internal.Failure f4 r)
                         (_ks :: Data.Aeson.Types.Internal.Success
                                   [Language.PureScript.Docs.RenderedCode.Types.Link] f4 r) ->
                       kf
                         (GHC.List.reverse @ Data.Aeson.Types.Internal.JSONPathElement path)
                         msg19)
                        `cast`
                      (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                <[Language.PureScript.Docs.RenderedCode.Types.Link]>_R))
                   Data.Aeson.Types.Internal.Array a2
                   -> case a2 of wild1 { Data.Vector.Vector dt dt1 dt2 ->
                      letrec {
                        $wgo :: GHC.Prim.Int# -> [Data.Aeson.Types.Internal.Value]
                          {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                        = \ (ww :: GHC.Prim.Int#) ->
                          case GHC.Prim.>=# ww dt1 of lwild {
                            DEFAULT
                            -> case GHC.Prim.indexArray#
                                      @ Data.Aeson.Types.Internal.Value
                                      dt2
                                      (GHC.Prim.+# dt ww) of ds3 { Unit# ipv ->
                               GHC.Types.:
                                 @ Data.Aeson.Types.Internal.Value
                                 ipv
                                 ($wgo (GHC.Prim.+# ww 1#)) }
                            1# -> GHC.Types.[] @ Data.Aeson.Types.Internal.Value }
                      } in
                      Language.PureScript.Docs.RenderedCode.Types.$fFromJSONLink_go
                        0#
                        ($wgo 0#) } }) -}
5e36da664b08e623162b4c76cb76fcf5
  $fFromJSONLink_go ::
    GHC.Prim.Int#
    -> [Data.Aeson.Types.Internal.Value]
    -> Data.Aeson.Types.Internal.Parser
         [Language.PureScript.Docs.RenderedCode.Types.Link]
  {- Arity: 2, Strictness: <L,U><S,1*U> -}
0bf68f95cc438605559d4d420b903a78
  $fFromJSONNamespace ::
    Data.Aeson.Types.FromJSON.FromJSON
      Language.PureScript.Docs.RenderedCode.Types.Namespace
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Docs.RenderedCode.Types.Namespace
                  Language.PureScript.Docs.RenderedCode.Types.$fFromJSONNamespace_$cparseJSON
                  Language.PureScript.Docs.RenderedCode.Types.$fFromJSONNamespace_$cparseJSONList -}
0bf68f95cc438605559d4d420b903a78
  $fFromJSONNamespace1 ::
    [Data.Aeson.BetterErrors.Internal.Parse
       Data.Text.Internal.Text
       Language.PureScript.Docs.RenderedCode.Types.Namespace]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Aeson.BetterErrors.Internal.Parse
                        Data.Text.Internal.Text
                        Language.PureScript.Docs.RenderedCode.Types.Namespace)
                   Language.PureScript.Docs.RenderedCode.Types.$fFromJSONNamespace2
                     `cast`
                   ((<Data.Aeson.BetterErrors.Internal.ParseReader>_R
                     ->_R Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                   <Data.Aeson.BetterErrors.Internal.ParseError
                                      Data.Text.Internal.Text>_N
                                   <Data.Functor.Identity.Identity>_R
                                   <Language.PureScript.Docs.RenderedCode.Types.Namespace>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                           <*>_N
                                                                                                           <Data.Aeson.BetterErrors.Internal.ParseReader>_R
                                                                                                           <Control.Monad.Trans.Except.ExceptT
                                                                                                              (Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                                 Data.Text.Internal.Text)
                                                                                                              Data.Functor.Identity.Identity>_R
                                                                                                           <Language.PureScript.Docs.RenderedCode.Types.Namespace>_N) ; Sym (Data.Aeson.BetterErrors.Internal.N:ParseT[0]
                                                                                                                                                                                 <Data.Text.Internal.Text>_N
                                                                                                                                                                                 <Data.Functor.Identity.Identity>_R) <Language.PureScript.Docs.RenderedCode.Types.Namespace>_N))
                   (GHC.Types.[]
                      @ (Data.Aeson.BetterErrors.Internal.Parse
                           Data.Text.Internal.Text
                           Language.PureScript.Docs.RenderedCode.Types.Namespace))) -}
0b23de6c156910f0888be56d3cfcf5aa
  $fFromJSONNamespace10 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Docs.RenderedCode.Types.$fFromJSONNamespace11) -}
a0ef7cb1d59ece7793961a5c38371a36
  $fFromJSONNamespace11 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ValueLevel"#) -}
7d6b38e54fa6cf63073cbb1a6a9e3249
  $fFromJSONNamespace12 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Docs.RenderedCode.Types.$fFromJSONNamespace13) -}
d24d04b7b143ef31df05a3809c44d172
  $fFromJSONNamespace13 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("namespace"#) -}
0bf68f95cc438605559d4d420b903a78
  $fFromJSONNamespace2 ::
    Data.Aeson.BetterErrors.Internal.ParseReader
    -> Data.Functor.Identity.Identity
         (Data.Either.Either
            (Data.Aeson.BetterErrors.Internal.ParseError
               Data.Text.Internal.Text)
            Language.PureScript.Docs.RenderedCode.Types.Namespace)
  {- Arity: 1, Strictness: <S(LS),1*U(1*C1(U),1*U)>,
     Unfolding: (\ (w3 :: Data.Aeson.BetterErrors.Internal.ParseReader) ->
                 case w3 of ww { Data.Aeson.BetterErrors.Internal.ParseReader ww1 ww2 ->
                 case ww2 of wild {
                   DEFAULT
                   -> (Data.Either.Left
                         @ (Data.Aeson.BetterErrors.Internal.ParseError
                              Data.Text.Internal.Text)
                         @ Language.PureScript.Docs.RenderedCode.Types.Namespace
                         (Data.Aeson.BetterErrors.Internal.BadSchema
                            @ Data.Text.Internal.Text
                            (ww1
                               `cast`
                             (Data.DList.N:DList[0]
                                  <Data.Aeson.BetterErrors.Internal.PathPiece>_R)
                               (GHC.Types.[] @ Data.Aeson.BetterErrors.Internal.PathPiece))
                            (Data.Aeson.BetterErrors.Internal.WrongType
                               @ Data.Text.Internal.Text
                               Data.Aeson.BetterErrors.Internal.TyString
                               wild)))
                        `cast`
                      (Sym (Data.Functor.Identity.N:Identity[0]
                                <Data.Either.Either
                                   (Data.Aeson.BetterErrors.Internal.ParseError
                                      Data.Text.Internal.Text)
                                   Language.PureScript.Docs.RenderedCode.Types.Namespace>_R))
                   Data.Aeson.Types.Internal.String t
                   -> case t of wild1 { Data.Text.Internal.Text dt dt1 dt2 ->
                      case Language.PureScript.Docs.RenderedCode.Types.$fFromJSONNamespace10 of wild2 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                      let {
                        $j :: Data.Functor.Identity.Identity
                                (Data.Either.Either
                                   (Data.Aeson.BetterErrors.Internal.ParseError
                                      Data.Text.Internal.Text)
                                   Language.PureScript.Docs.RenderedCode.Types.Namespace)
                          <join 0>
                        = case Language.PureScript.Docs.RenderedCode.Types.$fFromJSONNamespace8 of wild3 { Data.Text.Internal.Text dt7 dt8 dt9 ->
                          let {
                            $j1 :: Data.Functor.Identity.Identity
                                     (Data.Either.Either
                                        (Data.Aeson.BetterErrors.Internal.ParseError
                                           Data.Text.Internal.Text)
                                        Language.PureScript.Docs.RenderedCode.Types.Namespace)
                              <join 0>
                            = case Language.PureScript.Docs.RenderedCode.Types.$fFromJSONNamespace6 of wild4 { Data.Text.Internal.Text dt10 dt11 dt12 ->
                              case GHC.Prim.==# dt2 dt12 of lwild {
                                DEFAULT
                                -> (Data.Either.Left
                                      @ (Data.Aeson.BetterErrors.Internal.ParseError
                                           Data.Text.Internal.Text)
                                      @ Language.PureScript.Docs.RenderedCode.Types.Namespace
                                      (Data.Aeson.BetterErrors.Internal.BadSchema
                                         @ Data.Text.Internal.Text
                                         (ww1
                                            `cast`
                                          (Data.DList.N:DList[0]
                                               <Data.Aeson.BetterErrors.Internal.PathPiece>_R)
                                            (GHC.Types.[]
                                               @ Data.Aeson.BetterErrors.Internal.PathPiece))
                                         Language.PureScript.Docs.RenderedCode.Types.asContainingModule14))
                                     `cast`
                                   (Sym (Data.Functor.Identity.N:Identity[0]
                                             <Data.Either.Either
                                                (Data.Aeson.BetterErrors.Internal.ParseError
                                                   Data.Text.Internal.Text)
                                                Language.PureScript.Docs.RenderedCode.Types.Namespace>_R))
                                1#
                                -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                                  -> GHC.Prim.Word#
                                                                  -> GHC.Prim.ByteArray#
                                                                  -> GHC.Prim.Word#
                                                                  -> GHC.Prim.Word#
                                                                  -> GHC.Prim.State#
                                                                       GHC.Prim.RealWorld
                                                                  -> (# GHC.Prim.State#
                                                                          GHC.Prim.RealWorld,
                                                                        GHC.Prim.Int# #)}
                                          dt
                                          (GHC.Prim.int2Word# dt1)
                                          dt10
                                          (GHC.Prim.int2Word# dt11)
                                          (GHC.Prim.int2Word# dt2)
                                          GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                                   case GHC.Prim.narrow32Int# ds3 of wild6 {
                                     DEFAULT
                                     -> (Data.Either.Left
                                           @ (Data.Aeson.BetterErrors.Internal.ParseError
                                                Data.Text.Internal.Text)
                                           @ Language.PureScript.Docs.RenderedCode.Types.Namespace
                                           (Data.Aeson.BetterErrors.Internal.BadSchema
                                              @ Data.Text.Internal.Text
                                              (ww1
                                                 `cast`
                                               (Data.DList.N:DList[0]
                                                    <Data.Aeson.BetterErrors.Internal.PathPiece>_R)
                                                 (GHC.Types.[]
                                                    @ Data.Aeson.BetterErrors.Internal.PathPiece))
                                              Language.PureScript.Docs.RenderedCode.Types.asContainingModule14))
                                          `cast`
                                        (Sym (Data.Functor.Identity.N:Identity[0]
                                                  <Data.Either.Either
                                                     (Data.Aeson.BetterErrors.Internal.ParseError
                                                        Data.Text.Internal.Text)
                                                     Language.PureScript.Docs.RenderedCode.Types.Namespace>_R))
                                     0#
                                     -> Language.PureScript.Docs.RenderedCode.Types.$fFromJSONNamespace5
                                          `cast`
                                        (Sym (Data.Functor.Identity.N:Identity[0]
                                                  <Data.Either.Either
                                                     (Data.Aeson.BetterErrors.Internal.ParseError
                                                        Data.Text.Internal.Text)
                                                     Language.PureScript.Docs.RenderedCode.Types.Namespace>_R)) } } } }
                          } in
                          case GHC.Prim.==# dt2 dt9 of lwild {
                            DEFAULT -> $j1
                            1#
                            -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                              -> GHC.Prim.Word#
                                                              -> GHC.Prim.ByteArray#
                                                              -> GHC.Prim.Word#
                                                              -> GHC.Prim.Word#
                                                              -> GHC.Prim.State# GHC.Prim.RealWorld
                                                              -> (# GHC.Prim.State#
                                                                      GHC.Prim.RealWorld,
                                                                    GHC.Prim.Int# #)}
                                      dt
                                      (GHC.Prim.int2Word# dt1)
                                      dt7
                                      (GHC.Prim.int2Word# dt8)
                                      (GHC.Prim.int2Word# dt2)
                                      GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                               case GHC.Prim.narrow32Int# ds3 of wild4 {
                                 DEFAULT -> $j1
                                 0#
                                 -> Language.PureScript.Docs.RenderedCode.Types.$fFromJSONNamespace4
                                      `cast`
                                    (Sym (Data.Functor.Identity.N:Identity[0]
                                              <Data.Either.Either
                                                 (Data.Aeson.BetterErrors.Internal.ParseError
                                                    Data.Text.Internal.Text)
                                                 Language.PureScript.Docs.RenderedCode.Types.Namespace>_R)) } } } }
                      } in
                      case GHC.Prim.==# dt2 dt5 of lwild {
                        DEFAULT -> $j
                        1#
                        -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                          -> GHC.Prim.Word#
                                                          -> GHC.Prim.ByteArray#
                                                          -> GHC.Prim.Word#
                                                          -> GHC.Prim.Word#
                                                          -> GHC.Prim.State# GHC.Prim.RealWorld
                                                          -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                GHC.Prim.Int# #)}
                                  dt
                                  (GHC.Prim.int2Word# dt1)
                                  dt3
                                  (GHC.Prim.int2Word# dt4)
                                  (GHC.Prim.int2Word# dt2)
                                  GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                           case GHC.Prim.narrow32Int# ds3 of wild3 {
                             DEFAULT -> $j
                             0#
                             -> Language.PureScript.Docs.RenderedCode.Types.$fFromJSONNamespace3
                                  `cast`
                                (Sym (Data.Functor.Identity.N:Identity[0]
                                          <Data.Either.Either
                                             (Data.Aeson.BetterErrors.Internal.ParseError
                                                Data.Text.Internal.Text)
                                             Language.PureScript.Docs.RenderedCode.Types.Namespace>_R)) } } } } } } }) -}
0bf68f95cc438605559d4d420b903a78
  $fFromJSONNamespace3 ::
    Data.Either.Either
      (Data.Aeson.BetterErrors.Internal.ParseError
         Data.Text.Internal.Text)
      Language.PureScript.Docs.RenderedCode.Types.Namespace
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Data.Either.Right
                   @ (Data.Aeson.BetterErrors.Internal.ParseError
                        Data.Text.Internal.Text)
                   @ Language.PureScript.Docs.RenderedCode.Types.Namespace
                   Language.PureScript.Docs.RenderedCode.Types.ValueLevel) -}
0bf68f95cc438605559d4d420b903a78
  $fFromJSONNamespace4 ::
    Data.Either.Either
      (Data.Aeson.BetterErrors.Internal.ParseError
         Data.Text.Internal.Text)
      Language.PureScript.Docs.RenderedCode.Types.Namespace
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Data.Either.Right
                   @ (Data.Aeson.BetterErrors.Internal.ParseError
                        Data.Text.Internal.Text)
                   @ Language.PureScript.Docs.RenderedCode.Types.Namespace
                   Language.PureScript.Docs.RenderedCode.Types.TypeLevel) -}
0bf68f95cc438605559d4d420b903a78
  $fFromJSONNamespace5 ::
    Data.Either.Either
      (Data.Aeson.BetterErrors.Internal.ParseError
         Data.Text.Internal.Text)
      Language.PureScript.Docs.RenderedCode.Types.Namespace
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Data.Either.Right
                   @ (Data.Aeson.BetterErrors.Internal.ParseError
                        Data.Text.Internal.Text)
                   @ Language.PureScript.Docs.RenderedCode.Types.Namespace
                   Language.PureScript.Docs.RenderedCode.Types.KindLevel) -}
3f8193b1086854c0a529bbe4d42bd051
  $fFromJSONNamespace6 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Docs.RenderedCode.Types.$fFromJSONNamespace7) -}
e9a20482bcb67586e82e423cd597765e
  $fFromJSONNamespace7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("KindLevel"#) -}
5480b3834d517f7931cc3d5c8487edce
  $fFromJSONNamespace8 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Docs.RenderedCode.Types.$fFromJSONNamespace9) -}
3c28881fc9a29d2bd0cad878f4b6940b
  $fFromJSONNamespace9 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("TypeLevel"#) -}
0bf68f95cc438605559d4d420b903a78
  $fFromJSONNamespace_$cparseJSON ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         Language.PureScript.Docs.RenderedCode.Types.Namespace
  {- Arity: 1,
     Unfolding: (Data.Aeson.BetterErrors.Internal.toAesonParser
                   @ Data.Text.Internal.Text
                   @ Language.PureScript.Docs.RenderedCode.Types.Namespace
                   (GHC.Base.id @ Data.Text.Internal.Text)
                   Language.PureScript.Docs.RenderedCode.Types.asNamespace) -}
0bf68f95cc438605559d4d420b903a78
  $fFromJSONNamespace_$cparseJSONList ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         [Language.PureScript.Docs.RenderedCode.Types.Namespace]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Data.Aeson.Types.Internal.Value) ->
                 case ds of wild {
                   DEFAULT
                   -> let {
                        msg19 :: GHC.Base.String
                        = GHC.CString.unpackAppendCString#
                            Language.PureScript.Docs.RenderedCode.Types.$fFromJSONContainingModule3
                            (GHC.CString.unpackAppendCString#
                               Language.PureScript.Docs.RenderedCode.Types.$fFromJSONContainingModule2
                               (GHC.CString.unpackAppendCString#
                                  Language.PureScript.Docs.RenderedCode.Types.$fFromJSONContainingModule1
                                  (case wild of wild1 {
                                     Data.Aeson.Types.Internal.Object ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList10
                                     Data.Aeson.Types.Internal.String ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList8
                                     Data.Aeson.Types.Internal.Number ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList6
                                     Data.Aeson.Types.Internal.Bool ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList4
                                     Data.Aeson.Types.Internal.Null
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList1 })))
                      } in
                      (\ @ f4 :: * -> *
                         @ r
                         (path :: Data.Aeson.Types.Internal.JSONPath)
                         (kf :: Data.Aeson.Types.Internal.Failure f4 r)
                         (_ks :: Data.Aeson.Types.Internal.Success
                                   [Language.PureScript.Docs.RenderedCode.Types.Namespace] f4 r) ->
                       kf
                         (GHC.List.reverse @ Data.Aeson.Types.Internal.JSONPathElement path)
                         msg19)
                        `cast`
                      (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                <[Language.PureScript.Docs.RenderedCode.Types.Namespace]>_R))
                   Data.Aeson.Types.Internal.Array a2
                   -> case a2 of wild1 { Data.Vector.Vector dt dt1 dt2 ->
                      letrec {
                        $wgo :: GHC.Prim.Int# -> [Data.Aeson.Types.Internal.Value]
                          {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                        = \ (ww :: GHC.Prim.Int#) ->
                          case GHC.Prim.>=# ww dt1 of lwild {
                            DEFAULT
                            -> case GHC.Prim.indexArray#
                                      @ Data.Aeson.Types.Internal.Value
                                      dt2
                                      (GHC.Prim.+# dt ww) of ds3 { Unit# ipv ->
                               GHC.Types.:
                                 @ Data.Aeson.Types.Internal.Value
                                 ipv
                                 ($wgo (GHC.Prim.+# ww 1#)) }
                            1# -> GHC.Types.[] @ Data.Aeson.Types.Internal.Value }
                      } in
                      Language.PureScript.Docs.RenderedCode.Types.$fFromJSONNamespace_go
                        0#
                        ($wgo 0#) } }) -}
0bf68f95cc438605559d4d420b903a78
  $fFromJSONNamespace_go ::
    GHC.Prim.Int#
    -> [Data.Aeson.Types.Internal.Value]
    -> Data.Aeson.Types.Internal.Parser
         [Language.PureScript.Docs.RenderedCode.Types.Namespace]
  {- Arity: 2, Strictness: <L,U><S,1*U> -}
0bf68f95cc438605559d4d420b903a78
  $fGenericNamespace ::
    GHC.Generics.Generic
      Language.PureScript.Docs.RenderedCode.Types.Namespace
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Docs.RenderedCode.Types.Namespace
                  Language.PureScript.Docs.RenderedCode.Types.$fGenericNamespace1
                    `cast`
                  (forall (x :: <*>_N).
                   <Language.PureScript.Docs.RenderedCode.Types.Namespace>_R
                   ->_R (Sym (GHC.Generics.N:M1[0]
                                  <*>_N
                                  <GHC.Generics.D>_P
                                  <'GHC.Generics.MetaData
                                     "Namespace"
                                     "Language.PureScript.Docs.RenderedCode.Types"
                                     "purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"
                                     'GHC.Types.False>_P
                                  <GHC.Generics.M1
                                     GHC.Generics.C
                                     ('GHC.Generics.MetaCons
                                        "ValueLevel" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                     GHC.Generics.U1
                                   GHC.Generics.:+: (GHC.Generics.M1
                                                       GHC.Generics.C
                                                       ('GHC.Generics.MetaCons
                                                          "TypeLevel"
                                                          'GHC.Generics.PrefixI
                                                          'GHC.Types.False)
                                                       GHC.Generics.U1
                                                     GHC.Generics.:+: GHC.Generics.M1
                                                                        GHC.Generics.C
                                                                        ('GHC.Generics.MetaCons
                                                                           "KindLevel"
                                                                           'GHC.Generics.PrefixI
                                                                           'GHC.Types.False)
                                                                        GHC.Generics.U1)>_R) ; Sub (Sym (Language.PureScript.Docs.RenderedCode.Types.Rep_Namespace[0]))) <x>_N)
                  Language.PureScript.Docs.RenderedCode.Types.$fGenericNamespace_$cto -}
0bf68f95cc438605559d4d420b903a78
  $fGenericNamespace1 ::
    Language.PureScript.Docs.RenderedCode.Types.Namespace
    -> (GHC.Generics.:+:)
         (GHC.Generics.M1
            GHC.Generics.C
            ('GHC.Generics.MetaCons
               "ValueLevel" 'GHC.Generics.PrefixI 'GHC.Types.False)
            GHC.Generics.U1)
         (GHC.Generics.M1
            GHC.Generics.C
            ('GHC.Generics.MetaCons
               "TypeLevel" 'GHC.Generics.PrefixI 'GHC.Types.False)
            GHC.Generics.U1
          GHC.Generics.:+: GHC.Generics.M1
                             GHC.Generics.C
                             ('GHC.Generics.MetaCons
                                "KindLevel" 'GHC.Generics.PrefixI 'GHC.Types.False)
                             GHC.Generics.U1)
         x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ x
                   (x1 :: Language.PureScript.Docs.RenderedCode.Types.Namespace) ->
                 case x1 of wild {
                   Language.PureScript.Docs.RenderedCode.Types.ValueLevel
                   -> Language.PureScript.Docs.RenderedCode.Types.$fGenericNamespace6
                        @ x
                   Language.PureScript.Docs.RenderedCode.Types.TypeLevel
                   -> Language.PureScript.Docs.RenderedCode.Types.$fGenericNamespace4
                        @ x
                   Language.PureScript.Docs.RenderedCode.Types.KindLevel
                   -> Language.PureScript.Docs.RenderedCode.Types.$fGenericNamespace2
                        @ x }) -}
e004cc7c7312595782417fda77901364
  $fGenericNamespace2 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "ValueLevel" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "TypeLevel" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1
       GHC.Generics.:+: GHC.Generics.M1
                          GHC.Generics.C
                          ('GHC.Generics.MetaCons
                             "KindLevel" 'GHC.Generics.PrefixI 'GHC.Types.False)
                          GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (\ @ x ->
                 GHC.Generics.R1
                   @ *
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "ValueLevel" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "TypeLevel" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1
                      GHC.Generics.:+: GHC.Generics.M1
                                         GHC.Generics.C
                                         ('GHC.Generics.MetaCons
                                            "KindLevel" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                         GHC.Generics.U1)
                   @ x
                   (Language.PureScript.Docs.RenderedCode.Types.$fGenericNamespace3
                      @ x)) -}
fce4418d745751ad3fffbca211ea33e2
  $fGenericNamespace3 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "TypeLevel" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "KindLevel" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (\ @ x ->
                 GHC.Generics.R1
                   @ *
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "TypeLevel" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "KindLevel" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ x
                   (GHC.Generics.U1 @ * @ x)
                     `cast`
                   (Sym (GHC.Generics.N:M1[0]
                             <*>_N
                             <GHC.Generics.C>_P
                             <'GHC.Generics.MetaCons
                                "KindLevel" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                             <GHC.Generics.U1>_R) <x>_N)) -}
95ff6468f0dd70e6fbffaec426eaad83
  $fGenericNamespace4 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "ValueLevel" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "TypeLevel" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1
       GHC.Generics.:+: GHC.Generics.M1
                          GHC.Generics.C
                          ('GHC.Generics.MetaCons
                             "KindLevel" 'GHC.Generics.PrefixI 'GHC.Types.False)
                          GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (\ @ x ->
                 GHC.Generics.R1
                   @ *
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "ValueLevel" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "TypeLevel" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1
                      GHC.Generics.:+: GHC.Generics.M1
                                         GHC.Generics.C
                                         ('GHC.Generics.MetaCons
                                            "KindLevel" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                         GHC.Generics.U1)
                   @ x
                   (Language.PureScript.Docs.RenderedCode.Types.$fGenericNamespace5
                      @ x)) -}
ed8eff777ad55b06b040c39f2344ba5d
  $fGenericNamespace5 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "TypeLevel" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "KindLevel" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (\ @ x ->
                 GHC.Generics.L1
                   @ *
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "TypeLevel" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "KindLevel" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ x
                   (GHC.Generics.U1 @ * @ x)
                     `cast`
                   (Sym (GHC.Generics.N:M1[0]
                             <*>_N
                             <GHC.Generics.C>_P
                             <'GHC.Generics.MetaCons
                                "TypeLevel" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                             <GHC.Generics.U1>_R) <x>_N)) -}
76bc74ab91cc1523d01c3d65f81547a4
  $fGenericNamespace6 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "ValueLevel" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "TypeLevel" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1
       GHC.Generics.:+: GHC.Generics.M1
                          GHC.Generics.C
                          ('GHC.Generics.MetaCons
                             "KindLevel" 'GHC.Generics.PrefixI 'GHC.Types.False)
                          GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (\ @ x ->
                 GHC.Generics.L1
                   @ *
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "ValueLevel" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "TypeLevel" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1
                      GHC.Generics.:+: GHC.Generics.M1
                                         GHC.Generics.C
                                         ('GHC.Generics.MetaCons
                                            "KindLevel" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                         GHC.Generics.U1)
                   @ x
                   (GHC.Generics.U1 @ * @ x)
                     `cast`
                   (Sym (GHC.Generics.N:M1[0]
                             <*>_N
                             <GHC.Generics.C>_P
                             <'GHC.Generics.MetaCons
                                "ValueLevel" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                             <GHC.Generics.U1>_R) <x>_N)) -}
0bf68f95cc438605559d4d420b903a78
  $fGenericNamespace_$cto ::
    GHC.Generics.Rep
      Language.PureScript.Docs.RenderedCode.Types.Namespace x
    -> Language.PureScript.Docs.RenderedCode.Types.Namespace
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ x
                   (ds :: GHC.Generics.Rep
                            Language.PureScript.Docs.RenderedCode.Types.Namespace x) ->
                 case ds
                        `cast`
                      ((Sub (Language.PureScript.Docs.RenderedCode.Types.Rep_Namespace[0]) ; GHC.Generics.N:M1[0]
                                                                                                 <*>_N
                                                                                                 <GHC.Generics.D>_P
                                                                                                 <'GHC.Generics.MetaData
                                                                                                    "Namespace"
                                                                                                    "Language.PureScript.Docs.RenderedCode.Types"
                                                                                                    "purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"
                                                                                                    'GHC.Types.False>_P
                                                                                                 <GHC.Generics.M1
                                                                                                    GHC.Generics.C
                                                                                                    ('GHC.Generics.MetaCons
                                                                                                       "ValueLevel"
                                                                                                       'GHC.Generics.PrefixI
                                                                                                       'GHC.Types.False)
                                                                                                    GHC.Generics.U1
                                                                                                  GHC.Generics.:+: (GHC.Generics.M1
                                                                                                                      GHC.Generics.C
                                                                                                                      ('GHC.Generics.MetaCons
                                                                                                                         "TypeLevel"
                                                                                                                         'GHC.Generics.PrefixI
                                                                                                                         'GHC.Types.False)
                                                                                                                      GHC.Generics.U1
                                                                                                                    GHC.Generics.:+: GHC.Generics.M1
                                                                                                                                       GHC.Generics.C
                                                                                                                                       ('GHC.Generics.MetaCons
                                                                                                                                          "KindLevel"
                                                                                                                                          'GHC.Generics.PrefixI
                                                                                                                                          'GHC.Types.False)
                                                                                                                                       GHC.Generics.U1)>_R) <x>_N) of wild {
                   GHC.Generics.L1 ds1
                   -> case ds1
                             `cast`
                           (GHC.Generics.N:M1[0]
                                <*>_N
                                <GHC.Generics.C>_P
                                <'GHC.Generics.MetaCons
                                   "ValueLevel" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                <GHC.Generics.U1>_R <x>_N) of wild1 { GHC.Generics.U1 ->
                      Language.PureScript.Docs.RenderedCode.Types.ValueLevel }
                   GHC.Generics.R1 ds1
                   -> case ds1 of wild1 {
                        GHC.Generics.L1 ds2
                        -> case ds2
                                  `cast`
                                (GHC.Generics.N:M1[0]
                                     <*>_N
                                     <GHC.Generics.C>_P
                                     <'GHC.Generics.MetaCons
                                        "TypeLevel" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                     <GHC.Generics.U1>_R <x>_N) of wild2 { GHC.Generics.U1 ->
                           Language.PureScript.Docs.RenderedCode.Types.TypeLevel }
                        GHC.Generics.R1 ds2
                        -> case ds2
                                  `cast`
                                (GHC.Generics.N:M1[0]
                                     <*>_N
                                     <GHC.Generics.C>_P
                                     <'GHC.Generics.MetaCons
                                        "KindLevel" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                     <GHC.Generics.U1>_R <x>_N) of wild2 { GHC.Generics.U1 ->
                           Language.PureScript.Docs.RenderedCode.Types.KindLevel } } }) -}
4660ea0ffbba09617bc864a10b08d72f
  $fMonoidRenderedCode ::
    GHC.Base.Monoid
      Language.PureScript.Docs.RenderedCode.Types.RenderedCode
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Docs.RenderedCode.Types.RenderedCode
                  Language.PureScript.Docs.RenderedCode.Types.$fSemigroupRenderedCode
                  (GHC.Types.[]
                     @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)
                    `cast`
                  (Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0]))
                  (GHC.Base.++
                     @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)
                    `cast`
                  (Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])
                   ->_R Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])
                   ->_R Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0]))
                  (GHC.Base.$fMonoid[]_$cmconcat
                     @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)
                    `cast`
                  (([Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])])_R
                   ->_R Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])) -}
0bf68f95cc438605559d4d420b903a78
  $fNFDataNamespace ::
    Control.DeepSeq.NFData
      Language.PureScript.Docs.RenderedCode.Types.Namespace
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Language.PureScript.Docs.RenderedCode.Types.$fNFDataNamespace_$crnf
                  `cast`
                (Sym (Control.DeepSeq.N:NFData[0]
                          <Language.PureScript.Docs.RenderedCode.Types.Namespace>_N)) -}
0bf68f95cc438605559d4d420b903a78
  $fNFDataNamespace_$crnf ::
    Language.PureScript.Docs.RenderedCode.Types.Namespace -> ()
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Docs.RenderedCode.Types.Namespace) ->
                 case x of wild { DEFAULT -> GHC.Tuple.() }) -}
7fd78b3d6be6c8453ba17c402b4bd2a1
  $fOrdContainingModule ::
    GHC.Classes.Ord
      Language.PureScript.Docs.RenderedCode.Types.ContainingModule
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Docs.RenderedCode.Types.ContainingModule
                  Language.PureScript.Docs.RenderedCode.Types.$fEqContainingModule
                  Language.PureScript.Docs.RenderedCode.Types.$fOrdContainingModule_$ccompare
                  Language.PureScript.Docs.RenderedCode.Types.$fOrdContainingModule_$c<
                  Language.PureScript.Docs.RenderedCode.Types.$fOrdContainingModule_$c<=
                  Language.PureScript.Docs.RenderedCode.Types.$fOrdContainingModule_$c>
                  Language.PureScript.Docs.RenderedCode.Types.$fOrdContainingModule_$c>=
                  Language.PureScript.Docs.RenderedCode.Types.$fOrdContainingModule_$cmax
                  Language.PureScript.Docs.RenderedCode.Types.$fOrdContainingModule_$cmin -}
7fd78b3d6be6c8453ba17c402b4bd2a1
  $fOrdContainingModule_$c< ::
    Language.PureScript.Docs.RenderedCode.Types.ContainingModule
    -> Language.PureScript.Docs.RenderedCode.Types.ContainingModule
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.Docs.RenderedCode.Types.ContainingModule)
                   (b :: Language.PureScript.Docs.RenderedCode.Types.ContainingModule) ->
                 case a of wild {
                   Language.PureScript.Docs.RenderedCode.Types.ThisModule
                   -> case b of wild1 {
                        Language.PureScript.Docs.RenderedCode.Types.ThisModule
                        -> GHC.Types.False
                        Language.PureScript.Docs.RenderedCode.Types.OtherModule ipv
                        -> GHC.Types.True }
                   Language.PureScript.Docs.RenderedCode.Types.OtherModule a1
                   -> case b of wild1 {
                        Language.PureScript.Docs.RenderedCode.Types.ThisModule
                        -> GHC.Types.False
                        Language.PureScript.Docs.RenderedCode.Types.OtherModule b1
                        -> Language.PureScript.Names.$fOrdModuleName6
                             a1 `cast` (Language.PureScript.Names.N:ModuleName[0])
                             b1 `cast` (Language.PureScript.Names.N:ModuleName[0]) } }) -}
7fd78b3d6be6c8453ba17c402b4bd2a1
  $fOrdContainingModule_$c<= ::
    Language.PureScript.Docs.RenderedCode.Types.ContainingModule
    -> Language.PureScript.Docs.RenderedCode.Types.ContainingModule
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Language.PureScript.Docs.RenderedCode.Types.ContainingModule)
                   (b :: Language.PureScript.Docs.RenderedCode.Types.ContainingModule) ->
                 case b of wild {
                   Language.PureScript.Docs.RenderedCode.Types.ThisModule
                   -> case a of wild1 {
                        Language.PureScript.Docs.RenderedCode.Types.ThisModule
                        -> GHC.Types.True
                        Language.PureScript.Docs.RenderedCode.Types.OtherModule ipv
                        -> GHC.Types.False }
                   Language.PureScript.Docs.RenderedCode.Types.OtherModule a1
                   -> case a of wild1 {
                        Language.PureScript.Docs.RenderedCode.Types.ThisModule
                        -> GHC.Types.True
                        Language.PureScript.Docs.RenderedCode.Types.OtherModule b1
                        -> case GHC.Classes.$fOrd[]_$ccompare
                                  @ (Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.Namespace)
                                  (Language.PureScript.Names.$fOrdProperName
                                     @ 'Language.PureScript.Names.Namespace)
                                  a1 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                  b1 `cast` (Language.PureScript.Names.N:ModuleName[0]) of wild2 {
                             DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False } } }) -}
7fd78b3d6be6c8453ba17c402b4bd2a1
  $fOrdContainingModule_$c> ::
    Language.PureScript.Docs.RenderedCode.Types.ContainingModule
    -> Language.PureScript.Docs.RenderedCode.Types.ContainingModule
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, True)
                (\ (a :: Language.PureScript.Docs.RenderedCode.Types.ContainingModule)
                   (b :: Language.PureScript.Docs.RenderedCode.Types.ContainingModule) ->
                 Language.PureScript.Docs.RenderedCode.Types.$fOrdContainingModule_$c<
                   b
                   a) -}
7fd78b3d6be6c8453ba17c402b4bd2a1
  $fOrdContainingModule_$c>= ::
    Language.PureScript.Docs.RenderedCode.Types.ContainingModule
    -> Language.PureScript.Docs.RenderedCode.Types.ContainingModule
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Language.PureScript.Docs.RenderedCode.Types.ContainingModule)
                   (b :: Language.PureScript.Docs.RenderedCode.Types.ContainingModule) ->
                 case a of wild {
                   Language.PureScript.Docs.RenderedCode.Types.ThisModule
                   -> case b of wild1 {
                        Language.PureScript.Docs.RenderedCode.Types.ThisModule
                        -> GHC.Types.True
                        Language.PureScript.Docs.RenderedCode.Types.OtherModule ipv
                        -> GHC.Types.False }
                   Language.PureScript.Docs.RenderedCode.Types.OtherModule a1
                   -> case b of wild1 {
                        Language.PureScript.Docs.RenderedCode.Types.ThisModule
                        -> GHC.Types.True
                        Language.PureScript.Docs.RenderedCode.Types.OtherModule b1
                        -> case GHC.Classes.$fOrd[]_$ccompare
                                  @ (Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.Namespace)
                                  (Language.PureScript.Names.$fOrdProperName
                                     @ 'Language.PureScript.Names.Namespace)
                                  a1 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                  b1 `cast` (Language.PureScript.Names.N:ModuleName[0]) of wild2 {
                             DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False } } }) -}
7fd78b3d6be6c8453ba17c402b4bd2a1
  $fOrdContainingModule_$ccompare ::
    Language.PureScript.Docs.RenderedCode.Types.ContainingModule
    -> Language.PureScript.Docs.RenderedCode.Types.ContainingModule
    -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Language.PureScript.Docs.RenderedCode.Types.ContainingModule)
                   (b :: Language.PureScript.Docs.RenderedCode.Types.ContainingModule) ->
                 case a of wild {
                   Language.PureScript.Docs.RenderedCode.Types.ThisModule
                   -> case b of wild1 {
                        Language.PureScript.Docs.RenderedCode.Types.ThisModule
                        -> GHC.Types.EQ
                        Language.PureScript.Docs.RenderedCode.Types.OtherModule ipv
                        -> GHC.Types.LT }
                   Language.PureScript.Docs.RenderedCode.Types.OtherModule a1
                   -> case b of wild1 {
                        Language.PureScript.Docs.RenderedCode.Types.ThisModule
                        -> GHC.Types.GT
                        Language.PureScript.Docs.RenderedCode.Types.OtherModule b1
                        -> GHC.Classes.$fOrd[]_$ccompare
                             @ (Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.Namespace)
                             (Language.PureScript.Names.$fOrdProperName
                                @ 'Language.PureScript.Names.Namespace)
                             a1 `cast` (Language.PureScript.Names.N:ModuleName[0])
                             b1 `cast` (Language.PureScript.Names.N:ModuleName[0]) } }) -}
7fd78b3d6be6c8453ba17c402b4bd2a1
  $fOrdContainingModule_$cmax ::
    Language.PureScript.Docs.RenderedCode.Types.ContainingModule
    -> Language.PureScript.Docs.RenderedCode.Types.ContainingModule
    -> Language.PureScript.Docs.RenderedCode.Types.ContainingModule
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (x :: Language.PureScript.Docs.RenderedCode.Types.ContainingModule)
                   (y :: Language.PureScript.Docs.RenderedCode.Types.ContainingModule) ->
                 case y of wild {
                   Language.PureScript.Docs.RenderedCode.Types.ThisModule -> x
                   Language.PureScript.Docs.RenderedCode.Types.OtherModule a1
                   -> case x of wild1 {
                        Language.PureScript.Docs.RenderedCode.Types.ThisModule -> wild
                        Language.PureScript.Docs.RenderedCode.Types.OtherModule b1
                        -> case GHC.Classes.$fOrd[]_$ccompare
                                  @ (Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.Namespace)
                                  (Language.PureScript.Names.$fOrdProperName
                                     @ 'Language.PureScript.Names.Namespace)
                                  a1 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                  b1 `cast` (Language.PureScript.Names.N:ModuleName[0]) of wild2 {
                             DEFAULT -> wild GHC.Types.LT -> wild1 } } }) -}
7fd78b3d6be6c8453ba17c402b4bd2a1
  $fOrdContainingModule_$cmin ::
    Language.PureScript.Docs.RenderedCode.Types.ContainingModule
    -> Language.PureScript.Docs.RenderedCode.Types.ContainingModule
    -> Language.PureScript.Docs.RenderedCode.Types.ContainingModule
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (x :: Language.PureScript.Docs.RenderedCode.Types.ContainingModule)
                   (y :: Language.PureScript.Docs.RenderedCode.Types.ContainingModule) ->
                 case y of wild {
                   Language.PureScript.Docs.RenderedCode.Types.ThisModule
                   -> case x of wild1 { DEFAULT ->
                      Language.PureScript.Docs.RenderedCode.Types.ThisModule }
                   Language.PureScript.Docs.RenderedCode.Types.OtherModule a1
                   -> case x of wild1 {
                        Language.PureScript.Docs.RenderedCode.Types.ThisModule
                        -> Language.PureScript.Docs.RenderedCode.Types.ThisModule
                        Language.PureScript.Docs.RenderedCode.Types.OtherModule b1
                        -> case GHC.Classes.$fOrd[]_$ccompare
                                  @ (Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.Namespace)
                                  (Language.PureScript.Names.$fOrdProperName
                                     @ 'Language.PureScript.Names.Namespace)
                                  a1 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                  b1 `cast` (Language.PureScript.Names.N:ModuleName[0]) of wild2 {
                             DEFAULT -> wild1 GHC.Types.LT -> wild } } }) -}
5e36da664b08e623162b4c76cb76fcf5
  $fOrdLink ::
    GHC.Classes.Ord Language.PureScript.Docs.RenderedCode.Types.Link
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Docs.RenderedCode.Types.Link
                  Language.PureScript.Docs.RenderedCode.Types.$fEqLink
                  Language.PureScript.Docs.RenderedCode.Types.$fOrdLink_$ccompare
                  Language.PureScript.Docs.RenderedCode.Types.$fOrdLink_$c<
                  Language.PureScript.Docs.RenderedCode.Types.$fOrdLink_$c<=
                  Language.PureScript.Docs.RenderedCode.Types.$fOrdLink_$c>
                  Language.PureScript.Docs.RenderedCode.Types.$fOrdLink_$c>=
                  Language.PureScript.Docs.RenderedCode.Types.$fOrdLink_$cmax
                  Language.PureScript.Docs.RenderedCode.Types.$fOrdLink_$cmin -}
5e36da664b08e623162b4c76cb76fcf5
  $fOrdLink_$c< ::
    Language.PureScript.Docs.RenderedCode.Types.Link
    -> Language.PureScript.Docs.RenderedCode.Types.Link
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.Docs.RenderedCode.Types.Link)
                   (b :: Language.PureScript.Docs.RenderedCode.Types.Link) ->
                 case a of wild {
                   Language.PureScript.Docs.RenderedCode.Types.NoLink
                   -> case b of wild1 {
                        Language.PureScript.Docs.RenderedCode.Types.NoLink
                        -> GHC.Types.False
                        Language.PureScript.Docs.RenderedCode.Types.Link ipv
                        -> GHC.Types.True }
                   Language.PureScript.Docs.RenderedCode.Types.Link a1
                   -> case b of wild1 {
                        Language.PureScript.Docs.RenderedCode.Types.NoLink
                        -> GHC.Types.False
                        Language.PureScript.Docs.RenderedCode.Types.Link b1
                        -> Language.PureScript.Docs.RenderedCode.Types.$fOrdContainingModule_$c<
                             a1
                             b1 } }) -}
5e36da664b08e623162b4c76cb76fcf5
  $fOrdLink_$c<= ::
    Language.PureScript.Docs.RenderedCode.Types.Link
    -> Language.PureScript.Docs.RenderedCode.Types.Link
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Language.PureScript.Docs.RenderedCode.Types.Link)
                   (b :: Language.PureScript.Docs.RenderedCode.Types.Link) ->
                 case b of wild {
                   Language.PureScript.Docs.RenderedCode.Types.NoLink
                   -> case a of wild1 {
                        Language.PureScript.Docs.RenderedCode.Types.NoLink
                        -> GHC.Types.True
                        Language.PureScript.Docs.RenderedCode.Types.Link ipv
                        -> GHC.Types.False }
                   Language.PureScript.Docs.RenderedCode.Types.Link a1
                   -> case a of wild1 {
                        Language.PureScript.Docs.RenderedCode.Types.NoLink
                        -> GHC.Types.True
                        Language.PureScript.Docs.RenderedCode.Types.Link b1
                        -> case a1 of wild2 {
                             Language.PureScript.Docs.RenderedCode.Types.ThisModule
                             -> case b1 of wild3 {
                                  Language.PureScript.Docs.RenderedCode.Types.ThisModule
                                  -> GHC.Types.True
                                  Language.PureScript.Docs.RenderedCode.Types.OtherModule ipv
                                  -> GHC.Types.False }
                             Language.PureScript.Docs.RenderedCode.Types.OtherModule a2
                             -> case b1 of wild3 {
                                  Language.PureScript.Docs.RenderedCode.Types.ThisModule
                                  -> GHC.Types.True
                                  Language.PureScript.Docs.RenderedCode.Types.OtherModule b2
                                  -> case GHC.Classes.$fOrd[]_$ccompare
                                            @ (Language.PureScript.Names.ProperName
                                                 'Language.PureScript.Names.Namespace)
                                            (Language.PureScript.Names.$fOrdProperName
                                               @ 'Language.PureScript.Names.Namespace)
                                            a2 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                            b2
                                              `cast`
                                            (Language.PureScript.Names.N:ModuleName[0]) of wild4 {
                                       DEFAULT -> GHC.Types.True
                                       GHC.Types.LT -> GHC.Types.False } } } } }) -}
5e36da664b08e623162b4c76cb76fcf5
  $fOrdLink_$c> ::
    Language.PureScript.Docs.RenderedCode.Types.Link
    -> Language.PureScript.Docs.RenderedCode.Types.Link
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, True)
                (\ (a :: Language.PureScript.Docs.RenderedCode.Types.Link)
                   (b :: Language.PureScript.Docs.RenderedCode.Types.Link) ->
                 Language.PureScript.Docs.RenderedCode.Types.$fOrdLink_$c< b a) -}
5e36da664b08e623162b4c76cb76fcf5
  $fOrdLink_$c>= ::
    Language.PureScript.Docs.RenderedCode.Types.Link
    -> Language.PureScript.Docs.RenderedCode.Types.Link
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Language.PureScript.Docs.RenderedCode.Types.Link)
                   (b :: Language.PureScript.Docs.RenderedCode.Types.Link) ->
                 case a of wild {
                   Language.PureScript.Docs.RenderedCode.Types.NoLink
                   -> case b of wild1 {
                        Language.PureScript.Docs.RenderedCode.Types.NoLink
                        -> GHC.Types.True
                        Language.PureScript.Docs.RenderedCode.Types.Link ipv
                        -> GHC.Types.False }
                   Language.PureScript.Docs.RenderedCode.Types.Link a1
                   -> case b of wild1 {
                        Language.PureScript.Docs.RenderedCode.Types.NoLink
                        -> GHC.Types.True
                        Language.PureScript.Docs.RenderedCode.Types.Link b1
                        -> case a1 of wild2 {
                             Language.PureScript.Docs.RenderedCode.Types.ThisModule
                             -> case b1 of wild3 {
                                  Language.PureScript.Docs.RenderedCode.Types.ThisModule
                                  -> GHC.Types.True
                                  Language.PureScript.Docs.RenderedCode.Types.OtherModule ipv
                                  -> GHC.Types.False }
                             Language.PureScript.Docs.RenderedCode.Types.OtherModule a2
                             -> case b1 of wild3 {
                                  Language.PureScript.Docs.RenderedCode.Types.ThisModule
                                  -> GHC.Types.True
                                  Language.PureScript.Docs.RenderedCode.Types.OtherModule b2
                                  -> case GHC.Classes.$fOrd[]_$ccompare
                                            @ (Language.PureScript.Names.ProperName
                                                 'Language.PureScript.Names.Namespace)
                                            (Language.PureScript.Names.$fOrdProperName
                                               @ 'Language.PureScript.Names.Namespace)
                                            a2 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                            b2
                                              `cast`
                                            (Language.PureScript.Names.N:ModuleName[0]) of wild4 {
                                       DEFAULT -> GHC.Types.True
                                       GHC.Types.LT -> GHC.Types.False } } } } }) -}
5e36da664b08e623162b4c76cb76fcf5
  $fOrdLink_$ccompare ::
    Language.PureScript.Docs.RenderedCode.Types.Link
    -> Language.PureScript.Docs.RenderedCode.Types.Link
    -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.Docs.RenderedCode.Types.Link)
                   (b :: Language.PureScript.Docs.RenderedCode.Types.Link) ->
                 case a of wild {
                   Language.PureScript.Docs.RenderedCode.Types.NoLink
                   -> case b of wild1 {
                        Language.PureScript.Docs.RenderedCode.Types.NoLink -> GHC.Types.EQ
                        Language.PureScript.Docs.RenderedCode.Types.Link ipv
                        -> GHC.Types.LT }
                   Language.PureScript.Docs.RenderedCode.Types.Link a1
                   -> case b of wild1 {
                        Language.PureScript.Docs.RenderedCode.Types.NoLink -> GHC.Types.GT
                        Language.PureScript.Docs.RenderedCode.Types.Link b1
                        -> Language.PureScript.Docs.RenderedCode.Types.$fOrdContainingModule_$ccompare
                             a1
                             b1 } }) -}
5e36da664b08e623162b4c76cb76fcf5
  $fOrdLink_$cmax ::
    Language.PureScript.Docs.RenderedCode.Types.Link
    -> Language.PureScript.Docs.RenderedCode.Types.Link
    -> Language.PureScript.Docs.RenderedCode.Types.Link
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (x :: Language.PureScript.Docs.RenderedCode.Types.Link)
                   (y :: Language.PureScript.Docs.RenderedCode.Types.Link) ->
                 case y of wild {
                   Language.PureScript.Docs.RenderedCode.Types.NoLink -> x
                   Language.PureScript.Docs.RenderedCode.Types.Link a1
                   -> case x of wild1 {
                        Language.PureScript.Docs.RenderedCode.Types.NoLink -> wild
                        Language.PureScript.Docs.RenderedCode.Types.Link b1
                        -> case a1 of wild2 {
                             Language.PureScript.Docs.RenderedCode.Types.ThisModule
                             -> case b1 of wild3 {
                                  Language.PureScript.Docs.RenderedCode.Types.ThisModule -> wild
                                  Language.PureScript.Docs.RenderedCode.Types.OtherModule ipv
                                  -> wild1 }
                             Language.PureScript.Docs.RenderedCode.Types.OtherModule a2
                             -> case b1 of wild3 {
                                  Language.PureScript.Docs.RenderedCode.Types.ThisModule -> wild
                                  Language.PureScript.Docs.RenderedCode.Types.OtherModule b2
                                  -> case GHC.Classes.$fOrd[]_$ccompare
                                            @ (Language.PureScript.Names.ProperName
                                                 'Language.PureScript.Names.Namespace)
                                            (Language.PureScript.Names.$fOrdProperName
                                               @ 'Language.PureScript.Names.Namespace)
                                            a2 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                            b2
                                              `cast`
                                            (Language.PureScript.Names.N:ModuleName[0]) of wild4 {
                                       DEFAULT -> wild GHC.Types.LT -> wild1 } } } } }) -}
5e36da664b08e623162b4c76cb76fcf5
  $fOrdLink_$cmin ::
    Language.PureScript.Docs.RenderedCode.Types.Link
    -> Language.PureScript.Docs.RenderedCode.Types.Link
    -> Language.PureScript.Docs.RenderedCode.Types.Link
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (x :: Language.PureScript.Docs.RenderedCode.Types.Link)
                   (y :: Language.PureScript.Docs.RenderedCode.Types.Link) ->
                 case y of wild {
                   Language.PureScript.Docs.RenderedCode.Types.NoLink
                   -> case x of wild1 { DEFAULT ->
                      Language.PureScript.Docs.RenderedCode.Types.NoLink }
                   Language.PureScript.Docs.RenderedCode.Types.Link a1
                   -> case x of wild1 {
                        Language.PureScript.Docs.RenderedCode.Types.NoLink
                        -> Language.PureScript.Docs.RenderedCode.Types.NoLink
                        Language.PureScript.Docs.RenderedCode.Types.Link b1
                        -> case a1 of wild2 {
                             Language.PureScript.Docs.RenderedCode.Types.ThisModule
                             -> case b1 of wild3 {
                                  Language.PureScript.Docs.RenderedCode.Types.ThisModule -> wild1
                                  Language.PureScript.Docs.RenderedCode.Types.OtherModule ipv
                                  -> wild }
                             Language.PureScript.Docs.RenderedCode.Types.OtherModule a2
                             -> case b1 of wild3 {
                                  Language.PureScript.Docs.RenderedCode.Types.ThisModule -> wild1
                                  Language.PureScript.Docs.RenderedCode.Types.OtherModule b2
                                  -> case GHC.Classes.$fOrd[]_$ccompare
                                            @ (Language.PureScript.Names.ProperName
                                                 'Language.PureScript.Names.Namespace)
                                            (Language.PureScript.Names.$fOrdProperName
                                               @ 'Language.PureScript.Names.Namespace)
                                            a2 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                            b2
                                              `cast`
                                            (Language.PureScript.Names.N:ModuleName[0]) of wild4 {
                                       DEFAULT -> wild1 GHC.Types.LT -> wild } } } } }) -}
0bf68f95cc438605559d4d420b903a78
  $fOrdNamespace ::
    GHC.Classes.Ord
      Language.PureScript.Docs.RenderedCode.Types.Namespace
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Docs.RenderedCode.Types.Namespace
                  Language.PureScript.Docs.RenderedCode.Types.$fEqNamespace
                  Language.PureScript.Docs.RenderedCode.Types.$fOrdNamespace_$ccompare
                  Language.PureScript.Docs.RenderedCode.Types.$fOrdNamespace_$c<
                  Language.PureScript.Docs.RenderedCode.Types.$fOrdNamespace_$c<=
                  Language.PureScript.Docs.RenderedCode.Types.$fOrdNamespace_$c>
                  Language.PureScript.Docs.RenderedCode.Types.$fOrdNamespace_$c>=
                  Language.PureScript.Docs.RenderedCode.Types.$fOrdNamespace_$cmax
                  Language.PureScript.Docs.RenderedCode.Types.$fOrdNamespace_$cmin -}
0bf68f95cc438605559d4d420b903a78
  $fOrdNamespace_$c< ::
    Language.PureScript.Docs.RenderedCode.Types.Namespace
    -> Language.PureScript.Docs.RenderedCode.Types.Namespace
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.Docs.RenderedCode.Types.Namespace)
                   (b :: Language.PureScript.Docs.RenderedCode.Types.Namespace) ->
                 case a of wild {
                   Language.PureScript.Docs.RenderedCode.Types.ValueLevel
                   -> case b of wild1 {
                        Language.PureScript.Docs.RenderedCode.Types.ValueLevel
                        -> GHC.Types.False
                        Language.PureScript.Docs.RenderedCode.Types.TypeLevel
                        -> GHC.Types.True
                        Language.PureScript.Docs.RenderedCode.Types.KindLevel
                        -> GHC.Types.True }
                   Language.PureScript.Docs.RenderedCode.Types.TypeLevel
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Docs.RenderedCode.Types.KindLevel
                        -> GHC.Types.True }
                   Language.PureScript.Docs.RenderedCode.Types.KindLevel
                   -> case b of wild1 { DEFAULT -> GHC.Types.False } }) -}
0bf68f95cc438605559d4d420b903a78
  $fOrdNamespace_$c<= ::
    Language.PureScript.Docs.RenderedCode.Types.Namespace
    -> Language.PureScript.Docs.RenderedCode.Types.Namespace
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Language.PureScript.Docs.RenderedCode.Types.Namespace)
                   (b :: Language.PureScript.Docs.RenderedCode.Types.Namespace) ->
                 let {
                   $j :: GHC.Prim.Int# -> GHC.Types.Bool
                     <join 1> {- Arity: 1, Strictness: <S,U> -}
                   = \ (a# :: GHC.Prim.Int#)[OneShot] ->
                     case a of wild {
                       Language.PureScript.Docs.RenderedCode.Types.ValueLevel
                       -> case GHC.Prim.<# a# 0# of lwild {
                            DEFAULT -> GHC.Types.True 1# -> GHC.Types.False }
                       Language.PureScript.Docs.RenderedCode.Types.TypeLevel
                       -> case GHC.Prim.<# a# 1# of lwild {
                            DEFAULT -> GHC.Types.True 1# -> GHC.Types.False }
                       Language.PureScript.Docs.RenderedCode.Types.KindLevel
                       -> case GHC.Prim.<# a# 2# of lwild {
                            DEFAULT -> GHC.Types.True 1# -> GHC.Types.False } }
                 } in
                 case b of wild {
                   Language.PureScript.Docs.RenderedCode.Types.ValueLevel -> $j 0#
                   Language.PureScript.Docs.RenderedCode.Types.TypeLevel -> $j 1#
                   Language.PureScript.Docs.RenderedCode.Types.KindLevel
                   -> $j 2# }) -}
0bf68f95cc438605559d4d420b903a78
  $fOrdNamespace_$c> ::
    Language.PureScript.Docs.RenderedCode.Types.Namespace
    -> Language.PureScript.Docs.RenderedCode.Types.Namespace
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, True)
                (\ (a :: Language.PureScript.Docs.RenderedCode.Types.Namespace)
                   (b :: Language.PureScript.Docs.RenderedCode.Types.Namespace) ->
                 Language.PureScript.Docs.RenderedCode.Types.$fOrdNamespace_$c<
                   b
                   a) -}
0bf68f95cc438605559d4d420b903a78
  $fOrdNamespace_$c>= ::
    Language.PureScript.Docs.RenderedCode.Types.Namespace
    -> Language.PureScript.Docs.RenderedCode.Types.Namespace
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Language.PureScript.Docs.RenderedCode.Types.Namespace)
                   (b :: Language.PureScript.Docs.RenderedCode.Types.Namespace) ->
                 let {
                   $j :: GHC.Prim.Int# -> GHC.Types.Bool
                     <join 1> {- Arity: 1, Strictness: <S,U> -}
                   = \ (a# :: GHC.Prim.Int#)[OneShot] ->
                     case b of wild {
                       Language.PureScript.Docs.RenderedCode.Types.ValueLevel
                       -> case GHC.Prim.<# a# 0# of lwild {
                            DEFAULT -> GHC.Types.True 1# -> GHC.Types.False }
                       Language.PureScript.Docs.RenderedCode.Types.TypeLevel
                       -> case GHC.Prim.<# a# 1# of lwild {
                            DEFAULT -> GHC.Types.True 1# -> GHC.Types.False }
                       Language.PureScript.Docs.RenderedCode.Types.KindLevel
                       -> case GHC.Prim.<# a# 2# of lwild {
                            DEFAULT -> GHC.Types.True 1# -> GHC.Types.False } }
                 } in
                 case a of wild {
                   Language.PureScript.Docs.RenderedCode.Types.ValueLevel -> $j 0#
                   Language.PureScript.Docs.RenderedCode.Types.TypeLevel -> $j 1#
                   Language.PureScript.Docs.RenderedCode.Types.KindLevel
                   -> $j 2# }) -}
0bf68f95cc438605559d4d420b903a78
  $fOrdNamespace_$ccompare ::
    Language.PureScript.Docs.RenderedCode.Types.Namespace
    -> Language.PureScript.Docs.RenderedCode.Types.Namespace
    -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Language.PureScript.Docs.RenderedCode.Types.Namespace)
                   (b :: Language.PureScript.Docs.RenderedCode.Types.Namespace) ->
                 case a of wild {
                   Language.PureScript.Docs.RenderedCode.Types.ValueLevel
                   -> case b of wild1 {
                        Language.PureScript.Docs.RenderedCode.Types.ValueLevel
                        -> GHC.Types.EQ
                        Language.PureScript.Docs.RenderedCode.Types.TypeLevel
                        -> GHC.Types.LT
                        Language.PureScript.Docs.RenderedCode.Types.KindLevel
                        -> GHC.Types.LT }
                   Language.PureScript.Docs.RenderedCode.Types.TypeLevel
                   -> case b of wild1 {
                        Language.PureScript.Docs.RenderedCode.Types.ValueLevel
                        -> GHC.Types.GT
                        Language.PureScript.Docs.RenderedCode.Types.TypeLevel
                        -> GHC.Types.EQ
                        Language.PureScript.Docs.RenderedCode.Types.KindLevel
                        -> GHC.Types.LT }
                   Language.PureScript.Docs.RenderedCode.Types.KindLevel
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Language.PureScript.Docs.RenderedCode.Types.KindLevel
                        -> GHC.Types.EQ } }) -}
0bf68f95cc438605559d4d420b903a78
  $fOrdNamespace_$cmax ::
    Language.PureScript.Docs.RenderedCode.Types.Namespace
    -> Language.PureScript.Docs.RenderedCode.Types.Namespace
    -> Language.PureScript.Docs.RenderedCode.Types.Namespace
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Docs.RenderedCode.Types.Namespace)
                   (y :: Language.PureScript.Docs.RenderedCode.Types.Namespace) ->
                 case Language.PureScript.Docs.RenderedCode.Types.$fOrdNamespace_$c<=
                        x
                        y of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
0bf68f95cc438605559d4d420b903a78
  $fOrdNamespace_$cmin ::
    Language.PureScript.Docs.RenderedCode.Types.Namespace
    -> Language.PureScript.Docs.RenderedCode.Types.Namespace
    -> Language.PureScript.Docs.RenderedCode.Types.Namespace
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Docs.RenderedCode.Types.Namespace)
                   (y :: Language.PureScript.Docs.RenderedCode.Types.Namespace) ->
                 case Language.PureScript.Docs.RenderedCode.Types.$fOrdNamespace_$c<=
                        x
                        y of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
4660ea0ffbba09617bc864a10b08d72f
  $fOrdRenderedCode ::
    GHC.Classes.Ord
      Language.PureScript.Docs.RenderedCode.Types.RenderedCode
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Docs.RenderedCode.Types.RenderedCode
                  Language.PureScript.Docs.RenderedCode.Types.$fEqRenderedCode
                  Language.PureScript.Docs.RenderedCode.Types.$fOrdRenderedCode7
                    `cast`
                  (Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])
                   ->_R Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])
                   ->_R <GHC.Types.Ordering>_R)
                  Language.PureScript.Docs.RenderedCode.Types.$fOrdRenderedCode6
                    `cast`
                  (Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])
                   ->_R Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])
                   ->_R <GHC.Types.Bool>_R)
                  Language.PureScript.Docs.RenderedCode.Types.$fOrdRenderedCode5
                    `cast`
                  (Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])
                   ->_R Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])
                   ->_R <GHC.Types.Bool>_R)
                  Language.PureScript.Docs.RenderedCode.Types.$fOrdRenderedCode4
                    `cast`
                  (Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])
                   ->_R Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])
                   ->_R <GHC.Types.Bool>_R)
                  Language.PureScript.Docs.RenderedCode.Types.$fOrdRenderedCode3
                    `cast`
                  (Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])
                   ->_R Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])
                   ->_R <GHC.Types.Bool>_R)
                  Language.PureScript.Docs.RenderedCode.Types.$fOrdRenderedCode2
                    `cast`
                  (Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])
                   ->_R Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])
                   ->_R Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0]))
                  Language.PureScript.Docs.RenderedCode.Types.$fOrdRenderedCode1
                    `cast`
                  (Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])
                   ->_R Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])
                   ->_R Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])) -}
435bad8fba05640813c8c938387f458f
  $fOrdRenderedCode1 ::
    [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
    -> [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
    -> [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement])
                   (y :: [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                        Language.PureScript.Docs.RenderedCode.Types.$fOrdRenderedCodeElement
                        x
                        y of wild {
                   DEFAULT -> x GHC.Types.GT -> y }) -}
3fe88f1a714f570330e5546914d54e18
  $fOrdRenderedCode2 ::
    [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
    -> [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
    -> [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement])
                   (y :: [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                        Language.PureScript.Docs.RenderedCode.Types.$fOrdRenderedCodeElement
                        x
                        y of wild {
                   DEFAULT -> y GHC.Types.GT -> x }) -}
09b5247076ab37ca82cd06b6606ab616
  $fOrdRenderedCode3 ::
    [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
    -> [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement])
                   (y :: [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                        Language.PureScript.Docs.RenderedCode.Types.$fOrdRenderedCodeElement
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }) -}
642e60949125b9709f61f18ad2becbad
  $fOrdRenderedCode4 ::
    [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
    -> [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement])
                   (y :: [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                        Language.PureScript.Docs.RenderedCode.Types.$fOrdRenderedCodeElement
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True }) -}
c6465803a992222d003f88d65999c3ca
  $fOrdRenderedCode5 ::
    [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
    -> [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement])
                   (y :: [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                        Language.PureScript.Docs.RenderedCode.Types.$fOrdRenderedCodeElement
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False }) -}
400c40e5ca3745a036022446d64d62e3
  $fOrdRenderedCode6 ::
    [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
    -> [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement])
                   (y :: [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                        Language.PureScript.Docs.RenderedCode.Types.$fOrdRenderedCodeElement
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True }) -}
b42091e7ce6fe42ac2fdba7659a8106c
  $fOrdRenderedCode7 ::
    [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
    -> [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
    -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (GHC.Classes.$fOrd[]_$ccompare
                   @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                   Language.PureScript.Docs.RenderedCode.Types.$fOrdRenderedCodeElement) -}
171153e7e2ed40b7058dbb86502105f3
  $fOrdRenderedCodeElement ::
    GHC.Classes.Ord
      Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                  Language.PureScript.Docs.RenderedCode.Types.$fEqRenderedCodeElement
                  Language.PureScript.Docs.RenderedCode.Types.$fOrdRenderedCodeElement_$ccompare
                  Language.PureScript.Docs.RenderedCode.Types.$fOrdRenderedCodeElement_$c<
                  Language.PureScript.Docs.RenderedCode.Types.$fOrdRenderedCodeElement_$c<=
                  Language.PureScript.Docs.RenderedCode.Types.$fOrdRenderedCodeElement_$c>
                  Language.PureScript.Docs.RenderedCode.Types.$fOrdRenderedCodeElement_$c>=
                  Language.PureScript.Docs.RenderedCode.Types.$fOrdRenderedCodeElement_$cmax
                  Language.PureScript.Docs.RenderedCode.Types.$fOrdRenderedCodeElement_$cmin -}
171153e7e2ed40b7058dbb86502105f3
  $fOrdRenderedCodeElement_$c< ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
    -> Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)
                   (y :: Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement) ->
                 case Language.PureScript.Docs.RenderedCode.Types.$fOrdRenderedCodeElement_$ccompare
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True }) -}
171153e7e2ed40b7058dbb86502105f3
  $fOrdRenderedCodeElement_$c<= ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
    -> Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)
                   (y :: Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement) ->
                 case Language.PureScript.Docs.RenderedCode.Types.$fOrdRenderedCodeElement_$ccompare
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False }) -}
171153e7e2ed40b7058dbb86502105f3
  $fOrdRenderedCodeElement_$c> ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
    -> Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)
                   (y :: Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement) ->
                 case Language.PureScript.Docs.RenderedCode.Types.$fOrdRenderedCodeElement_$ccompare
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True }) -}
171153e7e2ed40b7058dbb86502105f3
  $fOrdRenderedCodeElement_$c>= ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
    -> Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)
                   (y :: Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement) ->
                 case Language.PureScript.Docs.RenderedCode.Types.$fOrdRenderedCodeElement_$ccompare
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }) -}
171153e7e2ed40b7058dbb86502105f3
  $fOrdRenderedCodeElement_$ccompare ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
    -> Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
    -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)
                   (b :: Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement) ->
                 case a of wild {
                   Language.PureScript.Docs.RenderedCode.Types.Syntax a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.LT
                        Language.PureScript.Docs.RenderedCode.Types.Syntax b1
                        -> Data.Text.$fOrdText_$ccompare a1 b1 }
                   Language.PureScript.Docs.RenderedCode.Types.Keyword a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.LT
                        Language.PureScript.Docs.RenderedCode.Types.Syntax ds
                        -> GHC.Types.GT
                        Language.PureScript.Docs.RenderedCode.Types.Keyword b1
                        -> Data.Text.$fOrdText_$ccompare a1 b1 }
                   Language.PureScript.Docs.RenderedCode.Types.Space
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Language.PureScript.Docs.RenderedCode.Types.Space -> GHC.Types.EQ
                        Language.PureScript.Docs.RenderedCode.Types.Symbol ds ds1 ds2
                        -> GHC.Types.LT }
                   Language.PureScript.Docs.RenderedCode.Types.Symbol a1 a2 a3
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Language.PureScript.Docs.RenderedCode.Types.Symbol b1 b2 b3
                        -> let {
                             $j :: GHC.Types.Ordering <join 0>
                             = case a2 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                               case b2 of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                               case Data.Text.$w$ccompare ww1 ww2 ww3 ww5 ww6 ww7 of wild2 {
                                 GHC.Types.LT -> GHC.Types.LT
                                 GHC.Types.EQ
                                 -> Language.PureScript.Docs.RenderedCode.Types.$fOrdLink_$ccompare
                                      a3
                                      b3
                                 GHC.Types.GT -> GHC.Types.GT } } }
                           } in
                           case a1 of wild2 {
                             Language.PureScript.Docs.RenderedCode.Types.ValueLevel
                             -> case b1 of wild3 {
                                  Language.PureScript.Docs.RenderedCode.Types.ValueLevel -> $j
                                  Language.PureScript.Docs.RenderedCode.Types.TypeLevel
                                  -> GHC.Types.LT
                                  Language.PureScript.Docs.RenderedCode.Types.KindLevel
                                  -> GHC.Types.LT }
                             Language.PureScript.Docs.RenderedCode.Types.TypeLevel
                             -> case b1 of wild3 {
                                  Language.PureScript.Docs.RenderedCode.Types.ValueLevel
                                  -> GHC.Types.GT
                                  Language.PureScript.Docs.RenderedCode.Types.TypeLevel -> $j
                                  Language.PureScript.Docs.RenderedCode.Types.KindLevel
                                  -> GHC.Types.LT }
                             Language.PureScript.Docs.RenderedCode.Types.KindLevel
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.GT
                                  Language.PureScript.Docs.RenderedCode.Types.KindLevel
                                  -> $j } } } }) -}
171153e7e2ed40b7058dbb86502105f3
  $fOrdRenderedCodeElement_$cmax ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
    -> Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
    -> Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)
                   (y :: Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement) ->
                 case Language.PureScript.Docs.RenderedCode.Types.$fOrdRenderedCodeElement_$ccompare
                        x
                        y of wild {
                   DEFAULT -> y GHC.Types.GT -> x }) -}
171153e7e2ed40b7058dbb86502105f3
  $fOrdRenderedCodeElement_$cmin ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
    -> Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
    -> Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)
                   (y :: Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement) ->
                 case Language.PureScript.Docs.RenderedCode.Types.$fOrdRenderedCodeElement_$ccompare
                        x
                        y of wild {
                   DEFAULT -> x GHC.Types.GT -> y }) -}
4660ea0ffbba09617bc864a10b08d72f
  $fSemigroupRenderedCode ::
    GHC.Base.Semigroup
      Language.PureScript.Docs.RenderedCode.Types.RenderedCode
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Docs.RenderedCode.Types.RenderedCode
                  (GHC.Base.++
                     @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)
                    `cast`
                  (Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])
                   ->_R Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])
                   ->_R Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0]))
                  (GHC.Base.$fSemigroup[]_$csconcat
                     @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)
                    `cast`
                  ((GHC.Base.NonEmpty
                      (Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])))_R
                   ->_R Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0]))
                  Language.PureScript.Docs.RenderedCode.Types.$fSemigroupRenderedCode1
                    `cast`
                  (forall (b :: <*>_N).
                   <GHC.Real.Integral b>_R
                   ->_R <b>_R
                   ->_R Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])
                   ->_R Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])) -}
90db9a079fd77777d22705dd186dcedd
  $fSemigroupRenderedCode1 ::
    GHC.Real.Integral b =>
    b
    -> [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
    -> [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ b ($dIntegral :: GHC.Real.Integral b) ->
                 GHC.Magic.noinline
                   @ (forall b1 a. GHC.Real.Integral b1 => b1 -> [a] -> [a])
                   Data.Semigroup.Internal.stimesList
                   @ b
                   @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                   $dIntegral) -}
7fd78b3d6be6c8453ba17c402b4bd2a1
  $fShowContainingModule ::
    GHC.Show.Show
      Language.PureScript.Docs.RenderedCode.Types.ContainingModule
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Docs.RenderedCode.Types.ContainingModule
                  Language.PureScript.Docs.RenderedCode.Types.$fShowContainingModule_$cshowsPrec
                  Language.PureScript.Docs.RenderedCode.Types.$fShowContainingModule_$cshow
                  Language.PureScript.Docs.RenderedCode.Types.$fShowContainingModule_$cshowList -}
7fd78b3d6be6c8453ba17c402b4bd2a1
  $fShowContainingModule1 ::
    Language.PureScript.Docs.RenderedCode.Types.ContainingModule
    -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (Language.PureScript.Docs.RenderedCode.Types.$fShowContainingModule_$cshowsPrec
                   Language.PureScript.Docs.RenderedCode.Types.asContainingModule15) -}
03405bda7a8588e80a913177a04cae42
  $fShowContainingModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("OtherModule "#) -}
cddfec9ad98754740be38bbade96c824
  $fShowContainingModule3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Docs.RenderedCode.Types.asContainingModule19) -}
7fd78b3d6be6c8453ba17c402b4bd2a1
  $fShowContainingModule_$cshow ::
    Language.PureScript.Docs.RenderedCode.Types.ContainingModule
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: Language.PureScript.Docs.RenderedCode.Types.ContainingModule) ->
                 case x of wild {
                   Language.PureScript.Docs.RenderedCode.Types.ThisModule
                   -> Language.PureScript.Docs.RenderedCode.Types.$fShowContainingModule3
                   Language.PureScript.Docs.RenderedCode.Types.OtherModule b1
                   -> GHC.CString.unpackAppendCString#
                        Language.PureScript.Docs.RenderedCode.Types.$fShowContainingModule2
                        (Language.PureScript.Names.$w$cshowsPrec
                           11#
                           b1
                           (GHC.Types.[] @ GHC.Types.Char)) }) -}
7fd78b3d6be6c8453ba17c402b4bd2a1
  $fShowContainingModule_$cshowList ::
    [Language.PureScript.Docs.RenderedCode.Types.ContainingModule]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Docs.RenderedCode.Types.ContainingModule])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Docs.RenderedCode.Types.ContainingModule
                   Language.PureScript.Docs.RenderedCode.Types.$fShowContainingModule1
                   ls
                   s) -}
7fd78b3d6be6c8453ba17c402b4bd2a1
  $fShowContainingModule_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Docs.RenderedCode.Types.ContainingModule
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ (ds :: GHC.Types.Int)
                   (ds1 :: Language.PureScript.Docs.RenderedCode.Types.ContainingModule)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   Language.PureScript.Docs.RenderedCode.Types.ThisModule
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.Docs.RenderedCode.Types.$fShowContainingModule3
                        eta
                   Language.PureScript.Docs.RenderedCode.Types.OtherModule b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.>=# x 11# of lwild {
                        DEFAULT
                        -> GHC.CString.unpackAppendCString#
                             Language.PureScript.Docs.RenderedCode.Types.$fShowContainingModule2
                             (Language.PureScript.Names.$w$cshowsPrec 11# b1 eta)
                        1#
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.CString.unpackAppendCString#
                                Language.PureScript.Docs.RenderedCode.Types.$fShowContainingModule2
                                (Language.PureScript.Names.$w$cshowsPrec
                                   11#
                                   b1
                                   (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.$fShow(,)2
                                      eta))) } } }) -}
5e36da664b08e623162b4c76cb76fcf5
  $fShowLink ::
    GHC.Show.Show Language.PureScript.Docs.RenderedCode.Types.Link
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Docs.RenderedCode.Types.Link
                  Language.PureScript.Docs.RenderedCode.Types.$fShowLink_$cshowsPrec
                  Language.PureScript.Docs.RenderedCode.Types.$fShowLink_$cshow
                  Language.PureScript.Docs.RenderedCode.Types.$fShowLink_$cshowList -}
5e36da664b08e623162b4c76cb76fcf5
  $fShowLink1 ::
    Language.PureScript.Docs.RenderedCode.Types.Link -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (Language.PureScript.Docs.RenderedCode.Types.$fShowLink_$cshowsPrec
                   Language.PureScript.Docs.RenderedCode.Types.asContainingModule15) -}
ce33c186369a243d3394f61a346be31b
  $fShowLink2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11#) -}
d34688389d65ef92d10d989304d412ea
  $fShowLink3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Docs.RenderedCode.Types.$fShowLink4) -}
0e1c198d2e0af2206cd9644a4a8cde74
  $fShowLink4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Link "#) -}
f51c12bd23cbec1bbd397ba2fd2ecc4d
  $fShowLink5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Docs.RenderedCode.Types.$fFromJSONLink11) -}
b92e7f6543b081c32581618f03036e5b
  $fShowLink6 :: [GHC.Types.Char]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.$fShow(,)2
                   (GHC.Types.[] @ GHC.Types.Char)) -}
5e36da664b08e623162b4c76cb76fcf5
  $fShowLink_$cshow ::
    Language.PureScript.Docs.RenderedCode.Types.Link -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: Language.PureScript.Docs.RenderedCode.Types.Link) ->
                 case x of wild {
                   Language.PureScript.Docs.RenderedCode.Types.NoLink
                   -> Language.PureScript.Docs.RenderedCode.Types.$fShowLink5
                   Language.PureScript.Docs.RenderedCode.Types.Link b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.Docs.RenderedCode.Types.$fShowLink3
                        (case b1 of wild1 {
                           Language.PureScript.Docs.RenderedCode.Types.ThisModule
                           -> Language.PureScript.Docs.RenderedCode.Types.$fShowContainingModule3
                           Language.PureScript.Docs.RenderedCode.Types.OtherModule b2
                           -> GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.$fShow(,)4
                                (GHC.CString.unpackAppendCString#
                                   Language.PureScript.Docs.RenderedCode.Types.$fShowContainingModule2
                                   (Language.PureScript.Names.$w$cshowsPrec
                                      11#
                                      b2
                                      Language.PureScript.Docs.RenderedCode.Types.$fShowLink6)) }) }) -}
5e36da664b08e623162b4c76cb76fcf5
  $fShowLink_$cshowList ::
    [Language.PureScript.Docs.RenderedCode.Types.Link]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Docs.RenderedCode.Types.Link])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Docs.RenderedCode.Types.Link
                   Language.PureScript.Docs.RenderedCode.Types.$fShowLink1
                   ls
                   s) -}
5e36da664b08e623162b4c76cb76fcf5
  $fShowLink_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Docs.RenderedCode.Types.Link
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ (ds :: GHC.Types.Int)
                   (ds1 :: Language.PureScript.Docs.RenderedCode.Types.Link)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   Language.PureScript.Docs.RenderedCode.Types.NoLink
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.Docs.RenderedCode.Types.$fShowLink5
                        eta
                   Language.PureScript.Docs.RenderedCode.Types.Link b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.>=# x 11# of lwild {
                        DEFAULT
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             Language.PureScript.Docs.RenderedCode.Types.$fShowLink3
                             (Language.PureScript.Docs.RenderedCode.Types.$fShowContainingModule_$cshowsPrec
                                Language.PureScript.Docs.RenderedCode.Types.$fShowLink2
                                b1
                                eta)
                        1#
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Language.PureScript.Docs.RenderedCode.Types.$fShowLink3
                                (Language.PureScript.Docs.RenderedCode.Types.$fShowContainingModule_$cshowsPrec
                                   Language.PureScript.Docs.RenderedCode.Types.$fShowLink2
                                   b1
                                   (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.$fShow(,)2
                                      eta))) } } }) -}
0bf68f95cc438605559d4d420b903a78
  $fShowNamespace ::
    GHC.Show.Show Language.PureScript.Docs.RenderedCode.Types.Namespace
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Docs.RenderedCode.Types.Namespace
                  Language.PureScript.Docs.RenderedCode.Types.$fShowNamespace_$cshowsPrec
                  Language.PureScript.Docs.RenderedCode.Types.$fShowNamespace_$cshow
                  Language.PureScript.Docs.RenderedCode.Types.$fShowNamespace_$cshowList -}
5ff28a0c4df9693279268843c7cfb11b
  $fShowNamespace1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Docs.RenderedCode.Types.$fFromJSONNamespace7) -}
99ad0b4ef1c0b8f0ac04ecaf2da4ec7d
  $fShowNamespace2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Docs.RenderedCode.Types.$fFromJSONNamespace9) -}
dbca9fdba50ae0647b4c7e9ee853c8b9
  $fShowNamespace3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Docs.RenderedCode.Types.$fFromJSONNamespace11) -}
0bf68f95cc438605559d4d420b903a78
  $fShowNamespace_$cshow ::
    Language.PureScript.Docs.RenderedCode.Types.Namespace
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Docs.RenderedCode.Types.Namespace) ->
                 case x of wild {
                   Language.PureScript.Docs.RenderedCode.Types.ValueLevel
                   -> Language.PureScript.Docs.RenderedCode.Types.$fShowNamespace3
                   Language.PureScript.Docs.RenderedCode.Types.TypeLevel
                   -> Language.PureScript.Docs.RenderedCode.Types.$fShowNamespace2
                   Language.PureScript.Docs.RenderedCode.Types.KindLevel
                   -> Language.PureScript.Docs.RenderedCode.Types.$fShowNamespace1 }) -}
0bf68f95cc438605559d4d420b903a78
  $fShowNamespace_$cshowList ::
    [Language.PureScript.Docs.RenderedCode.Types.Namespace]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Docs.RenderedCode.Types.Namespace])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Docs.RenderedCode.Types.Namespace
                   Language.PureScript.Docs.RenderedCode.Types.$w$cshowsPrec
                   ls
                   s) -}
0bf68f95cc438605559d4d420b903a78
  $fShowNamespace_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Docs.RenderedCode.Types.Namespace
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: [0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Docs.RenderedCode.Types.Namespace)
                   (w2 :: GHC.Base.String) ->
                 Language.PureScript.Docs.RenderedCode.Types.$w$cshowsPrec w1 w2) -}
4660ea0ffbba09617bc864a10b08d72f
  $fShowRenderedCode ::
    GHC.Show.Show
      Language.PureScript.Docs.RenderedCode.Types.RenderedCode
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Docs.RenderedCode.Types.RenderedCode
                  Language.PureScript.Docs.RenderedCode.Types.$fShowRenderedCode_$cshowsPrec1
                  Language.PureScript.Docs.RenderedCode.Types.$fShowRenderedCode_$cshow
                  Language.PureScript.Docs.RenderedCode.Types.$fShowRenderedCode_$cshowList -}
4660ea0ffbba09617bc864a10b08d72f
  $fShowRenderedCode1 ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCode
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,1*U><L,U>,
     Unfolding: (\ (w :: Language.PureScript.Docs.RenderedCode.Types.RenderedCode)
                   (w1 :: GHC.Base.String) ->
                 Language.PureScript.Docs.RenderedCode.Types.$w$cshowsPrec1
                   0#
                   w
                   w1) -}
ea395744a9cc5d6ac20fcf3fed71efac
  $fShowRenderedCode2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("}"#) -}
cc0caa4f65ef24cc071b1655a1975f9f
  $fShowRenderedCode3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("unRC = "#) -}
ff7a919ab24671962c3d259249434ef1
  $fShowRenderedCode4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("RC {"#) -}
171153e7e2ed40b7058dbb86502105f3
  $fShowRenderedCodeElement ::
    GHC.Show.Show
      Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                  Language.PureScript.Docs.RenderedCode.Types.$fShowRenderedCode_$cshowsPrec
                  Language.PureScript.Docs.RenderedCode.Types.$fShowRenderedCodeElement_$cshow
                  Language.PureScript.Docs.RenderedCode.Types.$fShowRenderedCodeElement_$cshowList -}
171153e7e2ed40b7058dbb86502105f3
  $fShowRenderedCodeElement1 ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
    -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (Language.PureScript.Docs.RenderedCode.Types.$fShowRenderedCode_$cshowsPrec
                   Language.PureScript.Docs.RenderedCode.Types.asContainingModule15) -}
171153e7e2ed40b7058dbb86502105f3
  $fShowRenderedCodeElement_$cshow ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement) ->
                 Language.PureScript.Docs.RenderedCode.Types.$fShowRenderedCode_$cshowsPrec
                   Language.PureScript.Docs.RenderedCode.Types.asContainingModule15
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
171153e7e2ed40b7058dbb86502105f3
  $fShowRenderedCodeElement_$cshowList ::
    [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                   Language.PureScript.Docs.RenderedCode.Types.$fShowRenderedCodeElement1
                   ls
                   s) -}
4660ea0ffbba09617bc864a10b08d72f
  $fShowRenderedCode_$cshow ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCode
    -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Docs.RenderedCode.Types.RenderedCode) ->
                 Language.PureScript.Docs.RenderedCode.Types.$fShowRenderedCode_$cshowsPrec1
                   Language.PureScript.Docs.RenderedCode.Types.asContainingModule15
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
4660ea0ffbba09617bc864a10b08d72f
  $fShowRenderedCode_$cshowList ::
    [Language.PureScript.Docs.RenderedCode.Types.RenderedCode]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Docs.RenderedCode.Types.RenderedCode])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Docs.RenderedCode.Types.RenderedCode
                   Language.PureScript.Docs.RenderedCode.Types.$fShowRenderedCode1
                   ls
                   s) -}
171153e7e2ed40b7058dbb86502105f3
  $fShowRenderedCode_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U> -}
4660ea0ffbba09617bc864a10b08d72f
  $fShowRenderedCode_$cshowsPrec1 ::
    GHC.Types.Int
    -> Language.PureScript.Docs.RenderedCode.Types.RenderedCode
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><L,1*U><L,U>, Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Docs.RenderedCode.Types.RenderedCode)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Language.PureScript.Docs.RenderedCode.Types.$w$cshowsPrec1
                   ww1
                   w1
                   w2 }) -}
7fd78b3d6be6c8453ba17c402b4bd2a1
  $fToJSONContainingModule ::
    Data.Aeson.Types.ToJSON.ToJSON
      Language.PureScript.Docs.RenderedCode.Types.ContainingModule
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Docs.RenderedCode.Types.ContainingModule
                  Language.PureScript.Docs.RenderedCode.Types.$fToJSONContainingModule_$ctoJSON
                  Language.PureScript.Docs.RenderedCode.Types.$fToJSONContainingModule_$ctoEncoding
                  Language.PureScript.Docs.RenderedCode.Types.$fToJSONContainingModule_$ctoJSONList
                  Language.PureScript.Docs.RenderedCode.Types.$fToJSONContainingModule_$ctoEncodingList -}
853f289175c8cd32c047a8afa54f5e7b
  $fToJSONContainingModule1 :: Data.Aeson.Types.Internal.Value
  {- Strictness: m3,
     Unfolding: (Data.Aeson.Types.Internal.String
                   Language.PureScript.Names.runModuleName1) -}
04f994baa18173dff04c9d4c4e1bc7ba
  $fToJSONContainingModule2 :: Data.Aeson.Types.Internal.Value
  {- Unfolding: (case Language.PureScript.Docs.RenderedCode.Types.asContainingModule10 of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 Data.Aeson.Types.Internal.String dt }) -}
a348bae6cc35e0b9416460bb1eab3cf9
  $fToJSONContainingModule3 :: Data.Aeson.Types.Internal.Value
  {- Unfolding: (case Language.PureScript.Docs.RenderedCode.Types.asContainingModule18 of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 Data.Aeson.Types.Internal.String dt }) -}
7fd78b3d6be6c8453ba17c402b4bd2a1
  $fToJSONContainingModule_$ctoEncoding ::
    Language.PureScript.Docs.RenderedCode.Types.ContainingModule
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Strictness: <S,1*U>, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (x :: Language.PureScript.Docs.RenderedCode.Types.ContainingModule) ->
                 Data.Aeson.Encoding.Builder.encodeToBuilder
                   (Language.PureScript.Docs.RenderedCode.Types.$fToJSONContainingModule_$ctoJSON
                      x))
                  `cast`
                (<Language.PureScript.Docs.RenderedCode.Types.ContainingModule>_R
                 ->_R Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                               <Data.Aeson.Types.Internal.Value>_P)) -}
7fd78b3d6be6c8453ba17c402b4bd2a1
  $fToJSONContainingModule_$ctoEncodingList ::
    [Language.PureScript.Docs.RenderedCode.Types.ContainingModule]
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (Data.Aeson.Encoding.Internal.list
                   @ Language.PureScript.Docs.RenderedCode.Types.ContainingModule
                   Language.PureScript.Docs.RenderedCode.Types.$fToJSONContainingModule_$ctoEncoding) -}
7fd78b3d6be6c8453ba17c402b4bd2a1
  $fToJSONContainingModule_$ctoJSON ::
    Language.PureScript.Docs.RenderedCode.Types.ContainingModule
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.PureScript.Docs.RenderedCode.Types.ContainingModule) ->
                 case Language.PureScript.Docs.RenderedCode.Types.$w$ctoJSON
                        w of ww { Unit# ww1 ->
                 Data.Aeson.Types.Internal.Array ww1 }) -}
7fd78b3d6be6c8453ba17c402b4bd2a1
  $fToJSONContainingModule_$ctoJSONList ::
    [Language.PureScript.Docs.RenderedCode.Types.ContainingModule]
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (x :: [Language.PureScript.Docs.RenderedCode.Types.ContainingModule]) ->
                 Data.Aeson.Types.Internal.$WArray
                   (Data.Vector.Generic.new
                      @ Data.Vector.Vector
                      @ Data.Aeson.Types.Internal.Value
                      (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                      (Data.Vector.Generic.New.unstream
                         @ Data.Vector.Vector
                         @ Data.Aeson.Types.Internal.Value
                         (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                         (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                            @ Data.Vector.Fusion.Util.Id
                            @ Data.Aeson.Types.Internal.Value
                            @ Data.Vector.Vector
                            Data.Vector.Fusion.Util.$fMonadId
                            Data.Vector.Fusion.Bundle.Size.Unknown
                            (GHC.Base.build
                               @ Data.Aeson.Types.Internal.Value
                               (\ @ b1
                                  (c :: Data.Aeson.Types.Internal.Value -> b1 -> b1)[OneShot]
                                  (n1 :: b1)[OneShot] ->
                                GHC.Base.foldr
                                  @ Language.PureScript.Docs.RenderedCode.Types.ContainingModule
                                  @ b1
                                  (GHC.Base.mapFB
                                     @ Data.Aeson.Types.Internal.Value
                                     @ b1
                                     @ Language.PureScript.Docs.RenderedCode.Types.ContainingModule
                                     c
                                     Language.PureScript.Docs.RenderedCode.Types.$fToJSONContainingModule_$ctoJSON)
                                  n1
                                  x)))))) -}
76847cfab1be7439cf232766641a0b44
  $fToJSONContainingModule_$s$wfoldlM_loop ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Value
    -> GHC.Prim.Int#
    -> GHC.Prim.MutableArray#
         GHC.Prim.RealWorld Data.Aeson.Types.Internal.Value
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Vector.Vector Data.Aeson.Types.Internal.Value #)
  {- Arity: 7, Strictness: <S,U><L,U><L,U><S,U><S,U><S,U><S,U>,
     Unfolding: (\ (sc :: GHC.Prim.State# GHC.Prim.RealWorld)
                   (sc1 :: Data.Aeson.Types.Internal.Value)
                   (sc2 :: Data.Aeson.Types.Internal.Value)
                   (sc3 :: GHC.Prim.Int#)
                   (sc4 :: GHC.Prim.MutableArray#
                             GHC.Prim.RealWorld Data.Aeson.Types.Internal.Value)
                   (sc5 :: GHC.Prim.Int#)
                   (sc6 :: GHC.Prim.Int#) ->
                 let {
                   y :: GHC.Prim.Int# = GHC.Prim.+# sc3 1#
                 } in
                 case GHC.Prim.<# sc5 y of lwild {
                   DEFAULT
                   -> case GHC.Prim.writeArray#
                             @ (Control.Monad.Primitive.PrimState
                                  (GHC.ST.ST GHC.Prim.RealWorld))
                             @ Data.Aeson.Types.Internal.Value
                             sc4
                               `cast`
                             (GHC.Prim.MutableArray#
                                (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                          <GHC.Prim.RealWorld>_N))
                                <Data.Aeson.Types.Internal.Value>_R)_R
                             (GHC.Prim.+# sc6 sc3)
                             sc1
                             sc
                               `cast`
                             (GHC.Prim.State#
                                (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                          <GHC.Prim.RealWorld>_N)))_R of s'# { DEFAULT ->
                      Language.PureScript.Docs.RenderedCode.Types.$fToJSONContainingModule_$s$wfoldlM_loop1
                        s'#
                          `cast`
                        (GHC.Prim.State#
                           (Control.Monad.Primitive.D:R:PrimStateST[0]
                                <GHC.Prim.RealWorld>_N))_R
                        sc2
                        y
                        sc4
                        sc5
                        sc6 }
                   1#
                   -> case GHC.Prim.<=# sc5 1# of lwild1 {
                        DEFAULT
                        -> let {
                             y2 :: GHC.Prim.Int# = GHC.Prim.-# y sc5
                           } in
                           case GHC.Prim.<=# sc5 y2 of lwild2 {
                             DEFAULT
                             -> let {
                                  n# :: GHC.Prim.Int# = GHC.Prim.+# sc5 sc5
                                } in
                                case GHC.Prim.newArray#
                                       @ Data.Aeson.Types.Internal.Value
                                       @ (Control.Monad.Primitive.PrimState
                                            (GHC.ST.ST GHC.Prim.RealWorld))
                                       n#
                                       (Data.Vector.Mutable.uninitialised
                                          @ Data.Aeson.Types.Internal.Value)
                                       sc
                                         `cast`
                                       (GHC.Prim.State#
                                          (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                    <GHC.Prim.RealWorld>_N)))_R of ds2 { (#,#) ipv ipv1 ->
                                case GHC.Prim.copyMutableArray#
                                       @ (Control.Monad.Primitive.PrimState
                                            (GHC.ST.ST GHC.Prim.RealWorld))
                                       @ Data.Aeson.Types.Internal.Value
                                       sc4
                                         `cast`
                                       (GHC.Prim.MutableArray#
                                          (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                    <GHC.Prim.RealWorld>_N))
                                          <Data.Aeson.Types.Internal.Value>_R)_R
                                       sc6
                                       ipv1
                                       0#
                                       sc5
                                       ipv of s'# { DEFAULT ->
                                case GHC.Prim.writeArray#
                                       @ (Control.Monad.Primitive.PrimState
                                            (GHC.ST.ST GHC.Prim.RealWorld))
                                       @ Data.Aeson.Types.Internal.Value
                                       ipv1
                                       sc3
                                       sc1
                                       s'# of s'#1 { DEFAULT ->
                                Language.PureScript.Docs.RenderedCode.Types.$fToJSONContainingModule_$s$wfoldlM_loop1
                                  s'#1
                                    `cast`
                                  (GHC.Prim.State#
                                     (Control.Monad.Primitive.D:R:PrimStateST[0]
                                          <GHC.Prim.RealWorld>_N))_R
                                  sc2
                                  y
                                  ipv1
                                    `cast`
                                  (GHC.Prim.MutableArray#
                                     (Control.Monad.Primitive.D:R:PrimStateST[0]
                                          <GHC.Prim.RealWorld>_N)
                                     <Data.Aeson.Types.Internal.Value>_R)_R
                                  n#
                                  0# } } }
                             1#
                             -> let {
                                  n# :: GHC.Prim.Int# = GHC.Prim.+# sc5 y2
                                } in
                                case GHC.Prim.newArray#
                                       @ Data.Aeson.Types.Internal.Value
                                       @ (Control.Monad.Primitive.PrimState
                                            (GHC.ST.ST GHC.Prim.RealWorld))
                                       n#
                                       (Data.Vector.Mutable.uninitialised
                                          @ Data.Aeson.Types.Internal.Value)
                                       sc
                                         `cast`
                                       (GHC.Prim.State#
                                          (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                    <GHC.Prim.RealWorld>_N)))_R of ds2 { (#,#) ipv ipv1 ->
                                case GHC.Prim.copyMutableArray#
                                       @ (Control.Monad.Primitive.PrimState
                                            (GHC.ST.ST GHC.Prim.RealWorld))
                                       @ Data.Aeson.Types.Internal.Value
                                       sc4
                                         `cast`
                                       (GHC.Prim.MutableArray#
                                          (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                    <GHC.Prim.RealWorld>_N))
                                          <Data.Aeson.Types.Internal.Value>_R)_R
                                       sc6
                                       ipv1
                                       0#
                                       sc5
                                       ipv of s'# { DEFAULT ->
                                case GHC.Prim.writeArray#
                                       @ (Control.Monad.Primitive.PrimState
                                            (GHC.ST.ST GHC.Prim.RealWorld))
                                       @ Data.Aeson.Types.Internal.Value
                                       ipv1
                                       sc3
                                       sc1
                                       s'# of s'#1 { DEFAULT ->
                                Language.PureScript.Docs.RenderedCode.Types.$fToJSONContainingModule_$s$wfoldlM_loop1
                                  s'#1
                                    `cast`
                                  (GHC.Prim.State#
                                     (Control.Monad.Primitive.D:R:PrimStateST[0]
                                          <GHC.Prim.RealWorld>_N))_R
                                  sc2
                                  y
                                  ipv1
                                    `cast`
                                  (GHC.Prim.MutableArray#
                                     (Control.Monad.Primitive.D:R:PrimStateST[0]
                                          <GHC.Prim.RealWorld>_N)
                                     <Data.Aeson.Types.Internal.Value>_R)_R
                                  n#
                                  0# } } } }
                        1#
                        -> let {
                             y2 :: GHC.Prim.Int# = GHC.Prim.-# y sc5
                           } in
                           case GHC.Prim.<=# 1# y2 of lwild2 {
                             DEFAULT
                             -> let {
                                  n# :: GHC.Prim.Int# = GHC.Prim.+# sc5 1#
                                } in
                                case GHC.Prim.newArray#
                                       @ Data.Aeson.Types.Internal.Value
                                       @ (Control.Monad.Primitive.PrimState
                                            (GHC.ST.ST GHC.Prim.RealWorld))
                                       n#
                                       (Data.Vector.Mutable.uninitialised
                                          @ Data.Aeson.Types.Internal.Value)
                                       sc
                                         `cast`
                                       (GHC.Prim.State#
                                          (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                    <GHC.Prim.RealWorld>_N)))_R of ds2 { (#,#) ipv ipv1 ->
                                case GHC.Prim.copyMutableArray#
                                       @ (Control.Monad.Primitive.PrimState
                                            (GHC.ST.ST GHC.Prim.RealWorld))
                                       @ Data.Aeson.Types.Internal.Value
                                       sc4
                                         `cast`
                                       (GHC.Prim.MutableArray#
                                          (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                    <GHC.Prim.RealWorld>_N))
                                          <Data.Aeson.Types.Internal.Value>_R)_R
                                       sc6
                                       ipv1
                                       0#
                                       sc5
                                       ipv of s'# { DEFAULT ->
                                case GHC.Prim.writeArray#
                                       @ (Control.Monad.Primitive.PrimState
                                            (GHC.ST.ST GHC.Prim.RealWorld))
                                       @ Data.Aeson.Types.Internal.Value
                                       ipv1
                                       sc3
                                       sc1
                                       s'# of s'#1 { DEFAULT ->
                                Language.PureScript.Docs.RenderedCode.Types.$fToJSONContainingModule_$s$wfoldlM_loop1
                                  s'#1
                                    `cast`
                                  (GHC.Prim.State#
                                     (Control.Monad.Primitive.D:R:PrimStateST[0]
                                          <GHC.Prim.RealWorld>_N))_R
                                  sc2
                                  y
                                  ipv1
                                    `cast`
                                  (GHC.Prim.MutableArray#
                                     (Control.Monad.Primitive.D:R:PrimStateST[0]
                                          <GHC.Prim.RealWorld>_N)
                                     <Data.Aeson.Types.Internal.Value>_R)_R
                                  n#
                                  0# } } }
                             1#
                             -> let {
                                  n# :: GHC.Prim.Int# = GHC.Prim.+# sc5 y2
                                } in
                                case GHC.Prim.newArray#
                                       @ Data.Aeson.Types.Internal.Value
                                       @ (Control.Monad.Primitive.PrimState
                                            (GHC.ST.ST GHC.Prim.RealWorld))
                                       n#
                                       (Data.Vector.Mutable.uninitialised
                                          @ Data.Aeson.Types.Internal.Value)
                                       sc
                                         `cast`
                                       (GHC.Prim.State#
                                          (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                    <GHC.Prim.RealWorld>_N)))_R of ds2 { (#,#) ipv ipv1 ->
                                case GHC.Prim.copyMutableArray#
                                       @ (Control.Monad.Primitive.PrimState
                                            (GHC.ST.ST GHC.Prim.RealWorld))
                                       @ Data.Aeson.Types.Internal.Value
                                       sc4
                                         `cast`
                                       (GHC.Prim.MutableArray#
                                          (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                    <GHC.Prim.RealWorld>_N))
                                          <Data.Aeson.Types.Internal.Value>_R)_R
                                       sc6
                                       ipv1
                                       0#
                                       sc5
                                       ipv of s'# { DEFAULT ->
                                case GHC.Prim.writeArray#
                                       @ (Control.Monad.Primitive.PrimState
                                            (GHC.ST.ST GHC.Prim.RealWorld))
                                       @ Data.Aeson.Types.Internal.Value
                                       ipv1
                                       sc3
                                       sc1
                                       s'# of s'#1 { DEFAULT ->
                                Language.PureScript.Docs.RenderedCode.Types.$fToJSONContainingModule_$s$wfoldlM_loop1
                                  s'#1
                                    `cast`
                                  (GHC.Prim.State#
                                     (Control.Monad.Primitive.D:R:PrimStateST[0]
                                          <GHC.Prim.RealWorld>_N))_R
                                  sc2
                                  y
                                  ipv1
                                    `cast`
                                  (GHC.Prim.MutableArray#
                                     (Control.Monad.Primitive.D:R:PrimStateST[0]
                                          <GHC.Prim.RealWorld>_N)
                                     <Data.Aeson.Types.Internal.Value>_R)_R
                                  n#
                                  0# } } } } } }) -}
b573a82b94d09d19a40c671598265fab
  $fToJSONContainingModule_$s$wfoldlM_loop1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> Data.Aeson.Types.Internal.Value
    -> GHC.Prim.Int#
    -> GHC.Prim.MutableArray#
         GHC.Prim.RealWorld Data.Aeson.Types.Internal.Value
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Vector.Vector Data.Aeson.Types.Internal.Value #)
  {- Arity: 6, Strictness: <S,U><L,U><S,U><S,U><S,U><S,U>,
     Unfolding: (\ (sc :: GHC.Prim.State# GHC.Prim.RealWorld)
                   (sc1 :: Data.Aeson.Types.Internal.Value)
                   (sc2 :: GHC.Prim.Int#)
                   (sc3 :: GHC.Prim.MutableArray#
                             GHC.Prim.RealWorld Data.Aeson.Types.Internal.Value)
                   (sc4 :: GHC.Prim.Int#)
                   (sc5 :: GHC.Prim.Int#) ->
                 let {
                   y :: GHC.Prim.Int# = GHC.Prim.+# sc2 1#
                 } in
                 case GHC.Prim.<# sc4 y of lwild {
                   DEFAULT
                   -> case GHC.Prim.writeArray#
                             @ (Control.Monad.Primitive.PrimState
                                  (GHC.ST.ST GHC.Prim.RealWorld))
                             @ Data.Aeson.Types.Internal.Value
                             sc3
                               `cast`
                             (GHC.Prim.MutableArray#
                                (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                          <GHC.Prim.RealWorld>_N))
                                <Data.Aeson.Types.Internal.Value>_R)_R
                             (GHC.Prim.+# sc5 sc2)
                             sc1
                             sc
                               `cast`
                             (GHC.Prim.State#
                                (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                          <GHC.Prim.RealWorld>_N)))_R of s'# { DEFAULT ->
                      case GHC.Prim.unsafeFreezeArray#
                             @ (Control.Monad.Primitive.PrimState
                                  (GHC.ST.ST GHC.Prim.RealWorld))
                             @ Data.Aeson.Types.Internal.Value
                             sc3
                               `cast`
                             (GHC.Prim.MutableArray#
                                (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                          <GHC.Prim.RealWorld>_N))
                                <Data.Aeson.Types.Internal.Value>_R)_R
                             s'# of ds2 { (#,#) ipv ipv1 ->
                      (# ipv
                           `cast`
                         (GHC.Prim.State#
                            (Control.Monad.Primitive.D:R:PrimStateST[0]
                                 <GHC.Prim.RealWorld>_N))_R,
                         Data.Vector.Vector
                           @ Data.Aeson.Types.Internal.Value
                           sc5
                           y
                           ipv1 #) } }
                   1#
                   -> case GHC.Prim.<=# sc4 1# of lwild1 {
                        DEFAULT
                        -> let {
                             y2 :: GHC.Prim.Int# = GHC.Prim.-# y sc4
                           } in
                           case GHC.Prim.<=# sc4 y2 of lwild2 {
                             DEFAULT
                             -> case GHC.Prim.newArray#
                                       @ Data.Aeson.Types.Internal.Value
                                       @ (Control.Monad.Primitive.PrimState
                                            (GHC.ST.ST GHC.Prim.RealWorld))
                                       (GHC.Prim.+# sc4 sc4)
                                       (Data.Vector.Mutable.uninitialised
                                          @ Data.Aeson.Types.Internal.Value)
                                       sc
                                         `cast`
                                       (GHC.Prim.State#
                                          (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                    <GHC.Prim.RealWorld>_N)))_R of ds2 { (#,#) ipv ipv1 ->
                                case GHC.Prim.copyMutableArray#
                                       @ (Control.Monad.Primitive.PrimState
                                            (GHC.ST.ST GHC.Prim.RealWorld))
                                       @ Data.Aeson.Types.Internal.Value
                                       sc3
                                         `cast`
                                       (GHC.Prim.MutableArray#
                                          (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                    <GHC.Prim.RealWorld>_N))
                                          <Data.Aeson.Types.Internal.Value>_R)_R
                                       sc5
                                       ipv1
                                       0#
                                       sc4
                                       ipv of s'# { DEFAULT ->
                                case GHC.Prim.writeArray#
                                       @ (Control.Monad.Primitive.PrimState
                                            (GHC.ST.ST GHC.Prim.RealWorld))
                                       @ Data.Aeson.Types.Internal.Value
                                       ipv1
                                       sc2
                                       sc1
                                       s'# of s'#1 { DEFAULT ->
                                case GHC.Prim.unsafeFreezeArray#
                                       @ (Control.Monad.Primitive.PrimState
                                            (GHC.ST.ST GHC.Prim.RealWorld))
                                       @ Data.Aeson.Types.Internal.Value
                                       ipv1
                                       s'#1 of ds1 { (#,#) ipv2 ipv3 ->
                                (# ipv2
                                     `cast`
                                   (GHC.Prim.State#
                                      (Control.Monad.Primitive.D:R:PrimStateST[0]
                                           <GHC.Prim.RealWorld>_N))_R,
                                   Data.Vector.Vector
                                     @ Data.Aeson.Types.Internal.Value
                                     0#
                                     y
                                     ipv3 #) } } } }
                             1#
                             -> case GHC.Prim.newArray#
                                       @ Data.Aeson.Types.Internal.Value
                                       @ (Control.Monad.Primitive.PrimState
                                            (GHC.ST.ST GHC.Prim.RealWorld))
                                       (GHC.Prim.+# sc4 y2)
                                       (Data.Vector.Mutable.uninitialised
                                          @ Data.Aeson.Types.Internal.Value)
                                       sc
                                         `cast`
                                       (GHC.Prim.State#
                                          (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                    <GHC.Prim.RealWorld>_N)))_R of ds2 { (#,#) ipv ipv1 ->
                                case GHC.Prim.copyMutableArray#
                                       @ (Control.Monad.Primitive.PrimState
                                            (GHC.ST.ST GHC.Prim.RealWorld))
                                       @ Data.Aeson.Types.Internal.Value
                                       sc3
                                         `cast`
                                       (GHC.Prim.MutableArray#
                                          (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                    <GHC.Prim.RealWorld>_N))
                                          <Data.Aeson.Types.Internal.Value>_R)_R
                                       sc5
                                       ipv1
                                       0#
                                       sc4
                                       ipv of s'# { DEFAULT ->
                                case GHC.Prim.writeArray#
                                       @ (Control.Monad.Primitive.PrimState
                                            (GHC.ST.ST GHC.Prim.RealWorld))
                                       @ Data.Aeson.Types.Internal.Value
                                       ipv1
                                       sc2
                                       sc1
                                       s'# of s'#1 { DEFAULT ->
                                case GHC.Prim.unsafeFreezeArray#
                                       @ (Control.Monad.Primitive.PrimState
                                            (GHC.ST.ST GHC.Prim.RealWorld))
                                       @ Data.Aeson.Types.Internal.Value
                                       ipv1
                                       s'#1 of ds1 { (#,#) ipv2 ipv3 ->
                                (# ipv2
                                     `cast`
                                   (GHC.Prim.State#
                                      (Control.Monad.Primitive.D:R:PrimStateST[0]
                                           <GHC.Prim.RealWorld>_N))_R,
                                   Data.Vector.Vector
                                     @ Data.Aeson.Types.Internal.Value
                                     0#
                                     y
                                     ipv3 #) } } } } }
                        1#
                        -> let {
                             y2 :: GHC.Prim.Int# = GHC.Prim.-# y sc4
                           } in
                           case GHC.Prim.<=# 1# y2 of lwild2 {
                             DEFAULT
                             -> case GHC.Prim.newArray#
                                       @ Data.Aeson.Types.Internal.Value
                                       @ (Control.Monad.Primitive.PrimState
                                            (GHC.ST.ST GHC.Prim.RealWorld))
                                       (GHC.Prim.+# sc4 1#)
                                       (Data.Vector.Mutable.uninitialised
                                          @ Data.Aeson.Types.Internal.Value)
                                       sc
                                         `cast`
                                       (GHC.Prim.State#
                                          (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                    <GHC.Prim.RealWorld>_N)))_R of ds2 { (#,#) ipv ipv1 ->
                                case GHC.Prim.copyMutableArray#
                                       @ (Control.Monad.Primitive.PrimState
                                            (GHC.ST.ST GHC.Prim.RealWorld))
                                       @ Data.Aeson.Types.Internal.Value
                                       sc3
                                         `cast`
                                       (GHC.Prim.MutableArray#
                                          (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                    <GHC.Prim.RealWorld>_N))
                                          <Data.Aeson.Types.Internal.Value>_R)_R
                                       sc5
                                       ipv1
                                       0#
                                       sc4
                                       ipv of s'# { DEFAULT ->
                                case GHC.Prim.writeArray#
                                       @ (Control.Monad.Primitive.PrimState
                                            (GHC.ST.ST GHC.Prim.RealWorld))
                                       @ Data.Aeson.Types.Internal.Value
                                       ipv1
                                       sc2
                                       sc1
                                       s'# of s'#1 { DEFAULT ->
                                case GHC.Prim.unsafeFreezeArray#
                                       @ (Control.Monad.Primitive.PrimState
                                            (GHC.ST.ST GHC.Prim.RealWorld))
                                       @ Data.Aeson.Types.Internal.Value
                                       ipv1
                                       s'#1 of ds1 { (#,#) ipv2 ipv3 ->
                                (# ipv2
                                     `cast`
                                   (GHC.Prim.State#
                                      (Control.Monad.Primitive.D:R:PrimStateST[0]
                                           <GHC.Prim.RealWorld>_N))_R,
                                   Data.Vector.Vector
                                     @ Data.Aeson.Types.Internal.Value
                                     0#
                                     y
                                     ipv3 #) } } } }
                             1#
                             -> case GHC.Prim.newArray#
                                       @ Data.Aeson.Types.Internal.Value
                                       @ (Control.Monad.Primitive.PrimState
                                            (GHC.ST.ST GHC.Prim.RealWorld))
                                       (GHC.Prim.+# sc4 y2)
                                       (Data.Vector.Mutable.uninitialised
                                          @ Data.Aeson.Types.Internal.Value)
                                       sc
                                         `cast`
                                       (GHC.Prim.State#
                                          (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                    <GHC.Prim.RealWorld>_N)))_R of ds2 { (#,#) ipv ipv1 ->
                                case GHC.Prim.copyMutableArray#
                                       @ (Control.Monad.Primitive.PrimState
                                            (GHC.ST.ST GHC.Prim.RealWorld))
                                       @ Data.Aeson.Types.Internal.Value
                                       sc3
                                         `cast`
                                       (GHC.Prim.MutableArray#
                                          (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                    <GHC.Prim.RealWorld>_N))
                                          <Data.Aeson.Types.Internal.Value>_R)_R
                                       sc5
                                       ipv1
                                       0#
                                       sc4
                                       ipv of s'# { DEFAULT ->
                                case GHC.Prim.writeArray#
                                       @ (Control.Monad.Primitive.PrimState
                                            (GHC.ST.ST GHC.Prim.RealWorld))
                                       @ Data.Aeson.Types.Internal.Value
                                       ipv1
                                       sc2
                                       sc1
                                       s'# of s'#1 { DEFAULT ->
                                case GHC.Prim.unsafeFreezeArray#
                                       @ (Control.Monad.Primitive.PrimState
                                            (GHC.ST.ST GHC.Prim.RealWorld))
                                       @ Data.Aeson.Types.Internal.Value
                                       ipv1
                                       s'#1 of ds1 { (#,#) ipv2 ipv3 ->
                                (# ipv2
                                     `cast`
                                   (GHC.Prim.State#
                                      (Control.Monad.Primitive.D:R:PrimStateST[0]
                                           <GHC.Prim.RealWorld>_N))_R,
                                   Data.Vector.Vector
                                     @ Data.Aeson.Types.Internal.Value
                                     0#
                                     y
                                     ipv3 #) } } } } } } }) -}
5e36da664b08e623162b4c76cb76fcf5
  $fToJSONLink ::
    Data.Aeson.Types.ToJSON.ToJSON
      Language.PureScript.Docs.RenderedCode.Types.Link
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Docs.RenderedCode.Types.Link
                  Language.PureScript.Docs.RenderedCode.Types.$fToJSONLink_$ctoJSON
                  Language.PureScript.Docs.RenderedCode.Types.$fToJSONLink_$ctoEncoding
                  Language.PureScript.Docs.RenderedCode.Types.$fToJSONLink_$ctoJSONList
                  Language.PureScript.Docs.RenderedCode.Types.$fToJSONLink_$ctoEncodingList -}
484d154827587abecd0dc78a15f90faf
  $fToJSONLink1 :: Data.Aeson.Types.Internal.Value
  {- Unfolding: (case Data.Text.Show.unpackCString#
                        Language.PureScript.Docs.RenderedCode.Types.$fFromJSONLink6 of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 Data.Aeson.Types.Internal.String dt }) -}
ce40891dc1f9465186a89879cd5f1747
  $fToJSONLink2 :: Data.Aeson.Types.Internal.Value
  {- Unfolding: (case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                             Data.Vector.Vector Data.Aeson.Types.Internal.Value #)
                        Language.PureScript.Docs.RenderedCode.Types.$fToJSONLink3 of ds1 { (#,#) ipv1 ipv2 ->
                 case ipv2 of dt { Data.Vector.Vector ipv ipv4 ipv5 ->
                 Data.Aeson.Types.Internal.Array dt } }) -}
a748bcff17731439d29dea99d7ba434e
  $fToJSONLink3 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Vector.Vector Data.Aeson.Types.Internal.Value #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newArray#
                        @ Data.Aeson.Types.Internal.Value
                        @ (Control.Monad.Primitive.PrimState
                             (GHC.ST.ST GHC.Prim.RealWorld))
                        0#
                        (Data.Vector.Mutable.uninitialised
                           @ Data.Aeson.Types.Internal.Value)
                        s1
                          `cast`
                        (GHC.Prim.State#
                           (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                     <GHC.Prim.RealWorld>_N)))_R of ds2 { (#,#) ipv ipv1 ->
                 Language.PureScript.Docs.RenderedCode.Types.$fToJSONContainingModule_$s$wfoldlM_loop1
                   ipv
                     `cast`
                   (GHC.Prim.State#
                      (Control.Monad.Primitive.D:R:PrimStateST[0]
                           <GHC.Prim.RealWorld>_N))_R
                   Language.PureScript.Docs.RenderedCode.Types.$fToJSONLink4
                   0#
                   ipv1
                     `cast`
                   (GHC.Prim.MutableArray#
                      (Control.Monad.Primitive.D:R:PrimStateST[0] <GHC.Prim.RealWorld>_N)
                      <Data.Aeson.Types.Internal.Value>_R)_R
                   0#
                   0# }) -}
d1fcc87544057651aad60b19c13d2e58
  $fToJSONLink4 :: Data.Aeson.Types.Internal.Value
  {- Unfolding: (case Data.Text.Show.unpackCString#
                        Language.PureScript.Docs.RenderedCode.Types.$fFromJSONLink11 of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 Data.Aeson.Types.Internal.String dt }) -}
5e36da664b08e623162b4c76cb76fcf5
  $fToJSONLink_$ctoEncoding ::
    Language.PureScript.Docs.RenderedCode.Types.Link
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Strictness: <S,1*U>, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (x :: Language.PureScript.Docs.RenderedCode.Types.Link) ->
                 Data.Aeson.Encoding.Builder.encodeToBuilder
                   (Language.PureScript.Docs.RenderedCode.Types.$fToJSONLink_$ctoJSON
                      x))
                  `cast`
                (<Language.PureScript.Docs.RenderedCode.Types.Link>_R
                 ->_R Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                               <Data.Aeson.Types.Internal.Value>_P)) -}
5e36da664b08e623162b4c76cb76fcf5
  $fToJSONLink_$ctoEncodingList ::
    [Language.PureScript.Docs.RenderedCode.Types.Link]
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (Data.Aeson.Encoding.Internal.list
                   @ Language.PureScript.Docs.RenderedCode.Types.Link
                   Language.PureScript.Docs.RenderedCode.Types.$fToJSONLink_$ctoEncoding) -}
5e36da664b08e623162b4c76cb76fcf5
  $fToJSONLink_$ctoJSON ::
    Language.PureScript.Docs.RenderedCode.Types.Link
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Language.PureScript.Docs.RenderedCode.Types.Link) ->
                 case ds of wild {
                   Language.PureScript.Docs.RenderedCode.Types.NoLink
                   -> Language.PureScript.Docs.RenderedCode.Types.$fToJSONLink2
                   Language.PureScript.Docs.RenderedCode.Types.Link mn
                   -> case GHC.Magic.runRW#
                             @ ('GHC.Types.TupleRep
                                  '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                             @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                  Data.Vector.Vector Data.Aeson.Types.Internal.Value #)
                             (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                              case GHC.Prim.newArray#
                                     @ Data.Aeson.Types.Internal.Value
                                     @ (Control.Monad.Primitive.PrimState
                                          (GHC.ST.ST GHC.Prim.RealWorld))
                                     0#
                                     (Data.Vector.Mutable.uninitialised
                                        @ Data.Aeson.Types.Internal.Value)
                                     s1
                                       `cast`
                                     (GHC.Prim.State#
                                        (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                  <GHC.Prim.RealWorld>_N)))_R of ds2 { (#,#) ipv ipv1 ->
                              Language.PureScript.Docs.RenderedCode.Types.$fToJSONContainingModule_$s$wfoldlM_loop
                                ipv
                                  `cast`
                                (GHC.Prim.State#
                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                        <GHC.Prim.RealWorld>_N))_R
                                Language.PureScript.Docs.RenderedCode.Types.$fToJSONLink1
                                (case Language.PureScript.Docs.RenderedCode.Types.$w$ctoJSON
                                        mn of ww { Unit# ww1 ->
                                 Data.Aeson.Types.Internal.Array ww1 })
                                0#
                                ipv1
                                  `cast`
                                (GHC.Prim.MutableArray#
                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                        <GHC.Prim.RealWorld>_N)
                                   <Data.Aeson.Types.Internal.Value>_R)_R
                                0#
                                0# }) of ds1 { (#,#) ipv1 ipv2 ->
                      case ipv2 of dt { Data.Vector.Vector ipv ipv4 ipv5 ->
                      Data.Aeson.Types.Internal.Array dt } } }) -}
5e36da664b08e623162b4c76cb76fcf5
  $fToJSONLink_$ctoJSONList ::
    [Language.PureScript.Docs.RenderedCode.Types.Link]
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (x :: [Language.PureScript.Docs.RenderedCode.Types.Link]) ->
                 Data.Aeson.Types.Internal.$WArray
                   (Data.Vector.Generic.new
                      @ Data.Vector.Vector
                      @ Data.Aeson.Types.Internal.Value
                      (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                      (Data.Vector.Generic.New.unstream
                         @ Data.Vector.Vector
                         @ Data.Aeson.Types.Internal.Value
                         (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                         (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                            @ Data.Vector.Fusion.Util.Id
                            @ Data.Aeson.Types.Internal.Value
                            @ Data.Vector.Vector
                            Data.Vector.Fusion.Util.$fMonadId
                            Data.Vector.Fusion.Bundle.Size.Unknown
                            (GHC.Base.build
                               @ Data.Aeson.Types.Internal.Value
                               (\ @ b1
                                  (c :: Data.Aeson.Types.Internal.Value -> b1 -> b1)[OneShot]
                                  (n1 :: b1)[OneShot] ->
                                GHC.Base.foldr
                                  @ Language.PureScript.Docs.RenderedCode.Types.Link
                                  @ b1
                                  (GHC.Base.mapFB
                                     @ Data.Aeson.Types.Internal.Value
                                     @ b1
                                     @ Language.PureScript.Docs.RenderedCode.Types.Link
                                     c
                                     Language.PureScript.Docs.RenderedCode.Types.$fToJSONLink_$ctoJSON)
                                  n1
                                  x)))))) -}
0bf68f95cc438605559d4d420b903a78
  $fToJSONNamespace ::
    Data.Aeson.Types.ToJSON.ToJSON
      Language.PureScript.Docs.RenderedCode.Types.Namespace
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Docs.RenderedCode.Types.Namespace
                  Language.PureScript.Docs.RenderedCode.Types.$fToJSONNamespace_$ctoJSON
                  Language.PureScript.Docs.RenderedCode.Types.$fToJSONNamespace_$ctoEncoding
                  Language.PureScript.Docs.RenderedCode.Types.$fToJSONNamespace_$ctoJSONList
                  Language.PureScript.Docs.RenderedCode.Types.$fToJSONNamespace_$ctoEncodingList -}
0bf68f95cc438605559d4d420b903a78
  $fToJSONNamespace_$ctoEncoding ::
    Language.PureScript.Docs.RenderedCode.Types.Namespace
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Strictness: <S,1*U>, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (x :: Language.PureScript.Docs.RenderedCode.Types.Namespace) ->
                 case x of wild {
                   Language.PureScript.Docs.RenderedCode.Types.ValueLevel
                   -> case Data.Text.pack
                             Language.PureScript.Docs.RenderedCode.Types.$fShowNamespace3 of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                      Data.Aeson.Encoding.Builder.encodeToBuilder
                        (Data.Aeson.Types.Internal.String dt) }
                   Language.PureScript.Docs.RenderedCode.Types.TypeLevel
                   -> case Data.Text.pack
                             Language.PureScript.Docs.RenderedCode.Types.$fShowNamespace2 of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                      Data.Aeson.Encoding.Builder.encodeToBuilder
                        (Data.Aeson.Types.Internal.String dt) }
                   Language.PureScript.Docs.RenderedCode.Types.KindLevel
                   -> case Data.Text.pack
                             Language.PureScript.Docs.RenderedCode.Types.$fShowNamespace1 of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                      Data.Aeson.Encoding.Builder.encodeToBuilder
                        (Data.Aeson.Types.Internal.String dt) } })
                  `cast`
                (<Language.PureScript.Docs.RenderedCode.Types.Namespace>_R
                 ->_R Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                               <Data.Aeson.Types.Internal.Value>_P)) -}
0bf68f95cc438605559d4d420b903a78
  $fToJSONNamespace_$ctoEncodingList ::
    [Language.PureScript.Docs.RenderedCode.Types.Namespace]
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (Data.Aeson.Encoding.Internal.list
                   @ Language.PureScript.Docs.RenderedCode.Types.Namespace
                   Language.PureScript.Docs.RenderedCode.Types.$fToJSONNamespace_$ctoEncoding) -}
0bf68f95cc438605559d4d420b903a78
  $fToJSONNamespace_$ctoJSON ::
    Language.PureScript.Docs.RenderedCode.Types.Namespace
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>m3, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.PureScript.Docs.RenderedCode.Types.Namespace) ->
                 case w of wild {
                   Language.PureScript.Docs.RenderedCode.Types.ValueLevel
                   -> case Data.Text.Show.unpackCString#
                             Language.PureScript.Docs.RenderedCode.Types.$fFromJSONNamespace11 of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                      Data.Aeson.Types.Internal.String dt }
                   Language.PureScript.Docs.RenderedCode.Types.TypeLevel
                   -> case Data.Text.Show.unpackCString#
                             Language.PureScript.Docs.RenderedCode.Types.$fFromJSONNamespace9 of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                      Data.Aeson.Types.Internal.String dt }
                   Language.PureScript.Docs.RenderedCode.Types.KindLevel
                   -> case Data.Text.Show.unpackCString#
                             Language.PureScript.Docs.RenderedCode.Types.$fFromJSONNamespace7 of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                      Data.Aeson.Types.Internal.String dt } }) -}
0bf68f95cc438605559d4d420b903a78
  $fToJSONNamespace_$ctoJSONList ::
    [Language.PureScript.Docs.RenderedCode.Types.Namespace]
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (x :: [Language.PureScript.Docs.RenderedCode.Types.Namespace]) ->
                 Data.Aeson.Types.Internal.$WArray
                   (Data.Vector.Generic.new
                      @ Data.Vector.Vector
                      @ Data.Aeson.Types.Internal.Value
                      (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                      (Data.Vector.Generic.New.unstream
                         @ Data.Vector.Vector
                         @ Data.Aeson.Types.Internal.Value
                         (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                         (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                            @ Data.Vector.Fusion.Util.Id
                            @ Data.Aeson.Types.Internal.Value
                            @ Data.Vector.Vector
                            Data.Vector.Fusion.Util.$fMonadId
                            Data.Vector.Fusion.Bundle.Size.Unknown
                            (GHC.Base.build
                               @ Data.Aeson.Types.Internal.Value
                               (\ @ b1
                                  (c :: Data.Aeson.Types.Internal.Value -> b1 -> b1)[OneShot]
                                  (n1 :: b1)[OneShot] ->
                                GHC.Base.foldr
                                  @ Language.PureScript.Docs.RenderedCode.Types.Namespace
                                  @ b1
                                  (GHC.Base.mapFB
                                     @ Data.Aeson.Types.Internal.Value
                                     @ b1
                                     @ Language.PureScript.Docs.RenderedCode.Types.Namespace
                                     c
                                     Language.PureScript.Docs.RenderedCode.Types.$fToJSONNamespace_$ctoJSON)
                                  n1
                                  x)))))) -}
4660ea0ffbba09617bc864a10b08d72f
  $fToJSONRenderedCode ::
    Data.Aeson.Types.ToJSON.ToJSON
      Language.PureScript.Docs.RenderedCode.Types.RenderedCode
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Docs.RenderedCode.Types.RenderedCode
                  Language.PureScript.Docs.RenderedCode.Types.$fToJSONRenderedCode_$ctoJSON1
                  Language.PureScript.Docs.RenderedCode.Types.$fToJSONRenderedCode_$ctoEncoding
                  Language.PureScript.Docs.RenderedCode.Types.$fToJSONRenderedCode_$ctoJSONList
                  Language.PureScript.Docs.RenderedCode.Types.$fToJSONRenderedCode_$ctoEncodingList -}
e7e462a028f02331f5c9d47766d13a2f
  $fToJSONRenderedCode1 :: Data.Aeson.Types.Internal.Value
  {- Unfolding: (case Data.Text.Show.unpackCString#
                        Language.PureScript.Docs.RenderedCode.Types.$fToJSONRenderedCode2 of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 Data.Aeson.Types.Internal.String dt }) -}
82ec53265c67464fba63a4f621d7e653
  $fToJSONRenderedCode10 :: Data.Aeson.Types.Internal.Value
  {- Unfolding: (case Language.PureScript.Docs.RenderedCode.Types.$fToJSONRenderedCode11 of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 Data.Aeson.Types.Internal.String dt }) -}
7be2dfb266d0d6a6f246859f974f5ce9
  $fToJSONRenderedCode11 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Docs.RenderedCode.Types.$fToJSONRenderedCode12) -}
c398acd9042f0a727c3449d2c37b7b1a
  $fToJSONRenderedCode12 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("syntax"#) -}
d09f13499b6a37de200d94450f9fd303
  $fToJSONRenderedCode2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("symbol"#) -}
24d4b61a2f65ed7b816005dc5153bd1b
  $fToJSONRenderedCode3 :: Data.Aeson.Types.Internal.Value
  {- Unfolding: (case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                             Data.Vector.Vector Data.Aeson.Types.Internal.Value #)
                        Language.PureScript.Docs.RenderedCode.Types.$fToJSONRenderedCode4 of ds1 { (#,#) ipv1 ipv2 ->
                 case ipv2 of dt { Data.Vector.Vector ipv ipv4 ipv5 ->
                 Data.Aeson.Types.Internal.Array dt } }) -}
19749d157151de9f337b42726da361b0
  $fToJSONRenderedCode4 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Vector.Vector Data.Aeson.Types.Internal.Value #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newArray#
                        @ Data.Aeson.Types.Internal.Value
                        @ (Control.Monad.Primitive.PrimState
                             (GHC.ST.ST GHC.Prim.RealWorld))
                        0#
                        (Data.Vector.Mutable.uninitialised
                           @ Data.Aeson.Types.Internal.Value)
                        s1
                          `cast`
                        (GHC.Prim.State#
                           (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                     <GHC.Prim.RealWorld>_N)))_R of ds2 { (#,#) ipv ipv1 ->
                 Language.PureScript.Docs.RenderedCode.Types.$fToJSONContainingModule_$s$wfoldlM_loop1
                   ipv
                     `cast`
                   (GHC.Prim.State#
                      (Control.Monad.Primitive.D:R:PrimStateST[0]
                           <GHC.Prim.RealWorld>_N))_R
                   Language.PureScript.Docs.RenderedCode.Types.$fToJSONRenderedCode5
                   0#
                   ipv1
                     `cast`
                   (GHC.Prim.MutableArray#
                      (Control.Monad.Primitive.D:R:PrimStateST[0] <GHC.Prim.RealWorld>_N)
                      <Data.Aeson.Types.Internal.Value>_R)_R
                   0#
                   0# }) -}
bcfc568edbe60a25807cad5332afe059
  $fToJSONRenderedCode5 :: Data.Aeson.Types.Internal.Value
  {- Unfolding: (case Data.Text.Show.unpackCString#
                        Language.PureScript.Docs.RenderedCode.Types.$fToJSONRenderedCode6 of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 Data.Aeson.Types.Internal.String dt }) -}
fb3df758ba75eed7ef9dec1032c2a6f2
  $fToJSONRenderedCode6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("space"#) -}
ac6982db4e69f5ef7dcfdddf39ff9a58
  $fToJSONRenderedCode7 :: Data.Aeson.Types.Internal.Value
  {- Unfolding: (case Language.PureScript.Docs.RenderedCode.Types.$fToJSONRenderedCode8 of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 Data.Aeson.Types.Internal.String dt }) -}
5da68c0b42745ff4d280e2acfae7757c
  $fToJSONRenderedCode8 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Docs.RenderedCode.Types.$fToJSONRenderedCode9) -}
7fcb64dc7e931676af31cd40ec7e01d1
  $fToJSONRenderedCode9 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("keyword"#) -}
171153e7e2ed40b7058dbb86502105f3
  $fToJSONRenderedCodeElement ::
    Data.Aeson.Types.ToJSON.ToJSON
      Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                  Language.PureScript.Docs.RenderedCode.Types.$fToJSONRenderedCode_$ctoJSON
                  Language.PureScript.Docs.RenderedCode.Types.$fToJSONRenderedCodeElement_$ctoEncoding
                  Language.PureScript.Docs.RenderedCode.Types.$fToJSONRenderedCodeElement_$ctoJSONList
                  Language.PureScript.Docs.RenderedCode.Types.$fToJSONRenderedCodeElement_$ctoEncodingList -}
171153e7e2ed40b7058dbb86502105f3
  $fToJSONRenderedCodeElement_$ctoEncoding ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Strictness: <S,1*U>, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (x :: Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement) ->
                 Data.Aeson.Encoding.Builder.encodeToBuilder
                   (Language.PureScript.Docs.RenderedCode.Types.$fToJSONRenderedCode_$ctoJSON
                      x))
                  `cast`
                (<Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_R
                 ->_R Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                               <Data.Aeson.Types.Internal.Value>_P)) -}
171153e7e2ed40b7058dbb86502105f3
  $fToJSONRenderedCodeElement_$ctoEncodingList ::
    [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (Data.Aeson.Encoding.Internal.list
                   @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                   Language.PureScript.Docs.RenderedCode.Types.$fToJSONRenderedCodeElement_$ctoEncoding) -}
171153e7e2ed40b7058dbb86502105f3
  $fToJSONRenderedCodeElement_$ctoJSONList ::
    [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (x :: [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]) ->
                 Data.Aeson.Types.Internal.$WArray
                   (Data.Vector.Generic.new
                      @ Data.Vector.Vector
                      @ Data.Aeson.Types.Internal.Value
                      (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                      (Data.Vector.Generic.New.unstream
                         @ Data.Vector.Vector
                         @ Data.Aeson.Types.Internal.Value
                         (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                         (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                            @ Data.Vector.Fusion.Util.Id
                            @ Data.Aeson.Types.Internal.Value
                            @ Data.Vector.Vector
                            Data.Vector.Fusion.Util.$fMonadId
                            Data.Vector.Fusion.Bundle.Size.Unknown
                            (GHC.Base.build
                               @ Data.Aeson.Types.Internal.Value
                               (\ @ b1
                                  (c :: Data.Aeson.Types.Internal.Value -> b1 -> b1)[OneShot]
                                  (n1 :: b1)[OneShot] ->
                                GHC.Base.foldr
                                  @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                                  @ b1
                                  (GHC.Base.mapFB
                                     @ Data.Aeson.Types.Internal.Value
                                     @ b1
                                     @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                                     c
                                     Language.PureScript.Docs.RenderedCode.Types.$fToJSONRenderedCode_$ctoJSON)
                                  n1
                                  x)))))) -}
4660ea0ffbba09617bc864a10b08d72f
  $fToJSONRenderedCode_$ctoEncoding ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCode
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Strictness: <S,1*U>, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (x :: Language.PureScript.Docs.RenderedCode.Types.RenderedCode) ->
                 Data.Aeson.Encoding.Builder.encodeToBuilder
                   (Data.Aeson.Types.Internal.$WArray
                      (Data.Vector.Generic.new
                         @ Data.Vector.Vector
                         @ Data.Aeson.Types.Internal.Value
                         (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                         (Data.Vector.Generic.New.unstream
                            @ Data.Vector.Vector
                            @ Data.Aeson.Types.Internal.Value
                            (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                            (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                               @ Data.Vector.Fusion.Util.Id
                               @ Data.Aeson.Types.Internal.Value
                               @ Data.Vector.Vector
                               Data.Vector.Fusion.Util.$fMonadId
                               Data.Vector.Fusion.Bundle.Size.Unknown
                               (GHC.Base.build
                                  @ Data.Aeson.Types.Internal.Value
                                  (\ @ b1
                                     (c :: Data.Aeson.Types.Internal.Value -> b1 -> b1)[OneShot]
                                     (n1 :: b1)[OneShot] ->
                                   GHC.Base.foldr
                                     @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                                     @ b1
                                     (GHC.Base.mapFB
                                        @ Data.Aeson.Types.Internal.Value
                                        @ b1
                                        @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                                        c
                                        Language.PureScript.Docs.RenderedCode.Types.$fToJSONRenderedCode_$ctoJSON)
                                     n1
                                     x `cast`
                                     (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0]))))))))
                  `cast`
                (<Language.PureScript.Docs.RenderedCode.Types.RenderedCode>_R
                 ->_R Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                               <Data.Aeson.Types.Internal.Value>_P)) -}
4660ea0ffbba09617bc864a10b08d72f
  $fToJSONRenderedCode_$ctoEncodingList ::
    [Language.PureScript.Docs.RenderedCode.Types.RenderedCode]
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (Data.Aeson.Encoding.Internal.list
                   @ Language.PureScript.Docs.RenderedCode.Types.RenderedCode
                   Language.PureScript.Docs.RenderedCode.Types.$fToJSONRenderedCode_$ctoEncoding) -}
171153e7e2ed40b7058dbb86502105f3
  $fToJSONRenderedCode_$ctoJSON ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement) ->
                 case ds of wild {
                   Language.PureScript.Docs.RenderedCode.Types.Syntax str
                   -> case GHC.Magic.runRW#
                             @ ('GHC.Types.TupleRep
                                  '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                             @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                  Data.Vector.Vector Data.Aeson.Types.Internal.Value #)
                             (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                              case GHC.Prim.newArray#
                                     @ Data.Aeson.Types.Internal.Value
                                     @ (Control.Monad.Primitive.PrimState
                                          (GHC.ST.ST GHC.Prim.RealWorld))
                                     0#
                                     (Data.Vector.Mutable.uninitialised
                                        @ Data.Aeson.Types.Internal.Value)
                                     s1
                                       `cast`
                                     (GHC.Prim.State#
                                        (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                  <GHC.Prim.RealWorld>_N)))_R of ds2 { (#,#) ipv ipv1 ->
                              Language.PureScript.Docs.RenderedCode.Types.$fToJSONContainingModule_$s$wfoldlM_loop
                                ipv
                                  `cast`
                                (GHC.Prim.State#
                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                        <GHC.Prim.RealWorld>_N))_R
                                Language.PureScript.Docs.RenderedCode.Types.$fToJSONRenderedCode10
                                (case str of dt { Data.Text.Internal.Text ipv2 ipv3 ipv4 ->
                                 Data.Aeson.Types.Internal.String dt })
                                0#
                                ipv1
                                  `cast`
                                (GHC.Prim.MutableArray#
                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                        <GHC.Prim.RealWorld>_N)
                                   <Data.Aeson.Types.Internal.Value>_R)_R
                                0#
                                0# }) of ds1 { (#,#) ipv1 ipv2 ->
                      case ipv2 of dt { Data.Vector.Vector ipv ipv4 ipv5 ->
                      Data.Aeson.Types.Internal.Array dt } }
                   Language.PureScript.Docs.RenderedCode.Types.Keyword str
                   -> case GHC.Magic.runRW#
                             @ ('GHC.Types.TupleRep
                                  '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                             @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                  Data.Vector.Vector Data.Aeson.Types.Internal.Value #)
                             (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                              case GHC.Prim.newArray#
                                     @ Data.Aeson.Types.Internal.Value
                                     @ (Control.Monad.Primitive.PrimState
                                          (GHC.ST.ST GHC.Prim.RealWorld))
                                     0#
                                     (Data.Vector.Mutable.uninitialised
                                        @ Data.Aeson.Types.Internal.Value)
                                     s1
                                       `cast`
                                     (GHC.Prim.State#
                                        (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                  <GHC.Prim.RealWorld>_N)))_R of ds2 { (#,#) ipv ipv1 ->
                              Language.PureScript.Docs.RenderedCode.Types.$fToJSONContainingModule_$s$wfoldlM_loop
                                ipv
                                  `cast`
                                (GHC.Prim.State#
                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                        <GHC.Prim.RealWorld>_N))_R
                                Language.PureScript.Docs.RenderedCode.Types.$fToJSONRenderedCode7
                                (case str of dt { Data.Text.Internal.Text ipv2 ipv3 ipv4 ->
                                 Data.Aeson.Types.Internal.String dt })
                                0#
                                ipv1
                                  `cast`
                                (GHC.Prim.MutableArray#
                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                        <GHC.Prim.RealWorld>_N)
                                   <Data.Aeson.Types.Internal.Value>_R)_R
                                0#
                                0# }) of ds1 { (#,#) ipv1 ipv2 ->
                      case ipv2 of dt { Data.Vector.Vector ipv ipv4 ipv5 ->
                      Data.Aeson.Types.Internal.Array dt } }
                   Language.PureScript.Docs.RenderedCode.Types.Space
                   -> Language.PureScript.Docs.RenderedCode.Types.$fToJSONRenderedCode3
                   Language.PureScript.Docs.RenderedCode.Types.Symbol ns str link
                   -> case GHC.Magic.runRW#
                             @ ('GHC.Types.TupleRep
                                  '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                             @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                  Data.Vector.Vector Data.Aeson.Types.Internal.Value #)
                             (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                              case GHC.Prim.newArray#
                                     @ Data.Aeson.Types.Internal.Value
                                     @ (Control.Monad.Primitive.PrimState
                                          (GHC.ST.ST GHC.Prim.RealWorld))
                                     0#
                                     (Data.Vector.Mutable.uninitialised
                                        @ Data.Aeson.Types.Internal.Value)
                                     s1
                                       `cast`
                                     (GHC.Prim.State#
                                        (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                  <GHC.Prim.RealWorld>_N)))_R of ds2 { (#,#) ipv ipv1 ->
                              case GHC.Prim.newArray#
                                     @ Data.Aeson.Types.Internal.Value
                                     @ (Control.Monad.Primitive.PrimState
                                          (GHC.ST.ST GHC.Prim.RealWorld))
                                     1#
                                     (Data.Vector.Mutable.uninitialised
                                        @ Data.Aeson.Types.Internal.Value)
                                     ipv of ds1 { (#,#) ipv2 ipv3 ->
                              case GHC.Prim.copyMutableArray#
                                     @ (Control.Monad.Primitive.PrimState
                                          (GHC.ST.ST GHC.Prim.RealWorld))
                                     @ Data.Aeson.Types.Internal.Value
                                     ipv1
                                     0#
                                     ipv3
                                     0#
                                     0#
                                     ipv2 of s'# { DEFAULT ->
                              case GHC.Prim.writeArray#
                                     @ (Control.Monad.Primitive.PrimState
                                          (GHC.ST.ST GHC.Prim.RealWorld))
                                     @ Data.Aeson.Types.Internal.Value
                                     ipv3
                                     0#
                                     Language.PureScript.Docs.RenderedCode.Types.$fToJSONRenderedCode1
                                     s'# of s'#1 { DEFAULT ->
                              case GHC.Prim.newArray#
                                     @ Data.Aeson.Types.Internal.Value
                                     @ (Control.Monad.Primitive.PrimState
                                          (GHC.ST.ST GHC.Prim.RealWorld))
                                     2#
                                     (Data.Vector.Mutable.uninitialised
                                        @ Data.Aeson.Types.Internal.Value)
                                     s'#1 of ds3 { (#,#) ipv4 ipv5 ->
                              case GHC.Prim.copyMutableArray#
                                     @ (Control.Monad.Primitive.PrimState
                                          (GHC.ST.ST GHC.Prim.RealWorld))
                                     @ Data.Aeson.Types.Internal.Value
                                     ipv3
                                     0#
                                     ipv5
                                     0#
                                     1#
                                     ipv4 of s'#2 { DEFAULT ->
                              case GHC.Prim.writeArray#
                                     @ (Control.Monad.Primitive.PrimState
                                          (GHC.ST.ST GHC.Prim.RealWorld))
                                     @ Data.Aeson.Types.Internal.Value
                                     ipv5
                                     1#
                                     (case ns of wild1 {
                                        Language.PureScript.Docs.RenderedCode.Types.ValueLevel
                                        -> case Data.Text.Show.unpackCString#
                                                  Language.PureScript.Docs.RenderedCode.Types.$fFromJSONNamespace11 of dt { Data.Text.Internal.Text ipv6 ipv7 ipv8 ->
                                           Data.Aeson.Types.Internal.String dt }
                                        Language.PureScript.Docs.RenderedCode.Types.TypeLevel
                                        -> case Data.Text.Show.unpackCString#
                                                  Language.PureScript.Docs.RenderedCode.Types.$fFromJSONNamespace9 of dt { Data.Text.Internal.Text ipv6 ipv7 ipv8 ->
                                           Data.Aeson.Types.Internal.String dt }
                                        Language.PureScript.Docs.RenderedCode.Types.KindLevel
                                        -> case Data.Text.Show.unpackCString#
                                                  Language.PureScript.Docs.RenderedCode.Types.$fFromJSONNamespace7 of dt { Data.Text.Internal.Text ipv6 ipv7 ipv8 ->
                                           Data.Aeson.Types.Internal.String dt } })
                                     s'#2 of s'#3 { DEFAULT ->
                              Language.PureScript.Docs.RenderedCode.Types.$fToJSONContainingModule_$s$wfoldlM_loop
                                s'#3
                                  `cast`
                                (GHC.Prim.State#
                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                        <GHC.Prim.RealWorld>_N))_R
                                (case str of dt { Data.Text.Internal.Text ipv6 ipv7 ipv8 ->
                                 Data.Aeson.Types.Internal.String dt })
                                (Language.PureScript.Docs.RenderedCode.Types.$fToJSONLink_$ctoJSON
                                   link)
                                2#
                                ipv5
                                  `cast`
                                (GHC.Prim.MutableArray#
                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                        <GHC.Prim.RealWorld>_N)
                                   <Data.Aeson.Types.Internal.Value>_R)_R
                                2#
                                0# } } } } } } }) of ds1 { (#,#) ipv1 ipv2 ->
                      case ipv2 of dt { Data.Vector.Vector ipv ipv4 ipv5 ->
                      Data.Aeson.Types.Internal.Array dt } } }) -}
4660ea0ffbba09617bc864a10b08d72f
  $fToJSONRenderedCode_$ctoJSON1 ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCode
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.PureScript.Docs.RenderedCode.Types.RenderedCode) ->
                 case Language.PureScript.Docs.RenderedCode.Types.$w$ctoJSON1
                        w of ww { Unit# ww1 ->
                 Data.Aeson.Types.Internal.Array ww1 }) -}
4660ea0ffbba09617bc864a10b08d72f
  $fToJSONRenderedCode_$ctoJSONList ::
    [Language.PureScript.Docs.RenderedCode.Types.RenderedCode]
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (x :: [Language.PureScript.Docs.RenderedCode.Types.RenderedCode]) ->
                 Data.Aeson.Types.Internal.$WArray
                   (Data.Vector.Generic.new
                      @ Data.Vector.Vector
                      @ Data.Aeson.Types.Internal.Value
                      (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                      (Data.Vector.Generic.New.unstream
                         @ Data.Vector.Vector
                         @ Data.Aeson.Types.Internal.Value
                         (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                         (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                            @ Data.Vector.Fusion.Util.Id
                            @ Data.Aeson.Types.Internal.Value
                            @ Data.Vector.Vector
                            Data.Vector.Fusion.Util.$fMonadId
                            Data.Vector.Fusion.Bundle.Size.Unknown
                            (GHC.Base.build
                               @ Data.Aeson.Types.Internal.Value
                               (\ @ b1
                                  (c :: Data.Aeson.Types.Internal.Value -> b1 -> b1)[OneShot]
                                  (n1 :: b1)[OneShot] ->
                                GHC.Base.foldr
                                  @ Language.PureScript.Docs.RenderedCode.Types.RenderedCode
                                  @ b1
                                  (GHC.Base.mapFB
                                     @ Data.Aeson.Types.Internal.Value
                                     @ b1
                                     @ Language.PureScript.Docs.RenderedCode.Types.RenderedCode
                                     c
                                     Language.PureScript.Docs.RenderedCode.Types.$fToJSONRenderedCode_$ctoJSON1)
                                  n1
                                  x)))))) -}
f3ffe2be5a30dcb830a18ecf8a7c2356
  $fToJSONRenderedCode_$s$wfoldlM_loop ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> [Data.Aeson.Types.Internal.Value]
    -> GHC.Prim.Int#
    -> GHC.Prim.MutableArray#
         GHC.Prim.RealWorld Data.Aeson.Types.Internal.Value
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Vector.Vector Data.Aeson.Types.Internal.Value #)
  {- Arity: 6, Strictness: <S,U><S,1*U><L,U><S,U><L,U><L,U> -}
5a509b31ae56f6c5a829bbf6e7d03edd
  $tc'Keyword :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1368651407644356038##
                   18386668088571681886##
                   Language.PureScript.Docs.RenderedCode.Types.$trModule
                   Language.PureScript.Docs.RenderedCode.Types.$tc'Keyword2
                   0#
                   Language.PureScript.Docs.RenderedCode.Types.$tc'Keyword1) -}
74fa7a4cc1b0a20a568e49bb29188941
  $tc'Keyword1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
f53847e485405c55c055eaf6c08f4827
  $tc'Keyword2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Docs.RenderedCode.Types.$tc'Keyword3) -}
af511a746479b260c8471a6669fab3bc
  $tc'Keyword3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Keyword"#) -}
a2be7b15f66c72116ff6377e5bda88e4
  $tc'KindLevel :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9753730026985310276##
                   3118193858826853354##
                   Language.PureScript.Docs.RenderedCode.Types.$trModule
                   Language.PureScript.Docs.RenderedCode.Types.$tc'KindLevel2
                   0#
                   Language.PureScript.Docs.RenderedCode.Types.$tc'KindLevel1) -}
6bc82a44979658df508827bc6f1d147b
  $tc'KindLevel1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
03aa500133512937c55261054410ad36
  $tc'KindLevel2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Docs.RenderedCode.Types.$tc'KindLevel3) -}
ffa4ab9f44309d3c0f5fbf21e4a34489
  $tc'KindLevel3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'KindLevel"#) -}
10562d0f6b7f6384998b2d5ef2441804
  $tc'Link :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1060713643546781673##
                   8363307577954912180##
                   Language.PureScript.Docs.RenderedCode.Types.$trModule
                   Language.PureScript.Docs.RenderedCode.Types.$tc'Link2
                   0#
                   Language.PureScript.Docs.RenderedCode.Types.$tc'Link1) -}
795ad9cd46f6ab82cb37e0cc2b9e5d3a
  $tc'Link1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
d43f4d6a9676a9d2440b318da4a926bb
  $tc'Link2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Docs.RenderedCode.Types.$tc'Link3) -}
8a3ec24698eb77ea1a023ce440526484
  $tc'Link3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Link"#) -}
ef99481c381f4e6c5c650e460449e24b
  $tc'NoLink :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5517171356786839102##
                   16152218722268882414##
                   Language.PureScript.Docs.RenderedCode.Types.$trModule
                   Language.PureScript.Docs.RenderedCode.Types.$tc'NoLink2
                   0#
                   Language.PureScript.Docs.RenderedCode.Types.$tc'NoLink1) -}
0996eff7d7633541d3dd38b014d1d012
  $tc'NoLink1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
34269674a9d18c16edc812aeb5040158
  $tc'NoLink2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Docs.RenderedCode.Types.$tc'NoLink3) -}
4208021d50be8cd434318d9339c2c578
  $tc'NoLink3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'NoLink"#) -}
7f63f1361c527a89002a54ace139f234
  $tc'OtherModule :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17016102378054062517##
                   11616272191786610421##
                   Language.PureScript.Docs.RenderedCode.Types.$trModule
                   Language.PureScript.Docs.RenderedCode.Types.$tc'OtherModule2
                   0#
                   Language.PureScript.Docs.RenderedCode.Types.$tc'OtherModule1) -}
179ea059ec5e9f9996ebb8ffc0185141
  $tc'OtherModule1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
628e99cef450a08175acc2aee7536a97
  $tc'OtherModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Docs.RenderedCode.Types.$tc'OtherModule3) -}
f2c33b45613817d61e9df5ce6b40cfb9
  $tc'OtherModule3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'OtherModule"#) -}
794c9c1fe3804b72565c88410679781c
  $tc'RC :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13220031406215012007##
                   8082627853522084064##
                   Language.PureScript.Docs.RenderedCode.Types.$trModule
                   Language.PureScript.Docs.RenderedCode.Types.$tc'RC2
                   0#
                   Language.PureScript.Docs.RenderedCode.Types.$tc'RC1) -}
d64a05ee6e452e3c6babb31188f0e04d
  $tc'RC1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
d577200fce84e6394696227fc598371e
  $tc'RC2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Docs.RenderedCode.Types.$tc'RC3) -}
65e77683aac9830ea59baa76100bc225
  $tc'RC3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'RC"#) -}
47c81e3c2b830041fbd02845107a6d64
  $tc'Space :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   617174156411816228##
                   18429814156780483686##
                   Language.PureScript.Docs.RenderedCode.Types.$trModule
                   Language.PureScript.Docs.RenderedCode.Types.$tc'Space2
                   0#
                   Language.PureScript.Docs.RenderedCode.Types.$tc'Space1) -}
8b11008af6a019f5c192d81a259edbff
  $tc'Space1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
e8ff0fdbb5a3d398cb357387fbed0c2c
  $tc'Space2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Docs.RenderedCode.Types.$tc'Space3) -}
4aa177cc8c019a6f965d6a8f769dce5d
  $tc'Space3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Space"#) -}
9ee74decec784cde04fd49559d5d1dc4
  $tc'Symbol :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14997831049797156642##
                   10014231191637551036##
                   Language.PureScript.Docs.RenderedCode.Types.$trModule
                   Language.PureScript.Docs.RenderedCode.Types.$tc'Symbol2
                   0#
                   Language.PureScript.Docs.RenderedCode.Types.$tc'Symbol1) -}
1c0b3ffddf12709f0c6f648fcc2bd54d
  $tc'Symbol1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
8ef3480c07b5f66e730d7609364837e5
  $tc'Symbol2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Docs.RenderedCode.Types.$tc'Symbol3) -}
fc81152c9d5fe495473717ae0d76acfe
  $tc'Symbol3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Symbol"#) -}
c388e0c5f98098225f11a59d745e5f23
  $tc'Syntax :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9434125694879616837##
                   8132043970333757326##
                   Language.PureScript.Docs.RenderedCode.Types.$trModule
                   Language.PureScript.Docs.RenderedCode.Types.$tc'Syntax1
                   0#
                   Language.PureScript.Docs.RenderedCode.Types.$tc'Keyword1) -}
585a35832870079d940eb7d8e4b00a54
  $tc'Syntax1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Docs.RenderedCode.Types.$tc'Syntax2) -}
23adf96fc0d2b68cc7229657569daa84
  $tc'Syntax2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Syntax"#) -}
dcff7c85e9d27712e951253052329be2
  $tc'ThisModule :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5307968982611978089##
                   16723445466877590584##
                   Language.PureScript.Docs.RenderedCode.Types.$trModule
                   Language.PureScript.Docs.RenderedCode.Types.$tc'ThisModule2
                   0#
                   Language.PureScript.Docs.RenderedCode.Types.$tc'ThisModule1) -}
25dfd45075905ac701e46d4df807f7a8
  $tc'ThisModule1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
8f3ab754e75852d1a28cef5ffc27a073
  $tc'ThisModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Docs.RenderedCode.Types.$tc'ThisModule3) -}
f38a67bf7c7188c970e5e86e24165787
  $tc'ThisModule3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ThisModule"#) -}
b801bf7599547bc6173fecbb2ffe2fd3
  $tc'TypeLevel :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1199428453076484735##
                   6020147757608815567##
                   Language.PureScript.Docs.RenderedCode.Types.$trModule
                   Language.PureScript.Docs.RenderedCode.Types.$tc'TypeLevel1
                   0#
                   Language.PureScript.Docs.RenderedCode.Types.$tc'KindLevel1) -}
5f1bbdd6ccaddde340d33ddd83950634
  $tc'TypeLevel1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Docs.RenderedCode.Types.$tc'TypeLevel2) -}
873a23a678759f346c2a16d21b88d93a
  $tc'TypeLevel2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TypeLevel"#) -}
2285cc8ef3800968db3e5a1a0080105e
  $tc'ValueLevel :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6023597006324729578##
                   9667613268483647364##
                   Language.PureScript.Docs.RenderedCode.Types.$trModule
                   Language.PureScript.Docs.RenderedCode.Types.$tc'ValueLevel1
                   0#
                   Language.PureScript.Docs.RenderedCode.Types.$tc'KindLevel1) -}
c000340494c50567bbd643e08f18b7e0
  $tc'ValueLevel1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Docs.RenderedCode.Types.$tc'ValueLevel2) -}
7cb0e92f88639e996ba86f9abf0abe3a
  $tc'ValueLevel2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ValueLevel"#) -}
f30e51aa6e5bffeefb67574a3a6730af
  $tcContainingModule :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   678207125430102048##
                   13973992730775677019##
                   Language.PureScript.Docs.RenderedCode.Types.$trModule
                   Language.PureScript.Docs.RenderedCode.Types.$tcContainingModule1
                   0#
                   GHC.Types.krep$*) -}
30f35cf825ad5693049aa863524caefe
  $tcContainingModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Docs.RenderedCode.Types.$tcContainingModule2) -}
ba721482cdb94825370fa907b415c06f
  $tcContainingModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ContainingModule"#) -}
644eb586dc62699bb56b639f41bc32f6
  $tcLink :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7499419122586586223##
                   2563856195915967470##
                   Language.PureScript.Docs.RenderedCode.Types.$trModule
                   Language.PureScript.Docs.RenderedCode.Types.$tcLink1
                   0#
                   GHC.Types.krep$*) -}
ecd0b84bc2deae3c6d2557486229491a
  $tcLink1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Docs.RenderedCode.Types.$fFromJSONLink6) -}
34277581a03a3bacd1cf327fa05902a3
  $tcNamespace :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3869825517265989017##
                   12303966659691239979##
                   Language.PureScript.Docs.RenderedCode.Types.$trModule
                   Language.PureScript.Docs.RenderedCode.Types.$tcNamespace1
                   0#
                   GHC.Types.krep$*) -}
31e9989df336e4a370394e71580b6612
  $tcNamespace1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Docs.RenderedCode.Types.$tcNamespace2) -}
562cecadc5313d17a2664b93191cc965
  $tcNamespace2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Namespace"#) -}
ff05dccc11e7543c6af50400e767639d
  $tcRenderedCode :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16224996375122753812##
                   14485965782673035395##
                   Language.PureScript.Docs.RenderedCode.Types.$trModule
                   Language.PureScript.Docs.RenderedCode.Types.$tcRenderedCode1
                   0#
                   GHC.Types.krep$*) -}
26ac5343e10bd99b4b3c2c44e5ba863d
  $tcRenderedCode1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Docs.RenderedCode.Types.$tcRenderedCode2) -}
e3f7ca0a6bbfb04fadc7a7c2e138783d
  $tcRenderedCode2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("RenderedCode"#) -}
acf4a95c929afe417919a53251a096f9
  $tcRenderedCodeElement :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14445009016881240271##
                   646649362286571644##
                   Language.PureScript.Docs.RenderedCode.Types.$trModule
                   Language.PureScript.Docs.RenderedCode.Types.$tcRenderedCodeElement1
                   0#
                   GHC.Types.krep$*) -}
fd9a530bd33c85c8fb80d3d7d9b825cb
  $tcRenderedCodeElement1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Docs.RenderedCode.Types.$tcRenderedCodeElement2) -}
22096179dc4fb6596563a4c67cc72e8f
  $tcRenderedCodeElement2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("RenderedCodeElement"#) -}
98c66879c4ab813ae5a7c9aac461ed18
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Language.PureScript.Docs.RenderedCode.Types.$trModule3
                   Language.PureScript.Docs.RenderedCode.Types.$trModule1) -}
3cf848120347466e532ac5ee71845fcd
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Docs.RenderedCode.Types.$trModule2) -}
11d6b0a153bb09937fd749f756c5e0e4
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Language.PureScript.Docs.RenderedCode.Types"#) -}
c606c72a227a2c3b9e73a846579d6a7e
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Docs.RenderedCode.Types.$trModule4) -}
5ddf1877c6b2d47301a3757ef9c53b04
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"#) -}
0bf68f95cc438605559d4d420b903a78
  $w$cshowsPrec ::
    Language.PureScript.Docs.RenderedCode.Types.Namespace
    -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: Language.PureScript.Docs.RenderedCode.Types.Namespace)
                   (w1 :: GHC.Base.String) ->
                 case w of wild {
                   Language.PureScript.Docs.RenderedCode.Types.ValueLevel
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.Docs.RenderedCode.Types.$fShowNamespace3
                        w1
                   Language.PureScript.Docs.RenderedCode.Types.TypeLevel
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.Docs.RenderedCode.Types.$fShowNamespace2
                        w1
                   Language.PureScript.Docs.RenderedCode.Types.KindLevel
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.Docs.RenderedCode.Types.$fShowNamespace1
                        w1 }) -}
4660ea0ffbba09617bc864a10b08d72f
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> Language.PureScript.Docs.RenderedCode.Types.RenderedCode
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: Language.PureScript.Docs.RenderedCode.Types.RenderedCode)
                   (w1 :: GHC.Base.String) ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     GHC.CString.unpackAppendCString#
                       Language.PureScript.Docs.RenderedCode.Types.$fShowRenderedCode4
                       (GHC.CString.unpackAppendCString#
                          Language.PureScript.Docs.RenderedCode.Types.$fShowRenderedCode3
                          (let {
                             s :: GHC.Base.String
                             = GHC.CString.unpackAppendCString#
                                 Language.PureScript.Docs.RenderedCode.Types.$fShowRenderedCode2
                                 x
                           } in
                           case w `cast`
                                (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0]) of wild {
                             [] -> GHC.CString.unpackAppendCString# GHC.Show.showList__4 s
                             : x1 xs
                             -> GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showList__3
                                  (Language.PureScript.Docs.RenderedCode.Types.$fShowRenderedCode_$cshowsPrec
                                     Language.PureScript.Docs.RenderedCode.Types.asContainingModule15
                                     x1
                                     (let {
                                        lvl43 :: [GHC.Types.Char]
                                        = GHC.Types.: @ GHC.Types.Char GHC.Show.showList__2 s
                                      } in
                                      letrec {
                                        showl :: [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
                                                 -> GHC.Base.String
                                          {- Arity: 1, Strictness: <S,1*U> -}
                                        = \ (ds2 :: [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]) ->
                                          case ds2 of wild1 {
                                            [] -> lvl43
                                            : y ys
                                            -> GHC.Types.:
                                                 @ GHC.Types.Char
                                                 GHC.Show.showList__1
                                                 (Language.PureScript.Docs.RenderedCode.Types.$fShowRenderedCode_$cshowsPrec
                                                    Language.PureScript.Docs.RenderedCode.Types.asContainingModule15
                                                    y
                                                    (showl ys)) }
                                      } in
                                      showl xs)) }))
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT -> p w1
                   1#
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 w1)) }) -}
7fd78b3d6be6c8453ba17c402b4bd2a1
  $w$ctoJSON ::
    Language.PureScript.Docs.RenderedCode.Types.ContainingModule
    -> (# Data.Aeson.Types.Internal.Array #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ (w :: Language.PureScript.Docs.RenderedCode.Types.ContainingModule) ->
                 case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                             Data.Vector.Vector Data.Aeson.Types.Internal.Value #)
                        (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case GHC.Prim.newArray#
                                @ Data.Aeson.Types.Internal.Value
                                @ (Control.Monad.Primitive.PrimState
                                     (GHC.ST.ST GHC.Prim.RealWorld))
                                0#
                                (Data.Vector.Mutable.uninitialised
                                   @ Data.Aeson.Types.Internal.Value)
                                s1
                                  `cast`
                                (GHC.Prim.State#
                                   (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                             <GHC.Prim.RealWorld>_N)))_R of ds2 { (#,#) ipv ipv1 ->
                         case w of wild {
                           Language.PureScript.Docs.RenderedCode.Types.ThisModule
                           -> Language.PureScript.Docs.RenderedCode.Types.$fToJSONContainingModule_$s$wfoldlM_loop1
                                ipv
                                  `cast`
                                (GHC.Prim.State#
                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                        <GHC.Prim.RealWorld>_N))_R
                                Language.PureScript.Docs.RenderedCode.Types.$fToJSONContainingModule3
                                0#
                                ipv1
                                  `cast`
                                (GHC.Prim.MutableArray#
                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                        <GHC.Prim.RealWorld>_N)
                                   <Data.Aeson.Types.Internal.Value>_R)_R
                                0#
                                0#
                           Language.PureScript.Docs.RenderedCode.Types.OtherModule mn
                           -> Language.PureScript.Docs.RenderedCode.Types.$fToJSONContainingModule_$s$wfoldlM_loop
                                ipv
                                  `cast`
                                (GHC.Prim.State#
                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                        <GHC.Prim.RealWorld>_N))_R
                                Language.PureScript.Docs.RenderedCode.Types.$fToJSONContainingModule2
                                (case mn
                                        `cast`
                                      (Language.PureScript.Names.N:ModuleName[0] ; ([Language.PureScript.Names.N:ProperName[0]
                                                                                         <'Language.PureScript.Names.Namespace>_P])_R) of wild1 {
                                   []
                                   -> case Language.PureScript.Names.runModuleName1 of dt { Data.Text.Internal.Text ipv2 ipv3 ipv4 ->
                                      Language.PureScript.Docs.RenderedCode.Types.$fToJSONContainingModule1 }
                                   : x1 xs
                                   -> case Data.Text.concat
                                             (GHC.Types.:
                                                @ Data.Text.Internal.Text
                                                x1
                                                (Language.PureScript.Names.runModuleName_go1
                                                   xs)) of dt { Data.Text.Internal.Text ipv2 ipv3 ipv4 ->
                                      Data.Aeson.Types.Internal.String dt } })
                                0#
                                ipv1
                                  `cast`
                                (GHC.Prim.MutableArray#
                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                        <GHC.Prim.RealWorld>_N)
                                   <Data.Aeson.Types.Internal.Value>_R)_R
                                0#
                                0# } }) of ds1 { (#,#) ipv1 ipv2 ->
                 case ipv2 of dt { Data.Vector.Vector ipv ipv4 ipv5 ->
                 (# dt #) } }) -}
4660ea0ffbba09617bc864a10b08d72f
  $w$ctoJSON1 ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCode
    -> (# Data.Aeson.Types.Internal.Array #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ (w :: Language.PureScript.Docs.RenderedCode.Types.RenderedCode) ->
                 case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                             Data.Vector.Vector Data.Aeson.Types.Internal.Value #)
                        (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case GHC.Prim.newArray#
                                @ Data.Aeson.Types.Internal.Value
                                @ (Control.Monad.Primitive.PrimState
                                     (GHC.ST.ST GHC.Prim.RealWorld))
                                0#
                                (Data.Vector.Mutable.uninitialised
                                   @ Data.Aeson.Types.Internal.Value)
                                s1
                                  `cast`
                                (GHC.Prim.State#
                                   (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                             <GHC.Prim.RealWorld>_N)))_R of ds2 { (#,#) ipv ipv1 ->
                         Language.PureScript.Docs.RenderedCode.Types.$fToJSONRenderedCode_$s$wfoldlM_loop
                           ipv
                             `cast`
                           (GHC.Prim.State#
                              (Control.Monad.Primitive.D:R:PrimStateST[0]
                                   <GHC.Prim.RealWorld>_N))_R
                           (GHC.Base.map
                              @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                              @ Data.Aeson.Types.Internal.Value
                              Language.PureScript.Docs.RenderedCode.Types.$fToJSONRenderedCode_$ctoJSON
                              w `cast`
                              (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0]))
                           0#
                           ipv1
                             `cast`
                           (GHC.Prim.MutableArray#
                              (Control.Monad.Primitive.D:R:PrimStateST[0] <GHC.Prim.RealWorld>_N)
                              <Data.Aeson.Types.Internal.Value>_R)_R
                           0#
                           0# }) of ds1 { (#,#) ipv1 ipv2 ->
                 case ipv2 of dt { Data.Vector.Vector ipv ipv4 ipv5 ->
                 (# dt #) } }) -}
f607103fd1844c7581c17d25cc0185fb
  $walias ::
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Data.Either.Either
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName)
         (Data.Either.Either
            Language.PureScript.Names.Ident
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ConstructorName))
    -> Language.PureScript.Docs.RenderedCode.Types.RenderedCode
  {- Arity: 2, Strictness: <L,1*U><S,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.Maybe
                            Language.PureScript.Names.ModuleName)
                   (ww1 :: Data.Either.Either
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.TypeName)
                             (Data.Either.Either
                                Language.PureScript.Names.Ident
                                (Language.PureScript.Names.ProperName
                                   'Language.PureScript.Names.ConstructorName))) ->
                 case ww1 of wild {
                   Data.Either.Left ds
                   -> (GHC.Base.++
                         @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                         Language.PureScript.Docs.RenderedCode.Types.alias1
                         (GHC.Types.:
                            @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                            (Language.PureScript.Docs.RenderedCode.Types.Symbol
                               Language.PureScript.Docs.RenderedCode.Types.TypeLevel
                               ds
                                 `cast`
                               (Language.PureScript.Names.N:ProperName[0]
                                    <'Language.PureScript.Names.TypeName>_P)
                               (Language.PureScript.Docs.RenderedCode.Types.Link
                                  (case ww of wild1 {
                                     GHC.Base.Nothing
                                     -> Language.PureScript.Docs.RenderedCode.Types.ThisModule
                                     GHC.Base.Just mn
                                     -> Language.PureScript.Docs.RenderedCode.Types.OtherModule
                                          mn })))
                            (GHC.Types.[]
                               @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)))
                        `cast`
                      (Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0]))
                   Data.Either.Right ds
                   -> case ds of wild1 {
                        Data.Either.Left n
                        -> (GHC.Types.:
                              @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                              (Language.PureScript.Docs.RenderedCode.Types.Symbol
                                 Language.PureScript.Docs.RenderedCode.Types.ValueLevel
                                 (Language.PureScript.Names.runIdent n)
                                 (Language.PureScript.Docs.RenderedCode.Types.Link
                                    (case ww of wild2 {
                                       GHC.Base.Nothing
                                       -> Language.PureScript.Docs.RenderedCode.Types.ThisModule
                                       GHC.Base.Just mn
                                       -> Language.PureScript.Docs.RenderedCode.Types.OtherModule
                                            mn })))
                              (GHC.Types.[]
                                 @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement))
                             `cast`
                           (Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0]))
                        Data.Either.Right ds1
                        -> (GHC.Types.:
                              @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                              (Language.PureScript.Docs.RenderedCode.Types.Symbol
                                 Language.PureScript.Docs.RenderedCode.Types.ValueLevel
                                 ds1
                                   `cast`
                                 (Language.PureScript.Names.N:ProperName[0]
                                      <'Language.PureScript.Names.ConstructorName>_P)
                                 (Language.PureScript.Docs.RenderedCode.Types.Link
                                    (case ww of wild2 {
                                       GHC.Base.Nothing
                                       -> Language.PureScript.Docs.RenderedCode.Types.ThisModule
                                       GHC.Base.Just mn
                                       -> Language.PureScript.Docs.RenderedCode.Types.OtherModule
                                            mn })))
                              (GHC.Types.[]
                                 @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement))
                             `cast`
                           (Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])) } }) -}
da2d44e90dafe98abe37d8e43219609b
  $waliasName ::
    Data.Either.Either
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName)
      (Data.Either.Either
         Language.PureScript.Names.Ident
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ConstructorName))
    -> Data.Text.Internal.Text
    -> (# Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement,
          [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement] #)
  {- Arity: 2, Strictness: <S,1*U><L,1*U(U,U,U)>, Inline: [0] -}
29cc0e893ca22c68269fcca446f8d643
  $wasModuleName ::
    Data.DList.DList Data.Aeson.BetterErrors.Internal.PathPiece
    -> Data.Aeson.Types.Internal.Value
    -> Data.Either.Either
         (Data.Aeson.BetterErrors.Internal.ParseError err)
         Language.PureScript.Names.ModuleName
  {- Arity: 2, Strictness: <L,1*C1(U)><S,1*U>, Inline: [0],
     Unfolding: (\ @ err
                   (ww :: Data.DList.DList Data.Aeson.BetterErrors.Internal.PathPiece)
                   (ww1 :: Data.Aeson.Types.Internal.Value) ->
                 case ww1 of wild {
                   DEFAULT
                   -> Data.Either.Left
                        @ (Data.Aeson.BetterErrors.Internal.ParseError err)
                        @ Language.PureScript.Names.ModuleName
                        (Data.Aeson.BetterErrors.Internal.BadSchema
                           @ err
                           (ww
                              `cast`
                            (Data.DList.N:DList[0]
                                 <Data.Aeson.BetterErrors.Internal.PathPiece>_R)
                              (GHC.Types.[] @ Data.Aeson.BetterErrors.Internal.PathPiece))
                           (Data.Aeson.BetterErrors.Internal.WrongType
                              @ err
                              Data.Aeson.BetterErrors.Internal.TyString
                              wild))
                   Data.Aeson.Types.Internal.String t
                   -> case t of ww2 { Data.Text.Internal.Text ww3 ww4 ww5 ->
                      Data.Either.Right
                        @ (Data.Aeson.BetterErrors.Internal.ParseError err)
                        @ Language.PureScript.Names.ModuleName
                        (Language.PureScript.Names.$wsplitProperNames
                           @ 'Language.PureScript.Names.Namespace
                           ww3
                           ww4
                           ww5)
                          `cast`
                        (Sym (Language.PureScript.Names.N:ModuleName[0])) } }) -}
f9baa68ce033e870cc820535f6b47c6e
  $wm1 ::
    Data.DList.DList Data.Aeson.BetterErrors.Internal.PathPiece
    -> Data.Aeson.Types.Internal.Value
    -> Control.Monad.Trans.Except.ExceptT
         (Data.Aeson.BetterErrors.Internal.ParseError
            Data.Text.Internal.Text)
         Data.Functor.Identity.Identity
         Data.Text.Internal.Text
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><S,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: Data.DList.DList
                            Data.Aeson.BetterErrors.Internal.PathPiece)
                   (ww1 :: Data.Aeson.Types.Internal.Value) ->
                 case ww1 of wild {
                   DEFAULT
                   -> (Data.Either.Left
                         @ (Data.Aeson.BetterErrors.Internal.ParseError
                              Data.Text.Internal.Text)
                         @ Data.Text.Internal.Text
                         (Data.Aeson.BetterErrors.Internal.BadSchema
                            @ Data.Text.Internal.Text
                            (ww
                               `cast`
                             (Data.DList.N:DList[0]
                                  <Data.Aeson.BetterErrors.Internal.PathPiece>_R)
                               (GHC.Types.[] @ Data.Aeson.BetterErrors.Internal.PathPiece))
                            (Data.Aeson.BetterErrors.Internal.WrongType
                               @ Data.Text.Internal.Text
                               Data.Aeson.BetterErrors.Internal.TyString
                               wild)))
                        `cast`
                      (Sym (Data.Functor.Identity.N:Identity[0]
                                <Data.Either.Either
                                   (Data.Aeson.BetterErrors.Internal.ParseError
                                      Data.Text.Internal.Text)
                                   Data.Text.Internal.Text>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                          <Data.Aeson.BetterErrors.Internal.ParseError
                                                                             Data.Text.Internal.Text>_N
                                                                          <Data.Functor.Identity.Identity>_R
                                                                          <Data.Text.Internal.Text>_N))
                   Data.Aeson.Types.Internal.String t
                   -> (Data.Either.Right
                         @ (Data.Aeson.BetterErrors.Internal.ParseError
                              Data.Text.Internal.Text)
                         @ Data.Text.Internal.Text
                         t)
                        `cast`
                      (Sym (Data.Functor.Identity.N:Identity[0]
                                <Data.Either.Either
                                   (Data.Aeson.BetterErrors.Internal.ParseError
                                      Data.Text.Internal.Text)
                                   Data.Text.Internal.Text>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                          <Data.Aeson.BetterErrors.Internal.ParseError
                                                                             Data.Text.Internal.Text>_N
                                                                          <Data.Functor.Identity.Identity>_R
                                                                          <Data.Text.Internal.Text>_N)) }) -}
7fd78b3d6be6c8453ba17c402b4bd2a1
  data ContainingModule
    = ThisModule | OtherModule Language.PureScript.Names.ModuleName
6f960a06e738e49e9ff5eee34182b501
  type FixityAlias =
    Language.PureScript.Names.Qualified
      (Data.Either.Either
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName)
         (Data.Either.Either
            Language.PureScript.Names.Ident
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ConstructorName)))
5e36da664b08e623162b4c76cb76fcf5
  data Link
    = NoLink
    | Link Language.PureScript.Docs.RenderedCode.Types.ContainingModule
0bf68f95cc438605559d4d420b903a78
  data Namespace = ValueLevel | TypeLevel | KindLevel
4660ea0ffbba09617bc864a10b08d72f
  newtype RenderedCode
    = RC {unRC :: [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]}
171153e7e2ed40b7058dbb86502105f3
  data RenderedCodeElement
    = Syntax Data.Text.Internal.Text
    | Keyword Data.Text.Internal.Text
    | Space
    | Symbol Language.PureScript.Docs.RenderedCode.Types.Namespace
             Data.Text.Internal.Text
             Language.PureScript.Docs.RenderedCode.Types.Link
0bf68f95cc438605559d4d420b903a78
  axiom Language.PureScript.Docs.RenderedCode.Types.Rep_Namespace::
      GHC.Generics.Rep
        Language.PureScript.Docs.RenderedCode.Types.Namespace
        = GHC.Generics.D1
            ('GHC.Generics.MetaData
               "Namespace"
               "Language.PureScript.Docs.RenderedCode.Types"
               "purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"
               'GHC.Types.False)
            (GHC.Generics.C1
               ('GHC.Generics.MetaCons
                  "ValueLevel" 'GHC.Generics.PrefixI 'GHC.Types.False)
               GHC.Generics.U1
             GHC.Generics.:+: (GHC.Generics.C1
                                 ('GHC.Generics.MetaCons
                                    "TypeLevel" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                 GHC.Generics.U1
                               GHC.Generics.:+: GHC.Generics.C1
                                                  ('GHC.Generics.MetaCons
                                                     "KindLevel"
                                                     'GHC.Generics.PrefixI
                                                     'GHC.Types.False)
                                                  GHC.Generics.U1))
264048896fdb8d7a984d226df5320be8
  alias ::
    Language.PureScript.Docs.RenderedCode.Types.FixityAlias
    -> Language.PureScript.Docs.RenderedCode.Types.RenderedCode
  {- Arity: 1, Strictness: <S(LS),1*U(1*U,1*U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.PureScript.Docs.RenderedCode.Types.FixityAlias) ->
                 case w of ww { Language.PureScript.Names.Qualified ww1 ww2 ->
                 Language.PureScript.Docs.RenderedCode.Types.$walias ww1 ww2 }) -}
593c367aaa601cd6ab3acff96ef73bcc
  alias1 ::
    [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
  {- Unfolding: (GHC.Base.++_$s++
                   @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                   Language.PureScript.Docs.RenderedCode.Types.alias5
                   Language.PureScript.Docs.RenderedCode.Types.alias2
                   (GHC.Types.[]
                      @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)) -}
82449f20f9994222211d34236869325c
  alias2 ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
  {- Strictness: m2,
     Unfolding: (Language.PureScript.Docs.RenderedCode.Types.Keyword
                   Language.PureScript.Docs.RenderedCode.Types.alias3) -}
d780cab1494f532a5ceb54bdbd933baa
  alias3 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Docs.RenderedCode.Types.alias4) -}
1062d67eb573d425a59c135faa8638c9
  alias4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("type"#) -}
6c114b59f86730861cee950f82f6d05a
  alias5 ::
    [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                   Language.PureScript.Docs.RenderedCode.Types.Space
                   (GHC.Types.[]
                      @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)) -}
93660e9a6a57956739cb37ae8fc4ef17
  aliasName ::
    Language.PureScript.Docs.RenderedCode.Types.FixityAlias
    -> Data.Text.Internal.Text
    -> Language.PureScript.Docs.RenderedCode.Types.RenderedCode
  {- Arity: 2, Strictness: <S(LS),1*U(A,1*U)><L,1*U(U,U,U)>m2,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Docs.RenderedCode.Types.FixityAlias)
                   (w1 :: Data.Text.Internal.Text) ->
                 case w of ww { Language.PureScript.Names.Qualified ww1 ww2 ->
                 case Language.PureScript.Docs.RenderedCode.Types.$waliasName
                        ww2
                        w1 of ww3 { (#,#) ww4 ww5 ->
                 (GHC.Types.:
                    @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                    ww4
                    ww5)
                   `cast`
                 (Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])) } }) -}
7fd78b3d6be6c8453ba17c402b4bd2a1
  asContainingModule ::
    Data.Aeson.BetterErrors.Internal.Parse
      Data.Text.Internal.Text
      Language.PureScript.Docs.RenderedCode.Types.ContainingModule
  {- Unfolding: (Language.PureScript.Docs.RenderedCode.Types.tryParse
                   @ Language.PureScript.Docs.RenderedCode.Types.ContainingModule
                   Language.PureScript.Docs.RenderedCode.Types.asContainingModule20
                   Language.PureScript.Docs.RenderedCode.Types.asContainingModule1) -}
7fd78b3d6be6c8453ba17c402b4bd2a1
  asContainingModule1 ::
    [Data.Aeson.BetterErrors.Internal.ParseT
       Data.Text.Internal.Text
       Data.Functor.Identity.Identity
       Language.PureScript.Docs.RenderedCode.Types.ContainingModule]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Aeson.BetterErrors.Internal.ParseT
                        Data.Text.Internal.Text
                        Data.Functor.Identity.Identity
                        Language.PureScript.Docs.RenderedCode.Types.ContainingModule)
                   Language.PureScript.Docs.RenderedCode.Types.asContainingModule16
                     `cast`
                   ((<Data.Aeson.BetterErrors.Internal.ParseReader>_R
                     ->_R Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                   <Data.Aeson.BetterErrors.Internal.ParseError
                                      Data.Text.Internal.Text>_N
                                   <Data.Functor.Identity.Identity>_R
                                   <Language.PureScript.Docs.RenderedCode.Types.ContainingModule>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                  <*>_N
                                                                                                                  <Data.Aeson.BetterErrors.Internal.ParseReader>_R
                                                                                                                  <Control.Monad.Trans.Except.ExceptT
                                                                                                                     (Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                                        Data.Text.Internal.Text)
                                                                                                                     Data.Functor.Identity.Identity>_R
                                                                                                                  <Language.PureScript.Docs.RenderedCode.Types.ContainingModule>_N) ; Sym (Data.Aeson.BetterErrors.Internal.N:ParseT[0]
                                                                                                                                                                                               <Data.Text.Internal.Text>_N
                                                                                                                                                                                               <Data.Functor.Identity.Identity>_R) <Language.PureScript.Docs.RenderedCode.Types.ContainingModule>_N))
                   Language.PureScript.Docs.RenderedCode.Types.asContainingModule2) -}
eb3a191e14eeafc106b5505fece34059
  asContainingModule10 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Docs.RenderedCode.Types.asContainingModule11) -}
05e2039d6f5db2bc651aa32e28405f0b
  asContainingModule11 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("OtherModule"#) -}
5a3f140ddc793134e4bbd358fa62853e
  asContainingModule12 ::
    Data.Text.Internal.Text
    -> Data.Aeson.BetterErrors.Internal.Parse Data.Text.Internal.Text a
    -> Data.Aeson.BetterErrors.Internal.ParseReader
    -> Data.Functor.Identity.Identity
         (Data.Either.Either
            (Data.Aeson.BetterErrors.Internal.ParseError
               Data.Text.Internal.Text)
            a)
  {- Arity: 3, Strictness: <L,U(U,U,U)><L,1*C1(U)><L,U(U,U)>,
     Unfolding: (\ @ a
                   (str :: Data.Text.Internal.Text)
                   (p :: Data.Aeson.BetterErrors.Internal.Parse
                           Data.Text.Internal.Text a)
                   (eta :: Data.Aeson.BetterErrors.Internal.ParseReader) ->
                 case (Data.Aeson.BetterErrors.Internal.$wnth
                         @ Data.Functor.Identity.Identity
                         @ Data.Text.Internal.Text
                         @ ()
                         Data.Functor.Identity.$fMonadIdentity
                         Language.PureScript.Docs.RenderedCode.Types.asContainingModule15
                         (\ (w3 :: Data.Aeson.BetterErrors.Internal.ParseReader) ->
                          case w3 of ww { Data.Aeson.BetterErrors.Internal.ParseReader ww1 ww2 ->
                          case ww2 of wild {
                            DEFAULT
                            -> (Data.Either.Left
                                  @ (Data.Aeson.BetterErrors.Internal.ParseError
                                       Data.Text.Internal.Text)
                                  @ ()
                                  (Data.Aeson.BetterErrors.Internal.BadSchema
                                     @ Data.Text.Internal.Text
                                     (ww1
                                        `cast`
                                      (Data.DList.N:DList[0]
                                           <Data.Aeson.BetterErrors.Internal.PathPiece>_R)
                                        (GHC.Types.[] @ Data.Aeson.BetterErrors.Internal.PathPiece))
                                     (Data.Aeson.BetterErrors.Internal.WrongType
                                        @ Data.Text.Internal.Text
                                        Data.Aeson.BetterErrors.Internal.TyString
                                        wild)))
                                 `cast`
                               (Sym (Data.Functor.Identity.N:Identity[0]
                                         <Data.Either.Either
                                            (Data.Aeson.BetterErrors.Internal.ParseError
                                               Data.Text.Internal.Text)
                                            ()>_R))
                            Data.Aeson.Types.Internal.String t
                            -> case t of wild1 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                               case str of wild2 { Data.Text.Internal.Text dt dt1 dt2 ->
                               case GHC.Prim.==# dt2 dt5 of lwild {
                                 DEFAULT
                                 -> (Data.Either.Left
                                       @ (Data.Aeson.BetterErrors.Internal.ParseError
                                            Data.Text.Internal.Text)
                                       @ ()
                                       (Data.Aeson.BetterErrors.Internal.BadSchema
                                          @ Data.Text.Internal.Text
                                          (ww1
                                             `cast`
                                           (Data.DList.N:DList[0]
                                                <Data.Aeson.BetterErrors.Internal.PathPiece>_R)
                                             (GHC.Types.[]
                                                @ Data.Aeson.BetterErrors.Internal.PathPiece))
                                          Language.PureScript.Docs.RenderedCode.Types.asContainingModule14))
                                      `cast`
                                    (Sym (Data.Functor.Identity.N:Identity[0]
                                              <Data.Either.Either
                                                 (Data.Aeson.BetterErrors.Internal.ParseError
                                                    Data.Text.Internal.Text)
                                                 ()>_R))
                                 1#
                                 -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                                   -> GHC.Prim.Word#
                                                                   -> GHC.Prim.ByteArray#
                                                                   -> GHC.Prim.Word#
                                                                   -> GHC.Prim.Word#
                                                                   -> GHC.Prim.State#
                                                                        GHC.Prim.RealWorld
                                                                   -> (# GHC.Prim.State#
                                                                           GHC.Prim.RealWorld,
                                                                         GHC.Prim.Int# #)}
                                           dt
                                           (GHC.Prim.int2Word# dt1)
                                           dt3
                                           (GHC.Prim.int2Word# dt4)
                                           (GHC.Prim.int2Word# dt2)
                                           GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                                    case GHC.Prim.narrow32Int# ds3 of wild3 {
                                      DEFAULT
                                      -> (Data.Either.Left
                                            @ (Data.Aeson.BetterErrors.Internal.ParseError
                                                 Data.Text.Internal.Text)
                                            @ ()
                                            (Data.Aeson.BetterErrors.Internal.BadSchema
                                               @ Data.Text.Internal.Text
                                               (ww1
                                                  `cast`
                                                (Data.DList.N:DList[0]
                                                     <Data.Aeson.BetterErrors.Internal.PathPiece>_R)
                                                  (GHC.Types.[]
                                                     @ Data.Aeson.BetterErrors.Internal.PathPiece))
                                               Language.PureScript.Docs.RenderedCode.Types.asContainingModule14))
                                           `cast`
                                         (Sym (Data.Functor.Identity.N:Identity[0]
                                                   <Data.Either.Either
                                                      (Data.Aeson.BetterErrors.Internal.ParseError
                                                         Data.Text.Internal.Text)
                                                      ()>_R))
                                      0#
                                      -> Language.PureScript.Docs.RenderedCode.Types.asContainingModule13
                                           `cast`
                                         (Sym (Data.Functor.Identity.N:Identity[0]
                                                   <Data.Either.Either
                                                      (Data.Aeson.BetterErrors.Internal.ParseError
                                                         Data.Text.Internal.Text)
                                                      ()>_R)) } } } } } } })
                           `cast`
                         ((<Data.Aeson.BetterErrors.Internal.ParseReader>_R
                           ->_R Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                         <Data.Aeson.BetterErrors.Internal.ParseError
                                            Data.Text.Internal.Text>_N
                                         <Data.Functor.Identity.Identity>_R
                                         <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                              <*>_N
                                                              <Data.Aeson.BetterErrors.Internal.ParseReader>_R
                                                              <Control.Monad.Trans.Except.ExceptT
                                                                 (Data.Aeson.BetterErrors.Internal.ParseError
                                                                    Data.Text.Internal.Text)
                                                                 Data.Functor.Identity.Identity>_R
                                                              <()>_N) ; Sym (Data.Aeson.BetterErrors.Internal.N:ParseT[0]
                                                                                 <Data.Text.Internal.Text>_N
                                                                                 <Data.Functor.Identity.Identity>_R) <()>_N))
                         eta)
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <Data.Aeson.BetterErrors.Internal.ParseError
                              Data.Text.Internal.Text>_N
                           <Data.Functor.Identity.Identity>_R
                           <()>_N ; Data.Functor.Identity.N:Identity[0]
                                        <Data.Either.Either
                                           (Data.Aeson.BetterErrors.Internal.ParseError
                                              Data.Text.Internal.Text)
                                           ()>_R) of wild {
                   Data.Either.Left e1
                   -> (Data.Either.Left
                         @ (Data.Aeson.BetterErrors.Internal.ParseError
                              Data.Text.Internal.Text)
                         @ a
                         e1)
                        `cast`
                      (Sym (Data.Functor.Identity.N:Identity[0]
                                <Data.Either.Either
                                   (Data.Aeson.BetterErrors.Internal.ParseError
                                      Data.Text.Internal.Text)
                                   a>_R))
                   Data.Either.Right x
                   -> (p `cast`
                       (Data.Aeson.BetterErrors.Internal.N:ParseT[0]
                            <Data.Text.Internal.Text>_N
                            <Data.Functor.Identity.Identity>_R <a>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                           <*>_N
                                                                           <Data.Aeson.BetterErrors.Internal.ParseReader>_R
                                                                           <Control.Monad.Trans.Except.ExceptT
                                                                              (Data.Aeson.BetterErrors.Internal.ParseError
                                                                                 Data.Text.Internal.Text)
                                                                              Data.Functor.Identity.Identity>_R
                                                                           <a>_N)
                         eta)
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <Data.Aeson.BetterErrors.Internal.ParseError
                              Data.Text.Internal.Text>_N
                           <Data.Functor.Identity.Identity>_R
                           <a>_N) }) -}
ae317c580eddf5e733a14f08d234fe28
  asContainingModule13 ::
    Data.Either.Either
      (Data.Aeson.BetterErrors.Internal.ParseError
         Data.Text.Internal.Text)
      ()
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Data.Either.Right
                   @ (Data.Aeson.BetterErrors.Internal.ParseError
                        Data.Text.Internal.Text)
                   @ ()
                   GHC.Tuple.()) -}
8e7d1f6739f4e77804b4b7e2d7586b7c
  asContainingModule14 ::
    Data.Aeson.BetterErrors.Internal.ErrorSpecifics
      Data.Text.Internal.Text
  {- Strictness: m6,
     Unfolding: (Data.Aeson.BetterErrors.Internal.CustomError
                   @ Data.Text.Internal.Text
                   Data.Text.Internal.empty_) -}
119e5f0d5d9635dfcfe07d7ea6009739
  asContainingModule15 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
7fd78b3d6be6c8453ba17c402b4bd2a1
  asContainingModule16 ::
    Data.Aeson.BetterErrors.Internal.ParseReader
    -> Data.Functor.Identity.Identity
         (Data.Either.Either
            (Data.Aeson.BetterErrors.Internal.ParseError
               Data.Text.Internal.Text)
            Language.PureScript.Docs.RenderedCode.Types.ContainingModule)
  {- Arity: 1,
     Unfolding: (Language.PureScript.Docs.RenderedCode.Types.asContainingModule12
                   @ Language.PureScript.Docs.RenderedCode.Types.ContainingModule
                   Language.PureScript.Docs.RenderedCode.Types.asContainingModule18
                   Language.PureScript.Docs.RenderedCode.Types.asContainingModule17
                     `cast`
                   ((<Data.Aeson.BetterErrors.Internal.ParseReader>_R
                     ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                   <Data.Either.Either
                                      (Data.Aeson.BetterErrors.Internal.ParseError
                                         Data.Text.Internal.Text)
                                      Language.PureScript.Docs.RenderedCode.Types.ContainingModule>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                  <Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                                     Data.Text.Internal.Text>_N
                                                                                                                  <Data.Functor.Identity.Identity>_R
                                                                                                                  <Language.PureScript.Docs.RenderedCode.Types.ContainingModule>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                                                                                                 <*>_N
                                                                                                                                                                                                 <Data.Aeson.BetterErrors.Internal.ParseReader>_R
                                                                                                                                                                                                 <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                    (Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                                                                                                                       Data.Text.Internal.Text)
                                                                                                                                                                                                    Data.Functor.Identity.Identity>_R
                                                                                                                                                                                                 <Language.PureScript.Docs.RenderedCode.Types.ContainingModule>_N) ; Sym (Data.Aeson.BetterErrors.Internal.N:ParseT[0]
                                                                                                                                                                                                                                                                              <Data.Text.Internal.Text>_N
                                                                                                                                                                                                                                                                              <Data.Functor.Identity.Identity>_R) <Language.PureScript.Docs.RenderedCode.Types.ContainingModule>_N))) -}
7fd78b3d6be6c8453ba17c402b4bd2a1
  asContainingModule17 ::
    Data.Aeson.BetterErrors.Internal.ParseReader
    -> Data.Either.Either
         (Data.Aeson.BetterErrors.Internal.ParseError
            Data.Text.Internal.Text)
         Language.PureScript.Docs.RenderedCode.Types.ContainingModule
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>m2,
     Unfolding: (\ (ds :: Data.Aeson.BetterErrors.Internal.ParseReader) ->
                 Language.PureScript.Docs.RenderedCode.Types.asContainingModule5) -}
6ccec21240a22bd72dc76b25863a55ab
  asContainingModule18 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Docs.RenderedCode.Types.asContainingModule19) -}
90675ecea8d4836f25c655b7ae85657a
  asContainingModule19 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ThisModule"#) -}
7fd78b3d6be6c8453ba17c402b4bd2a1
  asContainingModule2 ::
    [Data.Aeson.BetterErrors.Internal.ParseT
       Data.Text.Internal.Text
       Data.Functor.Identity.Identity
       Language.PureScript.Docs.RenderedCode.Types.ContainingModule]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Aeson.BetterErrors.Internal.ParseT
                        Data.Text.Internal.Text
                        Data.Functor.Identity.Identity
                        Language.PureScript.Docs.RenderedCode.Types.ContainingModule)
                   Language.PureScript.Docs.RenderedCode.Types.asContainingModule6
                     `cast`
                   ((<Data.Aeson.BetterErrors.Internal.ParseReader>_R
                     ->_R Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                   <Data.Aeson.BetterErrors.Internal.ParseError
                                      Data.Text.Internal.Text>_N
                                   <Data.Functor.Identity.Identity>_R
                                   <Language.PureScript.Docs.RenderedCode.Types.ContainingModule>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                  <*>_N
                                                                                                                  <Data.Aeson.BetterErrors.Internal.ParseReader>_R
                                                                                                                  <Control.Monad.Trans.Except.ExceptT
                                                                                                                     (Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                                        Data.Text.Internal.Text)
                                                                                                                     Data.Functor.Identity.Identity>_R
                                                                                                                  <Language.PureScript.Docs.RenderedCode.Types.ContainingModule>_N) ; Sym (Data.Aeson.BetterErrors.Internal.N:ParseT[0]
                                                                                                                                                                                               <Data.Text.Internal.Text>_N
                                                                                                                                                                                               <Data.Functor.Identity.Identity>_R) <Language.PureScript.Docs.RenderedCode.Types.ContainingModule>_N))
                   Language.PureScript.Docs.RenderedCode.Types.asContainingModule3) -}
be8dfceab9165b6ce9a61952eab8c0cf
  asContainingModule20 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Docs.RenderedCode.Types.asContainingModule21) -}
b018550064ee8735fbc86ffd11fd3278
  asContainingModule21 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("containing module"#) -}
7fd78b3d6be6c8453ba17c402b4bd2a1
  asContainingModule3 ::
    [Data.Aeson.BetterErrors.Internal.ParseT
       Data.Text.Internal.Text
       Data.Functor.Identity.Identity
       Language.PureScript.Docs.RenderedCode.Types.ContainingModule]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Aeson.BetterErrors.Internal.ParseT
                        Data.Text.Internal.Text
                        Data.Functor.Identity.Identity
                        Language.PureScript.Docs.RenderedCode.Types.ContainingModule)
                   Language.PureScript.Docs.RenderedCode.Types.asContainingModule4
                     `cast`
                   ((<Data.Aeson.BetterErrors.Internal.ParseReader>_R
                     ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                   <Data.Either.Either
                                      (Data.Aeson.BetterErrors.Internal.ParseError
                                         Data.Text.Internal.Text)
                                      Language.PureScript.Docs.RenderedCode.Types.ContainingModule>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                  <Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                                     Data.Text.Internal.Text>_N
                                                                                                                  <Data.Functor.Identity.Identity>_R
                                                                                                                  <Language.PureScript.Docs.RenderedCode.Types.ContainingModule>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                                                                                                 <*>_N
                                                                                                                                                                                                 <Data.Aeson.BetterErrors.Internal.ParseReader>_R
                                                                                                                                                                                                 <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                    (Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                                                                                                                       Data.Text.Internal.Text)
                                                                                                                                                                                                    Data.Functor.Identity.Identity>_R
                                                                                                                                                                                                 <Language.PureScript.Docs.RenderedCode.Types.ContainingModule>_N) ; Sym (Data.Aeson.BetterErrors.Internal.N:ParseT[0]
                                                                                                                                                                                                                                                                              <Data.Text.Internal.Text>_N
                                                                                                                                                                                                                                                                              <Data.Functor.Identity.Identity>_R) <Language.PureScript.Docs.RenderedCode.Types.ContainingModule>_N))
                   (GHC.Types.[]
                      @ (Data.Aeson.BetterErrors.Internal.ParseT
                           Data.Text.Internal.Text
                           Data.Functor.Identity.Identity
                           Language.PureScript.Docs.RenderedCode.Types.ContainingModule))) -}
7fd78b3d6be6c8453ba17c402b4bd2a1
  asContainingModule4 ::
    Data.Aeson.BetterErrors.Internal.ParseReader
    -> Data.Either.Either
         (Data.Aeson.BetterErrors.Internal.ParseError
            Data.Text.Internal.Text)
         Language.PureScript.Docs.RenderedCode.Types.ContainingModule
  {- Arity: 1, Strictness: <S(LS),1*U(1*C1(U),1*U)>,
     Unfolding: (\ (x :: Data.Aeson.BetterErrors.Internal.ParseReader) ->
                 case x of wild { Data.Aeson.BetterErrors.Internal.ParseReader ds ds1 ->
                 case ds1 of wild1 {
                   DEFAULT
                   -> Data.Either.Left
                        @ (Data.Aeson.BetterErrors.Internal.ParseError
                             Data.Text.Internal.Text)
                        @ Language.PureScript.Docs.RenderedCode.Types.ContainingModule
                        (Data.Aeson.BetterErrors.Internal.BadSchema
                           @ Data.Text.Internal.Text
                           (ds
                              `cast`
                            (Data.DList.N:DList[0]
                                 <Data.Aeson.BetterErrors.Internal.PathPiece>_R)
                              (GHC.Types.[] @ Data.Aeson.BetterErrors.Internal.PathPiece))
                           (Data.Aeson.BetterErrors.Internal.WrongType
                              @ Data.Text.Internal.Text
                              Data.Aeson.BetterErrors.Internal.TyString
                              wild1))
                   Data.Aeson.Types.Internal.String t
                   -> case t of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                      Data.Either.Right
                        @ (Data.Aeson.BetterErrors.Internal.ParseError
                             Data.Text.Internal.Text)
                        @ Language.PureScript.Docs.RenderedCode.Types.ContainingModule
                        (Language.PureScript.Docs.RenderedCode.Types.OtherModule
                           (Language.PureScript.Names.$wsplitProperNames
                              @ 'Language.PureScript.Names.Namespace
                              ww1
                              ww2
                              ww3)
                             `cast`
                           (Sym (Language.PureScript.Names.N:ModuleName[0]))) }
                   Data.Aeson.Types.Internal.Null
                   -> Language.PureScript.Docs.RenderedCode.Types.asContainingModule5 } }) -}
7fd78b3d6be6c8453ba17c402b4bd2a1
  asContainingModule5 ::
    Data.Either.Either
      (Data.Aeson.BetterErrors.Internal.ParseError
         Data.Text.Internal.Text)
      Language.PureScript.Docs.RenderedCode.Types.ContainingModule
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Data.Either.Right
                   @ (Data.Aeson.BetterErrors.Internal.ParseError
                        Data.Text.Internal.Text)
                   @ Language.PureScript.Docs.RenderedCode.Types.ContainingModule
                   Language.PureScript.Docs.RenderedCode.Types.ThisModule) -}
7fd78b3d6be6c8453ba17c402b4bd2a1
  asContainingModule6 ::
    Data.Aeson.BetterErrors.Internal.ParseReader
    -> Data.Functor.Identity.Identity
         (Data.Either.Either
            (Data.Aeson.BetterErrors.Internal.ParseError
               Data.Text.Internal.Text)
            Language.PureScript.Docs.RenderedCode.Types.ContainingModule)
  {- Arity: 1,
     Unfolding: (Language.PureScript.Docs.RenderedCode.Types.asContainingModule12
                   @ Language.PureScript.Docs.RenderedCode.Types.ContainingModule
                   Language.PureScript.Docs.RenderedCode.Types.asContainingModule10
                   Language.PureScript.Docs.RenderedCode.Types.asContainingModule7
                     `cast`
                   ((<Data.Aeson.BetterErrors.Internal.ParseReader>_R
                     ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                   <Data.Either.Either
                                      (Data.Aeson.BetterErrors.Internal.ParseError
                                         Data.Text.Internal.Text)
                                      Language.PureScript.Docs.RenderedCode.Types.ContainingModule>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                  <Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                                     Data.Text.Internal.Text>_N
                                                                                                                  <Data.Functor.Identity.Identity>_R
                                                                                                                  <Language.PureScript.Docs.RenderedCode.Types.ContainingModule>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                                                                                                 <*>_N
                                                                                                                                                                                                 <Data.Aeson.BetterErrors.Internal.ParseReader>_R
                                                                                                                                                                                                 <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                    (Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                                                                                                                       Data.Text.Internal.Text)
                                                                                                                                                                                                    Data.Functor.Identity.Identity>_R
                                                                                                                                                                                                 <Language.PureScript.Docs.RenderedCode.Types.ContainingModule>_N) ; Sym (Data.Aeson.BetterErrors.Internal.N:ParseT[0]
                                                                                                                                                                                                                                                                              <Data.Text.Internal.Text>_N
                                                                                                                                                                                                                                                                              <Data.Functor.Identity.Identity>_R) <Language.PureScript.Docs.RenderedCode.Types.ContainingModule>_N))) -}
7fd78b3d6be6c8453ba17c402b4bd2a1
  asContainingModule7 ::
    Data.Aeson.BetterErrors.Internal.ParseReader
    -> Data.Either.Either
         (Data.Aeson.BetterErrors.Internal.ParseError
            Data.Text.Internal.Text)
         Language.PureScript.Docs.RenderedCode.Types.ContainingModule
  {- Arity: 1, Strictness: <L,U(U,U)>,
     Unfolding: (\ (x :: Data.Aeson.BetterErrors.Internal.ParseReader) ->
                 case (Data.Aeson.BetterErrors.Internal.$wnth
                         @ Data.Functor.Identity.Identity
                         @ Data.Text.Internal.Text
                         @ Language.PureScript.Names.ModuleName
                         Data.Functor.Identity.$fMonadIdentity
                         Language.PureScript.Docs.RenderedCode.Types.asContainingModule9
                         (Language.PureScript.Docs.RenderedCode.Types.asContainingModule8
                            @ Data.Text.Internal.Text)
                           `cast`
                         ((<Data.Aeson.BetterErrors.Internal.ParseReader>_R
                           ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                         <Data.Either.Either
                                            (Data.Aeson.BetterErrors.Internal.ParseError
                                               Data.Text.Internal.Text)
                                            Language.PureScript.Names.ModuleName>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                <Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                   Data.Text.Internal.Text>_N
                                                                                                <Data.Functor.Identity.Identity>_R
                                                                                                <Language.PureScript.Names.ModuleName>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                                                       <*>_N
                                                                                                                                                       <Data.Aeson.BetterErrors.Internal.ParseReader>_R
                                                                                                                                                       <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                          (Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                                                                             Data.Text.Internal.Text)
                                                                                                                                                          Data.Functor.Identity.Identity>_R
                                                                                                                                                       <Language.PureScript.Names.ModuleName>_N) ; Sym (Data.Aeson.BetterErrors.Internal.N:ParseT[0]
                                                                                                                                                                                                            <Data.Text.Internal.Text>_N
                                                                                                                                                                                                            <Data.Functor.Identity.Identity>_R) <Language.PureScript.Names.ModuleName>_N))
                         x)
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <Data.Aeson.BetterErrors.Internal.ParseError
                              Data.Text.Internal.Text>_N
                           <Data.Functor.Identity.Identity>_R
                           <Language.PureScript.Names.ModuleName>_N ; Data.Functor.Identity.N:Identity[0]
                                                                          <Data.Either.Either
                                                                             (Data.Aeson.BetterErrors.Internal.ParseError
                                                                                Data.Text.Internal.Text)
                                                                             Language.PureScript.Names.ModuleName>_R) of wild {
                   Data.Either.Left x1
                   -> Data.Either.Left
                        @ (Data.Aeson.BetterErrors.Internal.ParseError
                             Data.Text.Internal.Text)
                        @ Language.PureScript.Docs.RenderedCode.Types.ContainingModule
                        x1
                   Data.Either.Right y
                   -> Data.Either.Right
                        @ (Data.Aeson.BetterErrors.Internal.ParseError
                             Data.Text.Internal.Text)
                        @ Language.PureScript.Docs.RenderedCode.Types.ContainingModule
                        (Language.PureScript.Docs.RenderedCode.Types.OtherModule y) }) -}
3eec7527ef94960e626154d5d9ea7752
  asContainingModule8 ::
    Data.Aeson.BetterErrors.Internal.ParseReader
    -> Data.Either.Either
         (Data.Aeson.BetterErrors.Internal.ParseError err)
         Language.PureScript.Names.ModuleName
  {- Arity: 1, Strictness: <S(LS),1*U(1*C1(U),1*U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ @ err (w :: Data.Aeson.BetterErrors.Internal.ParseReader) ->
                 case w of ww { Data.Aeson.BetterErrors.Internal.ParseReader ww1 ww2 ->
                 Language.PureScript.Docs.RenderedCode.Types.$wasModuleName
                   @ err
                   ww1
                   ww2 }) -}
101d95652643e0287895e0d3301eee17
  asContainingModule9 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
5e36da664b08e623162b4c76cb76fcf5
  asLink ::
    Data.Aeson.BetterErrors.Internal.Parse
      Data.Text.Internal.Text
      Language.PureScript.Docs.RenderedCode.Types.Link
  {- Unfolding: (Language.PureScript.Docs.RenderedCode.Types.tryParse
                   @ Language.PureScript.Docs.RenderedCode.Types.Link
                   Language.PureScript.Docs.RenderedCode.Types.$fFromJSONLink12
                   Language.PureScript.Docs.RenderedCode.Types.$fFromJSONLink1) -}
0bf68f95cc438605559d4d420b903a78
  asNamespace ::
    Data.Aeson.BetterErrors.Internal.Parse
      Data.Text.Internal.Text
      Language.PureScript.Docs.RenderedCode.Types.Namespace
  {- Unfolding: (Language.PureScript.Docs.RenderedCode.Types.tryParse
                   @ Language.PureScript.Docs.RenderedCode.Types.Namespace
                   Language.PureScript.Docs.RenderedCode.Types.$fFromJSONNamespace12
                   Language.PureScript.Docs.RenderedCode.Types.$fFromJSONNamespace1) -}
6058947f1f23fe9eaa0cae5cad314873
  asRenderedCode ::
    Data.Aeson.BetterErrors.Internal.Parse
      Data.Text.Internal.Text
      Language.PureScript.Docs.RenderedCode.Types.RenderedCode
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Docs.RenderedCode.Types.asRenderedCode1
                  `cast`
                ((<Data.Aeson.BetterErrors.Internal.ParseReader>_R
                  ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                <Data.Either.Either
                                   (Data.Aeson.BetterErrors.Internal.ParseError
                                      Data.Text.Internal.Text)
                                   Language.PureScript.Docs.RenderedCode.Types.RenderedCode>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                           <Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                              Data.Text.Internal.Text>_N
                                                                                                           <Data.Functor.Identity.Identity>_R
                                                                                                           <Language.PureScript.Docs.RenderedCode.Types.RenderedCode>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                                                                                      <*>_N
                                                                                                                                                                                      <Data.Aeson.BetterErrors.Internal.ParseReader>_R
                                                                                                                                                                                      <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                         (Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                                                                                                            Data.Text.Internal.Text)
                                                                                                                                                                                         Data.Functor.Identity.Identity>_R
                                                                                                                                                                                      <Language.PureScript.Docs.RenderedCode.Types.RenderedCode>_N) ; Sym (Data.Aeson.BetterErrors.Internal.N:ParseT[0]
                                                                                                                                                                                                                                                               <Data.Text.Internal.Text>_N
                                                                                                                                                                                                                                                               <Data.Functor.Identity.Identity>_R) <Language.PureScript.Docs.RenderedCode.Types.RenderedCode>_N)) -}
7510cd899566fdf73211bfce19b85764
  asRenderedCode1 ::
    Data.Aeson.BetterErrors.Internal.ParseReader
    -> Data.Either.Either
         (Data.Aeson.BetterErrors.Internal.ParseError
            Data.Text.Internal.Text)
         Language.PureScript.Docs.RenderedCode.Types.RenderedCode
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Aeson.BetterErrors.Internal.ParseReader) ->
                 case (Language.PureScript.Docs.RenderedCode.Types.asRenderedCode2
                         `cast`
                       (Data.Aeson.BetterErrors.Internal.N:ParseT[0]
                            <Data.Text.Internal.Text>_N
                            <Data.Functor.Identity.Identity>_R <[Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                                           <*>_N
                                                                                                                                           <Data.Aeson.BetterErrors.Internal.ParseReader>_R
                                                                                                                                           <Control.Monad.Trans.Except.ExceptT
                                                                                                                                              (Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                                                                 Data.Text.Internal.Text)
                                                                                                                                              Data.Functor.Identity.Identity>_R
                                                                                                                                           <[Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]>_N)
                         x)
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <Data.Aeson.BetterErrors.Internal.ParseError
                              Data.Text.Internal.Text>_N
                           <Data.Functor.Identity.Identity>_R
                           <[Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]>_N ; Data.Functor.Identity.N:Identity[0]
                                                                                                       <Data.Either.Either
                                                                                                          (Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                             Data.Text.Internal.Text)
                                                                                                          [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]>_R) of wild {
                   Data.Either.Left x1
                   -> Data.Either.Left
                        @ (Data.Aeson.BetterErrors.Internal.ParseError
                             Data.Text.Internal.Text)
                        @ Language.PureScript.Docs.RenderedCode.Types.RenderedCode
                        x1
                   Data.Either.Right y
                   -> Data.Either.Right
                        @ (Data.Aeson.BetterErrors.Internal.ParseError
                             Data.Text.Internal.Text)
                        @ Language.PureScript.Docs.RenderedCode.Types.RenderedCode
                        y `cast`
                        (Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])) }) -}
aad7f72672cc62ea4af4a905ef1d5915
  asRenderedCode2 ::
    Data.Aeson.BetterErrors.Internal.ParseT
      Data.Text.Internal.Text
      Data.Functor.Identity.Identity
      [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
  {- Unfolding: (Data.Aeson.BetterErrors.Internal.$weachInArray
                   @ Data.Functor.Identity.Identity
                   @ Data.Text.Internal.Text
                   @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                   Data.Functor.Identity.$fMonadIdentity
                   Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement) -}
860c3bd007c3bc6e78d5490f530478fa
  asRenderedCodeElement ::
    Data.Aeson.BetterErrors.Internal.Parse
      Data.Text.Internal.Text
      Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
  {- Unfolding: (Language.PureScript.Docs.RenderedCode.Types.tryParse
                   @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                   Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement36
                   Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement1) -}
b7e61851bb8a65c34b250748c4b655a3
  asRenderedCodeElement1 ::
    [Data.Aeson.BetterErrors.Internal.ParseT
       Data.Text.Internal.Text
       Data.Functor.Identity.Identity
       Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Aeson.BetterErrors.Internal.ParseT
                        Data.Text.Internal.Text
                        Data.Functor.Identity.Identity
                        Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)
                   Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement34
                     `cast`
                   ((<Data.Aeson.BetterErrors.Internal.ParseReader>_R
                     ->_R Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                   <Data.Aeson.BetterErrors.Internal.ParseError
                                      Data.Text.Internal.Text>_N
                                   <Data.Functor.Identity.Identity>_R
                                   <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                     <*>_N
                                                                                                                     <Data.Aeson.BetterErrors.Internal.ParseReader>_R
                                                                                                                     <Control.Monad.Trans.Except.ExceptT
                                                                                                                        (Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                                           Data.Text.Internal.Text)
                                                                                                                        Data.Functor.Identity.Identity>_R
                                                                                                                     <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N) ; Sym (Data.Aeson.BetterErrors.Internal.N:ParseT[0]
                                                                                                                                                                                                     <Data.Text.Internal.Text>_N
                                                                                                                                                                                                     <Data.Functor.Identity.Identity>_R) <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N))
                   Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement2) -}
33a2fa963a80a42dd36f06f83ef474b7
  asRenderedCodeElement10 ::
    Language.PureScript.Docs.RenderedCode.Types.Link
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Language.PureScript.Docs.RenderedCode.Types.Link
                   Language.PureScript.Docs.RenderedCode.Types.ThisModule) -}
f3b4f9b6c28f811c11976ea339ec98cc
  asRenderedCodeElement11 ::
    Data.Aeson.BetterErrors.Internal.ParseReader
    -> Control.Monad.Trans.Except.ExceptT
         (Data.Aeson.BetterErrors.Internal.ParseError
            Data.Text.Internal.Text)
         Data.Functor.Identity.Identity
         Data.Text.Internal.Text
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(1*C1(U),1*U)>,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Data.Aeson.BetterErrors.Internal.ParseReader) ->
                 case w of ww { Data.Aeson.BetterErrors.Internal.ParseReader ww1 ww2 ->
                 Language.PureScript.Docs.RenderedCode.Types.$wm1 ww1 ww2 }) -}
9ce90ef94a159ba953e26cb645a00b17
  asRenderedCodeElement12 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement13) -}
0e6922fd63e296f88deec1ab1986e441
  asRenderedCodeElement13 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("kind"#) -}
aa6389645d0ca6f7c23ba187ee49658d
  asRenderedCodeElement14 ::
    Data.Aeson.BetterErrors.Internal.ParseReader
    -> Data.Functor.Identity.Identity
         (Data.Either.Either
            (Data.Aeson.BetterErrors.Internal.ParseError
               Data.Text.Internal.Text)
            Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)
  {- Arity: 1,
     Unfolding: (Language.PureScript.Docs.RenderedCode.Types.asContainingModule12
                   @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                   Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement18
                   Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement15
                     `cast`
                   (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                             <*>_N
                             <Data.Aeson.BetterErrors.Internal.ParseReader>_R
                             <Control.Monad.Trans.Except.ExceptT
                                (Data.Aeson.BetterErrors.Internal.ParseError
                                   Data.Text.Internal.Text)
                                Data.Functor.Identity.Identity>_R
                             <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N) ; Sym (Data.Aeson.BetterErrors.Internal.N:ParseT[0]
                                                                                                             <Data.Text.Internal.Text>_N
                                                                                                             <Data.Functor.Identity.Identity>_R) <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N)) -}
11d13fe57f3ea8d53e77326001e41ddf
  asRenderedCodeElement15 ::
    Data.Aeson.BetterErrors.Internal.ParseReader
    -> Control.Monad.Trans.Except.ExceptT
         (Data.Aeson.BetterErrors.Internal.ParseError
            Data.Text.Internal.Text)
         Data.Functor.Identity.Identity
         Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
  {- Arity: 1, Strictness: <L,U(U,U)>,
     Unfolding: (\ (r1 :: Data.Aeson.BetterErrors.Internal.ParseReader) ->
                 case (Data.Aeson.BetterErrors.Internal.$wnth
                         @ Data.Functor.Identity.Identity
                         @ Data.Text.Internal.Text
                         @ Data.Text.Internal.Text
                         Data.Functor.Identity.$fMonadIdentity
                         Language.PureScript.Docs.RenderedCode.Types.asContainingModule9
                         Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement11
                           `cast`
                         (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                   <*>_N
                                   <Data.Aeson.BetterErrors.Internal.ParseReader>_R
                                   <Control.Monad.Trans.Except.ExceptT
                                      (Data.Aeson.BetterErrors.Internal.ParseError
                                         Data.Text.Internal.Text)
                                      Data.Functor.Identity.Identity>_R
                                   <Data.Text.Internal.Text>_N) ; Sym (Data.Aeson.BetterErrors.Internal.N:ParseT[0]
                                                                           <Data.Text.Internal.Text>_N
                                                                           <Data.Functor.Identity.Identity>_R) <Data.Text.Internal.Text>_N)
                         r1)
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <Data.Aeson.BetterErrors.Internal.ParseError
                              Data.Text.Internal.Text>_N
                           <Data.Functor.Identity.Identity>_R
                           <Data.Text.Internal.Text>_N ; Data.Functor.Identity.N:Identity[0]
                                                             <Data.Either.Either
                                                                (Data.Aeson.BetterErrors.Internal.ParseError
                                                                   Data.Text.Internal.Text)
                                                                Data.Text.Internal.Text>_R) of wild {
                   Data.Either.Left x
                   -> (Data.Either.Left
                         @ (Data.Aeson.BetterErrors.Internal.ParseError
                              Data.Text.Internal.Text)
                         @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                         x)
                        `cast`
                      (Sym (Data.Functor.Identity.N:Identity[0]
                                <Data.Either.Either
                                   (Data.Aeson.BetterErrors.Internal.ParseError
                                      Data.Text.Internal.Text)
                                   Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                  <Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                                     Data.Text.Internal.Text>_N
                                                                                                                  <Data.Functor.Identity.Identity>_R
                                                                                                                  <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N))
                   Data.Either.Right y
                   -> case (Data.Aeson.BetterErrors.Internal.$wnth
                              @ Data.Functor.Identity.Identity
                              @ Data.Text.Internal.Text
                              @ Language.PureScript.Docs.RenderedCode.Types.Link
                              Data.Functor.Identity.$fMonadIdentity
                              Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement17
                              Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement16
                                `cast`
                              ((<Data.Aeson.BetterErrors.Internal.ParseReader>_R
                                ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                              <Data.Either.Either
                                                 (Data.Aeson.BetterErrors.Internal.ParseError
                                                    Data.Text.Internal.Text)
                                                 Language.PureScript.Docs.RenderedCode.Types.Link>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                 <Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                                    Data.Text.Internal.Text>_N
                                                                                                                 <Data.Functor.Identity.Identity>_R
                                                                                                                 <Language.PureScript.Docs.RenderedCode.Types.Link>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                                                                                    <*>_N
                                                                                                                                                                                    <Data.Aeson.BetterErrors.Internal.ParseReader>_R
                                                                                                                                                                                    <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                       (Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                                                                                                          Data.Text.Internal.Text)
                                                                                                                                                                                       Data.Functor.Identity.Identity>_R
                                                                                                                                                                                    <Language.PureScript.Docs.RenderedCode.Types.Link>_N) ; Sym (Data.Aeson.BetterErrors.Internal.N:ParseT[0]
                                                                                                                                                                                                                                                     <Data.Text.Internal.Text>_N
                                                                                                                                                                                                                                                     <Data.Functor.Identity.Identity>_R) <Language.PureScript.Docs.RenderedCode.Types.Link>_N))
                              r1)
                             `cast`
                           (Control.Monad.Trans.Except.N:ExceptT[0]
                                <Data.Aeson.BetterErrors.Internal.ParseError
                                   Data.Text.Internal.Text>_N
                                <Data.Functor.Identity.Identity>_R
                                <Language.PureScript.Docs.RenderedCode.Types.Link>_N ; Data.Functor.Identity.N:Identity[0]
                                                                                           <Data.Either.Either
                                                                                              (Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                 Data.Text.Internal.Text)
                                                                                              Language.PureScript.Docs.RenderedCode.Types.Link>_R) of wild1 {
                        Data.Either.Left e1
                        -> (Data.Either.Left
                              @ (Data.Aeson.BetterErrors.Internal.ParseError
                                   Data.Text.Internal.Text)
                              @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                              e1)
                             `cast`
                           (Sym (Data.Functor.Identity.N:Identity[0]
                                     <Data.Either.Either
                                        (Data.Aeson.BetterErrors.Internal.ParseError
                                           Data.Text.Internal.Text)
                                        Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                       <Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                                          Data.Text.Internal.Text>_N
                                                                                                                       <Data.Functor.Identity.Identity>_R
                                                                                                                       <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N))
                        Data.Either.Right x
                        -> (Data.Either.Right
                              @ (Data.Aeson.BetterErrors.Internal.ParseError
                                   Data.Text.Internal.Text)
                              @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                              (Language.PureScript.Docs.RenderedCode.Types.Symbol
                                 Language.PureScript.Docs.RenderedCode.Types.TypeLevel
                                 y
                                 x))
                             `cast`
                           (Sym (Data.Functor.Identity.N:Identity[0]
                                     <Data.Either.Either
                                        (Data.Aeson.BetterErrors.Internal.ParseError
                                           Data.Text.Internal.Text)
                                        Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                       <Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                                          Data.Text.Internal.Text>_N
                                                                                                                       <Data.Functor.Identity.Identity>_R
                                                                                                                       <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N)) } }) -}
9549ea0306891864d1f3dcc4f3619a37
  asRenderedCodeElement16 ::
    Data.Aeson.BetterErrors.Internal.ParseReader
    -> Data.Either.Either
         (Data.Aeson.BetterErrors.Internal.ParseError
            Data.Text.Internal.Text)
         Language.PureScript.Docs.RenderedCode.Types.Link
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Aeson.BetterErrors.Internal.ParseReader) ->
                 case (Language.PureScript.Docs.RenderedCode.Types.asContainingModule
                         `cast`
                       (Data.Aeson.BetterErrors.Internal.N:ParseT[0]
                            <Data.Text.Internal.Text>_N
                            <Data.Functor.Identity.Identity>_R <Language.PureScript.Docs.RenderedCode.Types.ContainingModule>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                                      <*>_N
                                                                                                                                      <Data.Aeson.BetterErrors.Internal.ParseReader>_R
                                                                                                                                      <Control.Monad.Trans.Except.ExceptT
                                                                                                                                         (Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                                                            Data.Text.Internal.Text)
                                                                                                                                         Data.Functor.Identity.Identity>_R
                                                                                                                                      <Language.PureScript.Docs.RenderedCode.Types.ContainingModule>_N)
                         x)
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <Data.Aeson.BetterErrors.Internal.ParseError
                              Data.Text.Internal.Text>_N
                           <Data.Functor.Identity.Identity>_R
                           <Language.PureScript.Docs.RenderedCode.Types.ContainingModule>_N ; Data.Functor.Identity.N:Identity[0]
                                                                                                  <Data.Either.Either
                                                                                                     (Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                        Data.Text.Internal.Text)
                                                                                                     Language.PureScript.Docs.RenderedCode.Types.ContainingModule>_R) of wild {
                   Data.Either.Left x1
                   -> Data.Either.Left
                        @ (Data.Aeson.BetterErrors.Internal.ParseError
                             Data.Text.Internal.Text)
                        @ Language.PureScript.Docs.RenderedCode.Types.Link
                        x1
                   Data.Either.Right y
                   -> Data.Either.Right
                        @ (Data.Aeson.BetterErrors.Internal.ParseError
                             Data.Text.Internal.Text)
                        @ Language.PureScript.Docs.RenderedCode.Types.Link
                        (Language.PureScript.Docs.RenderedCode.Types.Link y) }) -}
683bd09ca661ed44d06790e886d8687a
  asRenderedCodeElement17 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 2#) -}
750e0a116c04d4d7f351775cd21ab7ec
  asRenderedCodeElement18 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement19) -}
9852c2e2a30f90659cf0d585b6287112
  asRenderedCodeElement19 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ctor"#) -}
30797066cc792f2feb304f85e050f7b5
  asRenderedCodeElement2 ::
    [Data.Aeson.BetterErrors.Internal.ParseT
       Data.Text.Internal.Text
       Data.Functor.Identity.Identity
       Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Aeson.BetterErrors.Internal.ParseT
                        Data.Text.Internal.Text
                        Data.Functor.Identity.Identity
                        Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)
                   Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement32
                     `cast`
                   ((<Data.Aeson.BetterErrors.Internal.ParseReader>_R
                     ->_R Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                   <Data.Aeson.BetterErrors.Internal.ParseError
                                      Data.Text.Internal.Text>_N
                                   <Data.Functor.Identity.Identity>_R
                                   <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                     <*>_N
                                                                                                                     <Data.Aeson.BetterErrors.Internal.ParseReader>_R
                                                                                                                     <Control.Monad.Trans.Except.ExceptT
                                                                                                                        (Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                                           Data.Text.Internal.Text)
                                                                                                                        Data.Functor.Identity.Identity>_R
                                                                                                                     <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N) ; Sym (Data.Aeson.BetterErrors.Internal.N:ParseT[0]
                                                                                                                                                                                                     <Data.Text.Internal.Text>_N
                                                                                                                                                                                                     <Data.Functor.Identity.Identity>_R) <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N))
                   Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement3) -}
58a83f80d5213bb4ad23dc4f79f05a64
  asRenderedCodeElement20 ::
    Data.Aeson.BetterErrors.Internal.ParseReader
    -> Data.Functor.Identity.Identity
         (Data.Either.Either
            (Data.Aeson.BetterErrors.Internal.ParseError
               Data.Text.Internal.Text)
            Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)
  {- Arity: 1,
     Unfolding: (Language.PureScript.Docs.RenderedCode.Types.asContainingModule12
                   @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                   Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement22
                   Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement21
                     `cast`
                   (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                             <*>_N
                             <Data.Aeson.BetterErrors.Internal.ParseReader>_R
                             <Control.Monad.Trans.Except.ExceptT
                                (Data.Aeson.BetterErrors.Internal.ParseError
                                   Data.Text.Internal.Text)
                                Data.Functor.Identity.Identity>_R
                             <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N) ; Sym (Data.Aeson.BetterErrors.Internal.N:ParseT[0]
                                                                                                             <Data.Text.Internal.Text>_N
                                                                                                             <Data.Functor.Identity.Identity>_R) <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N)) -}
b92bc0528f330503ebc47e27d9bfcf10
  asRenderedCodeElement21 ::
    Data.Aeson.BetterErrors.Internal.ParseReader
    -> Control.Monad.Trans.Except.ExceptT
         (Data.Aeson.BetterErrors.Internal.ParseError
            Data.Text.Internal.Text)
         Data.Functor.Identity.Identity
         Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
  {- Arity: 1, Strictness: <L,U(U,U)>,
     Unfolding: (\ (r1 :: Data.Aeson.BetterErrors.Internal.ParseReader) ->
                 case (Data.Aeson.BetterErrors.Internal.$wnth
                         @ Data.Functor.Identity.Identity
                         @ Data.Text.Internal.Text
                         @ Data.Text.Internal.Text
                         Data.Functor.Identity.$fMonadIdentity
                         Language.PureScript.Docs.RenderedCode.Types.asContainingModule9
                         Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement11
                           `cast`
                         (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                   <*>_N
                                   <Data.Aeson.BetterErrors.Internal.ParseReader>_R
                                   <Control.Monad.Trans.Except.ExceptT
                                      (Data.Aeson.BetterErrors.Internal.ParseError
                                         Data.Text.Internal.Text)
                                      Data.Functor.Identity.Identity>_R
                                   <Data.Text.Internal.Text>_N) ; Sym (Data.Aeson.BetterErrors.Internal.N:ParseT[0]
                                                                           <Data.Text.Internal.Text>_N
                                                                           <Data.Functor.Identity.Identity>_R) <Data.Text.Internal.Text>_N)
                         r1)
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <Data.Aeson.BetterErrors.Internal.ParseError
                              Data.Text.Internal.Text>_N
                           <Data.Functor.Identity.Identity>_R
                           <Data.Text.Internal.Text>_N ; Data.Functor.Identity.N:Identity[0]
                                                             <Data.Either.Either
                                                                (Data.Aeson.BetterErrors.Internal.ParseError
                                                                   Data.Text.Internal.Text)
                                                                Data.Text.Internal.Text>_R) of wild {
                   Data.Either.Left x
                   -> (Data.Either.Left
                         @ (Data.Aeson.BetterErrors.Internal.ParseError
                              Data.Text.Internal.Text)
                         @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                         x)
                        `cast`
                      (Sym (Data.Functor.Identity.N:Identity[0]
                                <Data.Either.Either
                                   (Data.Aeson.BetterErrors.Internal.ParseError
                                      Data.Text.Internal.Text)
                                   Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                  <Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                                     Data.Text.Internal.Text>_N
                                                                                                                  <Data.Functor.Identity.Identity>_R
                                                                                                                  <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N))
                   Data.Either.Right y
                   -> case (Data.Aeson.BetterErrors.Internal.$wnth
                              @ Data.Functor.Identity.Identity
                              @ Data.Text.Internal.Text
                              @ Language.PureScript.Docs.RenderedCode.Types.Link
                              Data.Functor.Identity.$fMonadIdentity
                              Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement17
                              Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement16
                                `cast`
                              ((<Data.Aeson.BetterErrors.Internal.ParseReader>_R
                                ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                              <Data.Either.Either
                                                 (Data.Aeson.BetterErrors.Internal.ParseError
                                                    Data.Text.Internal.Text)
                                                 Language.PureScript.Docs.RenderedCode.Types.Link>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                 <Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                                    Data.Text.Internal.Text>_N
                                                                                                                 <Data.Functor.Identity.Identity>_R
                                                                                                                 <Language.PureScript.Docs.RenderedCode.Types.Link>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                                                                                    <*>_N
                                                                                                                                                                                    <Data.Aeson.BetterErrors.Internal.ParseReader>_R
                                                                                                                                                                                    <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                       (Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                                                                                                          Data.Text.Internal.Text)
                                                                                                                                                                                       Data.Functor.Identity.Identity>_R
                                                                                                                                                                                    <Language.PureScript.Docs.RenderedCode.Types.Link>_N) ; Sym (Data.Aeson.BetterErrors.Internal.N:ParseT[0]
                                                                                                                                                                                                                                                     <Data.Text.Internal.Text>_N
                                                                                                                                                                                                                                                     <Data.Functor.Identity.Identity>_R) <Language.PureScript.Docs.RenderedCode.Types.Link>_N))
                              r1)
                             `cast`
                           (Control.Monad.Trans.Except.N:ExceptT[0]
                                <Data.Aeson.BetterErrors.Internal.ParseError
                                   Data.Text.Internal.Text>_N
                                <Data.Functor.Identity.Identity>_R
                                <Language.PureScript.Docs.RenderedCode.Types.Link>_N ; Data.Functor.Identity.N:Identity[0]
                                                                                           <Data.Either.Either
                                                                                              (Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                 Data.Text.Internal.Text)
                                                                                              Language.PureScript.Docs.RenderedCode.Types.Link>_R) of wild1 {
                        Data.Either.Left e1
                        -> (Data.Either.Left
                              @ (Data.Aeson.BetterErrors.Internal.ParseError
                                   Data.Text.Internal.Text)
                              @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                              e1)
                             `cast`
                           (Sym (Data.Functor.Identity.N:Identity[0]
                                     <Data.Either.Either
                                        (Data.Aeson.BetterErrors.Internal.ParseError
                                           Data.Text.Internal.Text)
                                        Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                       <Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                                          Data.Text.Internal.Text>_N
                                                                                                                       <Data.Functor.Identity.Identity>_R
                                                                                                                       <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N))
                        Data.Either.Right x
                        -> (Data.Either.Right
                              @ (Data.Aeson.BetterErrors.Internal.ParseError
                                   Data.Text.Internal.Text)
                              @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                              (Language.PureScript.Docs.RenderedCode.Types.Symbol
                                 Language.PureScript.Docs.RenderedCode.Types.ValueLevel
                                 y
                                 x))
                             `cast`
                           (Sym (Data.Functor.Identity.N:Identity[0]
                                     <Data.Either.Either
                                        (Data.Aeson.BetterErrors.Internal.ParseError
                                           Data.Text.Internal.Text)
                                        Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                       <Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                                          Data.Text.Internal.Text>_N
                                                                                                                       <Data.Functor.Identity.Identity>_R
                                                                                                                       <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N)) } }) -}
90e8a4be28f0ae47ffbb70de448ccb34
  asRenderedCodeElement22 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement23) -}
701ce88d0fb7e19ef3091d7040372351
  asRenderedCodeElement23 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ident"#) -}
38d60ee46dae5423438dd71a7fefd31b
  asRenderedCodeElement24 ::
    Data.Aeson.BetterErrors.Internal.ParseReader
    -> Data.Functor.Identity.Identity
         (Data.Either.Either
            (Data.Aeson.BetterErrors.Internal.ParseError
               Data.Text.Internal.Text)
            Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)
  {- Arity: 1,
     Unfolding: (Language.PureScript.Docs.RenderedCode.Types.asContainingModule12
                   @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                   Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement27
                   Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement25
                     `cast`
                   (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                             <*>_N
                             <Data.Aeson.BetterErrors.Internal.ParseReader>_R
                             <Control.Monad.Trans.Except.ExceptT
                                (Data.Aeson.BetterErrors.Internal.ParseError
                                   Data.Text.Internal.Text)
                                Data.Functor.Identity.Identity>_R
                             <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N) ; Sym (Data.Aeson.BetterErrors.Internal.N:ParseT[0]
                                                                                                             <Data.Text.Internal.Text>_N
                                                                                                             <Data.Functor.Identity.Identity>_R) <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N)) -}
86e1dd2fb50354070c3f50a0c9ce1b78
  asRenderedCodeElement25 ::
    Data.Aeson.BetterErrors.Internal.ParseReader
    -> Control.Monad.Trans.Except.ExceptT
         (Data.Aeson.BetterErrors.Internal.ParseError
            Data.Text.Internal.Text)
         Data.Functor.Identity.Identity
         Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
  {- Arity: 1, Strictness: <L,U(U,U)>,
     Unfolding: (\ (r1 :: Data.Aeson.BetterErrors.Internal.ParseReader) ->
                 case (Data.Aeson.BetterErrors.Internal.$wnth
                         @ Data.Functor.Identity.Identity
                         @ Data.Text.Internal.Text
                         @ Language.PureScript.Docs.RenderedCode.Types.Namespace
                         Data.Functor.Identity.$fMonadIdentity
                         Language.PureScript.Docs.RenderedCode.Types.asContainingModule9
                         Language.PureScript.Docs.RenderedCode.Types.asNamespace
                         r1)
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <Data.Aeson.BetterErrors.Internal.ParseError
                              Data.Text.Internal.Text>_N
                           <Data.Functor.Identity.Identity>_R
                           <Language.PureScript.Docs.RenderedCode.Types.Namespace>_N ; Data.Functor.Identity.N:Identity[0]
                                                                                           <Data.Either.Either
                                                                                              (Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                 Data.Text.Internal.Text)
                                                                                              Language.PureScript.Docs.RenderedCode.Types.Namespace>_R) of wild {
                   Data.Either.Left x
                   -> (Data.Either.Left
                         @ (Data.Aeson.BetterErrors.Internal.ParseError
                              Data.Text.Internal.Text)
                         @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                         x)
                        `cast`
                      (Sym (Data.Functor.Identity.N:Identity[0]
                                <Data.Either.Either
                                   (Data.Aeson.BetterErrors.Internal.ParseError
                                      Data.Text.Internal.Text)
                                   Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                  <Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                                     Data.Text.Internal.Text>_N
                                                                                                                  <Data.Functor.Identity.Identity>_R
                                                                                                                  <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N))
                   Data.Either.Right y
                   -> case (Data.Aeson.BetterErrors.Internal.$wnth
                              @ Data.Functor.Identity.Identity
                              @ Data.Text.Internal.Text
                              @ Data.Text.Internal.Text
                              Data.Functor.Identity.$fMonadIdentity
                              Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement17
                              Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement11
                                `cast`
                              (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                        <*>_N
                                        <Data.Aeson.BetterErrors.Internal.ParseReader>_R
                                        <Control.Monad.Trans.Except.ExceptT
                                           (Data.Aeson.BetterErrors.Internal.ParseError
                                              Data.Text.Internal.Text)
                                           Data.Functor.Identity.Identity>_R
                                        <Data.Text.Internal.Text>_N) ; Sym (Data.Aeson.BetterErrors.Internal.N:ParseT[0]
                                                                                <Data.Text.Internal.Text>_N
                                                                                <Data.Functor.Identity.Identity>_R) <Data.Text.Internal.Text>_N)
                              r1)
                             `cast`
                           (Control.Monad.Trans.Except.N:ExceptT[0]
                                <Data.Aeson.BetterErrors.Internal.ParseError
                                   Data.Text.Internal.Text>_N
                                <Data.Functor.Identity.Identity>_R
                                <Data.Text.Internal.Text>_N ; Data.Functor.Identity.N:Identity[0]
                                                                  <Data.Either.Either
                                                                     (Data.Aeson.BetterErrors.Internal.ParseError
                                                                        Data.Text.Internal.Text)
                                                                     Data.Text.Internal.Text>_R) of wild1 {
                        Data.Either.Left e1
                        -> (Data.Either.Left
                              @ (Data.Aeson.BetterErrors.Internal.ParseError
                                   Data.Text.Internal.Text)
                              @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                              e1)
                             `cast`
                           (Sym (Data.Functor.Identity.N:Identity[0]
                                     <Data.Either.Either
                                        (Data.Aeson.BetterErrors.Internal.ParseError
                                           Data.Text.Internal.Text)
                                        Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                       <Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                                          Data.Text.Internal.Text>_N
                                                                                                                       <Data.Functor.Identity.Identity>_R
                                                                                                                       <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N))
                        Data.Either.Right x
                        -> case (Data.Aeson.BetterErrors.Internal.$wnth
                                   @ Data.Functor.Identity.Identity
                                   @ Data.Text.Internal.Text
                                   @ Language.PureScript.Docs.RenderedCode.Types.Link
                                   Data.Functor.Identity.$fMonadIdentity
                                   Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement26
                                   Language.PureScript.Docs.RenderedCode.Types.asLink
                                   r1)
                                  `cast`
                                (Control.Monad.Trans.Except.N:ExceptT[0]
                                     <Data.Aeson.BetterErrors.Internal.ParseError
                                        Data.Text.Internal.Text>_N
                                     <Data.Functor.Identity.Identity>_R
                                     <Language.PureScript.Docs.RenderedCode.Types.Link>_N ; Data.Functor.Identity.N:Identity[0]
                                                                                                <Data.Either.Either
                                                                                                   (Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                      Data.Text.Internal.Text)
                                                                                                   Language.PureScript.Docs.RenderedCode.Types.Link>_R) of wild2 {
                             Data.Either.Left e1
                             -> (Data.Either.Left
                                   @ (Data.Aeson.BetterErrors.Internal.ParseError
                                        Data.Text.Internal.Text)
                                   @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                                   e1)
                                  `cast`
                                (Sym (Data.Functor.Identity.N:Identity[0]
                                          <Data.Either.Either
                                             (Data.Aeson.BetterErrors.Internal.ParseError
                                                Data.Text.Internal.Text)
                                             Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                            <Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                                               Data.Text.Internal.Text>_N
                                                                                                                            <Data.Functor.Identity.Identity>_R
                                                                                                                            <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N))
                             Data.Either.Right x1
                             -> (Data.Either.Right
                                   @ (Data.Aeson.BetterErrors.Internal.ParseError
                                        Data.Text.Internal.Text)
                                   @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                                   (Language.PureScript.Docs.RenderedCode.Types.Symbol y x x1))
                                  `cast`
                                (Sym (Data.Functor.Identity.N:Identity[0]
                                          <Data.Either.Either
                                             (Data.Aeson.BetterErrors.Internal.ParseError
                                                Data.Text.Internal.Text)
                                             Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                            <Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                                               Data.Text.Internal.Text>_N
                                                                                                                            <Data.Functor.Identity.Identity>_R
                                                                                                                            <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N)) } } }) -}
22d53a2c64e5fa809a9c511f81e3c5fd
  asRenderedCodeElement26 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 3#) -}
4a17d220c3f2385fe2085454db30cd71
  asRenderedCodeElement27 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Docs.RenderedCode.Types.$fToJSONRenderedCode2) -}
cb7ad622a67e2dbb7fadfb098ee493fb
  asRenderedCodeElement28 ::
    Data.Aeson.BetterErrors.Internal.ParseReader
    -> Data.Functor.Identity.Identity
         (Data.Either.Either
            (Data.Aeson.BetterErrors.Internal.ParseError
               Data.Text.Internal.Text)
            Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)
  {- Arity: 1,
     Unfolding: (Language.PureScript.Docs.RenderedCode.Types.asContainingModule12
                   @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                   Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement31
                   Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement29
                     `cast`
                   ((<Data.Aeson.BetterErrors.Internal.ParseReader>_R
                     ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                   <Data.Either.Either
                                      (Data.Aeson.BetterErrors.Internal.ParseError
                                         Data.Text.Internal.Text)
                                      Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                     <Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                                        Data.Text.Internal.Text>_N
                                                                                                                     <Data.Functor.Identity.Identity>_R
                                                                                                                     <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                                                                                                       <*>_N
                                                                                                                                                                                                       <Data.Aeson.BetterErrors.Internal.ParseReader>_R
                                                                                                                                                                                                       <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                          (Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                                                                                                                             Data.Text.Internal.Text)
                                                                                                                                                                                                          Data.Functor.Identity.Identity>_R
                                                                                                                                                                                                       <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N) ; Sym (Data.Aeson.BetterErrors.Internal.N:ParseT[0]
                                                                                                                                                                                                                                                                                       <Data.Text.Internal.Text>_N
                                                                                                                                                                                                                                                                                       <Data.Functor.Identity.Identity>_R) <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N))) -}
67324350a896d716a3e4f04aa36f40d2
  asRenderedCodeElement29 ::
    Data.Aeson.BetterErrors.Internal.ParseReader
    -> Data.Either.Either
         (Data.Aeson.BetterErrors.Internal.ParseError
            Data.Text.Internal.Text)
         Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>m2,
     Unfolding: (\ (ds :: Data.Aeson.BetterErrors.Internal.ParseReader) ->
                 Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement30) -}
08cdf7ce7cbabf7c65657e93b1404267
  asRenderedCodeElement3 ::
    [Data.Aeson.BetterErrors.Internal.ParseT
       Data.Text.Internal.Text
       Data.Functor.Identity.Identity
       Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Aeson.BetterErrors.Internal.ParseT
                        Data.Text.Internal.Text
                        Data.Functor.Identity.Identity
                        Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)
                   Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement28
                     `cast`
                   ((<Data.Aeson.BetterErrors.Internal.ParseReader>_R
                     ->_R Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                   <Data.Aeson.BetterErrors.Internal.ParseError
                                      Data.Text.Internal.Text>_N
                                   <Data.Functor.Identity.Identity>_R
                                   <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                     <*>_N
                                                                                                                     <Data.Aeson.BetterErrors.Internal.ParseReader>_R
                                                                                                                     <Control.Monad.Trans.Except.ExceptT
                                                                                                                        (Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                                           Data.Text.Internal.Text)
                                                                                                                        Data.Functor.Identity.Identity>_R
                                                                                                                     <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N) ; Sym (Data.Aeson.BetterErrors.Internal.N:ParseT[0]
                                                                                                                                                                                                     <Data.Text.Internal.Text>_N
                                                                                                                                                                                                     <Data.Functor.Identity.Identity>_R) <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N))
                   Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement4) -}
9c7331c80146dbdfea4cccb9e067e1bb
  asRenderedCodeElement30 ::
    Data.Either.Either
      (Data.Aeson.BetterErrors.Internal.ParseError
         Data.Text.Internal.Text)
      Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Data.Either.Right
                   @ (Data.Aeson.BetterErrors.Internal.ParseError
                        Data.Text.Internal.Text)
                   @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                   Language.PureScript.Docs.RenderedCode.Types.Space) -}
8a17e634e1ae70dffe5330d0c9c5fb28
  asRenderedCodeElement31 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Docs.RenderedCode.Types.$fToJSONRenderedCode6) -}
73250fc3253e751d3faa10e0660b5131
  asRenderedCodeElement32 ::
    Data.Aeson.BetterErrors.Internal.ParseReader
    -> Data.Functor.Identity.Identity
         (Data.Either.Either
            (Data.Aeson.BetterErrors.Internal.ParseError
               Data.Text.Internal.Text)
            Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)
  {- Arity: 1, Strictness: <L,U(U,U)>,
     Unfolding: (\ (eta :: Data.Aeson.BetterErrors.Internal.ParseReader) ->
                 Language.PureScript.Docs.RenderedCode.Types.asContainingModule12
                   @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                   Language.PureScript.Docs.RenderedCode.Types.$fToJSONRenderedCode8
                   Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement33
                     `cast`
                   ((<Data.Aeson.BetterErrors.Internal.ParseReader>_R
                     ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                   <Data.Either.Either
                                      (Data.Aeson.BetterErrors.Internal.ParseError
                                         Data.Text.Internal.Text)
                                      Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                     <Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                                        Data.Text.Internal.Text>_N
                                                                                                                     <Data.Functor.Identity.Identity>_R
                                                                                                                     <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                                                                                                       <*>_N
                                                                                                                                                                                                       <Data.Aeson.BetterErrors.Internal.ParseReader>_R
                                                                                                                                                                                                       <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                          (Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                                                                                                                             Data.Text.Internal.Text)
                                                                                                                                                                                                          Data.Functor.Identity.Identity>_R
                                                                                                                                                                                                       <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N) ; Sym (Data.Aeson.BetterErrors.Internal.N:ParseT[0]
                                                                                                                                                                                                                                                                                       <Data.Text.Internal.Text>_N
                                                                                                                                                                                                                                                                                       <Data.Functor.Identity.Identity>_R) <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N))
                   eta) -}
2398e83f38de0f0c53db371984a23ce1
  asRenderedCodeElement33 ::
    Data.Aeson.BetterErrors.Internal.ParseReader
    -> Data.Either.Either
         (Data.Aeson.BetterErrors.Internal.ParseError
            Data.Text.Internal.Text)
         Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
  {- Arity: 1, Strictness: <L,U(U,U)>,
     Unfolding: (\ (x :: Data.Aeson.BetterErrors.Internal.ParseReader)[OneShot] ->
                 case (Data.Aeson.BetterErrors.Internal.$wnth
                         @ Data.Functor.Identity.Identity
                         @ Data.Text.Internal.Text
                         @ Data.Text.Internal.Text
                         Data.Functor.Identity.$fMonadIdentity
                         Language.PureScript.Docs.RenderedCode.Types.asContainingModule9
                         Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement11
                           `cast`
                         (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                   <*>_N
                                   <Data.Aeson.BetterErrors.Internal.ParseReader>_R
                                   <Control.Monad.Trans.Except.ExceptT
                                      (Data.Aeson.BetterErrors.Internal.ParseError
                                         Data.Text.Internal.Text)
                                      Data.Functor.Identity.Identity>_R
                                   <Data.Text.Internal.Text>_N) ; Sym (Data.Aeson.BetterErrors.Internal.N:ParseT[0]
                                                                           <Data.Text.Internal.Text>_N
                                                                           <Data.Functor.Identity.Identity>_R) <Data.Text.Internal.Text>_N)
                         x)
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <Data.Aeson.BetterErrors.Internal.ParseError
                              Data.Text.Internal.Text>_N
                           <Data.Functor.Identity.Identity>_R
                           <Data.Text.Internal.Text>_N ; Data.Functor.Identity.N:Identity[0]
                                                             <Data.Either.Either
                                                                (Data.Aeson.BetterErrors.Internal.ParseError
                                                                   Data.Text.Internal.Text)
                                                                Data.Text.Internal.Text>_R) of wild {
                   Data.Either.Left x1
                   -> Data.Either.Left
                        @ (Data.Aeson.BetterErrors.Internal.ParseError
                             Data.Text.Internal.Text)
                        @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                        x1
                   Data.Either.Right y
                   -> Data.Either.Right
                        @ (Data.Aeson.BetterErrors.Internal.ParseError
                             Data.Text.Internal.Text)
                        @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                        (Language.PureScript.Docs.RenderedCode.Types.Keyword y) }) -}
edd529cc579264a66e1244a9b2ca4634
  asRenderedCodeElement34 ::
    Data.Aeson.BetterErrors.Internal.ParseReader
    -> Data.Functor.Identity.Identity
         (Data.Either.Either
            (Data.Aeson.BetterErrors.Internal.ParseError
               Data.Text.Internal.Text)
            Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)
  {- Arity: 1, Strictness: <L,U(U,U)>,
     Unfolding: (\ (eta :: Data.Aeson.BetterErrors.Internal.ParseReader) ->
                 Language.PureScript.Docs.RenderedCode.Types.asContainingModule12
                   @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                   Language.PureScript.Docs.RenderedCode.Types.$fToJSONRenderedCode11
                   Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement35
                     `cast`
                   ((<Data.Aeson.BetterErrors.Internal.ParseReader>_R
                     ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                   <Data.Either.Either
                                      (Data.Aeson.BetterErrors.Internal.ParseError
                                         Data.Text.Internal.Text)
                                      Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                     <Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                                        Data.Text.Internal.Text>_N
                                                                                                                     <Data.Functor.Identity.Identity>_R
                                                                                                                     <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                                                                                                       <*>_N
                                                                                                                                                                                                       <Data.Aeson.BetterErrors.Internal.ParseReader>_R
                                                                                                                                                                                                       <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                          (Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                                                                                                                             Data.Text.Internal.Text)
                                                                                                                                                                                                          Data.Functor.Identity.Identity>_R
                                                                                                                                                                                                       <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N) ; Sym (Data.Aeson.BetterErrors.Internal.N:ParseT[0]
                                                                                                                                                                                                                                                                                       <Data.Text.Internal.Text>_N
                                                                                                                                                                                                                                                                                       <Data.Functor.Identity.Identity>_R) <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N))
                   eta) -}
04fbee361f39ec5ff94f4bb60e44461d
  asRenderedCodeElement35 ::
    Data.Aeson.BetterErrors.Internal.ParseReader
    -> Data.Either.Either
         (Data.Aeson.BetterErrors.Internal.ParseError
            Data.Text.Internal.Text)
         Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
  {- Arity: 1, Strictness: <L,U(U,U)>,
     Unfolding: (\ (x :: Data.Aeson.BetterErrors.Internal.ParseReader)[OneShot] ->
                 case (Data.Aeson.BetterErrors.Internal.$wnth
                         @ Data.Functor.Identity.Identity
                         @ Data.Text.Internal.Text
                         @ Data.Text.Internal.Text
                         Data.Functor.Identity.$fMonadIdentity
                         Language.PureScript.Docs.RenderedCode.Types.asContainingModule9
                         Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement11
                           `cast`
                         (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                   <*>_N
                                   <Data.Aeson.BetterErrors.Internal.ParseReader>_R
                                   <Control.Monad.Trans.Except.ExceptT
                                      (Data.Aeson.BetterErrors.Internal.ParseError
                                         Data.Text.Internal.Text)
                                      Data.Functor.Identity.Identity>_R
                                   <Data.Text.Internal.Text>_N) ; Sym (Data.Aeson.BetterErrors.Internal.N:ParseT[0]
                                                                           <Data.Text.Internal.Text>_N
                                                                           <Data.Functor.Identity.Identity>_R) <Data.Text.Internal.Text>_N)
                         x)
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <Data.Aeson.BetterErrors.Internal.ParseError
                              Data.Text.Internal.Text>_N
                           <Data.Functor.Identity.Identity>_R
                           <Data.Text.Internal.Text>_N ; Data.Functor.Identity.N:Identity[0]
                                                             <Data.Either.Either
                                                                (Data.Aeson.BetterErrors.Internal.ParseError
                                                                   Data.Text.Internal.Text)
                                                                Data.Text.Internal.Text>_R) of wild {
                   Data.Either.Left x1
                   -> Data.Either.Left
                        @ (Data.Aeson.BetterErrors.Internal.ParseError
                             Data.Text.Internal.Text)
                        @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                        x1
                   Data.Either.Right y
                   -> Data.Either.Right
                        @ (Data.Aeson.BetterErrors.Internal.ParseError
                             Data.Text.Internal.Text)
                        @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                        (Language.PureScript.Docs.RenderedCode.Types.Syntax y) }) -}
2200cd63c1792ef7f8430311b2c278c1
  asRenderedCodeElement36 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Docs.RenderedCode.Types.$tcRenderedCodeElement2) -}
7d634996a1532f7bf3a394efa9d0e4e0
  asRenderedCodeElement4 ::
    [Data.Aeson.BetterErrors.Internal.ParseT
       Data.Text.Internal.Text
       Data.Functor.Identity.Identity
       Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Aeson.BetterErrors.Internal.ParseT
                        Data.Text.Internal.Text
                        Data.Functor.Identity.Identity
                        Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)
                   Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement24
                     `cast`
                   ((<Data.Aeson.BetterErrors.Internal.ParseReader>_R
                     ->_R Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                   <Data.Aeson.BetterErrors.Internal.ParseError
                                      Data.Text.Internal.Text>_N
                                   <Data.Functor.Identity.Identity>_R
                                   <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                     <*>_N
                                                                                                                     <Data.Aeson.BetterErrors.Internal.ParseReader>_R
                                                                                                                     <Control.Monad.Trans.Except.ExceptT
                                                                                                                        (Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                                           Data.Text.Internal.Text)
                                                                                                                        Data.Functor.Identity.Identity>_R
                                                                                                                     <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N) ; Sym (Data.Aeson.BetterErrors.Internal.N:ParseT[0]
                                                                                                                                                                                                     <Data.Text.Internal.Text>_N
                                                                                                                                                                                                     <Data.Functor.Identity.Identity>_R) <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N))
                   Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement5) -}
75924960799794940e43cff510d8b5ba
  asRenderedCodeElement5 ::
    [Data.Aeson.BetterErrors.Internal.ParseT
       Data.Text.Internal.Text
       Data.Functor.Identity.Identity
       Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Aeson.BetterErrors.Internal.ParseT
                        Data.Text.Internal.Text
                        Data.Functor.Identity.Identity
                        Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)
                   Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement20
                     `cast`
                   ((<Data.Aeson.BetterErrors.Internal.ParseReader>_R
                     ->_R Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                   <Data.Aeson.BetterErrors.Internal.ParseError
                                      Data.Text.Internal.Text>_N
                                   <Data.Functor.Identity.Identity>_R
                                   <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                     <*>_N
                                                                                                                     <Data.Aeson.BetterErrors.Internal.ParseReader>_R
                                                                                                                     <Control.Monad.Trans.Except.ExceptT
                                                                                                                        (Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                                           Data.Text.Internal.Text)
                                                                                                                        Data.Functor.Identity.Identity>_R
                                                                                                                     <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N) ; Sym (Data.Aeson.BetterErrors.Internal.N:ParseT[0]
                                                                                                                                                                                                     <Data.Text.Internal.Text>_N
                                                                                                                                                                                                     <Data.Functor.Identity.Identity>_R) <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N))
                   Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement6) -}
cb0395e46675b7964bd008ca595a2ca8
  asRenderedCodeElement6 ::
    [Data.Aeson.BetterErrors.Internal.ParseT
       Data.Text.Internal.Text
       Data.Functor.Identity.Identity
       Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Aeson.BetterErrors.Internal.ParseT
                        Data.Text.Internal.Text
                        Data.Functor.Identity.Identity
                        Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)
                   Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement14
                     `cast`
                   ((<Data.Aeson.BetterErrors.Internal.ParseReader>_R
                     ->_R Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                   <Data.Aeson.BetterErrors.Internal.ParseError
                                      Data.Text.Internal.Text>_N
                                   <Data.Functor.Identity.Identity>_R
                                   <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                     <*>_N
                                                                                                                     <Data.Aeson.BetterErrors.Internal.ParseReader>_R
                                                                                                                     <Control.Monad.Trans.Except.ExceptT
                                                                                                                        (Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                                           Data.Text.Internal.Text)
                                                                                                                        Data.Functor.Identity.Identity>_R
                                                                                                                     <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N) ; Sym (Data.Aeson.BetterErrors.Internal.N:ParseT[0]
                                                                                                                                                                                                     <Data.Text.Internal.Text>_N
                                                                                                                                                                                                     <Data.Functor.Identity.Identity>_R) <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N))
                   Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement7) -}
2bfbcbed7cdbe26842f475c814c59460
  asRenderedCodeElement7 ::
    [Data.Aeson.BetterErrors.Internal.ParseT
       Data.Text.Internal.Text
       Data.Functor.Identity.Identity
       Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Aeson.BetterErrors.Internal.ParseT
                        Data.Text.Internal.Text
                        Data.Functor.Identity.Identity
                        Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)
                   Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement8
                     `cast`
                   ((<Data.Aeson.BetterErrors.Internal.ParseReader>_R
                     ->_R Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                   <Data.Aeson.BetterErrors.Internal.ParseError
                                      Data.Text.Internal.Text>_N
                                   <Data.Functor.Identity.Identity>_R
                                   <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                     <*>_N
                                                                                                                     <Data.Aeson.BetterErrors.Internal.ParseReader>_R
                                                                                                                     <Control.Monad.Trans.Except.ExceptT
                                                                                                                        (Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                                           Data.Text.Internal.Text)
                                                                                                                        Data.Functor.Identity.Identity>_R
                                                                                                                     <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N) ; Sym (Data.Aeson.BetterErrors.Internal.N:ParseT[0]
                                                                                                                                                                                                     <Data.Text.Internal.Text>_N
                                                                                                                                                                                                     <Data.Functor.Identity.Identity>_R) <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N))
                   (GHC.Types.[]
                      @ (Data.Aeson.BetterErrors.Internal.ParseT
                           Data.Text.Internal.Text
                           Data.Functor.Identity.Identity
                           Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement))) -}
29552a2243a54612579b0a8507c5955b
  asRenderedCodeElement8 ::
    Data.Aeson.BetterErrors.Internal.ParseReader
    -> Data.Functor.Identity.Identity
         (Data.Either.Either
            (Data.Aeson.BetterErrors.Internal.ParseError
               Data.Text.Internal.Text)
            Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)
  {- Arity: 1,
     Unfolding: (Language.PureScript.Docs.RenderedCode.Types.asContainingModule12
                   @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                   Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement12
                   Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement9
                     `cast`
                   (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                             <*>_N
                             <Data.Aeson.BetterErrors.Internal.ParseReader>_R
                             <Control.Monad.Trans.Except.ExceptT
                                (Data.Aeson.BetterErrors.Internal.ParseError
                                   Data.Text.Internal.Text)
                                Data.Functor.Identity.Identity>_R
                             <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N) ; Sym (Data.Aeson.BetterErrors.Internal.N:ParseT[0]
                                                                                                             <Data.Text.Internal.Text>_N
                                                                                                             <Data.Functor.Identity.Identity>_R) <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N)) -}
c2caf61707eb0150325c58812454b2b7
  asRenderedCodeElement9 ::
    Data.Aeson.BetterErrors.Internal.ParseReader
    -> Control.Monad.Trans.Except.ExceptT
         (Data.Aeson.BetterErrors.Internal.ParseError
            Data.Text.Internal.Text)
         Data.Functor.Identity.Identity
         Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
  {- Arity: 1, Strictness: <L,U(U,U)>,
     Unfolding: (\ (r1 :: Data.Aeson.BetterErrors.Internal.ParseReader) ->
                 case (Data.Aeson.BetterErrors.Internal.$wnth
                         @ Data.Functor.Identity.Identity
                         @ Data.Text.Internal.Text
                         @ Data.Text.Internal.Text
                         Data.Functor.Identity.$fMonadIdentity
                         Language.PureScript.Docs.RenderedCode.Types.asContainingModule9
                         Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement11
                           `cast`
                         (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                   <*>_N
                                   <Data.Aeson.BetterErrors.Internal.ParseReader>_R
                                   <Control.Monad.Trans.Except.ExceptT
                                      (Data.Aeson.BetterErrors.Internal.ParseError
                                         Data.Text.Internal.Text)
                                      Data.Functor.Identity.Identity>_R
                                   <Data.Text.Internal.Text>_N) ; Sym (Data.Aeson.BetterErrors.Internal.N:ParseT[0]
                                                                           <Data.Text.Internal.Text>_N
                                                                           <Data.Functor.Identity.Identity>_R) <Data.Text.Internal.Text>_N)
                         r1)
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <Data.Aeson.BetterErrors.Internal.ParseError
                              Data.Text.Internal.Text>_N
                           <Data.Functor.Identity.Identity>_R
                           <Data.Text.Internal.Text>_N ; Data.Functor.Identity.N:Identity[0]
                                                             <Data.Either.Either
                                                                (Data.Aeson.BetterErrors.Internal.ParseError
                                                                   Data.Text.Internal.Text)
                                                                Data.Text.Internal.Text>_R) of wild {
                   Data.Either.Left x
                   -> (Data.Either.Left
                         @ (Data.Aeson.BetterErrors.Internal.ParseError
                              Data.Text.Internal.Text)
                         @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                         x)
                        `cast`
                      (Sym (Data.Functor.Identity.N:Identity[0]
                                <Data.Either.Either
                                   (Data.Aeson.BetterErrors.Internal.ParseError
                                      Data.Text.Internal.Text)
                                   Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                  <Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                                     Data.Text.Internal.Text>_N
                                                                                                                  <Data.Functor.Identity.Identity>_R
                                                                                                                  <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N))
                   Data.Either.Right y
                   -> (Data.Either.Right
                         @ (Data.Aeson.BetterErrors.Internal.ParseError
                              Data.Text.Internal.Text)
                         @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                         (Language.PureScript.Docs.RenderedCode.Types.Symbol
                            Language.PureScript.Docs.RenderedCode.Types.KindLevel
                            y
                            Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement10))
                        `cast`
                      (Sym (Data.Functor.Identity.N:Identity[0]
                                <Data.Either.Either
                                   (Data.Aeson.BetterErrors.Internal.ParseError
                                      Data.Text.Internal.Text)
                                   Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                  <Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                                     Data.Text.Internal.Text>_N
                                                                                                                  <Data.Functor.Identity.Identity>_R
                                                                                                                  <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N)) }) -}
d4c018c41e49fa76958505ed2ca8a9d9
  containingModuleToMaybe ::
    Language.PureScript.Docs.RenderedCode.Types.ContainingModule
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Docs.RenderedCode.Types.ContainingModule) ->
                 case ds of wild {
                   Language.PureScript.Docs.RenderedCode.Types.ThisModule
                   -> GHC.Base.Nothing @ Language.PureScript.Names.ModuleName
                   Language.PureScript.Docs.RenderedCode.Types.OtherModule mn
                   -> GHC.Base.Just @ Language.PureScript.Names.ModuleName mn }) -}
55d937c1ada98630a10a24c5fa4e6195
  dataCtor ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ConstructorName)
    -> Language.PureScript.Docs.RenderedCode.Types.RenderedCode
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(1*U,U)>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Names.Qualified
                            (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.ConstructorName)) ->
                 case ds of wild { Language.PureScript.Names.Qualified mn x ->
                 (GHC.Types.:
                    @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                    (Language.PureScript.Docs.RenderedCode.Types.Symbol
                       Language.PureScript.Docs.RenderedCode.Types.ValueLevel
                       x `cast`
                       (Language.PureScript.Names.N:ProperName[0]
                            <'Language.PureScript.Names.ConstructorName>_P)
                       (Language.PureScript.Docs.RenderedCode.Types.Link
                          (Language.PureScript.Docs.RenderedCode.Types.maybeToContainingModule
                             mn)))
                    (GHC.Types.[]
                       @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement))
                   `cast`
                 (Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])) }) -}
6c94d76ead6272f7111c45f99e1d1162
  fromContainingModule ::
    Language.PureScript.Names.ModuleName
    -> Language.PureScript.Docs.RenderedCode.Types.ContainingModule
    -> Language.PureScript.Names.ModuleName
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (def :: Language.PureScript.Names.ModuleName)
                   (ds :: Language.PureScript.Docs.RenderedCode.Types.ContainingModule) ->
                 case ds of wild {
                   Language.PureScript.Docs.RenderedCode.Types.ThisModule -> def
                   Language.PureScript.Docs.RenderedCode.Types.OtherModule mn
                   -> mn }) -}
e3078abbf028fac3bda9a6f35b357441
  fromQualified ::
    Language.PureScript.Names.Qualified a
    -> (Language.PureScript.Docs.RenderedCode.Types.ContainingModule,
        a)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(1*U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: Language.PureScript.Names.Qualified a) ->
                 case ds of wild { Language.PureScript.Names.Qualified mn x ->
                 (Language.PureScript.Docs.RenderedCode.Types.maybeToContainingModule
                    mn,
                  x) }) -}
1edc6188e1543cc534039e129ed205e2
  ident ::
    Language.PureScript.Names.Qualified Language.PureScript.Names.Ident
    -> Language.PureScript.Docs.RenderedCode.Types.RenderedCode
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U)>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Names.Qualified
                            Language.PureScript.Names.Ident) ->
                 case ds of wild { Language.PureScript.Names.Qualified mn x ->
                 (GHC.Types.:
                    @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                    (Language.PureScript.Docs.RenderedCode.Types.Symbol
                       Language.PureScript.Docs.RenderedCode.Types.ValueLevel
                       (Language.PureScript.Names.runIdent x)
                       (Language.PureScript.Docs.RenderedCode.Types.Link
                          (Language.PureScript.Docs.RenderedCode.Types.maybeToContainingModule
                             mn)))
                    (GHC.Types.[]
                       @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement))
                   `cast`
                 (Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])) }) -}
f1aae0f6ee3d35bf6919f5ba7223e983
  keyword ::
    Data.Text.Internal.Text
    -> Language.PureScript.Docs.RenderedCode.Types.RenderedCode
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m2,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Docs.RenderedCode.Types.keyword1
                  `cast`
                (<Data.Text.Internal.Text>_R
                 ->_R Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])) -}
d935a84e841dc1121239d2de58a2070f
  keyword1 ::
    Data.Text.Internal.Text
    -> [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (kw :: Data.Text.Internal.Text) ->
                 GHC.Types.:
                   @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                   (Language.PureScript.Docs.RenderedCode.Types.Keyword kw)
                   (GHC.Types.[]
                      @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)) -}
07177d96fd9c86af218318beac9e40c6
  keywordAs ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCode
  {- Strictness: m2,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Docs.RenderedCode.Types.keywordAs1
                  `cast`
                (Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])) -}
0be08fae2cf94d9f41804433c15ff399
  keywordAs1 ::
    [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                   Language.PureScript.Docs.RenderedCode.Types.keywordAs2
                   (GHC.Types.[]
                      @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)) -}
e538ca2fb9540ff3938d0a3dcf9f8eff
  keywordAs2 ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
  {- Strictness: m2,
     Unfolding: (Language.PureScript.Docs.RenderedCode.Types.Keyword
                   Language.PureScript.Docs.RenderedCode.Types.keywordAs3) -}
735008a88f01ce51c1197cd2c4b577cb
  keywordAs3 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Docs.RenderedCode.Types.keywordAs4) -}
90d3379d355eb1b594daa8c88a91bec6
  keywordAs4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("as"#) -}
6c863eaac5c66722ab79934c0ddff415
  keywordClass ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCode
  {- Strictness: m2,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Docs.RenderedCode.Types.keywordClass1
                  `cast`
                (Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])) -}
ced6dbf4f4d4a674a967a19fe6c6bcb9
  keywordClass1 ::
    [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                   Language.PureScript.Docs.RenderedCode.Types.keywordClass2
                   (GHC.Types.[]
                      @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)) -}
bd9f23ed86a834ce00b86e0637deb9f5
  keywordClass2 ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
  {- Strictness: m2,
     Unfolding: (Language.PureScript.Docs.RenderedCode.Types.Keyword
                   Language.PureScript.Docs.RenderedCode.Types.keywordClass3) -}
bc82c61753189838b3a368552a494180
  keywordClass3 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Docs.RenderedCode.Types.keywordClass4) -}
3c66b3afd77dc68ee621af1cf1f72fc1
  keywordClass4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("class"#) -}
64474e9d7dfd465954644b9df6a8feac
  keywordData ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCode
  {- Strictness: m2,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Docs.RenderedCode.Types.keywordData1
                  `cast`
                (Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])) -}
5b48d083ead59a832c6d905d199d32f8
  keywordData1 ::
    [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                   Language.PureScript.Docs.RenderedCode.Types.keywordData2
                   (GHC.Types.[]
                      @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)) -}
87de6ad30dd7cecb777af7cf3cb7f55a
  keywordData2 ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
  {- Strictness: m2,
     Unfolding: (Language.PureScript.Docs.RenderedCode.Types.Keyword
                   Language.PureScript.Docs.RenderedCode.Types.keywordData3) -}
a62f3f73a35743862077135b0e374acb
  keywordData3 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Docs.RenderedCode.Types.keywordData4) -}
30eb613f0ea7b7049e0921e44fec6fc8
  keywordData4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("data"#) -}
2251146ecf774cfff36ec014a0b3f4e6
  keywordFixity ::
    Language.PureScript.AST.Operators.Associativity
    -> Language.PureScript.Docs.RenderedCode.Types.RenderedCode
  {- Arity: 1, Strictness: <S,1*U>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.AST.Operators.Associativity) ->
                 case ds of wild {
                   Language.PureScript.AST.Operators.Infixl
                   -> Language.PureScript.Docs.RenderedCode.Types.keywordFixity9
                        `cast`
                      (Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0]))
                   Language.PureScript.AST.Operators.Infixr
                   -> Language.PureScript.Docs.RenderedCode.Types.keywordFixity5
                        `cast`
                      (Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0]))
                   Language.PureScript.AST.Operators.Infix
                   -> Language.PureScript.Docs.RenderedCode.Types.keywordFixity1
                        `cast`
                      (Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])) }) -}
d996d5ff57879bdfa16511a9b613fb0f
  keywordFixity1 ::
    [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                   Language.PureScript.Docs.RenderedCode.Types.keywordFixity2
                   (GHC.Types.[]
                      @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)) -}
ada1c4c934adbb65c9639f79cd57c999
  keywordFixity10 ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
  {- Strictness: m2,
     Unfolding: (Language.PureScript.Docs.RenderedCode.Types.Keyword
                   Language.PureScript.Docs.RenderedCode.Types.keywordFixity11) -}
716e6b63fddbf783d58f56b673c243ec
  keywordFixity11 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Docs.RenderedCode.Types.keywordFixity12) -}
5e2b44235fa945cebe693d359e103548
  keywordFixity12 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("infixl"#) -}
5c04f12c3d47de3aa727f8e81c7fd277
  keywordFixity2 ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
  {- Strictness: m2,
     Unfolding: (Language.PureScript.Docs.RenderedCode.Types.Keyword
                   Language.PureScript.Docs.RenderedCode.Types.keywordFixity3) -}
14d0d62e5d3075e6f3ce48c0f6ef6b65
  keywordFixity3 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Docs.RenderedCode.Types.keywordFixity4) -}
6e97851a6962f459dd53721463d01919
  keywordFixity4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("infix"#) -}
d5aa75d8f42b65593a7a5efa84e5316b
  keywordFixity5 ::
    [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                   Language.PureScript.Docs.RenderedCode.Types.keywordFixity6
                   (GHC.Types.[]
                      @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)) -}
4bb5b016113915b211affa4e8ce73b2c
  keywordFixity6 ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
  {- Strictness: m2,
     Unfolding: (Language.PureScript.Docs.RenderedCode.Types.Keyword
                   Language.PureScript.Docs.RenderedCode.Types.keywordFixity7) -}
ab483ce926c9c42da5aa748ca3ddd5f0
  keywordFixity7 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Docs.RenderedCode.Types.keywordFixity8) -}
95bb48654e2e68642e7e7a48ebd3d6f0
  keywordFixity8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("infixr"#) -}
23345e6ac686ac81c88fbaac86b18ec0
  keywordFixity9 ::
    [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                   Language.PureScript.Docs.RenderedCode.Types.keywordFixity10
                   (GHC.Types.[]
                      @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)) -}
a24777c5cd08c7ec239709f63a66077b
  keywordForall ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCode
  {- Strictness: m2,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Docs.RenderedCode.Types.keywordForall1
                  `cast`
                (Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])) -}
1ee522afd9d08e205f581ba10ca93a4b
  keywordForall1 ::
    [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                   Language.PureScript.Docs.RenderedCode.Types.keywordForall2
                   (GHC.Types.[]
                      @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)) -}
e6d0ab96a0b143f6c1f4912ae7014330
  keywordForall2 ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
  {- Strictness: m2,
     Unfolding: (Language.PureScript.Docs.RenderedCode.Types.Keyword
                   Language.PureScript.Docs.RenderedCode.Types.keywordForall3) -}
89a5f7f4b92380866f0a5a94df93bccc
  keywordForall3 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Docs.RenderedCode.Types.keywordForall4) -}
ef3ee58e90662fe8ac65ba33e67c5a60
  keywordForall4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("forall"#) -}
8279dbfe041508986257a64136678e67
  keywordInstance ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCode
  {- Strictness: m2,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Docs.RenderedCode.Types.keywordInstance1
                  `cast`
                (Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])) -}
226dc425136d6084418e7e0342f9dc73
  keywordInstance1 ::
    [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                   Language.PureScript.Docs.RenderedCode.Types.keywordInstance2
                   (GHC.Types.[]
                      @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)) -}
08a594a3789a4ae69f4987386c29823b
  keywordInstance2 ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
  {- Strictness: m2,
     Unfolding: (Language.PureScript.Docs.RenderedCode.Types.Keyword
                   Language.PureScript.Docs.RenderedCode.Types.keywordInstance3) -}
5494bc4cb4cf2974d1ea68a022f03adf
  keywordInstance3 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Docs.RenderedCode.Types.keywordInstance4) -}
a15bf6863c12c292cf675752cb96f63a
  keywordInstance4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("instance"#) -}
f1d9e5d7c98c110289dfbd8b3eec8697
  keywordKind ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCode
  {- Strictness: m2,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Docs.RenderedCode.Types.keywordKind1
                  `cast`
                (Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])) -}
934ea33dc1ae8a3069f82891e9459129
  keywordKind1 ::
    [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                   Language.PureScript.Docs.RenderedCode.Types.keywordKind2
                   (GHC.Types.[]
                      @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)) -}
49252bd833427eb2b471aaf20cf13e5b
  keywordKind2 ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
  {- Strictness: m2,
     Unfolding: (Language.PureScript.Docs.RenderedCode.Types.Keyword
                   Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement12) -}
b889adf6b92320ad56008a216cc6f2ee
  keywordNewtype ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCode
  {- Strictness: m2,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Docs.RenderedCode.Types.keywordNewtype1
                  `cast`
                (Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])) -}
1508fa1a8c3914d12b759e19aa58255d
  keywordNewtype1 ::
    [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                   Language.PureScript.Docs.RenderedCode.Types.keywordNewtype2
                   (GHC.Types.[]
                      @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)) -}
b4478e8a6f96d60eeb2d9764a228c7e8
  keywordNewtype2 ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
  {- Strictness: m2,
     Unfolding: (Language.PureScript.Docs.RenderedCode.Types.Keyword
                   Language.PureScript.Docs.RenderedCode.Types.keywordNewtype3) -}
fc81a09f979b493dccc2aabff0a60d6a
  keywordNewtype3 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Docs.RenderedCode.Types.keywordNewtype4) -}
c8df516914de2071bca8637ee9e4f327
  keywordNewtype4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("newtype"#) -}
3f3ac34c1543fa96adcb27db726783b6
  keywordType ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCode
  {- Strictness: m2,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Docs.RenderedCode.Types.keywordType1
                  `cast`
                (Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])) -}
3ef599ac1d5715333babb181f6f3a123
  keywordType1 ::
    [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                   Language.PureScript.Docs.RenderedCode.Types.alias2
                   (GHC.Types.[]
                      @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)) -}
ebdeaf56a7806ca9667d2c92efa46d90
  keywordWhere ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCode
  {- Strictness: m2,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Docs.RenderedCode.Types.keywordWhere1
                  `cast`
                (Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])) -}
54282a4e9811510a344ebba128425271
  keywordWhere1 ::
    [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                   Language.PureScript.Docs.RenderedCode.Types.keywordWhere2
                   (GHC.Types.[]
                      @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)) -}
b9dce528f3632fa88795de9c31548035
  keywordWhere2 ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
  {- Strictness: m2,
     Unfolding: (Language.PureScript.Docs.RenderedCode.Types.Keyword
                   Language.PureScript.Docs.RenderedCode.Types.keywordWhere3) -}
f8c16229b1621414525a007f51b103da
  keywordWhere3 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Docs.RenderedCode.Types.keywordWhere4) -}
00cf0c9ea7d5c3d89b0ed008aab5d804
  keywordWhere4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("where"#) -}
c8c3bb5f95f1f9a3537e6f9dde0cc09b
  kind ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.KindName)
    -> Language.PureScript.Docs.RenderedCode.Types.RenderedCode
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(1*U,U)>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Names.Qualified
                            (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.KindName)) ->
                 case ds of wild { Language.PureScript.Names.Qualified mn x ->
                 (GHC.Types.:
                    @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                    (Language.PureScript.Docs.RenderedCode.Types.Symbol
                       Language.PureScript.Docs.RenderedCode.Types.KindLevel
                       x `cast`
                       (Language.PureScript.Names.N:ProperName[0]
                            <'Language.PureScript.Names.KindName>_P)
                       (Language.PureScript.Docs.RenderedCode.Types.Link
                          (Language.PureScript.Docs.RenderedCode.Types.maybeToContainingModule
                             mn)))
                    (GHC.Types.[]
                       @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement))
                   `cast`
                 (Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])) }) -}
dff6a7ebec2a311bffecb7ed7a9d97d0
  maybeToContainingModule ::
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Docs.RenderedCode.Types.ContainingModule
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GHC.Base.Maybe Language.PureScript.Names.ModuleName) ->
                 case ds of wild {
                   GHC.Base.Nothing
                   -> Language.PureScript.Docs.RenderedCode.Types.ThisModule
                   GHC.Base.Just mn
                   -> Language.PureScript.Docs.RenderedCode.Types.OtherModule mn }) -}
571a394cd6325194e6bd8112427d5a3e
  outputWith ::
    GHC.Base.Monoid a =>
    (Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
     -> a)
    -> Language.PureScript.Docs.RenderedCode.Types.RenderedCode -> a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(A,1*U,C(C1(U)),A)><L,C(U)><S,1*U>,
     Unfolding: (\ @ a
                   ($dMonoid :: GHC.Base.Monoid a)
                   (f2 :: Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                          -> a)
                   (eta :: Language.PureScript.Docs.RenderedCode.Types.RenderedCode) ->
                 let {
                   z :: a = GHC.Base.mempty @ a $dMonoid
                 } in
                 letrec {
                   go :: [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
                         -> a
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]) ->
                     case ds of wild {
                       [] -> z : y ys -> GHC.Base.mappend @ a $dMonoid (f2 y) (go ys) }
                 } in
                 go
                   eta
                     `cast`
                   (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])) -}
f2e211d79a20aa037a181942905db0ee
  parens ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCode
    -> Language.PureScript.Docs.RenderedCode.Types.RenderedCode
  {- Arity: 1, Strictness: <L,1*U>m2,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Docs.RenderedCode.Types.parens1
                  `cast`
                (<Language.PureScript.Docs.RenderedCode.Types.RenderedCode>_R
                 ->_R Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])) -}
d57b92b2dff84ca8ce16ab873540779c
  parens1 ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCode
    -> [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
  {- Arity: 1, Strictness: <L,1*U>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Docs.RenderedCode.Types.RenderedCode) ->
                 GHC.Types.:
                   @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                   Language.PureScript.Docs.RenderedCode.Types.parens5
                   (GHC.Base.augment
                      @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                      (\ @ b
                         (c :: Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                               -> b -> b)[OneShot]
                         (n :: b)[OneShot] ->
                       GHC.Base.foldr
                         @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                         @ b
                         c
                         n
                         x `cast`
                         (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0]))
                      (GHC.Types.:
                         @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                         Language.PureScript.Docs.RenderedCode.Types.parens2
                         (GHC.Types.[]
                            @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)))) -}
e5ced4affd0a828adce5e5658db8c1f2
  parens2 ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
  {- Strictness: m1,
     Unfolding: (Language.PureScript.Docs.RenderedCode.Types.Syntax
                   Language.PureScript.Docs.RenderedCode.Types.parens3) -}
95c1dc84ed1fa83b3c00cfabfeb72c4d
  parens3 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Docs.RenderedCode.Types.parens4) -}
c5e0b44cae716d8fd8ed81ed078fe4c8
  parens4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (")"#) -}
4e254a9c3fe0a801472bc1f81f0b9d37
  parens5 ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
  {- Strictness: m1,
     Unfolding: (Language.PureScript.Docs.RenderedCode.Types.Syntax
                   Language.PureScript.Docs.RenderedCode.Types.parens6) -}
e9bd5c427b63f07d75f6d0f4b419a4cf
  parens6 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Docs.RenderedCode.Types.parens7) -}
ce1a4b92a509eb515a15b75323cad282
  parens7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("("#) -}
39b968598114288ef3f090bf19abc506
  sp :: Language.PureScript.Docs.RenderedCode.Types.RenderedCode
  {- Strictness: m2,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Docs.RenderedCode.Types.alias5
                  `cast`
                (Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])) -}
1dcaacc9dbea946d419bd10faec44aed
  syntax ::
    Data.Text.Internal.Text
    -> Language.PureScript.Docs.RenderedCode.Types.RenderedCode
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m2,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Docs.RenderedCode.Types.syntax1
                  `cast`
                (<Data.Text.Internal.Text>_R
                 ->_R Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])) -}
f94329e2bd5a4a447cb12756f0b2e406
  syntax1 ::
    Data.Text.Internal.Text
    -> [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Text.Internal.Text) ->
                 GHC.Types.:
                   @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                   (Language.PureScript.Docs.RenderedCode.Types.Syntax x)
                   (GHC.Types.[]
                      @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)) -}
d1573489692aac2de6c8be1b0ac234d4
  tryParse ::
    Data.Text.Internal.Text
    -> [Data.Aeson.BetterErrors.Internal.Parse
          Data.Text.Internal.Text a]
    -> Data.Aeson.BetterErrors.Internal.Parse Data.Text.Internal.Text a
  {- Arity: 2, Strictness: <L,1*U(U,U,U)><L,U> -}
640b2fa6077da5d954e11bcf1438f389
  typeCtor ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName)
    -> Language.PureScript.Docs.RenderedCode.Types.RenderedCode
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(1*U,U)>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Names.Qualified
                            (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.TypeName)) ->
                 case ds of wild { Language.PureScript.Names.Qualified mn x ->
                 (GHC.Types.:
                    @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                    (Language.PureScript.Docs.RenderedCode.Types.Symbol
                       Language.PureScript.Docs.RenderedCode.Types.TypeLevel
                       x `cast`
                       (Language.PureScript.Names.N:ProperName[0]
                            <'Language.PureScript.Names.TypeName>_P)
                       (Language.PureScript.Docs.RenderedCode.Types.Link
                          (Language.PureScript.Docs.RenderedCode.Types.maybeToContainingModule
                             mn)))
                    (GHC.Types.[]
                       @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement))
                   `cast`
                 (Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])) }) -}
bacc39255084273fa8fde2f03d488c74
  typeOp ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.OpName
         'Language.PureScript.Names.TypeOpName)
    -> Language.PureScript.Docs.RenderedCode.Types.RenderedCode
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(1*U,U)>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Names.Qualified
                            (Language.PureScript.Names.OpName
                               'Language.PureScript.Names.TypeOpName)) ->
                 case ds of wild { Language.PureScript.Names.Qualified mn x ->
                 (GHC.Types.:
                    @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                    (Language.PureScript.Docs.RenderedCode.Types.Symbol
                       Language.PureScript.Docs.RenderedCode.Types.TypeLevel
                       x `cast`
                       (Language.PureScript.Names.N:OpName[0]
                            <'Language.PureScript.Names.TypeOpName>_P)
                       (Language.PureScript.Docs.RenderedCode.Types.Link
                          (Language.PureScript.Docs.RenderedCode.Types.maybeToContainingModule
                             mn)))
                    (GHC.Types.[]
                       @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement))
                   `cast`
                 (Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])) }) -}
22b530447c9cd534f2f7d44d4bf20fb8
  typeVar ::
    Data.Text.Internal.Text
    -> Language.PureScript.Docs.RenderedCode.Types.RenderedCode
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m2,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Docs.RenderedCode.Types.typeVar1
                  `cast`
                (<Data.Text.Internal.Text>_R
                 ->_R Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])) -}
970098e8ea769002e5beba29c69ec57b
  typeVar1 ::
    Data.Text.Internal.Text
    -> [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Text.Internal.Text) ->
                 GHC.Types.:
                   @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                   (Language.PureScript.Docs.RenderedCode.Types.Symbol
                      Language.PureScript.Docs.RenderedCode.Types.TypeLevel
                      x
                      Language.PureScript.Docs.RenderedCode.Types.NoLink)
                   (GHC.Types.[]
                      @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)) -}
4660ea0ffbba09617bc864a10b08d72f
  unRC ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCode
    -> [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
  RecSel Left Language.PureScript.Docs.RenderedCode.Types.RenderedCode
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Docs.RenderedCode.Types.unRC1
                  `cast`
                (<Language.PureScript.Docs.RenderedCode.Types.RenderedCode>_R
                 ->_R Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0]) -}
4660ea0ffbba09617bc864a10b08d72f
  unRC1 ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCode
    -> Language.PureScript.Docs.RenderedCode.Types.RenderedCode
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: Language.PureScript.Docs.RenderedCode.Types.RenderedCode) ->
                 ds) -}
instance GHC.Classes.Eq [Language.PureScript.Docs.RenderedCode.Types.ContainingModule]
  = Language.PureScript.Docs.RenderedCode.Types.$fEqContainingModule
instance GHC.Classes.Eq [Language.PureScript.Docs.RenderedCode.Types.Link]
  = Language.PureScript.Docs.RenderedCode.Types.$fEqLink
instance GHC.Classes.Eq [Language.PureScript.Docs.RenderedCode.Types.Namespace]
  = Language.PureScript.Docs.RenderedCode.Types.$fEqNamespace
instance GHC.Classes.Eq [Language.PureScript.Docs.RenderedCode.Types.RenderedCode]
  = Language.PureScript.Docs.RenderedCode.Types.$fEqRenderedCode
instance GHC.Classes.Eq [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
  = Language.PureScript.Docs.RenderedCode.Types.$fEqRenderedCodeElement
instance Data.Aeson.Types.FromJSON.FromJSON [Language.PureScript.Docs.RenderedCode.Types.ContainingModule]
  = Language.PureScript.Docs.RenderedCode.Types.$fFromJSONContainingModule
instance Data.Aeson.Types.FromJSON.FromJSON [Language.PureScript.Docs.RenderedCode.Types.Link]
  = Language.PureScript.Docs.RenderedCode.Types.$fFromJSONLink
instance Data.Aeson.Types.FromJSON.FromJSON [Language.PureScript.Docs.RenderedCode.Types.Namespace]
  = Language.PureScript.Docs.RenderedCode.Types.$fFromJSONNamespace
instance GHC.Generics.Generic [Language.PureScript.Docs.RenderedCode.Types.Namespace]
  = Language.PureScript.Docs.RenderedCode.Types.$fGenericNamespace
instance GHC.Base.Monoid [Language.PureScript.Docs.RenderedCode.Types.RenderedCode]
  = Language.PureScript.Docs.RenderedCode.Types.$fMonoidRenderedCode
instance Control.DeepSeq.NFData [Language.PureScript.Docs.RenderedCode.Types.Namespace]
  = Language.PureScript.Docs.RenderedCode.Types.$fNFDataNamespace
instance GHC.Classes.Ord [Language.PureScript.Docs.RenderedCode.Types.ContainingModule]
  = Language.PureScript.Docs.RenderedCode.Types.$fOrdContainingModule
instance GHC.Classes.Ord [Language.PureScript.Docs.RenderedCode.Types.Link]
  = Language.PureScript.Docs.RenderedCode.Types.$fOrdLink
instance GHC.Classes.Ord [Language.PureScript.Docs.RenderedCode.Types.Namespace]
  = Language.PureScript.Docs.RenderedCode.Types.$fOrdNamespace
instance GHC.Classes.Ord [Language.PureScript.Docs.RenderedCode.Types.RenderedCode]
  = Language.PureScript.Docs.RenderedCode.Types.$fOrdRenderedCode
instance GHC.Classes.Ord [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
  = Language.PureScript.Docs.RenderedCode.Types.$fOrdRenderedCodeElement
instance GHC.Base.Semigroup [Language.PureScript.Docs.RenderedCode.Types.RenderedCode]
  = Language.PureScript.Docs.RenderedCode.Types.$fSemigroupRenderedCode
instance GHC.Show.Show [Language.PureScript.Docs.RenderedCode.Types.ContainingModule]
  = Language.PureScript.Docs.RenderedCode.Types.$fShowContainingModule
instance GHC.Show.Show [Language.PureScript.Docs.RenderedCode.Types.Link]
  = Language.PureScript.Docs.RenderedCode.Types.$fShowLink
instance GHC.Show.Show [Language.PureScript.Docs.RenderedCode.Types.Namespace]
  = Language.PureScript.Docs.RenderedCode.Types.$fShowNamespace
instance GHC.Show.Show [Language.PureScript.Docs.RenderedCode.Types.RenderedCode]
  = Language.PureScript.Docs.RenderedCode.Types.$fShowRenderedCode
instance GHC.Show.Show [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
  = Language.PureScript.Docs.RenderedCode.Types.$fShowRenderedCodeElement
instance Data.Aeson.Types.ToJSON.ToJSON [Language.PureScript.Docs.RenderedCode.Types.ContainingModule]
  = Language.PureScript.Docs.RenderedCode.Types.$fToJSONContainingModule
instance Data.Aeson.Types.ToJSON.ToJSON [Language.PureScript.Docs.RenderedCode.Types.Link]
  = Language.PureScript.Docs.RenderedCode.Types.$fToJSONLink
instance Data.Aeson.Types.ToJSON.ToJSON [Language.PureScript.Docs.RenderedCode.Types.Namespace]
  = Language.PureScript.Docs.RenderedCode.Types.$fToJSONNamespace
instance Data.Aeson.Types.ToJSON.ToJSON [Language.PureScript.Docs.RenderedCode.Types.RenderedCode]
  = Language.PureScript.Docs.RenderedCode.Types.$fToJSONRenderedCode
instance Data.Aeson.Types.ToJSON.ToJSON [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
  = Language.PureScript.Docs.RenderedCode.Types.$fToJSONRenderedCodeElement
family instance GHC.Generics.Rep [Language.PureScript.Docs.RenderedCode.Types.Namespace]
  = Language.PureScript.Docs.RenderedCode.Types.Rep_Namespace
"SPEC/Language.PureScript.Docs.RenderedCode.Types $fEq[]_$c/= @ RenderedCodeElement" forall ($dEq :: GHC.Classes.Eq
                                                                                                       Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)
  GHC.Classes.$fEq[]_$c/= @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                          $dEq
  = Language.PureScript.Docs.RenderedCode.Types.$fEqRenderedCode_$s$fEq[]_$c/=
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

