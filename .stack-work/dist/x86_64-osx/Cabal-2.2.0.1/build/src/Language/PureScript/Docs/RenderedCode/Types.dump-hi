
==================== FINAL INTERFACE ====================
2019-01-24 14:16:17.500503 UTC

interface purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Docs.RenderedCode.Types [family instance module] 8043
  interface hash: 08c38286d9412fdfb35e6b73edf0e8ff
  ABI hash: a63cc6a5cb22a8a549b2d76ebcbc879a
  export-list hash: e93c760d312b3c7e461ee610e748ebba
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 38a54ede511c0f64849c216068b06e96
  opt_hash: 2c98c95d41c045ae9c2fb565ec8aabc6
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Language.PureScript.Docs.RenderedCode.Types.alias
  Language.PureScript.Docs.RenderedCode.Types.aliasName
  Language.PureScript.Docs.RenderedCode.Types.asContainingModule
  Language.PureScript.Docs.RenderedCode.Types.asRenderedCode
  Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement
  Language.PureScript.Docs.RenderedCode.Types.containingModuleToMaybe
  Language.PureScript.Docs.RenderedCode.Types.dataCtor
  Language.PureScript.Docs.RenderedCode.Types.fromContainingModule
  Language.PureScript.Docs.RenderedCode.Types.fromQualified
  Language.PureScript.Docs.RenderedCode.Types.ident
  Language.PureScript.Docs.RenderedCode.Types.keyword
  Language.PureScript.Docs.RenderedCode.Types.keywordAs
  Language.PureScript.Docs.RenderedCode.Types.keywordClass
  Language.PureScript.Docs.RenderedCode.Types.keywordData
  Language.PureScript.Docs.RenderedCode.Types.keywordFixity
  Language.PureScript.Docs.RenderedCode.Types.keywordForall
  Language.PureScript.Docs.RenderedCode.Types.keywordInstance
  Language.PureScript.Docs.RenderedCode.Types.keywordKind
  Language.PureScript.Docs.RenderedCode.Types.keywordNewtype
  Language.PureScript.Docs.RenderedCode.Types.keywordType
  Language.PureScript.Docs.RenderedCode.Types.keywordWhere
  Language.PureScript.Docs.RenderedCode.Types.kind
  Language.PureScript.Docs.RenderedCode.Types.maybeToContainingModule
  Language.PureScript.Docs.RenderedCode.Types.outputWith
  Language.PureScript.Docs.RenderedCode.Types.parens
  Language.PureScript.Docs.RenderedCode.Types.sp
  Language.PureScript.Docs.RenderedCode.Types.syntax
  Language.PureScript.Docs.RenderedCode.Types.typeCtor
  Language.PureScript.Docs.RenderedCode.Types.typeOp
  Language.PureScript.Docs.RenderedCode.Types.typeVar
  Language.PureScript.Docs.RenderedCode.Types.ContainingModule{Language.PureScript.Docs.RenderedCode.Types.OtherModule Language.PureScript.Docs.RenderedCode.Types.ThisModule}
  Language.PureScript.Docs.RenderedCode.Types.FixityAlias
  Language.PureScript.Docs.RenderedCode.Types.Link{Language.PureScript.Docs.RenderedCode.Types.Link Language.PureScript.Docs.RenderedCode.Types.NoLink}
  Language.PureScript.Docs.RenderedCode.Types.Namespace{Language.PureScript.Docs.RenderedCode.Types.KindLevel Language.PureScript.Docs.RenderedCode.Types.TypeLevel Language.PureScript.Docs.RenderedCode.Types.ValueLevel}
  Language.PureScript.Docs.RenderedCode.Types.RenderedCode
  Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement{Language.PureScript.Docs.RenderedCode.Types.Keyword Language.PureScript.Docs.RenderedCode.Types.Space Language.PureScript.Docs.RenderedCode.Types.Symbol Language.PureScript.Docs.RenderedCode.Types.Syntax}
module dependencies: Control.Monad.Supply
                     Control.Monad.Supply.Class Language.PureScript.AST
                     Language.PureScript.AST.Binders
                     Language.PureScript.AST.Declarations
                     Language.PureScript.AST.Exported Language.PureScript.AST.Literals
                     Language.PureScript.AST.Operators Language.PureScript.AST.SourcePos
                     Language.PureScript.AST.Traversals Language.PureScript.Bundle
                     Language.PureScript.Comments Language.PureScript.Constants
                     Language.PureScript.Crash Language.PureScript.Environment
                     Language.PureScript.Kinds Language.PureScript.Label
                     Language.PureScript.Names Language.PureScript.PSString
                     Language.PureScript.Traversals
                     Language.PureScript.TypeClassDictionaries Language.PureScript.Types
                     Paths_purescript
package dependencies: aeson-1.3.1.1 aeson-better-errors-0.9.1.0
                      array-0.5.2.0 async-2.2.1 attoparsec-0.13.2.2 base-4.11.1.0
                      base-compat-0.10.4 binary-0.8.5.1 blaze-builder-0.4.1.0
                      bytestring-0.10.8.2 containers-0.5.11.0 deepseq-1.4.3.0
                      dlist-0.8.0.4 filepath-1.4.2 ghc-boot-th-8.4.3 ghc-prim-0.5.2.0
                      hashable-1.2.7.0 integer-gmp-1.0.2.0 integer-logarithms-1.0.2.1
                      language-javascript-0.6.0.11 microlens-0.4.9.1 microlens-ghc-0.4.9
                      microlens-mtl-0.1.11.1 microlens-platform-0.3.10
                      microlens-th-0.4.2.1 mtl-2.2.2 parsec-3.1.13.0 pretty-1.1.3.6
                      primitive-0.6.3.0 protolude-0.2.2 random-1.1 scientific-0.3.6.2
                      sourcemap-0.1.6 stm-2.4.5.0 syb-0.7 tagged-0.8.5
                      template-haskell-2.13.0.0 text-1.2.3.0 th-abstraction-0.2.8.0
                      time-1.8.0.2 time-locale-compat-0.1.1.4 transformers-0.5.5.0
                      unordered-containers-0.2.9.0 utf8-string-1.0.1.1 uuid-types-1.0.3
                      vector-0.12.0.1
orphans: syb-0.7:Data.Generics.Instances
         stm-2.4.5.0:Control.Monad.STM
         attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         microlens-platform-0.3.10:Lens.Micro.Platform
         microlens-ghc-0.4.9:Lens.Micro.GHC
         hashable-1.2.7.0:Data.Hashable.Generic
         vector-0.12.0.1:Data.Vector.Unboxed
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.5.0:Control.Monad.Trans.Error
         text-1.2.3.0:Data.Text.Lazy text-1.2.3.0:Data.Text
         binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: aeson-1.3.1.1:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.Graph
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         dlist-0.8.0.4:Data.DList ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         microlens-0.4.9.1:Lens.Micro.Internal
                         microlens-ghc-0.4.9:Lens.Micro.GHC
                         microlens-mtl-0.1.11.1:Lens.Micro.Mtl.Internal
                         microlens-platform-0.3.10:Lens.Micro.Platform
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.Declarations
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.Operators
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.SourcePos
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Comments
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Environment
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Kinds
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Label
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Names
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.PSString
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.TypeClassDictionaries
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Types
                         tagged-0.8.5:Data.Tagged
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
                         th-abstraction-0.2.8.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  aeson-1.3.1.1:Data.Aeson 108dfb08de41cf77aad4693ac1dc3d44
import  -/  aeson-1.3.1.1:Data.Aeson.Types.FromJSON 1ea0c919856f0d29f12e53cd074d532c
import  -/  aeson-1.3.1.1:Data.Aeson.Types.Internal df76c21edff000f9355bfb6fb0dbf3e6
import  -/  aeson-1.3.1.1:Data.Aeson.Types.ToJSON 587c7d8b9444e85253d7faf5f824f568
import  -/  aeson-better-errors-0.9.1.0:Data.Aeson.BetterErrors ff0e80615ece0f0dd064c946f929132c
import  -/  aeson-better-errors-0.9.1.0:Data.Aeson.BetterErrors.Internal 066898b2dd92d5d1cfd1d0f21692c75d
import  -/  base-4.11.1.0:Data.Either 39d922b371c4c52d426e9ee66de8371a
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.Functor f522c3501272159820fd6f242510732f
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Generics 4d1469b3e29804a05a1be33d11accff6
import  -/  base-4.11.1.0:GHC.Real b4beb0389ba1ad5d9640aae67848c5d3
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-compat-0.10.4:Prelude.Compat bb6796186ed35a1d09dc34362a3fc27e
import  -/  bytestring-0.10.8.2:Data.ByteString.Lazy b6cb59a78204810b2a79502bf5b4c1fc
import  -/  deepseq-1.4.3.0:Control.DeepSeq 171f1f567c47ef82860df4ad686d11b1
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  mtl-2.2.2:Control.Monad.Error.Class df146c18e27154b8df4c8637c59fd61b
import  -/  Language.PureScript.AST e89b59f8e201961eafd3ff905a683659
  exports: be73d3bb7d4ebe5df082453f6d572075
import  -/  Language.PureScript.AST.Operators 615a873c5f62908f354b9d4840cbeb63
  Associativity 228a0ef1b3774b11d1a92fae92fb43a0
  Infix acee26fe4e59790dddcfdcb22d39c630
  Infixl 7a053ccfe48a809d0f2fd5ed84616765
  Infixr bbdac94db5d55a0387eb84cc7a57bedf
import  -/  Language.PureScript.Crash 3dd739d57f17e8a1e9cd97afd3faf067
  exports: a9d2725f359c2d113bd38076e88ec681
  internalError d33c2a09c5cbe8e68c0bc27d1500ba1a
import  -/  Language.PureScript.Names 00f694509122478d97b327fbbccae327
  exports: ad7ae34f85124c68e8ba1c90fb2e732f
  ConstructorName 84054a8bbbe827ba2ce7da83056a95ee
  Ident 71f167265716f619863a793fa311e198
  Ident bad3562aa6138b6192713ac281080869
  KindName 7782d66ce60bd67282cf566485701e07
  ModuleName 1b2ddf0c04464d2fa2588925f10c1966
  OpName 9af301165f72160425c5e0dde6525338
  ProperName f69d3801241fcb4773f1284cd28f2dee
  ProperName a7268334e0b909381550b9329cb80fcc
  Qualified b6e1bc9e7244a41d3c6149c9b5c2d6d8
  Qualified 1b2ddf0c04464d2fa2588925f10c1966
  TypeName 40ce511c66a72431b4e87351210f7b03
  TypeOpName db73fc39fef75f034a0b4a8074947dd9
  moduleNameFromString 58dbc4d6b97c8eb6012ccda72d203acf
  runIdent f4727e6f001b3b7d933fd4e8122af572
  runModuleName 58b788b37f600c0f34fa85241d7748ad
  runOpName 9af301165f72160425c5e0dde6525338
  runProperName a7268334e0b909381550b9329cb80fcc
import  -/  text-1.2.3.0:Data.Text 7daa7e6c9b39d8cc1679e5ec5c64d2be
import  -/  text-1.2.3.0:Data.Text.Encoding 8e60367b574d8e5016309aaea7dc2100
import  -/  text-1.2.3.0:Data.Text.Internal 30a0a123f71f63b26cd34c6b24f23411
5e9b2b25a94f6bc04ac9258fb2be1c52
  $fEqContainingModule ::
    GHC.Classes.Eq
      Language.PureScript.Docs.RenderedCode.Types.ContainingModule
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Docs.RenderedCode.Types.ContainingModule
                  Language.PureScript.Docs.RenderedCode.Types.$fEqContainingModule_$c==
                  Language.PureScript.Docs.RenderedCode.Types.$fEqContainingModule_$c/= -}
5e9b2b25a94f6bc04ac9258fb2be1c52
  $fEqContainingModule_$c/= ::
    Language.PureScript.Docs.RenderedCode.Types.ContainingModule
    -> Language.PureScript.Docs.RenderedCode.Types.ContainingModule
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Docs.RenderedCode.Types.ContainingModule)
                   (y :: Language.PureScript.Docs.RenderedCode.Types.ContainingModule) ->
                 case x of wild {
                   Language.PureScript.Docs.RenderedCode.Types.ThisModule
                   -> case y of wild1 {
                        Language.PureScript.Docs.RenderedCode.Types.ThisModule
                        -> GHC.Types.False
                        Language.PureScript.Docs.RenderedCode.Types.OtherModule ipv
                        -> GHC.Types.True }
                   Language.PureScript.Docs.RenderedCode.Types.OtherModule a1
                   -> case y of wild1 {
                        Language.PureScript.Docs.RenderedCode.Types.ThisModule
                        -> GHC.Types.True
                        Language.PureScript.Docs.RenderedCode.Types.OtherModule b1
                        -> case GHC.Classes.$fEq[]_$c==
                                  @ (Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.Namespace)
                                  (Language.PureScript.Names.$fEqProperName
                                     @ 'Language.PureScript.Names.Namespace)
                                  a1 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                  b1 `cast` (Language.PureScript.Names.N:ModuleName[0]) of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False } } }) -}
5e9b2b25a94f6bc04ac9258fb2be1c52
  $fEqContainingModule_$c== ::
    Language.PureScript.Docs.RenderedCode.Types.ContainingModule
    -> Language.PureScript.Docs.RenderedCode.Types.ContainingModule
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Language.PureScript.Docs.RenderedCode.Types.ContainingModule)
                   (ds1 :: Language.PureScript.Docs.RenderedCode.Types.ContainingModule) ->
                 case ds of wild {
                   Language.PureScript.Docs.RenderedCode.Types.ThisModule
                   -> case ds1 of wild1 {
                        Language.PureScript.Docs.RenderedCode.Types.ThisModule
                        -> GHC.Types.True
                        Language.PureScript.Docs.RenderedCode.Types.OtherModule ipv
                        -> GHC.Types.False }
                   Language.PureScript.Docs.RenderedCode.Types.OtherModule a1
                   -> case ds1 of wild1 {
                        Language.PureScript.Docs.RenderedCode.Types.ThisModule
                        -> GHC.Types.False
                        Language.PureScript.Docs.RenderedCode.Types.OtherModule b1
                        -> GHC.Classes.$fEq[]_$c==
                             @ (Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.Namespace)
                             (Language.PureScript.Names.$fEqProperName
                                @ 'Language.PureScript.Names.Namespace)
                             a1 `cast` (Language.PureScript.Names.N:ModuleName[0])
                             b1 `cast` (Language.PureScript.Names.N:ModuleName[0]) } }) -}
646c8e664a7ad59f4599a12adf022c29
  $fEqLink ::
    GHC.Classes.Eq Language.PureScript.Docs.RenderedCode.Types.Link
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Docs.RenderedCode.Types.Link
                  Language.PureScript.Docs.RenderedCode.Types.$fEqLink_$c==
                  Language.PureScript.Docs.RenderedCode.Types.$fEqLink_$c/= -}
646c8e664a7ad59f4599a12adf022c29
  $fEqLink_$c/= ::
    Language.PureScript.Docs.RenderedCode.Types.Link
    -> Language.PureScript.Docs.RenderedCode.Types.Link
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Docs.RenderedCode.Types.Link)
                   (y :: Language.PureScript.Docs.RenderedCode.Types.Link) ->
                 case x of wild {
                   Language.PureScript.Docs.RenderedCode.Types.NoLink
                   -> case y of wild1 {
                        Language.PureScript.Docs.RenderedCode.Types.NoLink
                        -> GHC.Types.False
                        Language.PureScript.Docs.RenderedCode.Types.Link ipv
                        -> GHC.Types.True }
                   Language.PureScript.Docs.RenderedCode.Types.Link a1
                   -> case y of wild1 {
                        Language.PureScript.Docs.RenderedCode.Types.NoLink
                        -> GHC.Types.True
                        Language.PureScript.Docs.RenderedCode.Types.Link b1
                        -> case a1 of wild2 {
                             Language.PureScript.Docs.RenderedCode.Types.ThisModule
                             -> case b1 of wild3 {
                                  Language.PureScript.Docs.RenderedCode.Types.ThisModule
                                  -> GHC.Types.False
                                  Language.PureScript.Docs.RenderedCode.Types.OtherModule ipv
                                  -> GHC.Types.True }
                             Language.PureScript.Docs.RenderedCode.Types.OtherModule a2
                             -> case b1 of wild3 {
                                  Language.PureScript.Docs.RenderedCode.Types.ThisModule
                                  -> GHC.Types.True
                                  Language.PureScript.Docs.RenderedCode.Types.OtherModule b2
                                  -> case GHC.Classes.$fEq[]_$c==
                                            @ (Language.PureScript.Names.ProperName
                                                 'Language.PureScript.Names.Namespace)
                                            (Language.PureScript.Names.$fEqProperName
                                               @ 'Language.PureScript.Names.Namespace)
                                            a2 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                            b2
                                              `cast`
                                            (Language.PureScript.Names.N:ModuleName[0]) of wild4 {
                                       GHC.Types.False -> GHC.Types.True
                                       GHC.Types.True -> GHC.Types.False } } } } }) -}
646c8e664a7ad59f4599a12adf022c29
  $fEqLink_$c== ::
    Language.PureScript.Docs.RenderedCode.Types.Link
    -> Language.PureScript.Docs.RenderedCode.Types.Link
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Language.PureScript.Docs.RenderedCode.Types.Link)
                   (ds1 :: Language.PureScript.Docs.RenderedCode.Types.Link) ->
                 case ds of wild {
                   Language.PureScript.Docs.RenderedCode.Types.NoLink
                   -> case ds1 of wild1 {
                        Language.PureScript.Docs.RenderedCode.Types.NoLink
                        -> GHC.Types.True
                        Language.PureScript.Docs.RenderedCode.Types.Link ipv
                        -> GHC.Types.False }
                   Language.PureScript.Docs.RenderedCode.Types.Link a1
                   -> case ds1 of wild1 {
                        Language.PureScript.Docs.RenderedCode.Types.NoLink
                        -> GHC.Types.False
                        Language.PureScript.Docs.RenderedCode.Types.Link b1
                        -> Language.PureScript.Docs.RenderedCode.Types.$fEqContainingModule_$c==
                             a1
                             b1 } }) -}
e686c6add7c243d229f3b74d733eb7d2
  $fEqNamespace ::
    GHC.Classes.Eq
      Language.PureScript.Docs.RenderedCode.Types.Namespace
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Docs.RenderedCode.Types.Namespace
                  Language.PureScript.Docs.RenderedCode.Types.$fEqNamespace_$c==
                  Language.PureScript.Docs.RenderedCode.Types.$fEqNamespace_$c/= -}
e686c6add7c243d229f3b74d733eb7d2
  $fEqNamespace_$c/= ::
    Language.PureScript.Docs.RenderedCode.Types.Namespace
    -> Language.PureScript.Docs.RenderedCode.Types.Namespace
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Docs.RenderedCode.Types.Namespace)
                   (y :: Language.PureScript.Docs.RenderedCode.Types.Namespace) ->
                 case x of wild {
                   Language.PureScript.Docs.RenderedCode.Types.ValueLevel
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.Docs.RenderedCode.Types.ValueLevel
                        -> GHC.Types.False }
                   Language.PureScript.Docs.RenderedCode.Types.TypeLevel
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.Docs.RenderedCode.Types.TypeLevel
                        -> GHC.Types.False }
                   Language.PureScript.Docs.RenderedCode.Types.KindLevel
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.Docs.RenderedCode.Types.KindLevel
                        -> GHC.Types.False } }) -}
e686c6add7c243d229f3b74d733eb7d2
  $fEqNamespace_$c== ::
    Language.PureScript.Docs.RenderedCode.Types.Namespace
    -> Language.PureScript.Docs.RenderedCode.Types.Namespace
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Language.PureScript.Docs.RenderedCode.Types.Namespace)
                   (ds1 :: Language.PureScript.Docs.RenderedCode.Types.Namespace) ->
                 case ds of wild {
                   Language.PureScript.Docs.RenderedCode.Types.ValueLevel
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Docs.RenderedCode.Types.ValueLevel
                        -> GHC.Types.True }
                   Language.PureScript.Docs.RenderedCode.Types.TypeLevel
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Docs.RenderedCode.Types.TypeLevel
                        -> GHC.Types.True }
                   Language.PureScript.Docs.RenderedCode.Types.KindLevel
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Docs.RenderedCode.Types.KindLevel
                        -> GHC.Types.True } }) -}
b76660a0424da31964a78f3df8712e5d
  $fEqRenderedCode ::
    GHC.Classes.Eq
      Language.PureScript.Docs.RenderedCode.Types.RenderedCode
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Docs.RenderedCode.Types.RenderedCode
                  Language.PureScript.Docs.RenderedCode.Types.$fEqRenderedCode1
                    `cast`
                  (Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])
                   ->_R Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])
                   ->_R <GHC.Types.Bool>_R)
                  Language.PureScript.Docs.RenderedCode.Types.$fEqRenderedCode_$s$fEq[]_$c/=
                    `cast`
                  (Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])
                   ->_R Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])
                   ->_R <GHC.Types.Bool>_R) -}
4089ae468f8d822bd4ae0d6e7949d401
  $fEqRenderedCode1 ::
    [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
    -> [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (GHC.Classes.$fEq[]_$c==
                   @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                   Language.PureScript.Docs.RenderedCode.Types.$fEqRenderedCodeElement) -}
8d7e5831b8ea3cae37734f270bdcdcc0
  $fEqRenderedCodeElement ::
    GHC.Classes.Eq
      Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                  Language.PureScript.Docs.RenderedCode.Types.$fEqRenderedCodeElement_$c==
                  Language.PureScript.Docs.RenderedCode.Types.$fEqRenderedCodeElement_$c/= -}
8d7e5831b8ea3cae37734f270bdcdcc0
  $fEqRenderedCodeElement_$c/= ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
    -> Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)
                   (y :: Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement) ->
                 case Language.PureScript.Docs.RenderedCode.Types.$fEqRenderedCodeElement_$c==
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
8d7e5831b8ea3cae37734f270bdcdcc0
  $fEqRenderedCodeElement_$c== ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
    -> Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)
                   (ds1 :: Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement) ->
                 case ds of wild {
                   Language.PureScript.Docs.RenderedCode.Types.Syntax a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Docs.RenderedCode.Types.Syntax b1
                        -> Data.Text.$fEqText_$c== a1 b1 }
                   Language.PureScript.Docs.RenderedCode.Types.Keyword a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Docs.RenderedCode.Types.Keyword b1
                        -> Data.Text.$fEqText_$c== a1 b1 }
                   Language.PureScript.Docs.RenderedCode.Types.Space
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Docs.RenderedCode.Types.Space
                        -> GHC.Types.True }
                   Language.PureScript.Docs.RenderedCode.Types.Symbol a1 a2 a3
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Docs.RenderedCode.Types.Symbol b1 b2 b3
                        -> let {
                             $j :: GHC.Types.Bool <join 0>
                             = case a2 of wild2 { Data.Text.Internal.Text dt dt1 dt2 ->
                               case b2 of wild3 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                               case GHC.Prim.==# dt2 dt5 of lwild {
                                 DEFAULT -> GHC.Types.False
                                 1#
                                 -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                                   -> GHC.Prim.Word#
                                                                   -> GHC.Prim.ByteArray#
                                                                   -> GHC.Prim.Word#
                                                                   -> GHC.Prim.Word#
                                                                   -> GHC.Prim.State#
                                                                        GHC.Prim.RealWorld
                                                                   -> (# GHC.Prim.State#
                                                                           GHC.Prim.RealWorld,
                                                                         GHC.Prim.Int# #)}
                                           dt
                                           (GHC.Prim.int2Word# dt1)
                                           dt3
                                           (GHC.Prim.int2Word# dt4)
                                           (GHC.Prim.int2Word# dt2)
                                           GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                                    case GHC.Prim.narrow32Int# ds3 of wild4 {
                                      DEFAULT -> GHC.Types.False
                                      0#
                                      -> Language.PureScript.Docs.RenderedCode.Types.$fEqLink_$c==
                                           a3
                                           b3 } } } } }
                           } in
                           case a1 of wild2 {
                             Language.PureScript.Docs.RenderedCode.Types.ValueLevel
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.False
                                  Language.PureScript.Docs.RenderedCode.Types.ValueLevel -> $j }
                             Language.PureScript.Docs.RenderedCode.Types.TypeLevel
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.False
                                  Language.PureScript.Docs.RenderedCode.Types.TypeLevel -> $j }
                             Language.PureScript.Docs.RenderedCode.Types.KindLevel
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.False
                                  Language.PureScript.Docs.RenderedCode.Types.KindLevel
                                  -> $j } } } }) -}
d1987e82f376cd3aa52fde3a0f312460
  $fEqRenderedCode_$s$fEq[]_$c/= ::
    [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
    -> [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement])
                   (y :: [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]) ->
                 case GHC.Classes.$fEq[]_$c==
                        @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                        Language.PureScript.Docs.RenderedCode.Types.$fEqRenderedCodeElement
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
5e9b2b25a94f6bc04ac9258fb2be1c52
  $fFromJSONContainingModule ::
    Data.Aeson.Types.FromJSON.FromJSON
      Language.PureScript.Docs.RenderedCode.Types.ContainingModule
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Docs.RenderedCode.Types.ContainingModule
                  Language.PureScript.Docs.RenderedCode.Types.$fFromJSONContainingModule_$cparseJSON
                  Language.PureScript.Docs.RenderedCode.Types.$fFromJSONContainingModule_$cparseJSONList -}
18296807ec7e37d2eec8167c1853c583
  $fFromJSONContainingModule1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (", encountered "#) -}
ff46eb6bcca471f3fedc126a4d0e48fd
  $fFromJSONContainingModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("[a]"#) -}
6076901763fd3cd085d2cb2e4a06897f
  $fFromJSONContainingModule3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("expected "#) -}
5e9b2b25a94f6bc04ac9258fb2be1c52
  $fFromJSONContainingModule_$cparseJSON ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         Language.PureScript.Docs.RenderedCode.Types.ContainingModule
  {- Arity: 1,
     Unfolding: (Data.Aeson.BetterErrors.Internal.toAesonParser
                   @ Data.Text.Internal.Text
                   @ Language.PureScript.Docs.RenderedCode.Types.ContainingModule
                   (GHC.Base.id @ Data.Text.Internal.Text)
                   Language.PureScript.Docs.RenderedCode.Types.asContainingModule) -}
5e9b2b25a94f6bc04ac9258fb2be1c52
  $fFromJSONContainingModule_$cparseJSONList ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         [Language.PureScript.Docs.RenderedCode.Types.ContainingModule]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Data.Aeson.Types.Internal.Value) ->
                 case ds of wild {
                   DEFAULT
                   -> let {
                        msg19 :: GHC.Base.String
                        = GHC.CString.unpackAppendCString#
                            Language.PureScript.Docs.RenderedCode.Types.$fFromJSONContainingModule3
                            (GHC.CString.unpackAppendCString#
                               Language.PureScript.Docs.RenderedCode.Types.$fFromJSONContainingModule2
                               (GHC.CString.unpackAppendCString#
                                  Language.PureScript.Docs.RenderedCode.Types.$fFromJSONContainingModule1
                                  (case wild of wild1 {
                                     Data.Aeson.Types.Internal.Object ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList10
                                     Data.Aeson.Types.Internal.String ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList8
                                     Data.Aeson.Types.Internal.Number ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList6
                                     Data.Aeson.Types.Internal.Bool ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList4
                                     Data.Aeson.Types.Internal.Null
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList1 })))
                      } in
                      (\ @ f4 :: * -> *
                         @ r
                         (path :: Data.Aeson.Types.Internal.JSONPath)
                         (kf :: Data.Aeson.Types.Internal.Failure f4 r)
                         (_ks :: Data.Aeson.Types.Internal.Success
                                   [Language.PureScript.Docs.RenderedCode.Types.ContainingModule]
                                   f4
                                   r) ->
                       kf
                         (GHC.List.reverse @ Data.Aeson.Types.Internal.JSONPathElement path)
                         msg19)
                        `cast`
                      (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                <[Language.PureScript.Docs.RenderedCode.Types.ContainingModule]>_R))
                   Data.Aeson.Types.Internal.Array a2
                   -> case a2 of wild1 { Data.Vector.Vector dt dt1 dt2 ->
                      letrec {
                        $wgo :: GHC.Prim.Int# -> [Data.Aeson.Types.Internal.Value]
                          {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                        = \ (ww :: GHC.Prim.Int#) ->
                          case GHC.Prim.>=# ww dt1 of lwild {
                            DEFAULT
                            -> case GHC.Prim.indexArray#
                                      @ Data.Aeson.Types.Internal.Value
                                      dt2
                                      (GHC.Prim.+# dt ww) of ds3 { Unit# ipv ->
                               GHC.Types.:
                                 @ Data.Aeson.Types.Internal.Value
                                 ipv
                                 ($wgo (GHC.Prim.+# ww 1#)) }
                            1# -> GHC.Types.[] @ Data.Aeson.Types.Internal.Value }
                      } in
                      Language.PureScript.Docs.RenderedCode.Types.$fFromJSONContainingModule_go
                        0#
                        ($wgo 0#) } }) -}
5e9b2b25a94f6bc04ac9258fb2be1c52
  $fFromJSONContainingModule_go ::
    GHC.Prim.Int#
    -> [Data.Aeson.Types.Internal.Value]
    -> Data.Aeson.Types.Internal.Parser
         [Language.PureScript.Docs.RenderedCode.Types.ContainingModule]
  {- Arity: 2, Strictness: <L,U><S,1*U> -}
646c8e664a7ad59f4599a12adf022c29
  $fFromJSONLink ::
    Data.Aeson.Types.FromJSON.FromJSON
      Language.PureScript.Docs.RenderedCode.Types.Link
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Docs.RenderedCode.Types.Link
                  Language.PureScript.Docs.RenderedCode.Types.$fFromJSONLink_$cparseJSON
                  Language.PureScript.Docs.RenderedCode.Types.$fFromJSONLink_$cparseJSONList -}
646c8e664a7ad59f4599a12adf022c29
  $fFromJSONLink1 ::
    [Data.Aeson.BetterErrors.Internal.Parse
       Data.Text.Internal.Text
       Language.PureScript.Docs.RenderedCode.Types.Link]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Aeson.BetterErrors.Internal.Parse
                        Data.Text.Internal.Text
                        Language.PureScript.Docs.RenderedCode.Types.Link)
                   Language.PureScript.Docs.RenderedCode.Types.$fFromJSONLink7
                     `cast`
                   ((<Data.Aeson.BetterErrors.Internal.ParseReader>_R
                     ->_R Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                   <Data.Aeson.BetterErrors.Internal.ParseError
                                      Data.Text.Internal.Text>_N
                                   <Data.Functor.Identity.Identity>_R
                                   <Language.PureScript.Docs.RenderedCode.Types.Link>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                      <*>_N
                                                                                                      <Data.Aeson.BetterErrors.Internal.ParseReader>_R
                                                                                                      <Control.Monad.Trans.Except.ExceptT
                                                                                                         (Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                            Data.Text.Internal.Text)
                                                                                                         Data.Functor.Identity.Identity>_R
                                                                                                      <Language.PureScript.Docs.RenderedCode.Types.Link>_N) ; Sym (Data.Aeson.BetterErrors.Internal.N:ParseT[0]
                                                                                                                                                                       <Data.Text.Internal.Text>_N
                                                                                                                                                                       <Data.Functor.Identity.Identity>_R) <Language.PureScript.Docs.RenderedCode.Types.Link>_N))
                   Language.PureScript.Docs.RenderedCode.Types.$fFromJSONLink2) -}
0894325acbee501235ac1e5445dff8fd
  $fFromJSONLink10 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Docs.RenderedCode.Types.$fFromJSONLink11) -}
bc8289dbaef15a00718209f3d112a627
  $fFromJSONLink11 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("NoLink"#) -}
b0833528ddc1570b2f289ef97fb64aa7
  $fFromJSONLink12 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Docs.RenderedCode.Types.$fFromJSONLink13) -}
6841594e4443d519e489819f301eae3c
  $fFromJSONLink13 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("link"#) -}
646c8e664a7ad59f4599a12adf022c29
  $fFromJSONLink2 ::
    [Data.Aeson.BetterErrors.Internal.Parse
       Data.Text.Internal.Text
       Language.PureScript.Docs.RenderedCode.Types.Link]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Aeson.BetterErrors.Internal.Parse
                        Data.Text.Internal.Text
                        Language.PureScript.Docs.RenderedCode.Types.Link)
                   Language.PureScript.Docs.RenderedCode.Types.$fFromJSONLink3
                     `cast`
                   ((<Data.Aeson.BetterErrors.Internal.ParseReader>_R
                     ->_R Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                   <Data.Aeson.BetterErrors.Internal.ParseError
                                      Data.Text.Internal.Text>_N
                                   <Data.Functor.Identity.Identity>_R
                                   <Language.PureScript.Docs.RenderedCode.Types.Link>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                      <*>_N
                                                                                                      <Data.Aeson.BetterErrors.Internal.ParseReader>_R
                                                                                                      <Control.Monad.Trans.Except.ExceptT
                                                                                                         (Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                            Data.Text.Internal.Text)
                                                                                                         Data.Functor.Identity.Identity>_R
                                                                                                      <Language.PureScript.Docs.RenderedCode.Types.Link>_N) ; Sym (Data.Aeson.BetterErrors.Internal.N:ParseT[0]
                                                                                                                                                                       <Data.Text.Internal.Text>_N
                                                                                                                                                                       <Data.Functor.Identity.Identity>_R) <Language.PureScript.Docs.RenderedCode.Types.Link>_N))
                   (GHC.Types.[]
                      @ (Data.Aeson.BetterErrors.Internal.Parse
                           Data.Text.Internal.Text
                           Language.PureScript.Docs.RenderedCode.Types.Link))) -}
646c8e664a7ad59f4599a12adf022c29
  $fFromJSONLink3 ::
    Data.Aeson.BetterErrors.Internal.ParseReader
    -> Data.Functor.Identity.Identity
         (Data.Either.Either
            (Data.Aeson.BetterErrors.Internal.ParseError
               Data.Text.Internal.Text)
            Language.PureScript.Docs.RenderedCode.Types.Link)
  {- Arity: 1,
     Unfolding: (Language.PureScript.Docs.RenderedCode.Types.asContainingModule12
                   @ Language.PureScript.Docs.RenderedCode.Types.Link
                   Language.PureScript.Docs.RenderedCode.Types.$fFromJSONLink5
                   Language.PureScript.Docs.RenderedCode.Types.$fFromJSONLink4
                     `cast`
                   ((<Data.Aeson.BetterErrors.Internal.ParseReader>_R
                     ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                   <Data.Either.Either
                                      (Data.Aeson.BetterErrors.Internal.ParseError
                                         Data.Text.Internal.Text)
                                      Language.PureScript.Docs.RenderedCode.Types.Link>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                      <Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                         Data.Text.Internal.Text>_N
                                                                                                      <Data.Functor.Identity.Identity>_R
                                                                                                      <Language.PureScript.Docs.RenderedCode.Types.Link>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                                                                         <*>_N
                                                                                                                                                                         <Data.Aeson.BetterErrors.Internal.ParseReader>_R
                                                                                                                                                                         <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                            (Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                                                                                               Data.Text.Internal.Text)
                                                                                                                                                                            Data.Functor.Identity.Identity>_R
                                                                                                                                                                         <Language.PureScript.Docs.RenderedCode.Types.Link>_N) ; Sym (Data.Aeson.BetterErrors.Internal.N:ParseT[0]
                                                                                                                                                                                                                                          <Data.Text.Internal.Text>_N
                                                                                                                                                                                                                                          <Data.Functor.Identity.Identity>_R) <Language.PureScript.Docs.RenderedCode.Types.Link>_N))) -}
646c8e664a7ad59f4599a12adf022c29
  $fFromJSONLink4 ::
    Data.Aeson.BetterErrors.Internal.ParseReader
    -> Data.Either.Either
         (Data.Aeson.BetterErrors.Internal.ParseError
            Data.Text.Internal.Text)
         Language.PureScript.Docs.RenderedCode.Types.Link
  {- Arity: 1, Strictness: <L,U(U,U)>,
     Unfolding: (\ (x :: Data.Aeson.BetterErrors.Internal.ParseReader) ->
                 case (Data.Aeson.BetterErrors.Internal.$wnth
                         @ Data.Functor.Identity.Identity
                         @ Data.Text.Internal.Text
                         @ Language.PureScript.Docs.RenderedCode.Types.ContainingModule
                         Data.Functor.Identity.$fMonadIdentity
                         Language.PureScript.Docs.RenderedCode.Types.asContainingModule9
                         Language.PureScript.Docs.RenderedCode.Types.asContainingModule
                         x)
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <Data.Aeson.BetterErrors.Internal.ParseError
                              Data.Text.Internal.Text>_N
                           <Data.Functor.Identity.Identity>_R
                           <Language.PureScript.Docs.RenderedCode.Types.ContainingModule>_N ; Data.Functor.Identity.N:Identity[0]
                                                                                                  <Data.Either.Either
                                                                                                     (Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                        Data.Text.Internal.Text)
                                                                                                     Language.PureScript.Docs.RenderedCode.Types.ContainingModule>_R) of wild {
                   Data.Either.Left x1
                   -> Data.Either.Left
                        @ (Data.Aeson.BetterErrors.Internal.ParseError
                             Data.Text.Internal.Text)
                        @ Language.PureScript.Docs.RenderedCode.Types.Link
                        x1
                   Data.Either.Right y
                   -> Data.Either.Right
                        @ (Data.Aeson.BetterErrors.Internal.ParseError
                             Data.Text.Internal.Text)
                        @ Language.PureScript.Docs.RenderedCode.Types.Link
                        (Language.PureScript.Docs.RenderedCode.Types.Link y) }) -}
b3ba111ad9723e1d538567b2f569f8eb
  $fFromJSONLink5 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Docs.RenderedCode.Types.$fFromJSONLink6) -}
b3f81847d911b2fd6431e259f1b2b2f6
  $fFromJSONLink6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Link"#) -}
646c8e664a7ad59f4599a12adf022c29
  $fFromJSONLink7 ::
    Data.Aeson.BetterErrors.Internal.ParseReader
    -> Data.Functor.Identity.Identity
         (Data.Either.Either
            (Data.Aeson.BetterErrors.Internal.ParseError
               Data.Text.Internal.Text)
            Language.PureScript.Docs.RenderedCode.Types.Link)
  {- Arity: 1,
     Unfolding: (Language.PureScript.Docs.RenderedCode.Types.asContainingModule12
                   @ Language.PureScript.Docs.RenderedCode.Types.Link
                   Language.PureScript.Docs.RenderedCode.Types.$fFromJSONLink10
                   Language.PureScript.Docs.RenderedCode.Types.$fFromJSONLink8
                     `cast`
                   ((<Data.Aeson.BetterErrors.Internal.ParseReader>_R
                     ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                   <Data.Either.Either
                                      (Data.Aeson.BetterErrors.Internal.ParseError
                                         Data.Text.Internal.Text)
                                      Language.PureScript.Docs.RenderedCode.Types.Link>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                      <Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                         Data.Text.Internal.Text>_N
                                                                                                      <Data.Functor.Identity.Identity>_R
                                                                                                      <Language.PureScript.Docs.RenderedCode.Types.Link>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                                                                         <*>_N
                                                                                                                                                                         <Data.Aeson.BetterErrors.Internal.ParseReader>_R
                                                                                                                                                                         <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                            (Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                                                                                               Data.Text.Internal.Text)
                                                                                                                                                                            Data.Functor.Identity.Identity>_R
                                                                                                                                                                         <Language.PureScript.Docs.RenderedCode.Types.Link>_N) ; Sym (Data.Aeson.BetterErrors.Internal.N:ParseT[0]
                                                                                                                                                                                                                                          <Data.Text.Internal.Text>_N
                                                                                                                                                                                                                                          <Data.Functor.Identity.Identity>_R) <Language.PureScript.Docs.RenderedCode.Types.Link>_N))) -}
646c8e664a7ad59f4599a12adf022c29
  $fFromJSONLink8 ::
    Data.Aeson.BetterErrors.Internal.ParseReader
    -> Data.Either.Either
         (Data.Aeson.BetterErrors.Internal.ParseError
            Data.Text.Internal.Text)
         Language.PureScript.Docs.RenderedCode.Types.Link
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>m2,
     Unfolding: (\ (ds :: Data.Aeson.BetterErrors.Internal.ParseReader) ->
                 Language.PureScript.Docs.RenderedCode.Types.$fFromJSONLink9) -}
646c8e664a7ad59f4599a12adf022c29
  $fFromJSONLink9 ::
    Data.Either.Either
      (Data.Aeson.BetterErrors.Internal.ParseError
         Data.Text.Internal.Text)
      Language.PureScript.Docs.RenderedCode.Types.Link
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Data.Either.Right
                   @ (Data.Aeson.BetterErrors.Internal.ParseError
                        Data.Text.Internal.Text)
                   @ Language.PureScript.Docs.RenderedCode.Types.Link
                   Language.PureScript.Docs.RenderedCode.Types.NoLink) -}
646c8e664a7ad59f4599a12adf022c29
  $fFromJSONLink_$cparseJSON ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         Language.PureScript.Docs.RenderedCode.Types.Link
  {- Arity: 1,
     Unfolding: (Data.Aeson.BetterErrors.Internal.toAesonParser
                   @ Data.Text.Internal.Text
                   @ Language.PureScript.Docs.RenderedCode.Types.Link
                   (GHC.Base.id @ Data.Text.Internal.Text)
                   Language.PureScript.Docs.RenderedCode.Types.asLink) -}
646c8e664a7ad59f4599a12adf022c29
  $fFromJSONLink_$cparseJSONList ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         [Language.PureScript.Docs.RenderedCode.Types.Link]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Data.Aeson.Types.Internal.Value) ->
                 case ds of wild {
                   DEFAULT
                   -> let {
                        msg19 :: GHC.Base.String
                        = GHC.CString.unpackAppendCString#
                            Language.PureScript.Docs.RenderedCode.Types.$fFromJSONContainingModule3
                            (GHC.CString.unpackAppendCString#
                               Language.PureScript.Docs.RenderedCode.Types.$fFromJSONContainingModule2
                               (GHC.CString.unpackAppendCString#
                                  Language.PureScript.Docs.RenderedCode.Types.$fFromJSONContainingModule1
                                  (case wild of wild1 {
                                     Data.Aeson.Types.Internal.Object ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList10
                                     Data.Aeson.Types.Internal.String ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList8
                                     Data.Aeson.Types.Internal.Number ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList6
                                     Data.Aeson.Types.Internal.Bool ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList4
                                     Data.Aeson.Types.Internal.Null
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList1 })))
                      } in
                      (\ @ f4 :: * -> *
                         @ r
                         (path :: Data.Aeson.Types.Internal.JSONPath)
                         (kf :: Data.Aeson.Types.Internal.Failure f4 r)
                         (_ks :: Data.Aeson.Types.Internal.Success
                                   [Language.PureScript.Docs.RenderedCode.Types.Link] f4 r) ->
                       kf
                         (GHC.List.reverse @ Data.Aeson.Types.Internal.JSONPathElement path)
                         msg19)
                        `cast`
                      (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                <[Language.PureScript.Docs.RenderedCode.Types.Link]>_R))
                   Data.Aeson.Types.Internal.Array a2
                   -> case a2 of wild1 { Data.Vector.Vector dt dt1 dt2 ->
                      letrec {
                        $wgo :: GHC.Prim.Int# -> [Data.Aeson.Types.Internal.Value]
                          {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                        = \ (ww :: GHC.Prim.Int#) ->
                          case GHC.Prim.>=# ww dt1 of lwild {
                            DEFAULT
                            -> case GHC.Prim.indexArray#
                                      @ Data.Aeson.Types.Internal.Value
                                      dt2
                                      (GHC.Prim.+# dt ww) of ds3 { Unit# ipv ->
                               GHC.Types.:
                                 @ Data.Aeson.Types.Internal.Value
                                 ipv
                                 ($wgo (GHC.Prim.+# ww 1#)) }
                            1# -> GHC.Types.[] @ Data.Aeson.Types.Internal.Value }
                      } in
                      Language.PureScript.Docs.RenderedCode.Types.$fFromJSONLink_go
                        0#
                        ($wgo 0#) } }) -}
646c8e664a7ad59f4599a12adf022c29
  $fFromJSONLink_go ::
    GHC.Prim.Int#
    -> [Data.Aeson.Types.Internal.Value]
    -> Data.Aeson.Types.Internal.Parser
         [Language.PureScript.Docs.RenderedCode.Types.Link]
  {- Arity: 2, Strictness: <L,U><S,1*U> -}
e686c6add7c243d229f3b74d733eb7d2
  $fFromJSONNamespace ::
    Data.Aeson.Types.FromJSON.FromJSON
      Language.PureScript.Docs.RenderedCode.Types.Namespace
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Docs.RenderedCode.Types.Namespace
                  Language.PureScript.Docs.RenderedCode.Types.$fFromJSONNamespace_$cparseJSON
                  Language.PureScript.Docs.RenderedCode.Types.$fFromJSONNamespace_$cparseJSONList -}
e686c6add7c243d229f3b74d733eb7d2
  $fFromJSONNamespace1 ::
    [Data.Aeson.BetterErrors.Internal.Parse
       Data.Text.Internal.Text
       Language.PureScript.Docs.RenderedCode.Types.Namespace]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Aeson.BetterErrors.Internal.Parse
                        Data.Text.Internal.Text
                        Language.PureScript.Docs.RenderedCode.Types.Namespace)
                   Language.PureScript.Docs.RenderedCode.Types.$fFromJSONNamespace2
                     `cast`
                   ((<Data.Aeson.BetterErrors.Internal.ParseReader>_R
                     ->_R Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                   <Data.Aeson.BetterErrors.Internal.ParseError
                                      Data.Text.Internal.Text>_N
                                   <Data.Functor.Identity.Identity>_R
                                   <Language.PureScript.Docs.RenderedCode.Types.Namespace>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                           <*>_N
                                                                                                           <Data.Aeson.BetterErrors.Internal.ParseReader>_R
                                                                                                           <Control.Monad.Trans.Except.ExceptT
                                                                                                              (Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                                 Data.Text.Internal.Text)
                                                                                                              Data.Functor.Identity.Identity>_R
                                                                                                           <Language.PureScript.Docs.RenderedCode.Types.Namespace>_N) ; Sym (Data.Aeson.BetterErrors.Internal.N:ParseT[0]
                                                                                                                                                                                 <Data.Text.Internal.Text>_N
                                                                                                                                                                                 <Data.Functor.Identity.Identity>_R) <Language.PureScript.Docs.RenderedCode.Types.Namespace>_N))
                   (GHC.Types.[]
                      @ (Data.Aeson.BetterErrors.Internal.Parse
                           Data.Text.Internal.Text
                           Language.PureScript.Docs.RenderedCode.Types.Namespace))) -}
d2a33c28912bb69e35771d8e56d541b1
  $fFromJSONNamespace10 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Docs.RenderedCode.Types.$fFromJSONNamespace11) -}
cfa7f0417fa6f0e419a032942c967574
  $fFromJSONNamespace11 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ValueLevel"#) -}
c019054c323c0c1df6c20b85dcbfff94
  $fFromJSONNamespace12 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Docs.RenderedCode.Types.$fFromJSONNamespace13) -}
053678d11158ce09c71f0515ecc8436b
  $fFromJSONNamespace13 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("namespace"#) -}
e686c6add7c243d229f3b74d733eb7d2
  $fFromJSONNamespace2 ::
    Data.Aeson.BetterErrors.Internal.ParseReader
    -> Data.Functor.Identity.Identity
         (Data.Either.Either
            (Data.Aeson.BetterErrors.Internal.ParseError
               Data.Text.Internal.Text)
            Language.PureScript.Docs.RenderedCode.Types.Namespace)
  {- Arity: 1, Strictness: <S(LS),1*U(1*C1(U),1*U)>,
     Unfolding: (\ (w3 :: Data.Aeson.BetterErrors.Internal.ParseReader) ->
                 case w3 of ww { Data.Aeson.BetterErrors.Internal.ParseReader ww1 ww2 ->
                 case ww2 of wild {
                   DEFAULT
                   -> (Data.Either.Left
                         @ (Data.Aeson.BetterErrors.Internal.ParseError
                              Data.Text.Internal.Text)
                         @ Language.PureScript.Docs.RenderedCode.Types.Namespace
                         (Data.Aeson.BetterErrors.Internal.BadSchema
                            @ Data.Text.Internal.Text
                            (ww1
                               `cast`
                             (Data.DList.N:DList[0]
                                  <Data.Aeson.BetterErrors.Internal.PathPiece>_R)
                               (GHC.Types.[] @ Data.Aeson.BetterErrors.Internal.PathPiece))
                            (Data.Aeson.BetterErrors.Internal.WrongType
                               @ Data.Text.Internal.Text
                               Data.Aeson.BetterErrors.Internal.TyString
                               wild)))
                        `cast`
                      (Sym (Data.Functor.Identity.N:Identity[0]
                                <Data.Either.Either
                                   (Data.Aeson.BetterErrors.Internal.ParseError
                                      Data.Text.Internal.Text)
                                   Language.PureScript.Docs.RenderedCode.Types.Namespace>_R))
                   Data.Aeson.Types.Internal.String t
                   -> case t of wild1 { Data.Text.Internal.Text dt dt1 dt2 ->
                      case Language.PureScript.Docs.RenderedCode.Types.$fFromJSONNamespace10 of wild2 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                      let {
                        $j :: Data.Functor.Identity.Identity
                                (Data.Either.Either
                                   (Data.Aeson.BetterErrors.Internal.ParseError
                                      Data.Text.Internal.Text)
                                   Language.PureScript.Docs.RenderedCode.Types.Namespace)
                          <join 0>
                        = case Language.PureScript.Docs.RenderedCode.Types.$fFromJSONNamespace8 of wild3 { Data.Text.Internal.Text dt7 dt8 dt9 ->
                          let {
                            $j1 :: Data.Functor.Identity.Identity
                                     (Data.Either.Either
                                        (Data.Aeson.BetterErrors.Internal.ParseError
                                           Data.Text.Internal.Text)
                                        Language.PureScript.Docs.RenderedCode.Types.Namespace)
                              <join 0>
                            = case Language.PureScript.Docs.RenderedCode.Types.$fFromJSONNamespace6 of wild4 { Data.Text.Internal.Text dt10 dt11 dt12 ->
                              case GHC.Prim.==# dt2 dt12 of lwild {
                                DEFAULT
                                -> (Data.Either.Left
                                      @ (Data.Aeson.BetterErrors.Internal.ParseError
                                           Data.Text.Internal.Text)
                                      @ Language.PureScript.Docs.RenderedCode.Types.Namespace
                                      (Data.Aeson.BetterErrors.Internal.BadSchema
                                         @ Data.Text.Internal.Text
                                         (ww1
                                            `cast`
                                          (Data.DList.N:DList[0]
                                               <Data.Aeson.BetterErrors.Internal.PathPiece>_R)
                                            (GHC.Types.[]
                                               @ Data.Aeson.BetterErrors.Internal.PathPiece))
                                         Language.PureScript.Docs.RenderedCode.Types.asContainingModule14))
                                     `cast`
                                   (Sym (Data.Functor.Identity.N:Identity[0]
                                             <Data.Either.Either
                                                (Data.Aeson.BetterErrors.Internal.ParseError
                                                   Data.Text.Internal.Text)
                                                Language.PureScript.Docs.RenderedCode.Types.Namespace>_R))
                                1#
                                -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                                  -> GHC.Prim.Word#
                                                                  -> GHC.Prim.ByteArray#
                                                                  -> GHC.Prim.Word#
                                                                  -> GHC.Prim.Word#
                                                                  -> GHC.Prim.State#
                                                                       GHC.Prim.RealWorld
                                                                  -> (# GHC.Prim.State#
                                                                          GHC.Prim.RealWorld,
                                                                        GHC.Prim.Int# #)}
                                          dt
                                          (GHC.Prim.int2Word# dt1)
                                          dt10
                                          (GHC.Prim.int2Word# dt11)
                                          (GHC.Prim.int2Word# dt2)
                                          GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                                   case GHC.Prim.narrow32Int# ds3 of wild6 {
                                     DEFAULT
                                     -> (Data.Either.Left
                                           @ (Data.Aeson.BetterErrors.Internal.ParseError
                                                Data.Text.Internal.Text)
                                           @ Language.PureScript.Docs.RenderedCode.Types.Namespace
                                           (Data.Aeson.BetterErrors.Internal.BadSchema
                                              @ Data.Text.Internal.Text
                                              (ww1
                                                 `cast`
                                               (Data.DList.N:DList[0]
                                                    <Data.Aeson.BetterErrors.Internal.PathPiece>_R)
                                                 (GHC.Types.[]
                                                    @ Data.Aeson.BetterErrors.Internal.PathPiece))
                                              Language.PureScript.Docs.RenderedCode.Types.asContainingModule14))
                                          `cast`
                                        (Sym (Data.Functor.Identity.N:Identity[0]
                                                  <Data.Either.Either
                                                     (Data.Aeson.BetterErrors.Internal.ParseError
                                                        Data.Text.Internal.Text)
                                                     Language.PureScript.Docs.RenderedCode.Types.Namespace>_R))
                                     0#
                                     -> Language.PureScript.Docs.RenderedCode.Types.$fFromJSONNamespace5
                                          `cast`
                                        (Sym (Data.Functor.Identity.N:Identity[0]
                                                  <Data.Either.Either
                                                     (Data.Aeson.BetterErrors.Internal.ParseError
                                                        Data.Text.Internal.Text)
                                                     Language.PureScript.Docs.RenderedCode.Types.Namespace>_R)) } } } }
                          } in
                          case GHC.Prim.==# dt2 dt9 of lwild {
                            DEFAULT -> $j1
                            1#
                            -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                              -> GHC.Prim.Word#
                                                              -> GHC.Prim.ByteArray#
                                                              -> GHC.Prim.Word#
                                                              -> GHC.Prim.Word#
                                                              -> GHC.Prim.State# GHC.Prim.RealWorld
                                                              -> (# GHC.Prim.State#
                                                                      GHC.Prim.RealWorld,
                                                                    GHC.Prim.Int# #)}
                                      dt
                                      (GHC.Prim.int2Word# dt1)
                                      dt7
                                      (GHC.Prim.int2Word# dt8)
                                      (GHC.Prim.int2Word# dt2)
                                      GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                               case GHC.Prim.narrow32Int# ds3 of wild4 {
                                 DEFAULT -> $j1
                                 0#
                                 -> Language.PureScript.Docs.RenderedCode.Types.$fFromJSONNamespace4
                                      `cast`
                                    (Sym (Data.Functor.Identity.N:Identity[0]
                                              <Data.Either.Either
                                                 (Data.Aeson.BetterErrors.Internal.ParseError
                                                    Data.Text.Internal.Text)
                                                 Language.PureScript.Docs.RenderedCode.Types.Namespace>_R)) } } } }
                      } in
                      case GHC.Prim.==# dt2 dt5 of lwild {
                        DEFAULT -> $j
                        1#
                        -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                          -> GHC.Prim.Word#
                                                          -> GHC.Prim.ByteArray#
                                                          -> GHC.Prim.Word#
                                                          -> GHC.Prim.Word#
                                                          -> GHC.Prim.State# GHC.Prim.RealWorld
                                                          -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                GHC.Prim.Int# #)}
                                  dt
                                  (GHC.Prim.int2Word# dt1)
                                  dt3
                                  (GHC.Prim.int2Word# dt4)
                                  (GHC.Prim.int2Word# dt2)
                                  GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                           case GHC.Prim.narrow32Int# ds3 of wild3 {
                             DEFAULT -> $j
                             0#
                             -> Language.PureScript.Docs.RenderedCode.Types.$fFromJSONNamespace3
                                  `cast`
                                (Sym (Data.Functor.Identity.N:Identity[0]
                                          <Data.Either.Either
                                             (Data.Aeson.BetterErrors.Internal.ParseError
                                                Data.Text.Internal.Text)
                                             Language.PureScript.Docs.RenderedCode.Types.Namespace>_R)) } } } } } } }) -}
e686c6add7c243d229f3b74d733eb7d2
  $fFromJSONNamespace3 ::
    Data.Either.Either
      (Data.Aeson.BetterErrors.Internal.ParseError
         Data.Text.Internal.Text)
      Language.PureScript.Docs.RenderedCode.Types.Namespace
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Data.Either.Right
                   @ (Data.Aeson.BetterErrors.Internal.ParseError
                        Data.Text.Internal.Text)
                   @ Language.PureScript.Docs.RenderedCode.Types.Namespace
                   Language.PureScript.Docs.RenderedCode.Types.ValueLevel) -}
e686c6add7c243d229f3b74d733eb7d2
  $fFromJSONNamespace4 ::
    Data.Either.Either
      (Data.Aeson.BetterErrors.Internal.ParseError
         Data.Text.Internal.Text)
      Language.PureScript.Docs.RenderedCode.Types.Namespace
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Data.Either.Right
                   @ (Data.Aeson.BetterErrors.Internal.ParseError
                        Data.Text.Internal.Text)
                   @ Language.PureScript.Docs.RenderedCode.Types.Namespace
                   Language.PureScript.Docs.RenderedCode.Types.TypeLevel) -}
e686c6add7c243d229f3b74d733eb7d2
  $fFromJSONNamespace5 ::
    Data.Either.Either
      (Data.Aeson.BetterErrors.Internal.ParseError
         Data.Text.Internal.Text)
      Language.PureScript.Docs.RenderedCode.Types.Namespace
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Data.Either.Right
                   @ (Data.Aeson.BetterErrors.Internal.ParseError
                        Data.Text.Internal.Text)
                   @ Language.PureScript.Docs.RenderedCode.Types.Namespace
                   Language.PureScript.Docs.RenderedCode.Types.KindLevel) -}
4123ca110944b2b48a99bf08be094b70
  $fFromJSONNamespace6 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Docs.RenderedCode.Types.$fFromJSONNamespace7) -}
3c8e23e5be38c0e20e9388954d700a23
  $fFromJSONNamespace7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("KindLevel"#) -}
8c4e5a8e4ea015252edcb50a0c3cb2c3
  $fFromJSONNamespace8 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Docs.RenderedCode.Types.$fFromJSONNamespace9) -}
79789c506510adcc65fcf6091d529de0
  $fFromJSONNamespace9 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("TypeLevel"#) -}
e686c6add7c243d229f3b74d733eb7d2
  $fFromJSONNamespace_$cparseJSON ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         Language.PureScript.Docs.RenderedCode.Types.Namespace
  {- Arity: 1,
     Unfolding: (Data.Aeson.BetterErrors.Internal.toAesonParser
                   @ Data.Text.Internal.Text
                   @ Language.PureScript.Docs.RenderedCode.Types.Namespace
                   (GHC.Base.id @ Data.Text.Internal.Text)
                   Language.PureScript.Docs.RenderedCode.Types.asNamespace) -}
e686c6add7c243d229f3b74d733eb7d2
  $fFromJSONNamespace_$cparseJSONList ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         [Language.PureScript.Docs.RenderedCode.Types.Namespace]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Data.Aeson.Types.Internal.Value) ->
                 case ds of wild {
                   DEFAULT
                   -> let {
                        msg19 :: GHC.Base.String
                        = GHC.CString.unpackAppendCString#
                            Language.PureScript.Docs.RenderedCode.Types.$fFromJSONContainingModule3
                            (GHC.CString.unpackAppendCString#
                               Language.PureScript.Docs.RenderedCode.Types.$fFromJSONContainingModule2
                               (GHC.CString.unpackAppendCString#
                                  Language.PureScript.Docs.RenderedCode.Types.$fFromJSONContainingModule1
                                  (case wild of wild1 {
                                     Data.Aeson.Types.Internal.Object ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList10
                                     Data.Aeson.Types.Internal.String ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList8
                                     Data.Aeson.Types.Internal.Number ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList6
                                     Data.Aeson.Types.Internal.Bool ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList4
                                     Data.Aeson.Types.Internal.Null
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList1 })))
                      } in
                      (\ @ f4 :: * -> *
                         @ r
                         (path :: Data.Aeson.Types.Internal.JSONPath)
                         (kf :: Data.Aeson.Types.Internal.Failure f4 r)
                         (_ks :: Data.Aeson.Types.Internal.Success
                                   [Language.PureScript.Docs.RenderedCode.Types.Namespace] f4 r) ->
                       kf
                         (GHC.List.reverse @ Data.Aeson.Types.Internal.JSONPathElement path)
                         msg19)
                        `cast`
                      (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                <[Language.PureScript.Docs.RenderedCode.Types.Namespace]>_R))
                   Data.Aeson.Types.Internal.Array a2
                   -> case a2 of wild1 { Data.Vector.Vector dt dt1 dt2 ->
                      letrec {
                        $wgo :: GHC.Prim.Int# -> [Data.Aeson.Types.Internal.Value]
                          {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                        = \ (ww :: GHC.Prim.Int#) ->
                          case GHC.Prim.>=# ww dt1 of lwild {
                            DEFAULT
                            -> case GHC.Prim.indexArray#
                                      @ Data.Aeson.Types.Internal.Value
                                      dt2
                                      (GHC.Prim.+# dt ww) of ds3 { Unit# ipv ->
                               GHC.Types.:
                                 @ Data.Aeson.Types.Internal.Value
                                 ipv
                                 ($wgo (GHC.Prim.+# ww 1#)) }
                            1# -> GHC.Types.[] @ Data.Aeson.Types.Internal.Value }
                      } in
                      Language.PureScript.Docs.RenderedCode.Types.$fFromJSONNamespace_go
                        0#
                        ($wgo 0#) } }) -}
e686c6add7c243d229f3b74d733eb7d2
  $fFromJSONNamespace_go ::
    GHC.Prim.Int#
    -> [Data.Aeson.Types.Internal.Value]
    -> Data.Aeson.Types.Internal.Parser
         [Language.PureScript.Docs.RenderedCode.Types.Namespace]
  {- Arity: 2, Strictness: <L,U><S,1*U> -}
e686c6add7c243d229f3b74d733eb7d2
  $fGenericNamespace ::
    GHC.Generics.Generic
      Language.PureScript.Docs.RenderedCode.Types.Namespace
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Docs.RenderedCode.Types.Namespace
                  Language.PureScript.Docs.RenderedCode.Types.$fGenericNamespace1
                    `cast`
                  (forall (x :: <*>_N).
                   <Language.PureScript.Docs.RenderedCode.Types.Namespace>_R
                   ->_R (Sym (GHC.Generics.N:M1[0]
                                  <*>_N
                                  <GHC.Generics.D>_P
                                  <'GHC.Generics.MetaData
                                     "Namespace"
                                     "Language.PureScript.Docs.RenderedCode.Types"
                                     "purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"
                                     'GHC.Types.False>_P
                                  <GHC.Generics.M1
                                     GHC.Generics.C
                                     ('GHC.Generics.MetaCons
                                        "ValueLevel" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                     GHC.Generics.U1
                                   GHC.Generics.:+: (GHC.Generics.M1
                                                       GHC.Generics.C
                                                       ('GHC.Generics.MetaCons
                                                          "TypeLevel"
                                                          'GHC.Generics.PrefixI
                                                          'GHC.Types.False)
                                                       GHC.Generics.U1
                                                     GHC.Generics.:+: GHC.Generics.M1
                                                                        GHC.Generics.C
                                                                        ('GHC.Generics.MetaCons
                                                                           "KindLevel"
                                                                           'GHC.Generics.PrefixI
                                                                           'GHC.Types.False)
                                                                        GHC.Generics.U1)>_R) ; Sub (Sym (Language.PureScript.Docs.RenderedCode.Types.Rep_Namespace[0]))) <x>_N)
                  Language.PureScript.Docs.RenderedCode.Types.$fGenericNamespace_$cto -}
e686c6add7c243d229f3b74d733eb7d2
  $fGenericNamespace1 ::
    Language.PureScript.Docs.RenderedCode.Types.Namespace
    -> (GHC.Generics.:+:)
         (GHC.Generics.M1
            GHC.Generics.C
            ('GHC.Generics.MetaCons
               "ValueLevel" 'GHC.Generics.PrefixI 'GHC.Types.False)
            GHC.Generics.U1)
         (GHC.Generics.M1
            GHC.Generics.C
            ('GHC.Generics.MetaCons
               "TypeLevel" 'GHC.Generics.PrefixI 'GHC.Types.False)
            GHC.Generics.U1
          GHC.Generics.:+: GHC.Generics.M1
                             GHC.Generics.C
                             ('GHC.Generics.MetaCons
                                "KindLevel" 'GHC.Generics.PrefixI 'GHC.Types.False)
                             GHC.Generics.U1)
         x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ x
                   (x1 :: Language.PureScript.Docs.RenderedCode.Types.Namespace) ->
                 case x1 of wild {
                   Language.PureScript.Docs.RenderedCode.Types.ValueLevel
                   -> Language.PureScript.Docs.RenderedCode.Types.$fGenericNamespace6
                        @ x
                   Language.PureScript.Docs.RenderedCode.Types.TypeLevel
                   -> Language.PureScript.Docs.RenderedCode.Types.$fGenericNamespace4
                        @ x
                   Language.PureScript.Docs.RenderedCode.Types.KindLevel
                   -> Language.PureScript.Docs.RenderedCode.Types.$fGenericNamespace2
                        @ x }) -}
3da10c3b3654664fd8afb6ec45e50589
  $fGenericNamespace2 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "ValueLevel" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "TypeLevel" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1
       GHC.Generics.:+: GHC.Generics.M1
                          GHC.Generics.C
                          ('GHC.Generics.MetaCons
                             "KindLevel" 'GHC.Generics.PrefixI 'GHC.Types.False)
                          GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (\ @ x ->
                 GHC.Generics.R1
                   @ *
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "ValueLevel" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "TypeLevel" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1
                      GHC.Generics.:+: GHC.Generics.M1
                                         GHC.Generics.C
                                         ('GHC.Generics.MetaCons
                                            "KindLevel" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                         GHC.Generics.U1)
                   @ x
                   (Language.PureScript.Docs.RenderedCode.Types.$fGenericNamespace3
                      @ x)) -}
5e9af84116e15747607f7f62434f929f
  $fGenericNamespace3 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "TypeLevel" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "KindLevel" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (\ @ x ->
                 GHC.Generics.R1
                   @ *
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "TypeLevel" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "KindLevel" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ x
                   (GHC.Generics.U1 @ * @ x)
                     `cast`
                   (Sym (GHC.Generics.N:M1[0]
                             <*>_N
                             <GHC.Generics.C>_P
                             <'GHC.Generics.MetaCons
                                "KindLevel" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                             <GHC.Generics.U1>_R) <x>_N)) -}
38c117beec336055bfd20c2af04fb61b
  $fGenericNamespace4 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "ValueLevel" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "TypeLevel" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1
       GHC.Generics.:+: GHC.Generics.M1
                          GHC.Generics.C
                          ('GHC.Generics.MetaCons
                             "KindLevel" 'GHC.Generics.PrefixI 'GHC.Types.False)
                          GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (\ @ x ->
                 GHC.Generics.R1
                   @ *
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "ValueLevel" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "TypeLevel" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1
                      GHC.Generics.:+: GHC.Generics.M1
                                         GHC.Generics.C
                                         ('GHC.Generics.MetaCons
                                            "KindLevel" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                         GHC.Generics.U1)
                   @ x
                   (Language.PureScript.Docs.RenderedCode.Types.$fGenericNamespace5
                      @ x)) -}
e37e851d509c038aa108ce874e806ae0
  $fGenericNamespace5 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "TypeLevel" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "KindLevel" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (\ @ x ->
                 GHC.Generics.L1
                   @ *
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "TypeLevel" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "KindLevel" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ x
                   (GHC.Generics.U1 @ * @ x)
                     `cast`
                   (Sym (GHC.Generics.N:M1[0]
                             <*>_N
                             <GHC.Generics.C>_P
                             <'GHC.Generics.MetaCons
                                "TypeLevel" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                             <GHC.Generics.U1>_R) <x>_N)) -}
e93ddd5bb2deb2babc3186e0eb2772c3
  $fGenericNamespace6 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "ValueLevel" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "TypeLevel" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1
       GHC.Generics.:+: GHC.Generics.M1
                          GHC.Generics.C
                          ('GHC.Generics.MetaCons
                             "KindLevel" 'GHC.Generics.PrefixI 'GHC.Types.False)
                          GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (\ @ x ->
                 GHC.Generics.L1
                   @ *
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "ValueLevel" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "TypeLevel" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1
                      GHC.Generics.:+: GHC.Generics.M1
                                         GHC.Generics.C
                                         ('GHC.Generics.MetaCons
                                            "KindLevel" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                         GHC.Generics.U1)
                   @ x
                   (GHC.Generics.U1 @ * @ x)
                     `cast`
                   (Sym (GHC.Generics.N:M1[0]
                             <*>_N
                             <GHC.Generics.C>_P
                             <'GHC.Generics.MetaCons
                                "ValueLevel" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                             <GHC.Generics.U1>_R) <x>_N)) -}
e686c6add7c243d229f3b74d733eb7d2
  $fGenericNamespace_$cto ::
    GHC.Generics.Rep
      Language.PureScript.Docs.RenderedCode.Types.Namespace x
    -> Language.PureScript.Docs.RenderedCode.Types.Namespace
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ x
                   (ds :: GHC.Generics.Rep
                            Language.PureScript.Docs.RenderedCode.Types.Namespace x) ->
                 case ds
                        `cast`
                      ((Sub (Language.PureScript.Docs.RenderedCode.Types.Rep_Namespace[0]) ; GHC.Generics.N:M1[0]
                                                                                                 <*>_N
                                                                                                 <GHC.Generics.D>_P
                                                                                                 <'GHC.Generics.MetaData
                                                                                                    "Namespace"
                                                                                                    "Language.PureScript.Docs.RenderedCode.Types"
                                                                                                    "purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"
                                                                                                    'GHC.Types.False>_P
                                                                                                 <GHC.Generics.M1
                                                                                                    GHC.Generics.C
                                                                                                    ('GHC.Generics.MetaCons
                                                                                                       "ValueLevel"
                                                                                                       'GHC.Generics.PrefixI
                                                                                                       'GHC.Types.False)
                                                                                                    GHC.Generics.U1
                                                                                                  GHC.Generics.:+: (GHC.Generics.M1
                                                                                                                      GHC.Generics.C
                                                                                                                      ('GHC.Generics.MetaCons
                                                                                                                         "TypeLevel"
                                                                                                                         'GHC.Generics.PrefixI
                                                                                                                         'GHC.Types.False)
                                                                                                                      GHC.Generics.U1
                                                                                                                    GHC.Generics.:+: GHC.Generics.M1
                                                                                                                                       GHC.Generics.C
                                                                                                                                       ('GHC.Generics.MetaCons
                                                                                                                                          "KindLevel"
                                                                                                                                          'GHC.Generics.PrefixI
                                                                                                                                          'GHC.Types.False)
                                                                                                                                       GHC.Generics.U1)>_R) <x>_N) of wild {
                   GHC.Generics.L1 ds1
                   -> case ds1
                             `cast`
                           (GHC.Generics.N:M1[0]
                                <*>_N
                                <GHC.Generics.C>_P
                                <'GHC.Generics.MetaCons
                                   "ValueLevel" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                <GHC.Generics.U1>_R <x>_N) of wild1 { GHC.Generics.U1 ->
                      Language.PureScript.Docs.RenderedCode.Types.ValueLevel }
                   GHC.Generics.R1 ds1
                   -> case ds1 of wild1 {
                        GHC.Generics.L1 ds2
                        -> case ds2
                                  `cast`
                                (GHC.Generics.N:M1[0]
                                     <*>_N
                                     <GHC.Generics.C>_P
                                     <'GHC.Generics.MetaCons
                                        "TypeLevel" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                     <GHC.Generics.U1>_R <x>_N) of wild2 { GHC.Generics.U1 ->
                           Language.PureScript.Docs.RenderedCode.Types.TypeLevel }
                        GHC.Generics.R1 ds2
                        -> case ds2
                                  `cast`
                                (GHC.Generics.N:M1[0]
                                     <*>_N
                                     <GHC.Generics.C>_P
                                     <'GHC.Generics.MetaCons
                                        "KindLevel" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                     <GHC.Generics.U1>_R <x>_N) of wild2 { GHC.Generics.U1 ->
                           Language.PureScript.Docs.RenderedCode.Types.KindLevel } } }) -}
b76660a0424da31964a78f3df8712e5d
  $fMonoidRenderedCode ::
    GHC.Base.Monoid
      Language.PureScript.Docs.RenderedCode.Types.RenderedCode
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Docs.RenderedCode.Types.RenderedCode
                  Language.PureScript.Docs.RenderedCode.Types.$fSemigroupRenderedCode
                  (GHC.Types.[]
                     @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)
                    `cast`
                  (Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0]))
                  (GHC.Base.++
                     @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)
                    `cast`
                  (Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])
                   ->_R Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])
                   ->_R Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0]))
                  (GHC.Base.$fMonoid[]_$cmconcat
                     @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)
                    `cast`
                  (([Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])])_R
                   ->_R Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])) -}
e686c6add7c243d229f3b74d733eb7d2
  $fNFDataNamespace ::
    Control.DeepSeq.NFData
      Language.PureScript.Docs.RenderedCode.Types.Namespace
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Language.PureScript.Docs.RenderedCode.Types.$fNFDataNamespace_$crnf
                  `cast`
                (Sym (Control.DeepSeq.N:NFData[0]
                          <Language.PureScript.Docs.RenderedCode.Types.Namespace>_N)) -}
e686c6add7c243d229f3b74d733eb7d2
  $fNFDataNamespace_$crnf ::
    Language.PureScript.Docs.RenderedCode.Types.Namespace -> ()
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Docs.RenderedCode.Types.Namespace) ->
                 case x of wild { DEFAULT -> GHC.Tuple.() }) -}
5e9b2b25a94f6bc04ac9258fb2be1c52
  $fOrdContainingModule ::
    GHC.Classes.Ord
      Language.PureScript.Docs.RenderedCode.Types.ContainingModule
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Docs.RenderedCode.Types.ContainingModule
                  Language.PureScript.Docs.RenderedCode.Types.$fEqContainingModule
                  Language.PureScript.Docs.RenderedCode.Types.$fOrdContainingModule_$ccompare
                  Language.PureScript.Docs.RenderedCode.Types.$fOrdContainingModule_$c<
                  Language.PureScript.Docs.RenderedCode.Types.$fOrdContainingModule_$c<=
                  Language.PureScript.Docs.RenderedCode.Types.$fOrdContainingModule_$c>
                  Language.PureScript.Docs.RenderedCode.Types.$fOrdContainingModule_$c>=
                  Language.PureScript.Docs.RenderedCode.Types.$fOrdContainingModule_$cmax
                  Language.PureScript.Docs.RenderedCode.Types.$fOrdContainingModule_$cmin -}
5e9b2b25a94f6bc04ac9258fb2be1c52
  $fOrdContainingModule_$c< ::
    Language.PureScript.Docs.RenderedCode.Types.ContainingModule
    -> Language.PureScript.Docs.RenderedCode.Types.ContainingModule
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.Docs.RenderedCode.Types.ContainingModule)
                   (b :: Language.PureScript.Docs.RenderedCode.Types.ContainingModule) ->
                 case a of wild {
                   Language.PureScript.Docs.RenderedCode.Types.ThisModule
                   -> case b of wild1 {
                        Language.PureScript.Docs.RenderedCode.Types.ThisModule
                        -> GHC.Types.False
                        Language.PureScript.Docs.RenderedCode.Types.OtherModule ipv
                        -> GHC.Types.True }
                   Language.PureScript.Docs.RenderedCode.Types.OtherModule a1
                   -> case b of wild1 {
                        Language.PureScript.Docs.RenderedCode.Types.ThisModule
                        -> GHC.Types.False
                        Language.PureScript.Docs.RenderedCode.Types.OtherModule b1
                        -> Language.PureScript.Names.$fOrdModuleName6
                             a1 `cast` (Language.PureScript.Names.N:ModuleName[0])
                             b1 `cast` (Language.PureScript.Names.N:ModuleName[0]) } }) -}
5e9b2b25a94f6bc04ac9258fb2be1c52
  $fOrdContainingModule_$c<= ::
    Language.PureScript.Docs.RenderedCode.Types.ContainingModule
    -> Language.PureScript.Docs.RenderedCode.Types.ContainingModule
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Language.PureScript.Docs.RenderedCode.Types.ContainingModule)
                   (b :: Language.PureScript.Docs.RenderedCode.Types.ContainingModule) ->
                 case b of wild {
                   Language.PureScript.Docs.RenderedCode.Types.ThisModule
                   -> case a of wild1 {
                        Language.PureScript.Docs.RenderedCode.Types.ThisModule
                        -> GHC.Types.True
                        Language.PureScript.Docs.RenderedCode.Types.OtherModule ipv
                        -> GHC.Types.False }
                   Language.PureScript.Docs.RenderedCode.Types.OtherModule a1
                   -> case a of wild1 {
                        Language.PureScript.Docs.RenderedCode.Types.ThisModule
                        -> GHC.Types.True
                        Language.PureScript.Docs.RenderedCode.Types.OtherModule b1
                        -> case GHC.Classes.$fOrd[]_$ccompare
                                  @ (Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.Namespace)
                                  (Language.PureScript.Names.$fOrdProperName
                                     @ 'Language.PureScript.Names.Namespace)
                                  a1 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                  b1 `cast` (Language.PureScript.Names.N:ModuleName[0]) of wild2 {
                             DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False } } }) -}
5e9b2b25a94f6bc04ac9258fb2be1c52
  $fOrdContainingModule_$c> ::
    Language.PureScript.Docs.RenderedCode.Types.ContainingModule
    -> Language.PureScript.Docs.RenderedCode.Types.ContainingModule
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, True)
                (\ (a :: Language.PureScript.Docs.RenderedCode.Types.ContainingModule)
                   (b :: Language.PureScript.Docs.RenderedCode.Types.ContainingModule) ->
                 Language.PureScript.Docs.RenderedCode.Types.$fOrdContainingModule_$c<
                   b
                   a) -}
5e9b2b25a94f6bc04ac9258fb2be1c52
  $fOrdContainingModule_$c>= ::
    Language.PureScript.Docs.RenderedCode.Types.ContainingModule
    -> Language.PureScript.Docs.RenderedCode.Types.ContainingModule
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Language.PureScript.Docs.RenderedCode.Types.ContainingModule)
                   (b :: Language.PureScript.Docs.RenderedCode.Types.ContainingModule) ->
                 case a of wild {
                   Language.PureScript.Docs.RenderedCode.Types.ThisModule
                   -> case b of wild1 {
                        Language.PureScript.Docs.RenderedCode.Types.ThisModule
                        -> GHC.Types.True
                        Language.PureScript.Docs.RenderedCode.Types.OtherModule ipv
                        -> GHC.Types.False }
                   Language.PureScript.Docs.RenderedCode.Types.OtherModule a1
                   -> case b of wild1 {
                        Language.PureScript.Docs.RenderedCode.Types.ThisModule
                        -> GHC.Types.True
                        Language.PureScript.Docs.RenderedCode.Types.OtherModule b1
                        -> case GHC.Classes.$fOrd[]_$ccompare
                                  @ (Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.Namespace)
                                  (Language.PureScript.Names.$fOrdProperName
                                     @ 'Language.PureScript.Names.Namespace)
                                  a1 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                  b1 `cast` (Language.PureScript.Names.N:ModuleName[0]) of wild2 {
                             DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False } } }) -}
5e9b2b25a94f6bc04ac9258fb2be1c52
  $fOrdContainingModule_$ccompare ::
    Language.PureScript.Docs.RenderedCode.Types.ContainingModule
    -> Language.PureScript.Docs.RenderedCode.Types.ContainingModule
    -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Language.PureScript.Docs.RenderedCode.Types.ContainingModule)
                   (b :: Language.PureScript.Docs.RenderedCode.Types.ContainingModule) ->
                 case a of wild {
                   Language.PureScript.Docs.RenderedCode.Types.ThisModule
                   -> case b of wild1 {
                        Language.PureScript.Docs.RenderedCode.Types.ThisModule
                        -> GHC.Types.EQ
                        Language.PureScript.Docs.RenderedCode.Types.OtherModule ipv
                        -> GHC.Types.LT }
                   Language.PureScript.Docs.RenderedCode.Types.OtherModule a1
                   -> case b of wild1 {
                        Language.PureScript.Docs.RenderedCode.Types.ThisModule
                        -> GHC.Types.GT
                        Language.PureScript.Docs.RenderedCode.Types.OtherModule b1
                        -> GHC.Classes.$fOrd[]_$ccompare
                             @ (Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.Namespace)
                             (Language.PureScript.Names.$fOrdProperName
                                @ 'Language.PureScript.Names.Namespace)
                             a1 `cast` (Language.PureScript.Names.N:ModuleName[0])
                             b1 `cast` (Language.PureScript.Names.N:ModuleName[0]) } }) -}
5e9b2b25a94f6bc04ac9258fb2be1c52
  $fOrdContainingModule_$cmax ::
    Language.PureScript.Docs.RenderedCode.Types.ContainingModule
    -> Language.PureScript.Docs.RenderedCode.Types.ContainingModule
    -> Language.PureScript.Docs.RenderedCode.Types.ContainingModule
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (x :: Language.PureScript.Docs.RenderedCode.Types.ContainingModule)
                   (y :: Language.PureScript.Docs.RenderedCode.Types.ContainingModule) ->
                 case y of wild {
                   Language.PureScript.Docs.RenderedCode.Types.ThisModule -> x
                   Language.PureScript.Docs.RenderedCode.Types.OtherModule a1
                   -> case x of wild1 {
                        Language.PureScript.Docs.RenderedCode.Types.ThisModule -> wild
                        Language.PureScript.Docs.RenderedCode.Types.OtherModule b1
                        -> case GHC.Classes.$fOrd[]_$ccompare
                                  @ (Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.Namespace)
                                  (Language.PureScript.Names.$fOrdProperName
                                     @ 'Language.PureScript.Names.Namespace)
                                  a1 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                  b1 `cast` (Language.PureScript.Names.N:ModuleName[0]) of wild2 {
                             DEFAULT -> wild GHC.Types.LT -> wild1 } } }) -}
5e9b2b25a94f6bc04ac9258fb2be1c52
  $fOrdContainingModule_$cmin ::
    Language.PureScript.Docs.RenderedCode.Types.ContainingModule
    -> Language.PureScript.Docs.RenderedCode.Types.ContainingModule
    -> Language.PureScript.Docs.RenderedCode.Types.ContainingModule
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (x :: Language.PureScript.Docs.RenderedCode.Types.ContainingModule)
                   (y :: Language.PureScript.Docs.RenderedCode.Types.ContainingModule) ->
                 case y of wild {
                   Language.PureScript.Docs.RenderedCode.Types.ThisModule
                   -> case x of wild1 { DEFAULT ->
                      Language.PureScript.Docs.RenderedCode.Types.ThisModule }
                   Language.PureScript.Docs.RenderedCode.Types.OtherModule a1
                   -> case x of wild1 {
                        Language.PureScript.Docs.RenderedCode.Types.ThisModule
                        -> Language.PureScript.Docs.RenderedCode.Types.ThisModule
                        Language.PureScript.Docs.RenderedCode.Types.OtherModule b1
                        -> case GHC.Classes.$fOrd[]_$ccompare
                                  @ (Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.Namespace)
                                  (Language.PureScript.Names.$fOrdProperName
                                     @ 'Language.PureScript.Names.Namespace)
                                  a1 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                  b1 `cast` (Language.PureScript.Names.N:ModuleName[0]) of wild2 {
                             DEFAULT -> wild1 GHC.Types.LT -> wild } } }) -}
646c8e664a7ad59f4599a12adf022c29
  $fOrdLink ::
    GHC.Classes.Ord Language.PureScript.Docs.RenderedCode.Types.Link
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Docs.RenderedCode.Types.Link
                  Language.PureScript.Docs.RenderedCode.Types.$fEqLink
                  Language.PureScript.Docs.RenderedCode.Types.$fOrdLink_$ccompare
                  Language.PureScript.Docs.RenderedCode.Types.$fOrdLink_$c<
                  Language.PureScript.Docs.RenderedCode.Types.$fOrdLink_$c<=
                  Language.PureScript.Docs.RenderedCode.Types.$fOrdLink_$c>
                  Language.PureScript.Docs.RenderedCode.Types.$fOrdLink_$c>=
                  Language.PureScript.Docs.RenderedCode.Types.$fOrdLink_$cmax
                  Language.PureScript.Docs.RenderedCode.Types.$fOrdLink_$cmin -}
646c8e664a7ad59f4599a12adf022c29
  $fOrdLink_$c< ::
    Language.PureScript.Docs.RenderedCode.Types.Link
    -> Language.PureScript.Docs.RenderedCode.Types.Link
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.Docs.RenderedCode.Types.Link)
                   (b :: Language.PureScript.Docs.RenderedCode.Types.Link) ->
                 case a of wild {
                   Language.PureScript.Docs.RenderedCode.Types.NoLink
                   -> case b of wild1 {
                        Language.PureScript.Docs.RenderedCode.Types.NoLink
                        -> GHC.Types.False
                        Language.PureScript.Docs.RenderedCode.Types.Link ipv
                        -> GHC.Types.True }
                   Language.PureScript.Docs.RenderedCode.Types.Link a1
                   -> case b of wild1 {
                        Language.PureScript.Docs.RenderedCode.Types.NoLink
                        -> GHC.Types.False
                        Language.PureScript.Docs.RenderedCode.Types.Link b1
                        -> Language.PureScript.Docs.RenderedCode.Types.$fOrdContainingModule_$c<
                             a1
                             b1 } }) -}
646c8e664a7ad59f4599a12adf022c29
  $fOrdLink_$c<= ::
    Language.PureScript.Docs.RenderedCode.Types.Link
    -> Language.PureScript.Docs.RenderedCode.Types.Link
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Language.PureScript.Docs.RenderedCode.Types.Link)
                   (b :: Language.PureScript.Docs.RenderedCode.Types.Link) ->
                 case b of wild {
                   Language.PureScript.Docs.RenderedCode.Types.NoLink
                   -> case a of wild1 {
                        Language.PureScript.Docs.RenderedCode.Types.NoLink
                        -> GHC.Types.True
                        Language.PureScript.Docs.RenderedCode.Types.Link ipv
                        -> GHC.Types.False }
                   Language.PureScript.Docs.RenderedCode.Types.Link a1
                   -> case a of wild1 {
                        Language.PureScript.Docs.RenderedCode.Types.NoLink
                        -> GHC.Types.True
                        Language.PureScript.Docs.RenderedCode.Types.Link b1
                        -> case a1 of wild2 {
                             Language.PureScript.Docs.RenderedCode.Types.ThisModule
                             -> case b1 of wild3 {
                                  Language.PureScript.Docs.RenderedCode.Types.ThisModule
                                  -> GHC.Types.True
                                  Language.PureScript.Docs.RenderedCode.Types.OtherModule ipv
                                  -> GHC.Types.False }
                             Language.PureScript.Docs.RenderedCode.Types.OtherModule a2
                             -> case b1 of wild3 {
                                  Language.PureScript.Docs.RenderedCode.Types.ThisModule
                                  -> GHC.Types.True
                                  Language.PureScript.Docs.RenderedCode.Types.OtherModule b2
                                  -> case GHC.Classes.$fOrd[]_$ccompare
                                            @ (Language.PureScript.Names.ProperName
                                                 'Language.PureScript.Names.Namespace)
                                            (Language.PureScript.Names.$fOrdProperName
                                               @ 'Language.PureScript.Names.Namespace)
                                            a2 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                            b2
                                              `cast`
                                            (Language.PureScript.Names.N:ModuleName[0]) of wild4 {
                                       DEFAULT -> GHC.Types.True
                                       GHC.Types.LT -> GHC.Types.False } } } } }) -}
646c8e664a7ad59f4599a12adf022c29
  $fOrdLink_$c> ::
    Language.PureScript.Docs.RenderedCode.Types.Link
    -> Language.PureScript.Docs.RenderedCode.Types.Link
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, True)
                (\ (a :: Language.PureScript.Docs.RenderedCode.Types.Link)
                   (b :: Language.PureScript.Docs.RenderedCode.Types.Link) ->
                 Language.PureScript.Docs.RenderedCode.Types.$fOrdLink_$c< b a) -}
646c8e664a7ad59f4599a12adf022c29
  $fOrdLink_$c>= ::
    Language.PureScript.Docs.RenderedCode.Types.Link
    -> Language.PureScript.Docs.RenderedCode.Types.Link
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Language.PureScript.Docs.RenderedCode.Types.Link)
                   (b :: Language.PureScript.Docs.RenderedCode.Types.Link) ->
                 case a of wild {
                   Language.PureScript.Docs.RenderedCode.Types.NoLink
                   -> case b of wild1 {
                        Language.PureScript.Docs.RenderedCode.Types.NoLink
                        -> GHC.Types.True
                        Language.PureScript.Docs.RenderedCode.Types.Link ipv
                        -> GHC.Types.False }
                   Language.PureScript.Docs.RenderedCode.Types.Link a1
                   -> case b of wild1 {
                        Language.PureScript.Docs.RenderedCode.Types.NoLink
                        -> GHC.Types.True
                        Language.PureScript.Docs.RenderedCode.Types.Link b1
                        -> case a1 of wild2 {
                             Language.PureScript.Docs.RenderedCode.Types.ThisModule
                             -> case b1 of wild3 {
                                  Language.PureScript.Docs.RenderedCode.Types.ThisModule
                                  -> GHC.Types.True
                                  Language.PureScript.Docs.RenderedCode.Types.OtherModule ipv
                                  -> GHC.Types.False }
                             Language.PureScript.Docs.RenderedCode.Types.OtherModule a2
                             -> case b1 of wild3 {
                                  Language.PureScript.Docs.RenderedCode.Types.ThisModule
                                  -> GHC.Types.True
                                  Language.PureScript.Docs.RenderedCode.Types.OtherModule b2
                                  -> case GHC.Classes.$fOrd[]_$ccompare
                                            @ (Language.PureScript.Names.ProperName
                                                 'Language.PureScript.Names.Namespace)
                                            (Language.PureScript.Names.$fOrdProperName
                                               @ 'Language.PureScript.Names.Namespace)
                                            a2 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                            b2
                                              `cast`
                                            (Language.PureScript.Names.N:ModuleName[0]) of wild4 {
                                       DEFAULT -> GHC.Types.True
                                       GHC.Types.LT -> GHC.Types.False } } } } }) -}
646c8e664a7ad59f4599a12adf022c29
  $fOrdLink_$ccompare ::
    Language.PureScript.Docs.RenderedCode.Types.Link
    -> Language.PureScript.Docs.RenderedCode.Types.Link
    -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.Docs.RenderedCode.Types.Link)
                   (b :: Language.PureScript.Docs.RenderedCode.Types.Link) ->
                 case a of wild {
                   Language.PureScript.Docs.RenderedCode.Types.NoLink
                   -> case b of wild1 {
                        Language.PureScript.Docs.RenderedCode.Types.NoLink -> GHC.Types.EQ
                        Language.PureScript.Docs.RenderedCode.Types.Link ipv
                        -> GHC.Types.LT }
                   Language.PureScript.Docs.RenderedCode.Types.Link a1
                   -> case b of wild1 {
                        Language.PureScript.Docs.RenderedCode.Types.NoLink -> GHC.Types.GT
                        Language.PureScript.Docs.RenderedCode.Types.Link b1
                        -> Language.PureScript.Docs.RenderedCode.Types.$fOrdContainingModule_$ccompare
                             a1
                             b1 } }) -}
646c8e664a7ad59f4599a12adf022c29
  $fOrdLink_$cmax ::
    Language.PureScript.Docs.RenderedCode.Types.Link
    -> Language.PureScript.Docs.RenderedCode.Types.Link
    -> Language.PureScript.Docs.RenderedCode.Types.Link
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (x :: Language.PureScript.Docs.RenderedCode.Types.Link)
                   (y :: Language.PureScript.Docs.RenderedCode.Types.Link) ->
                 case y of wild {
                   Language.PureScript.Docs.RenderedCode.Types.NoLink -> x
                   Language.PureScript.Docs.RenderedCode.Types.Link a1
                   -> case x of wild1 {
                        Language.PureScript.Docs.RenderedCode.Types.NoLink -> wild
                        Language.PureScript.Docs.RenderedCode.Types.Link b1
                        -> case a1 of wild2 {
                             Language.PureScript.Docs.RenderedCode.Types.ThisModule
                             -> case b1 of wild3 {
                                  Language.PureScript.Docs.RenderedCode.Types.ThisModule -> wild
                                  Language.PureScript.Docs.RenderedCode.Types.OtherModule ipv
                                  -> wild1 }
                             Language.PureScript.Docs.RenderedCode.Types.OtherModule a2
                             -> case b1 of wild3 {
                                  Language.PureScript.Docs.RenderedCode.Types.ThisModule -> wild
                                  Language.PureScript.Docs.RenderedCode.Types.OtherModule b2
                                  -> case GHC.Classes.$fOrd[]_$ccompare
                                            @ (Language.PureScript.Names.ProperName
                                                 'Language.PureScript.Names.Namespace)
                                            (Language.PureScript.Names.$fOrdProperName
                                               @ 'Language.PureScript.Names.Namespace)
                                            a2 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                            b2
                                              `cast`
                                            (Language.PureScript.Names.N:ModuleName[0]) of wild4 {
                                       DEFAULT -> wild GHC.Types.LT -> wild1 } } } } }) -}
646c8e664a7ad59f4599a12adf022c29
  $fOrdLink_$cmin ::
    Language.PureScript.Docs.RenderedCode.Types.Link
    -> Language.PureScript.Docs.RenderedCode.Types.Link
    -> Language.PureScript.Docs.RenderedCode.Types.Link
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (x :: Language.PureScript.Docs.RenderedCode.Types.Link)
                   (y :: Language.PureScript.Docs.RenderedCode.Types.Link) ->
                 case y of wild {
                   Language.PureScript.Docs.RenderedCode.Types.NoLink
                   -> case x of wild1 { DEFAULT ->
                      Language.PureScript.Docs.RenderedCode.Types.NoLink }
                   Language.PureScript.Docs.RenderedCode.Types.Link a1
                   -> case x of wild1 {
                        Language.PureScript.Docs.RenderedCode.Types.NoLink
                        -> Language.PureScript.Docs.RenderedCode.Types.NoLink
                        Language.PureScript.Docs.RenderedCode.Types.Link b1
                        -> case a1 of wild2 {
                             Language.PureScript.Docs.RenderedCode.Types.ThisModule
                             -> case b1 of wild3 {
                                  Language.PureScript.Docs.RenderedCode.Types.ThisModule -> wild1
                                  Language.PureScript.Docs.RenderedCode.Types.OtherModule ipv
                                  -> wild }
                             Language.PureScript.Docs.RenderedCode.Types.OtherModule a2
                             -> case b1 of wild3 {
                                  Language.PureScript.Docs.RenderedCode.Types.ThisModule -> wild1
                                  Language.PureScript.Docs.RenderedCode.Types.OtherModule b2
                                  -> case GHC.Classes.$fOrd[]_$ccompare
                                            @ (Language.PureScript.Names.ProperName
                                                 'Language.PureScript.Names.Namespace)
                                            (Language.PureScript.Names.$fOrdProperName
                                               @ 'Language.PureScript.Names.Namespace)
                                            a2 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                            b2
                                              `cast`
                                            (Language.PureScript.Names.N:ModuleName[0]) of wild4 {
                                       DEFAULT -> wild1 GHC.Types.LT -> wild } } } } }) -}
e686c6add7c243d229f3b74d733eb7d2
  $fOrdNamespace ::
    GHC.Classes.Ord
      Language.PureScript.Docs.RenderedCode.Types.Namespace
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Docs.RenderedCode.Types.Namespace
                  Language.PureScript.Docs.RenderedCode.Types.$fEqNamespace
                  Language.PureScript.Docs.RenderedCode.Types.$fOrdNamespace_$ccompare
                  Language.PureScript.Docs.RenderedCode.Types.$fOrdNamespace_$c<
                  Language.PureScript.Docs.RenderedCode.Types.$fOrdNamespace_$c<=
                  Language.PureScript.Docs.RenderedCode.Types.$fOrdNamespace_$c>
                  Language.PureScript.Docs.RenderedCode.Types.$fOrdNamespace_$c>=
                  Language.PureScript.Docs.RenderedCode.Types.$fOrdNamespace_$cmax
                  Language.PureScript.Docs.RenderedCode.Types.$fOrdNamespace_$cmin -}
e686c6add7c243d229f3b74d733eb7d2
  $fOrdNamespace_$c< ::
    Language.PureScript.Docs.RenderedCode.Types.Namespace
    -> Language.PureScript.Docs.RenderedCode.Types.Namespace
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.Docs.RenderedCode.Types.Namespace)
                   (b :: Language.PureScript.Docs.RenderedCode.Types.Namespace) ->
                 case a of wild {
                   Language.PureScript.Docs.RenderedCode.Types.ValueLevel
                   -> case b of wild1 {
                        Language.PureScript.Docs.RenderedCode.Types.ValueLevel
                        -> GHC.Types.False
                        Language.PureScript.Docs.RenderedCode.Types.TypeLevel
                        -> GHC.Types.True
                        Language.PureScript.Docs.RenderedCode.Types.KindLevel
                        -> GHC.Types.True }
                   Language.PureScript.Docs.RenderedCode.Types.TypeLevel
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Docs.RenderedCode.Types.KindLevel
                        -> GHC.Types.True }
                   Language.PureScript.Docs.RenderedCode.Types.KindLevel
                   -> case b of wild1 { DEFAULT -> GHC.Types.False } }) -}
e686c6add7c243d229f3b74d733eb7d2
  $fOrdNamespace_$c<= ::
    Language.PureScript.Docs.RenderedCode.Types.Namespace
    -> Language.PureScript.Docs.RenderedCode.Types.Namespace
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Language.PureScript.Docs.RenderedCode.Types.Namespace)
                   (b :: Language.PureScript.Docs.RenderedCode.Types.Namespace) ->
                 let {
                   $j :: GHC.Prim.Int# -> GHC.Types.Bool
                     <join 1> {- Arity: 1, Strictness: <S,U> -}
                   = \ (a# :: GHC.Prim.Int#)[OneShot] ->
                     case a of wild {
                       Language.PureScript.Docs.RenderedCode.Types.ValueLevel
                       -> case GHC.Prim.<# a# 0# of lwild {
                            DEFAULT -> GHC.Types.True 1# -> GHC.Types.False }
                       Language.PureScript.Docs.RenderedCode.Types.TypeLevel
                       -> case GHC.Prim.<# a# 1# of lwild {
                            DEFAULT -> GHC.Types.True 1# -> GHC.Types.False }
                       Language.PureScript.Docs.RenderedCode.Types.KindLevel
                       -> case GHC.Prim.<# a# 2# of lwild {
                            DEFAULT -> GHC.Types.True 1# -> GHC.Types.False } }
                 } in
                 case b of wild {
                   Language.PureScript.Docs.RenderedCode.Types.ValueLevel -> $j 0#
                   Language.PureScript.Docs.RenderedCode.Types.TypeLevel -> $j 1#
                   Language.PureScript.Docs.RenderedCode.Types.KindLevel
                   -> $j 2# }) -}
e686c6add7c243d229f3b74d733eb7d2
  $fOrdNamespace_$c> ::
    Language.PureScript.Docs.RenderedCode.Types.Namespace
    -> Language.PureScript.Docs.RenderedCode.Types.Namespace
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, True)
                (\ (a :: Language.PureScript.Docs.RenderedCode.Types.Namespace)
                   (b :: Language.PureScript.Docs.RenderedCode.Types.Namespace) ->
                 Language.PureScript.Docs.RenderedCode.Types.$fOrdNamespace_$c<
                   b
                   a) -}
e686c6add7c243d229f3b74d733eb7d2
  $fOrdNamespace_$c>= ::
    Language.PureScript.Docs.RenderedCode.Types.Namespace
    -> Language.PureScript.Docs.RenderedCode.Types.Namespace
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Language.PureScript.Docs.RenderedCode.Types.Namespace)
                   (b :: Language.PureScript.Docs.RenderedCode.Types.Namespace) ->
                 let {
                   $j :: GHC.Prim.Int# -> GHC.Types.Bool
                     <join 1> {- Arity: 1, Strictness: <S,U> -}
                   = \ (a# :: GHC.Prim.Int#)[OneShot] ->
                     case b of wild {
                       Language.PureScript.Docs.RenderedCode.Types.ValueLevel
                       -> case GHC.Prim.<# a# 0# of lwild {
                            DEFAULT -> GHC.Types.True 1# -> GHC.Types.False }
                       Language.PureScript.Docs.RenderedCode.Types.TypeLevel
                       -> case GHC.Prim.<# a# 1# of lwild {
                            DEFAULT -> GHC.Types.True 1# -> GHC.Types.False }
                       Language.PureScript.Docs.RenderedCode.Types.KindLevel
                       -> case GHC.Prim.<# a# 2# of lwild {
                            DEFAULT -> GHC.Types.True 1# -> GHC.Types.False } }
                 } in
                 case a of wild {
                   Language.PureScript.Docs.RenderedCode.Types.ValueLevel -> $j 0#
                   Language.PureScript.Docs.RenderedCode.Types.TypeLevel -> $j 1#
                   Language.PureScript.Docs.RenderedCode.Types.KindLevel
                   -> $j 2# }) -}
e686c6add7c243d229f3b74d733eb7d2
  $fOrdNamespace_$ccompare ::
    Language.PureScript.Docs.RenderedCode.Types.Namespace
    -> Language.PureScript.Docs.RenderedCode.Types.Namespace
    -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Language.PureScript.Docs.RenderedCode.Types.Namespace)
                   (b :: Language.PureScript.Docs.RenderedCode.Types.Namespace) ->
                 case a of wild {
                   Language.PureScript.Docs.RenderedCode.Types.ValueLevel
                   -> case b of wild1 {
                        Language.PureScript.Docs.RenderedCode.Types.ValueLevel
                        -> GHC.Types.EQ
                        Language.PureScript.Docs.RenderedCode.Types.TypeLevel
                        -> GHC.Types.LT
                        Language.PureScript.Docs.RenderedCode.Types.KindLevel
                        -> GHC.Types.LT }
                   Language.PureScript.Docs.RenderedCode.Types.TypeLevel
                   -> case b of wild1 {
                        Language.PureScript.Docs.RenderedCode.Types.ValueLevel
                        -> GHC.Types.GT
                        Language.PureScript.Docs.RenderedCode.Types.TypeLevel
                        -> GHC.Types.EQ
                        Language.PureScript.Docs.RenderedCode.Types.KindLevel
                        -> GHC.Types.LT }
                   Language.PureScript.Docs.RenderedCode.Types.KindLevel
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Language.PureScript.Docs.RenderedCode.Types.KindLevel
                        -> GHC.Types.EQ } }) -}
e686c6add7c243d229f3b74d733eb7d2
  $fOrdNamespace_$cmax ::
    Language.PureScript.Docs.RenderedCode.Types.Namespace
    -> Language.PureScript.Docs.RenderedCode.Types.Namespace
    -> Language.PureScript.Docs.RenderedCode.Types.Namespace
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Docs.RenderedCode.Types.Namespace)
                   (y :: Language.PureScript.Docs.RenderedCode.Types.Namespace) ->
                 case Language.PureScript.Docs.RenderedCode.Types.$fOrdNamespace_$c<=
                        x
                        y of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
e686c6add7c243d229f3b74d733eb7d2
  $fOrdNamespace_$cmin ::
    Language.PureScript.Docs.RenderedCode.Types.Namespace
    -> Language.PureScript.Docs.RenderedCode.Types.Namespace
    -> Language.PureScript.Docs.RenderedCode.Types.Namespace
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Docs.RenderedCode.Types.Namespace)
                   (y :: Language.PureScript.Docs.RenderedCode.Types.Namespace) ->
                 case Language.PureScript.Docs.RenderedCode.Types.$fOrdNamespace_$c<=
                        x
                        y of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
b76660a0424da31964a78f3df8712e5d
  $fOrdRenderedCode ::
    GHC.Classes.Ord
      Language.PureScript.Docs.RenderedCode.Types.RenderedCode
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Docs.RenderedCode.Types.RenderedCode
                  Language.PureScript.Docs.RenderedCode.Types.$fEqRenderedCode
                  Language.PureScript.Docs.RenderedCode.Types.$fOrdRenderedCode7
                    `cast`
                  (Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])
                   ->_R Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])
                   ->_R <GHC.Types.Ordering>_R)
                  Language.PureScript.Docs.RenderedCode.Types.$fOrdRenderedCode6
                    `cast`
                  (Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])
                   ->_R Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])
                   ->_R <GHC.Types.Bool>_R)
                  Language.PureScript.Docs.RenderedCode.Types.$fOrdRenderedCode5
                    `cast`
                  (Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])
                   ->_R Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])
                   ->_R <GHC.Types.Bool>_R)
                  Language.PureScript.Docs.RenderedCode.Types.$fOrdRenderedCode4
                    `cast`
                  (Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])
                   ->_R Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])
                   ->_R <GHC.Types.Bool>_R)
                  Language.PureScript.Docs.RenderedCode.Types.$fOrdRenderedCode3
                    `cast`
                  (Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])
                   ->_R Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])
                   ->_R <GHC.Types.Bool>_R)
                  Language.PureScript.Docs.RenderedCode.Types.$fOrdRenderedCode2
                    `cast`
                  (Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])
                   ->_R Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])
                   ->_R Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0]))
                  Language.PureScript.Docs.RenderedCode.Types.$fOrdRenderedCode1
                    `cast`
                  (Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])
                   ->_R Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])
                   ->_R Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])) -}
9b1f65d513cd2be7547f947f356c44a4
  $fOrdRenderedCode1 ::
    [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
    -> [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
    -> [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement])
                   (y :: [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                        Language.PureScript.Docs.RenderedCode.Types.$fOrdRenderedCodeElement
                        x
                        y of wild {
                   DEFAULT -> x GHC.Types.GT -> y }) -}
91e1b3149bc5fcb1c0cdff49255ef739
  $fOrdRenderedCode2 ::
    [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
    -> [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
    -> [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement])
                   (y :: [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                        Language.PureScript.Docs.RenderedCode.Types.$fOrdRenderedCodeElement
                        x
                        y of wild {
                   DEFAULT -> y GHC.Types.GT -> x }) -}
5071216eea9755933a4496d48b42ac60
  $fOrdRenderedCode3 ::
    [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
    -> [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement])
                   (y :: [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                        Language.PureScript.Docs.RenderedCode.Types.$fOrdRenderedCodeElement
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }) -}
6d18d3f59753de71d67209a491dd3f51
  $fOrdRenderedCode4 ::
    [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
    -> [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement])
                   (y :: [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                        Language.PureScript.Docs.RenderedCode.Types.$fOrdRenderedCodeElement
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True }) -}
974c98c850aee954133c1ef945a54b58
  $fOrdRenderedCode5 ::
    [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
    -> [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement])
                   (y :: [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                        Language.PureScript.Docs.RenderedCode.Types.$fOrdRenderedCodeElement
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False }) -}
3e43e4f59f99c50010d30b41831dc3a4
  $fOrdRenderedCode6 ::
    [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
    -> [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement])
                   (y :: [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                        Language.PureScript.Docs.RenderedCode.Types.$fOrdRenderedCodeElement
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True }) -}
47a09c99a7bd9dfb4d91d5cb73549e32
  $fOrdRenderedCode7 ::
    [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
    -> [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
    -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (GHC.Classes.$fOrd[]_$ccompare
                   @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                   Language.PureScript.Docs.RenderedCode.Types.$fOrdRenderedCodeElement) -}
8d7e5831b8ea3cae37734f270bdcdcc0
  $fOrdRenderedCodeElement ::
    GHC.Classes.Ord
      Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                  Language.PureScript.Docs.RenderedCode.Types.$fEqRenderedCodeElement
                  Language.PureScript.Docs.RenderedCode.Types.$fOrdRenderedCodeElement_$ccompare
                  Language.PureScript.Docs.RenderedCode.Types.$fOrdRenderedCodeElement_$c<
                  Language.PureScript.Docs.RenderedCode.Types.$fOrdRenderedCodeElement_$c<=
                  Language.PureScript.Docs.RenderedCode.Types.$fOrdRenderedCodeElement_$c>
                  Language.PureScript.Docs.RenderedCode.Types.$fOrdRenderedCodeElement_$c>=
                  Language.PureScript.Docs.RenderedCode.Types.$fOrdRenderedCodeElement_$cmax
                  Language.PureScript.Docs.RenderedCode.Types.$fOrdRenderedCodeElement_$cmin -}
8d7e5831b8ea3cae37734f270bdcdcc0
  $fOrdRenderedCodeElement_$c< ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
    -> Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)
                   (y :: Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement) ->
                 case Language.PureScript.Docs.RenderedCode.Types.$fOrdRenderedCodeElement_$ccompare
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True }) -}
8d7e5831b8ea3cae37734f270bdcdcc0
  $fOrdRenderedCodeElement_$c<= ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
    -> Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)
                   (y :: Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement) ->
                 case Language.PureScript.Docs.RenderedCode.Types.$fOrdRenderedCodeElement_$ccompare
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False }) -}
8d7e5831b8ea3cae37734f270bdcdcc0
  $fOrdRenderedCodeElement_$c> ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
    -> Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)
                   (y :: Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement) ->
                 case Language.PureScript.Docs.RenderedCode.Types.$fOrdRenderedCodeElement_$ccompare
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True }) -}
8d7e5831b8ea3cae37734f270bdcdcc0
  $fOrdRenderedCodeElement_$c>= ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
    -> Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)
                   (y :: Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement) ->
                 case Language.PureScript.Docs.RenderedCode.Types.$fOrdRenderedCodeElement_$ccompare
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }) -}
8d7e5831b8ea3cae37734f270bdcdcc0
  $fOrdRenderedCodeElement_$ccompare ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
    -> Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
    -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)
                   (b :: Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement) ->
                 case a of wild {
                   Language.PureScript.Docs.RenderedCode.Types.Syntax a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.LT
                        Language.PureScript.Docs.RenderedCode.Types.Syntax b1
                        -> Data.Text.$fOrdText_$ccompare a1 b1 }
                   Language.PureScript.Docs.RenderedCode.Types.Keyword a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.LT
                        Language.PureScript.Docs.RenderedCode.Types.Syntax ds
                        -> GHC.Types.GT
                        Language.PureScript.Docs.RenderedCode.Types.Keyword b1
                        -> Data.Text.$fOrdText_$ccompare a1 b1 }
                   Language.PureScript.Docs.RenderedCode.Types.Space
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Language.PureScript.Docs.RenderedCode.Types.Space -> GHC.Types.EQ
                        Language.PureScript.Docs.RenderedCode.Types.Symbol ds ds1 ds2
                        -> GHC.Types.LT }
                   Language.PureScript.Docs.RenderedCode.Types.Symbol a1 a2 a3
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Language.PureScript.Docs.RenderedCode.Types.Symbol b1 b2 b3
                        -> let {
                             $j :: GHC.Types.Ordering <join 0>
                             = case a2 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                               case b2 of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                               case Data.Text.$w$ccompare ww1 ww2 ww3 ww5 ww6 ww7 of wild2 {
                                 GHC.Types.LT -> GHC.Types.LT
                                 GHC.Types.EQ
                                 -> Language.PureScript.Docs.RenderedCode.Types.$fOrdLink_$ccompare
                                      a3
                                      b3
                                 GHC.Types.GT -> GHC.Types.GT } } }
                           } in
                           case a1 of wild2 {
                             Language.PureScript.Docs.RenderedCode.Types.ValueLevel
                             -> case b1 of wild3 {
                                  Language.PureScript.Docs.RenderedCode.Types.ValueLevel -> $j
                                  Language.PureScript.Docs.RenderedCode.Types.TypeLevel
                                  -> GHC.Types.LT
                                  Language.PureScript.Docs.RenderedCode.Types.KindLevel
                                  -> GHC.Types.LT }
                             Language.PureScript.Docs.RenderedCode.Types.TypeLevel
                             -> case b1 of wild3 {
                                  Language.PureScript.Docs.RenderedCode.Types.ValueLevel
                                  -> GHC.Types.GT
                                  Language.PureScript.Docs.RenderedCode.Types.TypeLevel -> $j
                                  Language.PureScript.Docs.RenderedCode.Types.KindLevel
                                  -> GHC.Types.LT }
                             Language.PureScript.Docs.RenderedCode.Types.KindLevel
                             -> case b1 of wild3 {
                                  DEFAULT -> GHC.Types.GT
                                  Language.PureScript.Docs.RenderedCode.Types.KindLevel
                                  -> $j } } } }) -}
8d7e5831b8ea3cae37734f270bdcdcc0
  $fOrdRenderedCodeElement_$cmax ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
    -> Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
    -> Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)
                   (y :: Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement) ->
                 case Language.PureScript.Docs.RenderedCode.Types.$fOrdRenderedCodeElement_$ccompare
                        x
                        y of wild {
                   DEFAULT -> y GHC.Types.GT -> x }) -}
8d7e5831b8ea3cae37734f270bdcdcc0
  $fOrdRenderedCodeElement_$cmin ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
    -> Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
    -> Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)
                   (y :: Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement) ->
                 case Language.PureScript.Docs.RenderedCode.Types.$fOrdRenderedCodeElement_$ccompare
                        x
                        y of wild {
                   DEFAULT -> x GHC.Types.GT -> y }) -}
b76660a0424da31964a78f3df8712e5d
  $fSemigroupRenderedCode ::
    GHC.Base.Semigroup
      Language.PureScript.Docs.RenderedCode.Types.RenderedCode
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Docs.RenderedCode.Types.RenderedCode
                  (GHC.Base.++
                     @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)
                    `cast`
                  (Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])
                   ->_R Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])
                   ->_R Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0]))
                  (GHC.Base.$fSemigroup[]_$csconcat
                     @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)
                    `cast`
                  ((GHC.Base.NonEmpty
                      (Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])))_R
                   ->_R Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0]))
                  Language.PureScript.Docs.RenderedCode.Types.$fSemigroupRenderedCode1
                    `cast`
                  (forall (b :: <*>_N).
                   <GHC.Real.Integral b>_R
                   ->_R <b>_R
                   ->_R Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])
                   ->_R Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])) -}
e44e4ca934b4271e1b7af7dac3d93bd1
  $fSemigroupRenderedCode1 ::
    GHC.Real.Integral b =>
    b
    -> [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
    -> [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ b ($dIntegral :: GHC.Real.Integral b) ->
                 GHC.Magic.noinline
                   @ (forall b1 a. GHC.Real.Integral b1 => b1 -> [a] -> [a])
                   Data.Semigroup.Internal.stimesList
                   @ b
                   @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                   $dIntegral) -}
5e9b2b25a94f6bc04ac9258fb2be1c52
  $fShowContainingModule ::
    GHC.Show.Show
      Language.PureScript.Docs.RenderedCode.Types.ContainingModule
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Docs.RenderedCode.Types.ContainingModule
                  Language.PureScript.Docs.RenderedCode.Types.$fShowContainingModule_$cshowsPrec
                  Language.PureScript.Docs.RenderedCode.Types.$fShowContainingModule_$cshow
                  Language.PureScript.Docs.RenderedCode.Types.$fShowContainingModule_$cshowList -}
5e9b2b25a94f6bc04ac9258fb2be1c52
  $fShowContainingModule1 ::
    Language.PureScript.Docs.RenderedCode.Types.ContainingModule
    -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (Language.PureScript.Docs.RenderedCode.Types.$fShowContainingModule_$cshowsPrec
                   Language.PureScript.Docs.RenderedCode.Types.asContainingModule15) -}
bed5a1625fdae6c95426aedde0c9f2b2
  $fShowContainingModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("OtherModule "#) -}
1255bc9bb7782193625e5315414dbaef
  $fShowContainingModule3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Docs.RenderedCode.Types.asContainingModule19) -}
5e9b2b25a94f6bc04ac9258fb2be1c52
  $fShowContainingModule_$cshow ::
    Language.PureScript.Docs.RenderedCode.Types.ContainingModule
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: Language.PureScript.Docs.RenderedCode.Types.ContainingModule) ->
                 case x of wild {
                   Language.PureScript.Docs.RenderedCode.Types.ThisModule
                   -> Language.PureScript.Docs.RenderedCode.Types.$fShowContainingModule3
                   Language.PureScript.Docs.RenderedCode.Types.OtherModule b1
                   -> GHC.CString.unpackAppendCString#
                        Language.PureScript.Docs.RenderedCode.Types.$fShowContainingModule2
                        (Language.PureScript.Names.$w$cshowsPrec
                           11#
                           b1
                           (GHC.Types.[] @ GHC.Types.Char)) }) -}
5e9b2b25a94f6bc04ac9258fb2be1c52
  $fShowContainingModule_$cshowList ::
    [Language.PureScript.Docs.RenderedCode.Types.ContainingModule]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Docs.RenderedCode.Types.ContainingModule])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Docs.RenderedCode.Types.ContainingModule
                   Language.PureScript.Docs.RenderedCode.Types.$fShowContainingModule1
                   ls
                   s) -}
5e9b2b25a94f6bc04ac9258fb2be1c52
  $fShowContainingModule_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Docs.RenderedCode.Types.ContainingModule
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ (ds :: GHC.Types.Int)
                   (ds1 :: Language.PureScript.Docs.RenderedCode.Types.ContainingModule)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   Language.PureScript.Docs.RenderedCode.Types.ThisModule
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.Docs.RenderedCode.Types.$fShowContainingModule3
                        eta
                   Language.PureScript.Docs.RenderedCode.Types.OtherModule b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.>=# x 11# of lwild {
                        DEFAULT
                        -> GHC.CString.unpackAppendCString#
                             Language.PureScript.Docs.RenderedCode.Types.$fShowContainingModule2
                             (Language.PureScript.Names.$w$cshowsPrec 11# b1 eta)
                        1#
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.CString.unpackAppendCString#
                                Language.PureScript.Docs.RenderedCode.Types.$fShowContainingModule2
                                (Language.PureScript.Names.$w$cshowsPrec
                                   11#
                                   b1
                                   (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.$fShow(,)2
                                      eta))) } } }) -}
646c8e664a7ad59f4599a12adf022c29
  $fShowLink ::
    GHC.Show.Show Language.PureScript.Docs.RenderedCode.Types.Link
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Docs.RenderedCode.Types.Link
                  Language.PureScript.Docs.RenderedCode.Types.$fShowLink_$cshowsPrec
                  Language.PureScript.Docs.RenderedCode.Types.$fShowLink_$cshow
                  Language.PureScript.Docs.RenderedCode.Types.$fShowLink_$cshowList -}
646c8e664a7ad59f4599a12adf022c29
  $fShowLink1 ::
    Language.PureScript.Docs.RenderedCode.Types.Link -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (Language.PureScript.Docs.RenderedCode.Types.$fShowLink_$cshowsPrec
                   Language.PureScript.Docs.RenderedCode.Types.asContainingModule15) -}
3661a9d2af89c2eff2cca994805e3947
  $fShowLink2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11#) -}
0fabffd0ca797ce7e832af2aea9b1e77
  $fShowLink3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Docs.RenderedCode.Types.$fShowLink4) -}
8f86b72cd7b9ccaed90b570a677d11b1
  $fShowLink4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Link "#) -}
1ceaff64d74150530f47202f34325797
  $fShowLink5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Docs.RenderedCode.Types.$fFromJSONLink11) -}
26d1073c8c674834141a97c5efb868fe
  $fShowLink6 :: [GHC.Types.Char]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.$fShow(,)2
                   (GHC.Types.[] @ GHC.Types.Char)) -}
646c8e664a7ad59f4599a12adf022c29
  $fShowLink_$cshow ::
    Language.PureScript.Docs.RenderedCode.Types.Link -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: Language.PureScript.Docs.RenderedCode.Types.Link) ->
                 case x of wild {
                   Language.PureScript.Docs.RenderedCode.Types.NoLink
                   -> Language.PureScript.Docs.RenderedCode.Types.$fShowLink5
                   Language.PureScript.Docs.RenderedCode.Types.Link b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.Docs.RenderedCode.Types.$fShowLink3
                        (case b1 of wild1 {
                           Language.PureScript.Docs.RenderedCode.Types.ThisModule
                           -> Language.PureScript.Docs.RenderedCode.Types.$fShowContainingModule3
                           Language.PureScript.Docs.RenderedCode.Types.OtherModule b2
                           -> GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.$fShow(,)4
                                (GHC.CString.unpackAppendCString#
                                   Language.PureScript.Docs.RenderedCode.Types.$fShowContainingModule2
                                   (Language.PureScript.Names.$w$cshowsPrec
                                      11#
                                      b2
                                      Language.PureScript.Docs.RenderedCode.Types.$fShowLink6)) }) }) -}
646c8e664a7ad59f4599a12adf022c29
  $fShowLink_$cshowList ::
    [Language.PureScript.Docs.RenderedCode.Types.Link]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Docs.RenderedCode.Types.Link])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Docs.RenderedCode.Types.Link
                   Language.PureScript.Docs.RenderedCode.Types.$fShowLink1
                   ls
                   s) -}
646c8e664a7ad59f4599a12adf022c29
  $fShowLink_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Docs.RenderedCode.Types.Link
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U>,
     Unfolding: (\ (ds :: GHC.Types.Int)
                   (ds1 :: Language.PureScript.Docs.RenderedCode.Types.Link)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   Language.PureScript.Docs.RenderedCode.Types.NoLink
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.Docs.RenderedCode.Types.$fShowLink5
                        eta
                   Language.PureScript.Docs.RenderedCode.Types.Link b1
                   -> case ds of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.>=# x 11# of lwild {
                        DEFAULT
                        -> GHC.Base.++
                             @ GHC.Types.Char
                             Language.PureScript.Docs.RenderedCode.Types.$fShowLink3
                             (Language.PureScript.Docs.RenderedCode.Types.$fShowContainingModule_$cshowsPrec
                                Language.PureScript.Docs.RenderedCode.Types.$fShowLink2
                                b1
                                eta)
                        1#
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Language.PureScript.Docs.RenderedCode.Types.$fShowLink3
                                (Language.PureScript.Docs.RenderedCode.Types.$fShowContainingModule_$cshowsPrec
                                   Language.PureScript.Docs.RenderedCode.Types.$fShowLink2
                                   b1
                                   (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.$fShow(,)2
                                      eta))) } } }) -}
e686c6add7c243d229f3b74d733eb7d2
  $fShowNamespace ::
    GHC.Show.Show Language.PureScript.Docs.RenderedCode.Types.Namespace
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Docs.RenderedCode.Types.Namespace
                  Language.PureScript.Docs.RenderedCode.Types.$fShowNamespace_$cshowsPrec
                  Language.PureScript.Docs.RenderedCode.Types.$fShowNamespace_$cshow
                  Language.PureScript.Docs.RenderedCode.Types.$fShowNamespace_$cshowList -}
cd482027fad1eed24a8450e3ce9af8d3
  $fShowNamespace1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Docs.RenderedCode.Types.$fFromJSONNamespace7) -}
e6ee76c723ea9d65b6aeebbc502cda58
  $fShowNamespace2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Docs.RenderedCode.Types.$fFromJSONNamespace9) -}
9d59daadceb8f25e2e8ea17197256aa9
  $fShowNamespace3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Docs.RenderedCode.Types.$fFromJSONNamespace11) -}
e686c6add7c243d229f3b74d733eb7d2
  $fShowNamespace_$cshow ::
    Language.PureScript.Docs.RenderedCode.Types.Namespace
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Docs.RenderedCode.Types.Namespace) ->
                 case x of wild {
                   Language.PureScript.Docs.RenderedCode.Types.ValueLevel
                   -> Language.PureScript.Docs.RenderedCode.Types.$fShowNamespace3
                   Language.PureScript.Docs.RenderedCode.Types.TypeLevel
                   -> Language.PureScript.Docs.RenderedCode.Types.$fShowNamespace2
                   Language.PureScript.Docs.RenderedCode.Types.KindLevel
                   -> Language.PureScript.Docs.RenderedCode.Types.$fShowNamespace1 }) -}
e686c6add7c243d229f3b74d733eb7d2
  $fShowNamespace_$cshowList ::
    [Language.PureScript.Docs.RenderedCode.Types.Namespace]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Docs.RenderedCode.Types.Namespace])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Docs.RenderedCode.Types.Namespace
                   Language.PureScript.Docs.RenderedCode.Types.$w$cshowsPrec
                   ls
                   s) -}
e686c6add7c243d229f3b74d733eb7d2
  $fShowNamespace_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Docs.RenderedCode.Types.Namespace
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: [0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Docs.RenderedCode.Types.Namespace)
                   (w2 :: GHC.Base.String) ->
                 Language.PureScript.Docs.RenderedCode.Types.$w$cshowsPrec w1 w2) -}
b76660a0424da31964a78f3df8712e5d
  $fShowRenderedCode ::
    GHC.Show.Show
      Language.PureScript.Docs.RenderedCode.Types.RenderedCode
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Docs.RenderedCode.Types.RenderedCode
                  Language.PureScript.Docs.RenderedCode.Types.$fShowRenderedCode_$cshowsPrec1
                  Language.PureScript.Docs.RenderedCode.Types.$fShowRenderedCode_$cshow
                  Language.PureScript.Docs.RenderedCode.Types.$fShowRenderedCode_$cshowList -}
b76660a0424da31964a78f3df8712e5d
  $fShowRenderedCode1 ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCode
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,1*U><L,U>,
     Unfolding: (\ (w :: Language.PureScript.Docs.RenderedCode.Types.RenderedCode)
                   (w1 :: GHC.Base.String) ->
                 Language.PureScript.Docs.RenderedCode.Types.$w$cshowsPrec1
                   0#
                   w
                   w1) -}
13e4601bcb74376659ce4343bb158bc3
  $fShowRenderedCode2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("}"#) -}
4b90b62b0cb45c40508ea924971d3e89
  $fShowRenderedCode3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("unRC = "#) -}
0bb40f2df3b6f6d89783013f5072cefe
  $fShowRenderedCode4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("RC {"#) -}
8d7e5831b8ea3cae37734f270bdcdcc0
  $fShowRenderedCodeElement ::
    GHC.Show.Show
      Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                  Language.PureScript.Docs.RenderedCode.Types.$fShowRenderedCode_$cshowsPrec
                  Language.PureScript.Docs.RenderedCode.Types.$fShowRenderedCodeElement_$cshow
                  Language.PureScript.Docs.RenderedCode.Types.$fShowRenderedCodeElement_$cshowList -}
8d7e5831b8ea3cae37734f270bdcdcc0
  $fShowRenderedCodeElement1 ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
    -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (Language.PureScript.Docs.RenderedCode.Types.$fShowRenderedCode_$cshowsPrec
                   Language.PureScript.Docs.RenderedCode.Types.asContainingModule15) -}
8d7e5831b8ea3cae37734f270bdcdcc0
  $fShowRenderedCodeElement_$cshow ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement) ->
                 Language.PureScript.Docs.RenderedCode.Types.$fShowRenderedCode_$cshowsPrec
                   Language.PureScript.Docs.RenderedCode.Types.asContainingModule15
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
8d7e5831b8ea3cae37734f270bdcdcc0
  $fShowRenderedCodeElement_$cshowList ::
    [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                   Language.PureScript.Docs.RenderedCode.Types.$fShowRenderedCodeElement1
                   ls
                   s) -}
b76660a0424da31964a78f3df8712e5d
  $fShowRenderedCode_$cshow ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCode
    -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Docs.RenderedCode.Types.RenderedCode) ->
                 Language.PureScript.Docs.RenderedCode.Types.$fShowRenderedCode_$cshowsPrec1
                   Language.PureScript.Docs.RenderedCode.Types.asContainingModule15
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
b76660a0424da31964a78f3df8712e5d
  $fShowRenderedCode_$cshowList ::
    [Language.PureScript.Docs.RenderedCode.Types.RenderedCode]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Docs.RenderedCode.Types.RenderedCode])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Docs.RenderedCode.Types.RenderedCode
                   Language.PureScript.Docs.RenderedCode.Types.$fShowRenderedCode1
                   ls
                   s) -}
8d7e5831b8ea3cae37734f270bdcdcc0
  $fShowRenderedCode_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U> -}
b76660a0424da31964a78f3df8712e5d
  $fShowRenderedCode_$cshowsPrec1 ::
    GHC.Types.Int
    -> Language.PureScript.Docs.RenderedCode.Types.RenderedCode
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><L,1*U><L,U>, Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Docs.RenderedCode.Types.RenderedCode)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Language.PureScript.Docs.RenderedCode.Types.$w$cshowsPrec1
                   ww1
                   w1
                   w2 }) -}
5e9b2b25a94f6bc04ac9258fb2be1c52
  $fToJSONContainingModule ::
    Data.Aeson.Types.ToJSON.ToJSON
      Language.PureScript.Docs.RenderedCode.Types.ContainingModule
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Docs.RenderedCode.Types.ContainingModule
                  Language.PureScript.Docs.RenderedCode.Types.$fToJSONContainingModule_$ctoJSON
                  Language.PureScript.Docs.RenderedCode.Types.$fToJSONContainingModule_$ctoEncoding
                  Language.PureScript.Docs.RenderedCode.Types.$fToJSONContainingModule_$ctoJSONList
                  Language.PureScript.Docs.RenderedCode.Types.$fToJSONContainingModule_$ctoEncodingList -}
3a1fc6fc326685f030e43919ec745379
  $fToJSONContainingModule1 :: Data.Aeson.Types.Internal.Value
  {- Strictness: m3,
     Unfolding: (Data.Aeson.Types.Internal.String
                   Language.PureScript.Names.runModuleName1) -}
1f0658cad37a4b273d57ad3f8dde1ae6
  $fToJSONContainingModule2 :: Data.Aeson.Types.Internal.Value
  {- Unfolding: (case Language.PureScript.Docs.RenderedCode.Types.asContainingModule10 of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 Data.Aeson.Types.Internal.String dt }) -}
1efd8febc47db11ad6a0b01816e0703b
  $fToJSONContainingModule3 :: Data.Aeson.Types.Internal.Value
  {- Unfolding: (case Language.PureScript.Docs.RenderedCode.Types.asContainingModule18 of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 Data.Aeson.Types.Internal.String dt }) -}
5e9b2b25a94f6bc04ac9258fb2be1c52
  $fToJSONContainingModule_$ctoEncoding ::
    Language.PureScript.Docs.RenderedCode.Types.ContainingModule
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Strictness: <S,1*U>, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (x :: Language.PureScript.Docs.RenderedCode.Types.ContainingModule) ->
                 Data.Aeson.Encoding.Builder.encodeToBuilder
                   (Language.PureScript.Docs.RenderedCode.Types.$fToJSONContainingModule_$ctoJSON
                      x))
                  `cast`
                (<Language.PureScript.Docs.RenderedCode.Types.ContainingModule>_R
                 ->_R Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                               <Data.Aeson.Types.Internal.Value>_P)) -}
5e9b2b25a94f6bc04ac9258fb2be1c52
  $fToJSONContainingModule_$ctoEncodingList ::
    [Language.PureScript.Docs.RenderedCode.Types.ContainingModule]
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (Data.Aeson.Encoding.Internal.list
                   @ Language.PureScript.Docs.RenderedCode.Types.ContainingModule
                   Language.PureScript.Docs.RenderedCode.Types.$fToJSONContainingModule_$ctoEncoding) -}
5e9b2b25a94f6bc04ac9258fb2be1c52
  $fToJSONContainingModule_$ctoJSON ::
    Language.PureScript.Docs.RenderedCode.Types.ContainingModule
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.PureScript.Docs.RenderedCode.Types.ContainingModule) ->
                 case Language.PureScript.Docs.RenderedCode.Types.$w$ctoJSON
                        w of ww { Unit# ww1 ->
                 Data.Aeson.Types.Internal.Array ww1 }) -}
5e9b2b25a94f6bc04ac9258fb2be1c52
  $fToJSONContainingModule_$ctoJSONList ::
    [Language.PureScript.Docs.RenderedCode.Types.ContainingModule]
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (x :: [Language.PureScript.Docs.RenderedCode.Types.ContainingModule]) ->
                 Data.Aeson.Types.Internal.$WArray
                   (Data.Vector.Generic.new
                      @ Data.Vector.Vector
                      @ Data.Aeson.Types.Internal.Value
                      (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                      (Data.Vector.Generic.New.unstream
                         @ Data.Vector.Vector
                         @ Data.Aeson.Types.Internal.Value
                         (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                         (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                            @ Data.Vector.Fusion.Util.Id
                            @ Data.Aeson.Types.Internal.Value
                            @ Data.Vector.Vector
                            Data.Vector.Fusion.Util.$fMonadId
                            Data.Vector.Fusion.Bundle.Size.Unknown
                            (GHC.Base.build
                               @ Data.Aeson.Types.Internal.Value
                               (\ @ b1
                                  (c :: Data.Aeson.Types.Internal.Value -> b1 -> b1)[OneShot]
                                  (n1 :: b1)[OneShot] ->
                                GHC.Base.foldr
                                  @ Language.PureScript.Docs.RenderedCode.Types.ContainingModule
                                  @ b1
                                  (GHC.Base.mapFB
                                     @ Data.Aeson.Types.Internal.Value
                                     @ b1
                                     @ Language.PureScript.Docs.RenderedCode.Types.ContainingModule
                                     c
                                     Language.PureScript.Docs.RenderedCode.Types.$fToJSONContainingModule_$ctoJSON)
                                  n1
                                  x)))))) -}
aabb6e4db50c4224594838b56bfbe290
  $fToJSONContainingModule_$s$wfoldlM_loop ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Value
    -> GHC.Prim.Int#
    -> GHC.Prim.MutableArray#
         GHC.Prim.RealWorld Data.Aeson.Types.Internal.Value
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Vector.Vector Data.Aeson.Types.Internal.Value #)
  {- Arity: 7, Strictness: <S,U><L,U><L,U><S,U><S,U><S,U><S,U>,
     Unfolding: (\ (sc :: GHC.Prim.State# GHC.Prim.RealWorld)
                   (sc1 :: Data.Aeson.Types.Internal.Value)
                   (sc2 :: Data.Aeson.Types.Internal.Value)
                   (sc3 :: GHC.Prim.Int#)
                   (sc4 :: GHC.Prim.MutableArray#
                             GHC.Prim.RealWorld Data.Aeson.Types.Internal.Value)
                   (sc5 :: GHC.Prim.Int#)
                   (sc6 :: GHC.Prim.Int#) ->
                 let {
                   y :: GHC.Prim.Int# = GHC.Prim.+# sc3 1#
                 } in
                 case GHC.Prim.<# sc5 y of lwild {
                   DEFAULT
                   -> case GHC.Prim.writeArray#
                             @ (Control.Monad.Primitive.PrimState
                                  (GHC.ST.ST GHC.Prim.RealWorld))
                             @ Data.Aeson.Types.Internal.Value
                             sc4
                               `cast`
                             (GHC.Prim.MutableArray#
                                (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                          <GHC.Prim.RealWorld>_N))
                                <Data.Aeson.Types.Internal.Value>_R)_R
                             (GHC.Prim.+# sc6 sc3)
                             sc1
                             sc
                               `cast`
                             (GHC.Prim.State#
                                (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                          <GHC.Prim.RealWorld>_N)))_R of s'# { DEFAULT ->
                      Language.PureScript.Docs.RenderedCode.Types.$fToJSONContainingModule_$s$wfoldlM_loop1
                        s'#
                          `cast`
                        (GHC.Prim.State#
                           (Control.Monad.Primitive.D:R:PrimStateST[0]
                                <GHC.Prim.RealWorld>_N))_R
                        sc2
                        y
                        sc4
                        sc5
                        sc6 }
                   1#
                   -> case GHC.Prim.<=# sc5 1# of lwild1 {
                        DEFAULT
                        -> let {
                             y2 :: GHC.Prim.Int# = GHC.Prim.-# y sc5
                           } in
                           case GHC.Prim.<=# sc5 y2 of lwild2 {
                             DEFAULT
                             -> let {
                                  n# :: GHC.Prim.Int# = GHC.Prim.+# sc5 sc5
                                } in
                                case GHC.Prim.newArray#
                                       @ Data.Aeson.Types.Internal.Value
                                       @ (Control.Monad.Primitive.PrimState
                                            (GHC.ST.ST GHC.Prim.RealWorld))
                                       n#
                                       (Data.Vector.Mutable.uninitialised
                                          @ Data.Aeson.Types.Internal.Value)
                                       sc
                                         `cast`
                                       (GHC.Prim.State#
                                          (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                    <GHC.Prim.RealWorld>_N)))_R of ds2 { (#,#) ipv ipv1 ->
                                case GHC.Prim.copyMutableArray#
                                       @ (Control.Monad.Primitive.PrimState
                                            (GHC.ST.ST GHC.Prim.RealWorld))
                                       @ Data.Aeson.Types.Internal.Value
                                       sc4
                                         `cast`
                                       (GHC.Prim.MutableArray#
                                          (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                    <GHC.Prim.RealWorld>_N))
                                          <Data.Aeson.Types.Internal.Value>_R)_R
                                       sc6
                                       ipv1
                                       0#
                                       sc5
                                       ipv of s'# { DEFAULT ->
                                case GHC.Prim.writeArray#
                                       @ (Control.Monad.Primitive.PrimState
                                            (GHC.ST.ST GHC.Prim.RealWorld))
                                       @ Data.Aeson.Types.Internal.Value
                                       ipv1
                                       sc3
                                       sc1
                                       s'# of s'#1 { DEFAULT ->
                                Language.PureScript.Docs.RenderedCode.Types.$fToJSONContainingModule_$s$wfoldlM_loop1
                                  s'#1
                                    `cast`
                                  (GHC.Prim.State#
                                     (Control.Monad.Primitive.D:R:PrimStateST[0]
                                          <GHC.Prim.RealWorld>_N))_R
                                  sc2
                                  y
                                  ipv1
                                    `cast`
                                  (GHC.Prim.MutableArray#
                                     (Control.Monad.Primitive.D:R:PrimStateST[0]
                                          <GHC.Prim.RealWorld>_N)
                                     <Data.Aeson.Types.Internal.Value>_R)_R
                                  n#
                                  0# } } }
                             1#
                             -> let {
                                  n# :: GHC.Prim.Int# = GHC.Prim.+# sc5 y2
                                } in
                                case GHC.Prim.newArray#
                                       @ Data.Aeson.Types.Internal.Value
                                       @ (Control.Monad.Primitive.PrimState
                                            (GHC.ST.ST GHC.Prim.RealWorld))
                                       n#
                                       (Data.Vector.Mutable.uninitialised
                                          @ Data.Aeson.Types.Internal.Value)
                                       sc
                                         `cast`
                                       (GHC.Prim.State#
                                          (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                    <GHC.Prim.RealWorld>_N)))_R of ds2 { (#,#) ipv ipv1 ->
                                case GHC.Prim.copyMutableArray#
                                       @ (Control.Monad.Primitive.PrimState
                                            (GHC.ST.ST GHC.Prim.RealWorld))
                                       @ Data.Aeson.Types.Internal.Value
                                       sc4
                                         `cast`
                                       (GHC.Prim.MutableArray#
                                          (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                    <GHC.Prim.RealWorld>_N))
                                          <Data.Aeson.Types.Internal.Value>_R)_R
                                       sc6
                                       ipv1
                                       0#
                                       sc5
                                       ipv of s'# { DEFAULT ->
                                case GHC.Prim.writeArray#
                                       @ (Control.Monad.Primitive.PrimState
                                            (GHC.ST.ST GHC.Prim.RealWorld))
                                       @ Data.Aeson.Types.Internal.Value
                                       ipv1
                                       sc3
                                       sc1
                                       s'# of s'#1 { DEFAULT ->
                                Language.PureScript.Docs.RenderedCode.Types.$fToJSONContainingModule_$s$wfoldlM_loop1
                                  s'#1
                                    `cast`
                                  (GHC.Prim.State#
                                     (Control.Monad.Primitive.D:R:PrimStateST[0]
                                          <GHC.Prim.RealWorld>_N))_R
                                  sc2
                                  y
                                  ipv1
                                    `cast`
                                  (GHC.Prim.MutableArray#
                                     (Control.Monad.Primitive.D:R:PrimStateST[0]
                                          <GHC.Prim.RealWorld>_N)
                                     <Data.Aeson.Types.Internal.Value>_R)_R
                                  n#
                                  0# } } } }
                        1#
                        -> let {
                             y2 :: GHC.Prim.Int# = GHC.Prim.-# y sc5
                           } in
                           case GHC.Prim.<=# 1# y2 of lwild2 {
                             DEFAULT
                             -> let {
                                  n# :: GHC.Prim.Int# = GHC.Prim.+# sc5 1#
                                } in
                                case GHC.Prim.newArray#
                                       @ Data.Aeson.Types.Internal.Value
                                       @ (Control.Monad.Primitive.PrimState
                                            (GHC.ST.ST GHC.Prim.RealWorld))
                                       n#
                                       (Data.Vector.Mutable.uninitialised
                                          @ Data.Aeson.Types.Internal.Value)
                                       sc
                                         `cast`
                                       (GHC.Prim.State#
                                          (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                    <GHC.Prim.RealWorld>_N)))_R of ds2 { (#,#) ipv ipv1 ->
                                case GHC.Prim.copyMutableArray#
                                       @ (Control.Monad.Primitive.PrimState
                                            (GHC.ST.ST GHC.Prim.RealWorld))
                                       @ Data.Aeson.Types.Internal.Value
                                       sc4
                                         `cast`
                                       (GHC.Prim.MutableArray#
                                          (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                    <GHC.Prim.RealWorld>_N))
                                          <Data.Aeson.Types.Internal.Value>_R)_R
                                       sc6
                                       ipv1
                                       0#
                                       sc5
                                       ipv of s'# { DEFAULT ->
                                case GHC.Prim.writeArray#
                                       @ (Control.Monad.Primitive.PrimState
                                            (GHC.ST.ST GHC.Prim.RealWorld))
                                       @ Data.Aeson.Types.Internal.Value
                                       ipv1
                                       sc3
                                       sc1
                                       s'# of s'#1 { DEFAULT ->
                                Language.PureScript.Docs.RenderedCode.Types.$fToJSONContainingModule_$s$wfoldlM_loop1
                                  s'#1
                                    `cast`
                                  (GHC.Prim.State#
                                     (Control.Monad.Primitive.D:R:PrimStateST[0]
                                          <GHC.Prim.RealWorld>_N))_R
                                  sc2
                                  y
                                  ipv1
                                    `cast`
                                  (GHC.Prim.MutableArray#
                                     (Control.Monad.Primitive.D:R:PrimStateST[0]
                                          <GHC.Prim.RealWorld>_N)
                                     <Data.Aeson.Types.Internal.Value>_R)_R
                                  n#
                                  0# } } }
                             1#
                             -> let {
                                  n# :: GHC.Prim.Int# = GHC.Prim.+# sc5 y2
                                } in
                                case GHC.Prim.newArray#
                                       @ Data.Aeson.Types.Internal.Value
                                       @ (Control.Monad.Primitive.PrimState
                                            (GHC.ST.ST GHC.Prim.RealWorld))
                                       n#
                                       (Data.Vector.Mutable.uninitialised
                                          @ Data.Aeson.Types.Internal.Value)
                                       sc
                                         `cast`
                                       (GHC.Prim.State#
                                          (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                    <GHC.Prim.RealWorld>_N)))_R of ds2 { (#,#) ipv ipv1 ->
                                case GHC.Prim.copyMutableArray#
                                       @ (Control.Monad.Primitive.PrimState
                                            (GHC.ST.ST GHC.Prim.RealWorld))
                                       @ Data.Aeson.Types.Internal.Value
                                       sc4
                                         `cast`
                                       (GHC.Prim.MutableArray#
                                          (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                    <GHC.Prim.RealWorld>_N))
                                          <Data.Aeson.Types.Internal.Value>_R)_R
                                       sc6
                                       ipv1
                                       0#
                                       sc5
                                       ipv of s'# { DEFAULT ->
                                case GHC.Prim.writeArray#
                                       @ (Control.Monad.Primitive.PrimState
                                            (GHC.ST.ST GHC.Prim.RealWorld))
                                       @ Data.Aeson.Types.Internal.Value
                                       ipv1
                                       sc3
                                       sc1
                                       s'# of s'#1 { DEFAULT ->
                                Language.PureScript.Docs.RenderedCode.Types.$fToJSONContainingModule_$s$wfoldlM_loop1
                                  s'#1
                                    `cast`
                                  (GHC.Prim.State#
                                     (Control.Monad.Primitive.D:R:PrimStateST[0]
                                          <GHC.Prim.RealWorld>_N))_R
                                  sc2
                                  y
                                  ipv1
                                    `cast`
                                  (GHC.Prim.MutableArray#
                                     (Control.Monad.Primitive.D:R:PrimStateST[0]
                                          <GHC.Prim.RealWorld>_N)
                                     <Data.Aeson.Types.Internal.Value>_R)_R
                                  n#
                                  0# } } } } } }) -}
593bca6ec1c7293feead8f9e3c95b57b
  $fToJSONContainingModule_$s$wfoldlM_loop1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> Data.Aeson.Types.Internal.Value
    -> GHC.Prim.Int#
    -> GHC.Prim.MutableArray#
         GHC.Prim.RealWorld Data.Aeson.Types.Internal.Value
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Vector.Vector Data.Aeson.Types.Internal.Value #)
  {- Arity: 6, Strictness: <S,U><L,U><S,U><S,U><S,U><S,U>,
     Unfolding: (\ (sc :: GHC.Prim.State# GHC.Prim.RealWorld)
                   (sc1 :: Data.Aeson.Types.Internal.Value)
                   (sc2 :: GHC.Prim.Int#)
                   (sc3 :: GHC.Prim.MutableArray#
                             GHC.Prim.RealWorld Data.Aeson.Types.Internal.Value)
                   (sc4 :: GHC.Prim.Int#)
                   (sc5 :: GHC.Prim.Int#) ->
                 let {
                   y :: GHC.Prim.Int# = GHC.Prim.+# sc2 1#
                 } in
                 case GHC.Prim.<# sc4 y of lwild {
                   DEFAULT
                   -> case GHC.Prim.writeArray#
                             @ (Control.Monad.Primitive.PrimState
                                  (GHC.ST.ST GHC.Prim.RealWorld))
                             @ Data.Aeson.Types.Internal.Value
                             sc3
                               `cast`
                             (GHC.Prim.MutableArray#
                                (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                          <GHC.Prim.RealWorld>_N))
                                <Data.Aeson.Types.Internal.Value>_R)_R
                             (GHC.Prim.+# sc5 sc2)
                             sc1
                             sc
                               `cast`
                             (GHC.Prim.State#
                                (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                          <GHC.Prim.RealWorld>_N)))_R of s'# { DEFAULT ->
                      case GHC.Prim.unsafeFreezeArray#
                             @ (Control.Monad.Primitive.PrimState
                                  (GHC.ST.ST GHC.Prim.RealWorld))
                             @ Data.Aeson.Types.Internal.Value
                             sc3
                               `cast`
                             (GHC.Prim.MutableArray#
                                (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                          <GHC.Prim.RealWorld>_N))
                                <Data.Aeson.Types.Internal.Value>_R)_R
                             s'# of ds2 { (#,#) ipv ipv1 ->
                      (# ipv
                           `cast`
                         (GHC.Prim.State#
                            (Control.Monad.Primitive.D:R:PrimStateST[0]
                                 <GHC.Prim.RealWorld>_N))_R,
                         Data.Vector.Vector
                           @ Data.Aeson.Types.Internal.Value
                           sc5
                           y
                           ipv1 #) } }
                   1#
                   -> case GHC.Prim.<=# sc4 1# of lwild1 {
                        DEFAULT
                        -> let {
                             y2 :: GHC.Prim.Int# = GHC.Prim.-# y sc4
                           } in
                           case GHC.Prim.<=# sc4 y2 of lwild2 {
                             DEFAULT
                             -> case GHC.Prim.newArray#
                                       @ Data.Aeson.Types.Internal.Value
                                       @ (Control.Monad.Primitive.PrimState
                                            (GHC.ST.ST GHC.Prim.RealWorld))
                                       (GHC.Prim.+# sc4 sc4)
                                       (Data.Vector.Mutable.uninitialised
                                          @ Data.Aeson.Types.Internal.Value)
                                       sc
                                         `cast`
                                       (GHC.Prim.State#
                                          (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                    <GHC.Prim.RealWorld>_N)))_R of ds2 { (#,#) ipv ipv1 ->
                                case GHC.Prim.copyMutableArray#
                                       @ (Control.Monad.Primitive.PrimState
                                            (GHC.ST.ST GHC.Prim.RealWorld))
                                       @ Data.Aeson.Types.Internal.Value
                                       sc3
                                         `cast`
                                       (GHC.Prim.MutableArray#
                                          (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                    <GHC.Prim.RealWorld>_N))
                                          <Data.Aeson.Types.Internal.Value>_R)_R
                                       sc5
                                       ipv1
                                       0#
                                       sc4
                                       ipv of s'# { DEFAULT ->
                                case GHC.Prim.writeArray#
                                       @ (Control.Monad.Primitive.PrimState
                                            (GHC.ST.ST GHC.Prim.RealWorld))
                                       @ Data.Aeson.Types.Internal.Value
                                       ipv1
                                       sc2
                                       sc1
                                       s'# of s'#1 { DEFAULT ->
                                case GHC.Prim.unsafeFreezeArray#
                                       @ (Control.Monad.Primitive.PrimState
                                            (GHC.ST.ST GHC.Prim.RealWorld))
                                       @ Data.Aeson.Types.Internal.Value
                                       ipv1
                                       s'#1 of ds1 { (#,#) ipv2 ipv3 ->
                                (# ipv2
                                     `cast`
                                   (GHC.Prim.State#
                                      (Control.Monad.Primitive.D:R:PrimStateST[0]
                                           <GHC.Prim.RealWorld>_N))_R,
                                   Data.Vector.Vector
                                     @ Data.Aeson.Types.Internal.Value
                                     0#
                                     y
                                     ipv3 #) } } } }
                             1#
                             -> case GHC.Prim.newArray#
                                       @ Data.Aeson.Types.Internal.Value
                                       @ (Control.Monad.Primitive.PrimState
                                            (GHC.ST.ST GHC.Prim.RealWorld))
                                       (GHC.Prim.+# sc4 y2)
                                       (Data.Vector.Mutable.uninitialised
                                          @ Data.Aeson.Types.Internal.Value)
                                       sc
                                         `cast`
                                       (GHC.Prim.State#
                                          (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                    <GHC.Prim.RealWorld>_N)))_R of ds2 { (#,#) ipv ipv1 ->
                                case GHC.Prim.copyMutableArray#
                                       @ (Control.Monad.Primitive.PrimState
                                            (GHC.ST.ST GHC.Prim.RealWorld))
                                       @ Data.Aeson.Types.Internal.Value
                                       sc3
                                         `cast`
                                       (GHC.Prim.MutableArray#
                                          (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                    <GHC.Prim.RealWorld>_N))
                                          <Data.Aeson.Types.Internal.Value>_R)_R
                                       sc5
                                       ipv1
                                       0#
                                       sc4
                                       ipv of s'# { DEFAULT ->
                                case GHC.Prim.writeArray#
                                       @ (Control.Monad.Primitive.PrimState
                                            (GHC.ST.ST GHC.Prim.RealWorld))
                                       @ Data.Aeson.Types.Internal.Value
                                       ipv1
                                       sc2
                                       sc1
                                       s'# of s'#1 { DEFAULT ->
                                case GHC.Prim.unsafeFreezeArray#
                                       @ (Control.Monad.Primitive.PrimState
                                            (GHC.ST.ST GHC.Prim.RealWorld))
                                       @ Data.Aeson.Types.Internal.Value
                                       ipv1
                                       s'#1 of ds1 { (#,#) ipv2 ipv3 ->
                                (# ipv2
                                     `cast`
                                   (GHC.Prim.State#
                                      (Control.Monad.Primitive.D:R:PrimStateST[0]
                                           <GHC.Prim.RealWorld>_N))_R,
                                   Data.Vector.Vector
                                     @ Data.Aeson.Types.Internal.Value
                                     0#
                                     y
                                     ipv3 #) } } } } }
                        1#
                        -> let {
                             y2 :: GHC.Prim.Int# = GHC.Prim.-# y sc4
                           } in
                           case GHC.Prim.<=# 1# y2 of lwild2 {
                             DEFAULT
                             -> case GHC.Prim.newArray#
                                       @ Data.Aeson.Types.Internal.Value
                                       @ (Control.Monad.Primitive.PrimState
                                            (GHC.ST.ST GHC.Prim.RealWorld))
                                       (GHC.Prim.+# sc4 1#)
                                       (Data.Vector.Mutable.uninitialised
                                          @ Data.Aeson.Types.Internal.Value)
                                       sc
                                         `cast`
                                       (GHC.Prim.State#
                                          (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                    <GHC.Prim.RealWorld>_N)))_R of ds2 { (#,#) ipv ipv1 ->
                                case GHC.Prim.copyMutableArray#
                                       @ (Control.Monad.Primitive.PrimState
                                            (GHC.ST.ST GHC.Prim.RealWorld))
                                       @ Data.Aeson.Types.Internal.Value
                                       sc3
                                         `cast`
                                       (GHC.Prim.MutableArray#
                                          (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                    <GHC.Prim.RealWorld>_N))
                                          <Data.Aeson.Types.Internal.Value>_R)_R
                                       sc5
                                       ipv1
                                       0#
                                       sc4
                                       ipv of s'# { DEFAULT ->
                                case GHC.Prim.writeArray#
                                       @ (Control.Monad.Primitive.PrimState
                                            (GHC.ST.ST GHC.Prim.RealWorld))
                                       @ Data.Aeson.Types.Internal.Value
                                       ipv1
                                       sc2
                                       sc1
                                       s'# of s'#1 { DEFAULT ->
                                case GHC.Prim.unsafeFreezeArray#
                                       @ (Control.Monad.Primitive.PrimState
                                            (GHC.ST.ST GHC.Prim.RealWorld))
                                       @ Data.Aeson.Types.Internal.Value
                                       ipv1
                                       s'#1 of ds1 { (#,#) ipv2 ipv3 ->
                                (# ipv2
                                     `cast`
                                   (GHC.Prim.State#
                                      (Control.Monad.Primitive.D:R:PrimStateST[0]
                                           <GHC.Prim.RealWorld>_N))_R,
                                   Data.Vector.Vector
                                     @ Data.Aeson.Types.Internal.Value
                                     0#
                                     y
                                     ipv3 #) } } } }
                             1#
                             -> case GHC.Prim.newArray#
                                       @ Data.Aeson.Types.Internal.Value
                                       @ (Control.Monad.Primitive.PrimState
                                            (GHC.ST.ST GHC.Prim.RealWorld))
                                       (GHC.Prim.+# sc4 y2)
                                       (Data.Vector.Mutable.uninitialised
                                          @ Data.Aeson.Types.Internal.Value)
                                       sc
                                         `cast`
                                       (GHC.Prim.State#
                                          (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                    <GHC.Prim.RealWorld>_N)))_R of ds2 { (#,#) ipv ipv1 ->
                                case GHC.Prim.copyMutableArray#
                                       @ (Control.Monad.Primitive.PrimState
                                            (GHC.ST.ST GHC.Prim.RealWorld))
                                       @ Data.Aeson.Types.Internal.Value
                                       sc3
                                         `cast`
                                       (GHC.Prim.MutableArray#
                                          (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                    <GHC.Prim.RealWorld>_N))
                                          <Data.Aeson.Types.Internal.Value>_R)_R
                                       sc5
                                       ipv1
                                       0#
                                       sc4
                                       ipv of s'# { DEFAULT ->
                                case GHC.Prim.writeArray#
                                       @ (Control.Monad.Primitive.PrimState
                                            (GHC.ST.ST GHC.Prim.RealWorld))
                                       @ Data.Aeson.Types.Internal.Value
                                       ipv1
                                       sc2
                                       sc1
                                       s'# of s'#1 { DEFAULT ->
                                case GHC.Prim.unsafeFreezeArray#
                                       @ (Control.Monad.Primitive.PrimState
                                            (GHC.ST.ST GHC.Prim.RealWorld))
                                       @ Data.Aeson.Types.Internal.Value
                                       ipv1
                                       s'#1 of ds1 { (#,#) ipv2 ipv3 ->
                                (# ipv2
                                     `cast`
                                   (GHC.Prim.State#
                                      (Control.Monad.Primitive.D:R:PrimStateST[0]
                                           <GHC.Prim.RealWorld>_N))_R,
                                   Data.Vector.Vector
                                     @ Data.Aeson.Types.Internal.Value
                                     0#
                                     y
                                     ipv3 #) } } } } } } }) -}
646c8e664a7ad59f4599a12adf022c29
  $fToJSONLink ::
    Data.Aeson.Types.ToJSON.ToJSON
      Language.PureScript.Docs.RenderedCode.Types.Link
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Docs.RenderedCode.Types.Link
                  Language.PureScript.Docs.RenderedCode.Types.$fToJSONLink_$ctoJSON
                  Language.PureScript.Docs.RenderedCode.Types.$fToJSONLink_$ctoEncoding
                  Language.PureScript.Docs.RenderedCode.Types.$fToJSONLink_$ctoJSONList
                  Language.PureScript.Docs.RenderedCode.Types.$fToJSONLink_$ctoEncodingList -}
82ef4fed528b14a8eb948f5db0799c17
  $fToJSONLink1 :: Data.Aeson.Types.Internal.Value
  {- Unfolding: (case Data.Text.Show.unpackCString#
                        Language.PureScript.Docs.RenderedCode.Types.$fFromJSONLink6 of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 Data.Aeson.Types.Internal.String dt }) -}
c36625e275615c44289a833be9903c33
  $fToJSONLink2 :: Data.Aeson.Types.Internal.Value
  {- Unfolding: (case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                             Data.Vector.Vector Data.Aeson.Types.Internal.Value #)
                        Language.PureScript.Docs.RenderedCode.Types.$fToJSONLink3 of ds1 { (#,#) ipv1 ipv2 ->
                 case ipv2 of dt { Data.Vector.Vector ipv ipv4 ipv5 ->
                 Data.Aeson.Types.Internal.Array dt } }) -}
a271430a65e67de16b0e2e7169693af6
  $fToJSONLink3 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Vector.Vector Data.Aeson.Types.Internal.Value #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newArray#
                        @ Data.Aeson.Types.Internal.Value
                        @ (Control.Monad.Primitive.PrimState
                             (GHC.ST.ST GHC.Prim.RealWorld))
                        0#
                        (Data.Vector.Mutable.uninitialised
                           @ Data.Aeson.Types.Internal.Value)
                        s1
                          `cast`
                        (GHC.Prim.State#
                           (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                     <GHC.Prim.RealWorld>_N)))_R of ds2 { (#,#) ipv ipv1 ->
                 Language.PureScript.Docs.RenderedCode.Types.$fToJSONContainingModule_$s$wfoldlM_loop1
                   ipv
                     `cast`
                   (GHC.Prim.State#
                      (Control.Monad.Primitive.D:R:PrimStateST[0]
                           <GHC.Prim.RealWorld>_N))_R
                   Language.PureScript.Docs.RenderedCode.Types.$fToJSONLink4
                   0#
                   ipv1
                     `cast`
                   (GHC.Prim.MutableArray#
                      (Control.Monad.Primitive.D:R:PrimStateST[0] <GHC.Prim.RealWorld>_N)
                      <Data.Aeson.Types.Internal.Value>_R)_R
                   0#
                   0# }) -}
1c5cb44f6929237c4d1ff5b509a072ca
  $fToJSONLink4 :: Data.Aeson.Types.Internal.Value
  {- Unfolding: (case Data.Text.Show.unpackCString#
                        Language.PureScript.Docs.RenderedCode.Types.$fFromJSONLink11 of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 Data.Aeson.Types.Internal.String dt }) -}
646c8e664a7ad59f4599a12adf022c29
  $fToJSONLink_$ctoEncoding ::
    Language.PureScript.Docs.RenderedCode.Types.Link
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Strictness: <S,1*U>, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (x :: Language.PureScript.Docs.RenderedCode.Types.Link) ->
                 Data.Aeson.Encoding.Builder.encodeToBuilder
                   (Language.PureScript.Docs.RenderedCode.Types.$fToJSONLink_$ctoJSON
                      x))
                  `cast`
                (<Language.PureScript.Docs.RenderedCode.Types.Link>_R
                 ->_R Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                               <Data.Aeson.Types.Internal.Value>_P)) -}
646c8e664a7ad59f4599a12adf022c29
  $fToJSONLink_$ctoEncodingList ::
    [Language.PureScript.Docs.RenderedCode.Types.Link]
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (Data.Aeson.Encoding.Internal.list
                   @ Language.PureScript.Docs.RenderedCode.Types.Link
                   Language.PureScript.Docs.RenderedCode.Types.$fToJSONLink_$ctoEncoding) -}
646c8e664a7ad59f4599a12adf022c29
  $fToJSONLink_$ctoJSON ::
    Language.PureScript.Docs.RenderedCode.Types.Link
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Language.PureScript.Docs.RenderedCode.Types.Link) ->
                 case ds of wild {
                   Language.PureScript.Docs.RenderedCode.Types.NoLink
                   -> Language.PureScript.Docs.RenderedCode.Types.$fToJSONLink2
                   Language.PureScript.Docs.RenderedCode.Types.Link mn
                   -> case GHC.Magic.runRW#
                             @ ('GHC.Types.TupleRep
                                  '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                             @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                  Data.Vector.Vector Data.Aeson.Types.Internal.Value #)
                             (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                              case GHC.Prim.newArray#
                                     @ Data.Aeson.Types.Internal.Value
                                     @ (Control.Monad.Primitive.PrimState
                                          (GHC.ST.ST GHC.Prim.RealWorld))
                                     0#
                                     (Data.Vector.Mutable.uninitialised
                                        @ Data.Aeson.Types.Internal.Value)
                                     s1
                                       `cast`
                                     (GHC.Prim.State#
                                        (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                  <GHC.Prim.RealWorld>_N)))_R of ds2 { (#,#) ipv ipv1 ->
                              Language.PureScript.Docs.RenderedCode.Types.$fToJSONContainingModule_$s$wfoldlM_loop
                                ipv
                                  `cast`
                                (GHC.Prim.State#
                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                        <GHC.Prim.RealWorld>_N))_R
                                Language.PureScript.Docs.RenderedCode.Types.$fToJSONLink1
                                (case Language.PureScript.Docs.RenderedCode.Types.$w$ctoJSON
                                        mn of ww { Unit# ww1 ->
                                 Data.Aeson.Types.Internal.Array ww1 })
                                0#
                                ipv1
                                  `cast`
                                (GHC.Prim.MutableArray#
                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                        <GHC.Prim.RealWorld>_N)
                                   <Data.Aeson.Types.Internal.Value>_R)_R
                                0#
                                0# }) of ds1 { (#,#) ipv1 ipv2 ->
                      case ipv2 of dt { Data.Vector.Vector ipv ipv4 ipv5 ->
                      Data.Aeson.Types.Internal.Array dt } } }) -}
646c8e664a7ad59f4599a12adf022c29
  $fToJSONLink_$ctoJSONList ::
    [Language.PureScript.Docs.RenderedCode.Types.Link]
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (x :: [Language.PureScript.Docs.RenderedCode.Types.Link]) ->
                 Data.Aeson.Types.Internal.$WArray
                   (Data.Vector.Generic.new
                      @ Data.Vector.Vector
                      @ Data.Aeson.Types.Internal.Value
                      (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                      (Data.Vector.Generic.New.unstream
                         @ Data.Vector.Vector
                         @ Data.Aeson.Types.Internal.Value
                         (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                         (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                            @ Data.Vector.Fusion.Util.Id
                            @ Data.Aeson.Types.Internal.Value
                            @ Data.Vector.Vector
                            Data.Vector.Fusion.Util.$fMonadId
                            Data.Vector.Fusion.Bundle.Size.Unknown
                            (GHC.Base.build
                               @ Data.Aeson.Types.Internal.Value
                               (\ @ b1
                                  (c :: Data.Aeson.Types.Internal.Value -> b1 -> b1)[OneShot]
                                  (n1 :: b1)[OneShot] ->
                                GHC.Base.foldr
                                  @ Language.PureScript.Docs.RenderedCode.Types.Link
                                  @ b1
                                  (GHC.Base.mapFB
                                     @ Data.Aeson.Types.Internal.Value
                                     @ b1
                                     @ Language.PureScript.Docs.RenderedCode.Types.Link
                                     c
                                     Language.PureScript.Docs.RenderedCode.Types.$fToJSONLink_$ctoJSON)
                                  n1
                                  x)))))) -}
e686c6add7c243d229f3b74d733eb7d2
  $fToJSONNamespace ::
    Data.Aeson.Types.ToJSON.ToJSON
      Language.PureScript.Docs.RenderedCode.Types.Namespace
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Docs.RenderedCode.Types.Namespace
                  Language.PureScript.Docs.RenderedCode.Types.$fToJSONNamespace_$ctoJSON
                  Language.PureScript.Docs.RenderedCode.Types.$fToJSONNamespace_$ctoEncoding
                  Language.PureScript.Docs.RenderedCode.Types.$fToJSONNamespace_$ctoJSONList
                  Language.PureScript.Docs.RenderedCode.Types.$fToJSONNamespace_$ctoEncodingList -}
e686c6add7c243d229f3b74d733eb7d2
  $fToJSONNamespace_$ctoEncoding ::
    Language.PureScript.Docs.RenderedCode.Types.Namespace
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Strictness: <S,1*U>, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (x :: Language.PureScript.Docs.RenderedCode.Types.Namespace) ->
                 case x of wild {
                   Language.PureScript.Docs.RenderedCode.Types.ValueLevel
                   -> case Data.Text.pack
                             Language.PureScript.Docs.RenderedCode.Types.$fShowNamespace3 of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                      Data.Aeson.Encoding.Builder.encodeToBuilder
                        (Data.Aeson.Types.Internal.String dt) }
                   Language.PureScript.Docs.RenderedCode.Types.TypeLevel
                   -> case Data.Text.pack
                             Language.PureScript.Docs.RenderedCode.Types.$fShowNamespace2 of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                      Data.Aeson.Encoding.Builder.encodeToBuilder
                        (Data.Aeson.Types.Internal.String dt) }
                   Language.PureScript.Docs.RenderedCode.Types.KindLevel
                   -> case Data.Text.pack
                             Language.PureScript.Docs.RenderedCode.Types.$fShowNamespace1 of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                      Data.Aeson.Encoding.Builder.encodeToBuilder
                        (Data.Aeson.Types.Internal.String dt) } })
                  `cast`
                (<Language.PureScript.Docs.RenderedCode.Types.Namespace>_R
                 ->_R Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                               <Data.Aeson.Types.Internal.Value>_P)) -}
e686c6add7c243d229f3b74d733eb7d2
  $fToJSONNamespace_$ctoEncodingList ::
    [Language.PureScript.Docs.RenderedCode.Types.Namespace]
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (Data.Aeson.Encoding.Internal.list
                   @ Language.PureScript.Docs.RenderedCode.Types.Namespace
                   Language.PureScript.Docs.RenderedCode.Types.$fToJSONNamespace_$ctoEncoding) -}
e686c6add7c243d229f3b74d733eb7d2
  $fToJSONNamespace_$ctoJSON ::
    Language.PureScript.Docs.RenderedCode.Types.Namespace
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>m3, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.PureScript.Docs.RenderedCode.Types.Namespace) ->
                 case w of wild {
                   Language.PureScript.Docs.RenderedCode.Types.ValueLevel
                   -> case Data.Text.Show.unpackCString#
                             Language.PureScript.Docs.RenderedCode.Types.$fFromJSONNamespace11 of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                      Data.Aeson.Types.Internal.String dt }
                   Language.PureScript.Docs.RenderedCode.Types.TypeLevel
                   -> case Data.Text.Show.unpackCString#
                             Language.PureScript.Docs.RenderedCode.Types.$fFromJSONNamespace9 of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                      Data.Aeson.Types.Internal.String dt }
                   Language.PureScript.Docs.RenderedCode.Types.KindLevel
                   -> case Data.Text.Show.unpackCString#
                             Language.PureScript.Docs.RenderedCode.Types.$fFromJSONNamespace7 of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                      Data.Aeson.Types.Internal.String dt } }) -}
e686c6add7c243d229f3b74d733eb7d2
  $fToJSONNamespace_$ctoJSONList ::
    [Language.PureScript.Docs.RenderedCode.Types.Namespace]
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (x :: [Language.PureScript.Docs.RenderedCode.Types.Namespace]) ->
                 Data.Aeson.Types.Internal.$WArray
                   (Data.Vector.Generic.new
                      @ Data.Vector.Vector
                      @ Data.Aeson.Types.Internal.Value
                      (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                      (Data.Vector.Generic.New.unstream
                         @ Data.Vector.Vector
                         @ Data.Aeson.Types.Internal.Value
                         (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                         (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                            @ Data.Vector.Fusion.Util.Id
                            @ Data.Aeson.Types.Internal.Value
                            @ Data.Vector.Vector
                            Data.Vector.Fusion.Util.$fMonadId
                            Data.Vector.Fusion.Bundle.Size.Unknown
                            (GHC.Base.build
                               @ Data.Aeson.Types.Internal.Value
                               (\ @ b1
                                  (c :: Data.Aeson.Types.Internal.Value -> b1 -> b1)[OneShot]
                                  (n1 :: b1)[OneShot] ->
                                GHC.Base.foldr
                                  @ Language.PureScript.Docs.RenderedCode.Types.Namespace
                                  @ b1
                                  (GHC.Base.mapFB
                                     @ Data.Aeson.Types.Internal.Value
                                     @ b1
                                     @ Language.PureScript.Docs.RenderedCode.Types.Namespace
                                     c
                                     Language.PureScript.Docs.RenderedCode.Types.$fToJSONNamespace_$ctoJSON)
                                  n1
                                  x)))))) -}
b76660a0424da31964a78f3df8712e5d
  $fToJSONRenderedCode ::
    Data.Aeson.Types.ToJSON.ToJSON
      Language.PureScript.Docs.RenderedCode.Types.RenderedCode
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Docs.RenderedCode.Types.RenderedCode
                  Language.PureScript.Docs.RenderedCode.Types.$fToJSONRenderedCode_$ctoJSON1
                  Language.PureScript.Docs.RenderedCode.Types.$fToJSONRenderedCode_$ctoEncoding
                  Language.PureScript.Docs.RenderedCode.Types.$fToJSONRenderedCode_$ctoJSONList
                  Language.PureScript.Docs.RenderedCode.Types.$fToJSONRenderedCode_$ctoEncodingList -}
ce7373978b4c1b6d5b432cf9c1775ab4
  $fToJSONRenderedCode1 :: Data.Aeson.Types.Internal.Value
  {- Unfolding: (case Data.Text.Show.unpackCString#
                        Language.PureScript.Docs.RenderedCode.Types.$fToJSONRenderedCode2 of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 Data.Aeson.Types.Internal.String dt }) -}
1838c79e6bb77bee6893892e51b6ad35
  $fToJSONRenderedCode10 :: Data.Aeson.Types.Internal.Value
  {- Unfolding: (case Language.PureScript.Docs.RenderedCode.Types.$fToJSONRenderedCode11 of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 Data.Aeson.Types.Internal.String dt }) -}
d523a1b98148aee66427543ff8b214cd
  $fToJSONRenderedCode11 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Docs.RenderedCode.Types.$fToJSONRenderedCode12) -}
f59c50fc9fea0187ae803249438433de
  $fToJSONRenderedCode12 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("syntax"#) -}
c47a62d57b669635d25efea4b67ca744
  $fToJSONRenderedCode2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("symbol"#) -}
3a327e75b268645e62ac2840da1f1fed
  $fToJSONRenderedCode3 :: Data.Aeson.Types.Internal.Value
  {- Unfolding: (case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                             Data.Vector.Vector Data.Aeson.Types.Internal.Value #)
                        Language.PureScript.Docs.RenderedCode.Types.$fToJSONRenderedCode4 of ds1 { (#,#) ipv1 ipv2 ->
                 case ipv2 of dt { Data.Vector.Vector ipv ipv4 ipv5 ->
                 Data.Aeson.Types.Internal.Array dt } }) -}
1c4cfc7d525dfa6fb2304560e7975478
  $fToJSONRenderedCode4 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Vector.Vector Data.Aeson.Types.Internal.Value #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newArray#
                        @ Data.Aeson.Types.Internal.Value
                        @ (Control.Monad.Primitive.PrimState
                             (GHC.ST.ST GHC.Prim.RealWorld))
                        0#
                        (Data.Vector.Mutable.uninitialised
                           @ Data.Aeson.Types.Internal.Value)
                        s1
                          `cast`
                        (GHC.Prim.State#
                           (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                     <GHC.Prim.RealWorld>_N)))_R of ds2 { (#,#) ipv ipv1 ->
                 Language.PureScript.Docs.RenderedCode.Types.$fToJSONContainingModule_$s$wfoldlM_loop1
                   ipv
                     `cast`
                   (GHC.Prim.State#
                      (Control.Monad.Primitive.D:R:PrimStateST[0]
                           <GHC.Prim.RealWorld>_N))_R
                   Language.PureScript.Docs.RenderedCode.Types.$fToJSONRenderedCode5
                   0#
                   ipv1
                     `cast`
                   (GHC.Prim.MutableArray#
                      (Control.Monad.Primitive.D:R:PrimStateST[0] <GHC.Prim.RealWorld>_N)
                      <Data.Aeson.Types.Internal.Value>_R)_R
                   0#
                   0# }) -}
55f71306f8d6803cec3c8bb5c36a3b81
  $fToJSONRenderedCode5 :: Data.Aeson.Types.Internal.Value
  {- Unfolding: (case Data.Text.Show.unpackCString#
                        Language.PureScript.Docs.RenderedCode.Types.$fToJSONRenderedCode6 of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 Data.Aeson.Types.Internal.String dt }) -}
b73ea20b4913b1463e88c80a58e14dee
  $fToJSONRenderedCode6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("space"#) -}
18c71bba555d544b748e89e3c1f7c1b6
  $fToJSONRenderedCode7 :: Data.Aeson.Types.Internal.Value
  {- Unfolding: (case Language.PureScript.Docs.RenderedCode.Types.$fToJSONRenderedCode8 of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 Data.Aeson.Types.Internal.String dt }) -}
24718ca286d19356fba7a2ba27d0c92b
  $fToJSONRenderedCode8 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Docs.RenderedCode.Types.$fToJSONRenderedCode9) -}
9407e955851b3be9082e0aebc3afa105
  $fToJSONRenderedCode9 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("keyword"#) -}
8d7e5831b8ea3cae37734f270bdcdcc0
  $fToJSONRenderedCodeElement ::
    Data.Aeson.Types.ToJSON.ToJSON
      Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                  Language.PureScript.Docs.RenderedCode.Types.$fToJSONRenderedCode_$ctoJSON
                  Language.PureScript.Docs.RenderedCode.Types.$fToJSONRenderedCodeElement_$ctoEncoding
                  Language.PureScript.Docs.RenderedCode.Types.$fToJSONRenderedCodeElement_$ctoJSONList
                  Language.PureScript.Docs.RenderedCode.Types.$fToJSONRenderedCodeElement_$ctoEncodingList -}
8d7e5831b8ea3cae37734f270bdcdcc0
  $fToJSONRenderedCodeElement_$ctoEncoding ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Strictness: <S,1*U>, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (x :: Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement) ->
                 Data.Aeson.Encoding.Builder.encodeToBuilder
                   (Language.PureScript.Docs.RenderedCode.Types.$fToJSONRenderedCode_$ctoJSON
                      x))
                  `cast`
                (<Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_R
                 ->_R Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                               <Data.Aeson.Types.Internal.Value>_P)) -}
8d7e5831b8ea3cae37734f270bdcdcc0
  $fToJSONRenderedCodeElement_$ctoEncodingList ::
    [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (Data.Aeson.Encoding.Internal.list
                   @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                   Language.PureScript.Docs.RenderedCode.Types.$fToJSONRenderedCodeElement_$ctoEncoding) -}
8d7e5831b8ea3cae37734f270bdcdcc0
  $fToJSONRenderedCodeElement_$ctoJSONList ::
    [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (x :: [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]) ->
                 Data.Aeson.Types.Internal.$WArray
                   (Data.Vector.Generic.new
                      @ Data.Vector.Vector
                      @ Data.Aeson.Types.Internal.Value
                      (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                      (Data.Vector.Generic.New.unstream
                         @ Data.Vector.Vector
                         @ Data.Aeson.Types.Internal.Value
                         (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                         (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                            @ Data.Vector.Fusion.Util.Id
                            @ Data.Aeson.Types.Internal.Value
                            @ Data.Vector.Vector
                            Data.Vector.Fusion.Util.$fMonadId
                            Data.Vector.Fusion.Bundle.Size.Unknown
                            (GHC.Base.build
                               @ Data.Aeson.Types.Internal.Value
                               (\ @ b1
                                  (c :: Data.Aeson.Types.Internal.Value -> b1 -> b1)[OneShot]
                                  (n1 :: b1)[OneShot] ->
                                GHC.Base.foldr
                                  @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                                  @ b1
                                  (GHC.Base.mapFB
                                     @ Data.Aeson.Types.Internal.Value
                                     @ b1
                                     @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                                     c
                                     Language.PureScript.Docs.RenderedCode.Types.$fToJSONRenderedCode_$ctoJSON)
                                  n1
                                  x)))))) -}
b76660a0424da31964a78f3df8712e5d
  $fToJSONRenderedCode_$ctoEncoding ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCode
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Strictness: <S,1*U>, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (x :: Language.PureScript.Docs.RenderedCode.Types.RenderedCode) ->
                 Data.Aeson.Encoding.Builder.encodeToBuilder
                   (Data.Aeson.Types.Internal.$WArray
                      (Data.Vector.Generic.new
                         @ Data.Vector.Vector
                         @ Data.Aeson.Types.Internal.Value
                         (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                         (Data.Vector.Generic.New.unstream
                            @ Data.Vector.Vector
                            @ Data.Aeson.Types.Internal.Value
                            (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                            (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                               @ Data.Vector.Fusion.Util.Id
                               @ Data.Aeson.Types.Internal.Value
                               @ Data.Vector.Vector
                               Data.Vector.Fusion.Util.$fMonadId
                               Data.Vector.Fusion.Bundle.Size.Unknown
                               (GHC.Base.build
                                  @ Data.Aeson.Types.Internal.Value
                                  (\ @ b1
                                     (c :: Data.Aeson.Types.Internal.Value -> b1 -> b1)[OneShot]
                                     (n1 :: b1)[OneShot] ->
                                   GHC.Base.foldr
                                     @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                                     @ b1
                                     (GHC.Base.mapFB
                                        @ Data.Aeson.Types.Internal.Value
                                        @ b1
                                        @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                                        c
                                        Language.PureScript.Docs.RenderedCode.Types.$fToJSONRenderedCode_$ctoJSON)
                                     n1
                                     x `cast`
                                     (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0]))))))))
                  `cast`
                (<Language.PureScript.Docs.RenderedCode.Types.RenderedCode>_R
                 ->_R Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                               <Data.Aeson.Types.Internal.Value>_P)) -}
b76660a0424da31964a78f3df8712e5d
  $fToJSONRenderedCode_$ctoEncodingList ::
    [Language.PureScript.Docs.RenderedCode.Types.RenderedCode]
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (Data.Aeson.Encoding.Internal.list
                   @ Language.PureScript.Docs.RenderedCode.Types.RenderedCode
                   Language.PureScript.Docs.RenderedCode.Types.$fToJSONRenderedCode_$ctoEncoding) -}
8d7e5831b8ea3cae37734f270bdcdcc0
  $fToJSONRenderedCode_$ctoJSON ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement) ->
                 case ds of wild {
                   Language.PureScript.Docs.RenderedCode.Types.Syntax str
                   -> case GHC.Magic.runRW#
                             @ ('GHC.Types.TupleRep
                                  '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                             @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                  Data.Vector.Vector Data.Aeson.Types.Internal.Value #)
                             (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                              case GHC.Prim.newArray#
                                     @ Data.Aeson.Types.Internal.Value
                                     @ (Control.Monad.Primitive.PrimState
                                          (GHC.ST.ST GHC.Prim.RealWorld))
                                     0#
                                     (Data.Vector.Mutable.uninitialised
                                        @ Data.Aeson.Types.Internal.Value)
                                     s1
                                       `cast`
                                     (GHC.Prim.State#
                                        (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                  <GHC.Prim.RealWorld>_N)))_R of ds2 { (#,#) ipv ipv1 ->
                              Language.PureScript.Docs.RenderedCode.Types.$fToJSONContainingModule_$s$wfoldlM_loop
                                ipv
                                  `cast`
                                (GHC.Prim.State#
                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                        <GHC.Prim.RealWorld>_N))_R
                                Language.PureScript.Docs.RenderedCode.Types.$fToJSONRenderedCode10
                                (case str of dt { Data.Text.Internal.Text ipv2 ipv3 ipv4 ->
                                 Data.Aeson.Types.Internal.String dt })
                                0#
                                ipv1
                                  `cast`
                                (GHC.Prim.MutableArray#
                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                        <GHC.Prim.RealWorld>_N)
                                   <Data.Aeson.Types.Internal.Value>_R)_R
                                0#
                                0# }) of ds1 { (#,#) ipv1 ipv2 ->
                      case ipv2 of dt { Data.Vector.Vector ipv ipv4 ipv5 ->
                      Data.Aeson.Types.Internal.Array dt } }
                   Language.PureScript.Docs.RenderedCode.Types.Keyword str
                   -> case GHC.Magic.runRW#
                             @ ('GHC.Types.TupleRep
                                  '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                             @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                  Data.Vector.Vector Data.Aeson.Types.Internal.Value #)
                             (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                              case GHC.Prim.newArray#
                                     @ Data.Aeson.Types.Internal.Value
                                     @ (Control.Monad.Primitive.PrimState
                                          (GHC.ST.ST GHC.Prim.RealWorld))
                                     0#
                                     (Data.Vector.Mutable.uninitialised
                                        @ Data.Aeson.Types.Internal.Value)
                                     s1
                                       `cast`
                                     (GHC.Prim.State#
                                        (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                  <GHC.Prim.RealWorld>_N)))_R of ds2 { (#,#) ipv ipv1 ->
                              Language.PureScript.Docs.RenderedCode.Types.$fToJSONContainingModule_$s$wfoldlM_loop
                                ipv
                                  `cast`
                                (GHC.Prim.State#
                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                        <GHC.Prim.RealWorld>_N))_R
                                Language.PureScript.Docs.RenderedCode.Types.$fToJSONRenderedCode7
                                (case str of dt { Data.Text.Internal.Text ipv2 ipv3 ipv4 ->
                                 Data.Aeson.Types.Internal.String dt })
                                0#
                                ipv1
                                  `cast`
                                (GHC.Prim.MutableArray#
                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                        <GHC.Prim.RealWorld>_N)
                                   <Data.Aeson.Types.Internal.Value>_R)_R
                                0#
                                0# }) of ds1 { (#,#) ipv1 ipv2 ->
                      case ipv2 of dt { Data.Vector.Vector ipv ipv4 ipv5 ->
                      Data.Aeson.Types.Internal.Array dt } }
                   Language.PureScript.Docs.RenderedCode.Types.Space
                   -> Language.PureScript.Docs.RenderedCode.Types.$fToJSONRenderedCode3
                   Language.PureScript.Docs.RenderedCode.Types.Symbol ns str link
                   -> case GHC.Magic.runRW#
                             @ ('GHC.Types.TupleRep
                                  '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                             @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                  Data.Vector.Vector Data.Aeson.Types.Internal.Value #)
                             (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                              case GHC.Prim.newArray#
                                     @ Data.Aeson.Types.Internal.Value
                                     @ (Control.Monad.Primitive.PrimState
                                          (GHC.ST.ST GHC.Prim.RealWorld))
                                     0#
                                     (Data.Vector.Mutable.uninitialised
                                        @ Data.Aeson.Types.Internal.Value)
                                     s1
                                       `cast`
                                     (GHC.Prim.State#
                                        (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                  <GHC.Prim.RealWorld>_N)))_R of ds2 { (#,#) ipv ipv1 ->
                              case GHC.Prim.newArray#
                                     @ Data.Aeson.Types.Internal.Value
                                     @ (Control.Monad.Primitive.PrimState
                                          (GHC.ST.ST GHC.Prim.RealWorld))
                                     1#
                                     (Data.Vector.Mutable.uninitialised
                                        @ Data.Aeson.Types.Internal.Value)
                                     ipv of ds1 { (#,#) ipv2 ipv3 ->
                              case GHC.Prim.copyMutableArray#
                                     @ (Control.Monad.Primitive.PrimState
                                          (GHC.ST.ST GHC.Prim.RealWorld))
                                     @ Data.Aeson.Types.Internal.Value
                                     ipv1
                                     0#
                                     ipv3
                                     0#
                                     0#
                                     ipv2 of s'# { DEFAULT ->
                              case GHC.Prim.writeArray#
                                     @ (Control.Monad.Primitive.PrimState
                                          (GHC.ST.ST GHC.Prim.RealWorld))
                                     @ Data.Aeson.Types.Internal.Value
                                     ipv3
                                     0#
                                     Language.PureScript.Docs.RenderedCode.Types.$fToJSONRenderedCode1
                                     s'# of s'#1 { DEFAULT ->
                              case GHC.Prim.newArray#
                                     @ Data.Aeson.Types.Internal.Value
                                     @ (Control.Monad.Primitive.PrimState
                                          (GHC.ST.ST GHC.Prim.RealWorld))
                                     2#
                                     (Data.Vector.Mutable.uninitialised
                                        @ Data.Aeson.Types.Internal.Value)
                                     s'#1 of ds3 { (#,#) ipv4 ipv5 ->
                              case GHC.Prim.copyMutableArray#
                                     @ (Control.Monad.Primitive.PrimState
                                          (GHC.ST.ST GHC.Prim.RealWorld))
                                     @ Data.Aeson.Types.Internal.Value
                                     ipv3
                                     0#
                                     ipv5
                                     0#
                                     1#
                                     ipv4 of s'#2 { DEFAULT ->
                              case GHC.Prim.writeArray#
                                     @ (Control.Monad.Primitive.PrimState
                                          (GHC.ST.ST GHC.Prim.RealWorld))
                                     @ Data.Aeson.Types.Internal.Value
                                     ipv5
                                     1#
                                     (case ns of wild1 {
                                        Language.PureScript.Docs.RenderedCode.Types.ValueLevel
                                        -> case Data.Text.Show.unpackCString#
                                                  Language.PureScript.Docs.RenderedCode.Types.$fFromJSONNamespace11 of dt { Data.Text.Internal.Text ipv6 ipv7 ipv8 ->
                                           Data.Aeson.Types.Internal.String dt }
                                        Language.PureScript.Docs.RenderedCode.Types.TypeLevel
                                        -> case Data.Text.Show.unpackCString#
                                                  Language.PureScript.Docs.RenderedCode.Types.$fFromJSONNamespace9 of dt { Data.Text.Internal.Text ipv6 ipv7 ipv8 ->
                                           Data.Aeson.Types.Internal.String dt }
                                        Language.PureScript.Docs.RenderedCode.Types.KindLevel
                                        -> case Data.Text.Show.unpackCString#
                                                  Language.PureScript.Docs.RenderedCode.Types.$fFromJSONNamespace7 of dt { Data.Text.Internal.Text ipv6 ipv7 ipv8 ->
                                           Data.Aeson.Types.Internal.String dt } })
                                     s'#2 of s'#3 { DEFAULT ->
                              Language.PureScript.Docs.RenderedCode.Types.$fToJSONContainingModule_$s$wfoldlM_loop
                                s'#3
                                  `cast`
                                (GHC.Prim.State#
                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                        <GHC.Prim.RealWorld>_N))_R
                                (case str of dt { Data.Text.Internal.Text ipv6 ipv7 ipv8 ->
                                 Data.Aeson.Types.Internal.String dt })
                                (Language.PureScript.Docs.RenderedCode.Types.$fToJSONLink_$ctoJSON
                                   link)
                                2#
                                ipv5
                                  `cast`
                                (GHC.Prim.MutableArray#
                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                        <GHC.Prim.RealWorld>_N)
                                   <Data.Aeson.Types.Internal.Value>_R)_R
                                2#
                                0# } } } } } } }) of ds1 { (#,#) ipv1 ipv2 ->
                      case ipv2 of dt { Data.Vector.Vector ipv ipv4 ipv5 ->
                      Data.Aeson.Types.Internal.Array dt } } }) -}
b76660a0424da31964a78f3df8712e5d
  $fToJSONRenderedCode_$ctoJSON1 ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCode
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.PureScript.Docs.RenderedCode.Types.RenderedCode) ->
                 case Language.PureScript.Docs.RenderedCode.Types.$w$ctoJSON1
                        w of ww { Unit# ww1 ->
                 Data.Aeson.Types.Internal.Array ww1 }) -}
b76660a0424da31964a78f3df8712e5d
  $fToJSONRenderedCode_$ctoJSONList ::
    [Language.PureScript.Docs.RenderedCode.Types.RenderedCode]
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (x :: [Language.PureScript.Docs.RenderedCode.Types.RenderedCode]) ->
                 Data.Aeson.Types.Internal.$WArray
                   (Data.Vector.Generic.new
                      @ Data.Vector.Vector
                      @ Data.Aeson.Types.Internal.Value
                      (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                      (Data.Vector.Generic.New.unstream
                         @ Data.Vector.Vector
                         @ Data.Aeson.Types.Internal.Value
                         (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                         (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                            @ Data.Vector.Fusion.Util.Id
                            @ Data.Aeson.Types.Internal.Value
                            @ Data.Vector.Vector
                            Data.Vector.Fusion.Util.$fMonadId
                            Data.Vector.Fusion.Bundle.Size.Unknown
                            (GHC.Base.build
                               @ Data.Aeson.Types.Internal.Value
                               (\ @ b1
                                  (c :: Data.Aeson.Types.Internal.Value -> b1 -> b1)[OneShot]
                                  (n1 :: b1)[OneShot] ->
                                GHC.Base.foldr
                                  @ Language.PureScript.Docs.RenderedCode.Types.RenderedCode
                                  @ b1
                                  (GHC.Base.mapFB
                                     @ Data.Aeson.Types.Internal.Value
                                     @ b1
                                     @ Language.PureScript.Docs.RenderedCode.Types.RenderedCode
                                     c
                                     Language.PureScript.Docs.RenderedCode.Types.$fToJSONRenderedCode_$ctoJSON1)
                                  n1
                                  x)))))) -}
7dfd63c8b3a76dcebf221c8fc45aad83
  $fToJSONRenderedCode_$s$wfoldlM_loop ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> [Data.Aeson.Types.Internal.Value]
    -> GHC.Prim.Int#
    -> GHC.Prim.MutableArray#
         GHC.Prim.RealWorld Data.Aeson.Types.Internal.Value
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Vector.Vector Data.Aeson.Types.Internal.Value #)
  {- Arity: 6, Strictness: <S,U><S,1*U><L,U><S,U><L,U><L,U> -}
e0c9f678459550b178abb263264d08e6
  $tc'Keyword :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16598520982162659201##
                   12522637768754171944##
                   Language.PureScript.Docs.RenderedCode.Types.$trModule
                   Language.PureScript.Docs.RenderedCode.Types.$tc'Keyword2
                   0#
                   Language.PureScript.Docs.RenderedCode.Types.$tc'Keyword1) -}
218b2bae688229fb6b15c72d26c9ae7b
  $tc'Keyword1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
d8fe0d2799961440b964829b5ce725e0
  $tc'Keyword2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Docs.RenderedCode.Types.$tc'Keyword3) -}
716acf6401d732003a250f5f185a4655
  $tc'Keyword3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Keyword"#) -}
f58f07f00ba46a31c0faef4a58b6842d
  $tc'KindLevel :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5458743857024962189##
                   4129424924609517681##
                   Language.PureScript.Docs.RenderedCode.Types.$trModule
                   Language.PureScript.Docs.RenderedCode.Types.$tc'KindLevel2
                   0#
                   Language.PureScript.Docs.RenderedCode.Types.$tc'KindLevel1) -}
90fae5f949b575f53171b7c556936411
  $tc'KindLevel1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
f6d2ac9924394d95f6daad59246b79d2
  $tc'KindLevel2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Docs.RenderedCode.Types.$tc'KindLevel3) -}
46fb080648d75d5602dc338e5680e37e
  $tc'KindLevel3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'KindLevel"#) -}
a2eafad6096a3b548037ec64535bc348
  $tc'Link :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7939392050253751108##
                   6424570253430965015##
                   Language.PureScript.Docs.RenderedCode.Types.$trModule
                   Language.PureScript.Docs.RenderedCode.Types.$tc'Link2
                   0#
                   Language.PureScript.Docs.RenderedCode.Types.$tc'Link1) -}
4a4496844b76c57af4690584c0628904
  $tc'Link1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
dec12a56d94515694af2947cf875dcbe
  $tc'Link2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Docs.RenderedCode.Types.$tc'Link3) -}
c4e63729bacde81aee58238c53853c79
  $tc'Link3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Link"#) -}
902bbf40a244d87485e4317d6e8de58f
  $tc'NoLink :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1242171855764408754##
                   527275302080370833##
                   Language.PureScript.Docs.RenderedCode.Types.$trModule
                   Language.PureScript.Docs.RenderedCode.Types.$tc'NoLink2
                   0#
                   Language.PureScript.Docs.RenderedCode.Types.$tc'NoLink1) -}
3e413b257026decbdaf047695ce86a87
  $tc'NoLink1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
5a249f3aef2dab1ee10ba58e7fb67b38
  $tc'NoLink2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Docs.RenderedCode.Types.$tc'NoLink3) -}
076f2a5a2bcf1653f96260573ee83d24
  $tc'NoLink3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'NoLink"#) -}
34e87b7a9c5d4e84d20971bcea94a5de
  $tc'OtherModule :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9517069218883173663##
                   7219779118064293116##
                   Language.PureScript.Docs.RenderedCode.Types.$trModule
                   Language.PureScript.Docs.RenderedCode.Types.$tc'OtherModule2
                   0#
                   Language.PureScript.Docs.RenderedCode.Types.$tc'OtherModule1) -}
87e8368e8a1782e888208443e00fc0c2
  $tc'OtherModule1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
5f3a6d98933bdc44a9f19e81ce6db264
  $tc'OtherModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Docs.RenderedCode.Types.$tc'OtherModule3) -}
324c251a1bab4b2acc64d5a81904296a
  $tc'OtherModule3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'OtherModule"#) -}
73573f5c72c2f47bd552e5b6f3f9d06b
  $tc'RC :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12942873025358574914##
                   10825590736765110919##
                   Language.PureScript.Docs.RenderedCode.Types.$trModule
                   Language.PureScript.Docs.RenderedCode.Types.$tc'RC2
                   0#
                   Language.PureScript.Docs.RenderedCode.Types.$tc'RC1) -}
3d1e4ecf1d8cb4441b5e2160c82cdbad
  $tc'RC1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
181994371ee7a047c80bb741f4169f39
  $tc'RC2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Docs.RenderedCode.Types.$tc'RC3) -}
9f09777cf92b9b2f38b6d69255c8d1e7
  $tc'RC3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'RC"#) -}
03220a7b6deea9ef75a12acea4ac6b12
  $tc'Space :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8967808042892267509##
                   14117227503436084824##
                   Language.PureScript.Docs.RenderedCode.Types.$trModule
                   Language.PureScript.Docs.RenderedCode.Types.$tc'Space2
                   0#
                   Language.PureScript.Docs.RenderedCode.Types.$tc'Space1) -}
736423a759d1f66c748443157e9bd4b3
  $tc'Space1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
03aa99b9e823b47bda52f59766e4aa3e
  $tc'Space2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Docs.RenderedCode.Types.$tc'Space3) -}
9419f6e1ca7e0ae259f8a04d1d1ddb2f
  $tc'Space3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Space"#) -}
1d38ba5dd4aeda5ba7afbf2de54e036a
  $tc'Symbol :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15614763639200462710##
                   14861996707736143737##
                   Language.PureScript.Docs.RenderedCode.Types.$trModule
                   Language.PureScript.Docs.RenderedCode.Types.$tc'Symbol2
                   0#
                   Language.PureScript.Docs.RenderedCode.Types.$tc'Symbol1) -}
25fcbbbd3198fee61a3d3e43eb8bb217
  $tc'Symbol1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
d615122da266e8f9deb23a746a87a977
  $tc'Symbol2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Docs.RenderedCode.Types.$tc'Symbol3) -}
419eaac70776b606fb5ca596356207fd
  $tc'Symbol3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Symbol"#) -}
c199bcf89637d3774e6e6e085eb45198
  $tc'Syntax :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1717793148857133890##
                   236900438624686747##
                   Language.PureScript.Docs.RenderedCode.Types.$trModule
                   Language.PureScript.Docs.RenderedCode.Types.$tc'Syntax1
                   0#
                   Language.PureScript.Docs.RenderedCode.Types.$tc'Keyword1) -}
a39205dffacdc1743c19044c29e2d777
  $tc'Syntax1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Docs.RenderedCode.Types.$tc'Syntax2) -}
29310a74f9c5836f52fdc6d640756b50
  $tc'Syntax2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Syntax"#) -}
2024644577d7a1cc9c6a179e3cf87905
  $tc'ThisModule :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17535406994404773404##
                   7689137541442736691##
                   Language.PureScript.Docs.RenderedCode.Types.$trModule
                   Language.PureScript.Docs.RenderedCode.Types.$tc'ThisModule2
                   0#
                   Language.PureScript.Docs.RenderedCode.Types.$tc'ThisModule1) -}
30c505ca5bf331f1c56030a99157ac50
  $tc'ThisModule1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
222aa7d2c17078824ac539d8acfc309c
  $tc'ThisModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Docs.RenderedCode.Types.$tc'ThisModule3) -}
509dda3c26e189ef2f2bb9f8e5419983
  $tc'ThisModule3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ThisModule"#) -}
a285eace1b51071c7105e47674b0b969
  $tc'TypeLevel :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10875395168046762152##
                   17759802340090471227##
                   Language.PureScript.Docs.RenderedCode.Types.$trModule
                   Language.PureScript.Docs.RenderedCode.Types.$tc'TypeLevel1
                   0#
                   Language.PureScript.Docs.RenderedCode.Types.$tc'KindLevel1) -}
0115e7d0137c0f6332cae11707b194d9
  $tc'TypeLevel1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Docs.RenderedCode.Types.$tc'TypeLevel2) -}
eb75f420e3e6a031d97fa21d77d39f27
  $tc'TypeLevel2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TypeLevel"#) -}
20ab790a02783c07d7d5e68d8b543955
  $tc'ValueLevel :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   113912527203587704##
                   10970484860333729049##
                   Language.PureScript.Docs.RenderedCode.Types.$trModule
                   Language.PureScript.Docs.RenderedCode.Types.$tc'ValueLevel1
                   0#
                   Language.PureScript.Docs.RenderedCode.Types.$tc'KindLevel1) -}
b0d4d42ce5a5a8a8b722171307d69447
  $tc'ValueLevel1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Docs.RenderedCode.Types.$tc'ValueLevel2) -}
8f19c184a4081dba1c087f8e7d550415
  $tc'ValueLevel2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ValueLevel"#) -}
a5704a22b6f453a2b359b1c0e6264b06
  $tcContainingModule :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10640785467900045021##
                   12103144184294839115##
                   Language.PureScript.Docs.RenderedCode.Types.$trModule
                   Language.PureScript.Docs.RenderedCode.Types.$tcContainingModule1
                   0#
                   GHC.Types.krep$*) -}
ff1b9aa32d9514a9a7940108d84ed914
  $tcContainingModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Docs.RenderedCode.Types.$tcContainingModule2) -}
dec07061f236cd060fc4ea5c648dc807
  $tcContainingModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ContainingModule"#) -}
84627b96216d20c6389ddd8aea7813e4
  $tcLink :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10043816533234675189##
                   65199706698433410##
                   Language.PureScript.Docs.RenderedCode.Types.$trModule
                   Language.PureScript.Docs.RenderedCode.Types.$tcLink1
                   0#
                   GHC.Types.krep$*) -}
2b0b12ae7febb2fae7583ae0ea596100
  $tcLink1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Docs.RenderedCode.Types.$fFromJSONLink6) -}
adb6683e04359622096e7c5d9ae386bb
  $tcNamespace :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8868423931635565030##
                   3439067282838737925##
                   Language.PureScript.Docs.RenderedCode.Types.$trModule
                   Language.PureScript.Docs.RenderedCode.Types.$tcNamespace1
                   0#
                   GHC.Types.krep$*) -}
6efa49333ad38aeec97d37fdbb04fa8e
  $tcNamespace1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Docs.RenderedCode.Types.$tcNamespace2) -}
3283753707bcf74e01d962512869af6a
  $tcNamespace2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Namespace"#) -}
9cbda91b28278410ccfde4e4e99cafef
  $tcRenderedCode :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4770525693056769432##
                   12981704319372207843##
                   Language.PureScript.Docs.RenderedCode.Types.$trModule
                   Language.PureScript.Docs.RenderedCode.Types.$tcRenderedCode1
                   0#
                   GHC.Types.krep$*) -}
d05987e8b661570ef26d6924e0388df8
  $tcRenderedCode1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Docs.RenderedCode.Types.$tcRenderedCode2) -}
464dbb03bff93f085453cd3c1ecb02e6
  $tcRenderedCode2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("RenderedCode"#) -}
19d02f5c0300054e2a15e1965a97749d
  $tcRenderedCodeElement :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6076452643385753361##
                   8780740279043351550##
                   Language.PureScript.Docs.RenderedCode.Types.$trModule
                   Language.PureScript.Docs.RenderedCode.Types.$tcRenderedCodeElement1
                   0#
                   GHC.Types.krep$*) -}
a5007e5bb935c7cf2b385e47f8d1951f
  $tcRenderedCodeElement1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Docs.RenderedCode.Types.$tcRenderedCodeElement2) -}
586d7ba7520d3edec201cd1528441c60
  $tcRenderedCodeElement2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("RenderedCodeElement"#) -}
86b17772989513234c16f4c4e5f59b3e
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Language.PureScript.Docs.RenderedCode.Types.$trModule3
                   Language.PureScript.Docs.RenderedCode.Types.$trModule1) -}
a8706471dc60634f660af2411ba62864
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Docs.RenderedCode.Types.$trModule2) -}
e3c71c237e2df7ee103067bd10fafe5b
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Language.PureScript.Docs.RenderedCode.Types"#) -}
80cb186ac9bc867432035dd9071bc9fa
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Docs.RenderedCode.Types.$trModule4) -}
96acf63f2141ef7a2d5658a4720ff826
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"#) -}
e686c6add7c243d229f3b74d733eb7d2
  $w$cshowsPrec ::
    Language.PureScript.Docs.RenderedCode.Types.Namespace
    -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: Language.PureScript.Docs.RenderedCode.Types.Namespace)
                   (w1 :: GHC.Base.String) ->
                 case w of wild {
                   Language.PureScript.Docs.RenderedCode.Types.ValueLevel
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.Docs.RenderedCode.Types.$fShowNamespace3
                        w1
                   Language.PureScript.Docs.RenderedCode.Types.TypeLevel
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.Docs.RenderedCode.Types.$fShowNamespace2
                        w1
                   Language.PureScript.Docs.RenderedCode.Types.KindLevel
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.Docs.RenderedCode.Types.$fShowNamespace1
                        w1 }) -}
b76660a0424da31964a78f3df8712e5d
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> Language.PureScript.Docs.RenderedCode.Types.RenderedCode
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: Language.PureScript.Docs.RenderedCode.Types.RenderedCode)
                   (w1 :: GHC.Base.String) ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     GHC.CString.unpackAppendCString#
                       Language.PureScript.Docs.RenderedCode.Types.$fShowRenderedCode4
                       (GHC.CString.unpackAppendCString#
                          Language.PureScript.Docs.RenderedCode.Types.$fShowRenderedCode3
                          (let {
                             s :: GHC.Base.String
                             = GHC.CString.unpackAppendCString#
                                 Language.PureScript.Docs.RenderedCode.Types.$fShowRenderedCode2
                                 x
                           } in
                           case w `cast`
                                (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0]) of wild {
                             [] -> GHC.CString.unpackAppendCString# GHC.Show.showList__4 s
                             : x1 xs
                             -> GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showList__3
                                  (Language.PureScript.Docs.RenderedCode.Types.$fShowRenderedCode_$cshowsPrec
                                     Language.PureScript.Docs.RenderedCode.Types.asContainingModule15
                                     x1
                                     (let {
                                        lvl43 :: [GHC.Types.Char]
                                        = GHC.Types.: @ GHC.Types.Char GHC.Show.showList__2 s
                                      } in
                                      letrec {
                                        showl :: [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
                                                 -> GHC.Base.String
                                          {- Arity: 1, Strictness: <S,1*U> -}
                                        = \ (ds2 :: [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]) ->
                                          case ds2 of wild1 {
                                            [] -> lvl43
                                            : y ys
                                            -> GHC.Types.:
                                                 @ GHC.Types.Char
                                                 GHC.Show.showList__1
                                                 (Language.PureScript.Docs.RenderedCode.Types.$fShowRenderedCode_$cshowsPrec
                                                    Language.PureScript.Docs.RenderedCode.Types.asContainingModule15
                                                    y
                                                    (showl ys)) }
                                      } in
                                      showl xs)) }))
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT -> p w1
                   1#
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 w1)) }) -}
5e9b2b25a94f6bc04ac9258fb2be1c52
  $w$ctoJSON ::
    Language.PureScript.Docs.RenderedCode.Types.ContainingModule
    -> (# Data.Aeson.Types.Internal.Array #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ (w :: Language.PureScript.Docs.RenderedCode.Types.ContainingModule) ->
                 case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                             Data.Vector.Vector Data.Aeson.Types.Internal.Value #)
                        (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case GHC.Prim.newArray#
                                @ Data.Aeson.Types.Internal.Value
                                @ (Control.Monad.Primitive.PrimState
                                     (GHC.ST.ST GHC.Prim.RealWorld))
                                0#
                                (Data.Vector.Mutable.uninitialised
                                   @ Data.Aeson.Types.Internal.Value)
                                s1
                                  `cast`
                                (GHC.Prim.State#
                                   (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                             <GHC.Prim.RealWorld>_N)))_R of ds2 { (#,#) ipv ipv1 ->
                         case w of wild {
                           Language.PureScript.Docs.RenderedCode.Types.ThisModule
                           -> Language.PureScript.Docs.RenderedCode.Types.$fToJSONContainingModule_$s$wfoldlM_loop1
                                ipv
                                  `cast`
                                (GHC.Prim.State#
                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                        <GHC.Prim.RealWorld>_N))_R
                                Language.PureScript.Docs.RenderedCode.Types.$fToJSONContainingModule3
                                0#
                                ipv1
                                  `cast`
                                (GHC.Prim.MutableArray#
                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                        <GHC.Prim.RealWorld>_N)
                                   <Data.Aeson.Types.Internal.Value>_R)_R
                                0#
                                0#
                           Language.PureScript.Docs.RenderedCode.Types.OtherModule mn
                           -> Language.PureScript.Docs.RenderedCode.Types.$fToJSONContainingModule_$s$wfoldlM_loop
                                ipv
                                  `cast`
                                (GHC.Prim.State#
                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                        <GHC.Prim.RealWorld>_N))_R
                                Language.PureScript.Docs.RenderedCode.Types.$fToJSONContainingModule2
                                (case mn
                                        `cast`
                                      (Language.PureScript.Names.N:ModuleName[0] ; ([Language.PureScript.Names.N:ProperName[0]
                                                                                         <'Language.PureScript.Names.Namespace>_P])_R) of wild1 {
                                   []
                                   -> case Language.PureScript.Names.runModuleName1 of dt { Data.Text.Internal.Text ipv2 ipv3 ipv4 ->
                                      Language.PureScript.Docs.RenderedCode.Types.$fToJSONContainingModule1 }
                                   : x1 xs
                                   -> case Data.Text.concat
                                             (GHC.Types.:
                                                @ Data.Text.Internal.Text
                                                x1
                                                (Language.PureScript.Names.runModuleName_go1
                                                   xs)) of dt { Data.Text.Internal.Text ipv2 ipv3 ipv4 ->
                                      Data.Aeson.Types.Internal.String dt } })
                                0#
                                ipv1
                                  `cast`
                                (GHC.Prim.MutableArray#
                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                        <GHC.Prim.RealWorld>_N)
                                   <Data.Aeson.Types.Internal.Value>_R)_R
                                0#
                                0# } }) of ds1 { (#,#) ipv1 ipv2 ->
                 case ipv2 of dt { Data.Vector.Vector ipv ipv4 ipv5 ->
                 (# dt #) } }) -}
b76660a0424da31964a78f3df8712e5d
  $w$ctoJSON1 ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCode
    -> (# Data.Aeson.Types.Internal.Array #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ (w :: Language.PureScript.Docs.RenderedCode.Types.RenderedCode) ->
                 case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                             Data.Vector.Vector Data.Aeson.Types.Internal.Value #)
                        (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case GHC.Prim.newArray#
                                @ Data.Aeson.Types.Internal.Value
                                @ (Control.Monad.Primitive.PrimState
                                     (GHC.ST.ST GHC.Prim.RealWorld))
                                0#
                                (Data.Vector.Mutable.uninitialised
                                   @ Data.Aeson.Types.Internal.Value)
                                s1
                                  `cast`
                                (GHC.Prim.State#
                                   (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                             <GHC.Prim.RealWorld>_N)))_R of ds2 { (#,#) ipv ipv1 ->
                         Language.PureScript.Docs.RenderedCode.Types.$fToJSONRenderedCode_$s$wfoldlM_loop
                           ipv
                             `cast`
                           (GHC.Prim.State#
                              (Control.Monad.Primitive.D:R:PrimStateST[0]
                                   <GHC.Prim.RealWorld>_N))_R
                           (GHC.Base.map
                              @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                              @ Data.Aeson.Types.Internal.Value
                              Language.PureScript.Docs.RenderedCode.Types.$fToJSONRenderedCode_$ctoJSON
                              w `cast`
                              (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0]))
                           0#
                           ipv1
                             `cast`
                           (GHC.Prim.MutableArray#
                              (Control.Monad.Primitive.D:R:PrimStateST[0] <GHC.Prim.RealWorld>_N)
                              <Data.Aeson.Types.Internal.Value>_R)_R
                           0#
                           0# }) of ds1 { (#,#) ipv1 ipv2 ->
                 case ipv2 of dt { Data.Vector.Vector ipv ipv4 ipv5 ->
                 (# dt #) } }) -}
0c0b5f6c163aa9a27ee90816254869d3
  $walias ::
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Data.Either.Either
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName)
         (Data.Either.Either
            Language.PureScript.Names.Ident
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ConstructorName))
    -> Language.PureScript.Docs.RenderedCode.Types.RenderedCode
  {- Arity: 2, Strictness: <L,1*U><S,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.Maybe
                            Language.PureScript.Names.ModuleName)
                   (ww1 :: Data.Either.Either
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.TypeName)
                             (Data.Either.Either
                                Language.PureScript.Names.Ident
                                (Language.PureScript.Names.ProperName
                                   'Language.PureScript.Names.ConstructorName))) ->
                 case ww1 of wild {
                   Data.Either.Left ds
                   -> (GHC.Base.++
                         @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                         Language.PureScript.Docs.RenderedCode.Types.alias1
                         (GHC.Types.:
                            @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                            (Language.PureScript.Docs.RenderedCode.Types.Symbol
                               Language.PureScript.Docs.RenderedCode.Types.TypeLevel
                               ds
                                 `cast`
                               (Language.PureScript.Names.N:ProperName[0]
                                    <'Language.PureScript.Names.TypeName>_P)
                               (Language.PureScript.Docs.RenderedCode.Types.Link
                                  (case ww of wild1 {
                                     GHC.Base.Nothing
                                     -> Language.PureScript.Docs.RenderedCode.Types.ThisModule
                                     GHC.Base.Just mn
                                     -> Language.PureScript.Docs.RenderedCode.Types.OtherModule
                                          mn })))
                            (GHC.Types.[]
                               @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)))
                        `cast`
                      (Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0]))
                   Data.Either.Right ds
                   -> case ds of wild1 {
                        Data.Either.Left n
                        -> (GHC.Types.:
                              @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                              (Language.PureScript.Docs.RenderedCode.Types.Symbol
                                 Language.PureScript.Docs.RenderedCode.Types.ValueLevel
                                 (Language.PureScript.Names.runIdent n)
                                 (Language.PureScript.Docs.RenderedCode.Types.Link
                                    (case ww of wild2 {
                                       GHC.Base.Nothing
                                       -> Language.PureScript.Docs.RenderedCode.Types.ThisModule
                                       GHC.Base.Just mn
                                       -> Language.PureScript.Docs.RenderedCode.Types.OtherModule
                                            mn })))
                              (GHC.Types.[]
                                 @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement))
                             `cast`
                           (Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0]))
                        Data.Either.Right ds1
                        -> (GHC.Types.:
                              @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                              (Language.PureScript.Docs.RenderedCode.Types.Symbol
                                 Language.PureScript.Docs.RenderedCode.Types.ValueLevel
                                 ds1
                                   `cast`
                                 (Language.PureScript.Names.N:ProperName[0]
                                      <'Language.PureScript.Names.ConstructorName>_P)
                                 (Language.PureScript.Docs.RenderedCode.Types.Link
                                    (case ww of wild2 {
                                       GHC.Base.Nothing
                                       -> Language.PureScript.Docs.RenderedCode.Types.ThisModule
                                       GHC.Base.Just mn
                                       -> Language.PureScript.Docs.RenderedCode.Types.OtherModule
                                            mn })))
                              (GHC.Types.[]
                                 @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement))
                             `cast`
                           (Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])) } }) -}
6f38799c277b219ac60fb11e2ce9367b
  $waliasName ::
    Data.Either.Either
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName)
      (Data.Either.Either
         Language.PureScript.Names.Ident
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ConstructorName))
    -> Data.Text.Internal.Text
    -> (# Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement,
          [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement] #)
  {- Arity: 2, Strictness: <S,1*U><L,1*U(U,U,U)>, Inline: [0] -}
bc8cb2c788184b6965df637d44e87b99
  $wasModuleName ::
    Data.DList.DList Data.Aeson.BetterErrors.Internal.PathPiece
    -> Data.Aeson.Types.Internal.Value
    -> Data.Either.Either
         (Data.Aeson.BetterErrors.Internal.ParseError err)
         Language.PureScript.Names.ModuleName
  {- Arity: 2, Strictness: <L,1*C1(U)><S,1*U>, Inline: [0],
     Unfolding: (\ @ err
                   (ww :: Data.DList.DList Data.Aeson.BetterErrors.Internal.PathPiece)
                   (ww1 :: Data.Aeson.Types.Internal.Value) ->
                 case ww1 of wild {
                   DEFAULT
                   -> Data.Either.Left
                        @ (Data.Aeson.BetterErrors.Internal.ParseError err)
                        @ Language.PureScript.Names.ModuleName
                        (Data.Aeson.BetterErrors.Internal.BadSchema
                           @ err
                           (ww
                              `cast`
                            (Data.DList.N:DList[0]
                                 <Data.Aeson.BetterErrors.Internal.PathPiece>_R)
                              (GHC.Types.[] @ Data.Aeson.BetterErrors.Internal.PathPiece))
                           (Data.Aeson.BetterErrors.Internal.WrongType
                              @ err
                              Data.Aeson.BetterErrors.Internal.TyString
                              wild))
                   Data.Aeson.Types.Internal.String t
                   -> case t of ww2 { Data.Text.Internal.Text ww3 ww4 ww5 ->
                      Data.Either.Right
                        @ (Data.Aeson.BetterErrors.Internal.ParseError err)
                        @ Language.PureScript.Names.ModuleName
                        (Language.PureScript.Names.$wsplitProperNames
                           @ 'Language.PureScript.Names.Namespace
                           ww3
                           ww4
                           ww5)
                          `cast`
                        (Sym (Language.PureScript.Names.N:ModuleName[0])) } }) -}
06feeeeb1d17e6476cb9818e962d64b8
  $wm1 ::
    Data.DList.DList Data.Aeson.BetterErrors.Internal.PathPiece
    -> Data.Aeson.Types.Internal.Value
    -> Control.Monad.Trans.Except.ExceptT
         (Data.Aeson.BetterErrors.Internal.ParseError
            Data.Text.Internal.Text)
         Data.Functor.Identity.Identity
         Data.Text.Internal.Text
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><S,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: Data.DList.DList
                            Data.Aeson.BetterErrors.Internal.PathPiece)
                   (ww1 :: Data.Aeson.Types.Internal.Value) ->
                 case ww1 of wild {
                   DEFAULT
                   -> (Data.Either.Left
                         @ (Data.Aeson.BetterErrors.Internal.ParseError
                              Data.Text.Internal.Text)
                         @ Data.Text.Internal.Text
                         (Data.Aeson.BetterErrors.Internal.BadSchema
                            @ Data.Text.Internal.Text
                            (ww
                               `cast`
                             (Data.DList.N:DList[0]
                                  <Data.Aeson.BetterErrors.Internal.PathPiece>_R)
                               (GHC.Types.[] @ Data.Aeson.BetterErrors.Internal.PathPiece))
                            (Data.Aeson.BetterErrors.Internal.WrongType
                               @ Data.Text.Internal.Text
                               Data.Aeson.BetterErrors.Internal.TyString
                               wild)))
                        `cast`
                      (Sym (Data.Functor.Identity.N:Identity[0]
                                <Data.Either.Either
                                   (Data.Aeson.BetterErrors.Internal.ParseError
                                      Data.Text.Internal.Text)
                                   Data.Text.Internal.Text>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                          <Data.Aeson.BetterErrors.Internal.ParseError
                                                                             Data.Text.Internal.Text>_N
                                                                          <Data.Functor.Identity.Identity>_R
                                                                          <Data.Text.Internal.Text>_N))
                   Data.Aeson.Types.Internal.String t
                   -> (Data.Either.Right
                         @ (Data.Aeson.BetterErrors.Internal.ParseError
                              Data.Text.Internal.Text)
                         @ Data.Text.Internal.Text
                         t)
                        `cast`
                      (Sym (Data.Functor.Identity.N:Identity[0]
                                <Data.Either.Either
                                   (Data.Aeson.BetterErrors.Internal.ParseError
                                      Data.Text.Internal.Text)
                                   Data.Text.Internal.Text>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                          <Data.Aeson.BetterErrors.Internal.ParseError
                                                                             Data.Text.Internal.Text>_N
                                                                          <Data.Functor.Identity.Identity>_R
                                                                          <Data.Text.Internal.Text>_N)) }) -}
5e9b2b25a94f6bc04ac9258fb2be1c52
  data ContainingModule
    = ThisModule | OtherModule Language.PureScript.Names.ModuleName
122fdd14b482e92974e48cc6ae5de54a
  type FixityAlias =
    Language.PureScript.Names.Qualified
      (Data.Either.Either
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName)
         (Data.Either.Either
            Language.PureScript.Names.Ident
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ConstructorName)))
646c8e664a7ad59f4599a12adf022c29
  data Link
    = NoLink
    | Link Language.PureScript.Docs.RenderedCode.Types.ContainingModule
e686c6add7c243d229f3b74d733eb7d2
  data Namespace = ValueLevel | TypeLevel | KindLevel
b76660a0424da31964a78f3df8712e5d
  newtype RenderedCode
    = RC {unRC :: [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]}
8d7e5831b8ea3cae37734f270bdcdcc0
  data RenderedCodeElement
    = Syntax Data.Text.Internal.Text
    | Keyword Data.Text.Internal.Text
    | Space
    | Symbol Language.PureScript.Docs.RenderedCode.Types.Namespace
             Data.Text.Internal.Text
             Language.PureScript.Docs.RenderedCode.Types.Link
e686c6add7c243d229f3b74d733eb7d2
  axiom Language.PureScript.Docs.RenderedCode.Types.Rep_Namespace::
      GHC.Generics.Rep
        Language.PureScript.Docs.RenderedCode.Types.Namespace
        = GHC.Generics.D1
            ('GHC.Generics.MetaData
               "Namespace"
               "Language.PureScript.Docs.RenderedCode.Types"
               "purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"
               'GHC.Types.False)
            (GHC.Generics.C1
               ('GHC.Generics.MetaCons
                  "ValueLevel" 'GHC.Generics.PrefixI 'GHC.Types.False)
               GHC.Generics.U1
             GHC.Generics.:+: (GHC.Generics.C1
                                 ('GHC.Generics.MetaCons
                                    "TypeLevel" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                 GHC.Generics.U1
                               GHC.Generics.:+: GHC.Generics.C1
                                                  ('GHC.Generics.MetaCons
                                                     "KindLevel"
                                                     'GHC.Generics.PrefixI
                                                     'GHC.Types.False)
                                                  GHC.Generics.U1))
58d75aa2b5508cb21207566ae9a7014c
  alias ::
    Language.PureScript.Docs.RenderedCode.Types.FixityAlias
    -> Language.PureScript.Docs.RenderedCode.Types.RenderedCode
  {- Arity: 1, Strictness: <S(LS),1*U(1*U,1*U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.PureScript.Docs.RenderedCode.Types.FixityAlias) ->
                 case w of ww { Language.PureScript.Names.Qualified ww1 ww2 ->
                 Language.PureScript.Docs.RenderedCode.Types.$walias ww1 ww2 }) -}
85d8615320542d07f02eacf9efef3791
  alias1 ::
    [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
  {- Unfolding: (GHC.Base.++_$s++
                   @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                   Language.PureScript.Docs.RenderedCode.Types.alias5
                   Language.PureScript.Docs.RenderedCode.Types.alias2
                   (GHC.Types.[]
                      @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)) -}
2495fe503707deb5bcd7b30ca0f22cd0
  alias2 ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
  {- Strictness: m2,
     Unfolding: (Language.PureScript.Docs.RenderedCode.Types.Keyword
                   Language.PureScript.Docs.RenderedCode.Types.alias3) -}
da160e3fb25a7bf8a2a5780544fd0f2d
  alias3 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Docs.RenderedCode.Types.alias4) -}
ab833f16bf386e391f538411287d25b5
  alias4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("type"#) -}
4533a55fe53778df197324b7fc334aab
  alias5 ::
    [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                   Language.PureScript.Docs.RenderedCode.Types.Space
                   (GHC.Types.[]
                      @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)) -}
38fb313582a77e9ced0a064e7c1961f1
  aliasName ::
    Language.PureScript.Docs.RenderedCode.Types.FixityAlias
    -> Data.Text.Internal.Text
    -> Language.PureScript.Docs.RenderedCode.Types.RenderedCode
  {- Arity: 2, Strictness: <S(LS),1*U(A,1*U)><L,1*U(U,U,U)>m2,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Docs.RenderedCode.Types.FixityAlias)
                   (w1 :: Data.Text.Internal.Text) ->
                 case w of ww { Language.PureScript.Names.Qualified ww1 ww2 ->
                 case Language.PureScript.Docs.RenderedCode.Types.$waliasName
                        ww2
                        w1 of ww3 { (#,#) ww4 ww5 ->
                 (GHC.Types.:
                    @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                    ww4
                    ww5)
                   `cast`
                 (Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])) } }) -}
5e9b2b25a94f6bc04ac9258fb2be1c52
  asContainingModule ::
    Data.Aeson.BetterErrors.Internal.Parse
      Data.Text.Internal.Text
      Language.PureScript.Docs.RenderedCode.Types.ContainingModule
  {- Unfolding: (Language.PureScript.Docs.RenderedCode.Types.tryParse
                   @ Language.PureScript.Docs.RenderedCode.Types.ContainingModule
                   Language.PureScript.Docs.RenderedCode.Types.asContainingModule20
                   Language.PureScript.Docs.RenderedCode.Types.asContainingModule1) -}
5e9b2b25a94f6bc04ac9258fb2be1c52
  asContainingModule1 ::
    [Data.Aeson.BetterErrors.Internal.ParseT
       Data.Text.Internal.Text
       Data.Functor.Identity.Identity
       Language.PureScript.Docs.RenderedCode.Types.ContainingModule]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Aeson.BetterErrors.Internal.ParseT
                        Data.Text.Internal.Text
                        Data.Functor.Identity.Identity
                        Language.PureScript.Docs.RenderedCode.Types.ContainingModule)
                   Language.PureScript.Docs.RenderedCode.Types.asContainingModule16
                     `cast`
                   ((<Data.Aeson.BetterErrors.Internal.ParseReader>_R
                     ->_R Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                   <Data.Aeson.BetterErrors.Internal.ParseError
                                      Data.Text.Internal.Text>_N
                                   <Data.Functor.Identity.Identity>_R
                                   <Language.PureScript.Docs.RenderedCode.Types.ContainingModule>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                  <*>_N
                                                                                                                  <Data.Aeson.BetterErrors.Internal.ParseReader>_R
                                                                                                                  <Control.Monad.Trans.Except.ExceptT
                                                                                                                     (Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                                        Data.Text.Internal.Text)
                                                                                                                     Data.Functor.Identity.Identity>_R
                                                                                                                  <Language.PureScript.Docs.RenderedCode.Types.ContainingModule>_N) ; Sym (Data.Aeson.BetterErrors.Internal.N:ParseT[0]
                                                                                                                                                                                               <Data.Text.Internal.Text>_N
                                                                                                                                                                                               <Data.Functor.Identity.Identity>_R) <Language.PureScript.Docs.RenderedCode.Types.ContainingModule>_N))
                   Language.PureScript.Docs.RenderedCode.Types.asContainingModule2) -}
12a0058bf46a8fa666e54a5e74e995a2
  asContainingModule10 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Docs.RenderedCode.Types.asContainingModule11) -}
22965f71c6d882ed2cbb47340e472bdc
  asContainingModule11 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("OtherModule"#) -}
39cab7d0540c58b65f3e5efa45dafdb2
  asContainingModule12 ::
    Data.Text.Internal.Text
    -> Data.Aeson.BetterErrors.Internal.Parse Data.Text.Internal.Text a
    -> Data.Aeson.BetterErrors.Internal.ParseReader
    -> Data.Functor.Identity.Identity
         (Data.Either.Either
            (Data.Aeson.BetterErrors.Internal.ParseError
               Data.Text.Internal.Text)
            a)
  {- Arity: 3, Strictness: <L,U(U,U,U)><L,1*C1(U)><L,U(U,U)>,
     Unfolding: (\ @ a
                   (str :: Data.Text.Internal.Text)
                   (p :: Data.Aeson.BetterErrors.Internal.Parse
                           Data.Text.Internal.Text a)
                   (eta :: Data.Aeson.BetterErrors.Internal.ParseReader) ->
                 case (Data.Aeson.BetterErrors.Internal.$wnth
                         @ Data.Functor.Identity.Identity
                         @ Data.Text.Internal.Text
                         @ ()
                         Data.Functor.Identity.$fMonadIdentity
                         Language.PureScript.Docs.RenderedCode.Types.asContainingModule15
                         (\ (w3 :: Data.Aeson.BetterErrors.Internal.ParseReader) ->
                          case w3 of ww { Data.Aeson.BetterErrors.Internal.ParseReader ww1 ww2 ->
                          case ww2 of wild {
                            DEFAULT
                            -> (Data.Either.Left
                                  @ (Data.Aeson.BetterErrors.Internal.ParseError
                                       Data.Text.Internal.Text)
                                  @ ()
                                  (Data.Aeson.BetterErrors.Internal.BadSchema
                                     @ Data.Text.Internal.Text
                                     (ww1
                                        `cast`
                                      (Data.DList.N:DList[0]
                                           <Data.Aeson.BetterErrors.Internal.PathPiece>_R)
                                        (GHC.Types.[] @ Data.Aeson.BetterErrors.Internal.PathPiece))
                                     (Data.Aeson.BetterErrors.Internal.WrongType
                                        @ Data.Text.Internal.Text
                                        Data.Aeson.BetterErrors.Internal.TyString
                                        wild)))
                                 `cast`
                               (Sym (Data.Functor.Identity.N:Identity[0]
                                         <Data.Either.Either
                                            (Data.Aeson.BetterErrors.Internal.ParseError
                                               Data.Text.Internal.Text)
                                            ()>_R))
                            Data.Aeson.Types.Internal.String t
                            -> case t of wild1 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                               case str of wild2 { Data.Text.Internal.Text dt dt1 dt2 ->
                               case GHC.Prim.==# dt2 dt5 of lwild {
                                 DEFAULT
                                 -> (Data.Either.Left
                                       @ (Data.Aeson.BetterErrors.Internal.ParseError
                                            Data.Text.Internal.Text)
                                       @ ()
                                       (Data.Aeson.BetterErrors.Internal.BadSchema
                                          @ Data.Text.Internal.Text
                                          (ww1
                                             `cast`
                                           (Data.DList.N:DList[0]
                                                <Data.Aeson.BetterErrors.Internal.PathPiece>_R)
                                             (GHC.Types.[]
                                                @ Data.Aeson.BetterErrors.Internal.PathPiece))
                                          Language.PureScript.Docs.RenderedCode.Types.asContainingModule14))
                                      `cast`
                                    (Sym (Data.Functor.Identity.N:Identity[0]
                                              <Data.Either.Either
                                                 (Data.Aeson.BetterErrors.Internal.ParseError
                                                    Data.Text.Internal.Text)
                                                 ()>_R))
                                 1#
                                 -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                                   -> GHC.Prim.Word#
                                                                   -> GHC.Prim.ByteArray#
                                                                   -> GHC.Prim.Word#
                                                                   -> GHC.Prim.Word#
                                                                   -> GHC.Prim.State#
                                                                        GHC.Prim.RealWorld
                                                                   -> (# GHC.Prim.State#
                                                                           GHC.Prim.RealWorld,
                                                                         GHC.Prim.Int# #)}
                                           dt
                                           (GHC.Prim.int2Word# dt1)
                                           dt3
                                           (GHC.Prim.int2Word# dt4)
                                           (GHC.Prim.int2Word# dt2)
                                           GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                                    case GHC.Prim.narrow32Int# ds3 of wild3 {
                                      DEFAULT
                                      -> (Data.Either.Left
                                            @ (Data.Aeson.BetterErrors.Internal.ParseError
                                                 Data.Text.Internal.Text)
                                            @ ()
                                            (Data.Aeson.BetterErrors.Internal.BadSchema
                                               @ Data.Text.Internal.Text
                                               (ww1
                                                  `cast`
                                                (Data.DList.N:DList[0]
                                                     <Data.Aeson.BetterErrors.Internal.PathPiece>_R)
                                                  (GHC.Types.[]
                                                     @ Data.Aeson.BetterErrors.Internal.PathPiece))
                                               Language.PureScript.Docs.RenderedCode.Types.asContainingModule14))
                                           `cast`
                                         (Sym (Data.Functor.Identity.N:Identity[0]
                                                   <Data.Either.Either
                                                      (Data.Aeson.BetterErrors.Internal.ParseError
                                                         Data.Text.Internal.Text)
                                                      ()>_R))
                                      0#
                                      -> Language.PureScript.Docs.RenderedCode.Types.asContainingModule13
                                           `cast`
                                         (Sym (Data.Functor.Identity.N:Identity[0]
                                                   <Data.Either.Either
                                                      (Data.Aeson.BetterErrors.Internal.ParseError
                                                         Data.Text.Internal.Text)
                                                      ()>_R)) } } } } } } })
                           `cast`
                         ((<Data.Aeson.BetterErrors.Internal.ParseReader>_R
                           ->_R Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                         <Data.Aeson.BetterErrors.Internal.ParseError
                                            Data.Text.Internal.Text>_N
                                         <Data.Functor.Identity.Identity>_R
                                         <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                              <*>_N
                                                              <Data.Aeson.BetterErrors.Internal.ParseReader>_R
                                                              <Control.Monad.Trans.Except.ExceptT
                                                                 (Data.Aeson.BetterErrors.Internal.ParseError
                                                                    Data.Text.Internal.Text)
                                                                 Data.Functor.Identity.Identity>_R
                                                              <()>_N) ; Sym (Data.Aeson.BetterErrors.Internal.N:ParseT[0]
                                                                                 <Data.Text.Internal.Text>_N
                                                                                 <Data.Functor.Identity.Identity>_R) <()>_N))
                         eta)
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <Data.Aeson.BetterErrors.Internal.ParseError
                              Data.Text.Internal.Text>_N
                           <Data.Functor.Identity.Identity>_R
                           <()>_N ; Data.Functor.Identity.N:Identity[0]
                                        <Data.Either.Either
                                           (Data.Aeson.BetterErrors.Internal.ParseError
                                              Data.Text.Internal.Text)
                                           ()>_R) of wild {
                   Data.Either.Left e1
                   -> (Data.Either.Left
                         @ (Data.Aeson.BetterErrors.Internal.ParseError
                              Data.Text.Internal.Text)
                         @ a
                         e1)
                        `cast`
                      (Sym (Data.Functor.Identity.N:Identity[0]
                                <Data.Either.Either
                                   (Data.Aeson.BetterErrors.Internal.ParseError
                                      Data.Text.Internal.Text)
                                   a>_R))
                   Data.Either.Right x
                   -> (p `cast`
                       (Data.Aeson.BetterErrors.Internal.N:ParseT[0]
                            <Data.Text.Internal.Text>_N
                            <Data.Functor.Identity.Identity>_R <a>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                           <*>_N
                                                                           <Data.Aeson.BetterErrors.Internal.ParseReader>_R
                                                                           <Control.Monad.Trans.Except.ExceptT
                                                                              (Data.Aeson.BetterErrors.Internal.ParseError
                                                                                 Data.Text.Internal.Text)
                                                                              Data.Functor.Identity.Identity>_R
                                                                           <a>_N)
                         eta)
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <Data.Aeson.BetterErrors.Internal.ParseError
                              Data.Text.Internal.Text>_N
                           <Data.Functor.Identity.Identity>_R
                           <a>_N) }) -}
6262f8add7edc27debb851747823cc7b
  asContainingModule13 ::
    Data.Either.Either
      (Data.Aeson.BetterErrors.Internal.ParseError
         Data.Text.Internal.Text)
      ()
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Data.Either.Right
                   @ (Data.Aeson.BetterErrors.Internal.ParseError
                        Data.Text.Internal.Text)
                   @ ()
                   GHC.Tuple.()) -}
af7fd95465ac1b187ac67398ca635b89
  asContainingModule14 ::
    Data.Aeson.BetterErrors.Internal.ErrorSpecifics
      Data.Text.Internal.Text
  {- Strictness: m6,
     Unfolding: (Data.Aeson.BetterErrors.Internal.CustomError
                   @ Data.Text.Internal.Text
                   Data.Text.Internal.empty_) -}
55b7f4760b99f0c9562745860fefbfb1
  asContainingModule15 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
5e9b2b25a94f6bc04ac9258fb2be1c52
  asContainingModule16 ::
    Data.Aeson.BetterErrors.Internal.ParseReader
    -> Data.Functor.Identity.Identity
         (Data.Either.Either
            (Data.Aeson.BetterErrors.Internal.ParseError
               Data.Text.Internal.Text)
            Language.PureScript.Docs.RenderedCode.Types.ContainingModule)
  {- Arity: 1,
     Unfolding: (Language.PureScript.Docs.RenderedCode.Types.asContainingModule12
                   @ Language.PureScript.Docs.RenderedCode.Types.ContainingModule
                   Language.PureScript.Docs.RenderedCode.Types.asContainingModule18
                   Language.PureScript.Docs.RenderedCode.Types.asContainingModule17
                     `cast`
                   ((<Data.Aeson.BetterErrors.Internal.ParseReader>_R
                     ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                   <Data.Either.Either
                                      (Data.Aeson.BetterErrors.Internal.ParseError
                                         Data.Text.Internal.Text)
                                      Language.PureScript.Docs.RenderedCode.Types.ContainingModule>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                  <Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                                     Data.Text.Internal.Text>_N
                                                                                                                  <Data.Functor.Identity.Identity>_R
                                                                                                                  <Language.PureScript.Docs.RenderedCode.Types.ContainingModule>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                                                                                                 <*>_N
                                                                                                                                                                                                 <Data.Aeson.BetterErrors.Internal.ParseReader>_R
                                                                                                                                                                                                 <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                    (Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                                                                                                                       Data.Text.Internal.Text)
                                                                                                                                                                                                    Data.Functor.Identity.Identity>_R
                                                                                                                                                                                                 <Language.PureScript.Docs.RenderedCode.Types.ContainingModule>_N) ; Sym (Data.Aeson.BetterErrors.Internal.N:ParseT[0]
                                                                                                                                                                                                                                                                              <Data.Text.Internal.Text>_N
                                                                                                                                                                                                                                                                              <Data.Functor.Identity.Identity>_R) <Language.PureScript.Docs.RenderedCode.Types.ContainingModule>_N))) -}
5e9b2b25a94f6bc04ac9258fb2be1c52
  asContainingModule17 ::
    Data.Aeson.BetterErrors.Internal.ParseReader
    -> Data.Either.Either
         (Data.Aeson.BetterErrors.Internal.ParseError
            Data.Text.Internal.Text)
         Language.PureScript.Docs.RenderedCode.Types.ContainingModule
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>m2,
     Unfolding: (\ (ds :: Data.Aeson.BetterErrors.Internal.ParseReader) ->
                 Language.PureScript.Docs.RenderedCode.Types.asContainingModule5) -}
fad0950c1e4132342436cac6f0fa5105
  asContainingModule18 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Docs.RenderedCode.Types.asContainingModule19) -}
2c9e2f79d41841420e9744652611ce9f
  asContainingModule19 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ThisModule"#) -}
5e9b2b25a94f6bc04ac9258fb2be1c52
  asContainingModule2 ::
    [Data.Aeson.BetterErrors.Internal.ParseT
       Data.Text.Internal.Text
       Data.Functor.Identity.Identity
       Language.PureScript.Docs.RenderedCode.Types.ContainingModule]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Aeson.BetterErrors.Internal.ParseT
                        Data.Text.Internal.Text
                        Data.Functor.Identity.Identity
                        Language.PureScript.Docs.RenderedCode.Types.ContainingModule)
                   Language.PureScript.Docs.RenderedCode.Types.asContainingModule6
                     `cast`
                   ((<Data.Aeson.BetterErrors.Internal.ParseReader>_R
                     ->_R Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                   <Data.Aeson.BetterErrors.Internal.ParseError
                                      Data.Text.Internal.Text>_N
                                   <Data.Functor.Identity.Identity>_R
                                   <Language.PureScript.Docs.RenderedCode.Types.ContainingModule>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                  <*>_N
                                                                                                                  <Data.Aeson.BetterErrors.Internal.ParseReader>_R
                                                                                                                  <Control.Monad.Trans.Except.ExceptT
                                                                                                                     (Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                                        Data.Text.Internal.Text)
                                                                                                                     Data.Functor.Identity.Identity>_R
                                                                                                                  <Language.PureScript.Docs.RenderedCode.Types.ContainingModule>_N) ; Sym (Data.Aeson.BetterErrors.Internal.N:ParseT[0]
                                                                                                                                                                                               <Data.Text.Internal.Text>_N
                                                                                                                                                                                               <Data.Functor.Identity.Identity>_R) <Language.PureScript.Docs.RenderedCode.Types.ContainingModule>_N))
                   Language.PureScript.Docs.RenderedCode.Types.asContainingModule3) -}
f71bf53f22c5b6d96019f1d998665ac8
  asContainingModule20 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Docs.RenderedCode.Types.asContainingModule21) -}
29a1664548d3532b249123f0aa2a700c
  asContainingModule21 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("containing module"#) -}
5e9b2b25a94f6bc04ac9258fb2be1c52
  asContainingModule3 ::
    [Data.Aeson.BetterErrors.Internal.ParseT
       Data.Text.Internal.Text
       Data.Functor.Identity.Identity
       Language.PureScript.Docs.RenderedCode.Types.ContainingModule]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Aeson.BetterErrors.Internal.ParseT
                        Data.Text.Internal.Text
                        Data.Functor.Identity.Identity
                        Language.PureScript.Docs.RenderedCode.Types.ContainingModule)
                   Language.PureScript.Docs.RenderedCode.Types.asContainingModule4
                     `cast`
                   ((<Data.Aeson.BetterErrors.Internal.ParseReader>_R
                     ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                   <Data.Either.Either
                                      (Data.Aeson.BetterErrors.Internal.ParseError
                                         Data.Text.Internal.Text)
                                      Language.PureScript.Docs.RenderedCode.Types.ContainingModule>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                  <Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                                     Data.Text.Internal.Text>_N
                                                                                                                  <Data.Functor.Identity.Identity>_R
                                                                                                                  <Language.PureScript.Docs.RenderedCode.Types.ContainingModule>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                                                                                                 <*>_N
                                                                                                                                                                                                 <Data.Aeson.BetterErrors.Internal.ParseReader>_R
                                                                                                                                                                                                 <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                    (Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                                                                                                                       Data.Text.Internal.Text)
                                                                                                                                                                                                    Data.Functor.Identity.Identity>_R
                                                                                                                                                                                                 <Language.PureScript.Docs.RenderedCode.Types.ContainingModule>_N) ; Sym (Data.Aeson.BetterErrors.Internal.N:ParseT[0]
                                                                                                                                                                                                                                                                              <Data.Text.Internal.Text>_N
                                                                                                                                                                                                                                                                              <Data.Functor.Identity.Identity>_R) <Language.PureScript.Docs.RenderedCode.Types.ContainingModule>_N))
                   (GHC.Types.[]
                      @ (Data.Aeson.BetterErrors.Internal.ParseT
                           Data.Text.Internal.Text
                           Data.Functor.Identity.Identity
                           Language.PureScript.Docs.RenderedCode.Types.ContainingModule))) -}
5e9b2b25a94f6bc04ac9258fb2be1c52
  asContainingModule4 ::
    Data.Aeson.BetterErrors.Internal.ParseReader
    -> Data.Either.Either
         (Data.Aeson.BetterErrors.Internal.ParseError
            Data.Text.Internal.Text)
         Language.PureScript.Docs.RenderedCode.Types.ContainingModule
  {- Arity: 1, Strictness: <S(LS),1*U(1*C1(U),1*U)>,
     Unfolding: (\ (x :: Data.Aeson.BetterErrors.Internal.ParseReader) ->
                 case x of wild { Data.Aeson.BetterErrors.Internal.ParseReader ds ds1 ->
                 case ds1 of wild1 {
                   DEFAULT
                   -> Data.Either.Left
                        @ (Data.Aeson.BetterErrors.Internal.ParseError
                             Data.Text.Internal.Text)
                        @ Language.PureScript.Docs.RenderedCode.Types.ContainingModule
                        (Data.Aeson.BetterErrors.Internal.BadSchema
                           @ Data.Text.Internal.Text
                           (ds
                              `cast`
                            (Data.DList.N:DList[0]
                                 <Data.Aeson.BetterErrors.Internal.PathPiece>_R)
                              (GHC.Types.[] @ Data.Aeson.BetterErrors.Internal.PathPiece))
                           (Data.Aeson.BetterErrors.Internal.WrongType
                              @ Data.Text.Internal.Text
                              Data.Aeson.BetterErrors.Internal.TyString
                              wild1))
                   Data.Aeson.Types.Internal.String t
                   -> case t of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                      Data.Either.Right
                        @ (Data.Aeson.BetterErrors.Internal.ParseError
                             Data.Text.Internal.Text)
                        @ Language.PureScript.Docs.RenderedCode.Types.ContainingModule
                        (Language.PureScript.Docs.RenderedCode.Types.OtherModule
                           (Language.PureScript.Names.$wsplitProperNames
                              @ 'Language.PureScript.Names.Namespace
                              ww1
                              ww2
                              ww3)
                             `cast`
                           (Sym (Language.PureScript.Names.N:ModuleName[0]))) }
                   Data.Aeson.Types.Internal.Null
                   -> Language.PureScript.Docs.RenderedCode.Types.asContainingModule5 } }) -}
5e9b2b25a94f6bc04ac9258fb2be1c52
  asContainingModule5 ::
    Data.Either.Either
      (Data.Aeson.BetterErrors.Internal.ParseError
         Data.Text.Internal.Text)
      Language.PureScript.Docs.RenderedCode.Types.ContainingModule
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Data.Either.Right
                   @ (Data.Aeson.BetterErrors.Internal.ParseError
                        Data.Text.Internal.Text)
                   @ Language.PureScript.Docs.RenderedCode.Types.ContainingModule
                   Language.PureScript.Docs.RenderedCode.Types.ThisModule) -}
5e9b2b25a94f6bc04ac9258fb2be1c52
  asContainingModule6 ::
    Data.Aeson.BetterErrors.Internal.ParseReader
    -> Data.Functor.Identity.Identity
         (Data.Either.Either
            (Data.Aeson.BetterErrors.Internal.ParseError
               Data.Text.Internal.Text)
            Language.PureScript.Docs.RenderedCode.Types.ContainingModule)
  {- Arity: 1,
     Unfolding: (Language.PureScript.Docs.RenderedCode.Types.asContainingModule12
                   @ Language.PureScript.Docs.RenderedCode.Types.ContainingModule
                   Language.PureScript.Docs.RenderedCode.Types.asContainingModule10
                   Language.PureScript.Docs.RenderedCode.Types.asContainingModule7
                     `cast`
                   ((<Data.Aeson.BetterErrors.Internal.ParseReader>_R
                     ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                   <Data.Either.Either
                                      (Data.Aeson.BetterErrors.Internal.ParseError
                                         Data.Text.Internal.Text)
                                      Language.PureScript.Docs.RenderedCode.Types.ContainingModule>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                  <Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                                     Data.Text.Internal.Text>_N
                                                                                                                  <Data.Functor.Identity.Identity>_R
                                                                                                                  <Language.PureScript.Docs.RenderedCode.Types.ContainingModule>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                                                                                                 <*>_N
                                                                                                                                                                                                 <Data.Aeson.BetterErrors.Internal.ParseReader>_R
                                                                                                                                                                                                 <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                    (Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                                                                                                                       Data.Text.Internal.Text)
                                                                                                                                                                                                    Data.Functor.Identity.Identity>_R
                                                                                                                                                                                                 <Language.PureScript.Docs.RenderedCode.Types.ContainingModule>_N) ; Sym (Data.Aeson.BetterErrors.Internal.N:ParseT[0]
                                                                                                                                                                                                                                                                              <Data.Text.Internal.Text>_N
                                                                                                                                                                                                                                                                              <Data.Functor.Identity.Identity>_R) <Language.PureScript.Docs.RenderedCode.Types.ContainingModule>_N))) -}
5e9b2b25a94f6bc04ac9258fb2be1c52
  asContainingModule7 ::
    Data.Aeson.BetterErrors.Internal.ParseReader
    -> Data.Either.Either
         (Data.Aeson.BetterErrors.Internal.ParseError
            Data.Text.Internal.Text)
         Language.PureScript.Docs.RenderedCode.Types.ContainingModule
  {- Arity: 1, Strictness: <L,U(U,U)>,
     Unfolding: (\ (x :: Data.Aeson.BetterErrors.Internal.ParseReader) ->
                 case (Data.Aeson.BetterErrors.Internal.$wnth
                         @ Data.Functor.Identity.Identity
                         @ Data.Text.Internal.Text
                         @ Language.PureScript.Names.ModuleName
                         Data.Functor.Identity.$fMonadIdentity
                         Language.PureScript.Docs.RenderedCode.Types.asContainingModule9
                         (Language.PureScript.Docs.RenderedCode.Types.asContainingModule8
                            @ Data.Text.Internal.Text)
                           `cast`
                         ((<Data.Aeson.BetterErrors.Internal.ParseReader>_R
                           ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                         <Data.Either.Either
                                            (Data.Aeson.BetterErrors.Internal.ParseError
                                               Data.Text.Internal.Text)
                                            Language.PureScript.Names.ModuleName>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                <Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                   Data.Text.Internal.Text>_N
                                                                                                <Data.Functor.Identity.Identity>_R
                                                                                                <Language.PureScript.Names.ModuleName>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                                                       <*>_N
                                                                                                                                                       <Data.Aeson.BetterErrors.Internal.ParseReader>_R
                                                                                                                                                       <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                          (Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                                                                             Data.Text.Internal.Text)
                                                                                                                                                          Data.Functor.Identity.Identity>_R
                                                                                                                                                       <Language.PureScript.Names.ModuleName>_N) ; Sym (Data.Aeson.BetterErrors.Internal.N:ParseT[0]
                                                                                                                                                                                                            <Data.Text.Internal.Text>_N
                                                                                                                                                                                                            <Data.Functor.Identity.Identity>_R) <Language.PureScript.Names.ModuleName>_N))
                         x)
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <Data.Aeson.BetterErrors.Internal.ParseError
                              Data.Text.Internal.Text>_N
                           <Data.Functor.Identity.Identity>_R
                           <Language.PureScript.Names.ModuleName>_N ; Data.Functor.Identity.N:Identity[0]
                                                                          <Data.Either.Either
                                                                             (Data.Aeson.BetterErrors.Internal.ParseError
                                                                                Data.Text.Internal.Text)
                                                                             Language.PureScript.Names.ModuleName>_R) of wild {
                   Data.Either.Left x1
                   -> Data.Either.Left
                        @ (Data.Aeson.BetterErrors.Internal.ParseError
                             Data.Text.Internal.Text)
                        @ Language.PureScript.Docs.RenderedCode.Types.ContainingModule
                        x1
                   Data.Either.Right y
                   -> Data.Either.Right
                        @ (Data.Aeson.BetterErrors.Internal.ParseError
                             Data.Text.Internal.Text)
                        @ Language.PureScript.Docs.RenderedCode.Types.ContainingModule
                        (Language.PureScript.Docs.RenderedCode.Types.OtherModule y) }) -}
da6579cec2edad8c54f28caee65bb232
  asContainingModule8 ::
    Data.Aeson.BetterErrors.Internal.ParseReader
    -> Data.Either.Either
         (Data.Aeson.BetterErrors.Internal.ParseError err)
         Language.PureScript.Names.ModuleName
  {- Arity: 1, Strictness: <S(LS),1*U(1*C1(U),1*U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ @ err (w :: Data.Aeson.BetterErrors.Internal.ParseReader) ->
                 case w of ww { Data.Aeson.BetterErrors.Internal.ParseReader ww1 ww2 ->
                 Language.PureScript.Docs.RenderedCode.Types.$wasModuleName
                   @ err
                   ww1
                   ww2 }) -}
2ab2e8bf5eb8ad1051ce88daea854c07
  asContainingModule9 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
646c8e664a7ad59f4599a12adf022c29
  asLink ::
    Data.Aeson.BetterErrors.Internal.Parse
      Data.Text.Internal.Text
      Language.PureScript.Docs.RenderedCode.Types.Link
  {- Unfolding: (Language.PureScript.Docs.RenderedCode.Types.tryParse
                   @ Language.PureScript.Docs.RenderedCode.Types.Link
                   Language.PureScript.Docs.RenderedCode.Types.$fFromJSONLink12
                   Language.PureScript.Docs.RenderedCode.Types.$fFromJSONLink1) -}
e686c6add7c243d229f3b74d733eb7d2
  asNamespace ::
    Data.Aeson.BetterErrors.Internal.Parse
      Data.Text.Internal.Text
      Language.PureScript.Docs.RenderedCode.Types.Namespace
  {- Unfolding: (Language.PureScript.Docs.RenderedCode.Types.tryParse
                   @ Language.PureScript.Docs.RenderedCode.Types.Namespace
                   Language.PureScript.Docs.RenderedCode.Types.$fFromJSONNamespace12
                   Language.PureScript.Docs.RenderedCode.Types.$fFromJSONNamespace1) -}
90a261fbc98a867b411e086f7dba08c7
  asRenderedCode ::
    Data.Aeson.BetterErrors.Internal.Parse
      Data.Text.Internal.Text
      Language.PureScript.Docs.RenderedCode.Types.RenderedCode
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Docs.RenderedCode.Types.asRenderedCode1
                  `cast`
                ((<Data.Aeson.BetterErrors.Internal.ParseReader>_R
                  ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                <Data.Either.Either
                                   (Data.Aeson.BetterErrors.Internal.ParseError
                                      Data.Text.Internal.Text)
                                   Language.PureScript.Docs.RenderedCode.Types.RenderedCode>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                           <Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                              Data.Text.Internal.Text>_N
                                                                                                           <Data.Functor.Identity.Identity>_R
                                                                                                           <Language.PureScript.Docs.RenderedCode.Types.RenderedCode>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                                                                                      <*>_N
                                                                                                                                                                                      <Data.Aeson.BetterErrors.Internal.ParseReader>_R
                                                                                                                                                                                      <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                         (Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                                                                                                            Data.Text.Internal.Text)
                                                                                                                                                                                         Data.Functor.Identity.Identity>_R
                                                                                                                                                                                      <Language.PureScript.Docs.RenderedCode.Types.RenderedCode>_N) ; Sym (Data.Aeson.BetterErrors.Internal.N:ParseT[0]
                                                                                                                                                                                                                                                               <Data.Text.Internal.Text>_N
                                                                                                                                                                                                                                                               <Data.Functor.Identity.Identity>_R) <Language.PureScript.Docs.RenderedCode.Types.RenderedCode>_N)) -}
d90df97d57a10b41d92b4663e1df3991
  asRenderedCode1 ::
    Data.Aeson.BetterErrors.Internal.ParseReader
    -> Data.Either.Either
         (Data.Aeson.BetterErrors.Internal.ParseError
            Data.Text.Internal.Text)
         Language.PureScript.Docs.RenderedCode.Types.RenderedCode
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Aeson.BetterErrors.Internal.ParseReader) ->
                 case (Language.PureScript.Docs.RenderedCode.Types.asRenderedCode2
                         `cast`
                       (Data.Aeson.BetterErrors.Internal.N:ParseT[0]
                            <Data.Text.Internal.Text>_N
                            <Data.Functor.Identity.Identity>_R <[Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                                           <*>_N
                                                                                                                                           <Data.Aeson.BetterErrors.Internal.ParseReader>_R
                                                                                                                                           <Control.Monad.Trans.Except.ExceptT
                                                                                                                                              (Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                                                                 Data.Text.Internal.Text)
                                                                                                                                              Data.Functor.Identity.Identity>_R
                                                                                                                                           <[Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]>_N)
                         x)
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <Data.Aeson.BetterErrors.Internal.ParseError
                              Data.Text.Internal.Text>_N
                           <Data.Functor.Identity.Identity>_R
                           <[Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]>_N ; Data.Functor.Identity.N:Identity[0]
                                                                                                       <Data.Either.Either
                                                                                                          (Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                             Data.Text.Internal.Text)
                                                                                                          [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]>_R) of wild {
                   Data.Either.Left x1
                   -> Data.Either.Left
                        @ (Data.Aeson.BetterErrors.Internal.ParseError
                             Data.Text.Internal.Text)
                        @ Language.PureScript.Docs.RenderedCode.Types.RenderedCode
                        x1
                   Data.Either.Right y
                   -> Data.Either.Right
                        @ (Data.Aeson.BetterErrors.Internal.ParseError
                             Data.Text.Internal.Text)
                        @ Language.PureScript.Docs.RenderedCode.Types.RenderedCode
                        y `cast`
                        (Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])) }) -}
219786a474d8817bc772bd868165a47a
  asRenderedCode2 ::
    Data.Aeson.BetterErrors.Internal.ParseT
      Data.Text.Internal.Text
      Data.Functor.Identity.Identity
      [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
  {- Unfolding: (Data.Aeson.BetterErrors.Internal.$weachInArray
                   @ Data.Functor.Identity.Identity
                   @ Data.Text.Internal.Text
                   @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                   Data.Functor.Identity.$fMonadIdentity
                   Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement) -}
cef3b418ac32aa002eda0badfbb2ffdd
  asRenderedCodeElement ::
    Data.Aeson.BetterErrors.Internal.Parse
      Data.Text.Internal.Text
      Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
  {- Unfolding: (Language.PureScript.Docs.RenderedCode.Types.tryParse
                   @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                   Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement36
                   Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement1) -}
e30a28b46a0e083a1816defe338b41c1
  asRenderedCodeElement1 ::
    [Data.Aeson.BetterErrors.Internal.ParseT
       Data.Text.Internal.Text
       Data.Functor.Identity.Identity
       Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Aeson.BetterErrors.Internal.ParseT
                        Data.Text.Internal.Text
                        Data.Functor.Identity.Identity
                        Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)
                   Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement34
                     `cast`
                   ((<Data.Aeson.BetterErrors.Internal.ParseReader>_R
                     ->_R Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                   <Data.Aeson.BetterErrors.Internal.ParseError
                                      Data.Text.Internal.Text>_N
                                   <Data.Functor.Identity.Identity>_R
                                   <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                     <*>_N
                                                                                                                     <Data.Aeson.BetterErrors.Internal.ParseReader>_R
                                                                                                                     <Control.Monad.Trans.Except.ExceptT
                                                                                                                        (Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                                           Data.Text.Internal.Text)
                                                                                                                        Data.Functor.Identity.Identity>_R
                                                                                                                     <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N) ; Sym (Data.Aeson.BetterErrors.Internal.N:ParseT[0]
                                                                                                                                                                                                     <Data.Text.Internal.Text>_N
                                                                                                                                                                                                     <Data.Functor.Identity.Identity>_R) <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N))
                   Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement2) -}
c9e273ec0108db58f376a74fd6fefc36
  asRenderedCodeElement10 ::
    Language.PureScript.Docs.RenderedCode.Types.Link
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Language.PureScript.Docs.RenderedCode.Types.Link
                   Language.PureScript.Docs.RenderedCode.Types.ThisModule) -}
af999dece0dfa59e923415bb8361968a
  asRenderedCodeElement11 ::
    Data.Aeson.BetterErrors.Internal.ParseReader
    -> Control.Monad.Trans.Except.ExceptT
         (Data.Aeson.BetterErrors.Internal.ParseError
            Data.Text.Internal.Text)
         Data.Functor.Identity.Identity
         Data.Text.Internal.Text
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(1*C1(U),1*U)>,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Data.Aeson.BetterErrors.Internal.ParseReader) ->
                 case w of ww { Data.Aeson.BetterErrors.Internal.ParseReader ww1 ww2 ->
                 Language.PureScript.Docs.RenderedCode.Types.$wm1 ww1 ww2 }) -}
5eb63455a825c75402124fa900bdfc70
  asRenderedCodeElement12 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement13) -}
951ee3e70ba5e82154b5b4545298185c
  asRenderedCodeElement13 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("kind"#) -}
2eb9fb4f2143e36d6018e21f5d4aecb0
  asRenderedCodeElement14 ::
    Data.Aeson.BetterErrors.Internal.ParseReader
    -> Data.Functor.Identity.Identity
         (Data.Either.Either
            (Data.Aeson.BetterErrors.Internal.ParseError
               Data.Text.Internal.Text)
            Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)
  {- Arity: 1,
     Unfolding: (Language.PureScript.Docs.RenderedCode.Types.asContainingModule12
                   @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                   Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement18
                   Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement15
                     `cast`
                   (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                             <*>_N
                             <Data.Aeson.BetterErrors.Internal.ParseReader>_R
                             <Control.Monad.Trans.Except.ExceptT
                                (Data.Aeson.BetterErrors.Internal.ParseError
                                   Data.Text.Internal.Text)
                                Data.Functor.Identity.Identity>_R
                             <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N) ; Sym (Data.Aeson.BetterErrors.Internal.N:ParseT[0]
                                                                                                             <Data.Text.Internal.Text>_N
                                                                                                             <Data.Functor.Identity.Identity>_R) <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N)) -}
7e302e7319d81a77785788b6d5995030
  asRenderedCodeElement15 ::
    Data.Aeson.BetterErrors.Internal.ParseReader
    -> Control.Monad.Trans.Except.ExceptT
         (Data.Aeson.BetterErrors.Internal.ParseError
            Data.Text.Internal.Text)
         Data.Functor.Identity.Identity
         Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
  {- Arity: 1, Strictness: <L,U(U,U)>,
     Unfolding: (\ (r1 :: Data.Aeson.BetterErrors.Internal.ParseReader) ->
                 case (Data.Aeson.BetterErrors.Internal.$wnth
                         @ Data.Functor.Identity.Identity
                         @ Data.Text.Internal.Text
                         @ Data.Text.Internal.Text
                         Data.Functor.Identity.$fMonadIdentity
                         Language.PureScript.Docs.RenderedCode.Types.asContainingModule9
                         Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement11
                           `cast`
                         (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                   <*>_N
                                   <Data.Aeson.BetterErrors.Internal.ParseReader>_R
                                   <Control.Monad.Trans.Except.ExceptT
                                      (Data.Aeson.BetterErrors.Internal.ParseError
                                         Data.Text.Internal.Text)
                                      Data.Functor.Identity.Identity>_R
                                   <Data.Text.Internal.Text>_N) ; Sym (Data.Aeson.BetterErrors.Internal.N:ParseT[0]
                                                                           <Data.Text.Internal.Text>_N
                                                                           <Data.Functor.Identity.Identity>_R) <Data.Text.Internal.Text>_N)
                         r1)
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <Data.Aeson.BetterErrors.Internal.ParseError
                              Data.Text.Internal.Text>_N
                           <Data.Functor.Identity.Identity>_R
                           <Data.Text.Internal.Text>_N ; Data.Functor.Identity.N:Identity[0]
                                                             <Data.Either.Either
                                                                (Data.Aeson.BetterErrors.Internal.ParseError
                                                                   Data.Text.Internal.Text)
                                                                Data.Text.Internal.Text>_R) of wild {
                   Data.Either.Left x
                   -> (Data.Either.Left
                         @ (Data.Aeson.BetterErrors.Internal.ParseError
                              Data.Text.Internal.Text)
                         @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                         x)
                        `cast`
                      (Sym (Data.Functor.Identity.N:Identity[0]
                                <Data.Either.Either
                                   (Data.Aeson.BetterErrors.Internal.ParseError
                                      Data.Text.Internal.Text)
                                   Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                  <Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                                     Data.Text.Internal.Text>_N
                                                                                                                  <Data.Functor.Identity.Identity>_R
                                                                                                                  <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N))
                   Data.Either.Right y
                   -> case (Data.Aeson.BetterErrors.Internal.$wnth
                              @ Data.Functor.Identity.Identity
                              @ Data.Text.Internal.Text
                              @ Language.PureScript.Docs.RenderedCode.Types.Link
                              Data.Functor.Identity.$fMonadIdentity
                              Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement17
                              Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement16
                                `cast`
                              ((<Data.Aeson.BetterErrors.Internal.ParseReader>_R
                                ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                              <Data.Either.Either
                                                 (Data.Aeson.BetterErrors.Internal.ParseError
                                                    Data.Text.Internal.Text)
                                                 Language.PureScript.Docs.RenderedCode.Types.Link>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                 <Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                                    Data.Text.Internal.Text>_N
                                                                                                                 <Data.Functor.Identity.Identity>_R
                                                                                                                 <Language.PureScript.Docs.RenderedCode.Types.Link>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                                                                                    <*>_N
                                                                                                                                                                                    <Data.Aeson.BetterErrors.Internal.ParseReader>_R
                                                                                                                                                                                    <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                       (Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                                                                                                          Data.Text.Internal.Text)
                                                                                                                                                                                       Data.Functor.Identity.Identity>_R
                                                                                                                                                                                    <Language.PureScript.Docs.RenderedCode.Types.Link>_N) ; Sym (Data.Aeson.BetterErrors.Internal.N:ParseT[0]
                                                                                                                                                                                                                                                     <Data.Text.Internal.Text>_N
                                                                                                                                                                                                                                                     <Data.Functor.Identity.Identity>_R) <Language.PureScript.Docs.RenderedCode.Types.Link>_N))
                              r1)
                             `cast`
                           (Control.Monad.Trans.Except.N:ExceptT[0]
                                <Data.Aeson.BetterErrors.Internal.ParseError
                                   Data.Text.Internal.Text>_N
                                <Data.Functor.Identity.Identity>_R
                                <Language.PureScript.Docs.RenderedCode.Types.Link>_N ; Data.Functor.Identity.N:Identity[0]
                                                                                           <Data.Either.Either
                                                                                              (Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                 Data.Text.Internal.Text)
                                                                                              Language.PureScript.Docs.RenderedCode.Types.Link>_R) of wild1 {
                        Data.Either.Left e1
                        -> (Data.Either.Left
                              @ (Data.Aeson.BetterErrors.Internal.ParseError
                                   Data.Text.Internal.Text)
                              @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                              e1)
                             `cast`
                           (Sym (Data.Functor.Identity.N:Identity[0]
                                     <Data.Either.Either
                                        (Data.Aeson.BetterErrors.Internal.ParseError
                                           Data.Text.Internal.Text)
                                        Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                       <Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                                          Data.Text.Internal.Text>_N
                                                                                                                       <Data.Functor.Identity.Identity>_R
                                                                                                                       <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N))
                        Data.Either.Right x
                        -> (Data.Either.Right
                              @ (Data.Aeson.BetterErrors.Internal.ParseError
                                   Data.Text.Internal.Text)
                              @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                              (Language.PureScript.Docs.RenderedCode.Types.Symbol
                                 Language.PureScript.Docs.RenderedCode.Types.TypeLevel
                                 y
                                 x))
                             `cast`
                           (Sym (Data.Functor.Identity.N:Identity[0]
                                     <Data.Either.Either
                                        (Data.Aeson.BetterErrors.Internal.ParseError
                                           Data.Text.Internal.Text)
                                        Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                       <Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                                          Data.Text.Internal.Text>_N
                                                                                                                       <Data.Functor.Identity.Identity>_R
                                                                                                                       <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N)) } }) -}
2a265b98eff77ed146837ea14db97e77
  asRenderedCodeElement16 ::
    Data.Aeson.BetterErrors.Internal.ParseReader
    -> Data.Either.Either
         (Data.Aeson.BetterErrors.Internal.ParseError
            Data.Text.Internal.Text)
         Language.PureScript.Docs.RenderedCode.Types.Link
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Aeson.BetterErrors.Internal.ParseReader) ->
                 case (Language.PureScript.Docs.RenderedCode.Types.asContainingModule
                         `cast`
                       (Data.Aeson.BetterErrors.Internal.N:ParseT[0]
                            <Data.Text.Internal.Text>_N
                            <Data.Functor.Identity.Identity>_R <Language.PureScript.Docs.RenderedCode.Types.ContainingModule>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                                      <*>_N
                                                                                                                                      <Data.Aeson.BetterErrors.Internal.ParseReader>_R
                                                                                                                                      <Control.Monad.Trans.Except.ExceptT
                                                                                                                                         (Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                                                            Data.Text.Internal.Text)
                                                                                                                                         Data.Functor.Identity.Identity>_R
                                                                                                                                      <Language.PureScript.Docs.RenderedCode.Types.ContainingModule>_N)
                         x)
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <Data.Aeson.BetterErrors.Internal.ParseError
                              Data.Text.Internal.Text>_N
                           <Data.Functor.Identity.Identity>_R
                           <Language.PureScript.Docs.RenderedCode.Types.ContainingModule>_N ; Data.Functor.Identity.N:Identity[0]
                                                                                                  <Data.Either.Either
                                                                                                     (Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                        Data.Text.Internal.Text)
                                                                                                     Language.PureScript.Docs.RenderedCode.Types.ContainingModule>_R) of wild {
                   Data.Either.Left x1
                   -> Data.Either.Left
                        @ (Data.Aeson.BetterErrors.Internal.ParseError
                             Data.Text.Internal.Text)
                        @ Language.PureScript.Docs.RenderedCode.Types.Link
                        x1
                   Data.Either.Right y
                   -> Data.Either.Right
                        @ (Data.Aeson.BetterErrors.Internal.ParseError
                             Data.Text.Internal.Text)
                        @ Language.PureScript.Docs.RenderedCode.Types.Link
                        (Language.PureScript.Docs.RenderedCode.Types.Link y) }) -}
6ce728e2adb01b40cd1164c9968f9bc6
  asRenderedCodeElement17 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 2#) -}
74a034acee35e760102838f7ae696356
  asRenderedCodeElement18 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement19) -}
a34fef3ed2c16bd8c6f9ef7277059cf0
  asRenderedCodeElement19 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ctor"#) -}
676c987adafdc6fe3221ad59a1922132
  asRenderedCodeElement2 ::
    [Data.Aeson.BetterErrors.Internal.ParseT
       Data.Text.Internal.Text
       Data.Functor.Identity.Identity
       Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Aeson.BetterErrors.Internal.ParseT
                        Data.Text.Internal.Text
                        Data.Functor.Identity.Identity
                        Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)
                   Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement32
                     `cast`
                   ((<Data.Aeson.BetterErrors.Internal.ParseReader>_R
                     ->_R Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                   <Data.Aeson.BetterErrors.Internal.ParseError
                                      Data.Text.Internal.Text>_N
                                   <Data.Functor.Identity.Identity>_R
                                   <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                     <*>_N
                                                                                                                     <Data.Aeson.BetterErrors.Internal.ParseReader>_R
                                                                                                                     <Control.Monad.Trans.Except.ExceptT
                                                                                                                        (Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                                           Data.Text.Internal.Text)
                                                                                                                        Data.Functor.Identity.Identity>_R
                                                                                                                     <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N) ; Sym (Data.Aeson.BetterErrors.Internal.N:ParseT[0]
                                                                                                                                                                                                     <Data.Text.Internal.Text>_N
                                                                                                                                                                                                     <Data.Functor.Identity.Identity>_R) <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N))
                   Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement3) -}
925881e5b8397368e9ddf3a203a0dd3e
  asRenderedCodeElement20 ::
    Data.Aeson.BetterErrors.Internal.ParseReader
    -> Data.Functor.Identity.Identity
         (Data.Either.Either
            (Data.Aeson.BetterErrors.Internal.ParseError
               Data.Text.Internal.Text)
            Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)
  {- Arity: 1,
     Unfolding: (Language.PureScript.Docs.RenderedCode.Types.asContainingModule12
                   @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                   Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement22
                   Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement21
                     `cast`
                   (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                             <*>_N
                             <Data.Aeson.BetterErrors.Internal.ParseReader>_R
                             <Control.Monad.Trans.Except.ExceptT
                                (Data.Aeson.BetterErrors.Internal.ParseError
                                   Data.Text.Internal.Text)
                                Data.Functor.Identity.Identity>_R
                             <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N) ; Sym (Data.Aeson.BetterErrors.Internal.N:ParseT[0]
                                                                                                             <Data.Text.Internal.Text>_N
                                                                                                             <Data.Functor.Identity.Identity>_R) <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N)) -}
ab20757d3b76b68527baa84b36a754b7
  asRenderedCodeElement21 ::
    Data.Aeson.BetterErrors.Internal.ParseReader
    -> Control.Monad.Trans.Except.ExceptT
         (Data.Aeson.BetterErrors.Internal.ParseError
            Data.Text.Internal.Text)
         Data.Functor.Identity.Identity
         Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
  {- Arity: 1, Strictness: <L,U(U,U)>,
     Unfolding: (\ (r1 :: Data.Aeson.BetterErrors.Internal.ParseReader) ->
                 case (Data.Aeson.BetterErrors.Internal.$wnth
                         @ Data.Functor.Identity.Identity
                         @ Data.Text.Internal.Text
                         @ Data.Text.Internal.Text
                         Data.Functor.Identity.$fMonadIdentity
                         Language.PureScript.Docs.RenderedCode.Types.asContainingModule9
                         Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement11
                           `cast`
                         (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                   <*>_N
                                   <Data.Aeson.BetterErrors.Internal.ParseReader>_R
                                   <Control.Monad.Trans.Except.ExceptT
                                      (Data.Aeson.BetterErrors.Internal.ParseError
                                         Data.Text.Internal.Text)
                                      Data.Functor.Identity.Identity>_R
                                   <Data.Text.Internal.Text>_N) ; Sym (Data.Aeson.BetterErrors.Internal.N:ParseT[0]
                                                                           <Data.Text.Internal.Text>_N
                                                                           <Data.Functor.Identity.Identity>_R) <Data.Text.Internal.Text>_N)
                         r1)
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <Data.Aeson.BetterErrors.Internal.ParseError
                              Data.Text.Internal.Text>_N
                           <Data.Functor.Identity.Identity>_R
                           <Data.Text.Internal.Text>_N ; Data.Functor.Identity.N:Identity[0]
                                                             <Data.Either.Either
                                                                (Data.Aeson.BetterErrors.Internal.ParseError
                                                                   Data.Text.Internal.Text)
                                                                Data.Text.Internal.Text>_R) of wild {
                   Data.Either.Left x
                   -> (Data.Either.Left
                         @ (Data.Aeson.BetterErrors.Internal.ParseError
                              Data.Text.Internal.Text)
                         @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                         x)
                        `cast`
                      (Sym (Data.Functor.Identity.N:Identity[0]
                                <Data.Either.Either
                                   (Data.Aeson.BetterErrors.Internal.ParseError
                                      Data.Text.Internal.Text)
                                   Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                  <Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                                     Data.Text.Internal.Text>_N
                                                                                                                  <Data.Functor.Identity.Identity>_R
                                                                                                                  <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N))
                   Data.Either.Right y
                   -> case (Data.Aeson.BetterErrors.Internal.$wnth
                              @ Data.Functor.Identity.Identity
                              @ Data.Text.Internal.Text
                              @ Language.PureScript.Docs.RenderedCode.Types.Link
                              Data.Functor.Identity.$fMonadIdentity
                              Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement17
                              Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement16
                                `cast`
                              ((<Data.Aeson.BetterErrors.Internal.ParseReader>_R
                                ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                              <Data.Either.Either
                                                 (Data.Aeson.BetterErrors.Internal.ParseError
                                                    Data.Text.Internal.Text)
                                                 Language.PureScript.Docs.RenderedCode.Types.Link>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                 <Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                                    Data.Text.Internal.Text>_N
                                                                                                                 <Data.Functor.Identity.Identity>_R
                                                                                                                 <Language.PureScript.Docs.RenderedCode.Types.Link>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                                                                                    <*>_N
                                                                                                                                                                                    <Data.Aeson.BetterErrors.Internal.ParseReader>_R
                                                                                                                                                                                    <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                       (Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                                                                                                          Data.Text.Internal.Text)
                                                                                                                                                                                       Data.Functor.Identity.Identity>_R
                                                                                                                                                                                    <Language.PureScript.Docs.RenderedCode.Types.Link>_N) ; Sym (Data.Aeson.BetterErrors.Internal.N:ParseT[0]
                                                                                                                                                                                                                                                     <Data.Text.Internal.Text>_N
                                                                                                                                                                                                                                                     <Data.Functor.Identity.Identity>_R) <Language.PureScript.Docs.RenderedCode.Types.Link>_N))
                              r1)
                             `cast`
                           (Control.Monad.Trans.Except.N:ExceptT[0]
                                <Data.Aeson.BetterErrors.Internal.ParseError
                                   Data.Text.Internal.Text>_N
                                <Data.Functor.Identity.Identity>_R
                                <Language.PureScript.Docs.RenderedCode.Types.Link>_N ; Data.Functor.Identity.N:Identity[0]
                                                                                           <Data.Either.Either
                                                                                              (Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                 Data.Text.Internal.Text)
                                                                                              Language.PureScript.Docs.RenderedCode.Types.Link>_R) of wild1 {
                        Data.Either.Left e1
                        -> (Data.Either.Left
                              @ (Data.Aeson.BetterErrors.Internal.ParseError
                                   Data.Text.Internal.Text)
                              @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                              e1)
                             `cast`
                           (Sym (Data.Functor.Identity.N:Identity[0]
                                     <Data.Either.Either
                                        (Data.Aeson.BetterErrors.Internal.ParseError
                                           Data.Text.Internal.Text)
                                        Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                       <Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                                          Data.Text.Internal.Text>_N
                                                                                                                       <Data.Functor.Identity.Identity>_R
                                                                                                                       <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N))
                        Data.Either.Right x
                        -> (Data.Either.Right
                              @ (Data.Aeson.BetterErrors.Internal.ParseError
                                   Data.Text.Internal.Text)
                              @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                              (Language.PureScript.Docs.RenderedCode.Types.Symbol
                                 Language.PureScript.Docs.RenderedCode.Types.ValueLevel
                                 y
                                 x))
                             `cast`
                           (Sym (Data.Functor.Identity.N:Identity[0]
                                     <Data.Either.Either
                                        (Data.Aeson.BetterErrors.Internal.ParseError
                                           Data.Text.Internal.Text)
                                        Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                       <Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                                          Data.Text.Internal.Text>_N
                                                                                                                       <Data.Functor.Identity.Identity>_R
                                                                                                                       <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N)) } }) -}
41f88a14a8b51569143bd64200b055f0
  asRenderedCodeElement22 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement23) -}
4c873df8a674b0b1c6f28f113e26b1b8
  asRenderedCodeElement23 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ident"#) -}
ce6009182ca4da1c05a8ad5d6cafc184
  asRenderedCodeElement24 ::
    Data.Aeson.BetterErrors.Internal.ParseReader
    -> Data.Functor.Identity.Identity
         (Data.Either.Either
            (Data.Aeson.BetterErrors.Internal.ParseError
               Data.Text.Internal.Text)
            Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)
  {- Arity: 1,
     Unfolding: (Language.PureScript.Docs.RenderedCode.Types.asContainingModule12
                   @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                   Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement27
                   Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement25
                     `cast`
                   (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                             <*>_N
                             <Data.Aeson.BetterErrors.Internal.ParseReader>_R
                             <Control.Monad.Trans.Except.ExceptT
                                (Data.Aeson.BetterErrors.Internal.ParseError
                                   Data.Text.Internal.Text)
                                Data.Functor.Identity.Identity>_R
                             <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N) ; Sym (Data.Aeson.BetterErrors.Internal.N:ParseT[0]
                                                                                                             <Data.Text.Internal.Text>_N
                                                                                                             <Data.Functor.Identity.Identity>_R) <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N)) -}
c1f067377ec140b1517c8315933d0836
  asRenderedCodeElement25 ::
    Data.Aeson.BetterErrors.Internal.ParseReader
    -> Control.Monad.Trans.Except.ExceptT
         (Data.Aeson.BetterErrors.Internal.ParseError
            Data.Text.Internal.Text)
         Data.Functor.Identity.Identity
         Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
  {- Arity: 1, Strictness: <L,U(U,U)>,
     Unfolding: (\ (r1 :: Data.Aeson.BetterErrors.Internal.ParseReader) ->
                 case (Data.Aeson.BetterErrors.Internal.$wnth
                         @ Data.Functor.Identity.Identity
                         @ Data.Text.Internal.Text
                         @ Language.PureScript.Docs.RenderedCode.Types.Namespace
                         Data.Functor.Identity.$fMonadIdentity
                         Language.PureScript.Docs.RenderedCode.Types.asContainingModule9
                         Language.PureScript.Docs.RenderedCode.Types.asNamespace
                         r1)
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <Data.Aeson.BetterErrors.Internal.ParseError
                              Data.Text.Internal.Text>_N
                           <Data.Functor.Identity.Identity>_R
                           <Language.PureScript.Docs.RenderedCode.Types.Namespace>_N ; Data.Functor.Identity.N:Identity[0]
                                                                                           <Data.Either.Either
                                                                                              (Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                 Data.Text.Internal.Text)
                                                                                              Language.PureScript.Docs.RenderedCode.Types.Namespace>_R) of wild {
                   Data.Either.Left x
                   -> (Data.Either.Left
                         @ (Data.Aeson.BetterErrors.Internal.ParseError
                              Data.Text.Internal.Text)
                         @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                         x)
                        `cast`
                      (Sym (Data.Functor.Identity.N:Identity[0]
                                <Data.Either.Either
                                   (Data.Aeson.BetterErrors.Internal.ParseError
                                      Data.Text.Internal.Text)
                                   Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                  <Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                                     Data.Text.Internal.Text>_N
                                                                                                                  <Data.Functor.Identity.Identity>_R
                                                                                                                  <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N))
                   Data.Either.Right y
                   -> case (Data.Aeson.BetterErrors.Internal.$wnth
                              @ Data.Functor.Identity.Identity
                              @ Data.Text.Internal.Text
                              @ Data.Text.Internal.Text
                              Data.Functor.Identity.$fMonadIdentity
                              Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement17
                              Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement11
                                `cast`
                              (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                        <*>_N
                                        <Data.Aeson.BetterErrors.Internal.ParseReader>_R
                                        <Control.Monad.Trans.Except.ExceptT
                                           (Data.Aeson.BetterErrors.Internal.ParseError
                                              Data.Text.Internal.Text)
                                           Data.Functor.Identity.Identity>_R
                                        <Data.Text.Internal.Text>_N) ; Sym (Data.Aeson.BetterErrors.Internal.N:ParseT[0]
                                                                                <Data.Text.Internal.Text>_N
                                                                                <Data.Functor.Identity.Identity>_R) <Data.Text.Internal.Text>_N)
                              r1)
                             `cast`
                           (Control.Monad.Trans.Except.N:ExceptT[0]
                                <Data.Aeson.BetterErrors.Internal.ParseError
                                   Data.Text.Internal.Text>_N
                                <Data.Functor.Identity.Identity>_R
                                <Data.Text.Internal.Text>_N ; Data.Functor.Identity.N:Identity[0]
                                                                  <Data.Either.Either
                                                                     (Data.Aeson.BetterErrors.Internal.ParseError
                                                                        Data.Text.Internal.Text)
                                                                     Data.Text.Internal.Text>_R) of wild1 {
                        Data.Either.Left e1
                        -> (Data.Either.Left
                              @ (Data.Aeson.BetterErrors.Internal.ParseError
                                   Data.Text.Internal.Text)
                              @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                              e1)
                             `cast`
                           (Sym (Data.Functor.Identity.N:Identity[0]
                                     <Data.Either.Either
                                        (Data.Aeson.BetterErrors.Internal.ParseError
                                           Data.Text.Internal.Text)
                                        Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                       <Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                                          Data.Text.Internal.Text>_N
                                                                                                                       <Data.Functor.Identity.Identity>_R
                                                                                                                       <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N))
                        Data.Either.Right x
                        -> case (Data.Aeson.BetterErrors.Internal.$wnth
                                   @ Data.Functor.Identity.Identity
                                   @ Data.Text.Internal.Text
                                   @ Language.PureScript.Docs.RenderedCode.Types.Link
                                   Data.Functor.Identity.$fMonadIdentity
                                   Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement26
                                   Language.PureScript.Docs.RenderedCode.Types.asLink
                                   r1)
                                  `cast`
                                (Control.Monad.Trans.Except.N:ExceptT[0]
                                     <Data.Aeson.BetterErrors.Internal.ParseError
                                        Data.Text.Internal.Text>_N
                                     <Data.Functor.Identity.Identity>_R
                                     <Language.PureScript.Docs.RenderedCode.Types.Link>_N ; Data.Functor.Identity.N:Identity[0]
                                                                                                <Data.Either.Either
                                                                                                   (Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                      Data.Text.Internal.Text)
                                                                                                   Language.PureScript.Docs.RenderedCode.Types.Link>_R) of wild2 {
                             Data.Either.Left e1
                             -> (Data.Either.Left
                                   @ (Data.Aeson.BetterErrors.Internal.ParseError
                                        Data.Text.Internal.Text)
                                   @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                                   e1)
                                  `cast`
                                (Sym (Data.Functor.Identity.N:Identity[0]
                                          <Data.Either.Either
                                             (Data.Aeson.BetterErrors.Internal.ParseError
                                                Data.Text.Internal.Text)
                                             Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                            <Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                                               Data.Text.Internal.Text>_N
                                                                                                                            <Data.Functor.Identity.Identity>_R
                                                                                                                            <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N))
                             Data.Either.Right x1
                             -> (Data.Either.Right
                                   @ (Data.Aeson.BetterErrors.Internal.ParseError
                                        Data.Text.Internal.Text)
                                   @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                                   (Language.PureScript.Docs.RenderedCode.Types.Symbol y x x1))
                                  `cast`
                                (Sym (Data.Functor.Identity.N:Identity[0]
                                          <Data.Either.Either
                                             (Data.Aeson.BetterErrors.Internal.ParseError
                                                Data.Text.Internal.Text)
                                             Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                            <Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                                               Data.Text.Internal.Text>_N
                                                                                                                            <Data.Functor.Identity.Identity>_R
                                                                                                                            <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N)) } } }) -}
e27418a7125f9172f70398d9855398d9
  asRenderedCodeElement26 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 3#) -}
aa665c49738605b874519ebf86dfb94e
  asRenderedCodeElement27 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Docs.RenderedCode.Types.$fToJSONRenderedCode2) -}
23dbfe811136d200baa7f8d696b96877
  asRenderedCodeElement28 ::
    Data.Aeson.BetterErrors.Internal.ParseReader
    -> Data.Functor.Identity.Identity
         (Data.Either.Either
            (Data.Aeson.BetterErrors.Internal.ParseError
               Data.Text.Internal.Text)
            Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)
  {- Arity: 1,
     Unfolding: (Language.PureScript.Docs.RenderedCode.Types.asContainingModule12
                   @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                   Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement31
                   Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement29
                     `cast`
                   ((<Data.Aeson.BetterErrors.Internal.ParseReader>_R
                     ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                   <Data.Either.Either
                                      (Data.Aeson.BetterErrors.Internal.ParseError
                                         Data.Text.Internal.Text)
                                      Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                     <Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                                        Data.Text.Internal.Text>_N
                                                                                                                     <Data.Functor.Identity.Identity>_R
                                                                                                                     <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                                                                                                       <*>_N
                                                                                                                                                                                                       <Data.Aeson.BetterErrors.Internal.ParseReader>_R
                                                                                                                                                                                                       <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                          (Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                                                                                                                             Data.Text.Internal.Text)
                                                                                                                                                                                                          Data.Functor.Identity.Identity>_R
                                                                                                                                                                                                       <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N) ; Sym (Data.Aeson.BetterErrors.Internal.N:ParseT[0]
                                                                                                                                                                                                                                                                                       <Data.Text.Internal.Text>_N
                                                                                                                                                                                                                                                                                       <Data.Functor.Identity.Identity>_R) <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N))) -}
096c93e83fc75c3051f3059a99b9fa24
  asRenderedCodeElement29 ::
    Data.Aeson.BetterErrors.Internal.ParseReader
    -> Data.Either.Either
         (Data.Aeson.BetterErrors.Internal.ParseError
            Data.Text.Internal.Text)
         Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>m2,
     Unfolding: (\ (ds :: Data.Aeson.BetterErrors.Internal.ParseReader) ->
                 Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement30) -}
ed216c8fa3045433c1a21da54f968159
  asRenderedCodeElement3 ::
    [Data.Aeson.BetterErrors.Internal.ParseT
       Data.Text.Internal.Text
       Data.Functor.Identity.Identity
       Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Aeson.BetterErrors.Internal.ParseT
                        Data.Text.Internal.Text
                        Data.Functor.Identity.Identity
                        Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)
                   Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement28
                     `cast`
                   ((<Data.Aeson.BetterErrors.Internal.ParseReader>_R
                     ->_R Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                   <Data.Aeson.BetterErrors.Internal.ParseError
                                      Data.Text.Internal.Text>_N
                                   <Data.Functor.Identity.Identity>_R
                                   <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                     <*>_N
                                                                                                                     <Data.Aeson.BetterErrors.Internal.ParseReader>_R
                                                                                                                     <Control.Monad.Trans.Except.ExceptT
                                                                                                                        (Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                                           Data.Text.Internal.Text)
                                                                                                                        Data.Functor.Identity.Identity>_R
                                                                                                                     <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N) ; Sym (Data.Aeson.BetterErrors.Internal.N:ParseT[0]
                                                                                                                                                                                                     <Data.Text.Internal.Text>_N
                                                                                                                                                                                                     <Data.Functor.Identity.Identity>_R) <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N))
                   Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement4) -}
4d19cdb8c119fa989392473b06697056
  asRenderedCodeElement30 ::
    Data.Either.Either
      (Data.Aeson.BetterErrors.Internal.ParseError
         Data.Text.Internal.Text)
      Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Data.Either.Right
                   @ (Data.Aeson.BetterErrors.Internal.ParseError
                        Data.Text.Internal.Text)
                   @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                   Language.PureScript.Docs.RenderedCode.Types.Space) -}
637cefec1c2de93e6934ec344e00dcca
  asRenderedCodeElement31 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Docs.RenderedCode.Types.$fToJSONRenderedCode6) -}
5efbd64a7272f06591cb5358c1e8ed3e
  asRenderedCodeElement32 ::
    Data.Aeson.BetterErrors.Internal.ParseReader
    -> Data.Functor.Identity.Identity
         (Data.Either.Either
            (Data.Aeson.BetterErrors.Internal.ParseError
               Data.Text.Internal.Text)
            Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)
  {- Arity: 1, Strictness: <L,U(U,U)>,
     Unfolding: (\ (eta :: Data.Aeson.BetterErrors.Internal.ParseReader) ->
                 Language.PureScript.Docs.RenderedCode.Types.asContainingModule12
                   @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                   Language.PureScript.Docs.RenderedCode.Types.$fToJSONRenderedCode8
                   Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement33
                     `cast`
                   ((<Data.Aeson.BetterErrors.Internal.ParseReader>_R
                     ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                   <Data.Either.Either
                                      (Data.Aeson.BetterErrors.Internal.ParseError
                                         Data.Text.Internal.Text)
                                      Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                     <Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                                        Data.Text.Internal.Text>_N
                                                                                                                     <Data.Functor.Identity.Identity>_R
                                                                                                                     <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                                                                                                       <*>_N
                                                                                                                                                                                                       <Data.Aeson.BetterErrors.Internal.ParseReader>_R
                                                                                                                                                                                                       <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                          (Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                                                                                                                             Data.Text.Internal.Text)
                                                                                                                                                                                                          Data.Functor.Identity.Identity>_R
                                                                                                                                                                                                       <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N) ; Sym (Data.Aeson.BetterErrors.Internal.N:ParseT[0]
                                                                                                                                                                                                                                                                                       <Data.Text.Internal.Text>_N
                                                                                                                                                                                                                                                                                       <Data.Functor.Identity.Identity>_R) <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N))
                   eta) -}
8af027eb0bf787a02457c41924d3a342
  asRenderedCodeElement33 ::
    Data.Aeson.BetterErrors.Internal.ParseReader
    -> Data.Either.Either
         (Data.Aeson.BetterErrors.Internal.ParseError
            Data.Text.Internal.Text)
         Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
  {- Arity: 1, Strictness: <L,U(U,U)>,
     Unfolding: (\ (x :: Data.Aeson.BetterErrors.Internal.ParseReader)[OneShot] ->
                 case (Data.Aeson.BetterErrors.Internal.$wnth
                         @ Data.Functor.Identity.Identity
                         @ Data.Text.Internal.Text
                         @ Data.Text.Internal.Text
                         Data.Functor.Identity.$fMonadIdentity
                         Language.PureScript.Docs.RenderedCode.Types.asContainingModule9
                         Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement11
                           `cast`
                         (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                   <*>_N
                                   <Data.Aeson.BetterErrors.Internal.ParseReader>_R
                                   <Control.Monad.Trans.Except.ExceptT
                                      (Data.Aeson.BetterErrors.Internal.ParseError
                                         Data.Text.Internal.Text)
                                      Data.Functor.Identity.Identity>_R
                                   <Data.Text.Internal.Text>_N) ; Sym (Data.Aeson.BetterErrors.Internal.N:ParseT[0]
                                                                           <Data.Text.Internal.Text>_N
                                                                           <Data.Functor.Identity.Identity>_R) <Data.Text.Internal.Text>_N)
                         x)
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <Data.Aeson.BetterErrors.Internal.ParseError
                              Data.Text.Internal.Text>_N
                           <Data.Functor.Identity.Identity>_R
                           <Data.Text.Internal.Text>_N ; Data.Functor.Identity.N:Identity[0]
                                                             <Data.Either.Either
                                                                (Data.Aeson.BetterErrors.Internal.ParseError
                                                                   Data.Text.Internal.Text)
                                                                Data.Text.Internal.Text>_R) of wild {
                   Data.Either.Left x1
                   -> Data.Either.Left
                        @ (Data.Aeson.BetterErrors.Internal.ParseError
                             Data.Text.Internal.Text)
                        @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                        x1
                   Data.Either.Right y
                   -> Data.Either.Right
                        @ (Data.Aeson.BetterErrors.Internal.ParseError
                             Data.Text.Internal.Text)
                        @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                        (Language.PureScript.Docs.RenderedCode.Types.Keyword y) }) -}
c42f35f9eaeb13c175d72d677d81e446
  asRenderedCodeElement34 ::
    Data.Aeson.BetterErrors.Internal.ParseReader
    -> Data.Functor.Identity.Identity
         (Data.Either.Either
            (Data.Aeson.BetterErrors.Internal.ParseError
               Data.Text.Internal.Text)
            Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)
  {- Arity: 1, Strictness: <L,U(U,U)>,
     Unfolding: (\ (eta :: Data.Aeson.BetterErrors.Internal.ParseReader) ->
                 Language.PureScript.Docs.RenderedCode.Types.asContainingModule12
                   @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                   Language.PureScript.Docs.RenderedCode.Types.$fToJSONRenderedCode11
                   Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement35
                     `cast`
                   ((<Data.Aeson.BetterErrors.Internal.ParseReader>_R
                     ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                   <Data.Either.Either
                                      (Data.Aeson.BetterErrors.Internal.ParseError
                                         Data.Text.Internal.Text)
                                      Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                     <Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                                        Data.Text.Internal.Text>_N
                                                                                                                     <Data.Functor.Identity.Identity>_R
                                                                                                                     <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                                                                                                       <*>_N
                                                                                                                                                                                                       <Data.Aeson.BetterErrors.Internal.ParseReader>_R
                                                                                                                                                                                                       <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                          (Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                                                                                                                             Data.Text.Internal.Text)
                                                                                                                                                                                                          Data.Functor.Identity.Identity>_R
                                                                                                                                                                                                       <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N) ; Sym (Data.Aeson.BetterErrors.Internal.N:ParseT[0]
                                                                                                                                                                                                                                                                                       <Data.Text.Internal.Text>_N
                                                                                                                                                                                                                                                                                       <Data.Functor.Identity.Identity>_R) <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N))
                   eta) -}
8b6f7f9ce5db9708f1b4e3b275b1aae6
  asRenderedCodeElement35 ::
    Data.Aeson.BetterErrors.Internal.ParseReader
    -> Data.Either.Either
         (Data.Aeson.BetterErrors.Internal.ParseError
            Data.Text.Internal.Text)
         Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
  {- Arity: 1, Strictness: <L,U(U,U)>,
     Unfolding: (\ (x :: Data.Aeson.BetterErrors.Internal.ParseReader)[OneShot] ->
                 case (Data.Aeson.BetterErrors.Internal.$wnth
                         @ Data.Functor.Identity.Identity
                         @ Data.Text.Internal.Text
                         @ Data.Text.Internal.Text
                         Data.Functor.Identity.$fMonadIdentity
                         Language.PureScript.Docs.RenderedCode.Types.asContainingModule9
                         Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement11
                           `cast`
                         (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                   <*>_N
                                   <Data.Aeson.BetterErrors.Internal.ParseReader>_R
                                   <Control.Monad.Trans.Except.ExceptT
                                      (Data.Aeson.BetterErrors.Internal.ParseError
                                         Data.Text.Internal.Text)
                                      Data.Functor.Identity.Identity>_R
                                   <Data.Text.Internal.Text>_N) ; Sym (Data.Aeson.BetterErrors.Internal.N:ParseT[0]
                                                                           <Data.Text.Internal.Text>_N
                                                                           <Data.Functor.Identity.Identity>_R) <Data.Text.Internal.Text>_N)
                         x)
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <Data.Aeson.BetterErrors.Internal.ParseError
                              Data.Text.Internal.Text>_N
                           <Data.Functor.Identity.Identity>_R
                           <Data.Text.Internal.Text>_N ; Data.Functor.Identity.N:Identity[0]
                                                             <Data.Either.Either
                                                                (Data.Aeson.BetterErrors.Internal.ParseError
                                                                   Data.Text.Internal.Text)
                                                                Data.Text.Internal.Text>_R) of wild {
                   Data.Either.Left x1
                   -> Data.Either.Left
                        @ (Data.Aeson.BetterErrors.Internal.ParseError
                             Data.Text.Internal.Text)
                        @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                        x1
                   Data.Either.Right y
                   -> Data.Either.Right
                        @ (Data.Aeson.BetterErrors.Internal.ParseError
                             Data.Text.Internal.Text)
                        @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                        (Language.PureScript.Docs.RenderedCode.Types.Syntax y) }) -}
71a9b85ea9a9695f3fc00b626d7c761f
  asRenderedCodeElement36 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Docs.RenderedCode.Types.$tcRenderedCodeElement2) -}
3121b35e18976f22d8a6061f97f1562a
  asRenderedCodeElement4 ::
    [Data.Aeson.BetterErrors.Internal.ParseT
       Data.Text.Internal.Text
       Data.Functor.Identity.Identity
       Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Aeson.BetterErrors.Internal.ParseT
                        Data.Text.Internal.Text
                        Data.Functor.Identity.Identity
                        Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)
                   Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement24
                     `cast`
                   ((<Data.Aeson.BetterErrors.Internal.ParseReader>_R
                     ->_R Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                   <Data.Aeson.BetterErrors.Internal.ParseError
                                      Data.Text.Internal.Text>_N
                                   <Data.Functor.Identity.Identity>_R
                                   <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                     <*>_N
                                                                                                                     <Data.Aeson.BetterErrors.Internal.ParseReader>_R
                                                                                                                     <Control.Monad.Trans.Except.ExceptT
                                                                                                                        (Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                                           Data.Text.Internal.Text)
                                                                                                                        Data.Functor.Identity.Identity>_R
                                                                                                                     <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N) ; Sym (Data.Aeson.BetterErrors.Internal.N:ParseT[0]
                                                                                                                                                                                                     <Data.Text.Internal.Text>_N
                                                                                                                                                                                                     <Data.Functor.Identity.Identity>_R) <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N))
                   Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement5) -}
0b9cea2a05f64bca6be3a50c98b90abb
  asRenderedCodeElement5 ::
    [Data.Aeson.BetterErrors.Internal.ParseT
       Data.Text.Internal.Text
       Data.Functor.Identity.Identity
       Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Aeson.BetterErrors.Internal.ParseT
                        Data.Text.Internal.Text
                        Data.Functor.Identity.Identity
                        Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)
                   Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement20
                     `cast`
                   ((<Data.Aeson.BetterErrors.Internal.ParseReader>_R
                     ->_R Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                   <Data.Aeson.BetterErrors.Internal.ParseError
                                      Data.Text.Internal.Text>_N
                                   <Data.Functor.Identity.Identity>_R
                                   <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                     <*>_N
                                                                                                                     <Data.Aeson.BetterErrors.Internal.ParseReader>_R
                                                                                                                     <Control.Monad.Trans.Except.ExceptT
                                                                                                                        (Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                                           Data.Text.Internal.Text)
                                                                                                                        Data.Functor.Identity.Identity>_R
                                                                                                                     <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N) ; Sym (Data.Aeson.BetterErrors.Internal.N:ParseT[0]
                                                                                                                                                                                                     <Data.Text.Internal.Text>_N
                                                                                                                                                                                                     <Data.Functor.Identity.Identity>_R) <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N))
                   Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement6) -}
3b5e8dfaa252b86fe7c632696fafb0bd
  asRenderedCodeElement6 ::
    [Data.Aeson.BetterErrors.Internal.ParseT
       Data.Text.Internal.Text
       Data.Functor.Identity.Identity
       Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Aeson.BetterErrors.Internal.ParseT
                        Data.Text.Internal.Text
                        Data.Functor.Identity.Identity
                        Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)
                   Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement14
                     `cast`
                   ((<Data.Aeson.BetterErrors.Internal.ParseReader>_R
                     ->_R Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                   <Data.Aeson.BetterErrors.Internal.ParseError
                                      Data.Text.Internal.Text>_N
                                   <Data.Functor.Identity.Identity>_R
                                   <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                     <*>_N
                                                                                                                     <Data.Aeson.BetterErrors.Internal.ParseReader>_R
                                                                                                                     <Control.Monad.Trans.Except.ExceptT
                                                                                                                        (Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                                           Data.Text.Internal.Text)
                                                                                                                        Data.Functor.Identity.Identity>_R
                                                                                                                     <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N) ; Sym (Data.Aeson.BetterErrors.Internal.N:ParseT[0]
                                                                                                                                                                                                     <Data.Text.Internal.Text>_N
                                                                                                                                                                                                     <Data.Functor.Identity.Identity>_R) <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N))
                   Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement7) -}
08d8196ae376cadad6d74b752f36bf54
  asRenderedCodeElement7 ::
    [Data.Aeson.BetterErrors.Internal.ParseT
       Data.Text.Internal.Text
       Data.Functor.Identity.Identity
       Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Aeson.BetterErrors.Internal.ParseT
                        Data.Text.Internal.Text
                        Data.Functor.Identity.Identity
                        Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)
                   Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement8
                     `cast`
                   ((<Data.Aeson.BetterErrors.Internal.ParseReader>_R
                     ->_R Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                   <Data.Aeson.BetterErrors.Internal.ParseError
                                      Data.Text.Internal.Text>_N
                                   <Data.Functor.Identity.Identity>_R
                                   <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                     <*>_N
                                                                                                                     <Data.Aeson.BetterErrors.Internal.ParseReader>_R
                                                                                                                     <Control.Monad.Trans.Except.ExceptT
                                                                                                                        (Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                                           Data.Text.Internal.Text)
                                                                                                                        Data.Functor.Identity.Identity>_R
                                                                                                                     <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N) ; Sym (Data.Aeson.BetterErrors.Internal.N:ParseT[0]
                                                                                                                                                                                                     <Data.Text.Internal.Text>_N
                                                                                                                                                                                                     <Data.Functor.Identity.Identity>_R) <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N))
                   (GHC.Types.[]
                      @ (Data.Aeson.BetterErrors.Internal.ParseT
                           Data.Text.Internal.Text
                           Data.Functor.Identity.Identity
                           Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement))) -}
177e3ce1582268cf926325c3afd1ab14
  asRenderedCodeElement8 ::
    Data.Aeson.BetterErrors.Internal.ParseReader
    -> Data.Functor.Identity.Identity
         (Data.Either.Either
            (Data.Aeson.BetterErrors.Internal.ParseError
               Data.Text.Internal.Text)
            Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)
  {- Arity: 1,
     Unfolding: (Language.PureScript.Docs.RenderedCode.Types.asContainingModule12
                   @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                   Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement12
                   Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement9
                     `cast`
                   (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                             <*>_N
                             <Data.Aeson.BetterErrors.Internal.ParseReader>_R
                             <Control.Monad.Trans.Except.ExceptT
                                (Data.Aeson.BetterErrors.Internal.ParseError
                                   Data.Text.Internal.Text)
                                Data.Functor.Identity.Identity>_R
                             <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N) ; Sym (Data.Aeson.BetterErrors.Internal.N:ParseT[0]
                                                                                                             <Data.Text.Internal.Text>_N
                                                                                                             <Data.Functor.Identity.Identity>_R) <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N)) -}
dc799635d99ed2a069e6b357f709be64
  asRenderedCodeElement9 ::
    Data.Aeson.BetterErrors.Internal.ParseReader
    -> Control.Monad.Trans.Except.ExceptT
         (Data.Aeson.BetterErrors.Internal.ParseError
            Data.Text.Internal.Text)
         Data.Functor.Identity.Identity
         Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
  {- Arity: 1, Strictness: <L,U(U,U)>,
     Unfolding: (\ (r1 :: Data.Aeson.BetterErrors.Internal.ParseReader) ->
                 case (Data.Aeson.BetterErrors.Internal.$wnth
                         @ Data.Functor.Identity.Identity
                         @ Data.Text.Internal.Text
                         @ Data.Text.Internal.Text
                         Data.Functor.Identity.$fMonadIdentity
                         Language.PureScript.Docs.RenderedCode.Types.asContainingModule9
                         Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement11
                           `cast`
                         (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                   <*>_N
                                   <Data.Aeson.BetterErrors.Internal.ParseReader>_R
                                   <Control.Monad.Trans.Except.ExceptT
                                      (Data.Aeson.BetterErrors.Internal.ParseError
                                         Data.Text.Internal.Text)
                                      Data.Functor.Identity.Identity>_R
                                   <Data.Text.Internal.Text>_N) ; Sym (Data.Aeson.BetterErrors.Internal.N:ParseT[0]
                                                                           <Data.Text.Internal.Text>_N
                                                                           <Data.Functor.Identity.Identity>_R) <Data.Text.Internal.Text>_N)
                         r1)
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <Data.Aeson.BetterErrors.Internal.ParseError
                              Data.Text.Internal.Text>_N
                           <Data.Functor.Identity.Identity>_R
                           <Data.Text.Internal.Text>_N ; Data.Functor.Identity.N:Identity[0]
                                                             <Data.Either.Either
                                                                (Data.Aeson.BetterErrors.Internal.ParseError
                                                                   Data.Text.Internal.Text)
                                                                Data.Text.Internal.Text>_R) of wild {
                   Data.Either.Left x
                   -> (Data.Either.Left
                         @ (Data.Aeson.BetterErrors.Internal.ParseError
                              Data.Text.Internal.Text)
                         @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                         x)
                        `cast`
                      (Sym (Data.Functor.Identity.N:Identity[0]
                                <Data.Either.Either
                                   (Data.Aeson.BetterErrors.Internal.ParseError
                                      Data.Text.Internal.Text)
                                   Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                  <Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                                     Data.Text.Internal.Text>_N
                                                                                                                  <Data.Functor.Identity.Identity>_R
                                                                                                                  <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N))
                   Data.Either.Right y
                   -> (Data.Either.Right
                         @ (Data.Aeson.BetterErrors.Internal.ParseError
                              Data.Text.Internal.Text)
                         @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                         (Language.PureScript.Docs.RenderedCode.Types.Symbol
                            Language.PureScript.Docs.RenderedCode.Types.KindLevel
                            y
                            Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement10))
                        `cast`
                      (Sym (Data.Functor.Identity.N:Identity[0]
                                <Data.Either.Either
                                   (Data.Aeson.BetterErrors.Internal.ParseError
                                      Data.Text.Internal.Text)
                                   Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                  <Data.Aeson.BetterErrors.Internal.ParseError
                                                                                                                     Data.Text.Internal.Text>_N
                                                                                                                  <Data.Functor.Identity.Identity>_R
                                                                                                                  <Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement>_N)) }) -}
35c099eacf64e099ef1defcf539b3138
  containingModuleToMaybe ::
    Language.PureScript.Docs.RenderedCode.Types.ContainingModule
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Docs.RenderedCode.Types.ContainingModule) ->
                 case ds of wild {
                   Language.PureScript.Docs.RenderedCode.Types.ThisModule
                   -> GHC.Base.Nothing @ Language.PureScript.Names.ModuleName
                   Language.PureScript.Docs.RenderedCode.Types.OtherModule mn
                   -> GHC.Base.Just @ Language.PureScript.Names.ModuleName mn }) -}
0753c0f6add800bbdc0c0830b9fbbd4a
  dataCtor ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ConstructorName)
    -> Language.PureScript.Docs.RenderedCode.Types.RenderedCode
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(1*U,U)>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Names.Qualified
                            (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.ConstructorName)) ->
                 case ds of wild { Language.PureScript.Names.Qualified mn x ->
                 (GHC.Types.:
                    @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                    (Language.PureScript.Docs.RenderedCode.Types.Symbol
                       Language.PureScript.Docs.RenderedCode.Types.ValueLevel
                       x `cast`
                       (Language.PureScript.Names.N:ProperName[0]
                            <'Language.PureScript.Names.ConstructorName>_P)
                       (Language.PureScript.Docs.RenderedCode.Types.Link
                          (Language.PureScript.Docs.RenderedCode.Types.maybeToContainingModule
                             mn)))
                    (GHC.Types.[]
                       @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement))
                   `cast`
                 (Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])) }) -}
bb30cc5c6f89c2cc4640322319d0b479
  fromContainingModule ::
    Language.PureScript.Names.ModuleName
    -> Language.PureScript.Docs.RenderedCode.Types.ContainingModule
    -> Language.PureScript.Names.ModuleName
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (def :: Language.PureScript.Names.ModuleName)
                   (ds :: Language.PureScript.Docs.RenderedCode.Types.ContainingModule) ->
                 case ds of wild {
                   Language.PureScript.Docs.RenderedCode.Types.ThisModule -> def
                   Language.PureScript.Docs.RenderedCode.Types.OtherModule mn
                   -> mn }) -}
b74733da6f2480dec74eec94d9fc0d4b
  fromQualified ::
    Language.PureScript.Names.Qualified a
    -> (Language.PureScript.Docs.RenderedCode.Types.ContainingModule,
        a)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(1*U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: Language.PureScript.Names.Qualified a) ->
                 case ds of wild { Language.PureScript.Names.Qualified mn x ->
                 (Language.PureScript.Docs.RenderedCode.Types.maybeToContainingModule
                    mn,
                  x) }) -}
b4ceceb1bb021e5dd0568321d8e35fa2
  ident ::
    Language.PureScript.Names.Qualified Language.PureScript.Names.Ident
    -> Language.PureScript.Docs.RenderedCode.Types.RenderedCode
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U)>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Names.Qualified
                            Language.PureScript.Names.Ident) ->
                 case ds of wild { Language.PureScript.Names.Qualified mn x ->
                 (GHC.Types.:
                    @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                    (Language.PureScript.Docs.RenderedCode.Types.Symbol
                       Language.PureScript.Docs.RenderedCode.Types.ValueLevel
                       (Language.PureScript.Names.runIdent x)
                       (Language.PureScript.Docs.RenderedCode.Types.Link
                          (Language.PureScript.Docs.RenderedCode.Types.maybeToContainingModule
                             mn)))
                    (GHC.Types.[]
                       @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement))
                   `cast`
                 (Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])) }) -}
d7fff1d5203ffe3dddf7bebc09698eb7
  keyword ::
    Data.Text.Internal.Text
    -> Language.PureScript.Docs.RenderedCode.Types.RenderedCode
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m2,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Docs.RenderedCode.Types.keyword1
                  `cast`
                (<Data.Text.Internal.Text>_R
                 ->_R Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])) -}
2373879769f5ffc13d8042d8d277c6af
  keyword1 ::
    Data.Text.Internal.Text
    -> [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (kw :: Data.Text.Internal.Text) ->
                 GHC.Types.:
                   @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                   (Language.PureScript.Docs.RenderedCode.Types.Keyword kw)
                   (GHC.Types.[]
                      @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)) -}
a408a8f3f99d273c94351be1fbacd876
  keywordAs ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCode
  {- Strictness: m2,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Docs.RenderedCode.Types.keywordAs1
                  `cast`
                (Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])) -}
467d6fb3683d614835b7244bd50ffabc
  keywordAs1 ::
    [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                   Language.PureScript.Docs.RenderedCode.Types.keywordAs2
                   (GHC.Types.[]
                      @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)) -}
71bd70d966c6eff4efc67b9b7fb8b295
  keywordAs2 ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
  {- Strictness: m2,
     Unfolding: (Language.PureScript.Docs.RenderedCode.Types.Keyword
                   Language.PureScript.Docs.RenderedCode.Types.keywordAs3) -}
ab33e41c401a18651f1655e9621439c1
  keywordAs3 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Docs.RenderedCode.Types.keywordAs4) -}
bbd76a14d669aebf9454b5f15682088a
  keywordAs4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("as"#) -}
b4846c3ecab46e2deb0f87e39d1356de
  keywordClass ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCode
  {- Strictness: m2,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Docs.RenderedCode.Types.keywordClass1
                  `cast`
                (Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])) -}
05ac8a327ca2a039745f155fc8f961ad
  keywordClass1 ::
    [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                   Language.PureScript.Docs.RenderedCode.Types.keywordClass2
                   (GHC.Types.[]
                      @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)) -}
a953f18e9570f1797bd749797d9791fe
  keywordClass2 ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
  {- Strictness: m2,
     Unfolding: (Language.PureScript.Docs.RenderedCode.Types.Keyword
                   Language.PureScript.Docs.RenderedCode.Types.keywordClass3) -}
31ba3a735b84c2c04cce92a3d5f56082
  keywordClass3 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Docs.RenderedCode.Types.keywordClass4) -}
68492f401f201e1fb747531ab3229332
  keywordClass4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("class"#) -}
fcf6ac5b0d8124b4183309f8d7e09972
  keywordData ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCode
  {- Strictness: m2,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Docs.RenderedCode.Types.keywordData1
                  `cast`
                (Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])) -}
dc22858a84cce6b93dc326f0b2385c16
  keywordData1 ::
    [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                   Language.PureScript.Docs.RenderedCode.Types.keywordData2
                   (GHC.Types.[]
                      @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)) -}
272a546dce18b8af2acdf8c1629ae72c
  keywordData2 ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
  {- Strictness: m2,
     Unfolding: (Language.PureScript.Docs.RenderedCode.Types.Keyword
                   Language.PureScript.Docs.RenderedCode.Types.keywordData3) -}
f686f4aae797426eb6d735afb3dc2544
  keywordData3 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Docs.RenderedCode.Types.keywordData4) -}
619c741126a99a9acc35ac53cc5eb679
  keywordData4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("data"#) -}
beb4371395245f91b547e78917a46320
  keywordFixity ::
    Language.PureScript.AST.Operators.Associativity
    -> Language.PureScript.Docs.RenderedCode.Types.RenderedCode
  {- Arity: 1, Strictness: <S,1*U>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.AST.Operators.Associativity) ->
                 case ds of wild {
                   Language.PureScript.AST.Operators.Infixl
                   -> Language.PureScript.Docs.RenderedCode.Types.keywordFixity9
                        `cast`
                      (Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0]))
                   Language.PureScript.AST.Operators.Infixr
                   -> Language.PureScript.Docs.RenderedCode.Types.keywordFixity5
                        `cast`
                      (Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0]))
                   Language.PureScript.AST.Operators.Infix
                   -> Language.PureScript.Docs.RenderedCode.Types.keywordFixity1
                        `cast`
                      (Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])) }) -}
3c82674b0e1cd2ab518ff829bbd1290f
  keywordFixity1 ::
    [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                   Language.PureScript.Docs.RenderedCode.Types.keywordFixity2
                   (GHC.Types.[]
                      @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)) -}
3f61aa211179447c955a50e4774ef663
  keywordFixity10 ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
  {- Strictness: m2,
     Unfolding: (Language.PureScript.Docs.RenderedCode.Types.Keyword
                   Language.PureScript.Docs.RenderedCode.Types.keywordFixity11) -}
0f0fc6911c6fb36c359f26aa63bc8b57
  keywordFixity11 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Docs.RenderedCode.Types.keywordFixity12) -}
06e50452a725d2512961f5f0c2571848
  keywordFixity12 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("infixl"#) -}
f96d9927969cafbcf476b3e300536036
  keywordFixity2 ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
  {- Strictness: m2,
     Unfolding: (Language.PureScript.Docs.RenderedCode.Types.Keyword
                   Language.PureScript.Docs.RenderedCode.Types.keywordFixity3) -}
713f0e900aeb7837ff1e70dd8fe1b310
  keywordFixity3 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Docs.RenderedCode.Types.keywordFixity4) -}
9f4697136395a8449fa047a2a60c86b7
  keywordFixity4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("infix"#) -}
04bd5231f8fcab242f7dac001adecde2
  keywordFixity5 ::
    [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                   Language.PureScript.Docs.RenderedCode.Types.keywordFixity6
                   (GHC.Types.[]
                      @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)) -}
28f8eeac95219d376fc5557cb6d1863d
  keywordFixity6 ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
  {- Strictness: m2,
     Unfolding: (Language.PureScript.Docs.RenderedCode.Types.Keyword
                   Language.PureScript.Docs.RenderedCode.Types.keywordFixity7) -}
9f7a80aeedf140d4ffbdfb72336f99a2
  keywordFixity7 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Docs.RenderedCode.Types.keywordFixity8) -}
8733059b01ce7901f598f0d2740ab366
  keywordFixity8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("infixr"#) -}
931cdaae8a247987065fc956b5c3a18f
  keywordFixity9 ::
    [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                   Language.PureScript.Docs.RenderedCode.Types.keywordFixity10
                   (GHC.Types.[]
                      @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)) -}
018134480888568412524573f0b20b87
  keywordForall ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCode
  {- Strictness: m2,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Docs.RenderedCode.Types.keywordForall1
                  `cast`
                (Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])) -}
37992070f9363959538291e080cc74c3
  keywordForall1 ::
    [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                   Language.PureScript.Docs.RenderedCode.Types.keywordForall2
                   (GHC.Types.[]
                      @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)) -}
ccbf1a782ccdb091a19e05fdf8fe4cb7
  keywordForall2 ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
  {- Strictness: m2,
     Unfolding: (Language.PureScript.Docs.RenderedCode.Types.Keyword
                   Language.PureScript.Docs.RenderedCode.Types.keywordForall3) -}
1ce8f893dc20319cd170fceeebde2dd4
  keywordForall3 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Docs.RenderedCode.Types.keywordForall4) -}
5b6bfd8b184c6fd7c48ed6897af23c54
  keywordForall4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("forall"#) -}
6bec7252c6f097b637c6ec20d86bf408
  keywordInstance ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCode
  {- Strictness: m2,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Docs.RenderedCode.Types.keywordInstance1
                  `cast`
                (Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])) -}
9ccd781fe2b7ba2ec0a79b6400227163
  keywordInstance1 ::
    [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                   Language.PureScript.Docs.RenderedCode.Types.keywordInstance2
                   (GHC.Types.[]
                      @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)) -}
1b1672522f10836162d872fe70038234
  keywordInstance2 ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
  {- Strictness: m2,
     Unfolding: (Language.PureScript.Docs.RenderedCode.Types.Keyword
                   Language.PureScript.Docs.RenderedCode.Types.keywordInstance3) -}
a04406e6f060a45bbb8768f6e4252522
  keywordInstance3 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Docs.RenderedCode.Types.keywordInstance4) -}
9aadd63e3dfa8de2b789924789b80d06
  keywordInstance4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("instance"#) -}
b33ba98da249373160f8e4fa4564f2c6
  keywordKind ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCode
  {- Strictness: m2,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Docs.RenderedCode.Types.keywordKind1
                  `cast`
                (Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])) -}
b00d6958ad307563cc3c8bac0ea73a1e
  keywordKind1 ::
    [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                   Language.PureScript.Docs.RenderedCode.Types.keywordKind2
                   (GHC.Types.[]
                      @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)) -}
9cce9f47d83999d8818e6015682d7474
  keywordKind2 ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
  {- Strictness: m2,
     Unfolding: (Language.PureScript.Docs.RenderedCode.Types.Keyword
                   Language.PureScript.Docs.RenderedCode.Types.asRenderedCodeElement12) -}
2b2b260a7ca2e2036ddf103b2be6f024
  keywordNewtype ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCode
  {- Strictness: m2,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Docs.RenderedCode.Types.keywordNewtype1
                  `cast`
                (Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])) -}
c07331902fbc06cf5c734a4a9c165aeb
  keywordNewtype1 ::
    [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                   Language.PureScript.Docs.RenderedCode.Types.keywordNewtype2
                   (GHC.Types.[]
                      @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)) -}
461848963469057315073d27006b4fc5
  keywordNewtype2 ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
  {- Strictness: m2,
     Unfolding: (Language.PureScript.Docs.RenderedCode.Types.Keyword
                   Language.PureScript.Docs.RenderedCode.Types.keywordNewtype3) -}
b085fc66d4769014939a47040c38e2ba
  keywordNewtype3 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Docs.RenderedCode.Types.keywordNewtype4) -}
dcdb37fd5b5ea663ed13e9a829f8baf6
  keywordNewtype4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("newtype"#) -}
41d8e6d528ede3db6e35b727f7b45aa4
  keywordType ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCode
  {- Strictness: m2,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Docs.RenderedCode.Types.keywordType1
                  `cast`
                (Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])) -}
2d19a0725ee376191226f7134d03f052
  keywordType1 ::
    [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                   Language.PureScript.Docs.RenderedCode.Types.alias2
                   (GHC.Types.[]
                      @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)) -}
c120934366a01997d07e0879393f2af0
  keywordWhere ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCode
  {- Strictness: m2,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Docs.RenderedCode.Types.keywordWhere1
                  `cast`
                (Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])) -}
c41ea0291e8913cba719d83a895723f8
  keywordWhere1 ::
    [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                   Language.PureScript.Docs.RenderedCode.Types.keywordWhere2
                   (GHC.Types.[]
                      @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)) -}
1df203fec7de5cd61605e365679be6d2
  keywordWhere2 ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
  {- Strictness: m2,
     Unfolding: (Language.PureScript.Docs.RenderedCode.Types.Keyword
                   Language.PureScript.Docs.RenderedCode.Types.keywordWhere3) -}
c95d6439461b66b31c90ddf385401ebc
  keywordWhere3 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Docs.RenderedCode.Types.keywordWhere4) -}
ed0403dbaf11149eeb80692993d22d93
  keywordWhere4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("where"#) -}
55f997f6bd0a4fed4cedd17eba370d04
  kind ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.KindName)
    -> Language.PureScript.Docs.RenderedCode.Types.RenderedCode
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(1*U,U)>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Names.Qualified
                            (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.KindName)) ->
                 case ds of wild { Language.PureScript.Names.Qualified mn x ->
                 (GHC.Types.:
                    @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                    (Language.PureScript.Docs.RenderedCode.Types.Symbol
                       Language.PureScript.Docs.RenderedCode.Types.KindLevel
                       x `cast`
                       (Language.PureScript.Names.N:ProperName[0]
                            <'Language.PureScript.Names.KindName>_P)
                       (Language.PureScript.Docs.RenderedCode.Types.Link
                          (Language.PureScript.Docs.RenderedCode.Types.maybeToContainingModule
                             mn)))
                    (GHC.Types.[]
                       @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement))
                   `cast`
                 (Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])) }) -}
a5faa8d6374c2e49b90070dd17e30bd2
  maybeToContainingModule ::
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Docs.RenderedCode.Types.ContainingModule
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GHC.Base.Maybe Language.PureScript.Names.ModuleName) ->
                 case ds of wild {
                   GHC.Base.Nothing
                   -> Language.PureScript.Docs.RenderedCode.Types.ThisModule
                   GHC.Base.Just mn
                   -> Language.PureScript.Docs.RenderedCode.Types.OtherModule mn }) -}
a498c2ab6fddedd3074c27f5bd0b57f8
  outputWith ::
    GHC.Base.Monoid a =>
    (Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
     -> a)
    -> Language.PureScript.Docs.RenderedCode.Types.RenderedCode -> a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(A,1*U,C(C1(U)),A)><L,C(U)><S,1*U>,
     Unfolding: (\ @ a
                   ($dMonoid :: GHC.Base.Monoid a)
                   (f2 :: Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                          -> a)
                   (eta :: Language.PureScript.Docs.RenderedCode.Types.RenderedCode) ->
                 let {
                   z :: a = GHC.Base.mempty @ a $dMonoid
                 } in
                 letrec {
                   go :: [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
                         -> a
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]) ->
                     case ds of wild {
                       [] -> z : y ys -> GHC.Base.mappend @ a $dMonoid (f2 y) (go ys) }
                 } in
                 go
                   eta
                     `cast`
                   (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])) -}
349b56c782c281bee07f0bc66f7a09f2
  parens ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCode
    -> Language.PureScript.Docs.RenderedCode.Types.RenderedCode
  {- Arity: 1, Strictness: <L,1*U>m2,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Docs.RenderedCode.Types.parens1
                  `cast`
                (<Language.PureScript.Docs.RenderedCode.Types.RenderedCode>_R
                 ->_R Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])) -}
1f517794589176405a03ac76654c8db5
  parens1 ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCode
    -> [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
  {- Arity: 1, Strictness: <L,1*U>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Docs.RenderedCode.Types.RenderedCode) ->
                 GHC.Types.:
                   @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                   Language.PureScript.Docs.RenderedCode.Types.parens5
                   (GHC.Base.augment
                      @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                      (\ @ b
                         (c :: Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                               -> b -> b)[OneShot]
                         (n :: b)[OneShot] ->
                       GHC.Base.foldr
                         @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                         @ b
                         c
                         n
                         x `cast`
                         (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0]))
                      (GHC.Types.:
                         @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                         Language.PureScript.Docs.RenderedCode.Types.parens2
                         (GHC.Types.[]
                            @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)))) -}
ee7dd87e4890122416d9abb4340f6ba7
  parens2 ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
  {- Strictness: m1,
     Unfolding: (Language.PureScript.Docs.RenderedCode.Types.Syntax
                   Language.PureScript.Docs.RenderedCode.Types.parens3) -}
cb7872da58b86ee277376077f2507fcf
  parens3 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Docs.RenderedCode.Types.parens4) -}
12689d83f3dd1fa448ea6327c3169879
  parens4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (")"#) -}
a2835175e773a4613286127661107330
  parens5 ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
  {- Strictness: m1,
     Unfolding: (Language.PureScript.Docs.RenderedCode.Types.Syntax
                   Language.PureScript.Docs.RenderedCode.Types.parens6) -}
0b6a6c0fdbcb4da91c0de45c3860b070
  parens6 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Docs.RenderedCode.Types.parens7) -}
f4a1fda7fd01851676a7a88f4fca2adf
  parens7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("("#) -}
36a8eaafc38970ad0ba81b96ac1c8a6b
  sp :: Language.PureScript.Docs.RenderedCode.Types.RenderedCode
  {- Strictness: m2,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Docs.RenderedCode.Types.alias5
                  `cast`
                (Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])) -}
56404943757616c81318673508c45bb1
  syntax ::
    Data.Text.Internal.Text
    -> Language.PureScript.Docs.RenderedCode.Types.RenderedCode
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m2,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Docs.RenderedCode.Types.syntax1
                  `cast`
                (<Data.Text.Internal.Text>_R
                 ->_R Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])) -}
0c450fe659efcc3695645014e967b48d
  syntax1 ::
    Data.Text.Internal.Text
    -> [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Text.Internal.Text) ->
                 GHC.Types.:
                   @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                   (Language.PureScript.Docs.RenderedCode.Types.Syntax x)
                   (GHC.Types.[]
                      @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)) -}
82f294fa8c907c3e2bb50f5ef715bdb2
  tryParse ::
    Data.Text.Internal.Text
    -> [Data.Aeson.BetterErrors.Internal.Parse
          Data.Text.Internal.Text a]
    -> Data.Aeson.BetterErrors.Internal.Parse Data.Text.Internal.Text a
  {- Arity: 2, Strictness: <L,1*U(U,U,U)><L,U> -}
ef3ec807a21424113cddfe0cdc6538b8
  typeCtor ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName)
    -> Language.PureScript.Docs.RenderedCode.Types.RenderedCode
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(1*U,U)>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Names.Qualified
                            (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.TypeName)) ->
                 case ds of wild { Language.PureScript.Names.Qualified mn x ->
                 (GHC.Types.:
                    @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                    (Language.PureScript.Docs.RenderedCode.Types.Symbol
                       Language.PureScript.Docs.RenderedCode.Types.TypeLevel
                       x `cast`
                       (Language.PureScript.Names.N:ProperName[0]
                            <'Language.PureScript.Names.TypeName>_P)
                       (Language.PureScript.Docs.RenderedCode.Types.Link
                          (Language.PureScript.Docs.RenderedCode.Types.maybeToContainingModule
                             mn)))
                    (GHC.Types.[]
                       @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement))
                   `cast`
                 (Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])) }) -}
8cf44ddb463d30a57fb828a49ca0517f
  typeOp ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.OpName
         'Language.PureScript.Names.TypeOpName)
    -> Language.PureScript.Docs.RenderedCode.Types.RenderedCode
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(1*U,U)>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Names.Qualified
                            (Language.PureScript.Names.OpName
                               'Language.PureScript.Names.TypeOpName)) ->
                 case ds of wild { Language.PureScript.Names.Qualified mn x ->
                 (GHC.Types.:
                    @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                    (Language.PureScript.Docs.RenderedCode.Types.Symbol
                       Language.PureScript.Docs.RenderedCode.Types.TypeLevel
                       x `cast`
                       (Language.PureScript.Names.N:OpName[0]
                            <'Language.PureScript.Names.TypeOpName>_P)
                       (Language.PureScript.Docs.RenderedCode.Types.Link
                          (Language.PureScript.Docs.RenderedCode.Types.maybeToContainingModule
                             mn)))
                    (GHC.Types.[]
                       @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement))
                   `cast`
                 (Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])) }) -}
7c8f1b67989521c64e611feb53a08c00
  typeVar ::
    Data.Text.Internal.Text
    -> Language.PureScript.Docs.RenderedCode.Types.RenderedCode
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m2,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Docs.RenderedCode.Types.typeVar1
                  `cast`
                (<Data.Text.Internal.Text>_R
                 ->_R Sym (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])) -}
7f439c3ea745d17e358d51929c7c9dc9
  typeVar1 ::
    Data.Text.Internal.Text
    -> [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Text.Internal.Text) ->
                 GHC.Types.:
                   @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                   (Language.PureScript.Docs.RenderedCode.Types.Symbol
                      Language.PureScript.Docs.RenderedCode.Types.TypeLevel
                      x
                      Language.PureScript.Docs.RenderedCode.Types.NoLink)
                   (GHC.Types.[]
                      @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)) -}
b76660a0424da31964a78f3df8712e5d
  unRC ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCode
    -> [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
  RecSel Left Language.PureScript.Docs.RenderedCode.Types.RenderedCode
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Docs.RenderedCode.Types.unRC1
                  `cast`
                (<Language.PureScript.Docs.RenderedCode.Types.RenderedCode>_R
                 ->_R Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0]) -}
b76660a0424da31964a78f3df8712e5d
  unRC1 ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCode
    -> Language.PureScript.Docs.RenderedCode.Types.RenderedCode
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: Language.PureScript.Docs.RenderedCode.Types.RenderedCode) ->
                 ds) -}
instance GHC.Classes.Eq [Language.PureScript.Docs.RenderedCode.Types.ContainingModule]
  = Language.PureScript.Docs.RenderedCode.Types.$fEqContainingModule
instance GHC.Classes.Eq [Language.PureScript.Docs.RenderedCode.Types.Link]
  = Language.PureScript.Docs.RenderedCode.Types.$fEqLink
instance GHC.Classes.Eq [Language.PureScript.Docs.RenderedCode.Types.Namespace]
  = Language.PureScript.Docs.RenderedCode.Types.$fEqNamespace
instance GHC.Classes.Eq [Language.PureScript.Docs.RenderedCode.Types.RenderedCode]
  = Language.PureScript.Docs.RenderedCode.Types.$fEqRenderedCode
instance GHC.Classes.Eq [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
  = Language.PureScript.Docs.RenderedCode.Types.$fEqRenderedCodeElement
instance Data.Aeson.Types.FromJSON.FromJSON [Language.PureScript.Docs.RenderedCode.Types.ContainingModule]
  = Language.PureScript.Docs.RenderedCode.Types.$fFromJSONContainingModule
instance Data.Aeson.Types.FromJSON.FromJSON [Language.PureScript.Docs.RenderedCode.Types.Link]
  = Language.PureScript.Docs.RenderedCode.Types.$fFromJSONLink
instance Data.Aeson.Types.FromJSON.FromJSON [Language.PureScript.Docs.RenderedCode.Types.Namespace]
  = Language.PureScript.Docs.RenderedCode.Types.$fFromJSONNamespace
instance GHC.Generics.Generic [Language.PureScript.Docs.RenderedCode.Types.Namespace]
  = Language.PureScript.Docs.RenderedCode.Types.$fGenericNamespace
instance GHC.Base.Monoid [Language.PureScript.Docs.RenderedCode.Types.RenderedCode]
  = Language.PureScript.Docs.RenderedCode.Types.$fMonoidRenderedCode
instance Control.DeepSeq.NFData [Language.PureScript.Docs.RenderedCode.Types.Namespace]
  = Language.PureScript.Docs.RenderedCode.Types.$fNFDataNamespace
instance GHC.Classes.Ord [Language.PureScript.Docs.RenderedCode.Types.ContainingModule]
  = Language.PureScript.Docs.RenderedCode.Types.$fOrdContainingModule
instance GHC.Classes.Ord [Language.PureScript.Docs.RenderedCode.Types.Link]
  = Language.PureScript.Docs.RenderedCode.Types.$fOrdLink
instance GHC.Classes.Ord [Language.PureScript.Docs.RenderedCode.Types.Namespace]
  = Language.PureScript.Docs.RenderedCode.Types.$fOrdNamespace
instance GHC.Classes.Ord [Language.PureScript.Docs.RenderedCode.Types.RenderedCode]
  = Language.PureScript.Docs.RenderedCode.Types.$fOrdRenderedCode
instance GHC.Classes.Ord [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
  = Language.PureScript.Docs.RenderedCode.Types.$fOrdRenderedCodeElement
instance GHC.Base.Semigroup [Language.PureScript.Docs.RenderedCode.Types.RenderedCode]
  = Language.PureScript.Docs.RenderedCode.Types.$fSemigroupRenderedCode
instance GHC.Show.Show [Language.PureScript.Docs.RenderedCode.Types.ContainingModule]
  = Language.PureScript.Docs.RenderedCode.Types.$fShowContainingModule
instance GHC.Show.Show [Language.PureScript.Docs.RenderedCode.Types.Link]
  = Language.PureScript.Docs.RenderedCode.Types.$fShowLink
instance GHC.Show.Show [Language.PureScript.Docs.RenderedCode.Types.Namespace]
  = Language.PureScript.Docs.RenderedCode.Types.$fShowNamespace
instance GHC.Show.Show [Language.PureScript.Docs.RenderedCode.Types.RenderedCode]
  = Language.PureScript.Docs.RenderedCode.Types.$fShowRenderedCode
instance GHC.Show.Show [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
  = Language.PureScript.Docs.RenderedCode.Types.$fShowRenderedCodeElement
instance Data.Aeson.Types.ToJSON.ToJSON [Language.PureScript.Docs.RenderedCode.Types.ContainingModule]
  = Language.PureScript.Docs.RenderedCode.Types.$fToJSONContainingModule
instance Data.Aeson.Types.ToJSON.ToJSON [Language.PureScript.Docs.RenderedCode.Types.Link]
  = Language.PureScript.Docs.RenderedCode.Types.$fToJSONLink
instance Data.Aeson.Types.ToJSON.ToJSON [Language.PureScript.Docs.RenderedCode.Types.Namespace]
  = Language.PureScript.Docs.RenderedCode.Types.$fToJSONNamespace
instance Data.Aeson.Types.ToJSON.ToJSON [Language.PureScript.Docs.RenderedCode.Types.RenderedCode]
  = Language.PureScript.Docs.RenderedCode.Types.$fToJSONRenderedCode
instance Data.Aeson.Types.ToJSON.ToJSON [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
  = Language.PureScript.Docs.RenderedCode.Types.$fToJSONRenderedCodeElement
family instance GHC.Generics.Rep [Language.PureScript.Docs.RenderedCode.Types.Namespace]
  = Language.PureScript.Docs.RenderedCode.Types.Rep_Namespace
"SPEC/Language.PureScript.Docs.RenderedCode.Types $fEq[]_$c/= @ RenderedCodeElement" forall ($dEq :: GHC.Classes.Eq
                                                                                                       Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement)
  GHC.Classes.$fEq[]_$c/= @ Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement
                          $dEq
  = Language.PureScript.Docs.RenderedCode.Types.$fEqRenderedCode_$s$fEq[]_$c/=
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

