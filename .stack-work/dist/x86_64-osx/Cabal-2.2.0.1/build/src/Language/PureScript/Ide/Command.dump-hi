
==================== FINAL INTERFACE ====================
2019-01-24 14:17:57.365155 UTC

interface purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Ide.Command 8043
  interface hash: cc4d8b7345deaae7536aa238bd947196
  ABI hash: a515164b4f34d128fa16c63e93566e2b
  export-list hash: 081c798516a7fa6defeee8eebad2394f
  orphan hash: 253ce957d4d2b8f2549b1fa913029cd3
  flag hash: 5ca2b6297314332f988f1cde11325eb2
  opt_hash: 2c98c95d41c045ae9c2fb565ec8aabc6
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Language.PureScript.Ide.Command.commandName
  Language.PureScript.Ide.Command.Command{Language.PureScript.Ide.Command.AddClause Language.PureScript.Ide.Command.CaseSplit Language.PureScript.Ide.Command.Complete Language.PureScript.Ide.Command.Cwd Language.PureScript.Ide.Command.FindUsages Language.PureScript.Ide.Command.Import Language.PureScript.Ide.Command.List Language.PureScript.Ide.Command.Load Language.PureScript.Ide.Command.LoadSync Language.PureScript.Ide.Command.Quit Language.PureScript.Ide.Command.Rebuild Language.PureScript.Ide.Command.RebuildSync Language.PureScript.Ide.Command.Reset Language.PureScript.Ide.Command.Type addClauseAnnotations addClauseLine caseSplitAnnotations caseSplitBegin caseSplitEnd caseSplitLine caseSplitType completeCurrentModule completeFilters completeMatcher completeOptions listType typeCurrentModule typeFilters typeSearch usagesIdentifier usagesModule usagesNamespace}
  Language.PureScript.Ide.Command.ImportCommand{Language.PureScript.Ide.Command.AddImplicitImport Language.PureScript.Ide.Command.AddImportForIdentifier Language.PureScript.Ide.Command.AddQualifiedImport}
  Language.PureScript.Ide.Command.ListType{Language.PureScript.Ide.Command.AvailableModules Language.PureScript.Ide.Command.Imports Language.PureScript.Ide.Command.LoadedModules}
module dependencies: Control.Monad.Logger Control.Monad.Supply
                     Control.Monad.Supply.Class Language.PureScript
                     Language.PureScript.AST Language.PureScript.AST.Binders
                     Language.PureScript.AST.Declarations
                     Language.PureScript.AST.Exported Language.PureScript.AST.Literals
                     Language.PureScript.AST.Operators Language.PureScript.AST.SourcePos
                     Language.PureScript.AST.Traversals Language.PureScript.Bundle
                     Language.PureScript.CodeGen.JS
                     Language.PureScript.CodeGen.JS.Common
                     Language.PureScript.CodeGen.JS.Printer Language.PureScript.Comments
                     Language.PureScript.Constants Language.PureScript.CoreFn
                     Language.PureScript.CoreFn.Ann Language.PureScript.CoreFn.Binders
                     Language.PureScript.CoreFn.Desugar Language.PureScript.CoreFn.Expr
                     Language.PureScript.CoreFn.Meta Language.PureScript.CoreFn.Module
                     Language.PureScript.CoreFn.Optimizer
                     Language.PureScript.CoreFn.ToJSON
                     Language.PureScript.CoreFn.Traversals
                     Language.PureScript.CoreImp.AST
                     Language.PureScript.CoreImp.Optimizer
                     Language.PureScript.CoreImp.Optimizer.Blocks
                     Language.PureScript.CoreImp.Optimizer.Common
                     Language.PureScript.CoreImp.Optimizer.Inliner
                     Language.PureScript.CoreImp.Optimizer.MagicDo
                     Language.PureScript.CoreImp.Optimizer.TCO
                     Language.PureScript.CoreImp.Optimizer.Unused
                     Language.PureScript.Crash Language.PureScript.Docs.Convert.Single
                     Language.PureScript.Docs.RenderedCode
                     Language.PureScript.Docs.RenderedCode.RenderKind
                     Language.PureScript.Docs.RenderedCode.RenderType
                     Language.PureScript.Docs.RenderedCode.Types
                     Language.PureScript.Docs.Types
                     Language.PureScript.Docs.Utils.MonoidExtras
                     Language.PureScript.Environment Language.PureScript.Errors
                     Language.PureScript.Errors.JSON Language.PureScript.Externs
                     Language.PureScript.Ide.CaseSplit
                     Language.PureScript.Ide.Completion Language.PureScript.Ide.Error
                     Language.PureScript.Ide.Externs Language.PureScript.Ide.Filter
                     Language.PureScript.Ide.Filter.Declaration
                     Language.PureScript.Ide.Logging Language.PureScript.Ide.Matcher
                     Language.PureScript.Ide.Reexports
                     Language.PureScript.Ide.SourceFile Language.PureScript.Ide.State
                     Language.PureScript.Ide.Types Language.PureScript.Ide.Util
                     Language.PureScript.Kinds Language.PureScript.Label
                     Language.PureScript.Linter Language.PureScript.Linter.Exhaustive
                     Language.PureScript.Linter.Imports Language.PureScript.Make
                     Language.PureScript.Make.Actions Language.PureScript.Make.BuildPlan
                     Language.PureScript.Make.Monad
                     Language.PureScript.ModuleDependencies Language.PureScript.Names
                     Language.PureScript.Options Language.PureScript.PSString
                     Language.PureScript.Parser Language.PureScript.Parser.Common
                     Language.PureScript.Parser.Declarations
                     Language.PureScript.Parser.Kinds Language.PureScript.Parser.Lexer
                     Language.PureScript.Parser.State Language.PureScript.Parser.Types
                     Language.PureScript.Pretty Language.PureScript.Pretty.Common
                     Language.PureScript.Pretty.Kinds Language.PureScript.Pretty.Types
                     Language.PureScript.Pretty.Values
                     Language.PureScript.Publish.BoxesHelpers
                     Language.PureScript.Renamer Language.PureScript.Sugar
                     Language.PureScript.Sugar.AdoNotation
                     Language.PureScript.Sugar.BindingGroups
                     Language.PureScript.Sugar.CaseDeclarations
                     Language.PureScript.Sugar.DoNotation
                     Language.PureScript.Sugar.LetPattern
                     Language.PureScript.Sugar.Names
                     Language.PureScript.Sugar.Names.Common
                     Language.PureScript.Sugar.Names.Env
                     Language.PureScript.Sugar.Names.Exports
                     Language.PureScript.Sugar.Names.Imports
                     Language.PureScript.Sugar.ObjectWildcards
                     Language.PureScript.Sugar.Operators
                     Language.PureScript.Sugar.Operators.Binders
                     Language.PureScript.Sugar.Operators.Common
                     Language.PureScript.Sugar.Operators.Expr
                     Language.PureScript.Sugar.Operators.Types
                     Language.PureScript.Sugar.TypeClasses
                     Language.PureScript.Sugar.TypeClasses.Deriving
                     Language.PureScript.Sugar.TypeDeclarations
                     Language.PureScript.Traversals Language.PureScript.TypeChecker
                     Language.PureScript.TypeChecker.Entailment
                     Language.PureScript.TypeChecker.Kinds
                     Language.PureScript.TypeChecker.Monad
                     Language.PureScript.TypeChecker.Skolems
                     Language.PureScript.TypeChecker.Subsumption
                     Language.PureScript.TypeChecker.Synonyms
                     Language.PureScript.TypeChecker.TypeSearch
                     Language.PureScript.TypeChecker.Types
                     Language.PureScript.TypeChecker.Unify
                     Language.PureScript.TypeClassDictionaries Language.PureScript.Types
                     Paths_purescript System.IO.UTF8
package dependencies: aeson-1.3.1.1 aeson-better-errors-0.9.1.0
                      ansi-terminal-0.8.0.4 array-0.5.2.0 async-2.2.1 attoparsec-0.13.2.2
                      auto-update-0.1.4 base-4.11.1.0 base-compat-0.10.4 binary-0.8.5.1
                      blaze-builder-0.4.1.0 bower-json-1.0.0.1 boxes-0.1.5
                      bytestring-0.10.8.2 clock-0.7.2 colour-2.3.4 conduit-1.3.0.3
                      conduit-extra-1.3.0 containers-0.5.11.0 data-ordlist-0.4.7.0
                      deepseq-1.4.3.0 directory-1.3.1.5 dlist-0.8.0.4 easy-file-0.2.2
                      edit-distance-0.2.2.1 exceptions-0.10.0 fast-logger-2.4.11
                      filepath-1.4.2 ghc-boot-th-8.4.3 ghc-prim-0.5.2.0 hashable-1.2.7.0
                      integer-gmp-1.0.2.0 integer-logarithms-1.0.2.1
                      language-javascript-0.6.0.11 lifted-base-0.2.3.12 microlens-0.4.9.1
                      microlens-ghc-0.4.9 microlens-mtl-0.1.11.1
                      microlens-platform-0.3.10 microlens-th-0.4.2.1
                      monad-control-1.0.2.3 monad-logger-0.3.28.5 monad-loops-0.4.3
                      mtl-2.2.2 old-locale-1.0.0.7 old-time-1.1.0.3 parallel-3.2.1.1
                      parsec-3.1.13.0 pattern-arrows-0.0.2 pretty-1.1.3.6
                      primitive-0.6.3.0 protolude-0.2.2 random-1.1 regex-base-0.93.2
                      regex-tdfa-1.2.3.1 resourcet-1.2.1 safe-0.3.17 scientific-0.3.6.2
                      sourcemap-0.1.6 split-0.2.3.3 stm-2.4.5.0 stm-chans-3.0.0.4
                      stringsearch-0.3.6.6 syb-0.7 tagged-0.8.5 template-haskell-2.13.0.0
                      text-1.2.3.0 th-abstraction-0.2.8.0 time-1.8.0.2
                      time-locale-compat-0.1.1.4 transformers-0.5.5.0
                      transformers-base-0.4.5.2 unix-2.7.2.2 unix-time-0.3.8
                      unliftio-core-0.1.1.0 unordered-containers-0.2.9.0
                      utf8-string-1.0.1.1 uuid-types-1.0.3 vector-0.12.0.1
orphans: unix-time-0.3.8:Data.UnixTime.Diff
         regex-tdfa-1.2.3.1:Text.Regex.TDFA.ByteString
         regex-tdfa-1.2.3.1:Text.Regex.TDFA.ByteString.Lazy
         regex-tdfa-1.2.3.1:Text.Regex.TDFA.Sequence
         regex-tdfa-1.2.3.1:Text.Regex.TDFA.String
         regex-base-0.93.2:Text.Regex.Base.Context
         syb-0.7:Data.Generics.Instances colour-2.3.4:Data.Colour
         stm-2.4.5.0:Control.Monad.STM
         attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         microlens-platform-0.3.10:Lens.Micro.Platform
         microlens-ghc-0.4.9:Lens.Micro.GHC
         hashable-1.2.7.0:Data.Hashable.Generic
         vector-0.12.0.1:Data.Vector.Unboxed
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.5.0:Control.Monad.Trans.Error
         text-1.2.3.0:Data.Text.Lazy text-1.2.3.0:Data.Text
         binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: aeson-1.3.1.1:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         bower-json-1.0.0.1:Web.Bower.PackageMeta.Internal
                         clock-0.7.2:System.Clock
                         conduit-1.3.0.3:Data.Conduit.Internal.Conduit
                         conduit-1.3.0.3:Data.Conduit.Internal.Pipe
                         containers-0.5.11.0:Data.Graph
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         dlist-0.8.0.4:Data.DList ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         microlens-0.4.9.1:Lens.Micro.Internal
                         microlens-ghc-0.4.9:Lens.Micro.GHC
                         microlens-mtl-0.1.11.1:Lens.Micro.Mtl.Internal
                         microlens-platform-0.3.10:Lens.Micro.Platform
                         monad-control-1.0.2.3:Control.Monad.Trans.Control
                         monad-logger-0.3.28.5:Control.Monad.Logger
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Control.Monad.Logger
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.Declarations
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.Operators
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.SourcePos
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Comments
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Docs.RenderedCode.Types
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Docs.Types
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Environment
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Ide.Reexports
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Ide.Types
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Kinds
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Label
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Make.Monad
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Names
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.PSString
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.TypeClassDictionaries
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Types
                         resourcet-1.2.1:Control.Monad.Trans.Resource.Internal
                         tagged-0.8.5:Data.Tagged
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
                         th-abstraction-0.2.8.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  aeson-1.3.1.1:Data.Aeson 108dfb08de41cf77aad4693ac1dc3d44
import  -/  aeson-1.3.1.1:Data.Aeson.Types.FromJSON 1ea0c919856f0d29f12e53cd074d532c
import  -/  base-4.11.1.0:Data.Functor f522c3501272159820fd6f242510732f
import  -/  base-4.11.1.0:Data.Maybe 409c3da2b142470b68be39ce1d97a9f7
import  -/  base-4.11.1.0:Data.Traversable 7ad4edb9184ea1ae8e73f6b94f115c8c
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.IO 1d5542cc02075c5e948018bfacea89c1
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  containers-0.5.11.0:Data.Map 0dbdaec812ef695a364aa6c69e7f7d53
import  -/  containers-0.5.11.0:Data.Map.Internal 0150e210d0ae8df0f3a0669d5e32d8fa
import  -/  containers-0.5.11.0:Data.Set 7d3c64a641be4cacbcd8119445bab919
import  -/  containers-0.5.11.0:Data.Set.Internal 93fa3ef95853aa2a7aadf32d693bd451
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  protolude-0.2.2:Protolude 2c2d16096c8a60f59f646a3b93b0eb7b
import  -/  Language.PureScript 4a24ccd892adbf021daf2410ebd61e22
  exports: 139dcaa90af8ddcee6aa0492159f351d
import  -/  Language.PureScript.Ide.CaseSplit 14bd943cbde20d08c9affc7eefdc3842
  exports: 2584b7055558038495f9e37c0506815a
  WildcardAnnotations c6d1c510227b3cecf58e01d8ac8d8d27
  explicitAnnotations 92cfc9a205da25f55c51b155ed9ecb20
  noAnnotations 9842bee8703250e0e522e57549b25aec
import  -/  Language.PureScript.Ide.Completion 272946a4c81fac87f8e80f053300fdd8
  exports: 9eb5f5ff96a863487609bcfa4bbf03f0
  CompletionOptions c8878fc5aee3f7b44d602425f6793e59
  defaultCompletionOptions 8e3747d017040e5acb5876d738d5cf10
import  -/  Language.PureScript.Ide.Filter cfa1ebda6f0a8830c8c60e4462bab1ef
  exports: 346bf0e54a9a4816ea444c922e0ed4be
  Filter c4b7c89a6bcd0c21f2097e0bb7c93686
import  -/  Language.PureScript.Ide.Matcher 5dff0aaebf270c984c3b36d5a920daee
  exports: 7e2a060070b4bb90c4378be98bb4f379
  Matcher 1f44fbd6c3952871236a12c94b19d1ea
import  -/  Language.PureScript.Ide.Types 4bb81e9de3788f7f63a68a23e190eb73
  exports: e5ee4d37ef25d4dfedd36ea1d435a17a
  IdeDeclarationAnn b02d1e3d0d65a3bc0459005430392eb1
  IdeNamespace a433d742d266c5a84cd109a4a3bf8314
import  -/  Language.PureScript.Names 00f694509122478d97b327fbbccae327
  ModuleName 1b2ddf0c04464d2fa2588925f10c1966
  moduleNameFromString 58dbc4d6b97c8eb6012ccda72d203acf
import  -/  Language.PureScript.Options 2e36bd5fcc2b2ebbc36ff47b336cef60
  CodegenTarget 01549f9098408b4144e13364de301586
  codegenTargets d23e3e5037dca0cefb0968eca323a10a
import  -/  text-1.2.3.0:Data.Text.Internal 30a0a123f71f63b26cd34c6b24f23411
07deb4e46a2651c5c6139da703385be6
  $fEqImportCommand ::
    GHC.Classes.Eq Language.PureScript.Ide.Command.ImportCommand
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Command.ImportCommand
                  Language.PureScript.Ide.Command.$fEqImportCommand_$c==
                  Language.PureScript.Ide.Command.$fEqImportCommand_$c/= -}
07deb4e46a2651c5c6139da703385be6
  $fEqImportCommand_$c/= ::
    Language.PureScript.Ide.Command.ImportCommand
    -> Language.PureScript.Ide.Command.ImportCommand -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Ide.Command.ImportCommand)
                   (y :: Language.PureScript.Ide.Command.ImportCommand) ->
                 case Language.PureScript.Ide.Command.$fEqImportCommand_$c==
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
07deb4e46a2651c5c6139da703385be6
  $fEqImportCommand_$c== ::
    Language.PureScript.Ide.Command.ImportCommand
    -> Language.PureScript.Ide.Command.ImportCommand -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Language.PureScript.Ide.Command.ImportCommand)
                   (ds1 :: Language.PureScript.Ide.Command.ImportCommand) ->
                 case ds of wild {
                   Language.PureScript.Ide.Command.AddImplicitImport a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Ide.Command.AddImplicitImport b1
                        -> GHC.Classes.$fEq[]_$c==
                             @ (Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.Namespace)
                             (Language.PureScript.Names.$fEqProperName
                                @ 'Language.PureScript.Names.Namespace)
                             a1 `cast` (Language.PureScript.Names.N:ModuleName[0])
                             b1 `cast` (Language.PureScript.Names.N:ModuleName[0]) }
                   Language.PureScript.Ide.Command.AddQualifiedImport a1 a2
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Ide.Command.AddQualifiedImport b1 b2
                        -> case GHC.Classes.$fEq[]_$c==
                                  @ (Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.Namespace)
                                  (Language.PureScript.Names.$fEqProperName
                                     @ 'Language.PureScript.Names.Namespace)
                                  a1 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                  b1 `cast` (Language.PureScript.Names.N:ModuleName[0]) of wild2 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True
                             -> GHC.Classes.$fEq[]_$c==
                                  @ (Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.Namespace)
                                  (Language.PureScript.Names.$fEqProperName
                                     @ 'Language.PureScript.Names.Namespace)
                                  a2 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                  b2 `cast` (Language.PureScript.Names.N:ModuleName[0]) } }
                   Language.PureScript.Ide.Command.AddImportForIdentifier a1 a2
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Ide.Command.AddImportForIdentifier b1 b2
                        -> case a1 of wild2 { Data.Text.Internal.Text dt dt1 dt2 ->
                           case b1 of wild3 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                           case GHC.Prim.==# dt2 dt5 of lwild {
                             DEFAULT -> GHC.Types.False
                             1#
                             -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.ByteArray#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.State# GHC.Prim.RealWorld
                                                               -> (# GHC.Prim.State#
                                                                       GHC.Prim.RealWorld,
                                                                     GHC.Prim.Int# #)}
                                       dt
                                       (GHC.Prim.int2Word# dt1)
                                       dt3
                                       (GHC.Prim.int2Word# dt4)
                                       (GHC.Prim.int2Word# dt2)
                                       GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                                case GHC.Prim.narrow32Int# ds3 of wild4 {
                                  DEFAULT -> GHC.Types.False
                                  0#
                                  -> case a2 of wild6 {
                                       GHC.Base.Nothing
                                       -> case b2 of wild7 {
                                            GHC.Base.Nothing -> GHC.Types.True
                                            GHC.Base.Just ipv -> GHC.Types.False }
                                       GHC.Base.Just a4
                                       -> case b2 of wild7 {
                                            GHC.Base.Nothing -> GHC.Types.False
                                            GHC.Base.Just b4
                                            -> GHC.Classes.$fEq[]_$c==
                                                 @ (Language.PureScript.Names.ProperName
                                                      'Language.PureScript.Names.Namespace)
                                                 (Language.PureScript.Names.$fEqProperName
                                                    @ 'Language.PureScript.Names.Namespace)
                                                 a4
                                                   `cast`
                                                 (Language.PureScript.Names.N:ModuleName[0])
                                                 b4
                                                   `cast`
                                                 (Language.PureScript.Names.N:ModuleName[0]) } } } } } } } } }) -}
a88c1d76323e13ff12237806a67427b8
  $fFromJSONCommand ::
    Data.Aeson.Types.FromJSON.FromJSON
      Language.PureScript.Ide.Command.Command
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Command.Command
                  Language.PureScript.Ide.Command.$fFromJSONCommand_$cparseJSON
                  Language.PureScript.Ide.Command.$fFromJSONCommand_$cparseJSONList -}
9e12505ac0718fe13bf24058f41da755
  $fFromJSONCommand1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (", encountered "#) -}
03d79dff66a3484d13f49928e4fb4f27
  $fFromJSONCommand2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("[a]"#) -}
dcb66d322668be6eb54c1ab8b86520be
  $fFromJSONCommand3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("expected "#) -}
a88c1d76323e13ff12237806a67427b8
  $fFromJSONCommand4 ::
    Data.Aeson.Types.Internal.Object
    -> Data.Aeson.Types.Internal.Parser
         Language.PureScript.Ide.Command.Command
  {- Arity: 1, Strictness: <L,U> -}
1d38d16d4ad404f80b1ff73b76c5cdf7
  $fFromJSONCommand5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Ide.Command.$fFromJSONCommand6) -}
f2a0aff5d34661e73ef1a6c6db608247
  $fFromJSONCommand6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("command"#) -}
a88c1d76323e13ff12237806a67427b8
  $fFromJSONCommand_$cparseJSON ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         Language.PureScript.Ide.Command.Command
  {- Arity: 1,
     Unfolding: (Data.Aeson.Types.FromJSON.withObject
                   @ Language.PureScript.Ide.Command.Command
                   Language.PureScript.Ide.Command.$fFromJSONCommand5
                   Language.PureScript.Ide.Command.$fFromJSONCommand4) -}
a88c1d76323e13ff12237806a67427b8
  $fFromJSONCommand_$cparseJSONList ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         [Language.PureScript.Ide.Command.Command]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Data.Aeson.Types.Internal.Value) ->
                 case ds of wild {
                   DEFAULT
                   -> let {
                        msg9 :: GHC.Base.String
                        = GHC.CString.unpackAppendCString#
                            Language.PureScript.Ide.Command.$fFromJSONCommand3
                            (GHC.CString.unpackAppendCString#
                               Language.PureScript.Ide.Command.$fFromJSONCommand2
                               (GHC.CString.unpackAppendCString#
                                  Language.PureScript.Ide.Command.$fFromJSONCommand1
                                  (case wild of wild1 {
                                     Data.Aeson.Types.Internal.Object ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList10
                                     Data.Aeson.Types.Internal.String ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList8
                                     Data.Aeson.Types.Internal.Number ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList6
                                     Data.Aeson.Types.Internal.Bool ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList4
                                     Data.Aeson.Types.Internal.Null
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList1 })))
                      } in
                      (\ @ f4 :: * -> *
                         @ r
                         (path :: Data.Aeson.Types.Internal.JSONPath)
                         (kf :: Data.Aeson.Types.Internal.Failure f4 r)
                         (_ks :: Data.Aeson.Types.Internal.Success
                                   [Language.PureScript.Ide.Command.Command] f4 r) ->
                       kf
                         (GHC.List.reverse @ Data.Aeson.Types.Internal.JSONPathElement path)
                         msg9)
                        `cast`
                      (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                <[Language.PureScript.Ide.Command.Command]>_R))
                   Data.Aeson.Types.Internal.Array a2
                   -> case a2 of wild1 { Data.Vector.Vector dt dt1 dt2 ->
                      letrec {
                        $wgo :: GHC.Prim.Int# -> [Data.Aeson.Types.Internal.Value]
                          {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                        = \ (ww :: GHC.Prim.Int#) ->
                          case GHC.Prim.>=# ww dt1 of lwild {
                            DEFAULT
                            -> case GHC.Prim.indexArray#
                                      @ Data.Aeson.Types.Internal.Value
                                      dt2
                                      (GHC.Prim.+# dt ww) of ds3 { Unit# ipv ->
                               GHC.Types.:
                                 @ Data.Aeson.Types.Internal.Value
                                 ipv
                                 ($wgo (GHC.Prim.+# ww 1#)) }
                            1# -> GHC.Types.[] @ Data.Aeson.Types.Internal.Value }
                      } in
                      Language.PureScript.Ide.Command.$fFromJSONCommand_go
                        0#
                        ($wgo 0#) } }) -}
a88c1d76323e13ff12237806a67427b8
  $fFromJSONCommand_go ::
    GHC.Prim.Int#
    -> [Data.Aeson.Types.Internal.Value]
    -> Data.Aeson.Types.Internal.Parser
         [Language.PureScript.Ide.Command.Command]
  {- Arity: 2, Strictness: <L,U><S,1*U> -}
07deb4e46a2651c5c6139da703385be6
  $fFromJSONImportCommand ::
    Data.Aeson.Types.FromJSON.FromJSON
      Language.PureScript.Ide.Command.ImportCommand
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Command.ImportCommand
                  Language.PureScript.Ide.Command.$fFromJSONImportCommand_$cparseJSON
                  Language.PureScript.Ide.Command.$fFromJSONImportCommand_$cparseJSONList -}
07deb4e46a2651c5c6139da703385be6
  $fFromJSONImportCommand1 ::
    Data.Aeson.Types.Internal.Object
    -> Data.Aeson.Types.Internal.Parser
         Language.PureScript.Ide.Command.ImportCommand
  {- Arity: 1, Strictness: <L,U> -}
9afa16ecc6c008af352add29c3d2d452
  $fFromJSONImportCommand2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Ide.Command.$fFromJSONImportCommand3) -}
ad07f9f648a7750a91be94173c823f36
  $fFromJSONImportCommand3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ImportCommand"#) -}
07deb4e46a2651c5c6139da703385be6
  $fFromJSONImportCommand_$cparseJSON ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         Language.PureScript.Ide.Command.ImportCommand
  {- Arity: 1,
     Unfolding: (Data.Aeson.Types.FromJSON.withObject
                   @ Language.PureScript.Ide.Command.ImportCommand
                   Language.PureScript.Ide.Command.$fFromJSONImportCommand2
                   Language.PureScript.Ide.Command.$fFromJSONImportCommand1) -}
07deb4e46a2651c5c6139da703385be6
  $fFromJSONImportCommand_$cparseJSONList ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         [Language.PureScript.Ide.Command.ImportCommand]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Data.Aeson.Types.Internal.Value) ->
                 case ds of wild {
                   DEFAULT
                   -> let {
                        msg9 :: GHC.Base.String
                        = GHC.CString.unpackAppendCString#
                            Language.PureScript.Ide.Command.$fFromJSONCommand3
                            (GHC.CString.unpackAppendCString#
                               Language.PureScript.Ide.Command.$fFromJSONCommand2
                               (GHC.CString.unpackAppendCString#
                                  Language.PureScript.Ide.Command.$fFromJSONCommand1
                                  (case wild of wild1 {
                                     Data.Aeson.Types.Internal.Object ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList10
                                     Data.Aeson.Types.Internal.String ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList8
                                     Data.Aeson.Types.Internal.Number ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList6
                                     Data.Aeson.Types.Internal.Bool ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList4
                                     Data.Aeson.Types.Internal.Null
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList1 })))
                      } in
                      (\ @ f4 :: * -> *
                         @ r
                         (path :: Data.Aeson.Types.Internal.JSONPath)
                         (kf :: Data.Aeson.Types.Internal.Failure f4 r)
                         (_ks :: Data.Aeson.Types.Internal.Success
                                   [Language.PureScript.Ide.Command.ImportCommand] f4 r) ->
                       kf
                         (GHC.List.reverse @ Data.Aeson.Types.Internal.JSONPathElement path)
                         msg9)
                        `cast`
                      (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                <[Language.PureScript.Ide.Command.ImportCommand]>_R))
                   Data.Aeson.Types.Internal.Array a2
                   -> case a2 of wild1 { Data.Vector.Vector dt dt1 dt2 ->
                      letrec {
                        $wgo :: GHC.Prim.Int# -> [Data.Aeson.Types.Internal.Value]
                          {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                        = \ (ww :: GHC.Prim.Int#) ->
                          case GHC.Prim.>=# ww dt1 of lwild {
                            DEFAULT
                            -> case GHC.Prim.indexArray#
                                      @ Data.Aeson.Types.Internal.Value
                                      dt2
                                      (GHC.Prim.+# dt ww) of ds3 { Unit# ipv ->
                               GHC.Types.:
                                 @ Data.Aeson.Types.Internal.Value
                                 ipv
                                 ($wgo (GHC.Prim.+# ww 1#)) }
                            1# -> GHC.Types.[] @ Data.Aeson.Types.Internal.Value }
                      } in
                      Language.PureScript.Ide.Command.$fFromJSONImportCommand_go
                        0#
                        ($wgo 0#) } }) -}
07deb4e46a2651c5c6139da703385be6
  $fFromJSONImportCommand_go ::
    GHC.Prim.Int#
    -> [Data.Aeson.Types.Internal.Value]
    -> Data.Aeson.Types.Internal.Parser
         [Language.PureScript.Ide.Command.ImportCommand]
  {- Arity: 2, Strictness: <L,U><S,1*U> -}
59cbf007ab948bc3f3ff1ba2357c1dd1
  $fFromJSONListType ::
    Data.Aeson.Types.FromJSON.FromJSON
      Language.PureScript.Ide.Command.ListType
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Command.ListType
                  Language.PureScript.Ide.Command.$fFromJSONListType_$cparseJSON
                  Language.PureScript.Ide.Command.$fFromJSONListType_$cparseJSONList -}
59cbf007ab948bc3f3ff1ba2357c1dd1
  $fFromJSONListType1 ::
    Data.Aeson.Types.Internal.Object
    -> Data.Aeson.Types.Internal.Parser
         Language.PureScript.Ide.Command.ListType
  {- Arity: 1, Strictness: <L,U> -}
a319b54b3bf1db6fc7ce19247766da63
  $fFromJSONListType2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Ide.Command.$fFromJSONListType3) -}
ffa62c27051de345beff0da2092e3a14
  $fFromJSONListType3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ListType"#) -}
59cbf007ab948bc3f3ff1ba2357c1dd1
  $fFromJSONListType_$cparseJSON ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         Language.PureScript.Ide.Command.ListType
  {- Arity: 1,
     Unfolding: (Data.Aeson.Types.FromJSON.withObject
                   @ Language.PureScript.Ide.Command.ListType
                   Language.PureScript.Ide.Command.$fFromJSONListType2
                   Language.PureScript.Ide.Command.$fFromJSONListType1) -}
59cbf007ab948bc3f3ff1ba2357c1dd1
  $fFromJSONListType_$cparseJSONList ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         [Language.PureScript.Ide.Command.ListType]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Data.Aeson.Types.Internal.Value) ->
                 case ds of wild {
                   DEFAULT
                   -> let {
                        msg9 :: GHC.Base.String
                        = GHC.CString.unpackAppendCString#
                            Language.PureScript.Ide.Command.$fFromJSONCommand3
                            (GHC.CString.unpackAppendCString#
                               Language.PureScript.Ide.Command.$fFromJSONCommand2
                               (GHC.CString.unpackAppendCString#
                                  Language.PureScript.Ide.Command.$fFromJSONCommand1
                                  (case wild of wild1 {
                                     Data.Aeson.Types.Internal.Object ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList10
                                     Data.Aeson.Types.Internal.String ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList8
                                     Data.Aeson.Types.Internal.Number ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList6
                                     Data.Aeson.Types.Internal.Bool ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList4
                                     Data.Aeson.Types.Internal.Null
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList1 })))
                      } in
                      (\ @ f4 :: * -> *
                         @ r
                         (path :: Data.Aeson.Types.Internal.JSONPath)
                         (kf :: Data.Aeson.Types.Internal.Failure f4 r)
                         (_ks :: Data.Aeson.Types.Internal.Success
                                   [Language.PureScript.Ide.Command.ListType] f4 r) ->
                       kf
                         (GHC.List.reverse @ Data.Aeson.Types.Internal.JSONPathElement path)
                         msg9)
                        `cast`
                      (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                <[Language.PureScript.Ide.Command.ListType]>_R))
                   Data.Aeson.Types.Internal.Array a2
                   -> case a2 of wild1 { Data.Vector.Vector dt dt1 dt2 ->
                      letrec {
                        $wgo :: GHC.Prim.Int# -> [Data.Aeson.Types.Internal.Value]
                          {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                        = \ (ww :: GHC.Prim.Int#) ->
                          case GHC.Prim.>=# ww dt1 of lwild {
                            DEFAULT
                            -> case GHC.Prim.indexArray#
                                      @ Data.Aeson.Types.Internal.Value
                                      dt2
                                      (GHC.Prim.+# dt ww) of ds3 { Unit# ipv ->
                               GHC.Types.:
                                 @ Data.Aeson.Types.Internal.Value
                                 ipv
                                 ($wgo (GHC.Prim.+# ww 1#)) }
                            1# -> GHC.Types.[] @ Data.Aeson.Types.Internal.Value }
                      } in
                      Language.PureScript.Ide.Command.$fFromJSONListType_go
                        0#
                        ($wgo 0#) } }) -}
59cbf007ab948bc3f3ff1ba2357c1dd1
  $fFromJSONListType_go ::
    GHC.Prim.Int#
    -> [Data.Aeson.Types.Internal.Value]
    -> Data.Aeson.Types.Internal.Parser
         [Language.PureScript.Ide.Command.ListType]
  {- Arity: 2, Strictness: <L,U><S,1*U> -}
07deb4e46a2651c5c6139da703385be6
  $fShowImportCommand ::
    GHC.Show.Show Language.PureScript.Ide.Command.ImportCommand
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Command.ImportCommand
                  Language.PureScript.Ide.Command.$fShowImportCommand_$cshowsPrec
                  Language.PureScript.Ide.Command.$fShowImportCommand_$cshow
                  Language.PureScript.Ide.Command.$fShowImportCommand_$cshowList -}
07deb4e46a2651c5c6139da703385be6
  $fShowImportCommand1 ::
    Language.PureScript.Ide.Command.ImportCommand -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (w :: Language.PureScript.Ide.Command.ImportCommand) ->
                 Language.PureScript.Ide.Command.$w$cshowsPrec 0# w) -}
a3057c37bca65dd7fced0169c1f558f6
  $fShowImportCommand2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("AddImportForIdentifier "#) -}
c5b5723462cc25b5accadbc658660dd2
  $fShowImportCommand3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11#) -}
eedca1b4366fa69ca8fab1b53087472a
  $fShowImportCommand4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Ide.Command.$fShowImportCommand5) -}
59aa756361af07e71370b965bafe6b08
  $fShowImportCommand5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("AddQualifiedImport "#) -}
41eb3b47f8a935ee22e7f9e916646775
  $fShowImportCommand6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("AddImplicitImport "#) -}
d6918dae704968c87d69e2e0e43cc4c6
  $fShowImportCommand7 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
07deb4e46a2651c5c6139da703385be6
  $fShowImportCommand_$cshow ::
    Language.PureScript.Ide.Command.ImportCommand -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Ide.Command.ImportCommand) ->
                 Language.PureScript.Ide.Command.$fShowImportCommand_$cshowsPrec
                   Language.PureScript.Ide.Command.$fShowImportCommand7
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
07deb4e46a2651c5c6139da703385be6
  $fShowImportCommand_$cshowList ::
    [Language.PureScript.Ide.Command.ImportCommand] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Ide.Command.ImportCommand])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Ide.Command.ImportCommand
                   Language.PureScript.Ide.Command.$fShowImportCommand1
                   ls
                   s) -}
07deb4e46a2651c5c6139da703385be6
  $fShowImportCommand_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Ide.Command.ImportCommand -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Ide.Command.ImportCommand) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Language.PureScript.Ide.Command.$w$cshowsPrec ww1 w1 }) -}
a7560158a25ae75052c208a47dd5a108
  $sfromList ::
    [Language.PureScript.Options.CodegenTarget]
    -> Data.Set.Internal.Set Language.PureScript.Options.CodegenTarget
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [Language.PureScript.Options.CodegenTarget]) ->
                 case ds of wild {
                   []
                   -> Data.Set.Internal.Tip
                        @ Language.PureScript.Options.CodegenTarget
                   : x ds1
                   -> case ds1 of wild1 {
                        []
                        -> case x of dt { DEFAULT ->
                           Data.Set.Internal.Bin
                             @ Language.PureScript.Options.CodegenTarget
                             1#
                             dt
                             (Data.Set.Internal.Tip @ Language.PureScript.Options.CodegenTarget)
                             (Data.Set.Internal.Tip
                                @ Language.PureScript.Options.CodegenTarget) }
                        : ipv ipv1
                        -> case Language.PureScript.Options.$fOrdCodegenTarget_$c>=
                                  x
                                  ipv of wild2 {
                             GHC.Types.False
                             -> case x of dt { DEFAULT ->
                                Language.PureScript.Ide.Command.$sfromList_$s$wgo3
                                  ipv
                                  ipv1
                                  (Data.Set.Internal.Bin
                                     @ Language.PureScript.Options.CodegenTarget
                                     1#
                                     dt
                                     (Data.Set.Internal.Tip
                                        @ Language.PureScript.Options.CodegenTarget)
                                     (Data.Set.Internal.Tip
                                        @ Language.PureScript.Options.CodegenTarget))
                                  1# }
                             GHC.Types.True
                             -> case x of dt { DEFAULT ->
                                Language.PureScript.Ide.Command.$sfromList_$sgo4
                                  ipv
                                  ipv1
                                  (Data.Set.Internal.Bin
                                     @ Language.PureScript.Options.CodegenTarget
                                     1#
                                     dt
                                     (Data.Set.Internal.Tip
                                        @ Language.PureScript.Options.CodegenTarget)
                                     (Data.Set.Internal.Tip
                                        @ Language.PureScript.Options.CodegenTarget)) } } } }) -}
6e663bdf73441dc43c61fab1433cbd69
  $sfromList_$s$wgo3 ::
    Language.PureScript.Options.CodegenTarget
    -> [Language.PureScript.Options.CodegenTarget]
    -> Data.Set.Internal.Set Language.PureScript.Options.CodegenTarget
    -> GHC.Prim.Int#
    -> Data.Set.Internal.Set Language.PureScript.Options.CodegenTarget
  {- Arity: 4, Strictness: <S,U><S,1*U><S,1*U><L,U> -}
dea50b0e7ef1f11cc81d6a2d47324870
  $sfromList_$sgo4 ::
    Language.PureScript.Options.CodegenTarget
    -> [Language.PureScript.Options.CodegenTarget]
    -> Data.Set.Internal.Set Language.PureScript.Options.CodegenTarget
    -> Data.Set.Internal.Set Language.PureScript.Options.CodegenTarget
  {- Arity: 3, Strictness: <S,U><S,1*U><S,1*U> -}
2a31f284a08bdf4ae78ce415514cfad7
  $sinsert_$sgo3 ::
    Language.PureScript.Options.CodegenTarget
    -> Language.PureScript.Options.CodegenTarget
    -> Data.Set.Internal.Set Language.PureScript.Options.CodegenTarget
    -> Data.Set.Internal.Set Language.PureScript.Options.CodegenTarget
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U> -}
95177c8c69da785dbb4bb5afecd22458
  $slookup1 ::
    GHC.Base.String
    -> Data.Map.Internal.Map GHC.Base.String a -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
28b335ef16301ea0fd881b52ccf21176
  $tc'AddClause :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1426848324952857595##
                   1708317639626342995##
                   Language.PureScript.Ide.Command.$trModule
                   Language.PureScript.Ide.Command.$tc'AddClause2
                   0#
                   Language.PureScript.Ide.Command.$tc'AddClause1) -}
7f8e0b920905a5f6fb7c0df146deb698
  $tc'AddClause1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
5a0bc921c20a0fdd3f4cb8e22a956730
  $tc'AddClause2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Command.$tc'AddClause3) -}
aacbe9a30cdc6f60b95fc18ce00751cb
  $tc'AddClause3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'AddClause"#) -}
901331787490f8e5394dbb5472ca2dab
  $tc'AddImplicitImport :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2519673723838906084##
                   10578431150148548113##
                   Language.PureScript.Ide.Command.$trModule
                   Language.PureScript.Ide.Command.$tc'AddImplicitImport2
                   0#
                   Language.PureScript.Ide.Command.$tc'AddImplicitImport1) -}
0ee33c4d187a38f33f726e659606a76b
  $tc'AddImplicitImport1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
b3e98b6875e694973155a48edc4d9d50
  $tc'AddImplicitImport2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Command.$tc'AddImplicitImport3) -}
ecca534d26258aa7d9e58c12f8d11969
  $tc'AddImplicitImport3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'AddImplicitImport"#) -}
6207fff9b088b781bbee37f886d305b1
  $tc'AddImportForIdentifier :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4095792127062618197##
                   2355045217679970644##
                   Language.PureScript.Ide.Command.$trModule
                   Language.PureScript.Ide.Command.$tc'AddImportForIdentifier2
                   0#
                   Language.PureScript.Ide.Command.$tc'AddImportForIdentifier1) -}
999971e9bac99bc3570dd6549b8af995
  $tc'AddImportForIdentifier1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
dd55993c1146e074afd868eb92c407a7
  $tc'AddImportForIdentifier2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Command.$tc'AddImportForIdentifier3) -}
5db1bcb19573c3da8469837da4079028
  $tc'AddImportForIdentifier3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'AddImportForIdentifier"#) -}
3374382ea365efccb2ce5798c262809c
  $tc'AddQualifiedImport :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17510019440794781932##
                   2617206938806444341##
                   Language.PureScript.Ide.Command.$trModule
                   Language.PureScript.Ide.Command.$tc'AddQualifiedImport2
                   0#
                   Language.PureScript.Ide.Command.$tc'AddQualifiedImport1) -}
a9f32fdd16a7d47ddc3007938bb1cda0
  $tc'AddQualifiedImport1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
7ca5af3bf7c4aee1f63bbee724ea3025
  $tc'AddQualifiedImport2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Command.$tc'AddQualifiedImport3) -}
861650026d1d83af429ff706b9947336
  $tc'AddQualifiedImport3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'AddQualifiedImport"#) -}
5127803e02cfdc3b65495d13bae5eaf3
  $tc'AvailableModules :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5235111769960779271##
                   1683871796907739377##
                   Language.PureScript.Ide.Command.$trModule
                   Language.PureScript.Ide.Command.$tc'AvailableModules2
                   0#
                   Language.PureScript.Ide.Command.$tc'AvailableModules1) -}
048d56eefbcd0fc2b9b70ba62c756656
  $tc'AvailableModules1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
4dd7119b1b65994d9b71eabb9792e59c
  $tc'AvailableModules2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Command.$tc'AvailableModules3) -}
a675f6a28b5c8523981b7976c8738c0c
  $tc'AvailableModules3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'AvailableModules"#) -}
baa69af3e1ee0cd43bf6dc5c8431fb82
  $tc'CaseSplit :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8849858294390103873##
                   17174245132641901862##
                   Language.PureScript.Ide.Command.$trModule
                   Language.PureScript.Ide.Command.$tc'CaseSplit2
                   0#
                   Language.PureScript.Ide.Command.$tc'CaseSplit1) -}
3807c6e634bfc3d2c6dcda4cee97e28a
  $tc'CaseSplit1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
20a99d70b03f1d2a2d3307b4c2007709
  $tc'CaseSplit2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Command.$tc'CaseSplit3) -}
7da889b7fd5ccb1d59cd494f04bb4fc5
  $tc'CaseSplit3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'CaseSplit"#) -}
8005c16bcd208b41a1f28fae6375bdaf
  $tc'Complete :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11844178596479971729##
                   6111565108040585803##
                   Language.PureScript.Ide.Command.$trModule
                   Language.PureScript.Ide.Command.$tc'Complete2
                   0#
                   Language.PureScript.Ide.Command.$tc'Complete1) -}
cb24156a1944f860fe0a3a9169a0ce10
  $tc'Complete1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
5bf72a21dd366d72caf01e8980d4a728
  $tc'Complete2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Command.$tc'Complete3) -}
118adc930d3d137af4cf2775a93e71f7
  $tc'Complete3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Complete"#) -}
7365a2fe193ef4b341ede0f78e0f7256
  $tc'Cwd :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4014696588716854714##
                   8149780954945098856##
                   Language.PureScript.Ide.Command.$trModule
                   Language.PureScript.Ide.Command.$tc'Cwd2
                   0#
                   Language.PureScript.Ide.Command.$tc'Cwd1) -}
4c01aad94b560fb9288bf79de062afc2
  $tc'Cwd1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
178e421c653fb282a98486faadaeea79
  $tc'Cwd2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Command.$tc'Cwd3) -}
877fc43e7adff72aa523098931ea7598
  $tc'Cwd3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Cwd"#) -}
2b3a5c6f24a6df093666dab8f38fc147
  $tc'FindUsages :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12602320581717534729##
                   7347368420553145902##
                   Language.PureScript.Ide.Command.$trModule
                   Language.PureScript.Ide.Command.$tc'FindUsages2
                   0#
                   Language.PureScript.Ide.Command.$tc'FindUsages1) -}
1fa9df780ede199286b26571d9deb33d
  $tc'FindUsages1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
1bea9f2e566ed25b094b5a1b9975ff82
  $tc'FindUsages2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Command.$tc'FindUsages3) -}
6a0d615784635ff0fcd7839c0f53ffc1
  $tc'FindUsages3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'FindUsages"#) -}
e9ddb3f18bbc17022b9dc9d98e1e3e6b
  $tc'Import :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6900057277486432025##
                   11535440466593462733##
                   Language.PureScript.Ide.Command.$trModule
                   Language.PureScript.Ide.Command.$tc'Import2
                   0#
                   Language.PureScript.Ide.Command.$tc'Import1) -}
e27f23c5e8044f17ffe109a90de2e64f
  $tc'Import1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
ed190a47c6d9baafccedeec56433143d
  $tc'Import2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Command.$tc'Import3) -}
a676cb680793f997b04b1def7970716f
  $tc'Import3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Import"#) -}
b5287cd237af6b09943bb8afbb914678
  $tc'Imports :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2955245745524816641##
                   4468295323671125260##
                   Language.PureScript.Ide.Command.$trModule
                   Language.PureScript.Ide.Command.$tc'Imports2
                   0#
                   Language.PureScript.Ide.Command.$tc'Imports1) -}
83669e0db624430d1a0cb2baa2dcc695
  $tc'Imports1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
b7ab3bdc20e2a5f258ae41732670bb7a
  $tc'Imports2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Command.$tc'Imports3) -}
b6ab50b68d8a9bc7d3300be02b98b01f
  $tc'Imports3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Imports"#) -}
9d9b718ff967e04586b09a31cb9784e3
  $tc'List :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11424869938742509398##
                   714410929231286005##
                   Language.PureScript.Ide.Command.$trModule
                   Language.PureScript.Ide.Command.$tc'List2
                   0#
                   Language.PureScript.Ide.Command.$tc'List1) -}
77178e4b3703e8083a24e9bb794607fc
  $tc'List1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
95f2812f0c258f9e3da2e91837ee892f
  $tc'List2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Command.$tc'List3) -}
c9d71bdd1d04692e2b8c55515e11454b
  $tc'List3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'List"#) -}
0149a6fe1c9952cfaa168902c0cd7a30
  $tc'Load :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3140046788627283002##
                   16173892182870448658##
                   Language.PureScript.Ide.Command.$trModule
                   Language.PureScript.Ide.Command.$tc'Load2
                   0#
                   Language.PureScript.Ide.Command.$tc'Load1) -}
72d9e7024e99a7fafc3cbdc0b512e4ef
  $tc'Load1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
284251b9717947d069f7a6afb9a382bc
  $tc'Load2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Command.$tc'Load3) -}
ff38214919766723aec3c2b73b12905f
  $tc'Load3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Load"#) -}
2f6411fe9862e530be6954caa12704ca
  $tc'LoadSync :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2757015254553863606##
                   11748279844278972862##
                   Language.PureScript.Ide.Command.$trModule
                   Language.PureScript.Ide.Command.$tc'LoadSync1
                   0#
                   Language.PureScript.Ide.Command.$tc'Load1) -}
780f5c23f2f46a3e34b477514340d2cc
  $tc'LoadSync1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Command.$tc'LoadSync2) -}
602162e32c0b0dfa4086b1c9df657f56
  $tc'LoadSync2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'LoadSync"#) -}
565974593838d83197d34b35aea402c2
  $tc'LoadedModules :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   204102946627357365##
                   6818876249619327208##
                   Language.PureScript.Ide.Command.$trModule
                   Language.PureScript.Ide.Command.$tc'LoadedModules1
                   0#
                   Language.PureScript.Ide.Command.$tc'AvailableModules1) -}
f3501135ab788725529c09386ab15bbf
  $tc'LoadedModules1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Command.$tc'LoadedModules2) -}
b590ce56c523719fc0491f6ba2991553
  $tc'LoadedModules2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'LoadedModules"#) -}
23e5595267bb3f166cb04b65e6cb05b8
  $tc'Quit :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12277206502896627742##
                   8909795281080511672##
                   Language.PureScript.Ide.Command.$trModule
                   Language.PureScript.Ide.Command.$tc'Quit1
                   0#
                   Language.PureScript.Ide.Command.$tc'Cwd1) -}
e02530048bf33ffe94c9e4485b04a6ca
  $tc'Quit1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Command.$tc'Quit2) -}
239418cdd98e40d6cf444bb3e4da219b
  $tc'Quit2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Quit"#) -}
50406f48634eea7d160b8d59f5debfd3
  $tc'Rebuild :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12530453645927850929##
                   13375723632998201339##
                   Language.PureScript.Ide.Command.$trModule
                   Language.PureScript.Ide.Command.$tc'Rebuild2
                   0#
                   Language.PureScript.Ide.Command.$tc'Rebuild1) -}
f5a0a86188fd781e5f71d83e8bafc209
  $tc'Rebuild1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
16052853b44c7655fc08321eba66704e
  $tc'Rebuild2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Command.$tc'Rebuild3) -}
2fcb4d9b4a6d721ed3b4b8dfe6c8a16d
  $tc'Rebuild3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Rebuild"#) -}
1300f3b4f86fcf9d08fcac7b9852c089
  $tc'RebuildSync :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14164704566418119260##
                   16888994121980321706##
                   Language.PureScript.Ide.Command.$trModule
                   Language.PureScript.Ide.Command.$tc'RebuildSync1
                   0#
                   Language.PureScript.Ide.Command.$tc'Rebuild1) -}
6943a26d1e9692e33baf455e07f6e3a1
  $tc'RebuildSync1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Command.$tc'RebuildSync2) -}
2338b87b79a6c92a6165585605af6c02
  $tc'RebuildSync2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'RebuildSync"#) -}
3843135985e350f1956b101c9341e889
  $tc'Reset :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14528603706552617703##
                   2718660043962667345##
                   Language.PureScript.Ide.Command.$trModule
                   Language.PureScript.Ide.Command.$tc'Reset1
                   0#
                   Language.PureScript.Ide.Command.$tc'Cwd1) -}
f6c117c5c4f0247426cd7e9cc5d53a4b
  $tc'Reset1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Command.$tc'Reset2) -}
5d45c44998cbbef603ba475661c5c4fc
  $tc'Reset2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Reset"#) -}
0a0720bb37617a001a314ae577a6505f
  $tc'Type :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7362696168307512551##
                   14951522623812135303##
                   Language.PureScript.Ide.Command.$trModule
                   Language.PureScript.Ide.Command.$tc'Type2
                   0#
                   Language.PureScript.Ide.Command.$tc'Type1) -}
05654357c00c53c2a364c41917f6cfd5
  $tc'Type1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
0b19b248cc5b6b820d2ef5637c457231
  $tc'Type2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Command.$tc'Type3) -}
b681f574de14edb2fa7d9895dcf4a933
  $tc'Type3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Type"#) -}
0d7f6748ec3b60f69ac67441c145b165
  $tcCommand :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7835598671278424346##
                   16909953872352648689##
                   Language.PureScript.Ide.Command.$trModule
                   Language.PureScript.Ide.Command.$tcCommand1
                   0#
                   GHC.Types.krep$*) -}
e17822174ea7d8726e64ac68f157e69e
  $tcCommand1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Command.$tcCommand2) -}
cb6061259b06e17bd3286508377d1fee
  $tcCommand2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Command"#) -}
e2e5856d3fa993e234007cfca342d831
  $tcImportCommand :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17996258208934660332##
                   5425264817140558456##
                   Language.PureScript.Ide.Command.$trModule
                   Language.PureScript.Ide.Command.$tcImportCommand1
                   0#
                   GHC.Types.krep$*) -}
83aa055ac2d56c74a149456353de8443
  $tcImportCommand1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Command.$fFromJSONImportCommand3) -}
9cac83ae635cc3dfb029f300fb452ebd
  $tcListType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5981940521757715638##
                   2185659016219450315##
                   Language.PureScript.Ide.Command.$trModule
                   Language.PureScript.Ide.Command.$tcListType1
                   0#
                   GHC.Types.krep$*) -}
31f503e44b206695fb6449d5cf1e72df
  $tcListType1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Command.$fFromJSONListType3) -}
3ef0cc7c997bb56f73b2e6d2a23446ce
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Language.PureScript.Ide.Command.$trModule3
                   Language.PureScript.Ide.Command.$trModule1) -}
dc8400933fe60c3305b0da6f9796b2fc
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Command.$trModule2) -}
57349d62105c4e71b9ae69ac11564670
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Language.PureScript.Ide.Command"#) -}
17c84d77a0788d47fed0ad2637021dcc
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Command.$trModule4) -}
05e44cdfd2c12f80fdcc1140fa301722
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"#) -}
07deb4e46a2651c5c6139da703385be6
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> Language.PureScript.Ide.Command.ImportCommand -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: Language.PureScript.Ide.Command.ImportCommand) ->
                 case w of wild {
                   Language.PureScript.Ide.Command.AddImplicitImport b1
                   -> case GHC.Prim.>=# ww 11# of lwild {
                        DEFAULT
                        -> \ (x :: GHC.Base.String) ->
                           GHC.CString.unpackAppendCString#
                             Language.PureScript.Ide.Command.$fShowImportCommand6
                             (Language.PureScript.Names.$w$cshowsPrec 11# b1 x)
                        1#
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.CString.unpackAppendCString#
                                Language.PureScript.Ide.Command.$fShowImportCommand6
                                (Language.PureScript.Names.$w$cshowsPrec
                                   11#
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))) }
                   Language.PureScript.Ide.Command.AddQualifiedImport b1 b2
                   -> let {
                        g1 :: GHC.Base.String -> GHC.Base.String
                          {- Arity: 1, Strictness: <L,U> -}
                        = \ (x :: GHC.Base.String) ->
                          Language.PureScript.Names.$w$cshowsPrec
                            11#
                            b1
                            (GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.showSpace1
                               (Language.PureScript.Names.$w$cshowsPrec 11# b2 x))
                      } in
                      case GHC.Prim.>=# ww 11# of lwild {
                        DEFAULT
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             Language.PureScript.Ide.Command.$fShowImportCommand4
                             (g1 x)
                        1#
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Language.PureScript.Ide.Command.$fShowImportCommand4
                                (g1 (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))) }
                   Language.PureScript.Ide.Command.AddImportForIdentifier b1 b2
                   -> let {
                        g1 :: GHC.Base.String -> GHC.Base.String
                        = GHC.Show.$fShowMaybe_$cshowsPrec
                            @ Language.PureScript.Names.ModuleName
                            Language.PureScript.Names.$fShowModuleName
                            Language.PureScript.Ide.Command.$fShowImportCommand3
                            b2
                      } in
                      case GHC.Prim.>=# ww 11# of lwild {
                        DEFAULT
                        -> \ (x :: GHC.Base.String) ->
                           GHC.CString.unpackAppendCString#
                             Language.PureScript.Ide.Command.$fShowImportCommand2
                             (case Data.Text.Show.$w$cshowsPrec
                                     b1
                                     (GHC.Types.:
                                        @ GHC.Types.Char
                                        GHC.Show.showSpace1
                                        (g1 x)) of ww1 { (#,#) ww2 ww3 ->
                              GHC.Types.: @ GHC.Types.Char ww2 ww3 })
                        1#
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.CString.unpackAppendCString#
                                Language.PureScript.Ide.Command.$fShowImportCommand2
                                (case Data.Text.Show.$w$cshowsPrec
                                        b1
                                        (GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.showSpace1
                                           (g1
                                              (GHC.Types.:
                                                 @ GHC.Types.Char
                                                 GHC.Show.$fShow(,)2
                                                 x))) of ww1 { (#,#) ww2 ww3 ->
                                 GHC.Types.: @ GHC.Types.Char ww2 ww3 })) } }) -}
a88c1d76323e13ff12237806a67427b8
  data Command
    = Load [Language.PureScript.Names.ModuleName]
    | LoadSync [Language.PureScript.Names.ModuleName]
    | Type {typeSearch :: Data.Text.Internal.Text,
            typeFilters :: [Language.PureScript.Ide.Filter.Filter],
            typeCurrentModule :: GHC.Base.Maybe
                                   Language.PureScript.Names.ModuleName}
    | Complete {completeFilters :: [Language.PureScript.Ide.Filter.Filter],
                completeMatcher :: Language.PureScript.Ide.Matcher.Matcher
                                     Language.PureScript.Ide.Types.IdeDeclarationAnn,
                completeCurrentModule :: GHC.Base.Maybe
                                           Language.PureScript.Names.ModuleName,
                completeOptions :: Language.PureScript.Ide.Completion.CompletionOptions}
    | CaseSplit {caseSplitLine :: Data.Text.Internal.Text,
                 caseSplitBegin :: GHC.Types.Int,
                 caseSplitEnd :: GHC.Types.Int,
                 caseSplitAnnotations :: Language.PureScript.Ide.CaseSplit.WildcardAnnotations,
                 caseSplitType :: Data.Text.Internal.Text}
    | AddClause {addClauseLine :: Data.Text.Internal.Text,
                 addClauseAnnotations :: Language.PureScript.Ide.CaseSplit.WildcardAnnotations}
    | FindUsages {usagesModule :: Language.PureScript.Names.ModuleName,
                  usagesIdentifier :: Data.Text.Internal.Text,
                  usagesNamespace :: Language.PureScript.Ide.Types.IdeNamespace}
    | Import GHC.IO.FilePath
             (GHC.Base.Maybe GHC.IO.FilePath)
             [Language.PureScript.Ide.Filter.Filter]
             Language.PureScript.Ide.Command.ImportCommand
    | List {listType :: Language.PureScript.Ide.Command.ListType}
    | Rebuild GHC.IO.FilePath
              (GHC.Base.Maybe GHC.IO.FilePath)
              (Data.Set.Internal.Set Language.PureScript.Options.CodegenTarget)
    | RebuildSync GHC.IO.FilePath
                  (GHC.Base.Maybe GHC.IO.FilePath)
                  (Data.Set.Internal.Set Language.PureScript.Options.CodegenTarget)
    | Cwd
    | Reset
    | Quit
07deb4e46a2651c5c6139da703385be6
  data ImportCommand
    = AddImplicitImport Language.PureScript.Names.ModuleName
    | AddQualifiedImport Language.PureScript.Names.ModuleName
                         Language.PureScript.Names.ModuleName
    | AddImportForIdentifier Data.Text.Internal.Text
                             (GHC.Base.Maybe Language.PureScript.Names.ModuleName)
59cbf007ab948bc3f3ff1ba2357c1dd1
  data ListType
    = LoadedModules | Imports GHC.IO.FilePath | AvailableModules
a88c1d76323e13ff12237806a67427b8
  addClauseAnnotations ::
    Language.PureScript.Ide.Command.Command
    -> Language.PureScript.Ide.CaseSplit.WildcardAnnotations
  RecSel Left Language.PureScript.Ide.Command.Command
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Command.Command) ->
                 case ds of wild {
                   DEFAULT -> Language.PureScript.Ide.Command.addClauseAnnotations1
                   Language.PureScript.Ide.Command.AddClause ds1 ds2 -> ds2 }) -}
f442d5e15bf8e98d6d22d0ec0369ae9e
  addClauseAnnotations1 ::
    Language.PureScript.Ide.CaseSplit.WildcardAnnotations
  {- Strictness: x -}
a88c1d76323e13ff12237806a67427b8
  addClauseLine ::
    Language.PureScript.Ide.Command.Command -> Data.Text.Internal.Text
  RecSel Left Language.PureScript.Ide.Command.Command
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Command.Command) ->
                 case ds of wild {
                   DEFAULT -> Language.PureScript.Ide.Command.addClauseLine1
                   Language.PureScript.Ide.Command.AddClause ds1 ds2 -> ds1 }) -}
28fbcda9cb30e299574f55d15a76f023
  addClauseLine1 :: Data.Text.Internal.Text
  {- Strictness: x -}
a88c1d76323e13ff12237806a67427b8
  caseSplitAnnotations ::
    Language.PureScript.Ide.Command.Command
    -> Language.PureScript.Ide.CaseSplit.WildcardAnnotations
  RecSel Left Language.PureScript.Ide.Command.Command
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Command.Command) ->
                 case ds of wild {
                   DEFAULT -> Language.PureScript.Ide.Command.caseSplitAnnotations1
                   Language.PureScript.Ide.Command.CaseSplit ds1 ds2 ds3 ds4 ds5
                   -> ds4 }) -}
e60376480aee75ed24e0468c5b99ca45
  caseSplitAnnotations1 ::
    Language.PureScript.Ide.CaseSplit.WildcardAnnotations
  {- Strictness: x -}
a88c1d76323e13ff12237806a67427b8
  caseSplitBegin ::
    Language.PureScript.Ide.Command.Command -> GHC.Types.Int
  RecSel Left Language.PureScript.Ide.Command.Command
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Command.Command) ->
                 case ds of wild {
                   DEFAULT -> Language.PureScript.Ide.Command.caseSplitBegin1
                   Language.PureScript.Ide.Command.CaseSplit ds1 ds2 ds3 ds4 ds5
                   -> ds2 }) -}
5c4eb35b90d8328fe92bb081035fd745
  caseSplitBegin1 :: GHC.Types.Int
  {- Strictness: x -}
a88c1d76323e13ff12237806a67427b8
  caseSplitEnd ::
    Language.PureScript.Ide.Command.Command -> GHC.Types.Int
  RecSel Left Language.PureScript.Ide.Command.Command
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Command.Command) ->
                 case ds of wild {
                   DEFAULT -> Language.PureScript.Ide.Command.caseSplitEnd1
                   Language.PureScript.Ide.Command.CaseSplit ds1 ds2 ds3 ds4 ds5
                   -> ds3 }) -}
b41588ab0a51b96684c0077576b73c3b
  caseSplitEnd1 :: GHC.Types.Int
  {- Strictness: x -}
a88c1d76323e13ff12237806a67427b8
  caseSplitLine ::
    Language.PureScript.Ide.Command.Command -> Data.Text.Internal.Text
  RecSel Left Language.PureScript.Ide.Command.Command
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Command.Command) ->
                 case ds of wild {
                   DEFAULT -> Language.PureScript.Ide.Command.caseSplitLine1
                   Language.PureScript.Ide.Command.CaseSplit ds1 ds2 ds3 ds4 ds5
                   -> ds1 }) -}
b14a635b5a9489aecfba7031df1f6939
  caseSplitLine1 :: Data.Text.Internal.Text
  {- Strictness: x -}
a88c1d76323e13ff12237806a67427b8
  caseSplitType ::
    Language.PureScript.Ide.Command.Command -> Data.Text.Internal.Text
  RecSel Left Language.PureScript.Ide.Command.Command
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Command.Command) ->
                 case ds of wild {
                   DEFAULT -> Language.PureScript.Ide.Command.caseSplitType1
                   Language.PureScript.Ide.Command.CaseSplit ds1 ds2 ds3 ds4 ds5
                   -> ds5 }) -}
85159d592db92a321fcf4b8fb8080c18
  caseSplitType1 :: Data.Text.Internal.Text
  {- Strictness: x -}
d23db938be2d9abe33633392953cb123
  commandName ::
    Language.PureScript.Ide.Command.Command -> Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (c :: Language.PureScript.Ide.Command.Command) ->
                 case c of wild {
                   Language.PureScript.Ide.Command.Load ds
                   -> Language.PureScript.Ide.Command.commandName27
                   Language.PureScript.Ide.Command.LoadSync ds
                   -> Language.PureScript.Ide.Command.commandName25
                   Language.PureScript.Ide.Command.Type ds ds1 ds2
                   -> Language.PureScript.Ide.Command.commandName23
                   Language.PureScript.Ide.Command.Complete ds ds1 ds2 ds3
                   -> Language.PureScript.Ide.Command.commandName21
                   Language.PureScript.Ide.Command.CaseSplit ds ds1 ds2 ds3 ds4
                   -> Language.PureScript.Ide.Command.commandName19
                   Language.PureScript.Ide.Command.AddClause ds ds1
                   -> Language.PureScript.Ide.Command.commandName17
                   Language.PureScript.Ide.Command.FindUsages ds ds1 ds2
                   -> Language.PureScript.Ide.Command.commandName15
                   Language.PureScript.Ide.Command.Import ds ds1 ds2 ds3
                   -> Language.PureScript.Ide.Command.commandName13
                   Language.PureScript.Ide.Command.List ds
                   -> Language.PureScript.Ide.Command.commandName11
                   Language.PureScript.Ide.Command.Rebuild ds ds1 ds2
                   -> Language.PureScript.Ide.Command.commandName9
                   Language.PureScript.Ide.Command.RebuildSync ds ds1 ds2
                   -> Language.PureScript.Ide.Command.commandName7
                   Language.PureScript.Ide.Command.Cwd
                   -> Language.PureScript.Ide.Command.commandName5
                   Language.PureScript.Ide.Command.Reset
                   -> Language.PureScript.Ide.Command.commandName3
                   Language.PureScript.Ide.Command.Quit
                   -> Language.PureScript.Ide.Command.commandName1 }) -}
9594850feeabe9fff4f0d20a7f831681
  commandName1 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Ide.Command.commandName2) -}
3150e7cf126a866b69823ae4f96ff752
  commandName10 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Rebuild"#) -}
2ea3eb229b1ccacb8648d2bd8c30d05c
  commandName11 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Ide.Command.commandName12) -}
a030a9fcbace9d64f22a4a2abfc763e3
  commandName12 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("List"#) -}
83dd5f335be88578ed5bd3fb7e34689e
  commandName13 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Ide.Command.commandName14) -}
b904ecf0bcc03c6558f3f3efc55432df
  commandName14 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Import"#) -}
9b8cbfad0a508cb979f3ad6f69a0dfc1
  commandName15 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Ide.Command.commandName16) -}
bce752c26deb9167883205d9ebf03550
  commandName16 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("FindUsages"#) -}
97145a80482716c93c5e8165912249de
  commandName17 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Ide.Command.commandName18) -}
1904493edb77d0981d3135773c136fd1
  commandName18 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("AddClause"#) -}
7c0b33bf57c0817740d990c1e1828e55
  commandName19 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Ide.Command.commandName20) -}
01fe849c22cd856045c431c6fb08cf45
  commandName2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Quit"#) -}
b9e7bf20be7a99c81a7ec9d18342bb7c
  commandName20 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("CaseSplit"#) -}
8817c83d746591d48ca21cdc477eed5c
  commandName21 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Ide.Command.commandName22) -}
bd787bf0dfb94a6dbfa47eca586eeef0
  commandName22 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Complete"#) -}
2ee77ceb9bd287249b9c886c593f98a8
  commandName23 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Ide.Command.commandName24) -}
9e706c9a4690ae8917a66417f5a54323
  commandName24 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Type"#) -}
4a658c99be3c7d0277b24f7ed0d5a582
  commandName25 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Ide.Command.commandName26) -}
2fb131b168d81dc96f1a4a09108cd274
  commandName26 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("LoadSync"#) -}
4c941a90f8771ce980856132560d6564
  commandName27 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Ide.Command.commandName28) -}
647dd46c8f7d23f8123c20303edb26e1
  commandName28 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Load"#) -}
2674ee36a14b70fbc08250189d286dd5
  commandName3 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Ide.Command.commandName4) -}
78d9f91afe83809f4f3b2d46e99e5a93
  commandName4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Reset"#) -}
6b8477637234b19f61951cd3df184305
  commandName5 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Ide.Command.commandName6) -}
e562da6f925fa622c2fc313e82e62d8d
  commandName6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Cwd"#) -}
596d6a2ef64fa039692e7911ee2d9dd4
  commandName7 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Ide.Command.commandName8) -}
fe85d1fb0e0f5e50cb50ac9ef516ee30
  commandName8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("RebuildSync"#) -}
afc4f2ff46346a99b9831d6dcabf0c6e
  commandName9 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Ide.Command.commandName10) -}
a88c1d76323e13ff12237806a67427b8
  completeCurrentModule ::
    Language.PureScript.Ide.Command.Command
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
  RecSel Left Language.PureScript.Ide.Command.Command
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Command.Command) ->
                 case ds of wild {
                   DEFAULT -> Language.PureScript.Ide.Command.completeCurrentModule1
                   Language.PureScript.Ide.Command.Complete ds1 ds2 ds3 ds4
                   -> ds3 }) -}
0eb8ae073b694b2edab131b62f22b7e9
  completeCurrentModule1 ::
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
  {- Strictness: x -}
a88c1d76323e13ff12237806a67427b8
  completeFilters ::
    Language.PureScript.Ide.Command.Command
    -> [Language.PureScript.Ide.Filter.Filter]
  RecSel Left Language.PureScript.Ide.Command.Command
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Command.Command) ->
                 case ds of wild {
                   DEFAULT -> Language.PureScript.Ide.Command.completeFilters1
                   Language.PureScript.Ide.Command.Complete ds1 ds2 ds3 ds4
                   -> ds1 }) -}
dfdfbbbe2044f7f632578428c8f11fa0
  completeFilters1 :: [Language.PureScript.Ide.Filter.Filter]
  {- Strictness: x -}
a88c1d76323e13ff12237806a67427b8
  completeMatcher ::
    Language.PureScript.Ide.Command.Command
    -> Language.PureScript.Ide.Matcher.Matcher
         Language.PureScript.Ide.Types.IdeDeclarationAnn
  RecSel Left Language.PureScript.Ide.Command.Command
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Command.Command) ->
                 case ds of wild {
                   DEFAULT -> Language.PureScript.Ide.Command.completeMatcher1
                   Language.PureScript.Ide.Command.Complete ds1 ds2 ds3 ds4
                   -> ds2 }) -}
1a58b2fd2aca3e3f773d92927ee6c179
  completeMatcher1 ::
    Language.PureScript.Ide.Matcher.Matcher
      Language.PureScript.Ide.Types.IdeDeclarationAnn
  {- Strictness: x -}
a88c1d76323e13ff12237806a67427b8
  completeOptions ::
    Language.PureScript.Ide.Command.Command
    -> Language.PureScript.Ide.Completion.CompletionOptions
  RecSel Left Language.PureScript.Ide.Command.Command
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Command.Command) ->
                 case ds of wild {
                   DEFAULT -> Language.PureScript.Ide.Command.completeOptions1
                   Language.PureScript.Ide.Command.Complete ds1 ds2 ds3 ds4
                   -> ds4 }) -}
9998a6eaedac1f535c68edf4e58a69fd
  completeOptions1 ::
    Language.PureScript.Ide.Completion.CompletionOptions
  {- Strictness: x -}
a88c1d76323e13ff12237806a67427b8
  listType ::
    Language.PureScript.Ide.Command.Command
    -> Language.PureScript.Ide.Command.ListType
  RecSel Left Language.PureScript.Ide.Command.Command
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Command.Command) ->
                 case ds of wild {
                   DEFAULT -> Language.PureScript.Ide.Command.listType1
                   Language.PureScript.Ide.Command.List ds1 -> ds1 }) -}
76563219ad61472d1d93b1b8f1a412f3
  listType1 :: Language.PureScript.Ide.Command.ListType
  {- Strictness: x -}
a88c1d76323e13ff12237806a67427b8
  typeCurrentModule ::
    Language.PureScript.Ide.Command.Command
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
  RecSel Left Language.PureScript.Ide.Command.Command
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Command.Command) ->
                 case ds of wild {
                   DEFAULT -> Language.PureScript.Ide.Command.typeCurrentModule1
                   Language.PureScript.Ide.Command.Type ds1 ds2 ds3 -> ds3 }) -}
25ccb403e57ca7f083aff14cd4ae6759
  typeCurrentModule1 ::
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
  {- Strictness: x -}
a88c1d76323e13ff12237806a67427b8
  typeFilters ::
    Language.PureScript.Ide.Command.Command
    -> [Language.PureScript.Ide.Filter.Filter]
  RecSel Left Language.PureScript.Ide.Command.Command
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Command.Command) ->
                 case ds of wild {
                   DEFAULT -> Language.PureScript.Ide.Command.typeFilters1
                   Language.PureScript.Ide.Command.Type ds1 ds2 ds3 -> ds2 }) -}
266b8d43b47ea11a41a365c17cbaf5cf
  typeFilters1 :: [Language.PureScript.Ide.Filter.Filter]
  {- Strictness: x -}
a88c1d76323e13ff12237806a67427b8
  typeSearch ::
    Language.PureScript.Ide.Command.Command -> Data.Text.Internal.Text
  RecSel Left Language.PureScript.Ide.Command.Command
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Command.Command) ->
                 case ds of wild {
                   DEFAULT -> Language.PureScript.Ide.Command.typeSearch1
                   Language.PureScript.Ide.Command.Type ds1 ds2 ds3 -> ds1 }) -}
6dccaa6089c1bd058a58cb2a2f7c4aa3
  typeSearch1 :: Data.Text.Internal.Text
  {- Strictness: x -}
a88c1d76323e13ff12237806a67427b8
  usagesIdentifier ::
    Language.PureScript.Ide.Command.Command -> Data.Text.Internal.Text
  RecSel Left Language.PureScript.Ide.Command.Command
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Command.Command) ->
                 case ds of wild {
                   DEFAULT -> Language.PureScript.Ide.Command.usagesIdentifier1
                   Language.PureScript.Ide.Command.FindUsages ds1 ds2 ds3 -> ds2 }) -}
84aea4cbdd0f17f7745f41ecdef622ab
  usagesIdentifier1 :: Data.Text.Internal.Text
  {- Strictness: x -}
a88c1d76323e13ff12237806a67427b8
  usagesModule ::
    Language.PureScript.Ide.Command.Command
    -> Language.PureScript.Names.ModuleName
  RecSel Left Language.PureScript.Ide.Command.Command
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Command.Command) ->
                 case ds of wild {
                   DEFAULT -> Language.PureScript.Ide.Command.usagesModule1
                   Language.PureScript.Ide.Command.FindUsages ds1 ds2 ds3 -> ds1 }) -}
82c4c7279d6a511c9672bf1b0118c05c
  usagesModule1 :: Language.PureScript.Names.ModuleName
  {- Strictness: x -}
a88c1d76323e13ff12237806a67427b8
  usagesNamespace ::
    Language.PureScript.Ide.Command.Command
    -> Language.PureScript.Ide.Types.IdeNamespace
  RecSel Left Language.PureScript.Ide.Command.Command
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Command.Command) ->
                 case ds of wild {
                   DEFAULT -> Language.PureScript.Ide.Command.usagesNamespace1
                   Language.PureScript.Ide.Command.FindUsages ds1 ds2 ds3 -> ds3 }) -}
7962a54d9cea6272a41e64c511ee6e4a
  usagesNamespace1 :: Language.PureScript.Ide.Types.IdeNamespace
  {- Strictness: x -}
instance GHC.Classes.Eq [Language.PureScript.Ide.Command.ImportCommand]
  = Language.PureScript.Ide.Command.$fEqImportCommand
instance Data.Aeson.Types.FromJSON.FromJSON [Language.PureScript.Ide.Command.Command]
  = Language.PureScript.Ide.Command.$fFromJSONCommand
instance Data.Aeson.Types.FromJSON.FromJSON [Language.PureScript.Ide.Command.ImportCommand]
  = Language.PureScript.Ide.Command.$fFromJSONImportCommand
instance Data.Aeson.Types.FromJSON.FromJSON [Language.PureScript.Ide.Command.ListType]
  = Language.PureScript.Ide.Command.$fFromJSONListType
instance GHC.Show.Show [Language.PureScript.Ide.Command.ImportCommand]
  = Language.PureScript.Ide.Command.$fShowImportCommand
"SPEC/Language.PureScript.Ide.Command fromList @ CodegenTarget" [orphan] forall ($dOrd :: GHC.Classes.Ord
                                                                                            Language.PureScript.Options.CodegenTarget)
  Data.Set.Internal.fromList @ Language.PureScript.Options.CodegenTarget
                             $dOrd
  = Language.PureScript.Ide.Command.$sfromList
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

