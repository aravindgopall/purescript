
==================== FINAL INTERFACE ====================
2019-01-24 14:14:12.561506 UTC

interface purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.Exported 8043
  interface hash: d52942b92137e97a0f1090f363b70633
  ABI hash: 35d5252d09ea4b599a53ca5936193681
  export-list hash: 5fa2c4aa32577711abcd5514495ff3ca
  orphan hash: b68e8c6e381211535e5786cdb0808393
  flag hash: de35dcd1d43076a5ced1b1f2744d7ead
  opt_hash: 2c98c95d41c045ae9c2fb565ec8aabc6
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Language.PureScript.AST.Exported.exportedDeclarations
  Language.PureScript.AST.Exported.isExported
module dependencies: Control.Monad.Supply
                     Control.Monad.Supply.Class Language.PureScript.AST.Binders
                     Language.PureScript.AST.Declarations
                     Language.PureScript.AST.Literals Language.PureScript.AST.Operators
                     Language.PureScript.AST.SourcePos Language.PureScript.Bundle
                     Language.PureScript.Comments Language.PureScript.Constants
                     Language.PureScript.Crash Language.PureScript.Environment
                     Language.PureScript.Kinds Language.PureScript.Label
                     Language.PureScript.Names Language.PureScript.PSString
                     Language.PureScript.TypeClassDictionaries Language.PureScript.Types
                     Paths_purescript
package dependencies: aeson-1.3.1.1 array-0.5.2.0 async-2.2.1
                      attoparsec-0.13.2.2 base-4.11.1.0 base-compat-0.10.4 binary-0.8.5.1
                      blaze-builder-0.4.1.0 bytestring-0.10.8.2 containers-0.5.11.0
                      deepseq-1.4.3.0 dlist-0.8.0.4 filepath-1.4.2 ghc-boot-th-8.4.3
                      ghc-prim-0.5.2.0 hashable-1.2.7.0 integer-gmp-1.0.2.0
                      integer-logarithms-1.0.2.1 language-javascript-0.6.0.11
                      microlens-0.4.9.1 microlens-ghc-0.4.9 microlens-mtl-0.1.11.1
                      microlens-platform-0.3.10 microlens-th-0.4.2.1 mtl-2.2.2
                      parsec-3.1.13.0 pretty-1.1.3.6 primitive-0.6.3.0 protolude-0.2.2
                      random-1.1 scientific-0.3.6.2 sourcemap-0.1.6 stm-2.4.5.0 syb-0.7
                      tagged-0.8.5 template-haskell-2.13.0.0 text-1.2.3.0
                      th-abstraction-0.2.8.0 time-1.8.0.2 time-locale-compat-0.1.1.4
                      transformers-0.5.5.0 unordered-containers-0.2.9.0
                      utf8-string-1.0.1.1 uuid-types-1.0.3 vector-0.12.0.1
orphans: syb-0.7:Data.Generics.Instances
         stm-2.4.5.0:Control.Monad.STM
         microlens-platform-0.3.10:Lens.Micro.Platform
         microlens-ghc-0.4.9:Lens.Micro.GHC
         attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         vector-0.12.0.1:Data.Vector.Unboxed
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.0:Data.Text.Lazy
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.5.0:Control.Monad.Trans.Error
         text-1.2.3.0:Data.Text binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: aeson-1.3.1.1:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.Graph
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         dlist-0.8.0.4:Data.DList ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         microlens-0.4.9.1:Lens.Micro.Internal
                         microlens-ghc-0.4.9:Lens.Micro.GHC
                         microlens-mtl-0.1.11.1:Lens.Micro.Mtl.Internal
                         microlens-platform-0.3.10:Lens.Micro.Platform
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.Declarations
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.Operators
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.SourcePos
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Comments
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Environment
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Kinds
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Label
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Names
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.PSString
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.TypeClassDictionaries
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Types
                         tagged-0.8.5:Data.Tagged
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
                         th-abstraction-0.2.8.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  base-4.11.1.0:Control.Category b839bca5d85319b86c37d29f1613a5a2
import  -/  base-4.11.1.0:Data.Either 39d922b371c4c52d426e9ee66de8371a
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.Function 6e6aae9442025aeeb92a909c1bbc3fca
import  -/  base-4.11.1.0:Data.Maybe 409c3da2b142470b68be39ce1d97a9f7
import  -/  base-4.11.1.0:Data.OldList 1b35aa3c6805ff7c8887a35a866fe006
import  -/  base-4.11.1.0:Data.Tuple 3af66f3ac61ed95ba8a3a3f68ebc5003
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-compat-0.10.4:Prelude.Compat bb6796186ed35a1d09dc34362a3fc27e
import  -/  containers-0.5.11.0:Data.Map 0dbdaec812ef695a364aa6c69e7f7d53
import  -/  containers-0.5.11.0:Data.Map.Internal 0150e210d0ae8df0f3a0669d5e32d8fa
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  protolude-0.2.2:Protolude 2c2d16096c8a60f59f646a3b93b0eb7b
import  -/  Language.PureScript.AST.Declarations 586bc75044e8737d02875208d17d4395
  exports: ca3189140688cddb12d34cdf2c0663e4
  DataDeclaration 2fcba6ad709595ed3c4d0926de54bc2c
  Declaration e92f6ee78a22c0eadc3566d7d1f48d5b
  DeclarationRef 1ef988d2f8db98f35f578bde9282f468
  Module 305128e30e200d34d712365aa2d509df
  Module 3342e00ee072addfd009ee61e87fb865
  TypeClassRef 0dfae6fa12be94e312c419132246a1f3
  TypeInstanceDeclaration 46d66658dd5a30ba03e36fc960162f20
  TypeRef 7b2aa9fe81ad40f64c659855da835def
  declName 346365fb28af384d04391dc396f98282
  declRefName a467a4d4938967e35bf0f7f0e0d07090
  flattenDecls f5b36690439fd53d08448e92938999ee
import  -/  Language.PureScript.Names 00f694509122478d97b327fbbccae327
  exports: ad7ae34f85124c68e8ba1c90fb2e732f
  ClassName c5d98a635cb261f6a93bf01096d0c6ed
  ConstructorName 84054a8bbbe827ba2ce7da83056a95ee
  ModuleName 1b2ddf0c04464d2fa2588925f10c1966
  ProperName a7268334e0b909381550b9329cb80fcc
  Qualified 1b2ddf0c04464d2fa2588925f10c1966
  TypeName 40ce511c66a72431b4e87351210f7b03
  disqualify bf1cc3b0e6c1ffc0008a6113bf8116c0
  isQualified aaa813ca766a4e34b35755fcebd13831
  isQualifiedWith 8f37d555d49f68d6076bf50c183e125a
import  -/  Language.PureScript.Types 80a51f62cb3e6c71f024289b88f07b7f
  exports: 229bb7528146da886cffbefad5822e19
  ConstrainedType 7b7b9fe5fc37a912cec5b01815c7784d
  TypeConstructor c7b7bcec494a17e684a206aeb55ef57b
  constraintArgs d5fc19231e8a71936895da17eade4f5b
  constraintClass d5fc19231e8a71936895da17eade4f5b
  everythingOnTypes a337a56452e37b7c1eabcf74ce7ae28d
c2fc1f7c17d0911fb221263a6d6c08b4
  $s$fEqEither ::
    GHC.Classes.Eq
      (Data.Either.Either
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName))
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Either.Either
                       (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ClassName)
                       (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.TypeName))
                  (\ (ds :: Data.Either.Either
                              (Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.ClassName)
                              (Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.TypeName))
                     (ds1 :: Data.Either.Either
                               (Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.ClassName)
                               (Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.TypeName)) ->
                   case ds of wild {
                     Data.Either.Left a1
                     -> case ds1 of wild1 {
                          Data.Either.Left b1
                          -> Data.Text.$fEqText_$c==
                               a1
                                 `cast`
                               (Language.PureScript.Names.N:ProperName[0]
                                    <'Language.PureScript.Names.ClassName>_P)
                               b1
                                 `cast`
                               (Language.PureScript.Names.N:ProperName[0]
                                    <'Language.PureScript.Names.ClassName>_P)
                          Data.Either.Right ipv -> GHC.Types.False }
                     Data.Either.Right a1
                     -> case ds1 of wild1 {
                          Data.Either.Left ipv -> GHC.Types.False
                          Data.Either.Right b1
                          -> Data.Text.$fEqText_$c==
                               a1
                                 `cast`
                               (Language.PureScript.Names.N:ProperName[0]
                                    <'Language.PureScript.Names.TypeName>_P)
                               b1
                                 `cast`
                               (Language.PureScript.Names.N:ProperName[0]
                                    <'Language.PureScript.Names.TypeName>_P) } })
                  Language.PureScript.AST.Exported.$s$fEqEither_$s$fEqEither_$c/= -}
b5e4a994385d1d161fb6f8415f7d7552
  $s$fEqEither_$s$fEqEither_$c/= ::
    Data.Either.Either
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName)
    -> Data.Either.Either
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName)
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Data.Either.Either
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ClassName)
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.TypeName))
                   (y :: Data.Either.Either
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ClassName)
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.TypeName)) ->
                 case x of wild {
                   Data.Either.Left a1
                   -> case y of wild1 {
                        Data.Either.Left b1
                        -> case a1
                                  `cast`
                                (Language.PureScript.Names.N:ProperName[0]
                                     <'Language.PureScript.Names.ClassName>_P) of wild2 { Data.Text.Internal.Text dt dt1 dt2 ->
                           case b1
                                  `cast`
                                (Language.PureScript.Names.N:ProperName[0]
                                     <'Language.PureScript.Names.ClassName>_P) of wild3 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                           case GHC.Classes.eqInt
                                  (GHC.Types.I# dt2)
                                  (GHC.Types.I# dt5) of wild4 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True
                             -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.ByteArray#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.State# GHC.Prim.RealWorld
                                                               -> (# GHC.Prim.State#
                                                                       GHC.Prim.RealWorld,
                                                                     GHC.Prim.Int# #)}
                                       dt
                                       (GHC.Prim.int2Word# dt1)
                                       dt3
                                       (GHC.Prim.int2Word# dt4)
                                       (GHC.Prim.int2Word# dt2)
                                       GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                                case GHC.Int.eqInt32
                                       (GHC.Int.I32# (GHC.Prim.narrow32Int# ds3))
                                       (GHC.Int.I32# 0#) of wild6 {
                                  GHC.Types.False -> GHC.Types.True
                                  GHC.Types.True -> GHC.Types.False } } } } }
                        Data.Either.Right ipv -> GHC.Types.True }
                   Data.Either.Right a1
                   -> case y of wild1 {
                        Data.Either.Left ipv -> GHC.Types.True
                        Data.Either.Right b1
                        -> case a1
                                  `cast`
                                (Language.PureScript.Names.N:ProperName[0]
                                     <'Language.PureScript.Names.TypeName>_P) of wild2 { Data.Text.Internal.Text dt dt1 dt2 ->
                           case b1
                                  `cast`
                                (Language.PureScript.Names.N:ProperName[0]
                                     <'Language.PureScript.Names.TypeName>_P) of wild3 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                           case GHC.Classes.eqInt
                                  (GHC.Types.I# dt2)
                                  (GHC.Types.I# dt5) of wild4 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True
                             -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.ByteArray#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.State# GHC.Prim.RealWorld
                                                               -> (# GHC.Prim.State#
                                                                       GHC.Prim.RealWorld,
                                                                     GHC.Prim.Int# #)}
                                       dt
                                       (GHC.Prim.int2Word# dt1)
                                       dt3
                                       (GHC.Prim.int2Word# dt4)
                                       (GHC.Prim.int2Word# dt2)
                                       GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                                case GHC.Int.eqInt32
                                       (GHC.Int.I32# (GHC.Prim.narrow32Int# ds3))
                                       (GHC.Int.I32# 0#) of wild6 {
                                  GHC.Types.False -> GHC.Types.True
                                  GHC.Types.True -> GHC.Types.False } } } } } } }) -}
09b2aa8bc253720f9c839253c2d3f898
  $sfromList ::
    [(Language.PureScript.Names.Name, a)]
    -> Data.Map.Internal.Map Language.PureScript.Names.Name a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a (ds :: [(Language.PureScript.Names.Name, a)]) ->
                 case ds of wild {
                   [] -> Data.Map.Internal.Tip @ Language.PureScript.Names.Name @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case kx of dt { DEFAULT ->
                           Data.Map.Internal.Bin
                             @ Language.PureScript.Names.Name
                             @ a
                             1#
                             dt
                             x
                             (Data.Map.Internal.Tip @ Language.PureScript.Names.Name @ a)
                             (Data.Map.Internal.Tip @ Language.PureScript.Names.Name @ a) }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case Language.PureScript.Names.$fOrdName_$ccompare kx ky of wild4 {
                             DEFAULT
                             -> case kx of dt { DEFAULT ->
                                Language.PureScript.AST.Exported.$sfromList_$spoly_go14
                                  @ a
                                  ky
                                  ds3
                                  ipv1
                                  (Data.Map.Internal.Bin
                                     @ Language.PureScript.Names.Name
                                     @ a
                                     1#
                                     dt
                                     x
                                     (Data.Map.Internal.Tip @ Language.PureScript.Names.Name @ a)
                                     (Data.Map.Internal.Tip @ Language.PureScript.Names.Name @ a)) }
                             GHC.Types.LT
                             -> case kx of dt { DEFAULT ->
                                Language.PureScript.AST.Exported.$sfromList_$s$wpoly_go13
                                  @ a
                                  ky
                                  ds3
                                  ipv1
                                  (Data.Map.Internal.Bin
                                     @ Language.PureScript.Names.Name
                                     @ a
                                     1#
                                     dt
                                     x
                                     (Data.Map.Internal.Tip @ Language.PureScript.Names.Name @ a)
                                     (Data.Map.Internal.Tip @ Language.PureScript.Names.Name @ a))
                                  1# } } } } } }) -}
4212a8a45909d414d41b7991544caf1c
  $sfromList_$s$wpoly_go13 ::
    Language.PureScript.Names.Name
    -> a
    -> [(Language.PureScript.Names.Name, a)]
    -> Data.Map.Internal.Map Language.PureScript.Names.Name a
    -> GHC.Prim.Int#
    -> Data.Map.Internal.Map Language.PureScript.Names.Name a
  {- Arity: 5, Strictness: <S,U><L,U><S,1*U><S,1*U><L,U> -}
1bd20bc30ec53a48b2f4d7a75f8ec65b
  $sfromList_$spoly_go14 ::
    Language.PureScript.Names.Name
    -> a
    -> [(Language.PureScript.Names.Name, a)]
    -> Data.Map.Internal.Map Language.PureScript.Names.Name a
    -> Data.Map.Internal.Map Language.PureScript.Names.Name a
  {- Arity: 4, Strictness: <S,U><L,U><S,1*U><S,1*U> -}
f9c5a3259f317093c742fc03ed1883f2
  $sinsert_$sgo13 ::
    Language.PureScript.Names.Name
    -> Language.PureScript.Names.Name
    -> a1
    -> Data.Map.Internal.Map Language.PureScript.Names.Name a1
    -> Data.Map.Internal.Map Language.PureScript.Names.Name a1
  {- Arity: 4, Strictness: <L,U><S,1*U><L,U><S,1*U> -}
d91eefc5872039ae1afc8c42dbc8fd37
  $slookup1 ::
    Language.PureScript.Names.Name
    -> Data.Map.Internal.Map Language.PureScript.Names.Name a
    -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
e606fa61c8412f5b0d167efb2498b872
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Language.PureScript.AST.Exported.$trModule3
                   Language.PureScript.AST.Exported.$trModule1) -}
7e7f3afdab52f9c707dad28be85d4a0f
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Exported.$trModule2) -}
f0a1416e434125e388a1e702f1bcc23f
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Language.PureScript.AST.Exported"#) -}
f297e30352de4719921f9f676d82e827
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Exported.$trModule4) -}
025f248d242bc27f4297e0c331add3ee
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"#) -}
91923f22eb8e9f854b0071ce22666b0a
  $wexportedDeclarations ::
    Language.PureScript.Names.ModuleName
    -> [Language.PureScript.AST.Declarations.Declaration]
    -> GHC.Base.Maybe
         [Language.PureScript.AST.Declarations.DeclarationRef]
    -> [Language.PureScript.AST.Declarations.Declaration]
  {- Arity: 3, Strictness: <L,U><S,1*U><S,U>, Inline: [0] -}
a778de38fea1ad931bb5793b1c0929a2
  exportedDeclarations ::
    Language.PureScript.AST.Declarations.Module
    -> [Language.PureScript.AST.Declarations.Declaration]
  {- Arity: 1, Strictness: <S(LLLSS),1*U(A,A,U,1*U,U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.PureScript.AST.Declarations.Module) ->
                 case w of ww { Language.PureScript.AST.Declarations.Module ww1 ww2 ww3 ww4 ww5 ->
                 Language.PureScript.AST.Exported.$wexportedDeclarations
                   ww3
                   ww4
                   ww5 }) -}
1091ffd5e19d5d0065f855d778ee28cd
  isExported ::
    GHC.Base.Maybe
      [Language.PureScript.AST.Declarations.DeclarationRef]
    -> Language.PureScript.AST.Declarations.Declaration
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U> -}
"SPEC/Language.PureScript.AST.Exported $fEqEither @ (ProperName
                                                      'ClassName) @ (ProperName 'TypeName)" [orphan] forall (v1 :: GHC.Classes.Eq
                                                                                                                                                                                     (Language.PureScript.Names.ProperName
                                                                                                                                                                                        'Language.PureScript.Names.TypeName))
                                                                                                                                                                            (v :: GHC.Classes.Eq
                                                                                                                                                                                    (Language.PureScript.Names.ProperName
                                                                                                                                                                                       'Language.PureScript.Names.ClassName))
  Data.Either.$fEqEither @ (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ClassName)
                         @ (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.TypeName)
                         v
                         v1
  = Language.PureScript.AST.Exported.$s$fEqEither
"SPEC/Language.PureScript.AST.Exported $fEqEither_$c/= @ (ProperName
                                                           'ClassName) @ (ProperName 'TypeName)" [orphan] forall ($dEq1 :: GHC.Classes.Eq
                                                                                                                                                                                                  (Language.PureScript.Names.ProperName
                                                                                                                                                                                                     'Language.PureScript.Names.TypeName))
                                                                                                                                                                                      ($dEq :: GHC.Classes.Eq
                                                                                                                                                                                                 (Language.PureScript.Names.ProperName
                                                                                                                                                                                                    'Language.PureScript.Names.ClassName))
  Data.Either.$fEqEither_$c/= @ (Language.PureScript.Names.ProperName
                                   'Language.PureScript.Names.ClassName)
                              @ (Language.PureScript.Names.ProperName
                                   'Language.PureScript.Names.TypeName)
                              $dEq
                              $dEq1
  = Language.PureScript.AST.Exported.$s$fEqEither_$s$fEqEither_$c/=
"SPEC/Language.PureScript.AST.Exported fromList @ Name _" [orphan] forall @ a
                                                                          ($dOrd :: GHC.Classes.Ord
                                                                                      Language.PureScript.Names.Name)
  Data.Map.Internal.fromList @ Language.PureScript.Names.Name
                             @ a
                             $dOrd
  = Language.PureScript.AST.Exported.$sfromList @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

