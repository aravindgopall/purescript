
==================== FINAL INTERFACE ====================
2018-11-30 20:46:31.979923 UTC

interface purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.AST.Exported 8043
  interface hash: edf78e2da16d9d19bbf951af96c2498d
  ABI hash: 2444000289cac04d19a71464030d0c24
  export-list hash: e8ab74b82024cfc9db679ef9a73c7b1c
  orphan hash: f8f374c3ee62c41943fdb70f40b375e8
  flag hash: de35dcd1d43076a5ced1b1f2744d7ead
  opt_hash: 2c98c95d41c045ae9c2fb565ec8aabc6
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Language.PureScript.AST.Exported.exportedDeclarations
  Language.PureScript.AST.Exported.isExported
module dependencies: Control.Monad.Supply
                     Control.Monad.Supply.Class Language.PureScript.AST.Binders
                     Language.PureScript.AST.Declarations
                     Language.PureScript.AST.Literals Language.PureScript.AST.Operators
                     Language.PureScript.AST.SourcePos Language.PureScript.Bundle
                     Language.PureScript.Comments Language.PureScript.Constants
                     Language.PureScript.Crash Language.PureScript.Environment
                     Language.PureScript.Kinds Language.PureScript.Label
                     Language.PureScript.Names Language.PureScript.PSString
                     Language.PureScript.TypeClassDictionaries Language.PureScript.Types
                     Paths_purescript
package dependencies: aeson-1.3.1.1 aeson-better-errors-0.9.1.0
                      array-0.5.2.0 async-2.2.1 attoparsec-0.13.2.2 base-4.11.1.0
                      base-compat-0.10.4 binary-0.8.5.1 blaze-builder-0.4.1.0
                      bytestring-0.10.8.2 containers-0.5.11.0 deepseq-1.4.3.0
                      dlist-0.8.0.4 filepath-1.4.2 ghc-boot-th-8.4.3 ghc-prim-0.5.2.0
                      hashable-1.2.7.0 integer-gmp-1.0.2.0 integer-logarithms-1.0.2.1
                      language-javascript-0.6.0.11 mtl-2.2.2 parsec-3.1.13.0
                      pretty-1.1.3.6 primitive-0.6.3.0 protolude-0.2.2 random-1.1
                      scientific-0.3.6.2 sourcemap-0.1.6 stm-2.4.5.0 syb-0.7 tagged-0.8.5
                      template-haskell-2.13.0.0 text-1.2.3.0 th-abstraction-0.2.8.0
                      time-1.8.0.2 time-locale-compat-0.1.1.4 transformers-0.5.5.0
                      unordered-containers-0.2.9.0 utf8-string-1.0.1.1 uuid-types-1.0.3
                      vector-0.12.0.1
orphans: syb-0.7:Data.Generics.Instances
         stm-2.4.5.0:Control.Monad.STM
         attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         vector-0.12.0.1:Data.Vector.Unboxed
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.0:Data.Text.Lazy
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.5.0:Control.Monad.Trans.Error
         text-1.2.3.0:Data.Text binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: aeson-1.3.1.1:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.Graph
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         dlist-0.8.0.4:Data.DList ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.AST.Declarations
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.AST.Operators
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.AST.SourcePos
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Environment
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Kinds
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Label
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Names
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.PSString
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.TypeClassDictionaries
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Types
                         tagged-0.8.5:Data.Tagged
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
                         th-abstraction-0.2.8.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  base-4.11.1.0:Control.Category b839bca5d85319b86c37d29f1613a5a2
import  -/  base-4.11.1.0:Data.Either 39d922b371c4c52d426e9ee66de8371a
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.Function 6e6aae9442025aeeb92a909c1bbc3fca
import  -/  base-4.11.1.0:Data.Maybe 409c3da2b142470b68be39ce1d97a9f7
import  -/  base-4.11.1.0:Data.OldList 1b35aa3c6805ff7c8887a35a866fe006
import  -/  base-4.11.1.0:Data.Tuple 3af66f3ac61ed95ba8a3a3f68ebc5003
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-compat-0.10.4:Prelude.Compat bb6796186ed35a1d09dc34362a3fc27e
import  -/  containers-0.5.11.0:Data.Map 0dbdaec812ef695a364aa6c69e7f7d53
import  -/  containers-0.5.11.0:Data.Map.Internal 0150e210d0ae8df0f3a0669d5e32d8fa
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  protolude-0.2.2:Protolude 2c2d16096c8a60f59f646a3b93b0eb7b
import  -/  Language.PureScript.AST.Declarations 568e046fbf27b243bfc96f09017d4782
  exports: 576360d4491bba45e29e263c5de23a07
  DataDeclaration db5935397ffc86d7f21188808af5170e
  Declaration b31d94d0c7b90700d40f9ba6ec420e41
  DeclarationRef 9de74e8b46bfd07e044a72617cc5da5c
  Module b9e5d519f3251f7053b581e4ecd9e6bf
  Module 7cf4b96f7d4b51b446726a099ab87bb6
  TypeClassRef 93a0e32770563d43fa3f04289a54725f
  TypeInstanceDeclaration c99b2ac93a5feb1209c747921a9e548b
  TypeRef f23e4bfa1c94ce55e9357e5fb97176c4
  declName e5f550546a379316c2a828bc4bea491c
  declRefName 088fcb4e3edc129f809097a23b6de3c2
  flattenDecls 49bcc2e170bd98aa1cb4c655d447837b
import  -/  Language.PureScript.Names b3bf151840f3e8f2eb61eff186432886
  exports: f7f3503d20957194bda83c16bb5f1288
  ClassName e69348bcf8c43a2174540a1d5983bfaa
  ConstructorName 9fb88e980342b224c2a4e4b58fa9fe33
  ModuleName 5a70062bbdf29e6dc659ad8bf5326b50
  ProperName 29f101e190cc99df85623423972e606f
  Qualified 5a70062bbdf29e6dc659ad8bf5326b50
  TypeName da42c92f73f4f363c63ecaf77b6335b9
  disqualify 3e7b8117c7613f1d74fadc5d62b59f54
  isQualified 05654f708f61367305cb83da20612eec
  isQualifiedWith 1a899c7992db0d6d9f94496786ac7c60
import  -/  Language.PureScript.Types 74562e642f5297557b3a23aac7819ad1
  exports: ae97bc75fcebc59f59c970736847a827
  ConstrainedType c2b3670e25b3b510981414df0f340e0f
  TypeConstructor 5e1c42d22ac701f08c049fde0171d9ac
  constraintArgs 93223f8afa90d0facc05a03f863dc72d
  constraintClass 93223f8afa90d0facc05a03f863dc72d
  everythingOnTypes ba4f3716db899e239fbb16fb1fa82a8f
2ee9e1e479e8bfeeb075db94dc1fe986
  $s$fEqEither ::
    GHC.Classes.Eq
      (Data.Either.Either
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName))
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Either.Either
                       (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ClassName)
                       (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.TypeName))
                  (\ (ds :: Data.Either.Either
                              (Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.ClassName)
                              (Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.TypeName))
                     (ds1 :: Data.Either.Either
                               (Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.ClassName)
                               (Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.TypeName)) ->
                   case ds of wild {
                     Data.Either.Left a1
                     -> case ds1 of wild1 {
                          Data.Either.Left b1
                          -> Data.Text.$fEqText_$c==
                               a1
                                 `cast`
                               (Language.PureScript.Names.N:ProperName[0]
                                    <'Language.PureScript.Names.ClassName>_P)
                               b1
                                 `cast`
                               (Language.PureScript.Names.N:ProperName[0]
                                    <'Language.PureScript.Names.ClassName>_P)
                          Data.Either.Right ipv -> GHC.Types.False }
                     Data.Either.Right a1
                     -> case ds1 of wild1 {
                          Data.Either.Left ipv -> GHC.Types.False
                          Data.Either.Right b1
                          -> Data.Text.$fEqText_$c==
                               a1
                                 `cast`
                               (Language.PureScript.Names.N:ProperName[0]
                                    <'Language.PureScript.Names.TypeName>_P)
                               b1
                                 `cast`
                               (Language.PureScript.Names.N:ProperName[0]
                                    <'Language.PureScript.Names.TypeName>_P) } })
                  Language.PureScript.AST.Exported.$s$fEqEither_$s$fEqEither_$c/= -}
fb1233334f996e917d46559e01f98226
  $s$fEqEither_$s$fEqEither_$c/= ::
    Data.Either.Either
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName)
    -> Data.Either.Either
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName)
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Data.Either.Either
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ClassName)
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.TypeName))
                   (y :: Data.Either.Either
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ClassName)
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.TypeName)) ->
                 case x of wild {
                   Data.Either.Left a1
                   -> case y of wild1 {
                        Data.Either.Left b1
                        -> case a1
                                  `cast`
                                (Language.PureScript.Names.N:ProperName[0]
                                     <'Language.PureScript.Names.ClassName>_P) of wild2 { Data.Text.Internal.Text dt dt1 dt2 ->
                           case b1
                                  `cast`
                                (Language.PureScript.Names.N:ProperName[0]
                                     <'Language.PureScript.Names.ClassName>_P) of wild3 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                           case GHC.Classes.eqInt
                                  (GHC.Types.I# dt2)
                                  (GHC.Types.I# dt5) of wild4 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True
                             -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.ByteArray#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.State# GHC.Prim.RealWorld
                                                               -> (# GHC.Prim.State#
                                                                       GHC.Prim.RealWorld,
                                                                     GHC.Prim.Int# #)}
                                       dt
                                       (GHC.Prim.int2Word# dt1)
                                       dt3
                                       (GHC.Prim.int2Word# dt4)
                                       (GHC.Prim.int2Word# dt2)
                                       GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                                case GHC.Int.eqInt32
                                       (GHC.Int.I32# (GHC.Prim.narrow32Int# ds3))
                                       (GHC.Int.I32# 0#) of wild6 {
                                  GHC.Types.False -> GHC.Types.True
                                  GHC.Types.True -> GHC.Types.False } } } } }
                        Data.Either.Right ipv -> GHC.Types.True }
                   Data.Either.Right a1
                   -> case y of wild1 {
                        Data.Either.Left ipv -> GHC.Types.True
                        Data.Either.Right b1
                        -> case a1
                                  `cast`
                                (Language.PureScript.Names.N:ProperName[0]
                                     <'Language.PureScript.Names.TypeName>_P) of wild2 { Data.Text.Internal.Text dt dt1 dt2 ->
                           case b1
                                  `cast`
                                (Language.PureScript.Names.N:ProperName[0]
                                     <'Language.PureScript.Names.TypeName>_P) of wild3 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                           case GHC.Classes.eqInt
                                  (GHC.Types.I# dt2)
                                  (GHC.Types.I# dt5) of wild4 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True
                             -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.ByteArray#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.State# GHC.Prim.RealWorld
                                                               -> (# GHC.Prim.State#
                                                                       GHC.Prim.RealWorld,
                                                                     GHC.Prim.Int# #)}
                                       dt
                                       (GHC.Prim.int2Word# dt1)
                                       dt3
                                       (GHC.Prim.int2Word# dt4)
                                       (GHC.Prim.int2Word# dt2)
                                       GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                                case GHC.Int.eqInt32
                                       (GHC.Int.I32# (GHC.Prim.narrow32Int# ds3))
                                       (GHC.Int.I32# 0#) of wild6 {
                                  GHC.Types.False -> GHC.Types.True
                                  GHC.Types.True -> GHC.Types.False } } } } } } }) -}
1eab5cbceb2b5d1c2443a3a8c4a52868
  $sfromList ::
    [(Language.PureScript.Names.Name, a)]
    -> Data.Map.Internal.Map Language.PureScript.Names.Name a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a (ds :: [(Language.PureScript.Names.Name, a)]) ->
                 case ds of wild {
                   [] -> Data.Map.Internal.Tip @ Language.PureScript.Names.Name @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case kx of dt { DEFAULT ->
                           Data.Map.Internal.Bin
                             @ Language.PureScript.Names.Name
                             @ a
                             1#
                             dt
                             x
                             (Data.Map.Internal.Tip @ Language.PureScript.Names.Name @ a)
                             (Data.Map.Internal.Tip @ Language.PureScript.Names.Name @ a) }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case Language.PureScript.Names.$fOrdName_$ccompare kx ky of wild4 {
                             DEFAULT
                             -> case kx of dt { DEFAULT ->
                                Language.PureScript.AST.Exported.$sfromList_$spoly_go14
                                  @ a
                                  ky
                                  ds3
                                  ipv1
                                  (Data.Map.Internal.Bin
                                     @ Language.PureScript.Names.Name
                                     @ a
                                     1#
                                     dt
                                     x
                                     (Data.Map.Internal.Tip @ Language.PureScript.Names.Name @ a)
                                     (Data.Map.Internal.Tip @ Language.PureScript.Names.Name @ a)) }
                             GHC.Types.LT
                             -> case kx of dt { DEFAULT ->
                                Language.PureScript.AST.Exported.$sfromList_$s$wpoly_go13
                                  @ a
                                  ky
                                  ds3
                                  ipv1
                                  (Data.Map.Internal.Bin
                                     @ Language.PureScript.Names.Name
                                     @ a
                                     1#
                                     dt
                                     x
                                     (Data.Map.Internal.Tip @ Language.PureScript.Names.Name @ a)
                                     (Data.Map.Internal.Tip @ Language.PureScript.Names.Name @ a))
                                  1# } } } } } }) -}
a5fde08cb6336349476eb81cddc3fb58
  $sfromList_$s$wpoly_go13 ::
    Language.PureScript.Names.Name
    -> a
    -> [(Language.PureScript.Names.Name, a)]
    -> Data.Map.Internal.Map Language.PureScript.Names.Name a
    -> GHC.Prim.Int#
    -> Data.Map.Internal.Map Language.PureScript.Names.Name a
  {- Arity: 5, Strictness: <S,U><L,U><S,1*U><S,1*U><L,U> -}
391075eb42c280e0c64cd6f6b93f852f
  $sfromList_$spoly_go14 ::
    Language.PureScript.Names.Name
    -> a
    -> [(Language.PureScript.Names.Name, a)]
    -> Data.Map.Internal.Map Language.PureScript.Names.Name a
    -> Data.Map.Internal.Map Language.PureScript.Names.Name a
  {- Arity: 4, Strictness: <S,U><L,U><S,1*U><S,1*U> -}
bfcd9c27a923b3628c41335601bbb200
  $sinsert_$sgo13 ::
    Language.PureScript.Names.Name
    -> Language.PureScript.Names.Name
    -> a1
    -> Data.Map.Internal.Map Language.PureScript.Names.Name a1
    -> Data.Map.Internal.Map Language.PureScript.Names.Name a1
  {- Arity: 4, Strictness: <L,U><S,1*U><L,U><S,1*U> -}
d2aa410aaf671ee1b4a42610891cbe73
  $slookup1 ::
    Language.PureScript.Names.Name
    -> Data.Map.Internal.Map Language.PureScript.Names.Name a
    -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
5c7920497540741a4846f9a1360696a9
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Language.PureScript.AST.Exported.$trModule3
                   Language.PureScript.AST.Exported.$trModule1) -}
12eb5504cc536198d1b310c74fd21a13
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Exported.$trModule2) -}
99eedf58b6adae966439bef2c549a79e
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Language.PureScript.AST.Exported"#) -}
368839287e6ee00223b3cb44b11e4f97
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.AST.Exported.$trModule4) -}
c74cfa1829f1ac437ea2f3aa8fbfa7be
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"#) -}
b43b3992bad57f7d9de1b8d859e79096
  $wexportedDeclarations ::
    Language.PureScript.Names.ModuleName
    -> [Language.PureScript.AST.Declarations.Declaration]
    -> GHC.Base.Maybe
         [Language.PureScript.AST.Declarations.DeclarationRef]
    -> [Language.PureScript.AST.Declarations.Declaration]
  {- Arity: 3, Strictness: <L,U><S,1*U><S,U>, Inline: [0] -}
ee1a287c153102856a0d13b5ba61c74b
  exportedDeclarations ::
    Language.PureScript.AST.Declarations.Module
    -> [Language.PureScript.AST.Declarations.Declaration]
  {- Arity: 1, Strictness: <S(LLLSS),1*U(A,A,U,1*U,U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.PureScript.AST.Declarations.Module) ->
                 case w of ww { Language.PureScript.AST.Declarations.Module ww1 ww2 ww3 ww4 ww5 ->
                 Language.PureScript.AST.Exported.$wexportedDeclarations
                   ww3
                   ww4
                   ww5 }) -}
bfe6c67c45e2549140f143ba88e6412b
  isExported ::
    GHC.Base.Maybe
      [Language.PureScript.AST.Declarations.DeclarationRef]
    -> Language.PureScript.AST.Declarations.Declaration
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U> -}
"SPEC/Language.PureScript.AST.Exported $fEqEither @ (ProperName
                                                      'ClassName) @ (ProperName 'TypeName)" [orphan] forall (v1 :: GHC.Classes.Eq
                                                                                                                                                                                     (Language.PureScript.Names.ProperName
                                                                                                                                                                                        'Language.PureScript.Names.TypeName))
                                                                                                                                                                            (v :: GHC.Classes.Eq
                                                                                                                                                                                    (Language.PureScript.Names.ProperName
                                                                                                                                                                                       'Language.PureScript.Names.ClassName))
  Data.Either.$fEqEither @ (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ClassName)
                         @ (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.TypeName)
                         v
                         v1
  = Language.PureScript.AST.Exported.$s$fEqEither
"SPEC/Language.PureScript.AST.Exported $fEqEither_$c/= @ (ProperName
                                                           'ClassName) @ (ProperName 'TypeName)" [orphan] forall ($dEq1 :: GHC.Classes.Eq
                                                                                                                                                                                                  (Language.PureScript.Names.ProperName
                                                                                                                                                                                                     'Language.PureScript.Names.TypeName))
                                                                                                                                                                                      ($dEq :: GHC.Classes.Eq
                                                                                                                                                                                                 (Language.PureScript.Names.ProperName
                                                                                                                                                                                                    'Language.PureScript.Names.ClassName))
  Data.Either.$fEqEither_$c/= @ (Language.PureScript.Names.ProperName
                                   'Language.PureScript.Names.ClassName)
                              @ (Language.PureScript.Names.ProperName
                                   'Language.PureScript.Names.TypeName)
                              $dEq
                              $dEq1
  = Language.PureScript.AST.Exported.$s$fEqEither_$s$fEqEither_$c/=
"SPEC/Language.PureScript.AST.Exported fromList @ Name _" [orphan] forall @ a
                                                                          ($dOrd :: GHC.Classes.Ord
                                                                                      Language.PureScript.Names.Name)
  Data.Map.Internal.fromList @ Language.PureScript.Names.Name
                             @ a
                             $dOrd
  = Language.PureScript.AST.Exported.$sfromList @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

