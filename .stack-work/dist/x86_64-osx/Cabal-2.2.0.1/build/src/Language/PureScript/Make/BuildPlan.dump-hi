
==================== FINAL INTERFACE ====================
2019-01-24 14:16:41.579966 UTC

interface purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Make.BuildPlan 8043
  interface hash: eb7fc7abe36c905ef8208d146d37572d
  ABI hash: 923324684f1b35512d1102d92fc5a38a
  export-list hash: daeb27ff797905fc2d9c0015b626bbb4
  orphan hash: 67ac1cf4ffd8f3cb862bc5bec21f1773
  flag hash: c8d8f450ed10350d849cb7e71446cfa1
  opt_hash: 2c98c95d41c045ae9c2fb565ec8aabc6
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Language.PureScript.Make.BuildPlan.collectErrors
  Language.PureScript.Make.BuildPlan.collectResults
  Language.PureScript.Make.BuildPlan.construct
  Language.PureScript.Make.BuildPlan.getResult
  Language.PureScript.Make.BuildPlan.markComplete
  Language.PureScript.Make.BuildPlan.needsRebuild
  Language.PureScript.Make.BuildPlan.BuildPlan
module dependencies: Control.Monad.Logger Control.Monad.Supply
                     Control.Monad.Supply.Class Language.PureScript.AST
                     Language.PureScript.AST.Binders
                     Language.PureScript.AST.Declarations
                     Language.PureScript.AST.Exported Language.PureScript.AST.Literals
                     Language.PureScript.AST.Operators Language.PureScript.AST.SourcePos
                     Language.PureScript.AST.Traversals Language.PureScript.Bundle
                     Language.PureScript.CodeGen.JS
                     Language.PureScript.CodeGen.JS.Common
                     Language.PureScript.CodeGen.JS.Printer Language.PureScript.Comments
                     Language.PureScript.Constants Language.PureScript.CoreFn
                     Language.PureScript.CoreFn.Ann Language.PureScript.CoreFn.Binders
                     Language.PureScript.CoreFn.Desugar Language.PureScript.CoreFn.Expr
                     Language.PureScript.CoreFn.Meta Language.PureScript.CoreFn.Module
                     Language.PureScript.CoreFn.Optimizer
                     Language.PureScript.CoreFn.ToJSON
                     Language.PureScript.CoreFn.Traversals
                     Language.PureScript.CoreImp.AST
                     Language.PureScript.CoreImp.Optimizer
                     Language.PureScript.CoreImp.Optimizer.Blocks
                     Language.PureScript.CoreImp.Optimizer.Common
                     Language.PureScript.CoreImp.Optimizer.Inliner
                     Language.PureScript.CoreImp.Optimizer.MagicDo
                     Language.PureScript.CoreImp.Optimizer.TCO
                     Language.PureScript.CoreImp.Optimizer.Unused
                     Language.PureScript.Crash Language.PureScript.Environment
                     Language.PureScript.Errors Language.PureScript.Externs
                     Language.PureScript.Kinds Language.PureScript.Label
                     Language.PureScript.Make.Actions Language.PureScript.Make.Monad
                     Language.PureScript.Names Language.PureScript.Options
                     Language.PureScript.PSString Language.PureScript.Parser
                     Language.PureScript.Parser.Common
                     Language.PureScript.Parser.Declarations
                     Language.PureScript.Parser.Kinds Language.PureScript.Parser.Lexer
                     Language.PureScript.Parser.State Language.PureScript.Parser.Types
                     Language.PureScript.Pretty Language.PureScript.Pretty.Common
                     Language.PureScript.Pretty.Kinds Language.PureScript.Pretty.Types
                     Language.PureScript.Pretty.Values
                     Language.PureScript.Publish.BoxesHelpers
                     Language.PureScript.Sugar.CaseDeclarations
                     Language.PureScript.Sugar.TypeClasses
                     Language.PureScript.Traversals
                     Language.PureScript.TypeChecker.Monad
                     Language.PureScript.TypeClassDictionaries Language.PureScript.Types
                     Paths_purescript
package dependencies: aeson-1.3.1.1 ansi-terminal-0.8.0.4
                      array-0.5.2.0 async-2.2.1 attoparsec-0.13.2.2 base-4.11.1.0
                      base-compat-0.10.4 binary-0.8.5.1 blaze-builder-0.4.1.0 boxes-0.1.5
                      bytestring-0.10.8.2 colour-2.3.4 containers-0.5.11.0
                      deepseq-1.4.3.0 directory-1.3.1.5 dlist-0.8.0.4 filepath-1.4.2
                      ghc-boot-th-8.4.3 ghc-prim-0.5.2.0 hashable-1.2.7.0
                      integer-gmp-1.0.2.0 integer-logarithms-1.0.2.1
                      language-javascript-0.6.0.11 lifted-base-0.2.3.12 microlens-0.4.9.1
                      microlens-ghc-0.4.9 microlens-mtl-0.1.11.1
                      microlens-platform-0.3.10 microlens-th-0.4.2.1
                      monad-control-1.0.2.3 mtl-2.2.2 parallel-3.2.1.1 parsec-3.1.13.0
                      pattern-arrows-0.0.2 pretty-1.1.3.6 primitive-0.6.3.0
                      protolude-0.2.2 random-1.1 safe-0.3.17 scientific-0.3.6.2
                      sourcemap-0.1.6 split-0.2.3.3 stm-2.4.5.0 syb-0.7 tagged-0.8.5
                      template-haskell-2.13.0.0 text-1.2.3.0 th-abstraction-0.2.8.0
                      time-1.8.0.2 time-locale-compat-0.1.1.4 transformers-0.5.5.0
                      transformers-base-0.4.5.2 unix-2.7.2.2 unordered-containers-0.2.9.0
                      utf8-string-1.0.1.1 uuid-types-1.0.3 vector-0.12.0.1
orphans: colour-2.3.4:Data.Colour syb-0.7:Data.Generics.Instances
         stm-2.4.5.0:Control.Monad.STM
         microlens-platform-0.3.10:Lens.Micro.Platform
         microlens-ghc-0.4.9:Lens.Micro.GHC
         attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         vector-0.12.0.1:Data.Vector.Unboxed
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.0:Data.Text.Lazy
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.5.0:Control.Monad.Trans.Error
         text-1.2.3.0:Data.Text binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: aeson-1.3.1.1:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.Graph
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         dlist-0.8.0.4:Data.DList ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         microlens-0.4.9.1:Lens.Micro.Internal
                         microlens-ghc-0.4.9:Lens.Micro.GHC
                         microlens-mtl-0.1.11.1:Lens.Micro.Mtl.Internal
                         microlens-platform-0.3.10:Lens.Micro.Platform
                         monad-control-1.0.2.3:Control.Monad.Trans.Control
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Control.Monad.Logger
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.Declarations
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.Operators
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.SourcePos
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Comments
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Environment
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Kinds
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Label
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Make.Monad
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Names
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.PSString
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.TypeClassDictionaries
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Types
                         tagged-0.8.5:Data.Tagged
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
                         th-abstraction-0.2.8.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  aeson-1.3.1.1:Data.Aeson 108dfb08de41cf77aad4693ac1dc3d44
import  -/  base-4.11.1.0:Control.Monad c5f960c67d822497578bffbd3e4c01cf
import  -/  base-4.11.1.0:Data.Either 39d922b371c4c52d426e9ee66de8371a
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.Functor f522c3501272159820fd6f242510732f
import  -/  base-4.11.1.0:Data.Maybe 409c3da2b142470b68be39ce1d97a9f7
import  -/  base-4.11.1.0:Data.Traversable 7ad4edb9184ea1ae8e73f6b94f115c8c
import  -/  base-4.11.1.0:Data.Tuple 3af66f3ac61ed95ba8a3a3f68ebc5003
import  -/  base-4.11.1.0:Data.Version 26b96b3dd83a23703e0b8110475fc04a
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.MVar 5887537e57bb20af86721190334ddceb
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  containers-0.5.11.0:Data.Map 0dbdaec812ef695a364aa6c69e7f7d53
import  -/  containers-0.5.11.0:Data.Map.Internal 0150e210d0ae8df0f3a0669d5e32d8fa
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  lifted-base-0.2.3.12:Control.Concurrent.Lifted 2f16a4f6aacf1afd0e80d872cbbdf622
import  -/  lifted-base-0.2.3.12:Control.Concurrent.MVar.Lifted e3b39ade6c1fdc125d23c90bdb4874f2
import  -/  monad-control-1.0.2.3:Control.Monad.Trans.Control 82c27f877a1c7cc212232dcea6f7b8e9
import  -/  Language.PureScript.AST e89b59f8e201961eafd3ff905a683659
  exports: be73d3bb7d4ebe5df082453f6d572075
import  -/  Language.PureScript.AST.Declarations 586bc75044e8737d02875208d17d4395
  Module 3342e00ee072addfd009ee61e87fb865
  getModuleName 7aa2ed3fa39338f5edb2f1938e29c924
import  -/  Language.PureScript.Crash 3dd739d57f17e8a1e9cd97afd3faf067
  exports: a9d2725f359c2d113bd38076e88ec681
  internalError d33c2a09c5cbe8e68c0bc27d1500ba1a
import  -/  Language.PureScript.Errors 3c1ad933587510f8b20a8c9ec2e86ce9
  exports: 8e61484c4664eceb943d9fc4820c721b
  MultipleErrors e10d32697d8bc85ed39c4a4d256bc383
  MultipleErrors e1ef6a17348ccfe3ef65185d3c5f9026
import  -/  Language.PureScript.Externs cf933be49760ec7d1e991d8ad7f6146f
  exports: caea0e8e36630f9e250d475ec2e68707
  ExternsFile c010c09fe85776adf7c6787c7d79c898
  efVersion c010c09fe85776adf7c6787c7d79c898
import  -/  Language.PureScript.Make.Actions d964d3443f97c4366835ba8624e5a3fb
  exports: 8913ee8e4ed0b29132c4ad60e50fbfbd
  Externs 4ffb2ad8a609a80bf7b3b56eaf9b3c54
  MakeActions a59a0d13211c77743184dfb57c13526c
  MakeActions b3e64d282c220fb028af7420464074c0
  RebuildNever 306e5560b003dd223369de07d39c6a11
  codegen b3e64d282c220fb028af7420464074c0
  ffiCodegen b3e64d282c220fb028af7420464074c0
  getInputTimestamp b3e64d282c220fb028af7420464074c0
  getOutputTimestamp b3e64d282c220fb028af7420464074c0
  progress b3e64d282c220fb028af7420464074c0
  readExterns b3e64d282c220fb028af7420464074c0
import  -/  Language.PureScript.Names 00f694509122478d97b327fbbccae327
  exports: ad7ae34f85124c68e8ba1c90fb2e732f
  ModuleName 1b2ddf0c04464d2fa2588925f10c1966
import  -/  Paths_purescript b471cb3641a3834bb1f308b27437a78a
  exports: 011ad501fbfaff6e4e651a7af4df7ce9
  version 3901654c5f764cf9b152bdbd41b845d0
import  -/  text-1.2.3.0:Data.Text 7daa7e6c9b39d8cc1679e5ec5c64d2be
import  -/  text-1.2.3.0:Data.Text.Show 3b4b6fb2985a731022d67f636682da2b
import  -/  time-1.8.0.2:Data.Time.Clock 38823c785626821df1f9ec84dba1c4d7
import  -/  time-1.8.0.2:Data.Time.Clock.Internal.UTCTime 509e80f9ead2e875ca9536acb5e422cc
bcec9ef6c97f4f8f38a00aef1071fec5
  $s$wsplit_$s$wpoly_go13 ::
    GHC.Prim.Int#
    -> Language.PureScript.Names.ModuleName
    -> a
    -> Data.Map.Internal.Map Language.PureScript.Names.ModuleName a
    -> Data.Map.Internal.Map Language.PureScript.Names.ModuleName a
    -> Language.PureScript.Names.ModuleName
    -> (# Data.Map.Internal.Map Language.PureScript.Names.ModuleName a,
          Data.Map.Internal.Map Language.PureScript.Names.ModuleName a #)
  {- Arity: 6, Strictness: <L,A><S,U><L,U><L,U><L,U><S,U> -}
eb1b53b57513cc292186cf8241180f4b
  $sinsertR_$sgo13 ::
    Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ModuleName
    -> a1
    -> Data.Map.Internal.Map Language.PureScript.Names.ModuleName a1
    -> Data.Map.Internal.Map Language.PureScript.Names.ModuleName a1
  {- Arity: 4, Strictness: <L,U><S,1*U><L,U><S,1*U> -}
0d8bb151130f745559aedb88d3f23416
  $sinsert_$s$sgo13 ::
    GHC.Prim.Int#
    -> Language.PureScript.Names.ModuleName
    -> a
    -> Data.Map.Internal.Map Language.PureScript.Names.ModuleName a
    -> Data.Map.Internal.Map Language.PureScript.Names.ModuleName a
    -> a
    -> Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ModuleName
    -> Data.Map.Internal.Map Language.PureScript.Names.ModuleName a
  {- Arity: 8,
     Strictness: <L,U><S,U><L,U><L,U><L,U><L,U><S,1*U><L,U> -}
80b80b79d5c97b20a054b9e467ed609e
  $sinsert_$sgo13 ::
    Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ModuleName
    -> a1
    -> Data.Map.Internal.Map Language.PureScript.Names.ModuleName a1
    -> Data.Map.Internal.Map Language.PureScript.Names.ModuleName a1
  {- Arity: 4, Strictness: <L,U><S,1*U><L,U><S,1*U> -}
51e189d3cb3919c695e2dfb59b52064d
  $slookup1 ::
    Language.PureScript.Names.ModuleName
    -> Data.Map.Internal.Map Language.PureScript.Names.ModuleName a
    -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
a90c1d0b26e61539c8334eb173b44b1a
  $smember1 ::
    Language.PureScript.Names.ModuleName
    -> Data.Map.Internal.Map Language.PureScript.Names.ModuleName a
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
170a26b0098f60d04113a0d516f4d3cb
  $sunion ::
    Data.Map.Internal.Map Language.PureScript.Names.ModuleName a
    -> Data.Map.Internal.Map Language.PureScript.Names.ModuleName a
    -> Data.Map.Internal.Map Language.PureScript.Names.ModuleName a
  {- Arity: 2, Strictness: <S,1*U><S,1*U>, Inline: [~] -}
3bb635cfa140fe90a16038c9ae921af4
  $tc'BuildJob :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8997149174736663318##
                   6785552538893477731##
                   Language.PureScript.Make.BuildPlan.$trModule
                   Language.PureScript.Make.BuildPlan.$tc'BuildJob2
                   0#
                   Language.PureScript.Make.BuildPlan.$tc'BuildJob1) -}
508f3421391db041399aecc910401162
  $tc'BuildJob1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
a43f976fd7d4d26560c45c57cd09233f
  $tc'BuildJob2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Make.BuildPlan.$tc'BuildJob3) -}
250fcbf774613eb7043e2eb9767bac81
  $tc'BuildJob3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'BuildJob"#) -}
80d1159b70d828ae992e27dd4b381ed3
  $tc'BuildPlan :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11365768979679170202##
                   16361659948474343538##
                   Language.PureScript.Make.BuildPlan.$trModule
                   Language.PureScript.Make.BuildPlan.$tc'BuildPlan2
                   0#
                   Language.PureScript.Make.BuildPlan.$tc'BuildPlan1) -}
ea189ab7dc1c7a2de384cd73bdb6b94f
  $tc'BuildPlan1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
1dbf068810c2a0b45db8cb5498fdec89
  $tc'BuildPlan2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Make.BuildPlan.$tc'BuildPlan3) -}
a556696dafa47b3d1153f2fc0af5270a
  $tc'BuildPlan3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'BuildPlan"#) -}
c22dcb764bd2119fdebe1e03e6454308
  $tc'Prebuilt :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5018636920691226754##
                   4986986342395376752##
                   Language.PureScript.Make.BuildPlan.$trModule
                   Language.PureScript.Make.BuildPlan.$tc'Prebuilt2
                   0#
                   Language.PureScript.Make.BuildPlan.$tc'Prebuilt1) -}
1b509b3a5b66eb5504ec5673c5c1577e
  $tc'Prebuilt1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
de824dc202d0da15014018a410423941
  $tc'Prebuilt2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Make.BuildPlan.$tc'Prebuilt3) -}
34e1f0d5bcf65de90adc68501471eae1
  $tc'Prebuilt3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Prebuilt"#) -}
7a3b2276ca127c6788ac07f68d55d7a0
  $tcBuildJob :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6209159575724360886##
                   7402422143097266749##
                   Language.PureScript.Make.BuildPlan.$trModule
                   Language.PureScript.Make.BuildPlan.$tcBuildJob1
                   0#
                   GHC.Types.krep$*) -}
4976e60df311919a17d7aef13ac7a432
  $tcBuildJob1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Make.BuildPlan.$tcBuildJob2) -}
c8c43ad1c986c89c8c751d322f63e05c
  $tcBuildJob2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("BuildJob"#) -}
44a10ae38d743f717f5e9b0d66f70bd9
  $tcBuildPlan :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   379009766717729149##
                   14621033287304265062##
                   Language.PureScript.Make.BuildPlan.$trModule
                   Language.PureScript.Make.BuildPlan.$tcBuildPlan1
                   0#
                   GHC.Types.krep$*) -}
8e9e48f33011c1f1901356d856d12a26
  $tcBuildPlan1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Make.BuildPlan.$tcBuildPlan2) -}
fe12687d4110cb4f93802d4b14303a20
  $tcBuildPlan2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("BuildPlan"#) -}
bcdf5db51e7d468f18f56a8864061058
  $tcPrebuilt :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12988243944396192125##
                   16608186729215470290##
                   Language.PureScript.Make.BuildPlan.$trModule
                   Language.PureScript.Make.BuildPlan.$tcPrebuilt1
                   0#
                   GHC.Types.krep$*) -}
c994d540c86d7910a1a7bae95dfb2b87
  $tcPrebuilt1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Make.BuildPlan.$tcPrebuilt2) -}
0d97aadd89a2744605fa766077111022
  $tcPrebuilt2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Prebuilt"#) -}
b1757e790bc2e524a0ab56857632caec
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Language.PureScript.Make.BuildPlan.$trModule3
                   Language.PureScript.Make.BuildPlan.$trModule1) -}
24ecbf019047f77ba0ee8a7a7fd1d830
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Make.BuildPlan.$trModule2) -}
8edd06f52fec5962930991727b568353
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Language.PureScript.Make.BuildPlan"#) -}
6777b8c76c18d2cd23cc94abd328d385
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Make.BuildPlan.$trModule4) -}
2d425d1a9b55c9ed10f2ae07da01e448
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"#) -}
ec25fd2fd0cf4d8066e39fe0301768ab
  $wconstruct ::
    (GHC.Base.Monad m,
     Control.Monad.Trans.Control.MonadBaseControl GHC.Types.IO m) =>
    (Language.PureScript.Names.ModuleName
     -> m (Data.Either.Either
             Language.PureScript.Make.Actions.RebuildPolicy
             (GHC.Base.Maybe Data.Time.Clock.Internal.UTCTime.UTCTime)))
    -> (Language.PureScript.Names.ModuleName
        -> m (GHC.Base.Maybe Data.Time.Clock.Internal.UTCTime.UTCTime))
    -> (Language.PureScript.Names.ModuleName
        -> m (GHC.IO.FilePath, Language.PureScript.Make.Actions.Externs))
    -> [Language.PureScript.AST.Declarations.Module]
    -> [(Language.PureScript.Names.ModuleName,
         [Language.PureScript.Names.ModuleName])]
    -> m Language.PureScript.Make.BuildPlan.BuildPlan
  {- Arity: 7,
     Strictness: <L,1*U(1*U(1*U(C(C1(U)),A),C(U),A,A,A,A),A,A,A,A)><S(S(LLLS(LC(C(S))LLL)L)LL),1*U(1*U(A,1*U(1*U(1*C1(C1(U)),A),C(U),1*C1(C1(U)),A,A,A),A,1*U(A,C(C1(U)),A,U,A),C(U)),A,A)><L,C(U)><L,C(U)><L,C(U)><L,U><L,U>,
     Inline: [0] -}
93c69ef9f3ed5ccef72f72d8ba2f3e24
  $wgetResult ::
    Control.Monad.Trans.Control.MonadBaseControl GHC.Types.IO m =>
    Data.Map.Internal.Map
      Language.PureScript.Names.ModuleName
      Language.PureScript.Make.BuildPlan.Prebuilt
    -> Data.Map.Internal.Map
         Language.PureScript.Names.ModuleName
         Language.PureScript.Make.BuildPlan.BuildJob
    -> Language.PureScript.Names.ModuleName
    -> m (GHC.Base.Maybe
            (Language.PureScript.Errors.MultipleErrors,
             Language.PureScript.Externs.ExternsFile))
  {- Arity: 4,
     Strictness: <S(SLL),1*U(1*U(A,1*U(A,1*C1(U),A,A,A,A),A,A,1*C1(U)),A,A)><S,1*U><L,U><S,U>,
     Inline: [0],
     Unfolding: (\ @ m :: * -> *
                   (w :: Control.Monad.Trans.Control.MonadBaseControl GHC.Types.IO m)
                   (ww :: Data.Map.Internal.Map
                            Language.PureScript.Names.ModuleName
                            Language.PureScript.Make.BuildPlan.Prebuilt)
                   (ww1 :: Data.Map.Internal.Map
                             Language.PureScript.Names.ModuleName
                             Language.PureScript.Make.BuildPlan.BuildJob)
                   (w1 :: Language.PureScript.Names.ModuleName) ->
                 case Language.PureScript.Make.BuildPlan.$slookup1
                        @ Language.PureScript.Make.BuildPlan.Prebuilt
                        w1
                        ww of wild {
                   GHC.Base.Nothing
                   -> Control.Monad.Base.liftBase
                        @ GHC.Types.IO
                        @ m
                        (Control.Monad.Trans.Control.$p1MonadBaseControl
                           @ GHC.Types.IO
                           @ m
                           w)
                        @ (GHC.Base.Maybe
                             (Language.PureScript.Errors.MultipleErrors,
                              Language.PureScript.Externs.ExternsFile))
                        (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                         case Language.PureScript.Make.BuildPlan.$slookup1
                                @ Language.PureScript.Make.BuildPlan.BuildJob
                                w1
                                ww1 of wild1 {
                           GHC.Base.Nothing
                           -> case Language.PureScript.Make.BuildPlan.getResult1
                              ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                        GHC.Base.Maybe
                                          (Language.PureScript.Errors.MultipleErrors,
                                           Language.PureScript.Externs.ExternsFile) #)
                              of {}
                           GHC.Base.Just v
                           -> case v of wild2 { Language.PureScript.Make.BuildPlan.BuildJob ds ds1 ->
                              case ds of wild3 { GHC.MVar.MVar mvar# ->
                              GHC.Prim.readMVar#
                                @ GHC.Prim.RealWorld
                                @ (GHC.Base.Maybe
                                     (Language.PureScript.Errors.MultipleErrors,
                                      Language.PureScript.Externs.ExternsFile))
                                mvar#
                                eta } } })
                          `cast`
                        (Sym (GHC.Types.N:IO[0]
                                  <GHC.Base.Maybe
                                     (Language.PureScript.Errors.MultipleErrors,
                                      Language.PureScript.Externs.ExternsFile)>_R))
                   GHC.Base.Just es
                   -> GHC.Base.pure
                        @ m
                        (Control.Monad.Base.$p2MonadBase
                           @ GHC.Types.IO
                           @ m
                           (Control.Monad.Trans.Control.$p1MonadBaseControl
                              @ GHC.Types.IO
                              @ m
                              w))
                        @ (GHC.Base.Maybe
                             (Language.PureScript.Errors.MultipleErrors,
                              Language.PureScript.Externs.ExternsFile))
                        (GHC.Base.Just
                           @ (Language.PureScript.Errors.MultipleErrors,
                              Language.PureScript.Externs.ExternsFile)
                           ((GHC.Types.[] @ Language.PureScript.AST.Declarations.ErrorMessage)
                              `cast`
                            (Sym (Language.PureScript.Errors.N:MultipleErrors[0])),
                            case es of wild1 { Language.PureScript.Make.BuildPlan.Prebuilt ds ds1 ->
                            ds1 })) }) -}
1527ef76c38484faaceae26294ed2733
  $wpoly_go13 ::
    Language.PureScript.Names.ModuleName
    -> Data.Map.Internal.Map Language.PureScript.Names.ModuleName a
    -> (# Data.Map.Internal.Map Language.PureScript.Names.ModuleName a,
          Data.Map.Internal.Map Language.PureScript.Names.ModuleName a #)
  {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [0] -}
c8cf62e0c07c6a42d85c83aeec4a5f2d
  data BuildJob
    = BuildJob {bjResult :: GHC.MVar.MVar
                              (GHC.Base.Maybe
                                 (Language.PureScript.Errors.MultipleErrors,
                                  Language.PureScript.Externs.ExternsFile)),
                bjErrors :: GHC.MVar.MVar
                              (GHC.Base.Maybe Language.PureScript.Errors.MultipleErrors)}
1784c2f09a85aa812174619b584a41d2
  data BuildPlan
    = BuildPlan {bpPrebuilt :: Data.Map.Internal.Map
                                 Language.PureScript.Names.ModuleName
                                 Language.PureScript.Make.BuildPlan.Prebuilt,
                 bpBuildJobs :: Data.Map.Internal.Map
                                  Language.PureScript.Names.ModuleName
                                  Language.PureScript.Make.BuildPlan.BuildJob}
716c8dc94144e0f2aeb29033a34f3d25
  data Prebuilt
    = Prebuilt {pbModificationTime :: Data.Time.Clock.Internal.UTCTime.UTCTime,
                pbExternsFile :: Language.PureScript.Externs.ExternsFile}
c8cf62e0c07c6a42d85c83aeec4a5f2d
  bjErrors ::
    Language.PureScript.Make.BuildPlan.BuildJob
    -> GHC.MVar.MVar
         (GHC.Base.Maybe Language.PureScript.Errors.MultipleErrors)
  RecSel Left Language.PureScript.Make.BuildPlan.BuildJob
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Make.BuildPlan.BuildJob) ->
                 case ds of wild { Language.PureScript.Make.BuildPlan.BuildJob ds1 ds2 ->
                 ds2 }) -}
c8cf62e0c07c6a42d85c83aeec4a5f2d
  bjResult ::
    Language.PureScript.Make.BuildPlan.BuildJob
    -> GHC.MVar.MVar
         (GHC.Base.Maybe
            (Language.PureScript.Errors.MultipleErrors,
             Language.PureScript.Externs.ExternsFile))
  RecSel Left Language.PureScript.Make.BuildPlan.BuildJob
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U(U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Make.BuildPlan.BuildJob) ->
                 case ds of wild { Language.PureScript.Make.BuildPlan.BuildJob ds1 ds2 ->
                 ds1 }) -}
1784c2f09a85aa812174619b584a41d2
  bpBuildJobs ::
    Language.PureScript.Make.BuildPlan.BuildPlan
    -> Data.Map.Internal.Map
         Language.PureScript.Names.ModuleName
         Language.PureScript.Make.BuildPlan.BuildJob
  RecSel Left Language.PureScript.Make.BuildPlan.BuildPlan
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Make.BuildPlan.BuildPlan) ->
                 case ds of wild { Language.PureScript.Make.BuildPlan.BuildPlan ds1 ds2 ->
                 ds2 }) -}
1784c2f09a85aa812174619b584a41d2
  bpPrebuilt ::
    Language.PureScript.Make.BuildPlan.BuildPlan
    -> Data.Map.Internal.Map
         Language.PureScript.Names.ModuleName
         Language.PureScript.Make.BuildPlan.Prebuilt
  RecSel Left Language.PureScript.Make.BuildPlan.BuildPlan
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Make.BuildPlan.BuildPlan) ->
                 case ds of wild { Language.PureScript.Make.BuildPlan.BuildPlan ds1 ds2 ->
                 ds1 }) -}
f0a757ecb29a2a60be15ec2eea576595
  collectErrors ::
    Control.Monad.Trans.Control.MonadBaseControl GHC.Types.IO m =>
    Language.PureScript.Make.BuildPlan.BuildPlan
    -> m [Language.PureScript.Errors.MultipleErrors]
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LLLS(LC(C(S))LLL)L)LL),1*U(1*U(A,1*U(A,C(U),A,C(C1(C1(U))),A,A),A,1*U(A,1*C1(C1(U)),A,A,A),C(U)),A,A)><L,1*U(A,1*U)>,
     Unfolding: (\ @ m :: * -> *
                   ($dMonadBaseControl :: Control.Monad.Trans.Control.MonadBaseControl
                                            GHC.Types.IO m)
                   (eta :: Language.PureScript.Make.BuildPlan.BuildPlan) ->
                 let {
                   $dMonadBase :: Control.Monad.Base.MonadBase GHC.Types.IO m
                   = Control.Monad.Trans.Control.$p1MonadBaseControl
                       @ GHC.Types.IO
                       @ m
                       $dMonadBaseControl
                 } in
                 let {
                   $dApplicative :: GHC.Base.Applicative m
                   = Control.Monad.Base.$p2MonadBase @ GHC.Types.IO @ m $dMonadBase
                 } in
                 GHC.Base.>>=
                   @ m
                   (Control.Monad.Base.$p4MonadBase @ GHC.Types.IO @ m $dMonadBase)
                   @ [GHC.Base.Maybe Language.PureScript.Errors.MultipleErrors]
                   @ [Language.PureScript.Errors.MultipleErrors]
                   (case eta of wild { Language.PureScript.Make.BuildPlan.BuildPlan ds ds1 ->
                    letrec {
                      go2 :: m [GHC.Base.Maybe Language.PureScript.Errors.MultipleErrors]
                             -> Data.Map.Internal.Map
                                  Language.PureScript.Names.ModuleName
                                  Language.PureScript.Make.BuildPlan.BuildJob
                             -> m [GHC.Base.Maybe Language.PureScript.Errors.MultipleErrors]
                        {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
                      = \ (z' :: m [GHC.Base.Maybe
                                      Language.PureScript.Errors.MultipleErrors])
                          (ds2 :: Data.Map.Internal.Map
                                    Language.PureScript.Names.ModuleName
                                    Language.PureScript.Make.BuildPlan.BuildJob) ->
                        case ds2 of wild1 {
                          Data.Map.Internal.Bin dt kx x l r
                          -> go2
                               (GHC.Base.liftA2
                                  @ m
                                  $dApplicative
                                  @ (GHC.Base.Maybe Language.PureScript.Errors.MultipleErrors)
                                  @ [GHC.Base.Maybe Language.PureScript.Errors.MultipleErrors]
                                  @ [GHC.Base.Maybe Language.PureScript.Errors.MultipleErrors]
                                  (GHC.Types.:
                                     @ (GHC.Base.Maybe Language.PureScript.Errors.MultipleErrors))
                                  (Control.Monad.Base.liftBase
                                     @ GHC.Types.IO
                                     @ m
                                     $dMonadBase
                                     @ (GHC.Base.Maybe Language.PureScript.Errors.MultipleErrors)
                                     (\ (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                      case x of wild2 { Language.PureScript.Make.BuildPlan.BuildJob ds3 ds4 ->
                                      case ds4 of wild3 { GHC.MVar.MVar mvar# ->
                                      GHC.Prim.readMVar#
                                        @ GHC.Prim.RealWorld
                                        @ (GHC.Base.Maybe Language.PureScript.Errors.MultipleErrors)
                                        mvar#
                                        eta1 } })
                                       `cast`
                                     (Sym (GHC.Types.N:IO[0]
                                               <GHC.Base.Maybe
                                                  Language.PureScript.Errors.MultipleErrors>_R)))
                                  (go2 z' r))
                               l
                          Data.Map.Internal.Tip -> z' }
                    } in
                    go2
                      (GHC.Base.pure
                         @ m
                         $dApplicative
                         @ [GHC.Base.Maybe Language.PureScript.Errors.MultipleErrors]
                         (GHC.Types.[]
                            @ (GHC.Base.Maybe Language.PureScript.Errors.MultipleErrors)))
                      ds1 })
                   (\ (errors :: [GHC.Base.Maybe
                                    Language.PureScript.Errors.MultipleErrors]) ->
                    GHC.Base.pure
                      @ m
                      $dApplicative
                      @ [Language.PureScript.Errors.MultipleErrors]
                      (Data.Maybe.catMaybes1
                         @ Language.PureScript.Errors.MultipleErrors
                         errors))) -}
bf1a8520a880a8c6376c1bbf4e9e6a71
  collectResults ::
    Control.Monad.Trans.Control.MonadBaseControl GHC.Types.IO m =>
    Language.PureScript.Make.BuildPlan.BuildPlan
    -> m (Data.Map.Internal.Map
            Language.PureScript.Names.ModuleName
            Language.PureScript.Externs.ExternsFile)
  {- Arity: 2,
     Strictness: <S(S(LLLS(LC(C(S))LLL)L)LL),1*U(1*U(A,1*U(1*U(C(C1(U)),A),C(U),C(C1(U)),C(C1(C1(U))),A,A),A,1*U(A,1*C1(C1(U)),A,A,A),C(U)),A,A)><L,U(1*U,1*U)> -}
7d53db57d9de07e7b8dba939e8334168
  construct ::
    (GHC.Base.Monad m,
     Control.Monad.Trans.Control.MonadBaseControl GHC.Types.IO m) =>
    Language.PureScript.Make.Actions.MakeActions m
    -> ([Language.PureScript.AST.Declarations.Module],
        [(Language.PureScript.Names.ModuleName,
          [Language.PureScript.Names.ModuleName])])
    -> m Language.PureScript.Make.BuildPlan.BuildPlan
  {- Arity: 4,
     Strictness: <L,1*U(1*U(1*U(C(C1(U)),A),C(U),A,A,A,A),A,A,A,A)><S(S(LLLS(LC(C(S))LLL)L)LL),1*U(1*U(A,1*U(1*U(1*C1(C1(U)),A),C(U),1*C1(C1(U)),A,A,A),A,1*U(A,C(C1(U)),A,U,A),C(U)),A,A)><S,1*U(C(U),C(U),C(U),A,A,A)><S,1*U(U,U)>,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ @ m :: * -> *
                   (w :: GHC.Base.Monad m)
                   (w1 :: Control.Monad.Trans.Control.MonadBaseControl GHC.Types.IO m)
                   (w2 :: Language.PureScript.Make.Actions.MakeActions m)
                   (w3 :: ([Language.PureScript.AST.Declarations.Module],
                           [(Language.PureScript.Names.ModuleName,
                             [Language.PureScript.Names.ModuleName])])) ->
                 case w2 of ww { Language.PureScript.Make.Actions.MakeActions ww1 ww2 ww3 ww4 ww5 ww6 ->
                 case w3 of ww7 { (,) ww8 ww9 ->
                 Language.PureScript.Make.BuildPlan.$wconstruct
                   @ m
                   w
                   w1
                   ww1
                   ww2
                   ww3
                   ww8
                   ww9 } }) -}
dc9a5541d8a5abf9cfd3a3bf8c64e98c
  getResult ::
    Control.Monad.Trans.Control.MonadBaseControl GHC.Types.IO m =>
    Language.PureScript.Make.BuildPlan.BuildPlan
    -> Language.PureScript.Names.ModuleName
    -> m (GHC.Base.Maybe
            (Language.PureScript.Errors.MultipleErrors,
             Language.PureScript.Externs.ExternsFile))
  {- Arity: 3,
     Strictness: <S(SLL),1*U(1*U(A,1*U(A,1*C1(U),A,A,A,A),A,A,1*C1(U)),A,A)><S(SL),1*U(1*U,U)><S,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ m :: * -> *
                   (w :: Control.Monad.Trans.Control.MonadBaseControl GHC.Types.IO m)
                   (w1 :: Language.PureScript.Make.BuildPlan.BuildPlan)
                   (w2 :: Language.PureScript.Names.ModuleName) ->
                 case w1 of ww { Language.PureScript.Make.BuildPlan.BuildPlan ww1 ww2 ->
                 Language.PureScript.Make.BuildPlan.$wgetResult
                   @ m
                   w
                   ww1
                   ww2
                   w2 }) -}
5f4903b6dccde5df1a6dbe657d76b4ed
  getResult1 :: Language.PureScript.Make.BuildPlan.BuildJob
  {- Strictness: x -}
6f3cb6c73db955854093d13073ae5743
  markComplete ::
    Control.Monad.Trans.Control.MonadBaseControl GHC.Types.IO m =>
    Language.PureScript.Make.BuildPlan.BuildPlan
    -> Language.PureScript.Names.ModuleName
    -> GHC.Base.Maybe
         (Language.PureScript.Errors.MultipleErrors,
          Language.PureScript.Externs.ExternsFile)
    -> GHC.Base.Maybe Language.PureScript.Errors.MultipleErrors
    -> m ()
  {- Arity: 5,
     Strictness: <S(S(LLLS(LLC(C(S))LL)L)LL),1*U(1*U(A,A,A,1*U(A,A,1*C1(C1(U)),A,A),C(U)),A,A)><L,1*U(A,1*U)><L,1*U><L,U><L,U>,
     Unfolding: (\ @ m :: * -> *
                   ($dMonadBaseControl :: Control.Monad.Trans.Control.MonadBaseControl
                                            GHC.Types.IO m)
                   (eta :: Language.PureScript.Make.BuildPlan.BuildPlan)
                   (eta1 :: Language.PureScript.Names.ModuleName)
                   (eta2 :: GHC.Base.Maybe
                              (Language.PureScript.Errors.MultipleErrors,
                               Language.PureScript.Externs.ExternsFile))
                   (eta3 :: GHC.Base.Maybe
                              Language.PureScript.Errors.MultipleErrors) ->
                 let {
                   $dMonadBase :: Control.Monad.Base.MonadBase GHC.Types.IO m
                   = Control.Monad.Trans.Control.$p1MonadBaseControl
                       @ GHC.Types.IO
                       @ m
                       $dMonadBaseControl
                 } in
                 let {
                   ds :: Language.PureScript.Make.BuildPlan.BuildJob
                   = case eta of wild { Language.PureScript.Make.BuildPlan.BuildPlan ds1 ds2 ->
                     case Language.PureScript.Make.BuildPlan.$slookup1
                            @ Language.PureScript.Make.BuildPlan.BuildJob
                            eta1
                            ds2 of wild1 {
                       GHC.Base.Nothing
                       -> Language.PureScript.Make.BuildPlan.markComplete1
                       GHC.Base.Just v -> v } }
                 } in
                 GHC.Base.>>
                   @ m
                   (Control.Monad.Base.$p4MonadBase @ GHC.Types.IO @ m $dMonadBase)
                   @ ()
                   @ ()
                   (Control.Monad.Base.liftBase
                      @ GHC.Types.IO
                      @ m
                      $dMonadBase
                      @ ()
                      (\ (eta4 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                       case ds of wild { Language.PureScript.Make.BuildPlan.BuildJob rVar eVar ->
                       case rVar of wild1 { GHC.MVar.MVar mvar# ->
                       case GHC.Prim.putMVar#
                              @ GHC.Prim.RealWorld
                              @ (GHC.Base.Maybe
                                   (Language.PureScript.Errors.MultipleErrors,
                                    Language.PureScript.Externs.ExternsFile))
                              mvar#
                              eta2
                              eta4 of s2# { DEFAULT ->
                       (# s2#, GHC.Tuple.() #) } } })
                        `cast`
                      (Sym (GHC.Types.N:IO[0] <()>_R)))
                   (Control.Monad.Base.liftBase
                      @ GHC.Types.IO
                      @ m
                      $dMonadBase
                      @ ()
                      (\ (eta4 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                       case ds of wild { Language.PureScript.Make.BuildPlan.BuildJob rVar eVar ->
                       case eVar of wild1 { GHC.MVar.MVar mvar# ->
                       case GHC.Prim.putMVar#
                              @ GHC.Prim.RealWorld
                              @ (GHC.Base.Maybe Language.PureScript.Errors.MultipleErrors)
                              mvar#
                              eta3
                              eta4 of s2# { DEFAULT ->
                       (# s2#, GHC.Tuple.() #) } } })
                        `cast`
                      (Sym (GHC.Types.N:IO[0] <()>_R)))) -}
267ffef0bb1c7699580a845c6b88b49a
  markComplete1 :: Language.PureScript.Make.BuildPlan.BuildJob
  {- Strictness: x -}
b549aee4d7993623f1b4c624db544b7d
  needsRebuild ::
    Language.PureScript.Make.BuildPlan.BuildPlan
    -> Language.PureScript.Names.ModuleName -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (bp :: Language.PureScript.Make.BuildPlan.BuildPlan)
                   (moduleName :: Language.PureScript.Names.ModuleName) ->
                 case bp of wild { Language.PureScript.Make.BuildPlan.BuildPlan ds ds1 ->
                 Language.PureScript.Make.BuildPlan.$smember1
                   @ Language.PureScript.Make.BuildPlan.BuildJob
                   moduleName
                   ds1 }) -}
716c8dc94144e0f2aeb29033a34f3d25
  pbExternsFile ::
    Language.PureScript.Make.BuildPlan.Prebuilt
    -> Language.PureScript.Externs.ExternsFile
  RecSel Left Language.PureScript.Make.BuildPlan.Prebuilt
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LS),1*U(A,1*U(U,U,U,U,U,U,U,U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Make.BuildPlan.Prebuilt) ->
                 case ds of wild { Language.PureScript.Make.BuildPlan.Prebuilt ds1 ds2 ->
                 ds2 }) -}
716c8dc94144e0f2aeb29033a34f3d25
  pbModificationTime ::
    Language.PureScript.Make.BuildPlan.Prebuilt
    -> Data.Time.Clock.Internal.UTCTime.UTCTime
  RecSel Left Language.PureScript.Make.BuildPlan.Prebuilt
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U(U,U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Make.BuildPlan.Prebuilt) ->
                 case ds of wild { Language.PureScript.Make.BuildPlan.Prebuilt ds1 ds2 ->
                 ds1 }) -}
"SC:$sgo130" forall @ a
                    (sc :: GHC.Prim.Int#)
                    (sc1 :: Language.PureScript.Names.ModuleName)
                    (sc2 :: a)
                    (sc3 :: Data.Map.Internal.Map
                              Language.PureScript.Names.ModuleName a)
                    (sc4 :: Data.Map.Internal.Map
                              Language.PureScript.Names.ModuleName a)
                    (sc5 :: a)
                    (sc6 :: Language.PureScript.Names.ModuleName)
                    (sc7 :: Language.PureScript.Names.ModuleName)
  Language.PureScript.Make.BuildPlan.$sinsert_$sgo13 @ a
                                                     sc7
                                                     sc6
                                                     sc5
                                                     (Data.Map.Internal.Bin
                                                        @ Language.PureScript.Names.ModuleName
                                                        @ a
                                                        sc
                                                        sc1
                                                        sc2
                                                        sc3
                                                        sc4)
  = Language.PureScript.Make.BuildPlan.$sinsert_$s$sgo13
      @ a
      sc
      sc1
      sc2
      sc3
      sc4
      sc5
      sc6
      sc7
"SC:$wpoly_go130" [0] forall @ a
                             (sc :: GHC.Prim.Int#)
                             (sc1 :: Language.PureScript.Names.ModuleName)
                             (sc2 :: a)
                             (sc3 :: Data.Map.Internal.Map
                                       Language.PureScript.Names.ModuleName a)
                             (sc4 :: Data.Map.Internal.Map
                                       Language.PureScript.Names.ModuleName a)
                             (sc5 :: Language.PureScript.Names.ModuleName)
  Language.PureScript.Make.BuildPlan.$wpoly_go13 @ a
                                                 sc5
                                                 (Data.Map.Internal.Bin
                                                    @ Language.PureScript.Names.ModuleName
                                                    @ a
                                                    sc
                                                    sc1
                                                    sc2
                                                    sc3
                                                    sc4)
  = Language.PureScript.Make.BuildPlan.$s$wsplit_$s$wpoly_go13
      @ a
      sc
      sc1
      sc2
      sc3
      sc4
      sc5
"SPEC/Language.PureScript.Make.BuildPlan union @ ModuleName _" [orphan] forall @ a
                                                                               ($dOrd :: GHC.Classes.Ord
                                                                                           Language.PureScript.Names.ModuleName)
  Data.Map.Internal.union @ Language.PureScript.Names.ModuleName
                          @ a
                          $dOrd
  = Language.PureScript.Make.BuildPlan.$sunion @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

