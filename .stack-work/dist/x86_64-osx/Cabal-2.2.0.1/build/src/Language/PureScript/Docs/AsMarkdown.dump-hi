
==================== FINAL INTERFACE ====================
2018-11-30 20:48:20.136458 UTC

interface purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Docs.AsMarkdown 8043
  interface hash: 4edf79ee889107b1a20a79090eea6503
  ABI hash: 9060efc6fdad02739808af659fa88ac1
  export-list hash: 8ce89a2a7e02eeb3e329d14fb4214742
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 94f2816997904b752beedc19c412f025
  opt_hash: 2c98c95d41c045ae9c2fb565ec8aabc6
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Language.PureScript.Docs.AsMarkdown.codeToString
  Language.PureScript.Docs.AsMarkdown.modulesAsMarkdown
  Language.PureScript.Docs.AsMarkdown.renderModulesAsMarkdown
  Language.PureScript.Docs.AsMarkdown.runDocs
  Language.PureScript.Docs.AsMarkdown.Docs
module dependencies: Control.Monad.Logger Control.Monad.Supply
                     Control.Monad.Supply.Class Language.PureScript
                     Language.PureScript.AST Language.PureScript.AST.Binders
                     Language.PureScript.AST.Declarations
                     Language.PureScript.AST.Exported Language.PureScript.AST.Literals
                     Language.PureScript.AST.Operators Language.PureScript.AST.SourcePos
                     Language.PureScript.AST.Traversals Language.PureScript.Bundle
                     Language.PureScript.CodeGen.JS
                     Language.PureScript.CodeGen.JS.Common
                     Language.PureScript.CodeGen.JS.Printer Language.PureScript.Comments
                     Language.PureScript.Constants Language.PureScript.CoreFn
                     Language.PureScript.CoreFn.Ann Language.PureScript.CoreFn.Binders
                     Language.PureScript.CoreFn.Desugar Language.PureScript.CoreFn.Expr
                     Language.PureScript.CoreFn.Meta Language.PureScript.CoreFn.Module
                     Language.PureScript.CoreFn.Optimizer
                     Language.PureScript.CoreFn.ToJSON
                     Language.PureScript.CoreFn.Traversals
                     Language.PureScript.CoreImp.AST
                     Language.PureScript.CoreImp.Optimizer
                     Language.PureScript.CoreImp.Optimizer.Blocks
                     Language.PureScript.CoreImp.Optimizer.Common
                     Language.PureScript.CoreImp.Optimizer.Inliner
                     Language.PureScript.CoreImp.Optimizer.MagicDo
                     Language.PureScript.CoreImp.Optimizer.TCO
                     Language.PureScript.CoreImp.Optimizer.Unused
                     Language.PureScript.Crash Language.PureScript.Docs.Convert
                     Language.PureScript.Docs.Convert.ReExports
                     Language.PureScript.Docs.Convert.Single
                     Language.PureScript.Docs.Prim Language.PureScript.Docs.Render
                     Language.PureScript.Docs.RenderedCode
                     Language.PureScript.Docs.RenderedCode.RenderKind
                     Language.PureScript.Docs.RenderedCode.RenderType
                     Language.PureScript.Docs.RenderedCode.Types
                     Language.PureScript.Docs.Types
                     Language.PureScript.Docs.Utils.MonoidExtras
                     Language.PureScript.Environment Language.PureScript.Errors
                     Language.PureScript.Externs Language.PureScript.Kinds
                     Language.PureScript.Label Language.PureScript.Linter
                     Language.PureScript.Linter.Exhaustive
                     Language.PureScript.Linter.Imports Language.PureScript.Make
                     Language.PureScript.Make.Actions Language.PureScript.Make.BuildPlan
                     Language.PureScript.Make.Monad
                     Language.PureScript.ModuleDependencies Language.PureScript.Names
                     Language.PureScript.Options Language.PureScript.PSString
                     Language.PureScript.Parser Language.PureScript.Parser.Common
                     Language.PureScript.Parser.Declarations
                     Language.PureScript.Parser.Kinds Language.PureScript.Parser.Lexer
                     Language.PureScript.Parser.State Language.PureScript.Parser.Types
                     Language.PureScript.Pretty Language.PureScript.Pretty.Common
                     Language.PureScript.Pretty.Kinds Language.PureScript.Pretty.Types
                     Language.PureScript.Pretty.Values
                     Language.PureScript.Publish.BoxesHelpers
                     Language.PureScript.Renamer Language.PureScript.Sugar
                     Language.PureScript.Sugar.AdoNotation
                     Language.PureScript.Sugar.BindingGroups
                     Language.PureScript.Sugar.CaseDeclarations
                     Language.PureScript.Sugar.DoNotation
                     Language.PureScript.Sugar.LetPattern
                     Language.PureScript.Sugar.Names
                     Language.PureScript.Sugar.Names.Common
                     Language.PureScript.Sugar.Names.Env
                     Language.PureScript.Sugar.Names.Exports
                     Language.PureScript.Sugar.Names.Imports
                     Language.PureScript.Sugar.ObjectWildcards
                     Language.PureScript.Sugar.Operators
                     Language.PureScript.Sugar.Operators.Binders
                     Language.PureScript.Sugar.Operators.Common
                     Language.PureScript.Sugar.Operators.Expr
                     Language.PureScript.Sugar.Operators.Types
                     Language.PureScript.Sugar.TypeClasses
                     Language.PureScript.Sugar.TypeClasses.Deriving
                     Language.PureScript.Sugar.TypeDeclarations
                     Language.PureScript.Traversals Language.PureScript.TypeChecker
                     Language.PureScript.TypeChecker.Entailment
                     Language.PureScript.TypeChecker.Kinds
                     Language.PureScript.TypeChecker.Monad
                     Language.PureScript.TypeChecker.Skolems
                     Language.PureScript.TypeChecker.Subsumption
                     Language.PureScript.TypeChecker.Synonyms
                     Language.PureScript.TypeChecker.TypeSearch
                     Language.PureScript.TypeChecker.Types
                     Language.PureScript.TypeChecker.Unify
                     Language.PureScript.TypeClassDictionaries Language.PureScript.Types
                     Paths_purescript
package dependencies: aeson-1.3.1.1 aeson-better-errors-0.9.1.0
                      ansi-terminal-0.8.0.4 array-0.5.2.0 async-2.2.1 attoparsec-0.13.2.2
                      base-4.11.1.0 base-compat-0.10.4 binary-0.8.5.1
                      blaze-builder-0.4.1.0 bower-json-1.0.0.1 boxes-0.1.5
                      bytestring-0.10.8.2 colour-2.3.4 containers-0.5.11.0
                      data-ordlist-0.4.7.0 deepseq-1.4.3.0 directory-1.3.1.5
                      dlist-0.8.0.4 filepath-1.4.2 ghc-boot-th-8.4.3 ghc-prim-0.5.2.0
                      hashable-1.2.7.0 integer-gmp-1.0.2.0 integer-logarithms-1.0.2.1
                      language-javascript-0.6.0.11 lifted-base-0.2.3.12 microlens-0.4.9.1
                      microlens-ghc-0.4.9 microlens-mtl-0.1.11.1
                      microlens-platform-0.3.10 microlens-th-0.4.2.1
                      monad-control-1.0.2.3 mtl-2.2.2 parallel-3.2.1.1 parsec-3.1.13.0
                      pattern-arrows-0.0.2 pretty-1.1.3.6 primitive-0.6.3.0
                      protolude-0.2.2 random-1.1 safe-0.3.17 scientific-0.3.6.2
                      sourcemap-0.1.6 split-0.2.3.3 stm-2.4.5.0 syb-0.7 tagged-0.8.5
                      template-haskell-2.13.0.0 text-1.2.3.0 th-abstraction-0.2.8.0
                      time-1.8.0.2 time-locale-compat-0.1.1.4 transformers-0.5.5.0
                      transformers-base-0.4.5.2 unix-2.7.2.2 unordered-containers-0.2.9.0
                      utf8-string-1.0.1.1 uuid-types-1.0.3 vector-0.12.0.1
orphans: syb-0.7:Data.Generics.Instances colour-2.3.4:Data.Colour
         microlens-platform-0.3.10:Lens.Micro.Platform
         microlens-ghc-0.4.9:Lens.Micro.GHC stm-2.4.5.0:Control.Monad.STM
         attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         vector-0.12.0.1:Data.Vector.Unboxed
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.0:Data.Text.Lazy
         text-1.2.3.0:Data.Text binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.5.0:Control.Monad.Trans.Error
         base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: aeson-1.3.1.1:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         bower-json-1.0.0.1:Web.Bower.PackageMeta.Internal
                         containers-0.5.11.0:Data.Graph
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         dlist-0.8.0.4:Data.DList ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         microlens-0.4.9.1:Lens.Micro.Internal
                         microlens-ghc-0.4.9:Lens.Micro.GHC
                         microlens-mtl-0.1.11.1:Lens.Micro.Mtl.Internal
                         microlens-platform-0.3.10:Lens.Micro.Platform
                         monad-control-1.0.2.3:Control.Monad.Trans.Control
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Control.Monad.Logger
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.AST.Declarations
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.AST.Operators
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.AST.SourcePos
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Docs.RenderedCode.Types
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Docs.Types
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Environment
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Kinds
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Label
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Make.Monad
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Names
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.PSString
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.TypeClassDictionaries
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Types
                         tagged-0.8.5:Data.Tagged
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
                         th-abstraction-0.2.8.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  base-4.11.1.0:Control.Monad c5f960c67d822497578bffbd3e4c01cf
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.List 83dc843e47bfc0c5af51e19c6f3476d5
import  -/  base-4.11.1.0:Data.OldList 1b35aa3c6805ff7c8887a35a866fe006
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-compat-0.10.4:Prelude.Compat bb6796186ed35a1d09dc34362a3fc27e
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  mtl-2.2.2:Control.Monad.Error.Class df146c18e27154b8df4c8637c59fd61b
import  -/  mtl-2.2.2:Control.Monad.Writer b86905dc6b5d4d3a09dfa93d3ac3bb98
import  -/  mtl-2.2.2:Control.Monad.Writer.Class 69f540e019eada69892c26d267276458
import  -/  Language.PureScript 055283757289375c92e0f1e11d744c0e
  exports: 01fc85db00ce4cf253ba5c16e07330e5
import  -/  Language.PureScript.AST.Declarations 568e046fbf27b243bfc96f09017d4782
  Module 7cf4b96f7d4b51b446726a099ab87bb6
import  -/  Language.PureScript.Docs.Convert 0ff3b576d52bae937ee4df90e8c7a003
  exports: 1c94ccd01f67ff71cf57283c9c5303c0
  convertModules 76927d1381f101ed9aa1c6ea64a2c03a
import  -/  Language.PureScript.Docs.Render 3f6aa4f9c29883ff1fbb4ef80651b450
  exports: 3d1445f50d2b9141ec0d6a16f0361334
  renderChildDeclaration 2ce4ad2228de5f2f98d66420f4b650c7
  renderDeclarationWithOptions c0dc6af675f7c3d0a79b6bf41aced85c
import  -/  Language.PureScript.Docs.RenderedCode c7a77d8f9da9461d9b7b1607c98cc98a
  exports: bdff998a873c7d4afd4c5b1970194d83
import  -/  Language.PureScript.Docs.RenderedCode.RenderType ee492ed70af7249e37a3cfa564d45c3b
  currentModule af5ce77642123ce45827756ffe557961
  defaultRenderTypeOptions 0b088e59ab488875ab6b93272da29b29
import  -/  Language.PureScript.Docs.RenderedCode.Types 043476f1219ebaba7bef38f3035bc7df
  Keyword 3e05053bbc8a936be5d536e066ea02ea
  RenderedCode 4660ea0ffbba09617bc864a10b08d72f
  Space 0a63150921f42c5267754bbe069af2f0
  Symbol ef806f3592ad9cbec9dba9fbd6790cc5
  Syntax d01bc8fa1625de8d27bcfec317a31293
  outputWith 571a394cd6325194e6bd8112427d5a3e
import  -/  Language.PureScript.Docs.Types f3dabfa61d83d3270ed9cf5a3f1e8614
  exports: 49d03c0d410b46f9a363053ec495bd39
  ChildDataConstructor e3f74c1ce910ff9b2dadd1fd5417981d
  ChildDeclaration 3938843d4a06107f367196729d2e760b
  ChildDeclaration 8e63d40d255dc7777120ed694edffc05
  ChildInstance 2767c57f9a4542cd3c0e3520d6721df9
  ChildTypeClassMember d087ffdff794295523841c19891079d0
  Declaration d9b6668cba3af1eb075a8829f69a1ca7
  Declaration 8e63d40d255dc7777120ed694edffc05
  Local c188aad839d0d21d68d9aa830880403c
  Module 4b9f60ec266d7daf9641f4f125b8a703
  Module 8e63d40d255dc7777120ed694edffc05
  cdeclComments 8e63d40d255dc7777120ed694edffc05
  cdeclInfo 8e63d40d255dc7777120ed694edffc05
  cdeclSourceSpan 8e63d40d255dc7777120ed694edffc05
  cdeclTitle 8e63d40d255dc7777120ed694edffc05
  declChildren 8e63d40d255dc7777120ed694edffc05
  declComments 8e63d40d255dc7777120ed694edffc05
  declInfo 8e63d40d255dc7777120ed694edffc05
  declSourceSpan 8e63d40d255dc7777120ed694edffc05
  declTitle 8e63d40d255dc7777120ed694edffc05
  ignorePackage 8157e44987c17b6b65e75c11b723197c
  modComments 8e63d40d255dc7777120ed694edffc05
  modDeclarations 8e63d40d255dc7777120ed694edffc05
  modName 8e63d40d255dc7777120ed694edffc05
  modReExports 8e63d40d255dc7777120ed694edffc05
import  -/  Language.PureScript.Errors 15d6eb6b2d4d480750061a0585d4e64c
  MultipleErrors ad1de73a1d5a6b0ccd9657dedebc94f3
import  -/  Language.PureScript.Names b3bf151840f3e8f2eb61eff186432886
  ModuleName 5a70062bbdf29e6dc659ad8bf5326b50
  runModuleName e07c63fa3ece350e6976663ef993edbb
import  -/  text-1.2.3.0:Data.Text 7daa7e6c9b39d8cc1679e5ec5c64d2be
import  -/  text-1.2.3.0:Data.Text.Internal 30a0a123f71f63b26cd34c6b24f23411
import  -/  transformers-0.5.5.0:Control.Monad.Trans.Writer.Lazy 932eb57f5933138df24d28686f218b40
be46743028d92e75d84617f8f0dd2791
  $fEqFirst ::
    GHC.Classes.Eq Language.PureScript.Docs.AsMarkdown.First
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Docs.AsMarkdown.First
                  Language.PureScript.Docs.AsMarkdown.$fEqFirst_$c==
                  Language.PureScript.Docs.AsMarkdown.$fEqFirst_$c/= -}
be46743028d92e75d84617f8f0dd2791
  $fEqFirst_$c/= ::
    Language.PureScript.Docs.AsMarkdown.First
    -> Language.PureScript.Docs.AsMarkdown.First -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Docs.AsMarkdown.First)
                   (y :: Language.PureScript.Docs.AsMarkdown.First) ->
                 case x of wild {
                   Language.PureScript.Docs.AsMarkdown.First
                   -> case y of wild1 {
                        Language.PureScript.Docs.AsMarkdown.First -> GHC.Types.False
                        Language.PureScript.Docs.AsMarkdown.NotFirst -> GHC.Types.True }
                   Language.PureScript.Docs.AsMarkdown.NotFirst
                   -> case y of wild1 {
                        Language.PureScript.Docs.AsMarkdown.First -> GHC.Types.True
                        Language.PureScript.Docs.AsMarkdown.NotFirst
                        -> GHC.Types.False } }) -}
be46743028d92e75d84617f8f0dd2791
  $fEqFirst_$c== ::
    Language.PureScript.Docs.AsMarkdown.First
    -> Language.PureScript.Docs.AsMarkdown.First -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Language.PureScript.Docs.AsMarkdown.First)
                   (ds1 :: Language.PureScript.Docs.AsMarkdown.First) ->
                 case ds of wild {
                   Language.PureScript.Docs.AsMarkdown.First
                   -> case ds1 of wild1 {
                        Language.PureScript.Docs.AsMarkdown.First -> GHC.Types.True
                        Language.PureScript.Docs.AsMarkdown.NotFirst -> GHC.Types.False }
                   Language.PureScript.Docs.AsMarkdown.NotFirst
                   -> case ds1 of wild1 {
                        Language.PureScript.Docs.AsMarkdown.First -> GHC.Types.False
                        Language.PureScript.Docs.AsMarkdown.NotFirst
                        -> GHC.Types.True } }) -}
be46743028d92e75d84617f8f0dd2791
  $fOrdFirst ::
    GHC.Classes.Ord Language.PureScript.Docs.AsMarkdown.First
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Docs.AsMarkdown.First
                  Language.PureScript.Docs.AsMarkdown.$fEqFirst
                  Language.PureScript.Docs.AsMarkdown.$fOrdFirst_$ccompare
                  Language.PureScript.Docs.AsMarkdown.$fOrdFirst_$c<
                  Language.PureScript.Docs.AsMarkdown.$fOrdFirst_$c<=
                  Language.PureScript.Docs.AsMarkdown.$fOrdFirst_$c>
                  Language.PureScript.Docs.AsMarkdown.$fOrdFirst_$c>=
                  Language.PureScript.Docs.AsMarkdown.$fOrdFirst_$cmax
                  Language.PureScript.Docs.AsMarkdown.$fOrdFirst_$cmin -}
be46743028d92e75d84617f8f0dd2791
  $fOrdFirst_$c< ::
    Language.PureScript.Docs.AsMarkdown.First
    -> Language.PureScript.Docs.AsMarkdown.First -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.Docs.AsMarkdown.First)
                   (b :: Language.PureScript.Docs.AsMarkdown.First) ->
                 case a of wild {
                   Language.PureScript.Docs.AsMarkdown.First
                   -> case b of wild1 {
                        Language.PureScript.Docs.AsMarkdown.First -> GHC.Types.False
                        Language.PureScript.Docs.AsMarkdown.NotFirst -> GHC.Types.True }
                   Language.PureScript.Docs.AsMarkdown.NotFirst
                   -> case b of wild1 { DEFAULT -> GHC.Types.False } }) -}
be46743028d92e75d84617f8f0dd2791
  $fOrdFirst_$c<= ::
    Language.PureScript.Docs.AsMarkdown.First
    -> Language.PureScript.Docs.AsMarkdown.First -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.Docs.AsMarkdown.First)
                   (b :: Language.PureScript.Docs.AsMarkdown.First) ->
                 case b of wild {
                   Language.PureScript.Docs.AsMarkdown.First
                   -> case a of wild1 {
                        Language.PureScript.Docs.AsMarkdown.First -> GHC.Types.True
                        Language.PureScript.Docs.AsMarkdown.NotFirst -> GHC.Types.False }
                   Language.PureScript.Docs.AsMarkdown.NotFirst
                   -> case a of wild1 { DEFAULT -> GHC.Types.True } }) -}
be46743028d92e75d84617f8f0dd2791
  $fOrdFirst_$c> ::
    Language.PureScript.Docs.AsMarkdown.First
    -> Language.PureScript.Docs.AsMarkdown.First -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, True)
                (\ (a :: Language.PureScript.Docs.AsMarkdown.First)
                   (b :: Language.PureScript.Docs.AsMarkdown.First) ->
                 Language.PureScript.Docs.AsMarkdown.$fOrdFirst_$c< b a) -}
be46743028d92e75d84617f8f0dd2791
  $fOrdFirst_$c>= ::
    Language.PureScript.Docs.AsMarkdown.First
    -> Language.PureScript.Docs.AsMarkdown.First -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.Docs.AsMarkdown.First)
                   (b :: Language.PureScript.Docs.AsMarkdown.First) ->
                 case a of wild {
                   Language.PureScript.Docs.AsMarkdown.First
                   -> case b of wild1 {
                        Language.PureScript.Docs.AsMarkdown.First -> GHC.Types.True
                        Language.PureScript.Docs.AsMarkdown.NotFirst -> GHC.Types.False }
                   Language.PureScript.Docs.AsMarkdown.NotFirst
                   -> case b of wild1 { DEFAULT -> GHC.Types.True } }) -}
be46743028d92e75d84617f8f0dd2791
  $fOrdFirst_$ccompare ::
    Language.PureScript.Docs.AsMarkdown.First
    -> Language.PureScript.Docs.AsMarkdown.First -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.Docs.AsMarkdown.First)
                   (b :: Language.PureScript.Docs.AsMarkdown.First) ->
                 case a of wild {
                   Language.PureScript.Docs.AsMarkdown.First
                   -> case b of wild1 {
                        Language.PureScript.Docs.AsMarkdown.First -> GHC.Types.EQ
                        Language.PureScript.Docs.AsMarkdown.NotFirst -> GHC.Types.LT }
                   Language.PureScript.Docs.AsMarkdown.NotFirst
                   -> case b of wild1 {
                        Language.PureScript.Docs.AsMarkdown.First -> GHC.Types.GT
                        Language.PureScript.Docs.AsMarkdown.NotFirst
                        -> GHC.Types.EQ } }) -}
be46743028d92e75d84617f8f0dd2791
  $fOrdFirst_$cmax ::
    Language.PureScript.Docs.AsMarkdown.First
    -> Language.PureScript.Docs.AsMarkdown.First
    -> Language.PureScript.Docs.AsMarkdown.First
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Docs.AsMarkdown.First)
                   (y :: Language.PureScript.Docs.AsMarkdown.First) ->
                 case y of wild {
                   Language.PureScript.Docs.AsMarkdown.First -> x
                   Language.PureScript.Docs.AsMarkdown.NotFirst
                   -> case x of wild1 { DEFAULT ->
                      Language.PureScript.Docs.AsMarkdown.NotFirst } }) -}
be46743028d92e75d84617f8f0dd2791
  $fOrdFirst_$cmin ::
    Language.PureScript.Docs.AsMarkdown.First
    -> Language.PureScript.Docs.AsMarkdown.First
    -> Language.PureScript.Docs.AsMarkdown.First
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Docs.AsMarkdown.First)
                   (y :: Language.PureScript.Docs.AsMarkdown.First) ->
                 case y of wild {
                   Language.PureScript.Docs.AsMarkdown.First
                   -> case x of wild1 { DEFAULT ->
                      Language.PureScript.Docs.AsMarkdown.First }
                   Language.PureScript.Docs.AsMarkdown.NotFirst -> x }) -}
be46743028d92e75d84617f8f0dd2791
  $fShowFirst ::
    GHC.Show.Show Language.PureScript.Docs.AsMarkdown.First
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Docs.AsMarkdown.First
                  Language.PureScript.Docs.AsMarkdown.$fShowFirst_$cshowsPrec
                  Language.PureScript.Docs.AsMarkdown.$fShowFirst_$cshow
                  Language.PureScript.Docs.AsMarkdown.$fShowFirst_$cshowList -}
be46743028d92e75d84617f8f0dd2791
  $fShowFirst1 ::
    Language.PureScript.Docs.AsMarkdown.First -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Language.PureScript.Docs.AsMarkdown.First)
                   (eta :: GHC.Base.String) ->
                 case ds of wild {
                   Language.PureScript.Docs.AsMarkdown.First
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           Language.PureScript.Docs.AsMarkdown.$fShowFirst4)
                        eta
                   Language.PureScript.Docs.AsMarkdown.NotFirst
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           Language.PureScript.Docs.AsMarkdown.$fShowFirst2)
                        eta }) -}
a18db51805fc2c6ccec30989bfa8b655
  $fShowFirst2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Docs.AsMarkdown.$fShowFirst3) -}
39f7bbef11555d286cdb74c167c29788
  $fShowFirst3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("NotFirst"#) -}
7e2ebf693537413b5499efdd101e545f
  $fShowFirst4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Docs.AsMarkdown.$fShowFirst5) -}
1b0b7c31724b13ae18e78069c2ac3202
  $fShowFirst5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("First"#) -}
be46743028d92e75d84617f8f0dd2791
  $fShowFirst_$cshow ::
    Language.PureScript.Docs.AsMarkdown.First -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Docs.AsMarkdown.First) ->
                 case x of wild {
                   Language.PureScript.Docs.AsMarkdown.First
                   -> Language.PureScript.Docs.AsMarkdown.$fShowFirst4
                   Language.PureScript.Docs.AsMarkdown.NotFirst
                   -> Language.PureScript.Docs.AsMarkdown.$fShowFirst2 }) -}
be46743028d92e75d84617f8f0dd2791
  $fShowFirst_$cshowList ::
    [Language.PureScript.Docs.AsMarkdown.First] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Docs.AsMarkdown.First])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Docs.AsMarkdown.First
                   Language.PureScript.Docs.AsMarkdown.$fShowFirst1
                   ls
                   s) -}
be46743028d92e75d84617f8f0dd2791
  $fShowFirst_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Docs.AsMarkdown.First -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (ds1 :: Language.PureScript.Docs.AsMarkdown.First)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   Language.PureScript.Docs.AsMarkdown.First
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           Language.PureScript.Docs.AsMarkdown.$fShowFirst4)
                        eta
                   Language.PureScript.Docs.AsMarkdown.NotFirst
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           Language.PureScript.Docs.AsMarkdown.$fShowFirst2)
                        eta }) -}
39549eb10832f14ba8e11038e12df5f7
  $tc'First :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11004988264428280080##
                   16227444175326454007##
                   Language.PureScript.Docs.AsMarkdown.$trModule
                   Language.PureScript.Docs.AsMarkdown.$tc'First2
                   0#
                   Language.PureScript.Docs.AsMarkdown.$tc'First1) -}
1332b7cad7a2cb18eb555375b50958e2
  $tc'First1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
de0cb3c21739336d7db1690ddae89c5b
  $tc'First2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Docs.AsMarkdown.$tc'First3) -}
06665410ab9f8a3076b9d0f471984bcf
  $tc'First3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'First"#) -}
28d0ed5bd5194f03e0e319af73de03c5
  $tc'NotFirst :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15734472358163136584##
                   9608113054139779705##
                   Language.PureScript.Docs.AsMarkdown.$trModule
                   Language.PureScript.Docs.AsMarkdown.$tc'NotFirst1
                   0#
                   Language.PureScript.Docs.AsMarkdown.$tc'First1) -}
ddd21b5c53c9aee59a1c61cbae49ce1f
  $tc'NotFirst1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Docs.AsMarkdown.$tc'NotFirst2) -}
9fb2d2f58cf38d8af824724fb5b97610
  $tc'NotFirst2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'NotFirst"#) -}
eccfe6710f97efb8fd43657ad564774b
  $tcFirst :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3007709199945539688##
                   2565133880607816408##
                   Language.PureScript.Docs.AsMarkdown.$trModule
                   Language.PureScript.Docs.AsMarkdown.$tcFirst1
                   0#
                   GHC.Types.krep$*) -}
47031b9fa870c3ed6fc64aba3bb40899
  $tcFirst1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Docs.AsMarkdown.$fShowFirst5) -}
a42e74f956f209ea9793ae8d0fcb9c24
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Language.PureScript.Docs.AsMarkdown.$trModule3
                   Language.PureScript.Docs.AsMarkdown.$trModule1) -}
4c80836debd2df3492ab8ea03b60f676
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Docs.AsMarkdown.$trModule2) -}
3697cbcc655d6e9120e75100f2f08186
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Language.PureScript.Docs.AsMarkdown"#) -}
90d12f7de68417d306ced93766ab1a0b
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Docs.AsMarkdown.$trModule4) -}
e0f6cbe14116ff70113e29ac24e06170
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"#) -}
121438a0f0d10f2131d9f28f768d5140
  $wgo ::
    [Language.PureScript.Docs.Types.Module]
    -> (# (), [Data.Text.Internal.Text] #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
0d90bfabefdc7293f8b9298122c041d6
  $wlvl ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int# -> GHC.Prim.Int# -> Data.Text.Internal.Text
  {- Arity: 3, Strictness: <L,U><S,U><S,U>, Inline: [0] -}
db19b8dd5f5d884d6a4617cf0bc2f2e6
  $wmodulesAsMarkdown ::
    [Language.PureScript.Docs.Types.Module]
    -> (# (), [Data.Text.Internal.Text] #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
15dc42a7bd97093d884c1f0ac872b1cc
  type Docs =
    Control.Monad.Trans.Writer.Lazy.Writer [Data.Text.Internal.Text] ()
be46743028d92e75d84617f8f0dd2791
  data First = First | NotFirst
21fa84e1c5b091e19964df6d7a8a768e
  codeToString ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCode
    -> Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ (eta :: Language.PureScript.Docs.RenderedCode.Types.RenderedCode) ->
                 Language.PureScript.Docs.AsMarkdown.codeToString_go
                   eta
                     `cast`
                   (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])) -}
4d767d1d4f34cbaeb33e9af753f66012
  codeToString_go ::
    [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
    -> Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S,1*U> -}
103c28cbed0d385b6b90030fc9e3d9ed
  modulesAsMarkdown ::
    [Language.PureScript.Docs.Types.Module]
    -> Language.PureScript.Docs.AsMarkdown.Docs
  {- Arity: 1, Strictness: <S,1*U>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: [Language.PureScript.Docs.Types.Module]) ->
                 case Language.PureScript.Docs.AsMarkdown.$wmodulesAsMarkdown
                        w of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2)
                   `cast`
                 (Sym (Data.Functor.Identity.N:Identity[0]
                           <((),
                             [Data.Text.Internal.Text])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                                       <[Data.Text.Internal.Text]>_N
                                                                       <Data.Functor.Identity.Identity>_R
                                                                       <()>_N)) }) -}
4e512ca95a319659e2fb2b1b2927d9a1
  renderModulesAsMarkdown ::
    Control.Monad.Error.Class.MonadError
      Language.PureScript.Errors.MultipleErrors m =>
    [Language.PureScript.AST.Declarations.Module]
    -> m Data.Text.Internal.Text
  {- Arity: 1,
     Strictness: <L,U(U(U(U(C(C(U)),C(C1(U))),C(U),A,C(C1(C1(U))),A,A),C(C1(U)),C(C1(U)),C(U),C(U)),C(U),C(C1(U)))>,
     Unfolding: (\ @ m :: * -> *
                   ($dMonadError :: Control.Monad.Error.Class.MonadError
                                      Language.PureScript.Errors.MultipleErrors m) ->
                 let {
                   f :: m [Language.PureScript.Docs.Types.Module]
                        -> m Data.Text.Internal.Text
                   = GHC.Base.fmap
                       @ m
                       (GHC.Base.$p1Applicative
                          @ m
                          (GHC.Base.$p1Monad
                             @ m
                             (Control.Monad.Error.Class.$p1MonadError
                                @ Language.PureScript.Errors.MultipleErrors
                                @ m
                                $dMonadError)))
                       @ [Language.PureScript.Docs.Types.Module]
                       @ Data.Text.Internal.Text
                       Language.PureScript.Docs.AsMarkdown.renderModulesAsMarkdown1
                 } in
                 let {
                   g :: [Language.PureScript.AST.Declarations.Module]
                        -> m [Language.PureScript.Docs.Types.Module]
                   = Language.PureScript.Docs.Convert.convertModules
                       @ m
                       $dMonadError
                       (Language.PureScript.Docs.Types.Local
                          @ Language.PureScript.Names.ModuleName)
                 } in
                 \ (x :: [Language.PureScript.AST.Declarations.Module]) ->
                 f (g x)) -}
0461e928a5cc39d325ab477a88ea33c5
  renderModulesAsMarkdown1 ::
    [Language.PureScript.Docs.Types.Module] -> Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: [Language.PureScript.Docs.Types.Module]) ->
                 case Language.PureScript.Docs.AsMarkdown.$wgo
                        x of ww { (#,#) ww1 ww2 ->
                 Data.Text.concat
                   (GHC.Base.map
                      @ Data.Text.Internal.Text
                      @ Data.Text.Internal.Text
                      Language.PureScript.Docs.AsMarkdown.renderModulesAsMarkdown2
                      ww2) }) -}
23cffec0a974c67cde38a4eb37134083
  renderModulesAsMarkdown2 ::
    Data.Text.Internal.Text -> Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S(SSS),1*U(U,U,U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Data.Text.Internal.Text) ->
                 case w of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Language.PureScript.Docs.AsMarkdown.$wlvl ww1 ww2 ww3 }) -}
ebac5eecc765194c23b651200c24c297
  runDocs ::
    Language.PureScript.Docs.AsMarkdown.Docs -> Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Control.Monad.Trans.Writer.Lazy.Writer
                           [Data.Text.Internal.Text] ()) ->
                 case x `cast`
                      (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                           <[Data.Text.Internal.Text]>_N
                           <Data.Functor.Identity.Identity>_R
                           <()>_N ; Data.Functor.Identity.N:Identity[0]
                                        <((), [Data.Text.Internal.Text])>_R) of wild { (,) ds1 y ->
                 Data.Text.concat
                   (GHC.Base.build
                      @ Data.Text.Internal.Text
                      (\ @ b1
                         (c :: Data.Text.Internal.Text -> b1 -> b1)[OneShot]
                         (n :: b1)[OneShot] ->
                       GHC.Base.foldr
                         @ Data.Text.Internal.Text
                         @ b1
                         (GHC.Base.mapFB
                            @ Data.Text.Internal.Text
                            @ b1
                            @ Data.Text.Internal.Text
                            c
                            Language.PureScript.Docs.AsMarkdown.renderModulesAsMarkdown2)
                         n
                         y)) }) -}
instance GHC.Classes.Eq [Language.PureScript.Docs.AsMarkdown.First]
  = Language.PureScript.Docs.AsMarkdown.$fEqFirst
instance GHC.Classes.Ord [Language.PureScript.Docs.AsMarkdown.First]
  = Language.PureScript.Docs.AsMarkdown.$fOrdFirst
instance GHC.Show.Show [Language.PureScript.Docs.AsMarkdown.First]
  = Language.PureScript.Docs.AsMarkdown.$fShowFirst
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

