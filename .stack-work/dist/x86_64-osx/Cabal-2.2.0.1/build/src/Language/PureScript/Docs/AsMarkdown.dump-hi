
==================== FINAL INTERFACE ====================
2019-01-24 14:17:28.181752 UTC

interface purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Docs.AsMarkdown 8043
  interface hash: 58dde86784997d61e80efc7119152d3b
  ABI hash: 351777e35a025db8b7483032d310bcba
  export-list hash: e01954d63e4504c613c568a763a02126
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 94f2816997904b752beedc19c412f025
  opt_hash: 2c98c95d41c045ae9c2fb565ec8aabc6
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Language.PureScript.Docs.AsMarkdown.codeToString
  Language.PureScript.Docs.AsMarkdown.modulesAsMarkdown
  Language.PureScript.Docs.AsMarkdown.renderModulesAsMarkdown
  Language.PureScript.Docs.AsMarkdown.runDocs
  Language.PureScript.Docs.AsMarkdown.Docs
module dependencies: Control.Monad.Logger Control.Monad.Supply
                     Control.Monad.Supply.Class Language.PureScript
                     Language.PureScript.AST Language.PureScript.AST.Binders
                     Language.PureScript.AST.Declarations
                     Language.PureScript.AST.Exported Language.PureScript.AST.Literals
                     Language.PureScript.AST.Operators Language.PureScript.AST.SourcePos
                     Language.PureScript.AST.Traversals Language.PureScript.Bundle
                     Language.PureScript.CodeGen.JS
                     Language.PureScript.CodeGen.JS.Common
                     Language.PureScript.CodeGen.JS.Printer Language.PureScript.Comments
                     Language.PureScript.Constants Language.PureScript.CoreFn
                     Language.PureScript.CoreFn.Ann Language.PureScript.CoreFn.Binders
                     Language.PureScript.CoreFn.Desugar Language.PureScript.CoreFn.Expr
                     Language.PureScript.CoreFn.Meta Language.PureScript.CoreFn.Module
                     Language.PureScript.CoreFn.Optimizer
                     Language.PureScript.CoreFn.ToJSON
                     Language.PureScript.CoreFn.Traversals
                     Language.PureScript.CoreImp.AST
                     Language.PureScript.CoreImp.Optimizer
                     Language.PureScript.CoreImp.Optimizer.Blocks
                     Language.PureScript.CoreImp.Optimizer.Common
                     Language.PureScript.CoreImp.Optimizer.Inliner
                     Language.PureScript.CoreImp.Optimizer.MagicDo
                     Language.PureScript.CoreImp.Optimizer.TCO
                     Language.PureScript.CoreImp.Optimizer.Unused
                     Language.PureScript.Crash Language.PureScript.Docs.Convert
                     Language.PureScript.Docs.Convert.ReExports
                     Language.PureScript.Docs.Convert.Single
                     Language.PureScript.Docs.Prim Language.PureScript.Docs.Render
                     Language.PureScript.Docs.RenderedCode
                     Language.PureScript.Docs.RenderedCode.RenderKind
                     Language.PureScript.Docs.RenderedCode.RenderType
                     Language.PureScript.Docs.RenderedCode.Types
                     Language.PureScript.Docs.Types
                     Language.PureScript.Docs.Utils.MonoidExtras
                     Language.PureScript.Environment Language.PureScript.Errors
                     Language.PureScript.Externs Language.PureScript.Kinds
                     Language.PureScript.Label Language.PureScript.Linter
                     Language.PureScript.Linter.Exhaustive
                     Language.PureScript.Linter.Imports Language.PureScript.Make
                     Language.PureScript.Make.Actions Language.PureScript.Make.BuildPlan
                     Language.PureScript.Make.Monad
                     Language.PureScript.ModuleDependencies Language.PureScript.Names
                     Language.PureScript.Options Language.PureScript.PSString
                     Language.PureScript.Parser Language.PureScript.Parser.Common
                     Language.PureScript.Parser.Declarations
                     Language.PureScript.Parser.Kinds Language.PureScript.Parser.Lexer
                     Language.PureScript.Parser.State Language.PureScript.Parser.Types
                     Language.PureScript.Pretty Language.PureScript.Pretty.Common
                     Language.PureScript.Pretty.Kinds Language.PureScript.Pretty.Types
                     Language.PureScript.Pretty.Values
                     Language.PureScript.Publish.BoxesHelpers
                     Language.PureScript.Renamer Language.PureScript.Sugar
                     Language.PureScript.Sugar.AdoNotation
                     Language.PureScript.Sugar.BindingGroups
                     Language.PureScript.Sugar.CaseDeclarations
                     Language.PureScript.Sugar.DoNotation
                     Language.PureScript.Sugar.LetPattern
                     Language.PureScript.Sugar.Names
                     Language.PureScript.Sugar.Names.Common
                     Language.PureScript.Sugar.Names.Env
                     Language.PureScript.Sugar.Names.Exports
                     Language.PureScript.Sugar.Names.Imports
                     Language.PureScript.Sugar.ObjectWildcards
                     Language.PureScript.Sugar.Operators
                     Language.PureScript.Sugar.Operators.Binders
                     Language.PureScript.Sugar.Operators.Common
                     Language.PureScript.Sugar.Operators.Expr
                     Language.PureScript.Sugar.Operators.Types
                     Language.PureScript.Sugar.TypeClasses
                     Language.PureScript.Sugar.TypeClasses.Deriving
                     Language.PureScript.Sugar.TypeDeclarations
                     Language.PureScript.Traversals Language.PureScript.TypeChecker
                     Language.PureScript.TypeChecker.Entailment
                     Language.PureScript.TypeChecker.Kinds
                     Language.PureScript.TypeChecker.Monad
                     Language.PureScript.TypeChecker.Skolems
                     Language.PureScript.TypeChecker.Subsumption
                     Language.PureScript.TypeChecker.Synonyms
                     Language.PureScript.TypeChecker.TypeSearch
                     Language.PureScript.TypeChecker.Types
                     Language.PureScript.TypeChecker.Unify
                     Language.PureScript.TypeClassDictionaries Language.PureScript.Types
                     Paths_purescript
package dependencies: aeson-1.3.1.1 aeson-better-errors-0.9.1.0
                      ansi-terminal-0.8.0.4 array-0.5.2.0 async-2.2.1 attoparsec-0.13.2.2
                      base-4.11.1.0 base-compat-0.10.4 binary-0.8.5.1
                      blaze-builder-0.4.1.0 bower-json-1.0.0.1 boxes-0.1.5
                      bytestring-0.10.8.2 colour-2.3.4 containers-0.5.11.0
                      data-ordlist-0.4.7.0 deepseq-1.4.3.0 directory-1.3.1.5
                      dlist-0.8.0.4 filepath-1.4.2 ghc-boot-th-8.4.3 ghc-prim-0.5.2.0
                      hashable-1.2.7.0 integer-gmp-1.0.2.0 integer-logarithms-1.0.2.1
                      language-javascript-0.6.0.11 lifted-base-0.2.3.12 microlens-0.4.9.1
                      microlens-ghc-0.4.9 microlens-mtl-0.1.11.1
                      microlens-platform-0.3.10 microlens-th-0.4.2.1
                      monad-control-1.0.2.3 mtl-2.2.2 parallel-3.2.1.1 parsec-3.1.13.0
                      pattern-arrows-0.0.2 pretty-1.1.3.6 primitive-0.6.3.0
                      protolude-0.2.2 random-1.1 safe-0.3.17 scientific-0.3.6.2
                      sourcemap-0.1.6 split-0.2.3.3 stm-2.4.5.0 syb-0.7 tagged-0.8.5
                      template-haskell-2.13.0.0 text-1.2.3.0 th-abstraction-0.2.8.0
                      time-1.8.0.2 time-locale-compat-0.1.1.4 transformers-0.5.5.0
                      transformers-base-0.4.5.2 unix-2.7.2.2 unordered-containers-0.2.9.0
                      utf8-string-1.0.1.1 uuid-types-1.0.3 vector-0.12.0.1
orphans: syb-0.7:Data.Generics.Instances colour-2.3.4:Data.Colour
         stm-2.4.5.0:Control.Monad.STM
         attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         microlens-platform-0.3.10:Lens.Micro.Platform
         microlens-ghc-0.4.9:Lens.Micro.GHC
         hashable-1.2.7.0:Data.Hashable.Generic
         vector-0.12.0.1:Data.Vector.Unboxed
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.5.0:Control.Monad.Trans.Error
         text-1.2.3.0:Data.Text.Lazy text-1.2.3.0:Data.Text
         binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: aeson-1.3.1.1:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         bower-json-1.0.0.1:Web.Bower.PackageMeta.Internal
                         containers-0.5.11.0:Data.Graph
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         dlist-0.8.0.4:Data.DList ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         microlens-0.4.9.1:Lens.Micro.Internal
                         microlens-ghc-0.4.9:Lens.Micro.GHC
                         microlens-mtl-0.1.11.1:Lens.Micro.Mtl.Internal
                         microlens-platform-0.3.10:Lens.Micro.Platform
                         monad-control-1.0.2.3:Control.Monad.Trans.Control
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Control.Monad.Logger
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.Declarations
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.Operators
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.SourcePos
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Comments
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Docs.RenderedCode.Types
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Docs.Types
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Environment
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Kinds
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Label
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Make.Monad
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Names
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.PSString
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.TypeClassDictionaries
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Types
                         tagged-0.8.5:Data.Tagged
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
                         th-abstraction-0.2.8.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  base-4.11.1.0:Control.Monad c5f960c67d822497578bffbd3e4c01cf
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.List 83dc843e47bfc0c5af51e19c6f3476d5
import  -/  base-4.11.1.0:Data.OldList 1b35aa3c6805ff7c8887a35a866fe006
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-compat-0.10.4:Prelude.Compat bb6796186ed35a1d09dc34362a3fc27e
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  mtl-2.2.2:Control.Monad.Error.Class df146c18e27154b8df4c8637c59fd61b
import  -/  mtl-2.2.2:Control.Monad.Writer b86905dc6b5d4d3a09dfa93d3ac3bb98
import  -/  mtl-2.2.2:Control.Monad.Writer.Class 69f540e019eada69892c26d267276458
import  -/  Language.PureScript 4a24ccd892adbf021daf2410ebd61e22
  exports: 139dcaa90af8ddcee6aa0492159f351d
import  -/  Language.PureScript.AST.Declarations 586bc75044e8737d02875208d17d4395
  Module 3342e00ee072addfd009ee61e87fb865
import  -/  Language.PureScript.Docs.Convert 18435db02a56362a919e921e545058eb
  exports: a2c423199112c92ea661c100a398d5ae
  convertModules da5af3f4308ff80f0c087388d12a40ff
import  -/  Language.PureScript.Docs.Render b831465a701583fd8a564131640eff10
  exports: 86a20a5ede0ce78c161164e977c6da6a
  renderChildDeclaration 8fe1fef69cb298ac03b6db3cd3ee525b
  renderDeclaration 1672b1f5cc640558ad5ff6f56e719d41
import  -/  Language.PureScript.Docs.RenderedCode be3d746558a5dc6cd329381776634da0
  exports: a74931cbe482565a8bfb82d89c3dabe0
import  -/  Language.PureScript.Docs.RenderedCode.Types a63cc6a5cb22a8a549b2d76ebcbc879a
  Keyword 886ce9d6a4cb292f8115c4f0728e6fed
  RenderedCode b76660a0424da31964a78f3df8712e5d
  Space efd4240233d77313df55a85cd409d255
  Symbol b116f0430e01419d4078175962e452f1
  Syntax fae5a4f045388851de0eb7fd7a6cd279
  outputWith a498c2ab6fddedd3074c27f5bd0b57f8
import  -/  Language.PureScript.Docs.Types 8ff7c3b28d1548ecbdf2d5a573cc163d
  exports: b81c2b0b69c0f139e99069fb9794db69
  ChildDataConstructor c02b1d1ac3554b78545d34f14e7b7513
  ChildDeclaration da36857b7ace27f106e0e32084691791
  ChildDeclaration cce819b6566f028d040fc57bb265fd8d
  ChildInstance 7016ebc136f1dd745b6b2d7bd27a686f
  ChildTypeClassMember c99514ef45785e97caa8f678f2893be0
  Declaration 8d78dc6577f19e7ef0eb35e8f2e37d74
  Declaration cce819b6566f028d040fc57bb265fd8d
  Local 559d6dc06930c426b5f0966492a5f5cd
  Module ce06b0db4015f02195d03f184e88eb90
  Module cce819b6566f028d040fc57bb265fd8d
  cdeclComments cce819b6566f028d040fc57bb265fd8d
  cdeclInfo cce819b6566f028d040fc57bb265fd8d
  cdeclSourceSpan cce819b6566f028d040fc57bb265fd8d
  cdeclTitle cce819b6566f028d040fc57bb265fd8d
  declChildren cce819b6566f028d040fc57bb265fd8d
  declComments cce819b6566f028d040fc57bb265fd8d
  declInfo cce819b6566f028d040fc57bb265fd8d
  declSourceSpan cce819b6566f028d040fc57bb265fd8d
  declTitle cce819b6566f028d040fc57bb265fd8d
  ignorePackage 4b019242a9beef4f09d6fbd41267ee66
  modComments cce819b6566f028d040fc57bb265fd8d
  modDeclarations cce819b6566f028d040fc57bb265fd8d
  modName cce819b6566f028d040fc57bb265fd8d
  modReExports cce819b6566f028d040fc57bb265fd8d
import  -/  Language.PureScript.Errors 3c1ad933587510f8b20a8c9ec2e86ce9
  MultipleErrors e1ef6a17348ccfe3ef65185d3c5f9026
import  -/  Language.PureScript.Names 00f694509122478d97b327fbbccae327
  runModuleName 58b788b37f600c0f34fa85241d7748ad
import  -/  text-1.2.3.0:Data.Text 7daa7e6c9b39d8cc1679e5ec5c64d2be
import  -/  text-1.2.3.0:Data.Text.Internal 30a0a123f71f63b26cd34c6b24f23411
import  -/  transformers-0.5.5.0:Control.Monad.Trans.Writer.Lazy 932eb57f5933138df24d28686f218b40
357c2cb65b9af2af1cd247ce3824f4fc
  $fEqFirst ::
    GHC.Classes.Eq Language.PureScript.Docs.AsMarkdown.First
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Docs.AsMarkdown.First
                  Language.PureScript.Docs.AsMarkdown.$fEqFirst_$c==
                  Language.PureScript.Docs.AsMarkdown.$fEqFirst_$c/= -}
357c2cb65b9af2af1cd247ce3824f4fc
  $fEqFirst_$c/= ::
    Language.PureScript.Docs.AsMarkdown.First
    -> Language.PureScript.Docs.AsMarkdown.First -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Docs.AsMarkdown.First)
                   (y :: Language.PureScript.Docs.AsMarkdown.First) ->
                 case x of wild {
                   Language.PureScript.Docs.AsMarkdown.First
                   -> case y of wild1 {
                        Language.PureScript.Docs.AsMarkdown.First -> GHC.Types.False
                        Language.PureScript.Docs.AsMarkdown.NotFirst -> GHC.Types.True }
                   Language.PureScript.Docs.AsMarkdown.NotFirst
                   -> case y of wild1 {
                        Language.PureScript.Docs.AsMarkdown.First -> GHC.Types.True
                        Language.PureScript.Docs.AsMarkdown.NotFirst
                        -> GHC.Types.False } }) -}
357c2cb65b9af2af1cd247ce3824f4fc
  $fEqFirst_$c== ::
    Language.PureScript.Docs.AsMarkdown.First
    -> Language.PureScript.Docs.AsMarkdown.First -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Language.PureScript.Docs.AsMarkdown.First)
                   (ds1 :: Language.PureScript.Docs.AsMarkdown.First) ->
                 case ds of wild {
                   Language.PureScript.Docs.AsMarkdown.First
                   -> case ds1 of wild1 {
                        Language.PureScript.Docs.AsMarkdown.First -> GHC.Types.True
                        Language.PureScript.Docs.AsMarkdown.NotFirst -> GHC.Types.False }
                   Language.PureScript.Docs.AsMarkdown.NotFirst
                   -> case ds1 of wild1 {
                        Language.PureScript.Docs.AsMarkdown.First -> GHC.Types.False
                        Language.PureScript.Docs.AsMarkdown.NotFirst
                        -> GHC.Types.True } }) -}
357c2cb65b9af2af1cd247ce3824f4fc
  $fOrdFirst ::
    GHC.Classes.Ord Language.PureScript.Docs.AsMarkdown.First
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Docs.AsMarkdown.First
                  Language.PureScript.Docs.AsMarkdown.$fEqFirst
                  Language.PureScript.Docs.AsMarkdown.$fOrdFirst_$ccompare
                  Language.PureScript.Docs.AsMarkdown.$fOrdFirst_$c<
                  Language.PureScript.Docs.AsMarkdown.$fOrdFirst_$c<=
                  Language.PureScript.Docs.AsMarkdown.$fOrdFirst_$c>
                  Language.PureScript.Docs.AsMarkdown.$fOrdFirst_$c>=
                  Language.PureScript.Docs.AsMarkdown.$fOrdFirst_$cmax
                  Language.PureScript.Docs.AsMarkdown.$fOrdFirst_$cmin -}
357c2cb65b9af2af1cd247ce3824f4fc
  $fOrdFirst_$c< ::
    Language.PureScript.Docs.AsMarkdown.First
    -> Language.PureScript.Docs.AsMarkdown.First -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.Docs.AsMarkdown.First)
                   (b :: Language.PureScript.Docs.AsMarkdown.First) ->
                 case a of wild {
                   Language.PureScript.Docs.AsMarkdown.First
                   -> case b of wild1 {
                        Language.PureScript.Docs.AsMarkdown.First -> GHC.Types.False
                        Language.PureScript.Docs.AsMarkdown.NotFirst -> GHC.Types.True }
                   Language.PureScript.Docs.AsMarkdown.NotFirst
                   -> case b of wild1 { DEFAULT -> GHC.Types.False } }) -}
357c2cb65b9af2af1cd247ce3824f4fc
  $fOrdFirst_$c<= ::
    Language.PureScript.Docs.AsMarkdown.First
    -> Language.PureScript.Docs.AsMarkdown.First -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.Docs.AsMarkdown.First)
                   (b :: Language.PureScript.Docs.AsMarkdown.First) ->
                 case b of wild {
                   Language.PureScript.Docs.AsMarkdown.First
                   -> case a of wild1 {
                        Language.PureScript.Docs.AsMarkdown.First -> GHC.Types.True
                        Language.PureScript.Docs.AsMarkdown.NotFirst -> GHC.Types.False }
                   Language.PureScript.Docs.AsMarkdown.NotFirst
                   -> case a of wild1 { DEFAULT -> GHC.Types.True } }) -}
357c2cb65b9af2af1cd247ce3824f4fc
  $fOrdFirst_$c> ::
    Language.PureScript.Docs.AsMarkdown.First
    -> Language.PureScript.Docs.AsMarkdown.First -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, True)
                (\ (a :: Language.PureScript.Docs.AsMarkdown.First)
                   (b :: Language.PureScript.Docs.AsMarkdown.First) ->
                 Language.PureScript.Docs.AsMarkdown.$fOrdFirst_$c< b a) -}
357c2cb65b9af2af1cd247ce3824f4fc
  $fOrdFirst_$c>= ::
    Language.PureScript.Docs.AsMarkdown.First
    -> Language.PureScript.Docs.AsMarkdown.First -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.Docs.AsMarkdown.First)
                   (b :: Language.PureScript.Docs.AsMarkdown.First) ->
                 case a of wild {
                   Language.PureScript.Docs.AsMarkdown.First
                   -> case b of wild1 {
                        Language.PureScript.Docs.AsMarkdown.First -> GHC.Types.True
                        Language.PureScript.Docs.AsMarkdown.NotFirst -> GHC.Types.False }
                   Language.PureScript.Docs.AsMarkdown.NotFirst
                   -> case b of wild1 { DEFAULT -> GHC.Types.True } }) -}
357c2cb65b9af2af1cd247ce3824f4fc
  $fOrdFirst_$ccompare ::
    Language.PureScript.Docs.AsMarkdown.First
    -> Language.PureScript.Docs.AsMarkdown.First -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.Docs.AsMarkdown.First)
                   (b :: Language.PureScript.Docs.AsMarkdown.First) ->
                 case a of wild {
                   Language.PureScript.Docs.AsMarkdown.First
                   -> case b of wild1 {
                        Language.PureScript.Docs.AsMarkdown.First -> GHC.Types.EQ
                        Language.PureScript.Docs.AsMarkdown.NotFirst -> GHC.Types.LT }
                   Language.PureScript.Docs.AsMarkdown.NotFirst
                   -> case b of wild1 {
                        Language.PureScript.Docs.AsMarkdown.First -> GHC.Types.GT
                        Language.PureScript.Docs.AsMarkdown.NotFirst
                        -> GHC.Types.EQ } }) -}
357c2cb65b9af2af1cd247ce3824f4fc
  $fOrdFirst_$cmax ::
    Language.PureScript.Docs.AsMarkdown.First
    -> Language.PureScript.Docs.AsMarkdown.First
    -> Language.PureScript.Docs.AsMarkdown.First
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Docs.AsMarkdown.First)
                   (y :: Language.PureScript.Docs.AsMarkdown.First) ->
                 case y of wild {
                   Language.PureScript.Docs.AsMarkdown.First -> x
                   Language.PureScript.Docs.AsMarkdown.NotFirst
                   -> case x of wild1 { DEFAULT ->
                      Language.PureScript.Docs.AsMarkdown.NotFirst } }) -}
357c2cb65b9af2af1cd247ce3824f4fc
  $fOrdFirst_$cmin ::
    Language.PureScript.Docs.AsMarkdown.First
    -> Language.PureScript.Docs.AsMarkdown.First
    -> Language.PureScript.Docs.AsMarkdown.First
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Docs.AsMarkdown.First)
                   (y :: Language.PureScript.Docs.AsMarkdown.First) ->
                 case y of wild {
                   Language.PureScript.Docs.AsMarkdown.First
                   -> case x of wild1 { DEFAULT ->
                      Language.PureScript.Docs.AsMarkdown.First }
                   Language.PureScript.Docs.AsMarkdown.NotFirst -> x }) -}
357c2cb65b9af2af1cd247ce3824f4fc
  $fShowFirst ::
    GHC.Show.Show Language.PureScript.Docs.AsMarkdown.First
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Docs.AsMarkdown.First
                  Language.PureScript.Docs.AsMarkdown.$fShowFirst_$cshowsPrec
                  Language.PureScript.Docs.AsMarkdown.$fShowFirst_$cshow
                  Language.PureScript.Docs.AsMarkdown.$fShowFirst_$cshowList -}
357c2cb65b9af2af1cd247ce3824f4fc
  $fShowFirst1 ::
    Language.PureScript.Docs.AsMarkdown.First -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Language.PureScript.Docs.AsMarkdown.First)
                   (eta :: GHC.Base.String) ->
                 case ds of wild {
                   Language.PureScript.Docs.AsMarkdown.First
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           Language.PureScript.Docs.AsMarkdown.$fShowFirst4)
                        eta
                   Language.PureScript.Docs.AsMarkdown.NotFirst
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           Language.PureScript.Docs.AsMarkdown.$fShowFirst2)
                        eta }) -}
16f0be91d307c6d1ab2e21e327c0343d
  $fShowFirst2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Docs.AsMarkdown.$fShowFirst3) -}
317660b2b10c2ed0bee722d6bc05a877
  $fShowFirst3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("NotFirst"#) -}
8f315840a665989d2175d120e1a803b5
  $fShowFirst4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Docs.AsMarkdown.$fShowFirst5) -}
0d1367f8f3242f59cb0e864dee63692b
  $fShowFirst5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("First"#) -}
357c2cb65b9af2af1cd247ce3824f4fc
  $fShowFirst_$cshow ::
    Language.PureScript.Docs.AsMarkdown.First -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Docs.AsMarkdown.First) ->
                 case x of wild {
                   Language.PureScript.Docs.AsMarkdown.First
                   -> Language.PureScript.Docs.AsMarkdown.$fShowFirst4
                   Language.PureScript.Docs.AsMarkdown.NotFirst
                   -> Language.PureScript.Docs.AsMarkdown.$fShowFirst2 }) -}
357c2cb65b9af2af1cd247ce3824f4fc
  $fShowFirst_$cshowList ::
    [Language.PureScript.Docs.AsMarkdown.First] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Docs.AsMarkdown.First])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Docs.AsMarkdown.First
                   Language.PureScript.Docs.AsMarkdown.$fShowFirst1
                   ls
                   s) -}
357c2cb65b9af2af1cd247ce3824f4fc
  $fShowFirst_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Docs.AsMarkdown.First -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (ds1 :: Language.PureScript.Docs.AsMarkdown.First)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   Language.PureScript.Docs.AsMarkdown.First
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           Language.PureScript.Docs.AsMarkdown.$fShowFirst4)
                        eta
                   Language.PureScript.Docs.AsMarkdown.NotFirst
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           Language.PureScript.Docs.AsMarkdown.$fShowFirst2)
                        eta }) -}
8a5fb611bd869c9f71d0b4bdb38f1eb2
  $tc'First :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9889732225959077965##
                   3453362970742021817##
                   Language.PureScript.Docs.AsMarkdown.$trModule
                   Language.PureScript.Docs.AsMarkdown.$tc'First2
                   0#
                   Language.PureScript.Docs.AsMarkdown.$tc'First1) -}
1478f05ce5371a914eea0056fa93d4eb
  $tc'First1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
121e27a6f5eeb917eea3f105ada851f0
  $tc'First2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Docs.AsMarkdown.$tc'First3) -}
af72b5acd385e43396553bf2aba13aff
  $tc'First3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'First"#) -}
608ef0e7e72aceb8ad2aac0a894ae0b3
  $tc'NotFirst :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5617267920411609496##
                   11379007078027773807##
                   Language.PureScript.Docs.AsMarkdown.$trModule
                   Language.PureScript.Docs.AsMarkdown.$tc'NotFirst1
                   0#
                   Language.PureScript.Docs.AsMarkdown.$tc'First1) -}
5bcda66a788cfea7d3d814b0bf958615
  $tc'NotFirst1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Docs.AsMarkdown.$tc'NotFirst2) -}
0ac2c7a28e07615e6918545b24ebde4d
  $tc'NotFirst2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'NotFirst"#) -}
c60a10764923b4721d884998eed07a10
  $tcFirst :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11105816534614478165##
                   13102930096859245419##
                   Language.PureScript.Docs.AsMarkdown.$trModule
                   Language.PureScript.Docs.AsMarkdown.$tcFirst1
                   0#
                   GHC.Types.krep$*) -}
b0afe53b7b27c20597cfdb4d16be15bf
  $tcFirst1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Docs.AsMarkdown.$fShowFirst5) -}
a0f3c02131876641fb18f19c004110a6
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Language.PureScript.Docs.AsMarkdown.$trModule3
                   Language.PureScript.Docs.AsMarkdown.$trModule1) -}
5cb398c5bc32f96301b4de1d01d3bf35
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Docs.AsMarkdown.$trModule2) -}
d4f5f8e792b65905f3afd44bdf47ea47
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Language.PureScript.Docs.AsMarkdown"#) -}
4950a2abf9cc6292c34b6afe9be0cd97
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Docs.AsMarkdown.$trModule4) -}
04a85db7970d4cf53d9fcce11a5f697c
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"#) -}
07d5c9a60015b4d7ba0093016d0c471e
  $wgo ::
    [Language.PureScript.Docs.Types.Module]
    -> (# (), [Data.Text.Internal.Text] #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
1dd2e3d4cca7e837a934116a97744640
  $wlvl ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int# -> GHC.Prim.Int# -> Data.Text.Internal.Text
  {- Arity: 3, Strictness: <L,U><S,U><S,U>, Inline: [0] -}
6e919da7616b196717065d59abe16685
  $wmodulesAsMarkdown ::
    [Language.PureScript.Docs.Types.Module]
    -> (# (), [Data.Text.Internal.Text] #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
101945060c953385a597579bb90d1e2c
  type Docs =
    Control.Monad.Trans.Writer.Lazy.Writer [Data.Text.Internal.Text] ()
357c2cb65b9af2af1cd247ce3824f4fc
  data First = First | NotFirst
3c7e030da65dada7467b851bd6fb9cb1
  codeToString ::
    Language.PureScript.Docs.RenderedCode.Types.RenderedCode
    -> Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ (eta :: Language.PureScript.Docs.RenderedCode.Types.RenderedCode) ->
                 Language.PureScript.Docs.AsMarkdown.codeToString_go
                   eta
                     `cast`
                   (Language.PureScript.Docs.RenderedCode.Types.N:RenderedCode[0])) -}
05541e6781af82a157733506721e7c92
  codeToString_go ::
    [Language.PureScript.Docs.RenderedCode.Types.RenderedCodeElement]
    -> Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S,1*U> -}
248503e8d8af736283c87aebb94fd330
  modulesAsMarkdown ::
    [Language.PureScript.Docs.Types.Module]
    -> Language.PureScript.Docs.AsMarkdown.Docs
  {- Arity: 1, Strictness: <S,1*U>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: [Language.PureScript.Docs.Types.Module]) ->
                 case Language.PureScript.Docs.AsMarkdown.$wmodulesAsMarkdown
                        w of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2)
                   `cast`
                 (Sym (Data.Functor.Identity.N:Identity[0]
                           <((),
                             [Data.Text.Internal.Text])>_R) ; Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                                                       <[Data.Text.Internal.Text]>_N
                                                                       <Data.Functor.Identity.Identity>_R
                                                                       <()>_N)) }) -}
79b467f859c2f9c499d392f476a3c129
  renderModulesAsMarkdown ::
    Control.Monad.Error.Class.MonadError
      Language.PureScript.Errors.MultipleErrors m =>
    [Language.PureScript.AST.Declarations.Module]
    -> m Data.Text.Internal.Text
  {- Arity: 1,
     Strictness: <L,U(U(U(U(C(C(U)),C(C1(U))),C(U),A,C(C1(C1(U))),A,A),C(C1(U)),C(C1(U)),C(U),C(U)),C(U),C(C1(U)))>,
     Unfolding: (\ @ m :: * -> *
                   ($dMonadError :: Control.Monad.Error.Class.MonadError
                                      Language.PureScript.Errors.MultipleErrors m) ->
                 let {
                   f :: m [Language.PureScript.Docs.Types.Module]
                        -> m Data.Text.Internal.Text
                   = GHC.Base.fmap
                       @ m
                       (GHC.Base.$p1Applicative
                          @ m
                          (GHC.Base.$p1Monad
                             @ m
                             (Control.Monad.Error.Class.$p1MonadError
                                @ Language.PureScript.Errors.MultipleErrors
                                @ m
                                $dMonadError)))
                       @ [Language.PureScript.Docs.Types.Module]
                       @ Data.Text.Internal.Text
                       Language.PureScript.Docs.AsMarkdown.renderModulesAsMarkdown1
                 } in
                 let {
                   g :: [Language.PureScript.AST.Declarations.Module]
                        -> m [Language.PureScript.Docs.Types.Module]
                   = Language.PureScript.Docs.Convert.convertModules
                       @ m
                       $dMonadError
                       (Language.PureScript.Docs.Types.Local
                          @ Language.PureScript.Names.ModuleName)
                 } in
                 \ (x :: [Language.PureScript.AST.Declarations.Module]) ->
                 f (g x)) -}
0a56fe62c627e36c3c55b571c6a62b78
  renderModulesAsMarkdown1 ::
    [Language.PureScript.Docs.Types.Module] -> Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: [Language.PureScript.Docs.Types.Module]) ->
                 case Language.PureScript.Docs.AsMarkdown.$wgo
                        x of ww { (#,#) ww1 ww2 ->
                 Data.Text.concat
                   (GHC.Base.map
                      @ Data.Text.Internal.Text
                      @ Data.Text.Internal.Text
                      Language.PureScript.Docs.AsMarkdown.renderModulesAsMarkdown2
                      ww2) }) -}
89946e1a2a084c6f070c8f540ed36c2a
  renderModulesAsMarkdown2 ::
    Data.Text.Internal.Text -> Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S(SSS),1*U(U,U,U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Data.Text.Internal.Text) ->
                 case w of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Language.PureScript.Docs.AsMarkdown.$wlvl ww1 ww2 ww3 }) -}
e392e9410ac6f365e128ee36ea675c9c
  runDocs ::
    Language.PureScript.Docs.AsMarkdown.Docs -> Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Control.Monad.Trans.Writer.Lazy.Writer
                           [Data.Text.Internal.Text] ()) ->
                 case x `cast`
                      (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                           <[Data.Text.Internal.Text]>_N
                           <Data.Functor.Identity.Identity>_R
                           <()>_N ; Data.Functor.Identity.N:Identity[0]
                                        <((), [Data.Text.Internal.Text])>_R) of wild { (,) ds1 y ->
                 Data.Text.concat
                   (GHC.Base.build
                      @ Data.Text.Internal.Text
                      (\ @ b1
                         (c :: Data.Text.Internal.Text -> b1 -> b1)[OneShot]
                         (n :: b1)[OneShot] ->
                       GHC.Base.foldr
                         @ Data.Text.Internal.Text
                         @ b1
                         (GHC.Base.mapFB
                            @ Data.Text.Internal.Text
                            @ b1
                            @ Data.Text.Internal.Text
                            c
                            Language.PureScript.Docs.AsMarkdown.renderModulesAsMarkdown2)
                         n
                         y)) }) -}
instance GHC.Classes.Eq [Language.PureScript.Docs.AsMarkdown.First]
  = Language.PureScript.Docs.AsMarkdown.$fEqFirst
instance GHC.Classes.Ord [Language.PureScript.Docs.AsMarkdown.First]
  = Language.PureScript.Docs.AsMarkdown.$fOrdFirst
instance GHC.Show.Show [Language.PureScript.Docs.AsMarkdown.First]
  = Language.PureScript.Docs.AsMarkdown.$fShowFirst
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

