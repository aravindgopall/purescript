
==================== FINAL INTERFACE ====================
2019-01-24 14:15:32.165565 UTC

interface purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.TypeChecker.Kinds 8043
  interface hash: e49adc1fd6927ce7237137ee87fdf069
  ABI hash: 02e90efcd8f2a4f544b757693da40686
  export-list hash: a5726d79f26ec95f0566a6905a8a7e84
  orphan hash: 96d16058c377f35245812c5c2333e8d8
  flag hash: afb16d9ab106d8a7ac575997bd317adb
  opt_hash: 2c98c95d41c045ae9c2fb565ec8aabc6
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Language.PureScript.TypeChecker.Kinds.kindOf
  Language.PureScript.TypeChecker.Kinds.kindOfWithScopedVars
  Language.PureScript.TypeChecker.Kinds.kindsOf
  Language.PureScript.TypeChecker.Kinds.kindsOfAll
module dependencies: Control.Monad.Supply
                     Control.Monad.Supply.Class Language.PureScript.AST
                     Language.PureScript.AST.Binders
                     Language.PureScript.AST.Declarations
                     Language.PureScript.AST.Exported Language.PureScript.AST.Literals
                     Language.PureScript.AST.Operators Language.PureScript.AST.SourcePos
                     Language.PureScript.AST.Traversals Language.PureScript.Bundle
                     Language.PureScript.Comments Language.PureScript.Constants
                     Language.PureScript.Crash Language.PureScript.Environment
                     Language.PureScript.Errors Language.PureScript.Kinds
                     Language.PureScript.Label Language.PureScript.Names
                     Language.PureScript.PSString Language.PureScript.Parser.Lexer
                     Language.PureScript.Parser.State Language.PureScript.Pretty
                     Language.PureScript.Pretty.Common Language.PureScript.Pretty.Kinds
                     Language.PureScript.Pretty.Types Language.PureScript.Pretty.Values
                     Language.PureScript.Publish.BoxesHelpers
                     Language.PureScript.Traversals
                     Language.PureScript.TypeChecker.Monad
                     Language.PureScript.TypeClassDictionaries Language.PureScript.Types
                     Paths_purescript
package dependencies: aeson-1.3.1.1 ansi-terminal-0.8.0.4
                      array-0.5.2.0 async-2.2.1 attoparsec-0.13.2.2 base-4.11.1.0
                      base-compat-0.10.4 binary-0.8.5.1 blaze-builder-0.4.1.0 boxes-0.1.5
                      bytestring-0.10.8.2 colour-2.3.4 containers-0.5.11.0
                      deepseq-1.4.3.0 dlist-0.8.0.4 filepath-1.4.2 ghc-boot-th-8.4.3
                      ghc-prim-0.5.2.0 hashable-1.2.7.0 integer-gmp-1.0.2.0
                      integer-logarithms-1.0.2.1 language-javascript-0.6.0.11
                      microlens-0.4.9.1 microlens-ghc-0.4.9 microlens-mtl-0.1.11.1
                      microlens-platform-0.3.10 microlens-th-0.4.2.1 mtl-2.2.2
                      parsec-3.1.13.0 pattern-arrows-0.0.2 pretty-1.1.3.6
                      primitive-0.6.3.0 protolude-0.2.2 random-1.1 scientific-0.3.6.2
                      sourcemap-0.1.6 split-0.2.3.3 stm-2.4.5.0 syb-0.7 tagged-0.8.5
                      template-haskell-2.13.0.0 text-1.2.3.0 th-abstraction-0.2.8.0
                      time-1.8.0.2 time-locale-compat-0.1.1.4 transformers-0.5.5.0
                      unordered-containers-0.2.9.0 utf8-string-1.0.1.1 uuid-types-1.0.3
                      vector-0.12.0.1
orphans: syb-0.7:Data.Generics.Instances colour-2.3.4:Data.Colour
         stm-2.4.5.0:Control.Monad.STM
         attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         microlens-platform-0.3.10:Lens.Micro.Platform
         microlens-ghc-0.4.9:Lens.Micro.GHC
         hashable-1.2.7.0:Data.Hashable.Generic
         vector-0.12.0.1:Data.Vector.Unboxed
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.5.0:Control.Monad.Trans.Error
         text-1.2.3.0:Data.Text.Lazy text-1.2.3.0:Data.Text
         binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: aeson-1.3.1.1:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.Graph
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         dlist-0.8.0.4:Data.DList ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         microlens-0.4.9.1:Lens.Micro.Internal
                         microlens-ghc-0.4.9:Lens.Micro.GHC
                         microlens-mtl-0.1.11.1:Lens.Micro.Mtl.Internal
                         microlens-platform-0.3.10:Lens.Micro.Platform
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.Declarations
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.Operators
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.SourcePos
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Comments
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Environment
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Kinds
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Label
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Names
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.PSString
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.TypeClassDictionaries
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Types
                         tagged-0.8.5:Data.Tagged
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
                         th-abstraction-0.2.8.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  base-4.11.1.0:Control.Arrow ce43199b5356a11ee2a8317f0ec30aee
import  -/  base-4.11.1.0:Control.Monad c5f960c67d822497578bffbd3e4c01cf
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.Functor f522c3501272159820fd6f242510732f
import  -/  base-4.11.1.0:Data.Maybe 409c3da2b142470b68be39ce1d97a9f7
import  -/  base-4.11.1.0:Data.Traversable 7ad4edb9184ea1ae8e73f6b94f115c8c
import  -/  base-4.11.1.0:Data.Tuple 3af66f3ac61ed95ba8a3a3f68ebc5003
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-compat-0.10.4:Prelude.Compat bb6796186ed35a1d09dc34362a3fc27e
import  -/  containers-0.5.11.0:Data.Map 0dbdaec812ef695a364aa6c69e7f7d53
import  -/  containers-0.5.11.0:Data.Map.Internal 0150e210d0ae8df0f3a0669d5e32d8fa
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  mtl-2.2.2:Control.Monad.Error.Class df146c18e27154b8df4c8637c59fd61b
import  -/  mtl-2.2.2:Control.Monad.State 1f28325cb5ef11b6b40ffadfe4bc2ca3
import  -/  mtl-2.2.2:Control.Monad.State.Class acc76e93f44ac4486524db1a327e0a0a
import  -/  Language.PureScript.AST.Declarations 586bc75044e8737d02875208d17d4395
  ErrorCheckingKind a8e33adfba1fbf2cf4ffc292464a1363
  InfiniteKind a3c9bfc4aa5a1d0b645ddf94cea2e9a1
  KindsDoNotUnify 5eff4abdff15c722fce13c399150e3be
  UnknownName 4183c70ff29ad805571bed2cb1e6b9e3
import  -/  Language.PureScript.AST.SourcePos 63acacac5b7be73d04e5be0047a9a89a
  NullSourceAnn 5a0bced03127a02790cb165450e72c45
  SourceAnn f5708ed135df009dfa0254486771ef74
import  -/  Language.PureScript.Crash 3dd739d57f17e8a1e9cd97afd3faf067
  exports: a9d2725f359c2d113bd38076e88ec681
  internalError d33c2a09c5cbe8e68c0bc27d1500ba1a
import  -/  Language.PureScript.Environment 467b25d81b890e1aaabe28d0f09d192d
  exports: a0cb6cb8c78c56365f58c9f88d1fe000
  kindSymbol dca41020f19efb11bcc405e7e0bdd12b
  kindType 5aa8fecbb78cb16f648b40b4c0a9a13c
  types 7eb61fe78108d98d82e39145869b2402
import  -/  Language.PureScript.Errors 3c1ad933587510f8b20a8c9ec2e86ce9
  exports: 8e61484c4664eceb943d9fc4820c721b
  MultipleErrors e1ef6a17348ccfe3ef65185d3c5f9026
  errorMessage 4308e76c0636918842d6acdb173a8e4b
  errorMessage' d5b3fcc13faf321f693b39ae31b8bd13
  errorMessage''' b8d685d02d1ae03a8a416389e0820454
  rethrowWithPosition fdf5a24f58598d5459d72d8baaae797c
import  -/  Language.PureScript.Kinds e26b9cf8211f7e72bb44fdd3faed066e
  exports: fe71635ad7964c0d620fb0685614a050
  FunKind 0560a3ce54d445316be516294eb33990
  KUnknown 3319d593799aca9fe1dd2c23759dcd73
  Kind 5e0361ee324aa435f4976ea2eac1777d
  NamedKind b009a23b35083771c6f52aa92ab5803a
  Row 4c775745b04b676c03977288680c928b
  SourceKind 4cdf50d4b2444221832ca704f3a0c468
  everywhereOnKinds 0db9640821e57464de880b06c846ce0b
  everywhereOnKindsM ff21b2e3cdf5ffd79b2d8bb43dd752d9
  getAnnForKind 98cc6af73ea765845ca69d24bc284a28
  srcFunKind 9e2cf5e34a2c589bb5cada75a2f38b79
import  -/  Language.PureScript.Names 00f694509122478d97b327fbbccae327
  exports: ad7ae34f85124c68e8ba1c90fb2e732f
  ModuleName 1b2ddf0c04464d2fa2588925f10c1966
  ProperName f69d3801241fcb4773f1284cd28f2dee
  ProperName a7268334e0b909381550b9329cb80fcc
  Qualified b6e1bc9e7244a41d3c6149c9b5c2d6d8
  TyName 6bd149eabdb95c312f9b6bf9d9f06c67
  TypeName 40ce511c66a72431b4e87351210f7b03
  coerceProperName 441cf2d4ab32b68a0b73ca234d2a628b
import  -/  Language.PureScript.TypeChecker.Monad 5c6d6cca9d9f5acb98ab527615b54d6d
  exports: 64079f93a7ca5d81f53055abc7f8ac53
  CheckState 9cc3cef00c43c0c2ac24a31e9b521e29
  Substitution 6dc37f96b1ad41d81e906d34e56bda73
  bindLocalTypeVariables 4279c05238f284a784d5ffc5c8b120e7
  captureSubstitution cee45a72eb61672224a0779e05d02a52
  checkCurrentModule 9cc3cef00c43c0c2ac24a31e9b521e29
  checkNextKind 9cc3cef00c43c0c2ac24a31e9b521e29
  checkSubstitution 9cc3cef00c43c0c2ac24a31e9b521e29
  getEnv 69aa315a68211d8605a99340dd649d82
  lookupTypeVariable 1a21a6dd4b005eb084941ab698608c7b
  substKind 6dc37f96b1ad41d81e906d34e56bda73
  withErrorMessageHint 873c4b1b4503ece5c9a614f4d08067e6
  withFreshSubstitution 284ea6d9c874971bc31a265754a070ff
import  -/  Language.PureScript.Types 80a51f62cb3e6c71f024289b88f07b7f
  exports: 229bb7528146da886cffbefad5822e19
  ConstrainedType 7b7b9fe5fc37a912cec5b01815c7784d
  Constraint a0b1e737f9fdb5b2f711c97dd5895f69
  ForAll 0750974c4b3c816f0559c95f8418f903
  KindedType 7d9c2ac5dbbe89c236f431d3c9412617
  RCons baa72184843999f17a8e5f8391aabd36
  REmpty 55ca0a758aacaf511eb4882e2b81a0fc
  Skolem aef73915115b060ec7781cdd3859082f
  SourceType 0ac818517c14fedd280ef5885ae0cdc3
  TUnknown 9d429c357e98c51eb9f7f00bef0a2346
  TypeApp 9dadf19674ff2d747cbba0c42dfad343
  TypeConstructor c7b7bcec494a17e684a206aeb55ef57b
  TypeLevelString 8a25ec25c9b44a7602f610ae833b697e
  TypeVar 9a7c02efa8540e6f48c3a672f3ebc8db
  TypeWildcard e8def149f21247f8f38af9a4e50f9298
  getAnnForType a5615fc7523011982178a7fe4b69b33e
import  -/  text-1.2.3.0:Data.Text 7daa7e6c9b39d8cc1679e5ec5c64d2be
import  -/  text-1.2.3.0:Data.Text.Internal 30a0a123f71f63b26cd34c6b24f23411
827f1f6a97046d52d13ad8faad2ce2f8
  $s$fShow(,) ::
    GHC.Show.Show
      (Language.PureScript.AST.SourcePos.SourceSpan,
       [Language.PureScript.Comments.Comment])
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.AST.SourcePos.SourceSpan,
                     [Language.PureScript.Comments.Comment])
                  (GHC.Show.$fShow(,)_$cshowsPrec
                     @ Language.PureScript.AST.SourcePos.SourceSpan
                     @ [Language.PureScript.Comments.Comment]
                     Language.PureScript.AST.SourcePos.$fShowSourceSpan
                     Language.PureScript.TypeChecker.Kinds.$s$fShow(,)_$s$fShow[])
                  (\ (x :: (Language.PureScript.AST.SourcePos.SourceSpan,
                            [Language.PureScript.Comments.Comment])) ->
                   GHC.Show.$fShow(,)_$cshowsPrec
                     @ Language.PureScript.AST.SourcePos.SourceSpan
                     @ [Language.PureScript.Comments.Comment]
                     Language.PureScript.AST.SourcePos.$fShowSourceSpan
                     Language.PureScript.TypeChecker.Kinds.$s$fShow(,)_$s$fShow[]
                     GHC.Show.$fShow(,)1
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [(Language.PureScript.AST.SourcePos.SourceSpan,
                              [Language.PureScript.Comments.Comment])])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Language.PureScript.AST.SourcePos.SourceSpan,
                        [Language.PureScript.Comments.Comment])
                     (GHC.Show.$fShow(,)_$cshowsPrec
                        @ Language.PureScript.AST.SourcePos.SourceSpan
                        @ [Language.PureScript.Comments.Comment]
                        Language.PureScript.AST.SourcePos.$fShowSourceSpan
                        Language.PureScript.TypeChecker.Kinds.$s$fShow(,)_$s$fShow[]
                        GHC.Show.$fShow(,)1)
                     ls
                     s) -}
044b7783e8d4dc1cbfecf9441ca12812
  $s$fShow(,)_$s$fShow[] ::
    GHC.Show.Show [Language.PureScript.Comments.Comment]
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ [Language.PureScript.Comments.Comment]
                  (\ (ds :: GHC.Types.Int) ->
                   Language.PureScript.Comments.$fShowComment_$cshowList)
                  (\ (x :: [Language.PureScript.Comments.Comment]) ->
                   GHC.Show.showList__
                     @ Language.PureScript.Comments.Comment
                     Language.PureScript.Comments.$fShowComment1
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [[Language.PureScript.Comments.Comment]])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ [Language.PureScript.Comments.Comment]
                     Language.PureScript.Comments.$fShowComment_$cshowList
                     ls
                     s) -}
d02d3f40a27887c7ec2bc39ac0fef27e
  $s$fShow[]_$cshow ::
    [Language.PureScript.Comments.Comment] -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: [Language.PureScript.Comments.Comment]) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Comments.Comment
                   Language.PureScript.Comments.$fShowComment1
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
fd324d17421979ecdaa0baaac4e67d13
  $s$fShow[]_$cshowList ::
    [[Language.PureScript.Comments.Comment]] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [[Language.PureScript.Comments.Comment]])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ [Language.PureScript.Comments.Comment]
                   Language.PureScript.Comments.$fShowComment_$cshowList
                   ls
                   s) -}
2a60412d19d92ccedbe2f58fe6846b00
  $sinsert_$sgo13 ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> a1
    -> Data.Map.Internal.Map GHC.Types.Int a1
    -> Data.Map.Internal.Map GHC.Types.Int a1
  {- Arity: 4, Strictness: <L,U><S(S),1*U(U)><L,U><S,1*U>,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ @ a1
                   (w :: GHC.Types.Int)
                   (w1 :: GHC.Types.Int)
                   (w2 :: a1)
                   (w3 :: Data.Map.Internal.Map GHC.Types.Int a1) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 Language.PureScript.TypeChecker.Kinds.$w$sgo13
                   @ a1
                   w
                   ww1
                   w2
                   w3 }) -}
b0e239e6cad407de5c64c0eef01eb131
  $slookup_$s$wpoly_go1 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName))
      a
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName
    -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U(U,U,U)> -}
566934d0410edaeae8830a09c05c195b
  $slookup_$s$wpoly_go13 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName))
      a
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName
    -> Language.PureScript.Names.ModuleName
    -> GHC.Base.Maybe a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U(U,U,U)><L,U> -}
4bfd3e96350162900f30e5e6b0237c40
  $slookup_$s$wpoly_go2 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName))
      a
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> ((Data.Text.Internal.Text :: *)
        ~R# (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.TypeName :: *)) =>
       GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S,1*U><L,U><L,U><L,U><L,U> -}
a40639c2d2213575e2bc36eb95369e9c
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Language.PureScript.TypeChecker.Kinds.$trModule3
                   Language.PureScript.TypeChecker.Kinds.$trModule1) -}
9f369303cad602d6ebf5478de00ee499
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.TypeChecker.Kinds.$trModule2) -}
f87c25e7a95b2f9c0b980f6651bc1aa5
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Language.PureScript.TypeChecker.Kinds"#) -}
4f3755da9c107e6b9e8d680aef7dfdbd
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.TypeChecker.Kinds.$trModule4) -}
0912f0515089661e07d419b29c0bbcf4
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"#) -}
afd880df7323ce219891789dab06c57c
  $w$sgo13 ::
    GHC.Types.Int
    -> GHC.Prim.Int#
    -> a1
    -> Data.Map.Internal.Map GHC.Types.Int a1
    -> Data.Map.Internal.Map GHC.Types.Int a1
  {- Arity: 4, Strictness: <L,U><L,U><L,U><S,1*U>, Inline: [0] -}
f7be2b7fabf250e0ebe735d898ad41a3
  $wlvl ::
    Language.PureScript.Kinds.SourceKind
    -> [(Data.Text.Internal.Text,
         Language.PureScript.Kinds.SourceKind)]
    -> Language.PureScript.TypeChecker.Monad.Substitution
    -> (# Language.PureScript.Kinds.Kind
            Language.PureScript.AST.SourcePos.SourceAnn,
          [(Data.Text.Internal.Text,
            Language.PureScript.Kinds.Kind
              Language.PureScript.AST.SourcePos.SourceAnn)] #)
  {- Arity: 3, Strictness: <L,1*U><L,1*U><L,U(A,U)>, Inline: [0],
     Unfolding: (\ (ww :: Language.PureScript.Kinds.SourceKind)
                   (ww1 :: [(Data.Text.Internal.Text,
                             Language.PureScript.Kinds.SourceKind)])
                   (ww2 :: Language.PureScript.TypeChecker.Monad.Substitution) ->
                 (# Language.PureScript.TypeChecker.Kinds.starIfUnknown
                      @ Language.PureScript.AST.SourcePos.SourceAnn
                      (Language.PureScript.TypeChecker.Kinds.substituteKind ww2 ww),
                    GHC.Base.map
                      @ (Data.Text.Internal.Text, Language.PureScript.Kinds.SourceKind)
                      @ (Data.Text.Internal.Text,
                         Language.PureScript.Kinds.Kind
                           Language.PureScript.AST.SourcePos.SourceAnn)
                      (\ (ds :: (Data.Text.Internal.Text,
                                 Language.PureScript.Kinds.SourceKind)) ->
                       (case ds of wild { (,) x y -> x },
                        case ds of wild { (,) x y ->
                        Language.PureScript.TypeChecker.Kinds.starIfUnknown
                          @ Language.PureScript.AST.SourcePos.SourceAnn
                          (Language.PureScript.TypeChecker.Kinds.substituteKind ww2 y) }))
                      ww1 #)) -}
84befa925f0a35fd96835ca33805caa1
  $wpoly_go1 ::
    GHC.Prim.Int#
    -> Data.Map.Internal.Map GHC.Types.Int a -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>, Inline: [0] -}
2524c35532d5d3cd5bf16a3e21f2481c
  $wpoly_go13 ::
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.TypeName))
         a
    -> GHC.Base.Maybe a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U><L,1*U(U,U,U)><S,1*U>, Inline: [0],
     Unfolding: (\ @ a
                   (ww :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww1 :: Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.TypeName)
                   (w :: Data.Map.Internal.Map
                           (Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.TypeName))
                           a) ->
                 case w of wild {
                   Data.Map.Internal.Bin ipv ipv1 ipv2 ipv3 ipv4
                   -> case ipv1 of ww3 { Language.PureScript.Names.Qualified ww4 ww5 ->
                      case ww of wild1 {
                        GHC.Base.Nothing
                        -> case ww4 of wild2 {
                             GHC.Base.Nothing
                             -> case ww1
                                       `cast`
                                     (Language.PureScript.Names.N:ProperName[0]
                                          <'Language.PureScript.Names.TypeName>_P) of ww2 { Data.Text.Internal.Text ww6 ww7 ww8 ->
                                case ww5
                                       `cast`
                                     (Language.PureScript.Names.N:ProperName[0]
                                          <'Language.PureScript.Names.TypeName>_P) of ww9 { Data.Text.Internal.Text ww10 ww11 ww12 ->
                                case Data.Text.$w$ccompare ww6 ww7 ww8 ww10 ww11 ww12 of wild3 {
                                  GHC.Types.LT
                                  -> Language.PureScript.TypeChecker.Kinds.$slookup_$s$wpoly_go2
                                       @ a
                                       ipv3
                                       ww6
                                       ww7
                                       ww8
                                       @~ (Sym (Language.PureScript.Names.N:ProperName[0]
                                                    <'Language.PureScript.Names.TypeName>_P))
                                  GHC.Types.EQ -> GHC.Base.Just @ a ipv2
                                  GHC.Types.GT
                                  -> Language.PureScript.TypeChecker.Kinds.$slookup_$s$wpoly_go2
                                       @ a
                                       ipv4
                                       ww6
                                       ww7
                                       ww8
                                       @~ (Sym (Language.PureScript.Names.N:ProperName[0]
                                                    <'Language.PureScript.Names.TypeName>_P)) } } }
                             GHC.Base.Just ipv7
                             -> Language.PureScript.TypeChecker.Kinds.$slookup_$s$wpoly_go1
                                  @ a
                                  ipv3
                                  ww1 }
                        GHC.Base.Just a2
                        -> case ww4 of wild2 {
                             GHC.Base.Nothing
                             -> Language.PureScript.TypeChecker.Kinds.$slookup_$s$wpoly_go13
                                  @ a
                                  ipv4
                                  ww1
                                  a2
                             GHC.Base.Just b1
                             -> case GHC.Classes.$fOrd[]_$ccompare
                                       @ (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.Namespace)
                                       (Language.PureScript.Names.$fOrdProperName
                                          @ 'Language.PureScript.Names.Namespace)
                                       a2 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                       b1
                                         `cast`
                                       (Language.PureScript.Names.N:ModuleName[0]) of wild3 {
                                  GHC.Types.LT
                                  -> Language.PureScript.TypeChecker.Kinds.$slookup_$s$wpoly_go13
                                       @ a
                                       ipv3
                                       ww1
                                       a2
                                  GHC.Types.EQ
                                  -> case ww1
                                            `cast`
                                          (Language.PureScript.Names.N:ProperName[0]
                                               <'Language.PureScript.Names.TypeName>_P) of ww2 { Data.Text.Internal.Text ww6 ww7 ww8 ->
                                     case ww5
                                            `cast`
                                          (Language.PureScript.Names.N:ProperName[0]
                                               <'Language.PureScript.Names.TypeName>_P) of ww9 { Data.Text.Internal.Text ww10 ww11 ww12 ->
                                     case Data.Text.$w$ccompare
                                            ww6
                                            ww7
                                            ww8
                                            ww10
                                            ww11
                                            ww12 of wild4 {
                                       GHC.Types.LT
                                       -> Language.PureScript.TypeChecker.Kinds.$slookup_$s$wpoly_go13
                                            @ a
                                            ipv3
                                            ww2
                                              `cast`
                                            (Sym (Language.PureScript.Names.N:ProperName[0]
                                                      <'Language.PureScript.Names.TypeName>_P))
                                            a2
                                       GHC.Types.EQ -> GHC.Base.Just @ a ipv2
                                       GHC.Types.GT
                                       -> Language.PureScript.TypeChecker.Kinds.$slookup_$s$wpoly_go13
                                            @ a
                                            ipv4
                                            ww2
                                              `cast`
                                            (Sym (Language.PureScript.Names.N:ProperName[0]
                                                      <'Language.PureScript.Names.TypeName>_P))
                                            a2 } } }
                                  GHC.Types.GT
                                  -> Language.PureScript.TypeChecker.Kinds.$slookup_$s$wpoly_go13
                                       @ a
                                       ipv4
                                       ww1
                                       a2 } } } }
                   Data.Map.Internal.Tip -> GHC.Base.Nothing @ a }) -}
1be96791ee8644600835676a9373bb05
  infer ::
    (Control.Monad.Error.Class.MonadError
       Language.PureScript.Errors.MultipleErrors m,
     Control.Monad.State.Class.MonadState
       Language.PureScript.TypeChecker.Monad.CheckState m) =>
    Language.PureScript.Types.SourceType
    -> m (Language.PureScript.Kinds.SourceKind,
          [(Data.Text.Internal.Text, Language.PureScript.Kinds.SourceKind)])
  {- Arity: 3,
     Strictness: <L,U(U(U(U(C(C1(U)),C(C1(U))),A,C(C1(U)),A,A,A),C(C1(U)),C(C1(U)),C(U),C(U)),C(U),C(C1(U)))><S(S(LC(C(S))LLL)LLL),U(U(U(U(C(C1(U)),A),A,A,A,A,A),C(C1(U)),C(C1(U)),C(U),A),U,A,C(U))><L,U> -}
70af85459cf3b4a44152c3e17e69ec09
  kindOf ::
    (Control.Monad.Error.Class.MonadError
       Language.PureScript.Errors.MultipleErrors m,
     Control.Monad.State.Class.MonadState
       Language.PureScript.TypeChecker.Monad.CheckState m) =>
    Language.PureScript.Types.SourceType
    -> m Language.PureScript.Kinds.SourceKind
  {- Arity: 3,
     Strictness: <S(S(S(S(C(C(S))L)LLLLL)LLLL)LL),U(U(U(U(C(C1(U)),C(C1(U))),A,C(C1(U)),A,A,A),C(C1(U)),C(C1(U)),C(U),C(U)),C(U),C(C1(U)))><L,U(U(U(U(C(C1(U)),A),A,A,A,A,A),C(C1(U)),C(C1(U)),C(U),A),U,A,C(U))><L,U>,
     Unfolding: (\ @ m :: * -> *
                   ($dMonadError :: Control.Monad.Error.Class.MonadError
                                      Language.PureScript.Errors.MultipleErrors m)
                   ($dMonadState :: Control.Monad.State.Class.MonadState
                                      Language.PureScript.TypeChecker.Monad.CheckState m)
                   (eta :: Language.PureScript.Types.SourceType) ->
                 GHC.Base.fmap
                   @ m
                   (GHC.Base.$p1Applicative
                      @ m
                      (GHC.Base.$p1Monad
                         @ m
                         (Control.Monad.Error.Class.$p1MonadError
                            @ Language.PureScript.Errors.MultipleErrors
                            @ m
                            $dMonadError)))
                   @ (Language.PureScript.Kinds.SourceKind,
                      [(Data.Text.Internal.Text, Language.PureScript.Kinds.SourceKind)])
                   @ Language.PureScript.Kinds.SourceKind
                   (Data.Tuple.fst
                      @ Language.PureScript.Kinds.SourceKind
                      @ [(Data.Text.Internal.Text,
                          Language.PureScript.Kinds.SourceKind)])
                   (Language.PureScript.TypeChecker.Kinds.kindOfWithScopedVars
                      @ m
                      $dMonadError
                      $dMonadState
                      eta)) -}
c3fc678e4f23cadb5ab7e0b61c226e09
  kindOfWithScopedVars ::
    (Control.Monad.Error.Class.MonadError
       Language.PureScript.Errors.MultipleErrors m,
     Control.Monad.State.Class.MonadState
       Language.PureScript.TypeChecker.Monad.CheckState m) =>
    Language.PureScript.Types.SourceType
    -> m (Language.PureScript.Kinds.SourceKind,
          [(Data.Text.Internal.Text, Language.PureScript.Kinds.SourceKind)])
  {- Arity: 3,
     Strictness: <L,U(U(U(U(C(C1(U)),C(C1(U))),A,C(C1(U)),A,A,A),C(C1(U)),C(C1(U)),C(U),C(U)),C(U),C(C1(U)))><S(S(LC(C(S))LLL)LLL),U(U(U(U(C(C1(U)),A),A,A,A,A,A),C(C1(U)),C(C1(U)),C(U),A),U,A,C(U))><L,U>,
     Unfolding: (\ @ m :: * -> *
                   ($dMonadError :: Control.Monad.Error.Class.MonadError
                                      Language.PureScript.Errors.MultipleErrors m)
                   ($dMonadState :: Control.Monad.State.Class.MonadState
                                      Language.PureScript.TypeChecker.Monad.CheckState m)
                   (eta :: Language.PureScript.Types.SourceType) ->
                 Language.PureScript.TypeChecker.Monad.withErrorMessageHint
                   @ m
                   @ (Language.PureScript.Kinds.Kind
                        Language.PureScript.AST.SourcePos.SourceAnn,
                      [(Data.Text.Internal.Text,
                        Language.PureScript.Kinds.Kind
                          Language.PureScript.AST.SourcePos.SourceAnn)])
                   $dMonadState
                   $dMonadError
                   (Language.PureScript.AST.Declarations.ErrorCheckingKind eta)
                   (GHC.Base.fmap
                      @ m
                      (GHC.Base.$p1Applicative
                         @ m
                         (GHC.Base.$p1Monad
                            @ m
                            (Control.Monad.Error.Class.$p1MonadError
                               @ Language.PureScript.Errors.MultipleErrors
                               @ m
                               $dMonadError)))
                      @ ((Language.PureScript.Kinds.SourceKind,
                          [(Data.Text.Internal.Text, Language.PureScript.Kinds.SourceKind)]),
                         Language.PureScript.TypeChecker.Monad.Substitution)
                      @ (Language.PureScript.Kinds.Kind
                           Language.PureScript.AST.SourcePos.SourceAnn,
                         [(Data.Text.Internal.Text,
                           Language.PureScript.Kinds.Kind
                             Language.PureScript.AST.SourcePos.SourceAnn)])
                      Language.PureScript.TypeChecker.Kinds.kindOfWithScopedVars1
                      (Language.PureScript.TypeChecker.Monad.withFreshSubstitution
                         @ m
                         @ ((Language.PureScript.Kinds.SourceKind,
                             [(Data.Text.Internal.Text, Language.PureScript.Kinds.SourceKind)]),
                            Language.PureScript.TypeChecker.Monad.Substitution)
                         $dMonadState
                         (Language.PureScript.TypeChecker.Monad.capturingSubstitution
                            @ m
                            @ (Language.PureScript.Kinds.SourceKind,
                               [(Data.Text.Internal.Text, Language.PureScript.Kinds.SourceKind)])
                            @ ((Language.PureScript.Kinds.SourceKind,
                                [(Data.Text.Internal.Text, Language.PureScript.Kinds.SourceKind)]),
                               Language.PureScript.TypeChecker.Monad.Substitution)
                            $dMonadState
                            (GHC.Tuple.(,)
                               @ (Language.PureScript.Kinds.SourceKind,
                                  [(Data.Text.Internal.Text, Language.PureScript.Kinds.SourceKind)])
                               @ Language.PureScript.TypeChecker.Monad.Substitution)
                            (Language.PureScript.TypeChecker.Kinds.infer
                               @ m
                               $dMonadError
                               $dMonadState
                               eta))))) -}
cf7dfa249a74d1594c874ee14743f336
  kindOfWithScopedVars1 ::
    ((Language.PureScript.Kinds.SourceKind,
      [(Data.Text.Internal.Text, Language.PureScript.Kinds.SourceKind)]),
     Language.PureScript.TypeChecker.Monad.Substitution)
    -> (Language.PureScript.Kinds.Kind
          Language.PureScript.AST.SourcePos.SourceAnn,
        [(Data.Text.Internal.Text,
          Language.PureScript.Kinds.Kind
            Language.PureScript.AST.SourcePos.SourceAnn)])
  {- Arity: 1, Strictness: <S(SL),1*U(1*U(1*U,1*U),U(A,U))>m,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: ((Language.PureScript.Kinds.SourceKind,
                           [(Data.Text.Internal.Text, Language.PureScript.Kinds.SourceKind)]),
                          Language.PureScript.TypeChecker.Monad.Substitution)) ->
                 case w of ww { (,) ww1 ww2 ->
                 case ww1 of ww3 { (,) ww4 ww5 ->
                 case Language.PureScript.TypeChecker.Kinds.$wlvl
                        ww4
                        ww5
                        ww2 of ww6 { (#,#) ww7 ww8 ->
                 (ww7, ww8) } } }) -}
81d12c11aa542ef1e1df0b54a966218b
  kindsOf ::
    (Control.Monad.Error.Class.MonadError
       Language.PureScript.Errors.MultipleErrors m,
     Control.Monad.State.Class.MonadState
       Language.PureScript.TypeChecker.Monad.CheckState m) =>
    GHC.Types.Bool
    -> Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName
    -> [(Data.Text.Internal.Text,
         GHC.Base.Maybe Language.PureScript.Kinds.SourceKind)]
    -> [Language.PureScript.Types.SourceType]
    -> m Language.PureScript.Kinds.SourceKind
  {- Arity: 7,
     Strictness: <S(S(S(S(C(C(S))L)LLLLL)LLLL)LL),U(U(U(U(C(C(U)),C(C1(U))),C(U),C(C1(U)),C(C1(C1(U))),A,A),C(C1(U)),C(C1(U)),C(U),C(U)),C(U),C(C1(U)))><L,U(U(U(U(C(C1(U)),A),A,A,A,A,A),C(C1(U)),C(C1(U)),C(U),A),U,A,C(U))><L,U><L,U><L,U><L,U><L,U> -}
240513a8d5b67ca45c911b36965fedb2
  kindsOfAll ::
    (Control.Monad.Error.Class.MonadError
       Language.PureScript.Errors.MultipleErrors m,
     Control.Monad.State.Class.MonadState
       Language.PureScript.TypeChecker.Monad.CheckState m) =>
    Language.PureScript.Names.ModuleName
    -> [(Language.PureScript.AST.SourcePos.SourceAnn,
         Language.PureScript.Names.ProperName
           'Language.PureScript.Names.TypeName,
         [(Data.Text.Internal.Text,
           GHC.Base.Maybe Language.PureScript.Kinds.SourceKind)],
         Language.PureScript.Types.SourceType)]
    -> [(Language.PureScript.AST.SourcePos.SourceAnn,
         Language.PureScript.Names.ProperName
           'Language.PureScript.Names.TypeName,
         [(Data.Text.Internal.Text,
           GHC.Base.Maybe Language.PureScript.Kinds.SourceKind)],
         [Language.PureScript.Types.SourceType])]
    -> m ([Language.PureScript.Kinds.SourceKind],
          [Language.PureScript.Kinds.SourceKind])
  {- Arity: 5,
     Strictness: <S(S(S(S(C(C(S))L)LLLLL)LLLL)LL),U(U(U(U(C(C(U)),C(C1(U))),C(U),C(C1(U)),C(C1(C1(U))),A,A),C(C1(U)),C(C1(U)),C(U),C(U)),C(U),C(C1(U)))><L,U(U(U(U(C(C1(U)),A),A,A,A,A,A),C(C1(U)),C(C1(U)),C(U),A),U,A,C(U))><L,U><L,U><L,U> -}
5a6c3e3085effe4cda79a5db33c58865
  starIfUnknown ::
    Language.PureScript.Kinds.Kind a
    -> Language.PureScript.Kinds.Kind a
  {- Arity: 1, Strictness: <S,1*U> -}
8c3385ee2a1fad500f09d9bfcdd1d69c
  substituteKind ::
    Language.PureScript.TypeChecker.Monad.Substitution
    -> Language.PureScript.Kinds.SourceKind
    -> Language.PureScript.Kinds.SourceKind
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U(A,U)><S,1*U> -}
"SC:$wpoly_go130" [0] forall @ a
                             (sc :: Data.Map.Internal.Map
                                      (Language.PureScript.Names.Qualified
                                         (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.TypeName))
                                      a)
                             (sc1 :: Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.TypeName)
  Language.PureScript.TypeChecker.Kinds.$wpoly_go13 @ a
                                                    (GHC.Base.Nothing
                                                       @ Language.PureScript.Names.ModuleName)
                                                    sc1
                                                    sc
  = Language.PureScript.TypeChecker.Kinds.$slookup_$s$wpoly_go1
      @ a
      sc
      sc1
"SC:$wpoly_go131" [0] forall @ a
                             (sc :: Data.Map.Internal.Map
                                      (Language.PureScript.Names.Qualified
                                         (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.TypeName))
                                      a)
                             (sc1 :: Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.TypeName)
                             (sc2 :: Language.PureScript.Names.ModuleName)
  Language.PureScript.TypeChecker.Kinds.$wpoly_go13 @ a
                                                    (GHC.Base.Just
                                                       @ Language.PureScript.Names.ModuleName
                                                       sc2)
                                                    sc1
                                                    sc
  = Language.PureScript.TypeChecker.Kinds.$slookup_$s$wpoly_go13
      @ a
      sc
      sc1
      sc2
"SC:$wpoly_go132" [0] forall @ a
                             (sc :: Data.Map.Internal.Map
                                      (Language.PureScript.Names.Qualified
                                         (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.TypeName))
                                      a)
                             (sc1 :: GHC.Prim.ByteArray#)
                             (sc2 :: GHC.Prim.Int#)
                             (sc3 :: GHC.Prim.Int#)
                             (sg :: (Data.Text.Internal.Text :: *)
                                    ~R# (Language.PureScript.Names.ProperName
                                           'Language.PureScript.Names.TypeName :: *))
  Language.PureScript.TypeChecker.Kinds.$wpoly_go13 @ a
                                                    (GHC.Base.Nothing
                                                       @ Language.PureScript.Names.ModuleName)
                                                    (Data.Text.Internal.Text sc1 sc2 sc3) `cast` sg
                                                    sc
  = Language.PureScript.TypeChecker.Kinds.$slookup_$s$wpoly_go2
      @ a
      sc
      sc1
      sc2
      sc3
      @~ sg
"SPEC/Language.PureScript.TypeChecker.Kinds $fShow(,) @ SourceSpan @ [Comment]" [orphan] forall (v1 :: GHC.Show.Show
                                                                                                         [Language.PureScript.Comments.Comment])
                                                                                                (v :: GHC.Show.Show
                                                                                                        Language.PureScript.AST.SourcePos.SourceSpan)
  GHC.Show.$fShow(,) @ Language.PureScript.AST.SourcePos.SourceSpan
                     @ [Language.PureScript.Comments.Comment]
                     v
                     v1
  = Language.PureScript.TypeChecker.Kinds.$s$fShow(,)
"SPEC/Language.PureScript.TypeChecker.Kinds $fShow[] @ Comment" [orphan] forall (v :: GHC.Show.Show
                                                                                        Language.PureScript.Comments.Comment)
  GHC.Show.$fShow[] @ Language.PureScript.Comments.Comment v
  = Language.PureScript.TypeChecker.Kinds.$s$fShow(,)_$s$fShow[]
"SPEC/Language.PureScript.TypeChecker.Kinds $fShow[]_$cshow @ Comment" [orphan] forall ($dShow :: GHC.Show.Show
                                                                                                    Language.PureScript.Comments.Comment)
  GHC.Show.$fShow[]_$cshow @ Language.PureScript.Comments.Comment
                           $dShow
  = Language.PureScript.TypeChecker.Kinds.$s$fShow[]_$cshow
"SPEC/Language.PureScript.TypeChecker.Kinds $fShow[]_$cshowList @ Comment" [orphan] forall ($dShow :: GHC.Show.Show
                                                                                                        Language.PureScript.Comments.Comment)
  GHC.Show.$fShow[]_$cshowList @ Language.PureScript.Comments.Comment
                               $dShow
  = Language.PureScript.TypeChecker.Kinds.$s$fShow[]_$cshowList
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

