
==================== FINAL INTERFACE ====================
2019-01-24 14:15:52.676894 UTC

interface purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Sugar.TypeClasses 8043
  interface hash: 6aefede163e8e743d6bb9a8996c59922
  ABI hash: 4999ab08885b30d0b2484ae47e0269ae
  export-list hash: dad82961b8d926d0b0016e660f4fc1e3
  orphan hash: f1ab8f63df0aa74b97728e86b1532cb4
  flag hash: 69d8350f4fac920b6d109c2ab05c8489
  opt_hash: 2c98c95d41c045ae9c2fb565ec8aabc6
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Language.PureScript.Sugar.TypeClasses.desugarTypeClasses
  Language.PureScript.Sugar.TypeClasses.superClassDictionaryNames
  Language.PureScript.Sugar.TypeClasses.typeClassMemberName
module dependencies: Control.Monad.Supply
                     Control.Monad.Supply.Class Language.PureScript.AST
                     Language.PureScript.AST.Binders
                     Language.PureScript.AST.Declarations
                     Language.PureScript.AST.Exported Language.PureScript.AST.Literals
                     Language.PureScript.AST.Operators Language.PureScript.AST.SourcePos
                     Language.PureScript.AST.Traversals Language.PureScript.Bundle
                     Language.PureScript.Comments Language.PureScript.Constants
                     Language.PureScript.Crash Language.PureScript.Environment
                     Language.PureScript.Errors Language.PureScript.Externs
                     Language.PureScript.Kinds Language.PureScript.Label
                     Language.PureScript.Names Language.PureScript.PSString
                     Language.PureScript.Parser.Lexer Language.PureScript.Parser.State
                     Language.PureScript.Pretty Language.PureScript.Pretty.Common
                     Language.PureScript.Pretty.Kinds Language.PureScript.Pretty.Types
                     Language.PureScript.Pretty.Values
                     Language.PureScript.Publish.BoxesHelpers
                     Language.PureScript.Sugar.CaseDeclarations
                     Language.PureScript.Traversals
                     Language.PureScript.TypeChecker.Monad
                     Language.PureScript.TypeClassDictionaries Language.PureScript.Types
                     Paths_purescript
package dependencies: aeson-1.3.1.1 ansi-terminal-0.8.0.4
                      array-0.5.2.0 async-2.2.1 attoparsec-0.13.2.2 base-4.11.1.0
                      base-compat-0.10.4 binary-0.8.5.1 blaze-builder-0.4.1.0 boxes-0.1.5
                      bytestring-0.10.8.2 colour-2.3.4 containers-0.5.11.0
                      deepseq-1.4.3.0 dlist-0.8.0.4 filepath-1.4.2 ghc-boot-th-8.4.3
                      ghc-prim-0.5.2.0 hashable-1.2.7.0 integer-gmp-1.0.2.0
                      integer-logarithms-1.0.2.1 language-javascript-0.6.0.11
                      microlens-0.4.9.1 microlens-ghc-0.4.9 microlens-mtl-0.1.11.1
                      microlens-platform-0.3.10 microlens-th-0.4.2.1 mtl-2.2.2
                      parsec-3.1.13.0 pattern-arrows-0.0.2 pretty-1.1.3.6
                      primitive-0.6.3.0 protolude-0.2.2 random-1.1 scientific-0.3.6.2
                      sourcemap-0.1.6 split-0.2.3.3 stm-2.4.5.0 syb-0.7 tagged-0.8.5
                      template-haskell-2.13.0.0 text-1.2.3.0 th-abstraction-0.2.8.0
                      time-1.8.0.2 time-locale-compat-0.1.1.4 transformers-0.5.5.0
                      unordered-containers-0.2.9.0 utf8-string-1.0.1.1 uuid-types-1.0.3
                      vector-0.12.0.1
orphans: syb-0.7:Data.Generics.Instances colour-2.3.4:Data.Colour
         stm-2.4.5.0:Control.Monad.STM
         attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         microlens-platform-0.3.10:Lens.Micro.Platform
         microlens-ghc-0.4.9:Lens.Micro.GHC
         hashable-1.2.7.0:Data.Hashable.Generic
         vector-0.12.0.1:Data.Vector.Unboxed
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.5.0:Control.Monad.Trans.Error
         text-1.2.3.0:Data.Text.Lazy text-1.2.3.0:Data.Text
         binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: aeson-1.3.1.1:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.Graph
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         dlist-0.8.0.4:Data.DList ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         microlens-0.4.9.1:Lens.Micro.Internal
                         microlens-ghc-0.4.9:Lens.Micro.GHC
                         microlens-mtl-0.1.11.1:Lens.Micro.Mtl.Internal
                         microlens-platform-0.3.10:Lens.Micro.Platform
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.Declarations
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.Operators
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.SourcePos
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Comments
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Environment
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Kinds
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Label
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Names
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.PSString
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.TypeClassDictionaries
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Types
                         tagged-0.8.5:Data.Tagged
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
                         th-abstraction-0.2.8.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  base-4.11.1.0:Control.Arrow ce43199b5356a11ee2a8317f0ec30aee
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.Functor f522c3501272159820fd6f242510732f
import  -/  base-4.11.1.0:Data.List 83dc843e47bfc0c5af51e19c6f3476d5
import  -/  base-4.11.1.0:Data.List.NonEmpty 595ee3baddcadebc4831ea7541427984
import  -/  base-4.11.1.0:Data.Maybe 409c3da2b142470b68be39ce1d97a9f7
import  -/  base-4.11.1.0:Data.OldList 1b35aa3c6805ff7c8887a35a866fe006
import  -/  base-4.11.1.0:Data.Traversable 7ad4edb9184ea1ae8e73f6b94f115c8c
import  -/  base-4.11.1.0:Data.Tuple 3af66f3ac61ed95ba8a3a3f68ebc5003
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-compat-0.10.4:Prelude.Compat bb6796186ed35a1d09dc34362a3fc27e
import  -/  containers-0.5.11.0:Data.Map 0dbdaec812ef695a364aa6c69e7f7d53
import  -/  containers-0.5.11.0:Data.Map.Internal 0150e210d0ae8df0f3a0669d5e32d8fa
import  -/  containers-0.5.11.0:Data.Set 7d3c64a641be4cacbcd8119445bab919
import  -/  containers-0.5.11.0:Data.Set.Internal 93fa3ef95853aa2a7aadf32d693bd451
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  mtl-2.2.2:Control.Monad.Error.Class df146c18e27154b8df4c8637c59fd61b
import  -/  mtl-2.2.2:Control.Monad.State 1f28325cb5ef11b6b40ffadfe4bc2ca3
import  -/  mtl-2.2.2:Control.Monad.State.Class acc76e93f44ac4486524db1a327e0a0a
import  -/  Control.Monad.Supply.Class 4b0577d8897e2d48cd4fc324f0e8c355
  exports: 9b5454b78bf2751cecd07ba41d8b4d51
  MonadSupply 6fd5e162006451a17cf4a7ae2eb71bd2
import  -/  Language.PureScript.AST.Binders 482af52ec934a93b1ca6ec424fbe30f2
  VarBinder 2e20c3df0430901107dc9b8bd4a6015c
import  -/  Language.PureScript.AST.Declarations 586bc75044e8737d02875208d17d4395
  Abs dae9a514c0c54a50406a57cd533f800a
  Declaration e92f6ee78a22c0eadc3566d7d1f48d5b
  DeclarationRef 1ef988d2f8db98f35f578bde9282f468
  DeferredDictionary 4767b924c347cb558c8259d23777dc47
  DerivedInstance 049e605b376a0b07eb640a4746618932
  ErrorInInstance 3f5fd04062107e7cfa6b465b93bd0079
  ExplicitInstance 7626e63238a07a99c1bae428b77d3f66
  Expr e92f6ee78a22c0eadc3566d7d1f48d5b
  ExtraneousClassMember eac2645deec7e543a609702e560a3f0b
  Literal bdcf4b137a448fe7c2ed57fe33a72cd3
  MissingClassMember e01160d2e4b38da5d861a682e142ab70
  MkUnguarded d9deae30ea78016a4bdb453d9978bfa3
  Module 305128e30e200d34d712365aa2d509df
  Module 3342e00ee072addfd009ee61e87fb865
  NewtypeInstanceWithDictionary eddb3e7c62714e662f7945c8899ae4d1
  TypeClassDeclaration 19936abcaf3693a6825ccbc13b2590dc
  TypeClassDictionaryAccessor 69c555dd17e3808e47bbd0baec81a1b6
  TypeClassDictionaryConstructorApp f15387264e84e75b0e5ed1f08eacb958
  TypeClassRef 0dfae6fa12be94e312c419132246a1f3
  TypeDeclaration 28394461dbd073cca9cdbd263dbb4335
  TypeDeclarationData 3e894c7cbf790244173310e6e620d669
  TypeInstanceDeclaration 46d66658dd5a30ba03e36fc960162f20
  TypeInstanceRef 1a4ec4636edef4ba31547e9816ff48da
  TypeRef 7b2aa9fe81ad40f64c659855da835def
  TypeSynonymDeclaration 1cfe9af195a40456074b96ff0ca4519c
  TypedValue 0acc3ace791a36484dcda3706df33cef
  UnknownName 4183c70ff29ad805571bed2cb1e6b9e3
  ValueDecl 97b38919d86cd9182cb8d86b6f4ae734
  ValueDeclaration 3d506e6b33aef3e239802bd27220a2e5
  isTypeClassDeclaration 7b108c8da44aa47fd4ec89829bd2208d
  tydeclIdent c947d6d8aff56f68d1789e1833a9fcd2
  unwrapTypeDeclaration 348c99c29975a5b33457904ffa9aebcc
  valdeclIdent dc3fe29a39c3efd97807e85c8c5dc302
import  -/  Language.PureScript.AST.Literals da2ec269f063125450b272321f85468a
  ObjectLiteral d17d3a090fe8a89f303c679b0a417ae9
import  -/  Language.PureScript.AST.SourcePos 63acacac5b7be73d04e5be0047a9a89a
  SourceAnn f5708ed135df009dfa0254486771ef74
  SourceSpan 1e0cf2bd3ea18f97a2ff152297f09219
  internalModuleSourceSpan f13de72620ea3980769d3252f1949a4a
import  -/  Language.PureScript.Constants 69f48af5637c1cbbd07a6f85918359c3
  exports: 9c458e31ccbc9e07ff15471cf48a55ee
  PrimRow ce41b42d6d558c57933fa83c08a0adbd
  PrimRowList 9a41086c476f1417e3dce13da58a0184
  PrimSymbol 92b8e9ab524bd3a3af1292738ec5fadb
  PrimTypeError c4d1101437a44c3c4b61f1d5d0139044
  prim aafaa42bb1179c6de3b49805eaa34c53
import  -/  Language.PureScript.Crash 3dd739d57f17e8a1e9cd97afd3faf067
  exports: a9d2725f359c2d113bd38076e88ec681
  internalError d33c2a09c5cbe8e68c0bc27d1500ba1a
import  -/  Language.PureScript.Environment 467b25d81b890e1aaabe28d0f09d192d
  exports: a0cb6cb8c78c56365f58c9f88d1fe000
  Private fa142db41a2d9e82cee092dfbb31a494
  TypeClassData 8d6c0d50edff1e015eabc5cf05f826dd
  TypeClassData 181e7295489b314c6c042d61e80bb6b9
  function fb710d9343cfd06856a618519a627f36
  makeTypeClassData 01b32b44a7812593fdcf211bf1370ba3
  primClasses fe69f1e579507387753cf9b3b1293ca1
  primRowClasses a8d8fce9fb36b035d4869ee770b4b4df
  primRowListClasses 05497a0cf3c6728627c3e7beb1eef0e3
  primSymbolClasses 08eb15552cc36a4b5d11f2dc66e0de38
  primTypeErrorClasses 022280231240eedd26928b8af8661fe5
  tyRecord 50710499a0d6346d3284449c5e15992d
  typeClassArguments 181e7295489b314c6c042d61e80bb6b9
  typeClassCoveringSets 181e7295489b314c6c042d61e80bb6b9
  typeClassDependencies 181e7295489b314c6c042d61e80bb6b9
  typeClassDeterminedArguments 181e7295489b314c6c042d61e80bb6b9
  typeClassMembers 181e7295489b314c6c042d61e80bb6b9
  typeClassSuperclasses 181e7295489b314c6c042d61e80bb6b9
import  -/  Language.PureScript.Errors 3c1ad933587510f8b20a8c9ec2e86ce9
  exports: 8e61484c4664eceb943d9fc4820c721b
  MultipleErrors e1ef6a17348ccfe3ef65185d3c5f9026
  addHint 4d7c0f041e7397261babf0b1c1669b2a
  errorMessage' d5b3fcc13faf321f693b39ae31b8bd13
  parU ba83f09a68cd72d36addca6319b4b6e0
  rethrow 3f15f6976fa85d5a6c226df5a731c52a
import  -/  Language.PureScript.Externs cf933be49760ec7d1e991d8ad7f6146f
  exports: caea0e8e36630f9e250d475ec2e68707
  EDClass f71940f3e461ffb20ccdf04fe199bdf0
  ExternsDeclaration a7fb565ada874d78b726c57090b05102
  ExternsFile 3c90d25a909106e2dfae91839ad7749d
  ExternsFile c010c09fe85776adf7c6787c7d79c898
  efDeclarations c010c09fe85776adf7c6787c7d79c898
  efExports c010c09fe85776adf7c6787c7d79c898
  efFixities c010c09fe85776adf7c6787c7d79c898
  efImports c010c09fe85776adf7c6787c7d79c898
  efModuleName c010c09fe85776adf7c6787c7d79c898
  efSourceSpan c010c09fe85776adf7c6787c7d79c898
  efTypeFixities c010c09fe85776adf7c6787c7d79c898
  efVersion c010c09fe85776adf7c6787c7d79c898
import  -/  Language.PureScript.Kinds e26b9cf8211f7e72bb44fdd3faed066e
  exports: fe71635ad7964c0d620fb0685614a050
  SourceKind 4cdf50d4b2444221832ca704f3a0c468
import  -/  Language.PureScript.Label 366bbe6039761c79dbc09aaf87b5753e
  exports: 0a72b1b943ee66379d53382d0212ef7e
  Label 1f1fefa14786357467485814549b59fb
import  -/  Language.PureScript.Names 00f694509122478d97b327fbbccae327
  exports: ad7ae34f85124c68e8ba1c90fb2e732f
  ClassName c5d98a635cb261f6a93bf01096d0c6ed
  Ident bad3562aa6138b6192713ac281080869
  ModuleName e77bf9e056798332a9668212060e8e06
  ModuleName 1b2ddf0c04464d2fa2588925f10c1966
  ProperName f69d3801241fcb4773f1284cd28f2dee
  ProperName a7268334e0b909381550b9329cb80fcc
  Qualified b6e1bc9e7244a41d3c6149c9b5c2d6d8
  Qualified 1b2ddf0c04464d2fa2588925f10c1966
  TyClassName e53bd54ac0d1b704756a477849dbd836
  TypeName 40ce511c66a72431b4e87351210f7b03
  UnusedIdent 57c338f8a1023bf312d293d7cd04b9e5
  coerceProperName 441cf2d4ab32b68a0b73ca234d2a628b
  qualify 7fee779c1e743466991e1770cf2b48ba
  runIdent f4727e6f001b3b7d933fd4e8122af572
import  -/  Language.PureScript.PSString 482bcd39d274b3e3efbde5749bd9d797
  exports: dedd5d31dc509736134f041863efd1d4
  mkString a727d038908a3b0e30ed0d1d71565e4b
import  -/  Language.PureScript.Sugar.CaseDeclarations 51bac23debbcaa425b8677cb7acafbb2
  exports: 8c114c15eb83b7f0b20ba12644c9c9c0
  desugarCases 49323f9364188ffd97362fb6182a4a28
import  -/  Language.PureScript.TypeClassDictionaries 7fbd42662a194b8e85db9d2e22a4ea07
  exports: d83fdf73223cc4030d8649333c7594ad
  superclassName f53c06dc8dbf373a8c68f42f6913d014
import  -/  Language.PureScript.Types 80a51f62cb3e6c71f024289b88f07b7f
  exports: 229bb7528146da886cffbefad5822e19
  Constraint a0b1e737f9fdb5b2f711c97dd5895f69
  Constraint d5fc19231e8a71936895da17eade4f5b
  SourceConstraint b73f205dd83ce498c3119d8c9316f0c6
  SourceType 0ac818517c14fedd280ef5885ae0cdc3
  TypeConstructor c7b7bcec494a17e684a206aeb55ef57b
  everythingOnTypes a337a56452e37b7c1eabcf74ce7ae28d
  moveQuantifiersToFront 6f6febea2aef649ecc311ae7a094f1e3
  quantify 9e9551d5aa515f8960715185c2613cd1
  replaceAllTypeVars cde4bd7b0fdb81185224e04d2a6fde98
  rowFromList 50b0e46715e1ec543fc59e157404928e
  srcConstrainedType 93e2834ceea7e6ad31bf7cc2ab2ec1f3
  srcConstraint 1b178a4d4c2b2691cc958960cbde0185
  srcREmpty 8c6160d0d8bd551fb2b350ad21a8f2ae
  srcRowListItem 5b8783c8967bf036dfd5e20068c3fcc1
  srcTypeApp 12cd55eb1b1b79c16fa2d346fb7f9cdb
  srcTypeConstructor bb445f2f58f3f299e4deae81f6001187
  srcTypeVar 48385e53396d525a164ce8b1126142da
import  -/  text-1.2.3.0:Data.Text 7daa7e6c9b39d8cc1679e5ec5c64d2be
import  -/  text-1.2.3.0:Data.Text.Internal 30a0a123f71f63b26cd34c6b24f23411
import  -/  transformers-0.5.5.0:Control.Monad.Trans.State.Lazy bb07ba19cd14893d125b163b03c16c98
0027aacecdd76ce65d79955632e159ad
  $s$fEq(,) ::
    GHC.Classes.Eq
      (Language.PureScript.Names.ModuleName,
       Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.ModuleName,
                     Language.PureScript.Names.ProperName
                       'Language.PureScript.Names.ClassName)
                  (GHC.Classes.$fEq(,)_$c==
                     @ Language.PureScript.Names.ModuleName
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ClassName)
                     Language.PureScript.Names.$fEqModuleName
                     (Language.PureScript.Names.$fEqProperName
                        @ 'Language.PureScript.Names.ClassName))
                  Language.PureScript.Sugar.TypeClasses.$s$fEq(,)_$s$fEq(,)_$c/= -}
ed6732c28f4157cb9f13f7240f5601eb
  $s$fEq(,)_$s$fEq(,)_$c/= ::
    (Language.PureScript.Names.ModuleName,
     Language.PureScript.Names.ProperName
       'Language.PureScript.Names.ClassName)
    -> (Language.PureScript.Names.ModuleName,
        Language.PureScript.Names.ProperName
          'Language.PureScript.Names.ClassName)
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U(U,U,U))><S(SL),1*U(1*U,1*U(U,U,U))>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: (Language.PureScript.Names.ModuleName,
                          Language.PureScript.Names.ProperName
                            'Language.PureScript.Names.ClassName))
                   (y :: (Language.PureScript.Names.ModuleName,
                          Language.PureScript.Names.ProperName
                            'Language.PureScript.Names.ClassName)) ->
                 case x of wild { (,) a1 a2 ->
                 case y of wild1 { (,) b1 b2 ->
                 case GHC.Classes.$fEq[]_$c==
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.Namespace)
                        (Language.PureScript.Names.$fEqProperName
                           @ 'Language.PureScript.Names.Namespace)
                        a1 `cast` (Language.PureScript.Names.N:ModuleName[0])
                        b1 `cast` (Language.PureScript.Names.N:ModuleName[0]) of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True
                   -> case a2
                             `cast`
                           (Language.PureScript.Names.N:ProperName[0]
                                <'Language.PureScript.Names.ClassName>_P) of wild4 { Data.Text.Internal.Text dt dt1 dt2 ->
                      case b2
                             `cast`
                           (Language.PureScript.Names.N:ProperName[0]
                                <'Language.PureScript.Names.ClassName>_P) of wild5 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                      case GHC.Classes.eqInt
                             (GHC.Types.I# dt2)
                             (GHC.Types.I# dt5) of wild6 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True
                        -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                          -> GHC.Prim.Word#
                                                          -> GHC.Prim.ByteArray#
                                                          -> GHC.Prim.Word#
                                                          -> GHC.Prim.Word#
                                                          -> GHC.Prim.State# GHC.Prim.RealWorld
                                                          -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                GHC.Prim.Int# #)}
                                  dt
                                  (GHC.Prim.int2Word# dt1)
                                  dt3
                                  (GHC.Prim.int2Word# dt4)
                                  (GHC.Prim.int2Word# dt2)
                                  GHC.Prim.realWorld# of wild7 { (#,#) ds2 ds3 ->
                           case GHC.Int.eqInt32
                                  (GHC.Int.I32# (GHC.Prim.narrow32Int# ds3))
                                  (GHC.Int.I32# 0#) of wild3 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False } } } } } } } }) -}
53a36067d432b494778a75d47f158888
  $s$fOrd(,) ::
    GHC.Classes.Ord
      (Language.PureScript.Names.ModuleName,
       Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.ModuleName,
                     Language.PureScript.Names.ProperName
                       'Language.PureScript.Names.ClassName)
                  Language.PureScript.Sugar.TypeClasses.$s$fEq(,)
                  (GHC.Classes.$fOrd(,)_$ccompare
                     @ Language.PureScript.Names.ModuleName
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ClassName)
                     Language.PureScript.Names.$fOrdModuleName
                     (Language.PureScript.Names.$fOrdProperName
                        @ 'Language.PureScript.Names.ClassName))
                  (GHC.Classes.$fOrd(,)_$c<
                     @ Language.PureScript.Names.ModuleName
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ClassName)
                     Language.PureScript.Names.$fOrdModuleName
                     (Language.PureScript.Names.$fOrdProperName
                        @ 'Language.PureScript.Names.ClassName))
                  (GHC.Classes.$fOrd(,)_$c<=
                     @ Language.PureScript.Names.ModuleName
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ClassName)
                     Language.PureScript.Names.$fOrdModuleName
                     (Language.PureScript.Names.$fOrdProperName
                        @ 'Language.PureScript.Names.ClassName))
                  (\ (a1 :: (Language.PureScript.Names.ModuleName,
                             Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.ClassName))
                     (b1 :: (Language.PureScript.Names.ModuleName,
                             Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.ClassName)) ->
                   GHC.Classes.$fOrd(,)_$c<
                     @ Language.PureScript.Names.ModuleName
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ClassName)
                     Language.PureScript.Names.$fOrdModuleName
                     (Language.PureScript.Names.$fOrdProperName
                        @ 'Language.PureScript.Names.ClassName)
                     b1
                     a1)
                  (GHC.Classes.$fOrd(,)_$c>=
                     @ Language.PureScript.Names.ModuleName
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ClassName)
                     Language.PureScript.Names.$fOrdModuleName
                     (Language.PureScript.Names.$fOrdProperName
                        @ 'Language.PureScript.Names.ClassName))
                  (GHC.Classes.$fOrd(,)_$cmax
                     @ Language.PureScript.Names.ModuleName
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ClassName)
                     Language.PureScript.Names.$fOrdModuleName
                     (Language.PureScript.Names.$fOrdProperName
                        @ 'Language.PureScript.Names.ClassName))
                  (GHC.Classes.$fOrd(,)_$cmin
                     @ Language.PureScript.Names.ModuleName
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ClassName)
                     Language.PureScript.Names.$fOrdModuleName
                     (Language.PureScript.Names.$fOrdProperName
                        @ 'Language.PureScript.Names.ClassName)) -}
bc3081b6fa4c320df0098dfe032a8c6f
  $s$fOrd(,)_$cmax ::
    (Language.PureScript.Names.ModuleName,
     Language.PureScript.Names.ProperName
       'Language.PureScript.Names.ClassName)
    -> (Language.PureScript.Names.ModuleName,
        Language.PureScript.Names.ProperName
          'Language.PureScript.Names.ClassName)
    -> (Language.PureScript.Names.ModuleName,
        Language.PureScript.Names.ProperName
          'Language.PureScript.Names.ClassName)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(U,U(U,U,U))><S(SL),1*U(U,U(U,U,U))>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w2 :: (Language.PureScript.Names.ModuleName,
                           Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ClassName))
                   (w3 :: (Language.PureScript.Names.ModuleName,
                           Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ClassName)) ->
                 case w2 of ww { (,) ww1 ww2 ->
                 case w3 of ww3 { (,) ww4 ww5 ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.Namespace)
                        (Language.PureScript.Names.$fOrdProperName
                           @ 'Language.PureScript.Names.Namespace)
                        ww4 `cast` (Language.PureScript.Names.N:ModuleName[0])
                        ww1 `cast` (Language.PureScript.Names.N:ModuleName[0]) of wild {
                   GHC.Types.LT -> (ww1, ww2)
                   GHC.Types.EQ
                   -> case ww5
                             `cast`
                           (Language.PureScript.Names.N:ProperName[0]
                                <'Language.PureScript.Names.ClassName>_P) of ww7 { Data.Text.Internal.Text ww8 ww9 ww10 ->
                      case ww2
                             `cast`
                           (Language.PureScript.Names.N:ProperName[0]
                                <'Language.PureScript.Names.ClassName>_P) of ww11 { Data.Text.Internal.Text ww12 ww6 ww13 ->
                      case Data.Text.$w$ccompare ww8 ww9 ww10 ww12 ww6 ww13 of wild1 {
                        DEFAULT
                        -> (ww4,
                            ww7
                              `cast`
                            (Sym (Language.PureScript.Names.N:ProperName[0]
                                      <'Language.PureScript.Names.ClassName>_P)))
                        GHC.Types.LT
                        -> (ww1,
                            ww11
                              `cast`
                            (Sym (Language.PureScript.Names.N:ProperName[0]
                                      <'Language.PureScript.Names.ClassName>_P))) } } }
                   GHC.Types.GT -> (ww4, ww5) } } }) -}
b025ddfcf3b7fe413d9eccce7185f8d9
  $s$fOrd(,)_$cmin ::
    (Language.PureScript.Names.ModuleName,
     Language.PureScript.Names.ProperName
       'Language.PureScript.Names.ClassName)
    -> (Language.PureScript.Names.ModuleName,
        Language.PureScript.Names.ProperName
          'Language.PureScript.Names.ClassName)
    -> (Language.PureScript.Names.ModuleName,
        Language.PureScript.Names.ProperName
          'Language.PureScript.Names.ClassName)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(U,U(U,U,U))><S(SL),1*U(U,U(U,U,U))>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w2 :: (Language.PureScript.Names.ModuleName,
                           Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ClassName))
                   (w3 :: (Language.PureScript.Names.ModuleName,
                           Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ClassName)) ->
                 case w2 of ww { (,) ww1 ww2 ->
                 case w3 of ww3 { (,) ww4 ww5 ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.Namespace)
                        (Language.PureScript.Names.$fOrdProperName
                           @ 'Language.PureScript.Names.Namespace)
                        ww4 `cast` (Language.PureScript.Names.N:ModuleName[0])
                        ww1 `cast` (Language.PureScript.Names.N:ModuleName[0]) of wild {
                   GHC.Types.LT -> (ww4, ww5)
                   GHC.Types.EQ
                   -> case ww5
                             `cast`
                           (Language.PureScript.Names.N:ProperName[0]
                                <'Language.PureScript.Names.ClassName>_P) of ww7 { Data.Text.Internal.Text ww8 ww9 ww10 ->
                      case ww2
                             `cast`
                           (Language.PureScript.Names.N:ProperName[0]
                                <'Language.PureScript.Names.ClassName>_P) of ww11 { Data.Text.Internal.Text ww12 ww6 ww13 ->
                      case Data.Text.$w$ccompare ww8 ww9 ww10 ww12 ww6 ww13 of wild1 {
                        DEFAULT
                        -> (ww1,
                            ww11
                              `cast`
                            (Sym (Language.PureScript.Names.N:ProperName[0]
                                      <'Language.PureScript.Names.ClassName>_P)))
                        GHC.Types.LT
                        -> (ww4,
                            ww7
                              `cast`
                            (Sym (Language.PureScript.Names.N:ProperName[0]
                                      <'Language.PureScript.Names.ClassName>_P))) } } }
                   GHC.Types.GT -> (ww1, ww2) } } }) -}
37a4b4a514a48feba7b7109754156323
  $sfromList ::
    [Language.PureScript.Names.Ident]
    -> Data.Set.Internal.Set Language.PureScript.Names.Ident
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [Language.PureScript.Names.Ident]) ->
                 case ds of wild {
                   [] -> Data.Set.Internal.Tip @ Language.PureScript.Names.Ident
                   : x ds1
                   -> case ds1 of wild1 {
                        []
                        -> case x of dt { DEFAULT ->
                           Data.Set.Internal.Bin
                             @ Language.PureScript.Names.Ident
                             1#
                             dt
                             (Data.Set.Internal.Tip @ Language.PureScript.Names.Ident)
                             (Data.Set.Internal.Tip @ Language.PureScript.Names.Ident) }
                        : ipv ipv1
                        -> case Language.PureScript.Names.$fOrdIdent_$c< x ipv of wild2 {
                             GHC.Types.False
                             -> case x of dt { DEFAULT ->
                                Language.PureScript.Sugar.TypeClasses.$sfromList_$sgo4
                                  ipv
                                  ipv1
                                  (Data.Set.Internal.Bin
                                     @ Language.PureScript.Names.Ident
                                     1#
                                     dt
                                     (Data.Set.Internal.Tip @ Language.PureScript.Names.Ident)
                                     (Data.Set.Internal.Tip @ Language.PureScript.Names.Ident)) }
                             GHC.Types.True
                             -> case x of dt { DEFAULT ->
                                Language.PureScript.Sugar.TypeClasses.$sfromList_$s$wgo3
                                  ipv
                                  ipv1
                                  (Data.Set.Internal.Bin
                                     @ Language.PureScript.Names.Ident
                                     1#
                                     dt
                                     (Data.Set.Internal.Tip @ Language.PureScript.Names.Ident)
                                     (Data.Set.Internal.Tip @ Language.PureScript.Names.Ident))
                                  1# } } } }) -}
060143574a48b4392b712fc6aa4338f4
  $sfromList1 ::
    [((Language.PureScript.Names.ModuleName,
       Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName),
      a)]
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ModuleName,
          Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
         a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a
                   (ds :: [((Language.PureScript.Names.ModuleName,
                             Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.ClassName),
                            a)]) ->
                 case ds of wild {
                   []
                   -> Data.Map.Internal.Tip
                        @ (Language.PureScript.Names.ModuleName,
                           Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ClassName)
                        @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case kx of dt { (,) ipv ipv1 ->
                           Data.Map.Internal.Bin
                             @ (Language.PureScript.Names.ModuleName,
                                Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.ClassName)
                             @ a
                             1#
                             dt
                             x
                             (Data.Map.Internal.Tip
                                @ (Language.PureScript.Names.ModuleName,
                                   Language.PureScript.Names.ProperName
                                     'Language.PureScript.Names.ClassName)
                                @ a)
                             (Data.Map.Internal.Tip
                                @ (Language.PureScript.Names.ModuleName,
                                   Language.PureScript.Names.ProperName
                                     'Language.PureScript.Names.ClassName)
                                @ a) }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case kx of ww { (,) ww1 ww2 ->
                           case ky of ww3 { (,) ww4 ww5 ->
                           case GHC.Classes.$fOrd[]_$ccompare
                                  @ (Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.Namespace)
                                  (Language.PureScript.Names.$fOrdProperName
                                     @ 'Language.PureScript.Names.Namespace)
                                  ww1 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                  ww4 `cast` (Language.PureScript.Names.N:ModuleName[0]) of wild4 {
                             GHC.Types.LT
                             -> Language.PureScript.Sugar.TypeClasses.$sfromList_$s$wpoly_go13
                                  @ a
                                  ww4
                                  ww5
                                  ds3
                                  ipv1
                                  (Data.Map.Internal.Bin
                                     @ (Language.PureScript.Names.ModuleName,
                                        Language.PureScript.Names.ProperName
                                          'Language.PureScript.Names.ClassName)
                                     @ a
                                     1#
                                     ww
                                     x
                                     (Data.Map.Internal.Tip
                                        @ (Language.PureScript.Names.ModuleName,
                                           Language.PureScript.Names.ProperName
                                             'Language.PureScript.Names.ClassName)
                                        @ a)
                                     (Data.Map.Internal.Tip
                                        @ (Language.PureScript.Names.ModuleName,
                                           Language.PureScript.Names.ProperName
                                             'Language.PureScript.Names.ClassName)
                                        @ a))
                                  1#
                             GHC.Types.EQ
                             -> case ww2
                                       `cast`
                                     (Language.PureScript.Names.N:ProperName[0]
                                          <'Language.PureScript.Names.ClassName>_P) of ww7 { Data.Text.Internal.Text ww8 ww9 ww10 ->
                                case ww5
                                       `cast`
                                     (Language.PureScript.Names.N:ProperName[0]
                                          <'Language.PureScript.Names.ClassName>_P) of ww11 { Data.Text.Internal.Text ww12 ww6 ww13 ->
                                case Data.Text.$w$ccompare ww8 ww9 ww10 ww12 ww6 ww13 of wild5 {
                                  DEFAULT
                                  -> Language.PureScript.Sugar.TypeClasses.$sfromList_$spoly_go14
                                       @ a
                                       ww3
                                       ds3
                                       ipv1
                                       (Data.Map.Internal.Bin
                                          @ (Language.PureScript.Names.ModuleName,
                                             Language.PureScript.Names.ProperName
                                               'Language.PureScript.Names.ClassName)
                                          @ a
                                          1#
                                          ww
                                          x
                                          (Data.Map.Internal.Tip
                                             @ (Language.PureScript.Names.ModuleName,
                                                Language.PureScript.Names.ProperName
                                                  'Language.PureScript.Names.ClassName)
                                             @ a)
                                          (Data.Map.Internal.Tip
                                             @ (Language.PureScript.Names.ModuleName,
                                                Language.PureScript.Names.ProperName
                                                  'Language.PureScript.Names.ClassName)
                                             @ a))
                                  GHC.Types.LT
                                  -> Language.PureScript.Sugar.TypeClasses.$sfromList_$s$wpoly_go13
                                       @ a
                                       ww4
                                       ww11
                                         `cast`
                                       (Sym (Language.PureScript.Names.N:ProperName[0]
                                                 <'Language.PureScript.Names.ClassName>_P))
                                       ds3
                                       ipv1
                                       (Data.Map.Internal.Bin
                                          @ (Language.PureScript.Names.ModuleName,
                                             Language.PureScript.Names.ProperName
                                               'Language.PureScript.Names.ClassName)
                                          @ a
                                          1#
                                          ww
                                          x
                                          (Data.Map.Internal.Tip
                                             @ (Language.PureScript.Names.ModuleName,
                                                Language.PureScript.Names.ProperName
                                                  'Language.PureScript.Names.ClassName)
                                             @ a)
                                          (Data.Map.Internal.Tip
                                             @ (Language.PureScript.Names.ModuleName,
                                                Language.PureScript.Names.ProperName
                                                  'Language.PureScript.Names.ClassName)
                                             @ a))
                                       1# } } }
                             GHC.Types.GT
                             -> Language.PureScript.Sugar.TypeClasses.$sfromList_$spoly_go14
                                  @ a
                                  ww3
                                  ds3
                                  ipv1
                                  (Data.Map.Internal.Bin
                                     @ (Language.PureScript.Names.ModuleName,
                                        Language.PureScript.Names.ProperName
                                          'Language.PureScript.Names.ClassName)
                                     @ a
                                     1#
                                     ww
                                     x
                                     (Data.Map.Internal.Tip
                                        @ (Language.PureScript.Names.ModuleName,
                                           Language.PureScript.Names.ProperName
                                             'Language.PureScript.Names.ClassName)
                                        @ a)
                                     (Data.Map.Internal.Tip
                                        @ (Language.PureScript.Names.ModuleName,
                                           Language.PureScript.Names.ProperName
                                             'Language.PureScript.Names.ClassName)
                                        @ a)) } } } } } } }) -}
e4bea20242525ab84e4932fa2e15cc97
  $sfromList_$s$wgo3 ::
    Language.PureScript.Names.Ident
    -> [Language.PureScript.Names.Ident]
    -> Data.Set.Internal.Set Language.PureScript.Names.Ident
    -> GHC.Prim.Int#
    -> Data.Set.Internal.Set Language.PureScript.Names.Ident
  {- Arity: 4, Strictness: <S,U><S,1*U><S,1*U><L,U> -}
bcd0aa40dd0d0bdd94d6093aef8db192
  $sfromList_$s$wpoly_go13 ::
    Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> a
    -> [((Language.PureScript.Names.ModuleName,
          Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName),
         a)]
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ModuleName,
          Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
         a
    -> GHC.Prim.Int#
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ModuleName,
          Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
         a
  {- Arity: 6,
     Strictness: <L,U><L,U(U,U,U)><L,U><S,1*U><S,1*U><L,U> -}
9ae4fe38c775991b980636da7b77ef5a
  $sfromList_$sgo4 ::
    Language.PureScript.Names.Ident
    -> [Language.PureScript.Names.Ident]
    -> Data.Set.Internal.Set Language.PureScript.Names.Ident
    -> Data.Set.Internal.Set Language.PureScript.Names.Ident
  {- Arity: 3, Strictness: <S,U><S,1*U><S,1*U> -}
7151913f6d17a2bdd9c0cfd67cc450a5
  $sfromList_$spoly_go14 ::
    (Language.PureScript.Names.ModuleName,
     Language.PureScript.Names.ProperName
       'Language.PureScript.Names.ClassName)
    -> a
    -> [((Language.PureScript.Names.ModuleName,
          Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName),
         a)]
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ModuleName,
          Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
         a
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ModuleName,
          Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
         a
  {- Arity: 4, Strictness: <S,U><L,U><S,1*U><S,1*U> -}
dcc75fc0b5d8472c022a5d11c4d3a32a
  $sinsert_$sgo13 ::
    GHC.Prim.Int#
    -> (Language.PureScript.Names.ModuleName,
        Language.PureScript.Names.ProperName
          'Language.PureScript.Names.ClassName)
    -> a
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ModuleName,
          Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
         a
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ModuleName,
          Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
         a
    -> a
    -> (Language.PureScript.Names.ModuleName,
        Language.PureScript.Names.ProperName
          'Language.PureScript.Names.ClassName)
    -> (Language.PureScript.Names.ModuleName,
        Language.PureScript.Names.ProperName
          'Language.PureScript.Names.ClassName)
    -> GHC.Classes.Ord
         (Language.PureScript.Names.ModuleName,
          Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName) =>
       Data.Map.Internal.Map
         (Language.PureScript.Names.ModuleName,
          Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
         a
  {- Arity: 9,
     Strictness: <L,U><L,U><L,U><L,U><L,U><L,U><S,1*U(U,U)><L,U><S(LC(C(S))LLLLLL),U(A,C(C1(U)),A,A,A,A,A,A)> -}
6ad50ed6ac5d31b1f5deb9d4572935ec
  $sinsert_$sgo3 ::
    Language.PureScript.Names.Ident
    -> Language.PureScript.Names.Ident
    -> Data.Set.Internal.Set Language.PureScript.Names.Ident
    -> Data.Set.Internal.Set Language.PureScript.Names.Ident
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U> -}
66e0cda3cbc796063a76cc0aa5ffd04c
  $sinsert_go13 ::
    GHC.Classes.Ord k1 =>
    k1
    -> k1
    -> a1
    -> Data.Map.Internal.Map k1 a1
    -> Data.Map.Internal.Map k1 a1
  {- Arity: 5,
     Strictness: <L,U(A,C(C1(U)),A,A,A,A,A,A)><L,U><S,1*U><L,U><S,1*U> -}
6ac81dfd628bc4b546ccbe950161258b
  $slookup_$s$wpoly_go13 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.ModuleName,
       Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
      a
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> ((Data.Text.Internal.Text :: *)
        ~R# (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName :: *)) =>
       Language.PureScript.Names.ModuleName -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S,1*U><L,U><L,U><L,U><L,U><L,U> -}
5a99bf5512909222f12846fa421706e2
  $smember_$sgo1 ::
    Data.Set.Internal.Set Language.PureScript.Names.Ident
    -> GHC.Base.Maybe Data.Text.Internal.Text
    -> GHC.Integer.Type.Integer
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,1*U><L,U> -}
82bd5b16105b2787fa19b3fbe8dd6571
  $smember_$sgo2 ::
    Data.Set.Internal.Set Language.PureScript.Names.Ident
    -> Data.Text.Internal.Text -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U(U,U,U)> -}
e22294fa419659fe8428cd4dbf515412
  $smember_$sgo3 ::
    Data.Set.Internal.Set Language.PureScript.Names.Ident
    -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
9e55c177c6cfb6c3a34579facb955fb4
  $smember_go3 ::
    Language.PureScript.Names.Ident
    -> Data.Set.Internal.Set Language.PureScript.Names.Ident
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
cf8c54357fde4bd47ccd4535fbfa8995
  $sunion ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.ModuleName,
       Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
      a
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ModuleName,
          Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
         a
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ModuleName,
          Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
         a
  {- Arity: 2, Strictness: <S,1*U><S,1*U>, Inline: [~] -}
d5fb619b2e643aaa2fb868edd8f5ca45
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Language.PureScript.Sugar.TypeClasses.$trModule3
                   Language.PureScript.Sugar.TypeClasses.$trModule1) -}
658b35a3e36452cc62005386febf7e16
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Sugar.TypeClasses.$trModule2) -}
20191303670da47270a47232e249c35c
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Language.PureScript.Sugar.TypeClasses"#) -}
72d743ad3acfa5bc4a9e73b6c911c7e7
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Sugar.TypeClasses.$trModule4) -}
0f48bbd3f88333a0973a5f832fa0b556
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"#) -}
e9b40b0cfdbf46c4151f6b3aae1beb87
  $wpoly_go13 ::
    Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ModuleName,
          Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
         a
    -> GHC.Base.Maybe a
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,1*U(U,U,U)><S,1*U>,
     Inline: [0] -}
30c1ec33c237f582a8fc5345d435e4af
  type Desugar =
    Control.Monad.Trans.State.Lazy.StateT
      Language.PureScript.Sugar.TypeClasses.MemberMap
    :: (* -> *) -> * -> *
3ae0caaddf69b764111c8487587e490d
  type MemberMap =
    Data.Map.Internal.Map
      (Language.PureScript.Names.ModuleName,
       Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
      Language.PureScript.Environment.TypeClassData
7ec237e2aa2c431dd80c605692c024a3
  desugarTypeClasses ::
    (Control.Monad.Supply.Class.MonadSupply m,
     Control.Monad.Error.Class.MonadError
       Language.PureScript.Errors.MultipleErrors m) =>
    [Language.PureScript.Externs.ExternsFile]
    -> [Language.PureScript.AST.Declarations.Module]
    -> m [Language.PureScript.AST.Declarations.Module]
  {- Arity: 2,
     Strictness: <L,U(U(U(U(C(C1(U)),A),A,A,A,A,A),C(C1(U)),A,C(U),C(U)),U,U)><L,U(U(U(U(C(C1(U)),A),A,A,A,A,A),C(C1(U)),A,C(U),C(U)),C(U),C(C1(U)))> -}
dbf27d758e2b43beda4bf56688c5ddbe
  superClassDictionaryNames ::
    [Language.PureScript.Types.Constraint a]
    -> [Data.Text.Internal.Text]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a
                   (supers :: [Language.PureScript.Types.Constraint a]) ->
                 Language.PureScript.Sugar.TypeClasses.superClassDictionaryNames2
                   @ a
                   Language.PureScript.Sugar.TypeClasses.superClassDictionaryNames1
                   supers) -}
070c17ab4e5d368eb53b2c77f45b9ee0
  superClassDictionaryNames1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
53eceeb7181359d99ee55ec06a97928c
  superClassDictionaryNames2 ::
    GHC.Integer.Type.Integer
    -> [Language.PureScript.Types.Constraint a]
    -> [Data.Text.Internal.Text]
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
5121df5211baa3e9636c46e9448bcbe8
  typeClassMemberName ::
    Language.PureScript.AST.Declarations.Declaration
    -> Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.AST.Declarations.Declaration) ->
                 case x of wild {
                   DEFAULT
                   -> Language.PureScript.Sugar.TypeClasses.typeClassMemberName_d
                   Language.PureScript.AST.Declarations.TypeDeclaration dt dt1 dt2
                   -> Language.PureScript.Names.runIdent dt1
                   Language.PureScript.AST.Declarations.ValueDeclaration dt dt1 dt2 dt3 dt4
                   -> Language.PureScript.Names.runIdent dt1 }) -}
40cfafef8d8d2f7de246b97606d9057a
  typeClassMemberName_d :: Data.Text.Internal.Text
  {- Strictness: x -}
"SC:$wpoly_go130" [0] forall @ a
                             (sc :: Data.Map.Internal.Map
                                      (Language.PureScript.Names.ModuleName,
                                       Language.PureScript.Names.ProperName
                                         'Language.PureScript.Names.ClassName)
                                      a)
                             (sc1 :: GHC.Prim.ByteArray#)
                             (sc2 :: GHC.Prim.Int#)
                             (sc3 :: GHC.Prim.Int#)
                             (sg :: (Data.Text.Internal.Text :: *)
                                    ~R# (Language.PureScript.Names.ProperName
                                           'Language.PureScript.Names.ClassName :: *))
                             (sc4 :: Language.PureScript.Names.ModuleName)
  Language.PureScript.Sugar.TypeClasses.$wpoly_go13 @ a
                                                    sc4
                                                    (Data.Text.Internal.Text sc1 sc2 sc3) `cast` sg
                                                    sc
  = Language.PureScript.Sugar.TypeClasses.$slookup_$s$wpoly_go13
      @ a
      sc
      sc1
      sc2
      sc3
      @~ sg
      sc4
"SC:go130" forall @ a
                  (sc :: GHC.Prim.Int#)
                  (sc1 :: (Language.PureScript.Names.ModuleName,
                           Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ClassName))
                  (sc2 :: a)
                  (sc3 :: Data.Map.Internal.Map
                            (Language.PureScript.Names.ModuleName,
                             Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.ClassName)
                            a)
                  (sc4 :: Data.Map.Internal.Map
                            (Language.PureScript.Names.ModuleName,
                             Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.ClassName)
                            a)
                  (sc5 :: a)
                  (sc6 :: (Language.PureScript.Names.ModuleName,
                           Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ClassName))
                  (sc7 :: (Language.PureScript.Names.ModuleName,
                           Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ClassName))
                  (sc8 :: GHC.Classes.Ord
                            (Language.PureScript.Names.ModuleName,
                             Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.ClassName))
  Language.PureScript.Sugar.TypeClasses.$sinsert_go13 @ (Language.PureScript.Names.ModuleName,
                                                         Language.PureScript.Names.ProperName
                                                           'Language.PureScript.Names.ClassName)
                                                      @ a
                                                      sc8
                                                      sc7
                                                      sc6
                                                      sc5
                                                      (Data.Map.Internal.Bin
                                                         @ (Language.PureScript.Names.ModuleName,
                                                            Language.PureScript.Names.ProperName
                                                              'Language.PureScript.Names.ClassName)
                                                         @ a
                                                         sc
                                                         sc1
                                                         sc2
                                                         sc3
                                                         sc4)
  = Language.PureScript.Sugar.TypeClasses.$sinsert_$sgo13
      @ a
      sc
      sc1
      sc2
      sc3
      sc4
      sc5
      sc6
      sc7
      sc8
"SC:go30" forall (sc :: Data.Set.Internal.Set
                          Language.PureScript.Names.Ident)
                 (sc1 :: Data.Text.Internal.Text)
  Language.PureScript.Sugar.TypeClasses.$smember_go3 (Language.PureScript.Names.Ident
                                                        sc1)
                                                     sc
  = Language.PureScript.Sugar.TypeClasses.$smember_$sgo2 sc sc1
"SC:go31" forall (sc :: Data.Set.Internal.Set
                          Language.PureScript.Names.Ident)
                 (sc1 :: GHC.Base.Maybe Data.Text.Internal.Text)
                 (sc2 :: GHC.Integer.Type.Integer)
  Language.PureScript.Sugar.TypeClasses.$smember_go3 (Language.PureScript.Names.GenIdent
                                                        sc1
                                                        sc2)
                                                     sc
  = Language.PureScript.Sugar.TypeClasses.$smember_$sgo1 sc sc1 sc2
"SC:go32" forall (sc :: Data.Set.Internal.Set
                          Language.PureScript.Names.Ident)
  Language.PureScript.Sugar.TypeClasses.$smember_go3 Language.PureScript.Names.UnusedIdent
                                                     sc
  = Language.PureScript.Sugar.TypeClasses.$smember_$sgo3 sc
"SPEC/Language.PureScript.Sugar.TypeClasses $fEq(,) @ ModuleName @ (ProperName
                                                                     'ClassName)" [orphan] forall (v1 :: GHC.Classes.Eq
                                                                                                                                                                                          (Language.PureScript.Names.ProperName
                                                                                                                                                                                             'Language.PureScript.Names.ClassName))
                                                                                                                                                                                 (v :: GHC.Classes.Eq
                                                                                                                                                                                         Language.PureScript.Names.ModuleName)
  GHC.Classes.$fEq(,) @ Language.PureScript.Names.ModuleName
                      @ (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.ClassName)
                      v
                      v1
  = Language.PureScript.Sugar.TypeClasses.$s$fEq(,)
"SPEC/Language.PureScript.Sugar.TypeClasses $fEq(,)_$c/= @ ModuleName @ (ProperName
                                                                          'ClassName)" [orphan] forall ($dEq1 :: GHC.Classes.Eq
                                                                                                                                                                                                       (Language.PureScript.Names.ProperName
                                                                                                                                                                                                          'Language.PureScript.Names.ClassName))
                                                                                                                                                                                           ($dEq :: GHC.Classes.Eq
                                                                                                                                                                                                      Language.PureScript.Names.ModuleName)
  GHC.Classes.$fEq(,)_$c/= @ Language.PureScript.Names.ModuleName
                           @ (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ClassName)
                           $dEq
                           $dEq1
  = Language.PureScript.Sugar.TypeClasses.$s$fEq(,)_$s$fEq(,)_$c/=
"SPEC/Language.PureScript.Sugar.TypeClasses $fOrd(,) @ ModuleName @ (ProperName
                                                                      'ClassName)" [orphan] forall (v1 :: GHC.Classes.Ord
                                                                                                                                                                                            (Language.PureScript.Names.ProperName
                                                                                                                                                                                               'Language.PureScript.Names.ClassName))
                                                                                                                                                                                   (v :: GHC.Classes.Ord
                                                                                                                                                                                           Language.PureScript.Names.ModuleName)
  GHC.Classes.$fOrd(,) @ Language.PureScript.Names.ModuleName
                       @ (Language.PureScript.Names.ProperName
                            'Language.PureScript.Names.ClassName)
                       v
                       v1
  = Language.PureScript.Sugar.TypeClasses.$s$fOrd(,)
"SPEC/Language.PureScript.Sugar.TypeClasses $fOrd(,)_$cmax @ ModuleName @ (ProperName
                                                                            'ClassName)" [orphan] [0] forall (w1 :: GHC.Classes.Ord
                                                                                                                                                                                                            (Language.PureScript.Names.ProperName
                                                                                                                                                                                                               'Language.PureScript.Names.ClassName))
                                                                                                                                                                                                   (w :: GHC.Classes.Ord
                                                                                                                                                                                                           Language.PureScript.Names.ModuleName)
  GHC.Classes.$fOrd(,)_$cmax @ Language.PureScript.Names.ModuleName
                             @ (Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.ClassName)
                             w
                             w1
  = Language.PureScript.Sugar.TypeClasses.$s$fOrd(,)_$cmax
"SPEC/Language.PureScript.Sugar.TypeClasses $fOrd(,)_$cmin @ ModuleName @ (ProperName
                                                                            'ClassName)" [orphan] [0] forall (w1 :: GHC.Classes.Ord
                                                                                                                                                                                                            (Language.PureScript.Names.ProperName
                                                                                                                                                                                                               'Language.PureScript.Names.ClassName))
                                                                                                                                                                                                   (w :: GHC.Classes.Ord
                                                                                                                                                                                                           Language.PureScript.Names.ModuleName)
  GHC.Classes.$fOrd(,)_$cmin @ Language.PureScript.Names.ModuleName
                             @ (Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.ClassName)
                             w
                             w1
  = Language.PureScript.Sugar.TypeClasses.$s$fOrd(,)_$cmin
"SPEC/Language.PureScript.Sugar.TypeClasses fromList @ (ModuleName,
                                                       ProperName 'ClassName) _" [orphan] forall @ a
                                                                                                                                                                     ($dOrd :: GHC.Classes.Ord
                                                                                                                                                                                 (Language.PureScript.Names.ModuleName,
                                                                                                                                                                                  Language.PureScript.Names.ProperName
                                                                                                                                                                                    'Language.PureScript.Names.ClassName))
  Data.Map.Internal.fromList @ (Language.PureScript.Names.ModuleName,
                                Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.ClassName)
                             @ a
                             $dOrd
  = Language.PureScript.Sugar.TypeClasses.$sfromList1 @ a
"SPEC/Language.PureScript.Sugar.TypeClasses fromList @ Ident" [orphan] forall ($dOrd :: GHC.Classes.Ord
                                                                                          Language.PureScript.Names.Ident)
  Data.Set.Internal.fromList @ Language.PureScript.Names.Ident $dOrd
  = Language.PureScript.Sugar.TypeClasses.$sfromList
"SPEC/Language.PureScript.Sugar.TypeClasses union @ (ModuleName,
                                                    ProperName 'ClassName) _" [orphan] forall @ a
                                                                                                                                                               ($dOrd :: GHC.Classes.Ord
                                                                                                                                                                           (Language.PureScript.Names.ModuleName,
                                                                                                                                                                            Language.PureScript.Names.ProperName
                                                                                                                                                                              'Language.PureScript.Names.ClassName))
  Data.Map.Internal.union @ (Language.PureScript.Names.ModuleName,
                             Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.ClassName)
                          @ a
                          $dOrd
  = Language.PureScript.Sugar.TypeClasses.$sunion @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

