
==================== FINAL INTERFACE ====================
2019-01-24 14:17:32.418056 UTC

interface purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Docs.AsHtml 8043
  interface hash: 5a15c207258c22a5c4e4ee4ce63047f5
  ABI hash: b4c367db8b90fa936bf13ebaa79b0fd0
  export-list hash: 97b7c5e80ebb3fc9d0cd5cae971a01d0
  orphan hash: 78e39f569820c4a262497dacdc3fe39e
  flag hash: 94f2816997904b752beedc19c412f025
  opt_hash: 2c98c95d41c045ae9c2fb565ec8aabc6
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Language.PureScript.Docs.AsHtml.declNamespace
  Language.PureScript.Docs.AsHtml.makeFragment
  Language.PureScript.Docs.AsHtml.moduleAsHtml
  Language.PureScript.Docs.AsHtml.nullRenderContext
  Language.PureScript.Docs.AsHtml.packageAsHtml
  Language.PureScript.Docs.AsHtml.renderMarkdown
  Language.PureScript.Docs.AsHtml.HtmlOutput{Language.PureScript.Docs.AsHtml.HtmlOutput htmlIndex htmlModules}
  Language.PureScript.Docs.AsHtml.HtmlOutputModule{Language.PureScript.Docs.AsHtml.HtmlOutputModule htmlOutputModuleLocals htmlOutputModuleReExports}
  Language.PureScript.Docs.AsHtml.HtmlRenderContext{Language.PureScript.Docs.AsHtml.HtmlRenderContext buildDocLink renderDocLink renderSourceLink}
module dependencies: Control.Monad.Logger Control.Monad.Supply
                     Control.Monad.Supply.Class Language.PureScript
                     Language.PureScript.AST Language.PureScript.AST.Binders
                     Language.PureScript.AST.Declarations
                     Language.PureScript.AST.Exported Language.PureScript.AST.Literals
                     Language.PureScript.AST.Operators Language.PureScript.AST.SourcePos
                     Language.PureScript.AST.Traversals Language.PureScript.Bundle
                     Language.PureScript.CodeGen.JS
                     Language.PureScript.CodeGen.JS.Common
                     Language.PureScript.CodeGen.JS.Printer Language.PureScript.Comments
                     Language.PureScript.Constants Language.PureScript.CoreFn
                     Language.PureScript.CoreFn.Ann Language.PureScript.CoreFn.Binders
                     Language.PureScript.CoreFn.Desugar Language.PureScript.CoreFn.Expr
                     Language.PureScript.CoreFn.Meta Language.PureScript.CoreFn.Module
                     Language.PureScript.CoreFn.Optimizer
                     Language.PureScript.CoreFn.ToJSON
                     Language.PureScript.CoreFn.Traversals
                     Language.PureScript.CoreImp.AST
                     Language.PureScript.CoreImp.Optimizer
                     Language.PureScript.CoreImp.Optimizer.Blocks
                     Language.PureScript.CoreImp.Optimizer.Common
                     Language.PureScript.CoreImp.Optimizer.Inliner
                     Language.PureScript.CoreImp.Optimizer.MagicDo
                     Language.PureScript.CoreImp.Optimizer.TCO
                     Language.PureScript.CoreImp.Optimizer.Unused
                     Language.PureScript.Crash Language.PureScript.Docs.Render
                     Language.PureScript.Docs.RenderedCode
                     Language.PureScript.Docs.RenderedCode.RenderKind
                     Language.PureScript.Docs.RenderedCode.RenderType
                     Language.PureScript.Docs.RenderedCode.Types
                     Language.PureScript.Docs.Types
                     Language.PureScript.Docs.Utils.MonoidExtras
                     Language.PureScript.Environment Language.PureScript.Errors
                     Language.PureScript.Externs Language.PureScript.Kinds
                     Language.PureScript.Label Language.PureScript.Linter
                     Language.PureScript.Linter.Exhaustive
                     Language.PureScript.Linter.Imports Language.PureScript.Make
                     Language.PureScript.Make.Actions Language.PureScript.Make.BuildPlan
                     Language.PureScript.Make.Monad
                     Language.PureScript.ModuleDependencies Language.PureScript.Names
                     Language.PureScript.Options Language.PureScript.PSString
                     Language.PureScript.Parser Language.PureScript.Parser.Common
                     Language.PureScript.Parser.Declarations
                     Language.PureScript.Parser.Kinds Language.PureScript.Parser.Lexer
                     Language.PureScript.Parser.State Language.PureScript.Parser.Types
                     Language.PureScript.Pretty Language.PureScript.Pretty.Common
                     Language.PureScript.Pretty.Kinds Language.PureScript.Pretty.Types
                     Language.PureScript.Pretty.Values
                     Language.PureScript.Publish.BoxesHelpers
                     Language.PureScript.Renamer Language.PureScript.Sugar
                     Language.PureScript.Sugar.AdoNotation
                     Language.PureScript.Sugar.BindingGroups
                     Language.PureScript.Sugar.CaseDeclarations
                     Language.PureScript.Sugar.DoNotation
                     Language.PureScript.Sugar.LetPattern
                     Language.PureScript.Sugar.Names
                     Language.PureScript.Sugar.Names.Common
                     Language.PureScript.Sugar.Names.Env
                     Language.PureScript.Sugar.Names.Exports
                     Language.PureScript.Sugar.Names.Imports
                     Language.PureScript.Sugar.ObjectWildcards
                     Language.PureScript.Sugar.Operators
                     Language.PureScript.Sugar.Operators.Binders
                     Language.PureScript.Sugar.Operators.Common
                     Language.PureScript.Sugar.Operators.Expr
                     Language.PureScript.Sugar.Operators.Types
                     Language.PureScript.Sugar.TypeClasses
                     Language.PureScript.Sugar.TypeClasses.Deriving
                     Language.PureScript.Sugar.TypeDeclarations
                     Language.PureScript.Traversals Language.PureScript.TypeChecker
                     Language.PureScript.TypeChecker.Entailment
                     Language.PureScript.TypeChecker.Kinds
                     Language.PureScript.TypeChecker.Monad
                     Language.PureScript.TypeChecker.Skolems
                     Language.PureScript.TypeChecker.Subsumption
                     Language.PureScript.TypeChecker.Synonyms
                     Language.PureScript.TypeChecker.TypeSearch
                     Language.PureScript.TypeChecker.Types
                     Language.PureScript.TypeChecker.Unify
                     Language.PureScript.TypeClassDictionaries Language.PureScript.Types
                     Paths_purescript
package dependencies: aeson-1.3.1.1 aeson-better-errors-0.9.1.0
                      ansi-terminal-0.8.0.4 array-0.5.2.0 async-2.2.1 attoparsec-0.13.2.2
                      base-4.11.1.0 base-compat-0.10.4 binary-0.8.5.1
                      blaze-builder-0.4.1.0 blaze-html-0.9.1.1 blaze-markup-0.8.2.1
                      bower-json-1.0.0.1 boxes-0.1.5 bytestring-0.10.8.2 cheapskate-0.1.1
                      colour-2.3.4 containers-0.5.11.0 css-text-0.1.3.0
                      data-default-0.7.1.1 data-default-class-0.1.2.0
                      data-default-instances-containers-0.0.1
                      data-default-instances-dlist-0.0.1
                      data-default-instances-old-locale-0.0.1 data-ordlist-0.4.7.0
                      deepseq-1.4.3.0 directory-1.3.1.5 dlist-0.8.0.4 filepath-1.4.2
                      ghc-boot-th-8.4.3 ghc-prim-0.5.2.0 hashable-1.2.7.0
                      integer-gmp-1.0.2.0 integer-logarithms-1.0.2.1
                      language-javascript-0.6.0.11 lifted-base-0.2.3.12 microlens-0.4.9.1
                      microlens-ghc-0.4.9 microlens-mtl-0.1.11.1
                      microlens-platform-0.3.10 microlens-th-0.4.2.1
                      monad-control-1.0.2.3 mtl-2.2.2 network-uri-2.6.1.0
                      old-locale-1.0.0.7 parallel-3.2.1.1 parsec-3.1.13.0
                      pattern-arrows-0.0.2 pretty-1.1.3.6 primitive-0.6.3.0
                      protolude-0.2.2 random-1.1 safe-0.3.17 scientific-0.3.6.2
                      sourcemap-0.1.6 split-0.2.3.3 stm-2.4.5.0 syb-0.7 tagged-0.8.5
                      tagsoup-0.14.6 template-haskell-2.13.0.0 text-1.2.3.0
                      th-abstraction-0.2.8.0 time-1.8.0.2 time-locale-compat-0.1.1.4
                      transformers-0.5.5.0 transformers-base-0.4.5.2 uniplate-1.6.12
                      unix-2.7.2.2 unordered-containers-0.2.9.0 utf8-string-1.0.1.1
                      uuid-types-1.0.3 vector-0.12.0.1 xss-sanitize-0.3.6
orphans: cheapskate-0.1.1:Cheapskate
         data-default-instances-containers-0.0.1:Data.Default.Instances.Containers
         data-default-instances-dlist-0.0.1:Data.Default.Instances.DList
         data-default-instances-old-locale-0.0.1:Data.Default.Instances.OldLocale
         uniplate-1.6.12:Data.Generics.Uniplate.Data
         syb-0.7:Data.Generics.Instances colour-2.3.4:Data.Colour
         stm-2.4.5.0:Control.Monad.STM
         attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         microlens-platform-0.3.10:Lens.Micro.Platform
         microlens-ghc-0.4.9:Lens.Micro.GHC
         hashable-1.2.7.0:Data.Hashable.Generic
         vector-0.12.0.1:Data.Vector.Unboxed
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.5.0:Control.Monad.Trans.Error
         text-1.2.3.0:Data.Text.Lazy text-1.2.3.0:Data.Text
         binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: aeson-1.3.1.1:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         bower-json-1.0.0.1:Web.Bower.PackageMeta.Internal
                         cheapskate-0.1.1:Cheapskate.Types containers-0.5.11.0:Data.Graph
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         dlist-0.8.0.4:Data.DList ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         microlens-0.4.9.1:Lens.Micro.Internal
                         microlens-ghc-0.4.9:Lens.Micro.GHC
                         microlens-mtl-0.1.11.1:Lens.Micro.Mtl.Internal
                         microlens-platform-0.3.10:Lens.Micro.Platform
                         monad-control-1.0.2.3:Control.Monad.Trans.Control
                         network-uri-2.6.1.0:Network.URI
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Control.Monad.Logger
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.Declarations
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.Operators
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.SourcePos
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Comments
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Docs.RenderedCode.Types
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Docs.Types
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Environment
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Kinds
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Label
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Make.Monad
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Names
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.PSString
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.TypeClassDictionaries
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Types
                         tagged-0.8.5:Data.Tagged
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
                         th-abstraction-0.2.8.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  base-4.11.1.0:Control.Category b839bca5d85319b86c37d29f1613a5a2
import  -/  base-4.11.1.0:Control.Monad c5f960c67d822497578bffbd3e4c01cf
import  -/  base-4.11.1.0:Data.Char 3e89818e2b8ef1a2cc5393163484da72
import  -/  base-4.11.1.0:Data.Either 39d922b371c4c52d426e9ee66de8371a
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.Functor f522c3501272159820fd6f242510732f
import  -/  base-4.11.1.0:Data.Maybe 409c3da2b142470b68be39ce1d97a9f7
import  -/  base-4.11.1.0:Data.String 1b97cff5f9627e73898d75997a9ccf7f
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-4.11.1.0:GHC.Unicode 8234c40b59f035e845832a42e8725a00
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  blaze-html-0.9.1.1:Text.Blaze.Html 987774b84440e0b0caf7ed1c6bbb9e89
import  -/  blaze-html-0.9.1.1:Text.Blaze.Html5 56f4a271c220d3536adfa3fb19fe90bd
import  -/  blaze-html-0.9.1.1:Text.Blaze.Html5.Attributes 99fe12b019c4f76838f500eeebf341e7
import  -/  blaze-markup-0.8.2.1:Text.Blaze ce47656392c1274369c4af48179cbff9
import  -/  blaze-markup-0.8.2.1:Text.Blaze.Internal 1eb704f9e0aaeb62fcb84cf9f0c7c699
import  -/  cheapskate-0.1.1:Cheapskate 39326b7e9ee10d1317ff3e8540d8b78f
import  -/  cheapskate-0.1.1:Cheapskate.Parse 169fdf1dff1a5673c5d0e8a95a4fdd2d
import  -/  cheapskate-0.1.1:Cheapskate.Types 874ccb6e4eda7e5b42438447da90c2fe
import  -/  data-default-class-0.1.2.0:Data.Default.Class a39e689fe2e8c378666d66c458dc0d1f
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  parsec-3.1.13.0:Text.Parsec 963cbe7b4116cef91451434dc005a011
import  -/  parsec-3.1.13.0:Text.Parsec.Combinator 86d872425bd48a2d67c0d1ce1a8ccc8b
import  -/  Language.PureScript 4a24ccd892adbf021daf2410ebd61e22
  exports: 139dcaa90af8ddcee6aa0492159f351d
import  -/  Language.PureScript.AST.Operators 615a873c5f62908f354b9d4840cbeb63
  Fixity 141f87a59136c90c1be577c19942dfd4
  Fixity 228a0ef1b3774b11d1a92fae92fb43a0
  Infix acee26fe4e59790dddcfdcb22d39c630
  Infixl 7a053ccfe48a809d0f2fd5ed84616765
  Infixr bbdac94db5d55a0387eb84cc7a57bedf
import  -/  Language.PureScript.AST.SourcePos 63acacac5b7be73d04e5be0047a9a89a
  SourceSpan 1e0cf2bd3ea18f97a2ff152297f09219
import  -/  Language.PureScript.Docs.Render b831465a701583fd8a564131640eff10
  exports: 86a20a5ede0ce78c161164e977c6da6a
  renderChildDeclaration 8fe1fef69cb298ac03b6db3cd3ee525b
  renderDeclaration 1672b1f5cc640558ad5ff6f56e719d41
import  -/  Language.PureScript.Docs.RenderedCode be3d746558a5dc6cd329381776634da0
  exports: a74931cbe482565a8bfb82d89c3dabe0
import  -/  Language.PureScript.Docs.RenderedCode.Types a63cc6a5cb22a8a549b2d76ebcbc879a
  ContainingModule 5e9b2b25a94f6bc04ac9258fb2be1c52
  FixityAlias 122fdd14b482e92974e48cc6ae5de54a
  Keyword 886ce9d6a4cb292f8115c4f0728e6fed
  KindLevel 31a31a3b9a456afb02c23d41dc52ac02
  Link 3e2c4f040a833b90315cfd94158f0cda
  Namespace e686c6add7c243d229f3b74d733eb7d2
  NoLink 324358fa7989af2555215b2a19dbc247
  RenderedCode b76660a0424da31964a78f3df8712e5d
  Space efd4240233d77313df55a85cd409d255
  Symbol b116f0430e01419d4078175962e452f1
  Syntax fae5a4f045388851de0eb7fd7a6cd279
  TypeLevel b1e0b4527b5ecfc5cddf2c95ff747772
  ValueLevel 574088894488a955ab2db1b5af4f2159
  outputWith a498c2ab6fddedd3074c27f5bd0b57f8
import  -/  Language.PureScript.Docs.Types 8ff7c3b28d1548ecbdf2d5a573cc163d
  exports: b81c2b0b69c0f139e99069fb9794db69
  AliasDeclaration 8ab2a92c39fb1d37d3db5fc6eb69e1a6
  BuiltinModule 4f000bcc678070b4d6d3167900913073
  ChildDataConstructor c02b1d1ac3554b78545d34f14e7b7513
  ChildDeclaration cce819b6566f028d040fc57bb265fd8d
  ChildInstance 7016ebc136f1dd745b6b2d7bd27a686f
  ChildTypeClassMember c99514ef45785e97caa8f678f2893be0
  Declaration 8d78dc6577f19e7ef0eb35e8f2e37d74
  Declaration cce819b6566f028d040fc57bb265fd8d
  DepsModule c66dca9d0d124f92caf3395a4c0acb8e
  DocLink b02bbb7ad2fbf910acac7da1dbc6d7c9
  DocLink 8b305838d47692238020364c584ab76f
  InPackage 14acea96459ae0ba0727319f74cb7f69
  Local 559d6dc06930c426b5f0966492a5f5cd
  LocalModule 282bd4ab96fc63928491019891af4705
  Module ce06b0db4015f02195d03f184e88eb90
  Module cce819b6566f028d040fc57bb265fd8d
  Package 86804c3b253f5cbc387d036d60ca82f5
  Package fa1efe58f4e6215e05effe0c7820d641
  cdeclComments cce819b6566f028d040fc57bb265fd8d
  cdeclInfo cce819b6566f028d040fc57bb265fd8d
  cdeclTitle cce819b6566f028d040fc57bb265fd8d
  childDeclInfoNamespace c7cbf9c2ef2a4a2f9609cc6118ceadcc
  declChildren cce819b6566f028d040fc57bb265fd8d
  declComments cce819b6566f028d040fc57bb265fd8d
  declInfo cce819b6566f028d040fc57bb265fd8d
  declInfoNamespace bd7b1be10beee98ca18ab392b257670f
  declSourceSpan cce819b6566f028d040fc57bb265fd8d
  declTitle cce819b6566f028d040fc57bb265fd8d
  linkLocation 8b305838d47692238020364c584ab76f
  linkNamespace 8b305838d47692238020364c584ab76f
  linkTitle 8b305838d47692238020364c584ab76f
  modComments cce819b6566f028d040fc57bb265fd8d
  modDeclarations cce819b6566f028d040fc57bb265fd8d
  modName cce819b6566f028d040fc57bb265fd8d
  modReExports cce819b6566f028d040fc57bb265fd8d
  pkgCompilerVersion fa1efe58f4e6215e05effe0c7820d641
  pkgGithub fa1efe58f4e6215e05effe0c7820d641
  pkgMeta fa1efe58f4e6215e05effe0c7820d641
  pkgModuleMap fa1efe58f4e6215e05effe0c7820d641
  pkgModules fa1efe58f4e6215e05effe0c7820d641
  pkgResolvedDependencies fa1efe58f4e6215e05effe0c7820d641
  pkgTagTime fa1efe58f4e6215e05effe0c7820d641
  pkgUploader fa1efe58f4e6215e05effe0c7820d641
  pkgVersion fa1efe58f4e6215e05effe0c7820d641
  pkgVersionTag fa1efe58f4e6215e05effe0c7820d641
import  -/  Language.PureScript.Names 00f694509122478d97b327fbbccae327
  ModuleName 1b2ddf0c04464d2fa2588925f10c1966
  runIdent f4727e6f001b3b7d933fd4e8122af572
  runModuleName 58b788b37f600c0f34fa85241d7748ad
  runProperName a7268334e0b909381550b9329cb80fcc
  showQualified 5ab4b15825b0e65e211bc57f19d57784
import  -/  Language.PureScript.Parser.Common d20a7af8a890a4e56d3068b2fdbe8def
  runTokenParser 9dae932fdac5969d57d0bce79e0d461b
import  -/  Language.PureScript.Parser.Lexer ea857194274ee8b3812ad62bbb2c9ed1
  TokenParser 6e8d7b68c7546ba407a16e8526c7556f
  lex 2288b6151bebf7b01b4d73039b433c5f
  symbol 99f9bd1c3cc328461c9c3f0e625dbd70
import  -/  text-1.2.3.0:Data.Text 7daa7e6c9b39d8cc1679e5ec5c64d2be
import  -/  text-1.2.3.0:Data.Text.Internal 30a0a123f71f63b26cd34c6b24f23411
ef630bea7d0090fa115c4e9bac57c3ee
  $fFunctorHtmlOutput ::
    GHC.Base.Functor Language.PureScript.Docs.AsHtml.HtmlOutput
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Docs.AsHtml.HtmlOutput
                  Language.PureScript.Docs.AsHtml.$fFunctorHtmlOutput_$cfmap
                  Language.PureScript.Docs.AsHtml.$fFunctorHtmlOutput_$c<$ -}
9b385823ae061c1015a5e753b40fb1e8
  $fFunctorHtmlOutputModule ::
    GHC.Base.Functor Language.PureScript.Docs.AsHtml.HtmlOutputModule
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Docs.AsHtml.HtmlOutputModule
                  Language.PureScript.Docs.AsHtml.$fFunctorHtmlOutput_$cfmap1
                  Language.PureScript.Docs.AsHtml.$fFunctorHtmlOutput_$c<$1 -}
ef630bea7d0090fa115c4e9bac57c3ee
  $fFunctorHtmlOutput_$c<$ ::
    a
    -> Language.PureScript.Docs.AsHtml.HtmlOutput b
    -> Language.PureScript.Docs.AsHtml.HtmlOutput a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U(1*U,1*U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   (w :: a)
                   (w1 :: Language.PureScript.Docs.AsHtml.HtmlOutput b) ->
                 case w1 of ww { Language.PureScript.Docs.AsHtml.HtmlOutput ww1 ww2 ->
                 case Language.PureScript.Docs.AsHtml.$w$c<$
                        @ a
                        @ b
                        w
                        ww1
                        ww2 of ww3 { (#,#) ww4 ww5 ->
                 Language.PureScript.Docs.AsHtml.HtmlOutput @ a ww4 ww5 } }) -}
9b385823ae061c1015a5e753b40fb1e8
  $fFunctorHtmlOutput_$c<$1 ::
    a
    -> Language.PureScript.Docs.AsHtml.HtmlOutputModule b
    -> Language.PureScript.Docs.AsHtml.HtmlOutputModule a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U(A,1*U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   (z :: a)
                   (ds :: Language.PureScript.Docs.AsHtml.HtmlOutputModule b) ->
                 case ds of wild { Language.PureScript.Docs.AsHtml.HtmlOutputModule a1 a2 ->
                 Language.PureScript.Docs.AsHtml.HtmlOutputModule
                   @ a
                   z
                   (GHC.Base.build
                      @ (Language.PureScript.Docs.Types.InPackage
                           Language.PureScript.Names.ModuleName,
                         a)
                      (\ @ b1
                         (c :: (Language.PureScript.Docs.Types.InPackage
                                  Language.PureScript.Names.ModuleName,
                                a)
                               -> b1 -> b1)[OneShot]
                         (n :: b1)[OneShot] ->
                       GHC.Base.foldr
                         @ (Language.PureScript.Docs.Types.InPackage
                              Language.PureScript.Names.ModuleName,
                            b)
                         @ b1
                         (GHC.Base.mapFB
                            @ (Language.PureScript.Docs.Types.InPackage
                                 Language.PureScript.Names.ModuleName,
                               a)
                            @ b1
                            @ (Language.PureScript.Docs.Types.InPackage
                                 Language.PureScript.Names.ModuleName,
                               b)
                            c
                            (\ (b4 :: (Language.PureScript.Docs.Types.InPackage
                                         Language.PureScript.Names.ModuleName,
                                       b)) ->
                             case b4 of wild1 { (,) a4 a5 -> (a4, z) }))
                         n
                         a2)) }) -}
ef630bea7d0090fa115c4e9bac57c3ee
  $fFunctorHtmlOutput_$cfmap ::
    (a -> b)
    -> Language.PureScript.Docs.AsHtml.HtmlOutput a
    -> Language.PureScript.Docs.AsHtml.HtmlOutput b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U(1*U,1*U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   (w :: a -> b)
                   (w1 :: Language.PureScript.Docs.AsHtml.HtmlOutput a) ->
                 case w1 of ww { Language.PureScript.Docs.AsHtml.HtmlOutput ww1 ww2 ->
                 case Language.PureScript.Docs.AsHtml.$w$cfmap
                        @ a
                        @ b
                        w
                        ww1
                        ww2 of ww3 { (#,#) ww4 ww5 ->
                 Language.PureScript.Docs.AsHtml.HtmlOutput @ b ww4 ww5 } }) -}
9b385823ae061c1015a5e753b40fb1e8
  $fFunctorHtmlOutput_$cfmap1 ::
    (a -> b)
    -> Language.PureScript.Docs.AsHtml.HtmlOutputModule a
    -> Language.PureScript.Docs.AsHtml.HtmlOutputModule b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U(U,1*U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   (w :: a -> b)
                   (w1 :: Language.PureScript.Docs.AsHtml.HtmlOutputModule a) ->
                 case w1 of ww { Language.PureScript.Docs.AsHtml.HtmlOutputModule ww1 ww2 ->
                 Language.PureScript.Docs.AsHtml.HtmlOutputModule
                   @ b
                   (w ww1)
                   (GHC.Base.map
                      @ (Language.PureScript.Docs.Types.InPackage
                           Language.PureScript.Names.ModuleName,
                         a)
                      @ (Language.PureScript.Docs.Types.InPackage
                           Language.PureScript.Names.ModuleName,
                         b)
                      (\ (b2 :: (Language.PureScript.Docs.Types.InPackage
                                   Language.PureScript.Names.ModuleName,
                                 a)) ->
                       case b2 of wild { (,) a1 a2 -> (a1, w a2) })
                      ww2) }) -}
ef630bea7d0090fa115c4e9bac57c3ee
  $fShowHtmlOutput ::
    GHC.Show.Show a =>
    GHC.Show.Show (Language.PureScript.Docs.AsHtml.HtmlOutput a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Show.Show a).
                  @ (Language.PureScript.Docs.AsHtml.HtmlOutput a)
                  (Language.PureScript.Docs.AsHtml.$fShowHtmlOutput_$cshowsPrec
                     @ a
                     v)
                  (Language.PureScript.Docs.AsHtml.$fShowHtmlOutput_$cshow @ a v)
                  (Language.PureScript.Docs.AsHtml.$fShowHtmlOutput_$cshowList
                     @ a
                     v) -}
36ff7c65b484dafd51fffd8779b42001
  $fShowHtmlOutput1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
9b385823ae061c1015a5e753b40fb1e8
  $fShowHtmlOutputModule ::
    GHC.Show.Show a =>
    GHC.Show.Show (Language.PureScript.Docs.AsHtml.HtmlOutputModule a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Show.Show a).
                  @ (Language.PureScript.Docs.AsHtml.HtmlOutputModule a)
                  (Language.PureScript.Docs.AsHtml.$fShowHtmlOutputModule_$cshowsPrec
                     @ a
                     v)
                  (Language.PureScript.Docs.AsHtml.$fShowHtmlOutputModule_$cshow
                     @ a
                     v)
                  (Language.PureScript.Docs.AsHtml.$fShowHtmlOutputModule_$cshowList
                     @ a
                     v) -}
9b385823ae061c1015a5e753b40fb1e8
  $fShowHtmlOutputModule_$cshow ::
    GHC.Show.Show a =>
    Language.PureScript.Docs.AsHtml.HtmlOutputModule a
    -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U(C(C1(C(U))),A,A)><S,1*U(U,U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (x :: Language.PureScript.Docs.AsHtml.HtmlOutputModule a) ->
                 Language.PureScript.Docs.AsHtml.$fShowHtmlOutputModule_$cshowsPrec
                   @ a
                   $dShow
                   Language.PureScript.Docs.AsHtml.$fShowHtmlOutput1
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
9b385823ae061c1015a5e753b40fb1e8
  $fShowHtmlOutputModule_$cshowList ::
    GHC.Show.Show a =>
    [Language.PureScript.Docs.AsHtml.HtmlOutputModule a]
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (ls :: [Language.PureScript.Docs.AsHtml.HtmlOutputModule a])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Language.PureScript.Docs.AsHtml.HtmlOutputModule a)
                   (Language.PureScript.Docs.AsHtml.$fShowHtmlOutputModule_$cshowsPrec
                      @ a
                      $dShow
                      Language.PureScript.Docs.AsHtml.$fShowHtmlOutput1)
                   ls
                   s) -}
9b385823ae061c1015a5e753b40fb1e8
  $fShowHtmlOutputModule_$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Types.Int
    -> Language.PureScript.Docs.AsHtml.HtmlOutputModule a
    -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,U(C(C1(C(U))),A,A)><S(S),1*U(U)><S,1*U(U,U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: GHC.Show.Show a)
                   (w1 :: GHC.Types.Int)
                   (w2 :: Language.PureScript.Docs.AsHtml.HtmlOutputModule a) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Language.PureScript.Docs.AsHtml.HtmlOutputModule ww3 ww4 ->
                 Language.PureScript.Docs.AsHtml.$w$cshowsPrec1
                   @ a
                   w
                   ww1
                   ww3
                   ww4 } }) -}
ef630bea7d0090fa115c4e9bac57c3ee
  $fShowHtmlOutput_$cshow ::
    GHC.Show.Show a =>
    Language.PureScript.Docs.AsHtml.HtmlOutput a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U(C(C1(C(U))),A,A)><S,1*U(1*U,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (x :: Language.PureScript.Docs.AsHtml.HtmlOutput a) ->
                 Language.PureScript.Docs.AsHtml.$fShowHtmlOutput_$cshowsPrec
                   @ a
                   $dShow
                   Language.PureScript.Docs.AsHtml.$fShowHtmlOutput1
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
ef630bea7d0090fa115c4e9bac57c3ee
  $fShowHtmlOutput_$cshowList ::
    GHC.Show.Show a =>
    [Language.PureScript.Docs.AsHtml.HtmlOutput a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (ls :: [Language.PureScript.Docs.AsHtml.HtmlOutput a])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Language.PureScript.Docs.AsHtml.HtmlOutput a)
                   (Language.PureScript.Docs.AsHtml.$fShowHtmlOutput_$cshowsPrec
                      @ a
                      $dShow
                      Language.PureScript.Docs.AsHtml.$fShowHtmlOutput1)
                   ls
                   s) -}
ef630bea7d0090fa115c4e9bac57c3ee
  $fShowHtmlOutput_$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Types.Int
    -> Language.PureScript.Docs.AsHtml.HtmlOutput a -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,U(C(C1(C(U))),A,A)><S(S),1*U(U)><S,1*U(1*U,1*U)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   (w :: GHC.Show.Show a)
                   (w1 :: GHC.Types.Int)
                   (w2 :: Language.PureScript.Docs.AsHtml.HtmlOutput a)
                   (w3 :: GHC.Base.String) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Language.PureScript.Docs.AsHtml.HtmlOutput ww3 ww4 ->
                 Language.PureScript.Docs.AsHtml.$w$cshowsPrec
                   @ a
                   w
                   ww1
                   ww3
                   ww4
                   w3 } }) -}
4017ef7508d905bd480afc7c76c284a8
  $s$fBiplateab_$cbiplate_$s$fDataSeq ::
    Data.Data.Data (Data.Sequence.Internal.Seq Cheapskate.Types.Inline)
  {- Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Sequence.Internal.Seq Cheapskate.Types.Inline)
                  (Data.Typeable.Internal.mkTrApp
                     @ *
                     @ *
                     @ Data.Sequence.Internal.Seq
                     @ Cheapskate.Types.Inline
                     Data.Sequence.Internal.$fDataSeq6
                     Cheapskate.Types.$fDataInline3)
                    `cast`
                  (Sym (Data.Typeable.Internal.N:Typeable[0]) <*>_N <Data.Sequence.Internal.Seq
                                                                       Cheapskate.Types.Inline>_N)
                  (Data.Sequence.Internal.$fDataSeq_$cgfoldl
                     @ Cheapskate.Types.Inline
                     Cheapskate.Types.$fDataInline)
                  (Data.Sequence.Internal.$fDataSeq_$cgunfold
                     @ Cheapskate.Types.Inline
                     Cheapskate.Types.$fDataInline)
                  (\ (xs :: Data.Sequence.Internal.Seq Cheapskate.Types.Inline) ->
                   case xs
                          `cast`
                        (Data.Sequence.Internal.N:Seq[0]
                             <Cheapskate.Types.Inline>_R) of wild {
                     DEFAULT -> Data.Sequence.Internal.consConstr
                     Data.Sequence.Internal.EmptyT
                     -> Data.Sequence.Internal.emptyConstr })
                  (\ (ds :: Data.Sequence.Internal.Seq Cheapskate.Types.Inline) ->
                   Data.Sequence.Internal.seqDataType)
                  (Data.Sequence.Internal.$fDataSeq_$cdataCast1
                     @ Cheapskate.Types.Inline
                     Cheapskate.Types.$fDataInline)
                  (\ @ t :: * -> * -> *
                     @ c :: * -> *
                     ($dTypeable :: Data.Typeable.Internal.Typeable t)
                     (ds :: forall d e.
                            (Data.Data.Data d, Data.Data.Data e) =>
                            c (t d e)) ->
                   GHC.Base.Nothing
                     @ (c (Data.Sequence.Internal.Seq Cheapskate.Types.Inline)))
                  (Data.Sequence.Internal.$fDataSeq1
                     @ Cheapskate.Types.Inline
                     Cheapskate.Types.$fDataInline)
                    `cast`
                  (<forall b. Data.Data.Data b => b -> b>_R
                   ->_R <Data.Sequence.Internal.Seq Cheapskate.Types.Inline>_R
                   ->_R Data.Functor.Identity.N:Identity[0]
                            <Data.Sequence.Internal.Seq Cheapskate.Types.Inline>_R)
                  (Data.Sequence.Internal.$fDataSeq_$cgmapQl
                     @ Cheapskate.Types.Inline
                     Cheapskate.Types.$fDataInline)
                  (Data.Sequence.Internal.$fDataSeq_$cgmapQr
                     @ Cheapskate.Types.Inline
                     Cheapskate.Types.$fDataInline)
                  (Data.Sequence.Internal.$fDataSeq_$cgmapQ
                     @ Cheapskate.Types.Inline
                     Cheapskate.Types.$fDataInline)
                  (Data.Sequence.Internal.$fDataSeq_$cgmapQi
                     @ Cheapskate.Types.Inline
                     Cheapskate.Types.$fDataInline)
                  (Data.Sequence.Internal.$fDataSeq_$cgmapM
                     @ Cheapskate.Types.Inline
                     Cheapskate.Types.$fDataInline)
                  (Data.Sequence.Internal.$fDataSeq_$cgmapMp
                     @ Cheapskate.Types.Inline
                     Cheapskate.Types.$fDataInline)
                  (Data.Sequence.Internal.$fDataSeq_$cgmapMo
                     @ Cheapskate.Types.Inline
                     Cheapskate.Types.$fDataInline) -}
f68dc32eadea8bb7aeb3faf390609564
  $s$fDataSeq5 ::
    Data.Typeable.Internal.TypeRep
      (Data.Sequence.Internal.Seq Cheapskate.Types.Inline)
  {- Unfolding: InlineRule (0, True, False)
                (Data.Typeable.Internal.mkTrApp
                   @ *
                   @ *
                   @ Data.Sequence.Internal.Seq
                   @ Cheapskate.Types.Inline
                   Data.Sequence.Internal.$fDataSeq6
                   Cheapskate.Types.$fDataInline3) -}
766edfd3bc588c71eec6e8bdba328e0b
  $s$fStream[]mtok ::
    Text.Parsec.Prim.Stream [tok] Data.Functor.Identity.Identity tok
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ tok.
                  @ [tok]
                  @ Data.Functor.Identity.Identity
                  @ tok
                  Data.Functor.Identity.$fMonadIdentity
                  (Language.PureScript.Docs.AsHtml.$s$fStream[]mtok_$s$fStream[]mtok_$cuncons
                     @ tok) -}
33669f292477ab036079fe61a832fe80
  $s$fStream[]mtok_$s$fStream[]mtok_$cuncons ::
    [tok]
    -> Data.Functor.Identity.Identity (GHC.Base.Maybe (tok, [tok]))
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ tok (ds :: [tok]) ->
                 case ds of wild {
                   []
                   -> (GHC.Base.Nothing @ (tok, [tok]))
                        `cast`
                      (Sym (Data.Functor.Identity.N:Identity[0]
                                <GHC.Base.Maybe (tok, [tok])>_R))
                   : t ts
                   -> (GHC.Base.Just @ (tok, [tok]) (t, ts))
                        `cast`
                      (Sym (Data.Functor.Identity.N:Identity[0]
                                <GHC.Base.Maybe (tok, [tok])>_R)) }) -}
4423688d0ab84aca3b91db934417065f
  $tc'HtmlOutput :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17480660235796466049##
                   17415266736331376560##
                   Language.PureScript.Docs.AsHtml.$trModule
                   Language.PureScript.Docs.AsHtml.$tc'HtmlOutput2
                   1#
                   Language.PureScript.Docs.AsHtml.$tc'HtmlOutput1) -}
aa0999f8786c5a5339d94fabbf95f4ae
  $tc'HtmlOutput1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
90b74027deaac55b1559258b79b43f88
  $tc'HtmlOutput2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Docs.AsHtml.$tc'HtmlOutput3) -}
09591c8a77578dedb5a050f0607898ab
  $tc'HtmlOutput3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'HtmlOutput"#) -}
5542198aeb46a4d36c38b2bfff140db2
  $tc'HtmlOutputModule :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16864697304014563662##
                   18108305716877076057##
                   Language.PureScript.Docs.AsHtml.$trModule
                   Language.PureScript.Docs.AsHtml.$tc'HtmlOutputModule2
                   1#
                   Language.PureScript.Docs.AsHtml.$tc'HtmlOutputModule1) -}
b3329ed0269d6e66814f6a3d20b684da
  $tc'HtmlOutputModule1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
33d0f28e09120b3a282e3f84d8753dd2
  $tc'HtmlOutputModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Docs.AsHtml.$tc'HtmlOutputModule3) -}
3eba8714bfbc8dcf21a53379b0887625
  $tc'HtmlOutputModule3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'HtmlOutputModule"#) -}
018cc09ba702eab5d277ad27519af91e
  $tc'HtmlRenderContext :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4726055682535656222##
                   5272479059337704392##
                   Language.PureScript.Docs.AsHtml.$trModule
                   Language.PureScript.Docs.AsHtml.$tc'HtmlRenderContext2
                   0#
                   Language.PureScript.Docs.AsHtml.$tc'HtmlRenderContext1) -}
225fbf59918ce25d547a016d339dd0d4
  $tc'HtmlRenderContext1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
7876e6fa8056a2238fdc4674d437a287
  $tc'HtmlRenderContext2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Docs.AsHtml.$tc'HtmlRenderContext3) -}
d6df7209b99591b49a4a0d247e8d5b36
  $tc'HtmlRenderContext3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'HtmlRenderContext"#) -}
a33b6ed9a046716fc3f4484773fd39cc
  $tcHtmlOutput :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4360093413272698852##
                   3249760940878755047##
                   Language.PureScript.Docs.AsHtml.$trModule
                   Language.PureScript.Docs.AsHtml.$tcHtmlOutput1
                   0#
                   GHC.Types.krep$*Arr*) -}
1b4e9bf248df344854973d40558a9872
  $tcHtmlOutput1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Docs.AsHtml.$tcHtmlOutput2) -}
df391e007efe5a53d737e4eff4674605
  $tcHtmlOutput2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("HtmlOutput"#) -}
2d41471ae859be36606c7d2f3902ba12
  $tcHtmlOutputModule :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1042334896882861093##
                   3134294949419381597##
                   Language.PureScript.Docs.AsHtml.$trModule
                   Language.PureScript.Docs.AsHtml.$tcHtmlOutputModule1
                   0#
                   GHC.Types.krep$*Arr*) -}
24e73616414513d6a6258a4527811d5a
  $tcHtmlOutputModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Docs.AsHtml.$tcHtmlOutputModule2) -}
9101923a10a9050df73a0dd38bf0e109
  $tcHtmlOutputModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("HtmlOutputModule"#) -}
657420faad8f338203fdd3312649983e
  $tcHtmlRenderContext :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17710720667765742784##
                   4503324163377741880##
                   Language.PureScript.Docs.AsHtml.$trModule
                   Language.PureScript.Docs.AsHtml.$tcHtmlRenderContext1
                   0#
                   GHC.Types.krep$*) -}
1ef899a50f92cfae939caf2383419d97
  $tcHtmlRenderContext1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Docs.AsHtml.$tcHtmlRenderContext2) -}
58bb6f879d2364b4b6555ffda80b2cf0
  $tcHtmlRenderContext2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("HtmlRenderContext"#) -}
a38274a82725cf3d0cbaa1c0002bc05f
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Language.PureScript.Docs.AsHtml.$trModule3
                   Language.PureScript.Docs.AsHtml.$trModule1) -}
4c1031c9b2af914259860fa51a35beb0
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Docs.AsHtml.$trModule2) -}
115d464af7f1c3eced38d8cc74303074
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Language.PureScript.Docs.AsHtml"#) -}
a2ed67c86096e1aca0e12a5544f358df
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Docs.AsHtml.$trModule4) -}
a952d46f5cc70b865b5d28dd4f4da44a
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"#) -}
0b749ce11f1fa91923bd6fa929b75184
  $w$c<$ ::
    a
    -> [(GHC.Base.Maybe GHC.Types.Char, b)]
    -> [(Language.PureScript.Names.ModuleName,
         Language.PureScript.Docs.AsHtml.HtmlOutputModule b)]
    -> (# [(GHC.Base.Maybe GHC.Types.Char, a)],
          [(Language.PureScript.Names.ModuleName,
            Language.PureScript.Docs.AsHtml.HtmlOutputModule a)] #)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   (w :: a)
                   (ww :: [(GHC.Base.Maybe GHC.Types.Char, b)])
                   (ww1 :: [(Language.PureScript.Names.ModuleName,
                             Language.PureScript.Docs.AsHtml.HtmlOutputModule b)]) ->
                 (# GHC.Base.map
                      @ (GHC.Base.Maybe GHC.Types.Char, b)
                      @ (GHC.Base.Maybe GHC.Types.Char, a)
                      (\ (b3 :: (GHC.Base.Maybe GHC.Types.Char, b)) ->
                       case b3 of wild { (,) a1 a2 -> (a1, w) })
                      ww,
                    GHC.Base.map
                      @ (Language.PureScript.Names.ModuleName,
                         Language.PureScript.Docs.AsHtml.HtmlOutputModule b)
                      @ (Language.PureScript.Names.ModuleName,
                         Language.PureScript.Docs.AsHtml.HtmlOutputModule a)
                      (\ (b6 :: (Language.PureScript.Names.ModuleName,
                                 Language.PureScript.Docs.AsHtml.HtmlOutputModule b)) ->
                       case b6 of wild { (,) a1 a2 ->
                       (a1,
                        Language.PureScript.Docs.AsHtml.$fFunctorHtmlOutput_$c<$1
                          @ a
                          @ b
                          w
                          a2) })
                      ww1 #)) -}
0acfcedd718ab8c634b71dc69332b12e
  $w$cfmap ::
    (a -> b)
    -> [(GHC.Base.Maybe GHC.Types.Char, a)]
    -> [(Language.PureScript.Names.ModuleName,
         Language.PureScript.Docs.AsHtml.HtmlOutputModule a)]
    -> (# [(GHC.Base.Maybe GHC.Types.Char, b)],
          [(Language.PureScript.Names.ModuleName,
            Language.PureScript.Docs.AsHtml.HtmlOutputModule b)] #)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,C(U)><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ @ a
                   @ b
                   (w :: a -> b)
                   (ww :: [(GHC.Base.Maybe GHC.Types.Char, a)])
                   (ww1 :: [(Language.PureScript.Names.ModuleName,
                             Language.PureScript.Docs.AsHtml.HtmlOutputModule a)]) ->
                 (# GHC.Base.map
                      @ (GHC.Base.Maybe GHC.Types.Char, a)
                      @ (GHC.Base.Maybe GHC.Types.Char, b)
                      (\ (b2 :: (GHC.Base.Maybe GHC.Types.Char, a)) ->
                       case b2 of wild { (,) a1 a2 -> (a1, w a2) })
                      ww,
                    GHC.Base.map
                      @ (Language.PureScript.Names.ModuleName,
                         Language.PureScript.Docs.AsHtml.HtmlOutputModule a)
                      @ (Language.PureScript.Names.ModuleName,
                         Language.PureScript.Docs.AsHtml.HtmlOutputModule b)
                      (\ (b4 :: (Language.PureScript.Names.ModuleName,
                                 Language.PureScript.Docs.AsHtml.HtmlOutputModule a)) ->
                       case b4 of wild { (,) a1 a2 ->
                       (a1,
                        Language.PureScript.Docs.AsHtml.$fFunctorHtmlOutput_$cfmap1
                          @ a
                          @ b
                          w
                          a2) })
                      ww1 #)) -}
dbc5679bdeb7e577f6b963cc42338038
  $w$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Prim.Int#
    -> [(GHC.Base.Maybe GHC.Types.Char, a)]
    -> [(Language.PureScript.Names.ModuleName,
         Language.PureScript.Docs.AsHtml.HtmlOutputModule a)]
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 5,
     Strictness: <L,U(C(C1(C(U))),A,A)><S,U><L,1*U><L,1*U><L,U>,
     Inline: [0] -}
0940bd25a92a78920dd8be158b123cb8
  $w$cshowsPrec1 ::
    GHC.Show.Show a =>
    GHC.Prim.Int#
    -> a
    -> [(Language.PureScript.Docs.Types.InPackage
           Language.PureScript.Names.ModuleName,
         a)]
    -> GHC.Show.ShowS
  {- Arity: 4, Strictness: <L,U(C(C1(C(U))),A,A)><S,U><L,U><L,U>,
     Inline: [0] -}
9f114c96690ed04d54728c24e298c294
  $wdeclAsHtml ::
    Language.PureScript.Docs.AsHtml.HtmlRenderContext
    -> Data.Text.Internal.Text
    -> GHC.Base.Maybe Data.Text.Internal.Text
    -> GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan
    -> [Language.PureScript.Docs.Types.ChildDeclaration]
    -> Language.PureScript.Docs.Types.DeclarationInfo
    -> (# Text.Blaze.Internal.StaticString,
          Text.Blaze.Internal.StaticString, Text.Blaze.Internal.ChoiceString,
          Text.Blaze.Internal.MarkupM () #)
  {- Arity: 6,
     Strictness: <L,U(C(C1(C1(U))),C(U(U,U,1*U)),1*C1(U))><L,U(U,U,U)><L,1*U><L,1*U><L,U><L,U>,
     Inline: [0] -}
c450839eaaff9248dad660456c78dc7e
  $wmakeFragment ::
    Language.PureScript.Docs.RenderedCode.Types.Namespace
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Text.Internal.Text
  {- Arity: 4, Strictness: <S,1*U><L,U><S,U><S,U>, Inline: [0] -}
792bcb3e8789a2fa30e612ac0469fc7a
  $wmoduleAsHtml ::
    (Language.PureScript.Docs.Types.InPackage
       Language.PureScript.Names.ModuleName
     -> GHC.Base.Maybe
          Language.PureScript.Docs.AsHtml.HtmlRenderContext)
    -> Language.PureScript.Names.ModuleName
    -> GHC.Base.Maybe Data.Text.Internal.Text
    -> [Language.PureScript.Docs.Types.Declaration]
    -> [(Language.PureScript.Docs.Types.InPackage
           Language.PureScript.Names.ModuleName,
         [Language.PureScript.Docs.Types.Declaration])]
    -> (# Language.PureScript.Names.ModuleName,
          Language.PureScript.Docs.AsHtml.HtmlOutputModule
            Text.Blaze.Html.Html #)
  {- Arity: 5, Strictness: <L,C(U)><L,U><L,1*U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (w :: Language.PureScript.Docs.Types.InPackage
                           Language.PureScript.Names.ModuleName
                         -> GHC.Base.Maybe
                              Language.PureScript.Docs.AsHtml.HtmlRenderContext)
                   (ww :: Language.PureScript.Names.ModuleName)
                   (ww1 :: GHC.Base.Maybe Data.Text.Internal.Text)
                   (ww2 :: [Language.PureScript.Docs.Types.Declaration])
                   (ww3 :: [(Language.PureScript.Docs.Types.InPackage
                               Language.PureScript.Names.ModuleName,
                             [Language.PureScript.Docs.Types.Declaration])]) ->
                 (# ww,
                    Language.PureScript.Docs.AsHtml.HtmlOutputModule
                      @ (Text.Blaze.Internal.MarkupM ())
                      (Text.Blaze.Internal.Append
                         @ ()
                         @ ()
                         (case ww1 of wild {
                            GHC.Base.Nothing -> Language.PureScript.Docs.AsHtml.moduleAsHtml1
                            GHC.Base.Just x
                            -> Text.Blaze.Internal.Append
                                 @ ()
                                 @ ()
                                 (Language.PureScript.Docs.AsHtml.renderMarkdown x)
                                 Language.PureScript.Docs.AsHtml.moduleAsHtml1 })
                         (let {
                            f2 :: Language.PureScript.Docs.AsHtml.HtmlRenderContext
                            = case w (Language.PureScript.Docs.Types.Local
                                        @ Language.PureScript.Names.ModuleName
                                        ww) of wild {
                                GHC.Base.Nothing
                                -> Language.PureScript.Docs.AsHtml.nullRenderContext
                                GHC.Base.Just v -> v }
                          } in
                          letrec {
                            go :: [Language.PureScript.Docs.Types.Declaration]
                                  -> Text.Blaze.Internal.MarkupM ()
                              {- Arity: 1, Strictness: <S,1*U> -}
                            = \ (ds :: [Language.PureScript.Docs.Types.Declaration]) ->
                              case ds of wild {
                                [] -> Language.PureScript.Docs.AsHtml.moduleAsHtml1
                                : y ys
                                -> Text.Blaze.Internal.Append
                                     @ ()
                                     @ ()
                                     (Language.PureScript.Docs.AsHtml.declAsHtml f2 y)
                                     (go ys) }
                          } in
                          go ww2))
                      (GHC.Base.map
                         @ (Language.PureScript.Docs.Types.InPackage
                              Language.PureScript.Names.ModuleName,
                            [Language.PureScript.Docs.Types.Declaration])
                         @ (Language.PureScript.Docs.Types.InPackage
                              Language.PureScript.Names.ModuleName,
                            Text.Blaze.Html.Html)
                         (\ (ds :: (Language.PureScript.Docs.Types.InPackage
                                      Language.PureScript.Names.ModuleName,
                                    [Language.PureScript.Docs.Types.Declaration])) ->
                          case ds of wild { (,) pkg decls ->
                          (pkg,
                           let {
                             f2 :: Language.PureScript.Docs.AsHtml.HtmlRenderContext
                             = case w pkg of wild1 {
                                 GHC.Base.Nothing
                                 -> Language.PureScript.Docs.AsHtml.nullRenderContext
                                 GHC.Base.Just v -> v }
                           } in
                           letrec {
                             go :: [Language.PureScript.Docs.Types.Declaration]
                                   -> Text.Blaze.Html.Html
                               {- Arity: 1, Strictness: <S,1*U> -}
                             = \ (ds1 :: [Language.PureScript.Docs.Types.Declaration]) ->
                               case ds1 of wild1 {
                                 [] -> Language.PureScript.Docs.AsHtml.moduleAsHtml1
                                 : y ys
                                 -> Text.Blaze.Internal.Append
                                      @ ()
                                      @ ()
                                      (Language.PureScript.Docs.AsHtml.declAsHtml f2 y)
                                      (go ys) }
                           } in
                           go decls) })
                         ww3) #)) -}
ef630bea7d0090fa115c4e9bac57c3ee
  data HtmlOutput a
    = HtmlOutput {htmlIndex :: [(GHC.Base.Maybe GHC.Types.Char, a)],
                  htmlModules :: [(Language.PureScript.Names.ModuleName,
                                   Language.PureScript.Docs.AsHtml.HtmlOutputModule a)]}
9b385823ae061c1015a5e753b40fb1e8
  data HtmlOutputModule a
    = HtmlOutputModule {htmlOutputModuleLocals :: a,
                        htmlOutputModuleReExports :: [(Language.PureScript.Docs.Types.InPackage
                                                         Language.PureScript.Names.ModuleName,
                                                       a)]}
8dc413aa5e0dd4a60204781df28132ae
  data HtmlRenderContext
    = HtmlRenderContext {buildDocLink :: Language.PureScript.Docs.RenderedCode.Types.Namespace
                                         -> Data.Text.Internal.Text
                                         -> Language.PureScript.Docs.RenderedCode.Types.ContainingModule
                                         -> GHC.Base.Maybe Language.PureScript.Docs.Types.DocLink,
                         renderDocLink :: Language.PureScript.Docs.Types.DocLink
                                          -> Data.Text.Internal.Text,
                         renderSourceLink :: Language.PureScript.AST.SourcePos.SourceSpan
                                             -> GHC.Base.Maybe Data.Text.Internal.Text}
8dc413aa5e0dd4a60204781df28132ae
  buildDocLink ::
    Language.PureScript.Docs.AsHtml.HtmlRenderContext
    -> Language.PureScript.Docs.RenderedCode.Types.Namespace
    -> Data.Text.Internal.Text
    -> Language.PureScript.Docs.RenderedCode.Types.ContainingModule
    -> GHC.Base.Maybe Language.PureScript.Docs.Types.DocLink
  RecSel Left Language.PureScript.Docs.AsHtml.HtmlRenderContext
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Docs.AsHtml.HtmlRenderContext) ->
                 case ds of wild { Language.PureScript.Docs.AsHtml.HtmlRenderContext ds1 ds2 ds3 ->
                 ds1 }) -}
cb7a77928d6730922dfa892de2dbcf73
  declAsHtml ::
    Language.PureScript.Docs.AsHtml.HtmlRenderContext
    -> Language.PureScript.Docs.Types.Declaration
    -> Text.Blaze.Html.Html
  {- Arity: 2,
     Strictness: <L,U(C(C1(C1(U))),C(U(U,U,1*U)),C(U))><S,1*U(U(U,U,U),1*U,1*U,U,U)>m8,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Docs.AsHtml.HtmlRenderContext)
                   (w1 :: Language.PureScript.Docs.Types.Declaration) ->
                 case w1 of ww { Language.PureScript.Docs.Types.Declaration ww1 ww2 ww3 ww4 ww5 ->
                 case Language.PureScript.Docs.AsHtml.$wdeclAsHtml
                        w
                        ww1
                        ww2
                        ww3
                        ww4
                        ww5 of ww6 { (#,,,#) ww7 ww8 ww9 ww10 ->
                 Text.Blaze.Internal.AddAttribute @ () ww7 ww8 ww9 ww10 } }) -}
16e6b00cdf2cbb8bc6cbbc1b3f7dedb7
  declNamespace ::
    Language.PureScript.Docs.Types.Declaration
    -> Language.PureScript.Docs.RenderedCode.Types.Namespace
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLLLS),1*U(A,A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Docs.Types.Declaration) ->
                 case x of wild { Language.PureScript.Docs.Types.Declaration ds1 ds2 ds3 ds4 ds5 ->
                 Language.PureScript.Docs.Types.declInfoNamespace ds5 }) -}
ef630bea7d0090fa115c4e9bac57c3ee
  htmlIndex ::
    Language.PureScript.Docs.AsHtml.HtmlOutput a
    -> [(GHC.Base.Maybe GHC.Types.Char, a)]
  RecSel Left Language.PureScript.Docs.AsHtml.HtmlOutput
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: Language.PureScript.Docs.AsHtml.HtmlOutput a) ->
                 case ds of wild { Language.PureScript.Docs.AsHtml.HtmlOutput ds1 ds2 ->
                 ds1 }) -}
ef630bea7d0090fa115c4e9bac57c3ee
  htmlModules ::
    Language.PureScript.Docs.AsHtml.HtmlOutput a
    -> [(Language.PureScript.Names.ModuleName,
         Language.PureScript.Docs.AsHtml.HtmlOutputModule a)]
  RecSel Left Language.PureScript.Docs.AsHtml.HtmlOutput
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: Language.PureScript.Docs.AsHtml.HtmlOutput a) ->
                 case ds of wild { Language.PureScript.Docs.AsHtml.HtmlOutput ds1 ds2 ->
                 ds2 }) -}
9b385823ae061c1015a5e753b40fb1e8
  htmlOutputModuleLocals ::
    Language.PureScript.Docs.AsHtml.HtmlOutputModule a -> a
  RecSel Left Language.PureScript.Docs.AsHtml.HtmlOutputModule
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a
                   (ds :: Language.PureScript.Docs.AsHtml.HtmlOutputModule a) ->
                 case ds of wild { Language.PureScript.Docs.AsHtml.HtmlOutputModule ds1 ds2 ->
                 ds1 }) -}
9b385823ae061c1015a5e753b40fb1e8
  htmlOutputModuleReExports ::
    Language.PureScript.Docs.AsHtml.HtmlOutputModule a
    -> [(Language.PureScript.Docs.Types.InPackage
           Language.PureScript.Names.ModuleName,
         a)]
  RecSel Left Language.PureScript.Docs.AsHtml.HtmlOutputModule
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a
                   (ds :: Language.PureScript.Docs.AsHtml.HtmlOutputModule a) ->
                 case ds of wild { Language.PureScript.Docs.AsHtml.HtmlOutputModule ds1 ds2 ->
                 ds2 }) -}
57d2e7ea66923d55f313ffc5d6f2ebed
  makeFragment ::
    Language.PureScript.Docs.RenderedCode.Types.Namespace
    -> Data.Text.Internal.Text -> Data.Text.Internal.Text
  {- Arity: 2, Strictness: <S,1*U><S(SSS),1*U(U,U,U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Docs.RenderedCode.Types.Namespace)
                   (w1 :: Data.Text.Internal.Text) ->
                 case w1 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Language.PureScript.Docs.AsHtml.$wmakeFragment w ww1 ww2 ww3 }) -}
b5cfd6499540a184b1acf849c409bb9f
  moduleAsHtml ::
    (Language.PureScript.Docs.Types.InPackage
       Language.PureScript.Names.ModuleName
     -> GHC.Base.Maybe
          Language.PureScript.Docs.AsHtml.HtmlRenderContext)
    -> Language.PureScript.Docs.Types.Module
    -> (Language.PureScript.Names.ModuleName,
        Language.PureScript.Docs.AsHtml.HtmlOutputModule
          Text.Blaze.Html.Html)
  {- Arity: 2, Strictness: <L,C(U)><S,1*U(U,1*U,1*U,1*U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Docs.Types.InPackage
                           Language.PureScript.Names.ModuleName
                         -> GHC.Base.Maybe
                              Language.PureScript.Docs.AsHtml.HtmlRenderContext)
                   (w1 :: Language.PureScript.Docs.Types.Module) ->
                 case w1 of ww { Language.PureScript.Docs.Types.Module ww1 ww2 ww3 ww4 ->
                 case Language.PureScript.Docs.AsHtml.$wmoduleAsHtml
                        w
                        ww1
                        ww2
                        ww3
                        ww4 of ww5 { (#,#) ww6 ww7 ->
                 (ww6, ww7) } }) -}
8fb1924f2131fff36c4679eaa8fd144a
  moduleAsHtml1 :: Text.Blaze.Internal.MarkupM ()
  {- HasNoCafRefs, Strictness: m10,
     Unfolding: (Text.Blaze.Internal.Empty @ () GHC.Tuple.()) -}
25aa0bf96ca793cabe669469bceb2fd9
  nullRenderContext ::
    Language.PureScript.Docs.AsHtml.HtmlRenderContext
  {- Strictness: m,
     Unfolding: (Language.PureScript.Docs.AsHtml.HtmlRenderContext
                   Language.PureScript.Docs.AsHtml.nullRenderContext3
                   Language.PureScript.Docs.AsHtml.nullRenderContext2
                   Language.PureScript.Docs.AsHtml.nullRenderContext1) -}
b066d71334227e59cb7546466fc51444
  nullRenderContext1 ::
    Language.PureScript.AST.SourcePos.SourceSpan
    -> GHC.Base.Maybe Data.Text.Internal.Text
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: Language.PureScript.AST.SourcePos.SourceSpan) ->
                 GHC.Base.Nothing @ Data.Text.Internal.Text) -}
61511c619e606071b61233a7ce988f00
  nullRenderContext2 ::
    Language.PureScript.Docs.Types.DocLink -> Data.Text.Internal.Text
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: Language.PureScript.Docs.Types.DocLink) ->
                 Data.Text.Internal.empty_) -}
c2a7670a349692e5fc769f9d80e9d5aa
  nullRenderContext3 ::
    Language.PureScript.Docs.RenderedCode.Types.Namespace
    -> Data.Text.Internal.Text
    -> Language.PureScript.Docs.RenderedCode.Types.ContainingModule
    -> GHC.Base.Maybe Language.PureScript.Docs.Types.DocLink
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><L,A>,
     Unfolding: InlineRule (3, True, True)
                (\ (ds :: Language.PureScript.Docs.RenderedCode.Types.Namespace)
                   (eta :: Data.Text.Internal.Text)
                   (eta1 :: Language.PureScript.Docs.RenderedCode.Types.ContainingModule) ->
                 GHC.Base.Nothing @ Language.PureScript.Docs.Types.DocLink) -}
846a4b2a9f761b0fa3a352f3ef1668fa
  packageAsHtml ::
    (Language.PureScript.Docs.Types.InPackage
       Language.PureScript.Names.ModuleName
     -> GHC.Base.Maybe
          Language.PureScript.Docs.AsHtml.HtmlRenderContext)
    -> Language.PureScript.Docs.Types.Package a
    -> Language.PureScript.Docs.AsHtml.HtmlOutput Text.Blaze.Html.Html
  {- Arity: 2, Strictness: <L,C(U)><S,1*U(A,A,A,A,1*U,A,A,A,A,A)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (getHtmlCtx :: Language.PureScript.Docs.Types.InPackage
                                    Language.PureScript.Names.ModuleName
                                  -> GHC.Base.Maybe
                                       Language.PureScript.Docs.AsHtml.HtmlRenderContext)
                   (ds :: Language.PureScript.Docs.Types.Package a) ->
                 case ds of wild { Language.PureScript.Docs.Types.Package ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ->
                 Language.PureScript.Docs.AsHtml.HtmlOutput
                   @ Text.Blaze.Html.Html
                   (GHC.Types.[]
                      @ (GHC.Base.Maybe GHC.Types.Char, Text.Blaze.Html.Html))
                   (GHC.Base.build
                      @ (Language.PureScript.Names.ModuleName,
                         Language.PureScript.Docs.AsHtml.HtmlOutputModule
                           Text.Blaze.Html.Html)
                      (\ @ b1
                         (c :: (Language.PureScript.Names.ModuleName,
                                Language.PureScript.Docs.AsHtml.HtmlOutputModule
                                  Text.Blaze.Html.Html)
                               -> b1 -> b1)[OneShot]
                         (n :: b1)[OneShot] ->
                       GHC.Base.foldr
                         @ Language.PureScript.Docs.Types.Module
                         @ b1
                         (GHC.Base.mapFB
                            @ (Language.PureScript.Names.ModuleName,
                               Language.PureScript.Docs.AsHtml.HtmlOutputModule
                                 Text.Blaze.Html.Html)
                            @ b1
                            @ Language.PureScript.Docs.Types.Module
                            c
                            (Language.PureScript.Docs.AsHtml.moduleAsHtml getHtmlCtx))
                         n
                         ds5)) }) -}
8dc413aa5e0dd4a60204781df28132ae
  renderDocLink ::
    Language.PureScript.Docs.AsHtml.HtmlRenderContext
    -> Language.PureScript.Docs.Types.DocLink
    -> Data.Text.Internal.Text
  RecSel Left Language.PureScript.Docs.AsHtml.HtmlRenderContext
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Docs.AsHtml.HtmlRenderContext) ->
                 case ds of wild { Language.PureScript.Docs.AsHtml.HtmlRenderContext ds1 ds2 ds3 ->
                 ds2 }) -}
fe649770756649b01d84b9581c97c172
  renderMarkdown :: Data.Text.Internal.Text -> Text.Blaze.Html.Html
  {- Arity: 1, Strictness: <L,1*U(U,U,U)>,
     Unfolding: (\ (x :: Data.Text.Internal.Text) ->
                 case Data.Generics.Uniplate.Data.$w$cbiplate
                        @ Cheapskate.Types.Doc
                        @ Cheapskate.Types.Inlines
                        Cheapskate.Types.$fDataDoc
                        Language.PureScript.Docs.AsHtml.$s$fBiplateab_$cbiplate_$s$fDataSeq
                        (Cheapskate.Parse.$wmarkdown
                           GHC.Types.True
                           GHC.Types.False
                           GHC.Types.False
                           GHC.Types.False
                           x) of wild { (,) current generate ->
                 case generate
                        (Language.PureScript.Docs.AsHtml.renderMarkdown_$sg2
                           current) of ww { Cheapskate.Types.Doc ww1 ww2 ->
                 case ww1 of ww3 { Cheapskate.Types.Options ww4 ww5 ww6 ww7 ->
                 Cheapskate.Html.$wrenderDoc ww4 ww5 ww6 ww2 } } }) -}
7b78b05d5c5624d4e7cfa502b188b115
  renderMarkdown_$sg2 ::
    Data.Generics.Str.Str
      (Data.Sequence.Internal.Seq Cheapskate.Types.Inline)
    -> Data.Generics.Str.Str Cheapskate.Types.Inlines
  {- Arity: 1, Strictness: <S,1*U> -}
8dc413aa5e0dd4a60204781df28132ae
  renderSourceLink ::
    Language.PureScript.Docs.AsHtml.HtmlRenderContext
    -> Language.PureScript.AST.SourcePos.SourceSpan
    -> GHC.Base.Maybe Data.Text.Internal.Text
  RecSel Left Language.PureScript.Docs.AsHtml.HtmlRenderContext
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Docs.AsHtml.HtmlRenderContext) ->
                 case ds of wild { Language.PureScript.Docs.AsHtml.HtmlRenderContext ds1 ds2 ds3 ->
                 ds3 }) -}
instance GHC.Base.Functor [Language.PureScript.Docs.AsHtml.HtmlOutput]
  = Language.PureScript.Docs.AsHtml.$fFunctorHtmlOutput
instance GHC.Base.Functor [Language.PureScript.Docs.AsHtml.HtmlOutputModule]
  = Language.PureScript.Docs.AsHtml.$fFunctorHtmlOutputModule
instance GHC.Show.Show [Language.PureScript.Docs.AsHtml.HtmlOutput]
  = Language.PureScript.Docs.AsHtml.$fShowHtmlOutput
instance GHC.Show.Show [Language.PureScript.Docs.AsHtml.HtmlOutputModule]
  = Language.PureScript.Docs.AsHtml.$fShowHtmlOutputModule
"SPEC/Language.PureScript.Docs.AsHtml $fDataSeq @ Inline" [orphan] forall (v :: Data.Data.Data
                                                                                  Cheapskate.Types.Inline)
  Data.Sequence.Internal.$fDataSeq @ Cheapskate.Types.Inline v
  = Language.PureScript.Docs.AsHtml.$s$fBiplateab_$cbiplate_$s$fDataSeq
"SPEC/Language.PureScript.Docs.AsHtml $fDataSeq5 @ Inline" [orphan] forall ($dData :: Data.Data.Data
                                                                                        Cheapskate.Types.Inline)
  Data.Sequence.Internal.$fDataSeq5 @ Cheapskate.Types.Inline $dData
  = Language.PureScript.Docs.AsHtml.$s$fDataSeq5
"SPEC/Language.PureScript.Docs.AsHtml $fStream[]mtok @ Identity _" [orphan] forall @ tok
                                                                                   (v :: GHC.Base.Monad
                                                                                           Data.Functor.Identity.Identity)
  Text.Parsec.Prim.$fStream[]mtok @ Data.Functor.Identity.Identity
                                  @ tok
                                  v
  = Language.PureScript.Docs.AsHtml.$s$fStream[]mtok @ tok
"SPEC/Language.PureScript.Docs.AsHtml $fStream[]mtok_$cuncons @ Identity _" [orphan] forall @ tok
                                                                                            ($dMonad :: GHC.Base.Monad
                                                                                                          Data.Functor.Identity.Identity)
  Text.Parsec.Prim.$fStream[]mtok_$cuncons @ Data.Functor.Identity.Identity
                                           @ tok
                                           $dMonad
  = Language.PureScript.Docs.AsHtml.$s$fStream[]mtok_$s$fStream[]mtok_$cuncons
      @ tok
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

