
==================== FINAL INTERFACE ====================
2019-01-24 14:15:42.24067 UTC

interface purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.TypeChecker.Types 8043
  interface hash: cd53e029764345d96f02322f4957d56f
  ABI hash: 9c734727ad5f267521b2c050b184f104
  export-list hash: 36881d5954a8d829275456e84b84ddfd
  orphan hash: 4d93dea4e5b7930fbabc7635c381a98a
  flag hash: d2c30bfa55bfd53466599f65e780dd5e
  opt_hash: 2c98c95d41c045ae9c2fb565ec8aabc6
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Language.PureScript.TypeChecker.Types.typesOf
  Language.PureScript.TypeChecker.Types.BindingGroupType{Language.PureScript.TypeChecker.Types.NonRecursiveBindingGroup Language.PureScript.TypeChecker.Types.RecursiveBindingGroup}
module dependencies: Control.Monad.Supply
                     Control.Monad.Supply.Class Language.PureScript.AST
                     Language.PureScript.AST.Binders
                     Language.PureScript.AST.Declarations
                     Language.PureScript.AST.Exported Language.PureScript.AST.Literals
                     Language.PureScript.AST.Operators Language.PureScript.AST.SourcePos
                     Language.PureScript.AST.Traversals Language.PureScript.Bundle
                     Language.PureScript.Comments Language.PureScript.Constants
                     Language.PureScript.Crash Language.PureScript.Environment
                     Language.PureScript.Errors Language.PureScript.Kinds
                     Language.PureScript.Label Language.PureScript.Names
                     Language.PureScript.PSString Language.PureScript.Parser.Lexer
                     Language.PureScript.Parser.State Language.PureScript.Pretty
                     Language.PureScript.Pretty.Common Language.PureScript.Pretty.Kinds
                     Language.PureScript.Pretty.Types Language.PureScript.Pretty.Values
                     Language.PureScript.Publish.BoxesHelpers
                     Language.PureScript.Traversals
                     Language.PureScript.TypeChecker.Entailment
                     Language.PureScript.TypeChecker.Kinds
                     Language.PureScript.TypeChecker.Monad
                     Language.PureScript.TypeChecker.Skolems
                     Language.PureScript.TypeChecker.Subsumption
                     Language.PureScript.TypeChecker.Synonyms
                     Language.PureScript.TypeChecker.TypeSearch
                     Language.PureScript.TypeChecker.Unify
                     Language.PureScript.TypeClassDictionaries Language.PureScript.Types
                     Paths_purescript
package dependencies: aeson-1.3.1.1 ansi-terminal-0.8.0.4
                      array-0.5.2.0 async-2.2.1 attoparsec-0.13.2.2 base-4.11.1.0
                      base-compat-0.10.4 binary-0.8.5.1 blaze-builder-0.4.1.0 boxes-0.1.5
                      bytestring-0.10.8.2 colour-2.3.4 containers-0.5.11.0
                      data-ordlist-0.4.7.0 deepseq-1.4.3.0 dlist-0.8.0.4 filepath-1.4.2
                      ghc-boot-th-8.4.3 ghc-prim-0.5.2.0 hashable-1.2.7.0
                      integer-gmp-1.0.2.0 integer-logarithms-1.0.2.1
                      language-javascript-0.6.0.11 microlens-0.4.9.1 microlens-ghc-0.4.9
                      microlens-mtl-0.1.11.1 microlens-platform-0.3.10
                      microlens-th-0.4.2.1 mtl-2.2.2 parsec-3.1.13.0 pattern-arrows-0.0.2
                      pretty-1.1.3.6 primitive-0.6.3.0 protolude-0.2.2 random-1.1
                      scientific-0.3.6.2 sourcemap-0.1.6 split-0.2.3.3 stm-2.4.5.0
                      syb-0.7 tagged-0.8.5 template-haskell-2.13.0.0 text-1.2.3.0
                      th-abstraction-0.2.8.0 time-1.8.0.2 time-locale-compat-0.1.1.4
                      transformers-0.5.5.0 unordered-containers-0.2.9.0
                      utf8-string-1.0.1.1 uuid-types-1.0.3 vector-0.12.0.1
orphans: syb-0.7:Data.Generics.Instances colour-2.3.4:Data.Colour
         stm-2.4.5.0:Control.Monad.STM
         microlens-platform-0.3.10:Lens.Micro.Platform
         microlens-ghc-0.4.9:Lens.Micro.GHC
         attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         vector-0.12.0.1:Data.Vector.Unboxed
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.0:Data.Text.Lazy
         text-1.2.3.0:Data.Text binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.5.0:Control.Monad.Trans.Error
         base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: aeson-1.3.1.1:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.Graph
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         dlist-0.8.0.4:Data.DList ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         microlens-0.4.9.1:Lens.Micro.Internal
                         microlens-ghc-0.4.9:Lens.Micro.GHC
                         microlens-mtl-0.1.11.1:Lens.Micro.Mtl.Internal
                         microlens-platform-0.3.10:Lens.Micro.Platform
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.Declarations
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.Operators
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.SourcePos
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Comments
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Environment
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Kinds
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Label
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Names
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.PSString
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.TypeClassDictionaries
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Types
                         tagged-0.8.5:Data.Tagged
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
                         th-abstraction-0.2.8.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  base-4.11.1.0:Control.Arrow ce43199b5356a11ee2a8317f0ec30aee
import  -/  base-4.11.1.0:Control.Monad c5f960c67d822497578bffbd3e4c01cf
import  -/  base-4.11.1.0:Data.Bifunctor a977586bad544f929bb5bc7f139aaa1c
import  -/  base-4.11.1.0:Data.Either 39d922b371c4c52d426e9ee66de8371a
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.Functor f522c3501272159820fd6f242510732f
import  -/  base-4.11.1.0:Data.List 83dc843e47bfc0c5af51e19c6f3476d5
import  -/  base-4.11.1.0:Data.List.NonEmpty 595ee3baddcadebc4831ea7541427984
import  -/  base-4.11.1.0:Data.Maybe 409c3da2b142470b68be39ce1d97a9f7
import  -/  base-4.11.1.0:Data.OldList 1b35aa3c6805ff7c8887a35a866fe006
import  -/  base-4.11.1.0:Data.Traversable 7ad4edb9184ea1ae8e73f6b94f115c8c
import  -/  base-4.11.1.0:Data.Tuple 3af66f3ac61ed95ba8a3a3f68ebc5003
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-compat-0.10.4:Prelude.Compat bb6796186ed35a1d09dc34362a3fc27e
import  -/  containers-0.5.11.0:Data.Map 0dbdaec812ef695a364aa6c69e7f7d53
import  -/  containers-0.5.11.0:Data.Map.Internal 0150e210d0ae8df0f3a0669d5e32d8fa
import  -/  containers-0.5.11.0:Data.Set 7d3c64a641be4cacbcd8119445bab919
import  -/  containers-0.5.11.0:Data.Set.Internal 93fa3ef95853aa2a7aadf32d693bd451
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  mtl-2.2.2:Control.Monad.Error.Class df146c18e27154b8df4c8637c59fd61b
import  -/  mtl-2.2.2:Control.Monad.State.Class acc76e93f44ac4486524db1a327e0a0a
import  -/  mtl-2.2.2:Control.Monad.Writer.Class 69f540e019eada69892c26d267276458
import  -/  protolude-0.2.2:Protolude 2c2d16096c8a60f59f646a3b93b0eb7b
import  -/  protolude-0.2.2:Protolude.List 3a80368167450d7a4360ebf1ea443345
import  -/  Control.Monad.Supply.Class 4b0577d8897e2d48cd4fc324f0e8c355
  exports: 9b5454b78bf2751cecd07ba41d8b4d51
  MonadSupply 6fd5e162006451a17cf4a7ae2eb71bd2
import  -/  Language.PureScript.AST e89b59f8e201961eafd3ff905a683659
  exports: be73d3bb7d4ebe5df082453f6d572075
import  -/  Language.PureScript.AST.Binders 482af52ec934a93b1ca6ec424fbe30f2
  BinaryNoParensBinder fa245b4b20e4d00bda41b59e19ae05a3
  Binder c96edaac3b5fcb24a174f6f4b3f084d4
  ConstructorBinder 82c410a4d9e21c325ba3e1527c50daff
  LiteralBinder 0a5559e7d3aabf0cf9c897b797edff85
  NamedBinder 0800b3be0f9ce7a64f901e627e87a982
  NullBinder d9d32ade0d56992460bb4b700e4464a4
  OpBinder a4e859ef3c8b2681b04a2dfae6eb0fb8
  ParensInBinder 5997f08e343521a086fe234687cfa21a
  PositionedBinder a6b770e5a8f88247c6ef23a04722a775
  TypedBinder 69e3490135b9eb76e3f2c68250002721
  VarBinder 2e20c3df0430901107dc9b8bd4a6015c
  binderNames 810a1bcb74988444206bd4c3a504cf72
import  -/  Language.PureScript.AST.Declarations 586bc75044e8737d02875208d17d4395
  Abs dae9a514c0c54a50406a57cd533f800a
  Accessor 75238d8cd32188d181bffb473f6c4802
  AdditionalProperty 8cc5bbff50321b1c6faa495114d0e5d1
  AmbiguousTypeVariables 32c9ff2da492cd27596b0460f325bfa1
  App ae4e12e545757da5fb62189548835120
  BindingGroupDeclaration fe3c1705a7a0108b856351d712879737
  CannotGeneralizeRecursiveFunction 27f37994cf841dc091a8ecfb761d858e
  Case dbf8d0b5ac1a603149b8bb1459575de0
  CaseAlternative 8464f1c9f0c33f15833817399a071704
  CaseAlternative e92f6ee78a22c0eadc3566d7d1f48d5b
  ConditionGuard de13c04599b5971ac3f21a1186c6e658
  Constructor ea2b7d92995197a177f6abf42269c377
  Declaration e92f6ee78a22c0eadc3566d7d1f48d5b
  DeferredDictionary 4767b924c347cb558c8259d23777dc47
  DuplicateLabel 8feaf7d623d5540590d68d31f0515182
  ErrorCheckingAccessor 72882f6c65176d04bcb28838744a5d3d
  ErrorCheckingGuard 14ee2584b4ccd745e0203b96f4ae9b1a
  ErrorCheckingType 2eb9962f5589e0b297acb417d9acab76
  ErrorInApplication e280abbf2add98d167ba4cbf86682490
  ErrorInferringType 6edd0bcc0ac0701140b4f26a3edd4a7d
  ErrorMessage b0470a74191782e72607e7c5b87318de
  ErrorMessage 7268a73b9f5bbe5a70110aa90f7e1194
  ExpectedType 7a31bdb4cb0936757920cf70f374b411
  Expr e92f6ee78a22c0eadc3566d7d1f48d5b
  ExprDoesNotHaveType 2b6d380ece0eabf01b29df66dd561c32
  GuardedExpr 811952f37a620b8d78cc4a6176d99a2c
  GuardedExpr e92f6ee78a22c0eadc3566d7d1f48d5b
  Hole 65afb0f996a13cb636ce84111153af7c
  HoleInferredType 785c100e33c3249a5b102046be9d34f6
  IfThenElse 8071f8c4795174e5283a3ecdaa8b3c8f
  IncorrectConstructorArity 88cdf8016d2adea5107417413375a255
  Let 5843430a3e31a1977aadcfb94efa8312
  Literal bdcf4b137a448fe7c2ed57fe33a72cd3
  MissingTypeDeclaration fcd36d2a4c29a7a9bdad6b3c5794d9e6
  MkUnguarded d9deae30ea78016a4bdb453d9978bfa3
  ObjectUpdate 14b4ffe7d1b68ac321d3f2c2a27a17eb
  OverlappingArgNames 4abe87f1b7aaf0437e5be2df295bd221
  PatternGuard a27d707167917ad112543851031e65f9
  PositionedValue b90293950702fd6b659d7cd86d309f72
  PropertyIsMissing 7bd6a3b98e181ecb93fd20dfbbd43eb4
  TSAfter 3632e66d118941cae7ca81a4c9abccf6
  TSBefore 6b997cb4232ef55e62a34134149f518d
  TypeClassDictionary 531ed710fa3e0860894127586614f844
  TypeClassDictionaryConstructorApp f15387264e84e75b0e5ed1f08eacb958
  TypedValue 0acc3ace791a36484dcda3706df33cef
  UnknownName 4183c70ff29ad805571bed2cb1e6b9e3
  ValueDecl 97b38919d86cd9182cb8d86b6f4ae734
  Var 5fd1e80d993ab2f76a4e002bbbfc9990
  caseAlternativeBinders e92f6ee78a22c0eadc3566d7d1f48d5b
  onTypeSearchTypes febdeb74c42c15f011c690652e6ae616
import  -/  Language.PureScript.AST.Literals da2ec269f063125450b272321f85468a
  ArrayLiteral 7cbd15adda8a5ed2a81035be22e2eae2
  BooleanLiteral 98d9c7b89f9a5dcc4796fae1c45898e6
  CharLiteral 463423afe7528a93062eb5622a63a8e9
  NumericLiteral 660c8129bba11812cfd17a4819557d36
  ObjectLiteral d17d3a090fe8a89f303c679b0a417ae9
  StringLiteral 8514cef90500430ad3602ee97b69b883
import  -/  Language.PureScript.AST.SourcePos 63acacac5b7be73d04e5be0047a9a89a
  NullSourceAnn 5a0bced03127a02790cb165450e72c45
  SourceAnn f5708ed135df009dfa0254486771ef74
  nullSourceSpan d3ce9e45794cd4f5ddfad4b02b318f51
import  -/  Language.PureScript.AST.Traversals f5adaf844c5e9d0f0678a8b574a32aa6
  overTypes c5ba43021920ffb02d62737e1c4527b2
import  -/  Language.PureScript.Crash 3dd739d57f17e8a1e9cd97afd3faf067
  exports: a9d2725f359c2d113bd38076e88ec681
  internalError d33c2a09c5cbe8e68c0bc27d1500ba1a
import  -/  Language.PureScript.Environment 467b25d81b890e1aaabe28d0f09d192d
  exports: a0cb6cb8c78c56365f58c9f88d1fe000
  Defined 324606166c226f373232031c92abddc6
  NameKind 7e23f4ddba2350405f465a39833424c7
  NameVisibility 22706fecc369659455f7dc5f13f3340f
  Private fa142db41a2d9e82cee092dfbb31a494
  TypeClassData 8d6c0d50edff1e015eabc5cf05f826dd
  Undefined 33d3e9c9b0e559f52c77c918db8d0dd4
  dataConstructors 7eb61fe78108d98d82e39145869b2402
  fdDetermined 181e7295489b314c6c042d61e80bb6b9
  function fb710d9343cfd06856a618519a627f36
  isKindType 6d49f4841adb3c84efe65654dc3bf16b
  tyArray 9c853147674c170f658aadff0d955fd3
  tyBoolean cf2a4b16921d4c14981aa678a6e26960
  tyChar 55164640d04aa650d4ee004fb2b89cb1
  tyFunction 72bada10fd7f408ce623a31c14e8cefb
  tyInt 2eb80f9991d35ecb67b9d510eb6fa5f1
  tyNumber 33725bb2e2117f8c6457b7edde5db534
  tyRecord 50710499a0d6346d3284449c5e15992d
  tyString 0f7bc6cbb79c99c03768da77b67918ab
  typeClassDependencies 181e7295489b314c6c042d61e80bb6b9
  typeClasses 7eb61fe78108d98d82e39145869b2402
import  -/  Language.PureScript.Errors 3c1ad933587510f8b20a8c9ec2e86ce9
  exports: 8e61484c4664eceb943d9fc4820c721b
  MultipleErrors e1ef6a17348ccfe3ef65185d3c5f9026
  errorMessage 4308e76c0636918842d6acdb173a8e4b
  errorMessage' d5b3fcc13faf321f693b39ae31b8bd13
  escalateWarningWhen 1081b980eb1487cbd93c7cabe5a874be
  onErrorMessages ca84358c3cc6d2a317963ec9c48b02a9
  onTypesInErrorMessage 7fb8e70f420c038d79387739757b1e3f
  parU ba83f09a68cd72d36addca6319b4b6e0
import  -/  Language.PureScript.Kinds e26b9cf8211f7e72bb44fdd3faed066e
  exports: fe71635ad7964c0d620fb0685614a050
  SourceKind 4cdf50d4b2444221832ca704f3a0c468
import  -/  Language.PureScript.Label 366bbe6039761c79dbc09aaf87b5753e
  exports: 0a72b1b943ee66379d53382d0212ef7e
  Label 1f1fefa14786357467485814549b59fb
import  -/  Language.PureScript.Names 00f694509122478d97b327fbbccae327
  exports: ad7ae34f85124c68e8ba1c90fb2e732f
  DctorName 058beae22056ca37fdd3776575b08a7a
  Ident bad3562aa6138b6192713ac281080869
  ModuleName 1b2ddf0c04464d2fa2588925f10c1966
  ProperName f69d3801241fcb4773f1284cd28f2dee
  Qualified b6e1bc9e7244a41d3c6149c9b5c2d6d8
  Qualified 1b2ddf0c04464d2fa2588925f10c1966
  coerceProperName 441cf2d4ab32b68a0b73ca234d2a628b
  freshIdent 2eefe00dadde64e5aaf7e80827568225
import  -/  Language.PureScript.PSString 482bcd39d274b3e3efbde5749bd9d797
  exports: dedd5d31dc509736134f041863efd1d4
  PSString 96ffea2472d48cda76cc39d47ab7bb82
import  -/  Language.PureScript.Traversals e97764d7972cc6ba421a6be0a3ce6bda
  exports: cbb821b2ee7c6d00cdf62285e1dbe432
  sndM c93ef73e127a3a54c4cd1e5e2194b237
import  -/  Language.PureScript.TypeChecker.Entailment cf121bfd8417e41be69559141345422d
  exports: 82bae92274a2ba154fef9ef60f091144
  InstanceContext c4475a18c9787347337fbabbb7f9d9d2
  newDictionaries abde8470e222e24f24674076030ca6a3
  replaceTypeClassDictionaries 5a61c57edd6d00dad5d55b214e946b57
import  -/  Language.PureScript.TypeChecker.Kinds 02e90efcd8f2a4f544b757693da40686
  exports: a5726d79f26ec95f0566a6905a8a7e84
  kindOf 70af85459cf3b4a44152c3e17e69ec09
  kindOfWithScopedVars c3fc678e4f23cadb5ab7e0b61c226e09
import  -/  Language.PureScript.TypeChecker.Monad 5c6d6cca9d9f5acb98ab527615b54d6d
  exports: 64079f93a7ca5d81f53055abc7f8ac53
  CheckState 9cc3cef00c43c0c2ac24a31e9b521e29
  Substitution 6dc37f96b1ad41d81e906d34e56bda73
  bindLocalVariables d3d61817e30c6d14fa74cb55dc1b127f
  bindNames cec978aa2d75cee2ffee6b227b8740ed
  capturingSubstitution 40acdbe38860b70b451bd591b4f7215f
  checkCurrentModule 9cc3cef00c43c0c2ac24a31e9b521e29
  checkEnv 9cc3cef00c43c0c2ac24a31e9b521e29
  checkSubstitution 9cc3cef00c43c0c2ac24a31e9b521e29
  checkVisibility cf16ff61c4446f9bda6bae4524621e38
  getEnv 69aa315a68211d8605a99340dd649d82
  getHints bbecaeac63bedc9e4f131a49eb366479
  getLocalContext 223085abf14117e3398e0e666d63e54f
  getTypeClassDictionaries 299df08a9844c25fa62c56a713d7ba37
  guardWith d2b3f12e05a1d4c8c1e59f1c8f3292d4
  lookupVariable e5ee90a12677ea7029a891b4e37ff4df
  makeBindingGroupVisible f26d7d5148f07c0c19e39dc15bb01669
  warnAndRethrowWithPositionTC 52783f0f0cdec5b6ee7f6ff28f5a789f
  withBindingGroupVisible f838abdb4c649e2bda552b5c91c16743
  withErrorMessageHint 873c4b1b4503ece5c9a614f4d08067e6
  withFreshSubstitution 284ea6d9c874971bc31a265754a070ff
  withScopedTypeVars a0453ee66ce276d2444e395405e450c4
  withTypeClassDictionaries a48b8b4088719f7d173311a4d14e9441
  withoutWarnings 9a25073ac27c6847631231a5b0c65e08
import  -/  Language.PureScript.TypeChecker.Skolems d6f507247d13250d325e185be25fccdf
  exports: 301c96fa595b923bfcf06694e88d029f
  introduceSkolemScope cbd26872f4b44871d4fb8d52b6845a3d
  newSkolemConstant 91bed389ec61482f5cc2507a66413032
  newSkolemScope 5099e483af3809deab291383bcf017ed
  skolemEscapeCheck f45ac30ef4f4772f46e9f82eb5dd08f0
  skolemize ab7369b4aafebf4d012bef1d822de302
  skolemizeTypesInValue 68ed51015701e37d503a57703ecb4eda
import  -/  Language.PureScript.TypeChecker.Subsumption 2763e6a22d4c985afcfbfcfd12ea7e99
  exports: c2176d67b40e83c01935fbebc66fe7a2
  subsumes 54cca14cc8968576e00d5e38068baa54
import  -/  Language.PureScript.TypeChecker.Synonyms 9fc45204d5072944969c53bc432a94f7
  exports: 7d14e10157c623eaf1b349bf4fa32925
  replaceAllTypeSynonyms de486072b313a4c7c1540540e0726c4f
import  -/  Language.PureScript.TypeChecker.TypeSearch dfdef2d27a65b14ffb5af177be7da1d4
  exports: c1dfe9f5b7959def7547769a1d3224ea
  typeSearch 5681f218a1d342cd6ce3132b5eb6412b
import  -/  Language.PureScript.TypeChecker.Unify f1e03e30856471f44252b03f30788ea2
  exports: 85c9b2e7abdd78234543aea834d2a6f2
  freshType 527baf8b1affd32c2669a112140804d8
  replaceTypeWildcards e6f96d995c50d5ea91c10ec9b8abc834
  replaceVarWithUnknown 8f647d768ad8e4d90f292540b8237e9b
  substituteType 84a2cb6a429d91c98237ddbf8b2c5705
  unifyTypes 58256f6c1ba2ea04f6e802cdc965b287
  unknownsInType f5938e8c26386b124f071f997ebdd608
  varIfUnknown 0b3576ea6a1d1cc420f6433c06e7fd84
import  -/  Language.PureScript.Types 80a51f62cb3e6c71f024289b88f07b7f
  exports: 229bb7528146da886cffbefad5822e19
  ConstrainedType 7b7b9fe5fc37a912cec5b01815c7784d
  Constraint a0b1e737f9fdb5b2f711c97dd5895f69
  ForAll 0750974c4b3c816f0559c95f8418f903
  KindedType 7d9c2ac5dbbe89c236f431d3c9412617
  REmpty 55ca0a758aacaf511eb4882e2b81a0fc
  RowListItem 0e3231b388d844db12bae63a4b5c2cc0
  Skolem aef73915115b060ec7781cdd3859082f
  SourceConstraint b73f205dd83ce498c3119d8c9316f0c6
  SourceType 0ac818517c14fedd280ef5885ae0cdc3
  TUnknown 9d429c357e98c51eb9f7f00bef0a2346
  Type d5fc19231e8a71936895da17eade4f5b
  TypeApp 9dadf19674ff2d747cbba0c42dfad343
  constraintArgs d5fc19231e8a71936895da17eade4f5b
  constraintClass d5fc19231e8a71936895da17eade4f5b
  eqType d5fc19231e8a71936895da17eade4f5b
  isMonoType d3aa70d108dc6207c787342ae4403a28
  rowFromList 50b0e46715e1ec543fc59e157404928e
  rowListLabel 7b3cb6d68aaa473367a70ce66e9633f6
  rowToList 7eaee27c2477428659ea7da98530a691
  srcConstrainedType 93e2834ceea7e6ad31bf7cc2ab2ec1f3
  srcConstraint 1b178a4d4c2b2691cc958960cbde0185
  srcRCons 055ec9214f2b47037136c28c70d1cdb5
  srcREmpty 8c6160d0d8bd551fb2b350ad21a8f2ae
  srcRowListItem 5b8783c8967bf036dfd5e20068c3fcc1
  srcTypeApp 12cd55eb1b1b79c16fa2d346fb7f9cdb
  srcTypeConstructor bb445f2f58f3f299e4deae81f6001187
56c10fc54900c7aac31df0259cf443e6
  $fEqBindingGroupType ::
    GHC.Classes.Eq
      Language.PureScript.TypeChecker.Types.BindingGroupType
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.TypeChecker.Types.BindingGroupType
                  Language.PureScript.TypeChecker.Types.$fEqBindingGroupType_$c==
                  Language.PureScript.TypeChecker.Types.$fEqBindingGroupType_$c/= -}
56c10fc54900c7aac31df0259cf443e6
  $fEqBindingGroupType_$c/= ::
    Language.PureScript.TypeChecker.Types.BindingGroupType
    -> Language.PureScript.TypeChecker.Types.BindingGroupType
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.TypeChecker.Types.BindingGroupType)
                   (y :: Language.PureScript.TypeChecker.Types.BindingGroupType) ->
                 case x of wild {
                   Language.PureScript.TypeChecker.Types.RecursiveBindingGroup
                   -> case y of wild1 {
                        Language.PureScript.TypeChecker.Types.RecursiveBindingGroup
                        -> GHC.Types.False
                        Language.PureScript.TypeChecker.Types.NonRecursiveBindingGroup
                        -> GHC.Types.True }
                   Language.PureScript.TypeChecker.Types.NonRecursiveBindingGroup
                   -> case y of wild1 {
                        Language.PureScript.TypeChecker.Types.RecursiveBindingGroup
                        -> GHC.Types.True
                        Language.PureScript.TypeChecker.Types.NonRecursiveBindingGroup
                        -> GHC.Types.False } }) -}
56c10fc54900c7aac31df0259cf443e6
  $fEqBindingGroupType_$c== ::
    Language.PureScript.TypeChecker.Types.BindingGroupType
    -> Language.PureScript.TypeChecker.Types.BindingGroupType
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Language.PureScript.TypeChecker.Types.BindingGroupType)
                   (ds1 :: Language.PureScript.TypeChecker.Types.BindingGroupType) ->
                 case ds of wild {
                   Language.PureScript.TypeChecker.Types.RecursiveBindingGroup
                   -> case ds1 of wild1 {
                        Language.PureScript.TypeChecker.Types.RecursiveBindingGroup
                        -> GHC.Types.True
                        Language.PureScript.TypeChecker.Types.NonRecursiveBindingGroup
                        -> GHC.Types.False }
                   Language.PureScript.TypeChecker.Types.NonRecursiveBindingGroup
                   -> case ds1 of wild1 {
                        Language.PureScript.TypeChecker.Types.RecursiveBindingGroup
                        -> GHC.Types.False
                        Language.PureScript.TypeChecker.Types.NonRecursiveBindingGroup
                        -> GHC.Types.True } }) -}
56c10fc54900c7aac31df0259cf443e6
  $fOrdBindingGroupType ::
    GHC.Classes.Ord
      Language.PureScript.TypeChecker.Types.BindingGroupType
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.TypeChecker.Types.BindingGroupType
                  Language.PureScript.TypeChecker.Types.$fEqBindingGroupType
                  Language.PureScript.TypeChecker.Types.$fOrdBindingGroupType_$ccompare
                  Language.PureScript.TypeChecker.Types.$fOrdBindingGroupType_$c<
                  Language.PureScript.TypeChecker.Types.$fOrdBindingGroupType_$c<=
                  Language.PureScript.TypeChecker.Types.$fOrdBindingGroupType_$c>
                  Language.PureScript.TypeChecker.Types.$fOrdBindingGroupType_$c>=
                  Language.PureScript.TypeChecker.Types.$fOrdBindingGroupType_$cmax
                  Language.PureScript.TypeChecker.Types.$fOrdBindingGroupType_$cmin -}
56c10fc54900c7aac31df0259cf443e6
  $fOrdBindingGroupType_$c< ::
    Language.PureScript.TypeChecker.Types.BindingGroupType
    -> Language.PureScript.TypeChecker.Types.BindingGroupType
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.TypeChecker.Types.BindingGroupType)
                   (b :: Language.PureScript.TypeChecker.Types.BindingGroupType) ->
                 case a of wild {
                   Language.PureScript.TypeChecker.Types.RecursiveBindingGroup
                   -> case b of wild1 {
                        Language.PureScript.TypeChecker.Types.RecursiveBindingGroup
                        -> GHC.Types.False
                        Language.PureScript.TypeChecker.Types.NonRecursiveBindingGroup
                        -> GHC.Types.True }
                   Language.PureScript.TypeChecker.Types.NonRecursiveBindingGroup
                   -> case b of wild1 { DEFAULT -> GHC.Types.False } }) -}
56c10fc54900c7aac31df0259cf443e6
  $fOrdBindingGroupType_$c<= ::
    Language.PureScript.TypeChecker.Types.BindingGroupType
    -> Language.PureScript.TypeChecker.Types.BindingGroupType
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.TypeChecker.Types.BindingGroupType)
                   (b :: Language.PureScript.TypeChecker.Types.BindingGroupType) ->
                 case b of wild {
                   Language.PureScript.TypeChecker.Types.RecursiveBindingGroup
                   -> case a of wild1 {
                        Language.PureScript.TypeChecker.Types.RecursiveBindingGroup
                        -> GHC.Types.True
                        Language.PureScript.TypeChecker.Types.NonRecursiveBindingGroup
                        -> GHC.Types.False }
                   Language.PureScript.TypeChecker.Types.NonRecursiveBindingGroup
                   -> case a of wild1 { DEFAULT -> GHC.Types.True } }) -}
56c10fc54900c7aac31df0259cf443e6
  $fOrdBindingGroupType_$c> ::
    Language.PureScript.TypeChecker.Types.BindingGroupType
    -> Language.PureScript.TypeChecker.Types.BindingGroupType
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, True)
                (\ (a :: Language.PureScript.TypeChecker.Types.BindingGroupType)
                   (b :: Language.PureScript.TypeChecker.Types.BindingGroupType) ->
                 Language.PureScript.TypeChecker.Types.$fOrdBindingGroupType_$c<
                   b
                   a) -}
56c10fc54900c7aac31df0259cf443e6
  $fOrdBindingGroupType_$c>= ::
    Language.PureScript.TypeChecker.Types.BindingGroupType
    -> Language.PureScript.TypeChecker.Types.BindingGroupType
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.TypeChecker.Types.BindingGroupType)
                   (b :: Language.PureScript.TypeChecker.Types.BindingGroupType) ->
                 case a of wild {
                   Language.PureScript.TypeChecker.Types.RecursiveBindingGroup
                   -> case b of wild1 {
                        Language.PureScript.TypeChecker.Types.RecursiveBindingGroup
                        -> GHC.Types.True
                        Language.PureScript.TypeChecker.Types.NonRecursiveBindingGroup
                        -> GHC.Types.False }
                   Language.PureScript.TypeChecker.Types.NonRecursiveBindingGroup
                   -> case b of wild1 { DEFAULT -> GHC.Types.True } }) -}
56c10fc54900c7aac31df0259cf443e6
  $fOrdBindingGroupType_$ccompare ::
    Language.PureScript.TypeChecker.Types.BindingGroupType
    -> Language.PureScript.TypeChecker.Types.BindingGroupType
    -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.TypeChecker.Types.BindingGroupType)
                   (b :: Language.PureScript.TypeChecker.Types.BindingGroupType) ->
                 case a of wild {
                   Language.PureScript.TypeChecker.Types.RecursiveBindingGroup
                   -> case b of wild1 {
                        Language.PureScript.TypeChecker.Types.RecursiveBindingGroup
                        -> GHC.Types.EQ
                        Language.PureScript.TypeChecker.Types.NonRecursiveBindingGroup
                        -> GHC.Types.LT }
                   Language.PureScript.TypeChecker.Types.NonRecursiveBindingGroup
                   -> case b of wild1 {
                        Language.PureScript.TypeChecker.Types.RecursiveBindingGroup
                        -> GHC.Types.GT
                        Language.PureScript.TypeChecker.Types.NonRecursiveBindingGroup
                        -> GHC.Types.EQ } }) -}
56c10fc54900c7aac31df0259cf443e6
  $fOrdBindingGroupType_$cmax ::
    Language.PureScript.TypeChecker.Types.BindingGroupType
    -> Language.PureScript.TypeChecker.Types.BindingGroupType
    -> Language.PureScript.TypeChecker.Types.BindingGroupType
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.TypeChecker.Types.BindingGroupType)
                   (y :: Language.PureScript.TypeChecker.Types.BindingGroupType) ->
                 case y of wild {
                   Language.PureScript.TypeChecker.Types.RecursiveBindingGroup -> x
                   Language.PureScript.TypeChecker.Types.NonRecursiveBindingGroup
                   -> case x of wild1 { DEFAULT ->
                      Language.PureScript.TypeChecker.Types.NonRecursiveBindingGroup } }) -}
56c10fc54900c7aac31df0259cf443e6
  $fOrdBindingGroupType_$cmin ::
    Language.PureScript.TypeChecker.Types.BindingGroupType
    -> Language.PureScript.TypeChecker.Types.BindingGroupType
    -> Language.PureScript.TypeChecker.Types.BindingGroupType
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.TypeChecker.Types.BindingGroupType)
                   (y :: Language.PureScript.TypeChecker.Types.BindingGroupType) ->
                 case y of wild {
                   Language.PureScript.TypeChecker.Types.RecursiveBindingGroup
                   -> case x of wild1 { DEFAULT ->
                      Language.PureScript.TypeChecker.Types.RecursiveBindingGroup }
                   Language.PureScript.TypeChecker.Types.NonRecursiveBindingGroup
                   -> x }) -}
56c10fc54900c7aac31df0259cf443e6
  $fShowBindingGroupType ::
    GHC.Show.Show
      Language.PureScript.TypeChecker.Types.BindingGroupType
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.TypeChecker.Types.BindingGroupType
                  Language.PureScript.TypeChecker.Types.$fShowBindingGroupType_$cshowsPrec
                  Language.PureScript.TypeChecker.Types.$fShowBindingGroupType_$cshow
                  Language.PureScript.TypeChecker.Types.$fShowBindingGroupType_$cshowList -}
56c10fc54900c7aac31df0259cf443e6
  $fShowBindingGroupType1 ::
    Language.PureScript.TypeChecker.Types.BindingGroupType
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Language.PureScript.TypeChecker.Types.BindingGroupType)
                   (eta :: GHC.Base.String) ->
                 case ds of wild {
                   Language.PureScript.TypeChecker.Types.RecursiveBindingGroup
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           Language.PureScript.TypeChecker.Types.$fShowBindingGroupType4)
                        eta
                   Language.PureScript.TypeChecker.Types.NonRecursiveBindingGroup
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           Language.PureScript.TypeChecker.Types.$fShowBindingGroupType2)
                        eta }) -}
5929d8040f6d50276238697c5fd958e4
  $fShowBindingGroupType2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.TypeChecker.Types.$fShowBindingGroupType3) -}
a83236e1ab49354c7cb798479c426130
  $fShowBindingGroupType3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("NonRecursiveBindingGroup"#) -}
7fc6030069142b206379e93d081f4e28
  $fShowBindingGroupType4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.TypeChecker.Types.$fShowBindingGroupType5) -}
629cbf9c8abc721f7295d031c591b200
  $fShowBindingGroupType5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("RecursiveBindingGroup"#) -}
56c10fc54900c7aac31df0259cf443e6
  $fShowBindingGroupType_$cshow ::
    Language.PureScript.TypeChecker.Types.BindingGroupType
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.TypeChecker.Types.BindingGroupType) ->
                 case x of wild {
                   Language.PureScript.TypeChecker.Types.RecursiveBindingGroup
                   -> Language.PureScript.TypeChecker.Types.$fShowBindingGroupType4
                   Language.PureScript.TypeChecker.Types.NonRecursiveBindingGroup
                   -> Language.PureScript.TypeChecker.Types.$fShowBindingGroupType2 }) -}
56c10fc54900c7aac31df0259cf443e6
  $fShowBindingGroupType_$cshowList ::
    [Language.PureScript.TypeChecker.Types.BindingGroupType]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.TypeChecker.Types.BindingGroupType])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.TypeChecker.Types.BindingGroupType
                   Language.PureScript.TypeChecker.Types.$fShowBindingGroupType1
                   ls
                   s) -}
56c10fc54900c7aac31df0259cf443e6
  $fShowBindingGroupType_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.TypeChecker.Types.BindingGroupType
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (ds1 :: Language.PureScript.TypeChecker.Types.BindingGroupType)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   Language.PureScript.TypeChecker.Types.RecursiveBindingGroup
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           Language.PureScript.TypeChecker.Types.$fShowBindingGroupType4)
                        eta
                   Language.PureScript.TypeChecker.Types.NonRecursiveBindingGroup
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           Language.PureScript.TypeChecker.Types.$fShowBindingGroupType2)
                        eta }) -}
5e17c63fbcbdba76ec61df487bc16e1d
  $s$fEq(,) ::
    GHC.Classes.Eq
      (Language.PureScript.AST.SourcePos.SourceSpan,
       [Language.PureScript.Comments.Comment])
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.AST.SourcePos.SourceSpan,
                     [Language.PureScript.Comments.Comment])
                  (GHC.Classes.$fEq(,)_$c==
                     @ Language.PureScript.AST.SourcePos.SourceSpan
                     @ [Language.PureScript.Comments.Comment]
                     Language.PureScript.AST.SourcePos.$fEqSourceSpan
                     Language.PureScript.TypeChecker.Types.$s$fEq(,)_$s$fEq[])
                  Language.PureScript.TypeChecker.Types.$s$fEq(,)_$s$fEq(,)_$c/= -}
1e2718195b36290c353291d8af911af9
  $s$fEq(,)1 ::
    GHC.Classes.Eq
      ((Language.PureScript.AST.SourcePos.SourceSpan,
        [Language.PureScript.Comments.Comment]),
       GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ ((Language.PureScript.AST.SourcePos.SourceSpan,
                      [Language.PureScript.Comments.Comment]),
                     GHC.Types.Int)
                  (GHC.Classes.$fEq(,)_$c==
                     @ (Language.PureScript.AST.SourcePos.SourceSpan,
                        [Language.PureScript.Comments.Comment])
                     @ GHC.Types.Int
                     Language.PureScript.TypeChecker.Types.$s$fEq(,)
                     GHC.Classes.$fEqInt)
                  Language.PureScript.TypeChecker.Types.$s$fEq(,)_$s$fEq(,)_$c/=1 -}
b4944ac123a8e271bfcb0c545bbfc519
  $s$fEq(,)_$s$fEq(,)_$c/= ::
    (Language.PureScript.AST.SourcePos.SourceSpan,
     [Language.PureScript.Comments.Comment])
    -> (Language.PureScript.AST.SourcePos.SourceSpan,
        [Language.PureScript.Comments.Comment])
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SLL)L),1*U(1*U(1*U,1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U))),1*U)><S(S(SLL)L),1*U(1*U(1*U,1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U))),1*U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: (Language.PureScript.AST.SourcePos.SourceSpan,
                          [Language.PureScript.Comments.Comment]))
                   (y :: (Language.PureScript.AST.SourcePos.SourceSpan,
                          [Language.PureScript.Comments.Comment])) ->
                 case x of wild { (,) a1 a2 ->
                 case y of wild1 { (,) b1 b2 ->
                 case Language.PureScript.AST.SourcePos.$fEqSourceSpan_$c==
                        a1
                        b1 of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True
                   -> case GHC.Classes.$fEq[]_$c==
                             @ Language.PureScript.Comments.Comment
                             Language.PureScript.Comments.$fEqComment
                             a2
                             b2 of wild3 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True -> GHC.Types.False } } } }) -}
ab79d950b1781c5e11f2b772d78f1641
  $s$fEq(,)_$s$fEq(,)_$c/=1 ::
    ((Language.PureScript.AST.SourcePos.SourceSpan,
      [Language.PureScript.Comments.Comment]),
     GHC.Types.Int)
    -> ((Language.PureScript.AST.SourcePos.SourceSpan,
         [Language.PureScript.Comments.Comment]),
        GHC.Types.Int)
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S(SLL)L)L),1*U(1*U(1*U(1*U,1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U))),1*U),1*U(U))><S(S(S(SLL)L)L),1*U(1*U(1*U(1*U,1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U))),1*U),1*U(U))>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: ((Language.PureScript.AST.SourcePos.SourceSpan,
                           [Language.PureScript.Comments.Comment]),
                          GHC.Types.Int))
                   (y :: ((Language.PureScript.AST.SourcePos.SourceSpan,
                           [Language.PureScript.Comments.Comment]),
                          GHC.Types.Int)) ->
                 case x of wild { (,) a1 a2 ->
                 case y of wild1 { (,) b1 b2 ->
                 case GHC.Classes.$fEq(,)_$c==
                        @ Language.PureScript.AST.SourcePos.SourceSpan
                        @ [Language.PureScript.Comments.Comment]
                        Language.PureScript.AST.SourcePos.$fEqSourceSpan
                        Language.PureScript.TypeChecker.Types.$s$fEq(,)_$s$fEq[]
                        a1
                        b1 of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True
                   -> case GHC.Classes.eqInt a2 b2 of wild3 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True -> GHC.Types.False } } } }) -}
fda99aba312eb54c12e6ec5ac6c4311b
  $s$fEq(,)_$s$fEq[] ::
    GHC.Classes.Eq [Language.PureScript.Comments.Comment]
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ [Language.PureScript.Comments.Comment]
                  (GHC.Classes.$fEq[]_$c==
                     @ Language.PureScript.Comments.Comment
                     Language.PureScript.Comments.$fEqComment)
                  Language.PureScript.TypeChecker.Types.$s$fEq(,)_$s$fEq[]_$c/= -}
23f901fa65f331cd80e73b0fb3021d2b
  $s$fEq(,)_$s$fEq[]_$c/= ::
    [Language.PureScript.Comments.Comment]
    -> [Language.PureScript.Comments.Comment] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: [Language.PureScript.Comments.Comment])
                   (y :: [Language.PureScript.Comments.Comment]) ->
                 case GHC.Classes.$fEq[]_$c==
                        @ Language.PureScript.Comments.Comment
                        Language.PureScript.Comments.$fEqComment
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
40ca8219776ea47dde3cf904dccc0c66
  $s$fEqQualified2 ::
    GHC.Classes.Eq
      (Language.PureScript.Names.Qualified
         Language.PureScript.Names.Ident)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.Qualified
                       Language.PureScript.Names.Ident)
                  (Language.PureScript.Names.$fEqQualified_$c==
                     @ Language.PureScript.Names.Ident
                     Language.PureScript.Names.$fEqIdent)
                  Language.PureScript.TypeChecker.Types.$s$fEqQualified_$s$fEqQualified_$c/=2 -}
0e193082de0a79c0c884c8e115824ded
  $s$fEqQualified_$s$fEqQualified_$c/=2 ::
    Language.PureScript.Names.Qualified Language.PureScript.Names.Ident
    -> Language.PureScript.Names.Qualified
         Language.PureScript.Names.Ident
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Names.Qualified
                           Language.PureScript.Names.Ident)
                   (y :: Language.PureScript.Names.Qualified
                           Language.PureScript.Names.Ident) ->
                 case Language.PureScript.Names.$fEqQualified_$c==
                        @ Language.PureScript.Names.Ident
                        Language.PureScript.Names.$fEqIdent
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
027423fe1aa32ab5f0e5589619bac864
  $s$fOrd(,) ::
    GHC.Classes.Ord
      (Language.PureScript.AST.SourcePos.SourceSpan,
       [Language.PureScript.Comments.Comment])
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.AST.SourcePos.SourceSpan,
                     [Language.PureScript.Comments.Comment])
                  Language.PureScript.TypeChecker.Types.$s$fEq(,)
                  (GHC.Classes.$fOrd(,)_$ccompare
                     @ Language.PureScript.AST.SourcePos.SourceSpan
                     @ [Language.PureScript.Comments.Comment]
                     Language.PureScript.AST.SourcePos.$fOrdSourceSpan
                     Language.PureScript.TypeChecker.Types.$s$fOrd(,)_$s$fOrd[])
                  (GHC.Classes.$fOrd(,)_$c<
                     @ Language.PureScript.AST.SourcePos.SourceSpan
                     @ [Language.PureScript.Comments.Comment]
                     Language.PureScript.AST.SourcePos.$fOrdSourceSpan
                     Language.PureScript.TypeChecker.Types.$s$fOrd(,)_$s$fOrd[])
                  (GHC.Classes.$fOrd(,)_$c<=
                     @ Language.PureScript.AST.SourcePos.SourceSpan
                     @ [Language.PureScript.Comments.Comment]
                     Language.PureScript.AST.SourcePos.$fOrdSourceSpan
                     Language.PureScript.TypeChecker.Types.$s$fOrd(,)_$s$fOrd[])
                  (\ (a1 :: (Language.PureScript.AST.SourcePos.SourceSpan,
                             [Language.PureScript.Comments.Comment]))
                     (b1 :: (Language.PureScript.AST.SourcePos.SourceSpan,
                             [Language.PureScript.Comments.Comment])) ->
                   GHC.Classes.$fOrd(,)_$c<
                     @ Language.PureScript.AST.SourcePos.SourceSpan
                     @ [Language.PureScript.Comments.Comment]
                     Language.PureScript.AST.SourcePos.$fOrdSourceSpan
                     Language.PureScript.TypeChecker.Types.$s$fOrd(,)_$s$fOrd[]
                     b1
                     a1)
                  (GHC.Classes.$fOrd(,)_$c>=
                     @ Language.PureScript.AST.SourcePos.SourceSpan
                     @ [Language.PureScript.Comments.Comment]
                     Language.PureScript.AST.SourcePos.$fOrdSourceSpan
                     Language.PureScript.TypeChecker.Types.$s$fOrd(,)_$s$fOrd[])
                  (GHC.Classes.$fOrd(,)_$cmax
                     @ Language.PureScript.AST.SourcePos.SourceSpan
                     @ [Language.PureScript.Comments.Comment]
                     Language.PureScript.AST.SourcePos.$fOrdSourceSpan
                     Language.PureScript.TypeChecker.Types.$s$fOrd(,)_$s$fOrd[])
                  (GHC.Classes.$fOrd(,)_$cmin
                     @ Language.PureScript.AST.SourcePos.SourceSpan
                     @ [Language.PureScript.Comments.Comment]
                     Language.PureScript.AST.SourcePos.$fOrdSourceSpan
                     Language.PureScript.TypeChecker.Types.$s$fOrd(,)_$s$fOrd[]) -}
89613a9e3e3e339902a2a7867ba816e6
  $s$fOrd(,)1 ::
    GHC.Classes.Ord
      ((Language.PureScript.AST.SourcePos.SourceSpan,
        [Language.PureScript.Comments.Comment]),
       GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ ((Language.PureScript.AST.SourcePos.SourceSpan,
                      [Language.PureScript.Comments.Comment]),
                     GHC.Types.Int)
                  Language.PureScript.TypeChecker.Types.$s$fEq(,)1
                  (GHC.Classes.$fOrd(,)_$ccompare
                     @ (Language.PureScript.AST.SourcePos.SourceSpan,
                        [Language.PureScript.Comments.Comment])
                     @ GHC.Types.Int
                     Language.PureScript.TypeChecker.Types.$s$fOrd(,)
                     GHC.Classes.$fOrdInt)
                  (GHC.Classes.$fOrd(,)_$c<
                     @ (Language.PureScript.AST.SourcePos.SourceSpan,
                        [Language.PureScript.Comments.Comment])
                     @ GHC.Types.Int
                     Language.PureScript.TypeChecker.Types.$s$fOrd(,)
                     GHC.Classes.$fOrdInt)
                  (GHC.Classes.$fOrd(,)_$c<=
                     @ (Language.PureScript.AST.SourcePos.SourceSpan,
                        [Language.PureScript.Comments.Comment])
                     @ GHC.Types.Int
                     Language.PureScript.TypeChecker.Types.$s$fOrd(,)
                     GHC.Classes.$fOrdInt)
                  (\ (a1 :: ((Language.PureScript.AST.SourcePos.SourceSpan,
                              [Language.PureScript.Comments.Comment]),
                             GHC.Types.Int))
                     (b1 :: ((Language.PureScript.AST.SourcePos.SourceSpan,
                              [Language.PureScript.Comments.Comment]),
                             GHC.Types.Int)) ->
                   GHC.Classes.$fOrd(,)_$c<
                     @ (Language.PureScript.AST.SourcePos.SourceSpan,
                        [Language.PureScript.Comments.Comment])
                     @ GHC.Types.Int
                     Language.PureScript.TypeChecker.Types.$s$fOrd(,)
                     GHC.Classes.$fOrdInt
                     b1
                     a1)
                  (GHC.Classes.$fOrd(,)_$c>=
                     @ (Language.PureScript.AST.SourcePos.SourceSpan,
                        [Language.PureScript.Comments.Comment])
                     @ GHC.Types.Int
                     Language.PureScript.TypeChecker.Types.$s$fOrd(,)
                     GHC.Classes.$fOrdInt)
                  (GHC.Classes.$fOrd(,)_$cmax
                     @ (Language.PureScript.AST.SourcePos.SourceSpan,
                        [Language.PureScript.Comments.Comment])
                     @ GHC.Types.Int
                     Language.PureScript.TypeChecker.Types.$s$fOrd(,)
                     GHC.Classes.$fOrdInt)
                  (GHC.Classes.$fOrd(,)_$cmin
                     @ (Language.PureScript.AST.SourcePos.SourceSpan,
                        [Language.PureScript.Comments.Comment])
                     @ GHC.Types.Int
                     Language.PureScript.TypeChecker.Types.$s$fOrd(,)
                     GHC.Classes.$fOrdInt) -}
f39fa0919823828e0f8f00d3e66b9fcc
  $s$fOrd(,)_$s$fOrd[] ::
    GHC.Classes.Ord [Language.PureScript.Comments.Comment]
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ [Language.PureScript.Comments.Comment]
                  Language.PureScript.TypeChecker.Types.$s$fEq(,)_$s$fEq[]
                  (GHC.Classes.$fOrd[]_$ccompare
                     @ Language.PureScript.Comments.Comment
                     Language.PureScript.Comments.$fOrdComment)
                  (\ (x :: [Language.PureScript.Comments.Comment])
                     (y :: [Language.PureScript.Comments.Comment]) ->
                   case GHC.Classes.$fOrd[]_$ccompare
                          @ Language.PureScript.Comments.Comment
                          Language.PureScript.Comments.$fOrdComment
                          x
                          y of wild {
                     DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True })
                  (\ (x :: [Language.PureScript.Comments.Comment])
                     (y :: [Language.PureScript.Comments.Comment]) ->
                   case GHC.Classes.$fOrd[]_$ccompare
                          @ Language.PureScript.Comments.Comment
                          Language.PureScript.Comments.$fOrdComment
                          x
                          y of wild {
                     DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False })
                  (\ (x :: [Language.PureScript.Comments.Comment])
                     (y :: [Language.PureScript.Comments.Comment]) ->
                   case GHC.Classes.$fOrd[]_$ccompare
                          @ Language.PureScript.Comments.Comment
                          Language.PureScript.Comments.$fOrdComment
                          x
                          y of wild {
                     DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True })
                  (\ (x :: [Language.PureScript.Comments.Comment])
                     (y :: [Language.PureScript.Comments.Comment]) ->
                   case GHC.Classes.$fOrd[]_$ccompare
                          @ Language.PureScript.Comments.Comment
                          Language.PureScript.Comments.$fOrdComment
                          x
                          y of wild {
                     DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False })
                  (\ (x :: [Language.PureScript.Comments.Comment])
                     (y :: [Language.PureScript.Comments.Comment]) ->
                   case GHC.Classes.$fOrd[]_$ccompare
                          @ Language.PureScript.Comments.Comment
                          Language.PureScript.Comments.$fOrdComment
                          x
                          y of wild {
                     DEFAULT -> y GHC.Types.GT -> x })
                  (\ (x :: [Language.PureScript.Comments.Comment])
                     (y :: [Language.PureScript.Comments.Comment]) ->
                   case GHC.Classes.$fOrd[]_$ccompare
                          @ Language.PureScript.Comments.Comment
                          Language.PureScript.Comments.$fOrdComment
                          x
                          y of wild {
                     DEFAULT -> x GHC.Types.GT -> y }) -}
599288dcfdba0696b0393912858eade5
  $s$fOrdQualified2 ::
    GHC.Classes.Ord
      (Language.PureScript.Names.Qualified
         Language.PureScript.Names.Ident)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.Qualified
                       Language.PureScript.Names.Ident)
                  Language.PureScript.TypeChecker.Types.$s$fEqQualified2
                  (Language.PureScript.Names.$fOrdQualified_$ccompare
                     @ Language.PureScript.Names.Ident
                     Language.PureScript.Names.$fOrdIdent)
                  (Language.PureScript.Names.$fOrdQualified_$c<
                     @ Language.PureScript.Names.Ident
                     Language.PureScript.Names.$fOrdIdent)
                  (\ (a1 :: Language.PureScript.Names.Qualified
                              Language.PureScript.Names.Ident)
                     (b :: Language.PureScript.Names.Qualified
                             Language.PureScript.Names.Ident) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ Language.PureScript.Names.Ident
                          Language.PureScript.Names.$fOrdIdent
                          b
                          a1 of wild {
                     GHC.Types.False -> GHC.Types.True
                     GHC.Types.True -> GHC.Types.False })
                  (\ (a1 :: Language.PureScript.Names.Qualified
                              Language.PureScript.Names.Ident)
                     (b :: Language.PureScript.Names.Qualified
                             Language.PureScript.Names.Ident) ->
                   Language.PureScript.Names.$fOrdQualified_$c<
                     @ Language.PureScript.Names.Ident
                     Language.PureScript.Names.$fOrdIdent
                     b
                     a1)
                  (\ (a1 :: Language.PureScript.Names.Qualified
                              Language.PureScript.Names.Ident)
                     (b :: Language.PureScript.Names.Qualified
                             Language.PureScript.Names.Ident) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ Language.PureScript.Names.Ident
                          Language.PureScript.Names.$fOrdIdent
                          a1
                          b of wild {
                     GHC.Types.False -> GHC.Types.True
                     GHC.Types.True -> GHC.Types.False })
                  (\ (x :: Language.PureScript.Names.Qualified
                             Language.PureScript.Names.Ident)
                     (y :: Language.PureScript.Names.Qualified
                             Language.PureScript.Names.Ident) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ Language.PureScript.Names.Ident
                          Language.PureScript.Names.$fOrdIdent
                          y
                          x of wild {
                     GHC.Types.False -> y GHC.Types.True -> x })
                  (\ (x :: Language.PureScript.Names.Qualified
                             Language.PureScript.Names.Ident)
                     (y :: Language.PureScript.Names.Qualified
                             Language.PureScript.Names.Ident) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ Language.PureScript.Names.Ident
                          Language.PureScript.Names.$fOrdIdent
                          y
                          x of wild {
                     GHC.Types.False -> x GHC.Types.True -> y }) -}
32b567cd8537004929f5839c308cb46d
  $s$wsplitS ::
    GHC.Types.Int
    -> Data.Set.Internal.Set GHC.Types.Int
    -> (# Data.Set.Internal.Set GHC.Types.Int,
          Data.Set.Internal.Set GHC.Types.Int #)
  {- Arity: 2, Strictness: <L,1*U(U)><S,1*U>, Inline: [~] -}
82b39876b0c6901a1f5d05e08c0e398d
  $s$wsplit_$s$wpoly_go13 ::
    GHC.Prim.Int#
    -> Language.PureScript.Names.Ident
    -> a
    -> Data.Map.Internal.Map Language.PureScript.Names.Ident a
    -> Data.Map.Internal.Map Language.PureScript.Names.Ident a
    -> Language.PureScript.Names.Ident
    -> (# Data.Map.Internal.Map Language.PureScript.Names.Ident a,
          Data.Map.Internal.Map Language.PureScript.Names.Ident a #)
  {- Arity: 6, Strictness: <L,A><S,U><L,U><L,U><L,U><S,U> -}
64f302e81cece7265e2d7e7618a9cf52
  $sfromList ::
    [GHC.Types.Int] -> Data.Set.Internal.Set GHC.Types.Int
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [GHC.Types.Int]) ->
                 case ds of wild {
                   [] -> Data.Set.Internal.Tip @ GHC.Types.Int
                   : x ds1
                   -> case ds1 of wild1 {
                        []
                        -> case x of dt { GHC.Types.I# ipv ->
                           Data.Set.Internal.Bin
                             @ GHC.Types.Int
                             1#
                             dt
                             (Data.Set.Internal.Tip @ GHC.Types.Int)
                             (Data.Set.Internal.Tip @ GHC.Types.Int) }
                        : ipv ipv1
                        -> case x of wild2 { GHC.Types.I# x1 ->
                           case ipv of wild3 { GHC.Types.I# y ->
                           case GHC.Prim.>=# x1 y of lwild {
                             DEFAULT
                             -> Language.PureScript.TypeChecker.Types.$sfromList_$s$wgo3
                                  y
                                  ipv1
                                  (Data.Set.Internal.Bin
                                     @ GHC.Types.Int
                                     1#
                                     wild2
                                     (Data.Set.Internal.Tip @ GHC.Types.Int)
                                     (Data.Set.Internal.Tip @ GHC.Types.Int))
                                  1#
                             1#
                             -> Language.PureScript.TypeChecker.Types.$sfromList_$sgo4
                                  y
                                  ipv1
                                  (Data.Set.Internal.Bin
                                     @ GHC.Types.Int
                                     1#
                                     wild2
                                     (Data.Set.Internal.Tip @ GHC.Types.Int)
                                     (Data.Set.Internal.Tip @ GHC.Types.Int)) } } } } }) -}
6cdbdb38590cca0d125e9008639aaee3
  $sfromList1 ::
    [(Language.PureScript.Names.Qualified
        Language.PureScript.Names.Ident,
      a)]
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            Language.PureScript.Names.Ident)
         a
  {- Arity: 1, Strictness: <S,1*U> -}
8d86b5fee02ef86cf0ea4e5fc8d1fdfa
  $sfromList_$s$wgo3 ::
    GHC.Prim.Int#
    -> [GHC.Types.Int]
    -> Data.Set.Internal.Set GHC.Types.Int
    -> GHC.Prim.Int#
    -> Data.Set.Internal.Set GHC.Types.Int
  {- Arity: 4, Strictness: <S,U><S,1*U><S,1*U><L,U> -}
cf68da0bae8f820b49925ef0e2f67d06
  $sfromList_$sgo4 ::
    GHC.Prim.Int#
    -> [GHC.Types.Int]
    -> Data.Set.Internal.Set GHC.Types.Int
    -> Data.Set.Internal.Set GHC.Types.Int
  {- Arity: 3, Strictness: <S,U><S,1*U><S,1*U> -}
ccb78b1376761fce23bc3f5caf7f4945
  $sinsertR_$sgo13 ::
    Language.PureScript.Names.Ident
    -> Language.PureScript.Names.Ident
    -> a1
    -> Data.Map.Internal.Map Language.PureScript.Names.Ident a1
    -> Data.Map.Internal.Map Language.PureScript.Names.Ident a1
  {- Arity: 4, Strictness: <L,U><S,1*U><L,U><S,1*U> -}
c23f3fbf7d86bd0532223dc5b4bb39e3
  $sinsert_$s$sgo13 ::
    GHC.Prim.Int#
    -> Language.PureScript.Names.Ident
    -> a
    -> Data.Map.Internal.Map Language.PureScript.Names.Ident a
    -> Data.Map.Internal.Map Language.PureScript.Names.Ident a
    -> a
    -> Language.PureScript.Names.Ident
    -> Language.PureScript.Names.Ident
    -> Data.Map.Internal.Map Language.PureScript.Names.Ident a
  {- Arity: 8,
     Strictness: <L,U><S,U><L,U><L,U><L,U><L,U><S,1*U><L,U> -}
96b9b592af590dd0f39511773a982f2c
  $sinsert_$s$w$sgo3 ::
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Set.Internal.Set GHC.Types.Int
    -> Data.Set.Internal.Set GHC.Types.Int
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Data.Set.Internal.Set GHC.Types.Int
  {- Arity: 6, Strictness: <L,U><S,U><L,U><L,U><S,U><L,U> -}
286694405c4e33c08acb6bc0581ea47e
  $sinsert_$sgo13 ::
    Language.PureScript.Names.Ident
    -> Language.PureScript.Names.Ident
    -> a1
    -> Data.Map.Internal.Map Language.PureScript.Names.Ident a1
    -> Data.Map.Internal.Map Language.PureScript.Names.Ident a1
  {- Arity: 4, Strictness: <L,U><S,1*U><L,U><S,1*U> -}
401caf6c8a3ca5218ba973174cd07ca1
  $sinsert_go13 ::
    GHC.Classes.Ord k1 =>
    k1
    -> k1
    -> a1
    -> Data.Map.Internal.Map k1 a1
    -> Data.Map.Internal.Map k1 a1
  {- Arity: 5,
     Strictness: <L,U(A,C(C1(U)),A,A,A,A,A,A)><L,U><S,1*U><L,U><S,1*U> -}
7a5f32cf58c888b8d7cc1b289e5bf8b7
  $slookup_$s$wpoly_go1 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ConstructorName))
      a
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ConstructorName
    -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U(U,U,U)> -}
6b5d6b8498ac9fb6d3fbbd78dd3cabd8
  $slookup_$s$wpoly_go13 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ConstructorName))
      a
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ConstructorName
    -> Language.PureScript.Names.ModuleName
    -> GHC.Base.Maybe a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U(U,U,U)><L,U> -}
f81dc8ba663a007102187d0e869211ae
  $slookup_$s$wpoly_go2 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ConstructorName))
      a
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> ((Data.Text.Internal.Text :: *)
        ~R# (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ConstructorName :: *)) =>
       GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S,1*U><L,U><L,U><L,U><L,U> -}
8d8a6d3a59cd2ea08e6379a6d64867aa
  $slookup_$s$wpoly_go3 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName))
      a
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> Language.PureScript.Names.ModuleName
    -> GHC.Base.Maybe a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U(U,U,U)><L,U> -}
e8108739f7884615d4e6cb7cb31a8887
  $slookup_$s$wpoly_go4 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName))
      a
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U(U,U,U)> -}
753fa576318cbd9df08b5afa92284830
  $slookup_$s$wpoly_go5 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName))
      a
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> ((Data.Text.Internal.Text :: *)
        ~R# (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName :: *)) =>
       GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S,1*U><L,U><L,U><L,U><L,U> -}
ab240efe5e80a125dd2fefe233b5cb5a
  $sunion ::
    Data.Set.Internal.Set GHC.Types.Int
    -> Data.Set.Internal.Set GHC.Types.Int
    -> Data.Set.Internal.Set GHC.Types.Int
  {- Arity: 2, Strictness: <S,1*U><S,1*U>, Inline: [~] -}
ebb7b5601a4ab52551476c143f437966
  $sunion1 ::
    Data.Map.Internal.Map Language.PureScript.Names.Ident a
    -> Data.Map.Internal.Map Language.PureScript.Names.Ident a
    -> Data.Map.Internal.Map Language.PureScript.Names.Ident a
  {- Arity: 2, Strictness: <S,1*U><S,1*U>, Inline: [~] -}
ce8072577d19913b3acaf679425528bb
  $tc'NonRecursiveBindingGroup :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7617736088017482186##
                   8351994138490424843##
                   Language.PureScript.TypeChecker.Types.$trModule
                   Language.PureScript.TypeChecker.Types.$tc'NonRecursiveBindingGroup2
                   0#
                   Language.PureScript.TypeChecker.Types.$tc'NonRecursiveBindingGroup1) -}
d62ec2cd8e9fcd6b2430c64fed749cc0
  $tc'NonRecursiveBindingGroup1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
59737c26027f48a152ca960c6cafdb52
  $tc'NonRecursiveBindingGroup2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.TypeChecker.Types.$tc'NonRecursiveBindingGroup3) -}
26646fd770e14d4ca9eba4d1422c6c3b
  $tc'NonRecursiveBindingGroup3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'NonRecursiveBindingGroup"#) -}
c8fb750695f04e307fdd42672a9c1afb
  $tc'RecursiveBindingGroup :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3748981900162400798##
                   10891031992862430383##
                   Language.PureScript.TypeChecker.Types.$trModule
                   Language.PureScript.TypeChecker.Types.$tc'RecursiveBindingGroup1
                   0#
                   Language.PureScript.TypeChecker.Types.$tc'NonRecursiveBindingGroup1) -}
6926835a6edd1bdc75de50b5fcda69b7
  $tc'RecursiveBindingGroup1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.TypeChecker.Types.$tc'RecursiveBindingGroup2) -}
d3dfeb958e20425c40a6b7f354c1e148
  $tc'RecursiveBindingGroup2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'RecursiveBindingGroup"#) -}
b868720c1fc4f580c35cd306791e6ab9
  $tc'SplitBindingGroup :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7001997279351378502##
                   10979422272131640199##
                   Language.PureScript.TypeChecker.Types.$trModule
                   Language.PureScript.TypeChecker.Types.$tc'SplitBindingGroup2
                   0#
                   Language.PureScript.TypeChecker.Types.$tc'SplitBindingGroup1) -}
50757293b05e78ed38bfb08f03442f60
  $tc'SplitBindingGroup1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
131ea7813c56fbbfbc3503c12f3a359e
  $tc'SplitBindingGroup2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.TypeChecker.Types.$tc'SplitBindingGroup3) -}
765bd29668d234c4fdb4714744e0c4a5
  $tc'SplitBindingGroup3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'SplitBindingGroup"#) -}
575ad7f16ff0e888402adfbfb312371e
  $tcBindingGroupType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5284784285780034506##
                   1725387553610111201##
                   Language.PureScript.TypeChecker.Types.$trModule
                   Language.PureScript.TypeChecker.Types.$tcBindingGroupType1
                   0#
                   GHC.Types.krep$*) -}
883155d1dd8ddd7a49950c87b7618ca0
  $tcBindingGroupType1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.TypeChecker.Types.$tcBindingGroupType2) -}
7109c8ac54b5dfaa8906871211e427dd
  $tcBindingGroupType2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("BindingGroupType"#) -}
6367c81fea689ff8879777bbc421844f
  $tcSplitBindingGroup :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16201608329289619027##
                   8010845302963027458##
                   Language.PureScript.TypeChecker.Types.$trModule
                   Language.PureScript.TypeChecker.Types.$tcSplitBindingGroup1
                   0#
                   GHC.Types.krep$*) -}
5d7ee3fc3ae42cbe6e69dfe5a8095acf
  $tcSplitBindingGroup1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.TypeChecker.Types.$tcSplitBindingGroup2) -}
f1d99052994b6302d4ded01321438178
  $tcSplitBindingGroup2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("SplitBindingGroup"#) -}
4cb1e64fceb64cbaf13353d5f26fb094
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Language.PureScript.TypeChecker.Types.$trModule3
                   Language.PureScript.TypeChecker.Types.$trModule1) -}
41191903d633a8174f300b2e3ba3fb00
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.TypeChecker.Types.$trModule2) -}
f592e248c2c7d4c2099daf153a2dddec
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Language.PureScript.TypeChecker.Types"#) -}
ca95a99c23aac53f3bd25e3ce24bee86
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.TypeChecker.Types.$trModule4) -}
817a5f8b97d3e5e56696e4d72de5d3ff
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"#) -}
0df225354d0a0f6426c17ec8ecd98b15
  $w$sgo1 ::
    GHC.Types.Int
    -> GHC.Prim.Int#
    -> Data.Set.Internal.Set GHC.Types.Int
    -> Data.Set.Internal.Set GHC.Types.Int
  {- Arity: 3, Strictness: <L,U><L,U><S,1*U>, Inline: [0] -}
282a1b855f1c3e7358389a5173807772
  $w$sgo3 ::
    GHC.Types.Int
    -> GHC.Prim.Int#
    -> Data.Set.Internal.Set GHC.Types.Int
    -> Data.Set.Internal.Set GHC.Types.Int
  {- Arity: 3, Strictness: <L,U><L,U><S,1*U>, Inline: [0] -}
5ebe936f3d0e298e8f09b708de19ebbf
  $wgo3 ::
    GHC.Prim.Int#
    -> Data.Set.Internal.Set GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>, Inline: [0] -}
84e2efa0cc14cac0041fac2ad73b0111
  $wpoly_go1 ::
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ConstructorName
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ConstructorName))
         a
    -> GHC.Base.Maybe a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U><L,1*U(U,U,U)><S,1*U>, Inline: [0],
     Unfolding: (\ @ a
                   (ww :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww1 :: Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ConstructorName)
                   (w :: Data.Map.Internal.Map
                           (Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.ConstructorName))
                           a) ->
                 case w of wild {
                   Data.Map.Internal.Bin ipv ipv1 ipv2 ipv3 ipv4
                   -> case ipv1 of ww3 { Language.PureScript.Names.Qualified ww4 ww5 ->
                      case ww of wild1 {
                        GHC.Base.Nothing
                        -> case ww4 of wild2 {
                             GHC.Base.Nothing
                             -> case ww1
                                       `cast`
                                     (Language.PureScript.Names.N:ProperName[0]
                                          <'Language.PureScript.Names.ConstructorName>_P) of ww2 { Data.Text.Internal.Text ww6 ww7 ww8 ->
                                case ww5
                                       `cast`
                                     (Language.PureScript.Names.N:ProperName[0]
                                          <'Language.PureScript.Names.ConstructorName>_P) of ww9 { Data.Text.Internal.Text ww10 ww11 ww12 ->
                                case Data.Text.$w$ccompare ww6 ww7 ww8 ww10 ww11 ww12 of wild3 {
                                  GHC.Types.LT
                                  -> Language.PureScript.TypeChecker.Types.$slookup_$s$wpoly_go2
                                       @ a
                                       ipv3
                                       ww6
                                       ww7
                                       ww8
                                       @~ (Sym (Language.PureScript.Names.N:ProperName[0]
                                                    <'Language.PureScript.Names.ConstructorName>_P))
                                  GHC.Types.EQ -> GHC.Base.Just @ a ipv2
                                  GHC.Types.GT
                                  -> Language.PureScript.TypeChecker.Types.$slookup_$s$wpoly_go2
                                       @ a
                                       ipv4
                                       ww6
                                       ww7
                                       ww8
                                       @~ (Sym (Language.PureScript.Names.N:ProperName[0]
                                                    <'Language.PureScript.Names.ConstructorName>_P)) } } }
                             GHC.Base.Just ipv7
                             -> Language.PureScript.TypeChecker.Types.$slookup_$s$wpoly_go1
                                  @ a
                                  ipv3
                                  ww1 }
                        GHC.Base.Just a2
                        -> case ww4 of wild2 {
                             GHC.Base.Nothing
                             -> Language.PureScript.TypeChecker.Types.$slookup_$s$wpoly_go13
                                  @ a
                                  ipv4
                                  ww1
                                  a2
                             GHC.Base.Just b1
                             -> case GHC.Classes.$fOrd[]_$ccompare
                                       @ (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.Namespace)
                                       (Language.PureScript.Names.$fOrdProperName
                                          @ 'Language.PureScript.Names.Namespace)
                                       a2 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                       b1
                                         `cast`
                                       (Language.PureScript.Names.N:ModuleName[0]) of wild3 {
                                  GHC.Types.LT
                                  -> Language.PureScript.TypeChecker.Types.$slookup_$s$wpoly_go13
                                       @ a
                                       ipv3
                                       ww1
                                       a2
                                  GHC.Types.EQ
                                  -> case ww1
                                            `cast`
                                          (Language.PureScript.Names.N:ProperName[0]
                                               <'Language.PureScript.Names.ConstructorName>_P) of ww2 { Data.Text.Internal.Text ww6 ww7 ww8 ->
                                     case ww5
                                            `cast`
                                          (Language.PureScript.Names.N:ProperName[0]
                                               <'Language.PureScript.Names.ConstructorName>_P) of ww9 { Data.Text.Internal.Text ww10 ww11 ww12 ->
                                     case Data.Text.$w$ccompare
                                            ww6
                                            ww7
                                            ww8
                                            ww10
                                            ww11
                                            ww12 of wild4 {
                                       GHC.Types.LT
                                       -> Language.PureScript.TypeChecker.Types.$slookup_$s$wpoly_go13
                                            @ a
                                            ipv3
                                            ww2
                                              `cast`
                                            (Sym (Language.PureScript.Names.N:ProperName[0]
                                                      <'Language.PureScript.Names.ConstructorName>_P))
                                            a2
                                       GHC.Types.EQ -> GHC.Base.Just @ a ipv2
                                       GHC.Types.GT
                                       -> Language.PureScript.TypeChecker.Types.$slookup_$s$wpoly_go13
                                            @ a
                                            ipv4
                                            ww2
                                              `cast`
                                            (Sym (Language.PureScript.Names.N:ProperName[0]
                                                      <'Language.PureScript.Names.ConstructorName>_P))
                                            a2 } } }
                                  GHC.Types.GT
                                  -> Language.PureScript.TypeChecker.Types.$slookup_$s$wpoly_go13
                                       @ a
                                       ipv4
                                       ww1
                                       a2 } } } }
                   Data.Map.Internal.Tip -> GHC.Base.Nothing @ a }) -}
234a97c5306404795343c478bf17d1bb
  $wpoly_go13 ::
    Language.PureScript.Names.Ident
    -> Data.Map.Internal.Map Language.PureScript.Names.Ident a
    -> (# Data.Map.Internal.Map Language.PureScript.Names.Ident a,
          Data.Map.Internal.Map Language.PureScript.Names.Ident a #)
  {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [0] -}
415fe1241d7e6b7ff68e73e2a1fc5bc3
  $wpoly_go2 ::
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName))
         a
    -> GHC.Base.Maybe a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U><L,1*U(U,U,U)><S,1*U>, Inline: [0],
     Unfolding: (\ @ a
                   (ww :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww1 :: Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ClassName)
                   (w :: Data.Map.Internal.Map
                           (Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.ClassName))
                           a) ->
                 case w of wild {
                   Data.Map.Internal.Bin ipv ipv1 ipv2 ipv3 ipv4
                   -> case ipv1 of ww3 { Language.PureScript.Names.Qualified ww4 ww5 ->
                      case ww of wild1 {
                        GHC.Base.Nothing
                        -> case ww4 of wild2 {
                             GHC.Base.Nothing
                             -> case ww1
                                       `cast`
                                     (Language.PureScript.Names.N:ProperName[0]
                                          <'Language.PureScript.Names.ClassName>_P) of ww2 { Data.Text.Internal.Text ww6 ww7 ww8 ->
                                case ww5
                                       `cast`
                                     (Language.PureScript.Names.N:ProperName[0]
                                          <'Language.PureScript.Names.ClassName>_P) of ww9 { Data.Text.Internal.Text ww10 ww11 ww12 ->
                                case Data.Text.$w$ccompare ww6 ww7 ww8 ww10 ww11 ww12 of wild3 {
                                  GHC.Types.LT
                                  -> Language.PureScript.TypeChecker.Types.$slookup_$s$wpoly_go5
                                       @ a
                                       ipv3
                                       ww6
                                       ww7
                                       ww8
                                       @~ (Sym (Language.PureScript.Names.N:ProperName[0]
                                                    <'Language.PureScript.Names.ClassName>_P))
                                  GHC.Types.EQ -> GHC.Base.Just @ a ipv2
                                  GHC.Types.GT
                                  -> Language.PureScript.TypeChecker.Types.$slookup_$s$wpoly_go5
                                       @ a
                                       ipv4
                                       ww6
                                       ww7
                                       ww8
                                       @~ (Sym (Language.PureScript.Names.N:ProperName[0]
                                                    <'Language.PureScript.Names.ClassName>_P)) } } }
                             GHC.Base.Just ipv7
                             -> Language.PureScript.TypeChecker.Types.$slookup_$s$wpoly_go4
                                  @ a
                                  ipv3
                                  ww1 }
                        GHC.Base.Just a2
                        -> case ww4 of wild2 {
                             GHC.Base.Nothing
                             -> Language.PureScript.TypeChecker.Types.$slookup_$s$wpoly_go3
                                  @ a
                                  ipv4
                                  ww1
                                  a2
                             GHC.Base.Just b1
                             -> case GHC.Classes.$fOrd[]_$ccompare
                                       @ (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.Namespace)
                                       (Language.PureScript.Names.$fOrdProperName
                                          @ 'Language.PureScript.Names.Namespace)
                                       a2 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                       b1
                                         `cast`
                                       (Language.PureScript.Names.N:ModuleName[0]) of wild3 {
                                  GHC.Types.LT
                                  -> Language.PureScript.TypeChecker.Types.$slookup_$s$wpoly_go3
                                       @ a
                                       ipv3
                                       ww1
                                       a2
                                  GHC.Types.EQ
                                  -> case ww1
                                            `cast`
                                          (Language.PureScript.Names.N:ProperName[0]
                                               <'Language.PureScript.Names.ClassName>_P) of ww2 { Data.Text.Internal.Text ww6 ww7 ww8 ->
                                     case ww5
                                            `cast`
                                          (Language.PureScript.Names.N:ProperName[0]
                                               <'Language.PureScript.Names.ClassName>_P) of ww9 { Data.Text.Internal.Text ww10 ww11 ww12 ->
                                     case Data.Text.$w$ccompare
                                            ww6
                                            ww7
                                            ww8
                                            ww10
                                            ww11
                                            ww12 of wild4 {
                                       GHC.Types.LT
                                       -> Language.PureScript.TypeChecker.Types.$slookup_$s$wpoly_go3
                                            @ a
                                            ipv3
                                            ww2
                                              `cast`
                                            (Sym (Language.PureScript.Names.N:ProperName[0]
                                                      <'Language.PureScript.Names.ClassName>_P))
                                            a2
                                       GHC.Types.EQ -> GHC.Base.Just @ a ipv2
                                       GHC.Types.GT
                                       -> Language.PureScript.TypeChecker.Types.$slookup_$s$wpoly_go3
                                            @ a
                                            ipv4
                                            ww2
                                              `cast`
                                            (Sym (Language.PureScript.Names.N:ProperName[0]
                                                      <'Language.PureScript.Names.ClassName>_P))
                                            a2 } } }
                                  GHC.Types.GT
                                  -> Language.PureScript.TypeChecker.Types.$slookup_$s$wpoly_go3
                                       @ a
                                       ipv4
                                       ww1
                                       a2 } } } }
                   Data.Map.Internal.Tip -> GHC.Base.Nothing @ a }) -}
56c10fc54900c7aac31df0259cf443e6
  data BindingGroupType
    = RecursiveBindingGroup | NonRecursiveBindingGroup
472685f759d283ccee3a5d884c371b1e
  data SplitBindingGroup
    = SplitBindingGroup {_splitBindingGroupUntyped :: [((Language.PureScript.AST.SourcePos.SourceAnn,
                                                         Language.PureScript.Names.Ident),
                                                        (Language.PureScript.AST.Declarations.Expr,
                                                         Language.PureScript.Types.SourceType))],
                         _splitBindingGroupTyped :: [((Language.PureScript.AST.SourcePos.SourceAnn,
                                                       Language.PureScript.Names.Ident),
                                                      (Language.PureScript.AST.Declarations.Expr,
                                                       Language.PureScript.Types.SourceType,
                                                       GHC.Types.Bool))],
                         _splitBindingGroupNames :: Data.Map.Internal.Map
                                                      (Language.PureScript.Names.Qualified
                                                         Language.PureScript.Names.Ident)
                                                      (Language.PureScript.Types.SourceType,
                                                       Language.PureScript.Environment.NameKind,
                                                       Language.PureScript.Environment.NameVisibility)}
472685f759d283ccee3a5d884c371b1e
  _splitBindingGroupNames ::
    Language.PureScript.TypeChecker.Types.SplitBindingGroup
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            Language.PureScript.Names.Ident)
         (Language.PureScript.Types.SourceType,
          Language.PureScript.Environment.NameKind,
          Language.PureScript.Environment.NameVisibility)
  RecSel Left Language.PureScript.TypeChecker.Types.SplitBindingGroup
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.TypeChecker.Types.SplitBindingGroup) ->
                 case ds of wild { Language.PureScript.TypeChecker.Types.SplitBindingGroup ds1 ds2 ds3 ->
                 ds3 }) -}
472685f759d283ccee3a5d884c371b1e
  _splitBindingGroupTyped ::
    Language.PureScript.TypeChecker.Types.SplitBindingGroup
    -> [((Language.PureScript.AST.SourcePos.SourceAnn,
          Language.PureScript.Names.Ident),
         (Language.PureScript.AST.Declarations.Expr,
          Language.PureScript.Types.SourceType, GHC.Types.Bool))]
  RecSel Left Language.PureScript.TypeChecker.Types.SplitBindingGroup
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.TypeChecker.Types.SplitBindingGroup) ->
                 case ds of wild { Language.PureScript.TypeChecker.Types.SplitBindingGroup ds1 ds2 ds3 ->
                 ds2 }) -}
472685f759d283ccee3a5d884c371b1e
  _splitBindingGroupUntyped ::
    Language.PureScript.TypeChecker.Types.SplitBindingGroup
    -> [((Language.PureScript.AST.SourcePos.SourceAnn,
          Language.PureScript.Names.Ident),
         (Language.PureScript.AST.Declarations.Expr,
          Language.PureScript.Types.SourceType))]
  RecSel Left Language.PureScript.TypeChecker.Types.SplitBindingGroup
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.TypeChecker.Types.SplitBindingGroup) ->
                 case ds of wild { Language.PureScript.TypeChecker.Types.SplitBindingGroup ds1 ds2 ds3 ->
                 ds1 }) -}
a2b44293e8ee7e6812807c9180c289b8
  typesOf ::
    (Control.Monad.Supply.Class.MonadSupply m,
     Control.Monad.State.Class.MonadState
       Language.PureScript.TypeChecker.Monad.CheckState m,
     Control.Monad.Error.Class.MonadError
       Language.PureScript.Errors.MultipleErrors m,
     Control.Monad.Writer.Class.MonadWriter
       Language.PureScript.Errors.MultipleErrors m) =>
    Language.PureScript.TypeChecker.Types.BindingGroupType
    -> Language.PureScript.Names.ModuleName
    -> [((Language.PureScript.AST.SourcePos.SourceAnn,
          Language.PureScript.Names.Ident),
         Language.PureScript.AST.Declarations.Expr)]
    -> m [((Language.PureScript.AST.SourcePos.SourceAnn,
            Language.PureScript.Names.Ident),
           (Language.PureScript.AST.Declarations.Expr,
            Language.PureScript.Types.SourceType))]
  {- Arity: 4,
     Strictness: <L,U(U(U(U(C(C1(U)),A),C(U),C(C1(U)),C(C1(C1(U))),A,A),C(C1(U)),C(C1(U)),C(U),C(U)),U,A)><L,U(U(U(U(C(C1(U)),A),C(U),C(C1(U)),C(C1(C1(U))),C(C1(U)),A),C(C1(U)),C(C1(U)),C(U),C(U)),U,A,C(U))><L,U(U(U(U(C(C1(U)),C(C1(U))),C(U),C(C1(U)),C(C1(C1(U))),C(C1(U)),A),C(C1(U)),C(C1(U)),C(U),C(U)),C(U),C(C1(U)))><L,U(U(A,U,A,A),U(U(U(C(C1(U)),A),C(U),C(C1(U)),C(C1(C1(U))),A,A),C(C1(U)),C(C1(U)),C(U),A),A,C(U),C(U),C(U))> -}
instance GHC.Classes.Eq [Language.PureScript.TypeChecker.Types.BindingGroupType]
  = Language.PureScript.TypeChecker.Types.$fEqBindingGroupType
instance GHC.Classes.Ord [Language.PureScript.TypeChecker.Types.BindingGroupType]
  = Language.PureScript.TypeChecker.Types.$fOrdBindingGroupType
instance GHC.Show.Show [Language.PureScript.TypeChecker.Types.BindingGroupType]
  = Language.PureScript.TypeChecker.Types.$fShowBindingGroupType
"SC:$sgo130" forall @ a
                    (sc :: GHC.Prim.Int#)
                    (sc1 :: Language.PureScript.Names.Ident)
                    (sc2 :: a)
                    (sc3 :: Data.Map.Internal.Map Language.PureScript.Names.Ident a)
                    (sc4 :: Data.Map.Internal.Map Language.PureScript.Names.Ident a)
                    (sc5 :: a)
                    (sc6 :: Language.PureScript.Names.Ident)
                    (sc7 :: Language.PureScript.Names.Ident)
  Language.PureScript.TypeChecker.Types.$sinsert_$sgo13 @ a
                                                        sc7
                                                        sc6
                                                        sc5
                                                        (Data.Map.Internal.Bin
                                                           @ Language.PureScript.Names.Ident
                                                           @ a
                                                           sc
                                                           sc1
                                                           sc2
                                                           sc3
                                                           sc4)
  = Language.PureScript.TypeChecker.Types.$sinsert_$s$sgo13
      @ a
      sc
      sc1
      sc2
      sc3
      sc4
      sc5
      sc6
      sc7
"SC:$w$sgo30" [0] forall (sc :: GHC.Prim.Int#)
                         (sc1 :: GHC.Prim.Int#)
                         (sc2 :: Data.Set.Internal.Set GHC.Types.Int)
                         (sc3 :: Data.Set.Internal.Set GHC.Types.Int)
                         (sc4 :: GHC.Prim.Int#)
                         (sc5 :: GHC.Types.Int)
  Language.PureScript.TypeChecker.Types.$w$sgo3 sc5
                                                sc4
                                                (Data.Set.Internal.Bin
                                                   @ GHC.Types.Int
                                                   sc
                                                   (GHC.Types.I# sc1)
                                                   sc2
                                                   sc3)
  = Language.PureScript.TypeChecker.Types.$sinsert_$s$w$sgo3
      sc
      sc1
      sc2
      sc3
      sc4
      sc5
"SC:$wpoly_go130" [0] forall @ a
                             (sc :: GHC.Prim.Int#)
                             (sc1 :: Language.PureScript.Names.Ident)
                             (sc2 :: a)
                             (sc3 :: Data.Map.Internal.Map Language.PureScript.Names.Ident a)
                             (sc4 :: Data.Map.Internal.Map Language.PureScript.Names.Ident a)
                             (sc5 :: Language.PureScript.Names.Ident)
  Language.PureScript.TypeChecker.Types.$wpoly_go13 @ a
                                                    sc5
                                                    (Data.Map.Internal.Bin
                                                       @ Language.PureScript.Names.Ident
                                                       @ a
                                                       sc
                                                       sc1
                                                       sc2
                                                       sc3
                                                       sc4)
  = Language.PureScript.TypeChecker.Types.$s$wsplit_$s$wpoly_go13
      @ a
      sc
      sc1
      sc2
      sc3
      sc4
      sc5
"SC:$wpoly_go130" [0] forall @ a
                             (sc :: Data.Map.Internal.Map
                                      (Language.PureScript.Names.Qualified
                                         (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.ConstructorName))
                                      a)
                             (sc1 :: Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.ConstructorName)
  Language.PureScript.TypeChecker.Types.$wpoly_go1 @ a
                                                   (GHC.Base.Nothing
                                                      @ Language.PureScript.Names.ModuleName)
                                                   sc1
                                                   sc
  = Language.PureScript.TypeChecker.Types.$slookup_$s$wpoly_go1
      @ a
      sc
      sc1
"SC:$wpoly_go130" [0] forall @ a
                             (sc :: Data.Map.Internal.Map
                                      (Language.PureScript.Names.Qualified
                                         (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.ClassName))
                                      a)
                             (sc1 :: Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.ClassName)
  Language.PureScript.TypeChecker.Types.$wpoly_go2 @ a
                                                   (GHC.Base.Nothing
                                                      @ Language.PureScript.Names.ModuleName)
                                                   sc1
                                                   sc
  = Language.PureScript.TypeChecker.Types.$slookup_$s$wpoly_go4
      @ a
      sc
      sc1
"SC:$wpoly_go131" [0] forall @ a
                             (sc :: Data.Map.Internal.Map
                                      (Language.PureScript.Names.Qualified
                                         (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.ConstructorName))
                                      a)
                             (sc1 :: Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.ConstructorName)
                             (sc2 :: Language.PureScript.Names.ModuleName)
  Language.PureScript.TypeChecker.Types.$wpoly_go1 @ a
                                                   (GHC.Base.Just
                                                      @ Language.PureScript.Names.ModuleName
                                                      sc2)
                                                   sc1
                                                   sc
  = Language.PureScript.TypeChecker.Types.$slookup_$s$wpoly_go13
      @ a
      sc
      sc1
      sc2
"SC:$wpoly_go131" [0] forall @ a
                             (sc :: Data.Map.Internal.Map
                                      (Language.PureScript.Names.Qualified
                                         (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.ClassName))
                                      a)
                             (sc1 :: Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.ClassName)
                             (sc2 :: Language.PureScript.Names.ModuleName)
  Language.PureScript.TypeChecker.Types.$wpoly_go2 @ a
                                                   (GHC.Base.Just
                                                      @ Language.PureScript.Names.ModuleName
                                                      sc2)
                                                   sc1
                                                   sc
  = Language.PureScript.TypeChecker.Types.$slookup_$s$wpoly_go3
      @ a
      sc
      sc1
      sc2
"SC:$wpoly_go132" [0] forall @ a
                             (sc :: Data.Map.Internal.Map
                                      (Language.PureScript.Names.Qualified
                                         (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.ConstructorName))
                                      a)
                             (sc1 :: GHC.Prim.ByteArray#)
                             (sc2 :: GHC.Prim.Int#)
                             (sc3 :: GHC.Prim.Int#)
                             (sg :: (Data.Text.Internal.Text :: *)
                                    ~R# (Language.PureScript.Names.ProperName
                                           'Language.PureScript.Names.ConstructorName :: *))
  Language.PureScript.TypeChecker.Types.$wpoly_go1 @ a
                                                   (GHC.Base.Nothing
                                                      @ Language.PureScript.Names.ModuleName)
                                                   (Data.Text.Internal.Text sc1 sc2 sc3) `cast` sg
                                                   sc
  = Language.PureScript.TypeChecker.Types.$slookup_$s$wpoly_go2
      @ a
      sc
      sc1
      sc2
      sc3
      @~ sg
"SC:$wpoly_go132" [0] forall @ a
                             (sc :: Data.Map.Internal.Map
                                      (Language.PureScript.Names.Qualified
                                         (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.ClassName))
                                      a)
                             (sc1 :: GHC.Prim.ByteArray#)
                             (sc2 :: GHC.Prim.Int#)
                             (sc3 :: GHC.Prim.Int#)
                             (sg :: (Data.Text.Internal.Text :: *)
                                    ~R# (Language.PureScript.Names.ProperName
                                           'Language.PureScript.Names.ClassName :: *))
  Language.PureScript.TypeChecker.Types.$wpoly_go2 @ a
                                                   (GHC.Base.Nothing
                                                      @ Language.PureScript.Names.ModuleName)
                                                   (Data.Text.Internal.Text sc1 sc2 sc3) `cast` sg
                                                   sc
  = Language.PureScript.TypeChecker.Types.$slookup_$s$wpoly_go5
      @ a
      sc
      sc1
      sc2
      sc3
      @~ sg
"SPEC/Language.PureScript.TypeChecker.Types $fEq(,) @ (SourceSpan,
                                                      [Comment]) @ Int" [orphan] forall (v1 :: GHC.Classes.Eq
                                                                                                                                                                    GHC.Types.Int)
                                                                                                                                                           (v :: GHC.Classes.Eq
                                                                                                                                                                   (Language.PureScript.AST.SourcePos.SourceSpan,
                                                                                                                                                                    [Language.PureScript.Comments.Comment]))
  GHC.Classes.$fEq(,) @ (Language.PureScript.AST.SourcePos.SourceSpan,
                         [Language.PureScript.Comments.Comment])
                      @ GHC.Types.Int
                      v
                      v1
  = Language.PureScript.TypeChecker.Types.$s$fEq(,)1
"SPEC/Language.PureScript.TypeChecker.Types $fEq(,) @ SourceSpan @ [Comment]" [orphan] forall (v1 :: GHC.Classes.Eq
                                                                                                       [Language.PureScript.Comments.Comment])
                                                                                              (v :: GHC.Classes.Eq
                                                                                                      Language.PureScript.AST.SourcePos.SourceSpan)
  GHC.Classes.$fEq(,) @ Language.PureScript.AST.SourcePos.SourceSpan
                      @ [Language.PureScript.Comments.Comment]
                      v
                      v1
  = Language.PureScript.TypeChecker.Types.$s$fEq(,)
"SPEC/Language.PureScript.TypeChecker.Types $fEq(,)_$c/= @ (SourceSpan,
                                                           [Comment]) @ Int" [orphan] forall ($dEq1 :: GHC.Classes.Eq
                                                                                                                                                                                 GHC.Types.Int)
                                                                                                                                                                     ($dEq :: GHC.Classes.Eq
                                                                                                                                                                                (Language.PureScript.AST.SourcePos.SourceSpan,
                                                                                                                                                                                 [Language.PureScript.Comments.Comment]))
  GHC.Classes.$fEq(,)_$c/= @ (Language.PureScript.AST.SourcePos.SourceSpan,
                              [Language.PureScript.Comments.Comment])
                           @ GHC.Types.Int
                           $dEq
                           $dEq1
  = Language.PureScript.TypeChecker.Types.$s$fEq(,)_$s$fEq(,)_$c/=1
"SPEC/Language.PureScript.TypeChecker.Types $fEq(,)_$c/= @ SourceSpan @ [Comment]" [orphan] forall ($dEq1 :: GHC.Classes.Eq
                                                                                                               [Language.PureScript.Comments.Comment])
                                                                                                   ($dEq :: GHC.Classes.Eq
                                                                                                              Language.PureScript.AST.SourcePos.SourceSpan)
  GHC.Classes.$fEq(,)_$c/= @ Language.PureScript.AST.SourcePos.SourceSpan
                           @ [Language.PureScript.Comments.Comment]
                           $dEq
                           $dEq1
  = Language.PureScript.TypeChecker.Types.$s$fEq(,)_$s$fEq(,)_$c/=
"SPEC/Language.PureScript.TypeChecker.Types $fEqQualified @ Ident" [orphan] forall (v :: GHC.Classes.Eq
                                                                                           Language.PureScript.Names.Ident)
  Language.PureScript.Names.$fEqQualified @ Language.PureScript.Names.Ident
                                          v
  = Language.PureScript.TypeChecker.Types.$s$fEqQualified2
"SPEC/Language.PureScript.TypeChecker.Types $fEqQualified_$c/= @ Ident" [orphan] forall ($dEq :: GHC.Classes.Eq
                                                                                                   Language.PureScript.Names.Ident)
  Language.PureScript.Names.$fEqQualified_$c/= @ Language.PureScript.Names.Ident
                                               $dEq
  = Language.PureScript.TypeChecker.Types.$s$fEqQualified_$s$fEqQualified_$c/=2
"SPEC/Language.PureScript.TypeChecker.Types $fEq[] @ Comment" [orphan] forall (v :: GHC.Classes.Eq
                                                                                      Language.PureScript.Comments.Comment)
  GHC.Classes.$fEq[] @ Language.PureScript.Comments.Comment v
  = Language.PureScript.TypeChecker.Types.$s$fEq(,)_$s$fEq[]
"SPEC/Language.PureScript.TypeChecker.Types $fEq[]_$c/= @ Comment" [orphan] forall ($dEq :: GHC.Classes.Eq
                                                                                              Language.PureScript.Comments.Comment)
  GHC.Classes.$fEq[]_$c/= @ Language.PureScript.Comments.Comment $dEq
  = Language.PureScript.TypeChecker.Types.$s$fEq(,)_$s$fEq[]_$c/=
"SPEC/Language.PureScript.TypeChecker.Types $fOrd(,) @ (SourceSpan,
                                                       [Comment]) @ Int" [orphan] forall (v1 :: GHC.Classes.Ord
                                                                                                                                                                      GHC.Types.Int)
                                                                                                                                                             (v :: GHC.Classes.Ord
                                                                                                                                                                     (Language.PureScript.AST.SourcePos.SourceSpan,
                                                                                                                                                                      [Language.PureScript.Comments.Comment]))
  GHC.Classes.$fOrd(,) @ (Language.PureScript.AST.SourcePos.SourceSpan,
                          [Language.PureScript.Comments.Comment])
                       @ GHC.Types.Int
                       v
                       v1
  = Language.PureScript.TypeChecker.Types.$s$fOrd(,)1
"SPEC/Language.PureScript.TypeChecker.Types $fOrd(,) @ SourceSpan @ [Comment]" [orphan] forall (v1 :: GHC.Classes.Ord
                                                                                                        [Language.PureScript.Comments.Comment])
                                                                                               (v :: GHC.Classes.Ord
                                                                                                       Language.PureScript.AST.SourcePos.SourceSpan)
  GHC.Classes.$fOrd(,) @ Language.PureScript.AST.SourcePos.SourceSpan
                       @ [Language.PureScript.Comments.Comment]
                       v
                       v1
  = Language.PureScript.TypeChecker.Types.$s$fOrd(,)
"SPEC/Language.PureScript.TypeChecker.Types $fOrdQualified @ Ident" [orphan] forall (v :: GHC.Classes.Ord
                                                                                            Language.PureScript.Names.Ident)
  Language.PureScript.Names.$fOrdQualified @ Language.PureScript.Names.Ident
                                           v
  = Language.PureScript.TypeChecker.Types.$s$fOrdQualified2
"SPEC/Language.PureScript.TypeChecker.Types $fOrd[] @ Comment" [orphan] forall (v :: GHC.Classes.Ord
                                                                                       Language.PureScript.Comments.Comment)
  GHC.Classes.$fOrd[] @ Language.PureScript.Comments.Comment v
  = Language.PureScript.TypeChecker.Types.$s$fOrd(,)_$s$fOrd[]
"SPEC/Language.PureScript.TypeChecker.Types $wsplitS @ Int" [orphan] [0] forall (w :: GHC.Classes.Ord
                                                                                        GHC.Types.Int)
  Data.Set.Internal.$wsplitS @ GHC.Types.Int w
  = Language.PureScript.TypeChecker.Types.$s$wsplitS
"SPEC/Language.PureScript.TypeChecker.Types fromList @ (Qualified
                                                         Ident) _" [orphan] forall @ a
                                                                                                                                                     ($dOrd :: GHC.Classes.Ord
                                                                                                                                                                 (Language.PureScript.Names.Qualified
                                                                                                                                                                    Language.PureScript.Names.Ident))
  Data.Map.Internal.fromList @ (Language.PureScript.Names.Qualified
                                  Language.PureScript.Names.Ident)
                             @ a
                             $dOrd
  = Language.PureScript.TypeChecker.Types.$sfromList1 @ a
"SPEC/Language.PureScript.TypeChecker.Types fromList @ Int" [orphan] forall ($dOrd :: GHC.Classes.Ord
                                                                                        GHC.Types.Int)
  Data.Set.Internal.fromList @ GHC.Types.Int $dOrd
  = Language.PureScript.TypeChecker.Types.$sfromList
"SPEC/Language.PureScript.TypeChecker.Types union @ Ident _" [orphan] forall @ a
                                                                             ($dOrd :: GHC.Classes.Ord
                                                                                         Language.PureScript.Names.Ident)
  Data.Map.Internal.union @ Language.PureScript.Names.Ident @ a $dOrd
  = Language.PureScript.TypeChecker.Types.$sunion1 @ a
"SPEC/Language.PureScript.TypeChecker.Types union @ Int" [orphan] forall ($dOrd :: GHC.Classes.Ord
                                                                                     GHC.Types.Int)
  Data.Set.Internal.union @ GHC.Types.Int $dOrd
  = Language.PureScript.TypeChecker.Types.$sunion
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

