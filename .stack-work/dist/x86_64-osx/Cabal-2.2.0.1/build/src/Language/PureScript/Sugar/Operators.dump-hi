
==================== FINAL INTERFACE ====================
2018-11-30 20:47:35.061902 UTC

interface purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Sugar.Operators 8043
  interface hash: 367fd3d4d53406e473e197f0527ac1f4
  ABI hash: a75af500c641e9468cdd1e4448ec8d39
  export-list hash: 9b828e16ad51ab36fdac3b30052b3abf
  orphan hash: 1d03c88e80f7b1128a37e3618fd8ef5f
  flag hash: 69d8350f4fac920b6d109c2ab05c8489
  opt_hash: 2c98c95d41c045ae9c2fb565ec8aabc6
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Language.PureScript.Sugar.Operators.checkFixityExports
  Language.PureScript.Sugar.Operators.desugarSignedLiterals
  Language.PureScript.Sugar.Operators.rebracket
  Language.PureScript.Sugar.Operators.rebracketFiltered
module dependencies: Control.Monad.Supply
                     Control.Monad.Supply.Class Language.PureScript.AST
                     Language.PureScript.AST.Binders
                     Language.PureScript.AST.Declarations
                     Language.PureScript.AST.Exported Language.PureScript.AST.Literals
                     Language.PureScript.AST.Operators Language.PureScript.AST.SourcePos
                     Language.PureScript.AST.Traversals Language.PureScript.Bundle
                     Language.PureScript.Comments Language.PureScript.Constants
                     Language.PureScript.Crash Language.PureScript.Environment
                     Language.PureScript.Errors Language.PureScript.Externs
                     Language.PureScript.Kinds Language.PureScript.Label
                     Language.PureScript.Names Language.PureScript.PSString
                     Language.PureScript.Parser.Lexer Language.PureScript.Parser.State
                     Language.PureScript.Pretty Language.PureScript.Pretty.Common
                     Language.PureScript.Pretty.Kinds Language.PureScript.Pretty.Types
                     Language.PureScript.Pretty.Values
                     Language.PureScript.Publish.BoxesHelpers
                     Language.PureScript.Sugar.Operators.Binders
                     Language.PureScript.Sugar.Operators.Common
                     Language.PureScript.Sugar.Operators.Expr
                     Language.PureScript.Sugar.Operators.Types
                     Language.PureScript.Traversals
                     Language.PureScript.TypeClassDictionaries Language.PureScript.Types
                     Paths_purescript
package dependencies: aeson-1.3.1.1 aeson-better-errors-0.9.1.0
                      ansi-terminal-0.8.0.4 array-0.5.2.0 async-2.2.1 attoparsec-0.13.2.2
                      base-4.11.1.0 base-compat-0.10.4 binary-0.8.5.1
                      blaze-builder-0.4.1.0 boxes-0.1.5 bytestring-0.10.8.2 colour-2.3.4
                      containers-0.5.11.0 deepseq-1.4.3.0 dlist-0.8.0.4 filepath-1.4.2
                      ghc-boot-th-8.4.3 ghc-prim-0.5.2.0 hashable-1.2.7.0
                      integer-gmp-1.0.2.0 integer-logarithms-1.0.2.1
                      language-javascript-0.6.0.11 mtl-2.2.2 parsec-3.1.13.0
                      pattern-arrows-0.0.2 pretty-1.1.3.6 primitive-0.6.3.0
                      protolude-0.2.2 random-1.1 scientific-0.3.6.2 sourcemap-0.1.6
                      split-0.2.3.3 stm-2.4.5.0 syb-0.7 tagged-0.8.5
                      template-haskell-2.13.0.0 text-1.2.3.0 th-abstraction-0.2.8.0
                      time-1.8.0.2 time-locale-compat-0.1.1.4 transformers-0.5.5.0
                      unordered-containers-0.2.9.0 utf8-string-1.0.1.1 uuid-types-1.0.3
                      vector-0.12.0.1
orphans: syb-0.7:Data.Generics.Instances colour-2.3.4:Data.Colour
         stm-2.4.5.0:Control.Monad.STM
         attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         vector-0.12.0.1:Data.Vector.Unboxed
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.0:Data.Text.Lazy
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.5.0:Control.Monad.Trans.Error
         text-1.2.3.0:Data.Text binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: aeson-1.3.1.1:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.Graph
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         dlist-0.8.0.4:Data.DList ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.AST.Declarations
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.AST.Operators
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.AST.SourcePos
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Environment
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Kinds
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Label
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Names
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.PSString
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.TypeClassDictionaries
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Types
                         tagged-0.8.5:Data.Tagged
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
                         th-abstraction-0.2.8.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  base-4.11.1.0:Control.Monad c5f960c67d822497578bffbd3e4c01cf
import  -/  base-4.11.1.0:Data.Either 39d922b371c4c52d426e9ee66de8371a
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.Function 6e6aae9442025aeeb92a909c1bbc3fca
import  -/  base-4.11.1.0:Data.Functor f522c3501272159820fd6f242510732f
import  -/  base-4.11.1.0:Data.Functor.Identity 9430dcaadd71c129eeb5ca7b963c9b54
import  -/  base-4.11.1.0:Data.List 83dc843e47bfc0c5af51e19c6f3476d5
import  -/  base-4.11.1.0:Data.Maybe 409c3da2b142470b68be39ce1d97a9f7
import  -/  base-4.11.1.0:Data.OldList 1b35aa3c6805ff7c8887a35a866fe006
import  -/  base-4.11.1.0:Data.Traversable 7ad4edb9184ea1ae8e73f6b94f115c8c
import  -/  base-4.11.1.0:Data.Tuple 3af66f3ac61ed95ba8a3a3f68ebc5003
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-compat-0.10.4:Prelude.Compat bb6796186ed35a1d09dc34362a3fc27e
import  -/  containers-0.5.11.0:Data.Map 0dbdaec812ef695a364aa6c69e7f7d53
import  -/  containers-0.5.11.0:Data.Map.Internal 0150e210d0ae8df0f3a0669d5e32d8fa
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  mtl-2.2.2:Control.Monad.Error.Class df146c18e27154b8df4c8637c59fd61b
import  -/  Language.PureScript.AST 7ed0e74bfed5b6489b8a5eabab5c0241
  exports: 0d53d92339536cd6d8d7dcfcad8e7c7e
import  -/  Language.PureScript.AST.Binders 9d60985147b34b89300370e810fed430
  BinaryNoParensBinder 0a9649b4372c6e05d173870dfa1006fa
  Binder 50aa153193e190eabd8ac7530e604f9c
  ConstructorBinder a80ed0550c5d3abdd1e6249cec7ebb29
  OpBinder 8c4232ee53e2707d427c05940eb3b3a1
  ParensInBinder d5e3e2b30a59f234cee3c52dcb18b9a6
  PositionedBinder 882f8081b0418fe44d4a7e237a20b9bb
  TypedBinder f780e44b8446316aee6b532b3afc4341
import  -/  Language.PureScript.AST.Declarations 568e046fbf27b243bfc96f09017d4782
  App 60282620a1433a146ffafd0d8773af87
  Constructor bb7c3f03ee8743dfc68d80ee99f8c1e3
  DataDeclaration db5935397ffc86d7f21188808af5170e
  Declaration b31d94d0c7b90700d40f9ba6ec420e41
  DeclarationRef 9de74e8b46bfd07e044a72617cc5da5c
  DeferredDictionary 7a56aac6dc1b7f4256df8373658d67a5
  ErrorInModule 30c97edb8a43314700377edb3b90ccc8
  Expr b31d94d0c7b90700d40f9ba6ec420e41
  ExternDeclaration 4969f865c6e08f5324b31f68ef85d043
  InvalidOperatorInBinder b83c65663c2d922ee8fabb93f0ee69ec
  Module b9e5d519f3251f7053b581e4ecd9e6bf
  Module 7cf4b96f7d4b51b446726a099ab87bb6
  MultipleTypeOpFixities b286f89f3b7830b506cfd4fff2da9fcb
  Op 4d49590d9b87d07686937c6859e5ae47
  Parens d8b532f50bb6822d72d510f7cf291c86
  PositionedValue ce9f35ccf631ea46c29b12e823f5cdda
  SimpleErrorMessage 33c1a345bb3f2be69a13531f80c78fbd
  TransitiveDctorExportError a5175dc7214c264d90a6faf93b234f92
  TransitiveExportError e29bbd988591c5392e7ebded7eda7181
  TypeClassDeclaration d4771a111b012cbefca253f911afd776
  TypeClassDictionary 9f4047c1c1ff9eeef0292c33d9ecb17c
  TypeDeclaration a12f822b0dbc597658a7d1e27db5ac22
  TypeDeclarationData 99fd3317c24e020d90e98686ac5a9cec
  TypeFixity 64291ec6ff5adfe62c3609f4ee3518e7
  TypeFixityDeclaration 442ba50b491e46b095a0fd0218f236ad
  TypeInstanceDeclaration c99b2ac93a5feb1209c747921a9e548b
  TypeOpRef 9ae3d7bbee64a9887c8d95defd65b0b0
  TypeRef f23e4bfa1c94ce55e9357e5fb97176c4
  TypeSynonymDeclaration b022b78d38da14b3619ada244eaf9299
  TypedValue d9e4565826b9abbfd5d9b0aba42f2e58
  UnaryMinus a219b7d00bf9c8706678ac90686eba33
  UnknownName 0628ac315dcabeec4442b9d03a3d0b84
  ValueFixity 521665e029a7bb45169e478d9aced723
  ValueFixityDeclaration eb9c8f0bb082690f8aa4e758b5751212
  ValueOpRef 340c88beba94c802cc00b112ca1ce8ae
  ValueRef 984b564c7d121e5297a91fc424d0970b
  Var 0202d242cce06e67fa6944b3c05a8982
  declSourceSpan 901cd3587e8d9e55060bf90daca551d7
  getFixityDecl d7bc7564b568f06a5f232daf0d83a6b1
  getTypeRef 42ae9903e046664143824d50598f73c8
import  -/  Language.PureScript.AST.Operators be736e316462ef3abce53315e7361a17
  Associativity 17f2097426b72eb751701f86cd97792c
  Fixity b54dc78c2a40564b4aeb547cc4004cc2
  Fixity 17f2097426b72eb751701f86cd97792c
import  -/  Language.PureScript.AST.SourcePos b3f67f807f2dce79528bbb15bd9c7104
  SourceSpan 73c071552214b3f18e94970349d3affc
  internalModuleSourceSpan 5f91a656f056fa441b3ec6940306d87a
import  -/  Language.PureScript.AST.Traversals a3d1a9b4309f1aa3055f23e3fb101c5e
  everywhereOnValues ad4625d6eef7aa4388eb405da834d508
  everywhereWithContextOnValuesM 4fdd13188200e3f571550d8ad6f3de86
import  -/  Language.PureScript.Constants d290cccb0db8657cab5f1253ab0da1ee
  exports: cd83a0f5b6591e5c66c598e34359260d
  negate e1b56b28dd4e93b9bdbc393809b558a0
import  -/  Language.PureScript.Crash 1bc11bf824676e9581610d0d05d26761
  exports: 8a971f39d6ef3f27956f413640cb0a24
  internalError f3db7e23c75878c9d13888d6d114012d
import  -/  Language.PureScript.Errors 15d6eb6b2d4d480750061a0585d4e64c
  exports: 142ea650dec62642d1cff09ef1eee74e
  MultipleErrors ad1de73a1d5a6b0ccd9657dedebc94f3
  addHint c2d92e868230119a30631ae026505b5b
  errorMessage 56e7aa221570d7d0bd9b4d606b8de7f2
  errorMessage' 5055fef8b372f878a840ac9e7783f39a
  parU da72186e6c92f529dd0bd0ac4699ef1e
  rethrow f843b34a93fe990a8e71af5f4eb4be9f
  rethrowWithPosition 75b2386b9d003827c72a63532c561f67
import  -/  Language.PureScript.Externs 17598d5385c46f650a2a55de08912a53
  exports: f9fc7fa26f69a655fd896d8cccd21570
  ExternsFile c70689fb9608ce693621d95a9618d3ec
  ExternsFile b2e76f24ecba17bf3b946e078a8414b6
  ExternsFixity fc9aab220e4eaf56df961c5266b7d006
  ExternsFixity e2b9825419a009927ef7bc8fe43a5592
  ExternsTypeFixity f37bac60e1f55712bd46ecf0d2815c3b
  ExternsTypeFixity 550ce16782e073a4c465189b0fa52bb0
  efDeclarations b2e76f24ecba17bf3b946e078a8414b6
  efExports b2e76f24ecba17bf3b946e078a8414b6
  efFixities b2e76f24ecba17bf3b946e078a8414b6
  efImports b2e76f24ecba17bf3b946e078a8414b6
  efModuleName b2e76f24ecba17bf3b946e078a8414b6
  efSourceSpan b2e76f24ecba17bf3b946e078a8414b6
  efTypeFixities b2e76f24ecba17bf3b946e078a8414b6
  efVersion b2e76f24ecba17bf3b946e078a8414b6
import  -/  Language.PureScript.Names b3bf151840f3e8f2eb61eff186432886
  exports: f7f3503d20957194bda83c16bb5f1288
  ConstructorName 9fb88e980342b224c2a4e4b58fa9fe33
  Ident 0ccd7f2221de64569e50634367691253
  Ident ab98a56ffa88760dad1380079e8ee35a
  OpName 1522672b880b192c6e05e6cf8a45712d
  ProperName 29f101e190cc99df85623423972e606f
  Qualified d600a7f01c8203cf5504999de99c923c
  Qualified 5a70062bbdf29e6dc659ad8bf5326b50
  TyOpName 66cc4d214f55e6f0f298e52eab8013ac
  TypeName da42c92f73f4f363c63ecaf77b6335b9
  TypeOpName 34023316af2b751c6196ece0b5420c6b
  ValOpName f03a1a616a24e6d18322d9bb9fa39c73
  ValueOpName 1d06f91abd827e7b0c072b254546708a
import  -/  Language.PureScript.Sugar.Operators.Binders 2821e8a30e1cebf7b27b36a7a35c97d0
  exports: eab4b36085105d725b32a683f05a8847
  matchBinderOperators 7d00c81fca5ac5369ce905a61a5bc450
import  -/  Language.PureScript.Sugar.Operators.Expr ffd6a9621919c3f7a397fc6651219022
  exports: 6ce0f97669d3e38cd222ca4aff3f31e7
  matchExprOperators c9b43230412fb8426dc94c9f87aaf900
import  -/  Language.PureScript.Sugar.Operators.Types b2bd8796caef67fb5d46175edd802f6a
  exports: f9bbe7bcd867192b9ec56ca73e9d1c53
  matchTypeOperators 96c4d1cd082249c513a8f787772bc6de
import  -/  Language.PureScript.Traversals 0b1167883a6d6cc72496ff4af9cd7535
  exports: ff3aac3cd7b378c02751a42ba037de7e
  defS 6ddff71af3ee79c0e480484d77dbcf66
  sndM f92d028593bfff03fd7f7a06605574ae
import  -/  Language.PureScript.Types 74562e642f5297557b3a23aac7819ad1
  exports: ae97bc75fcebc59f59c970736847a827
  BinaryNoParensType 107160e9c63cdf092e86906dc4d4938e
  Constraint 07ef72cbe41926551b2da51008274cd5
  ParensInType 09530ee2adabb1c21031665aeff3fda2
  Type 93223f8afa90d0facc05a03f863dc72d
  TypeApp 8aa2c93426facb8054d5caf77ff9d922
  TypeConstructor 5e1c42d22ac701f08c049fde0171d9ac
  TypeOp ad0891db755477b54ad0870dc64917cc
  everywhereOnTypesTopDownM b3d22fc67a846023ef0117738247400e
  overConstraintArgs 7ca378c5ad28e960c2839b69cbfa46a6
b87661b697cab154db03437b7a12e1fa
  $s$fEqQualified ::
    GHC.Classes.Eq
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.ValueOpName))
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.Qualified
                       (Language.PureScript.Names.OpName
                          'Language.PureScript.Names.ValueOpName))
                  (Language.PureScript.Names.$fEqQualified_$c==
                     @ (Language.PureScript.Names.OpName
                          'Language.PureScript.Names.ValueOpName)
                     (Language.PureScript.Names.$fEqOpName
                        @ 'Language.PureScript.Names.ValueOpName))
                  Language.PureScript.Sugar.Operators.$s$fEqQualified_$s$fEqQualified_$c/= -}
6360498fc36b3f9cbc507892d5a0c962
  $s$fEqQualified1 ::
    GHC.Classes.Eq
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.TypeOpName))
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.Qualified
                       (Language.PureScript.Names.OpName
                          'Language.PureScript.Names.TypeOpName))
                  (Language.PureScript.Names.$fEqQualified_$c==
                     @ (Language.PureScript.Names.OpName
                          'Language.PureScript.Names.TypeOpName)
                     (Language.PureScript.Names.$fEqOpName
                        @ 'Language.PureScript.Names.TypeOpName))
                  Language.PureScript.Sugar.Operators.$s$fEqQualified_$s$fEqQualified_$c/=1 -}
70fd29fb21bdc7d1ef06a7aa0209318a
  $s$fEqQualified_$s$fEqQualified_$c/= ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.OpName
         'Language.PureScript.Names.ValueOpName)
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.ValueOpName)
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U(U,U,U))><S(SL),1*U(1*U,1*U(U,U,U))>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.OpName
                              'Language.PureScript.Names.ValueOpName))
                   (y :: Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.OpName
                              'Language.PureScript.Names.ValueOpName)) ->
                 case Language.PureScript.Names.$fEqQualified_$c==
                        @ (Language.PureScript.Names.OpName
                             'Language.PureScript.Names.ValueOpName)
                        (Language.PureScript.Names.$fEqOpName
                           @ 'Language.PureScript.Names.ValueOpName)
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
3940f9084d155e657a494ec1f167043b
  $s$fEqQualified_$s$fEqQualified_$c/=1 ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.OpName
         'Language.PureScript.Names.TypeOpName)
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.TypeOpName)
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U(U,U,U))><S(SL),1*U(1*U,1*U(U,U,U))>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.OpName
                              'Language.PureScript.Names.TypeOpName))
                   (y :: Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.OpName
                              'Language.PureScript.Names.TypeOpName)) ->
                 case Language.PureScript.Names.$fEqQualified_$c==
                        @ (Language.PureScript.Names.OpName
                             'Language.PureScript.Names.TypeOpName)
                        (Language.PureScript.Names.$fEqOpName
                           @ 'Language.PureScript.Names.TypeOpName)
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
c9646bf13d7298b67ba53b83d264d871
  $s$fOrdQualified ::
    GHC.Classes.Ord
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.ValueOpName))
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.Qualified
                       (Language.PureScript.Names.OpName
                          'Language.PureScript.Names.ValueOpName))
                  Language.PureScript.Sugar.Operators.$s$fEqQualified
                  (Language.PureScript.Names.$fOrdQualified_$ccompare
                     @ (Language.PureScript.Names.OpName
                          'Language.PureScript.Names.ValueOpName)
                     (Language.PureScript.Names.$fOrdOpName
                        @ 'Language.PureScript.Names.ValueOpName))
                  (Language.PureScript.Names.$fOrdQualified_$c<
                     @ (Language.PureScript.Names.OpName
                          'Language.PureScript.Names.ValueOpName)
                     (Language.PureScript.Names.$fOrdOpName
                        @ 'Language.PureScript.Names.ValueOpName))
                  (\ (a1 :: Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.OpName
                                 'Language.PureScript.Names.ValueOpName))
                     (b :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.OpName
                                'Language.PureScript.Names.ValueOpName)) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ (Language.PureScript.Names.OpName
                               'Language.PureScript.Names.ValueOpName)
                          (Language.PureScript.Names.$fOrdOpName
                             @ 'Language.PureScript.Names.ValueOpName)
                          b
                          a1 of wild {
                     GHC.Types.False -> GHC.Types.True
                     GHC.Types.True -> GHC.Types.False })
                  (\ (a1 :: Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.OpName
                                 'Language.PureScript.Names.ValueOpName))
                     (b :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.OpName
                                'Language.PureScript.Names.ValueOpName)) ->
                   Language.PureScript.Names.$fOrdQualified_$c<
                     @ (Language.PureScript.Names.OpName
                          'Language.PureScript.Names.ValueOpName)
                     (Language.PureScript.Names.$fOrdOpName
                        @ 'Language.PureScript.Names.ValueOpName)
                     b
                     a1)
                  (\ (a1 :: Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.OpName
                                 'Language.PureScript.Names.ValueOpName))
                     (b :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.OpName
                                'Language.PureScript.Names.ValueOpName)) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ (Language.PureScript.Names.OpName
                               'Language.PureScript.Names.ValueOpName)
                          (Language.PureScript.Names.$fOrdOpName
                             @ 'Language.PureScript.Names.ValueOpName)
                          a1
                          b of wild {
                     GHC.Types.False -> GHC.Types.True
                     GHC.Types.True -> GHC.Types.False })
                  (\ (x :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.OpName
                                'Language.PureScript.Names.ValueOpName))
                     (y :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.OpName
                                'Language.PureScript.Names.ValueOpName)) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ (Language.PureScript.Names.OpName
                               'Language.PureScript.Names.ValueOpName)
                          (Language.PureScript.Names.$fOrdOpName
                             @ 'Language.PureScript.Names.ValueOpName)
                          y
                          x of wild {
                     GHC.Types.False -> y GHC.Types.True -> x })
                  (\ (x :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.OpName
                                'Language.PureScript.Names.ValueOpName))
                     (y :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.OpName
                                'Language.PureScript.Names.ValueOpName)) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ (Language.PureScript.Names.OpName
                               'Language.PureScript.Names.ValueOpName)
                          (Language.PureScript.Names.$fOrdOpName
                             @ 'Language.PureScript.Names.ValueOpName)
                          y
                          x of wild {
                     GHC.Types.False -> x GHC.Types.True -> y }) -}
25a48ddff5ef189e4e5e975d05d56797
  $s$fOrdQualified1 ::
    GHC.Classes.Ord
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.TypeOpName))
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.Qualified
                       (Language.PureScript.Names.OpName
                          'Language.PureScript.Names.TypeOpName))
                  Language.PureScript.Sugar.Operators.$s$fEqQualified1
                  (Language.PureScript.Names.$fOrdQualified_$ccompare
                     @ (Language.PureScript.Names.OpName
                          'Language.PureScript.Names.TypeOpName)
                     (Language.PureScript.Names.$fOrdOpName
                        @ 'Language.PureScript.Names.TypeOpName))
                  (Language.PureScript.Names.$fOrdQualified_$c<
                     @ (Language.PureScript.Names.OpName
                          'Language.PureScript.Names.TypeOpName)
                     (Language.PureScript.Names.$fOrdOpName
                        @ 'Language.PureScript.Names.TypeOpName))
                  (\ (a1 :: Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.OpName
                                 'Language.PureScript.Names.TypeOpName))
                     (b :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.OpName
                                'Language.PureScript.Names.TypeOpName)) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ (Language.PureScript.Names.OpName
                               'Language.PureScript.Names.TypeOpName)
                          (Language.PureScript.Names.$fOrdOpName
                             @ 'Language.PureScript.Names.TypeOpName)
                          b
                          a1 of wild {
                     GHC.Types.False -> GHC.Types.True
                     GHC.Types.True -> GHC.Types.False })
                  (\ (a1 :: Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.OpName
                                 'Language.PureScript.Names.TypeOpName))
                     (b :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.OpName
                                'Language.PureScript.Names.TypeOpName)) ->
                   Language.PureScript.Names.$fOrdQualified_$c<
                     @ (Language.PureScript.Names.OpName
                          'Language.PureScript.Names.TypeOpName)
                     (Language.PureScript.Names.$fOrdOpName
                        @ 'Language.PureScript.Names.TypeOpName)
                     b
                     a1)
                  (\ (a1 :: Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.OpName
                                 'Language.PureScript.Names.TypeOpName))
                     (b :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.OpName
                                'Language.PureScript.Names.TypeOpName)) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ (Language.PureScript.Names.OpName
                               'Language.PureScript.Names.TypeOpName)
                          (Language.PureScript.Names.$fOrdOpName
                             @ 'Language.PureScript.Names.TypeOpName)
                          a1
                          b of wild {
                     GHC.Types.False -> GHC.Types.True
                     GHC.Types.True -> GHC.Types.False })
                  (\ (x :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.OpName
                                'Language.PureScript.Names.TypeOpName))
                     (y :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.OpName
                                'Language.PureScript.Names.TypeOpName)) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ (Language.PureScript.Names.OpName
                               'Language.PureScript.Names.TypeOpName)
                          (Language.PureScript.Names.$fOrdOpName
                             @ 'Language.PureScript.Names.TypeOpName)
                          y
                          x of wild {
                     GHC.Types.False -> y GHC.Types.True -> x })
                  (\ (x :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.OpName
                                'Language.PureScript.Names.TypeOpName))
                     (y :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.OpName
                                'Language.PureScript.Names.TypeOpName)) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ (Language.PureScript.Names.OpName
                               'Language.PureScript.Names.TypeOpName)
                          (Language.PureScript.Names.$fOrdOpName
                             @ 'Language.PureScript.Names.TypeOpName)
                          y
                          x of wild {
                     GHC.Types.False -> x GHC.Types.True -> y }) -}
f7e92fead2d85e7c39d337ddc047b72f
  $sfromList ::
    [(Language.PureScript.Names.Qualified
        (Language.PureScript.Names.OpName
           'Language.PureScript.Names.ValueOpName),
      a)]
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.OpName
               'Language.PureScript.Names.ValueOpName))
         a
  {- Arity: 1, Strictness: <S,1*U> -}
5cbcf0b834a5ce69af2a72bdaec4c89c
  $sfromList1 ::
    [(Language.PureScript.Names.Qualified
        (Language.PureScript.Names.OpName
           'Language.PureScript.Names.TypeOpName),
      a)]
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.OpName
               'Language.PureScript.Names.TypeOpName))
         a
  {- Arity: 1, Strictness: <S,1*U> -}
5a02a8ba7c29563c0806ada3467324af
  $sinsert_go13 ::
    GHC.Classes.Ord k1 =>
    k1
    -> k1
    -> a1
    -> Data.Map.Internal.Map k1 a1
    -> Data.Map.Internal.Map k1 a1
  {- Arity: 5,
     Strictness: <L,U(A,C(C1(U)),A,A,A,A,A,A)><L,U><S,1*U><L,U><S,1*U> -}
1da35707ac4c5fcf73064e4d1a334446
  $slookup_$s$wpoly_go1 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.TypeOpName))
      a
    -> Language.PureScript.Names.OpName
         'Language.PureScript.Names.TypeOpName
    -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U(U,U,U)> -}
ed4c2793de9717e9a90e554950d05093
  $slookup_$s$wpoly_go13 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.TypeOpName))
      a
    -> Language.PureScript.Names.OpName
         'Language.PureScript.Names.TypeOpName
    -> Language.PureScript.Names.ModuleName
    -> GHC.Base.Maybe a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U(U,U,U)><L,U> -}
79e1d8c2f420388f2f0d2cd32fbd6aaf
  $slookup_$s$wpoly_go2 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.TypeOpName))
      a
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> ((Data.Text.Internal.Text :: *)
        ~R# (Language.PureScript.Names.OpName
               'Language.PureScript.Names.TypeOpName :: *)) =>
       GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S,1*U><L,U><L,U><L,U><L,U> -}
e878a6e76a35bf68d7c481a8b947d7ff
  $slookup_$s$wpoly_go3 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.ValueOpName))
      a
    -> Language.PureScript.Names.OpName
         'Language.PureScript.Names.ValueOpName
    -> Language.PureScript.Names.ModuleName
    -> GHC.Base.Maybe a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U(U,U,U)><L,U> -}
80b449d81a6c04af04d8496f05b799b5
  $slookup_$s$wpoly_go4 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.ValueOpName))
      a
    -> Language.PureScript.Names.OpName
         'Language.PureScript.Names.ValueOpName
    -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U(U,U,U)> -}
00a43add446c5a24090f523deef3fb07
  $slookup_$s$wpoly_go5 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.ValueOpName))
      a
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> ((Data.Text.Internal.Text :: *)
        ~R# (Language.PureScript.Names.OpName
               'Language.PureScript.Names.ValueOpName :: *)) =>
       GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S,1*U><L,U><L,U><L,U><L,U> -}
6d492096e21e6cc3cd61ffab628f5806
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Language.PureScript.Sugar.Operators.$trModule3
                   Language.PureScript.Sugar.Operators.$trModule1) -}
5be4fcf4bc286d2754244725eb44c238
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Sugar.Operators.$trModule2) -}
d1309535246bde418dc6710e5f08df08
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Language.PureScript.Sugar.Operators"#) -}
b1abcb564615e99bea553d0c7bce703c
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Sugar.Operators.$trModule4) -}
1b6182d531597828fd72e6e05ba9a2a5
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"#) -}
397d3ce0af92e8a5e8bd7dd66eb451ef
  $wpoly_go1 ::
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.OpName
         'Language.PureScript.Names.ValueOpName
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.OpName
               'Language.PureScript.Names.ValueOpName))
         a
    -> GHC.Base.Maybe a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U><L,1*U(U,U,U)><S,1*U>, Inline: [0],
     Unfolding: (\ @ a
                   (ww :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww1 :: Language.PureScript.Names.OpName
                             'Language.PureScript.Names.ValueOpName)
                   (w :: Data.Map.Internal.Map
                           (Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.OpName
                                 'Language.PureScript.Names.ValueOpName))
                           a) ->
                 case w of wild {
                   Data.Map.Internal.Bin ipv ipv1 ipv2 ipv3 ipv4
                   -> case ipv1 of ww3 { Language.PureScript.Names.Qualified ww4 ww5 ->
                      case ww of wild1 {
                        GHC.Base.Nothing
                        -> case ww4 of wild2 {
                             GHC.Base.Nothing
                             -> case ww1
                                       `cast`
                                     (Language.PureScript.Names.N:OpName[0]
                                          <'Language.PureScript.Names.ValueOpName>_P) of ww2 { Data.Text.Internal.Text ww6 ww7 ww8 ->
                                case ww5
                                       `cast`
                                     (Language.PureScript.Names.N:OpName[0]
                                          <'Language.PureScript.Names.ValueOpName>_P) of ww9 { Data.Text.Internal.Text ww10 ww11 ww12 ->
                                case Data.Text.$w$ccompare ww6 ww7 ww8 ww10 ww11 ww12 of wild3 {
                                  GHC.Types.LT
                                  -> Language.PureScript.Sugar.Operators.$slookup_$s$wpoly_go5
                                       @ a
                                       ipv3
                                       ww6
                                       ww7
                                       ww8
                                       @~ (Sym (Language.PureScript.Names.N:OpName[0]
                                                    <'Language.PureScript.Names.ValueOpName>_P))
                                  GHC.Types.EQ -> GHC.Base.Just @ a ipv2
                                  GHC.Types.GT
                                  -> Language.PureScript.Sugar.Operators.$slookup_$s$wpoly_go5
                                       @ a
                                       ipv4
                                       ww6
                                       ww7
                                       ww8
                                       @~ (Sym (Language.PureScript.Names.N:OpName[0]
                                                    <'Language.PureScript.Names.ValueOpName>_P)) } } }
                             GHC.Base.Just ipv7
                             -> Language.PureScript.Sugar.Operators.$slookup_$s$wpoly_go4
                                  @ a
                                  ipv3
                                  ww1 }
                        GHC.Base.Just a2
                        -> case ww4 of wild2 {
                             GHC.Base.Nothing
                             -> Language.PureScript.Sugar.Operators.$slookup_$s$wpoly_go3
                                  @ a
                                  ipv4
                                  ww1
                                  a2
                             GHC.Base.Just b1
                             -> case GHC.Classes.$fOrd[]_$ccompare
                                       @ (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.Namespace)
                                       (Language.PureScript.Names.$fOrdProperName
                                          @ 'Language.PureScript.Names.Namespace)
                                       a2 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                       b1
                                         `cast`
                                       (Language.PureScript.Names.N:ModuleName[0]) of wild3 {
                                  GHC.Types.LT
                                  -> Language.PureScript.Sugar.Operators.$slookup_$s$wpoly_go3
                                       @ a
                                       ipv3
                                       ww1
                                       a2
                                  GHC.Types.EQ
                                  -> case ww1
                                            `cast`
                                          (Language.PureScript.Names.N:OpName[0]
                                               <'Language.PureScript.Names.ValueOpName>_P) of ww2 { Data.Text.Internal.Text ww6 ww7 ww8 ->
                                     case ww5
                                            `cast`
                                          (Language.PureScript.Names.N:OpName[0]
                                               <'Language.PureScript.Names.ValueOpName>_P) of ww9 { Data.Text.Internal.Text ww10 ww11 ww12 ->
                                     case Data.Text.$w$ccompare
                                            ww6
                                            ww7
                                            ww8
                                            ww10
                                            ww11
                                            ww12 of wild4 {
                                       GHC.Types.LT
                                       -> Language.PureScript.Sugar.Operators.$slookup_$s$wpoly_go3
                                            @ a
                                            ipv3
                                            ww2
                                              `cast`
                                            (Sym (Language.PureScript.Names.N:OpName[0]
                                                      <'Language.PureScript.Names.ValueOpName>_P))
                                            a2
                                       GHC.Types.EQ -> GHC.Base.Just @ a ipv2
                                       GHC.Types.GT
                                       -> Language.PureScript.Sugar.Operators.$slookup_$s$wpoly_go3
                                            @ a
                                            ipv4
                                            ww2
                                              `cast`
                                            (Sym (Language.PureScript.Names.N:OpName[0]
                                                      <'Language.PureScript.Names.ValueOpName>_P))
                                            a2 } } }
                                  GHC.Types.GT
                                  -> Language.PureScript.Sugar.Operators.$slookup_$s$wpoly_go3
                                       @ a
                                       ipv4
                                       ww1
                                       a2 } } } }
                   Data.Map.Internal.Tip -> GHC.Base.Nothing @ a }) -}
3826b75da1af533116e1f8742904efab
  $wpoly_go13 ::
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.OpName
         'Language.PureScript.Names.TypeOpName
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.OpName
               'Language.PureScript.Names.TypeOpName))
         a
    -> GHC.Base.Maybe a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U><L,1*U(U,U,U)><S,1*U>, Inline: [0],
     Unfolding: (\ @ a
                   (ww :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww1 :: Language.PureScript.Names.OpName
                             'Language.PureScript.Names.TypeOpName)
                   (w :: Data.Map.Internal.Map
                           (Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.OpName
                                 'Language.PureScript.Names.TypeOpName))
                           a) ->
                 case w of wild {
                   Data.Map.Internal.Bin ipv ipv1 ipv2 ipv3 ipv4
                   -> case ipv1 of ww3 { Language.PureScript.Names.Qualified ww4 ww5 ->
                      case ww of wild1 {
                        GHC.Base.Nothing
                        -> case ww4 of wild2 {
                             GHC.Base.Nothing
                             -> case ww1
                                       `cast`
                                     (Language.PureScript.Names.N:OpName[0]
                                          <'Language.PureScript.Names.TypeOpName>_P) of ww2 { Data.Text.Internal.Text ww6 ww7 ww8 ->
                                case ww5
                                       `cast`
                                     (Language.PureScript.Names.N:OpName[0]
                                          <'Language.PureScript.Names.TypeOpName>_P) of ww9 { Data.Text.Internal.Text ww10 ww11 ww12 ->
                                case Data.Text.$w$ccompare ww6 ww7 ww8 ww10 ww11 ww12 of wild3 {
                                  GHC.Types.LT
                                  -> Language.PureScript.Sugar.Operators.$slookup_$s$wpoly_go2
                                       @ a
                                       ipv3
                                       ww6
                                       ww7
                                       ww8
                                       @~ (Sym (Language.PureScript.Names.N:OpName[0]
                                                    <'Language.PureScript.Names.TypeOpName>_P))
                                  GHC.Types.EQ -> GHC.Base.Just @ a ipv2
                                  GHC.Types.GT
                                  -> Language.PureScript.Sugar.Operators.$slookup_$s$wpoly_go2
                                       @ a
                                       ipv4
                                       ww6
                                       ww7
                                       ww8
                                       @~ (Sym (Language.PureScript.Names.N:OpName[0]
                                                    <'Language.PureScript.Names.TypeOpName>_P)) } } }
                             GHC.Base.Just ipv7
                             -> Language.PureScript.Sugar.Operators.$slookup_$s$wpoly_go1
                                  @ a
                                  ipv3
                                  ww1 }
                        GHC.Base.Just a2
                        -> case ww4 of wild2 {
                             GHC.Base.Nothing
                             -> Language.PureScript.Sugar.Operators.$slookup_$s$wpoly_go13
                                  @ a
                                  ipv4
                                  ww1
                                  a2
                             GHC.Base.Just b1
                             -> case GHC.Classes.$fOrd[]_$ccompare
                                       @ (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.Namespace)
                                       (Language.PureScript.Names.$fOrdProperName
                                          @ 'Language.PureScript.Names.Namespace)
                                       a2 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                       b1
                                         `cast`
                                       (Language.PureScript.Names.N:ModuleName[0]) of wild3 {
                                  GHC.Types.LT
                                  -> Language.PureScript.Sugar.Operators.$slookup_$s$wpoly_go13
                                       @ a
                                       ipv3
                                       ww1
                                       a2
                                  GHC.Types.EQ
                                  -> case ww1
                                            `cast`
                                          (Language.PureScript.Names.N:OpName[0]
                                               <'Language.PureScript.Names.TypeOpName>_P) of ww2 { Data.Text.Internal.Text ww6 ww7 ww8 ->
                                     case ww5
                                            `cast`
                                          (Language.PureScript.Names.N:OpName[0]
                                               <'Language.PureScript.Names.TypeOpName>_P) of ww9 { Data.Text.Internal.Text ww10 ww11 ww12 ->
                                     case Data.Text.$w$ccompare
                                            ww6
                                            ww7
                                            ww8
                                            ww10
                                            ww11
                                            ww12 of wild4 {
                                       GHC.Types.LT
                                       -> Language.PureScript.Sugar.Operators.$slookup_$s$wpoly_go13
                                            @ a
                                            ipv3
                                            ww2
                                              `cast`
                                            (Sym (Language.PureScript.Names.N:OpName[0]
                                                      <'Language.PureScript.Names.TypeOpName>_P))
                                            a2
                                       GHC.Types.EQ -> GHC.Base.Just @ a ipv2
                                       GHC.Types.GT
                                       -> Language.PureScript.Sugar.Operators.$slookup_$s$wpoly_go13
                                            @ a
                                            ipv4
                                            ww2
                                              `cast`
                                            (Sym (Language.PureScript.Names.N:OpName[0]
                                                      <'Language.PureScript.Names.TypeOpName>_P))
                                            a2 } } }
                                  GHC.Types.GT
                                  -> Language.PureScript.Sugar.Operators.$slookup_$s$wpoly_go13
                                       @ a
                                       ipv4
                                       ww1
                                       a2 } } } }
                   Data.Map.Internal.Tip -> GHC.Base.Nothing @ a }) -}
d04bfbd34289c7fb5fc09af4968bd42c
  type FixityRecord op alias =
    (Language.PureScript.Names.Qualified op,
     Language.PureScript.AST.SourcePos.SourceSpan,
     Language.PureScript.AST.Operators.Fixity,
     Language.PureScript.Names.Qualified alias)
c1592e461afc281e0013a46a13d05913
  type TypeFixityRecord =
    Language.PureScript.Sugar.Operators.FixityRecord
      (Language.PureScript.Names.OpName
         'Language.PureScript.Names.TypeOpName)
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName)
7fe9d90da996c0392ffc15a306170b08
  type ValueFixityRecord =
    Language.PureScript.Sugar.Operators.FixityRecord
      (Language.PureScript.Names.OpName
         'Language.PureScript.Names.ValueOpName)
      (Data.Either.Either
         Language.PureScript.Names.Ident
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ConstructorName))
a52f61495da0e37398e1d41caebb66f4
  checkFixityExports ::
    Control.Monad.Error.Class.MonadError
      Language.PureScript.Errors.MultipleErrors m =>
    Language.PureScript.AST.Declarations.Module
    -> m Language.PureScript.AST.Declarations.Module
  {- Arity: 1,
     Strictness: <L,U(1*U(1*U(A,1*C1(U),A,A,C(C1(U)),A),A,A,C(U),A),C(U),C(C1(U)))> -}
eecb334d55f77076a595abc64dcd636d
  desugarSignedLiterals ::
    Language.PureScript.AST.Declarations.Module
    -> Language.PureScript.AST.Declarations.Module
  {- Arity: 1, Strictness: <S,1*U(U,U,U,1*U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds1 :: Language.PureScript.AST.Declarations.Module) ->
                 case ds1 of wild { Language.PureScript.AST.Declarations.Module ss coms mn ds2 exts ->
                 Language.PureScript.AST.Declarations.Module
                   ss
                   coms
                   mn
                   (GHC.Base.build
                      @ Language.PureScript.AST.Declarations.Declaration
                      (\ @ b1
                         (c :: Language.PureScript.AST.Declarations.Declaration
                               -> b1 -> b1)[OneShot]
                         (n :: b1)[OneShot] ->
                       GHC.Base.foldr
                         @ Language.PureScript.AST.Declarations.Declaration
                         @ b1
                         (GHC.Base.mapFB
                            @ Language.PureScript.AST.Declarations.Declaration
                            @ b1
                            @ Language.PureScript.AST.Declarations.Declaration
                            c
                            Language.PureScript.Sugar.Operators.desugarSignedLiterals1)
                         n
                         ds2))
                   exts }) -}
849e7018e9d84f98d705fa8ca43af6cb
  desugarSignedLiterals1 ::
    Language.PureScript.AST.Declarations.Declaration
    -> Language.PureScript.AST.Declarations.Declaration
  {- Unfolding: (case Language.PureScript.AST.Traversals.$weverywhereOnValues
                        (GHC.Base.id @ Language.PureScript.AST.Declarations.Declaration)
                        Language.PureScript.Sugar.Operators.desugarSignedLiterals2
                        (GHC.Base.id
                           @ Language.PureScript.AST.Binders.Binder) of ww { (#,,#) ww1 ww2 ww3 ->
                 ww1 }) -}
4d32f0a9b790ba5f1ce7a1da66aac69a
  desugarSignedLiterals2 ::
    Language.PureScript.AST.Declarations.Expr
    -> Language.PureScript.AST.Declarations.Expr
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds1 :: Language.PureScript.AST.Declarations.Expr) ->
                 case ds1 of wild {
                   DEFAULT -> wild
                   Language.PureScript.AST.Declarations.UnaryMinus ss' val
                   -> Language.PureScript.AST.Declarations.App
                        (Language.PureScript.AST.Declarations.Var
                           ss'
                           Language.PureScript.Sugar.Operators.desugarSignedLiterals3)
                        val }) -}
ea710a0eb49ac32d868d7411c4a5c8a8
  desugarSignedLiterals3 ::
    Language.PureScript.Names.Qualified Language.PureScript.Names.Ident
  {- Strictness: m,
     Unfolding: (Language.PureScript.Names.Qualified
                   @ Language.PureScript.Names.Ident
                   (GHC.Base.Nothing @ Language.PureScript.Names.ModuleName)
                   Language.PureScript.Sugar.Operators.desugarSignedLiterals4) -}
1df7909929666f17bcc6d7516aa9f285
  desugarSignedLiterals4 :: Language.PureScript.Names.Ident
  {- Strictness: m1,
     Unfolding: (Language.PureScript.Names.Ident
                   Language.PureScript.Sugar.Operators.desugarSignedLiterals5) -}
ad1313c6baaa40496bf3f388202e085e
  desugarSignedLiterals5 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Constants.negate2) -}
d62b03a4fab729494bbb4945cb197f2c
  rebracket ::
    Control.Monad.Error.Class.MonadError
      Language.PureScript.Errors.MultipleErrors m =>
    [Language.PureScript.Externs.ExternsFile]
    -> [Language.PureScript.AST.Declarations.Module]
    -> m [Language.PureScript.AST.Declarations.Module]
  {- Arity: 1,
     Strictness: <L,U(U(U(U(C(C1(U)),A),C(U),C(C1(U)),C(C1(C1(U))),A,A),C(C1(U)),C(C1(U)),C(U),A),C(U),C(C1(U)))>,
     Unfolding: InlineRule (1, True, False)
                (\ @ m :: * -> *
                   ($dMonadError :: Control.Monad.Error.Class.MonadError
                                      Language.PureScript.Errors.MultipleErrors m) ->
                 Language.PureScript.Sugar.Operators.rebracketFiltered
                   @ m
                   $dMonadError
                   Language.PureScript.Sugar.Operators.rebracket1) -}
a2dec885263bf832f68c6e9be8f0a348
  rebracket1 ::
    Language.PureScript.AST.Declarations.Declaration -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds1 :: Language.PureScript.AST.Declarations.Declaration) ->
                 GHC.Types.True) -}
8da6d412ca171ad60c95070a67b87dc2
  rebracketFiltered ::
    Control.Monad.Error.Class.MonadError
      Language.PureScript.Errors.MultipleErrors m =>
    (Language.PureScript.AST.Declarations.Declaration
     -> GHC.Types.Bool)
    -> [Language.PureScript.Externs.ExternsFile]
    -> [Language.PureScript.AST.Declarations.Module]
    -> m [Language.PureScript.AST.Declarations.Module]
  {- Arity: 1,
     Strictness: <L,U(U(U(U(C(C1(U)),A),C(U),C(C1(U)),C(C1(C1(U))),A,A),C(C1(U)),C(C1(U)),C(U),A),C(U),C(C1(U)))> -}
"SC:$wpoly_go130" [0] forall @ a
                             (sc :: Data.Map.Internal.Map
                                      (Language.PureScript.Names.Qualified
                                         (Language.PureScript.Names.OpName
                                            'Language.PureScript.Names.TypeOpName))
                                      a)
                             (sc1 :: Language.PureScript.Names.OpName
                                       'Language.PureScript.Names.TypeOpName)
  Language.PureScript.Sugar.Operators.$wpoly_go13 @ a
                                                  (GHC.Base.Nothing
                                                     @ Language.PureScript.Names.ModuleName)
                                                  sc1
                                                  sc
  = Language.PureScript.Sugar.Operators.$slookup_$s$wpoly_go1
      @ a
      sc
      sc1
"SC:$wpoly_go130" [0] forall @ a
                             (sc :: Data.Map.Internal.Map
                                      (Language.PureScript.Names.Qualified
                                         (Language.PureScript.Names.OpName
                                            'Language.PureScript.Names.ValueOpName))
                                      a)
                             (sc1 :: Language.PureScript.Names.OpName
                                       'Language.PureScript.Names.ValueOpName)
  Language.PureScript.Sugar.Operators.$wpoly_go1 @ a
                                                 (GHC.Base.Nothing
                                                    @ Language.PureScript.Names.ModuleName)
                                                 sc1
                                                 sc
  = Language.PureScript.Sugar.Operators.$slookup_$s$wpoly_go4
      @ a
      sc
      sc1
"SC:$wpoly_go131" [0] forall @ a
                             (sc :: Data.Map.Internal.Map
                                      (Language.PureScript.Names.Qualified
                                         (Language.PureScript.Names.OpName
                                            'Language.PureScript.Names.TypeOpName))
                                      a)
                             (sc1 :: Language.PureScript.Names.OpName
                                       'Language.PureScript.Names.TypeOpName)
                             (sc2 :: Language.PureScript.Names.ModuleName)
  Language.PureScript.Sugar.Operators.$wpoly_go13 @ a
                                                  (GHC.Base.Just
                                                     @ Language.PureScript.Names.ModuleName
                                                     sc2)
                                                  sc1
                                                  sc
  = Language.PureScript.Sugar.Operators.$slookup_$s$wpoly_go13
      @ a
      sc
      sc1
      sc2
"SC:$wpoly_go131" [0] forall @ a
                             (sc :: Data.Map.Internal.Map
                                      (Language.PureScript.Names.Qualified
                                         (Language.PureScript.Names.OpName
                                            'Language.PureScript.Names.ValueOpName))
                                      a)
                             (sc1 :: Language.PureScript.Names.OpName
                                       'Language.PureScript.Names.ValueOpName)
                             (sc2 :: Language.PureScript.Names.ModuleName)
  Language.PureScript.Sugar.Operators.$wpoly_go1 @ a
                                                 (GHC.Base.Just
                                                    @ Language.PureScript.Names.ModuleName
                                                    sc2)
                                                 sc1
                                                 sc
  = Language.PureScript.Sugar.Operators.$slookup_$s$wpoly_go3
      @ a
      sc
      sc1
      sc2
"SC:$wpoly_go132" [0] forall @ a
                             (sc :: Data.Map.Internal.Map
                                      (Language.PureScript.Names.Qualified
                                         (Language.PureScript.Names.OpName
                                            'Language.PureScript.Names.TypeOpName))
                                      a)
                             (sc1 :: GHC.Prim.ByteArray#)
                             (sc2 :: GHC.Prim.Int#)
                             (sc3 :: GHC.Prim.Int#)
                             (sg :: (Data.Text.Internal.Text :: *)
                                    ~R# (Language.PureScript.Names.OpName
                                           'Language.PureScript.Names.TypeOpName :: *))
  Language.PureScript.Sugar.Operators.$wpoly_go13 @ a
                                                  (GHC.Base.Nothing
                                                     @ Language.PureScript.Names.ModuleName)
                                                  (Data.Text.Internal.Text sc1 sc2 sc3) `cast` sg
                                                  sc
  = Language.PureScript.Sugar.Operators.$slookup_$s$wpoly_go2
      @ a
      sc
      sc1
      sc2
      sc3
      @~ sg
"SC:$wpoly_go132" [0] forall @ a
                             (sc :: Data.Map.Internal.Map
                                      (Language.PureScript.Names.Qualified
                                         (Language.PureScript.Names.OpName
                                            'Language.PureScript.Names.ValueOpName))
                                      a)
                             (sc1 :: GHC.Prim.ByteArray#)
                             (sc2 :: GHC.Prim.Int#)
                             (sc3 :: GHC.Prim.Int#)
                             (sg :: (Data.Text.Internal.Text :: *)
                                    ~R# (Language.PureScript.Names.OpName
                                           'Language.PureScript.Names.ValueOpName :: *))
  Language.PureScript.Sugar.Operators.$wpoly_go1 @ a
                                                 (GHC.Base.Nothing
                                                    @ Language.PureScript.Names.ModuleName)
                                                 (Data.Text.Internal.Text sc1 sc2 sc3) `cast` sg
                                                 sc
  = Language.PureScript.Sugar.Operators.$slookup_$s$wpoly_go5
      @ a
      sc
      sc1
      sc2
      sc3
      @~ sg
"SPEC/Language.PureScript.Sugar.Operators $fEqQualified @ (OpName
                                                            'TypeOpName)" [orphan] forall (v :: GHC.Classes.Eq
                                                                                                                                                                    (Language.PureScript.Names.OpName
                                                                                                                                                                       'Language.PureScript.Names.TypeOpName))
  Language.PureScript.Names.$fEqQualified @ (Language.PureScript.Names.OpName
                                               'Language.PureScript.Names.TypeOpName)
                                          v
  = Language.PureScript.Sugar.Operators.$s$fEqQualified1
"SPEC/Language.PureScript.Sugar.Operators $fEqQualified @ (OpName
                                                            'ValueOpName)" [orphan] forall (v :: GHC.Classes.Eq
                                                                                                                                                                     (Language.PureScript.Names.OpName
                                                                                                                                                                        'Language.PureScript.Names.ValueOpName))
  Language.PureScript.Names.$fEqQualified @ (Language.PureScript.Names.OpName
                                               'Language.PureScript.Names.ValueOpName)
                                          v
  = Language.PureScript.Sugar.Operators.$s$fEqQualified
"SPEC/Language.PureScript.Sugar.Operators $fEqQualified_$c/= @ (OpName
                                                                 'TypeOpName)" [orphan] forall ($dEq :: GHC.Classes.Eq
                                                                                                                                                                                 (Language.PureScript.Names.OpName
                                                                                                                                                                                    'Language.PureScript.Names.TypeOpName))
  Language.PureScript.Names.$fEqQualified_$c/= @ (Language.PureScript.Names.OpName
                                                    'Language.PureScript.Names.TypeOpName)
                                               $dEq
  = Language.PureScript.Sugar.Operators.$s$fEqQualified_$s$fEqQualified_$c/=1
"SPEC/Language.PureScript.Sugar.Operators $fEqQualified_$c/= @ (OpName
                                                                 'ValueOpName)" [orphan] forall ($dEq :: GHC.Classes.Eq
                                                                                                                                                                                  (Language.PureScript.Names.OpName
                                                                                                                                                                                     'Language.PureScript.Names.ValueOpName))
  Language.PureScript.Names.$fEqQualified_$c/= @ (Language.PureScript.Names.OpName
                                                    'Language.PureScript.Names.ValueOpName)
                                               $dEq
  = Language.PureScript.Sugar.Operators.$s$fEqQualified_$s$fEqQualified_$c/=
"SPEC/Language.PureScript.Sugar.Operators $fOrdQualified @ (OpName
                                                             'TypeOpName)" [orphan] forall (v :: GHC.Classes.Ord
                                                                                                                                                                      (Language.PureScript.Names.OpName
                                                                                                                                                                         'Language.PureScript.Names.TypeOpName))
  Language.PureScript.Names.$fOrdQualified @ (Language.PureScript.Names.OpName
                                                'Language.PureScript.Names.TypeOpName)
                                           v
  = Language.PureScript.Sugar.Operators.$s$fOrdQualified1
"SPEC/Language.PureScript.Sugar.Operators $fOrdQualified @ (OpName
                                                             'ValueOpName)" [orphan] forall (v :: GHC.Classes.Ord
                                                                                                                                                                       (Language.PureScript.Names.OpName
                                                                                                                                                                          'Language.PureScript.Names.ValueOpName))
  Language.PureScript.Names.$fOrdQualified @ (Language.PureScript.Names.OpName
                                                'Language.PureScript.Names.ValueOpName)
                                           v
  = Language.PureScript.Sugar.Operators.$s$fOrdQualified
"SPEC/Language.PureScript.Sugar.Operators fromList @ (Qualified
                                                       (OpName 'TypeOpName)) _" [orphan] forall @ a
                                                                                                                                                                ($dOrd :: GHC.Classes.Ord
                                                                                                                                                                            (Language.PureScript.Names.Qualified
                                                                                                                                                                               (Language.PureScript.Names.OpName
                                                                                                                                                                                  'Language.PureScript.Names.TypeOpName)))
  Data.Map.Internal.fromList @ (Language.PureScript.Names.Qualified
                                  (Language.PureScript.Names.OpName
                                     'Language.PureScript.Names.TypeOpName))
                             @ a
                             $dOrd
  = Language.PureScript.Sugar.Operators.$sfromList1 @ a
"SPEC/Language.PureScript.Sugar.Operators fromList @ (Qualified
                                                       (OpName 'ValueOpName)) _" [orphan] forall @ a
                                                                                                                                                                 ($dOrd :: GHC.Classes.Ord
                                                                                                                                                                             (Language.PureScript.Names.Qualified
                                                                                                                                                                                (Language.PureScript.Names.OpName
                                                                                                                                                                                   'Language.PureScript.Names.ValueOpName)))
  Data.Map.Internal.fromList @ (Language.PureScript.Names.Qualified
                                  (Language.PureScript.Names.OpName
                                     'Language.PureScript.Names.ValueOpName))
                             @ a
                             $dOrd
  = Language.PureScript.Sugar.Operators.$sfromList @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

