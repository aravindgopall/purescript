
==================== FINAL INTERFACE ====================
2019-01-24 14:15:45.08825 UTC

interface purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Sugar.Operators 8043
  interface hash: 98df0df381eca8bbb09bbd32f591273c
  ABI hash: 154e23f059bf6b5c94e4715fd9a8dcff
  export-list hash: 67b0d66ece53ad56c6a37f4ef2d3bff2
  orphan hash: 493b27499d91f4846c5cd579bd660578
  flag hash: 69d8350f4fac920b6d109c2ab05c8489
  opt_hash: 2c98c95d41c045ae9c2fb565ec8aabc6
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Language.PureScript.Sugar.Operators.checkFixityExports
  Language.PureScript.Sugar.Operators.desugarSignedLiterals
  Language.PureScript.Sugar.Operators.rebracket
  Language.PureScript.Sugar.Operators.rebracketFiltered
module dependencies: Control.Monad.Supply
                     Control.Monad.Supply.Class Language.PureScript.AST
                     Language.PureScript.AST.Binders
                     Language.PureScript.AST.Declarations
                     Language.PureScript.AST.Exported Language.PureScript.AST.Literals
                     Language.PureScript.AST.Operators Language.PureScript.AST.SourcePos
                     Language.PureScript.AST.Traversals Language.PureScript.Bundle
                     Language.PureScript.Comments Language.PureScript.Constants
                     Language.PureScript.Crash Language.PureScript.Environment
                     Language.PureScript.Errors Language.PureScript.Externs
                     Language.PureScript.Kinds Language.PureScript.Label
                     Language.PureScript.Names Language.PureScript.PSString
                     Language.PureScript.Parser.Lexer Language.PureScript.Parser.State
                     Language.PureScript.Pretty Language.PureScript.Pretty.Common
                     Language.PureScript.Pretty.Kinds Language.PureScript.Pretty.Types
                     Language.PureScript.Pretty.Values
                     Language.PureScript.Publish.BoxesHelpers
                     Language.PureScript.Sugar.Operators.Binders
                     Language.PureScript.Sugar.Operators.Common
                     Language.PureScript.Sugar.Operators.Expr
                     Language.PureScript.Sugar.Operators.Types
                     Language.PureScript.Traversals
                     Language.PureScript.TypeClassDictionaries Language.PureScript.Types
                     Paths_purescript
package dependencies: aeson-1.3.1.1 ansi-terminal-0.8.0.4
                      array-0.5.2.0 async-2.2.1 attoparsec-0.13.2.2 base-4.11.1.0
                      base-compat-0.10.4 binary-0.8.5.1 blaze-builder-0.4.1.0 boxes-0.1.5
                      bytestring-0.10.8.2 colour-2.3.4 containers-0.5.11.0
                      deepseq-1.4.3.0 dlist-0.8.0.4 filepath-1.4.2 ghc-boot-th-8.4.3
                      ghc-prim-0.5.2.0 hashable-1.2.7.0 integer-gmp-1.0.2.0
                      integer-logarithms-1.0.2.1 language-javascript-0.6.0.11
                      microlens-0.4.9.1 microlens-ghc-0.4.9 microlens-mtl-0.1.11.1
                      microlens-platform-0.3.10 microlens-th-0.4.2.1 mtl-2.2.2
                      parsec-3.1.13.0 pattern-arrows-0.0.2 pretty-1.1.3.6
                      primitive-0.6.3.0 protolude-0.2.2 random-1.1 scientific-0.3.6.2
                      sourcemap-0.1.6 split-0.2.3.3 stm-2.4.5.0 syb-0.7 tagged-0.8.5
                      template-haskell-2.13.0.0 text-1.2.3.0 th-abstraction-0.2.8.0
                      time-1.8.0.2 time-locale-compat-0.1.1.4 transformers-0.5.5.0
                      unordered-containers-0.2.9.0 utf8-string-1.0.1.1 uuid-types-1.0.3
                      vector-0.12.0.1
orphans: syb-0.7:Data.Generics.Instances colour-2.3.4:Data.Colour
         stm-2.4.5.0:Control.Monad.STM
         microlens-platform-0.3.10:Lens.Micro.Platform
         microlens-ghc-0.4.9:Lens.Micro.GHC
         attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         vector-0.12.0.1:Data.Vector.Unboxed
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.0:Data.Text.Lazy
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.5.0:Control.Monad.Trans.Error
         text-1.2.3.0:Data.Text binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: aeson-1.3.1.1:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.Graph
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         dlist-0.8.0.4:Data.DList ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         microlens-0.4.9.1:Lens.Micro.Internal
                         microlens-ghc-0.4.9:Lens.Micro.GHC
                         microlens-mtl-0.1.11.1:Lens.Micro.Mtl.Internal
                         microlens-platform-0.3.10:Lens.Micro.Platform
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.Declarations
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.Operators
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.SourcePos
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Comments
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Environment
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Kinds
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Label
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Names
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.PSString
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.TypeClassDictionaries
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Types
                         tagged-0.8.5:Data.Tagged
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
                         th-abstraction-0.2.8.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  base-4.11.1.0:Control.Monad c5f960c67d822497578bffbd3e4c01cf
import  -/  base-4.11.1.0:Data.Either 39d922b371c4c52d426e9ee66de8371a
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.Function 6e6aae9442025aeeb92a909c1bbc3fca
import  -/  base-4.11.1.0:Data.Functor f522c3501272159820fd6f242510732f
import  -/  base-4.11.1.0:Data.Functor.Identity 9430dcaadd71c129eeb5ca7b963c9b54
import  -/  base-4.11.1.0:Data.List 83dc843e47bfc0c5af51e19c6f3476d5
import  -/  base-4.11.1.0:Data.Maybe 409c3da2b142470b68be39ce1d97a9f7
import  -/  base-4.11.1.0:Data.OldList 1b35aa3c6805ff7c8887a35a866fe006
import  -/  base-4.11.1.0:Data.Traversable 7ad4edb9184ea1ae8e73f6b94f115c8c
import  -/  base-4.11.1.0:Data.Tuple 3af66f3ac61ed95ba8a3a3f68ebc5003
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-compat-0.10.4:Prelude.Compat bb6796186ed35a1d09dc34362a3fc27e
import  -/  containers-0.5.11.0:Data.Map 0dbdaec812ef695a364aa6c69e7f7d53
import  -/  containers-0.5.11.0:Data.Map.Internal 0150e210d0ae8df0f3a0669d5e32d8fa
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  mtl-2.2.2:Control.Monad.Error.Class df146c18e27154b8df4c8637c59fd61b
import  -/  Language.PureScript.AST e89b59f8e201961eafd3ff905a683659
  exports: be73d3bb7d4ebe5df082453f6d572075
import  -/  Language.PureScript.AST.Binders 482af52ec934a93b1ca6ec424fbe30f2
  BinaryNoParensBinder fa245b4b20e4d00bda41b59e19ae05a3
  Binder c96edaac3b5fcb24a174f6f4b3f084d4
  ConstructorBinder 82c410a4d9e21c325ba3e1527c50daff
  OpBinder a4e859ef3c8b2681b04a2dfae6eb0fb8
  ParensInBinder 5997f08e343521a086fe234687cfa21a
  PositionedBinder a6b770e5a8f88247c6ef23a04722a775
  TypedBinder 69e3490135b9eb76e3f2c68250002721
import  -/  Language.PureScript.AST.Declarations 586bc75044e8737d02875208d17d4395
  App ae4e12e545757da5fb62189548835120
  Constructor ea2b7d92995197a177f6abf42269c377
  DataDeclaration 2fcba6ad709595ed3c4d0926de54bc2c
  Declaration e92f6ee78a22c0eadc3566d7d1f48d5b
  DeclarationRef 1ef988d2f8db98f35f578bde9282f468
  DeferredDictionary 4767b924c347cb558c8259d23777dc47
  ErrorInModule fa705731a479914ad1b2d8aff2d06ff6
  Expr e92f6ee78a22c0eadc3566d7d1f48d5b
  ExternDeclaration 180e172298441327dfef1022795a10e0
  InvalidOperatorInBinder bb615f103eb53d9736f59c500b929de4
  Module 305128e30e200d34d712365aa2d509df
  Module 3342e00ee072addfd009ee61e87fb865
  MultipleTypeOpFixities 17f52b303ca5418809e6ef3776320ec8
  MultipleValueOpFixities f0acf205081fb137d77ccba857846c71
  Op bbe2a0a58ceeace944ccf429f680f6bc
  Parens ce804ea11612979be1464b51c74c24ab
  PositionedValue b90293950702fd6b659d7cd86d309f72
  SimpleErrorMessage 85049d3cbfbe9dc15f83f3061172f760
  TransitiveDctorExportError 9c72f8e85accb21ae307dbab45a1b7b2
  TransitiveExportError f05abdd432541d03ea993eba5ab2ffee
  TypeClassDeclaration 19936abcaf3693a6825ccbc13b2590dc
  TypeClassDictionary 531ed710fa3e0860894127586614f844
  TypeDeclaration 28394461dbd073cca9cdbd263dbb4335
  TypeDeclarationData 3e894c7cbf790244173310e6e620d669
  TypeFixity 422dbbc62f61e8d72aabe0ec3c32e2e8
  TypeFixityDeclaration 5a4e2ba83bf57ee4021fdafe70b4eb9a
  TypeInstanceDeclaration 46d66658dd5a30ba03e36fc960162f20
  TypeOpRef cd0b4bf0e37e512f28be11229ab2e497
  TypeRef 7b2aa9fe81ad40f64c659855da835def
  TypeSynonymDeclaration 1cfe9af195a40456074b96ff0ca4519c
  TypedValue 0acc3ace791a36484dcda3706df33cef
  UnaryMinus 00e8f54110f0049331236b115b108a07
  UnknownName 4183c70ff29ad805571bed2cb1e6b9e3
  ValueFixity 9e475bb09c95e859fc062456332129d5
  ValueFixityDeclaration 6da09cca72fc0dd8bafa2b8ed78d033e
  ValueOpRef 08efa0d335ba46b69b381a343c739614
  ValueRef 78dee2d86cdf935e8811ecdd18c169d3
  Var 5fd1e80d993ab2f76a4e002bbbfc9990
  declSourceSpan 56c2d6f201f67f106a4f2e1dc3f0bb49
  getFixityDecl 37948c177690d6e92f7f8c057c91b5f1
  getTypeRef 49d73504ee072e8c2fbd37f35c16fbff
import  -/  Language.PureScript.AST.Operators 615a873c5f62908f354b9d4840cbeb63
  Associativity 228a0ef1b3774b11d1a92fae92fb43a0
  Fixity 141f87a59136c90c1be577c19942dfd4
  Fixity 228a0ef1b3774b11d1a92fae92fb43a0
import  -/  Language.PureScript.AST.SourcePos 63acacac5b7be73d04e5be0047a9a89a
  SourceSpan 1e0cf2bd3ea18f97a2ff152297f09219
  internalModuleSourceSpan f13de72620ea3980769d3252f1949a4a
import  -/  Language.PureScript.AST.Traversals f5adaf844c5e9d0f0678a8b574a32aa6
  everywhereOnValues f4659f155225bd0f038ec5ce751367f9
  everywhereWithContextOnValuesM 8b088f6a1ad3879e25631321bc5daeec
import  -/  Language.PureScript.Constants 69f48af5637c1cbbd07a6f85918359c3
  exports: 9c458e31ccbc9e07ff15471cf48a55ee
  negate f20a91ad9d930a40924d2c7851e42a34
import  -/  Language.PureScript.Crash 3dd739d57f17e8a1e9cd97afd3faf067
  exports: a9d2725f359c2d113bd38076e88ec681
  internalError d33c2a09c5cbe8e68c0bc27d1500ba1a
import  -/  Language.PureScript.Errors 3c1ad933587510f8b20a8c9ec2e86ce9
  exports: 8e61484c4664eceb943d9fc4820c721b
  MultipleErrors e1ef6a17348ccfe3ef65185d3c5f9026
  addHint 4d7c0f041e7397261babf0b1c1669b2a
  errorMessage 4308e76c0636918842d6acdb173a8e4b
  errorMessage' d5b3fcc13faf321f693b39ae31b8bd13
  parU ba83f09a68cd72d36addca6319b4b6e0
  rethrow 3f15f6976fa85d5a6c226df5a731c52a
  rethrowWithPosition fdf5a24f58598d5459d72d8baaae797c
import  -/  Language.PureScript.Externs cf933be49760ec7d1e991d8ad7f6146f
  exports: caea0e8e36630f9e250d475ec2e68707
  ExternsFile 3c90d25a909106e2dfae91839ad7749d
  ExternsFile c010c09fe85776adf7c6787c7d79c898
  ExternsFixity b51e861990e5c53c59e0be20b2914e4a
  ExternsFixity faf775006e4902ca2862b62427af99db
  ExternsTypeFixity 95b88cb3880c7981f3c00bfab786621e
  ExternsTypeFixity 2cdf2d30c32e0c2e399d4c8039173e63
  efDeclarations c010c09fe85776adf7c6787c7d79c898
  efExports c010c09fe85776adf7c6787c7d79c898
  efFixities c010c09fe85776adf7c6787c7d79c898
  efImports c010c09fe85776adf7c6787c7d79c898
  efModuleName c010c09fe85776adf7c6787c7d79c898
  efSourceSpan c010c09fe85776adf7c6787c7d79c898
  efTypeFixities c010c09fe85776adf7c6787c7d79c898
  efVersion c010c09fe85776adf7c6787c7d79c898
import  -/  Language.PureScript.Names 00f694509122478d97b327fbbccae327
  exports: ad7ae34f85124c68e8ba1c90fb2e732f
  ConstructorName 84054a8bbbe827ba2ce7da83056a95ee
  Ident 71f167265716f619863a793fa311e198
  Ident bad3562aa6138b6192713ac281080869
  OpName 9af301165f72160425c5e0dde6525338
  ProperName a7268334e0b909381550b9329cb80fcc
  Qualified b6e1bc9e7244a41d3c6149c9b5c2d6d8
  Qualified 1b2ddf0c04464d2fa2588925f10c1966
  TyOpName 440dd328b811fbf1c8a081bffcb8593d
  TypeName 40ce511c66a72431b4e87351210f7b03
  TypeOpName db73fc39fef75f034a0b4a8074947dd9
  ValOpName c1457b90b10104e4d37147e7648f89b9
  ValueOpName 11964a7dc7a3029edbea30fc5b4578c2
import  -/  Language.PureScript.Sugar.Operators.Binders 00a028d282e1f9f8f88a452de583f0cd
  exports: 16d6efb184e0ccd3e3065cae9ad3285b
  matchBinderOperators 0048ae496d9de740bfbac1bfc25ca57f
import  -/  Language.PureScript.Sugar.Operators.Expr 76af0adf3cf93b131ad61499ad160115
  exports: f92d58bc326b4d06dfeff3ee4b12ad85
  matchExprOperators 801cff3935bfd1122cbe671614f69f0c
import  -/  Language.PureScript.Sugar.Operators.Types a2a4b60083e37658c6f1cf6c05a5af2b
  exports: 64dcfbfd715be2ce244c86e2678b5514
  matchTypeOperators 183fc7ed253816e7967f9bfeb6718f14
import  -/  Language.PureScript.Traversals e97764d7972cc6ba421a6be0a3ce6bda
  exports: cbb821b2ee7c6d00cdf62285e1dbe432
  defS d63aa97f74d8b43282d6090aabe13394
  sndM c93ef73e127a3a54c4cd1e5e2194b237
import  -/  Language.PureScript.Types 80a51f62cb3e6c71f024289b88f07b7f
  exports: 229bb7528146da886cffbefad5822e19
  BinaryNoParensType e0f6df16f0ffaf49053e71d305a7063a
  Constraint a0b1e737f9fdb5b2f711c97dd5895f69
  ParensInType e197aabee5513dc57789571f03a80719
  SourceType 0ac818517c14fedd280ef5885ae0cdc3
  Type d5fc19231e8a71936895da17eade4f5b
  TypeApp 9dadf19674ff2d747cbba0c42dfad343
  TypeConstructor c7b7bcec494a17e684a206aeb55ef57b
  TypeOp c293e95b09cf540c33c1d0b1480f5f80
  everywhereOnTypesTopDownM 0c58da385470d741f52f19e80f31c7a2
  overConstraintArgs 2da70afc69a79b004bf08baecbde0992
7dd675214e0c17aa85bcb39e2305fa14
  $s$fEqQualified ::
    GHC.Classes.Eq
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.ValueOpName))
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.Qualified
                       (Language.PureScript.Names.OpName
                          'Language.PureScript.Names.ValueOpName))
                  (Language.PureScript.Names.$fEqQualified_$c==
                     @ (Language.PureScript.Names.OpName
                          'Language.PureScript.Names.ValueOpName)
                     (Language.PureScript.Names.$fEqOpName
                        @ 'Language.PureScript.Names.ValueOpName))
                  Language.PureScript.Sugar.Operators.$s$fEqQualified_$s$fEqQualified_$c/= -}
9b0044e8180eb1e00a53f7bdb4a6cc8f
  $s$fEqQualified1 ::
    GHC.Classes.Eq
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.TypeOpName))
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.Qualified
                       (Language.PureScript.Names.OpName
                          'Language.PureScript.Names.TypeOpName))
                  (Language.PureScript.Names.$fEqQualified_$c==
                     @ (Language.PureScript.Names.OpName
                          'Language.PureScript.Names.TypeOpName)
                     (Language.PureScript.Names.$fEqOpName
                        @ 'Language.PureScript.Names.TypeOpName))
                  Language.PureScript.Sugar.Operators.$s$fEqQualified_$s$fEqQualified_$c/=1 -}
ddd6579ed884eece94e8efe4a7a405ff
  $s$fEqQualified_$s$fEqQualified_$c/= ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.OpName
         'Language.PureScript.Names.ValueOpName)
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.ValueOpName)
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U(U,U,U))><S(SL),1*U(1*U,1*U(U,U,U))>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.OpName
                              'Language.PureScript.Names.ValueOpName))
                   (y :: Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.OpName
                              'Language.PureScript.Names.ValueOpName)) ->
                 case Language.PureScript.Names.$fEqQualified_$c==
                        @ (Language.PureScript.Names.OpName
                             'Language.PureScript.Names.ValueOpName)
                        (Language.PureScript.Names.$fEqOpName
                           @ 'Language.PureScript.Names.ValueOpName)
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
0eec657321549d878c14ef518248a002
  $s$fEqQualified_$s$fEqQualified_$c/=1 ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.OpName
         'Language.PureScript.Names.TypeOpName)
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.TypeOpName)
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U(U,U,U))><S(SL),1*U(1*U,1*U(U,U,U))>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.OpName
                              'Language.PureScript.Names.TypeOpName))
                   (y :: Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.OpName
                              'Language.PureScript.Names.TypeOpName)) ->
                 case Language.PureScript.Names.$fEqQualified_$c==
                        @ (Language.PureScript.Names.OpName
                             'Language.PureScript.Names.TypeOpName)
                        (Language.PureScript.Names.$fEqOpName
                           @ 'Language.PureScript.Names.TypeOpName)
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
ddbd230064d9e05f478c84bc6e770248
  $s$fOrdQualified ::
    GHC.Classes.Ord
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.ValueOpName))
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.Qualified
                       (Language.PureScript.Names.OpName
                          'Language.PureScript.Names.ValueOpName))
                  Language.PureScript.Sugar.Operators.$s$fEqQualified
                  (Language.PureScript.Names.$fOrdQualified_$ccompare
                     @ (Language.PureScript.Names.OpName
                          'Language.PureScript.Names.ValueOpName)
                     (Language.PureScript.Names.$fOrdOpName
                        @ 'Language.PureScript.Names.ValueOpName))
                  (Language.PureScript.Names.$fOrdQualified_$c<
                     @ (Language.PureScript.Names.OpName
                          'Language.PureScript.Names.ValueOpName)
                     (Language.PureScript.Names.$fOrdOpName
                        @ 'Language.PureScript.Names.ValueOpName))
                  (\ (a1 :: Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.OpName
                                 'Language.PureScript.Names.ValueOpName))
                     (b :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.OpName
                                'Language.PureScript.Names.ValueOpName)) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ (Language.PureScript.Names.OpName
                               'Language.PureScript.Names.ValueOpName)
                          (Language.PureScript.Names.$fOrdOpName
                             @ 'Language.PureScript.Names.ValueOpName)
                          b
                          a1 of wild {
                     GHC.Types.False -> GHC.Types.True
                     GHC.Types.True -> GHC.Types.False })
                  (\ (a1 :: Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.OpName
                                 'Language.PureScript.Names.ValueOpName))
                     (b :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.OpName
                                'Language.PureScript.Names.ValueOpName)) ->
                   Language.PureScript.Names.$fOrdQualified_$c<
                     @ (Language.PureScript.Names.OpName
                          'Language.PureScript.Names.ValueOpName)
                     (Language.PureScript.Names.$fOrdOpName
                        @ 'Language.PureScript.Names.ValueOpName)
                     b
                     a1)
                  (\ (a1 :: Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.OpName
                                 'Language.PureScript.Names.ValueOpName))
                     (b :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.OpName
                                'Language.PureScript.Names.ValueOpName)) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ (Language.PureScript.Names.OpName
                               'Language.PureScript.Names.ValueOpName)
                          (Language.PureScript.Names.$fOrdOpName
                             @ 'Language.PureScript.Names.ValueOpName)
                          a1
                          b of wild {
                     GHC.Types.False -> GHC.Types.True
                     GHC.Types.True -> GHC.Types.False })
                  (\ (x :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.OpName
                                'Language.PureScript.Names.ValueOpName))
                     (y :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.OpName
                                'Language.PureScript.Names.ValueOpName)) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ (Language.PureScript.Names.OpName
                               'Language.PureScript.Names.ValueOpName)
                          (Language.PureScript.Names.$fOrdOpName
                             @ 'Language.PureScript.Names.ValueOpName)
                          y
                          x of wild {
                     GHC.Types.False -> y GHC.Types.True -> x })
                  (\ (x :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.OpName
                                'Language.PureScript.Names.ValueOpName))
                     (y :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.OpName
                                'Language.PureScript.Names.ValueOpName)) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ (Language.PureScript.Names.OpName
                               'Language.PureScript.Names.ValueOpName)
                          (Language.PureScript.Names.$fOrdOpName
                             @ 'Language.PureScript.Names.ValueOpName)
                          y
                          x of wild {
                     GHC.Types.False -> x GHC.Types.True -> y }) -}
e20d3dd1404101badf5316812f5eca79
  $s$fOrdQualified1 ::
    GHC.Classes.Ord
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.TypeOpName))
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.Qualified
                       (Language.PureScript.Names.OpName
                          'Language.PureScript.Names.TypeOpName))
                  Language.PureScript.Sugar.Operators.$s$fEqQualified1
                  (Language.PureScript.Names.$fOrdQualified_$ccompare
                     @ (Language.PureScript.Names.OpName
                          'Language.PureScript.Names.TypeOpName)
                     (Language.PureScript.Names.$fOrdOpName
                        @ 'Language.PureScript.Names.TypeOpName))
                  (Language.PureScript.Names.$fOrdQualified_$c<
                     @ (Language.PureScript.Names.OpName
                          'Language.PureScript.Names.TypeOpName)
                     (Language.PureScript.Names.$fOrdOpName
                        @ 'Language.PureScript.Names.TypeOpName))
                  (\ (a1 :: Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.OpName
                                 'Language.PureScript.Names.TypeOpName))
                     (b :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.OpName
                                'Language.PureScript.Names.TypeOpName)) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ (Language.PureScript.Names.OpName
                               'Language.PureScript.Names.TypeOpName)
                          (Language.PureScript.Names.$fOrdOpName
                             @ 'Language.PureScript.Names.TypeOpName)
                          b
                          a1 of wild {
                     GHC.Types.False -> GHC.Types.True
                     GHC.Types.True -> GHC.Types.False })
                  (\ (a1 :: Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.OpName
                                 'Language.PureScript.Names.TypeOpName))
                     (b :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.OpName
                                'Language.PureScript.Names.TypeOpName)) ->
                   Language.PureScript.Names.$fOrdQualified_$c<
                     @ (Language.PureScript.Names.OpName
                          'Language.PureScript.Names.TypeOpName)
                     (Language.PureScript.Names.$fOrdOpName
                        @ 'Language.PureScript.Names.TypeOpName)
                     b
                     a1)
                  (\ (a1 :: Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.OpName
                                 'Language.PureScript.Names.TypeOpName))
                     (b :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.OpName
                                'Language.PureScript.Names.TypeOpName)) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ (Language.PureScript.Names.OpName
                               'Language.PureScript.Names.TypeOpName)
                          (Language.PureScript.Names.$fOrdOpName
                             @ 'Language.PureScript.Names.TypeOpName)
                          a1
                          b of wild {
                     GHC.Types.False -> GHC.Types.True
                     GHC.Types.True -> GHC.Types.False })
                  (\ (x :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.OpName
                                'Language.PureScript.Names.TypeOpName))
                     (y :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.OpName
                                'Language.PureScript.Names.TypeOpName)) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ (Language.PureScript.Names.OpName
                               'Language.PureScript.Names.TypeOpName)
                          (Language.PureScript.Names.$fOrdOpName
                             @ 'Language.PureScript.Names.TypeOpName)
                          y
                          x of wild {
                     GHC.Types.False -> y GHC.Types.True -> x })
                  (\ (x :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.OpName
                                'Language.PureScript.Names.TypeOpName))
                     (y :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.OpName
                                'Language.PureScript.Names.TypeOpName)) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ (Language.PureScript.Names.OpName
                               'Language.PureScript.Names.TypeOpName)
                          (Language.PureScript.Names.$fOrdOpName
                             @ 'Language.PureScript.Names.TypeOpName)
                          y
                          x of wild {
                     GHC.Types.False -> x GHC.Types.True -> y }) -}
dd2870c70d55f0e2da5ea767ff39b05d
  $sfromList ::
    [(Language.PureScript.Names.Qualified
        (Language.PureScript.Names.OpName
           'Language.PureScript.Names.ValueOpName),
      a)]
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.OpName
               'Language.PureScript.Names.ValueOpName))
         a
  {- Arity: 1, Strictness: <S,1*U> -}
0bd8b9fceb9f47afc58ce1e5608be4fb
  $sfromList1 ::
    [(Language.PureScript.Names.Qualified
        (Language.PureScript.Names.OpName
           'Language.PureScript.Names.TypeOpName),
      a)]
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.OpName
               'Language.PureScript.Names.TypeOpName))
         a
  {- Arity: 1, Strictness: <S,1*U> -}
c16882ffa0b6d1658ac8e6b73605b4dd
  $sinsert_go13 ::
    GHC.Classes.Ord k1 =>
    k1
    -> k1
    -> a1
    -> Data.Map.Internal.Map k1 a1
    -> Data.Map.Internal.Map k1 a1
  {- Arity: 5,
     Strictness: <L,U(A,C(C1(U)),A,A,A,A,A,A)><L,U><S,1*U><L,U><S,1*U> -}
d7e7d27a71e7302f2c6b02493ba550a3
  $slookup_$s$wpoly_go1 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.TypeOpName))
      a
    -> Language.PureScript.Names.OpName
         'Language.PureScript.Names.TypeOpName
    -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U(U,U,U)> -}
f0f69e6da3c02536b5c0817106d7dd8e
  $slookup_$s$wpoly_go13 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.TypeOpName))
      a
    -> Language.PureScript.Names.OpName
         'Language.PureScript.Names.TypeOpName
    -> Language.PureScript.Names.ModuleName
    -> GHC.Base.Maybe a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U(U,U,U)><L,U> -}
ba86cc01af5cb6741c3e1a776a8d7efd
  $slookup_$s$wpoly_go2 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.TypeOpName))
      a
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> ((Data.Text.Internal.Text :: *)
        ~R# (Language.PureScript.Names.OpName
               'Language.PureScript.Names.TypeOpName :: *)) =>
       GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S,1*U><L,U><L,U><L,U><L,U> -}
6ded0aa661a71108039c0754daa161dc
  $slookup_$s$wpoly_go3 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.ValueOpName))
      a
    -> Language.PureScript.Names.OpName
         'Language.PureScript.Names.ValueOpName
    -> Language.PureScript.Names.ModuleName
    -> GHC.Base.Maybe a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U(U,U,U)><L,U> -}
4e2811fc46a812f115915379f0353907
  $slookup_$s$wpoly_go4 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.ValueOpName))
      a
    -> Language.PureScript.Names.OpName
         'Language.PureScript.Names.ValueOpName
    -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U(U,U,U)> -}
d114d68d815ddd224b9a68502b2d3c1c
  $slookup_$s$wpoly_go5 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.ValueOpName))
      a
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> ((Data.Text.Internal.Text :: *)
        ~R# (Language.PureScript.Names.OpName
               'Language.PureScript.Names.ValueOpName :: *)) =>
       GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S,1*U><L,U><L,U><L,U><L,U> -}
2c48066523bd519c4f8bbd4f71f04ebf
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Language.PureScript.Sugar.Operators.$trModule3
                   Language.PureScript.Sugar.Operators.$trModule1) -}
4a02190483aef979bd6b55e577de6619
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Sugar.Operators.$trModule2) -}
1141c2a20cb719ecf4eacec5ef3e44c6
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Language.PureScript.Sugar.Operators"#) -}
e277236e37b248193076f9d2e792de42
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Sugar.Operators.$trModule4) -}
8b9bc772dc49784b7244668e6dabf98c
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"#) -}
f205df0405117295df3740b949ae02b8
  $wpoly_go1 ::
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.OpName
         'Language.PureScript.Names.ValueOpName
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.OpName
               'Language.PureScript.Names.ValueOpName))
         a
    -> GHC.Base.Maybe a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U><L,1*U(U,U,U)><S,1*U>, Inline: [0],
     Unfolding: (\ @ a
                   (ww :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww1 :: Language.PureScript.Names.OpName
                             'Language.PureScript.Names.ValueOpName)
                   (w :: Data.Map.Internal.Map
                           (Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.OpName
                                 'Language.PureScript.Names.ValueOpName))
                           a) ->
                 case w of wild {
                   Data.Map.Internal.Bin ipv ipv1 ipv2 ipv3 ipv4
                   -> case ipv1 of ww3 { Language.PureScript.Names.Qualified ww4 ww5 ->
                      case ww of wild1 {
                        GHC.Base.Nothing
                        -> case ww4 of wild2 {
                             GHC.Base.Nothing
                             -> case ww1
                                       `cast`
                                     (Language.PureScript.Names.N:OpName[0]
                                          <'Language.PureScript.Names.ValueOpName>_P) of ww2 { Data.Text.Internal.Text ww6 ww7 ww8 ->
                                case ww5
                                       `cast`
                                     (Language.PureScript.Names.N:OpName[0]
                                          <'Language.PureScript.Names.ValueOpName>_P) of ww9 { Data.Text.Internal.Text ww10 ww11 ww12 ->
                                case Data.Text.$w$ccompare ww6 ww7 ww8 ww10 ww11 ww12 of wild3 {
                                  GHC.Types.LT
                                  -> Language.PureScript.Sugar.Operators.$slookup_$s$wpoly_go5
                                       @ a
                                       ipv3
                                       ww6
                                       ww7
                                       ww8
                                       @~ (Sym (Language.PureScript.Names.N:OpName[0]
                                                    <'Language.PureScript.Names.ValueOpName>_P))
                                  GHC.Types.EQ -> GHC.Base.Just @ a ipv2
                                  GHC.Types.GT
                                  -> Language.PureScript.Sugar.Operators.$slookup_$s$wpoly_go5
                                       @ a
                                       ipv4
                                       ww6
                                       ww7
                                       ww8
                                       @~ (Sym (Language.PureScript.Names.N:OpName[0]
                                                    <'Language.PureScript.Names.ValueOpName>_P)) } } }
                             GHC.Base.Just ipv7
                             -> Language.PureScript.Sugar.Operators.$slookup_$s$wpoly_go4
                                  @ a
                                  ipv3
                                  ww1 }
                        GHC.Base.Just a2
                        -> case ww4 of wild2 {
                             GHC.Base.Nothing
                             -> Language.PureScript.Sugar.Operators.$slookup_$s$wpoly_go3
                                  @ a
                                  ipv4
                                  ww1
                                  a2
                             GHC.Base.Just b1
                             -> case GHC.Classes.$fOrd[]_$ccompare
                                       @ (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.Namespace)
                                       (Language.PureScript.Names.$fOrdProperName
                                          @ 'Language.PureScript.Names.Namespace)
                                       a2 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                       b1
                                         `cast`
                                       (Language.PureScript.Names.N:ModuleName[0]) of wild3 {
                                  GHC.Types.LT
                                  -> Language.PureScript.Sugar.Operators.$slookup_$s$wpoly_go3
                                       @ a
                                       ipv3
                                       ww1
                                       a2
                                  GHC.Types.EQ
                                  -> case ww1
                                            `cast`
                                          (Language.PureScript.Names.N:OpName[0]
                                               <'Language.PureScript.Names.ValueOpName>_P) of ww2 { Data.Text.Internal.Text ww6 ww7 ww8 ->
                                     case ww5
                                            `cast`
                                          (Language.PureScript.Names.N:OpName[0]
                                               <'Language.PureScript.Names.ValueOpName>_P) of ww9 { Data.Text.Internal.Text ww10 ww11 ww12 ->
                                     case Data.Text.$w$ccompare
                                            ww6
                                            ww7
                                            ww8
                                            ww10
                                            ww11
                                            ww12 of wild4 {
                                       GHC.Types.LT
                                       -> Language.PureScript.Sugar.Operators.$slookup_$s$wpoly_go3
                                            @ a
                                            ipv3
                                            ww2
                                              `cast`
                                            (Sym (Language.PureScript.Names.N:OpName[0]
                                                      <'Language.PureScript.Names.ValueOpName>_P))
                                            a2
                                       GHC.Types.EQ -> GHC.Base.Just @ a ipv2
                                       GHC.Types.GT
                                       -> Language.PureScript.Sugar.Operators.$slookup_$s$wpoly_go3
                                            @ a
                                            ipv4
                                            ww2
                                              `cast`
                                            (Sym (Language.PureScript.Names.N:OpName[0]
                                                      <'Language.PureScript.Names.ValueOpName>_P))
                                            a2 } } }
                                  GHC.Types.GT
                                  -> Language.PureScript.Sugar.Operators.$slookup_$s$wpoly_go3
                                       @ a
                                       ipv4
                                       ww1
                                       a2 } } } }
                   Data.Map.Internal.Tip -> GHC.Base.Nothing @ a }) -}
9a9e973ec3b879818e8c3a1f32d3cd74
  $wpoly_go13 ::
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.OpName
         'Language.PureScript.Names.TypeOpName
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.OpName
               'Language.PureScript.Names.TypeOpName))
         a
    -> GHC.Base.Maybe a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U><L,1*U(U,U,U)><S,1*U>, Inline: [0],
     Unfolding: (\ @ a
                   (ww :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww1 :: Language.PureScript.Names.OpName
                             'Language.PureScript.Names.TypeOpName)
                   (w :: Data.Map.Internal.Map
                           (Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.OpName
                                 'Language.PureScript.Names.TypeOpName))
                           a) ->
                 case w of wild {
                   Data.Map.Internal.Bin ipv ipv1 ipv2 ipv3 ipv4
                   -> case ipv1 of ww3 { Language.PureScript.Names.Qualified ww4 ww5 ->
                      case ww of wild1 {
                        GHC.Base.Nothing
                        -> case ww4 of wild2 {
                             GHC.Base.Nothing
                             -> case ww1
                                       `cast`
                                     (Language.PureScript.Names.N:OpName[0]
                                          <'Language.PureScript.Names.TypeOpName>_P) of ww2 { Data.Text.Internal.Text ww6 ww7 ww8 ->
                                case ww5
                                       `cast`
                                     (Language.PureScript.Names.N:OpName[0]
                                          <'Language.PureScript.Names.TypeOpName>_P) of ww9 { Data.Text.Internal.Text ww10 ww11 ww12 ->
                                case Data.Text.$w$ccompare ww6 ww7 ww8 ww10 ww11 ww12 of wild3 {
                                  GHC.Types.LT
                                  -> Language.PureScript.Sugar.Operators.$slookup_$s$wpoly_go2
                                       @ a
                                       ipv3
                                       ww6
                                       ww7
                                       ww8
                                       @~ (Sym (Language.PureScript.Names.N:OpName[0]
                                                    <'Language.PureScript.Names.TypeOpName>_P))
                                  GHC.Types.EQ -> GHC.Base.Just @ a ipv2
                                  GHC.Types.GT
                                  -> Language.PureScript.Sugar.Operators.$slookup_$s$wpoly_go2
                                       @ a
                                       ipv4
                                       ww6
                                       ww7
                                       ww8
                                       @~ (Sym (Language.PureScript.Names.N:OpName[0]
                                                    <'Language.PureScript.Names.TypeOpName>_P)) } } }
                             GHC.Base.Just ipv7
                             -> Language.PureScript.Sugar.Operators.$slookup_$s$wpoly_go1
                                  @ a
                                  ipv3
                                  ww1 }
                        GHC.Base.Just a2
                        -> case ww4 of wild2 {
                             GHC.Base.Nothing
                             -> Language.PureScript.Sugar.Operators.$slookup_$s$wpoly_go13
                                  @ a
                                  ipv4
                                  ww1
                                  a2
                             GHC.Base.Just b1
                             -> case GHC.Classes.$fOrd[]_$ccompare
                                       @ (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.Namespace)
                                       (Language.PureScript.Names.$fOrdProperName
                                          @ 'Language.PureScript.Names.Namespace)
                                       a2 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                       b1
                                         `cast`
                                       (Language.PureScript.Names.N:ModuleName[0]) of wild3 {
                                  GHC.Types.LT
                                  -> Language.PureScript.Sugar.Operators.$slookup_$s$wpoly_go13
                                       @ a
                                       ipv3
                                       ww1
                                       a2
                                  GHC.Types.EQ
                                  -> case ww1
                                            `cast`
                                          (Language.PureScript.Names.N:OpName[0]
                                               <'Language.PureScript.Names.TypeOpName>_P) of ww2 { Data.Text.Internal.Text ww6 ww7 ww8 ->
                                     case ww5
                                            `cast`
                                          (Language.PureScript.Names.N:OpName[0]
                                               <'Language.PureScript.Names.TypeOpName>_P) of ww9 { Data.Text.Internal.Text ww10 ww11 ww12 ->
                                     case Data.Text.$w$ccompare
                                            ww6
                                            ww7
                                            ww8
                                            ww10
                                            ww11
                                            ww12 of wild4 {
                                       GHC.Types.LT
                                       -> Language.PureScript.Sugar.Operators.$slookup_$s$wpoly_go13
                                            @ a
                                            ipv3
                                            ww2
                                              `cast`
                                            (Sym (Language.PureScript.Names.N:OpName[0]
                                                      <'Language.PureScript.Names.TypeOpName>_P))
                                            a2
                                       GHC.Types.EQ -> GHC.Base.Just @ a ipv2
                                       GHC.Types.GT
                                       -> Language.PureScript.Sugar.Operators.$slookup_$s$wpoly_go13
                                            @ a
                                            ipv4
                                            ww2
                                              `cast`
                                            (Sym (Language.PureScript.Names.N:OpName[0]
                                                      <'Language.PureScript.Names.TypeOpName>_P))
                                            a2 } } }
                                  GHC.Types.GT
                                  -> Language.PureScript.Sugar.Operators.$slookup_$s$wpoly_go13
                                       @ a
                                       ipv4
                                       ww1
                                       a2 } } } }
                   Data.Map.Internal.Tip -> GHC.Base.Nothing @ a }) -}
8d084b93d6225f1255960167e10de187
  type FixityRecord op alias =
    (Language.PureScript.Names.Qualified op,
     Language.PureScript.AST.SourcePos.SourceSpan,
     Language.PureScript.AST.Operators.Fixity,
     Language.PureScript.Names.Qualified alias)
e92f2d761aa8e58fb4af59028e10c649
  type TypeFixityRecord =
    Language.PureScript.Sugar.Operators.FixityRecord
      (Language.PureScript.Names.OpName
         'Language.PureScript.Names.TypeOpName)
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName)
1f1db614e941b0365519e8db54c74b68
  type ValueFixityRecord =
    Language.PureScript.Sugar.Operators.FixityRecord
      (Language.PureScript.Names.OpName
         'Language.PureScript.Names.ValueOpName)
      (Data.Either.Either
         Language.PureScript.Names.Ident
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ConstructorName))
b0b3f0cc301c082865561107e9caaec4
  checkFixityExports ::
    Control.Monad.Error.Class.MonadError
      Language.PureScript.Errors.MultipleErrors m =>
    Language.PureScript.AST.Declarations.Module
    -> m Language.PureScript.AST.Declarations.Module
  {- Arity: 1,
     Strictness: <L,U(1*U(1*U(A,1*C1(U),A,A,C(C1(U)),A),A,A,C(U),A),C(U),C(C1(U)))> -}
28b042f1f9b15b200f4dd5d26e198a54
  desugarSignedLiterals ::
    Language.PureScript.AST.Declarations.Module
    -> Language.PureScript.AST.Declarations.Module
  {- Arity: 1, Strictness: <S,1*U(U,U,U,1*U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds1 :: Language.PureScript.AST.Declarations.Module) ->
                 case ds1 of wild { Language.PureScript.AST.Declarations.Module ss coms mn ds2 exts ->
                 Language.PureScript.AST.Declarations.Module
                   ss
                   coms
                   mn
                   (GHC.Base.build
                      @ Language.PureScript.AST.Declarations.Declaration
                      (\ @ b1
                         (c :: Language.PureScript.AST.Declarations.Declaration
                               -> b1 -> b1)[OneShot]
                         (n :: b1)[OneShot] ->
                       GHC.Base.foldr
                         @ Language.PureScript.AST.Declarations.Declaration
                         @ b1
                         (GHC.Base.mapFB
                            @ Language.PureScript.AST.Declarations.Declaration
                            @ b1
                            @ Language.PureScript.AST.Declarations.Declaration
                            c
                            Language.PureScript.Sugar.Operators.desugarSignedLiterals1)
                         n
                         ds2))
                   exts }) -}
b2e2f41f7d6a680c0787aa65d99c4531
  desugarSignedLiterals1 ::
    Language.PureScript.AST.Declarations.Declaration
    -> Language.PureScript.AST.Declarations.Declaration
  {- Unfolding: (case Language.PureScript.AST.Traversals.$weverywhereOnValues
                        (GHC.Base.id @ Language.PureScript.AST.Declarations.Declaration)
                        Language.PureScript.Sugar.Operators.desugarSignedLiterals2
                        (GHC.Base.id
                           @ Language.PureScript.AST.Binders.Binder) of ww { (#,,#) ww1 ww2 ww3 ->
                 ww1 }) -}
d76f57d4a79e64caa490675eb4d4afe9
  desugarSignedLiterals2 ::
    Language.PureScript.AST.Declarations.Expr
    -> Language.PureScript.AST.Declarations.Expr
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds1 :: Language.PureScript.AST.Declarations.Expr) ->
                 case ds1 of wild {
                   DEFAULT -> wild
                   Language.PureScript.AST.Declarations.UnaryMinus ss' val
                   -> Language.PureScript.AST.Declarations.App
                        (Language.PureScript.AST.Declarations.Var
                           ss'
                           Language.PureScript.Sugar.Operators.desugarSignedLiterals3)
                        val }) -}
476662c2d9f67fe0e3c93c40f6299480
  desugarSignedLiterals3 ::
    Language.PureScript.Names.Qualified Language.PureScript.Names.Ident
  {- Strictness: m,
     Unfolding: (Language.PureScript.Names.Qualified
                   @ Language.PureScript.Names.Ident
                   (GHC.Base.Nothing @ Language.PureScript.Names.ModuleName)
                   Language.PureScript.Sugar.Operators.desugarSignedLiterals4) -}
b0713dba86d591e54ee058d6020efb03
  desugarSignedLiterals4 :: Language.PureScript.Names.Ident
  {- Strictness: m1,
     Unfolding: (Language.PureScript.Names.Ident
                   Language.PureScript.Sugar.Operators.desugarSignedLiterals5) -}
9a36f1dc82e57dd4ba5051c3c10649da
  desugarSignedLiterals5 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Constants.negate2) -}
a8aa705a00dc46bc42e55c20acaeec7b
  rebracket ::
    Control.Monad.Error.Class.MonadError
      Language.PureScript.Errors.MultipleErrors m =>
    [Language.PureScript.Externs.ExternsFile]
    -> [Language.PureScript.AST.Declarations.Module]
    -> m [Language.PureScript.AST.Declarations.Module]
  {- Arity: 1,
     Strictness: <L,U(U(U(U(C(C1(U)),A),C(U),C(C1(U)),C(C1(C1(U))),A,A),C(C1(U)),C(C1(U)),C(U),A),C(U),C(C1(U)))>,
     Unfolding: InlineRule (1, True, False)
                (\ @ m :: * -> *
                   ($dMonadError :: Control.Monad.Error.Class.MonadError
                                      Language.PureScript.Errors.MultipleErrors m) ->
                 Language.PureScript.Sugar.Operators.rebracketFiltered
                   @ m
                   $dMonadError
                   Language.PureScript.Sugar.Operators.rebracket1) -}
7b6620b8dd92d4501c752de961f1558a
  rebracket1 ::
    Language.PureScript.AST.Declarations.Declaration -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds1 :: Language.PureScript.AST.Declarations.Declaration) ->
                 GHC.Types.True) -}
512d4bdb322e2d6346774872b8138951
  rebracketFiltered ::
    Control.Monad.Error.Class.MonadError
      Language.PureScript.Errors.MultipleErrors m =>
    (Language.PureScript.AST.Declarations.Declaration
     -> GHC.Types.Bool)
    -> [Language.PureScript.Externs.ExternsFile]
    -> [Language.PureScript.AST.Declarations.Module]
    -> m [Language.PureScript.AST.Declarations.Module]
  {- Arity: 1,
     Strictness: <L,U(U(U(U(C(C1(U)),A),C(U),C(C1(U)),C(C1(C1(U))),A,A),C(C1(U)),C(C1(U)),C(U),A),C(U),C(C1(U)))> -}
"SC:$wpoly_go130" [0] forall @ a
                             (sc :: Data.Map.Internal.Map
                                      (Language.PureScript.Names.Qualified
                                         (Language.PureScript.Names.OpName
                                            'Language.PureScript.Names.TypeOpName))
                                      a)
                             (sc1 :: Language.PureScript.Names.OpName
                                       'Language.PureScript.Names.TypeOpName)
  Language.PureScript.Sugar.Operators.$wpoly_go13 @ a
                                                  (GHC.Base.Nothing
                                                     @ Language.PureScript.Names.ModuleName)
                                                  sc1
                                                  sc
  = Language.PureScript.Sugar.Operators.$slookup_$s$wpoly_go1
      @ a
      sc
      sc1
"SC:$wpoly_go130" [0] forall @ a
                             (sc :: Data.Map.Internal.Map
                                      (Language.PureScript.Names.Qualified
                                         (Language.PureScript.Names.OpName
                                            'Language.PureScript.Names.ValueOpName))
                                      a)
                             (sc1 :: Language.PureScript.Names.OpName
                                       'Language.PureScript.Names.ValueOpName)
  Language.PureScript.Sugar.Operators.$wpoly_go1 @ a
                                                 (GHC.Base.Nothing
                                                    @ Language.PureScript.Names.ModuleName)
                                                 sc1
                                                 sc
  = Language.PureScript.Sugar.Operators.$slookup_$s$wpoly_go4
      @ a
      sc
      sc1
"SC:$wpoly_go131" [0] forall @ a
                             (sc :: Data.Map.Internal.Map
                                      (Language.PureScript.Names.Qualified
                                         (Language.PureScript.Names.OpName
                                            'Language.PureScript.Names.TypeOpName))
                                      a)
                             (sc1 :: Language.PureScript.Names.OpName
                                       'Language.PureScript.Names.TypeOpName)
                             (sc2 :: Language.PureScript.Names.ModuleName)
  Language.PureScript.Sugar.Operators.$wpoly_go13 @ a
                                                  (GHC.Base.Just
                                                     @ Language.PureScript.Names.ModuleName
                                                     sc2)
                                                  sc1
                                                  sc
  = Language.PureScript.Sugar.Operators.$slookup_$s$wpoly_go13
      @ a
      sc
      sc1
      sc2
"SC:$wpoly_go131" [0] forall @ a
                             (sc :: Data.Map.Internal.Map
                                      (Language.PureScript.Names.Qualified
                                         (Language.PureScript.Names.OpName
                                            'Language.PureScript.Names.ValueOpName))
                                      a)
                             (sc1 :: Language.PureScript.Names.OpName
                                       'Language.PureScript.Names.ValueOpName)
                             (sc2 :: Language.PureScript.Names.ModuleName)
  Language.PureScript.Sugar.Operators.$wpoly_go1 @ a
                                                 (GHC.Base.Just
                                                    @ Language.PureScript.Names.ModuleName
                                                    sc2)
                                                 sc1
                                                 sc
  = Language.PureScript.Sugar.Operators.$slookup_$s$wpoly_go3
      @ a
      sc
      sc1
      sc2
"SC:$wpoly_go132" [0] forall @ a
                             (sc :: Data.Map.Internal.Map
                                      (Language.PureScript.Names.Qualified
                                         (Language.PureScript.Names.OpName
                                            'Language.PureScript.Names.TypeOpName))
                                      a)
                             (sc1 :: GHC.Prim.ByteArray#)
                             (sc2 :: GHC.Prim.Int#)
                             (sc3 :: GHC.Prim.Int#)
                             (sg :: (Data.Text.Internal.Text :: *)
                                    ~R# (Language.PureScript.Names.OpName
                                           'Language.PureScript.Names.TypeOpName :: *))
  Language.PureScript.Sugar.Operators.$wpoly_go13 @ a
                                                  (GHC.Base.Nothing
                                                     @ Language.PureScript.Names.ModuleName)
                                                  (Data.Text.Internal.Text sc1 sc2 sc3) `cast` sg
                                                  sc
  = Language.PureScript.Sugar.Operators.$slookup_$s$wpoly_go2
      @ a
      sc
      sc1
      sc2
      sc3
      @~ sg
"SC:$wpoly_go132" [0] forall @ a
                             (sc :: Data.Map.Internal.Map
                                      (Language.PureScript.Names.Qualified
                                         (Language.PureScript.Names.OpName
                                            'Language.PureScript.Names.ValueOpName))
                                      a)
                             (sc1 :: GHC.Prim.ByteArray#)
                             (sc2 :: GHC.Prim.Int#)
                             (sc3 :: GHC.Prim.Int#)
                             (sg :: (Data.Text.Internal.Text :: *)
                                    ~R# (Language.PureScript.Names.OpName
                                           'Language.PureScript.Names.ValueOpName :: *))
  Language.PureScript.Sugar.Operators.$wpoly_go1 @ a
                                                 (GHC.Base.Nothing
                                                    @ Language.PureScript.Names.ModuleName)
                                                 (Data.Text.Internal.Text sc1 sc2 sc3) `cast` sg
                                                 sc
  = Language.PureScript.Sugar.Operators.$slookup_$s$wpoly_go5
      @ a
      sc
      sc1
      sc2
      sc3
      @~ sg
"SPEC/Language.PureScript.Sugar.Operators $fEqQualified @ (OpName
                                                            'TypeOpName)" [orphan] forall (v :: GHC.Classes.Eq
                                                                                                                                                                    (Language.PureScript.Names.OpName
                                                                                                                                                                       'Language.PureScript.Names.TypeOpName))
  Language.PureScript.Names.$fEqQualified @ (Language.PureScript.Names.OpName
                                               'Language.PureScript.Names.TypeOpName)
                                          v
  = Language.PureScript.Sugar.Operators.$s$fEqQualified1
"SPEC/Language.PureScript.Sugar.Operators $fEqQualified @ (OpName
                                                            'ValueOpName)" [orphan] forall (v :: GHC.Classes.Eq
                                                                                                                                                                     (Language.PureScript.Names.OpName
                                                                                                                                                                        'Language.PureScript.Names.ValueOpName))
  Language.PureScript.Names.$fEqQualified @ (Language.PureScript.Names.OpName
                                               'Language.PureScript.Names.ValueOpName)
                                          v
  = Language.PureScript.Sugar.Operators.$s$fEqQualified
"SPEC/Language.PureScript.Sugar.Operators $fEqQualified_$c/= @ (OpName
                                                                 'TypeOpName)" [orphan] forall ($dEq :: GHC.Classes.Eq
                                                                                                                                                                                 (Language.PureScript.Names.OpName
                                                                                                                                                                                    'Language.PureScript.Names.TypeOpName))
  Language.PureScript.Names.$fEqQualified_$c/= @ (Language.PureScript.Names.OpName
                                                    'Language.PureScript.Names.TypeOpName)
                                               $dEq
  = Language.PureScript.Sugar.Operators.$s$fEqQualified_$s$fEqQualified_$c/=1
"SPEC/Language.PureScript.Sugar.Operators $fEqQualified_$c/= @ (OpName
                                                                 'ValueOpName)" [orphan] forall ($dEq :: GHC.Classes.Eq
                                                                                                                                                                                  (Language.PureScript.Names.OpName
                                                                                                                                                                                     'Language.PureScript.Names.ValueOpName))
  Language.PureScript.Names.$fEqQualified_$c/= @ (Language.PureScript.Names.OpName
                                                    'Language.PureScript.Names.ValueOpName)
                                               $dEq
  = Language.PureScript.Sugar.Operators.$s$fEqQualified_$s$fEqQualified_$c/=
"SPEC/Language.PureScript.Sugar.Operators $fOrdQualified @ (OpName
                                                             'TypeOpName)" [orphan] forall (v :: GHC.Classes.Ord
                                                                                                                                                                      (Language.PureScript.Names.OpName
                                                                                                                                                                         'Language.PureScript.Names.TypeOpName))
  Language.PureScript.Names.$fOrdQualified @ (Language.PureScript.Names.OpName
                                                'Language.PureScript.Names.TypeOpName)
                                           v
  = Language.PureScript.Sugar.Operators.$s$fOrdQualified1
"SPEC/Language.PureScript.Sugar.Operators $fOrdQualified @ (OpName
                                                             'ValueOpName)" [orphan] forall (v :: GHC.Classes.Ord
                                                                                                                                                                       (Language.PureScript.Names.OpName
                                                                                                                                                                          'Language.PureScript.Names.ValueOpName))
  Language.PureScript.Names.$fOrdQualified @ (Language.PureScript.Names.OpName
                                                'Language.PureScript.Names.ValueOpName)
                                           v
  = Language.PureScript.Sugar.Operators.$s$fOrdQualified
"SPEC/Language.PureScript.Sugar.Operators fromList @ (Qualified
                                                       (OpName 'TypeOpName)) _" [orphan] forall @ a
                                                                                                                                                                ($dOrd :: GHC.Classes.Ord
                                                                                                                                                                            (Language.PureScript.Names.Qualified
                                                                                                                                                                               (Language.PureScript.Names.OpName
                                                                                                                                                                                  'Language.PureScript.Names.TypeOpName)))
  Data.Map.Internal.fromList @ (Language.PureScript.Names.Qualified
                                  (Language.PureScript.Names.OpName
                                     'Language.PureScript.Names.TypeOpName))
                             @ a
                             $dOrd
  = Language.PureScript.Sugar.Operators.$sfromList1 @ a
"SPEC/Language.PureScript.Sugar.Operators fromList @ (Qualified
                                                       (OpName 'ValueOpName)) _" [orphan] forall @ a
                                                                                                                                                                 ($dOrd :: GHC.Classes.Ord
                                                                                                                                                                             (Language.PureScript.Names.Qualified
                                                                                                                                                                                (Language.PureScript.Names.OpName
                                                                                                                                                                                   'Language.PureScript.Names.ValueOpName)))
  Data.Map.Internal.fromList @ (Language.PureScript.Names.Qualified
                                  (Language.PureScript.Names.OpName
                                     'Language.PureScript.Names.ValueOpName))
                             @ a
                             $dOrd
  = Language.PureScript.Sugar.Operators.$sfromList @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

