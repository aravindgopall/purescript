
==================== FINAL INTERFACE ====================
2019-01-24 14:13:32.347821 UTC

interface purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Parser.State 8043
  interface hash: c99399f7f9dee09d21f58a77d83e93d5
  ABI hash: 30ecb6d393d258ed6a43e1772eca1abf
  export-list hash: dd6ef157d2027be1acaee486dc7fca19
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: af801e39deabea4814ba66209bc490c9
  opt_hash: 2c98c95d41c045ae9c2fb565ec8aabc6
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Language.PureScript.Parser.State.ParseState{Language.PureScript.Parser.State.ParseState indentationLevel}
module dependencies:
package dependencies: array-0.5.2.0 base-4.11.1.0
                      base-compat-0.10.4* binary-0.8.5.1 bytestring-0.10.8.2
                      containers-0.5.11.0 deepseq-1.4.3.0 ghc-prim-0.5.2.0
                      integer-gmp-1.0.2.0 mtl-2.2.2 parsec-3.1.13.0 text-1.2.3.0
                      transformers-0.5.5.0
orphans: text-1.2.3.0:Data.Text.Lazy text-1.2.3.0:Data.Text
         binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show
         transformers-0.5.5.0:Control.Monad.Trans.Error
         base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-compat-0.10.4:Prelude.Compat bb6796186ed35a1d09dc34362a3fc27e
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  parsec-3.1.13.0:Text.Parsec 963cbe7b4116cef91451434dc005a011
import  -/  parsec-3.1.13.0:Text.Parsec.Pos 85d30a347a2120f1b5f286869826a471
62a6f136821eff488575d67f3b51d3ef
  $fShowParseState ::
    GHC.Show.Show Language.PureScript.Parser.State.ParseState
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Parser.State.ParseState
                  Language.PureScript.Parser.State.$fShowParseState_$cshowsPrec
                  Language.PureScript.Parser.State.$fShowParseState_$cshow
                  Language.PureScript.Parser.State.$fShowParseState_$cshowList -}
62a6f136821eff488575d67f3b51d3ef
  $fShowParseState1 ::
    Language.PureScript.Parser.State.ParseState -> GHC.Show.ShowS
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U(1*U(U))><L,U>,
     Unfolding: (\ (w :: Language.PureScript.Parser.State.ParseState)
                   (w1 :: GHC.Base.String) ->
                 case w of ww { Language.PureScript.Parser.State.ParseState ww1 ->
                 Language.PureScript.Parser.State.$w$cshowsPrec 0# ww1 w1 }) -}
0b2ef24143604f8465271fef2fd896af
  $fShowParseState2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("}"#) -}
1ffc9ba5a55e83fc61bda166409d7616
  $fShowParseState3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("indentationLevel = "#) -}
5e79386d1f8829a282889045f82460fb
  $fShowParseState4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ParseState {"#) -}
21cbed45d99e8277ee9a7f02f351f642
  $fShowParseState5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Parser.State.$fShowParseState2) -}
62a6f136821eff488575d67f3b51d3ef
  $fShowParseState_$cshow ::
    Language.PureScript.Parser.State.ParseState -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U(U))>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.PureScript.Parser.State.ParseState) ->
                 case w of ww { Language.PureScript.Parser.State.ParseState ww1 ->
                 Language.PureScript.Parser.State.$w$cshow ww1 }) -}
62a6f136821eff488575d67f3b51d3ef
  $fShowParseState_$cshowList ::
    [Language.PureScript.Parser.State.ParseState] -> GHC.Show.ShowS
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Parser.State.ParseState])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Parser.State.ParseState
                   Language.PureScript.Parser.State.$fShowParseState1
                   ls
                   s) -}
62a6f136821eff488575d67f3b51d3ef
  $fShowParseState_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Parser.State.ParseState -> GHC.Show.ShowS
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S,1*U(1*U(U))><L,U>, Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Parser.State.ParseState)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Language.PureScript.Parser.State.ParseState ww3 ->
                 Language.PureScript.Parser.State.$w$cshowsPrec ww1 ww3 w2 } }) -}
8bf419bde33998a1415328b316fe105f
  $tc'ParseState :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2992512866600645015##
                   11132424896870515785##
                   Language.PureScript.Parser.State.$trModule
                   Language.PureScript.Parser.State.$tc'ParseState2
                   0#
                   Language.PureScript.Parser.State.$tc'ParseState1) -}
782b8249b7d4f56ec8cef8a858837b0a
  $tc'ParseState1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
773d503e36634690fad61679228c9a90
  $tc'ParseState2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Parser.State.$tc'ParseState3) -}
6c1d4f8421d8d11c5caed4b67db4e876
  $tc'ParseState3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ParseState"#) -}
eb0a98fd882ead953292f197f1856cca
  $tcParseState :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6020537706889244150##
                   3844927633014210635##
                   Language.PureScript.Parser.State.$trModule
                   Language.PureScript.Parser.State.$tcParseState1
                   0#
                   GHC.Types.krep$*) -}
13fbcb502122ecd3931d09601a504547
  $tcParseState1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Parser.State.$tcParseState2) -}
75e5a98105e4e884e27d14a07eb7e7fd
  $tcParseState2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ParseState"#) -}
9018b89c6b722984cbf3cb4267bd98a4
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Language.PureScript.Parser.State.$trModule3
                   Language.PureScript.Parser.State.$trModule1) -}
5c5f1d2efb6ebfe885bc2cd40ef0691b
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Parser.State.$trModule2) -}
f29ea1d9e1fa29ea50f57bc1c3a1b2cc
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Language.PureScript.Parser.State"#) -}
39cce0fad780149375f955387ae64a5d
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Parser.State.$trModule4) -}
3642f30bbb060ff89da60c034d869cde
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"#) -}
ec8d788c0457792d797a8b7b1f04682d
  $w$cshow :: Text.Parsec.Pos.Column -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: Text.Parsec.Pos.Column) ->
                 GHC.CString.unpackAppendCString#
                   Language.PureScript.Parser.State.$fShowParseState4
                   (GHC.CString.unpackAppendCString#
                      Language.PureScript.Parser.State.$fShowParseState3
                      (case ww of ww2 { GHC.Types.I# ww3 ->
                       case GHC.Show.$wshowSignedInt
                              0#
                              ww3
                              Language.PureScript.Parser.State.$fShowParseState5 of ww4 { (#,#) ww5 ww6 ->
                       GHC.Types.: @ GHC.Types.Char ww5 ww6 } }))) -}
1403300a5eff3c69c1f1876fb5da9491
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> Text.Parsec.Pos.Column -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, HasNoCafRefs, Strictness: <S,U><L,1*U(U)><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Text.Parsec.Pos.Column)
                   (w :: GHC.Base.String) ->
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> GHC.CString.unpackAppendCString#
                        Language.PureScript.Parser.State.$fShowParseState4
                        (GHC.CString.unpackAppendCString#
                           Language.PureScript.Parser.State.$fShowParseState3
                           (case ww1 of ww2 { GHC.Types.I# ww3 ->
                            case GHC.Show.$wshowSignedInt
                                   0#
                                   ww3
                                   (GHC.CString.unpackAppendCString#
                                      Language.PureScript.Parser.State.$fShowParseState2
                                      w) of ww4 { (#,#) ww5 ww6 ->
                            GHC.Types.: @ GHC.Types.Char ww5 ww6 } }))
                   1#
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.CString.unpackAppendCString#
                           Language.PureScript.Parser.State.$fShowParseState4
                           (GHC.CString.unpackAppendCString#
                              Language.PureScript.Parser.State.$fShowParseState3
                              (case ww1 of ww2 { GHC.Types.I# ww3 ->
                               case GHC.Show.$wshowSignedInt
                                      0#
                                      ww3
                                      (GHC.CString.unpackAppendCString#
                                         Language.PureScript.Parser.State.$fShowParseState2
                                         (GHC.Types.:
                                            @ GHC.Types.Char
                                            GHC.Show.$fShow(,)2
                                            w)) of ww4 { (#,#) ww5 ww6 ->
                               GHC.Types.: @ GHC.Types.Char ww5 ww6 } }))) }) -}
62a6f136821eff488575d67f3b51d3ef
  data ParseState
    = ParseState {indentationLevel :: Text.Parsec.Pos.Column}
62a6f136821eff488575d67f3b51d3ef
  indentationLevel ::
    Language.PureScript.Parser.State.ParseState
    -> Text.Parsec.Pos.Column
  RecSel Left Language.PureScript.Parser.State.ParseState
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Parser.State.ParseState) ->
                 case ds of wild { Language.PureScript.Parser.State.ParseState ds1 ->
                 ds1 }) -}
instance [safe] GHC.Show.Show [Language.PureScript.Parser.State.ParseState]
  = Language.PureScript.Parser.State.$fShowParseState
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

