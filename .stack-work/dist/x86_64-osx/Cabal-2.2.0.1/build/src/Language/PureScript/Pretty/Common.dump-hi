
==================== FINAL INTERFACE ====================
2019-01-24 14:14:13.547664 UTC

interface purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Pretty.Common 8043
  interface hash: 268eeb17b17bbb0bf53d6811f29abc5f
  ABI hash: 5ad137006c9d22dbc8d348caeed567b2
  export-list hash: c21a0ba6e9877729208defe8b5d16c9a
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 666d06750a83f48a27f6ce32fa845a6c
  opt_hash: 2c98c95d41c045ae9c2fb565ec8aabc6
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Language.PureScript.Pretty.Common.addMapping'
  Language.PureScript.Pretty.Common.addPos
  Language.PureScript.Pretty.Common.before
  Language.PureScript.Pretty.Common.beforeWithSpace
  Language.PureScript.Pretty.Common.blockIndent
  Language.PureScript.Pretty.Common.bumpPos
  Language.PureScript.Pretty.Common.currentIndent
  Language.PureScript.Pretty.Common.emptyPrinterState
  Language.PureScript.Pretty.Common.endWith
  Language.PureScript.Pretty.Common.intercalate
  Language.PureScript.Pretty.Common.objectKeyRequiresQuoting
  Language.PureScript.Pretty.Common.parens
  Language.PureScript.Pretty.Common.parensPos
  Language.PureScript.Pretty.Common.parensT
  Language.PureScript.Pretty.Common.prettyPrintMany
  Language.PureScript.Pretty.Common.runPlainString
  Language.PureScript.Pretty.Common.withIndent
  Language.PureScript.Pretty.Common.Emit{Language.PureScript.Pretty.Common.addMapping Language.PureScript.Pretty.Common.emit}
  Language.PureScript.Pretty.Common.PlainString{Language.PureScript.Pretty.Common.PlainString}
  Language.PureScript.Pretty.Common.PrinterState{Language.PureScript.Pretty.Common.PrinterState indent}
  Language.PureScript.Pretty.Common.SMap{Language.PureScript.Pretty.Common.SMap}
  Language.PureScript.Pretty.Common.StrPos{Language.PureScript.Pretty.Common.StrPos}
module dependencies: Control.Monad.Supply
                     Control.Monad.Supply.Class Language.PureScript.AST
                     Language.PureScript.AST.Binders
                     Language.PureScript.AST.Declarations
                     Language.PureScript.AST.Exported Language.PureScript.AST.Literals
                     Language.PureScript.AST.Operators Language.PureScript.AST.SourcePos
                     Language.PureScript.AST.Traversals Language.PureScript.Bundle
                     Language.PureScript.Comments Language.PureScript.Constants
                     Language.PureScript.Crash Language.PureScript.Environment
                     Language.PureScript.Kinds Language.PureScript.Label
                     Language.PureScript.Names Language.PureScript.PSString
                     Language.PureScript.Parser.Lexer Language.PureScript.Parser.State
                     Language.PureScript.Traversals
                     Language.PureScript.TypeClassDictionaries Language.PureScript.Types
                     Paths_purescript
package dependencies: aeson-1.3.1.1 array-0.5.2.0 async-2.2.1
                      attoparsec-0.13.2.2 base-4.11.1.0 base-compat-0.10.4 binary-0.8.5.1
                      blaze-builder-0.4.1.0 boxes-0.1.5 bytestring-0.10.8.2
                      containers-0.5.11.0 deepseq-1.4.3.0 dlist-0.8.0.4 filepath-1.4.2
                      ghc-boot-th-8.4.3 ghc-prim-0.5.2.0 hashable-1.2.7.0
                      integer-gmp-1.0.2.0 integer-logarithms-1.0.2.1
                      language-javascript-0.6.0.11 microlens-0.4.9.1 microlens-ghc-0.4.9
                      microlens-mtl-0.1.11.1 microlens-platform-0.3.10
                      microlens-th-0.4.2.1 mtl-2.2.2 parsec-3.1.13.0 pretty-1.1.3.6
                      primitive-0.6.3.0 protolude-0.2.2 random-1.1 scientific-0.3.6.2
                      sourcemap-0.1.6 split-0.2.3.3 stm-2.4.5.0 syb-0.7 tagged-0.8.5
                      template-haskell-2.13.0.0 text-1.2.3.0 th-abstraction-0.2.8.0
                      time-1.8.0.2 time-locale-compat-0.1.1.4 transformers-0.5.5.0
                      unordered-containers-0.2.9.0 utf8-string-1.0.1.1 uuid-types-1.0.3
                      vector-0.12.0.1
orphans: syb-0.7:Data.Generics.Instances
         stm-2.4.5.0:Control.Monad.STM
         microlens-platform-0.3.10:Lens.Micro.Platform
         microlens-ghc-0.4.9:Lens.Micro.GHC
         attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         vector-0.12.0.1:Data.Vector.Unboxed
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         hashable-1.2.7.0:Data.Hashable.Generic
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         text-1.2.3.0:Data.Text.Lazy text-1.2.3.0:Data.Text
         binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show
         transformers-0.5.5.0:Control.Monad.Trans.Error
         base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: aeson-1.3.1.1:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.Graph
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         dlist-0.8.0.4:Data.DList ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         microlens-0.4.9.1:Lens.Micro.Internal
                         microlens-ghc-0.4.9:Lens.Micro.GHC
                         microlens-mtl-0.1.11.1:Lens.Micro.Mtl.Internal
                         microlens-platform-0.3.10:Lens.Micro.Platform
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.Declarations
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.Operators
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.SourcePos
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Comments
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Environment
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Kinds
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Label
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Names
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.PSString
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.TypeClassDictionaries
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Types
                         tagged-0.8.5:Data.Tagged
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
                         th-abstraction-0.2.8.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.Functor f522c3501272159820fd6f242510732f
import  -/  base-4.11.1.0:Data.List 83dc843e47bfc0c5af51e19c6f3476d5
import  -/  base-4.11.1.0:Data.OldList 1b35aa3c6805ff7c8887a35a866fe006
import  -/  base-4.11.1.0:Data.Traversable 7ad4edb9184ea1ae8e73f6b94f115c8c
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:GHC.Real b4beb0389ba1ad5d9640aae67848c5d3
import  -/  base-compat-0.10.4:Prelude.Compat bb6796186ed35a1d09dc34362a3fc27e
import  -/  boxes-0.1.5:Text.PrettyPrint.Boxes 49de0395c02f08dbf50ec04d019c04fb
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  mtl-2.2.2:Control.Monad.State 1f28325cb5ef11b6b40ffadfe4bc2ca3
import  -/  mtl-2.2.2:Control.Monad.State.Class acc76e93f44ac4486524db1a327e0a0a
import  -/  Language.PureScript.AST e89b59f8e201961eafd3ff905a683659
  exports: be73d3bb7d4ebe5df082453f6d572075
import  -/  Language.PureScript.AST.SourcePos 63acacac5b7be73d04e5be0047a9a89a
  SourcePos 1f89874c7dcd77e53f0f74e4d28f0a8c
  SourcePos 1e0cf2bd3ea18f97a2ff152297f09219
  SourceSpan 153dcf157f0acf76a2cdcf153aac30d3
  SourceSpan 1e0cf2bd3ea18f97a2ff152297f09219
  sourcePosColumn 1e0cf2bd3ea18f97a2ff152297f09219
  sourcePosLine 1e0cf2bd3ea18f97a2ff152297f09219
  spanName 1e0cf2bd3ea18f97a2ff152297f09219
  spanStart 1e0cf2bd3ea18f97a2ff152297f09219
import  -/  Language.PureScript.Parser.Lexer ea857194274ee8b3812ad62bbb2c9ed1
  exports: ca7efc854dfe3379de291b0f8c8d7ea0
  isUnquotedKey 99c36d6ee62cf0e9f1cb07f067722f16
import  -/  text-1.2.3.0:Data.Text 7daa7e6c9b39d8cc1679e5ec5c64d2be
import  -/  text-1.2.3.0:Data.Text.Internal 30a0a123f71f63b26cd34c6b24f23411
import  -/  text-1.2.3.0:Data.Text.Show 3b4b6fb2985a731022d67f636682da2b
import  -/  transformers-0.5.5.0:Control.Monad.Trans.State.Lazy bb07ba19cd14893d125b163b03c16c98
588dbedb17eaf676c69597aceedf7fa9
  $fEmitPlainString ::
    Language.PureScript.Pretty.Common.Emit
      Language.PureScript.Pretty.Common.PlainString
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Pretty.Common.PlainString
                  Language.PureScript.Pretty.Common.$fMonoidPlainString
                  (\ (v :: Data.Text.Internal.Text) -> v)
                    `cast`
                  (<Data.Text.Internal.Text>_R
                   ->_R Sym (Language.PureScript.Pretty.Common.N:PlainString[0]))
                  Language.PureScript.Pretty.Common.$fEmitPlainString1
                    `cast`
                  (<Language.PureScript.AST.SourcePos.SourceSpan>_R
                   ->_R Sym (Language.PureScript.Pretty.Common.N:PlainString[0])) -}
65bafc06f11071ec68d0f5e627533430
  $fEmitPlainString1 ::
    Language.PureScript.AST.SourcePos.SourceSpan
    -> Data.Text.Internal.Text
  {- Arity: 1, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: Language.PureScript.AST.SourcePos.SourceSpan) ->
                 Data.Text.Internal.empty) -}
588dbedb17eaf676c69597aceedf7fa9
  $fEmitStrPos ::
    Language.PureScript.Pretty.Common.Emit
      Language.PureScript.Pretty.Common.StrPos
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Pretty.Common.StrPos
                  Language.PureScript.Pretty.Common.$fMonoidStrPos
                  Language.PureScript.Pretty.Common.$fEmitStrPos_$cemit
                  Language.PureScript.Pretty.Common.$fEmitStrPos_$caddMapping -}
d337ebf624968d5b4b340c848bdc7b8d
  $fEmitStrPos1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
7cd69fd24c33250b9a9344185dfb419a
  $fEmitStrPos_$caddMapping ::
    Language.PureScript.AST.SourcePos.SourceSpan
    -> Language.PureScript.Pretty.Common.StrPos
  {- Arity: 1, Strictness: <S,1*U(1*U,U,A)>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.PureScript.AST.SourcePos.SourceSpan) ->
                 case w of ww { Language.PureScript.AST.SourcePos.SourceSpan ww1 ww2 ww3 ->
                 (Language.PureScript.Pretty.Common.$fEmitStrPos_zeroPos,
                  Data.Text.Internal.empty,
                  GHC.Types.:
                    @ Language.PureScript.Pretty.Common.SMap
                    (Language.PureScript.Pretty.Common.SMap
                       (case GHC.Magic.runRW#
                               @ ('GHC.Types.TupleRep
                                    '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                               @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Text.Internal.Text #)
                               (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                case GHC.Prim.newByteArray#
                                       @ GHC.Prim.RealWorld
                                       10#
                                       s1 of ds1 { (#,#) ipv ipv1 ->
                                Language.PureScript.Pretty.Common.$wouter
                                  ipv1
                                  4#
                                  ww1
                                  0#
                                  ipv }) of ds1 { (#,#) ipv ipv1 ->
                        ipv1 })
                       ww2
                       Language.PureScript.Pretty.Common.$fEmitStrPos_zeroPos)
                    (GHC.Types.[] @ Language.PureScript.Pretty.Common.SMap))
                   `cast`
                 (Sym (Language.PureScript.Pretty.Common.N:StrPos[0])) }) -}
e88ae4c7f7f0199e0530b6710e311af1
  $fEmitStrPos_$cemit ::
    Data.Text.Internal.Text -> Language.PureScript.Pretty.Common.StrPos
  {- Arity: 1, Strictness: <L,U(U,U,U)>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Data.Text.Internal.Text) ->
                 case Language.PureScript.Pretty.Common.$w$cemit
                        w of ww { (#,,#) ww1 ww2 ww3 ->
                 (ww1, ww2, ww3)
                   `cast`
                 (Sym (Language.PureScript.Pretty.Common.N:StrPos[0])) }) -}
9cf645dab0c6e826816a85229e6ee154
  $fEmitStrPos_go ::
    [GHC.Types.Char] -> GHC.Prim.Int# -> [GHC.Types.Int]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U> -}
023c7f13b126816ffd1030551b2a0b90
  $fEmitStrPos_zeroPos :: Language.PureScript.AST.SourcePos.SourcePos
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Language.PureScript.AST.SourcePos.SourcePos
                   Language.PureScript.Pretty.Common.$fEmitStrPos1
                   Language.PureScript.Pretty.Common.$fEmitStrPos1) -}
4c7d9e7927b04feadeb80412de79ceb1
  $fMonoidPlainString ::
    GHC.Base.Monoid Language.PureScript.Pretty.Common.PlainString
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Pretty.Common.PlainString
                  Language.PureScript.Pretty.Common.$fSemigroupPlainString
                  Data.Text.Internal.empty
                    `cast`
                  (Sym (Language.PureScript.Pretty.Common.N:PlainString[0]))
                  Data.Text.append
                    `cast`
                  (Sym (Language.PureScript.Pretty.Common.N:PlainString[0])
                   ->_R Sym (Language.PureScript.Pretty.Common.N:PlainString[0])
                   ->_R Sym (Language.PureScript.Pretty.Common.N:PlainString[0]))
                  Data.Text.concat
                    `cast`
                  (([Sym (Language.PureScript.Pretty.Common.N:PlainString[0])])_R
                   ->_R Sym (Language.PureScript.Pretty.Common.N:PlainString[0])) -}
2dcd6c99571c956d5422cfaaf371e8cc
  $fMonoidStrPos ::
    GHC.Base.Monoid Language.PureScript.Pretty.Common.StrPos
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Pretty.Common.StrPos
                  Language.PureScript.Pretty.Common.$fSemigroupStrPos
                  Language.PureScript.Pretty.Common.$fMonoidStrPos1
                    `cast`
                  (Sym (Language.PureScript.Pretty.Common.N:StrPos[0]))
                  Language.PureScript.Pretty.Common.$fMonoidStrPos_$c<>
                  Language.PureScript.Pretty.Common.$fMonoidStrPos_$cmconcat -}
8a6e6aa88975998ee2e1df5428e78629
  $fMonoidStrPos1 ::
    (Language.PureScript.AST.SourcePos.SourcePos,
     Data.Text.Internal.Text, [Language.PureScript.Pretty.Common.SMap])
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Pretty.Common.$fEmitStrPos_zeroPos,
                  Data.Text.Internal.empty_,
                  GHC.Types.[] @ Language.PureScript.Pretty.Common.SMap)) -}
2dcd6c99571c956d5422cfaaf371e8cc
  $fMonoidStrPos_$c<> ::
    Language.PureScript.Pretty.Common.StrPos
    -> Language.PureScript.Pretty.Common.StrPos
    -> Language.PureScript.Pretty.Common.StrPos
  {- Arity: 2,
     Strictness: <S,1*U(U(U(U),U(U)),1*U(U,U,1*U),1*U)><S,1*U(1*U(1*U(1*U),U(U)),1*U(U,U,U),1*U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Pretty.Common.StrPos)
                   (w1 :: Language.PureScript.Pretty.Common.StrPos) ->
                 case w `cast`
                      (Language.PureScript.Pretty.Common.N:StrPos[0]) of ww { (,,) ww1 ww2 ww3 ->
                 case w1
                        `cast`
                      (Language.PureScript.Pretty.Common.N:StrPos[0]) of ww4 { (,,) ww5 ww6 ww7 ->
                 (Language.PureScript.Pretty.Common.addPos ww1 ww5,
                  Data.Text.append ww2 ww6,
                  GHC.Base.++
                    @ Language.PureScript.Pretty.Common.SMap
                    ww3
                    (GHC.Base.map
                       @ Language.PureScript.Pretty.Common.SMap
                       @ Language.PureScript.Pretty.Common.SMap
                       (Language.PureScript.Pretty.Common.bumpPos ww1)
                       ww7))
                   `cast`
                 (Sym (Language.PureScript.Pretty.Common.N:StrPos[0])) } }) -}
2dcd6c99571c956d5422cfaaf371e8cc
  $fMonoidStrPos_$cmconcat ::
    [Language.PureScript.Pretty.Common.StrPos]
    -> Language.PureScript.Pretty.Common.StrPos
  {- Arity: 1, Strictness: <L,U>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: [Language.PureScript.Pretty.Common.StrPos]) ->
                 let {
                   ds :: (Language.PureScript.AST.SourcePos.SourcePos,
                          [[Language.PureScript.Pretty.Common.SMap]])
                   = Language.PureScript.Pretty.Common.$wgo
                       w
                       Language.PureScript.Pretty.Common.$fEmitStrPos_zeroPos
                       (GHC.Types.[] @ [Language.PureScript.Pretty.Common.SMap])
                 } in
                 (case ds of wild { (,) p maps -> p },
                  Language.PureScript.Pretty.Common.$fMonoidStrPos_go1 w,
                  case ds of wild { (,) p maps ->
                  Language.PureScript.Pretty.Common.$fMonoidStrPos_go
                    (GHC.List.reverse1
                       @ [Language.PureScript.Pretty.Common.SMap]
                       maps
                       (GHC.Types.[] @ [Language.PureScript.Pretty.Common.SMap])) })
                   `cast`
                 (Sym (Language.PureScript.Pretty.Common.N:StrPos[0]))) -}
5f0a4df829ca2f0ba9638202c2f3f0e0
  $fMonoidStrPos_go ::
    [[Language.PureScript.Pretty.Common.SMap]]
    -> [Language.PureScript.Pretty.Common.SMap]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
2dcd6c99571c956d5422cfaaf371e8cc
  $fMonoidStrPos_go1 ::
    [Language.PureScript.Pretty.Common.StrPos]
    -> Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S,1*U> -}
4c7d9e7927b04feadeb80412de79ceb1
  $fSemigroupPlainString ::
    GHC.Base.Semigroup Language.PureScript.Pretty.Common.PlainString
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Pretty.Common.PlainString
                  Data.Text.append
                    `cast`
                  (Sym (Language.PureScript.Pretty.Common.N:PlainString[0])
                   ->_R Sym (Language.PureScript.Pretty.Common.N:PlainString[0])
                   ->_R Sym (Language.PureScript.Pretty.Common.N:PlainString[0]))
                  Data.Text.$fSemigroupText_$csconcat
                    `cast`
                  ((GHC.Base.NonEmpty
                      (Sym (Language.PureScript.Pretty.Common.N:PlainString[0])))_R
                   ->_R Sym (Language.PureScript.Pretty.Common.N:PlainString[0]))
                  Data.Text.$fSemigroupText_$cstimes
                    `cast`
                  (forall (b :: <*>_N).
                   <GHC.Real.Integral b>_R
                   ->_R <b>_R
                   ->_R Sym (Language.PureScript.Pretty.Common.N:PlainString[0])
                   ->_R Sym (Language.PureScript.Pretty.Common.N:PlainString[0])) -}
2dcd6c99571c956d5422cfaaf371e8cc
  $fSemigroupStrPos ::
    GHC.Base.Semigroup Language.PureScript.Pretty.Common.StrPos
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Pretty.Common.StrPos
                  Language.PureScript.Pretty.Common.$fMonoidStrPos_$c<>
                  Language.PureScript.Pretty.Common.$fSemigroupStrPos_$csconcat
                  Language.PureScript.Pretty.Common.$fSemigroupStrPos_$cstimes -}
2dcd6c99571c956d5422cfaaf371e8cc
  $fSemigroupStrPos_$csconcat ::
    GHC.Base.NonEmpty Language.PureScript.Pretty.Common.StrPos
    -> Language.PureScript.Pretty.Common.StrPos
  {- Arity: 1,
     Strictness: <S(SS),1*U(1*U(U(U(U),U(U)),U(U,U,U),U),1*U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GHC.Base.NonEmpty
                            Language.PureScript.Pretty.Common.StrPos) ->
                 case ds of wild { GHC.Base.:| a1 as ->
                 Language.PureScript.Pretty.Common.$fSemigroupStrPos_go a1 as }) -}
2dcd6c99571c956d5422cfaaf371e8cc
  $fSemigroupStrPos_$cstimes ::
    GHC.Real.Integral b =>
    b
    -> Language.PureScript.Pretty.Common.StrPos
    -> Language.PureScript.Pretty.Common.StrPos
  {- Arity: 1, Strictness: <L,U> -}
2dcd6c99571c956d5422cfaaf371e8cc
  $fSemigroupStrPos_go ::
    Language.PureScript.Pretty.Common.StrPos
    -> [Language.PureScript.Pretty.Common.StrPos]
    -> Language.PureScript.Pretty.Common.StrPos
  {- Arity: 2, Strictness: <S,1*U(U(U(U),U(U)),U(U,U,U),U)><S,1*U>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Pretty.Common.StrPos)
                   (w1 :: [Language.PureScript.Pretty.Common.StrPos]) ->
                 case w `cast`
                      (Language.PureScript.Pretty.Common.N:StrPos[0]) of ww { (,,) ww1 ww2 ww3 ->
                 case Language.PureScript.Pretty.Common.$wgo1
                        ww1
                        ww2
                        ww3
                        w1 of ww4 { (#,,#) ww5 ww6 ww7 ->
                 (ww5, ww6, ww7)
                   `cast`
                 (Sym (Language.PureScript.Pretty.Common.N:StrPos[0])) } }) -}
fc918d7ad0de070ebc3b635768a236c4
  $tc'C:Emit :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13676181359793482322##
                   2778239852202647904##
                   Language.PureScript.Pretty.Common.$trModule
                   Language.PureScript.Pretty.Common.$tc'C:Emit2
                   1#
                   Language.PureScript.Pretty.Common.$tc'C:Emit1) -}
9bd7f8d6ac0d4c96e8a21e16f7ffc66e
  $tc'C:Emit1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
970bf63e0b61f36b8de563bb7d0a69c3
  $tc'C:Emit2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Pretty.Common.$tc'C:Emit3) -}
5d300fd6ec2cffac5066b44c8570df66
  $tc'C:Emit3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'C:Emit"#) -}
77e0576cc5d2a6e72eb834905f125cb1
  $tc'PlainString :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6380366731278399360##
                   7507708106997709827##
                   Language.PureScript.Pretty.Common.$trModule
                   Language.PureScript.Pretty.Common.$tc'PlainString2
                   0#
                   Language.PureScript.Pretty.Common.$tc'PlainString1) -}
285bc5d2b2eafa8b6d9bd248b3faf019
  $tc'PlainString1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
20c700681127beaa0f55af1e5c63e572
  $tc'PlainString2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Pretty.Common.$tc'PlainString3) -}
f64f575a98db405fc8db64d70575a29a
  $tc'PlainString3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'PlainString"#) -}
2e2c8eec2be4e220da7331dc46cf4ae7
  $tc'PrinterState :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5819078127963265120##
                   10796117299038514003##
                   Language.PureScript.Pretty.Common.$trModule
                   Language.PureScript.Pretty.Common.$tc'PrinterState2
                   0#
                   Language.PureScript.Pretty.Common.$tc'PrinterState1) -}
c12d708e8df2671604bb75f89ba77802
  $tc'PrinterState1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
f3e1db14672527d4f330e82a8b2afe2b
  $tc'PrinterState2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Pretty.Common.$tc'PrinterState3) -}
ca6e7913c2ce83c755ebc61d184bde64
  $tc'PrinterState3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'PrinterState"#) -}
6a8e9c3c18834f66714f72ee3ed23e21
  $tc'SMap :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11028079846297858382##
                   13071853841385919357##
                   Language.PureScript.Pretty.Common.$trModule
                   Language.PureScript.Pretty.Common.$tc'SMap2
                   0#
                   Language.PureScript.Pretty.Common.$tc'SMap1) -}
c24b11a390f3a8ce8002a75cea7dd9e6
  $tc'SMap1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
f9e459b714662413f547fb7c15046989
  $tc'SMap2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Pretty.Common.$tc'SMap3) -}
7d44f4796f143bf692cd5d70bef7fd57
  $tc'SMap3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'SMap"#) -}
c00f3fa8390463e63de0f6fef1a5cdf1
  $tc'StrPos :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6794181557893023300##
                   7423821837684564265##
                   Language.PureScript.Pretty.Common.$trModule
                   Language.PureScript.Pretty.Common.$tc'StrPos2
                   0#
                   Language.PureScript.Pretty.Common.$tc'StrPos1) -}
890f8849063f7beadb89d450a4d546a4
  $tc'StrPos1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
90e90ed81874407705afe87005b9f966
  $tc'StrPos2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Pretty.Common.$tc'StrPos3) -}
e5455e8116785e83a8c5ab8f98680607
  $tc'StrPos3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'StrPos"#) -}
bc1cfff8bbccf1a592bd891f4c088e59
  $tcEmit :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15550017373323051088##
                   5365095673032035183##
                   Language.PureScript.Pretty.Common.$trModule
                   Language.PureScript.Pretty.Common.$tcEmit2
                   0#
                   Language.PureScript.Pretty.Common.$tcEmit1) -}
8e7437c780dd27ebb9791236ef0bd5dd
  $tcEmit1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
ba9f61a0351344bdd8badf4d073ce5ef
  $tcEmit2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Pretty.Common.$tcEmit3) -}
01b63d4bfc44c2a8237dde40a9e492d8
  $tcEmit3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Emit"#) -}
b2e0f67dd11bdf949f1ef22873446e83
  $tcPlainString :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   342852843482564066##
                   15019190580993917056##
                   Language.PureScript.Pretty.Common.$trModule
                   Language.PureScript.Pretty.Common.$tcPlainString1
                   0#
                   GHC.Types.krep$*) -}
973811adaf56a85386bfe55cd6ed206d
  $tcPlainString1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Pretty.Common.$tcPlainString2) -}
9fd27714b83d39b6f315ea77f2da1a51
  $tcPlainString2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("PlainString"#) -}
e00dc351ab68afe832d9ff67d40ea69f
  $tcPrinterState :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   552829772125553377##
                   13930906910866947410##
                   Language.PureScript.Pretty.Common.$trModule
                   Language.PureScript.Pretty.Common.$tcPrinterState1
                   0#
                   GHC.Types.krep$*) -}
1a9cfdcf977a96f405feabe90d83d089
  $tcPrinterState1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Pretty.Common.$tcPrinterState2) -}
077dce8c8643e0748f2210b81eb1699a
  $tcPrinterState2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("PrinterState"#) -}
e0d729485bc64413196ec757b2f0aa7a
  $tcSMap :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2926621362225860015##
                   4871646581913492434##
                   Language.PureScript.Pretty.Common.$trModule
                   Language.PureScript.Pretty.Common.$tcSMap1
                   0#
                   GHC.Types.krep$*) -}
afdced45bb316191f590c54987017a80
  $tcSMap1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Pretty.Common.$tcSMap2) -}
05c71cd6ea9d916fd4a465b3a4b0285c
  $tcSMap2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("SMap"#) -}
a757c6d35484787f239216cc6eb7b248
  $tcStrPos :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3199775226138006707##
                   5489565981759374089##
                   Language.PureScript.Pretty.Common.$trModule
                   Language.PureScript.Pretty.Common.$tcStrPos1
                   0#
                   GHC.Types.krep$*) -}
a8f83aeb9299a9b9d7b7cf17f7a67888
  $tcStrPos1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Pretty.Common.$tcStrPos2) -}
68520ec4671427afc563015da794fdad
  $tcStrPos2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("StrPos"#) -}
0c472003e8b050b85cbb6b6fcafcbf59
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Language.PureScript.Pretty.Common.$trModule3
                   Language.PureScript.Pretty.Common.$trModule1) -}
b0b97cbc5e41a078b5197aaa98844949
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Pretty.Common.$trModule2) -}
ffd36042175a595ef4ca9db9c68adc17
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Language.PureScript.Pretty.Common"#) -}
ce2dc59f250d69149bd588729fd72a5a
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Pretty.Common.$trModule4) -}
fd3f60761e07c02a5b8fcf8555f8ed6b
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"#) -}
fdc0464e4a927a6e7c420a8797b3862d
  $w$cemit ::
    Data.Text.Internal.Text
    -> (# Language.PureScript.AST.SourcePos.SourcePos,
          Data.Text.Internal.Text,
          [Language.PureScript.Pretty.Common.SMap] #)
  {- Arity: 1, Strictness: <L,U(U,U,U)>, Inline: [0],
     Unfolding: (\ (w :: Data.Text.Internal.Text) ->
                 let {
                   newlines :: [GHC.Types.Int]
                   = case w of wild { Data.Text.Internal.Text dt dt1 dt2 ->
                     let {
                       end :: GHC.Prim.Int# = GHC.Prim.+# dt1 dt2
                     } in
                     letrec {
                       $wunfold :: GHC.Prim.Int# -> [GHC.Types.Char]
                         {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                       = \ (ww :: GHC.Prim.Int#) ->
                         case GHC.Prim.>=# ww end of lwild {
                           DEFAULT
                           -> case GHC.Prim.indexWord16Array# dt ww of r# { DEFAULT ->
                              case GHC.Prim.geWord# r# 55296## of lwild1 {
                                DEFAULT
                                -> GHC.Types.:
                                     @ GHC.Types.Char
                                     (GHC.Types.C# (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                     ($wunfold (GHC.Prim.+# ww 1#))
                                1#
                                -> case GHC.Prim.leWord# r# 56319## of lwild2 {
                                     DEFAULT
                                     -> GHC.Types.:
                                          @ GHC.Types.Char
                                          (GHC.Types.C# (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                          ($wunfold (GHC.Prim.+# ww 1#))
                                     1#
                                     -> case GHC.Prim.indexWord16Array#
                                               dt
                                               (GHC.Prim.+# ww 1#) of r#1 { DEFAULT ->
                                        GHC.Types.:
                                          @ GHC.Types.Char
                                          (GHC.Types.C#
                                             (GHC.Prim.chr#
                                                (GHC.Prim.+#
                                                   (GHC.Prim.+#
                                                      (GHC.Prim.uncheckedIShiftL#
                                                         (GHC.Prim.-#
                                                            (GHC.Prim.word2Int# r#)
                                                            55296#)
                                                         10#)
                                                      (GHC.Prim.-# (GHC.Prim.word2Int# r#1) 56320#))
                                                   65536#)))
                                          ($wunfold (GHC.Prim.+# ww 2#)) } } } }
                           1# -> GHC.Types.[] @ GHC.Types.Char }
                     } in
                     Language.PureScript.Pretty.Common.$fEmitStrPos_go
                       ($wunfold dt1)
                       0# }
                 } in
                 (# Language.PureScript.AST.SourcePos.SourcePos
                      (case GHC.List.$wlenAcc
                              @ GHC.Types.Int
                              newlines
                              0# of ww2 { DEFAULT ->
                       GHC.Types.I# ww2 })
                      (case w of wild { Data.Text.Internal.Text dt dt1 dt2 ->
                       let {
                         end :: GHC.Prim.Int# = GHC.Prim.+# dt1 dt2
                       } in
                       let {
                         $j1 :: GHC.Prim.Int# -> GHC.Types.Int
                           <join 1> {- Arity: 1, Strictness: <S,U>m -}
                         = \ (x :: GHC.Prim.Int#)[OneShot] ->
                           case newlines of wild1 {
                             [] -> GHC.Types.I# x
                             : ds1 ds2
                             -> let {
                                  exit :: GHC.Types.Int -> GHC.Types.Int
                                    <join 1> {- Arity: 1, Strictness: <S(S),1*U(U)>m -}
                                  = \ (eta :: GHC.Types.Int)[OneShot] ->
                                    case eta of wild2 { GHC.Types.I# x1 ->
                                    GHC.Types.I# (GHC.Prim.-# x (GHC.Prim.+# x1 1#)) }
                                } in
                                letrec {
                                  go :: [GHC.Types.Int] -> GHC.Types.Int -> GHC.Types.Int
                                    <join 2> {- Arity: 2, Strictness: <S,1*U><L,1*U(U)>m -}
                                  = \ (ds :: [GHC.Types.Int]) (eta :: GHC.Types.Int) ->
                                    case ds of wild2 { [] -> exit eta : y ys -> go ys y }
                                } in
                                let {
                                  $sgo :: GHC.Types.Int
                                          -> GHC.Types.Int -> [GHC.Types.Int] -> GHC.Types.Int
                                    <join 3> {- Arity: 3, Strictness: <L,A><L,1*U(U)><S,1*U>m -}
                                  = \ (sc :: GHC.Types.Int)
                                      (sc1 :: GHC.Types.Int)
                                      (sc2 :: [GHC.Types.Int]) ->
                                    go sc2 sc1
                                } in
                                $sgo (GHC.List.lastError @ GHC.Types.Int) ds1 ds2 }
                       } in
                       letrec {
                         $wloop_length :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Types.Int
                           <join 2> {- Arity: 2, Strictness: <S,U><S,U>m, Inline: [0] -}
                         = \ (ww :: GHC.Prim.Int#) (ww1 :: GHC.Prim.Int#) ->
                           case GHC.Prim.>=# ww1 end of lwild {
                             DEFAULT
                             -> case GHC.Prim.indexWord16Array# dt ww1 of r# { DEFAULT ->
                                case GHC.Prim.geWord# r# 55296## of lwild1 {
                                  DEFAULT -> $wloop_length (GHC.Prim.+# ww 1#) (GHC.Prim.+# ww1 1#)
                                  1#
                                  -> case GHC.Prim.leWord# r# 56319## of lwild2 {
                                       DEFAULT
                                       -> $wloop_length (GHC.Prim.+# ww 1#) (GHC.Prim.+# ww1 1#)
                                       1#
                                       -> $wloop_length
                                            (GHC.Prim.+# ww 1#)
                                            (GHC.Prim.+# ww1 2#) } } }
                             1# -> $j1 ww }
                       } in
                       $wloop_length 0# dt1 }),
                    w, GHC.Types.[] @ Language.PureScript.Pretty.Common.SMap #)) -}
acf71a11cab4f54f3b9a0d2626875c5e
  $wbefore ::
    GHC.Prim.Int#
    -> GHC.Types.Int
    -> Text.PrettyPrint.Boxes.Content
    -> Text.PrettyPrint.Boxes.Box
    -> (# GHC.Types.Int, GHC.Types.Int,
          Text.PrettyPrint.Boxes.Content #)
  {- Arity: 4, HasNoCafRefs, Strictness: <S,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Types.Int)
                   (ww2 :: Text.PrettyPrint.Boxes.Content)
                   (w :: Text.PrettyPrint.Boxes.Box) ->
                 case GHC.Prim.># ww 1# of lwild {
                   DEFAULT
                   -> Text.PrettyPrint.Boxes.$w$shcat
                        Text.PrettyPrint.Boxes.AlignFirst
                        (GHC.Types.:
                           @ Text.PrettyPrint.Boxes.Box
                           (Text.PrettyPrint.Boxes.Box (GHC.Types.I# ww) ww1 ww2)
                           (GHC.Types.:
                              @ Text.PrettyPrint.Boxes.Box
                              w
                              (GHC.Types.[] @ Text.PrettyPrint.Boxes.Box)))
                   1#
                   -> Text.PrettyPrint.Boxes.$w$svcat
                        Text.PrettyPrint.Boxes.AlignFirst
                        (GHC.Types.:
                           @ Text.PrettyPrint.Boxes.Box
                           (Text.PrettyPrint.Boxes.Box (GHC.Types.I# ww) ww1 ww2)
                           (GHC.Types.:
                              @ Text.PrettyPrint.Boxes.Box
                              w
                              (GHC.Types.[] @ Text.PrettyPrint.Boxes.Box))) }) -}
9ed6b87928ce10020d1c6efcefb521ab
  $wcurrentIndent ::
    Language.PureScript.Pretty.Common.Emit gen =>
    Language.PureScript.Pretty.Common.PrinterState
    -> (# (gen, Language.PureScript.Pretty.Common.PrinterState) #)
  {- Arity: 2, Strictness: <L,1*U(A,1*C1(U),A)><L,U(U(U))>,
     Inline: [0] -}
94a278d5c014fb7303d9203c6f14980f
  $wendWith ::
    Text.PrettyPrint.Boxes.Box
    -> Text.PrettyPrint.Boxes.Box
    -> (# GHC.Types.Int, GHC.Types.Int,
          Text.PrettyPrint.Boxes.Content #)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(U(U),U,U)><L,U(U,U(U),U)>, Inline: [0],
     Unfolding: (\ (w :: Text.PrettyPrint.Boxes.Box)
                   (w1 :: Text.PrettyPrint.Boxes.Box) ->
                 Text.PrettyPrint.Boxes.$w$shcat
                   Text.PrettyPrint.Boxes.AlignFirst
                   (GHC.Types.:
                      @ Text.PrettyPrint.Boxes.Box
                      w
                      (GHC.Types.:
                         @ Text.PrettyPrint.Boxes.Box
                         (case Text.PrettyPrint.Boxes.$w$svcat
                                 Text.PrettyPrint.Boxes.AlignFirst
                                 (GHC.Types.:
                                    @ Text.PrettyPrint.Boxes.Box
                                    (Text.PrettyPrint.Boxes.Box
                                       (case w of wild { Text.PrettyPrint.Boxes.Box ds1 ds2 ds3 ->
                                        case ds1 of wild1 { GHC.Types.I# x ->
                                        GHC.Types.I# (GHC.Prim.-# x 1#) } })
                                       (Text.PrettyPrint.Boxes.cols w1)
                                       Text.PrettyPrint.Boxes.Blank)
                                    (GHC.Types.:
                                       @ Text.PrettyPrint.Boxes.Box
                                       w1
                                       (GHC.Types.[]
                                          @ Text.PrettyPrint.Boxes.Box))) of ww { (#,,#) ww1 ww2 ww3 ->
                          Text.PrettyPrint.Boxes.Box ww1 ww2 ww3 })
                         (GHC.Types.[] @ Text.PrettyPrint.Boxes.Box)))) -}
2dcd6c99571c956d5422cfaaf371e8cc
  $wgo ::
    [Language.PureScript.Pretty.Common.StrPos]
    -> Language.PureScript.AST.SourcePos.SourcePos
    -> [[Language.PureScript.Pretty.Common.SMap]]
    -> (Language.PureScript.AST.SourcePos.SourcePos,
        [[Language.PureScript.Pretty.Common.SMap]])
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U><L,U(U(U),U(U))><L,U>m, Inline: [0] -}
2dcd6c99571c956d5422cfaaf371e8cc
  $wgo1 ::
    Language.PureScript.AST.SourcePos.SourcePos
    -> Data.Text.Internal.Text
    -> [Language.PureScript.Pretty.Common.SMap]
    -> [Language.PureScript.Pretty.Common.StrPos]
    -> (# Language.PureScript.AST.SourcePos.SourcePos,
          Data.Text.Internal.Text,
          [Language.PureScript.Pretty.Common.SMap] #)
  {- Arity: 4, Strictness: <L,U(U(U),U(U))><L,U(U,U,U)><L,U><S,1*U>,
     Inline: [0] -}
2a9afef660dd0a69755a4a2b15ef5fa4
  $wouter ::
    GHC.Prim.MutableByteArray# GHC.Prim.RealWorld
    -> GHC.Prim.Int#
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U><S,U><S,1*U><S,U><S,U>,
     Inline: [0] -}
eeb0a9fd8ec0b683f65e1627567778e1
  $wparensT ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int# -> GHC.Prim.Int# -> Data.Text.Internal.Text
  {- Arity: 3, Strictness: <L,U><S,U><S,U>, Inline: [0] -}
588dbedb17eaf676c69597aceedf7fa9
  class GHC.Base.Monoid gen => Emit gen where
    emit :: Data.Text.Internal.Text -> gen
    addMapping :: Language.PureScript.AST.SourcePos.SourceSpan -> gen
    {-# MINIMAL emit, addMapping #-}
4c7d9e7927b04feadeb80412de79ceb1
  newtype PlainString = PlainString Data.Text.Internal.Text
d13b78ca49df3cd8b3247239bb4ea553
  data PrinterState = PrinterState {indent :: GHC.Types.Int}
7ec2e2e33d995f0548cef8d68b0bba1b
  data SMap
    = SMap Data.Text.Internal.Text
           Language.PureScript.AST.SourcePos.SourcePos
           Language.PureScript.AST.SourcePos.SourcePos
2dcd6c99571c956d5422cfaaf371e8cc
  newtype StrPos
    = StrPos (Language.PureScript.AST.SourcePos.SourcePos,
              Data.Text.Internal.Text, [Language.PureScript.Pretty.Common.SMap])
0cfafbb6ed99d45868e7a30500288453
  addMapping' ::
    Language.PureScript.Pretty.Common.Emit gen =>
    GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan -> gen
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S,1*U(1*U(A,1*U,A,A),A,1*C1(U))><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ gen
                   ($dEmit :: Language.PureScript.Pretty.Common.Emit gen)
                   (eta :: GHC.Base.Maybe
                             Language.PureScript.AST.SourcePos.SourceSpan) ->
                 case eta of wild {
                   GHC.Base.Nothing
                   -> GHC.Base.mempty
                        @ gen
                        (Language.PureScript.Pretty.Common.$p1Emit @ gen $dEmit)
                   GHC.Base.Just ss
                   -> Language.PureScript.Pretty.Common.addMapping
                        @ gen
                        $dEmit
                        ss }) -}
f7e8517538b7bd1abee0e2efba8675f6
  addPos ::
    Language.PureScript.AST.SourcePos.SourcePos
    -> Language.PureScript.AST.SourcePos.SourcePos
    -> Language.PureScript.AST.SourcePos.SourcePos
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S,1*U(U(U),1*U(U))><S(S(S)L),1*U(1*U(1*U),U(U))>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.AST.SourcePos.SourcePos)
                   (w1 :: Language.PureScript.AST.SourcePos.SourcePos) ->
                 case w of ww { Language.PureScript.AST.SourcePos.SourcePos ww1 ww2 ->
                 case w1 of ww3 { Language.PureScript.AST.SourcePos.SourcePos ww4 ww5 ->
                 case ww4 of ww6 { GHC.Types.I# ww7 ->
                 case ww7 of ds {
                   DEFAULT
                   -> Language.PureScript.AST.SourcePos.SourcePos
                        (case ww1 of wild { GHC.Types.I# x ->
                         GHC.Types.I# (GHC.Prim.+# x ds) })
                        ww5
                   0#
                   -> Language.PureScript.AST.SourcePos.SourcePos
                        ww1
                        (GHC.Num.$fNumInt_$c+ ww2 ww5) } } } }) -}
411bd3e965e2e36262e24566a3ef76eb
  before ::
    Text.PrettyPrint.Boxes.Box
    -> Text.PrettyPrint.Boxes.Box -> Text.PrettyPrint.Boxes.Box
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)LL),1*U(1*U(U),U,U)><L,U>m, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Text.PrettyPrint.Boxes.Box)
                   (w1 :: Text.PrettyPrint.Boxes.Box) ->
                 case w of ww { Text.PrettyPrint.Boxes.Box ww1 ww2 ww3 ->
                 case ww1 of ww4 { GHC.Types.I# ww5 ->
                 case Language.PureScript.Pretty.Common.$wbefore
                        ww5
                        ww2
                        ww3
                        w1 of ww6 { (#,,#) ww7 ww8 ww9 ->
                 Text.PrettyPrint.Boxes.Box ww7 ww8 ww9 } } }) -}
0b6239b88652fff4642a53c2e9e92250
  beforeWithSpace ::
    Text.PrettyPrint.Boxes.Box
    -> Text.PrettyPrint.Boxes.Box -> Text.PrettyPrint.Boxes.Box
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (b1 :: Text.PrettyPrint.Boxes.Box) ->
                 Language.PureScript.Pretty.Common.before
                   (case Text.PrettyPrint.Boxes.$w$shcat
                           Text.PrettyPrint.Boxes.AlignFirst
                           (GHC.Types.:
                              @ Text.PrettyPrint.Boxes.Box
                              b1
                              Language.PureScript.Pretty.Common.beforeWithSpace1) of ww { (#,,#) ww1 ww2 ww3 ->
                    Text.PrettyPrint.Boxes.Box ww1 ww2 ww3 })) -}
c0f3f5c78c7234201208a374aa2904aa
  beforeWithSpace1 :: [Text.PrettyPrint.Boxes.Box]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Text.PrettyPrint.Boxes.Box
                   Language.PureScript.Pretty.Common.beforeWithSpace2
                   (GHC.Types.[] @ Text.PrettyPrint.Boxes.Box)) -}
e205baaa95fa3f443df89aa9ed67c427
  beforeWithSpace2 :: Text.PrettyPrint.Boxes.Box
  {- Strictness: m,
     Unfolding: (Text.PrettyPrint.Boxes.Box
                   Text.PrettyPrint.Boxes.text1
                   Language.PureScript.Pretty.Common.beforeWithSpace5
                   Language.PureScript.Pretty.Common.beforeWithSpace3) -}
76817d43f1fa05ab19e638eb2ea1bd6c
  beforeWithSpace3 :: Text.PrettyPrint.Boxes.Content
  {- Strictness: m2,
     Unfolding: (Text.PrettyPrint.Boxes.Text
                   Language.PureScript.Pretty.Common.beforeWithSpace_t) -}
8e5b02a4b98ef258ea9398c9e383d35e
  beforeWithSpace4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (" "#) -}
30e3daf265993559f7877878b9f9cd8f
  beforeWithSpace5 :: GHC.Types.Int
  {- Unfolding: (case GHC.List.$wlenAcc
                        @ GHC.Types.Char
                        Language.PureScript.Pretty.Common.beforeWithSpace_t
                        0# of ww2 { DEFAULT ->
                 GHC.Types.I# ww2 }) -}
b2939f0d7919992cde0b2b164f8abbc5
  beforeWithSpace_t :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Pretty.Common.beforeWithSpace4) -}
820085c40ba4d4dce3db004af2f8a259
  blockIndent :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 4#) -}
596d6d27a36d0b2e795afa845d0e5ecd
  bumpPos ::
    Language.PureScript.AST.SourcePos.SourcePos
    -> Language.PureScript.Pretty.Common.SMap
    -> Language.PureScript.Pretty.Common.SMap
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U(U(U),1*U(U))><S,1*U(U,U,1*U(1*U(1*U),U(U)))>m,
     Unfolding: InlineRule (2, True, False)
                (\ (p :: Language.PureScript.AST.SourcePos.SourcePos)
                   (ds :: Language.PureScript.Pretty.Common.SMap) ->
                 case ds of wild { Language.PureScript.Pretty.Common.SMap f s g ->
                 Language.PureScript.Pretty.Common.SMap
                   f
                   s
                   (Language.PureScript.Pretty.Common.addPos p g) }) -}
523c674d2f91ac4ad9a1f22a72dc00ea
  currentIndent ::
    Language.PureScript.Pretty.Common.Emit gen =>
    Control.Monad.Trans.State.Lazy.StateT
      Language.PureScript.Pretty.Common.PrinterState GHC.Base.Maybe gen
  {- Arity: 2, Strictness: <L,1*U(A,1*C1(U),A)><L,U(U(U))>m2,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Pretty.Common.currentIndent1
                  `cast`
                (forall (gen :: <*>_N).
                 <Language.PureScript.Pretty.Common.Emit gen>_R
                 ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <Language.PureScript.Pretty.Common.PrinterState>_N
                               <GHC.Base.Maybe>_R
                               <gen>_N)) -}
55c6869f5da9ff9b82e7bef5a00a4a81
  currentIndent1 ::
    Language.PureScript.Pretty.Common.Emit gen =>
    Language.PureScript.Pretty.Common.PrinterState
    -> GHC.Base.Maybe
         (gen, Language.PureScript.Pretty.Common.PrinterState)
  {- Arity: 2, Strictness: <L,1*U(A,1*C1(U),A)><L,U(U(U))>m2,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ gen
                   (w :: Language.PureScript.Pretty.Common.Emit gen)
                   (w1 :: Language.PureScript.Pretty.Common.PrinterState) ->
                 case Language.PureScript.Pretty.Common.$wcurrentIndent
                        @ gen
                        w
                        w1 of ww { Unit# ww1 ->
                 GHC.Base.Just
                   @ (gen, Language.PureScript.Pretty.Common.PrinterState)
                   ww1 }) -}
6b4fd35afaa68310598c49082837eb66
  emptyPrinterState :: Language.PureScript.Pretty.Common.PrinterState
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Language.PureScript.Pretty.Common.PrinterState
                   Language.PureScript.Pretty.Common.$fEmitStrPos1) -}
e864dc56632559b3010d3e4568205358
  endWith ::
    Text.PrettyPrint.Boxes.Box
    -> Text.PrettyPrint.Boxes.Box -> Text.PrettyPrint.Boxes.Box
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(U(U),U,U)><L,U(U,U(U),U)>m, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Text.PrettyPrint.Boxes.Box)
                   (w1 :: Text.PrettyPrint.Boxes.Box) ->
                 case Language.PureScript.Pretty.Common.$wendWith
                        w
                        w1 of ww { (#,,#) ww1 ww2 ww3 ->
                 Text.PrettyPrint.Boxes.Box ww1 ww2 ww3 }) -}
d13b78ca49df3cd8b3247239bb4ea553
  indent ::
    Language.PureScript.Pretty.Common.PrinterState -> GHC.Types.Int
  RecSel Left Language.PureScript.Pretty.Common.PrinterState
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Pretty.Common.PrinterState) ->
                 case ds of wild { Language.PureScript.Pretty.Common.PrinterState ds1 ->
                 ds1 }) -}
ab8cd4aa1b8e0a22b4ee71150cb3a1fb
  intercalate :: GHC.Base.Monoid m => m -> [m] -> m
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLLC(S)),1*U(A,A,A,1*C1(U))><L,U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ m ($dMonoid :: GHC.Base.Monoid m) (x :: m) (xs :: [m]) ->
                 GHC.Base.mconcat
                   @ m
                   $dMonoid
                   (case xs of wild {
                      [] -> GHC.Types.[] @ m
                      : x1 xs1
                      -> GHC.Types.: @ m x1 (Data.OldList.prependToAll @ m x xs1) })) -}
9e23b328702b1a9ddb524479909e2948
  objectKeyRequiresQuoting ::
    Data.Text.Internal.Text -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S(SSS),1*U(U,U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Data.Text.Internal.Text) ->
                 case x of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 case Language.PureScript.Parser.Lexer.$wisUnquotedKey
                        ww1
                        ww2
                        ww3 of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } }) -}
0baca9b8cb62753538c52f77cae735b1
  parens :: GHC.Base.String -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (s :: GHC.Base.String) ->
                 GHC.CString.unpackAppendCString#
                   Language.PureScript.Pretty.Common.parens2
                   (GHC.Base.build
                      @ GHC.Types.Char
                      (\ @ b
                         (c :: GHC.Types.Char -> b -> b)[OneShot]
                         (n :: b)[OneShot] ->
                       GHC.Base.foldr
                         @ GHC.Types.Char
                         @ b
                         c
                         (GHC.CString.unpackFoldrCString#
                            @ b
                            Language.PureScript.Pretty.Common.parens1
                            c
                            n)
                         s))) -}
30b57c44b75d26179728b1aaa01f5a9c
  parens1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (")"#) -}
750fb4bf961118512bc27fd4edcad225
  parens2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("("#) -}
7bc098414ac5a8fd1478f75dc0082288
  parensPos ::
    Language.PureScript.Pretty.Common.Emit gen => gen -> gen
  {- Arity: 2,
     Strictness: <S(S(S(C(C(S))LL)LLL)LL),U(1*U(1*U(C(C1(U)),A,A),A,A,A),C(U),A)><L,U>,
     Unfolding: (\ @ gen
                   ($dEmit :: Language.PureScript.Pretty.Common.Emit gen)
                   (eta :: gen) ->
                 let {
                   $dMonoid :: GHC.Base.Monoid gen
                   = Language.PureScript.Pretty.Common.$p1Emit @ gen $dEmit
                 } in
                 let {
                   $dSemigroup :: GHC.Base.Semigroup gen
                   = GHC.Base.$p1Monoid @ gen $dMonoid
                 } in
                 GHC.Base.<>
                   @ gen
                   $dSemigroup
                   (Language.PureScript.Pretty.Common.emit
                      @ gen
                      $dEmit
                      Language.PureScript.Pretty.Common.parensPos2)
                   (GHC.Base.<>
                      @ gen
                      $dSemigroup
                      eta
                      (Language.PureScript.Pretty.Common.emit
                         @ gen
                         $dEmit
                         Language.PureScript.Pretty.Common.parensPos1))) -}
088917a4b4c81e4a5a9bedc5112989ec
  parensPos1 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Pretty.Common.parens1) -}
a4bf0e3161a164fd5075ea8c11ccbe60
  parensPos2 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Pretty.Common.parens2) -}
02c07fc22714e1a9368768fe30ba4d7e
  parensT :: Data.Text.Internal.Text -> Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S(SSS),1*U(U,U,U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Data.Text.Internal.Text) ->
                 case w of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Language.PureScript.Pretty.Common.$wparensT ww1 ww2 ww3 }) -}
12136dbb123f07473ef9e1b36c93d0e2
  prettyPrintMany ::
    Language.PureScript.Pretty.Common.Emit gen =>
    (a
     -> Control.Monad.Trans.State.Lazy.StateT
          Language.PureScript.Pretty.Common.PrinterState GHC.Base.Maybe gen)
    -> [a]
    -> Control.Monad.Trans.State.Lazy.StateT
         Language.PureScript.Pretty.Common.PrinterState GHC.Base.Maybe gen
  {- Arity: 3,
     Strictness: <L,U(1*U(A,A,C(C(U)),C(U)),C(U),A)><L,C(C(U))><L,1*U> -}
2b791365ae9b625ba231d12b87b3560b
  runPlainString ::
    Language.PureScript.Pretty.Common.PlainString
    -> Data.Text.Internal.Text
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U)>m,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Pretty.Common.runPlainString1
                  `cast`
                (<Language.PureScript.Pretty.Common.PlainString>_R
                 ->_R Language.PureScript.Pretty.Common.N:PlainString[0]) -}
d4a5b7a453d9f87a20d2e6f85216875a
  runPlainString1 ::
    Language.PureScript.Pretty.Common.PlainString
    -> Language.PureScript.Pretty.Common.PlainString
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U)>m,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: Language.PureScript.Pretty.Common.PlainString) -> ds) -}
f7d41921560c6196609018bc9fca0c49
  withIndent ::
    Control.Monad.Trans.State.Lazy.StateT
      Language.PureScript.Pretty.Common.PrinterState GHC.Base.Maybe gen
    -> Control.Monad.Trans.State.Lazy.StateT
         Language.PureScript.Pretty.Common.PrinterState GHC.Base.Maybe gen
  {- Arity: 2, HasNoCafRefs,
     Strictness: <C(S),1*C1(U)><L,1*U(1*U(U))>,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Pretty.Common.withIndent1
                  `cast`
                (forall (gen :: <*>_N).
                 <Control.Monad.Trans.State.Lazy.StateT
                    Language.PureScript.Pretty.Common.PrinterState
                    GHC.Base.Maybe
                    gen>_R
                 ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <Language.PureScript.Pretty.Common.PrinterState>_N
                               <GHC.Base.Maybe>_R
                               <gen>_N)) -}
802247aac5baa145356ad306e81e1b3d
  withIndent1 ::
    Control.Monad.Trans.State.Lazy.StateT
      Language.PureScript.Pretty.Common.PrinterState GHC.Base.Maybe gen
    -> Language.PureScript.Pretty.Common.PrinterState
    -> GHC.Base.Maybe
         (gen, Language.PureScript.Pretty.Common.PrinterState)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <C(S),1*C1(U)><L,1*U(1*U(U))>,
     Unfolding: (\ @ gen
                   (action :: Control.Monad.Trans.State.Lazy.StateT
                                Language.PureScript.Pretty.Common.PrinterState GHC.Base.Maybe gen)
                   (eta :: Language.PureScript.Pretty.Common.PrinterState) ->
                 case action
                        `cast`
                      (Control.Monad.Trans.State.Lazy.N:StateT[0]
                           <Language.PureScript.Pretty.Common.PrinterState>_N
                           <GHC.Base.Maybe>_R
                           <gen>_N)
                        (case eta of wild { Language.PureScript.Pretty.Common.PrinterState ds ->
                         Language.PureScript.Pretty.Common.PrinterState
                           (case ds of wild1 { GHC.Types.I# x ->
                            GHC.Types.I# (GHC.Prim.+# x 4#) }) }) of wild {
                   GHC.Base.Nothing
                   -> GHC.Base.Nothing
                        @ (gen, Language.PureScript.Pretty.Common.PrinterState)
                   GHC.Base.Just x
                   -> GHC.Base.Just
                        @ (gen, Language.PureScript.Pretty.Common.PrinterState)
                        (case x of wild1 { (,) a1 s' -> a1 },
                         case x of wild1 { (,) a1 s' ->
                         case s' of wild2 { Language.PureScript.Pretty.Common.PrinterState ds ->
                         Language.PureScript.Pretty.Common.PrinterState
                           (case ds of wild3 { GHC.Types.I# x1 ->
                            GHC.Types.I# (GHC.Prim.-# x1 4#) }) } }) }) -}
instance Language.PureScript.Pretty.Common.Emit [Language.PureScript.Pretty.Common.PlainString]
  = Language.PureScript.Pretty.Common.$fEmitPlainString
instance Language.PureScript.Pretty.Common.Emit [Language.PureScript.Pretty.Common.StrPos]
  = Language.PureScript.Pretty.Common.$fEmitStrPos
instance GHC.Base.Monoid [Language.PureScript.Pretty.Common.PlainString]
  = Language.PureScript.Pretty.Common.$fMonoidPlainString
instance GHC.Base.Monoid [Language.PureScript.Pretty.Common.StrPos]
  = Language.PureScript.Pretty.Common.$fMonoidStrPos
instance GHC.Base.Semigroup [Language.PureScript.Pretty.Common.PlainString]
  = Language.PureScript.Pretty.Common.$fSemigroupPlainString
instance GHC.Base.Semigroup [Language.PureScript.Pretty.Common.StrPos]
  = Language.PureScript.Pretty.Common.$fSemigroupStrPos
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

