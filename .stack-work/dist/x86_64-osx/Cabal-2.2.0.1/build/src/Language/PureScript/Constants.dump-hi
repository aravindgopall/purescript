
==================== FINAL INTERFACE ====================
2019-01-24 14:13:37.814284 UTC

interface purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Constants 8043
  interface hash: b340a7ab359303e07e81a56fa986e9b2
  ABI hash: 69f48af5637c1cbbd07a6f85918359c3
  export-list hash: 9c458e31ccbc9e07ff15471cf48a55ee
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 2ae478d21823b7c739b1b08c46262eb0
  opt_hash: 2c98c95d41c045ae9c2fb565ec8aabc6
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Language.PureScript.Constants.#
  Language.PureScript.Constants.$
  Language.PureScript.Constants.%
  Language.PureScript.Constants.&&
  Language.PureScript.Constants.*
  Language.PureScript.Constants.+
  Language.PureScript.Constants.++
  Language.PureScript.Constants.-
  Language.PureScript.Constants./
  Language.PureScript.Constants./=
  Language.PureScript.Constants.<
  Language.PureScript.Constants.<<<
  Language.PureScript.Constants.<=
  Language.PureScript.Constants.<>
  Language.PureScript.Constants.==
  Language.PureScript.Constants.>
  Language.PureScript.Constants.>=
  Language.PureScript.Constants.>>=
  Language.PureScript.Constants.>>>
  Language.PureScript.Constants.ControlBind
  Language.PureScript.Constants.DataSymbol
  Language.PureScript.Constants.Discard
  Language.PureScript.Constants.Fail
  Language.PureScript.Constants.IsSymbol
  Language.PureScript.Constants.Partial
  Language.PureScript.Constants.Prim
  Language.PureScript.Constants.PrimBoolean
  Language.PureScript.Constants.PrimOrdering
  Language.PureScript.Constants.PrimRow
  Language.PureScript.Constants.PrimRowList
  Language.PureScript.Constants.PrimSymbol
  Language.PureScript.Constants.PrimTypeError
  Language.PureScript.Constants.Record
  Language.PureScript.Constants.RowCons
  Language.PureScript.Constants.RowLacks
  Language.PureScript.Constants.RowListCons
  Language.PureScript.Constants.RowListNil
  Language.PureScript.Constants.RowNub
  Language.PureScript.Constants.RowToList
  Language.PureScript.Constants.RowUnion
  Language.PureScript.Constants.SymbolAppend
  Language.PureScript.Constants.SymbolCompare
  Language.PureScript.Constants.SymbolCons
  Language.PureScript.Constants.Warn
  Language.PureScript.Constants.add
  Language.PureScript.Constants.and
  Language.PureScript.Constants.append
  Language.PureScript.Constants.apply
  Language.PureScript.Constants.applyFlipped
  Language.PureScript.Constants.bind
  Language.PureScript.Constants.booleanAlgebraBoolean
  Language.PureScript.Constants.booleanFalse
  Language.PureScript.Constants.booleanTrue
  Language.PureScript.Constants.bottom
  Language.PureScript.Constants.boundedBoolean
  Language.PureScript.Constants.compare
  Language.PureScript.Constants.compare1
  Language.PureScript.Constants.complement
  Language.PureScript.Constants.compose
  Language.PureScript.Constants.composeFlipped
  Language.PureScript.Constants.conj
  Language.PureScript.Constants.controlApplicative
  Language.PureScript.Constants.controlBind
  Language.PureScript.Constants.controlMonadEffUncurried
  Language.PureScript.Constants.controlSemigroupoid
  Language.PureScript.Constants.dataArray
  Language.PureScript.Constants.dataBounded
  Language.PureScript.Constants.dataEq
  Language.PureScript.Constants.dataEuclideanRing
  Language.PureScript.Constants.dataFunction
  Language.PureScript.Constants.dataFunctionUncurried
  Language.PureScript.Constants.dataHeytingAlgebra
  Language.PureScript.Constants.dataIntBits
  Language.PureScript.Constants.dataOrd
  Language.PureScript.Constants.dataRing
  Language.PureScript.Constants.dataSemigroup
  Language.PureScript.Constants.dataSemiring
  Language.PureScript.Constants.discard
  Language.PureScript.Constants.discardUnitDictionary
  Language.PureScript.Constants.disj
  Language.PureScript.Constants.div
  Language.PureScript.Constants.doc
  Language.PureScript.Constants.eff
  Language.PureScript.Constants.effDictionaries
  Language.PureScript.Constants.effect
  Language.PureScript.Constants.effectDictionaries
  Language.PureScript.Constants.effectUncurried
  Language.PureScript.Constants.eq
  Language.PureScript.Constants.eq1
  Language.PureScript.Constants.eqBoolean
  Language.PureScript.Constants.eqChar
  Language.PureScript.Constants.eqInt
  Language.PureScript.Constants.eqNumber
  Language.PureScript.Constants.eqString
  Language.PureScript.Constants.euclideanRingInt
  Language.PureScript.Constants.euclideanRingNumber
  Language.PureScript.Constants.fromSpine
  Language.PureScript.Constants.generic
  Language.PureScript.Constants.greaterThan
  Language.PureScript.Constants.greaterThanOrEq
  Language.PureScript.Constants.heytingAlgebraBoolean
  Language.PureScript.Constants.kindBoolean
  Language.PureScript.Constants.kindOrdering
  Language.PureScript.Constants.kindRowList
  Language.PureScript.Constants.lessThan
  Language.PureScript.Constants.lessThanOrEq
  Language.PureScript.Constants.main
  Language.PureScript.Constants.map
  Language.PureScript.Constants.mkEffFn
  Language.PureScript.Constants.mkEffectFn
  Language.PureScript.Constants.mkFn
  Language.PureScript.Constants.mod
  Language.PureScript.Constants.modifySTRef
  Language.PureScript.Constants.moduleBoolean
  Language.PureScript.Constants.moduleOrdering
  Language.PureScript.Constants.moduleRow
  Language.PureScript.Constants.moduleRowList
  Language.PureScript.Constants.moduleSymbol
  Language.PureScript.Constants.moduloSemiringInt
  Language.PureScript.Constants.moduloSemiringNumber
  Language.PureScript.Constants.mul
  Language.PureScript.Constants.negate
  Language.PureScript.Constants.newSTRef
  Language.PureScript.Constants.not
  Language.PureScript.Constants.notEq
  Language.PureScript.Constants.one
  Language.PureScript.Constants.or
  Language.PureScript.Constants.ordBoolean
  Language.PureScript.Constants.ordChar
  Language.PureScript.Constants.ordInt
  Language.PureScript.Constants.ordNumber
  Language.PureScript.Constants.ordString
  Language.PureScript.Constants.orderingEQ
  Language.PureScript.Constants.orderingGT
  Language.PureScript.Constants.orderingLT
  Language.PureScript.Constants.partial
  Language.PureScript.Constants.partialUnsafe
  Language.PureScript.Constants.prelude
  Language.PureScript.Constants.prim
  Language.PureScript.Constants.primModules
  Language.PureScript.Constants.pure'
  Language.PureScript.Constants.readSTRef
  Language.PureScript.Constants.return
  Language.PureScript.Constants.returnEscaped
  Language.PureScript.Constants.ringInt
  Language.PureScript.Constants.ringNumber
  Language.PureScript.Constants.runEffFn
  Language.PureScript.Constants.runEffectFn
  Language.PureScript.Constants.runFn
  Language.PureScript.Constants.runST
  Language.PureScript.Constants.semigroupString
  Language.PureScript.Constants.semigroupoidFn
  Language.PureScript.Constants.semiringInt
  Language.PureScript.Constants.semiringNumber
  Language.PureScript.Constants.shl
  Language.PureScript.Constants.shr
  Language.PureScript.Constants.st
  Language.PureScript.Constants.stDictionaries
  Language.PureScript.Constants.stRefValue
  Language.PureScript.Constants.sub
  Language.PureScript.Constants.symbol
  Language.PureScript.Constants.toSignature
  Language.PureScript.Constants.toSpine
  Language.PureScript.Constants.top
  Language.PureScript.Constants.typ
  Language.PureScript.Constants.typeError
  Language.PureScript.Constants.undefined
  Language.PureScript.Constants.unit
  Language.PureScript.Constants.unsafeCoerce
  Language.PureScript.Constants.unsafeCoerceFn
  Language.PureScript.Constants.unsafeIndex
  Language.PureScript.Constants.unsafePartial
  Language.PureScript.Constants.writeSTRef
  Language.PureScript.Constants.xor
  Language.PureScript.Constants.zero
  Language.PureScript.Constants.zshr
  Language.PureScript.Constants.||
  Language.PureScript.Constants.EffectDictionaries{Language.PureScript.Constants.EffectDictionaries edApplicativeDict edBindDict edMonadDict edUntil edWhile}
module dependencies: Control.Monad.Supply
                     Control.Monad.Supply.Class Language.PureScript.Names
                     Language.PureScript.PSString
package dependencies: aeson-1.3.1.1 array-0.5.2.0
                      attoparsec-0.13.2.2 base-4.11.1.0 base-compat-0.10.4 binary-0.8.5.1
                      bytestring-0.10.8.2 containers-0.5.11.0 deepseq-1.4.3.0
                      dlist-0.8.0.4 ghc-boot-th-8.4.3 ghc-prim-0.5.2.0 hashable-1.2.7.0
                      integer-gmp-1.0.2.0 integer-logarithms-1.0.2.1 mtl-2.2.2
                      pretty-1.1.3.6 primitive-0.6.3.0 random-1.1 scientific-0.3.6.2
                      tagged-0.8.5 template-haskell-2.13.0.0 text-1.2.3.0
                      th-abstraction-0.2.8.0 time-1.8.0.2 time-locale-compat-0.1.1.4
                      transformers-0.5.5.0 unordered-containers-0.2.9.0 uuid-types-1.0.3
                      vector-0.12.0.1
orphans: attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         vector-0.12.0.1:Data.Vector.Unboxed
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.0:Data.Text.Lazy
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.5.0:Control.Monad.Trans.Error
         text-1.2.3.0:Data.Text binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: aeson-1.3.1.1:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         dlist-0.8.0.4:Data.DList ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Names
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.PSString
                         tagged-0.8.5:Data.Tagged
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
                         th-abstraction-0.2.8.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  base-4.11.1.0:Data.String 1b97cff5f9627e73898d75997a9ccf7f
import  -/  base-compat-0.10.4:Prelude.Compat bb6796186ed35a1d09dc34362a3fc27e
import  -/  Language.PureScript.Names 00f694509122478d97b327fbbccae327
  exports: ad7ae34f85124c68e8ba1c90fb2e732f
  ClassName c5d98a635cb261f6a93bf01096d0c6ed
  ModuleName e77bf9e056798332a9668212060e8e06
  ModuleName 1b2ddf0c04464d2fa2588925f10c1966
  ProperName f69d3801241fcb4773f1284cd28f2dee
  ProperName a7268334e0b909381550b9329cb80fcc
  Qualified b6e1bc9e7244a41d3c6149c9b5c2d6d8
  Qualified 1b2ddf0c04464d2fa2588925f10c1966
  TypeName 40ce511c66a72431b4e87351210f7b03
import  -/  Language.PureScript.PSString 482bcd39d274b3e3efbde5749bd9d797
  exports: dedd5d31dc509736134f041863efd1d4
  PSString 96ffea2472d48cda76cc39d47ab7bb82
6dc02ccd9d11d0f2a630c9f2c7ea5828
  (#) :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.#1) -}
90cb99b1b3c9cd39f88facad6296f47c
  #1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.#2) -}
87a1eaadd5dec31432df9935a4c83d43
  #2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("#"#) -}
958f9d042628cb9d789699e28836a932
  ($) :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.$1) -}
774644ef3d3429c474b1de1075cb372a
  $1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.$2) -}
11f253e2e5162da3598a926e44882924
  $2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("$"#) -}
4b801f714b0144e19c803ef55068ee8f
  $bControlBind :: Language.PureScript.Names.ModuleName
  {- Strictness: m2,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Constants.$bControlBind1
                  `cast`
                (Sym (Language.PureScript.Names.N:ModuleName[0])) -}
684360e24c6db7fb5bf3958f7c68de08
  $bControlBind1 ::
    [Language.PureScript.Names.ProperName
       'Language.PureScript.Names.Namespace]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.Namespace)
                   Language.PureScript.Constants.$bControlBind5
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.Namespace>_P))
                   Language.PureScript.Constants.$bControlBind2) -}
d4cc3ad8fa476edde1810feda7055b01
  $bControlBind2 ::
    [Language.PureScript.Names.ProperName
       'Language.PureScript.Names.Namespace]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.Namespace)
                   Language.PureScript.Constants.$bControlBind3
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.Namespace>_P))
                   (GHC.Types.[]
                      @ (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.Namespace))) -}
dafcd1e8b0346c6f13a9d3eaa8f340cc
  $bControlBind3 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Constants.$bControlBind4) -}
01fc2619b21d3f432027f2998fcf5e1a
  $bControlBind4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Bind"#) -}
fbd99cdbd294300d1cc7461877a49222
  $bControlBind5 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Constants.$bControlBind6) -}
262a9762a323d907fbfd20af95f0dfa4
  $bControlBind6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Control"#) -}
948a1a8516fd8b80e008468c71bbaed9
  $bDataSymbol :: Language.PureScript.Names.ModuleName
  {- Strictness: m2,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Constants.$bDataSymbol1
                  `cast`
                (Sym (Language.PureScript.Names.N:ModuleName[0])) -}
49c5b8f5a2a0a4bdec7cfcc3a50b7490
  $bDataSymbol1 ::
    [Language.PureScript.Names.ProperName
       'Language.PureScript.Names.Namespace]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.Namespace)
                   Language.PureScript.Constants.$bDataSymbol5
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.Namespace>_P))
                   Language.PureScript.Constants.$bDataSymbol2) -}
0fc31273a4d858354f7fbf9b6ed4260f
  $bDataSymbol2 ::
    [Language.PureScript.Names.ProperName
       'Language.PureScript.Names.Namespace]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.Namespace)
                   Language.PureScript.Constants.$bDataSymbol3
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.Namespace>_P))
                   (GHC.Types.[]
                      @ (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.Namespace))) -}
73b3be44dd8de5aab281bd5a13c45469
  $bDataSymbol3 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Constants.$bDataSymbol4) -}
890674ce8d9e33a61bc47c2bd95b60d0
  $bDataSymbol4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Symbol"#) -}
d641bc7a1eeae646e3e0a346d80476f7
  $bDataSymbol5 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Constants.$bDataSymbol6) -}
74a5351922146e8309300d4712a8b3db
  $bDataSymbol6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Data"#) -}
77a83c6e13156a0a4abb86de3837522f
  $bDiscard ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
  {- Strictness: m,
     Unfolding: (Language.PureScript.Names.Qualified
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.ClassName)
                   Language.PureScript.Constants.$bDiscard3
                   Language.PureScript.Constants.$bDiscard1
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.ClassName>_P))) -}
83488bb087035f8778000b419b70b1d9
  $bDiscard1 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Constants.$bDiscard2) -}
c187d68e58e61d2a34a1e23391ec8e81
  $bDiscard2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Discard"#) -}
7910b8009fdbd93c3e56f54ccf9baf2d
  $bDiscard3 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ Language.PureScript.Names.ModuleName
                   Language.PureScript.Constants.$bControlBind1
                     `cast`
                   (Sym (Language.PureScript.Names.N:ModuleName[0]))) -}
d4f564d18f1f2e7aee8e8fd1904679f0
  $bFail ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
  {- Strictness: m,
     Unfolding: (Language.PureScript.Names.Qualified
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.ClassName)
                   Language.PureScript.Constants.$bFail3
                   Language.PureScript.Constants.$bFail1
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.ClassName>_P))) -}
91f12eaf49183e09cb4397f8d42b8d0c
  $bFail1 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Constants.$bFail2) -}
c7119009a6635d4351d7fadc58209134
  $bFail2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Fail"#) -}
c05a95b5e5867c241ced22fb4513de18
  $bFail3 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ Language.PureScript.Names.ModuleName
                   Language.PureScript.Constants.$bFail4
                     `cast`
                   (Sym (Language.PureScript.Names.N:ModuleName[0]))) -}
e83e2fd4c9a3656b481ef028259366bd
  $bFail4 ::
    [Language.PureScript.Names.ProperName
       'Language.PureScript.Names.Namespace]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.Namespace)
                   Language.PureScript.Constants.$bFail8
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.Namespace>_P))
                   Language.PureScript.Constants.$bFail5) -}
23224728315288e7fe6fc5ac631ac6c4
  $bFail5 ::
    [Language.PureScript.Names.ProperName
       'Language.PureScript.Names.Namespace]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.Namespace)
                   Language.PureScript.Constants.$bFail6
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.Namespace>_P))
                   (GHC.Types.[]
                      @ (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.Namespace))) -}
85bfa0a47ce7c6a1550e0c61c531218c
  $bFail6 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Constants.$bFail7) -}
852962716b6ac4e435f803eea0810091
  $bFail7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("TypeError"#) -}
61c6909dfaaf79ac2796deeceac90db7
  $bFail8 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Constants.$bFail9) -}
fdce54e72223eb1d3188b9cb9db63568
  $bFail9 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Prim"#) -}
07e4af9e1476cda63c940745f2e78086
  $bIsSymbol ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
  {- Strictness: m,
     Unfolding: (Language.PureScript.Names.Qualified
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.ClassName)
                   Language.PureScript.Constants.$bIsSymbol3
                   Language.PureScript.Constants.$bIsSymbol1
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.ClassName>_P))) -}
9193a7881001f368b6bb210fb1bd42ae
  $bIsSymbol1 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Constants.$bIsSymbol2) -}
92acc4bccba906eb93fe9371ff726839
  $bIsSymbol2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IsSymbol"#) -}
9575ab4b4b2d838e8bd7aefffcc2b104
  $bIsSymbol3 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ Language.PureScript.Names.ModuleName
                   Language.PureScript.Constants.$bDataSymbol1
                     `cast`
                   (Sym (Language.PureScript.Names.N:ModuleName[0]))) -}
dc6b65e63db67d2e0c1d5a201d8e7690
  $bPartial ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
  {- Strictness: m,
     Unfolding: (Language.PureScript.Names.Qualified
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.ClassName)
                   Language.PureScript.Constants.$bPartial3
                   Language.PureScript.Constants.$bPartial1
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.ClassName>_P))) -}
7fadd44ff6c17256f7965a56bac82f34
  $bPartial1 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Constants.$bPartial2) -}
ad198f3dbee912e1288e3aef16b69ad2
  $bPartial2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Partial"#) -}
8e32d729ae25dc7948503f30fbb421c8
  $bPartial3 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ Language.PureScript.Names.ModuleName
                   Language.PureScript.Constants.$bPartial4
                     `cast`
                   (Sym (Language.PureScript.Names.N:ModuleName[0]))) -}
ffc083e9ce31e92b9cb08c3d25bf5fdf
  $bPartial4 ::
    [Language.PureScript.Names.ProperName
       'Language.PureScript.Names.Namespace]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.Namespace)
                   Language.PureScript.Constants.$bFail8
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.Namespace>_P))
                   (GHC.Types.[]
                      @ (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.Namespace))) -}
fad514eca1143c2f65e55cf147906169
  $bPrim :: Language.PureScript.Names.ModuleName
  {- Strictness: m2,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Constants.$bPartial4
                  `cast`
                (Sym (Language.PureScript.Names.N:ModuleName[0])) -}
2b9dc46404706aa04af0ad983e6f57a9
  $bPrimBoolean :: Language.PureScript.Names.ModuleName
  {- Strictness: m2,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Constants.$bPrimBoolean1
                  `cast`
                (Sym (Language.PureScript.Names.N:ModuleName[0])) -}
dec52d793c46b1850bc151c51c912209
  $bPrimBoolean1 ::
    [Language.PureScript.Names.ProperName
       'Language.PureScript.Names.Namespace]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.Namespace)
                   Language.PureScript.Constants.$bFail8
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.Namespace>_P))
                   Language.PureScript.Constants.$bPrimBoolean2) -}
45f097e1957584251bfea8bc54ad305d
  $bPrimBoolean2 ::
    [Language.PureScript.Names.ProperName
       'Language.PureScript.Names.Namespace]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.Namespace)
                   Language.PureScript.Constants.$bPrimBoolean3
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.Namespace>_P))
                   (GHC.Types.[]
                      @ (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.Namespace))) -}
dc3d4ff44c28cc5ba96e8758f925cb05
  $bPrimBoolean3 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Constants.$bPrimBoolean4) -}
ea5f52996889a40fff67fe658cb592bc
  $bPrimBoolean4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Boolean"#) -}
39c342c0b066b25f3683eaf6370b6901
  $bPrimOrdering :: Language.PureScript.Names.ModuleName
  {- Strictness: m2,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Constants.$bPrimOrdering1
                  `cast`
                (Sym (Language.PureScript.Names.N:ModuleName[0])) -}
52ec9063530e4f551efd00eef4112a9d
  $bPrimOrdering1 ::
    [Language.PureScript.Names.ProperName
       'Language.PureScript.Names.Namespace]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.Namespace)
                   Language.PureScript.Constants.$bFail8
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.Namespace>_P))
                   Language.PureScript.Constants.$bPrimOrdering2) -}
8de50bdc214bd6e495da1e83e149df8d
  $bPrimOrdering2 ::
    [Language.PureScript.Names.ProperName
       'Language.PureScript.Names.Namespace]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.Namespace)
                   Language.PureScript.Constants.$bPrimOrdering3
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.Namespace>_P))
                   (GHC.Types.[]
                      @ (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.Namespace))) -}
4c62f5e4b88482c54a9a8d3edd23a374
  $bPrimOrdering3 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Constants.$bPrimOrdering4) -}
611812ad02329d277f1db95c4459396a
  $bPrimOrdering4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Ordering"#) -}
6505f0000758646c394f39e84d6665de
  $bPrimRow :: Language.PureScript.Names.ModuleName
  {- Strictness: m2,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Constants.$bPrimRow1
                  `cast`
                (Sym (Language.PureScript.Names.N:ModuleName[0])) -}
5e35b790147873cfa84bf51ed55d4587
  $bPrimRow1 ::
    [Language.PureScript.Names.ProperName
       'Language.PureScript.Names.Namespace]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.Namespace)
                   Language.PureScript.Constants.$bFail8
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.Namespace>_P))
                   Language.PureScript.Constants.$bPrimRow2) -}
4e38385b40ab2b6a7a96da7c4336a835
  $bPrimRow2 ::
    [Language.PureScript.Names.ProperName
       'Language.PureScript.Names.Namespace]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.Namespace)
                   Language.PureScript.Constants.$bPrimRow3
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.Namespace>_P))
                   (GHC.Types.[]
                      @ (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.Namespace))) -}
f35b9510746a6aed6a02f82c3d3efeda
  $bPrimRow3 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Constants.$bPrimRow4) -}
8fc98aac2c9a77da7f70697bca2ade06
  $bPrimRow4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Row"#) -}
f31fde81fc07b8a3a8d84e4d775bb8f1
  $bPrimRowList :: Language.PureScript.Names.ModuleName
  {- Strictness: m2,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Constants.$bPrimRowList1
                  `cast`
                (Sym (Language.PureScript.Names.N:ModuleName[0])) -}
afcba077b5bafa378eeb0073c0afd97b
  $bPrimRowList1 ::
    [Language.PureScript.Names.ProperName
       'Language.PureScript.Names.Namespace]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.Namespace)
                   Language.PureScript.Constants.$bFail8
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.Namespace>_P))
                   Language.PureScript.Constants.$bPrimRowList2) -}
323c686c6972239a590279e29f23319d
  $bPrimRowList2 ::
    [Language.PureScript.Names.ProperName
       'Language.PureScript.Names.Namespace]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.Namespace)
                   Language.PureScript.Constants.$bPrimRowList3
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.Namespace>_P))
                   (GHC.Types.[]
                      @ (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.Namespace))) -}
c9197f2a7a87659ef30bffea430f3159
  $bPrimRowList3 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Constants.$bPrimRowList4) -}
94306b6d52d4e94ebe753d1dfc9414ca
  $bPrimRowList4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("RowList"#) -}
b798a1f37703c68af191bcc144852f72
  $bPrimSymbol :: Language.PureScript.Names.ModuleName
  {- Strictness: m2,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Constants.$bPrimSymbol1
                  `cast`
                (Sym (Language.PureScript.Names.N:ModuleName[0])) -}
79c212fae4a65366720ccc782dd48cad
  $bPrimSymbol1 ::
    [Language.PureScript.Names.ProperName
       'Language.PureScript.Names.Namespace]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.Namespace)
                   Language.PureScript.Constants.$bFail8
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.Namespace>_P))
                   Language.PureScript.Constants.$bDataSymbol2) -}
04ba1fac86d5239ee3002f72aa9c04ae
  $bPrimTypeError :: Language.PureScript.Names.ModuleName
  {- Strictness: m2,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Constants.$bFail4
                  `cast`
                (Sym (Language.PureScript.Names.N:ModuleName[0])) -}
5c499099544206ed406b76c8204e4714
  $bRecord ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName)
  {- Strictness: m,
     Unfolding: (Language.PureScript.Names.Qualified
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.TypeName)
                   Language.PureScript.Constants.$bPartial3
                   Language.PureScript.Constants.$bRecord1
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.TypeName>_P))) -}
3135b159a1d1abbb714094890be65075
  $bRecord1 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Constants.$bRecord2) -}
e257d94aa0fa1a963f2869e300d88c8a
  $bRecord2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Record"#) -}
b0fbc4523bd060537faec95c8e9bcdef
  $bRowCons ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
  {- Strictness: m,
     Unfolding: (Language.PureScript.Names.Qualified
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.ClassName)
                   Language.PureScript.Constants.$bRowCons3
                   Language.PureScript.Constants.$bRowCons1
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.ClassName>_P))) -}
6a954ef5cabd2043afd0a0a6217a534c
  $bRowCons1 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Constants.$bRowCons2) -}
e97275e14bb46d343b06ac5b0012b7b6
  $bRowCons2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Cons"#) -}
de62862a07197d1fff244f77f0467278
  $bRowCons3 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ Language.PureScript.Names.ModuleName
                   Language.PureScript.Constants.$bPrimRow1
                     `cast`
                   (Sym (Language.PureScript.Names.N:ModuleName[0]))) -}
2a4f4797a7eef867e4e878c9db4d2cdd
  $bRowLacks ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
  {- Strictness: m,
     Unfolding: (Language.PureScript.Names.Qualified
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.ClassName)
                   Language.PureScript.Constants.$bRowCons3
                   Language.PureScript.Constants.$bRowLacks1
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.ClassName>_P))) -}
dbcb5f54e0fa82edea1ef0981fd0c0b5
  $bRowLacks1 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Constants.$bRowLacks2) -}
413fd7c5ed8a6fdb829cc29e6ce52fd6
  $bRowLacks2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Lacks"#) -}
4e3fa19f9b1510595763099e501b768c
  $bRowListCons ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName)
  {- Strictness: m,
     Unfolding: (Language.PureScript.Names.Qualified
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.TypeName)
                   Language.PureScript.Constants.$bRowListCons1
                   Language.PureScript.Constants.$bRowCons1
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.TypeName>_P))) -}
1639bd9643f136c0fd5465a84dc5a754
  $bRowListCons1 ::
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ Language.PureScript.Names.ModuleName
                   Language.PureScript.Constants.$bPrimRowList1
                     `cast`
                   (Sym (Language.PureScript.Names.N:ModuleName[0]))) -}
ce346a909e60c2a7dcfd4f6679f17e1e
  $bRowListNil ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName)
  {- Strictness: m,
     Unfolding: (Language.PureScript.Names.Qualified
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.TypeName)
                   Language.PureScript.Constants.$bRowListCons1
                   Language.PureScript.Constants.$bRowListNil1
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.TypeName>_P))) -}
89ba9be0b06e723d478e46891ff2b163
  $bRowListNil1 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Constants.$bRowListNil2) -}
7870c83ae72d1ecc6968cdca4013aceb
  $bRowListNil2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Nil"#) -}
16422a78f3d313c5bf3bf2e4c8805c5a
  $bRowNub ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
  {- Strictness: m,
     Unfolding: (Language.PureScript.Names.Qualified
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.ClassName)
                   Language.PureScript.Constants.$bRowCons3
                   Language.PureScript.Constants.$bRowNub1
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.ClassName>_P))) -}
33e11b28a8c478cf59c77dd1ee654eb4
  $bRowNub1 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Constants.$bRowNub2) -}
cb6eadfaf51ec0d3790e4e354bd2d023
  $bRowNub2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Nub"#) -}
849366aa947fe3d5a0e90686c992bd4f
  $bRowToList ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
  {- Strictness: m,
     Unfolding: (Language.PureScript.Names.Qualified
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.ClassName)
                   Language.PureScript.Constants.$bRowListCons1
                   Language.PureScript.Constants.$bRowToList1
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.ClassName>_P))) -}
5944701bcf8f7e2a5a145e6f7686589c
  $bRowToList1 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Constants.$bRowToList2) -}
2cf2098007eceb743baa6dcf108dcbda
  $bRowToList2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("RowToList"#) -}
796875b8f31db431f66ba419c8fa03c5
  $bRowUnion ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
  {- Strictness: m,
     Unfolding: (Language.PureScript.Names.Qualified
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.ClassName)
                   Language.PureScript.Constants.$bRowCons3
                   Language.PureScript.Constants.$bRowUnion1
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.ClassName>_P))) -}
36c03d393e802609d133091015497353
  $bRowUnion1 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Constants.$bRowUnion2) -}
bea2fdf026452297209c126fcba3fa74
  $bRowUnion2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Union"#) -}
3bee5ea5d5815fa2f2a6c2f571e93517
  $bSymbolAppend ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
  {- Strictness: m,
     Unfolding: (Language.PureScript.Names.Qualified
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.ClassName)
                   Language.PureScript.Constants.$bSymbolAppend3
                   Language.PureScript.Constants.$bSymbolAppend1
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.ClassName>_P))) -}
73cc616708ff307f4091e4ace183fce7
  $bSymbolAppend1 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Constants.$bSymbolAppend2) -}
dd671f1c826651fb1f2f3f2b8b0f3ecf
  $bSymbolAppend2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Append"#) -}
59b09f4f1ed07a9a0b63635451577dc5
  $bSymbolAppend3 ::
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ Language.PureScript.Names.ModuleName
                   Language.PureScript.Constants.$bPrimSymbol1
                     `cast`
                   (Sym (Language.PureScript.Names.N:ModuleName[0]))) -}
dd43bdc26a4b41c6e379ff44f539587f
  $bSymbolCompare ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
  {- Strictness: m,
     Unfolding: (Language.PureScript.Names.Qualified
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.ClassName)
                   Language.PureScript.Constants.$bSymbolAppend3
                   Language.PureScript.Constants.$bSymbolCompare1
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.ClassName>_P))) -}
6bd896adc0d60100aa29f968d0d075a7
  $bSymbolCompare1 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Constants.$bSymbolCompare2) -}
3565c314bf0d27019c9376bf408b9cce
  $bSymbolCompare2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Compare"#) -}
664f083fc54987b4ae874e1b4045a909
  $bSymbolCons ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
  {- Strictness: m,
     Unfolding: (Language.PureScript.Names.Qualified
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.ClassName)
                   Language.PureScript.Constants.$bSymbolAppend3
                   Language.PureScript.Constants.$bRowCons1
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.ClassName>_P))) -}
a5b603a86317315749eb0ceb7c19c8ef
  $bWarn ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
  {- Strictness: m,
     Unfolding: (Language.PureScript.Names.Qualified
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.ClassName)
                   Language.PureScript.Constants.$bFail3
                   Language.PureScript.Constants.$bWarn1
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.ClassName>_P))) -}
acf1bc92b2e135295794fc1580ac8e84
  $bWarn1 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Constants.$bWarn2) -}
c447e5948b5221b67a0df9882189c3e4
  $bWarn2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Warn"#) -}
a4b0340177cf7f38c6fe4eb52dbe2290
  $mControlBind ::
    forall (rep :: GHC.Types.RuntimeRep) (r :: TYPE rep).
    Language.PureScript.Names.ModuleName
    -> (GHC.Prim.Void# -> r) -> (GHC.Prim.Void# -> r) -> r
  {- Arity: 3, Strictness: <S,1*U><L,1*C1(U)><L,1*C1(U)>,
     Unfolding: (\ @ rep :: GHC.Types.RuntimeRep
                   @ r :: TYPE rep
                   (scrut :: Language.PureScript.Names.ModuleName)
                   (cont :: GHC.Prim.Void# -> r)
                   (fail :: GHC.Prim.Void# -> r) ->
                 case scrut
                        `cast`
                      (Language.PureScript.Names.N:ModuleName[0]) of wild {
                   [] -> fail GHC.Prim.void#
                   : ds ds1
                   -> case ds
                             `cast`
                           (Language.PureScript.Names.N:ProperName[0]
                                <'Language.PureScript.Names.Namespace>_P) of wild1 { Data.Text.Internal.Text dt dt1 dt2 ->
                      case Language.PureScript.Constants.$bControlBind5 of wild2 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                      case GHC.Prim.==# dt2 dt5 of lwild {
                        DEFAULT -> fail GHC.Prim.void#
                        1#
                        -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                          -> GHC.Prim.Word#
                                                          -> GHC.Prim.ByteArray#
                                                          -> GHC.Prim.Word#
                                                          -> GHC.Prim.Word#
                                                          -> GHC.Prim.State# GHC.Prim.RealWorld
                                                          -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                GHC.Prim.Int# #)}
                                  dt
                                  (GHC.Prim.int2Word# dt1)
                                  dt3
                                  (GHC.Prim.int2Word# dt4)
                                  (GHC.Prim.int2Word# dt2)
                                  GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                           case GHC.Prim.narrow32Int# ds3 of wild3 {
                             DEFAULT -> fail GHC.Prim.void#
                             0#
                             -> case ds1 of wild4 {
                                  [] -> fail GHC.Prim.void#
                                  : ds5 ds6
                                  -> case ds5
                                            `cast`
                                          (Language.PureScript.Names.N:ProperName[0]
                                               <'Language.PureScript.Names.Namespace>_P) of wild6 { Data.Text.Internal.Text dt7 dt8 dt9 ->
                                     case Language.PureScript.Constants.$bControlBind3 of wild7 { Data.Text.Internal.Text dt10 dt11 dt12 ->
                                     case GHC.Prim.==# dt9 dt12 of lwild1 {
                                       DEFAULT -> fail GHC.Prim.void#
                                       1#
                                       -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                                         -> GHC.Prim.Word#
                                                                         -> GHC.Prim.ByteArray#
                                                                         -> GHC.Prim.Word#
                                                                         -> GHC.Prim.Word#
                                                                         -> GHC.Prim.State#
                                                                              GHC.Prim.RealWorld
                                                                         -> (# GHC.Prim.State#
                                                                                 GHC.Prim.RealWorld,
                                                                               GHC.Prim.Int# #)}
                                                 dt7
                                                 (GHC.Prim.int2Word# dt8)
                                                 dt10
                                                 (GHC.Prim.int2Word# dt11)
                                                 (GHC.Prim.int2Word# dt9)
                                                 GHC.Prim.realWorld# of wild8 { (#,#) ds7 ds8 ->
                                          case GHC.Prim.narrow32Int# ds8 of wild9 {
                                            DEFAULT -> fail GHC.Prim.void#
                                            0#
                                            -> case ds6 of wild10 {
                                                 [] -> cont GHC.Prim.void#
                                                 : ipv ipv1
                                                 -> fail
                                                      GHC.Prim.void# } } } } } } } } } } } } }) -}
efe28b95a4e5eb717fa5fcd781daa6c7
  $mDataSymbol ::
    forall (rep :: GHC.Types.RuntimeRep) (r :: TYPE rep).
    Language.PureScript.Names.ModuleName
    -> (GHC.Prim.Void# -> r) -> (GHC.Prim.Void# -> r) -> r
  {- Arity: 3, Strictness: <S,1*U><L,1*C1(U)><L,1*C1(U)>,
     Unfolding: (\ @ rep :: GHC.Types.RuntimeRep
                   @ r :: TYPE rep
                   (scrut :: Language.PureScript.Names.ModuleName)
                   (cont :: GHC.Prim.Void# -> r)
                   (fail :: GHC.Prim.Void# -> r) ->
                 case scrut
                        `cast`
                      (Language.PureScript.Names.N:ModuleName[0]) of wild {
                   [] -> fail GHC.Prim.void#
                   : ds ds1
                   -> case ds
                             `cast`
                           (Language.PureScript.Names.N:ProperName[0]
                                <'Language.PureScript.Names.Namespace>_P) of wild1 { Data.Text.Internal.Text dt dt1 dt2 ->
                      case Language.PureScript.Constants.$bDataSymbol5 of wild2 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                      case GHC.Prim.==# dt2 dt5 of lwild {
                        DEFAULT -> fail GHC.Prim.void#
                        1#
                        -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                          -> GHC.Prim.Word#
                                                          -> GHC.Prim.ByteArray#
                                                          -> GHC.Prim.Word#
                                                          -> GHC.Prim.Word#
                                                          -> GHC.Prim.State# GHC.Prim.RealWorld
                                                          -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                GHC.Prim.Int# #)}
                                  dt
                                  (GHC.Prim.int2Word# dt1)
                                  dt3
                                  (GHC.Prim.int2Word# dt4)
                                  (GHC.Prim.int2Word# dt2)
                                  GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                           case GHC.Prim.narrow32Int# ds3 of wild3 {
                             DEFAULT -> fail GHC.Prim.void#
                             0#
                             -> case ds1 of wild4 {
                                  [] -> fail GHC.Prim.void#
                                  : ds5 ds6
                                  -> case ds5
                                            `cast`
                                          (Language.PureScript.Names.N:ProperName[0]
                                               <'Language.PureScript.Names.Namespace>_P) of wild6 { Data.Text.Internal.Text dt7 dt8 dt9 ->
                                     case Language.PureScript.Constants.$bDataSymbol3 of wild7 { Data.Text.Internal.Text dt10 dt11 dt12 ->
                                     case GHC.Prim.==# dt9 dt12 of lwild1 {
                                       DEFAULT -> fail GHC.Prim.void#
                                       1#
                                       -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                                         -> GHC.Prim.Word#
                                                                         -> GHC.Prim.ByteArray#
                                                                         -> GHC.Prim.Word#
                                                                         -> GHC.Prim.Word#
                                                                         -> GHC.Prim.State#
                                                                              GHC.Prim.RealWorld
                                                                         -> (# GHC.Prim.State#
                                                                                 GHC.Prim.RealWorld,
                                                                               GHC.Prim.Int# #)}
                                                 dt7
                                                 (GHC.Prim.int2Word# dt8)
                                                 dt10
                                                 (GHC.Prim.int2Word# dt11)
                                                 (GHC.Prim.int2Word# dt9)
                                                 GHC.Prim.realWorld# of wild8 { (#,#) ds7 ds8 ->
                                          case GHC.Prim.narrow32Int# ds8 of wild9 {
                                            DEFAULT -> fail GHC.Prim.void#
                                            0#
                                            -> case ds6 of wild10 {
                                                 [] -> cont GHC.Prim.void#
                                                 : ipv ipv1
                                                 -> fail
                                                      GHC.Prim.void# } } } } } } } } } } } } }) -}
d9fbccc19f75c60d61709257c1d549d9
  $mDiscard ::
    forall (rep :: GHC.Types.RuntimeRep) (r :: TYPE rep).
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
    -> (GHC.Prim.Void# -> r) -> (GHC.Prim.Void# -> r) -> r
  {- Arity: 3,
     Strictness: <S(SL),1*U(1*U,1*U(U,U,U))><L,1*C1(U)><L,C(U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ rep :: GHC.Types.RuntimeRep
                   @ r :: TYPE rep
                   (w :: Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ClassName))
                   (w1 :: GHC.Prim.Void# -> r)
                   (w2 :: GHC.Prim.Void# -> r) ->
                 case w of ww { Language.PureScript.Names.Qualified ww1 ww2 ->
                 Language.PureScript.Constants.$w$mDiscard
                   @ rep
                   @ r
                   ww1
                   ww2
                   w1
                   w2 }) -}
94ac2656f2e6e8b9b781b13339a035cf
  $mFail ::
    forall (rep :: GHC.Types.RuntimeRep) (r :: TYPE rep).
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
    -> (GHC.Prim.Void# -> r) -> (GHC.Prim.Void# -> r) -> r
  {- Arity: 3,
     Strictness: <S(SL),1*U(1*U,1*U(U,U,U))><L,1*C1(U)><L,C(U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ rep :: GHC.Types.RuntimeRep
                   @ r :: TYPE rep
                   (w :: Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ClassName))
                   (w1 :: GHC.Prim.Void# -> r)
                   (w2 :: GHC.Prim.Void# -> r) ->
                 case w of ww { Language.PureScript.Names.Qualified ww1 ww2 ->
                 Language.PureScript.Constants.$w$mFail
                   @ rep
                   @ r
                   ww1
                   ww2
                   w1
                   w2 }) -}
766197cf5c6b3e08afcc1804484cf789
  $mIsSymbol ::
    forall (rep :: GHC.Types.RuntimeRep) (r :: TYPE rep).
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
    -> (GHC.Prim.Void# -> r) -> (GHC.Prim.Void# -> r) -> r
  {- Arity: 3,
     Strictness: <S(SL),1*U(1*U,1*U(U,U,U))><L,1*C1(U)><L,C(U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ rep :: GHC.Types.RuntimeRep
                   @ r :: TYPE rep
                   (w :: Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ClassName))
                   (w1 :: GHC.Prim.Void# -> r)
                   (w2 :: GHC.Prim.Void# -> r) ->
                 case w of ww { Language.PureScript.Names.Qualified ww1 ww2 ->
                 Language.PureScript.Constants.$w$mIsSymbol
                   @ rep
                   @ r
                   ww1
                   ww2
                   w1
                   w2 }) -}
1983e807bcf76f08aaaad3542fcc8097
  $mPartial ::
    forall (rep :: GHC.Types.RuntimeRep) (r :: TYPE rep).
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
    -> (GHC.Prim.Void# -> r) -> (GHC.Prim.Void# -> r) -> r
  {- Arity: 3,
     Strictness: <S(SL),1*U(1*U,1*U(U,U,U))><L,1*C1(U)><L,1*C1(U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ rep :: GHC.Types.RuntimeRep
                   @ r :: TYPE rep
                   (w :: Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ClassName))
                   (w1 :: GHC.Prim.Void# -> r)
                   (w2 :: GHC.Prim.Void# -> r) ->
                 case w of ww { Language.PureScript.Names.Qualified ww1 ww2 ->
                 Language.PureScript.Constants.$w$mPartial
                   @ rep
                   @ r
                   ww1
                   ww2
                   w1
                   w2 }) -}
787c7940863707074f29de90f6fac52c
  $mPrim ::
    forall (rep :: GHC.Types.RuntimeRep) (r :: TYPE rep).
    Language.PureScript.Names.ModuleName
    -> (GHC.Prim.Void# -> r) -> (GHC.Prim.Void# -> r) -> r
  {- Arity: 3, Strictness: <S,1*U><L,1*C1(U)><L,1*C1(U)>,
     Unfolding: (\ @ rep :: GHC.Types.RuntimeRep
                   @ r :: TYPE rep
                   (scrut :: Language.PureScript.Names.ModuleName)
                   (cont :: GHC.Prim.Void# -> r)
                   (fail :: GHC.Prim.Void# -> r) ->
                 case scrut
                        `cast`
                      (Language.PureScript.Names.N:ModuleName[0]) of wild {
                   [] -> fail GHC.Prim.void#
                   : ds ds1
                   -> case ds
                             `cast`
                           (Language.PureScript.Names.N:ProperName[0]
                                <'Language.PureScript.Names.Namespace>_P) of wild1 { Data.Text.Internal.Text dt dt1 dt2 ->
                      case Language.PureScript.Constants.$bFail8 of wild2 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                      case GHC.Prim.==# dt2 dt5 of lwild {
                        DEFAULT -> fail GHC.Prim.void#
                        1#
                        -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                          -> GHC.Prim.Word#
                                                          -> GHC.Prim.ByteArray#
                                                          -> GHC.Prim.Word#
                                                          -> GHC.Prim.Word#
                                                          -> GHC.Prim.State# GHC.Prim.RealWorld
                                                          -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                GHC.Prim.Int# #)}
                                  dt
                                  (GHC.Prim.int2Word# dt1)
                                  dt3
                                  (GHC.Prim.int2Word# dt4)
                                  (GHC.Prim.int2Word# dt2)
                                  GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                           case GHC.Prim.narrow32Int# ds3 of wild3 {
                             DEFAULT -> fail GHC.Prim.void#
                             0#
                             -> case ds1 of wild4 {
                                  [] -> cont GHC.Prim.void#
                                  : ipv ipv1 -> fail GHC.Prim.void# } } } } } } }) -}
06bd948a8afc64e7968eddff081441eb
  $mPrimBoolean ::
    forall (rep :: GHC.Types.RuntimeRep) (r :: TYPE rep).
    Language.PureScript.Names.ModuleName
    -> (GHC.Prim.Void# -> r) -> (GHC.Prim.Void# -> r) -> r
  {- Arity: 3, Strictness: <S,1*U><L,1*C1(U)><L,1*C1(U)>,
     Unfolding: (\ @ rep :: GHC.Types.RuntimeRep
                   @ r :: TYPE rep
                   (scrut :: Language.PureScript.Names.ModuleName)
                   (cont :: GHC.Prim.Void# -> r)
                   (fail :: GHC.Prim.Void# -> r) ->
                 case scrut
                        `cast`
                      (Language.PureScript.Names.N:ModuleName[0]) of wild {
                   [] -> fail GHC.Prim.void#
                   : ds ds1
                   -> case ds
                             `cast`
                           (Language.PureScript.Names.N:ProperName[0]
                                <'Language.PureScript.Names.Namespace>_P) of wild1 { Data.Text.Internal.Text dt dt1 dt2 ->
                      case Language.PureScript.Constants.$bFail8 of wild2 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                      case GHC.Prim.==# dt2 dt5 of lwild {
                        DEFAULT -> fail GHC.Prim.void#
                        1#
                        -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                          -> GHC.Prim.Word#
                                                          -> GHC.Prim.ByteArray#
                                                          -> GHC.Prim.Word#
                                                          -> GHC.Prim.Word#
                                                          -> GHC.Prim.State# GHC.Prim.RealWorld
                                                          -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                GHC.Prim.Int# #)}
                                  dt
                                  (GHC.Prim.int2Word# dt1)
                                  dt3
                                  (GHC.Prim.int2Word# dt4)
                                  (GHC.Prim.int2Word# dt2)
                                  GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                           case GHC.Prim.narrow32Int# ds3 of wild3 {
                             DEFAULT -> fail GHC.Prim.void#
                             0#
                             -> case ds1 of wild4 {
                                  [] -> fail GHC.Prim.void#
                                  : ds5 ds6
                                  -> case ds5
                                            `cast`
                                          (Language.PureScript.Names.N:ProperName[0]
                                               <'Language.PureScript.Names.Namespace>_P) of wild6 { Data.Text.Internal.Text dt7 dt8 dt9 ->
                                     case Language.PureScript.Constants.$bPrimBoolean3 of wild7 { Data.Text.Internal.Text dt10 dt11 dt12 ->
                                     case GHC.Prim.==# dt9 dt12 of lwild1 {
                                       DEFAULT -> fail GHC.Prim.void#
                                       1#
                                       -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                                         -> GHC.Prim.Word#
                                                                         -> GHC.Prim.ByteArray#
                                                                         -> GHC.Prim.Word#
                                                                         -> GHC.Prim.Word#
                                                                         -> GHC.Prim.State#
                                                                              GHC.Prim.RealWorld
                                                                         -> (# GHC.Prim.State#
                                                                                 GHC.Prim.RealWorld,
                                                                               GHC.Prim.Int# #)}
                                                 dt7
                                                 (GHC.Prim.int2Word# dt8)
                                                 dt10
                                                 (GHC.Prim.int2Word# dt11)
                                                 (GHC.Prim.int2Word# dt9)
                                                 GHC.Prim.realWorld# of wild8 { (#,#) ds7 ds8 ->
                                          case GHC.Prim.narrow32Int# ds8 of wild9 {
                                            DEFAULT -> fail GHC.Prim.void#
                                            0#
                                            -> case ds6 of wild10 {
                                                 [] -> cont GHC.Prim.void#
                                                 : ipv ipv1
                                                 -> fail
                                                      GHC.Prim.void# } } } } } } } } } } } } }) -}
916e6ddcf78515bf274655d82d27e41d
  $mPrimOrdering ::
    forall (rep :: GHC.Types.RuntimeRep) (r :: TYPE rep).
    Language.PureScript.Names.ModuleName
    -> (GHC.Prim.Void# -> r) -> (GHC.Prim.Void# -> r) -> r
  {- Arity: 3, Strictness: <S,1*U><L,1*C1(U)><L,1*C1(U)>,
     Unfolding: (\ @ rep :: GHC.Types.RuntimeRep
                   @ r :: TYPE rep
                   (scrut :: Language.PureScript.Names.ModuleName)
                   (cont :: GHC.Prim.Void# -> r)
                   (fail :: GHC.Prim.Void# -> r) ->
                 case scrut
                        `cast`
                      (Language.PureScript.Names.N:ModuleName[0]) of wild {
                   [] -> fail GHC.Prim.void#
                   : ds ds1
                   -> case ds
                             `cast`
                           (Language.PureScript.Names.N:ProperName[0]
                                <'Language.PureScript.Names.Namespace>_P) of wild1 { Data.Text.Internal.Text dt dt1 dt2 ->
                      case Language.PureScript.Constants.$bFail8 of wild2 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                      case GHC.Prim.==# dt2 dt5 of lwild {
                        DEFAULT -> fail GHC.Prim.void#
                        1#
                        -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                          -> GHC.Prim.Word#
                                                          -> GHC.Prim.ByteArray#
                                                          -> GHC.Prim.Word#
                                                          -> GHC.Prim.Word#
                                                          -> GHC.Prim.State# GHC.Prim.RealWorld
                                                          -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                GHC.Prim.Int# #)}
                                  dt
                                  (GHC.Prim.int2Word# dt1)
                                  dt3
                                  (GHC.Prim.int2Word# dt4)
                                  (GHC.Prim.int2Word# dt2)
                                  GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                           case GHC.Prim.narrow32Int# ds3 of wild3 {
                             DEFAULT -> fail GHC.Prim.void#
                             0#
                             -> case ds1 of wild4 {
                                  [] -> fail GHC.Prim.void#
                                  : ds5 ds6
                                  -> case ds5
                                            `cast`
                                          (Language.PureScript.Names.N:ProperName[0]
                                               <'Language.PureScript.Names.Namespace>_P) of wild6 { Data.Text.Internal.Text dt7 dt8 dt9 ->
                                     case Language.PureScript.Constants.$bPrimOrdering3 of wild7 { Data.Text.Internal.Text dt10 dt11 dt12 ->
                                     case GHC.Prim.==# dt9 dt12 of lwild1 {
                                       DEFAULT -> fail GHC.Prim.void#
                                       1#
                                       -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                                         -> GHC.Prim.Word#
                                                                         -> GHC.Prim.ByteArray#
                                                                         -> GHC.Prim.Word#
                                                                         -> GHC.Prim.Word#
                                                                         -> GHC.Prim.State#
                                                                              GHC.Prim.RealWorld
                                                                         -> (# GHC.Prim.State#
                                                                                 GHC.Prim.RealWorld,
                                                                               GHC.Prim.Int# #)}
                                                 dt7
                                                 (GHC.Prim.int2Word# dt8)
                                                 dt10
                                                 (GHC.Prim.int2Word# dt11)
                                                 (GHC.Prim.int2Word# dt9)
                                                 GHC.Prim.realWorld# of wild8 { (#,#) ds7 ds8 ->
                                          case GHC.Prim.narrow32Int# ds8 of wild9 {
                                            DEFAULT -> fail GHC.Prim.void#
                                            0#
                                            -> case ds6 of wild10 {
                                                 [] -> cont GHC.Prim.void#
                                                 : ipv ipv1
                                                 -> fail
                                                      GHC.Prim.void# } } } } } } } } } } } } }) -}
fea5198f032fdac24dd225afeae680ef
  $mPrimRow ::
    forall (rep :: GHC.Types.RuntimeRep) (r :: TYPE rep).
    Language.PureScript.Names.ModuleName
    -> (GHC.Prim.Void# -> r) -> (GHC.Prim.Void# -> r) -> r
  {- Arity: 3, Strictness: <S,1*U><L,1*C1(U)><L,1*C1(U)>,
     Unfolding: (\ @ rep :: GHC.Types.RuntimeRep
                   @ r :: TYPE rep
                   (scrut :: Language.PureScript.Names.ModuleName)
                   (cont :: GHC.Prim.Void# -> r)
                   (fail :: GHC.Prim.Void# -> r) ->
                 case scrut
                        `cast`
                      (Language.PureScript.Names.N:ModuleName[0]) of wild {
                   [] -> fail GHC.Prim.void#
                   : ds ds1
                   -> case ds
                             `cast`
                           (Language.PureScript.Names.N:ProperName[0]
                                <'Language.PureScript.Names.Namespace>_P) of wild1 { Data.Text.Internal.Text dt dt1 dt2 ->
                      case Language.PureScript.Constants.$bFail8 of wild2 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                      case GHC.Prim.==# dt2 dt5 of lwild {
                        DEFAULT -> fail GHC.Prim.void#
                        1#
                        -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                          -> GHC.Prim.Word#
                                                          -> GHC.Prim.ByteArray#
                                                          -> GHC.Prim.Word#
                                                          -> GHC.Prim.Word#
                                                          -> GHC.Prim.State# GHC.Prim.RealWorld
                                                          -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                GHC.Prim.Int# #)}
                                  dt
                                  (GHC.Prim.int2Word# dt1)
                                  dt3
                                  (GHC.Prim.int2Word# dt4)
                                  (GHC.Prim.int2Word# dt2)
                                  GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                           case GHC.Prim.narrow32Int# ds3 of wild3 {
                             DEFAULT -> fail GHC.Prim.void#
                             0#
                             -> case ds1 of wild4 {
                                  [] -> fail GHC.Prim.void#
                                  : ds5 ds6
                                  -> case ds5
                                            `cast`
                                          (Language.PureScript.Names.N:ProperName[0]
                                               <'Language.PureScript.Names.Namespace>_P) of wild6 { Data.Text.Internal.Text dt7 dt8 dt9 ->
                                     case Language.PureScript.Constants.$bPrimRow3 of wild7 { Data.Text.Internal.Text dt10 dt11 dt12 ->
                                     case GHC.Prim.==# dt9 dt12 of lwild1 {
                                       DEFAULT -> fail GHC.Prim.void#
                                       1#
                                       -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                                         -> GHC.Prim.Word#
                                                                         -> GHC.Prim.ByteArray#
                                                                         -> GHC.Prim.Word#
                                                                         -> GHC.Prim.Word#
                                                                         -> GHC.Prim.State#
                                                                              GHC.Prim.RealWorld
                                                                         -> (# GHC.Prim.State#
                                                                                 GHC.Prim.RealWorld,
                                                                               GHC.Prim.Int# #)}
                                                 dt7
                                                 (GHC.Prim.int2Word# dt8)
                                                 dt10
                                                 (GHC.Prim.int2Word# dt11)
                                                 (GHC.Prim.int2Word# dt9)
                                                 GHC.Prim.realWorld# of wild8 { (#,#) ds7 ds8 ->
                                          case GHC.Prim.narrow32Int# ds8 of wild9 {
                                            DEFAULT -> fail GHC.Prim.void#
                                            0#
                                            -> case ds6 of wild10 {
                                                 [] -> cont GHC.Prim.void#
                                                 : ipv ipv1
                                                 -> fail
                                                      GHC.Prim.void# } } } } } } } } } } } } }) -}
6e5251f2e3b4feb3137d421161ed3911
  $mPrimRowList ::
    forall (rep :: GHC.Types.RuntimeRep) (r :: TYPE rep).
    Language.PureScript.Names.ModuleName
    -> (GHC.Prim.Void# -> r) -> (GHC.Prim.Void# -> r) -> r
  {- Arity: 3, Strictness: <S,1*U><L,1*C1(U)><L,1*C1(U)>,
     Unfolding: (\ @ rep :: GHC.Types.RuntimeRep
                   @ r :: TYPE rep
                   (scrut :: Language.PureScript.Names.ModuleName)
                   (cont :: GHC.Prim.Void# -> r)
                   (fail :: GHC.Prim.Void# -> r) ->
                 case scrut
                        `cast`
                      (Language.PureScript.Names.N:ModuleName[0]) of wild {
                   [] -> fail GHC.Prim.void#
                   : ds ds1
                   -> case ds
                             `cast`
                           (Language.PureScript.Names.N:ProperName[0]
                                <'Language.PureScript.Names.Namespace>_P) of wild1 { Data.Text.Internal.Text dt dt1 dt2 ->
                      case Language.PureScript.Constants.$bFail8 of wild2 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                      case GHC.Prim.==# dt2 dt5 of lwild {
                        DEFAULT -> fail GHC.Prim.void#
                        1#
                        -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                          -> GHC.Prim.Word#
                                                          -> GHC.Prim.ByteArray#
                                                          -> GHC.Prim.Word#
                                                          -> GHC.Prim.Word#
                                                          -> GHC.Prim.State# GHC.Prim.RealWorld
                                                          -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                GHC.Prim.Int# #)}
                                  dt
                                  (GHC.Prim.int2Word# dt1)
                                  dt3
                                  (GHC.Prim.int2Word# dt4)
                                  (GHC.Prim.int2Word# dt2)
                                  GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                           case GHC.Prim.narrow32Int# ds3 of wild3 {
                             DEFAULT -> fail GHC.Prim.void#
                             0#
                             -> case ds1 of wild4 {
                                  [] -> fail GHC.Prim.void#
                                  : ds5 ds6
                                  -> case ds5
                                            `cast`
                                          (Language.PureScript.Names.N:ProperName[0]
                                               <'Language.PureScript.Names.Namespace>_P) of wild6 { Data.Text.Internal.Text dt7 dt8 dt9 ->
                                     case Language.PureScript.Constants.$bPrimRowList3 of wild7 { Data.Text.Internal.Text dt10 dt11 dt12 ->
                                     case GHC.Prim.==# dt9 dt12 of lwild1 {
                                       DEFAULT -> fail GHC.Prim.void#
                                       1#
                                       -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                                         -> GHC.Prim.Word#
                                                                         -> GHC.Prim.ByteArray#
                                                                         -> GHC.Prim.Word#
                                                                         -> GHC.Prim.Word#
                                                                         -> GHC.Prim.State#
                                                                              GHC.Prim.RealWorld
                                                                         -> (# GHC.Prim.State#
                                                                                 GHC.Prim.RealWorld,
                                                                               GHC.Prim.Int# #)}
                                                 dt7
                                                 (GHC.Prim.int2Word# dt8)
                                                 dt10
                                                 (GHC.Prim.int2Word# dt11)
                                                 (GHC.Prim.int2Word# dt9)
                                                 GHC.Prim.realWorld# of wild8 { (#,#) ds7 ds8 ->
                                          case GHC.Prim.narrow32Int# ds8 of wild9 {
                                            DEFAULT -> fail GHC.Prim.void#
                                            0#
                                            -> case ds6 of wild10 {
                                                 [] -> cont GHC.Prim.void#
                                                 : ipv ipv1
                                                 -> fail
                                                      GHC.Prim.void# } } } } } } } } } } } } }) -}
6e17714c0e25b4c91277248a1efa5920
  $mPrimSymbol ::
    forall (rep :: GHC.Types.RuntimeRep) (r :: TYPE rep).
    Language.PureScript.Names.ModuleName
    -> (GHC.Prim.Void# -> r) -> (GHC.Prim.Void# -> r) -> r
  {- Arity: 3, Strictness: <S,1*U><L,1*C1(U)><L,1*C1(U)>,
     Unfolding: (\ @ rep :: GHC.Types.RuntimeRep
                   @ r :: TYPE rep
                   (scrut :: Language.PureScript.Names.ModuleName)
                   (cont :: GHC.Prim.Void# -> r)
                   (fail :: GHC.Prim.Void# -> r) ->
                 case scrut
                        `cast`
                      (Language.PureScript.Names.N:ModuleName[0]) of wild {
                   [] -> fail GHC.Prim.void#
                   : ds ds1
                   -> case ds
                             `cast`
                           (Language.PureScript.Names.N:ProperName[0]
                                <'Language.PureScript.Names.Namespace>_P) of wild1 { Data.Text.Internal.Text dt dt1 dt2 ->
                      case Language.PureScript.Constants.$bFail8 of wild2 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                      case GHC.Prim.==# dt2 dt5 of lwild {
                        DEFAULT -> fail GHC.Prim.void#
                        1#
                        -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                          -> GHC.Prim.Word#
                                                          -> GHC.Prim.ByteArray#
                                                          -> GHC.Prim.Word#
                                                          -> GHC.Prim.Word#
                                                          -> GHC.Prim.State# GHC.Prim.RealWorld
                                                          -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                GHC.Prim.Int# #)}
                                  dt
                                  (GHC.Prim.int2Word# dt1)
                                  dt3
                                  (GHC.Prim.int2Word# dt4)
                                  (GHC.Prim.int2Word# dt2)
                                  GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                           case GHC.Prim.narrow32Int# ds3 of wild3 {
                             DEFAULT -> fail GHC.Prim.void#
                             0#
                             -> case ds1 of wild4 {
                                  [] -> fail GHC.Prim.void#
                                  : ds5 ds6
                                  -> case ds5
                                            `cast`
                                          (Language.PureScript.Names.N:ProperName[0]
                                               <'Language.PureScript.Names.Namespace>_P) of wild6 { Data.Text.Internal.Text dt7 dt8 dt9 ->
                                     case Language.PureScript.Constants.$bDataSymbol3 of wild7 { Data.Text.Internal.Text dt10 dt11 dt12 ->
                                     case GHC.Prim.==# dt9 dt12 of lwild1 {
                                       DEFAULT -> fail GHC.Prim.void#
                                       1#
                                       -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                                         -> GHC.Prim.Word#
                                                                         -> GHC.Prim.ByteArray#
                                                                         -> GHC.Prim.Word#
                                                                         -> GHC.Prim.Word#
                                                                         -> GHC.Prim.State#
                                                                              GHC.Prim.RealWorld
                                                                         -> (# GHC.Prim.State#
                                                                                 GHC.Prim.RealWorld,
                                                                               GHC.Prim.Int# #)}
                                                 dt7
                                                 (GHC.Prim.int2Word# dt8)
                                                 dt10
                                                 (GHC.Prim.int2Word# dt11)
                                                 (GHC.Prim.int2Word# dt9)
                                                 GHC.Prim.realWorld# of wild8 { (#,#) ds7 ds8 ->
                                          case GHC.Prim.narrow32Int# ds8 of wild9 {
                                            DEFAULT -> fail GHC.Prim.void#
                                            0#
                                            -> case ds6 of wild10 {
                                                 [] -> cont GHC.Prim.void#
                                                 : ipv ipv1
                                                 -> fail
                                                      GHC.Prim.void# } } } } } } } } } } } } }) -}
283cf9910dd5a20681c1306f725b110e
  $mPrimTypeError ::
    forall (rep :: GHC.Types.RuntimeRep) (r :: TYPE rep).
    Language.PureScript.Names.ModuleName
    -> (GHC.Prim.Void# -> r) -> (GHC.Prim.Void# -> r) -> r
  {- Arity: 3, Strictness: <S,1*U><L,1*C1(U)><L,1*C1(U)>,
     Unfolding: (\ @ rep :: GHC.Types.RuntimeRep
                   @ r :: TYPE rep
                   (scrut :: Language.PureScript.Names.ModuleName)
                   (cont :: GHC.Prim.Void# -> r)
                   (fail :: GHC.Prim.Void# -> r) ->
                 case scrut
                        `cast`
                      (Language.PureScript.Names.N:ModuleName[0]) of wild {
                   [] -> fail GHC.Prim.void#
                   : ds ds1
                   -> case ds
                             `cast`
                           (Language.PureScript.Names.N:ProperName[0]
                                <'Language.PureScript.Names.Namespace>_P) of wild1 { Data.Text.Internal.Text dt dt1 dt2 ->
                      case Language.PureScript.Constants.$bFail8 of wild2 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                      case GHC.Prim.==# dt2 dt5 of lwild {
                        DEFAULT -> fail GHC.Prim.void#
                        1#
                        -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                          -> GHC.Prim.Word#
                                                          -> GHC.Prim.ByteArray#
                                                          -> GHC.Prim.Word#
                                                          -> GHC.Prim.Word#
                                                          -> GHC.Prim.State# GHC.Prim.RealWorld
                                                          -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                GHC.Prim.Int# #)}
                                  dt
                                  (GHC.Prim.int2Word# dt1)
                                  dt3
                                  (GHC.Prim.int2Word# dt4)
                                  (GHC.Prim.int2Word# dt2)
                                  GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                           case GHC.Prim.narrow32Int# ds3 of wild3 {
                             DEFAULT -> fail GHC.Prim.void#
                             0#
                             -> case ds1 of wild4 {
                                  [] -> fail GHC.Prim.void#
                                  : ds5 ds6
                                  -> case ds5
                                            `cast`
                                          (Language.PureScript.Names.N:ProperName[0]
                                               <'Language.PureScript.Names.Namespace>_P) of wild6 { Data.Text.Internal.Text dt7 dt8 dt9 ->
                                     case Language.PureScript.Constants.$bFail6 of wild7 { Data.Text.Internal.Text dt10 dt11 dt12 ->
                                     case GHC.Prim.==# dt9 dt12 of lwild1 {
                                       DEFAULT -> fail GHC.Prim.void#
                                       1#
                                       -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                                         -> GHC.Prim.Word#
                                                                         -> GHC.Prim.ByteArray#
                                                                         -> GHC.Prim.Word#
                                                                         -> GHC.Prim.Word#
                                                                         -> GHC.Prim.State#
                                                                              GHC.Prim.RealWorld
                                                                         -> (# GHC.Prim.State#
                                                                                 GHC.Prim.RealWorld,
                                                                               GHC.Prim.Int# #)}
                                                 dt7
                                                 (GHC.Prim.int2Word# dt8)
                                                 dt10
                                                 (GHC.Prim.int2Word# dt11)
                                                 (GHC.Prim.int2Word# dt9)
                                                 GHC.Prim.realWorld# of wild8 { (#,#) ds7 ds8 ->
                                          case GHC.Prim.narrow32Int# ds8 of wild9 {
                                            DEFAULT -> fail GHC.Prim.void#
                                            0#
                                            -> case ds6 of wild10 {
                                                 [] -> cont GHC.Prim.void#
                                                 : ipv ipv1
                                                 -> fail
                                                      GHC.Prim.void# } } } } } } } } } } } } }) -}
d76278c056dbc7491bde9299fee2f0c9
  $mRecord ::
    forall (rep :: GHC.Types.RuntimeRep) (r :: TYPE rep).
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName)
    -> (GHC.Prim.Void# -> r) -> (GHC.Prim.Void# -> r) -> r
  {- Arity: 3,
     Strictness: <S(SL),1*U(1*U,1*U(U,U,U))><L,1*C1(U)><L,1*C1(U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ rep :: GHC.Types.RuntimeRep
                   @ r :: TYPE rep
                   (w :: Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.TypeName))
                   (w1 :: GHC.Prim.Void# -> r)
                   (w2 :: GHC.Prim.Void# -> r) ->
                 case w of ww { Language.PureScript.Names.Qualified ww1 ww2 ->
                 Language.PureScript.Constants.$w$mRecord
                   @ rep
                   @ r
                   ww1
                   ww2
                   w1
                   w2 }) -}
6b082929a466b2765a6d51709819cdca
  $mRowCons ::
    forall (rep :: GHC.Types.RuntimeRep) (r :: TYPE rep).
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
    -> (GHC.Prim.Void# -> r) -> (GHC.Prim.Void# -> r) -> r
  {- Arity: 3,
     Strictness: <S(SL),1*U(1*U,1*U(U,U,U))><L,1*C1(U)><L,C(U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ rep :: GHC.Types.RuntimeRep
                   @ r :: TYPE rep
                   (w :: Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ClassName))
                   (w1 :: GHC.Prim.Void# -> r)
                   (w2 :: GHC.Prim.Void# -> r) ->
                 case w of ww { Language.PureScript.Names.Qualified ww1 ww2 ->
                 Language.PureScript.Constants.$w$mRowCons
                   @ rep
                   @ r
                   ww1
                   ww2
                   w1
                   w2 }) -}
44310ad43fa88844c1f6258e694b20d7
  $mRowLacks ::
    forall (rep :: GHC.Types.RuntimeRep) (r :: TYPE rep).
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
    -> (GHC.Prim.Void# -> r) -> (GHC.Prim.Void# -> r) -> r
  {- Arity: 3,
     Strictness: <S(SL),1*U(1*U,1*U(U,U,U))><L,1*C1(U)><L,C(U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ rep :: GHC.Types.RuntimeRep
                   @ r :: TYPE rep
                   (w :: Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ClassName))
                   (w1 :: GHC.Prim.Void# -> r)
                   (w2 :: GHC.Prim.Void# -> r) ->
                 case w of ww { Language.PureScript.Names.Qualified ww1 ww2 ->
                 Language.PureScript.Constants.$w$mRowLacks
                   @ rep
                   @ r
                   ww1
                   ww2
                   w1
                   w2 }) -}
34f56cd5c2d7494e9647080db2a422fc
  $mRowListCons ::
    forall (rep :: GHC.Types.RuntimeRep) (r :: TYPE rep).
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName)
    -> (GHC.Prim.Void# -> r) -> (GHC.Prim.Void# -> r) -> r
  {- Arity: 3,
     Strictness: <S(SL),1*U(1*U,1*U(U,U,U))><L,1*C1(U)><L,C(U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ rep :: GHC.Types.RuntimeRep
                   @ r :: TYPE rep
                   (w :: Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.TypeName))
                   (w1 :: GHC.Prim.Void# -> r)
                   (w2 :: GHC.Prim.Void# -> r) ->
                 case w of ww { Language.PureScript.Names.Qualified ww1 ww2 ->
                 Language.PureScript.Constants.$w$mRowListCons
                   @ rep
                   @ r
                   ww1
                   ww2
                   w1
                   w2 }) -}
c498d11aebe11ea5bd253b456c104cae
  $mRowListNil ::
    forall (rep :: GHC.Types.RuntimeRep) (r :: TYPE rep).
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName)
    -> (GHC.Prim.Void# -> r) -> (GHC.Prim.Void# -> r) -> r
  {- Arity: 3,
     Strictness: <S(SL),1*U(1*U,1*U(U,U,U))><L,1*C1(U)><L,C(U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ rep :: GHC.Types.RuntimeRep
                   @ r :: TYPE rep
                   (w :: Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.TypeName))
                   (w1 :: GHC.Prim.Void# -> r)
                   (w2 :: GHC.Prim.Void# -> r) ->
                 case w of ww { Language.PureScript.Names.Qualified ww1 ww2 ->
                 Language.PureScript.Constants.$w$mRowListNil
                   @ rep
                   @ r
                   ww1
                   ww2
                   w1
                   w2 }) -}
9779a176413c6a6d9fa6fef77415c01f
  $mRowNub ::
    forall (rep :: GHC.Types.RuntimeRep) (r :: TYPE rep).
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
    -> (GHC.Prim.Void# -> r) -> (GHC.Prim.Void# -> r) -> r
  {- Arity: 3,
     Strictness: <S(SL),1*U(1*U,1*U(U,U,U))><L,1*C1(U)><L,C(U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ rep :: GHC.Types.RuntimeRep
                   @ r :: TYPE rep
                   (w :: Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ClassName))
                   (w1 :: GHC.Prim.Void# -> r)
                   (w2 :: GHC.Prim.Void# -> r) ->
                 case w of ww { Language.PureScript.Names.Qualified ww1 ww2 ->
                 Language.PureScript.Constants.$w$mRowNub
                   @ rep
                   @ r
                   ww1
                   ww2
                   w1
                   w2 }) -}
b86a059b74855b6cc9fcd885380d2900
  $mRowToList ::
    forall (rep :: GHC.Types.RuntimeRep) (r :: TYPE rep).
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
    -> (GHC.Prim.Void# -> r) -> (GHC.Prim.Void# -> r) -> r
  {- Arity: 3,
     Strictness: <S(SL),1*U(1*U,1*U(U,U,U))><L,1*C1(U)><L,C(U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ rep :: GHC.Types.RuntimeRep
                   @ r :: TYPE rep
                   (w :: Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ClassName))
                   (w1 :: GHC.Prim.Void# -> r)
                   (w2 :: GHC.Prim.Void# -> r) ->
                 case w of ww { Language.PureScript.Names.Qualified ww1 ww2 ->
                 Language.PureScript.Constants.$w$mRowToList
                   @ rep
                   @ r
                   ww1
                   ww2
                   w1
                   w2 }) -}
444ff511e7cc4eee365849cd10e512c8
  $mRowUnion ::
    forall (rep :: GHC.Types.RuntimeRep) (r :: TYPE rep).
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
    -> (GHC.Prim.Void# -> r) -> (GHC.Prim.Void# -> r) -> r
  {- Arity: 3,
     Strictness: <S(SL),1*U(1*U,1*U(U,U,U))><L,1*C1(U)><L,C(U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ rep :: GHC.Types.RuntimeRep
                   @ r :: TYPE rep
                   (w :: Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ClassName))
                   (w1 :: GHC.Prim.Void# -> r)
                   (w2 :: GHC.Prim.Void# -> r) ->
                 case w of ww { Language.PureScript.Names.Qualified ww1 ww2 ->
                 Language.PureScript.Constants.$w$mRowUnion
                   @ rep
                   @ r
                   ww1
                   ww2
                   w1
                   w2 }) -}
655e5b95eb188c39d29d15c051589122
  $mSymbolAppend ::
    forall (rep :: GHC.Types.RuntimeRep) (r :: TYPE rep).
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
    -> (GHC.Prim.Void# -> r) -> (GHC.Prim.Void# -> r) -> r
  {- Arity: 3,
     Strictness: <S(SL),1*U(1*U,1*U(U,U,U))><L,1*C1(U)><L,C(U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ rep :: GHC.Types.RuntimeRep
                   @ r :: TYPE rep
                   (w :: Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ClassName))
                   (w1 :: GHC.Prim.Void# -> r)
                   (w2 :: GHC.Prim.Void# -> r) ->
                 case w of ww { Language.PureScript.Names.Qualified ww1 ww2 ->
                 Language.PureScript.Constants.$w$mSymbolAppend
                   @ rep
                   @ r
                   ww1
                   ww2
                   w1
                   w2 }) -}
a38044c3fd1a25d6d52bfc0277f4b0d7
  $mSymbolCompare ::
    forall (rep :: GHC.Types.RuntimeRep) (r :: TYPE rep).
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
    -> (GHC.Prim.Void# -> r) -> (GHC.Prim.Void# -> r) -> r
  {- Arity: 3,
     Strictness: <S(SL),1*U(1*U,1*U(U,U,U))><L,1*C1(U)><L,C(U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ rep :: GHC.Types.RuntimeRep
                   @ r :: TYPE rep
                   (w :: Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ClassName))
                   (w1 :: GHC.Prim.Void# -> r)
                   (w2 :: GHC.Prim.Void# -> r) ->
                 case w of ww { Language.PureScript.Names.Qualified ww1 ww2 ->
                 Language.PureScript.Constants.$w$mSymbolCompare
                   @ rep
                   @ r
                   ww1
                   ww2
                   w1
                   w2 }) -}
aba121c4fa5600d2ee607a83692072a7
  $mSymbolCons ::
    forall (rep :: GHC.Types.RuntimeRep) (r :: TYPE rep).
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
    -> (GHC.Prim.Void# -> r) -> (GHC.Prim.Void# -> r) -> r
  {- Arity: 3,
     Strictness: <S(SL),1*U(1*U,1*U(U,U,U))><L,1*C1(U)><L,C(U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ rep :: GHC.Types.RuntimeRep
                   @ r :: TYPE rep
                   (w :: Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ClassName))
                   (w1 :: GHC.Prim.Void# -> r)
                   (w2 :: GHC.Prim.Void# -> r) ->
                 case w of ww { Language.PureScript.Names.Qualified ww1 ww2 ->
                 Language.PureScript.Constants.$w$mSymbolCons
                   @ rep
                   @ r
                   ww1
                   ww2
                   w1
                   w2 }) -}
11bedd332082756f42d52e8e8c5e46c7
  $mWarn ::
    forall (rep :: GHC.Types.RuntimeRep) (r :: TYPE rep).
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
    -> (GHC.Prim.Void# -> r) -> (GHC.Prim.Void# -> r) -> r
  {- Arity: 3,
     Strictness: <S(SL),1*U(1*U,1*U(U,U,U))><L,1*C1(U)><L,C(U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ rep :: GHC.Types.RuntimeRep
                   @ r :: TYPE rep
                   (w :: Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ClassName))
                   (w1 :: GHC.Prim.Void# -> r)
                   (w2 :: GHC.Prim.Void# -> r) ->
                 case w of ww { Language.PureScript.Names.Qualified ww1 ww2 ->
                 Language.PureScript.Constants.$w$mWarn
                   @ rep
                   @ r
                   ww1
                   ww2
                   w1
                   w2 }) -}
771558d22421d939b7477da345008368
  $tc'EffectDictionaries :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10660716590173082787##
                   10752162096327481447##
                   Language.PureScript.Constants.$trModule
                   Language.PureScript.Constants.$tc'EffectDictionaries2
                   0#
                   Language.PureScript.Constants.$tc'EffectDictionaries1) -}
8234130ffea36276813d14cdcec6ca71
  $tc'EffectDictionaries1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
7981bcd451355e1c90f41a6964b91d3e
  $tc'EffectDictionaries2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Constants.$tc'EffectDictionaries3) -}
03b85a6750943ccc8425dab43798225a
  $tc'EffectDictionaries3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'EffectDictionaries"#) -}
0458cb4f49a08521887939c172b19c54
  $tcEffectDictionaries :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9675003778291161857##
                   6831046719307323232##
                   Language.PureScript.Constants.$trModule
                   Language.PureScript.Constants.$tcEffectDictionaries1
                   0#
                   GHC.Types.krep$*) -}
41c330d4fbd061b02264eb48c2f9ab8f
  $tcEffectDictionaries1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Constants.$tcEffectDictionaries2) -}
aa4335b394e35a9dad9a03b36c035565
  $tcEffectDictionaries2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("EffectDictionaries"#) -}
978f01cf2ffed5359f44d12bdc1fab72
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Language.PureScript.Constants.$trModule3
                   Language.PureScript.Constants.$trModule1) -}
bb73410866dc1dedc43e30ab1a4e6e1e
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Constants.$trModule2) -}
1bc4407cdf19f5362264f03d0e93c8b2
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Language.PureScript.Constants"#) -}
330fc8dd236a4f906620fdd610d334dd
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Constants.$trModule4) -}
526c283469a375a4928f2138bea6d550
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"#) -}
bbe16ce231bba1ef9c5ed2cbf0afbe70
  $w$mDiscard ::
    forall (rep :: GHC.Types.RuntimeRep) (r :: TYPE rep).
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> (GHC.Prim.Void# -> r)
    -> (GHC.Prim.Void# -> r)
    -> r
  {- Arity: 4, Strictness: <S,1*U><L,1*U(U,U,U)><L,1*C1(U)><L,C(U)>,
     Inline: [0],
     Unfolding: (\ @ rep :: GHC.Types.RuntimeRep
                   @ r :: TYPE rep
                   (ww :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww1 :: Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ClassName)
                   (w :: GHC.Prim.Void# -> r)
                   (w1 :: GHC.Prim.Void# -> r) ->
                 case ww of wild {
                   GHC.Base.Nothing -> w1 GHC.Prim.void#
                   GHC.Base.Just ds
                   -> Language.PureScript.Constants.$mControlBind
                        @ rep
                        @ r
                        ds
                        (\ (void :: GHC.Prim.Void#)[OneShot] ->
                         case ww1
                                `cast`
                              (Language.PureScript.Names.N:ProperName[0]
                                   <'Language.PureScript.Names.ClassName>_P) of wild1 { Data.Text.Internal.Text dt dt1 dt2 ->
                         case Language.PureScript.Constants.$bDiscard1 of wild2 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                         case GHC.Prim.==# dt2 dt5 of lwild {
                           DEFAULT -> w1 GHC.Prim.void#
                           1#
                           -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.ByteArray#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.State# GHC.Prim.RealWorld
                                                             -> (# GHC.Prim.State#
                                                                     GHC.Prim.RealWorld,
                                                                   GHC.Prim.Int# #)}
                                     dt
                                     (GHC.Prim.int2Word# dt1)
                                     dt3
                                     (GHC.Prim.int2Word# dt4)
                                     (GHC.Prim.int2Word# dt2)
                                     GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                              case GHC.Prim.narrow32Int# ds3 of wild3 {
                                DEFAULT -> w1 GHC.Prim.void# 0# -> w GHC.Prim.void# } } } } })
                        (\ (void :: GHC.Prim.Void#)[OneShot] -> w1 GHC.Prim.void#) }) -}
8e44db4cdb3298021522f25c30cb91f6
  $w$mFail ::
    forall (rep :: GHC.Types.RuntimeRep) (r :: TYPE rep).
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> (GHC.Prim.Void# -> r)
    -> (GHC.Prim.Void# -> r)
    -> r
  {- Arity: 4, Strictness: <S,1*U><L,1*U(U,U,U)><L,1*C1(U)><L,C(U)>,
     Inline: [0],
     Unfolding: (\ @ rep :: GHC.Types.RuntimeRep
                   @ r :: TYPE rep
                   (ww :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww1 :: Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ClassName)
                   (w :: GHC.Prim.Void# -> r)
                   (w1 :: GHC.Prim.Void# -> r) ->
                 case ww of wild {
                   GHC.Base.Nothing -> w1 GHC.Prim.void#
                   GHC.Base.Just ds
                   -> Language.PureScript.Constants.$mPrimTypeError
                        @ rep
                        @ r
                        ds
                        (\ (void :: GHC.Prim.Void#)[OneShot] ->
                         case ww1
                                `cast`
                              (Language.PureScript.Names.N:ProperName[0]
                                   <'Language.PureScript.Names.ClassName>_P) of wild1 { Data.Text.Internal.Text dt dt1 dt2 ->
                         case Language.PureScript.Constants.$bFail1 of wild2 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                         case GHC.Prim.==# dt2 dt5 of lwild {
                           DEFAULT -> w1 GHC.Prim.void#
                           1#
                           -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.ByteArray#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.State# GHC.Prim.RealWorld
                                                             -> (# GHC.Prim.State#
                                                                     GHC.Prim.RealWorld,
                                                                   GHC.Prim.Int# #)}
                                     dt
                                     (GHC.Prim.int2Word# dt1)
                                     dt3
                                     (GHC.Prim.int2Word# dt4)
                                     (GHC.Prim.int2Word# dt2)
                                     GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                              case GHC.Prim.narrow32Int# ds3 of wild3 {
                                DEFAULT -> w1 GHC.Prim.void# 0# -> w GHC.Prim.void# } } } } })
                        (\ (void :: GHC.Prim.Void#)[OneShot] -> w1 GHC.Prim.void#) }) -}
b4f34a8164b0fe261877cd27e65e2e1c
  $w$mIsSymbol ::
    forall (rep :: GHC.Types.RuntimeRep) (r :: TYPE rep).
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> (GHC.Prim.Void# -> r)
    -> (GHC.Prim.Void# -> r)
    -> r
  {- Arity: 4, Strictness: <S,1*U><L,1*U(U,U,U)><L,1*C1(U)><L,C(U)>,
     Inline: [0],
     Unfolding: (\ @ rep :: GHC.Types.RuntimeRep
                   @ r :: TYPE rep
                   (ww :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww1 :: Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ClassName)
                   (w :: GHC.Prim.Void# -> r)
                   (w1 :: GHC.Prim.Void# -> r) ->
                 case ww of wild {
                   GHC.Base.Nothing -> w1 GHC.Prim.void#
                   GHC.Base.Just ds
                   -> Language.PureScript.Constants.$mDataSymbol
                        @ rep
                        @ r
                        ds
                        (\ (void :: GHC.Prim.Void#)[OneShot] ->
                         case ww1
                                `cast`
                              (Language.PureScript.Names.N:ProperName[0]
                                   <'Language.PureScript.Names.ClassName>_P) of wild1 { Data.Text.Internal.Text dt dt1 dt2 ->
                         case Language.PureScript.Constants.$bIsSymbol1 of wild2 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                         case GHC.Prim.==# dt2 dt5 of lwild {
                           DEFAULT -> w1 GHC.Prim.void#
                           1#
                           -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.ByteArray#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.State# GHC.Prim.RealWorld
                                                             -> (# GHC.Prim.State#
                                                                     GHC.Prim.RealWorld,
                                                                   GHC.Prim.Int# #)}
                                     dt
                                     (GHC.Prim.int2Word# dt1)
                                     dt3
                                     (GHC.Prim.int2Word# dt4)
                                     (GHC.Prim.int2Word# dt2)
                                     GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                              case GHC.Prim.narrow32Int# ds3 of wild3 {
                                DEFAULT -> w1 GHC.Prim.void# 0# -> w GHC.Prim.void# } } } } })
                        (\ (void :: GHC.Prim.Void#)[OneShot] -> w1 GHC.Prim.void#) }) -}
e4c1e35e8f3de25ac4163318ac6ee675
  $w$mPartial ::
    forall (rep :: GHC.Types.RuntimeRep) (r :: TYPE rep).
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> (GHC.Prim.Void# -> r)
    -> (GHC.Prim.Void# -> r)
    -> r
  {- Arity: 4,
     Strictness: <S,1*U><L,1*U(U,U,U)><L,1*C1(U)><L,1*C1(U)>,
     Inline: [0],
     Unfolding: (\ @ rep :: GHC.Types.RuntimeRep
                   @ r :: TYPE rep
                   (ww :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww1 :: Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ClassName)
                   (w :: GHC.Prim.Void# -> r)
                   (w1 :: GHC.Prim.Void# -> r) ->
                 case ww of wild {
                   GHC.Base.Nothing -> w1 GHC.Prim.void#
                   GHC.Base.Just ds
                   -> case ds
                             `cast`
                           (Language.PureScript.Names.N:ModuleName[0]) of wild1 {
                        [] -> w1 GHC.Prim.void#
                        : ds1 ds2
                        -> case ds1
                                  `cast`
                                (Language.PureScript.Names.N:ProperName[0]
                                     <'Language.PureScript.Names.Namespace>_P) of wild2 { Data.Text.Internal.Text dt dt1 dt2 ->
                           case Language.PureScript.Constants.$bFail8 of wild3 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                           case GHC.Prim.==# dt2 dt5 of lwild {
                             DEFAULT -> w1 GHC.Prim.void#
                             1#
                             -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.ByteArray#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.State# GHC.Prim.RealWorld
                                                               -> (# GHC.Prim.State#
                                                                       GHC.Prim.RealWorld,
                                                                     GHC.Prim.Int# #)}
                                       dt
                                       (GHC.Prim.int2Word# dt1)
                                       dt3
                                       (GHC.Prim.int2Word# dt4)
                                       (GHC.Prim.int2Word# dt2)
                                       GHC.Prim.realWorld# of wild5 { (#,#) ds3 ds4 ->
                                case GHC.Prim.narrow32Int# ds4 of wild4 {
                                  DEFAULT -> w1 GHC.Prim.void#
                                  0#
                                  -> case ds2 of wild6 {
                                       []
                                       -> case ww1
                                                 `cast`
                                               (Language.PureScript.Names.N:ProperName[0]
                                                    <'Language.PureScript.Names.ClassName>_P) of wild7 { Data.Text.Internal.Text dt7 dt8 dt9 ->
                                          case Language.PureScript.Constants.$bPartial1 of wild8 { Data.Text.Internal.Text dt10 dt11 dt12 ->
                                          case GHC.Prim.==# dt9 dt12 of lwild1 {
                                            DEFAULT -> w1 GHC.Prim.void#
                                            1#
                                            -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                                              -> GHC.Prim.Word#
                                                                              -> GHC.Prim.ByteArray#
                                                                              -> GHC.Prim.Word#
                                                                              -> GHC.Prim.Word#
                                                                              -> GHC.Prim.State#
                                                                                   GHC.Prim.RealWorld
                                                                              -> (# GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld,
                                                                                    GHC.Prim.Int# #)}
                                                      dt7
                                                      (GHC.Prim.int2Word# dt8)
                                                      dt10
                                                      (GHC.Prim.int2Word# dt11)
                                                      (GHC.Prim.int2Word# dt9)
                                                      GHC.Prim.realWorld# of wild9 { (#,#) ds5 ds6 ->
                                               case GHC.Prim.narrow32Int# ds6 of wild10 {
                                                 DEFAULT -> w1 GHC.Prim.void#
                                                 0# -> w GHC.Prim.void# } } } } }
                                       : ipv ipv1 -> w1 GHC.Prim.void# } } } } } } } }) -}
d97d8d4461d1d6675801635818536034
  $w$mRecord ::
    forall (rep :: GHC.Types.RuntimeRep) (r :: TYPE rep).
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName
    -> (GHC.Prim.Void# -> r)
    -> (GHC.Prim.Void# -> r)
    -> r
  {- Arity: 4,
     Strictness: <S,1*U><L,1*U(U,U,U)><L,1*C1(U)><L,1*C1(U)>,
     Inline: [0],
     Unfolding: (\ @ rep :: GHC.Types.RuntimeRep
                   @ r :: TYPE rep
                   (ww :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww1 :: Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.TypeName)
                   (w :: GHC.Prim.Void# -> r)
                   (w1 :: GHC.Prim.Void# -> r) ->
                 case ww of wild {
                   GHC.Base.Nothing -> w1 GHC.Prim.void#
                   GHC.Base.Just ds
                   -> case ds
                             `cast`
                           (Language.PureScript.Names.N:ModuleName[0]) of wild1 {
                        [] -> w1 GHC.Prim.void#
                        : ds1 ds2
                        -> case ds1
                                  `cast`
                                (Language.PureScript.Names.N:ProperName[0]
                                     <'Language.PureScript.Names.Namespace>_P) of wild2 { Data.Text.Internal.Text dt dt1 dt2 ->
                           case Language.PureScript.Constants.$bFail8 of wild3 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                           case GHC.Prim.==# dt2 dt5 of lwild {
                             DEFAULT -> w1 GHC.Prim.void#
                             1#
                             -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.ByteArray#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.State# GHC.Prim.RealWorld
                                                               -> (# GHC.Prim.State#
                                                                       GHC.Prim.RealWorld,
                                                                     GHC.Prim.Int# #)}
                                       dt
                                       (GHC.Prim.int2Word# dt1)
                                       dt3
                                       (GHC.Prim.int2Word# dt4)
                                       (GHC.Prim.int2Word# dt2)
                                       GHC.Prim.realWorld# of wild5 { (#,#) ds3 ds4 ->
                                case GHC.Prim.narrow32Int# ds4 of wild4 {
                                  DEFAULT -> w1 GHC.Prim.void#
                                  0#
                                  -> case ds2 of wild6 {
                                       []
                                       -> case ww1
                                                 `cast`
                                               (Language.PureScript.Names.N:ProperName[0]
                                                    <'Language.PureScript.Names.TypeName>_P) of wild7 { Data.Text.Internal.Text dt7 dt8 dt9 ->
                                          case Language.PureScript.Constants.$bRecord1 of wild8 { Data.Text.Internal.Text dt10 dt11 dt12 ->
                                          case GHC.Prim.==# dt9 dt12 of lwild1 {
                                            DEFAULT -> w1 GHC.Prim.void#
                                            1#
                                            -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                                              -> GHC.Prim.Word#
                                                                              -> GHC.Prim.ByteArray#
                                                                              -> GHC.Prim.Word#
                                                                              -> GHC.Prim.Word#
                                                                              -> GHC.Prim.State#
                                                                                   GHC.Prim.RealWorld
                                                                              -> (# GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld,
                                                                                    GHC.Prim.Int# #)}
                                                      dt7
                                                      (GHC.Prim.int2Word# dt8)
                                                      dt10
                                                      (GHC.Prim.int2Word# dt11)
                                                      (GHC.Prim.int2Word# dt9)
                                                      GHC.Prim.realWorld# of wild9 { (#,#) ds5 ds6 ->
                                               case GHC.Prim.narrow32Int# ds6 of wild10 {
                                                 DEFAULT -> w1 GHC.Prim.void#
                                                 0# -> w GHC.Prim.void# } } } } }
                                       : ipv ipv1 -> w1 GHC.Prim.void# } } } } } } } }) -}
4c5aa03fc436623f04cde601dc37ee62
  $w$mRowCons ::
    forall (rep :: GHC.Types.RuntimeRep) (r :: TYPE rep).
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> (GHC.Prim.Void# -> r)
    -> (GHC.Prim.Void# -> r)
    -> r
  {- Arity: 4, Strictness: <S,1*U><L,1*U(U,U,U)><L,1*C1(U)><L,C(U)>,
     Inline: [0],
     Unfolding: (\ @ rep :: GHC.Types.RuntimeRep
                   @ r :: TYPE rep
                   (ww :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww1 :: Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ClassName)
                   (w :: GHC.Prim.Void# -> r)
                   (w1 :: GHC.Prim.Void# -> r) ->
                 case ww of wild {
                   GHC.Base.Nothing -> w1 GHC.Prim.void#
                   GHC.Base.Just ds
                   -> Language.PureScript.Constants.$mPrimRow
                        @ rep
                        @ r
                        ds
                        (\ (void :: GHC.Prim.Void#)[OneShot] ->
                         case ww1
                                `cast`
                              (Language.PureScript.Names.N:ProperName[0]
                                   <'Language.PureScript.Names.ClassName>_P) of wild1 { Data.Text.Internal.Text dt dt1 dt2 ->
                         case Language.PureScript.Constants.$bRowCons1 of wild2 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                         case GHC.Prim.==# dt2 dt5 of lwild {
                           DEFAULT -> w1 GHC.Prim.void#
                           1#
                           -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.ByteArray#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.State# GHC.Prim.RealWorld
                                                             -> (# GHC.Prim.State#
                                                                     GHC.Prim.RealWorld,
                                                                   GHC.Prim.Int# #)}
                                     dt
                                     (GHC.Prim.int2Word# dt1)
                                     dt3
                                     (GHC.Prim.int2Word# dt4)
                                     (GHC.Prim.int2Word# dt2)
                                     GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                              case GHC.Prim.narrow32Int# ds3 of wild3 {
                                DEFAULT -> w1 GHC.Prim.void# 0# -> w GHC.Prim.void# } } } } })
                        (\ (void :: GHC.Prim.Void#)[OneShot] -> w1 GHC.Prim.void#) }) -}
6c9e8ea4f836017cd96d21b02b8108fc
  $w$mRowLacks ::
    forall (rep :: GHC.Types.RuntimeRep) (r :: TYPE rep).
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> (GHC.Prim.Void# -> r)
    -> (GHC.Prim.Void# -> r)
    -> r
  {- Arity: 4, Strictness: <S,1*U><L,1*U(U,U,U)><L,1*C1(U)><L,C(U)>,
     Inline: [0],
     Unfolding: (\ @ rep :: GHC.Types.RuntimeRep
                   @ r :: TYPE rep
                   (ww :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww1 :: Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ClassName)
                   (w :: GHC.Prim.Void# -> r)
                   (w1 :: GHC.Prim.Void# -> r) ->
                 case ww of wild {
                   GHC.Base.Nothing -> w1 GHC.Prim.void#
                   GHC.Base.Just ds
                   -> Language.PureScript.Constants.$mPrimRow
                        @ rep
                        @ r
                        ds
                        (\ (void :: GHC.Prim.Void#)[OneShot] ->
                         case ww1
                                `cast`
                              (Language.PureScript.Names.N:ProperName[0]
                                   <'Language.PureScript.Names.ClassName>_P) of wild1 { Data.Text.Internal.Text dt dt1 dt2 ->
                         case Language.PureScript.Constants.$bRowLacks1 of wild2 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                         case GHC.Prim.==# dt2 dt5 of lwild {
                           DEFAULT -> w1 GHC.Prim.void#
                           1#
                           -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.ByteArray#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.State# GHC.Prim.RealWorld
                                                             -> (# GHC.Prim.State#
                                                                     GHC.Prim.RealWorld,
                                                                   GHC.Prim.Int# #)}
                                     dt
                                     (GHC.Prim.int2Word# dt1)
                                     dt3
                                     (GHC.Prim.int2Word# dt4)
                                     (GHC.Prim.int2Word# dt2)
                                     GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                              case GHC.Prim.narrow32Int# ds3 of wild3 {
                                DEFAULT -> w1 GHC.Prim.void# 0# -> w GHC.Prim.void# } } } } })
                        (\ (void :: GHC.Prim.Void#)[OneShot] -> w1 GHC.Prim.void#) }) -}
0ac24c9ed3d72fe7e6e1c94469a110d9
  $w$mRowListCons ::
    forall (rep :: GHC.Types.RuntimeRep) (r :: TYPE rep).
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName
    -> (GHC.Prim.Void# -> r)
    -> (GHC.Prim.Void# -> r)
    -> r
  {- Arity: 4, Strictness: <S,1*U><L,1*U(U,U,U)><L,1*C1(U)><L,C(U)>,
     Inline: [0],
     Unfolding: (\ @ rep :: GHC.Types.RuntimeRep
                   @ r :: TYPE rep
                   (ww :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww1 :: Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.TypeName)
                   (w :: GHC.Prim.Void# -> r)
                   (w1 :: GHC.Prim.Void# -> r) ->
                 case ww of wild {
                   GHC.Base.Nothing -> w1 GHC.Prim.void#
                   GHC.Base.Just ds
                   -> Language.PureScript.Constants.$mPrimRowList
                        @ rep
                        @ r
                        ds
                        (\ (void :: GHC.Prim.Void#)[OneShot] ->
                         case ww1
                                `cast`
                              (Language.PureScript.Names.N:ProperName[0]
                                   <'Language.PureScript.Names.TypeName>_P) of wild1 { Data.Text.Internal.Text dt dt1 dt2 ->
                         case Language.PureScript.Constants.$bRowCons1 of wild2 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                         case GHC.Prim.==# dt2 dt5 of lwild {
                           DEFAULT -> w1 GHC.Prim.void#
                           1#
                           -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.ByteArray#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.State# GHC.Prim.RealWorld
                                                             -> (# GHC.Prim.State#
                                                                     GHC.Prim.RealWorld,
                                                                   GHC.Prim.Int# #)}
                                     dt
                                     (GHC.Prim.int2Word# dt1)
                                     dt3
                                     (GHC.Prim.int2Word# dt4)
                                     (GHC.Prim.int2Word# dt2)
                                     GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                              case GHC.Prim.narrow32Int# ds3 of wild3 {
                                DEFAULT -> w1 GHC.Prim.void# 0# -> w GHC.Prim.void# } } } } })
                        (\ (void :: GHC.Prim.Void#)[OneShot] -> w1 GHC.Prim.void#) }) -}
0d33bdb245ae36a4ebe82234c3ae8c24
  $w$mRowListNil ::
    forall (rep :: GHC.Types.RuntimeRep) (r :: TYPE rep).
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName
    -> (GHC.Prim.Void# -> r)
    -> (GHC.Prim.Void# -> r)
    -> r
  {- Arity: 4, Strictness: <S,1*U><L,1*U(U,U,U)><L,1*C1(U)><L,C(U)>,
     Inline: [0],
     Unfolding: (\ @ rep :: GHC.Types.RuntimeRep
                   @ r :: TYPE rep
                   (ww :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww1 :: Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.TypeName)
                   (w :: GHC.Prim.Void# -> r)
                   (w1 :: GHC.Prim.Void# -> r) ->
                 case ww of wild {
                   GHC.Base.Nothing -> w1 GHC.Prim.void#
                   GHC.Base.Just ds
                   -> Language.PureScript.Constants.$mPrimRowList
                        @ rep
                        @ r
                        ds
                        (\ (void :: GHC.Prim.Void#)[OneShot] ->
                         case ww1
                                `cast`
                              (Language.PureScript.Names.N:ProperName[0]
                                   <'Language.PureScript.Names.TypeName>_P) of wild1 { Data.Text.Internal.Text dt dt1 dt2 ->
                         case Language.PureScript.Constants.$bRowListNil1 of wild2 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                         case GHC.Prim.==# dt2 dt5 of lwild {
                           DEFAULT -> w1 GHC.Prim.void#
                           1#
                           -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.ByteArray#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.State# GHC.Prim.RealWorld
                                                             -> (# GHC.Prim.State#
                                                                     GHC.Prim.RealWorld,
                                                                   GHC.Prim.Int# #)}
                                     dt
                                     (GHC.Prim.int2Word# dt1)
                                     dt3
                                     (GHC.Prim.int2Word# dt4)
                                     (GHC.Prim.int2Word# dt2)
                                     GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                              case GHC.Prim.narrow32Int# ds3 of wild3 {
                                DEFAULT -> w1 GHC.Prim.void# 0# -> w GHC.Prim.void# } } } } })
                        (\ (void :: GHC.Prim.Void#)[OneShot] -> w1 GHC.Prim.void#) }) -}
45971e2b7f936b20fe0c1657bd61d832
  $w$mRowNub ::
    forall (rep :: GHC.Types.RuntimeRep) (r :: TYPE rep).
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> (GHC.Prim.Void# -> r)
    -> (GHC.Prim.Void# -> r)
    -> r
  {- Arity: 4, Strictness: <S,1*U><L,1*U(U,U,U)><L,1*C1(U)><L,C(U)>,
     Inline: [0],
     Unfolding: (\ @ rep :: GHC.Types.RuntimeRep
                   @ r :: TYPE rep
                   (ww :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww1 :: Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ClassName)
                   (w :: GHC.Prim.Void# -> r)
                   (w1 :: GHC.Prim.Void# -> r) ->
                 case ww of wild {
                   GHC.Base.Nothing -> w1 GHC.Prim.void#
                   GHC.Base.Just ds
                   -> Language.PureScript.Constants.$mPrimRow
                        @ rep
                        @ r
                        ds
                        (\ (void :: GHC.Prim.Void#)[OneShot] ->
                         case ww1
                                `cast`
                              (Language.PureScript.Names.N:ProperName[0]
                                   <'Language.PureScript.Names.ClassName>_P) of wild1 { Data.Text.Internal.Text dt dt1 dt2 ->
                         case Language.PureScript.Constants.$bRowNub1 of wild2 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                         case GHC.Prim.==# dt2 dt5 of lwild {
                           DEFAULT -> w1 GHC.Prim.void#
                           1#
                           -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.ByteArray#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.State# GHC.Prim.RealWorld
                                                             -> (# GHC.Prim.State#
                                                                     GHC.Prim.RealWorld,
                                                                   GHC.Prim.Int# #)}
                                     dt
                                     (GHC.Prim.int2Word# dt1)
                                     dt3
                                     (GHC.Prim.int2Word# dt4)
                                     (GHC.Prim.int2Word# dt2)
                                     GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                              case GHC.Prim.narrow32Int# ds3 of wild3 {
                                DEFAULT -> w1 GHC.Prim.void# 0# -> w GHC.Prim.void# } } } } })
                        (\ (void :: GHC.Prim.Void#)[OneShot] -> w1 GHC.Prim.void#) }) -}
20f50f7a0967de33e55f7457700d9986
  $w$mRowToList ::
    forall (rep :: GHC.Types.RuntimeRep) (r :: TYPE rep).
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> (GHC.Prim.Void# -> r)
    -> (GHC.Prim.Void# -> r)
    -> r
  {- Arity: 4, Strictness: <S,1*U><L,1*U(U,U,U)><L,1*C1(U)><L,C(U)>,
     Inline: [0],
     Unfolding: (\ @ rep :: GHC.Types.RuntimeRep
                   @ r :: TYPE rep
                   (ww :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww1 :: Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ClassName)
                   (w :: GHC.Prim.Void# -> r)
                   (w1 :: GHC.Prim.Void# -> r) ->
                 case ww of wild {
                   GHC.Base.Nothing -> w1 GHC.Prim.void#
                   GHC.Base.Just ds
                   -> Language.PureScript.Constants.$mPrimRowList
                        @ rep
                        @ r
                        ds
                        (\ (void :: GHC.Prim.Void#)[OneShot] ->
                         case ww1
                                `cast`
                              (Language.PureScript.Names.N:ProperName[0]
                                   <'Language.PureScript.Names.ClassName>_P) of wild1 { Data.Text.Internal.Text dt dt1 dt2 ->
                         case Language.PureScript.Constants.$bRowToList1 of wild2 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                         case GHC.Prim.==# dt2 dt5 of lwild {
                           DEFAULT -> w1 GHC.Prim.void#
                           1#
                           -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.ByteArray#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.State# GHC.Prim.RealWorld
                                                             -> (# GHC.Prim.State#
                                                                     GHC.Prim.RealWorld,
                                                                   GHC.Prim.Int# #)}
                                     dt
                                     (GHC.Prim.int2Word# dt1)
                                     dt3
                                     (GHC.Prim.int2Word# dt4)
                                     (GHC.Prim.int2Word# dt2)
                                     GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                              case GHC.Prim.narrow32Int# ds3 of wild3 {
                                DEFAULT -> w1 GHC.Prim.void# 0# -> w GHC.Prim.void# } } } } })
                        (\ (void :: GHC.Prim.Void#)[OneShot] -> w1 GHC.Prim.void#) }) -}
e1494b95f41ee7f7045ea5f8398f19b2
  $w$mRowUnion ::
    forall (rep :: GHC.Types.RuntimeRep) (r :: TYPE rep).
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> (GHC.Prim.Void# -> r)
    -> (GHC.Prim.Void# -> r)
    -> r
  {- Arity: 4, Strictness: <S,1*U><L,1*U(U,U,U)><L,1*C1(U)><L,C(U)>,
     Inline: [0],
     Unfolding: (\ @ rep :: GHC.Types.RuntimeRep
                   @ r :: TYPE rep
                   (ww :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww1 :: Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ClassName)
                   (w :: GHC.Prim.Void# -> r)
                   (w1 :: GHC.Prim.Void# -> r) ->
                 case ww of wild {
                   GHC.Base.Nothing -> w1 GHC.Prim.void#
                   GHC.Base.Just ds
                   -> Language.PureScript.Constants.$mPrimRow
                        @ rep
                        @ r
                        ds
                        (\ (void :: GHC.Prim.Void#)[OneShot] ->
                         case ww1
                                `cast`
                              (Language.PureScript.Names.N:ProperName[0]
                                   <'Language.PureScript.Names.ClassName>_P) of wild1 { Data.Text.Internal.Text dt dt1 dt2 ->
                         case Language.PureScript.Constants.$bRowUnion1 of wild2 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                         case GHC.Prim.==# dt2 dt5 of lwild {
                           DEFAULT -> w1 GHC.Prim.void#
                           1#
                           -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.ByteArray#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.State# GHC.Prim.RealWorld
                                                             -> (# GHC.Prim.State#
                                                                     GHC.Prim.RealWorld,
                                                                   GHC.Prim.Int# #)}
                                     dt
                                     (GHC.Prim.int2Word# dt1)
                                     dt3
                                     (GHC.Prim.int2Word# dt4)
                                     (GHC.Prim.int2Word# dt2)
                                     GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                              case GHC.Prim.narrow32Int# ds3 of wild3 {
                                DEFAULT -> w1 GHC.Prim.void# 0# -> w GHC.Prim.void# } } } } })
                        (\ (void :: GHC.Prim.Void#)[OneShot] -> w1 GHC.Prim.void#) }) -}
dd21baca972d1614efccdd4283a079d7
  $w$mSymbolAppend ::
    forall (rep :: GHC.Types.RuntimeRep) (r :: TYPE rep).
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> (GHC.Prim.Void# -> r)
    -> (GHC.Prim.Void# -> r)
    -> r
  {- Arity: 4, Strictness: <S,1*U><L,1*U(U,U,U)><L,1*C1(U)><L,C(U)>,
     Inline: [0],
     Unfolding: (\ @ rep :: GHC.Types.RuntimeRep
                   @ r :: TYPE rep
                   (ww :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww1 :: Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ClassName)
                   (w :: GHC.Prim.Void# -> r)
                   (w1 :: GHC.Prim.Void# -> r) ->
                 case ww of wild {
                   GHC.Base.Nothing -> w1 GHC.Prim.void#
                   GHC.Base.Just ds
                   -> Language.PureScript.Constants.$mPrimSymbol
                        @ rep
                        @ r
                        ds
                        (\ (void :: GHC.Prim.Void#)[OneShot] ->
                         case ww1
                                `cast`
                              (Language.PureScript.Names.N:ProperName[0]
                                   <'Language.PureScript.Names.ClassName>_P) of wild1 { Data.Text.Internal.Text dt dt1 dt2 ->
                         case Language.PureScript.Constants.$bSymbolAppend1 of wild2 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                         case GHC.Prim.==# dt2 dt5 of lwild {
                           DEFAULT -> w1 GHC.Prim.void#
                           1#
                           -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.ByteArray#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.State# GHC.Prim.RealWorld
                                                             -> (# GHC.Prim.State#
                                                                     GHC.Prim.RealWorld,
                                                                   GHC.Prim.Int# #)}
                                     dt
                                     (GHC.Prim.int2Word# dt1)
                                     dt3
                                     (GHC.Prim.int2Word# dt4)
                                     (GHC.Prim.int2Word# dt2)
                                     GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                              case GHC.Prim.narrow32Int# ds3 of wild3 {
                                DEFAULT -> w1 GHC.Prim.void# 0# -> w GHC.Prim.void# } } } } })
                        (\ (void :: GHC.Prim.Void#)[OneShot] -> w1 GHC.Prim.void#) }) -}
3e1b853da85d90844456e29806a94089
  $w$mSymbolCompare ::
    forall (rep :: GHC.Types.RuntimeRep) (r :: TYPE rep).
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> (GHC.Prim.Void# -> r)
    -> (GHC.Prim.Void# -> r)
    -> r
  {- Arity: 4, Strictness: <S,1*U><L,1*U(U,U,U)><L,1*C1(U)><L,C(U)>,
     Inline: [0],
     Unfolding: (\ @ rep :: GHC.Types.RuntimeRep
                   @ r :: TYPE rep
                   (ww :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww1 :: Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ClassName)
                   (w :: GHC.Prim.Void# -> r)
                   (w1 :: GHC.Prim.Void# -> r) ->
                 case ww of wild {
                   GHC.Base.Nothing -> w1 GHC.Prim.void#
                   GHC.Base.Just ds
                   -> Language.PureScript.Constants.$mPrimSymbol
                        @ rep
                        @ r
                        ds
                        (\ (void :: GHC.Prim.Void#)[OneShot] ->
                         case ww1
                                `cast`
                              (Language.PureScript.Names.N:ProperName[0]
                                   <'Language.PureScript.Names.ClassName>_P) of wild1 { Data.Text.Internal.Text dt dt1 dt2 ->
                         case Language.PureScript.Constants.$bSymbolCompare1 of wild2 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                         case GHC.Prim.==# dt2 dt5 of lwild {
                           DEFAULT -> w1 GHC.Prim.void#
                           1#
                           -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.ByteArray#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.State# GHC.Prim.RealWorld
                                                             -> (# GHC.Prim.State#
                                                                     GHC.Prim.RealWorld,
                                                                   GHC.Prim.Int# #)}
                                     dt
                                     (GHC.Prim.int2Word# dt1)
                                     dt3
                                     (GHC.Prim.int2Word# dt4)
                                     (GHC.Prim.int2Word# dt2)
                                     GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                              case GHC.Prim.narrow32Int# ds3 of wild3 {
                                DEFAULT -> w1 GHC.Prim.void# 0# -> w GHC.Prim.void# } } } } })
                        (\ (void :: GHC.Prim.Void#)[OneShot] -> w1 GHC.Prim.void#) }) -}
f0e19ab5269cd9bf33ee5e9007e08041
  $w$mSymbolCons ::
    forall (rep :: GHC.Types.RuntimeRep) (r :: TYPE rep).
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> (GHC.Prim.Void# -> r)
    -> (GHC.Prim.Void# -> r)
    -> r
  {- Arity: 4, Strictness: <S,1*U><L,1*U(U,U,U)><L,1*C1(U)><L,C(U)>,
     Inline: [0],
     Unfolding: (\ @ rep :: GHC.Types.RuntimeRep
                   @ r :: TYPE rep
                   (ww :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww1 :: Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ClassName)
                   (w :: GHC.Prim.Void# -> r)
                   (w1 :: GHC.Prim.Void# -> r) ->
                 case ww of wild {
                   GHC.Base.Nothing -> w1 GHC.Prim.void#
                   GHC.Base.Just ds
                   -> Language.PureScript.Constants.$mPrimSymbol
                        @ rep
                        @ r
                        ds
                        (\ (void :: GHC.Prim.Void#)[OneShot] ->
                         case ww1
                                `cast`
                              (Language.PureScript.Names.N:ProperName[0]
                                   <'Language.PureScript.Names.ClassName>_P) of wild1 { Data.Text.Internal.Text dt dt1 dt2 ->
                         case Language.PureScript.Constants.$bRowCons1 of wild2 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                         case GHC.Prim.==# dt2 dt5 of lwild {
                           DEFAULT -> w1 GHC.Prim.void#
                           1#
                           -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.ByteArray#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.State# GHC.Prim.RealWorld
                                                             -> (# GHC.Prim.State#
                                                                     GHC.Prim.RealWorld,
                                                                   GHC.Prim.Int# #)}
                                     dt
                                     (GHC.Prim.int2Word# dt1)
                                     dt3
                                     (GHC.Prim.int2Word# dt4)
                                     (GHC.Prim.int2Word# dt2)
                                     GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                              case GHC.Prim.narrow32Int# ds3 of wild3 {
                                DEFAULT -> w1 GHC.Prim.void# 0# -> w GHC.Prim.void# } } } } })
                        (\ (void :: GHC.Prim.Void#)[OneShot] -> w1 GHC.Prim.void#) }) -}
857db66f3fdb60ad9fead3f608858f21
  $w$mWarn ::
    forall (rep :: GHC.Types.RuntimeRep) (r :: TYPE rep).
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> (GHC.Prim.Void# -> r)
    -> (GHC.Prim.Void# -> r)
    -> r
  {- Arity: 4, Strictness: <S,1*U><L,1*U(U,U,U)><L,1*C1(U)><L,C(U)>,
     Inline: [0],
     Unfolding: (\ @ rep :: GHC.Types.RuntimeRep
                   @ r :: TYPE rep
                   (ww :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww1 :: Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ClassName)
                   (w :: GHC.Prim.Void# -> r)
                   (w1 :: GHC.Prim.Void# -> r) ->
                 case ww of wild {
                   GHC.Base.Nothing -> w1 GHC.Prim.void#
                   GHC.Base.Just ds
                   -> Language.PureScript.Constants.$mPrimTypeError
                        @ rep
                        @ r
                        ds
                        (\ (void :: GHC.Prim.Void#)[OneShot] ->
                         case ww1
                                `cast`
                              (Language.PureScript.Names.N:ProperName[0]
                                   <'Language.PureScript.Names.ClassName>_P) of wild1 { Data.Text.Internal.Text dt dt1 dt2 ->
                         case Language.PureScript.Constants.$bWarn1 of wild2 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                         case GHC.Prim.==# dt2 dt5 of lwild {
                           DEFAULT -> w1 GHC.Prim.void#
                           1#
                           -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.ByteArray#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.State# GHC.Prim.RealWorld
                                                             -> (# GHC.Prim.State#
                                                                     GHC.Prim.RealWorld,
                                                                   GHC.Prim.Int# #)}
                                     dt
                                     (GHC.Prim.int2Word# dt1)
                                     dt3
                                     (GHC.Prim.int2Word# dt4)
                                     (GHC.Prim.int2Word# dt2)
                                     GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                              case GHC.Prim.narrow32Int# ds3 of wild3 {
                                DEFAULT -> w1 GHC.Prim.void# 0# -> w GHC.Prim.void# } } } } })
                        (\ (void :: GHC.Prim.Void#)[OneShot] -> w1 GHC.Prim.void#) }) -}
1a8e1a6cd79e273714f940eaa9573aa7
  (%) :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.%1) -}
20e28a3f856c3a661e064a4e10d4f50a
  %1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.%2) -}
b4e08609c8de18a3b266d5c5efbd77d6
  %2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("%"#) -}
c488ab5f946e13883d047cb57e907f41
  (&&) :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.&&1) -}
e06836ea9678ea6010f1e01c68152f35
  &&1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.&&2) -}
46f8d52b79c0a1d77b6a45d130cb0b9c
  &&2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("&&"#) -}
fbfe4aa6a8e6d65e4c324dfc27e1db2f
  (*) :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.*1) -}
f00e6e411345d1db6a882a7db22b481b
  *1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.*2) -}
010cc02ebeeb8123b10a394f54d95d9e
  *2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("*"#) -}
f06804ec8634c83c3388af2b7f587c9c
  (+) :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.+1) -}
22fb2407eb6908d734b8095849b3e609
  (++) :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.++1) -}
2d42b6bbf1f18f85c853f8082f227306
  ++1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.++2) -}
00ebe5c51115eb6fe9f471bcfbd13cfa
  ++2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("++"#) -}
7fe5d78a29787ca42a29d1ed8d7a4cf1
  +1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.+2) -}
92cdab95d8c4bd65995a42ec1c16e705
  +2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("+"#) -}
44c391120b70ed6fc55eb54fe16f078b
  (-) :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.-1) -}
4270079293119fd7eef52eb67ead01f4
  -1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.-2) -}
f8f89ee6fee9791c31de6d0c996dd020
  -2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("-"#) -}
a31c51925c3b31e264156e4688f03414
  (/) :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants./1) -}
96db698ca56f1d185b0189d4790da5d1
  /1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants./2) -}
b6e767fa12e6d991f928c2605b98c088
  /2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("/"#) -}
66260afb603a752ce61ffc071c603651
  (/=) :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants./=1) -}
3a21363f4ddad1a31b7de3fd24ed9e76
  /=1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants./=2) -}
2a720308b0190cceb88f77e7738751ca
  /=2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("/="#) -}
c9a7a00f44e001a72152763441ccf099
  (<) :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.<1) -}
b4c9e0bf9249c297b2dfa8d34c912d36
  <1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.<2) -}
09474734d0ebe29671e29690495aa5b0
  <2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("<"#) -}
30b84b86c1654c29f85ba5c04e86a25f
  (<<<) :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.<<<1) -}
ea73e86262ffd1a5917527c004b85821
  <<<1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.<<<2) -}
d32cda0c2ef3e0cf30e9566a8ff59a71
  <<<2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("<<<"#) -}
6680b9fd5227b357ee234666400e31d6
  (<=) :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.<=1) -}
2dc204e60b1af27e3be33216b818366b
  <=1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.<=2) -}
03cd90662e735644e267b0ea0d0fca06
  <=2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("<="#) -}
ae28ee332687ccbaec2deba654fed38f
  (<>) :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.<>1) -}
d128ce25e13872d6a8341b60c8a0012b
  <>1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.<>2) -}
6f13e2f29844ff460de1633f3c61bb5a
  <>2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("<>"#) -}
56b41fccd31e51d737a7716686b26f0c
  (==) :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.==1) -}
0b24d6565428452243594166ad2ff2af
  ==1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.==2) -}
12ff7df8179fba9de913e9091e9cb7d0
  ==2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("=="#) -}
d419af033ea4970fc929d08585351046
  (>) :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.>1) -}
1d977f9a42fa693aa679131cd2fb93b2
  >1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.>2) -}
9dac61b3669fa82ced1eb5ba2106e0a7
  >2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (">"#) -}
520c417a5e2044aaa0bf0fbb30dd6173
  (>=) :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.>=1) -}
2fa8a9f820b0e89f54c138f368b05d9c
  >=1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.>=2) -}
4ee8216a7be8510b144e0c43df94742a
  >=2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (">="#) -}
01805fad3abbe93bcb7ddfbc5d9d31c2
  (>>=) :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.>>=1) -}
f39a87e4a3c671e482ab2bbf94e2e083
  >>=1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.>>=2) -}
904684eb9d1c3c7f833cbf133414c4b5
  >>=2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (">>="#) -}
18017103c6a7cf2a0a5322cdc49a6a7a
  (>>>) :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.>>>1) -}
af798cae20bf269bc15a9f5a1c5dd4c8
  >>>1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.>>>2) -}
fdec3078cac098762e39b62131d3bc03
  >>>2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (">>>"#) -}
21cae032cd6eb6c7ce1484e34b49d8fb
  pattern Language.PureScript.Constants.ControlBind :: Language.PureScript.Names.ModuleName
6feab1d47d7204a361f71266c482edb1
  pattern Language.PureScript.Constants.DataSymbol :: Language.PureScript.Names.ModuleName
879e6714f8e80050c4739db81bdefcb1
  pattern Language.PureScript.Constants.Discard :: Language.PureScript.Names.Qualified
                                                     (Language.PureScript.Names.ProperName
                                                        'Language.PureScript.Names.ClassName)
d596126e12a587255392bd68ff7b8092
  data EffectDictionaries
    = EffectDictionaries {edApplicativeDict :: Language.PureScript.PSString.PSString,
                          edBindDict :: Language.PureScript.PSString.PSString,
                          edMonadDict :: Language.PureScript.PSString.PSString,
                          edWhile :: Language.PureScript.PSString.PSString,
                          edUntil :: Language.PureScript.PSString.PSString}
6fc4c2aadc12c2517a0fea5ba9b8edf0
  pattern Language.PureScript.Constants.Fail :: Language.PureScript.Names.Qualified
                                                  (Language.PureScript.Names.ProperName
                                                     'Language.PureScript.Names.ClassName)
c12497b2f4957158d083b25a3edf0276
  pattern Language.PureScript.Constants.IsSymbol :: Language.PureScript.Names.Qualified
                                                      (Language.PureScript.Names.ProperName
                                                         'Language.PureScript.Names.ClassName)
78fd25ce055392a0b1d7b9f219d96bdd
  pattern Language.PureScript.Constants.Partial :: Language.PureScript.Names.Qualified
                                                     (Language.PureScript.Names.ProperName
                                                        'Language.PureScript.Names.ClassName)
d528e2dc5909b801bd7d210869fde176
  pattern Language.PureScript.Constants.Prim :: Language.PureScript.Names.ModuleName
074d382c03d10c5673b62ecd7b997557
  pattern Language.PureScript.Constants.PrimBoolean :: Language.PureScript.Names.ModuleName
847b36613fcfaf988ff99d1d87a88ce4
  pattern Language.PureScript.Constants.PrimOrdering :: Language.PureScript.Names.ModuleName
ce41b42d6d558c57933fa83c08a0adbd
  pattern Language.PureScript.Constants.PrimRow :: Language.PureScript.Names.ModuleName
9a41086c476f1417e3dce13da58a0184
  pattern Language.PureScript.Constants.PrimRowList :: Language.PureScript.Names.ModuleName
92b8e9ab524bd3a3af1292738ec5fadb
  pattern Language.PureScript.Constants.PrimSymbol :: Language.PureScript.Names.ModuleName
c4d1101437a44c3c4b61f1d5d0139044
  pattern Language.PureScript.Constants.PrimTypeError :: Language.PureScript.Names.ModuleName
7c8350dd2ddc3fb292577a8c5ace132b
  pattern Language.PureScript.Constants.Record :: Language.PureScript.Names.Qualified
                                                    (Language.PureScript.Names.ProperName
                                                       'Language.PureScript.Names.TypeName)
cdbe93d4ea34f258142e6eaaf3359eb2
  pattern Language.PureScript.Constants.RowCons :: Language.PureScript.Names.Qualified
                                                     (Language.PureScript.Names.ProperName
                                                        'Language.PureScript.Names.ClassName)
b6a02c173b8d6d4b4be1410d56af3fdb
  pattern Language.PureScript.Constants.RowLacks :: Language.PureScript.Names.Qualified
                                                      (Language.PureScript.Names.ProperName
                                                         'Language.PureScript.Names.ClassName)
f374d21fa8f3c35a75af855e0f293596
  pattern Language.PureScript.Constants.RowListCons :: Language.PureScript.Names.Qualified
                                                         (Language.PureScript.Names.ProperName
                                                            'Language.PureScript.Names.TypeName)
83281ecb1f9069540f97809e923cb8bc
  pattern Language.PureScript.Constants.RowListNil :: Language.PureScript.Names.Qualified
                                                        (Language.PureScript.Names.ProperName
                                                           'Language.PureScript.Names.TypeName)
5012804d6bd69fabbdbc89e4f0a6527a
  pattern Language.PureScript.Constants.RowNub :: Language.PureScript.Names.Qualified
                                                    (Language.PureScript.Names.ProperName
                                                       'Language.PureScript.Names.ClassName)
22e523c9aad10d8e4d8252c75883d1ff
  pattern Language.PureScript.Constants.RowToList :: Language.PureScript.Names.Qualified
                                                       (Language.PureScript.Names.ProperName
                                                          'Language.PureScript.Names.ClassName)
e527d3e39ace8a876bb437eb50e99ce3
  pattern Language.PureScript.Constants.RowUnion :: Language.PureScript.Names.Qualified
                                                      (Language.PureScript.Names.ProperName
                                                         'Language.PureScript.Names.ClassName)
722ea4201d75f17261ddd082d5401b27
  pattern Language.PureScript.Constants.SymbolAppend :: Language.PureScript.Names.Qualified
                                                          (Language.PureScript.Names.ProperName
                                                             'Language.PureScript.Names.ClassName)
3616e2d86fdd2c8f81b984a99d78beac
  pattern Language.PureScript.Constants.SymbolCompare :: Language.PureScript.Names.Qualified
                                                           (Language.PureScript.Names.ProperName
                                                              'Language.PureScript.Names.ClassName)
860999617cc7a0e41e93a874e7b6df34
  pattern Language.PureScript.Constants.SymbolCons :: Language.PureScript.Names.Qualified
                                                        (Language.PureScript.Names.ProperName
                                                           'Language.PureScript.Names.ClassName)
24a3f73768e2566e6f9551645c95778a
  pattern Language.PureScript.Constants.Warn :: Language.PureScript.Names.Qualified
                                                  (Language.PureScript.Names.ProperName
                                                     'Language.PureScript.Names.ClassName)
bc75330939bbdb0372a244a6d1213f36
  add :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.add1) -}
1d0c38ef2a97f41ad399f0911e45d41f
  add1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.add2) -}
4f6e81c3507e6c70cd92954accb8db4b
  add2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("add"#) -}
e43791a8a0d780c01beffeb04696877e
  and :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.and1) -}
2d7ed46cc2d6fac92634305efa16202b
  and1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.and2) -}
5869fbd2d8b813b249c499d6cdc00d1e
  and2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("and"#) -}
fb527f4c5c460f597512daa24dea6309
  append :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.append1) -}
85cf2e001999e08d8e4705464a41be3a
  append1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.append2) -}
eac6d8ef9592663b7204854553d064d2
  append2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("append"#) -}
2965ad4d4a930a7136541d13817769db
  apply :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.apply1) -}
2342affb703c2ed1d6839d6562f210a9
  apply1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.apply2) -}
2828c5d22a1251d171193988141c2835
  apply2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("apply"#) -}
db2fdd8ed168d53999a885c30d931f5a
  applyFlipped :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.applyFlipped1) -}
f2d980dc98795e92e54e3778c04a71e7
  applyFlipped1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.applyFlipped2) -}
c914a472197fe82b30172ff142be15e9
  applyFlipped2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("applyFlipped"#) -}
7941b6ef28a5d94caf93a0b98bd059c8
  bind :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.bind1) -}
696767d6831b5e4e06404a927196753b
  bind1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.bind2) -}
099fd83a868253ccf97a54b1ea128dd7
  bind2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("bind"#) -}
81c48b3b1c655b9a3b950359b06178dd
  booleanAlgebraBoolean :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.booleanAlgebraBoolean1) -}
b35995f2351801e3b72d3f226f8d956a
  booleanAlgebraBoolean1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.booleanAlgebraBoolean2) -}
32d8c5d01b4053d08d6828170aa4c67f
  booleanAlgebraBoolean2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("booleanAlgebraBoolean"#) -}
1279b34627329189621472d83143b3ed
  booleanFalse ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName)
  {- Strictness: m,
     Unfolding: (Language.PureScript.Names.Qualified
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.TypeName)
                   Language.PureScript.Constants.booleanFalse3
                   Language.PureScript.Constants.booleanFalse1
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.TypeName>_P))) -}
7f495e2f7454b0a92f19bb8212c0b718
  booleanFalse1 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Constants.booleanFalse2) -}
abb8388612a18f9dbe79624b364be7a8
  booleanFalse2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("False"#) -}
f26f7b8029c9143c01eff80922cefbe1
  booleanFalse3 ::
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ Language.PureScript.Names.ModuleName
                   Language.PureScript.Constants.$bPrimBoolean1
                     `cast`
                   (Sym (Language.PureScript.Names.N:ModuleName[0]))) -}
dcb2e28bd6a2e290c3d2da624312f352
  booleanTrue ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName)
  {- Strictness: m,
     Unfolding: (Language.PureScript.Names.Qualified
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.TypeName)
                   Language.PureScript.Constants.booleanFalse3
                   Language.PureScript.Constants.booleanTrue1
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.TypeName>_P))) -}
231706b5b54a6e431fcf1cd5aa5358e0
  booleanTrue1 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Constants.booleanTrue2) -}
9335f9dc4bb893f223215ee06922be03
  booleanTrue2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("True"#) -}
28bf3b98ed5f9176957d82b44e467201
  bottom :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.bottom1) -}
9cbb6ae39dc16d3a6f1a223290518a5d
  bottom1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.bottom2) -}
05a5355332844e2260feaaaf586d563e
  bottom2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("bottom"#) -}
63dd05c310328435df05cbcb36f359e6
  boundedBoolean :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.boundedBoolean1) -}
fc48be899a2bb15fca16d66008b4a4a4
  boundedBoolean1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.boundedBoolean2) -}
905f86ae6a0354af0f34b121941000b6
  boundedBoolean2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("boundedBoolean"#) -}
09b179749fec76c633979401930221b9
  compare :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.compare2) -}
a670f2a87186174cea4f8b63f5c15355
  compare1 :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.compare4) -}
19e4e1670e05e8b40d49ee729c3b8789
  compare2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.compare3) -}
6c883ca161789fb26e6bf4d28a52d289
  compare3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("compare"#) -}
e9757dcab12013efcbd4c4364886f970
  compare4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.compare5) -}
45f5b119e8baa7b366ed77187efc7a91
  compare5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("compare1"#) -}
1c77ba0fdf2e10b783871f847975f687
  complement :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.complement1) -}
fc128c522d82d0e65d605641b0a605c1
  complement1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.complement2) -}
a50e6aa134c759d830ebd6f101b45155
  complement2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("complement"#) -}
29cdf472891adf8e8823f7f88105413a
  compose :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.compose1) -}
b5977398e659e1a8481cb4982d1b5a2c
  compose1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.compose2) -}
300e5946935a6e9525ab24bae83ba34c
  compose2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("compose"#) -}
343e7ca99ba6921a7fc13dfe8a2c6051
  composeFlipped :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.composeFlipped1) -}
d10b9b331f372ca35a24be501a2d5fcb
  composeFlipped1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.composeFlipped2) -}
346bc4d6c978ff235e8053e70b887031
  composeFlipped2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("composeFlipped"#) -}
82f49a3d788cce8f918ed52038a33482
  conj :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.conj1) -}
d43e121c320e1bce01684e7108c44ede
  conj1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.conj2) -}
e0ffdca68f4d578669f654febcc5caea
  conj2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("conj"#) -}
72434e794968ae33a3e539190bf1481b
  controlApplicative :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.controlApplicative1) -}
8296ccd6ec58034358f49fa8814f4501
  controlApplicative1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.controlApplicative2) -}
63d2cc5f321940ce25b13df3b927d78e
  controlApplicative2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Control_Applicative"#) -}
c79c04847467132cf6103b9f53ce79e3
  controlBind :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.controlBind1) -}
6271319b90a315f49726edf34b799250
  controlBind1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.controlBind2) -}
360fe5a6e406096f1b8c70283792941e
  controlBind2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Control_Bind"#) -}
71a2385bd852903f020aba3174e33a8a
  controlMonadEffUncurried :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.controlMonadEffUncurried1) -}
2d0bdddd07f343a95d3d230b34f84534
  controlMonadEffUncurried1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.controlMonadEffUncurried2) -}
8207dee2672493df7b9825892bbf1fce
  controlMonadEffUncurried2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Control_Monad_Eff_Uncurried"#) -}
a59870e3403c568c9cab4d87d53d6d24
  controlSemigroupoid :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.controlSemigroupoid1) -}
525b714605d190f1aba643fedbe84244
  controlSemigroupoid1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.controlSemigroupoid2) -}
6ad7acdf927dd49254c57c451ef6970b
  controlSemigroupoid2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Control_Semigroupoid"#) -}
4e70940442d0072625e8cafa9973aaed
  dataArray :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.dataArray1) -}
fd19cf0e173556f254394ab4c2165b0c
  dataArray1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.dataArray2) -}
47242764fd2c1c669eb39f2fbca87280
  dataArray2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Data_Array"#) -}
c81aca5cfaea54a92f5123e3e4693e2d
  dataBounded :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.dataBounded1) -}
09b3fdd7d0e4b60f84bea819ad3a4078
  dataBounded1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.dataBounded2) -}
b004d3b7d91d97aeaad7b3089215935f
  dataBounded2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Data_Bounded"#) -}
5a4e993b467928d86fa5cc85ac5bcd9c
  dataEq :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.dataEq1) -}
89a11ea9f8900b42afff715dbffb8e70
  dataEq1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.dataEq2) -}
7f3f5f357c58866623fdc393e26ec2ce
  dataEq2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Data_Eq"#) -}
ed3ca2f8ef4b898452b0fc76b8b9382c
  dataEuclideanRing :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.dataEuclideanRing1) -}
b54804f67c12f4a897799ae2744a9d6b
  dataEuclideanRing1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.dataEuclideanRing2) -}
7b5ebb30f6b724d4614ff88ce4dac053
  dataEuclideanRing2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Data_EuclideanRing"#) -}
8d864d52c9be9ee646ee03db4368e7a4
  dataFunction :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.dataFunction1) -}
92c7737169e58e4ac65e52aaf452b1b0
  dataFunction1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.dataFunction2) -}
31cd2dc432e06f0bd1472f19ca19e475
  dataFunction2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Data_Function"#) -}
ea5782602cbf4513b65e91e77c657763
  dataFunctionUncurried :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.dataFunctionUncurried1) -}
fe2571fa4087735a6d3e15dac99f97c9
  dataFunctionUncurried1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.dataFunctionUncurried2) -}
eadb60b0c88b439cc44e5d86339945d0
  dataFunctionUncurried2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Data_Function_Uncurried"#) -}
e2672a46611ab91453ec419b45a05e3f
  dataHeytingAlgebra :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.dataHeytingAlgebra1) -}
d058a0ee13237d5be012365ada1aa3f6
  dataHeytingAlgebra1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.dataHeytingAlgebra2) -}
985d1d50368b8edf6e0cb7860dbbcf85
  dataHeytingAlgebra2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Data_HeytingAlgebra"#) -}
1259e6fec0549f14211c767e0b023173
  dataIntBits :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.dataIntBits1) -}
c4971252bdca1c0c9d49654f90c60320
  dataIntBits1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.dataIntBits2) -}
802b8a7b2e58f423eed124418b37fde8
  dataIntBits2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Data_Int_Bits"#) -}
809e14af05308feb48d3d8e631cc098c
  dataOrd :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.dataOrd1) -}
1868d7e04dbffd1b14ad9aa789958f85
  dataOrd1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.dataOrd2) -}
58013326abbb7346f0941aead238732e
  dataOrd2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Data_Ord"#) -}
10596d38849da57891d20da3184ab2c2
  dataRing :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.dataRing1) -}
ed74159bc234a881be138c3272efa0e3
  dataRing1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.dataRing2) -}
80518f2eeeb7919cc8e862b824b31583
  dataRing2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Data_Ring"#) -}
0c5fb6817cb581312062d369dff33d17
  dataSemigroup :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.dataSemigroup1) -}
5e0f8b003e7250f3b61613928a6b73dc
  dataSemigroup1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.dataSemigroup2) -}
5216ea801c64e1be8600342cfc822110
  dataSemigroup2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Data_Semigroup"#) -}
e58e18cb310d7ccea383e37b71b9e2b6
  dataSemiring :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.dataSemiring1) -}
9c329c9b994be96d8ed242e5d3589376
  dataSemiring1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.dataSemiring2) -}
3a46679b3e586cd12d1ab19a63123aa0
  dataSemiring2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Data_Semiring"#) -}
72f5857dfc765662403507494c485147
  discard :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.discard1) -}
d6e2d402728d8e27fd0148e432d06e55
  discard1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.discard2) -}
69e31f9e5aca456286855251c4558cff
  discard2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("discard"#) -}
1f18144fe1ab275dabc54b340fa7c3af
  discardUnitDictionary :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.discardUnitDictionary1) -}
12a67090f276104d61b5f606988d5335
  discardUnitDictionary1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.discardUnitDictionary2) -}
a2c91a2316dca63a0d06718baab63de0
  discardUnitDictionary2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("discardUnit"#) -}
fc32d34f19917fb5008e871568596f8c
  disj :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.disj1) -}
d8ffecfbf9f3ff1087273d08b7622500
  disj1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.disj2) -}
fbef9553407cd4c0e77b50755b573868
  disj2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("disj"#) -}
93e092698a92a6af030645efa965e6c2
  div :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.div1) -}
f00da2c1d7e2cafbf9db4f9154cb864e
  div1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.div2) -}
e5acb533722a1b006432828893a41756
  div2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("div"#) -}
10b13c9b8d3c0be64325a4cb442179b1
  doc :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.doc1) -}
3b550e9a16883ff5c699b0e35e572ea5
  doc1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.doc2) -}
fc11870c526178662bfcaab363722be5
  doc2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Doc"#) -}
d596126e12a587255392bd68ff7b8092
  edApplicativeDict ::
    Language.PureScript.Constants.EffectDictionaries
    -> Language.PureScript.PSString.PSString
  RecSel Left Language.PureScript.Constants.EffectDictionaries
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLLLL),1*U(1*U,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Constants.EffectDictionaries) ->
                 case ds of wild { Language.PureScript.Constants.EffectDictionaries ds1 ds2 ds3 ds4 ds5 ->
                 ds1 }) -}
d596126e12a587255392bd68ff7b8092
  edBindDict ::
    Language.PureScript.Constants.EffectDictionaries
    -> Language.PureScript.PSString.PSString
  RecSel Left Language.PureScript.Constants.EffectDictionaries
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSLLL),1*U(A,1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Constants.EffectDictionaries) ->
                 case ds of wild { Language.PureScript.Constants.EffectDictionaries ds1 ds2 ds3 ds4 ds5 ->
                 ds2 }) -}
d596126e12a587255392bd68ff7b8092
  edMonadDict ::
    Language.PureScript.Constants.EffectDictionaries
    -> Language.PureScript.PSString.PSString
  RecSel Left Language.PureScript.Constants.EffectDictionaries
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLSLL),1*U(A,A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Constants.EffectDictionaries) ->
                 case ds of wild { Language.PureScript.Constants.EffectDictionaries ds1 ds2 ds3 ds4 ds5 ->
                 ds3 }) -}
d596126e12a587255392bd68ff7b8092
  edUntil ::
    Language.PureScript.Constants.EffectDictionaries
    -> Language.PureScript.PSString.PSString
  RecSel Left Language.PureScript.Constants.EffectDictionaries
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLLLS),1*U(A,A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Constants.EffectDictionaries) ->
                 case ds of wild { Language.PureScript.Constants.EffectDictionaries ds1 ds2 ds3 ds4 ds5 ->
                 ds5 }) -}
d596126e12a587255392bd68ff7b8092
  edWhile ::
    Language.PureScript.Constants.EffectDictionaries
    -> Language.PureScript.PSString.PSString
  RecSel Left Language.PureScript.Constants.EffectDictionaries
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLLSL),1*U(A,A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Constants.EffectDictionaries) ->
                 case ds of wild { Language.PureScript.Constants.EffectDictionaries ds1 ds2 ds3 ds4 ds5 ->
                 ds4 }) -}
73c6d49bd97a162e0a2a7c23ec670d37
  eff :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.eff1) -}
99fc04b4841aa75558240cc54b36a98b
  eff1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.eff2) -}
65cf5c5a820558457008523cb57eafc6
  eff2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Control_Monad_Eff"#) -}
2b3f715f9566200bb2fa7fc5bde340f0
  effDictionaries :: Language.PureScript.Constants.EffectDictionaries
  {- Strictness: m,
     Unfolding: (Language.PureScript.Constants.EffectDictionaries
                   Language.PureScript.Constants.effDictionaries9
                     `cast`
                   (Sym (Language.PureScript.PSString.N:PSString[0]))
                   Language.PureScript.Constants.effDictionaries7
                     `cast`
                   (Sym (Language.PureScript.PSString.N:PSString[0]))
                   Language.PureScript.Constants.effDictionaries5
                     `cast`
                   (Sym (Language.PureScript.PSString.N:PSString[0]))
                   Language.PureScript.Constants.effDictionaries3
                     `cast`
                   (Sym (Language.PureScript.PSString.N:PSString[0]))
                   Language.PureScript.Constants.effDictionaries1
                     `cast`
                   (Sym (Language.PureScript.PSString.N:PSString[0]))) -}
0836258808f434e8953e126d1cb8eada
  effDictionaries1 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   (GHC.CString.unpackCString#
                      Language.PureScript.Constants.effDictionaries2)) -}
8101c764b32af190bb48c0da7a614317
  effDictionaries10 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("applicativeEff"#) -}
ecc76ac825fbcccb904fee1a96b11bb7
  effDictionaries2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("untilE"#) -}
f3da5ced49ac54a71b82986ec673d26e
  effDictionaries3 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   (GHC.CString.unpackCString#
                      Language.PureScript.Constants.effDictionaries4)) -}
c63817bb49d79501d2fe60c07c6306b7
  effDictionaries4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("whileE"#) -}
9ce6201b202b21fc7acdb8f31b127076
  effDictionaries5 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   (GHC.CString.unpackCString#
                      Language.PureScript.Constants.effDictionaries6)) -}
2ed64af83f99f244e07bdc8a1da68a6a
  effDictionaries6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("monadEff"#) -}
8b1d8428d45ab60b315610b444470963
  effDictionaries7 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   (GHC.CString.unpackCString#
                      Language.PureScript.Constants.effDictionaries8)) -}
76ee0f7326a27fc9216b8e90cc143482
  effDictionaries8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("bindEff"#) -}
e092086634381d9940b9f05320f8feb9
  effDictionaries9 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   (GHC.CString.unpackCString#
                      Language.PureScript.Constants.effDictionaries10)) -}
e42bfb98f6de6b6c17e77914235df4a7
  effect :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.effect1) -}
c867da01af898a3f4e00c397f4882f06
  effect1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.effect2) -}
c4f142042241c1064f7bc2e4ea6c9ebc
  effect2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Effect"#) -}
a168f576b4c289196e3dc9cc4937ea0a
  effectDictionaries ::
    Language.PureScript.Constants.EffectDictionaries
  {- Strictness: m,
     Unfolding: (Language.PureScript.Constants.EffectDictionaries
                   Language.PureScript.Constants.effectDictionaries5
                     `cast`
                   (Sym (Language.PureScript.PSString.N:PSString[0]))
                   Language.PureScript.Constants.effectDictionaries3
                     `cast`
                   (Sym (Language.PureScript.PSString.N:PSString[0]))
                   Language.PureScript.Constants.effectDictionaries1
                     `cast`
                   (Sym (Language.PureScript.PSString.N:PSString[0]))
                   Language.PureScript.Constants.effDictionaries3
                     `cast`
                   (Sym (Language.PureScript.PSString.N:PSString[0]))
                   Language.PureScript.Constants.effDictionaries1
                     `cast`
                   (Sym (Language.PureScript.PSString.N:PSString[0]))) -}
461d6b8defd339e19cdcd730f0505b8b
  effectDictionaries1 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   (GHC.CString.unpackCString#
                      Language.PureScript.Constants.effectDictionaries2)) -}
b1b8ac15f153854e9fbae062e9515982
  effectDictionaries2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("monadEffect"#) -}
70086b6cee8c433cb07daaa5607ed059
  effectDictionaries3 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   (GHC.CString.unpackCString#
                      Language.PureScript.Constants.effectDictionaries4)) -}
6d6b9862371c34723c5ae6b83af1270f
  effectDictionaries4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("bindEffect"#) -}
9311cb9175585cf8a4986d13aa16f15a
  effectDictionaries5 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   (GHC.CString.unpackCString#
                      Language.PureScript.Constants.effectDictionaries6)) -}
92b165beaad8f649b37c0d4b4bf1f946
  effectDictionaries6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("applicativeEffect"#) -}
28e67be309d165bfe7f20fe072c231b2
  effectUncurried :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.effectUncurried1) -}
138c02be167d02b4eed1ab9054896f25
  effectUncurried1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.effectUncurried2) -}
d7178c0884342ab5810295015d8a5393
  effectUncurried2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Effect_Uncurried"#) -}
75a29caf169679f02ace1903e716411f
  eq :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.eq2) -}
7f4247978d25ca8928be9144c6483968
  eq1 :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.eq4) -}
0a234b15d8ec07659855cfcc812c5250
  eq2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.eq3) -}
853555c1094cbbabb1b0e6e4858ae3a6
  eq3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("eq"#) -}
4a55eafe54e90a077ad7fb0d49dd1eaa
  eq4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.eq5) -}
9f38411dda6262adc688960aa4c66a3e
  eq5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("eq1"#) -}
5d2ac078be93eece6818572cdac6b6be
  eqBoolean :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.eqBoolean1) -}
08d76946b4cb1cc1c2a8d05850c94a6e
  eqBoolean1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.eqBoolean2) -}
297513b97fd5e0a15f1cec198d4a80e4
  eqBoolean2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("eqBoolean"#) -}
a1d1b4aadd681a0b12ef0d5be193e87d
  eqChar :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.eqChar1) -}
b5c7f25e80ad78f762442ceac4c5a640
  eqChar1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.eqChar2) -}
18426cface9a14e3dba67d006e9806b9
  eqChar2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("eqChar"#) -}
75893ceb1d35d90dfc0460dfafcf82bc
  eqInt :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.eqInt1) -}
b22cac2bbd87168830040df37a4d4a57
  eqInt1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.eqInt2) -}
c9f3b4adcf8cd59589867e81618d02ed
  eqInt2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("eqInt"#) -}
4a7ff71645911044dbcac4fca60aea5c
  eqNumber :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.eqNumber1) -}
dcf36bff8c76b8d03bf1435f4d613c9b
  eqNumber1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.eqNumber2) -}
5eeaa41ec7c92d47f80ef10cc84b4204
  eqNumber2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("eqNumber"#) -}
d8b90d3eb29d8c342604b26f4c43f104
  eqString :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.eqString1) -}
02f738a5162c2491a70990deb680e149
  eqString1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.eqString2) -}
05250976e936b6a55566ad7f9f7291db
  eqString2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("eqString"#) -}
93dea3ae3931d9031a25b7a2d6ef77dd
  euclideanRingInt :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.euclideanRingInt1) -}
f82a74df8ac833bfb2d8d075d08f75e4
  euclideanRingInt1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.euclideanRingInt2) -}
42351bad0afe06da3f7cba4b551d95e7
  euclideanRingInt2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("euclideanRingInt"#) -}
4469082092d9dbc2a7d8a771cc7ac9ca
  euclideanRingNumber :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.euclideanRingNumber1) -}
8fd422976187a2c4cc9558f0bc26cfa2
  euclideanRingNumber1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.euclideanRingNumber2) -}
c55f21c2acb99ce13d1de37458839c34
  euclideanRingNumber2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("euclideanRingNumber"#) -}
2d8e7868ebeb2b1df3796e2e093c6f17
  fromSpine :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.fromSpine1) -}
cb9efd5975bff7a7c6632378c3be0287
  fromSpine1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.fromSpine2) -}
bfd91067f43fbe1e9d980e33e38eb623
  fromSpine2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("fromSpine"#) -}
78ca2b31ce9bafaf22adc80284e1a401
  generic :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.generic1) -}
1592696612520d46c982f9c5dc420b87
  generic1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.generic2) -}
f98e04d3ed1697e29deb311b698b7b38
  generic2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Generic"#) -}
ad63c4c1176f92a3070a12ee11f0bdf9
  greaterThan :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.greaterThan1) -}
95a1288d8effc3ca3b414edbb666f070
  greaterThan1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.greaterThan2) -}
ef10db992e24841225b27094e03cf623
  greaterThan2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("greaterThan"#) -}
cd2e59723a03a7ada96425fff59635f4
  greaterThanOrEq :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.greaterThanOrEq1) -}
2ae8406a694bcdccfe45f4160c008181
  greaterThanOrEq1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.greaterThanOrEq2) -}
eb09329eecee74938a1d1cd507c83709
  greaterThanOrEq2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("greaterThanOrEq"#) -}
f0e2af4831196ce285081ad63f77edb4
  heytingAlgebraBoolean :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.heytingAlgebraBoolean1) -}
114378c50befcc052b924aa9a782a572
  heytingAlgebraBoolean1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.heytingAlgebraBoolean2) -}
f279342a5e5a596401aaa2ed19988fbd
  heytingAlgebraBoolean2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("heytingAlgebraBoolean"#) -}
8ab3cdf0a4367c672c8c9fc3695cb0a8
  kindBoolean :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.kindBoolean1) -}
2f581c79f6b08c2d9f96c40681fdaf1c
  kindBoolean1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.$bPrimBoolean4) -}
5772fe8489f4cfc8dd925d792c8f32d3
  kindOrdering :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.kindOrdering1) -}
339295a4e7a83cf122d3d4f3e6746d49
  kindOrdering1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.$bPrimOrdering4) -}
6f6decd2c797aa973a3b8e8c49916dc8
  kindRowList :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.kindRowList1) -}
69b8b0679710a43f99b9f83a5f356c18
  kindRowList1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.$bPrimRowList4) -}
155e79391204f531bb1866fb28a28a5f
  lessThan :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.lessThan1) -}
39bbbf86453e80d81416256a1a7d00af
  lessThan1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.lessThan2) -}
03d5f5e53921e107612481a6960fed1f
  lessThan2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("lessThan"#) -}
24e0256d4d79ba00a0a0cd681ba29e17
  lessThanOrEq :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.lessThanOrEq1) -}
b2d34fd24b837b6f9754e71e5b4b8f21
  lessThanOrEq1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.lessThanOrEq2) -}
42b6c92b0d4306af1ca8051f893b363e
  lessThanOrEq2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("lessThanOrEq"#) -}
e6792226862548371fcf7a3dc6d72c0c
  main :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.main1) -}
f2e85da55af1a7fde372035450014e2d
  main1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.main2) -}
c497ffbf6a0dc116cd13d1e3779b7017
  main2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
6e9cda8a115f1816471826d875818d39
  map :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.map1) -}
ceecee89ca067e498041f4a8b8976a6e
  map1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.map2) -}
b90b2c07d711a70d0a608087bab0b95b
  map2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("map"#) -}
ae996f9991512441af772f0153456aaf
  mkEffFn :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.mkEffFn1) -}
589d2cecd8ec069436c3675d843fbe15
  mkEffFn1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.mkEffFn2) -}
c69c88d5ceeb4fc3b00e4644fedae497
  mkEffFn2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("mkEffFn"#) -}
c4c8b2e4e4b7731b1506fd5764404656
  mkEffectFn :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.mkEffectFn1) -}
dcb1366e5bf40cddf0ef2ef2f661cbc1
  mkEffectFn1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.mkEffectFn2) -}
d636f8160efe3a89af23b87d90c05aa8
  mkEffectFn2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("mkEffectFn"#) -}
353f0eaa5442d7194b181f648c56f2d2
  mkFn :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.mkFn1) -}
0caaacdc1d1271a78b2cd704b4d3a09d
  mkFn1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.mkFn2) -}
6bc705b0220880938af831a748675bb6
  mkFn2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("mkFn"#) -}
32e753eaea0d77f63504bfe365162490
  mod :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.mod1) -}
396f556f7f1c31e244124d85ed0962b7
  mod1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.mod2) -}
1f8ae9f2a46bf94f134536fe2a78acb1
  mod2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("mod"#) -}
64fa68ea6043c0b156184361cf8cd356
  modifySTRef :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.modifySTRef1) -}
0721623110e26791dbadbd3e3d5aaff3
  modifySTRef1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.modifySTRef2) -}
ed26f748cbaa374af770146503bd8427
  modifySTRef2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("modify"#) -}
fb600d6a4ee6fc6b178672ec8ca63524
  moduleBoolean :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.kindBoolean1) -}
d012d994d3d9a7b11689f1c13508fd48
  moduleOrdering :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.kindOrdering1) -}
bc0c40c2c88e76c7666b335dc9187a48
  moduleRow :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.moduleRow1) -}
a7eb0db5370bdd6ab6b74d36aa6c161b
  moduleRow1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.$bPrimRow4) -}
a765432eeaca44befb81da7505b868e9
  moduleRowList :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.kindRowList1) -}
d28141499c7221ef4bf17c1379213adf
  moduleSymbol :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.moduleSymbol1) -}
933efd26044e3db3453cf967d9839133
  moduleSymbol1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.$bDataSymbol4) -}
555433f9b05715f20c60cca7ba996ec0
  moduloSemiringInt :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.moduloSemiringInt1) -}
db92dc5d1c2125888cde1a685d2dcd95
  moduloSemiringInt1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.moduloSemiringInt2) -}
ec26c100f8ae7a61d50097338ce758a0
  moduloSemiringInt2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("moduloSemiringInt"#) -}
2a92e024b722eabee94075f6fa649d75
  moduloSemiringNumber :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.moduloSemiringNumber1) -}
9b1b5244a7ee28c316539305195795e4
  moduloSemiringNumber1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.moduloSemiringNumber2) -}
622bac96985fca9628c2db1a1cefda8e
  moduloSemiringNumber2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("moduloSemiringNumber"#) -}
03a7c1d6db30329a74b6f814ff9dba42
  mul :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.mul1) -}
bacb3bc6944dba2dee4060672e22bf8c
  mul1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.mul2) -}
6c51455ffb767df7d68da8944c7ee15e
  mul2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("mul"#) -}
f20a91ad9d930a40924d2c7851e42a34
  negate :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.negate1) -}
97b4f352345b769db67e36e036276eb2
  negate1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.negate2) -}
b1a37e54f72b4fd978f90aaa65121b4c
  negate2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("negate"#) -}
d2428b86648322c7e94071d82dd86b0d
  newSTRef :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.newSTRef1) -}
5090d30521ab75956f1b36583de339d4
  newSTRef1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.newSTRef2) -}
621c9505b1424a3718a965d9fd29dba4
  newSTRef2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("new"#) -}
3a61f0b021f4103bb802de2382a3034e
  not :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.not1) -}
27cd60ccab8ed54925e0c3af76ebf7ee
  not1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.not2) -}
9e3298cc7c0ba235c120c402ca607c7b
  not2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("not"#) -}
4c79ba1d8cc950390aeca62574cd5aa9
  notEq :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.notEq1) -}
b7a0b4d4d30c5e8915a3e84a97666ed2
  notEq1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.notEq2) -}
b9c119bcdb071655760fc6d4e6bcae64
  notEq2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("notEq"#) -}
1c4a21fb959ddebef28df9610df4da58
  one :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.one1) -}
2607e88bff3c60f987de649ed9832b29
  one1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.one2) -}
43c5786f724a083b9de07649ec62bfca
  one2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("one"#) -}
ba667d8c2325fe01daaf239bc6477711
  or :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.or1) -}
278f7b91e814fa51d64d970ecc2972c2
  or1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.or2) -}
e7c91a2ebd40b6676916d97ce12b7212
  or2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("or"#) -}
cb44df3e45ec19548de25c893e123039
  ordBoolean :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.ordBoolean1) -}
7189e21204ef6427af3ae8e3a3a65faa
  ordBoolean1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.ordBoolean2) -}
15cf0b8d495cf77911ca42e3c6d5ee56
  ordBoolean2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ordBoolean"#) -}
496cef7f2afb795c7cc69eb474fc16d9
  ordChar :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.ordChar1) -}
bfa216f8c69218e892d6afdfe4218708
  ordChar1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.ordChar2) -}
aa7a60e83370eb4907bb72f3db343152
  ordChar2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ordChar"#) -}
233495a6d0530257d6f3b1c7529ac5d7
  ordInt :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.ordInt1) -}
16c56901f3a02436ae3598fbb9f6d4cc
  ordInt1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.ordInt2) -}
0180a9c6536fe0a8320ac577a0c9a22c
  ordInt2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ordInt"#) -}
3816ac7f4c66e6392f8014c48c7460ec
  ordNumber :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.ordNumber1) -}
80e66fb21c50a713a8cae656c403a55f
  ordNumber1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.ordNumber2) -}
f1decd54f97d87881e4dd9746ebac40a
  ordNumber2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ordNumber"#) -}
26b2376a5c1879d5a631cacbbe84ec15
  ordString :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.ordString1) -}
2987b0aeb9712c42f9dec8fe849701ad
  ordString1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.ordString2) -}
22d3880dce3cc0edb36b5bd758d20aae
  ordString2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ordString"#) -}
770b5e6a4941b7c16f7c49f3e214a330
  orderingEQ ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName)
  {- Strictness: m,
     Unfolding: (Language.PureScript.Names.Qualified
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.TypeName)
                   Language.PureScript.Constants.orderingEQ3
                   Language.PureScript.Constants.orderingEQ1
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.TypeName>_P))) -}
37aa974dfef8c5de9be69ce54ae2bd12
  orderingEQ1 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Constants.orderingEQ2) -}
854ca1d812d5d27ab47157fb3f023b0c
  orderingEQ2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("EQ"#) -}
8ceffcd01b64db40d923b304410d575b
  orderingEQ3 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ Language.PureScript.Names.ModuleName
                   Language.PureScript.Constants.$bPrimOrdering1
                     `cast`
                   (Sym (Language.PureScript.Names.N:ModuleName[0]))) -}
47b1d9d81d93e366bbf7b5ca80587e1f
  orderingGT ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName)
  {- Strictness: m,
     Unfolding: (Language.PureScript.Names.Qualified
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.TypeName)
                   Language.PureScript.Constants.orderingEQ3
                   Language.PureScript.Constants.orderingGT1
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.TypeName>_P))) -}
dbecc6f3f1dd4488793139953f66ed7f
  orderingGT1 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Constants.orderingGT2) -}
3f714fbf330e3410a34f80c454b130fc
  orderingGT2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("GT"#) -}
4e2ea47557b0ef685c1bc03d97142381
  orderingLT ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName)
  {- Strictness: m,
     Unfolding: (Language.PureScript.Names.Qualified
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.TypeName)
                   Language.PureScript.Constants.orderingEQ3
                   Language.PureScript.Constants.orderingLT1
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.TypeName>_P))) -}
8c88a800012e3c239a005c24f1f073bb
  orderingLT1 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Constants.orderingLT2) -}
16810a6180f1e52528e9e348cc616db2
  orderingLT2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("LT"#) -}
1710387d042061a774de7253cc5132c7
  partial :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.partial1) -}
2278e9ae6fda8c40420b1e0329321dc7
  partial1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.$bPartial2) -}
11bf7b4478d4d3990999f71ced356339
  partialUnsafe :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.partialUnsafe1) -}
b30ad88874d1af5f07d55ed47ff04b3b
  partialUnsafe1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.partialUnsafe2) -}
b525833ff6c8f7bbced766454b8b60e5
  partialUnsafe2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Partial_Unsafe"#) -}
58d301a2c21fb8c89baf7286b83fb4c8
  prelude :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.prelude1) -}
0d768996611cd01a820a99c89ae642e8
  prelude1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.prelude2) -}
8398d96f4a24f62bdf5dfab209242c07
  prelude2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Prelude"#) -}
aafaa42bb1179c6de3b49805eaa34c53
  prim :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.prim1) -}
4dc2985bceaeabbc44cdc9c21a80d37c
  prim1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.$bFail9) -}
357fd5e56d4f01a182cfde64b7dbba2c
  primModules :: [Language.PureScript.Names.ModuleName]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Language.PureScript.Names.ModuleName
                   Language.PureScript.Constants.$bPartial4
                     `cast`
                   (Sym (Language.PureScript.Names.N:ModuleName[0]))
                   Language.PureScript.Constants.primModules1) -}
645ed9f6c5eb64df736cd153a1df36bd
  primModules1 :: [Language.PureScript.Names.ModuleName]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Language.PureScript.Names.ModuleName
                   Language.PureScript.Constants.$bPrimBoolean1
                     `cast`
                   (Sym (Language.PureScript.Names.N:ModuleName[0]))
                   Language.PureScript.Constants.primModules2) -}
f43a2cb4e8eee0c56f7de5822e7139e2
  primModules2 :: [Language.PureScript.Names.ModuleName]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Language.PureScript.Names.ModuleName
                   Language.PureScript.Constants.$bPrimOrdering1
                     `cast`
                   (Sym (Language.PureScript.Names.N:ModuleName[0]))
                   Language.PureScript.Constants.primModules3) -}
9ab9b27b3137319e235f8889bcf764cd
  primModules3 :: [Language.PureScript.Names.ModuleName]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Language.PureScript.Names.ModuleName
                   Language.PureScript.Constants.$bPrimRow1
                     `cast`
                   (Sym (Language.PureScript.Names.N:ModuleName[0]))
                   Language.PureScript.Constants.primModules4) -}
b17bea7a096ecf4931c6489d76920f6b
  primModules4 :: [Language.PureScript.Names.ModuleName]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Language.PureScript.Names.ModuleName
                   Language.PureScript.Constants.$bPrimRowList1
                     `cast`
                   (Sym (Language.PureScript.Names.N:ModuleName[0]))
                   Language.PureScript.Constants.primModules5) -}
8a456708a4e9b83626ef1d63a4048b7e
  primModules5 :: [Language.PureScript.Names.ModuleName]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Language.PureScript.Names.ModuleName
                   Language.PureScript.Constants.$bPrimSymbol1
                     `cast`
                   (Sym (Language.PureScript.Names.N:ModuleName[0]))
                   Language.PureScript.Constants.primModules6) -}
c483ef54e1b0b1c2a74fbba2f0bcb23f
  primModules6 :: [Language.PureScript.Names.ModuleName]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Language.PureScript.Names.ModuleName
                   Language.PureScript.Constants.$bFail4
                     `cast`
                   (Sym (Language.PureScript.Names.N:ModuleName[0]))
                   (GHC.Types.[] @ Language.PureScript.Names.ModuleName)) -}
e290fc9e4a6f484003b056e20698dd49
  pure' :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.pure'1) -}
fdfd106a5c5f6ba76e85c5fa5c6fa093
  pure'1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.pure'2) -}
8be97cd967c3cfe76b462d0894f8a4d5
  pure'2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("pure"#) -}
158a5d92821da7adb01da5f858602d71
  readSTRef :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.readSTRef1) -}
604018f142d409991a4fe79361eb200c
  readSTRef1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.readSTRef2) -}
80923a77979ac73ea601db85b5bea430
  readSTRef2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("read"#) -}
a1f64df538f4a2b38b83052955b4c0f5
  return :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.return1) -}
97400e54295f2de60fd6697a0685a6d1
  return1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.return2) -}
c3b7bc5b59f79409deb6d24e805334b1
  return2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("return"#) -}
93276b05dc5f71d920ba8655a1813e9a
  returnEscaped :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.returnEscaped1) -}
8f12f4ba4c7f710dd23595b3c87f647c
  returnEscaped1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.returnEscaped2) -}
ac88227cc7f1637ac834f3b91471ddc2
  returnEscaped2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("$return"#) -}
67c4a20ce55c983a5c7466d551c81c7f
  ringInt :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.ringInt1) -}
d9e2c49ee961f9520d6a211ad4183f65
  ringInt1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.ringInt2) -}
488450b44cbf38c8ab9626ac0cf9a7fa
  ringInt2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ringInt"#) -}
2a25986bd0bef4b5bca19fa1db451d47
  ringNumber :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.ringNumber1) -}
86e77ca2fefa8bc2145bbce355a5159d
  ringNumber1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.ringNumber2) -}
6adc64f018b13e050fb2e5b233ae12f8
  ringNumber2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ringNumber"#) -}
57d1d908bc26cf635aab6fddee198350
  runEffFn :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.runEffFn1) -}
6645662af17c93e7d23c6de51ea46227
  runEffFn1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.runEffFn2) -}
5ba27f0b0aa768cc6135d04492cf020c
  runEffFn2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("runEffFn"#) -}
9cededbaf4e4bddcb88920e28d0561fe
  runEffectFn :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.runEffectFn1) -}
6122adea3e4afd5e0790029f190dec36
  runEffectFn1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.runEffectFn2) -}
737e278821d4fa7d8d8640f887594fc8
  runEffectFn2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("runEffectFn"#) -}
53d53c8c91dbf8972c0720e289c65935
  runFn :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.runFn1) -}
275044074009d889ba2ee4199627f88a
  runFn1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.runFn2) -}
5e1fc7c364170619fb3c84741fb3d939
  runFn2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("runFn"#) -}
26d01df093e99e4c51541ab182b734a7
  runST :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.runST1) -}
c7fbb9337ee0ff21291d79c511b22223
  runST1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.runST2) -}
b7a6556e1ead63c9b186178f1253321c
  runST2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("run"#) -}
519cb884fef1c0e6ceda4c1f2d76cc19
  semigroupString :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.semigroupString1) -}
e7ac890a2ab9a367ebd40445461714ed
  semigroupString1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.semigroupString2) -}
1bd4a212bd68f2f4699d75541bde6a80
  semigroupString2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("semigroupString"#) -}
6fcbb2908945fcb1888d06f3d5147030
  semigroupoidFn :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.semigroupoidFn1) -}
d202feee2ac71a2976e1d3f17aba6c8d
  semigroupoidFn1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.semigroupoidFn2) -}
d733158d61cde506c454672777e7caa2
  semigroupoidFn2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("semigroupoidFn"#) -}
cba7c0c57da2d3daeefb67679f072d3c
  semiringInt :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.semiringInt1) -}
1d33e95c2af0ee8486281b5b16e3edcb
  semiringInt1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.semiringInt2) -}
2f808569d7ede66f295ba4d796747a79
  semiringInt2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("semiringInt"#) -}
8acb95354fc73236590d44765ead5b65
  semiringNumber :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.semiringNumber1) -}
991b962e1acb7ca01817c382e30e6323
  semiringNumber1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.semiringNumber2) -}
2488d5240fd61ea96839c4a845340b1a
  semiringNumber2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("semiringNumber"#) -}
16067eb5693809f6d661037b729749af
  shl :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.shl1) -}
d4e3384654f0f260d97feb46ce28119b
  shl1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.shl2) -}
a7de789bf9a09de43537ec6b58ee280a
  shl2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("shl"#) -}
5b94dbd32a75da0cf7bae5da72ba3056
  shr :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.shr1) -}
4e1bdf8cc8fd40600c37793b58b1b89b
  shr1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.shr2) -}
a0e5706e8069e51d62ccb991066653bf
  shr2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("shr"#) -}
3b69ca6e2077714ff909d3403baada28
  st :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.st1) -}
c6103dc6b7a989a59f6787ae47321c2c
  st1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.st2) -}
9a907802c7af3b5f5f8de0caf391b555
  st2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Control_Monad_ST_Internal"#) -}
37a2cb78cbef8f3e47e30fecbe785458
  stDictionaries :: Language.PureScript.Constants.EffectDictionaries
  {- Strictness: m,
     Unfolding: (Language.PureScript.Constants.EffectDictionaries
                   Language.PureScript.Constants.stDictionaries9
                     `cast`
                   (Sym (Language.PureScript.PSString.N:PSString[0]))
                   Language.PureScript.Constants.stDictionaries7
                     `cast`
                   (Sym (Language.PureScript.PSString.N:PSString[0]))
                   Language.PureScript.Constants.stDictionaries5
                     `cast`
                   (Sym (Language.PureScript.PSString.N:PSString[0]))
                   Language.PureScript.Constants.stDictionaries3
                     `cast`
                   (Sym (Language.PureScript.PSString.N:PSString[0]))
                   Language.PureScript.Constants.stDictionaries1
                     `cast`
                   (Sym (Language.PureScript.PSString.N:PSString[0]))) -}
dcc5b9af522bd02ac3e1cb3a6a4413b9
  stDictionaries1 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   (GHC.CString.unpackCString#
                      Language.PureScript.Constants.stDictionaries2)) -}
12a906f89b62551747bf7a24b55ff003
  stDictionaries10 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("applicativeST"#) -}
405649a2aaf1c5ebf750d4f305750b14
  stDictionaries2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("until"#) -}
00c44931f11df57d7e4bd74a119568e4
  stDictionaries3 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   (GHC.CString.unpackCString#
                      Language.PureScript.Constants.stDictionaries4)) -}
ccd511b02bf0cafea889549ee43c48ca
  stDictionaries4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("while"#) -}
3813dea84770dbaf924de2662f02493c
  stDictionaries5 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   (GHC.CString.unpackCString#
                      Language.PureScript.Constants.stDictionaries6)) -}
7ae19a84a8fdf48da6df663a2d6358db
  stDictionaries6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("monadST"#) -}
ce3b61d1404497ea58fb1110cea45317
  stDictionaries7 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   (GHC.CString.unpackCString#
                      Language.PureScript.Constants.stDictionaries8)) -}
2097b1019b22887776fca690f97d0475
  stDictionaries8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("bindST"#) -}
62ed166cbbdd5865ae5816268a4dedaf
  stDictionaries9 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   (GHC.CString.unpackCString#
                      Language.PureScript.Constants.stDictionaries10)) -}
239737cd9a5c1e73ea77da55949c3dc1
  stRefValue :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.stRefValue1) -}
9b0f7a9b954c61194d0ad5be821d51a5
  stRefValue1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.stRefValue2) -}
0308eb99b45af67fd5874654bfc6a202
  stRefValue2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("value"#) -}
e0fcaf992855b3514c7e23756e4a6782
  sub :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.sub1) -}
8911447c966ac14a4a93907bbe2794f9
  sub1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.sub2) -}
c32ae3c4a12ae285d518d32925cbc27a
  sub2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("sub"#) -}
c71db3b329a5b308dfa153200af8a77c
  symbol :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.moduleSymbol1) -}
87b056eb62b05d1ccf45961c1eb3a5f2
  toSignature :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.toSignature1) -}
fbe8bdc3d0b4e539539a880629c145ca
  toSignature1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.toSignature2) -}
084fe80884b7cf7ab11f41271a4e2a91
  toSignature2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("toSignature"#) -}
e065495b973f1050f797d59c78c1e9fa
  toSpine :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.toSpine1) -}
1d59ba30ed3695dd3356a71aeb887e00
  toSpine1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.toSpine2) -}
18b935d0e84882aad05f73181834e28a
  toSpine2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("toSpine"#) -}
6ef390262a0ee3df612a942b1f7245ad
  top :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.top1) -}
8e9143331a7703791645554bd05b7134
  top1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.top2) -}
6fa0e6c37a22e38c1aa6d47f67f66e12
  top2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("top"#) -}
6124b5b3795490aba7d42c6d56224669
  typ :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.typ1) -}
3d22aa359ce52bccf578722fabde495a
  typ1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.typ2) -}
ae5e076ebbafcb7d4ba667ff353a8af1
  typ2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Type"#) -}
5c420dce614f2b372e246965fff0c014
  typeError :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.typeError1) -}
2abd71e67121ed660189652419bb067b
  typeError1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.$bFail7) -}
b36b119b983e0cdb9453c1f408720756
  undefined :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.undefined1) -}
7f29015a4c572f9b1273fd26325d6ce5
  undefined1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.undefined2) -}
eedb824058cf40477353d098fb90e29a
  undefined2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("undefined"#) -}
37f1ee5746c88df947a9f66aad77d1df
  unit :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.unit1) -}
67f25306d8bd970537c69f31f22f0c25
  unit1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.unit2) -}
fd20c7a94364385570fc26b89eee7ba9
  unit2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("unit"#) -}
02c046c873fa7a0a2c1ce48e006fd86e
  unsafeCoerce :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.unsafeCoerce1) -}
477521aca3353a609cb2af988ad2970d
  unsafeCoerce1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.unsafeCoerce2) -}
bb3803f98389f852d89ad3f89b8fbb3c
  unsafeCoerce2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Unsafe_Coerce"#) -}
63460ed21d334e9ff0d0df65fbb194b6
  unsafeCoerceFn :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.unsafeCoerceFn1) -}
a824261d87da766918272d69e4a4ee5e
  unsafeCoerceFn1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.unsafeCoerceFn2) -}
fde9228bf1b38c49199c3c63df35a072
  unsafeCoerceFn2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("unsafeCoerce"#) -}
c3c6cc9bcd0b8f8188d30325114b9f29
  unsafeIndex :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.unsafeIndex1) -}
6b1dfc8accd400750667e802591b6175
  unsafeIndex1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.unsafeIndex2) -}
6d0ef340c464cf3b71705b1813418e56
  unsafeIndex2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("unsafeIndex"#) -}
57a2402a4fe19c5d2f262f447a276a86
  unsafePartial :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.unsafePartial1) -}
fc2aae6b70b7695306448e956c2ee220
  unsafePartial1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.unsafePartial2) -}
e44d7099a24b4af122da41000c42c563
  unsafePartial2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("unsafePartial"#) -}
b0a536dbe80dae08d4989b3651d30922
  writeSTRef :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.writeSTRef1) -}
aff0625d97060a0ad15ca79f45c60b83
  writeSTRef1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.writeSTRef2) -}
8b07bcb68d255e09d4995857c40eac6c
  writeSTRef2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("write"#) -}
754fd6ac744b83d50a46a4c73fb52b27
  xor :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.xor1) -}
46f56afafcdd07acf749218c94fefe89
  xor1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.xor2) -}
989623c9c429fcf4b3e7cb5acf0e7fe3
  xor2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("xor"#) -}
e3308d06e8b90b23ebc4122b0c5c4945
  zero :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.zero1) -}
0bb86128192b863c9d5769aeb826322e
  zero1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.zero2) -}
adb90d8c4f66257d3c24a93e25cce29c
  zero2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("zero"#) -}
98f0b811d01035bc61304b20846c30bd
  zshr :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.zshr1) -}
185bb34234775a0760082d3d32724714
  zshr1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.zshr2) -}
138ea2e7417f6b223b07f6787e641a5f
  zshr2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("zshr"#) -}
1073aec2f0f46e772c0754a0c2565571
  (||) :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.||1) -}
bd2015e890bf1d840902b7ca6072b6af
  ||1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.||2) -}
1b578a36bc148269e79e077686c5b14d
  ||2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("||"#) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

