
==================== FINAL INTERFACE ====================
2018-11-30 19:26:16.140608 UTC

interface purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Constants 8043
  interface hash: a81fb39aa718fe422bd4a1c490a843f5
  ABI hash: d290cccb0db8657cab5f1253ab0da1ee
  export-list hash: cd83a0f5b6591e5c66c598e34359260d
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 2ae478d21823b7c739b1b08c46262eb0
  opt_hash: 2c98c95d41c045ae9c2fb565ec8aabc6
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Language.PureScript.Constants.#
  Language.PureScript.Constants.$
  Language.PureScript.Constants.%
  Language.PureScript.Constants.&&
  Language.PureScript.Constants.*
  Language.PureScript.Constants.+
  Language.PureScript.Constants.++
  Language.PureScript.Constants.-
  Language.PureScript.Constants./
  Language.PureScript.Constants./=
  Language.PureScript.Constants.<
  Language.PureScript.Constants.<<<
  Language.PureScript.Constants.<=
  Language.PureScript.Constants.<>
  Language.PureScript.Constants.==
  Language.PureScript.Constants.>
  Language.PureScript.Constants.>=
  Language.PureScript.Constants.>>=
  Language.PureScript.Constants.>>>
  Language.PureScript.Constants.ControlBind
  Language.PureScript.Constants.DataSymbol
  Language.PureScript.Constants.Discard
  Language.PureScript.Constants.Fail
  Language.PureScript.Constants.IsSymbol
  Language.PureScript.Constants.Partial
  Language.PureScript.Constants.Prim
  Language.PureScript.Constants.PrimOrdering
  Language.PureScript.Constants.PrimRow
  Language.PureScript.Constants.PrimRowList
  Language.PureScript.Constants.PrimSymbol
  Language.PureScript.Constants.PrimTypeError
  Language.PureScript.Constants.Record
  Language.PureScript.Constants.RowCons
  Language.PureScript.Constants.RowLacks
  Language.PureScript.Constants.RowListCons
  Language.PureScript.Constants.RowListNil
  Language.PureScript.Constants.RowNub
  Language.PureScript.Constants.RowToList
  Language.PureScript.Constants.RowUnion
  Language.PureScript.Constants.SymbolAppend
  Language.PureScript.Constants.SymbolCompare
  Language.PureScript.Constants.SymbolCons
  Language.PureScript.Constants.Warn
  Language.PureScript.Constants.add
  Language.PureScript.Constants.and
  Language.PureScript.Constants.append
  Language.PureScript.Constants.apply
  Language.PureScript.Constants.applyFlipped
  Language.PureScript.Constants.bind
  Language.PureScript.Constants.booleanAlgebraBoolean
  Language.PureScript.Constants.bottom
  Language.PureScript.Constants.boundedBoolean
  Language.PureScript.Constants.compare
  Language.PureScript.Constants.compare1
  Language.PureScript.Constants.complement
  Language.PureScript.Constants.compose
  Language.PureScript.Constants.composeFlipped
  Language.PureScript.Constants.conj
  Language.PureScript.Constants.controlApplicative
  Language.PureScript.Constants.controlBind
  Language.PureScript.Constants.controlMonadEffUncurried
  Language.PureScript.Constants.controlSemigroupoid
  Language.PureScript.Constants.dataArray
  Language.PureScript.Constants.dataBounded
  Language.PureScript.Constants.dataEq
  Language.PureScript.Constants.dataEuclideanRing
  Language.PureScript.Constants.dataFunction
  Language.PureScript.Constants.dataFunctionUncurried
  Language.PureScript.Constants.dataHeytingAlgebra
  Language.PureScript.Constants.dataIntBits
  Language.PureScript.Constants.dataOrd
  Language.PureScript.Constants.dataRing
  Language.PureScript.Constants.dataSemigroup
  Language.PureScript.Constants.dataSemiring
  Language.PureScript.Constants.discard
  Language.PureScript.Constants.discardUnitDictionary
  Language.PureScript.Constants.disj
  Language.PureScript.Constants.div
  Language.PureScript.Constants.doc
  Language.PureScript.Constants.eff
  Language.PureScript.Constants.effDictionaries
  Language.PureScript.Constants.effect
  Language.PureScript.Constants.effectDictionaries
  Language.PureScript.Constants.effectUncurried
  Language.PureScript.Constants.eq
  Language.PureScript.Constants.eq1
  Language.PureScript.Constants.eqBoolean
  Language.PureScript.Constants.eqChar
  Language.PureScript.Constants.eqInt
  Language.PureScript.Constants.eqNumber
  Language.PureScript.Constants.eqString
  Language.PureScript.Constants.euclideanRingInt
  Language.PureScript.Constants.euclideanRingNumber
  Language.PureScript.Constants.fromSpine
  Language.PureScript.Constants.generic
  Language.PureScript.Constants.greaterThan
  Language.PureScript.Constants.greaterThanOrEq
  Language.PureScript.Constants.heytingAlgebraBoolean
  Language.PureScript.Constants.kindOrdering
  Language.PureScript.Constants.kindRowList
  Language.PureScript.Constants.lessThan
  Language.PureScript.Constants.lessThanOrEq
  Language.PureScript.Constants.main
  Language.PureScript.Constants.map
  Language.PureScript.Constants.mkEffFn
  Language.PureScript.Constants.mkEffectFn
  Language.PureScript.Constants.mkFn
  Language.PureScript.Constants.mod
  Language.PureScript.Constants.modifySTRef
  Language.PureScript.Constants.moduleOrdering
  Language.PureScript.Constants.moduleRow
  Language.PureScript.Constants.moduleRowList
  Language.PureScript.Constants.moduleSymbol
  Language.PureScript.Constants.moduloSemiringInt
  Language.PureScript.Constants.moduloSemiringNumber
  Language.PureScript.Constants.mul
  Language.PureScript.Constants.negate
  Language.PureScript.Constants.newSTRef
  Language.PureScript.Constants.not
  Language.PureScript.Constants.notEq
  Language.PureScript.Constants.one
  Language.PureScript.Constants.or
  Language.PureScript.Constants.ordBoolean
  Language.PureScript.Constants.ordChar
  Language.PureScript.Constants.ordInt
  Language.PureScript.Constants.ordNumber
  Language.PureScript.Constants.ordString
  Language.PureScript.Constants.orderingEQ
  Language.PureScript.Constants.orderingGT
  Language.PureScript.Constants.orderingLT
  Language.PureScript.Constants.partial
  Language.PureScript.Constants.partialUnsafe
  Language.PureScript.Constants.prelude
  Language.PureScript.Constants.prim
  Language.PureScript.Constants.primModules
  Language.PureScript.Constants.pure'
  Language.PureScript.Constants.readSTRef
  Language.PureScript.Constants.return
  Language.PureScript.Constants.returnEscaped
  Language.PureScript.Constants.ringInt
  Language.PureScript.Constants.ringNumber
  Language.PureScript.Constants.runEffFn
  Language.PureScript.Constants.runEffectFn
  Language.PureScript.Constants.runFn
  Language.PureScript.Constants.runST
  Language.PureScript.Constants.semigroupString
  Language.PureScript.Constants.semigroupoidFn
  Language.PureScript.Constants.semiringInt
  Language.PureScript.Constants.semiringNumber
  Language.PureScript.Constants.shl
  Language.PureScript.Constants.shr
  Language.PureScript.Constants.st
  Language.PureScript.Constants.stDictionaries
  Language.PureScript.Constants.stRefValue
  Language.PureScript.Constants.sub
  Language.PureScript.Constants.symbol
  Language.PureScript.Constants.toSignature
  Language.PureScript.Constants.toSpine
  Language.PureScript.Constants.top
  Language.PureScript.Constants.typ
  Language.PureScript.Constants.typeError
  Language.PureScript.Constants.undefined
  Language.PureScript.Constants.unit
  Language.PureScript.Constants.unsafeCoerce
  Language.PureScript.Constants.unsafeCoerceFn
  Language.PureScript.Constants.unsafeIndex
  Language.PureScript.Constants.unsafePartial
  Language.PureScript.Constants.writeSTRef
  Language.PureScript.Constants.xor
  Language.PureScript.Constants.zero
  Language.PureScript.Constants.zshr
  Language.PureScript.Constants.||
  Language.PureScript.Constants.EffectDictionaries{Language.PureScript.Constants.EffectDictionaries edApplicativeDict edBindDict edMonadDict edUntil edWhile}
module dependencies: Control.Monad.Supply
                     Control.Monad.Supply.Class Language.PureScript.Names
                     Language.PureScript.PSString
package dependencies: aeson-1.3.1.1 array-0.5.2.0
                      attoparsec-0.13.2.2 base-4.11.1.0 base-compat-0.10.4 binary-0.8.5.1
                      bytestring-0.10.8.2 containers-0.5.11.0 deepseq-1.4.3.0
                      dlist-0.8.0.4 ghc-boot-th-8.4.3 ghc-prim-0.5.2.0 hashable-1.2.7.0
                      integer-gmp-1.0.2.0 integer-logarithms-1.0.2.1 mtl-2.2.2
                      pretty-1.1.3.6 primitive-0.6.3.0 random-1.1 scientific-0.3.6.2
                      tagged-0.8.5 template-haskell-2.13.0.0 text-1.2.3.0
                      th-abstraction-0.2.8.0 time-1.8.0.2 time-locale-compat-0.1.1.4
                      transformers-0.5.5.0 unordered-containers-0.2.9.0 uuid-types-1.0.3
                      vector-0.12.0.1
orphans: attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         vector-0.12.0.1:Data.Vector.Unboxed
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.0:Data.Text.Lazy
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.5.0:Control.Monad.Trans.Error
         text-1.2.3.0:Data.Text binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: aeson-1.3.1.1:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         dlist-0.8.0.4:Data.DList ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Names
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.PSString
                         tagged-0.8.5:Data.Tagged
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
                         th-abstraction-0.2.8.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  base-4.11.1.0:Data.String 1b97cff5f9627e73898d75997a9ccf7f
import  -/  base-compat-0.10.4:Prelude.Compat bb6796186ed35a1d09dc34362a3fc27e
import  -/  Language.PureScript.Names b3bf151840f3e8f2eb61eff186432886
  exports: f7f3503d20957194bda83c16bb5f1288
  ClassName e69348bcf8c43a2174540a1d5983bfaa
  ModuleName 0cb2c8b6c90c347a41315bf0e0fd925c
  ModuleName 5a70062bbdf29e6dc659ad8bf5326b50
  ProperName 9eb330c84db102abf2d0f2652fe4a144
  ProperName 29f101e190cc99df85623423972e606f
  Qualified d600a7f01c8203cf5504999de99c923c
  Qualified 5a70062bbdf29e6dc659ad8bf5326b50
  TypeName da42c92f73f4f363c63ecaf77b6335b9
import  -/  Language.PureScript.PSString 29492f728997dffadb84d1bf161f2ce4
  exports: 41608caf7cc5b51f34de641c9952ab6d
  PSString 0c2d9eac7fc8cff2b3ca27abf6053439
db9f6703533144596e3cf1a888bf7d43
  (#) :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.#1) -}
e7cd99768d52b6019e09ab512ec66cfb
  #1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.#2) -}
0b79300d3646af435f31152a7666621a
  #2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("#"#) -}
279b879ddbbabe3a5b603829e7b8d95e
  ($) :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.$1) -}
bf81ac6d58d009eb03595aca3d20a3f9
  $1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.$2) -}
d6fe6036986a6385b329039e4969038f
  $2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("$"#) -}
340ed5222aebf0dcf018dfaacc170196
  $bControlBind :: Language.PureScript.Names.ModuleName
  {- Strictness: m2,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Constants.$bControlBind1
                  `cast`
                (Sym (Language.PureScript.Names.N:ModuleName[0])) -}
08fa2c507066c6661dda5ca858b7cfb7
  $bControlBind1 ::
    [Language.PureScript.Names.ProperName
       'Language.PureScript.Names.Namespace]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.Namespace)
                   Language.PureScript.Constants.$bControlBind5
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.Namespace>_P))
                   Language.PureScript.Constants.$bControlBind2) -}
0da1c1043f50264ec3bcb016ceab2f14
  $bControlBind2 ::
    [Language.PureScript.Names.ProperName
       'Language.PureScript.Names.Namespace]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.Namespace)
                   Language.PureScript.Constants.$bControlBind3
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.Namespace>_P))
                   (GHC.Types.[]
                      @ (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.Namespace))) -}
b934b677889b4d9880751bff95aeb7bf
  $bControlBind3 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Constants.$bControlBind4) -}
97e7ccbe757a698e6c7697acfa7d335d
  $bControlBind4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Bind"#) -}
33078954158f6150eee5feb87fd6c4a7
  $bControlBind5 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Constants.$bControlBind6) -}
1499998da95d8fa575a8997139ba7a44
  $bControlBind6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Control"#) -}
0daabe99ab17e1bb9f3b61afd23c7a78
  $bDataSymbol :: Language.PureScript.Names.ModuleName
  {- Strictness: m2,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Constants.$bDataSymbol1
                  `cast`
                (Sym (Language.PureScript.Names.N:ModuleName[0])) -}
64a5ff2876304030427544fa83265028
  $bDataSymbol1 ::
    [Language.PureScript.Names.ProperName
       'Language.PureScript.Names.Namespace]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.Namespace)
                   Language.PureScript.Constants.$bDataSymbol5
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.Namespace>_P))
                   Language.PureScript.Constants.$bDataSymbol2) -}
4583b24bb0253b2039bd314ce2946b50
  $bDataSymbol2 ::
    [Language.PureScript.Names.ProperName
       'Language.PureScript.Names.Namespace]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.Namespace)
                   Language.PureScript.Constants.$bDataSymbol3
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.Namespace>_P))
                   (GHC.Types.[]
                      @ (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.Namespace))) -}
01763e92d6ba107c9120e37be2031473
  $bDataSymbol3 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Constants.$bDataSymbol4) -}
89b99ba18e4a6fe6eae1bfa19b6fdb53
  $bDataSymbol4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Symbol"#) -}
fadd81f1209d9716840a7a7015d4a9fd
  $bDataSymbol5 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Constants.$bDataSymbol6) -}
2645075707f212bb98cc3034804148df
  $bDataSymbol6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Data"#) -}
1efb63808a9e2baee1333a2ea733a84d
  $bDiscard ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
  {- Strictness: m,
     Unfolding: (Language.PureScript.Names.Qualified
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.ClassName)
                   Language.PureScript.Constants.$bDiscard3
                   Language.PureScript.Constants.$bDiscard1
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.ClassName>_P))) -}
5302ab5b09d106a14d47a428c3a2a48c
  $bDiscard1 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Constants.$bDiscard2) -}
204d2328e40e71c269db3494c1ce4366
  $bDiscard2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Discard"#) -}
833aae93c49f5e0f2c91fa0ce77c4b66
  $bDiscard3 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ Language.PureScript.Names.ModuleName
                   Language.PureScript.Constants.$bControlBind1
                     `cast`
                   (Sym (Language.PureScript.Names.N:ModuleName[0]))) -}
1ba87b8bc80efbbf2998b7387ad4449f
  $bFail ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
  {- Strictness: m,
     Unfolding: (Language.PureScript.Names.Qualified
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.ClassName)
                   Language.PureScript.Constants.$bFail3
                   Language.PureScript.Constants.$bFail1
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.ClassName>_P))) -}
e63d3c6145e58927c45987793e1dedbd
  $bFail1 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Constants.$bFail2) -}
1548d61c5dfecf0a4564fb847611a998
  $bFail2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Fail"#) -}
233d20d3704410b2ccfe79b45275f384
  $bFail3 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ Language.PureScript.Names.ModuleName
                   Language.PureScript.Constants.$bFail4
                     `cast`
                   (Sym (Language.PureScript.Names.N:ModuleName[0]))) -}
8622b4c3e54065ab77d8962f1cba9b0d
  $bFail4 ::
    [Language.PureScript.Names.ProperName
       'Language.PureScript.Names.Namespace]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.Namespace)
                   Language.PureScript.Constants.$bFail8
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.Namespace>_P))
                   Language.PureScript.Constants.$bFail5) -}
49a95bf4f991d711b6bbf6d2f3e0a943
  $bFail5 ::
    [Language.PureScript.Names.ProperName
       'Language.PureScript.Names.Namespace]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.Namespace)
                   Language.PureScript.Constants.$bFail6
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.Namespace>_P))
                   (GHC.Types.[]
                      @ (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.Namespace))) -}
087eac6bea38e77400d6060653ec39e9
  $bFail6 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Constants.$bFail7) -}
82227372fa688102db2f9d6039a9e75a
  $bFail7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("TypeError"#) -}
72c622440d26eccbd8a524c211480ce7
  $bFail8 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Constants.$bFail9) -}
a6a2d4a70987f6ed2ed16fd1e72b0b19
  $bFail9 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Prim"#) -}
7012869f61280eb2f17f0f2da8715614
  $bIsSymbol ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
  {- Strictness: m,
     Unfolding: (Language.PureScript.Names.Qualified
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.ClassName)
                   Language.PureScript.Constants.$bIsSymbol3
                   Language.PureScript.Constants.$bIsSymbol1
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.ClassName>_P))) -}
4e3e41a62e12c38d79513cec6f16a0f5
  $bIsSymbol1 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Constants.$bIsSymbol2) -}
12683b5b5643a7be37e0041f8000234c
  $bIsSymbol2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IsSymbol"#) -}
c7dfd4994b1a4b16fb2df3aa0e4d012a
  $bIsSymbol3 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ Language.PureScript.Names.ModuleName
                   Language.PureScript.Constants.$bDataSymbol1
                     `cast`
                   (Sym (Language.PureScript.Names.N:ModuleName[0]))) -}
5d20b9a5d7ebe9195b3dc4c3b01aa139
  $bPartial ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
  {- Strictness: m,
     Unfolding: (Language.PureScript.Names.Qualified
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.ClassName)
                   Language.PureScript.Constants.$bPartial3
                   Language.PureScript.Constants.$bPartial1
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.ClassName>_P))) -}
42b0aa12153d468f6993c96cee113178
  $bPartial1 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Constants.$bPartial2) -}
766448ce56d25e9d93e12b30c57998fa
  $bPartial2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Partial"#) -}
cb45e3527833b03743cd9fa8ee224352
  $bPartial3 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ Language.PureScript.Names.ModuleName
                   Language.PureScript.Constants.$bPartial4
                     `cast`
                   (Sym (Language.PureScript.Names.N:ModuleName[0]))) -}
3a56f4ba84a4daa1633f5ca9aab21be3
  $bPartial4 ::
    [Language.PureScript.Names.ProperName
       'Language.PureScript.Names.Namespace]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.Namespace)
                   Language.PureScript.Constants.$bFail8
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.Namespace>_P))
                   (GHC.Types.[]
                      @ (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.Namespace))) -}
416b4c6bf2b3b7e98b5fdaed4af357d6
  $bPrim :: Language.PureScript.Names.ModuleName
  {- Strictness: m2,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Constants.$bPartial4
                  `cast`
                (Sym (Language.PureScript.Names.N:ModuleName[0])) -}
fb21416e7c728ef4a88ffbb87c84d468
  $bPrimOrdering :: Language.PureScript.Names.ModuleName
  {- Strictness: m2,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Constants.$bPrimOrdering1
                  `cast`
                (Sym (Language.PureScript.Names.N:ModuleName[0])) -}
f344aa0a0769554708e087b2c7969cf0
  $bPrimOrdering1 ::
    [Language.PureScript.Names.ProperName
       'Language.PureScript.Names.Namespace]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.Namespace)
                   Language.PureScript.Constants.$bFail8
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.Namespace>_P))
                   Language.PureScript.Constants.$bPrimOrdering2) -}
524309c146fb53bbeb6fe9132e291c19
  $bPrimOrdering2 ::
    [Language.PureScript.Names.ProperName
       'Language.PureScript.Names.Namespace]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.Namespace)
                   Language.PureScript.Constants.$bPrimOrdering3
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.Namespace>_P))
                   (GHC.Types.[]
                      @ (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.Namespace))) -}
bcc176e982894e337c67d86a393593ef
  $bPrimOrdering3 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Constants.$bPrimOrdering4) -}
dc10648b3ced6ed8194136a53d3d1ddd
  $bPrimOrdering4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Ordering"#) -}
4f72b21fd8fb4c6832c61663a456e1b1
  $bPrimRow :: Language.PureScript.Names.ModuleName
  {- Strictness: m2,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Constants.$bPrimRow1
                  `cast`
                (Sym (Language.PureScript.Names.N:ModuleName[0])) -}
f724ad9054530aa34e2989e221978ed9
  $bPrimRow1 ::
    [Language.PureScript.Names.ProperName
       'Language.PureScript.Names.Namespace]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.Namespace)
                   Language.PureScript.Constants.$bFail8
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.Namespace>_P))
                   Language.PureScript.Constants.$bPrimRow2) -}
1dfc0531da1984c69978c673824a3787
  $bPrimRow2 ::
    [Language.PureScript.Names.ProperName
       'Language.PureScript.Names.Namespace]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.Namespace)
                   Language.PureScript.Constants.$bPrimRow3
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.Namespace>_P))
                   (GHC.Types.[]
                      @ (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.Namespace))) -}
5dda06dc36bb3b00be530cc3e11345d6
  $bPrimRow3 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Constants.$bPrimRow4) -}
711ed90a6067131b1187586c42d0dba2
  $bPrimRow4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Row"#) -}
8d075959d1b9ee4589b6576c6907a4ce
  $bPrimRowList :: Language.PureScript.Names.ModuleName
  {- Strictness: m2,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Constants.$bPrimRowList1
                  `cast`
                (Sym (Language.PureScript.Names.N:ModuleName[0])) -}
971c04915e2694e524cf9759355c0dfa
  $bPrimRowList1 ::
    [Language.PureScript.Names.ProperName
       'Language.PureScript.Names.Namespace]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.Namespace)
                   Language.PureScript.Constants.$bFail8
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.Namespace>_P))
                   Language.PureScript.Constants.$bPrimRowList2) -}
8516b434529850d03f7bc3efabd228cf
  $bPrimRowList2 ::
    [Language.PureScript.Names.ProperName
       'Language.PureScript.Names.Namespace]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.Namespace)
                   Language.PureScript.Constants.$bPrimRowList3
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.Namespace>_P))
                   (GHC.Types.[]
                      @ (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.Namespace))) -}
c94d4452a4c9923ec973822b1955574c
  $bPrimRowList3 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Constants.$bPrimRowList4) -}
85cabbb0082284f90c94699e459eb380
  $bPrimRowList4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("RowList"#) -}
80c02fa681473027a939777b84ba94ab
  $bPrimSymbol :: Language.PureScript.Names.ModuleName
  {- Strictness: m2,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Constants.$bPrimSymbol1
                  `cast`
                (Sym (Language.PureScript.Names.N:ModuleName[0])) -}
9b9c967518df2e87220edcc7226145ef
  $bPrimSymbol1 ::
    [Language.PureScript.Names.ProperName
       'Language.PureScript.Names.Namespace]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.Namespace)
                   Language.PureScript.Constants.$bFail8
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.Namespace>_P))
                   Language.PureScript.Constants.$bDataSymbol2) -}
c0e1bd670fbdde14f91f9d0bcf7224c6
  $bPrimTypeError :: Language.PureScript.Names.ModuleName
  {- Strictness: m2,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Constants.$bFail4
                  `cast`
                (Sym (Language.PureScript.Names.N:ModuleName[0])) -}
78a192a91ee7385608af1b228a5dacdc
  $bRecord ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName)
  {- Strictness: m,
     Unfolding: (Language.PureScript.Names.Qualified
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.TypeName)
                   Language.PureScript.Constants.$bPartial3
                   Language.PureScript.Constants.$bRecord1
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.TypeName>_P))) -}
6db14e6784020d244226aff2c0b0c334
  $bRecord1 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Constants.$bRecord2) -}
a95087d94bd58d3d55875c800d9a6124
  $bRecord2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Record"#) -}
99f6aad64589b4c3b1aa362325d9d0d9
  $bRowCons ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
  {- Strictness: m,
     Unfolding: (Language.PureScript.Names.Qualified
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.ClassName)
                   Language.PureScript.Constants.$bRowCons3
                   Language.PureScript.Constants.$bRowCons1
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.ClassName>_P))) -}
ec34009350b3dcaced641f3d8f7f28dd
  $bRowCons1 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Constants.$bRowCons2) -}
51ba3c70725e479c14f81cf524757caa
  $bRowCons2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Cons"#) -}
d7e9321492c4860e2e7e95a22a531ab2
  $bRowCons3 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ Language.PureScript.Names.ModuleName
                   Language.PureScript.Constants.$bPrimRow1
                     `cast`
                   (Sym (Language.PureScript.Names.N:ModuleName[0]))) -}
6717e6c311756740ef8b13fd0e766398
  $bRowLacks ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
  {- Strictness: m,
     Unfolding: (Language.PureScript.Names.Qualified
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.ClassName)
                   Language.PureScript.Constants.$bRowCons3
                   Language.PureScript.Constants.$bRowLacks1
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.ClassName>_P))) -}
e27580451e55e9c915cc35ec646ed6aa
  $bRowLacks1 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Constants.$bRowLacks2) -}
da959c0bfaea1ebf4cd2adbbe2deb48d
  $bRowLacks2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Lacks"#) -}
d331889c52390496a10cfa845cbf7b20
  $bRowListCons ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName)
  {- Strictness: m,
     Unfolding: (Language.PureScript.Names.Qualified
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.TypeName)
                   Language.PureScript.Constants.$bRowListCons1
                   Language.PureScript.Constants.$bRowCons1
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.TypeName>_P))) -}
45d774b717f25e94a0043ca834a06fe9
  $bRowListCons1 ::
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ Language.PureScript.Names.ModuleName
                   Language.PureScript.Constants.$bPrimRowList1
                     `cast`
                   (Sym (Language.PureScript.Names.N:ModuleName[0]))) -}
f5cf08dbcbb56a2d661caa8bec32fecd
  $bRowListNil ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName)
  {- Strictness: m,
     Unfolding: (Language.PureScript.Names.Qualified
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.TypeName)
                   Language.PureScript.Constants.$bRowListCons1
                   Language.PureScript.Constants.$bRowListNil1
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.TypeName>_P))) -}
5c95df28dc29ab7011015def49ff798d
  $bRowListNil1 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Constants.$bRowListNil2) -}
da654a874eb70af0d7742b98ce408ff4
  $bRowListNil2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Nil"#) -}
dbb9e8d5196d3b98329bcf74fd043d82
  $bRowNub ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
  {- Strictness: m,
     Unfolding: (Language.PureScript.Names.Qualified
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.ClassName)
                   Language.PureScript.Constants.$bRowCons3
                   Language.PureScript.Constants.$bRowNub1
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.ClassName>_P))) -}
2a6a57bc780b28dde577f3b7681c7415
  $bRowNub1 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Constants.$bRowNub2) -}
baabc127107d992df0c9a9cdc7cf3d6e
  $bRowNub2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Nub"#) -}
43b0b8b193bc5a691b3f8bb88164550f
  $bRowToList ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
  {- Strictness: m,
     Unfolding: (Language.PureScript.Names.Qualified
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.ClassName)
                   Language.PureScript.Constants.$bRowListCons1
                   Language.PureScript.Constants.$bRowToList1
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.ClassName>_P))) -}
3a0b5d23eb4e731a5301f13c1a207871
  $bRowToList1 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Constants.$bRowToList2) -}
e3847f27fa3cc5f31867fe725cb66cc7
  $bRowToList2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("RowToList"#) -}
650683f6fed5072699542603e072e58a
  $bRowUnion ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
  {- Strictness: m,
     Unfolding: (Language.PureScript.Names.Qualified
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.ClassName)
                   Language.PureScript.Constants.$bRowCons3
                   Language.PureScript.Constants.$bRowUnion1
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.ClassName>_P))) -}
ebd373e4629fbe48ba4bc56050aa9648
  $bRowUnion1 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Constants.$bRowUnion2) -}
f563f7e81f6d9dc61dd42e38bab772a1
  $bRowUnion2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Union"#) -}
30063e8b2663a4749223157ad5712af9
  $bSymbolAppend ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
  {- Strictness: m,
     Unfolding: (Language.PureScript.Names.Qualified
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.ClassName)
                   Language.PureScript.Constants.$bSymbolAppend3
                   Language.PureScript.Constants.$bSymbolAppend1
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.ClassName>_P))) -}
f03f3a6a29af6d45056e966df064459d
  $bSymbolAppend1 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Constants.$bSymbolAppend2) -}
697fdcf283b140e86da97ba66afcb0e5
  $bSymbolAppend2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Append"#) -}
47a450c83be1c817a65b241a7bf2fa07
  $bSymbolAppend3 ::
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ Language.PureScript.Names.ModuleName
                   Language.PureScript.Constants.$bPrimSymbol1
                     `cast`
                   (Sym (Language.PureScript.Names.N:ModuleName[0]))) -}
25045fd47713064ae80f539151034805
  $bSymbolCompare ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
  {- Strictness: m,
     Unfolding: (Language.PureScript.Names.Qualified
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.ClassName)
                   Language.PureScript.Constants.$bSymbolAppend3
                   Language.PureScript.Constants.$bSymbolCompare1
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.ClassName>_P))) -}
0afe1676f92ea8160d185e70bc094e67
  $bSymbolCompare1 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Constants.$bSymbolCompare2) -}
609b74d135f38a5777efb75b7b132ceb
  $bSymbolCompare2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Compare"#) -}
4aee6d8e20a4684b592c0a88cdb61f3b
  $bSymbolCons ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
  {- Strictness: m,
     Unfolding: (Language.PureScript.Names.Qualified
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.ClassName)
                   Language.PureScript.Constants.$bSymbolAppend3
                   Language.PureScript.Constants.$bRowCons1
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.ClassName>_P))) -}
78aa745c4fcd5edae6a5bff51cc94efb
  $bWarn ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
  {- Strictness: m,
     Unfolding: (Language.PureScript.Names.Qualified
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.ClassName)
                   Language.PureScript.Constants.$bFail3
                   Language.PureScript.Constants.$bWarn1
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.ClassName>_P))) -}
ba5a210a866465b4db153151ead026de
  $bWarn1 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Constants.$bWarn2) -}
1d62c2646d46d2a1d1bce02317b52a9c
  $bWarn2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Warn"#) -}
5917fb793e4e9048135e710f01d430fb
  $mControlBind ::
    forall (rep :: GHC.Types.RuntimeRep) (r :: TYPE rep).
    Language.PureScript.Names.ModuleName
    -> (GHC.Prim.Void# -> r) -> (GHC.Prim.Void# -> r) -> r
  {- Arity: 3, Strictness: <S,1*U><L,1*C1(U)><L,1*C1(U)>,
     Unfolding: (\ @ rep :: GHC.Types.RuntimeRep
                   @ r :: TYPE rep
                   (scrut :: Language.PureScript.Names.ModuleName)
                   (cont :: GHC.Prim.Void# -> r)
                   (fail :: GHC.Prim.Void# -> r) ->
                 case scrut
                        `cast`
                      (Language.PureScript.Names.N:ModuleName[0]) of wild {
                   [] -> fail GHC.Prim.void#
                   : ds ds1
                   -> case ds
                             `cast`
                           (Language.PureScript.Names.N:ProperName[0]
                                <'Language.PureScript.Names.Namespace>_P) of wild1 { Data.Text.Internal.Text dt dt1 dt2 ->
                      case Language.PureScript.Constants.$bControlBind5 of wild2 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                      case GHC.Prim.==# dt2 dt5 of lwild {
                        DEFAULT -> fail GHC.Prim.void#
                        1#
                        -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                          -> GHC.Prim.Word#
                                                          -> GHC.Prim.ByteArray#
                                                          -> GHC.Prim.Word#
                                                          -> GHC.Prim.Word#
                                                          -> GHC.Prim.State# GHC.Prim.RealWorld
                                                          -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                GHC.Prim.Int# #)}
                                  dt
                                  (GHC.Prim.int2Word# dt1)
                                  dt3
                                  (GHC.Prim.int2Word# dt4)
                                  (GHC.Prim.int2Word# dt2)
                                  GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                           case GHC.Prim.narrow32Int# ds3 of wild3 {
                             DEFAULT -> fail GHC.Prim.void#
                             0#
                             -> case ds1 of wild4 {
                                  [] -> fail GHC.Prim.void#
                                  : ds5 ds6
                                  -> case ds5
                                            `cast`
                                          (Language.PureScript.Names.N:ProperName[0]
                                               <'Language.PureScript.Names.Namespace>_P) of wild6 { Data.Text.Internal.Text dt7 dt8 dt9 ->
                                     case Language.PureScript.Constants.$bControlBind3 of wild7 { Data.Text.Internal.Text dt10 dt11 dt12 ->
                                     case GHC.Prim.==# dt9 dt12 of lwild1 {
                                       DEFAULT -> fail GHC.Prim.void#
                                       1#
                                       -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                                         -> GHC.Prim.Word#
                                                                         -> GHC.Prim.ByteArray#
                                                                         -> GHC.Prim.Word#
                                                                         -> GHC.Prim.Word#
                                                                         -> GHC.Prim.State#
                                                                              GHC.Prim.RealWorld
                                                                         -> (# GHC.Prim.State#
                                                                                 GHC.Prim.RealWorld,
                                                                               GHC.Prim.Int# #)}
                                                 dt7
                                                 (GHC.Prim.int2Word# dt8)
                                                 dt10
                                                 (GHC.Prim.int2Word# dt11)
                                                 (GHC.Prim.int2Word# dt9)
                                                 GHC.Prim.realWorld# of wild8 { (#,#) ds7 ds8 ->
                                          case GHC.Prim.narrow32Int# ds8 of wild9 {
                                            DEFAULT -> fail GHC.Prim.void#
                                            0#
                                            -> case ds6 of wild10 {
                                                 [] -> cont GHC.Prim.void#
                                                 : ipv ipv1
                                                 -> fail
                                                      GHC.Prim.void# } } } } } } } } } } } } }) -}
3fac9f7f629ea8ef09ea663bbba97f7e
  $mDataSymbol ::
    forall (rep :: GHC.Types.RuntimeRep) (r :: TYPE rep).
    Language.PureScript.Names.ModuleName
    -> (GHC.Prim.Void# -> r) -> (GHC.Prim.Void# -> r) -> r
  {- Arity: 3, Strictness: <S,1*U><L,1*C1(U)><L,1*C1(U)>,
     Unfolding: (\ @ rep :: GHC.Types.RuntimeRep
                   @ r :: TYPE rep
                   (scrut :: Language.PureScript.Names.ModuleName)
                   (cont :: GHC.Prim.Void# -> r)
                   (fail :: GHC.Prim.Void# -> r) ->
                 case scrut
                        `cast`
                      (Language.PureScript.Names.N:ModuleName[0]) of wild {
                   [] -> fail GHC.Prim.void#
                   : ds ds1
                   -> case ds
                             `cast`
                           (Language.PureScript.Names.N:ProperName[0]
                                <'Language.PureScript.Names.Namespace>_P) of wild1 { Data.Text.Internal.Text dt dt1 dt2 ->
                      case Language.PureScript.Constants.$bDataSymbol5 of wild2 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                      case GHC.Prim.==# dt2 dt5 of lwild {
                        DEFAULT -> fail GHC.Prim.void#
                        1#
                        -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                          -> GHC.Prim.Word#
                                                          -> GHC.Prim.ByteArray#
                                                          -> GHC.Prim.Word#
                                                          -> GHC.Prim.Word#
                                                          -> GHC.Prim.State# GHC.Prim.RealWorld
                                                          -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                GHC.Prim.Int# #)}
                                  dt
                                  (GHC.Prim.int2Word# dt1)
                                  dt3
                                  (GHC.Prim.int2Word# dt4)
                                  (GHC.Prim.int2Word# dt2)
                                  GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                           case GHC.Prim.narrow32Int# ds3 of wild3 {
                             DEFAULT -> fail GHC.Prim.void#
                             0#
                             -> case ds1 of wild4 {
                                  [] -> fail GHC.Prim.void#
                                  : ds5 ds6
                                  -> case ds5
                                            `cast`
                                          (Language.PureScript.Names.N:ProperName[0]
                                               <'Language.PureScript.Names.Namespace>_P) of wild6 { Data.Text.Internal.Text dt7 dt8 dt9 ->
                                     case Language.PureScript.Constants.$bDataSymbol3 of wild7 { Data.Text.Internal.Text dt10 dt11 dt12 ->
                                     case GHC.Prim.==# dt9 dt12 of lwild1 {
                                       DEFAULT -> fail GHC.Prim.void#
                                       1#
                                       -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                                         -> GHC.Prim.Word#
                                                                         -> GHC.Prim.ByteArray#
                                                                         -> GHC.Prim.Word#
                                                                         -> GHC.Prim.Word#
                                                                         -> GHC.Prim.State#
                                                                              GHC.Prim.RealWorld
                                                                         -> (# GHC.Prim.State#
                                                                                 GHC.Prim.RealWorld,
                                                                               GHC.Prim.Int# #)}
                                                 dt7
                                                 (GHC.Prim.int2Word# dt8)
                                                 dt10
                                                 (GHC.Prim.int2Word# dt11)
                                                 (GHC.Prim.int2Word# dt9)
                                                 GHC.Prim.realWorld# of wild8 { (#,#) ds7 ds8 ->
                                          case GHC.Prim.narrow32Int# ds8 of wild9 {
                                            DEFAULT -> fail GHC.Prim.void#
                                            0#
                                            -> case ds6 of wild10 {
                                                 [] -> cont GHC.Prim.void#
                                                 : ipv ipv1
                                                 -> fail
                                                      GHC.Prim.void# } } } } } } } } } } } } }) -}
1810fd371bcdfe8d82f8fb9599002d73
  $mDiscard ::
    forall (rep :: GHC.Types.RuntimeRep) (r :: TYPE rep).
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
    -> (GHC.Prim.Void# -> r) -> (GHC.Prim.Void# -> r) -> r
  {- Arity: 3,
     Strictness: <S(SL),1*U(1*U,1*U(U,U,U))><L,1*C1(U)><L,C(U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ rep :: GHC.Types.RuntimeRep
                   @ r :: TYPE rep
                   (w :: Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ClassName))
                   (w1 :: GHC.Prim.Void# -> r)
                   (w2 :: GHC.Prim.Void# -> r) ->
                 case w of ww { Language.PureScript.Names.Qualified ww1 ww2 ->
                 Language.PureScript.Constants.$w$mDiscard
                   @ rep
                   @ r
                   ww1
                   ww2
                   w1
                   w2 }) -}
03e9ba76e580ec5867b31a3cb817bc98
  $mFail ::
    forall (rep :: GHC.Types.RuntimeRep) (r :: TYPE rep).
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
    -> (GHC.Prim.Void# -> r) -> (GHC.Prim.Void# -> r) -> r
  {- Arity: 3,
     Strictness: <S(SL),1*U(1*U,1*U(U,U,U))><L,1*C1(U)><L,C(U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ rep :: GHC.Types.RuntimeRep
                   @ r :: TYPE rep
                   (w :: Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ClassName))
                   (w1 :: GHC.Prim.Void# -> r)
                   (w2 :: GHC.Prim.Void# -> r) ->
                 case w of ww { Language.PureScript.Names.Qualified ww1 ww2 ->
                 Language.PureScript.Constants.$w$mFail
                   @ rep
                   @ r
                   ww1
                   ww2
                   w1
                   w2 }) -}
1dd9c99421a7c3d8eccab73d3321b267
  $mIsSymbol ::
    forall (rep :: GHC.Types.RuntimeRep) (r :: TYPE rep).
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
    -> (GHC.Prim.Void# -> r) -> (GHC.Prim.Void# -> r) -> r
  {- Arity: 3,
     Strictness: <S(SL),1*U(1*U,1*U(U,U,U))><L,1*C1(U)><L,C(U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ rep :: GHC.Types.RuntimeRep
                   @ r :: TYPE rep
                   (w :: Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ClassName))
                   (w1 :: GHC.Prim.Void# -> r)
                   (w2 :: GHC.Prim.Void# -> r) ->
                 case w of ww { Language.PureScript.Names.Qualified ww1 ww2 ->
                 Language.PureScript.Constants.$w$mIsSymbol
                   @ rep
                   @ r
                   ww1
                   ww2
                   w1
                   w2 }) -}
5e307a78ed27ffdd171285762bab0dee
  $mPartial ::
    forall (rep :: GHC.Types.RuntimeRep) (r :: TYPE rep).
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
    -> (GHC.Prim.Void# -> r) -> (GHC.Prim.Void# -> r) -> r
  {- Arity: 3,
     Strictness: <S(SL),1*U(1*U,1*U(U,U,U))><L,1*C1(U)><L,1*C1(U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ rep :: GHC.Types.RuntimeRep
                   @ r :: TYPE rep
                   (w :: Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ClassName))
                   (w1 :: GHC.Prim.Void# -> r)
                   (w2 :: GHC.Prim.Void# -> r) ->
                 case w of ww { Language.PureScript.Names.Qualified ww1 ww2 ->
                 Language.PureScript.Constants.$w$mPartial
                   @ rep
                   @ r
                   ww1
                   ww2
                   w1
                   w2 }) -}
06e04b04a7f63ed7b8c248b43297c1bf
  $mPrim ::
    forall (rep :: GHC.Types.RuntimeRep) (r :: TYPE rep).
    Language.PureScript.Names.ModuleName
    -> (GHC.Prim.Void# -> r) -> (GHC.Prim.Void# -> r) -> r
  {- Arity: 3, Strictness: <S,1*U><L,1*C1(U)><L,1*C1(U)>,
     Unfolding: (\ @ rep :: GHC.Types.RuntimeRep
                   @ r :: TYPE rep
                   (scrut :: Language.PureScript.Names.ModuleName)
                   (cont :: GHC.Prim.Void# -> r)
                   (fail :: GHC.Prim.Void# -> r) ->
                 case scrut
                        `cast`
                      (Language.PureScript.Names.N:ModuleName[0]) of wild {
                   [] -> fail GHC.Prim.void#
                   : ds ds1
                   -> case ds
                             `cast`
                           (Language.PureScript.Names.N:ProperName[0]
                                <'Language.PureScript.Names.Namespace>_P) of wild1 { Data.Text.Internal.Text dt dt1 dt2 ->
                      case Language.PureScript.Constants.$bFail8 of wild2 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                      case GHC.Prim.==# dt2 dt5 of lwild {
                        DEFAULT -> fail GHC.Prim.void#
                        1#
                        -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                          -> GHC.Prim.Word#
                                                          -> GHC.Prim.ByteArray#
                                                          -> GHC.Prim.Word#
                                                          -> GHC.Prim.Word#
                                                          -> GHC.Prim.State# GHC.Prim.RealWorld
                                                          -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                GHC.Prim.Int# #)}
                                  dt
                                  (GHC.Prim.int2Word# dt1)
                                  dt3
                                  (GHC.Prim.int2Word# dt4)
                                  (GHC.Prim.int2Word# dt2)
                                  GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                           case GHC.Prim.narrow32Int# ds3 of wild3 {
                             DEFAULT -> fail GHC.Prim.void#
                             0#
                             -> case ds1 of wild4 {
                                  [] -> cont GHC.Prim.void#
                                  : ipv ipv1 -> fail GHC.Prim.void# } } } } } } }) -}
774ba6cac38b6af222126af9d7f08fbc
  $mPrimOrdering ::
    forall (rep :: GHC.Types.RuntimeRep) (r :: TYPE rep).
    Language.PureScript.Names.ModuleName
    -> (GHC.Prim.Void# -> r) -> (GHC.Prim.Void# -> r) -> r
  {- Arity: 3, Strictness: <S,1*U><L,1*C1(U)><L,1*C1(U)>,
     Unfolding: (\ @ rep :: GHC.Types.RuntimeRep
                   @ r :: TYPE rep
                   (scrut :: Language.PureScript.Names.ModuleName)
                   (cont :: GHC.Prim.Void# -> r)
                   (fail :: GHC.Prim.Void# -> r) ->
                 case scrut
                        `cast`
                      (Language.PureScript.Names.N:ModuleName[0]) of wild {
                   [] -> fail GHC.Prim.void#
                   : ds ds1
                   -> case ds
                             `cast`
                           (Language.PureScript.Names.N:ProperName[0]
                                <'Language.PureScript.Names.Namespace>_P) of wild1 { Data.Text.Internal.Text dt dt1 dt2 ->
                      case Language.PureScript.Constants.$bFail8 of wild2 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                      case GHC.Prim.==# dt2 dt5 of lwild {
                        DEFAULT -> fail GHC.Prim.void#
                        1#
                        -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                          -> GHC.Prim.Word#
                                                          -> GHC.Prim.ByteArray#
                                                          -> GHC.Prim.Word#
                                                          -> GHC.Prim.Word#
                                                          -> GHC.Prim.State# GHC.Prim.RealWorld
                                                          -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                GHC.Prim.Int# #)}
                                  dt
                                  (GHC.Prim.int2Word# dt1)
                                  dt3
                                  (GHC.Prim.int2Word# dt4)
                                  (GHC.Prim.int2Word# dt2)
                                  GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                           case GHC.Prim.narrow32Int# ds3 of wild3 {
                             DEFAULT -> fail GHC.Prim.void#
                             0#
                             -> case ds1 of wild4 {
                                  [] -> fail GHC.Prim.void#
                                  : ds5 ds6
                                  -> case ds5
                                            `cast`
                                          (Language.PureScript.Names.N:ProperName[0]
                                               <'Language.PureScript.Names.Namespace>_P) of wild6 { Data.Text.Internal.Text dt7 dt8 dt9 ->
                                     case Language.PureScript.Constants.$bPrimOrdering3 of wild7 { Data.Text.Internal.Text dt10 dt11 dt12 ->
                                     case GHC.Prim.==# dt9 dt12 of lwild1 {
                                       DEFAULT -> fail GHC.Prim.void#
                                       1#
                                       -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                                         -> GHC.Prim.Word#
                                                                         -> GHC.Prim.ByteArray#
                                                                         -> GHC.Prim.Word#
                                                                         -> GHC.Prim.Word#
                                                                         -> GHC.Prim.State#
                                                                              GHC.Prim.RealWorld
                                                                         -> (# GHC.Prim.State#
                                                                                 GHC.Prim.RealWorld,
                                                                               GHC.Prim.Int# #)}
                                                 dt7
                                                 (GHC.Prim.int2Word# dt8)
                                                 dt10
                                                 (GHC.Prim.int2Word# dt11)
                                                 (GHC.Prim.int2Word# dt9)
                                                 GHC.Prim.realWorld# of wild8 { (#,#) ds7 ds8 ->
                                          case GHC.Prim.narrow32Int# ds8 of wild9 {
                                            DEFAULT -> fail GHC.Prim.void#
                                            0#
                                            -> case ds6 of wild10 {
                                                 [] -> cont GHC.Prim.void#
                                                 : ipv ipv1
                                                 -> fail
                                                      GHC.Prim.void# } } } } } } } } } } } } }) -}
d696db61da7fc6228412016d6e8a7109
  $mPrimRow ::
    forall (rep :: GHC.Types.RuntimeRep) (r :: TYPE rep).
    Language.PureScript.Names.ModuleName
    -> (GHC.Prim.Void# -> r) -> (GHC.Prim.Void# -> r) -> r
  {- Arity: 3, Strictness: <S,1*U><L,1*C1(U)><L,1*C1(U)>,
     Unfolding: (\ @ rep :: GHC.Types.RuntimeRep
                   @ r :: TYPE rep
                   (scrut :: Language.PureScript.Names.ModuleName)
                   (cont :: GHC.Prim.Void# -> r)
                   (fail :: GHC.Prim.Void# -> r) ->
                 case scrut
                        `cast`
                      (Language.PureScript.Names.N:ModuleName[0]) of wild {
                   [] -> fail GHC.Prim.void#
                   : ds ds1
                   -> case ds
                             `cast`
                           (Language.PureScript.Names.N:ProperName[0]
                                <'Language.PureScript.Names.Namespace>_P) of wild1 { Data.Text.Internal.Text dt dt1 dt2 ->
                      case Language.PureScript.Constants.$bFail8 of wild2 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                      case GHC.Prim.==# dt2 dt5 of lwild {
                        DEFAULT -> fail GHC.Prim.void#
                        1#
                        -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                          -> GHC.Prim.Word#
                                                          -> GHC.Prim.ByteArray#
                                                          -> GHC.Prim.Word#
                                                          -> GHC.Prim.Word#
                                                          -> GHC.Prim.State# GHC.Prim.RealWorld
                                                          -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                GHC.Prim.Int# #)}
                                  dt
                                  (GHC.Prim.int2Word# dt1)
                                  dt3
                                  (GHC.Prim.int2Word# dt4)
                                  (GHC.Prim.int2Word# dt2)
                                  GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                           case GHC.Prim.narrow32Int# ds3 of wild3 {
                             DEFAULT -> fail GHC.Prim.void#
                             0#
                             -> case ds1 of wild4 {
                                  [] -> fail GHC.Prim.void#
                                  : ds5 ds6
                                  -> case ds5
                                            `cast`
                                          (Language.PureScript.Names.N:ProperName[0]
                                               <'Language.PureScript.Names.Namespace>_P) of wild6 { Data.Text.Internal.Text dt7 dt8 dt9 ->
                                     case Language.PureScript.Constants.$bPrimRow3 of wild7 { Data.Text.Internal.Text dt10 dt11 dt12 ->
                                     case GHC.Prim.==# dt9 dt12 of lwild1 {
                                       DEFAULT -> fail GHC.Prim.void#
                                       1#
                                       -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                                         -> GHC.Prim.Word#
                                                                         -> GHC.Prim.ByteArray#
                                                                         -> GHC.Prim.Word#
                                                                         -> GHC.Prim.Word#
                                                                         -> GHC.Prim.State#
                                                                              GHC.Prim.RealWorld
                                                                         -> (# GHC.Prim.State#
                                                                                 GHC.Prim.RealWorld,
                                                                               GHC.Prim.Int# #)}
                                                 dt7
                                                 (GHC.Prim.int2Word# dt8)
                                                 dt10
                                                 (GHC.Prim.int2Word# dt11)
                                                 (GHC.Prim.int2Word# dt9)
                                                 GHC.Prim.realWorld# of wild8 { (#,#) ds7 ds8 ->
                                          case GHC.Prim.narrow32Int# ds8 of wild9 {
                                            DEFAULT -> fail GHC.Prim.void#
                                            0#
                                            -> case ds6 of wild10 {
                                                 [] -> cont GHC.Prim.void#
                                                 : ipv ipv1
                                                 -> fail
                                                      GHC.Prim.void# } } } } } } } } } } } } }) -}
7a4bc7ce095cb4e92a61419dd684aa6b
  $mPrimRowList ::
    forall (rep :: GHC.Types.RuntimeRep) (r :: TYPE rep).
    Language.PureScript.Names.ModuleName
    -> (GHC.Prim.Void# -> r) -> (GHC.Prim.Void# -> r) -> r
  {- Arity: 3, Strictness: <S,1*U><L,1*C1(U)><L,1*C1(U)>,
     Unfolding: (\ @ rep :: GHC.Types.RuntimeRep
                   @ r :: TYPE rep
                   (scrut :: Language.PureScript.Names.ModuleName)
                   (cont :: GHC.Prim.Void# -> r)
                   (fail :: GHC.Prim.Void# -> r) ->
                 case scrut
                        `cast`
                      (Language.PureScript.Names.N:ModuleName[0]) of wild {
                   [] -> fail GHC.Prim.void#
                   : ds ds1
                   -> case ds
                             `cast`
                           (Language.PureScript.Names.N:ProperName[0]
                                <'Language.PureScript.Names.Namespace>_P) of wild1 { Data.Text.Internal.Text dt dt1 dt2 ->
                      case Language.PureScript.Constants.$bFail8 of wild2 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                      case GHC.Prim.==# dt2 dt5 of lwild {
                        DEFAULT -> fail GHC.Prim.void#
                        1#
                        -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                          -> GHC.Prim.Word#
                                                          -> GHC.Prim.ByteArray#
                                                          -> GHC.Prim.Word#
                                                          -> GHC.Prim.Word#
                                                          -> GHC.Prim.State# GHC.Prim.RealWorld
                                                          -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                GHC.Prim.Int# #)}
                                  dt
                                  (GHC.Prim.int2Word# dt1)
                                  dt3
                                  (GHC.Prim.int2Word# dt4)
                                  (GHC.Prim.int2Word# dt2)
                                  GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                           case GHC.Prim.narrow32Int# ds3 of wild3 {
                             DEFAULT -> fail GHC.Prim.void#
                             0#
                             -> case ds1 of wild4 {
                                  [] -> fail GHC.Prim.void#
                                  : ds5 ds6
                                  -> case ds5
                                            `cast`
                                          (Language.PureScript.Names.N:ProperName[0]
                                               <'Language.PureScript.Names.Namespace>_P) of wild6 { Data.Text.Internal.Text dt7 dt8 dt9 ->
                                     case Language.PureScript.Constants.$bPrimRowList3 of wild7 { Data.Text.Internal.Text dt10 dt11 dt12 ->
                                     case GHC.Prim.==# dt9 dt12 of lwild1 {
                                       DEFAULT -> fail GHC.Prim.void#
                                       1#
                                       -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                                         -> GHC.Prim.Word#
                                                                         -> GHC.Prim.ByteArray#
                                                                         -> GHC.Prim.Word#
                                                                         -> GHC.Prim.Word#
                                                                         -> GHC.Prim.State#
                                                                              GHC.Prim.RealWorld
                                                                         -> (# GHC.Prim.State#
                                                                                 GHC.Prim.RealWorld,
                                                                               GHC.Prim.Int# #)}
                                                 dt7
                                                 (GHC.Prim.int2Word# dt8)
                                                 dt10
                                                 (GHC.Prim.int2Word# dt11)
                                                 (GHC.Prim.int2Word# dt9)
                                                 GHC.Prim.realWorld# of wild8 { (#,#) ds7 ds8 ->
                                          case GHC.Prim.narrow32Int# ds8 of wild9 {
                                            DEFAULT -> fail GHC.Prim.void#
                                            0#
                                            -> case ds6 of wild10 {
                                                 [] -> cont GHC.Prim.void#
                                                 : ipv ipv1
                                                 -> fail
                                                      GHC.Prim.void# } } } } } } } } } } } } }) -}
22cd206eefee746fa1fca858f13dad36
  $mPrimSymbol ::
    forall (rep :: GHC.Types.RuntimeRep) (r :: TYPE rep).
    Language.PureScript.Names.ModuleName
    -> (GHC.Prim.Void# -> r) -> (GHC.Prim.Void# -> r) -> r
  {- Arity: 3, Strictness: <S,1*U><L,1*C1(U)><L,1*C1(U)>,
     Unfolding: (\ @ rep :: GHC.Types.RuntimeRep
                   @ r :: TYPE rep
                   (scrut :: Language.PureScript.Names.ModuleName)
                   (cont :: GHC.Prim.Void# -> r)
                   (fail :: GHC.Prim.Void# -> r) ->
                 case scrut
                        `cast`
                      (Language.PureScript.Names.N:ModuleName[0]) of wild {
                   [] -> fail GHC.Prim.void#
                   : ds ds1
                   -> case ds
                             `cast`
                           (Language.PureScript.Names.N:ProperName[0]
                                <'Language.PureScript.Names.Namespace>_P) of wild1 { Data.Text.Internal.Text dt dt1 dt2 ->
                      case Language.PureScript.Constants.$bFail8 of wild2 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                      case GHC.Prim.==# dt2 dt5 of lwild {
                        DEFAULT -> fail GHC.Prim.void#
                        1#
                        -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                          -> GHC.Prim.Word#
                                                          -> GHC.Prim.ByteArray#
                                                          -> GHC.Prim.Word#
                                                          -> GHC.Prim.Word#
                                                          -> GHC.Prim.State# GHC.Prim.RealWorld
                                                          -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                GHC.Prim.Int# #)}
                                  dt
                                  (GHC.Prim.int2Word# dt1)
                                  dt3
                                  (GHC.Prim.int2Word# dt4)
                                  (GHC.Prim.int2Word# dt2)
                                  GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                           case GHC.Prim.narrow32Int# ds3 of wild3 {
                             DEFAULT -> fail GHC.Prim.void#
                             0#
                             -> case ds1 of wild4 {
                                  [] -> fail GHC.Prim.void#
                                  : ds5 ds6
                                  -> case ds5
                                            `cast`
                                          (Language.PureScript.Names.N:ProperName[0]
                                               <'Language.PureScript.Names.Namespace>_P) of wild6 { Data.Text.Internal.Text dt7 dt8 dt9 ->
                                     case Language.PureScript.Constants.$bDataSymbol3 of wild7 { Data.Text.Internal.Text dt10 dt11 dt12 ->
                                     case GHC.Prim.==# dt9 dt12 of lwild1 {
                                       DEFAULT -> fail GHC.Prim.void#
                                       1#
                                       -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                                         -> GHC.Prim.Word#
                                                                         -> GHC.Prim.ByteArray#
                                                                         -> GHC.Prim.Word#
                                                                         -> GHC.Prim.Word#
                                                                         -> GHC.Prim.State#
                                                                              GHC.Prim.RealWorld
                                                                         -> (# GHC.Prim.State#
                                                                                 GHC.Prim.RealWorld,
                                                                               GHC.Prim.Int# #)}
                                                 dt7
                                                 (GHC.Prim.int2Word# dt8)
                                                 dt10
                                                 (GHC.Prim.int2Word# dt11)
                                                 (GHC.Prim.int2Word# dt9)
                                                 GHC.Prim.realWorld# of wild8 { (#,#) ds7 ds8 ->
                                          case GHC.Prim.narrow32Int# ds8 of wild9 {
                                            DEFAULT -> fail GHC.Prim.void#
                                            0#
                                            -> case ds6 of wild10 {
                                                 [] -> cont GHC.Prim.void#
                                                 : ipv ipv1
                                                 -> fail
                                                      GHC.Prim.void# } } } } } } } } } } } } }) -}
fbd58e5bb58c04a3424cc4f1ab49d857
  $mPrimTypeError ::
    forall (rep :: GHC.Types.RuntimeRep) (r :: TYPE rep).
    Language.PureScript.Names.ModuleName
    -> (GHC.Prim.Void# -> r) -> (GHC.Prim.Void# -> r) -> r
  {- Arity: 3, Strictness: <S,1*U><L,1*C1(U)><L,1*C1(U)>,
     Unfolding: (\ @ rep :: GHC.Types.RuntimeRep
                   @ r :: TYPE rep
                   (scrut :: Language.PureScript.Names.ModuleName)
                   (cont :: GHC.Prim.Void# -> r)
                   (fail :: GHC.Prim.Void# -> r) ->
                 case scrut
                        `cast`
                      (Language.PureScript.Names.N:ModuleName[0]) of wild {
                   [] -> fail GHC.Prim.void#
                   : ds ds1
                   -> case ds
                             `cast`
                           (Language.PureScript.Names.N:ProperName[0]
                                <'Language.PureScript.Names.Namespace>_P) of wild1 { Data.Text.Internal.Text dt dt1 dt2 ->
                      case Language.PureScript.Constants.$bFail8 of wild2 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                      case GHC.Prim.==# dt2 dt5 of lwild {
                        DEFAULT -> fail GHC.Prim.void#
                        1#
                        -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                          -> GHC.Prim.Word#
                                                          -> GHC.Prim.ByteArray#
                                                          -> GHC.Prim.Word#
                                                          -> GHC.Prim.Word#
                                                          -> GHC.Prim.State# GHC.Prim.RealWorld
                                                          -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                GHC.Prim.Int# #)}
                                  dt
                                  (GHC.Prim.int2Word# dt1)
                                  dt3
                                  (GHC.Prim.int2Word# dt4)
                                  (GHC.Prim.int2Word# dt2)
                                  GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                           case GHC.Prim.narrow32Int# ds3 of wild3 {
                             DEFAULT -> fail GHC.Prim.void#
                             0#
                             -> case ds1 of wild4 {
                                  [] -> fail GHC.Prim.void#
                                  : ds5 ds6
                                  -> case ds5
                                            `cast`
                                          (Language.PureScript.Names.N:ProperName[0]
                                               <'Language.PureScript.Names.Namespace>_P) of wild6 { Data.Text.Internal.Text dt7 dt8 dt9 ->
                                     case Language.PureScript.Constants.$bFail6 of wild7 { Data.Text.Internal.Text dt10 dt11 dt12 ->
                                     case GHC.Prim.==# dt9 dt12 of lwild1 {
                                       DEFAULT -> fail GHC.Prim.void#
                                       1#
                                       -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                                         -> GHC.Prim.Word#
                                                                         -> GHC.Prim.ByteArray#
                                                                         -> GHC.Prim.Word#
                                                                         -> GHC.Prim.Word#
                                                                         -> GHC.Prim.State#
                                                                              GHC.Prim.RealWorld
                                                                         -> (# GHC.Prim.State#
                                                                                 GHC.Prim.RealWorld,
                                                                               GHC.Prim.Int# #)}
                                                 dt7
                                                 (GHC.Prim.int2Word# dt8)
                                                 dt10
                                                 (GHC.Prim.int2Word# dt11)
                                                 (GHC.Prim.int2Word# dt9)
                                                 GHC.Prim.realWorld# of wild8 { (#,#) ds7 ds8 ->
                                          case GHC.Prim.narrow32Int# ds8 of wild9 {
                                            DEFAULT -> fail GHC.Prim.void#
                                            0#
                                            -> case ds6 of wild10 {
                                                 [] -> cont GHC.Prim.void#
                                                 : ipv ipv1
                                                 -> fail
                                                      GHC.Prim.void# } } } } } } } } } } } } }) -}
2fe5c1f31682312631143c6438290dc3
  $mRecord ::
    forall (rep :: GHC.Types.RuntimeRep) (r :: TYPE rep).
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName)
    -> (GHC.Prim.Void# -> r) -> (GHC.Prim.Void# -> r) -> r
  {- Arity: 3,
     Strictness: <S(SL),1*U(1*U,1*U(U,U,U))><L,1*C1(U)><L,1*C1(U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ rep :: GHC.Types.RuntimeRep
                   @ r :: TYPE rep
                   (w :: Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.TypeName))
                   (w1 :: GHC.Prim.Void# -> r)
                   (w2 :: GHC.Prim.Void# -> r) ->
                 case w of ww { Language.PureScript.Names.Qualified ww1 ww2 ->
                 Language.PureScript.Constants.$w$mRecord
                   @ rep
                   @ r
                   ww1
                   ww2
                   w1
                   w2 }) -}
9725700c5a95ab47a060a9b2463426fd
  $mRowCons ::
    forall (rep :: GHC.Types.RuntimeRep) (r :: TYPE rep).
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
    -> (GHC.Prim.Void# -> r) -> (GHC.Prim.Void# -> r) -> r
  {- Arity: 3,
     Strictness: <S(SL),1*U(1*U,1*U(U,U,U))><L,1*C1(U)><L,C(U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ rep :: GHC.Types.RuntimeRep
                   @ r :: TYPE rep
                   (w :: Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ClassName))
                   (w1 :: GHC.Prim.Void# -> r)
                   (w2 :: GHC.Prim.Void# -> r) ->
                 case w of ww { Language.PureScript.Names.Qualified ww1 ww2 ->
                 Language.PureScript.Constants.$w$mRowCons
                   @ rep
                   @ r
                   ww1
                   ww2
                   w1
                   w2 }) -}
c70e27fce4e9b1d0bd08ec1d08b7943f
  $mRowLacks ::
    forall (rep :: GHC.Types.RuntimeRep) (r :: TYPE rep).
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
    -> (GHC.Prim.Void# -> r) -> (GHC.Prim.Void# -> r) -> r
  {- Arity: 3,
     Strictness: <S(SL),1*U(1*U,1*U(U,U,U))><L,1*C1(U)><L,C(U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ rep :: GHC.Types.RuntimeRep
                   @ r :: TYPE rep
                   (w :: Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ClassName))
                   (w1 :: GHC.Prim.Void# -> r)
                   (w2 :: GHC.Prim.Void# -> r) ->
                 case w of ww { Language.PureScript.Names.Qualified ww1 ww2 ->
                 Language.PureScript.Constants.$w$mRowLacks
                   @ rep
                   @ r
                   ww1
                   ww2
                   w1
                   w2 }) -}
95ededd11a4e69a242baa874c936eda8
  $mRowListCons ::
    forall (rep :: GHC.Types.RuntimeRep) (r :: TYPE rep).
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName)
    -> (GHC.Prim.Void# -> r) -> (GHC.Prim.Void# -> r) -> r
  {- Arity: 3,
     Strictness: <S(SL),1*U(1*U,1*U(U,U,U))><L,1*C1(U)><L,C(U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ rep :: GHC.Types.RuntimeRep
                   @ r :: TYPE rep
                   (w :: Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.TypeName))
                   (w1 :: GHC.Prim.Void# -> r)
                   (w2 :: GHC.Prim.Void# -> r) ->
                 case w of ww { Language.PureScript.Names.Qualified ww1 ww2 ->
                 Language.PureScript.Constants.$w$mRowListCons
                   @ rep
                   @ r
                   ww1
                   ww2
                   w1
                   w2 }) -}
4cfa13ff1acf0d6d89c792030e000908
  $mRowListNil ::
    forall (rep :: GHC.Types.RuntimeRep) (r :: TYPE rep).
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName)
    -> (GHC.Prim.Void# -> r) -> (GHC.Prim.Void# -> r) -> r
  {- Arity: 3,
     Strictness: <S(SL),1*U(1*U,1*U(U,U,U))><L,1*C1(U)><L,C(U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ rep :: GHC.Types.RuntimeRep
                   @ r :: TYPE rep
                   (w :: Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.TypeName))
                   (w1 :: GHC.Prim.Void# -> r)
                   (w2 :: GHC.Prim.Void# -> r) ->
                 case w of ww { Language.PureScript.Names.Qualified ww1 ww2 ->
                 Language.PureScript.Constants.$w$mRowListNil
                   @ rep
                   @ r
                   ww1
                   ww2
                   w1
                   w2 }) -}
e11cc4f1098a560e469f60bac4a3b586
  $mRowNub ::
    forall (rep :: GHC.Types.RuntimeRep) (r :: TYPE rep).
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
    -> (GHC.Prim.Void# -> r) -> (GHC.Prim.Void# -> r) -> r
  {- Arity: 3,
     Strictness: <S(SL),1*U(1*U,1*U(U,U,U))><L,1*C1(U)><L,C(U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ rep :: GHC.Types.RuntimeRep
                   @ r :: TYPE rep
                   (w :: Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ClassName))
                   (w1 :: GHC.Prim.Void# -> r)
                   (w2 :: GHC.Prim.Void# -> r) ->
                 case w of ww { Language.PureScript.Names.Qualified ww1 ww2 ->
                 Language.PureScript.Constants.$w$mRowNub
                   @ rep
                   @ r
                   ww1
                   ww2
                   w1
                   w2 }) -}
30cf27925edc74b5c11291ed6d0e02a8
  $mRowToList ::
    forall (rep :: GHC.Types.RuntimeRep) (r :: TYPE rep).
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
    -> (GHC.Prim.Void# -> r) -> (GHC.Prim.Void# -> r) -> r
  {- Arity: 3,
     Strictness: <S(SL),1*U(1*U,1*U(U,U,U))><L,1*C1(U)><L,C(U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ rep :: GHC.Types.RuntimeRep
                   @ r :: TYPE rep
                   (w :: Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ClassName))
                   (w1 :: GHC.Prim.Void# -> r)
                   (w2 :: GHC.Prim.Void# -> r) ->
                 case w of ww { Language.PureScript.Names.Qualified ww1 ww2 ->
                 Language.PureScript.Constants.$w$mRowToList
                   @ rep
                   @ r
                   ww1
                   ww2
                   w1
                   w2 }) -}
dd0cef5b2ce62a4870b5174d3155af1f
  $mRowUnion ::
    forall (rep :: GHC.Types.RuntimeRep) (r :: TYPE rep).
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
    -> (GHC.Prim.Void# -> r) -> (GHC.Prim.Void# -> r) -> r
  {- Arity: 3,
     Strictness: <S(SL),1*U(1*U,1*U(U,U,U))><L,1*C1(U)><L,C(U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ rep :: GHC.Types.RuntimeRep
                   @ r :: TYPE rep
                   (w :: Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ClassName))
                   (w1 :: GHC.Prim.Void# -> r)
                   (w2 :: GHC.Prim.Void# -> r) ->
                 case w of ww { Language.PureScript.Names.Qualified ww1 ww2 ->
                 Language.PureScript.Constants.$w$mRowUnion
                   @ rep
                   @ r
                   ww1
                   ww2
                   w1
                   w2 }) -}
5881e9672b0313fb6d205d5319c858c3
  $mSymbolAppend ::
    forall (rep :: GHC.Types.RuntimeRep) (r :: TYPE rep).
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
    -> (GHC.Prim.Void# -> r) -> (GHC.Prim.Void# -> r) -> r
  {- Arity: 3,
     Strictness: <S(SL),1*U(1*U,1*U(U,U,U))><L,1*C1(U)><L,C(U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ rep :: GHC.Types.RuntimeRep
                   @ r :: TYPE rep
                   (w :: Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ClassName))
                   (w1 :: GHC.Prim.Void# -> r)
                   (w2 :: GHC.Prim.Void# -> r) ->
                 case w of ww { Language.PureScript.Names.Qualified ww1 ww2 ->
                 Language.PureScript.Constants.$w$mSymbolAppend
                   @ rep
                   @ r
                   ww1
                   ww2
                   w1
                   w2 }) -}
f962b5781154065c8a440699583cc411
  $mSymbolCompare ::
    forall (rep :: GHC.Types.RuntimeRep) (r :: TYPE rep).
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
    -> (GHC.Prim.Void# -> r) -> (GHC.Prim.Void# -> r) -> r
  {- Arity: 3,
     Strictness: <S(SL),1*U(1*U,1*U(U,U,U))><L,1*C1(U)><L,C(U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ rep :: GHC.Types.RuntimeRep
                   @ r :: TYPE rep
                   (w :: Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ClassName))
                   (w1 :: GHC.Prim.Void# -> r)
                   (w2 :: GHC.Prim.Void# -> r) ->
                 case w of ww { Language.PureScript.Names.Qualified ww1 ww2 ->
                 Language.PureScript.Constants.$w$mSymbolCompare
                   @ rep
                   @ r
                   ww1
                   ww2
                   w1
                   w2 }) -}
cd9bf71f593709017c47c50b08fd3a56
  $mSymbolCons ::
    forall (rep :: GHC.Types.RuntimeRep) (r :: TYPE rep).
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
    -> (GHC.Prim.Void# -> r) -> (GHC.Prim.Void# -> r) -> r
  {- Arity: 3,
     Strictness: <S(SL),1*U(1*U,1*U(U,U,U))><L,1*C1(U)><L,C(U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ rep :: GHC.Types.RuntimeRep
                   @ r :: TYPE rep
                   (w :: Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ClassName))
                   (w1 :: GHC.Prim.Void# -> r)
                   (w2 :: GHC.Prim.Void# -> r) ->
                 case w of ww { Language.PureScript.Names.Qualified ww1 ww2 ->
                 Language.PureScript.Constants.$w$mSymbolCons
                   @ rep
                   @ r
                   ww1
                   ww2
                   w1
                   w2 }) -}
f928972f7e09f50081cb79a051b3c37e
  $mWarn ::
    forall (rep :: GHC.Types.RuntimeRep) (r :: TYPE rep).
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
    -> (GHC.Prim.Void# -> r) -> (GHC.Prim.Void# -> r) -> r
  {- Arity: 3,
     Strictness: <S(SL),1*U(1*U,1*U(U,U,U))><L,1*C1(U)><L,C(U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ rep :: GHC.Types.RuntimeRep
                   @ r :: TYPE rep
                   (w :: Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ClassName))
                   (w1 :: GHC.Prim.Void# -> r)
                   (w2 :: GHC.Prim.Void# -> r) ->
                 case w of ww { Language.PureScript.Names.Qualified ww1 ww2 ->
                 Language.PureScript.Constants.$w$mWarn
                   @ rep
                   @ r
                   ww1
                   ww2
                   w1
                   w2 }) -}
9dc13c21bb339472cdf364df292a9471
  $tc'EffectDictionaries :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15321089922963042348##
                   9076478871793735894##
                   Language.PureScript.Constants.$trModule
                   Language.PureScript.Constants.$tc'EffectDictionaries2
                   0#
                   Language.PureScript.Constants.$tc'EffectDictionaries1) -}
51f5aeada2a8fdb2f89c3a2a193ac309
  $tc'EffectDictionaries1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
9a91845709aa26424c41aef4caf73b85
  $tc'EffectDictionaries2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Constants.$tc'EffectDictionaries3) -}
e872e0871c6bac9187dcccca4b8b1c3a
  $tc'EffectDictionaries3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'EffectDictionaries"#) -}
b730c07c95383592d694f28ec3323076
  $tcEffectDictionaries :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2468402430612543140##
                   16250657196584233436##
                   Language.PureScript.Constants.$trModule
                   Language.PureScript.Constants.$tcEffectDictionaries1
                   0#
                   GHC.Types.krep$*) -}
270ee6c4ac920262d45f36030d74d36a
  $tcEffectDictionaries1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Constants.$tcEffectDictionaries2) -}
4a3f36aabbe4cbd61c97c9e276d0f117
  $tcEffectDictionaries2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("EffectDictionaries"#) -}
7cace7d26324fb3d3efc1577e7178276
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Language.PureScript.Constants.$trModule3
                   Language.PureScript.Constants.$trModule1) -}
2369aa3da64763d10de46b94c61e3ea2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Constants.$trModule2) -}
0e257c8e876114e9a1acf0b8d267d0de
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Language.PureScript.Constants"#) -}
062f2f1889a43caad4436ff33d56cdf6
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Constants.$trModule4) -}
3c21688dde1170f7b6bb5749699a399b
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"#) -}
cde3c5bbb45200b6f56f651ee0a73bae
  $w$mDiscard ::
    forall (rep :: GHC.Types.RuntimeRep) (r :: TYPE rep).
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> (GHC.Prim.Void# -> r)
    -> (GHC.Prim.Void# -> r)
    -> r
  {- Arity: 4, Strictness: <S,1*U><L,1*U(U,U,U)><L,1*C1(U)><L,C(U)>,
     Inline: [0],
     Unfolding: (\ @ rep :: GHC.Types.RuntimeRep
                   @ r :: TYPE rep
                   (ww :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww1 :: Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ClassName)
                   (w :: GHC.Prim.Void# -> r)
                   (w1 :: GHC.Prim.Void# -> r) ->
                 case ww of wild {
                   GHC.Base.Nothing -> w1 GHC.Prim.void#
                   GHC.Base.Just ds
                   -> Language.PureScript.Constants.$mControlBind
                        @ rep
                        @ r
                        ds
                        (\ (void :: GHC.Prim.Void#)[OneShot] ->
                         case ww1
                                `cast`
                              (Language.PureScript.Names.N:ProperName[0]
                                   <'Language.PureScript.Names.ClassName>_P) of wild1 { Data.Text.Internal.Text dt dt1 dt2 ->
                         case Language.PureScript.Constants.$bDiscard1 of wild2 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                         case GHC.Prim.==# dt2 dt5 of lwild {
                           DEFAULT -> w1 GHC.Prim.void#
                           1#
                           -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.ByteArray#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.State# GHC.Prim.RealWorld
                                                             -> (# GHC.Prim.State#
                                                                     GHC.Prim.RealWorld,
                                                                   GHC.Prim.Int# #)}
                                     dt
                                     (GHC.Prim.int2Word# dt1)
                                     dt3
                                     (GHC.Prim.int2Word# dt4)
                                     (GHC.Prim.int2Word# dt2)
                                     GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                              case GHC.Prim.narrow32Int# ds3 of wild3 {
                                DEFAULT -> w1 GHC.Prim.void# 0# -> w GHC.Prim.void# } } } } })
                        (\ (void :: GHC.Prim.Void#)[OneShot] -> w1 GHC.Prim.void#) }) -}
1c0250414a3bd26c27c6307a00a425fb
  $w$mFail ::
    forall (rep :: GHC.Types.RuntimeRep) (r :: TYPE rep).
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> (GHC.Prim.Void# -> r)
    -> (GHC.Prim.Void# -> r)
    -> r
  {- Arity: 4, Strictness: <S,1*U><L,1*U(U,U,U)><L,1*C1(U)><L,C(U)>,
     Inline: [0],
     Unfolding: (\ @ rep :: GHC.Types.RuntimeRep
                   @ r :: TYPE rep
                   (ww :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww1 :: Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ClassName)
                   (w :: GHC.Prim.Void# -> r)
                   (w1 :: GHC.Prim.Void# -> r) ->
                 case ww of wild {
                   GHC.Base.Nothing -> w1 GHC.Prim.void#
                   GHC.Base.Just ds
                   -> Language.PureScript.Constants.$mPrimTypeError
                        @ rep
                        @ r
                        ds
                        (\ (void :: GHC.Prim.Void#)[OneShot] ->
                         case ww1
                                `cast`
                              (Language.PureScript.Names.N:ProperName[0]
                                   <'Language.PureScript.Names.ClassName>_P) of wild1 { Data.Text.Internal.Text dt dt1 dt2 ->
                         case Language.PureScript.Constants.$bFail1 of wild2 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                         case GHC.Prim.==# dt2 dt5 of lwild {
                           DEFAULT -> w1 GHC.Prim.void#
                           1#
                           -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.ByteArray#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.State# GHC.Prim.RealWorld
                                                             -> (# GHC.Prim.State#
                                                                     GHC.Prim.RealWorld,
                                                                   GHC.Prim.Int# #)}
                                     dt
                                     (GHC.Prim.int2Word# dt1)
                                     dt3
                                     (GHC.Prim.int2Word# dt4)
                                     (GHC.Prim.int2Word# dt2)
                                     GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                              case GHC.Prim.narrow32Int# ds3 of wild3 {
                                DEFAULT -> w1 GHC.Prim.void# 0# -> w GHC.Prim.void# } } } } })
                        (\ (void :: GHC.Prim.Void#)[OneShot] -> w1 GHC.Prim.void#) }) -}
55ed0fdad1f4a0b0f683cdbd9d726022
  $w$mIsSymbol ::
    forall (rep :: GHC.Types.RuntimeRep) (r :: TYPE rep).
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> (GHC.Prim.Void# -> r)
    -> (GHC.Prim.Void# -> r)
    -> r
  {- Arity: 4, Strictness: <S,1*U><L,1*U(U,U,U)><L,1*C1(U)><L,C(U)>,
     Inline: [0],
     Unfolding: (\ @ rep :: GHC.Types.RuntimeRep
                   @ r :: TYPE rep
                   (ww :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww1 :: Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ClassName)
                   (w :: GHC.Prim.Void# -> r)
                   (w1 :: GHC.Prim.Void# -> r) ->
                 case ww of wild {
                   GHC.Base.Nothing -> w1 GHC.Prim.void#
                   GHC.Base.Just ds
                   -> Language.PureScript.Constants.$mDataSymbol
                        @ rep
                        @ r
                        ds
                        (\ (void :: GHC.Prim.Void#)[OneShot] ->
                         case ww1
                                `cast`
                              (Language.PureScript.Names.N:ProperName[0]
                                   <'Language.PureScript.Names.ClassName>_P) of wild1 { Data.Text.Internal.Text dt dt1 dt2 ->
                         case Language.PureScript.Constants.$bIsSymbol1 of wild2 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                         case GHC.Prim.==# dt2 dt5 of lwild {
                           DEFAULT -> w1 GHC.Prim.void#
                           1#
                           -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.ByteArray#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.State# GHC.Prim.RealWorld
                                                             -> (# GHC.Prim.State#
                                                                     GHC.Prim.RealWorld,
                                                                   GHC.Prim.Int# #)}
                                     dt
                                     (GHC.Prim.int2Word# dt1)
                                     dt3
                                     (GHC.Prim.int2Word# dt4)
                                     (GHC.Prim.int2Word# dt2)
                                     GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                              case GHC.Prim.narrow32Int# ds3 of wild3 {
                                DEFAULT -> w1 GHC.Prim.void# 0# -> w GHC.Prim.void# } } } } })
                        (\ (void :: GHC.Prim.Void#)[OneShot] -> w1 GHC.Prim.void#) }) -}
21e545b9cfd656f8a3c55f684f722b3d
  $w$mPartial ::
    forall (rep :: GHC.Types.RuntimeRep) (r :: TYPE rep).
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> (GHC.Prim.Void# -> r)
    -> (GHC.Prim.Void# -> r)
    -> r
  {- Arity: 4,
     Strictness: <S,1*U><L,1*U(U,U,U)><L,1*C1(U)><L,1*C1(U)>,
     Inline: [0],
     Unfolding: (\ @ rep :: GHC.Types.RuntimeRep
                   @ r :: TYPE rep
                   (ww :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww1 :: Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ClassName)
                   (w :: GHC.Prim.Void# -> r)
                   (w1 :: GHC.Prim.Void# -> r) ->
                 case ww of wild {
                   GHC.Base.Nothing -> w1 GHC.Prim.void#
                   GHC.Base.Just ds
                   -> case ds
                             `cast`
                           (Language.PureScript.Names.N:ModuleName[0]) of wild1 {
                        [] -> w1 GHC.Prim.void#
                        : ds1 ds2
                        -> case ds1
                                  `cast`
                                (Language.PureScript.Names.N:ProperName[0]
                                     <'Language.PureScript.Names.Namespace>_P) of wild2 { Data.Text.Internal.Text dt dt1 dt2 ->
                           case Language.PureScript.Constants.$bFail8 of wild3 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                           case GHC.Prim.==# dt2 dt5 of lwild {
                             DEFAULT -> w1 GHC.Prim.void#
                             1#
                             -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.ByteArray#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.State# GHC.Prim.RealWorld
                                                               -> (# GHC.Prim.State#
                                                                       GHC.Prim.RealWorld,
                                                                     GHC.Prim.Int# #)}
                                       dt
                                       (GHC.Prim.int2Word# dt1)
                                       dt3
                                       (GHC.Prim.int2Word# dt4)
                                       (GHC.Prim.int2Word# dt2)
                                       GHC.Prim.realWorld# of wild5 { (#,#) ds3 ds4 ->
                                case GHC.Prim.narrow32Int# ds4 of wild4 {
                                  DEFAULT -> w1 GHC.Prim.void#
                                  0#
                                  -> case ds2 of wild6 {
                                       []
                                       -> case ww1
                                                 `cast`
                                               (Language.PureScript.Names.N:ProperName[0]
                                                    <'Language.PureScript.Names.ClassName>_P) of wild7 { Data.Text.Internal.Text dt7 dt8 dt9 ->
                                          case Language.PureScript.Constants.$bPartial1 of wild8 { Data.Text.Internal.Text dt10 dt11 dt12 ->
                                          case GHC.Prim.==# dt9 dt12 of lwild1 {
                                            DEFAULT -> w1 GHC.Prim.void#
                                            1#
                                            -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                                              -> GHC.Prim.Word#
                                                                              -> GHC.Prim.ByteArray#
                                                                              -> GHC.Prim.Word#
                                                                              -> GHC.Prim.Word#
                                                                              -> GHC.Prim.State#
                                                                                   GHC.Prim.RealWorld
                                                                              -> (# GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld,
                                                                                    GHC.Prim.Int# #)}
                                                      dt7
                                                      (GHC.Prim.int2Word# dt8)
                                                      dt10
                                                      (GHC.Prim.int2Word# dt11)
                                                      (GHC.Prim.int2Word# dt9)
                                                      GHC.Prim.realWorld# of wild9 { (#,#) ds5 ds6 ->
                                               case GHC.Prim.narrow32Int# ds6 of wild10 {
                                                 DEFAULT -> w1 GHC.Prim.void#
                                                 0# -> w GHC.Prim.void# } } } } }
                                       : ipv ipv1 -> w1 GHC.Prim.void# } } } } } } } }) -}
c77b70295e099485ca6553f2bcdd8e56
  $w$mRecord ::
    forall (rep :: GHC.Types.RuntimeRep) (r :: TYPE rep).
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName
    -> (GHC.Prim.Void# -> r)
    -> (GHC.Prim.Void# -> r)
    -> r
  {- Arity: 4,
     Strictness: <S,1*U><L,1*U(U,U,U)><L,1*C1(U)><L,1*C1(U)>,
     Inline: [0],
     Unfolding: (\ @ rep :: GHC.Types.RuntimeRep
                   @ r :: TYPE rep
                   (ww :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww1 :: Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.TypeName)
                   (w :: GHC.Prim.Void# -> r)
                   (w1 :: GHC.Prim.Void# -> r) ->
                 case ww of wild {
                   GHC.Base.Nothing -> w1 GHC.Prim.void#
                   GHC.Base.Just ds
                   -> case ds
                             `cast`
                           (Language.PureScript.Names.N:ModuleName[0]) of wild1 {
                        [] -> w1 GHC.Prim.void#
                        : ds1 ds2
                        -> case ds1
                                  `cast`
                                (Language.PureScript.Names.N:ProperName[0]
                                     <'Language.PureScript.Names.Namespace>_P) of wild2 { Data.Text.Internal.Text dt dt1 dt2 ->
                           case Language.PureScript.Constants.$bFail8 of wild3 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                           case GHC.Prim.==# dt2 dt5 of lwild {
                             DEFAULT -> w1 GHC.Prim.void#
                             1#
                             -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.ByteArray#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.State# GHC.Prim.RealWorld
                                                               -> (# GHC.Prim.State#
                                                                       GHC.Prim.RealWorld,
                                                                     GHC.Prim.Int# #)}
                                       dt
                                       (GHC.Prim.int2Word# dt1)
                                       dt3
                                       (GHC.Prim.int2Word# dt4)
                                       (GHC.Prim.int2Word# dt2)
                                       GHC.Prim.realWorld# of wild5 { (#,#) ds3 ds4 ->
                                case GHC.Prim.narrow32Int# ds4 of wild4 {
                                  DEFAULT -> w1 GHC.Prim.void#
                                  0#
                                  -> case ds2 of wild6 {
                                       []
                                       -> case ww1
                                                 `cast`
                                               (Language.PureScript.Names.N:ProperName[0]
                                                    <'Language.PureScript.Names.TypeName>_P) of wild7 { Data.Text.Internal.Text dt7 dt8 dt9 ->
                                          case Language.PureScript.Constants.$bRecord1 of wild8 { Data.Text.Internal.Text dt10 dt11 dt12 ->
                                          case GHC.Prim.==# dt9 dt12 of lwild1 {
                                            DEFAULT -> w1 GHC.Prim.void#
                                            1#
                                            -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                                              -> GHC.Prim.Word#
                                                                              -> GHC.Prim.ByteArray#
                                                                              -> GHC.Prim.Word#
                                                                              -> GHC.Prim.Word#
                                                                              -> GHC.Prim.State#
                                                                                   GHC.Prim.RealWorld
                                                                              -> (# GHC.Prim.State#
                                                                                      GHC.Prim.RealWorld,
                                                                                    GHC.Prim.Int# #)}
                                                      dt7
                                                      (GHC.Prim.int2Word# dt8)
                                                      dt10
                                                      (GHC.Prim.int2Word# dt11)
                                                      (GHC.Prim.int2Word# dt9)
                                                      GHC.Prim.realWorld# of wild9 { (#,#) ds5 ds6 ->
                                               case GHC.Prim.narrow32Int# ds6 of wild10 {
                                                 DEFAULT -> w1 GHC.Prim.void#
                                                 0# -> w GHC.Prim.void# } } } } }
                                       : ipv ipv1 -> w1 GHC.Prim.void# } } } } } } } }) -}
9a42717ca15dbc0bff3dae501d0be798
  $w$mRowCons ::
    forall (rep :: GHC.Types.RuntimeRep) (r :: TYPE rep).
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> (GHC.Prim.Void# -> r)
    -> (GHC.Prim.Void# -> r)
    -> r
  {- Arity: 4, Strictness: <S,1*U><L,1*U(U,U,U)><L,1*C1(U)><L,C(U)>,
     Inline: [0],
     Unfolding: (\ @ rep :: GHC.Types.RuntimeRep
                   @ r :: TYPE rep
                   (ww :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww1 :: Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ClassName)
                   (w :: GHC.Prim.Void# -> r)
                   (w1 :: GHC.Prim.Void# -> r) ->
                 case ww of wild {
                   GHC.Base.Nothing -> w1 GHC.Prim.void#
                   GHC.Base.Just ds
                   -> Language.PureScript.Constants.$mPrimRow
                        @ rep
                        @ r
                        ds
                        (\ (void :: GHC.Prim.Void#)[OneShot] ->
                         case ww1
                                `cast`
                              (Language.PureScript.Names.N:ProperName[0]
                                   <'Language.PureScript.Names.ClassName>_P) of wild1 { Data.Text.Internal.Text dt dt1 dt2 ->
                         case Language.PureScript.Constants.$bRowCons1 of wild2 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                         case GHC.Prim.==# dt2 dt5 of lwild {
                           DEFAULT -> w1 GHC.Prim.void#
                           1#
                           -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.ByteArray#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.State# GHC.Prim.RealWorld
                                                             -> (# GHC.Prim.State#
                                                                     GHC.Prim.RealWorld,
                                                                   GHC.Prim.Int# #)}
                                     dt
                                     (GHC.Prim.int2Word# dt1)
                                     dt3
                                     (GHC.Prim.int2Word# dt4)
                                     (GHC.Prim.int2Word# dt2)
                                     GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                              case GHC.Prim.narrow32Int# ds3 of wild3 {
                                DEFAULT -> w1 GHC.Prim.void# 0# -> w GHC.Prim.void# } } } } })
                        (\ (void :: GHC.Prim.Void#)[OneShot] -> w1 GHC.Prim.void#) }) -}
465cd26592bf763170a5736f3de91ae9
  $w$mRowLacks ::
    forall (rep :: GHC.Types.RuntimeRep) (r :: TYPE rep).
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> (GHC.Prim.Void# -> r)
    -> (GHC.Prim.Void# -> r)
    -> r
  {- Arity: 4, Strictness: <S,1*U><L,1*U(U,U,U)><L,1*C1(U)><L,C(U)>,
     Inline: [0],
     Unfolding: (\ @ rep :: GHC.Types.RuntimeRep
                   @ r :: TYPE rep
                   (ww :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww1 :: Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ClassName)
                   (w :: GHC.Prim.Void# -> r)
                   (w1 :: GHC.Prim.Void# -> r) ->
                 case ww of wild {
                   GHC.Base.Nothing -> w1 GHC.Prim.void#
                   GHC.Base.Just ds
                   -> Language.PureScript.Constants.$mPrimRow
                        @ rep
                        @ r
                        ds
                        (\ (void :: GHC.Prim.Void#)[OneShot] ->
                         case ww1
                                `cast`
                              (Language.PureScript.Names.N:ProperName[0]
                                   <'Language.PureScript.Names.ClassName>_P) of wild1 { Data.Text.Internal.Text dt dt1 dt2 ->
                         case Language.PureScript.Constants.$bRowLacks1 of wild2 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                         case GHC.Prim.==# dt2 dt5 of lwild {
                           DEFAULT -> w1 GHC.Prim.void#
                           1#
                           -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.ByteArray#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.State# GHC.Prim.RealWorld
                                                             -> (# GHC.Prim.State#
                                                                     GHC.Prim.RealWorld,
                                                                   GHC.Prim.Int# #)}
                                     dt
                                     (GHC.Prim.int2Word# dt1)
                                     dt3
                                     (GHC.Prim.int2Word# dt4)
                                     (GHC.Prim.int2Word# dt2)
                                     GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                              case GHC.Prim.narrow32Int# ds3 of wild3 {
                                DEFAULT -> w1 GHC.Prim.void# 0# -> w GHC.Prim.void# } } } } })
                        (\ (void :: GHC.Prim.Void#)[OneShot] -> w1 GHC.Prim.void#) }) -}
7d482503eabe1d1bd1d7cd1716d9b14a
  $w$mRowListCons ::
    forall (rep :: GHC.Types.RuntimeRep) (r :: TYPE rep).
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName
    -> (GHC.Prim.Void# -> r)
    -> (GHC.Prim.Void# -> r)
    -> r
  {- Arity: 4, Strictness: <S,1*U><L,1*U(U,U,U)><L,1*C1(U)><L,C(U)>,
     Inline: [0],
     Unfolding: (\ @ rep :: GHC.Types.RuntimeRep
                   @ r :: TYPE rep
                   (ww :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww1 :: Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.TypeName)
                   (w :: GHC.Prim.Void# -> r)
                   (w1 :: GHC.Prim.Void# -> r) ->
                 case ww of wild {
                   GHC.Base.Nothing -> w1 GHC.Prim.void#
                   GHC.Base.Just ds
                   -> Language.PureScript.Constants.$mPrimRowList
                        @ rep
                        @ r
                        ds
                        (\ (void :: GHC.Prim.Void#)[OneShot] ->
                         case ww1
                                `cast`
                              (Language.PureScript.Names.N:ProperName[0]
                                   <'Language.PureScript.Names.TypeName>_P) of wild1 { Data.Text.Internal.Text dt dt1 dt2 ->
                         case Language.PureScript.Constants.$bRowCons1 of wild2 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                         case GHC.Prim.==# dt2 dt5 of lwild {
                           DEFAULT -> w1 GHC.Prim.void#
                           1#
                           -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.ByteArray#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.State# GHC.Prim.RealWorld
                                                             -> (# GHC.Prim.State#
                                                                     GHC.Prim.RealWorld,
                                                                   GHC.Prim.Int# #)}
                                     dt
                                     (GHC.Prim.int2Word# dt1)
                                     dt3
                                     (GHC.Prim.int2Word# dt4)
                                     (GHC.Prim.int2Word# dt2)
                                     GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                              case GHC.Prim.narrow32Int# ds3 of wild3 {
                                DEFAULT -> w1 GHC.Prim.void# 0# -> w GHC.Prim.void# } } } } })
                        (\ (void :: GHC.Prim.Void#)[OneShot] -> w1 GHC.Prim.void#) }) -}
f761070229de38341d27cc8ebfa0f6b1
  $w$mRowListNil ::
    forall (rep :: GHC.Types.RuntimeRep) (r :: TYPE rep).
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName
    -> (GHC.Prim.Void# -> r)
    -> (GHC.Prim.Void# -> r)
    -> r
  {- Arity: 4, Strictness: <S,1*U><L,1*U(U,U,U)><L,1*C1(U)><L,C(U)>,
     Inline: [0],
     Unfolding: (\ @ rep :: GHC.Types.RuntimeRep
                   @ r :: TYPE rep
                   (ww :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww1 :: Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.TypeName)
                   (w :: GHC.Prim.Void# -> r)
                   (w1 :: GHC.Prim.Void# -> r) ->
                 case ww of wild {
                   GHC.Base.Nothing -> w1 GHC.Prim.void#
                   GHC.Base.Just ds
                   -> Language.PureScript.Constants.$mPrimRowList
                        @ rep
                        @ r
                        ds
                        (\ (void :: GHC.Prim.Void#)[OneShot] ->
                         case ww1
                                `cast`
                              (Language.PureScript.Names.N:ProperName[0]
                                   <'Language.PureScript.Names.TypeName>_P) of wild1 { Data.Text.Internal.Text dt dt1 dt2 ->
                         case Language.PureScript.Constants.$bRowListNil1 of wild2 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                         case GHC.Prim.==# dt2 dt5 of lwild {
                           DEFAULT -> w1 GHC.Prim.void#
                           1#
                           -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.ByteArray#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.State# GHC.Prim.RealWorld
                                                             -> (# GHC.Prim.State#
                                                                     GHC.Prim.RealWorld,
                                                                   GHC.Prim.Int# #)}
                                     dt
                                     (GHC.Prim.int2Word# dt1)
                                     dt3
                                     (GHC.Prim.int2Word# dt4)
                                     (GHC.Prim.int2Word# dt2)
                                     GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                              case GHC.Prim.narrow32Int# ds3 of wild3 {
                                DEFAULT -> w1 GHC.Prim.void# 0# -> w GHC.Prim.void# } } } } })
                        (\ (void :: GHC.Prim.Void#)[OneShot] -> w1 GHC.Prim.void#) }) -}
061a2bff36cad16e2161915f33c7b2d1
  $w$mRowNub ::
    forall (rep :: GHC.Types.RuntimeRep) (r :: TYPE rep).
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> (GHC.Prim.Void# -> r)
    -> (GHC.Prim.Void# -> r)
    -> r
  {- Arity: 4, Strictness: <S,1*U><L,1*U(U,U,U)><L,1*C1(U)><L,C(U)>,
     Inline: [0],
     Unfolding: (\ @ rep :: GHC.Types.RuntimeRep
                   @ r :: TYPE rep
                   (ww :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww1 :: Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ClassName)
                   (w :: GHC.Prim.Void# -> r)
                   (w1 :: GHC.Prim.Void# -> r) ->
                 case ww of wild {
                   GHC.Base.Nothing -> w1 GHC.Prim.void#
                   GHC.Base.Just ds
                   -> Language.PureScript.Constants.$mPrimRow
                        @ rep
                        @ r
                        ds
                        (\ (void :: GHC.Prim.Void#)[OneShot] ->
                         case ww1
                                `cast`
                              (Language.PureScript.Names.N:ProperName[0]
                                   <'Language.PureScript.Names.ClassName>_P) of wild1 { Data.Text.Internal.Text dt dt1 dt2 ->
                         case Language.PureScript.Constants.$bRowNub1 of wild2 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                         case GHC.Prim.==# dt2 dt5 of lwild {
                           DEFAULT -> w1 GHC.Prim.void#
                           1#
                           -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.ByteArray#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.State# GHC.Prim.RealWorld
                                                             -> (# GHC.Prim.State#
                                                                     GHC.Prim.RealWorld,
                                                                   GHC.Prim.Int# #)}
                                     dt
                                     (GHC.Prim.int2Word# dt1)
                                     dt3
                                     (GHC.Prim.int2Word# dt4)
                                     (GHC.Prim.int2Word# dt2)
                                     GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                              case GHC.Prim.narrow32Int# ds3 of wild3 {
                                DEFAULT -> w1 GHC.Prim.void# 0# -> w GHC.Prim.void# } } } } })
                        (\ (void :: GHC.Prim.Void#)[OneShot] -> w1 GHC.Prim.void#) }) -}
a02351c03844034928f17b5c27bb4f2b
  $w$mRowToList ::
    forall (rep :: GHC.Types.RuntimeRep) (r :: TYPE rep).
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> (GHC.Prim.Void# -> r)
    -> (GHC.Prim.Void# -> r)
    -> r
  {- Arity: 4, Strictness: <S,1*U><L,1*U(U,U,U)><L,1*C1(U)><L,C(U)>,
     Inline: [0],
     Unfolding: (\ @ rep :: GHC.Types.RuntimeRep
                   @ r :: TYPE rep
                   (ww :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww1 :: Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ClassName)
                   (w :: GHC.Prim.Void# -> r)
                   (w1 :: GHC.Prim.Void# -> r) ->
                 case ww of wild {
                   GHC.Base.Nothing -> w1 GHC.Prim.void#
                   GHC.Base.Just ds
                   -> Language.PureScript.Constants.$mPrimRowList
                        @ rep
                        @ r
                        ds
                        (\ (void :: GHC.Prim.Void#)[OneShot] ->
                         case ww1
                                `cast`
                              (Language.PureScript.Names.N:ProperName[0]
                                   <'Language.PureScript.Names.ClassName>_P) of wild1 { Data.Text.Internal.Text dt dt1 dt2 ->
                         case Language.PureScript.Constants.$bRowToList1 of wild2 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                         case GHC.Prim.==# dt2 dt5 of lwild {
                           DEFAULT -> w1 GHC.Prim.void#
                           1#
                           -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.ByteArray#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.State# GHC.Prim.RealWorld
                                                             -> (# GHC.Prim.State#
                                                                     GHC.Prim.RealWorld,
                                                                   GHC.Prim.Int# #)}
                                     dt
                                     (GHC.Prim.int2Word# dt1)
                                     dt3
                                     (GHC.Prim.int2Word# dt4)
                                     (GHC.Prim.int2Word# dt2)
                                     GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                              case GHC.Prim.narrow32Int# ds3 of wild3 {
                                DEFAULT -> w1 GHC.Prim.void# 0# -> w GHC.Prim.void# } } } } })
                        (\ (void :: GHC.Prim.Void#)[OneShot] -> w1 GHC.Prim.void#) }) -}
ab372932e84ad1a375269c78d305c103
  $w$mRowUnion ::
    forall (rep :: GHC.Types.RuntimeRep) (r :: TYPE rep).
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> (GHC.Prim.Void# -> r)
    -> (GHC.Prim.Void# -> r)
    -> r
  {- Arity: 4, Strictness: <S,1*U><L,1*U(U,U,U)><L,1*C1(U)><L,C(U)>,
     Inline: [0],
     Unfolding: (\ @ rep :: GHC.Types.RuntimeRep
                   @ r :: TYPE rep
                   (ww :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww1 :: Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ClassName)
                   (w :: GHC.Prim.Void# -> r)
                   (w1 :: GHC.Prim.Void# -> r) ->
                 case ww of wild {
                   GHC.Base.Nothing -> w1 GHC.Prim.void#
                   GHC.Base.Just ds
                   -> Language.PureScript.Constants.$mPrimRow
                        @ rep
                        @ r
                        ds
                        (\ (void :: GHC.Prim.Void#)[OneShot] ->
                         case ww1
                                `cast`
                              (Language.PureScript.Names.N:ProperName[0]
                                   <'Language.PureScript.Names.ClassName>_P) of wild1 { Data.Text.Internal.Text dt dt1 dt2 ->
                         case Language.PureScript.Constants.$bRowUnion1 of wild2 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                         case GHC.Prim.==# dt2 dt5 of lwild {
                           DEFAULT -> w1 GHC.Prim.void#
                           1#
                           -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.ByteArray#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.State# GHC.Prim.RealWorld
                                                             -> (# GHC.Prim.State#
                                                                     GHC.Prim.RealWorld,
                                                                   GHC.Prim.Int# #)}
                                     dt
                                     (GHC.Prim.int2Word# dt1)
                                     dt3
                                     (GHC.Prim.int2Word# dt4)
                                     (GHC.Prim.int2Word# dt2)
                                     GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                              case GHC.Prim.narrow32Int# ds3 of wild3 {
                                DEFAULT -> w1 GHC.Prim.void# 0# -> w GHC.Prim.void# } } } } })
                        (\ (void :: GHC.Prim.Void#)[OneShot] -> w1 GHC.Prim.void#) }) -}
9d1b1d63ee8c6d0c2d8dd7dc10278704
  $w$mSymbolAppend ::
    forall (rep :: GHC.Types.RuntimeRep) (r :: TYPE rep).
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> (GHC.Prim.Void# -> r)
    -> (GHC.Prim.Void# -> r)
    -> r
  {- Arity: 4, Strictness: <S,1*U><L,1*U(U,U,U)><L,1*C1(U)><L,C(U)>,
     Inline: [0],
     Unfolding: (\ @ rep :: GHC.Types.RuntimeRep
                   @ r :: TYPE rep
                   (ww :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww1 :: Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ClassName)
                   (w :: GHC.Prim.Void# -> r)
                   (w1 :: GHC.Prim.Void# -> r) ->
                 case ww of wild {
                   GHC.Base.Nothing -> w1 GHC.Prim.void#
                   GHC.Base.Just ds
                   -> Language.PureScript.Constants.$mPrimSymbol
                        @ rep
                        @ r
                        ds
                        (\ (void :: GHC.Prim.Void#)[OneShot] ->
                         case ww1
                                `cast`
                              (Language.PureScript.Names.N:ProperName[0]
                                   <'Language.PureScript.Names.ClassName>_P) of wild1 { Data.Text.Internal.Text dt dt1 dt2 ->
                         case Language.PureScript.Constants.$bSymbolAppend1 of wild2 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                         case GHC.Prim.==# dt2 dt5 of lwild {
                           DEFAULT -> w1 GHC.Prim.void#
                           1#
                           -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.ByteArray#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.State# GHC.Prim.RealWorld
                                                             -> (# GHC.Prim.State#
                                                                     GHC.Prim.RealWorld,
                                                                   GHC.Prim.Int# #)}
                                     dt
                                     (GHC.Prim.int2Word# dt1)
                                     dt3
                                     (GHC.Prim.int2Word# dt4)
                                     (GHC.Prim.int2Word# dt2)
                                     GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                              case GHC.Prim.narrow32Int# ds3 of wild3 {
                                DEFAULT -> w1 GHC.Prim.void# 0# -> w GHC.Prim.void# } } } } })
                        (\ (void :: GHC.Prim.Void#)[OneShot] -> w1 GHC.Prim.void#) }) -}
d0a4c09496decf3a965903e3bffc5c1d
  $w$mSymbolCompare ::
    forall (rep :: GHC.Types.RuntimeRep) (r :: TYPE rep).
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> (GHC.Prim.Void# -> r)
    -> (GHC.Prim.Void# -> r)
    -> r
  {- Arity: 4, Strictness: <S,1*U><L,1*U(U,U,U)><L,1*C1(U)><L,C(U)>,
     Inline: [0],
     Unfolding: (\ @ rep :: GHC.Types.RuntimeRep
                   @ r :: TYPE rep
                   (ww :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww1 :: Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ClassName)
                   (w :: GHC.Prim.Void# -> r)
                   (w1 :: GHC.Prim.Void# -> r) ->
                 case ww of wild {
                   GHC.Base.Nothing -> w1 GHC.Prim.void#
                   GHC.Base.Just ds
                   -> Language.PureScript.Constants.$mPrimSymbol
                        @ rep
                        @ r
                        ds
                        (\ (void :: GHC.Prim.Void#)[OneShot] ->
                         case ww1
                                `cast`
                              (Language.PureScript.Names.N:ProperName[0]
                                   <'Language.PureScript.Names.ClassName>_P) of wild1 { Data.Text.Internal.Text dt dt1 dt2 ->
                         case Language.PureScript.Constants.$bSymbolCompare1 of wild2 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                         case GHC.Prim.==# dt2 dt5 of lwild {
                           DEFAULT -> w1 GHC.Prim.void#
                           1#
                           -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.ByteArray#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.State# GHC.Prim.RealWorld
                                                             -> (# GHC.Prim.State#
                                                                     GHC.Prim.RealWorld,
                                                                   GHC.Prim.Int# #)}
                                     dt
                                     (GHC.Prim.int2Word# dt1)
                                     dt3
                                     (GHC.Prim.int2Word# dt4)
                                     (GHC.Prim.int2Word# dt2)
                                     GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                              case GHC.Prim.narrow32Int# ds3 of wild3 {
                                DEFAULT -> w1 GHC.Prim.void# 0# -> w GHC.Prim.void# } } } } })
                        (\ (void :: GHC.Prim.Void#)[OneShot] -> w1 GHC.Prim.void#) }) -}
0f4f61dd8b72e0ac4bc61e016fe84921
  $w$mSymbolCons ::
    forall (rep :: GHC.Types.RuntimeRep) (r :: TYPE rep).
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> (GHC.Prim.Void# -> r)
    -> (GHC.Prim.Void# -> r)
    -> r
  {- Arity: 4, Strictness: <S,1*U><L,1*U(U,U,U)><L,1*C1(U)><L,C(U)>,
     Inline: [0],
     Unfolding: (\ @ rep :: GHC.Types.RuntimeRep
                   @ r :: TYPE rep
                   (ww :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww1 :: Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ClassName)
                   (w :: GHC.Prim.Void# -> r)
                   (w1 :: GHC.Prim.Void# -> r) ->
                 case ww of wild {
                   GHC.Base.Nothing -> w1 GHC.Prim.void#
                   GHC.Base.Just ds
                   -> Language.PureScript.Constants.$mPrimSymbol
                        @ rep
                        @ r
                        ds
                        (\ (void :: GHC.Prim.Void#)[OneShot] ->
                         case ww1
                                `cast`
                              (Language.PureScript.Names.N:ProperName[0]
                                   <'Language.PureScript.Names.ClassName>_P) of wild1 { Data.Text.Internal.Text dt dt1 dt2 ->
                         case Language.PureScript.Constants.$bRowCons1 of wild2 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                         case GHC.Prim.==# dt2 dt5 of lwild {
                           DEFAULT -> w1 GHC.Prim.void#
                           1#
                           -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.ByteArray#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.State# GHC.Prim.RealWorld
                                                             -> (# GHC.Prim.State#
                                                                     GHC.Prim.RealWorld,
                                                                   GHC.Prim.Int# #)}
                                     dt
                                     (GHC.Prim.int2Word# dt1)
                                     dt3
                                     (GHC.Prim.int2Word# dt4)
                                     (GHC.Prim.int2Word# dt2)
                                     GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                              case GHC.Prim.narrow32Int# ds3 of wild3 {
                                DEFAULT -> w1 GHC.Prim.void# 0# -> w GHC.Prim.void# } } } } })
                        (\ (void :: GHC.Prim.Void#)[OneShot] -> w1 GHC.Prim.void#) }) -}
b2d9d6775f1c5644c74b3e0f96817cca
  $w$mWarn ::
    forall (rep :: GHC.Types.RuntimeRep) (r :: TYPE rep).
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> (GHC.Prim.Void# -> r)
    -> (GHC.Prim.Void# -> r)
    -> r
  {- Arity: 4, Strictness: <S,1*U><L,1*U(U,U,U)><L,1*C1(U)><L,C(U)>,
     Inline: [0],
     Unfolding: (\ @ rep :: GHC.Types.RuntimeRep
                   @ r :: TYPE rep
                   (ww :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww1 :: Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ClassName)
                   (w :: GHC.Prim.Void# -> r)
                   (w1 :: GHC.Prim.Void# -> r) ->
                 case ww of wild {
                   GHC.Base.Nothing -> w1 GHC.Prim.void#
                   GHC.Base.Just ds
                   -> Language.PureScript.Constants.$mPrimTypeError
                        @ rep
                        @ r
                        ds
                        (\ (void :: GHC.Prim.Void#)[OneShot] ->
                         case ww1
                                `cast`
                              (Language.PureScript.Names.N:ProperName[0]
                                   <'Language.PureScript.Names.ClassName>_P) of wild1 { Data.Text.Internal.Text dt dt1 dt2 ->
                         case Language.PureScript.Constants.$bWarn1 of wild2 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                         case GHC.Prim.==# dt2 dt5 of lwild {
                           DEFAULT -> w1 GHC.Prim.void#
                           1#
                           -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.ByteArray#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.State# GHC.Prim.RealWorld
                                                             -> (# GHC.Prim.State#
                                                                     GHC.Prim.RealWorld,
                                                                   GHC.Prim.Int# #)}
                                     dt
                                     (GHC.Prim.int2Word# dt1)
                                     dt3
                                     (GHC.Prim.int2Word# dt4)
                                     (GHC.Prim.int2Word# dt2)
                                     GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                              case GHC.Prim.narrow32Int# ds3 of wild3 {
                                DEFAULT -> w1 GHC.Prim.void# 0# -> w GHC.Prim.void# } } } } })
                        (\ (void :: GHC.Prim.Void#)[OneShot] -> w1 GHC.Prim.void#) }) -}
b1305be0dcac0bd2f47833e6be8ab5c3
  (%) :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.%1) -}
9398963e01f6dc26febd9e9b78385f03
  %1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.%2) -}
6d36b961f2dd074121f4a8d7522d8708
  %2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("%"#) -}
6e8d3b3cc48f2c005205c5b979e495a8
  (&&) :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.&&1) -}
758424b28a2a2e99ab1a91e533befd41
  &&1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.&&2) -}
31abe205fe360a98efb6908d6469970d
  &&2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("&&"#) -}
eab72b05855ebe099ec56f667f0fb3d1
  (*) :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.*1) -}
8b1a495157e573928e164900c9a943b2
  *1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.*2) -}
c01d387bc64436b1df837ca17f937586
  *2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("*"#) -}
1eeccbbc7a709f4dd41b2ffffd1b2e65
  (+) :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.+1) -}
532c75b120e3f6dee14f0aac0aed3da5
  (++) :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.++1) -}
07dc67e611195358d83e3025d9f74316
  ++1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.++2) -}
dcd1e57083ac4344818876634e4c04a6
  ++2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("++"#) -}
cb3b5869d0ac550582285693c164da4e
  +1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.+2) -}
4cb359d204765610e6436c4d8313a764
  +2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("+"#) -}
7cf0b8c13fde80eb651f3fcdb56ba301
  (-) :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.-1) -}
5168e976541077a75c65a76c97dddba5
  -1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.-2) -}
978385ac903cc2df06623391cb94eb3e
  -2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("-"#) -}
7f43dd8f947efdd0bbe539fa9874462b
  (/) :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants./1) -}
07d1c70de7e8294a1738b27f363ad941
  /1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants./2) -}
1acb1d8e7e2e783a97ed232a0a830b32
  /2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("/"#) -}
b9bba5dce0761fea005df199f3de5395
  (/=) :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants./=1) -}
95c8a497126dc8450e025dd224b119e6
  /=1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants./=2) -}
101abe513c63a5f642cfe42c8eae2f07
  /=2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("/="#) -}
0c60d0aa00bfe80ce5282331bac292ad
  (<) :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.<1) -}
f3ae3e6206961df30a4b3a2540763897
  <1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.<2) -}
4473872f446393c95a7500b764f5a238
  <2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("<"#) -}
7e6170134a7e7fc83ffe27cafe2cb74e
  (<<<) :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.<<<1) -}
791919ab9bbe5d0203ed3f0bb0168ecf
  <<<1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.<<<2) -}
224112f569113072a8f7f5655cd36f2c
  <<<2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("<<<"#) -}
89b82efae259413e7ce38b1aff42ee88
  (<=) :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.<=1) -}
6007435d6e6145bf344258905d9bd8f6
  <=1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.<=2) -}
426a2e47a4c82b38bdd3a4bebe1cf2d5
  <=2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("<="#) -}
f72f82681951175c7203851d6abbae26
  (<>) :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.<>1) -}
c6cc6999832caee7e7a04cf6877d4a28
  <>1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.<>2) -}
575d21347b6cf095430fc81537496061
  <>2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("<>"#) -}
abd29ee98540cd0243e7d3f27438b1e3
  (==) :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.==1) -}
1dd911a8824cd394dfaa853308a99756
  ==1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.==2) -}
23a50927b3f46fdd583eba5107f0521b
  ==2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("=="#) -}
bdc4276f8319abfd8f6fa5be88184cd2
  (>) :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.>1) -}
6504d14b862fdbf12188b1313fa66dfd
  >1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.>2) -}
a2df54c86337583d82bbab6d0c33925a
  >2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (">"#) -}
92d47e39822db71b78cfe98c0fef9b70
  (>=) :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.>=1) -}
c3c9160fa76393d4fcda7f2971928561
  >=1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.>=2) -}
da98d8ed23bded02fc3b8bf55de72803
  >=2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (">="#) -}
ecca99e3acf63861414d6b3923785467
  (>>=) :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.>>=1) -}
1b5ad46070c03672b52df7c3fafdcec7
  >>=1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.>>=2) -}
eb63eb579eb877f991af288c302a0a93
  >>=2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (">>="#) -}
42c6d0ff1ca89840d7fbe9f0904e425f
  (>>>) :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.>>>1) -}
515b96b6cc666cf244598b5a30863078
  >>>1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.>>>2) -}
b4dda710497389b1ab8618da821ef117
  >>>2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (">>>"#) -}
7cfef7aa9870696095221fe7a66031e2
  pattern Language.PureScript.Constants.ControlBind :: Language.PureScript.Names.ModuleName
afca8557799d6bcb72f80effcb458e27
  pattern Language.PureScript.Constants.DataSymbol :: Language.PureScript.Names.ModuleName
7e65fafd8144b93bb486da8e16502b32
  pattern Language.PureScript.Constants.Discard :: Language.PureScript.Names.Qualified
                                                     (Language.PureScript.Names.ProperName
                                                        'Language.PureScript.Names.ClassName)
fa814e23036443b00212e305bb079cc7
  data EffectDictionaries
    = EffectDictionaries {edApplicativeDict :: Language.PureScript.PSString.PSString,
                          edBindDict :: Language.PureScript.PSString.PSString,
                          edMonadDict :: Language.PureScript.PSString.PSString,
                          edWhile :: Language.PureScript.PSString.PSString,
                          edUntil :: Language.PureScript.PSString.PSString}
949a6bc6c2802828e29ece08730c11c3
  pattern Language.PureScript.Constants.Fail :: Language.PureScript.Names.Qualified
                                                  (Language.PureScript.Names.ProperName
                                                     'Language.PureScript.Names.ClassName)
d9ae627b608d1d95835573b011b89395
  pattern Language.PureScript.Constants.IsSymbol :: Language.PureScript.Names.Qualified
                                                      (Language.PureScript.Names.ProperName
                                                         'Language.PureScript.Names.ClassName)
03a896770e007ee2c219cc94f0cd9c4c
  pattern Language.PureScript.Constants.Partial :: Language.PureScript.Names.Qualified
                                                     (Language.PureScript.Names.ProperName
                                                        'Language.PureScript.Names.ClassName)
526fb67181f59b1cece2de8af2fc4f1f
  pattern Language.PureScript.Constants.Prim :: Language.PureScript.Names.ModuleName
fbc11b04c8c6fa7cefde96d8cd3f8330
  pattern Language.PureScript.Constants.PrimOrdering :: Language.PureScript.Names.ModuleName
88d4e010153d428d834aea197d712df4
  pattern Language.PureScript.Constants.PrimRow :: Language.PureScript.Names.ModuleName
8a91f10eca1a6faa46c9ba5f4ae41cc9
  pattern Language.PureScript.Constants.PrimRowList :: Language.PureScript.Names.ModuleName
9fdbc7356c9f9d382cbfd07f883d8371
  pattern Language.PureScript.Constants.PrimSymbol :: Language.PureScript.Names.ModuleName
944c8f16f3760b075445027ed9622540
  pattern Language.PureScript.Constants.PrimTypeError :: Language.PureScript.Names.ModuleName
5fee4e5f5c35e127f52066e6a8be1a53
  pattern Language.PureScript.Constants.Record :: Language.PureScript.Names.Qualified
                                                    (Language.PureScript.Names.ProperName
                                                       'Language.PureScript.Names.TypeName)
61d5d5ebd00d9ebe5b510ce50122375f
  pattern Language.PureScript.Constants.RowCons :: Language.PureScript.Names.Qualified
                                                     (Language.PureScript.Names.ProperName
                                                        'Language.PureScript.Names.ClassName)
f0abf7cb81906e201affcfd87dd5c649
  pattern Language.PureScript.Constants.RowLacks :: Language.PureScript.Names.Qualified
                                                      (Language.PureScript.Names.ProperName
                                                         'Language.PureScript.Names.ClassName)
c03a43fa9a12089077fac4613e6b5a62
  pattern Language.PureScript.Constants.RowListCons :: Language.PureScript.Names.Qualified
                                                         (Language.PureScript.Names.ProperName
                                                            'Language.PureScript.Names.TypeName)
7375ec6448fadd9f2d3908805a2d962b
  pattern Language.PureScript.Constants.RowListNil :: Language.PureScript.Names.Qualified
                                                        (Language.PureScript.Names.ProperName
                                                           'Language.PureScript.Names.TypeName)
8b2dcc33297c246457b8c80e82a4f309
  pattern Language.PureScript.Constants.RowNub :: Language.PureScript.Names.Qualified
                                                    (Language.PureScript.Names.ProperName
                                                       'Language.PureScript.Names.ClassName)
d74587a4eb7bb4def5d7b462e741d433
  pattern Language.PureScript.Constants.RowToList :: Language.PureScript.Names.Qualified
                                                       (Language.PureScript.Names.ProperName
                                                          'Language.PureScript.Names.ClassName)
56238858710f2399004c902571c29a99
  pattern Language.PureScript.Constants.RowUnion :: Language.PureScript.Names.Qualified
                                                      (Language.PureScript.Names.ProperName
                                                         'Language.PureScript.Names.ClassName)
4e80d8a09dee207a50e9376f8588ac65
  pattern Language.PureScript.Constants.SymbolAppend :: Language.PureScript.Names.Qualified
                                                          (Language.PureScript.Names.ProperName
                                                             'Language.PureScript.Names.ClassName)
acf74d1c24525c0f7c5b9ba051b9e91f
  pattern Language.PureScript.Constants.SymbolCompare :: Language.PureScript.Names.Qualified
                                                           (Language.PureScript.Names.ProperName
                                                              'Language.PureScript.Names.ClassName)
f3d420a592552850aaf987d2eb5f59b5
  pattern Language.PureScript.Constants.SymbolCons :: Language.PureScript.Names.Qualified
                                                        (Language.PureScript.Names.ProperName
                                                           'Language.PureScript.Names.ClassName)
3fd74ff91db8d7d5ecb2266c971970a3
  pattern Language.PureScript.Constants.Warn :: Language.PureScript.Names.Qualified
                                                  (Language.PureScript.Names.ProperName
                                                     'Language.PureScript.Names.ClassName)
07a6e0e5307af6ac6c6cb39144224b3e
  add :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.add1) -}
601e5f4b400635581c9223dc64dc991e
  add1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.add2) -}
ad1eb94cb63cf12c1345033bf578e6f3
  add2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("add"#) -}
4750702e0b009376bd5a972ad34b5737
  and :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.and1) -}
efd9f6e947ab5aa9b09fb38bffc6f74e
  and1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.and2) -}
23a9006c6349ea332e24bb7027c1e83e
  and2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("and"#) -}
8a2a295b394233233460f66d1be1b5db
  append :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.append1) -}
8c9e3ee10c7082662906d571038e04e3
  append1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.append2) -}
9c26756df617e1a3ea26c0b519b558f4
  append2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("append"#) -}
1b3870406d0b271d04e51bc1c492b249
  apply :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.apply1) -}
5bdd0b5903401c0a87c4df496b1d201e
  apply1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.apply2) -}
20a5013980ecbea17fcb34377c7fac0b
  apply2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("apply"#) -}
12f341ea59e1ee33641a725d656e5ec6
  applyFlipped :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.applyFlipped1) -}
4ac4c187cf0b13c4a7441cca3afd13e2
  applyFlipped1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.applyFlipped2) -}
2959bd154919ebd93e1fa70b629c3b81
  applyFlipped2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("applyFlipped"#) -}
4a7a15c22b3ad4640c32dd3fec5a3581
  bind :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.bind1) -}
b3281f98d3fc9b3fdff6880d93598913
  bind1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.bind2) -}
c1fa2ec41a4ed7f482a9602ce3caa804
  bind2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("bind"#) -}
c8b7f103c79daf2ced72791717bcd282
  booleanAlgebraBoolean :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.booleanAlgebraBoolean1) -}
3884eb945dbaa5d871f6c7276652e7ca
  booleanAlgebraBoolean1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.booleanAlgebraBoolean2) -}
522f013561f91241547bda4ba094cbfa
  booleanAlgebraBoolean2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("booleanAlgebraBoolean"#) -}
7b2ab8eaa99ab570f3b4746f815e5d50
  bottom :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.bottom1) -}
f0fcd0be003b74616ec8ffed89134f65
  bottom1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.bottom2) -}
3f5af05f8d950687fb5757ce68929ab0
  bottom2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("bottom"#) -}
03c673ee96e983b04358895c9fae3553
  boundedBoolean :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.boundedBoolean1) -}
6c1abfa0a5e1ce4939e2d5ec890b3bf3
  boundedBoolean1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.boundedBoolean2) -}
197206257fb3ba3bcc49e261e1b55780
  boundedBoolean2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("boundedBoolean"#) -}
f0bf07e9c362c31ff0e6067b79621fae
  compare :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.compare2) -}
bab7a98cc44eb3155743ce9e40232a88
  compare1 :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.compare4) -}
21f49b5f71a1e17a1d33c6c1376d3076
  compare2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.compare3) -}
52eebeda00996f26b75b4d12197186ba
  compare3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("compare"#) -}
8a89613ee209a6b3126a8a6fd9d274da
  compare4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.compare5) -}
4fa99f71ea8d8e5dc74a9ae3ab6f0683
  compare5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("compare1"#) -}
d4778ae519ac1ab665e876b963183db9
  complement :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.complement1) -}
a84f8752b6d63f606c530a0e668782e1
  complement1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.complement2) -}
f7722932638ae3822f1b5597a2ffc0ee
  complement2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("complement"#) -}
e88b91e19e7e44a03bfb4490e650fe70
  compose :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.compose1) -}
a94b7bd0b722de7e36c40570a4a06f34
  compose1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.compose2) -}
081182a1f63d32e4e3ef12b7c5b24c8a
  compose2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("compose"#) -}
3fd06d9e7faac5331184b8a2ad67840c
  composeFlipped :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.composeFlipped1) -}
ed3abd4494ff8a94fbb1e3082e020283
  composeFlipped1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.composeFlipped2) -}
bd1e2986a909d70e110e17af99cf5fad
  composeFlipped2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("composeFlipped"#) -}
c0d86c82691ffc3459145b8fce70ae99
  conj :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.conj1) -}
15a8cf9db554b4a1b626800dcdb5b1f3
  conj1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.conj2) -}
72a3c546c58e84d7b7763b85265dc2ff
  conj2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("conj"#) -}
3aaa0362241b353c5c651d0543beec95
  controlApplicative :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.controlApplicative1) -}
816ec34b3eed661608fd860207d1cf13
  controlApplicative1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.controlApplicative2) -}
8ac67bef3cdc5344120a0b5cd3ee0d6d
  controlApplicative2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Control_Applicative"#) -}
0668cf22b42dfa0325dc81cc2e668c86
  controlBind :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.controlBind1) -}
f529404b7dc124be05988067e1b79e27
  controlBind1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.controlBind2) -}
e53dc17a371a3cf474456cd66a75d52b
  controlBind2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Control_Bind"#) -}
31784bd62e24d078063cb838b1f1b2fd
  controlMonadEffUncurried :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.controlMonadEffUncurried1) -}
b02ce9ae979769b13f9599d99687ffdf
  controlMonadEffUncurried1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.controlMonadEffUncurried2) -}
d4bbeac9b0c1c248483d842be240e40d
  controlMonadEffUncurried2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Control_Monad_Eff_Uncurried"#) -}
0913ade347e1cd99cc73ee362005d4b8
  controlSemigroupoid :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.controlSemigroupoid1) -}
96c8756b152e8ba2309cbdbd6d143606
  controlSemigroupoid1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.controlSemigroupoid2) -}
15091b27fb2bee04f02114782425ab58
  controlSemigroupoid2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Control_Semigroupoid"#) -}
2575ec3882fdc78d6d1862be7791b5d5
  dataArray :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.dataArray1) -}
27a0cf8aa09b5c01132a15ac4b712f03
  dataArray1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.dataArray2) -}
52b829a82f3c70b4b68fd5bcb94beeb5
  dataArray2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Data_Array"#) -}
8decb64881f188cc0d8e9eb736f4a81e
  dataBounded :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.dataBounded1) -}
090136d408724aee4c34403ce69d1746
  dataBounded1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.dataBounded2) -}
d5ddf2b1027422ae6a1ed1d168c772c4
  dataBounded2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Data_Bounded"#) -}
476bd793c1a492cf4c94206bdd121831
  dataEq :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.dataEq1) -}
e73c389760e4a49a59b521af28eeee49
  dataEq1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.dataEq2) -}
7cbbeb199864e7c06c480441284546e9
  dataEq2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Data_Eq"#) -}
2d89c11f64028389631e7fb4e4addb2a
  dataEuclideanRing :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.dataEuclideanRing1) -}
6374a143ef3f71e4e920a8e351331c67
  dataEuclideanRing1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.dataEuclideanRing2) -}
28795530f82f195259e6286e698524a7
  dataEuclideanRing2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Data_EuclideanRing"#) -}
36f06366d854ac821b52597ae92dfbc4
  dataFunction :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.dataFunction1) -}
778b182dbb9562f89efa9bea03e2bf48
  dataFunction1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.dataFunction2) -}
b3439c2c0c99fa537f97e8977e889cfb
  dataFunction2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Data_Function"#) -}
0ecd266398f91e512862a1a824a1e2da
  dataFunctionUncurried :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.dataFunctionUncurried1) -}
5b2d3d47e4d153f9c8d46fdb822c6737
  dataFunctionUncurried1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.dataFunctionUncurried2) -}
1206be97fd11684eb3b9103529e185dc
  dataFunctionUncurried2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Data_Function_Uncurried"#) -}
e49fbe52258b38d902404538b4cc9b50
  dataHeytingAlgebra :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.dataHeytingAlgebra1) -}
a14cea2d9740a53db3b6ebb81d7ffae4
  dataHeytingAlgebra1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.dataHeytingAlgebra2) -}
d74d2bf4280a7f032f1d6ae00099d57f
  dataHeytingAlgebra2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Data_HeytingAlgebra"#) -}
1837bf54b633552f2520c982ea878221
  dataIntBits :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.dataIntBits1) -}
c856f302f67361c35a0a50c4a96a0c79
  dataIntBits1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.dataIntBits2) -}
f59f2d2335c09bc308c5485bcae74454
  dataIntBits2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Data_Int_Bits"#) -}
9df12f5acf79d7c5cebf9d55dfdfd506
  dataOrd :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.dataOrd1) -}
bfd40181c8981531605786d8732c75a2
  dataOrd1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.dataOrd2) -}
d0c36d292a103e3940b201d81c676cfb
  dataOrd2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Data_Ord"#) -}
83bf92df355fdad644a9c772128125e5
  dataRing :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.dataRing1) -}
61df0f3c802c7e2e84a7eceea44e82b9
  dataRing1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.dataRing2) -}
8fafd83ebb668ccc9b480bd2c0333316
  dataRing2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Data_Ring"#) -}
b3292bcdde2bc30c6af136078e416fbc
  dataSemigroup :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.dataSemigroup1) -}
c004ec872a6502faddb3237f5247c1d0
  dataSemigroup1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.dataSemigroup2) -}
41e102285a59f80eb2a079490eaf73e7
  dataSemigroup2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Data_Semigroup"#) -}
728e964916156737ca9e29743df60e70
  dataSemiring :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.dataSemiring1) -}
222b039fdc887dc3572e0a98eab3fe2f
  dataSemiring1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.dataSemiring2) -}
9b80ee156ee0cd1b370dc5713fe1f2e5
  dataSemiring2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Data_Semiring"#) -}
4dca070a3b9cb9120189cb280acbec51
  discard :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.discard1) -}
dd0135282a1af3757f47b6e26abaab74
  discard1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.discard2) -}
85c643f207e863c959b2a68322e71532
  discard2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("discard"#) -}
fb4c49938ad7573cf0726e7433b1a6b3
  discardUnitDictionary :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.discardUnitDictionary1) -}
bd7d9d906e9f8ea71ac8974c88b6df99
  discardUnitDictionary1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.discardUnitDictionary2) -}
8ed4846d8710b4d3c31192fee31360b8
  discardUnitDictionary2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("discardUnit"#) -}
eef71ed336f6115c85694fbf34a89476
  disj :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.disj1) -}
477b5c844955e3999657bc2385b9f21f
  disj1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.disj2) -}
4b288c6fe976f31a9f4309a67071b8be
  disj2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("disj"#) -}
470add851aa7382de4b712edbbf3d3f0
  div :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.div1) -}
d87f92fbf6674f3f092a7efcc0f65dc7
  div1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.div2) -}
4b404de0334dbc603e5f1c0de68aa6a1
  div2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("div"#) -}
416618f9e4c30c262f7a6015a9f16497
  doc :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.doc1) -}
4bd574dd1de36ea99d1bdb257c369453
  doc1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.doc2) -}
957cf00727dfeaf6907a497840f2bc57
  doc2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Doc"#) -}
fa814e23036443b00212e305bb079cc7
  edApplicativeDict ::
    Language.PureScript.Constants.EffectDictionaries
    -> Language.PureScript.PSString.PSString
  RecSel Left Language.PureScript.Constants.EffectDictionaries
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLLLL),1*U(1*U,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Constants.EffectDictionaries) ->
                 case ds of wild { Language.PureScript.Constants.EffectDictionaries ds1 ds2 ds3 ds4 ds5 ->
                 ds1 }) -}
fa814e23036443b00212e305bb079cc7
  edBindDict ::
    Language.PureScript.Constants.EffectDictionaries
    -> Language.PureScript.PSString.PSString
  RecSel Left Language.PureScript.Constants.EffectDictionaries
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSLLL),1*U(A,1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Constants.EffectDictionaries) ->
                 case ds of wild { Language.PureScript.Constants.EffectDictionaries ds1 ds2 ds3 ds4 ds5 ->
                 ds2 }) -}
fa814e23036443b00212e305bb079cc7
  edMonadDict ::
    Language.PureScript.Constants.EffectDictionaries
    -> Language.PureScript.PSString.PSString
  RecSel Left Language.PureScript.Constants.EffectDictionaries
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLSLL),1*U(A,A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Constants.EffectDictionaries) ->
                 case ds of wild { Language.PureScript.Constants.EffectDictionaries ds1 ds2 ds3 ds4 ds5 ->
                 ds3 }) -}
fa814e23036443b00212e305bb079cc7
  edUntil ::
    Language.PureScript.Constants.EffectDictionaries
    -> Language.PureScript.PSString.PSString
  RecSel Left Language.PureScript.Constants.EffectDictionaries
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLLLS),1*U(A,A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Constants.EffectDictionaries) ->
                 case ds of wild { Language.PureScript.Constants.EffectDictionaries ds1 ds2 ds3 ds4 ds5 ->
                 ds5 }) -}
fa814e23036443b00212e305bb079cc7
  edWhile ::
    Language.PureScript.Constants.EffectDictionaries
    -> Language.PureScript.PSString.PSString
  RecSel Left Language.PureScript.Constants.EffectDictionaries
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLLSL),1*U(A,A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Constants.EffectDictionaries) ->
                 case ds of wild { Language.PureScript.Constants.EffectDictionaries ds1 ds2 ds3 ds4 ds5 ->
                 ds4 }) -}
21d364d7b807a956704928f88b8067cf
  eff :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.eff1) -}
b6d8004020e182ac02a96de275a888e9
  eff1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.eff2) -}
553a521816c0a5fbc4515f3d58d78c73
  eff2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Control_Monad_Eff"#) -}
234113cfde08ef1c43373d586e99ee15
  effDictionaries :: Language.PureScript.Constants.EffectDictionaries
  {- Strictness: m,
     Unfolding: (Language.PureScript.Constants.EffectDictionaries
                   Language.PureScript.Constants.effDictionaries9
                     `cast`
                   (Sym (Language.PureScript.PSString.N:PSString[0]))
                   Language.PureScript.Constants.effDictionaries7
                     `cast`
                   (Sym (Language.PureScript.PSString.N:PSString[0]))
                   Language.PureScript.Constants.effDictionaries5
                     `cast`
                   (Sym (Language.PureScript.PSString.N:PSString[0]))
                   Language.PureScript.Constants.effDictionaries3
                     `cast`
                   (Sym (Language.PureScript.PSString.N:PSString[0]))
                   Language.PureScript.Constants.effDictionaries1
                     `cast`
                   (Sym (Language.PureScript.PSString.N:PSString[0]))) -}
583b99b91ca3b607192845b4add2b2e4
  effDictionaries1 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   (GHC.CString.unpackCString#
                      Language.PureScript.Constants.effDictionaries2)) -}
0555578ca255b5854b5989ed84f31ef9
  effDictionaries10 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("applicativeEff"#) -}
c20561520fb5c560fccc857ec7582c1d
  effDictionaries2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("untilE"#) -}
ee751c3ff823bae6780edb62a275db94
  effDictionaries3 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   (GHC.CString.unpackCString#
                      Language.PureScript.Constants.effDictionaries4)) -}
61487066fc2f0406f1f05e537990386c
  effDictionaries4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("whileE"#) -}
e2a3c0c3f2b879b1838a9556a9f9929a
  effDictionaries5 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   (GHC.CString.unpackCString#
                      Language.PureScript.Constants.effDictionaries6)) -}
0da19fe25462ace1cd83fd24bbf68cdb
  effDictionaries6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("monadEff"#) -}
b8ee16edc1e7ed42e088cad82b61aa5a
  effDictionaries7 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   (GHC.CString.unpackCString#
                      Language.PureScript.Constants.effDictionaries8)) -}
f6f5593f76caf1b734b2a46d1ff274dc
  effDictionaries8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("bindEff"#) -}
91969ae11d8656fd692d27e685f25840
  effDictionaries9 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   (GHC.CString.unpackCString#
                      Language.PureScript.Constants.effDictionaries10)) -}
6dc570b85ce57081a3c5ae5b9aa79a93
  effect :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.effect1) -}
1567d7bbc11770c6c72e2c0f1eb1855f
  effect1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.effect2) -}
1fdafecbdf89bb409af480eef5828f89
  effect2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Effect"#) -}
720e7ab4798b5497e8d85eb9de3094e9
  effectDictionaries ::
    Language.PureScript.Constants.EffectDictionaries
  {- Strictness: m,
     Unfolding: (Language.PureScript.Constants.EffectDictionaries
                   Language.PureScript.Constants.effectDictionaries5
                     `cast`
                   (Sym (Language.PureScript.PSString.N:PSString[0]))
                   Language.PureScript.Constants.effectDictionaries3
                     `cast`
                   (Sym (Language.PureScript.PSString.N:PSString[0]))
                   Language.PureScript.Constants.effectDictionaries1
                     `cast`
                   (Sym (Language.PureScript.PSString.N:PSString[0]))
                   Language.PureScript.Constants.effDictionaries3
                     `cast`
                   (Sym (Language.PureScript.PSString.N:PSString[0]))
                   Language.PureScript.Constants.effDictionaries1
                     `cast`
                   (Sym (Language.PureScript.PSString.N:PSString[0]))) -}
9203a24d341f55ec45e2e669108f3a71
  effectDictionaries1 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   (GHC.CString.unpackCString#
                      Language.PureScript.Constants.effectDictionaries2)) -}
488777951f8f6dc2ac4ee750d058d245
  effectDictionaries2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("monadEffect"#) -}
b2c4ce060d5b8c1241610e53cf30f9bb
  effectDictionaries3 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   (GHC.CString.unpackCString#
                      Language.PureScript.Constants.effectDictionaries4)) -}
25dfc6aafcd1ba74634671cda42f6348
  effectDictionaries4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("bindEffect"#) -}
625919120968fead2f27ae30fb1754b1
  effectDictionaries5 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   (GHC.CString.unpackCString#
                      Language.PureScript.Constants.effectDictionaries6)) -}
d14487d5dccfe6a8c95d174c62af9c21
  effectDictionaries6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("applicativeEffect"#) -}
d82eb212a82ebe3820e6103351920f0d
  effectUncurried :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.effectUncurried1) -}
7dada9bdd1d697dda4a1e849022e11cc
  effectUncurried1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.effectUncurried2) -}
a42dcfaca7e794ef9b380a2b5f3c2c67
  effectUncurried2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Effect_Uncurried"#) -}
54fce466423bcf0eeb91d3af0175f601
  eq :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.eq2) -}
2bd98da59a130e385d637d3f86a8a8fa
  eq1 :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.eq4) -}
9ccaea94432c38905113cc969843a50e
  eq2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.eq3) -}
7e8c1090d25316868677d62fdeec7510
  eq3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("eq"#) -}
34e94b9104234d62fe9b8d6659bcf3bf
  eq4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.eq5) -}
cb792fb27ae49d0ef2d079ddb87ac448
  eq5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("eq1"#) -}
fe8b6b337c6d144aec1141d26b2b9fd7
  eqBoolean :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.eqBoolean1) -}
a82f6222845fee762c5b7c29d5913e0e
  eqBoolean1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.eqBoolean2) -}
976ee365130f19b5f95a00fa6a51d2a6
  eqBoolean2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("eqBoolean"#) -}
3b338b89c6d2eb0e0e23b324f5bf974a
  eqChar :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.eqChar1) -}
6e220d1373988070b9318541d80cab6b
  eqChar1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.eqChar2) -}
0c769b7c33b25b1115b1d44fc5f7dd7b
  eqChar2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("eqChar"#) -}
0c917913975381bcfbaf7248cbd4a53a
  eqInt :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.eqInt1) -}
fbd5581dc540f8798d4b3fca000a2cfd
  eqInt1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.eqInt2) -}
6f134165827dbef0e06e88c5c3ed85bf
  eqInt2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("eqInt"#) -}
5c87331a392e22c8ee83881849603b2f
  eqNumber :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.eqNumber1) -}
74be1931b7cbed7e1e7f9b662cc26aad
  eqNumber1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.eqNumber2) -}
e77d1adb16fd24e4a00d48fc6750dce7
  eqNumber2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("eqNumber"#) -}
acb847db11ac758adfb9eecb383c3310
  eqString :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.eqString1) -}
4b6bbed4b9bbb3d7704845300aa0d3ea
  eqString1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.eqString2) -}
371c94eef11c96d37bd7b4c30e4c8dcd
  eqString2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("eqString"#) -}
9785ec9b18e246f6f8cf17527308dbf8
  euclideanRingInt :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.euclideanRingInt1) -}
b1aeb341f5049c5d8035f5e6ac60e4b7
  euclideanRingInt1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.euclideanRingInt2) -}
5e292c5bc3415b8fefe783c65c9f0cfb
  euclideanRingInt2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("euclideanRingInt"#) -}
db7eb91e6637a79d581bd6fb9507d812
  euclideanRingNumber :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.euclideanRingNumber1) -}
ee23e764b8d75077528338706c9f75d8
  euclideanRingNumber1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.euclideanRingNumber2) -}
9e2e781d936ab1bd6da36aa85d0ff3fe
  euclideanRingNumber2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("euclideanRingNumber"#) -}
768fd0ce25194c28cd973efc25364eda
  fromSpine :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.fromSpine1) -}
6e4b7c798ae02ecbfa79f7ad94518dea
  fromSpine1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.fromSpine2) -}
4cc767b658bf1d9edb1877b19264eaf8
  fromSpine2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("fromSpine"#) -}
a1015c0174d65cdec0b7a10190ba10b9
  generic :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.generic1) -}
b10dce854a6e23cfe62fd2cda49bacc4
  generic1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.generic2) -}
e0a835fb7dbd28df5c8cef974fa48ee9
  generic2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Generic"#) -}
fe77b46846c1b90d89c66594fbc8ea83
  greaterThan :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.greaterThan1) -}
8131d24aa08e4843032511c763c2c255
  greaterThan1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.greaterThan2) -}
dc416f477ca901e9525dce3844e892de
  greaterThan2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("greaterThan"#) -}
bea583171ad9c688f1cafac7ad00fc7c
  greaterThanOrEq :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.greaterThanOrEq1) -}
ebd1b271bfbcf233505efa017aaa3807
  greaterThanOrEq1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.greaterThanOrEq2) -}
9bc46e9bfffeeb22924556deb451bf37
  greaterThanOrEq2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("greaterThanOrEq"#) -}
1f1084392b615201440485f137b55861
  heytingAlgebraBoolean :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.heytingAlgebraBoolean1) -}
7679211bddfbcfd1dc6f732133ad0942
  heytingAlgebraBoolean1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.heytingAlgebraBoolean2) -}
90b70d562978c3841963ccd10167940d
  heytingAlgebraBoolean2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("heytingAlgebraBoolean"#) -}
4454fdd926de26fc68c7aeadd559d9a7
  kindOrdering :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.kindOrdering1) -}
9b8659f16a3ef312efde7ad2bb18e848
  kindOrdering1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.$bPrimOrdering4) -}
a5a2b3a9baf6f2e1ad9c2ea9fb9dbaab
  kindRowList :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.kindRowList1) -}
5363d55045aac47f8592408f1ce2a629
  kindRowList1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.$bPrimRowList4) -}
a99670c8da61a9c228e865a95c09270c
  lessThan :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.lessThan1) -}
05023a6d0f6e45599da1bd53174d9535
  lessThan1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.lessThan2) -}
5dcad9f51a75b8d20f3da188a79bf276
  lessThan2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("lessThan"#) -}
6c6b688a114d85bfa712afd89e9c1eaf
  lessThanOrEq :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.lessThanOrEq1) -}
d5a354664f53ba736df292023935f2bc
  lessThanOrEq1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.lessThanOrEq2) -}
08601883d892f30c7d23d6cfa690837c
  lessThanOrEq2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("lessThanOrEq"#) -}
6c49e31d0e0bb2041ab16f6f5f791441
  main :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.main1) -}
cc3e8cb9947ca89f21167ec9a3a96956
  main1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.main2) -}
732736a7ed32a6bbaa8df395aa307354
  main2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
3bfc944ca7178cca071d94421764602e
  map :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.map1) -}
6ae9742d7b87f5fe7b1bd3324f6cf453
  map1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.map2) -}
b842eb8265bd2c1f0be011d356cd3b0b
  map2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("map"#) -}
29900fbb2c6c228374d53af3ff7323f5
  mkEffFn :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.mkEffFn1) -}
4c2789037fde44485e1839998ef43911
  mkEffFn1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.mkEffFn2) -}
b1532aae5cf93b554e71f52cd47df8b3
  mkEffFn2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("mkEffFn"#) -}
6b053877428ab7c1bbcbeda4765dc541
  mkEffectFn :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.mkEffectFn1) -}
30aff8f9b332e641e908490e6e649d1f
  mkEffectFn1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.mkEffectFn2) -}
3d57ee5a6c5e24d4f1e60f7b5fff1ce0
  mkEffectFn2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("mkEffectFn"#) -}
cc24f8530d8ac0254d03fd510ce2ce35
  mkFn :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.mkFn1) -}
3c83ebbd5511ca4e76247fde53fac1f9
  mkFn1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.mkFn2) -}
1d74cdf043e546e65603012305857cfb
  mkFn2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("mkFn"#) -}
016edd7e9fbc0cb5654f24019285161a
  mod :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.mod1) -}
e9da0655b921433f0345259d8eab67a0
  mod1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.mod2) -}
76b1313d0ceb30d9eb73e77758b06487
  mod2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("mod"#) -}
bf38be026f2687c1ffaf0b35165e2d2e
  modifySTRef :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.modifySTRef1) -}
ebe92bb2f4093e4c4c3c37df37eea063
  modifySTRef1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.modifySTRef2) -}
27d329600464388bbfc971c132f8a31f
  modifySTRef2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("modify"#) -}
b233c6e06a75c36a6f19851f6ce162db
  moduleOrdering :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.kindOrdering1) -}
8faa84976762a55de8316bf0fcd7a622
  moduleRow :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.moduleRow1) -}
b44c31d110a5fea2472948745b5fd196
  moduleRow1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.$bPrimRow4) -}
f3edc39eec650dba5ff0e99253f270d3
  moduleRowList :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.kindRowList1) -}
8366c7a32babb889903e4f4cc2b91a5b
  moduleSymbol :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.moduleSymbol1) -}
466ca319720a7d3f75e9c35b4ff36193
  moduleSymbol1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.$bDataSymbol4) -}
556cb7ba7f2ec78cf505161c7d079aaf
  moduloSemiringInt :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.moduloSemiringInt1) -}
7f2e095ba3da6c49a1c3c319db2c348b
  moduloSemiringInt1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.moduloSemiringInt2) -}
282a5cc20d659dac9821b847cc45202a
  moduloSemiringInt2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("moduloSemiringInt"#) -}
14cbfc5cb3d33d3063e91dc280a565f9
  moduloSemiringNumber :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.moduloSemiringNumber1) -}
01d9d39b64ab8779e2f1bc4077aeda56
  moduloSemiringNumber1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.moduloSemiringNumber2) -}
a98b501f8f18bdade4cdfc8af5c79f0d
  moduloSemiringNumber2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("moduloSemiringNumber"#) -}
6bf6b20a38af1cf9da89913a96014896
  mul :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.mul1) -}
48c90f1627097001adea041bf7a5e836
  mul1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.mul2) -}
c25a6996ac16629d3838661a839d7f48
  mul2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("mul"#) -}
e1b56b28dd4e93b9bdbc393809b558a0
  negate :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.negate1) -}
d60493342b74d590c74a8fa56f597106
  negate1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.negate2) -}
3250e584753e818fa354533158afe14f
  negate2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("negate"#) -}
229d2998b3e47b27163a57e63d110306
  newSTRef :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.newSTRef1) -}
d6da4b746ad38b2579ea9adc1c5a446c
  newSTRef1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.newSTRef2) -}
def67d777800ca329026dc730091aa71
  newSTRef2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("new"#) -}
131d7e92ac9d1f8e08c22efed858ca98
  not :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.not1) -}
12a5a927184dfd201fc2bded4e1a85b9
  not1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.not2) -}
d36c2c95b547239bc9dc5c2299d74428
  not2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("not"#) -}
b1ad73ff37e023b890e9ffb3e3fa3d5f
  notEq :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.notEq1) -}
d3eff67976fdc83169aadad6cea044e9
  notEq1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.notEq2) -}
6821561618ce58ad0a53c51a495847d9
  notEq2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("notEq"#) -}
8da5e1db6530abbd3823bc107b3ab352
  one :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.one1) -}
0d282f5131f40d80ab0f6693d6df6941
  one1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.one2) -}
cba4ef4c9a432bb71b074ec1d85eca2e
  one2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("one"#) -}
66d74837799bdec7031ebcda893b4f2d
  or :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.or1) -}
778495115e600b970bb2509223f5ffe5
  or1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.or2) -}
04e126ea7df06b138615a85c9c774dd2
  or2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("or"#) -}
fbd4aa98978b7f9e0b8bd7fcbd2339f5
  ordBoolean :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.ordBoolean1) -}
57183a29d5cc1e3305b9bceddff51fac
  ordBoolean1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.ordBoolean2) -}
ad267431d845ca7c66e99df01ddc646f
  ordBoolean2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ordBoolean"#) -}
96fa655f02208f95917dc15935cb9ffa
  ordChar :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.ordChar1) -}
1a9f6a5a1a530da966ad4b6fdbabd352
  ordChar1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.ordChar2) -}
1e323c887710f0cfa2f92320c6f9b57e
  ordChar2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ordChar"#) -}
2645ec2ecfdf0e839455ded2341da162
  ordInt :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.ordInt1) -}
552afd3ad2169b0e6f4927689c276893
  ordInt1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.ordInt2) -}
5534a19dd7e2b72d048afb4e24722c27
  ordInt2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ordInt"#) -}
5b5f8d198abc51b2342632dac17ac0e9
  ordNumber :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.ordNumber1) -}
e448969268e954630901e4b7a5598f50
  ordNumber1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.ordNumber2) -}
3c31147e9c8ae6d202ab84b4877a47f3
  ordNumber2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ordNumber"#) -}
dd91503ee4182416eb40d35a7c70b806
  ordString :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.ordString1) -}
e7b1eaa2a2c219519ac72fbeac1731fb
  ordString1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.ordString2) -}
bccd869aad25989de5c9d12b3f39f9c0
  ordString2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ordString"#) -}
1ce59a08f9ec73781d39be8c800ce02d
  orderingEQ ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName)
  {- Strictness: m,
     Unfolding: (Language.PureScript.Names.Qualified
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.TypeName)
                   Language.PureScript.Constants.orderingEQ3
                   Language.PureScript.Constants.orderingEQ1
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.TypeName>_P))) -}
ad5ab346797ce5d000b1d3996a60d4c4
  orderingEQ1 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Constants.orderingEQ2) -}
bbac87a2c969b7c77e4a1d24ac6688ba
  orderingEQ2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("EQ"#) -}
c9b11a80a6b916036e1c591bd8b4d6cc
  orderingEQ3 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName
  {- Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ Language.PureScript.Names.ModuleName
                   Language.PureScript.Constants.$bPrimOrdering1
                     `cast`
                   (Sym (Language.PureScript.Names.N:ModuleName[0]))) -}
e000decdb6f2762819516d3d531acc01
  orderingGT ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName)
  {- Strictness: m,
     Unfolding: (Language.PureScript.Names.Qualified
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.TypeName)
                   Language.PureScript.Constants.orderingEQ3
                   Language.PureScript.Constants.orderingGT1
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.TypeName>_P))) -}
a6b61c76918116a60f39d0289cda48e4
  orderingGT1 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Constants.orderingGT2) -}
ddeb0c7dc4fb3afc0b1be139b563681d
  orderingGT2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("GT"#) -}
bf4a4a91eeb386cc5d6191012a784e32
  orderingLT ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName)
  {- Strictness: m,
     Unfolding: (Language.PureScript.Names.Qualified
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.TypeName)
                   Language.PureScript.Constants.orderingEQ3
                   Language.PureScript.Constants.orderingLT1
                     `cast`
                   (Sym (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.TypeName>_P))) -}
29c5f20ac22ec2b05cde85cb4b6eaca6
  orderingLT1 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Constants.orderingLT2) -}
3adacaba4f55f6d78c35babf2f38f469
  orderingLT2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("LT"#) -}
173b9d8634a1c7c60a3840cc0adde379
  partial :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.partial1) -}
dad4f3a6e81dd325b3e76f5def0f363d
  partial1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.$bPartial2) -}
e96e347f8d3b5f9e0ed36b28ee0955ef
  partialUnsafe :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.partialUnsafe1) -}
4f0ecf293007f57c262eb59978fbb2d2
  partialUnsafe1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.partialUnsafe2) -}
12cb3da89f80a5011474c4d59814ab2d
  partialUnsafe2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Partial_Unsafe"#) -}
218840f70bdd94f4a18f57575ba31f15
  prelude :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.prelude1) -}
84010cb84e10ed82730130e6cd8d7cdc
  prelude1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.prelude2) -}
ca4c3ec5c99b2cf53785fba14499dba3
  prelude2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Prelude"#) -}
48b048c216cc1c04ce512572fd809a92
  prim :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.prim1) -}
dc2993a6af871cd214259833cf0b95ec
  prim1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.$bFail9) -}
d9355e396a04309f4d117a0106a262c8
  primModules :: [Language.PureScript.Names.ModuleName]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Language.PureScript.Names.ModuleName
                   Language.PureScript.Constants.$bPartial4
                     `cast`
                   (Sym (Language.PureScript.Names.N:ModuleName[0]))
                   Language.PureScript.Constants.primModules1) -}
43563ac2624c21d361508595b5e6389a
  primModules1 :: [Language.PureScript.Names.ModuleName]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Language.PureScript.Names.ModuleName
                   Language.PureScript.Constants.$bPrimOrdering1
                     `cast`
                   (Sym (Language.PureScript.Names.N:ModuleName[0]))
                   Language.PureScript.Constants.primModules2) -}
af44bc14a7d01afd6f1a73496d145273
  primModules2 :: [Language.PureScript.Names.ModuleName]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Language.PureScript.Names.ModuleName
                   Language.PureScript.Constants.$bPrimRow1
                     `cast`
                   (Sym (Language.PureScript.Names.N:ModuleName[0]))
                   Language.PureScript.Constants.primModules3) -}
9b079f111dfe83848e21996119e68c02
  primModules3 :: [Language.PureScript.Names.ModuleName]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Language.PureScript.Names.ModuleName
                   Language.PureScript.Constants.$bPrimRowList1
                     `cast`
                   (Sym (Language.PureScript.Names.N:ModuleName[0]))
                   Language.PureScript.Constants.primModules4) -}
64a428c0818fb5ae0039a52cf05e1bd2
  primModules4 :: [Language.PureScript.Names.ModuleName]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Language.PureScript.Names.ModuleName
                   Language.PureScript.Constants.$bPrimSymbol1
                     `cast`
                   (Sym (Language.PureScript.Names.N:ModuleName[0]))
                   Language.PureScript.Constants.primModules5) -}
3badd97c618aa9b144722b6add87116b
  primModules5 :: [Language.PureScript.Names.ModuleName]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Language.PureScript.Names.ModuleName
                   Language.PureScript.Constants.$bFail4
                     `cast`
                   (Sym (Language.PureScript.Names.N:ModuleName[0]))
                   (GHC.Types.[] @ Language.PureScript.Names.ModuleName)) -}
f05bc6af011f64af610ef348ff961b7f
  pure' :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.pure'1) -}
d6449a261b68312ace2e35cb4cadb8e7
  pure'1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.pure'2) -}
9cc4772d7d41d4ec5c14c5cc9a21fec4
  pure'2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("pure"#) -}
92853ba3e743d210825cdb9903d76e62
  readSTRef :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.readSTRef1) -}
420c03cedc3c9d514ffadd881bd2c2c1
  readSTRef1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.readSTRef2) -}
6b21c6f13ad185f182938b7bf5f220de
  readSTRef2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("read"#) -}
8f14c8ec58f0ec042ae842dfea054f42
  return :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.return1) -}
deb0690002c730ccdf55ddf32d479a8e
  return1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.return2) -}
8c742f587088a6b93022f98b4b2c1698
  return2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("return"#) -}
f7ca1c59edf73a5f6ab905a3e30cfe5b
  returnEscaped :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.returnEscaped1) -}
d958991b4b39eafc78c0e0f0dd09128c
  returnEscaped1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.returnEscaped2) -}
0fb536e4dfaee2332009bedfb648dcdb
  returnEscaped2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("$return"#) -}
4f9edcd1f0006ebfd575733879d4ed74
  ringInt :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.ringInt1) -}
bb70358caabdaaaf41cd5bd29d08f261
  ringInt1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.ringInt2) -}
cc9e19512fc8e3a85e48db4db31a3594
  ringInt2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ringInt"#) -}
d3b4f8f42381dfd2aa4947b7941f37e4
  ringNumber :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.ringNumber1) -}
ec43559f525c1a765ec072eaee3a381d
  ringNumber1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.ringNumber2) -}
08a4ef0d7caa471c0801daae72b2a1ac
  ringNumber2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ringNumber"#) -}
0f8f05e28080fd6ddad8f51061654361
  runEffFn :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.runEffFn1) -}
efd0336246e9071d5a38863e75fb759e
  runEffFn1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.runEffFn2) -}
89c9087505b7634bc8e99cc3227718fa
  runEffFn2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("runEffFn"#) -}
ce0996c2ba92684edbb31988398a2ff6
  runEffectFn :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.runEffectFn1) -}
2b6529aa2154df11ef8b1b044eff370f
  runEffectFn1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.runEffectFn2) -}
41ac29f4f12b0f1be88e7b3c14255e19
  runEffectFn2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("runEffectFn"#) -}
77b20863594c320186949163795b0d34
  runFn :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.runFn1) -}
77cfd9714c97610b2535ae0dc568bfbd
  runFn1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.runFn2) -}
ee8e8b257f0163a36538a8a167420ce6
  runFn2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("runFn"#) -}
dc5f7ff9e87ebe71a9942e737c74217d
  runST :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.runST1) -}
6ffcb5498f5f29eb534d7eda33bdfa73
  runST1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.runST2) -}
51d7224ea70914dc57119c481cdd0bf3
  runST2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("run"#) -}
5228c40f9e52838eea65edc4d5dea935
  semigroupString :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.semigroupString1) -}
67b2b94a7df5143191229a0e73824bef
  semigroupString1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.semigroupString2) -}
77ebe2a40487de2d78b47d15c3544537
  semigroupString2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("semigroupString"#) -}
b7199de3acf0152f7427088c15605169
  semigroupoidFn :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.semigroupoidFn1) -}
3f1c08741f7c699793aa671db9233b05
  semigroupoidFn1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.semigroupoidFn2) -}
d89f6de8a9c84a71db63cf450fa3b487
  semigroupoidFn2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("semigroupoidFn"#) -}
645de9472e106ee948494c15c5725c7d
  semiringInt :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.semiringInt1) -}
2a92167e9d07051ba7c0e61bfdf81d71
  semiringInt1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.semiringInt2) -}
05f5bd8c94b86168032e71bff7c88be0
  semiringInt2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("semiringInt"#) -}
ea2e695041ab9e6f95cfbc01a3a39eb2
  semiringNumber :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.semiringNumber1) -}
5bfad2483d20fd826351aa7fdca50e2c
  semiringNumber1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.semiringNumber2) -}
ad0855c28a1cbbb63bb4f2ceaab7f5d9
  semiringNumber2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("semiringNumber"#) -}
829d2d0f612cd1bf3469efd3131f27c0
  shl :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.shl1) -}
2e12ababc30d9efc13757987cf87431d
  shl1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.shl2) -}
d94677f94907386a15e2f0ede49eb481
  shl2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("shl"#) -}
551b89b8499e311bef46561f443a92bf
  shr :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.shr1) -}
333c2ed73314247a6e947b1f1f660778
  shr1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.shr2) -}
978655eeb7974e386e967f11a99a28d9
  shr2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("shr"#) -}
965273b4537e0c5f501a6e7b4400bece
  st :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.st1) -}
fa827e5666d79337f2c0068de45dbd7d
  st1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.st2) -}
c64657804e7af14b47b2d78045bb82c7
  st2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Control_Monad_ST_Internal"#) -}
ed07d94292ad20c1378783be440f9183
  stDictionaries :: Language.PureScript.Constants.EffectDictionaries
  {- Strictness: m,
     Unfolding: (Language.PureScript.Constants.EffectDictionaries
                   Language.PureScript.Constants.stDictionaries9
                     `cast`
                   (Sym (Language.PureScript.PSString.N:PSString[0]))
                   Language.PureScript.Constants.stDictionaries7
                     `cast`
                   (Sym (Language.PureScript.PSString.N:PSString[0]))
                   Language.PureScript.Constants.stDictionaries5
                     `cast`
                   (Sym (Language.PureScript.PSString.N:PSString[0]))
                   Language.PureScript.Constants.stDictionaries3
                     `cast`
                   (Sym (Language.PureScript.PSString.N:PSString[0]))
                   Language.PureScript.Constants.stDictionaries1
                     `cast`
                   (Sym (Language.PureScript.PSString.N:PSString[0]))) -}
c2f8b3320a073bb4a8f75d82727c4a95
  stDictionaries1 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   (GHC.CString.unpackCString#
                      Language.PureScript.Constants.stDictionaries2)) -}
ecfe125b842a57bcc0d3170b1ac5d550
  stDictionaries10 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("applicativeST"#) -}
4854dbaef09f3bda5cad04e2a480e73d
  stDictionaries2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("until"#) -}
f022b82328a32c63103a2bd475a7fa61
  stDictionaries3 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   (GHC.CString.unpackCString#
                      Language.PureScript.Constants.stDictionaries4)) -}
75a01f72828d0305aa8461f0e91d0552
  stDictionaries4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("while"#) -}
f16b216f01ae1470e124b3c2eb14ebdf
  stDictionaries5 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   (GHC.CString.unpackCString#
                      Language.PureScript.Constants.stDictionaries6)) -}
90250d21ebeb395f7b8487c70b977513
  stDictionaries6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("monadST"#) -}
456121a37876de0eeb924cb19985c4b8
  stDictionaries7 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   (GHC.CString.unpackCString#
                      Language.PureScript.Constants.stDictionaries8)) -}
340c87fda1dc865d34a3300f3e309bac
  stDictionaries8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("bindST"#) -}
ea05dc826d811980e4ba8ff9d963fba2
  stDictionaries9 :: [GHC.Word.Word16]
  {- Unfolding: (Language.PureScript.PSString.$fIsStringPSString_go
                   (GHC.CString.unpackCString#
                      Language.PureScript.Constants.stDictionaries10)) -}
41b97eb90ca56430878e2bdea4f984ae
  stRefValue :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.stRefValue1) -}
704b3e0e8ebf551ec2229e98a37e7650
  stRefValue1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.stRefValue2) -}
41bdd95c307754be9f007faee582f22f
  stRefValue2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("value"#) -}
c2167ccfa9101a7ae6e83db6ce7ce562
  sub :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.sub1) -}
216c21e1ed00fa7845cd996f2ba10019
  sub1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.sub2) -}
d1ec2f6fc9f0fb82725c82db196018d8
  sub2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("sub"#) -}
b3e315dfc840415af5029bb88d09778d
  symbol :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.moduleSymbol1) -}
38196806f6686a717c7bd917a99696fc
  toSignature :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.toSignature1) -}
a9e42b46fc8539c925d9cde12740b2e8
  toSignature1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.toSignature2) -}
10335f623b2ef79bbe92a3a3df34b706
  toSignature2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("toSignature"#) -}
6cbe3e0d58a1ce261e656d7eae16b485
  toSpine :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.toSpine1) -}
1bc03d79d322f0733033622ad0e1b9b1
  toSpine1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.toSpine2) -}
518315767a473fc614d97499b6a2ed6f
  toSpine2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("toSpine"#) -}
d6eb79bbe757b0ae47c44aa3647d61a6
  top :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.top1) -}
f110bf873b699fcff6e999c8908113f1
  top1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.top2) -}
0056e363fc694cbe29b85f900c4e8fe6
  top2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("top"#) -}
d8456deef0e987ab34ac0f04f316fb63
  typ :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.typ1) -}
62475a050588a0bd5597601acf30a1c6
  typ1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.typ2) -}
c7c6caf7ad4faebb6d0ba15a7c3c27f5
  typ2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Type"#) -}
94a173c1579f7d0f54304ec190a8c730
  typeError :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.typeError1) -}
94bf333d57cf9fa1d69fe36ac6f0b6b4
  typeError1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.$bFail7) -}
e59818a4be78c1acaccdcd57ca5c2293
  undefined :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.undefined1) -}
853dd9040b4b1dc7a1bcb19055bc7dd5
  undefined1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.undefined2) -}
2f66f7865590c217e37e4e43ea7f62d9
  undefined2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("undefined"#) -}
d296ed5f6b6a6b2b1b95f79665e0091c
  unit :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.unit1) -}
19c927890e1c0c72cc3037ce5f5dfe18
  unit1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.unit2) -}
751daf405cd6ad900c8bb48ad09ae70f
  unit2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("unit"#) -}
d18b813e88b47a1c8284d98109aaf4fd
  unsafeCoerce :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.unsafeCoerce1) -}
b87a0ab431f225b5818facd66c3c33c1
  unsafeCoerce1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.unsafeCoerce2) -}
b7c0ec5cfb48c4d0327576c6c4c8fd7d
  unsafeCoerce2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Unsafe_Coerce"#) -}
c8b0b7f5bfad86ae1f6c4341691618b2
  unsafeCoerceFn :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.unsafeCoerceFn1) -}
0daa856ece11c1e067ee31fb480ba713
  unsafeCoerceFn1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.unsafeCoerceFn2) -}
c3899df65a845279a6183904ad75597b
  unsafeCoerceFn2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("unsafeCoerce"#) -}
c8eed047561a1377e4a06fa3599fab86
  unsafeIndex :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.unsafeIndex1) -}
e1e2a1a5b8a142eb06e6439aee4ca53b
  unsafeIndex1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.unsafeIndex2) -}
0f2071d396814f6f38ab5a6ff232ad18
  unsafeIndex2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("unsafeIndex"#) -}
be9e7e502aef2cbb016893c3d5c6cb17
  unsafePartial :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.unsafePartial1) -}
d519d08d5db96887555b6f1ef67cbd3c
  unsafePartial1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.unsafePartial2) -}
e0a55bcd790801f70ed4d462beed2131
  unsafePartial2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("unsafePartial"#) -}
54dc6ea869f244ebcb4641111bb75d31
  writeSTRef :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.writeSTRef1) -}
96741a8912462dce6731b92a0b7f1b33
  writeSTRef1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.writeSTRef2) -}
c8127158afa3c96c2ff5ae8851d41d5d
  writeSTRef2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("write"#) -}
4227b2ec0a00301d30ac41a967461eca
  xor :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.xor1) -}
48093dbbfa24c4fe16b97c450ab5b53b
  xor1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.xor2) -}
eb44be19fb6e139332efa24de449824a
  xor2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("xor"#) -}
988a511b65375c52dd25bea1cef15fff
  zero :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.zero1) -}
b622e484adf14aabaf5d5c7531b6a2f8
  zero1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.zero2) -}
ab9e7f70a87d43249de15b076b121619
  zero2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("zero"#) -}
306c20b7b631c8d9c7324918991432f8
  zshr :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.zshr1) -}
de44b4958ea2f5ab61a70eb2fcaf009b
  zshr1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.zshr2) -}
ecf49f5d04f200b42b1fb6a056775a78
  zshr2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("zshr"#) -}
736b880ed921f6892af5c51ec84b74c9
  (||) :: Data.String.IsString a => a
  {- Arity: 1, Strictness: <C(S),1*C1(U)>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dIsString :: Data.String.IsString a) ->
                 $dIsString `cast` (Data.String.N:IsString[0] <a>_N)
                   Language.PureScript.Constants.||1) -}
f3a2f9379886c8069fc6949aeaea61e6
  ||1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Constants.||2) -}
87eff33024d5db88138723cbd32365e7
  ||2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("||"#) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

