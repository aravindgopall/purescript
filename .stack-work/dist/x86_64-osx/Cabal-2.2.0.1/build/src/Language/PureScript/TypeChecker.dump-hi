
==================== FINAL INTERFACE ====================
2019-01-24 14:16:10.748181 UTC

interface purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.TypeChecker 8043
  interface hash: b56998c91caf3f5ec3bd06475745bf78
  ABI hash: b6c2a0e0dc8f070f588097af1ac535e7
  export-list hash: cc7ee5853d54561d2934c83f97161d45
  orphan hash: b5e20680cb0e3722c7389a0e41724cbe
  flag hash: d1aaa1ad82e1531737fc9bf446674222
  opt_hash: 2c98c95d41c045ae9c2fb565ec8aabc6
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Language.PureScript.TypeChecker.checkNewtype
  Language.PureScript.TypeChecker.typeCheckModule
  Language.PureScript.TypeChecker.Kinds.kindOf
  Language.PureScript.TypeChecker.Kinds.kindOfWithScopedVars
  Language.PureScript.TypeChecker.Kinds.kindsOf
  Language.PureScript.TypeChecker.Kinds.kindsOfAll
  Language.PureScript.TypeChecker.Monad.bindLocalTypeVariables
  Language.PureScript.TypeChecker.Monad.bindLocalVariables
  Language.PureScript.TypeChecker.Monad.bindNames
  Language.PureScript.TypeChecker.Monad.bindTypes
  Language.PureScript.TypeChecker.Monad.captureSubstitution
  Language.PureScript.TypeChecker.Monad.capturingSubstitution
  Language.PureScript.TypeChecker.Monad.checkVisibility
  Language.PureScript.TypeChecker.Monad.emptyCheckState
  Language.PureScript.TypeChecker.Monad.emptySubstitution
  Language.PureScript.TypeChecker.Monad.getEnv
  Language.PureScript.TypeChecker.Monad.getHints
  Language.PureScript.TypeChecker.Monad.getLocalContext
  Language.PureScript.TypeChecker.Monad.getTypeClassDictionaries
  Language.PureScript.TypeChecker.Monad.getVisibility
  Language.PureScript.TypeChecker.Monad.guardWith
  Language.PureScript.TypeChecker.Monad.lookupTypeClassDictionaries
  Language.PureScript.TypeChecker.Monad.lookupTypeClassDictionariesForClass
  Language.PureScript.TypeChecker.Monad.lookupTypeVariable
  Language.PureScript.TypeChecker.Monad.lookupVariable
  Language.PureScript.TypeChecker.Monad.makeBindingGroupVisible
  Language.PureScript.TypeChecker.Monad.modifyEnv
  Language.PureScript.TypeChecker.Monad.preservingNames
  Language.PureScript.TypeChecker.Monad.putEnv
  Language.PureScript.TypeChecker.Monad.rethrowWithPositionTC
  Language.PureScript.TypeChecker.Monad.runCheck
  Language.PureScript.TypeChecker.Monad.runCheck'
  Language.PureScript.TypeChecker.Monad.warnAndRethrowWithPositionTC
  Language.PureScript.TypeChecker.Monad.withBindingGroupVisible
  Language.PureScript.TypeChecker.Monad.withErrorMessageHint
  Language.PureScript.TypeChecker.Monad.withFreshSubstitution
  Language.PureScript.TypeChecker.Monad.withScopedTypeVars
  Language.PureScript.TypeChecker.Monad.withTypeClassDictionaries
  Language.PureScript.TypeChecker.Monad.withoutWarnings
  Language.PureScript.TypeChecker.Synonyms.replaceAllTypeSynonyms
  Language.PureScript.TypeChecker.Synonyms.replaceAllTypeSynonymsM
  Language.PureScript.TypeChecker.Types.typesOf
  Language.PureScript.TypeChecker.Monad.CheckState{Language.PureScript.TypeChecker.Monad.CheckState checkCurrentModule checkEnv checkHints checkNextKind checkNextSkolem checkNextSkolemScope checkNextType checkSubstitution}
  Language.PureScript.TypeChecker.Monad.Substitution{Language.PureScript.TypeChecker.Monad.Substitution substKind substType}
  Language.PureScript.TypeChecker.Monad.Unknown
  Language.PureScript.TypeChecker.Synonyms.SynonymMap
  Language.PureScript.TypeChecker.Types.BindingGroupType{Language.PureScript.TypeChecker.Types.NonRecursiveBindingGroup Language.PureScript.TypeChecker.Types.RecursiveBindingGroup}
  Data.Text.Internal.Text
module dependencies: Control.Monad.Supply
                     Control.Monad.Supply.Class Language.PureScript.AST
                     Language.PureScript.AST.Binders
                     Language.PureScript.AST.Declarations
                     Language.PureScript.AST.Exported Language.PureScript.AST.Literals
                     Language.PureScript.AST.Operators Language.PureScript.AST.SourcePos
                     Language.PureScript.AST.Traversals Language.PureScript.Bundle
                     Language.PureScript.Comments Language.PureScript.Constants
                     Language.PureScript.Crash Language.PureScript.Environment
                     Language.PureScript.Errors Language.PureScript.Kinds
                     Language.PureScript.Label Language.PureScript.Linter
                     Language.PureScript.Linter.Exhaustive
                     Language.PureScript.Linter.Imports Language.PureScript.Names
                     Language.PureScript.PSString Language.PureScript.Parser.Lexer
                     Language.PureScript.Parser.State Language.PureScript.Pretty
                     Language.PureScript.Pretty.Common Language.PureScript.Pretty.Kinds
                     Language.PureScript.Pretty.Types Language.PureScript.Pretty.Values
                     Language.PureScript.Publish.BoxesHelpers
                     Language.PureScript.Sugar.Names.Common
                     Language.PureScript.Sugar.Names.Env
                     Language.PureScript.Sugar.Names.Imports
                     Language.PureScript.Traversals
                     Language.PureScript.TypeChecker.Entailment
                     Language.PureScript.TypeChecker.Kinds
                     Language.PureScript.TypeChecker.Monad
                     Language.PureScript.TypeChecker.Skolems
                     Language.PureScript.TypeChecker.Subsumption
                     Language.PureScript.TypeChecker.Synonyms
                     Language.PureScript.TypeChecker.TypeSearch
                     Language.PureScript.TypeChecker.Types
                     Language.PureScript.TypeChecker.Unify
                     Language.PureScript.TypeClassDictionaries Language.PureScript.Types
                     Paths_purescript
package dependencies: aeson-1.3.1.1 ansi-terminal-0.8.0.4
                      array-0.5.2.0 async-2.2.1 attoparsec-0.13.2.2 base-4.11.1.0
                      base-compat-0.10.4 binary-0.8.5.1 blaze-builder-0.4.1.0 boxes-0.1.5
                      bytestring-0.10.8.2 colour-2.3.4 containers-0.5.11.0
                      data-ordlist-0.4.7.0 deepseq-1.4.3.0 dlist-0.8.0.4 filepath-1.4.2
                      ghc-boot-th-8.4.3 ghc-prim-0.5.2.0 hashable-1.2.7.0
                      integer-gmp-1.0.2.0 integer-logarithms-1.0.2.1
                      language-javascript-0.6.0.11 microlens-0.4.9.1 microlens-ghc-0.4.9
                      microlens-mtl-0.1.11.1 microlens-platform-0.3.10
                      microlens-th-0.4.2.1 mtl-2.2.2 parsec-3.1.13.0 pattern-arrows-0.0.2
                      pretty-1.1.3.6 primitive-0.6.3.0 protolude-0.2.2 random-1.1
                      safe-0.3.17 scientific-0.3.6.2 sourcemap-0.1.6 split-0.2.3.3
                      stm-2.4.5.0 syb-0.7 tagged-0.8.5 template-haskell-2.13.0.0
                      text-1.2.3.0 th-abstraction-0.2.8.0 time-1.8.0.2
                      time-locale-compat-0.1.1.4 transformers-0.5.5.0
                      unordered-containers-0.2.9.0 utf8-string-1.0.1.1 uuid-types-1.0.3
                      vector-0.12.0.1
orphans: syb-0.7:Data.Generics.Instances colour-2.3.4:Data.Colour
         stm-2.4.5.0:Control.Monad.STM
         attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         microlens-platform-0.3.10:Lens.Micro.Platform
         microlens-ghc-0.4.9:Lens.Micro.GHC
         hashable-1.2.7.0:Data.Hashable.Generic
         vector-0.12.0.1:Data.Vector.Unboxed
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.5.0:Control.Monad.Trans.Error
         text-1.2.3.0:Data.Text.Lazy text-1.2.3.0:Data.Text
         binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: aeson-1.3.1.1:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.Graph
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         dlist-0.8.0.4:Data.DList ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         microlens-0.4.9.1:Lens.Micro.Internal
                         microlens-ghc-0.4.9:Lens.Micro.GHC
                         microlens-mtl-0.1.11.1:Lens.Micro.Mtl.Internal
                         microlens-platform-0.3.10:Lens.Micro.Platform
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.Declarations
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.Operators
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.SourcePos
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Comments
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Environment
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Kinds
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Label
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Names
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.PSString
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.TypeClassDictionaries
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Types
                         tagged-0.8.5:Data.Tagged
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
                         th-abstraction-0.2.8.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  base-4.11.1.0:Control.Monad c5f960c67d822497578bffbd3e4c01cf
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.Functor f522c3501272159820fd6f242510732f
import  -/  base-4.11.1.0:Data.List 83dc843e47bfc0c5af51e19c6f3476d5
import  -/  base-4.11.1.0:Data.List.NonEmpty 595ee3baddcadebc4831ea7541427984
import  -/  base-4.11.1.0:Data.Maybe 409c3da2b142470b68be39ce1d97a9f7
import  -/  base-4.11.1.0:Data.OldList 1b35aa3c6805ff7c8887a35a866fe006
import  -/  base-4.11.1.0:Data.Traversable 7ad4edb9184ea1ae8e73f6b94f115c8c
import  -/  base-4.11.1.0:Data.Tuple 3af66f3ac61ed95ba8a3a3f68ebc5003
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-compat-0.10.4:Prelude.Compat bb6796186ed35a1d09dc34362a3fc27e
import  -/  containers-0.5.11.0:Data.Map 0dbdaec812ef695a364aa6c69e7f7d53
import  -/  containers-0.5.11.0:Data.Map.Internal 0150e210d0ae8df0f3a0669d5e32d8fa
import  -/  containers-0.5.11.0:Data.Set 7d3c64a641be4cacbcd8119445bab919
import  -/  containers-0.5.11.0:Data.Set.Internal 93fa3ef95853aa2a7aadf32d693bd451
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  microlens-0.4.9.1:Lens.Micro 962434009a31a5b07a9c325f04604c4d
import  -/  microlens-0.4.9.1:Lens.Micro.Internal 5d6464033dd2b487f83c604f394b1101
import  -/  microlens-platform-0.3.10:Lens.Micro.Platform 0a8b1a3c754e3254d224cc9602b42f64
import  -/  mtl-2.2.2:Control.Monad.Error.Class df146c18e27154b8df4c8637c59fd61b
import  -/  mtl-2.2.2:Control.Monad.State.Class acc76e93f44ac4486524db1a327e0a0a
import  -/  mtl-2.2.2:Control.Monad.Writer.Class 69f540e019eada69892c26d267276458
import  -/  protolude-0.2.2:Protolude 2c2d16096c8a60f59f646a3b93b0eb7b
import  -/  protolude-0.2.2:Protolude.List 3a80368167450d7a4360ebf1ea443345
import  -/  Control.Monad.Supply.Class 4b0577d8897e2d48cd4fc324f0e8c355
  exports: 9b5454b78bf2751cecd07ba41d8b4d51
  MonadSupply 6fd5e162006451a17cf4a7ae2eb71bd2
import  -/  Language.PureScript.AST e89b59f8e201961eafd3ff905a683659
  exports: be73d3bb7d4ebe5df082453f6d572075
import  -/  Language.PureScript.AST.Declarations 586bc75044e8737d02875208d17d4395
  BindingGroupDeclaration fe3c1705a7a0108b856351d712879737
  BoundValueDeclaration c15036e292c80286a90dbb25f336202d
  ClassInstanceArityMismatch 5336dd18a300e4af059fd0c3e2533863
  DataBindingGroupDeclaration dd96274a1938234d4bfdc2a1d4e8e0ff
  DataDeclaration 2fcba6ad709595ed3c4d0926de54bc2c
  Declaration e92f6ee78a22c0eadc3566d7d1f48d5b
  DeclarationRef 1ef988d2f8db98f35f578bde9282f468
  DuplicateInstance d6ce1d56981f24c5c738bf3578231015
  DuplicateTypeArgument 1dd3a867cfcb69332abcfb7dc9e9fd08
  DuplicateTypeClass a6fd946c6e800e6b57dff689d241240f
  DuplicateValueDeclaration 69e1dd10264823a972f6de1d23191235
  ErrorInBindingGroup 2a332e5dc93ee8ae9fd1a76b70d2335b
  ErrorInDataBindingGroup 4e35b147ca975984c4c7c56d6c0a820a
  ErrorInDataConstructor 172043f820f67271f9b57e680e4414d6
  ErrorInForeignImport 5cda31e408caaf5ddccab9b5d74cfcca
  ErrorInInstance 3f5fd04062107e7cfa6b465b93bd0079
  ErrorInModule fa705731a479914ad1b2d8aff2d06ff6
  ErrorInTypeClassDeclaration 646a902488f0b9a1a46ee5f5c7063457
  ErrorInTypeConstructor 20a30789b5f11e3a3165ca50ff3138d6
  ErrorInTypeSynonym eef1254e4c4d8e8fc0d8f54e0a205bcf
  ErrorInValueDeclaration b4d5773974cb3c247524eed712a032a5
  ErrorMessage b0470a74191782e72607e7c5b87318de
  ErrorMessage 7268a73b9f5bbe5a70110aa90f7e1194
  ExpectedType 7a31bdb4cb0936757920cf70f374b411
  Expr e92f6ee78a22c0eadc3566d7d1f48d5b
  ExternDataDeclaration 45e3d2e61e8f85403449183876d3af2f
  ExternDeclaration 180e172298441327dfef1022795a10e0
  ExternKindDeclaration 88852d174ecb6f9a3f22350e4bed5723
  FixityDeclaration 95c5fd24977a7e9400ec16a2317bcd12
  ImportDeclaration b98a8b3e9f19a9a91825a99d72954601
  InvalidInstanceHead 8b910cd07b3dfbe718c34545a7bfeef1
  InvalidNewtype 7b68333d588ba85eeef1ad0ea8fc2255
  KindRef fdcf7f61e078f63d583e2e92289fb303
  MkUnguarded d9deae30ea78016a4bdb453d9978bfa3
  Module 305128e30e200d34d712365aa2d509df
  Module 3342e00ee072addfd009ee61e87fb865
  OrphanInstance 5bb77f0e3d60fac3b55bf469df93e4be
  OverlappingInstances 6b43960ee47cf5e470909fb750ecd2ec
  PositionedError c387f6033b140fe80063a1c6ade0cde7
  RedefinedIdent e6dda0b5782c2bdcfc7c01cc908f16b1
  TransitiveExportError f05abdd432541d03ea993eba5ab2ffee
  TypeClassDeclaration 19936abcaf3693a6825ccbc13b2590dc
  TypeClassRef 0dfae6fa12be94e312c419132246a1f3
  TypeDeclaration 28394461dbd073cca9cdbd263dbb4335
  TypeDeclarationData 3e894c7cbf790244173310e6e620d669
  TypeInstanceDeclaration 46d66658dd5a30ba03e36fc960162f20
  TypeRef 7b2aa9fe81ad40f64c659855da835def
  TypeSynonymDeclaration 1cfe9af195a40456074b96ff0ca4519c
  TypeSynonymInstance 368c737fcf239094eecb7825f3b821f2
  TypedValue 0acc3ace791a36484dcda3706df33cef
  UnusableDeclaration ed45eb8f984cb8e4da92d0834d894b1e
  ValueDecl 97b38919d86cd9182cb8d86b6f4ae734
  ValueDeclaration 3d506e6b33aef3e239802bd27220a2e5
  ValueRef 78dee2d86cdf935e8811ecdd18c169d3
  WildcardInferredType 387efde14cc07acdcea42bcae7f2e8c8
  declRefSourceSpan 9d093733881fe15ce20b105d529f0011
  declSourceSpan 56c2d6f201f67f106a4f2e1dc3f0bb49
  traverseTypeInstanceBody b3dc0429061d0ff256d8d3e4cc7c9512
  tydeclIdent c947d6d8aff56f68d1789e1833a9fcd2
  valdeclIdent dc3fe29a39c3efd97807e85c8c5dc302
import  -/  Language.PureScript.AST.SourcePos 63acacac5b7be73d04e5be0047a9a89a
  NullSourceAnn 5a0bced03127a02790cb165450e72c45
import  -/  Language.PureScript.Crash 3dd739d57f17e8a1e9cd97afd3faf067
  exports: a9d2725f359c2d113bd38076e88ec681
  internalError d33c2a09c5cbe8e68c0bc27d1500ba1a
import  -/  Language.PureScript.Environment 467b25d81b890e1aaabe28d0f09d192d
  exports: a0cb6cb8c78c56365f58c9f88d1fe000
  DataDeclType 7eb61fe78108d98d82e39145869b2402
  DataType a076ec28146acfb660613d56f06f5e88
  Defined 324606166c226f373232031c92abddc6
  ExternData 4cceb3aa3c643794bba97c9286e206cd
  External 8cdfa7f932f8566e563f06b670986495
  FunctionalDependency 181e7295489b314c6c042d61e80bb6b9
  NameKind 7e23f4ddba2350405f465a39833424c7
  Newtype 429106735f422306de0d5ec4acbf7fb1
  TypeClassData 181e7295489b314c6c042d61e80bb6b9
  TypeSynonym b62fadc969156f0dc1f8fb5b90db902b
  dataConstructors 7eb61fe78108d98d82e39145869b2402
  function fb710d9343cfd06856a618519a627f36
  kindType 5aa8fecbb78cb16f648b40b4c0a9a13c
  kinds 7eb61fe78108d98d82e39145869b2402
  makeTypeClassData 01b32b44a7812593fdcf211bf1370ba3
  names 7eb61fe78108d98d82e39145869b2402
  typeClassArguments 181e7295489b314c6c042d61e80bb6b9
  typeClassCoveringSets 181e7295489b314c6c042d61e80bb6b9
  typeClassDeterminedArguments 181e7295489b314c6c042d61e80bb6b9
  typeClassDictionaries 7eb61fe78108d98d82e39145869b2402
  typeClassSuperclasses 181e7295489b314c6c042d61e80bb6b9
  typeClasses 7eb61fe78108d98d82e39145869b2402
  typeSynonyms 7eb61fe78108d98d82e39145869b2402
  types 7eb61fe78108d98d82e39145869b2402
import  -/  Language.PureScript.Errors 3c1ad933587510f8b20a8c9ec2e86ce9
  exports: 8e61484c4664eceb943d9fc4820c721b
  MultipleErrors e1ef6a17348ccfe3ef65185d3c5f9026
  addHint 4d7c0f041e7397261babf0b1c1669b2a
  errorMessage 4308e76c0636918842d6acdb173a8e4b
  errorMessage' d5b3fcc13faf321f693b39ae31b8bd13
  errorSpan 4f1afca5823a071810163f1e0787554d
  filterErrors 4509003273781e6d9a799c773a622199
  positionedError 294ba93655a5845067da4cbeb75d1347
  rethrow 3f15f6976fa85d5a6c226df5a731c52a
  warnAndRethrow 09f641606a5fc3036a7fc4bb9c410020
import  -/  Language.PureScript.Kinds e26b9cf8211f7e72bb44fdd3faed066e
  exports: fe71635ad7964c0d620fb0685614a050
  FunKind 0560a3ce54d445316be516294eb33990
  NamedKind b009a23b35083771c6f52aa92ab5803a
  SourceKind 4cdf50d4b2444221832ca704f3a0c468
  everythingOnKinds e49fbe6d9350dcb19145206a5c3386c0
import  -/  Language.PureScript.Linter e5e7c610a9eb54f7e1aba8ee110cc459
  exports: 1460d53cfe8163d599be25ef25f34add
import  -/  Language.PureScript.Linter.Exhaustive f6aaa8e4d9ec2d8a242b2dd8f821dad8
  checkExhaustiveExpr bc79420f3b17224164857ac6363c4130
import  -/  Language.PureScript.Names 00f694509122478d97b327fbbccae327
  exports: ad7ae34f85124c68e8ba1c90fb2e732f
  ClassName c5d98a635cb261f6a93bf01096d0c6ed
  ConstructorName 84054a8bbbe827ba2ce7da83056a95ee
  Ident 71f167265716f619863a793fa311e198
  Ident bad3562aa6138b6192713ac281080869
  ModuleName 1b2ddf0c04464d2fa2588925f10c1966
  ProperName a7268334e0b909381550b9329cb80fcc
  Qualified b6e1bc9e7244a41d3c6149c9b5c2d6d8
  Qualified 1b2ddf0c04464d2fa2588925f10c1966
  TypeName 40ce511c66a72431b4e87351210f7b03
  disqualify bf1cc3b0e6c1ffc0008a6113bf8116c0
import  -/  Language.PureScript.TypeChecker.Kinds 02e90efcd8f2a4f544b757693da40686
  exports: a5726d79f26ec95f0566a6905a8a7e84
  kindOf 70af85459cf3b4a44152c3e17e69ec09
  kindOfWithScopedVars c3fc678e4f23cadb5ab7e0b61c226e09
  kindsOf 81d12c11aa542ef1e1df0b54a966218b
  kindsOfAll 240513a8d5b67ca45c911b36965fedb2
import  -/  Language.PureScript.TypeChecker.Monad 5c6d6cca9d9f5acb98ab527615b54d6d
  exports: 64079f93a7ca5d81f53055abc7f8ac53
  CheckState 1c1fd6c4bf98d34803cfa9fa561a1e14
  CheckState 9cc3cef00c43c0c2ac24a31e9b521e29
  Substitution d8be7322542c72915fc41d8d1569ae4f
  Substitution 6dc37f96b1ad41d81e906d34e56bda73
  Unknown 028897d769a6e3f1725285ae2a682928
  bindLocalTypeVariables 4279c05238f284a784d5ffc5c8b120e7
  bindLocalVariables d3d61817e30c6d14fa74cb55dc1b127f
  bindNames cec978aa2d75cee2ffee6b227b8740ed
  bindTypes dd91a14f9b244064796c050693047d4f
  captureSubstitution cee45a72eb61672224a0779e05d02a52
  capturingSubstitution 40acdbe38860b70b451bd591b4f7215f
  checkCurrentModule 9cc3cef00c43c0c2ac24a31e9b521e29
  checkEnv 9cc3cef00c43c0c2ac24a31e9b521e29
  checkHints 9cc3cef00c43c0c2ac24a31e9b521e29
  checkNextKind 9cc3cef00c43c0c2ac24a31e9b521e29
  checkNextSkolem 9cc3cef00c43c0c2ac24a31e9b521e29
  checkNextSkolemScope 9cc3cef00c43c0c2ac24a31e9b521e29
  checkNextType 9cc3cef00c43c0c2ac24a31e9b521e29
  checkSubstitution 9cc3cef00c43c0c2ac24a31e9b521e29
  checkVisibility cf16ff61c4446f9bda6bae4524621e38
  emptyCheckState 702a26b401e2a266972b7fdf9b28e232
  emptySubstitution d30b061696cff17c025817e53ed3da58
  getEnv 69aa315a68211d8605a99340dd649d82
  getHints bbecaeac63bedc9e4f131a49eb366479
  getLocalContext 223085abf14117e3398e0e666d63e54f
  getTypeClassDictionaries 299df08a9844c25fa62c56a713d7ba37
  getVisibility 6dbb2b20f7d8dbe1d19534e103e429fc
  guardWith d2b3f12e05a1d4c8c1e59f1c8f3292d4
  lookupTypeClassDictionaries 72f4353405ed3f4fb5489909c051e43c
  lookupTypeClassDictionariesForClass f828a7aded735803a5224827776bcb64
  lookupTypeVariable 1a21a6dd4b005eb084941ab698608c7b
  lookupVariable e5ee90a12677ea7029a891b4e37ff4df
  makeBindingGroupVisible f26d7d5148f07c0c19e39dc15bb01669
  modifyEnv afbc6b07aa67ac6d360aae150935b381
  preservingNames e905c80e24a9ffccbb94ce955ddb8398
  putEnv 81e626fdbef8a42017f8f358ebf2913f
  rethrowWithPositionTC e6322f134367ef65b6658cc8367e1f0c
  runCheck af86b60eea198b4ded19ef1fa9b905af
  runCheck' a85aa9a51f9f809c972072c9aa714394
  substKind 6dc37f96b1ad41d81e906d34e56bda73
  substType 6dc37f96b1ad41d81e906d34e56bda73
  warnAndRethrowWithPositionTC 52783f0f0cdec5b6ee7f6ff28f5a789f
  withBindingGroupVisible f838abdb4c649e2bda552b5c91c16743
  withErrorMessageHint 873c4b1b4503ece5c9a614f4d08067e6
  withFreshSubstitution 284ea6d9c874971bc31a265754a070ff
  withScopedTypeVars a0453ee66ce276d2444e395405e450c4
  withTypeClassDictionaries a48b8b4088719f7d173311a4d14e9441
  withoutWarnings 9a25073ac27c6847631231a5b0c65e08
import  -/  Language.PureScript.TypeChecker.Synonyms 9fc45204d5072944969c53bc432a94f7
  exports: 7d14e10157c623eaf1b349bf4fa32925
  SynonymMap 426e16df32602099cb2259c2c6075de1
  replaceAllTypeSynonyms de486072b313a4c7c1540540e0726c4f
  replaceAllTypeSynonymsM 4035eaa7d2ff9d15435a932920ac04b0
import  -/  Language.PureScript.TypeChecker.Types 9c734727ad5f267521b2c050b184f104
  exports: 36881d5954a8d829275456e84b84ddfd
  BindingGroupType 56c10fc54900c7aac31df0259cf443e6
  NonRecursiveBindingGroup d735857ba6327b81aae3e7b705275ac5
  RecursiveBindingGroup 27c3e5e9c6158ca51fb40d042b230fd3
  typesOf a2b44293e8ee7e6812807c9180c289b8
import  -/  Language.PureScript.TypeClassDictionaries 7fbd42662a194b8e85db9d2e22a4ea07
  exports: d83fdf73223cc4030d8649333c7594ad
  NamedDict 5e215d8e3d225869af57b18c7fc0b693
  TypeClassDictionaryInScope 83c0c3aa36a88c60dd2bb2e7525bc817
  tcdChain d6c50933d00906849633ac7fdfbcd506
  tcdInstanceTypes d6c50933d00906849633ac7fdfbcd506
  tcdValue d6c50933d00906849633ac7fdfbcd506
import  -/  Language.PureScript.Types 80a51f62cb3e6c71f024289b88f07b7f
  exports: 229bb7528146da886cffbefad5822e19
  ConstrainedType 7b7b9fe5fc37a912cec5b01815c7784d
  KindedType 7d9c2ac5dbbe89c236f431d3c9412617
  RCons baa72184843999f17a8e5f8391aabd36
  REmpty 55ca0a758aacaf511eb4882e2b81a0fc
  SourceConstraint b73f205dd83ce498c3119d8c9316f0c6
  SourceType 0ac818517c14fedd280ef5885ae0cdc3
  TypeApp 9dadf19674ff2d747cbba0c42dfad343
  TypeConstructor c7b7bcec494a17e684a206aeb55ef57b
  TypeLevelString 8a25ec25c9b44a7602f610ae833b697e
  TypeVar 9a7c02efa8540e6f48c3a672f3ebc8db
  TypeWildcard e8def149f21247f8f38af9a4e50f9298
  constraintClass d5fc19231e8a71936895da17eade4f5b
  eqType d5fc19231e8a71936895da17eade4f5b
  everythingOnTypes a337a56452e37b7c1eabcf74ce7ae28d
  freeTypeVariables 7c158db5841b5f009cf842114ddd0949
  mkForAll 32dbaffce5d1be85229c96393de9b357
  overConstraintArgs 2da70afc69a79b004bf08baecbde0992
  srcTypeApp 12cd55eb1b1b79c16fa2d346fb7f9cdb
  srcTypeConstructor bb445f2f58f3f299e4deae81f6001187
  srcTypeVar 48385e53396d525a164ce8b1126142da
import  -/  text-1.2.3.0:Data.Text 7daa7e6c9b39d8cc1679e5ec5c64d2be
import  -/  text-1.2.3.0:Data.Text.Internal 30a0a123f71f63b26cd34c6b24f23411
463b6964007f8afb3d56f61d981ae92a
  $s$fEqMaybe ::
    GHC.Classes.Eq
      (GHC.Base.Maybe Language.PureScript.Names.ModuleName)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                  (\ (ds :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                     (ds1 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName) ->
                   case ds of wild {
                     GHC.Base.Nothing
                     -> case ds1 of wild1 {
                          GHC.Base.Nothing -> GHC.Types.True
                          GHC.Base.Just ipv -> GHC.Types.False }
                     GHC.Base.Just a1
                     -> case ds1 of wild1 {
                          GHC.Base.Nothing -> GHC.Types.False
                          GHC.Base.Just b1
                          -> GHC.Classes.$fEq[]_$c==
                               @ (Language.PureScript.Names.ProperName
                                    'Language.PureScript.Names.Namespace)
                               (Language.PureScript.Names.$fEqProperName
                                  @ 'Language.PureScript.Names.Namespace)
                               a1 `cast` (Language.PureScript.Names.N:ModuleName[0])
                               b1 `cast` (Language.PureScript.Names.N:ModuleName[0]) } })
                  Language.PureScript.TypeChecker.$s$fEqMaybe_$s$fEqMaybe_$c/= -}
9bd1ab5d51c6a9c69a5ed5136f1d14c8
  $s$fEqMaybe_$c== ::
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ds1 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName) ->
                 case ds of wild {
                   GHC.Base.Nothing
                   -> case ds1 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.True
                        GHC.Base.Just ipv -> GHC.Types.False }
                   GHC.Base.Just a1
                   -> case ds1 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.False
                        GHC.Base.Just b1
                        -> GHC.Classes.$fEq[]_$c==
                             @ (Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.Namespace)
                             (Language.PureScript.Names.$fEqProperName
                                @ 'Language.PureScript.Names.Namespace)
                             a1 `cast` (Language.PureScript.Names.N:ModuleName[0])
                             b1 `cast` (Language.PureScript.Names.N:ModuleName[0]) } }) -}
ab3a1cef00bb0408ccf5e7f6c1ede352
  $s$fEqMaybe_$s$fEqMaybe_$c/= ::
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (y :: GHC.Base.Maybe Language.PureScript.Names.ModuleName) ->
                 case x of wild {
                   GHC.Base.Nothing
                   -> case y of wild1 {
                        GHC.Base.Nothing -> GHC.Types.False
                        GHC.Base.Just ipv -> GHC.Types.True }
                   GHC.Base.Just a1
                   -> case y of wild1 {
                        GHC.Base.Nothing -> GHC.Types.True
                        GHC.Base.Just b1
                        -> case GHC.Classes.$fEq[]_$c==
                                  @ (Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.Namespace)
                                  (Language.PureScript.Names.$fEqProperName
                                     @ 'Language.PureScript.Names.Namespace)
                                  a1 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                  b1 `cast` (Language.PureScript.Names.N:ModuleName[0]) of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False } } }) -}
81b486371dfe11e644361503cdb1053d
  $s$fEqQualified ::
    GHC.Classes.Eq
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName))
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.Qualified
                       (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ClassName))
                  (Language.PureScript.Names.$fEqQualified_$c==
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ClassName)
                     (Language.PureScript.Names.$fEqProperName
                        @ 'Language.PureScript.Names.ClassName))
                  Language.PureScript.TypeChecker.$s$fEqQualified_$s$fEqQualified_$c/= -}
222e4f6d39f13b5f4bf610db4eb7aa10
  $s$fEqQualified1 ::
    GHC.Classes.Eq
      (Language.PureScript.Names.Qualified
         Language.PureScript.Names.Ident)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.Qualified
                       Language.PureScript.Names.Ident)
                  (Language.PureScript.Names.$fEqQualified_$c==
                     @ Language.PureScript.Names.Ident
                     Language.PureScript.Names.$fEqIdent)
                  Language.PureScript.TypeChecker.$s$fEqQualified_$s$fEqQualified_$c/=1 -}
a8e487da224bbf572e9a613d4fb4b4b3
  $s$fEqQualified2 ::
    GHC.Classes.Eq
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName))
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.Qualified
                       (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.TypeName))
                  (Language.PureScript.Names.$fEqQualified_$c==
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.TypeName)
                     (Language.PureScript.Names.$fEqProperName
                        @ 'Language.PureScript.Names.TypeName))
                  Language.PureScript.TypeChecker.$s$fEqQualified_$s$fEqQualified_$c/=2 -}
ef3072a04ddfd116cc63f98a96ed780f
  $s$fEqQualified3 ::
    GHC.Classes.Eq
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.KindName))
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.Qualified
                       (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.KindName))
                  (Language.PureScript.Names.$fEqQualified_$c==
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.KindName)
                     (Language.PureScript.Names.$fEqProperName
                        @ 'Language.PureScript.Names.KindName))
                  Language.PureScript.TypeChecker.$s$fEqQualified_$s$fEqQualified_$c/=3 -}
78ac051873ef22c966df10639d4a20ce
  $s$fEqQualified4 ::
    GHC.Classes.Eq
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ConstructorName))
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.Qualified
                       (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ConstructorName))
                  (Language.PureScript.Names.$fEqQualified_$c==
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ConstructorName)
                     (Language.PureScript.Names.$fEqProperName
                        @ 'Language.PureScript.Names.ConstructorName))
                  Language.PureScript.TypeChecker.$s$fEqQualified_$s$fEqQualified_$c/=4 -}
44b4168c993512b970882ab9a4c84255
  $s$fEqQualified_$s$fEqQualified_$c/= ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U(U,U,U))><S(SL),1*U(1*U,1*U(U,U,U))>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ClassName))
                   (y :: Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ClassName)) ->
                 case Language.PureScript.Names.$fEqQualified_$c==
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ClassName)
                        (Language.PureScript.Names.$fEqProperName
                           @ 'Language.PureScript.Names.ClassName)
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
91b6474590a7ef76dc74fc19d81b7efa
  $s$fEqQualified_$s$fEqQualified_$c/=1 ::
    Language.PureScript.Names.Qualified Language.PureScript.Names.Ident
    -> Language.PureScript.Names.Qualified
         Language.PureScript.Names.Ident
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Names.Qualified
                           Language.PureScript.Names.Ident)
                   (y :: Language.PureScript.Names.Qualified
                           Language.PureScript.Names.Ident) ->
                 case Language.PureScript.Names.$fEqQualified_$c==
                        @ Language.PureScript.Names.Ident
                        Language.PureScript.Names.$fEqIdent
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
a43cff6f539e42edb5d592d8068eaffa
  $s$fEqQualified_$s$fEqQualified_$c/=2 ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName)
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName)
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U(U,U,U))><S(SL),1*U(1*U,1*U(U,U,U))>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.TypeName))
                   (y :: Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.TypeName)) ->
                 case Language.PureScript.Names.$fEqQualified_$c==
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.TypeName)
                        (Language.PureScript.Names.$fEqProperName
                           @ 'Language.PureScript.Names.TypeName)
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
48803f5d1fa9f9725f9de095b211cfd2
  $s$fEqQualified_$s$fEqQualified_$c/=3 ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.KindName)
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.KindName)
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U(U,U,U))><S(SL),1*U(1*U,1*U(U,U,U))>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.KindName))
                   (y :: Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.KindName)) ->
                 case Language.PureScript.Names.$fEqQualified_$c==
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.KindName)
                        (Language.PureScript.Names.$fEqProperName
                           @ 'Language.PureScript.Names.KindName)
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
dec607841e7ca4e35246963783e7311c
  $s$fEqQualified_$s$fEqQualified_$c/=4 ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ConstructorName)
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ConstructorName)
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U(U,U,U))><S(SL),1*U(1*U,1*U(U,U,U))>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ConstructorName))
                   (y :: Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ConstructorName)) ->
                 case Language.PureScript.Names.$fEqQualified_$c==
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ConstructorName)
                        (Language.PureScript.Names.$fEqProperName
                           @ 'Language.PureScript.Names.ConstructorName)
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
7817cbca5f6c5df1f61668d6d6f4fe98
  $s$fEqSet ::
    GHC.Classes.Eq
      (Data.Set.Internal.Set Language.PureScript.Names.ModuleName)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Set.Internal.Set Language.PureScript.Names.ModuleName)
                  (Data.Set.Internal.$fEqSet_$c==
                     @ Language.PureScript.Names.ModuleName
                     Language.PureScript.Names.$fEqModuleName)
                  Language.PureScript.TypeChecker.$s$fEqSet_$s$fEqSet_$c/= -}
7d2c865d6445fee74b5c45912deb18a9
  $s$fEqSet_$s$fEqSet_$c/= ::
    Data.Set.Internal.Set Language.PureScript.Names.ModuleName
    -> Data.Set.Internal.Set Language.PureScript.Names.ModuleName
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Data.Set.Internal.Set
                           Language.PureScript.Names.ModuleName)
                   (y :: Data.Set.Internal.Set
                           Language.PureScript.Names.ModuleName) ->
                 case Data.Set.Internal.$fEqSet_$c==
                        @ Language.PureScript.Names.ModuleName
                        Language.PureScript.Names.$fEqModuleName
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
ca126f2796ddff912854a75f7c2e17e1
  $s$fOrdMaybe ::
    GHC.Classes.Ord
      (GHC.Base.Maybe Language.PureScript.Names.ModuleName)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                  Language.PureScript.TypeChecker.$s$fEqMaybe
                  (\ (a1 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                     (b :: GHC.Base.Maybe Language.PureScript.Names.ModuleName) ->
                   case a1 of wild {
                     GHC.Base.Nothing
                     -> case b of wild1 {
                          GHC.Base.Nothing -> GHC.Types.EQ
                          GHC.Base.Just ipv -> GHC.Types.LT }
                     GHC.Base.Just a2
                     -> case b of wild1 {
                          GHC.Base.Nothing -> GHC.Types.GT
                          GHC.Base.Just b1
                          -> GHC.Classes.$fOrd[]_$ccompare
                               @ (Language.PureScript.Names.ProperName
                                    'Language.PureScript.Names.Namespace)
                               (Language.PureScript.Names.$fOrdProperName
                                  @ 'Language.PureScript.Names.Namespace)
                               a2 `cast` (Language.PureScript.Names.N:ModuleName[0])
                               b1 `cast` (Language.PureScript.Names.N:ModuleName[0]) } })
                  (\ (a1 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                     (b :: GHC.Base.Maybe Language.PureScript.Names.ModuleName) ->
                   case a1 of wild {
                     GHC.Base.Nothing
                     -> case b of wild1 {
                          GHC.Base.Nothing -> GHC.Types.False
                          GHC.Base.Just ipv -> GHC.Types.True }
                     GHC.Base.Just a2
                     -> case b of wild1 {
                          GHC.Base.Nothing -> GHC.Types.False
                          GHC.Base.Just b1
                          -> Language.PureScript.Names.$fOrdModuleName6
                               a2 `cast` (Language.PureScript.Names.N:ModuleName[0])
                               b1 `cast` (Language.PureScript.Names.N:ModuleName[0]) } })
                  (\ (a1 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                     (b :: GHC.Base.Maybe Language.PureScript.Names.ModuleName) ->
                   case b of wild {
                     GHC.Base.Nothing
                     -> case a1 of wild1 {
                          GHC.Base.Nothing -> GHC.Types.True
                          GHC.Base.Just ipv -> GHC.Types.False }
                     GHC.Base.Just a2
                     -> case a1 of wild1 {
                          GHC.Base.Nothing -> GHC.Types.True
                          GHC.Base.Just b1
                          -> case GHC.Classes.$fOrd[]_$ccompare
                                    @ (Language.PureScript.Names.ProperName
                                         'Language.PureScript.Names.Namespace)
                                    (Language.PureScript.Names.$fOrdProperName
                                       @ 'Language.PureScript.Names.Namespace)
                                    a2 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                    b1 `cast` (Language.PureScript.Names.N:ModuleName[0]) of wild2 {
                               DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False } } })
                  (\ (a1 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                     (b :: GHC.Base.Maybe Language.PureScript.Names.ModuleName) ->
                   case b of wild {
                     GHC.Base.Nothing
                     -> case a1 of wild1 {
                          GHC.Base.Nothing -> GHC.Types.False
                          GHC.Base.Just ipv -> GHC.Types.True }
                     GHC.Base.Just a2
                     -> case a1 of wild1 {
                          GHC.Base.Nothing -> GHC.Types.False
                          GHC.Base.Just b1
                          -> Language.PureScript.Names.$fOrdModuleName6
                               a2 `cast` (Language.PureScript.Names.N:ModuleName[0])
                               b1 `cast` (Language.PureScript.Names.N:ModuleName[0]) } })
                  (\ (a1 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                     (b :: GHC.Base.Maybe Language.PureScript.Names.ModuleName) ->
                   case a1 of wild {
                     GHC.Base.Nothing
                     -> case b of wild1 {
                          GHC.Base.Nothing -> GHC.Types.True
                          GHC.Base.Just ipv -> GHC.Types.False }
                     GHC.Base.Just a2
                     -> case b of wild1 {
                          GHC.Base.Nothing -> GHC.Types.True
                          GHC.Base.Just b1
                          -> case GHC.Classes.$fOrd[]_$ccompare
                                    @ (Language.PureScript.Names.ProperName
                                         'Language.PureScript.Names.Namespace)
                                    (Language.PureScript.Names.$fOrdProperName
                                       @ 'Language.PureScript.Names.Namespace)
                                    a2 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                    b1 `cast` (Language.PureScript.Names.N:ModuleName[0]) of wild2 {
                               DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False } } })
                  (\ (x :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                     (y :: GHC.Base.Maybe Language.PureScript.Names.ModuleName) ->
                   case y of wild {
                     GHC.Base.Nothing -> x
                     GHC.Base.Just a1
                     -> case x of wild1 {
                          GHC.Base.Nothing -> wild
                          GHC.Base.Just b1
                          -> case GHC.Classes.$fOrd[]_$ccompare
                                    @ (Language.PureScript.Names.ProperName
                                         'Language.PureScript.Names.Namespace)
                                    (Language.PureScript.Names.$fOrdProperName
                                       @ 'Language.PureScript.Names.Namespace)
                                    a1 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                    b1 `cast` (Language.PureScript.Names.N:ModuleName[0]) of wild2 {
                               DEFAULT -> wild GHC.Types.LT -> wild1 } } })
                  (\ (x :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                     (y :: GHC.Base.Maybe Language.PureScript.Names.ModuleName) ->
                   case y of wild {
                     GHC.Base.Nothing
                     -> case x of wild1 { DEFAULT ->
                        GHC.Base.Nothing @ Language.PureScript.Names.ModuleName }
                     GHC.Base.Just a1
                     -> case x of wild1 {
                          GHC.Base.Nothing
                          -> GHC.Base.Nothing @ Language.PureScript.Names.ModuleName
                          GHC.Base.Just b1
                          -> case GHC.Classes.$fOrd[]_$ccompare
                                    @ (Language.PureScript.Names.ProperName
                                         'Language.PureScript.Names.Namespace)
                                    (Language.PureScript.Names.$fOrdProperName
                                       @ 'Language.PureScript.Names.Namespace)
                                    a1 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                    b1 `cast` (Language.PureScript.Names.N:ModuleName[0]) of wild2 {
                               DEFAULT -> wild1 GHC.Types.LT -> wild } } }) -}
34fa3ef72c00041ac23090a229a9ebf0
  $s$fOrdQualified ::
    GHC.Classes.Ord
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName))
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.Qualified
                       (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ClassName))
                  Language.PureScript.TypeChecker.$s$fEqQualified
                  (Language.PureScript.Names.$fOrdQualified_$ccompare
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ClassName)
                     (Language.PureScript.Names.$fOrdProperName
                        @ 'Language.PureScript.Names.ClassName))
                  (Language.PureScript.Names.$fOrdQualified_$c<
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ClassName)
                     (Language.PureScript.Names.$fOrdProperName
                        @ 'Language.PureScript.Names.ClassName))
                  (\ (a1 :: Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.ClassName))
                     (b :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ClassName)) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.ClassName)
                          (Language.PureScript.Names.$fOrdProperName
                             @ 'Language.PureScript.Names.ClassName)
                          b
                          a1 of wild {
                     GHC.Types.False -> GHC.Types.True
                     GHC.Types.True -> GHC.Types.False })
                  (\ (a1 :: Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.ClassName))
                     (b :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ClassName)) ->
                   Language.PureScript.Names.$fOrdQualified_$c<
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ClassName)
                     (Language.PureScript.Names.$fOrdProperName
                        @ 'Language.PureScript.Names.ClassName)
                     b
                     a1)
                  (\ (a1 :: Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.ClassName))
                     (b :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ClassName)) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.ClassName)
                          (Language.PureScript.Names.$fOrdProperName
                             @ 'Language.PureScript.Names.ClassName)
                          a1
                          b of wild {
                     GHC.Types.False -> GHC.Types.True
                     GHC.Types.True -> GHC.Types.False })
                  (\ (x :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ClassName))
                     (y :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ClassName)) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.ClassName)
                          (Language.PureScript.Names.$fOrdProperName
                             @ 'Language.PureScript.Names.ClassName)
                          y
                          x of wild {
                     GHC.Types.False -> y GHC.Types.True -> x })
                  (\ (x :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ClassName))
                     (y :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ClassName)) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.ClassName)
                          (Language.PureScript.Names.$fOrdProperName
                             @ 'Language.PureScript.Names.ClassName)
                          y
                          x of wild {
                     GHC.Types.False -> x GHC.Types.True -> y }) -}
f8274a61d17c3981f20d8c72c0b5256b
  $s$fOrdQualified1 ::
    GHC.Classes.Ord
      (Language.PureScript.Names.Qualified
         Language.PureScript.Names.Ident)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.Qualified
                       Language.PureScript.Names.Ident)
                  Language.PureScript.TypeChecker.$s$fEqQualified1
                  (Language.PureScript.Names.$fOrdQualified_$ccompare
                     @ Language.PureScript.Names.Ident
                     Language.PureScript.Names.$fOrdIdent)
                  (Language.PureScript.Names.$fOrdQualified_$c<
                     @ Language.PureScript.Names.Ident
                     Language.PureScript.Names.$fOrdIdent)
                  (\ (a1 :: Language.PureScript.Names.Qualified
                              Language.PureScript.Names.Ident)
                     (b :: Language.PureScript.Names.Qualified
                             Language.PureScript.Names.Ident) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ Language.PureScript.Names.Ident
                          Language.PureScript.Names.$fOrdIdent
                          b
                          a1 of wild {
                     GHC.Types.False -> GHC.Types.True
                     GHC.Types.True -> GHC.Types.False })
                  (\ (a1 :: Language.PureScript.Names.Qualified
                              Language.PureScript.Names.Ident)
                     (b :: Language.PureScript.Names.Qualified
                             Language.PureScript.Names.Ident) ->
                   Language.PureScript.Names.$fOrdQualified_$c<
                     @ Language.PureScript.Names.Ident
                     Language.PureScript.Names.$fOrdIdent
                     b
                     a1)
                  (\ (a1 :: Language.PureScript.Names.Qualified
                              Language.PureScript.Names.Ident)
                     (b :: Language.PureScript.Names.Qualified
                             Language.PureScript.Names.Ident) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ Language.PureScript.Names.Ident
                          Language.PureScript.Names.$fOrdIdent
                          a1
                          b of wild {
                     GHC.Types.False -> GHC.Types.True
                     GHC.Types.True -> GHC.Types.False })
                  (\ (x :: Language.PureScript.Names.Qualified
                             Language.PureScript.Names.Ident)
                     (y :: Language.PureScript.Names.Qualified
                             Language.PureScript.Names.Ident) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ Language.PureScript.Names.Ident
                          Language.PureScript.Names.$fOrdIdent
                          y
                          x of wild {
                     GHC.Types.False -> y GHC.Types.True -> x })
                  (\ (x :: Language.PureScript.Names.Qualified
                             Language.PureScript.Names.Ident)
                     (y :: Language.PureScript.Names.Qualified
                             Language.PureScript.Names.Ident) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ Language.PureScript.Names.Ident
                          Language.PureScript.Names.$fOrdIdent
                          y
                          x of wild {
                     GHC.Types.False -> x GHC.Types.True -> y }) -}
b191c116013bc92375836f227bd036af
  $s$fOrdQualified2 ::
    GHC.Classes.Ord
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName))
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.Qualified
                       (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.TypeName))
                  Language.PureScript.TypeChecker.$s$fEqQualified2
                  (Language.PureScript.Names.$fOrdQualified_$ccompare
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.TypeName)
                     (Language.PureScript.Names.$fOrdProperName
                        @ 'Language.PureScript.Names.TypeName))
                  (Language.PureScript.Names.$fOrdQualified_$c<
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.TypeName)
                     (Language.PureScript.Names.$fOrdProperName
                        @ 'Language.PureScript.Names.TypeName))
                  (\ (a1 :: Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.TypeName))
                     (b :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.TypeName)) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.TypeName)
                          (Language.PureScript.Names.$fOrdProperName
                             @ 'Language.PureScript.Names.TypeName)
                          b
                          a1 of wild {
                     GHC.Types.False -> GHC.Types.True
                     GHC.Types.True -> GHC.Types.False })
                  (\ (a1 :: Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.TypeName))
                     (b :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.TypeName)) ->
                   Language.PureScript.Names.$fOrdQualified_$c<
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.TypeName)
                     (Language.PureScript.Names.$fOrdProperName
                        @ 'Language.PureScript.Names.TypeName)
                     b
                     a1)
                  (\ (a1 :: Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.TypeName))
                     (b :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.TypeName)) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.TypeName)
                          (Language.PureScript.Names.$fOrdProperName
                             @ 'Language.PureScript.Names.TypeName)
                          a1
                          b of wild {
                     GHC.Types.False -> GHC.Types.True
                     GHC.Types.True -> GHC.Types.False })
                  (\ (x :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.TypeName))
                     (y :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.TypeName)) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.TypeName)
                          (Language.PureScript.Names.$fOrdProperName
                             @ 'Language.PureScript.Names.TypeName)
                          y
                          x of wild {
                     GHC.Types.False -> y GHC.Types.True -> x })
                  (\ (x :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.TypeName))
                     (y :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.TypeName)) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.TypeName)
                          (Language.PureScript.Names.$fOrdProperName
                             @ 'Language.PureScript.Names.TypeName)
                          y
                          x of wild {
                     GHC.Types.False -> x GHC.Types.True -> y }) -}
1d46a001d56ef6b6089dfab63a4a820a
  $s$fOrdQualified3 ::
    GHC.Classes.Ord
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.KindName))
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.Qualified
                       (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.KindName))
                  Language.PureScript.TypeChecker.$s$fEqQualified3
                  (Language.PureScript.Names.$fOrdQualified_$ccompare
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.KindName)
                     (Language.PureScript.Names.$fOrdProperName
                        @ 'Language.PureScript.Names.KindName))
                  (Language.PureScript.Names.$fOrdQualified_$c<
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.KindName)
                     (Language.PureScript.Names.$fOrdProperName
                        @ 'Language.PureScript.Names.KindName))
                  (\ (a1 :: Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.KindName))
                     (b :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.KindName)) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.KindName)
                          (Language.PureScript.Names.$fOrdProperName
                             @ 'Language.PureScript.Names.KindName)
                          b
                          a1 of wild {
                     GHC.Types.False -> GHC.Types.True
                     GHC.Types.True -> GHC.Types.False })
                  (\ (a1 :: Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.KindName))
                     (b :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.KindName)) ->
                   Language.PureScript.Names.$fOrdQualified_$c<
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.KindName)
                     (Language.PureScript.Names.$fOrdProperName
                        @ 'Language.PureScript.Names.KindName)
                     b
                     a1)
                  (\ (a1 :: Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.KindName))
                     (b :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.KindName)) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.KindName)
                          (Language.PureScript.Names.$fOrdProperName
                             @ 'Language.PureScript.Names.KindName)
                          a1
                          b of wild {
                     GHC.Types.False -> GHC.Types.True
                     GHC.Types.True -> GHC.Types.False })
                  (\ (x :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.KindName))
                     (y :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.KindName)) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.KindName)
                          (Language.PureScript.Names.$fOrdProperName
                             @ 'Language.PureScript.Names.KindName)
                          y
                          x of wild {
                     GHC.Types.False -> y GHC.Types.True -> x })
                  (\ (x :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.KindName))
                     (y :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.KindName)) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.KindName)
                          (Language.PureScript.Names.$fOrdProperName
                             @ 'Language.PureScript.Names.KindName)
                          y
                          x of wild {
                     GHC.Types.False -> x GHC.Types.True -> y }) -}
d289de036bb4e56621b96a375df4f8a7
  $s$fOrdQualified4 ::
    GHC.Classes.Ord
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ConstructorName))
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.Qualified
                       (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ConstructorName))
                  Language.PureScript.TypeChecker.$s$fEqQualified4
                  (Language.PureScript.Names.$fOrdQualified_$ccompare
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ConstructorName)
                     (Language.PureScript.Names.$fOrdProperName
                        @ 'Language.PureScript.Names.ConstructorName))
                  (Language.PureScript.Names.$fOrdQualified_$c<
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ConstructorName)
                     (Language.PureScript.Names.$fOrdProperName
                        @ 'Language.PureScript.Names.ConstructorName))
                  (\ (a1 :: Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.ConstructorName))
                     (b :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ConstructorName)) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.ConstructorName)
                          (Language.PureScript.Names.$fOrdProperName
                             @ 'Language.PureScript.Names.ConstructorName)
                          b
                          a1 of wild {
                     GHC.Types.False -> GHC.Types.True
                     GHC.Types.True -> GHC.Types.False })
                  (\ (a1 :: Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.ConstructorName))
                     (b :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ConstructorName)) ->
                   Language.PureScript.Names.$fOrdQualified_$c<
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ConstructorName)
                     (Language.PureScript.Names.$fOrdProperName
                        @ 'Language.PureScript.Names.ConstructorName)
                     b
                     a1)
                  (\ (a1 :: Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.ConstructorName))
                     (b :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ConstructorName)) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.ConstructorName)
                          (Language.PureScript.Names.$fOrdProperName
                             @ 'Language.PureScript.Names.ConstructorName)
                          a1
                          b of wild {
                     GHC.Types.False -> GHC.Types.True
                     GHC.Types.True -> GHC.Types.False })
                  (\ (x :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ConstructorName))
                     (y :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ConstructorName)) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.ConstructorName)
                          (Language.PureScript.Names.$fOrdProperName
                             @ 'Language.PureScript.Names.ConstructorName)
                          y
                          x of wild {
                     GHC.Types.False -> y GHC.Types.True -> x })
                  (\ (x :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ConstructorName))
                     (y :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ConstructorName)) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.ConstructorName)
                          (Language.PureScript.Names.$fOrdProperName
                             @ 'Language.PureScript.Names.ConstructorName)
                          y
                          x of wild {
                     GHC.Types.False -> x GHC.Types.True -> y }) -}
68cb18279fb3c2672abf95091b63fb6e
  $s$fOrdSet ::
    GHC.Classes.Ord
      (Data.Set.Internal.Set Language.PureScript.Names.ModuleName)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Set.Internal.Set Language.PureScript.Names.ModuleName)
                  Language.PureScript.TypeChecker.$s$fEqSet
                  (\ (s1 :: Data.Set.Internal.Set
                              Language.PureScript.Names.ModuleName)
                     (s2 :: Data.Set.Internal.Set
                              Language.PureScript.Names.ModuleName) ->
                   GHC.Classes.$fOrd[]_$ccompare
                     @ Language.PureScript.Names.ModuleName
                     Language.PureScript.Names.$fOrdModuleName
                     (Data.Set.Internal.$fDataSet_go
                        @ Language.PureScript.Names.ModuleName
                        (GHC.Types.[] @ Language.PureScript.Names.ModuleName)
                        s1)
                     (Data.Set.Internal.$fDataSet_go
                        @ Language.PureScript.Names.ModuleName
                        (GHC.Types.[] @ Language.PureScript.Names.ModuleName)
                        s2))
                  (Data.Set.Internal.$fOrdSet_$c<
                     @ Language.PureScript.Names.ModuleName
                     Language.PureScript.Names.$fOrdModuleName)
                  (Data.Set.Internal.$fOrdSet_$c<=
                     @ Language.PureScript.Names.ModuleName
                     Language.PureScript.Names.$fOrdModuleName)
                  (Data.Set.Internal.$fOrdSet_$c>
                     @ Language.PureScript.Names.ModuleName
                     Language.PureScript.Names.$fOrdModuleName)
                  (Data.Set.Internal.$fOrdSet_$c>=
                     @ Language.PureScript.Names.ModuleName
                     Language.PureScript.Names.$fOrdModuleName)
                  (Data.Set.Internal.$fOrdSet_$cmax
                     @ Language.PureScript.Names.ModuleName
                     Language.PureScript.Names.$fOrdModuleName)
                  (Data.Set.Internal.$fOrdSet_$cmin
                     @ Language.PureScript.Names.ModuleName
                     Language.PureScript.Names.$fOrdModuleName) -}
7755750adf6fe62df0d6c2db327cb324
  $s$wsplitS ::
    GHC.Types.Int
    -> Data.Set.Internal.Set GHC.Types.Int
    -> (# Data.Set.Internal.Set GHC.Types.Int,
          Data.Set.Internal.Set GHC.Types.Int #)
  {- Arity: 2, Strictness: <L,1*U(U)><S,1*U>, Inline: [~] -}
94a47eaca135236d152acdfe4da08f08
  $s$wsplitS1 ::
    Language.PureScript.Names.ModuleName
    -> Data.Set.Internal.Set Language.PureScript.Names.ModuleName
    -> (# Data.Set.Internal.Set Language.PureScript.Names.ModuleName,
          Data.Set.Internal.Set Language.PureScript.Names.ModuleName #)
  {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [~] -}
4e14b558d0c48bc55d279d8afedc786c
  $sdifference ::
    Data.Set.Internal.Set GHC.Types.Int
    -> Data.Set.Internal.Set GHC.Types.Int
    -> Data.Set.Internal.Set GHC.Types.Int
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [~] -}
405df082ecb2befa911b7be237f001a6
  $sdifference1 ::
    Data.Set.Internal.Set
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName))
    -> Data.Set.Internal.Set
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName))
    -> Data.Set.Internal.Set
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName))
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [~] -}
6469d76b2dedcee4e4366b68aafe36cb
  $sfromList ::
    [(GHC.Types.Int, a)] -> Data.Map.Internal.Map GHC.Types.Int a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a (ds :: [(GHC.Types.Int, a)]) ->
                 case ds of wild {
                   [] -> Data.Map.Internal.Tip @ GHC.Types.Int @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case kx of dt { GHC.Types.I# ipv ->
                           Data.Map.Internal.Bin
                             @ GHC.Types.Int
                             @ a
                             1#
                             dt
                             x
                             (Data.Map.Internal.Tip @ GHC.Types.Int @ a)
                             (Data.Map.Internal.Tip @ GHC.Types.Int @ a) }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case kx of wild4 { GHC.Types.I# x1 ->
                           case ky of wild5 { GHC.Types.I# y ->
                           case GHC.Prim.>=# x1 y of lwild {
                             DEFAULT
                             -> Language.PureScript.TypeChecker.$sfromList_$s$wpoly_go13
                                  @ a
                                  y
                                  ds3
                                  ipv1
                                  (Data.Map.Internal.Bin
                                     @ GHC.Types.Int
                                     @ a
                                     1#
                                     wild4
                                     x
                                     (Data.Map.Internal.Tip @ GHC.Types.Int @ a)
                                     (Data.Map.Internal.Tip @ GHC.Types.Int @ a))
                                  1#
                             1#
                             -> Language.PureScript.TypeChecker.$sfromList_$spoly_go14
                                  @ a
                                  y
                                  ds3
                                  ipv1
                                  (Data.Map.Internal.Bin
                                     @ GHC.Types.Int
                                     @ a
                                     1#
                                     wild4
                                     x
                                     (Data.Map.Internal.Tip @ GHC.Types.Int @ a)
                                     (Data.Map.Internal.Tip @ GHC.Types.Int @ a)) } } } } } } }) -}
b13085206aaa967f2db4907673944c54
  $sfromList1 ::
    [(Data.Text.Internal.Text, a)]
    -> Data.Map.Internal.Map Data.Text.Internal.Text a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a (ds :: [(Data.Text.Internal.Text, a)]) ->
                 case ds of wild {
                   [] -> Data.Map.Internal.Tip @ Data.Text.Internal.Text @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case kx of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                           Data.Map.Internal.Bin
                             @ Data.Text.Internal.Text
                             @ a
                             1#
                             dt
                             x
                             (Data.Map.Internal.Tip @ Data.Text.Internal.Text @ a)
                             (Data.Map.Internal.Tip @ Data.Text.Internal.Text @ a) }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case kx of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                           case ky of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                           case Data.Text.$w$ccompare ww1 ww2 ww3 ww5 ww6 ww7 of wild4 {
                             DEFAULT
                             -> Language.PureScript.TypeChecker.$sfromList_$spoly_go1
                                  @ a
                                  ww5
                                  ww6
                                  ww7
                                  ds3
                                  ipv1
                                  (Data.Map.Internal.Bin
                                     @ Data.Text.Internal.Text
                                     @ a
                                     1#
                                     ww
                                     x
                                     (Data.Map.Internal.Tip @ Data.Text.Internal.Text @ a)
                                     (Data.Map.Internal.Tip @ Data.Text.Internal.Text @ a))
                             GHC.Types.LT
                             -> Language.PureScript.TypeChecker.$sfromList_$s$wpoly_go1
                                  @ a
                                  ww5
                                  ww6
                                  ww7
                                  ds3
                                  ipv1
                                  (Data.Map.Internal.Bin
                                     @ Data.Text.Internal.Text
                                     @ a
                                     1#
                                     ww
                                     x
                                     (Data.Map.Internal.Tip @ Data.Text.Internal.Text @ a)
                                     (Data.Map.Internal.Tip @ Data.Text.Internal.Text @ a))
                                  1# } } } } } } }) -}
707a823c831a30a464745f8bc3a9ead2
  $sfromList2 ::
    [Data.Set.Internal.Set Language.PureScript.Names.ModuleName]
    -> Data.Set.Internal.Set
         (Data.Set.Internal.Set Language.PureScript.Names.ModuleName)
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [Data.Set.Internal.Set
                             Language.PureScript.Names.ModuleName]) ->
                 case ds of wild {
                   []
                   -> Data.Set.Internal.Tip
                        @ (Data.Set.Internal.Set Language.PureScript.Names.ModuleName)
                   : x ds1
                   -> case ds1 of wild1 {
                        []
                        -> case x of dt { DEFAULT ->
                           Data.Set.Internal.Bin
                             @ (Data.Set.Internal.Set Language.PureScript.Names.ModuleName)
                             1#
                             dt
                             (Data.Set.Internal.Tip
                                @ (Data.Set.Internal.Set Language.PureScript.Names.ModuleName))
                             (Data.Set.Internal.Tip
                                @ (Data.Set.Internal.Set Language.PureScript.Names.ModuleName)) }
                        : ipv ipv1
                        -> case GHC.Classes.$fOrd[]_$ccompare
                                  @ Language.PureScript.Names.ModuleName
                                  Language.PureScript.Names.$fOrdModuleName
                                  (Data.Set.Internal.$fDataSet_go
                                     @ Language.PureScript.Names.ModuleName
                                     (GHC.Types.[] @ Language.PureScript.Names.ModuleName)
                                     x)
                                  (Data.Set.Internal.$fDataSet_go
                                     @ Language.PureScript.Names.ModuleName
                                     (GHC.Types.[] @ Language.PureScript.Names.ModuleName)
                                     ipv) of wild2 {
                             DEFAULT
                             -> case x of dt { DEFAULT ->
                                Language.PureScript.TypeChecker.$sfromList_$sgo4
                                  ipv
                                  ipv1
                                  (Data.Set.Internal.Bin
                                     @ (Data.Set.Internal.Set Language.PureScript.Names.ModuleName)
                                     1#
                                     dt
                                     (Data.Set.Internal.Tip
                                        @ (Data.Set.Internal.Set
                                             Language.PureScript.Names.ModuleName))
                                     (Data.Set.Internal.Tip
                                        @ (Data.Set.Internal.Set
                                             Language.PureScript.Names.ModuleName))) }
                             GHC.Types.LT
                             -> case x of dt { DEFAULT ->
                                Language.PureScript.TypeChecker.$sfromList_$s$wgo3
                                  ipv
                                  ipv1
                                  (Data.Set.Internal.Bin
                                     @ (Data.Set.Internal.Set Language.PureScript.Names.ModuleName)
                                     1#
                                     dt
                                     (Data.Set.Internal.Tip
                                        @ (Data.Set.Internal.Set
                                             Language.PureScript.Names.ModuleName))
                                     (Data.Set.Internal.Tip
                                        @ (Data.Set.Internal.Set
                                             Language.PureScript.Names.ModuleName)))
                                  1# } } } }) -}
68f914a60b7898a5da8d5f6478fde798
  $sfromList3 ::
    [Language.PureScript.Names.ModuleName]
    -> Data.Set.Internal.Set Language.PureScript.Names.ModuleName
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [Language.PureScript.Names.ModuleName]) ->
                 case ds of wild {
                   [] -> Data.Set.Internal.Tip @ Language.PureScript.Names.ModuleName
                   : x ds1
                   -> case ds1 of wild1 {
                        []
                        -> case x `cast`
                                (Language.PureScript.Names.N:ModuleName[0]) of nt { DEFAULT ->
                           Data.Set.Internal.Bin
                             @ Language.PureScript.Names.ModuleName
                             1#
                             nt `cast` (Sym (Language.PureScript.Names.N:ModuleName[0]))
                             (Data.Set.Internal.Tip @ Language.PureScript.Names.ModuleName)
                             (Data.Set.Internal.Tip @ Language.PureScript.Names.ModuleName) }
                        : ipv ipv1
                        -> case GHC.Classes.$fOrd[]_$ccompare
                                  @ (Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.Namespace)
                                  (Language.PureScript.Names.$fOrdProperName
                                     @ 'Language.PureScript.Names.Namespace)
                                  x `cast` (Language.PureScript.Names.N:ModuleName[0])
                                  ipv `cast` (Language.PureScript.Names.N:ModuleName[0]) of wild2 {
                             DEFAULT
                             -> case x `cast`
                                     (Language.PureScript.Names.N:ModuleName[0]) of nt { DEFAULT ->
                                Language.PureScript.TypeChecker.$sfromList_$sgo1
                                  ipv
                                  ipv1
                                  (Data.Set.Internal.Bin
                                     @ Language.PureScript.Names.ModuleName
                                     1#
                                     nt `cast` (Sym (Language.PureScript.Names.N:ModuleName[0]))
                                     (Data.Set.Internal.Tip @ Language.PureScript.Names.ModuleName)
                                     (Data.Set.Internal.Tip
                                        @ Language.PureScript.Names.ModuleName)) }
                             GHC.Types.LT
                             -> case x `cast`
                                     (Language.PureScript.Names.N:ModuleName[0]) of nt { DEFAULT ->
                                Language.PureScript.TypeChecker.$sfromList_$s$wgo1
                                  ipv
                                  ipv1
                                  (Data.Set.Internal.Bin
                                     @ Language.PureScript.Names.ModuleName
                                     1#
                                     nt `cast` (Sym (Language.PureScript.Names.N:ModuleName[0]))
                                     (Data.Set.Internal.Tip @ Language.PureScript.Names.ModuleName)
                                     (Data.Set.Internal.Tip @ Language.PureScript.Names.ModuleName))
                                  1# } } } }) -}
7db19d08112ea56ba2bf6a1374996f8a
  $sfromList4 ::
    [GHC.Types.Int] -> Data.Set.Internal.Set GHC.Types.Int
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [GHC.Types.Int]) ->
                 case ds of wild {
                   [] -> Data.Set.Internal.Tip @ GHC.Types.Int
                   : x ds1
                   -> case ds1 of wild1 {
                        []
                        -> case x of dt { GHC.Types.I# ipv ->
                           Data.Set.Internal.Bin
                             @ GHC.Types.Int
                             1#
                             dt
                             (Data.Set.Internal.Tip @ GHC.Types.Int)
                             (Data.Set.Internal.Tip @ GHC.Types.Int) }
                        : ipv ipv1
                        -> case x of wild2 { GHC.Types.I# x1 ->
                           case ipv of wild3 { GHC.Types.I# y ->
                           case GHC.Prim.>=# x1 y of lwild {
                             DEFAULT
                             -> Language.PureScript.TypeChecker.$sfromList_$s$wgo2
                                  y
                                  ipv1
                                  (Data.Set.Internal.Bin
                                     @ GHC.Types.Int
                                     1#
                                     wild2
                                     (Data.Set.Internal.Tip @ GHC.Types.Int)
                                     (Data.Set.Internal.Tip @ GHC.Types.Int))
                                  1#
                             1#
                             -> Language.PureScript.TypeChecker.$sfromList_$sgo2
                                  y
                                  ipv1
                                  (Data.Set.Internal.Bin
                                     @ GHC.Types.Int
                                     1#
                                     wild2
                                     (Data.Set.Internal.Tip @ GHC.Types.Int)
                                     (Data.Set.Internal.Tip @ GHC.Types.Int)) } } } } }) -}
8b7f12000aab1d5346898c4d576122da
  $sfromList5 ::
    [Language.PureScript.Names.Qualified
       (Language.PureScript.Names.ProperName
          'Language.PureScript.Names.ClassName)]
    -> Data.Set.Internal.Set
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName))
  {- Arity: 1, Strictness: <S,1*U> -}
a6fb38a41d6df64650564be934deea48
  $sfromList_$s$wgo1 ::
    Language.PureScript.Names.ModuleName
    -> [Language.PureScript.Names.ModuleName]
    -> Data.Set.Internal.Set Language.PureScript.Names.ModuleName
    -> GHC.Prim.Int#
    -> Data.Set.Internal.Set Language.PureScript.Names.ModuleName
  {- Arity: 4, Strictness: <S,U><S,1*U><S,1*U><L,U> -}
6c3e5a303dc38294e8042724892af7be
  $sfromList_$s$wgo2 ::
    GHC.Prim.Int#
    -> [GHC.Types.Int]
    -> Data.Set.Internal.Set GHC.Types.Int
    -> GHC.Prim.Int#
    -> Data.Set.Internal.Set GHC.Types.Int
  {- Arity: 4, Strictness: <S,U><S,1*U><S,1*U><L,U> -}
a0194c86a903e51a408c4b9b2f163116
  $sfromList_$s$wgo3 ::
    Data.Set.Internal.Set Language.PureScript.Names.ModuleName
    -> [Data.Set.Internal.Set Language.PureScript.Names.ModuleName]
    -> Data.Set.Internal.Set
         (Data.Set.Internal.Set Language.PureScript.Names.ModuleName)
    -> GHC.Prim.Int#
    -> Data.Set.Internal.Set
         (Data.Set.Internal.Set Language.PureScript.Names.ModuleName)
  {- Arity: 4, Strictness: <S,U><S,1*U><S,1*U><L,U> -}
8068d087bd990b39a6bc2f6404c1a5c6
  $sfromList_$s$wpoly_go1 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> a
    -> [(Data.Text.Internal.Text, a)]
    -> Data.Map.Internal.Map Data.Text.Internal.Text a
    -> GHC.Prim.Int#
    -> Data.Map.Internal.Map Data.Text.Internal.Text a
  {- Arity: 7, Strictness: <S,U><S,U><S,U><L,U><S,1*U><S,1*U><L,U> -}
9ddd4c40d1a926665245c870052a6b13
  $sfromList_$s$wpoly_go13 ::
    GHC.Prim.Int#
    -> a
    -> [(GHC.Types.Int, a)]
    -> Data.Map.Internal.Map GHC.Types.Int a
    -> GHC.Prim.Int#
    -> Data.Map.Internal.Map GHC.Types.Int a
  {- Arity: 5, Strictness: <S,U><L,U><S,1*U><S,1*U><L,U> -}
2f36d49a4a996ba1e91bd3c444c30e27
  $sfromList_$sgo1 ::
    Language.PureScript.Names.ModuleName
    -> [Language.PureScript.Names.ModuleName]
    -> Data.Set.Internal.Set Language.PureScript.Names.ModuleName
    -> Data.Set.Internal.Set Language.PureScript.Names.ModuleName
  {- Arity: 3, Strictness: <S,U><S,1*U><S,1*U> -}
2d51689ea46ebf41e6d5d9bdfa6b30f1
  $sfromList_$sgo2 ::
    GHC.Prim.Int#
    -> [GHC.Types.Int]
    -> Data.Set.Internal.Set GHC.Types.Int
    -> Data.Set.Internal.Set GHC.Types.Int
  {- Arity: 3, Strictness: <S,U><S,1*U><S,1*U> -}
c399821b9796be7485ac7e32adbc1bb3
  $sfromList_$sgo4 ::
    Data.Set.Internal.Set Language.PureScript.Names.ModuleName
    -> [Data.Set.Internal.Set Language.PureScript.Names.ModuleName]
    -> Data.Set.Internal.Set
         (Data.Set.Internal.Set Language.PureScript.Names.ModuleName)
    -> Data.Set.Internal.Set
         (Data.Set.Internal.Set Language.PureScript.Names.ModuleName)
  {- Arity: 3, Strictness: <S,U><S,1*U><S,1*U> -}
04de3805eca3173475d29030a2105605
  $sfromList_$spoly_go1 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> a
    -> [(Data.Text.Internal.Text, a)]
    -> Data.Map.Internal.Map Data.Text.Internal.Text a
    -> Data.Map.Internal.Map Data.Text.Internal.Text a
  {- Arity: 6, Strictness: <S,U><S,U><S,U><L,U><S,1*U><S,1*U> -}
2f8b94d396f2fbde8eb61ada1a7f443a
  $sfromList_$spoly_go14 ::
    GHC.Prim.Int#
    -> a
    -> [(GHC.Types.Int, a)]
    -> Data.Map.Internal.Map GHC.Types.Int a
    -> Data.Map.Internal.Map GHC.Types.Int a
  {- Arity: 4, Strictness: <S,U><L,U><S,1*U><S,1*U> -}
590ce27d6aa6b55d875ec9a9e86d2e32
  $sinsertR_$sgo3 ::
    Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ModuleName
    -> Data.Set.Internal.Set Language.PureScript.Names.ModuleName
    -> Data.Set.Internal.Set Language.PureScript.Names.ModuleName
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U> -}
e83e9ca2d33363fa15cf740a1a1afa8e
  $sinsertWith_$sgo13 ::
    Data.Map.Internal.Map
      (GHC.Base.Maybe Language.PureScript.Names.ModuleName)
      (Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName))
         (Data.Map.Internal.Map
            (Language.PureScript.Names.Qualified
               Language.PureScript.Names.Ident)
            (GHC.Base.NonEmpty
               (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
                  (Language.PureScript.Names.Qualified
                     Language.PureScript.Names.Ident)))))
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName))
         (Data.Map.Internal.Map
            (Language.PureScript.Names.Qualified
               Language.PureScript.Names.Ident)
            (GHC.Base.NonEmpty
               (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
                  (Language.PureScript.Names.Qualified
                     Language.PureScript.Names.Ident))))
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> GHC.Classes.Ord
         (GHC.Base.Maybe Language.PureScript.Names.ModuleName) =>
       Data.Map.Internal.Map
         (GHC.Base.Maybe Language.PureScript.Names.ModuleName)
         (Data.Map.Internal.Map
            (Language.PureScript.Names.Qualified
               (Language.PureScript.Names.ProperName
                  'Language.PureScript.Names.ClassName))
            (Data.Map.Internal.Map
               (Language.PureScript.Names.Qualified
                  Language.PureScript.Names.Ident)
               (GHC.Base.NonEmpty
                  Language.PureScript.TypeClassDictionaries.NamedDict)))
  {- Arity: 4,
     Strictness: <S,1*U><L,U><S,1*U><L,U(A,C(C1(U)),A,A,A,A,A,A)> -}
32aff5a8689c3d8ba8aea8fa091a4dfd
  $sinsert_$s$sgo3 ::
    GHC.Prim.Int#
    -> Language.PureScript.Names.ModuleName
    -> Data.Set.Internal.Set Language.PureScript.Names.ModuleName
    -> Data.Set.Internal.Set Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ModuleName
    -> Data.Set.Internal.Set Language.PureScript.Names.ModuleName
  {- Arity: 6, Strictness: <L,U><S,U><L,U><L,U><S,1*U><L,U> -}
f1ae1c147e9ee3cecb4bc85eacec8aa0
  $sinsert_$sgo3 ::
    Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ModuleName
    -> Data.Set.Internal.Set Language.PureScript.Names.ModuleName
    -> Data.Set.Internal.Set Language.PureScript.Names.ModuleName
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U> -}
8ef209eef8483a9b941b3fa450b93cc1
  $sinsert_go13 ::
    GHC.Classes.Ord k1 =>
    k1
    -> k1
    -> a1
    -> Data.Map.Internal.Map k1 a1
    -> Data.Map.Internal.Map k1 a1
  {- Arity: 5,
     Strictness: <L,U(A,C(C1(U)),A,A,A,A,A,A)><L,U><S,1*U><L,U><S,1*U> -}
6c7a8d76898629c34ee8c1b75a01210d
  $sinsert_go3 ::
    GHC.Classes.Ord a1 =>
    a1 -> a1 -> Data.Set.Internal.Set a1 -> Data.Set.Internal.Set a1
  {- Arity: 4,
     Strictness: <L,U(A,C(C1(U)),A,A,A,A,A,A)><L,U><S,1*U><S,1*U> -}
74f2feecbb249fd5dc1d87b34ba79a84
  $sintersection ::
    Data.Set.Internal.Set Language.PureScript.Names.ModuleName
    -> Data.Set.Internal.Set Language.PureScript.Names.ModuleName
    -> Data.Set.Internal.Set Language.PureScript.Names.ModuleName
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [~] -}
4e944d271abca9cba749cba134467303
  $slookup3 ::
    Data.Text.Internal.Text
    -> Data.Map.Internal.Map Data.Text.Internal.Text a
    -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S(SSS),1*U(U,U,U)><S,1*U>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (w :: Data.Text.Internal.Text)
                   (w1 :: Data.Map.Internal.Map Data.Text.Internal.Text a) ->
                 case w of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Language.PureScript.TypeChecker.$wpoly_go1 @ a ww1 ww2 ww3 w1 }) -}
b017c042d1f90453cc6875af36ec71c1
  $slookup_$s$wpoly_go1 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ConstructorName))
      (Language.PureScript.Environment.DataDeclType,
       Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName,
       Language.PureScript.Types.Type
         (Language.PureScript.AST.SourcePos.SourceSpan,
          [Language.PureScript.Comments.Comment]),
       [Language.PureScript.Names.Ident])
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> ((Data.Text.Internal.Text :: *)
        ~R# (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ConstructorName :: *)) =>
       Language.PureScript.Names.ModuleName
       -> GHC.Base.Maybe
            (Language.PureScript.Environment.DataDeclType,
             Language.PureScript.Names.ProperName
               'Language.PureScript.Names.TypeName,
             Language.PureScript.Types.SourceType,
             [Language.PureScript.Names.Ident])
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S,1*U><L,U><L,U><L,U><L,U><L,U> -}
af75aa041207ae6cea3fdfa811858fd8
  $slookup_$s$wpoly_go13 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ConstructorName))
      (Language.PureScript.Environment.DataDeclType,
       Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName,
       Language.PureScript.Types.Type
         (Language.PureScript.AST.SourcePos.SourceSpan,
          [Language.PureScript.Comments.Comment]),
       [Language.PureScript.Names.Ident])
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ConstructorName
    -> Language.PureScript.Names.ModuleName
    -> GHC.Base.Maybe
         (Language.PureScript.Environment.DataDeclType,
          Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName,
          Language.PureScript.Types.SourceType,
          [Language.PureScript.Names.Ident])
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U(U,U,U)><L,U> -}
9cb9c51a7f4d5a333745c9e3cc2cdcf7
  $slookup_$s$wpoly_go3 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName))
      (Language.PureScript.Kinds.Kind
         (Language.PureScript.AST.SourcePos.SourceSpan,
          [Language.PureScript.Comments.Comment]),
       Language.PureScript.Environment.TypeKind)
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName
    -> Language.PureScript.Names.ModuleName
    -> GHC.Base.Maybe
         (Language.PureScript.Kinds.SourceKind,
          Language.PureScript.Environment.TypeKind)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U(U,U,U)><L,U> -}
451ad5897f83257c4750f5407adbde67
  $slookup_$s$wpoly_go4 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName))
      (Language.PureScript.Kinds.Kind
         (Language.PureScript.AST.SourcePos.SourceSpan,
          [Language.PureScript.Comments.Comment]),
       Language.PureScript.Environment.TypeKind)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> ((Data.Text.Internal.Text :: *)
        ~R# (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.TypeName :: *)) =>
       Language.PureScript.Names.ModuleName
       -> GHC.Base.Maybe
            (Language.PureScript.Kinds.SourceKind,
             Language.PureScript.Environment.TypeKind)
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S,1*U><L,U><L,U><L,U><L,U><L,U> -}
507e0c58ad76cfd223c3c22a0cfee9c0
  $slookup_$s$wpoly_go5 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName))
      a
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName
    -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U(U,U,U)> -}
2695cb8e08d2a2a9ad14e1a5a9e3dd91
  $slookup_$s$wpoly_go6 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName))
      (Data.Set.Internal.Set
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName)))
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> Language.PureScript.Names.ModuleName
    -> GHC.Base.Maybe
         (Data.Set.Internal.Set
            (Language.PureScript.Names.Qualified
               (Language.PureScript.Names.ProperName
                  'Language.PureScript.Names.ClassName)))
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U(U,U,U)><L,U> -}
449134fb4b26e2e522c6932af6292d09
  $slookup_$s$wpoly_go7 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName))
      (Data.Set.Internal.Set
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName)))
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> ((Data.Text.Internal.Text :: *)
        ~R# (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName :: *)) =>
       Language.PureScript.Names.ModuleName
       -> GHC.Base.Maybe
            (Data.Set.Internal.Set
               (Language.PureScript.Names.Qualified
                  (Language.PureScript.Names.ProperName
                     'Language.PureScript.Names.ClassName)))
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S,1*U><L,U><L,U><L,U><L,U><L,U> -}
1615d57296e5067f356ef58db95aa959
  $slookup_$s$wpoly_go8 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName))
      a
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U(U,U,U)> -}
0382f679b409c1a5c627e832c6834b20
  $slookup_$s$wpoly_go9 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         Language.PureScript.Names.Ident)
      (Language.PureScript.Types.Type
         (Language.PureScript.AST.SourcePos.SourceSpan,
          [Language.PureScript.Comments.Comment]),
       Language.PureScript.Environment.NameKind,
       Language.PureScript.Environment.NameVisibility)
    -> Language.PureScript.Names.Ident
    -> Language.PureScript.Names.ModuleName
    -> GHC.Base.Maybe
         (Language.PureScript.Types.SourceType,
          Language.PureScript.Environment.NameKind,
          Language.PureScript.Environment.NameVisibility)
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,U><L,U> -}
8110edfbc857a141eef4df9468b402ad
  $smember_$s$wpoly_go1 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName))
      Language.PureScript.Environment.TypeClassData
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> ((Data.Text.Internal.Text :: *)
        ~R# (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName :: *)) =>
       Language.PureScript.Names.ModuleName -> GHC.Types.Bool
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S,1*U><L,U><L,U><L,U><L,U><L,U> -}
a885abcfb12562b3b07c56c38f5508df
  $smember_$s$wpoly_go13 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName))
      Language.PureScript.Environment.TypeClassData
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> Language.PureScript.Names.ModuleName
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U(U,U,U)><L,U> -}
96a9634fba7a4e03e1b0ad25fced48d9
  $smember_$s$wpoly_go3 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         Language.PureScript.Names.Ident)
      (GHC.Base.NonEmpty
         (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
            (Language.PureScript.Names.Qualified
               Language.PureScript.Names.Ident)))
    -> Language.PureScript.Names.Ident
    -> Language.PureScript.Names.ModuleName
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,U><L,U> -}
799c92164130ee3268e4321ede74cb2f
  $smember_$s$wpoly_go5 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName))
      a
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName
    -> Language.PureScript.Names.ModuleName
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U(U,U,U)><L,U> -}
f6e5ed064d561e07432e59447a71ba0b
  $smember_$s$wpoly_go6 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName))
      a
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U(U,U,U)> -}
b4d6250558e274b2cc0f67441053b14d
  $smember_$s$wpoly_go7 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName))
      a
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> ((Data.Text.Internal.Text :: *)
        ~R# (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.TypeName :: *)) =>
       GHC.Types.Bool
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S,1*U><L,U><L,U><L,U><L,U> -}
94515efb3b87fbdaa48544d701299a99
  $smember_go3 ::
    Language.PureScript.Names.ModuleName
    -> Data.Set.Internal.Set Language.PureScript.Names.ModuleName
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
b0aea4257abfd11b7e50b541f363c5a3
  $sunion ::
    Data.Set.Internal.Set Language.PureScript.Names.ModuleName
    -> Data.Set.Internal.Set Language.PureScript.Names.ModuleName
    -> Data.Set.Internal.Set Language.PureScript.Names.ModuleName
  {- Arity: 2, Strictness: <S,1*U><S,1*U>, Inline: [~] -}
dbf60e4af72e324e9e8d594df5ed6cda
  $sunion1 ::
    Data.Set.Internal.Set
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName))
    -> Data.Set.Internal.Set
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName))
    -> Data.Set.Internal.Set
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName))
  {- Arity: 2, Strictness: <S,1*U><S,1*U>, Inline: [~] -}
04eb6e07c5fcdf345d516b8c8f591508
  $sunionWith ::
    (a -> a -> a)
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName))
         a
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName))
         a
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName))
         a
  {- Arity: 3, Strictness: <L,C(C1(U))><S,1*U><S,1*U>, Inline: [~] -}
554cef60dc02a1556342ad3491838841
  $sunionWith1 ::
    (a -> a -> a)
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            Language.PureScript.Names.Ident)
         a
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            Language.PureScript.Names.Ident)
         a
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            Language.PureScript.Names.Ident)
         a
  {- Arity: 3, Strictness: <L,C(C1(U))><S,1*U><S,1*U>, Inline: [~] -}
8a996cc064db564b4a7b097b4e8ed26e
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Language.PureScript.TypeChecker.$trModule3
                   Language.PureScript.TypeChecker.$trModule1) -}
dc61a40fed44efc250dd8d346be1c1b4
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.TypeChecker.$trModule2) -}
a51a2c8a36001d81bc51af0f43a7f45b
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Language.PureScript.TypeChecker"#) -}
71a4e21b7830792530d48734b32f9eb3
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.TypeChecker.$trModule4) -}
bdb8f4f8f635dcb86b018e0a67301f0a
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"#) -}
2c85dfffe4c43b7e339746f78a478060
  $w$sgo1 ::
    Data.Text.Internal.Text
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> a1
    -> Data.Map.Internal.Map Data.Text.Internal.Text a1
    -> Data.Map.Internal.Map Data.Text.Internal.Text a1
  {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><L,U><S,1*U>,
     Inline: [0] -}
6399b8645a481b36b0bad2f9c0d4abc0
  $w$sgo13 ::
    GHC.Types.Int
    -> GHC.Prim.Int#
    -> a1
    -> Data.Map.Internal.Map GHC.Types.Int a1
    -> Data.Map.Internal.Map GHC.Types.Int a1
  {- Arity: 4, Strictness: <L,U><L,U><L,U><S,1*U>, Inline: [0] -}
b8a20006b6a38085ca094dd6ce26d2c9
  $w$sgo3 ::
    GHC.Types.Int
    -> GHC.Prim.Int#
    -> Data.Set.Internal.Set GHC.Types.Int
    -> Data.Set.Internal.Set GHC.Types.Int
  {- Arity: 3, Strictness: <L,U><L,U><S,1*U>, Inline: [0] -}
7378fc4b82d937f00242b43c52a1eb32
  $wgo3 ::
    GHC.Prim.Int#
    -> Data.Set.Internal.Set GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>, Inline: [0] -}
db4887abd77f1cb311f0d3350a69ab24
  $wpoly_go1 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Map.Internal.Map Data.Text.Internal.Text a
    -> GHC.Base.Maybe a
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U><L,U><L,U><S,1*U>,
     Inline: [0] -}
247227b31d543046c37a79f27a2f5d9d
  $wpoly_go13 ::
    GHC.Prim.Int#
    -> Data.Map.Internal.Map GHC.Types.Int a -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>, Inline: [0] -}
0f6a01ce41d60833c2f585ff61dda70b
  $wpoly_go3 ::
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.TypeName))
         a
    -> GHC.Base.Maybe a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U><L,1*U(U,U,U)><S,1*U>, Inline: [0] -}
c28584f6d7828c6bc2a7f4f73cff9c91
  $wpoly_go4 ::
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName))
         a
    -> GHC.Base.Maybe a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U><L,1*U(U,U,U)><S,1*U>, Inline: [0] -}
5f4128f336f9392bf732c9f3c28761b7
  $wpoly_go8 ::
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.TypeName))
         a
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U><L,1*U(U,U,U)><S,1*U>, Inline: [0],
     Unfolding: (\ @ a
                   (ww :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww1 :: Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.TypeName)
                   (w :: Data.Map.Internal.Map
                           (Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.TypeName))
                           a) ->
                 case w of wild {
                   Data.Map.Internal.Bin ipv ipv1 ipv2 ipv3 ipv4
                   -> case ipv1 of ww3 { Language.PureScript.Names.Qualified ww4 ww5 ->
                      case ww of wild1 {
                        GHC.Base.Nothing
                        -> case ww4 of wild2 {
                             GHC.Base.Nothing
                             -> case ww1
                                       `cast`
                                     (Language.PureScript.Names.N:ProperName[0]
                                          <'Language.PureScript.Names.TypeName>_P) of ww2 { Data.Text.Internal.Text ww6 ww7 ww8 ->
                                case ww5
                                       `cast`
                                     (Language.PureScript.Names.N:ProperName[0]
                                          <'Language.PureScript.Names.TypeName>_P) of ww9 { Data.Text.Internal.Text ww10 ww11 ww12 ->
                                case Data.Text.$w$ccompare ww6 ww7 ww8 ww10 ww11 ww12 of wild3 {
                                  GHC.Types.LT
                                  -> Language.PureScript.TypeChecker.$smember_$s$wpoly_go7
                                       @ a
                                       ipv3
                                       ww6
                                       ww7
                                       ww8
                                       @~ (Sym (Language.PureScript.Names.N:ProperName[0]
                                                    <'Language.PureScript.Names.TypeName>_P))
                                  GHC.Types.EQ -> GHC.Types.True
                                  GHC.Types.GT
                                  -> Language.PureScript.TypeChecker.$smember_$s$wpoly_go7
                                       @ a
                                       ipv4
                                       ww6
                                       ww7
                                       ww8
                                       @~ (Sym (Language.PureScript.Names.N:ProperName[0]
                                                    <'Language.PureScript.Names.TypeName>_P)) } } }
                             GHC.Base.Just ipv7
                             -> Language.PureScript.TypeChecker.$smember_$s$wpoly_go6
                                  @ a
                                  ipv3
                                  ww1 }
                        GHC.Base.Just a2
                        -> case ww4 of wild2 {
                             GHC.Base.Nothing
                             -> Language.PureScript.TypeChecker.$smember_$s$wpoly_go5
                                  @ a
                                  ipv4
                                  ww1
                                  a2
                             GHC.Base.Just b1
                             -> case GHC.Classes.$fOrd[]_$ccompare
                                       @ (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.Namespace)
                                       (Language.PureScript.Names.$fOrdProperName
                                          @ 'Language.PureScript.Names.Namespace)
                                       a2 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                       b1
                                         `cast`
                                       (Language.PureScript.Names.N:ModuleName[0]) of wild3 {
                                  GHC.Types.LT
                                  -> Language.PureScript.TypeChecker.$smember_$s$wpoly_go5
                                       @ a
                                       ipv3
                                       ww1
                                       a2
                                  GHC.Types.EQ
                                  -> case ww1
                                            `cast`
                                          (Language.PureScript.Names.N:ProperName[0]
                                               <'Language.PureScript.Names.TypeName>_P) of ww2 { Data.Text.Internal.Text ww6 ww7 ww8 ->
                                     case ww5
                                            `cast`
                                          (Language.PureScript.Names.N:ProperName[0]
                                               <'Language.PureScript.Names.TypeName>_P) of ww9 { Data.Text.Internal.Text ww10 ww11 ww12 ->
                                     case Data.Text.$w$ccompare
                                            ww6
                                            ww7
                                            ww8
                                            ww10
                                            ww11
                                            ww12 of wild4 {
                                       GHC.Types.LT
                                       -> Language.PureScript.TypeChecker.$smember_$s$wpoly_go5
                                            @ a
                                            ipv3
                                            ww2
                                              `cast`
                                            (Sym (Language.PureScript.Names.N:ProperName[0]
                                                      <'Language.PureScript.Names.TypeName>_P))
                                            a2
                                       GHC.Types.EQ -> GHC.Types.True
                                       GHC.Types.GT
                                       -> Language.PureScript.TypeChecker.$smember_$s$wpoly_go5
                                            @ a
                                            ipv4
                                            ww2
                                              `cast`
                                            (Sym (Language.PureScript.Names.N:ProperName[0]
                                                      <'Language.PureScript.Names.TypeName>_P))
                                            a2 } } }
                                  GHC.Types.GT
                                  -> Language.PureScript.TypeChecker.$smember_$s$wpoly_go5
                                       @ a
                                       ipv4
                                       ww1
                                       a2 } } } }
                   Data.Map.Internal.Tip -> GHC.Types.False }) -}
e358cd13530b47b68f9a38c388a4616e
  checkNewtype ::
    Control.Monad.Error.Class.MonadError
      Language.PureScript.Errors.MultipleErrors m =>
    Language.PureScript.Names.ProperName
      'Language.PureScript.Names.TypeName
    -> [(Language.PureScript.Names.ProperName
           'Language.PureScript.Names.ConstructorName,
         [Language.PureScript.Types.SourceType])]
    -> m ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U(1*U(A,A,A,1*C1(U),A),1*C1(U),A)><L,U><S,1*U>,
     Unfolding: (\ @ m :: * -> *
                   ($dMonadError :: Control.Monad.Error.Class.MonadError
                                      Language.PureScript.Errors.MultipleErrors m)
                   (eta :: Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.TypeName)
                   (eta1 :: [(Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ConstructorName,
                              [Language.PureScript.Types.SourceType])]) ->
                 case eta1 of wild {
                   []
                   -> Control.Monad.Error.Class.throwError
                        @ Language.PureScript.Errors.MultipleErrors
                        @ m
                        $dMonadError
                        @ ()
                        (GHC.Types.:
                           @ Language.PureScript.AST.Declarations.ErrorMessage
                           (Language.PureScript.AST.Declarations.ErrorMessage
                              (GHC.Types.[]
                                 @ Language.PureScript.AST.Declarations.ErrorMessageHint)
                              (Language.PureScript.AST.Declarations.InvalidNewtype eta))
                           (GHC.Types.[] @ Language.PureScript.AST.Declarations.ErrorMessage))
                          `cast`
                        (Sym (Language.PureScript.Errors.N:MultipleErrors[0]))
                   : ds ds1
                   -> case ds of wild1 { (,) ds2 ds3 ->
                      case ds3 of wild2 {
                        []
                        -> Control.Monad.Error.Class.throwError
                             @ Language.PureScript.Errors.MultipleErrors
                             @ m
                             $dMonadError
                             @ ()
                             (GHC.Types.:
                                @ Language.PureScript.AST.Declarations.ErrorMessage
                                (Language.PureScript.AST.Declarations.ErrorMessage
                                   (GHC.Types.[]
                                      @ Language.PureScript.AST.Declarations.ErrorMessageHint)
                                   (Language.PureScript.AST.Declarations.InvalidNewtype eta))
                                (GHC.Types.[] @ Language.PureScript.AST.Declarations.ErrorMessage))
                               `cast`
                             (Sym (Language.PureScript.Errors.N:MultipleErrors[0]))
                        : ds4 ds5
                        -> case ds5 of wild3 {
                             []
                             -> case ds1 of wild4 {
                                  []
                                  -> GHC.Base.return
                                       @ m
                                       (Control.Monad.Error.Class.$p1MonadError
                                          @ Language.PureScript.Errors.MultipleErrors
                                          @ m
                                          $dMonadError)
                                       @ ()
                                       GHC.Tuple.()
                                  : ipv ipv1
                                  -> Control.Monad.Error.Class.throwError
                                       @ Language.PureScript.Errors.MultipleErrors
                                       @ m
                                       $dMonadError
                                       @ ()
                                       (GHC.Types.:
                                          @ Language.PureScript.AST.Declarations.ErrorMessage
                                          (Language.PureScript.AST.Declarations.ErrorMessage
                                             (GHC.Types.[]
                                                @ Language.PureScript.AST.Declarations.ErrorMessageHint)
                                             (Language.PureScript.AST.Declarations.InvalidNewtype
                                                eta))
                                          (GHC.Types.[]
                                             @ Language.PureScript.AST.Declarations.ErrorMessage))
                                         `cast`
                                       (Sym (Language.PureScript.Errors.N:MultipleErrors[0])) }
                             : ipv ipv1
                             -> Control.Monad.Error.Class.throwError
                                  @ Language.PureScript.Errors.MultipleErrors
                                  @ m
                                  $dMonadError
                                  @ ()
                                  (GHC.Types.:
                                     @ Language.PureScript.AST.Declarations.ErrorMessage
                                     (Language.PureScript.AST.Declarations.ErrorMessage
                                        (GHC.Types.[]
                                           @ Language.PureScript.AST.Declarations.ErrorMessageHint)
                                        (Language.PureScript.AST.Declarations.InvalidNewtype eta))
                                     (GHC.Types.[]
                                        @ Language.PureScript.AST.Declarations.ErrorMessage))
                                    `cast`
                                  (Sym (Language.PureScript.Errors.N:MultipleErrors[0])) } } } }) -}
34a09b828651f7b998a9c6bf6af13279
  typeCheckModule ::
    (Control.Monad.Supply.Class.MonadSupply m,
     Control.Monad.State.Class.MonadState
       Language.PureScript.TypeChecker.Monad.CheckState m,
     Control.Monad.Error.Class.MonadError
       Language.PureScript.Errors.MultipleErrors m,
     Control.Monad.Writer.Class.MonadWriter
       Language.PureScript.Errors.MultipleErrors m) =>
    Language.PureScript.AST.Declarations.Module
    -> m Language.PureScript.AST.Declarations.Module
  {- Arity: 4,
     Strictness: <L,U(U(U(U(C(C1(U)),A),C(U),C(C1(U)),C(C1(C1(U))),C(C1(U)),A),C(C1(U)),C(C1(U)),C(U),C(U)),U,A)><L,U(U(U(U(C(C1(U)),C(C1(U))),C(U),C(C1(U)),C(C1(C1(U))),C(C1(U)),A),C(C1(U)),C(C1(U)),C(U),C(U)),U,A,C(U))><L,U(U(U(U(C(C(U)),C(C1(U))),C(U),C(C1(U)),C(C1(C1(U))),C(C1(U)),A),C(C1(U)),C(C1(U)),C(U),C(U)),C(U),C(C1(U)))><L,U(U(A,U,A,A),U(U(U(C(C1(U)),A),C(U),C(C1(U)),C(C1(C1(U))),A,A),C(C1(U)),C(C1(U)),C(U),A),A,C(U),C(U),C(U))> -}
"SC:$sgo30" forall (sc :: GHC.Prim.Int#)
                   (sc1 :: Language.PureScript.Names.ModuleName)
                   (sc2 :: Data.Set.Internal.Set Language.PureScript.Names.ModuleName)
                   (sc3 :: Data.Set.Internal.Set Language.PureScript.Names.ModuleName)
                   (sc4 :: Language.PureScript.Names.ModuleName)
                   (sc5 :: Language.PureScript.Names.ModuleName)
  Language.PureScript.TypeChecker.$sinsert_$sgo3 sc5
                                                 sc4
                                                 (Data.Set.Internal.Bin
                                                    @ Language.PureScript.Names.ModuleName
                                                    sc
                                                    sc1
                                                    sc2
                                                    sc3)
  = Language.PureScript.TypeChecker.$sinsert_$s$sgo3
      sc
      sc1
      sc2
      sc3
      sc4
      sc5
"SC:$wpoly_go130" [0] forall (sc :: Data.Map.Internal.Map
                                      (Language.PureScript.Names.Qualified
                                         (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.TypeName))
                                      (Language.PureScript.Kinds.Kind
                                         (Language.PureScript.AST.SourcePos.SourceSpan,
                                          [Language.PureScript.Comments.Comment]),
                                       Language.PureScript.Environment.TypeKind))
                             (sc1 :: Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.TypeName)
                             (sc2 :: Language.PureScript.Names.ModuleName)
  Language.PureScript.TypeChecker.$wpoly_go3 @ (Language.PureScript.Kinds.SourceKind,
                                                Language.PureScript.Environment.TypeKind)
                                             (GHC.Base.Just
                                                @ Language.PureScript.Names.ModuleName
                                                sc2)
                                             sc1
                                             sc
  = Language.PureScript.TypeChecker.$slookup_$s$wpoly_go3 sc sc1 sc2
"SC:$wpoly_go130" [0] forall (sc :: Data.Map.Internal.Map
                                      (Language.PureScript.Names.Qualified
                                         (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.ClassName))
                                      (Data.Set.Internal.Set
                                         (Language.PureScript.Names.Qualified
                                            (Language.PureScript.Names.ProperName
                                               'Language.PureScript.Names.ClassName))))
                             (sc1 :: Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.ClassName)
                             (sc2 :: Language.PureScript.Names.ModuleName)
  Language.PureScript.TypeChecker.$wpoly_go4 @ (Data.Set.Internal.Set
                                                  (Language.PureScript.Names.Qualified
                                                     (Language.PureScript.Names.ProperName
                                                        'Language.PureScript.Names.ClassName)))
                                             (GHC.Base.Just
                                                @ Language.PureScript.Names.ModuleName
                                                sc2)
                                             sc1
                                             sc
  = Language.PureScript.TypeChecker.$slookup_$s$wpoly_go6 sc sc1 sc2
"SC:$wpoly_go130" [0] forall @ a
                             (sc :: Data.Map.Internal.Map
                                      (Language.PureScript.Names.Qualified
                                         (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.TypeName))
                                      a)
                             (sc1 :: Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.TypeName)
  Language.PureScript.TypeChecker.$wpoly_go8 @ a
                                             (GHC.Base.Nothing
                                                @ Language.PureScript.Names.ModuleName)
                                             sc1
                                             sc
  = Language.PureScript.TypeChecker.$smember_$s$wpoly_go6 @ a sc sc1
"SC:$wpoly_go131" [0] forall @ a
                             (sc :: Data.Map.Internal.Map
                                      (Language.PureScript.Names.Qualified
                                         (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.TypeName))
                                      a)
                             (sc1 :: Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.TypeName)
  Language.PureScript.TypeChecker.$wpoly_go3 @ a
                                             (GHC.Base.Nothing
                                                @ Language.PureScript.Names.ModuleName)
                                             sc1
                                             sc
  = Language.PureScript.TypeChecker.$slookup_$s$wpoly_go5 @ a sc sc1
"SC:$wpoly_go131" [0] forall @ a
                             (sc :: Data.Map.Internal.Map
                                      (Language.PureScript.Names.Qualified
                                         (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.ClassName))
                                      a)
                             (sc1 :: Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.ClassName)
  Language.PureScript.TypeChecker.$wpoly_go4 @ a
                                             (GHC.Base.Nothing
                                                @ Language.PureScript.Names.ModuleName)
                                             sc1
                                             sc
  = Language.PureScript.TypeChecker.$slookup_$s$wpoly_go8 @ a sc sc1
"SC:$wpoly_go131" [0] forall @ a
                             (sc :: Data.Map.Internal.Map
                                      (Language.PureScript.Names.Qualified
                                         (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.TypeName))
                                      a)
                             (sc1 :: Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.TypeName)
                             (sc2 :: Language.PureScript.Names.ModuleName)
  Language.PureScript.TypeChecker.$wpoly_go8 @ a
                                             (GHC.Base.Just
                                                @ Language.PureScript.Names.ModuleName
                                                sc2)
                                             sc1
                                             sc
  = Language.PureScript.TypeChecker.$smember_$s$wpoly_go5
      @ a
      sc
      sc1
      sc2
"SC:$wpoly_go132" [0] forall (sc :: Data.Map.Internal.Map
                                      (Language.PureScript.Names.Qualified
                                         (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.TypeName))
                                      (Language.PureScript.Kinds.Kind
                                         (Language.PureScript.AST.SourcePos.SourceSpan,
                                          [Language.PureScript.Comments.Comment]),
                                       Language.PureScript.Environment.TypeKind))
                             (sc1 :: GHC.Prim.ByteArray#)
                             (sc2 :: GHC.Prim.Int#)
                             (sc3 :: GHC.Prim.Int#)
                             (sg :: (Data.Text.Internal.Text :: *)
                                    ~R# (Language.PureScript.Names.ProperName
                                           'Language.PureScript.Names.TypeName :: *))
                             (sc4 :: Language.PureScript.Names.ModuleName)
  Language.PureScript.TypeChecker.$wpoly_go3 @ (Language.PureScript.Kinds.SourceKind,
                                                Language.PureScript.Environment.TypeKind)
                                             (GHC.Base.Just
                                                @ Language.PureScript.Names.ModuleName
                                                sc4)
                                             (Data.Text.Internal.Text sc1 sc2 sc3) `cast` sg
                                             sc
  = Language.PureScript.TypeChecker.$slookup_$s$wpoly_go4
      sc
      sc1
      sc2
      sc3
      @~ sg
      sc4
"SC:$wpoly_go132" [0] forall (sc :: Data.Map.Internal.Map
                                      (Language.PureScript.Names.Qualified
                                         (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.ClassName))
                                      (Data.Set.Internal.Set
                                         (Language.PureScript.Names.Qualified
                                            (Language.PureScript.Names.ProperName
                                               'Language.PureScript.Names.ClassName))))
                             (sc1 :: GHC.Prim.ByteArray#)
                             (sc2 :: GHC.Prim.Int#)
                             (sc3 :: GHC.Prim.Int#)
                             (sg :: (Data.Text.Internal.Text :: *)
                                    ~R# (Language.PureScript.Names.ProperName
                                           'Language.PureScript.Names.ClassName :: *))
                             (sc4 :: Language.PureScript.Names.ModuleName)
  Language.PureScript.TypeChecker.$wpoly_go4 @ (Data.Set.Internal.Set
                                                  (Language.PureScript.Names.Qualified
                                                     (Language.PureScript.Names.ProperName
                                                        'Language.PureScript.Names.ClassName)))
                                             (GHC.Base.Just
                                                @ Language.PureScript.Names.ModuleName
                                                sc4)
                                             (Data.Text.Internal.Text sc1 sc2 sc3) `cast` sg
                                             sc
  = Language.PureScript.TypeChecker.$slookup_$s$wpoly_go7
      sc
      sc1
      sc2
      sc3
      @~ sg
      sc4
"SC:$wpoly_go132" [0] forall @ a
                             (sc :: Data.Map.Internal.Map
                                      (Language.PureScript.Names.Qualified
                                         (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.TypeName))
                                      a)
                             (sc1 :: GHC.Prim.ByteArray#)
                             (sc2 :: GHC.Prim.Int#)
                             (sc3 :: GHC.Prim.Int#)
                             (sg :: (Data.Text.Internal.Text :: *)
                                    ~R# (Language.PureScript.Names.ProperName
                                           'Language.PureScript.Names.TypeName :: *))
  Language.PureScript.TypeChecker.$wpoly_go8 @ a
                                             (GHC.Base.Nothing
                                                @ Language.PureScript.Names.ModuleName)
                                             (Data.Text.Internal.Text sc1 sc2 sc3) `cast` sg
                                             sc
  = Language.PureScript.TypeChecker.$smember_$s$wpoly_go7
      @ a
      sc
      sc1
      sc2
      sc3
      @~ sg
"SPEC/Language.PureScript.TypeChecker $fEqMaybe @ ModuleName" [orphan] forall (v :: GHC.Classes.Eq
                                                                                      Language.PureScript.Names.ModuleName)
  GHC.Base.$fEqMaybe @ Language.PureScript.Names.ModuleName v
  = Language.PureScript.TypeChecker.$s$fEqMaybe
"SPEC/Language.PureScript.TypeChecker $fEqMaybe_$c/= @ ModuleName" [orphan] forall ($dEq :: GHC.Classes.Eq
                                                                                              Language.PureScript.Names.ModuleName)
  GHC.Base.$fEqMaybe_$c/= @ Language.PureScript.Names.ModuleName $dEq
  = Language.PureScript.TypeChecker.$s$fEqMaybe_$s$fEqMaybe_$c/=
"SPEC/Language.PureScript.TypeChecker $fEqMaybe_$c== @ ModuleName" [orphan] forall ($dEq :: GHC.Classes.Eq
                                                                                              Language.PureScript.Names.ModuleName)
  GHC.Base.$fEqMaybe_$c== @ Language.PureScript.Names.ModuleName $dEq
  = Language.PureScript.TypeChecker.$s$fEqMaybe_$c==
"SPEC/Language.PureScript.TypeChecker $fEqQualified @ (ProperName
                                                        'ClassName)" [orphan] forall (v :: GHC.Classes.Eq
                                                                                                                                                               (Language.PureScript.Names.ProperName
                                                                                                                                                                  'Language.PureScript.Names.ClassName))
  Language.PureScript.Names.$fEqQualified @ (Language.PureScript.Names.ProperName
                                               'Language.PureScript.Names.ClassName)
                                          v
  = Language.PureScript.TypeChecker.$s$fEqQualified
"SPEC/Language.PureScript.TypeChecker $fEqQualified @ (ProperName
                                                        'ConstructorName)" [orphan] forall (v :: GHC.Classes.Eq
                                                                                                                                                                     (Language.PureScript.Names.ProperName
                                                                                                                                                                        'Language.PureScript.Names.ConstructorName))
  Language.PureScript.Names.$fEqQualified @ (Language.PureScript.Names.ProperName
                                               'Language.PureScript.Names.ConstructorName)
                                          v
  = Language.PureScript.TypeChecker.$s$fEqQualified4
"SPEC/Language.PureScript.TypeChecker $fEqQualified @ (ProperName
                                                        'KindName)" [orphan] forall (v :: GHC.Classes.Eq
                                                                                                                                                              (Language.PureScript.Names.ProperName
                                                                                                                                                                 'Language.PureScript.Names.KindName))
  Language.PureScript.Names.$fEqQualified @ (Language.PureScript.Names.ProperName
                                               'Language.PureScript.Names.KindName)
                                          v
  = Language.PureScript.TypeChecker.$s$fEqQualified3
"SPEC/Language.PureScript.TypeChecker $fEqQualified @ (ProperName
                                                        'TypeName)" [orphan] forall (v :: GHC.Classes.Eq
                                                                                                                                                              (Language.PureScript.Names.ProperName
                                                                                                                                                                 'Language.PureScript.Names.TypeName))
  Language.PureScript.Names.$fEqQualified @ (Language.PureScript.Names.ProperName
                                               'Language.PureScript.Names.TypeName)
                                          v
  = Language.PureScript.TypeChecker.$s$fEqQualified2
"SPEC/Language.PureScript.TypeChecker $fEqQualified @ Ident" [orphan] forall (v :: GHC.Classes.Eq
                                                                                     Language.PureScript.Names.Ident)
  Language.PureScript.Names.$fEqQualified @ Language.PureScript.Names.Ident
                                          v
  = Language.PureScript.TypeChecker.$s$fEqQualified1
"SPEC/Language.PureScript.TypeChecker $fEqQualified_$c/= @ (ProperName
                                                             'ClassName)" [orphan] forall ($dEq :: GHC.Classes.Eq
                                                                                                                                                                            (Language.PureScript.Names.ProperName
                                                                                                                                                                               'Language.PureScript.Names.ClassName))
  Language.PureScript.Names.$fEqQualified_$c/= @ (Language.PureScript.Names.ProperName
                                                    'Language.PureScript.Names.ClassName)
                                               $dEq
  = Language.PureScript.TypeChecker.$s$fEqQualified_$s$fEqQualified_$c/=
"SPEC/Language.PureScript.TypeChecker $fEqQualified_$c/= @ (ProperName
                                                             'ConstructorName)" [orphan] forall ($dEq :: GHC.Classes.Eq
                                                                                                                                                                                  (Language.PureScript.Names.ProperName
                                                                                                                                                                                     'Language.PureScript.Names.ConstructorName))
  Language.PureScript.Names.$fEqQualified_$c/= @ (Language.PureScript.Names.ProperName
                                                    'Language.PureScript.Names.ConstructorName)
                                               $dEq
  = Language.PureScript.TypeChecker.$s$fEqQualified_$s$fEqQualified_$c/=4
"SPEC/Language.PureScript.TypeChecker $fEqQualified_$c/= @ (ProperName
                                                             'KindName)" [orphan] forall ($dEq :: GHC.Classes.Eq
                                                                                                                                                                           (Language.PureScript.Names.ProperName
                                                                                                                                                                              'Language.PureScript.Names.KindName))
  Language.PureScript.Names.$fEqQualified_$c/= @ (Language.PureScript.Names.ProperName
                                                    'Language.PureScript.Names.KindName)
                                               $dEq
  = Language.PureScript.TypeChecker.$s$fEqQualified_$s$fEqQualified_$c/=3
"SPEC/Language.PureScript.TypeChecker $fEqQualified_$c/= @ (ProperName
                                                             'TypeName)" [orphan] forall ($dEq :: GHC.Classes.Eq
                                                                                                                                                                           (Language.PureScript.Names.ProperName
                                                                                                                                                                              'Language.PureScript.Names.TypeName))
  Language.PureScript.Names.$fEqQualified_$c/= @ (Language.PureScript.Names.ProperName
                                                    'Language.PureScript.Names.TypeName)
                                               $dEq
  = Language.PureScript.TypeChecker.$s$fEqQualified_$s$fEqQualified_$c/=2
"SPEC/Language.PureScript.TypeChecker $fEqQualified_$c/= @ Ident" [orphan] forall ($dEq :: GHC.Classes.Eq
                                                                                             Language.PureScript.Names.Ident)
  Language.PureScript.Names.$fEqQualified_$c/= @ Language.PureScript.Names.Ident
                                               $dEq
  = Language.PureScript.TypeChecker.$s$fEqQualified_$s$fEqQualified_$c/=1
"SPEC/Language.PureScript.TypeChecker $fEqSet @ ModuleName" [orphan] forall (v :: GHC.Classes.Eq
                                                                                    Language.PureScript.Names.ModuleName)
  Data.Set.Internal.$fEqSet @ Language.PureScript.Names.ModuleName v
  = Language.PureScript.TypeChecker.$s$fEqSet
"SPEC/Language.PureScript.TypeChecker $fEqSet_$c/= @ ModuleName" [orphan] forall ($dEq :: GHC.Classes.Eq
                                                                                            Language.PureScript.Names.ModuleName)
  Data.Set.Internal.$fEqSet_$c/= @ Language.PureScript.Names.ModuleName
                                 $dEq
  = Language.PureScript.TypeChecker.$s$fEqSet_$s$fEqSet_$c/=
"SPEC/Language.PureScript.TypeChecker $fOrdMaybe @ ModuleName" [orphan] forall (v :: GHC.Classes.Ord
                                                                                       Language.PureScript.Names.ModuleName)
  GHC.Base.$fOrdMaybe @ Language.PureScript.Names.ModuleName v
  = Language.PureScript.TypeChecker.$s$fOrdMaybe
"SPEC/Language.PureScript.TypeChecker $fOrdQualified @ (ProperName
                                                         'ClassName)" [orphan] forall (v :: GHC.Classes.Ord
                                                                                                                                                                 (Language.PureScript.Names.ProperName
                                                                                                                                                                    'Language.PureScript.Names.ClassName))
  Language.PureScript.Names.$fOrdQualified @ (Language.PureScript.Names.ProperName
                                                'Language.PureScript.Names.ClassName)
                                           v
  = Language.PureScript.TypeChecker.$s$fOrdQualified
"SPEC/Language.PureScript.TypeChecker $fOrdQualified @ (ProperName
                                                         'ConstructorName)" [orphan] forall (v :: GHC.Classes.Ord
                                                                                                                                                                       (Language.PureScript.Names.ProperName
                                                                                                                                                                          'Language.PureScript.Names.ConstructorName))
  Language.PureScript.Names.$fOrdQualified @ (Language.PureScript.Names.ProperName
                                                'Language.PureScript.Names.ConstructorName)
                                           v
  = Language.PureScript.TypeChecker.$s$fOrdQualified4
"SPEC/Language.PureScript.TypeChecker $fOrdQualified @ (ProperName
                                                         'KindName)" [orphan] forall (v :: GHC.Classes.Ord
                                                                                                                                                                (Language.PureScript.Names.ProperName
                                                                                                                                                                   'Language.PureScript.Names.KindName))
  Language.PureScript.Names.$fOrdQualified @ (Language.PureScript.Names.ProperName
                                                'Language.PureScript.Names.KindName)
                                           v
  = Language.PureScript.TypeChecker.$s$fOrdQualified3
"SPEC/Language.PureScript.TypeChecker $fOrdQualified @ (ProperName
                                                         'TypeName)" [orphan] forall (v :: GHC.Classes.Ord
                                                                                                                                                                (Language.PureScript.Names.ProperName
                                                                                                                                                                   'Language.PureScript.Names.TypeName))
  Language.PureScript.Names.$fOrdQualified @ (Language.PureScript.Names.ProperName
                                                'Language.PureScript.Names.TypeName)
                                           v
  = Language.PureScript.TypeChecker.$s$fOrdQualified2
"SPEC/Language.PureScript.TypeChecker $fOrdQualified @ Ident" [orphan] forall (v :: GHC.Classes.Ord
                                                                                      Language.PureScript.Names.Ident)
  Language.PureScript.Names.$fOrdQualified @ Language.PureScript.Names.Ident
                                           v
  = Language.PureScript.TypeChecker.$s$fOrdQualified1
"SPEC/Language.PureScript.TypeChecker $fOrdSet @ ModuleName" [orphan] forall (v :: GHC.Classes.Ord
                                                                                     Language.PureScript.Names.ModuleName)
  Data.Set.Internal.$fOrdSet @ Language.PureScript.Names.ModuleName v
  = Language.PureScript.TypeChecker.$s$fOrdSet
"SPEC/Language.PureScript.TypeChecker $wsplitS @ Int" [orphan] [0] forall (w :: GHC.Classes.Ord
                                                                                  GHC.Types.Int)
  Data.Set.Internal.$wsplitS @ GHC.Types.Int w
  = Language.PureScript.TypeChecker.$s$wsplitS
"SPEC/Language.PureScript.TypeChecker $wsplitS @ ModuleName" [orphan] [0] forall (w :: GHC.Classes.Ord
                                                                                         Language.PureScript.Names.ModuleName)
  Data.Set.Internal.$wsplitS @ Language.PureScript.Names.ModuleName w
  = Language.PureScript.TypeChecker.$s$wsplitS1
"SPEC/Language.PureScript.TypeChecker difference @ (Qualified
                                                     (ProperName 'ClassName))" [orphan] forall ($dOrd :: GHC.Classes.Ord
                                                                                                                                                                         (Language.PureScript.Names.Qualified
                                                                                                                                                                            (Language.PureScript.Names.ProperName
                                                                                                                                                                               'Language.PureScript.Names.ClassName)))
  Data.Set.Internal.difference @ (Language.PureScript.Names.Qualified
                                    (Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.ClassName))
                               $dOrd
  = Language.PureScript.TypeChecker.$sdifference1
"SPEC/Language.PureScript.TypeChecker difference @ Int" [orphan] forall ($dOrd :: GHC.Classes.Ord
                                                                                    GHC.Types.Int)
  Data.Set.Internal.difference @ GHC.Types.Int $dOrd
  = Language.PureScript.TypeChecker.$sdifference
"SPEC/Language.PureScript.TypeChecker fromList @ (Qualified
                                                   (ProperName 'ClassName))" [orphan] forall ($dOrd :: GHC.Classes.Ord
                                                                                                                                                                     (Language.PureScript.Names.Qualified
                                                                                                                                                                        (Language.PureScript.Names.ProperName
                                                                                                                                                                           'Language.PureScript.Names.ClassName)))
  Data.Set.Internal.fromList @ (Language.PureScript.Names.Qualified
                                  (Language.PureScript.Names.ProperName
                                     'Language.PureScript.Names.ClassName))
                             $dOrd
  = Language.PureScript.TypeChecker.$sfromList5
"SPEC/Language.PureScript.TypeChecker fromList @ (Set ModuleName)" [orphan] forall ($dOrd :: GHC.Classes.Ord
                                                                                               (Data.Set.Internal.Set
                                                                                                  Language.PureScript.Names.ModuleName))
  Data.Set.Internal.fromList @ (Data.Set.Internal.Set
                                  Language.PureScript.Names.ModuleName)
                             $dOrd
  = Language.PureScript.TypeChecker.$sfromList2
"SPEC/Language.PureScript.TypeChecker fromList @ Int" [orphan] forall ($dOrd :: GHC.Classes.Ord
                                                                                  GHC.Types.Int)
  Data.Set.Internal.fromList @ GHC.Types.Int $dOrd
  = Language.PureScript.TypeChecker.$sfromList4
"SPEC/Language.PureScript.TypeChecker fromList @ Int _" [orphan] forall @ a
                                                                        ($dOrd :: GHC.Classes.Ord
                                                                                    GHC.Types.Int)
  Data.Map.Internal.fromList @ GHC.Types.Int @ a $dOrd
  = Language.PureScript.TypeChecker.$sfromList @ a
"SPEC/Language.PureScript.TypeChecker fromList @ ModuleName" [orphan] forall ($dOrd :: GHC.Classes.Ord
                                                                                         Language.PureScript.Names.ModuleName)
  Data.Set.Internal.fromList @ Language.PureScript.Names.ModuleName
                             $dOrd
  = Language.PureScript.TypeChecker.$sfromList3
"SPEC/Language.PureScript.TypeChecker fromList @ Text _" [orphan] forall @ a
                                                                         ($dOrd :: GHC.Classes.Ord
                                                                                     Data.Text.Internal.Text)
  Data.Map.Internal.fromList @ Data.Text.Internal.Text @ a $dOrd
  = Language.PureScript.TypeChecker.$sfromList1 @ a
"SPEC/Language.PureScript.TypeChecker intersection @ ModuleName" [orphan] forall ($dOrd :: GHC.Classes.Ord
                                                                                             Language.PureScript.Names.ModuleName)
  Data.Set.Internal.intersection @ Language.PureScript.Names.ModuleName
                                 $dOrd
  = Language.PureScript.TypeChecker.$sintersection
"SPEC/Language.PureScript.TypeChecker union @ (Qualified
                                                (ProperName 'ClassName))" [orphan] forall ($dOrd :: GHC.Classes.Ord
                                                                                                                                                               (Language.PureScript.Names.Qualified
                                                                                                                                                                  (Language.PureScript.Names.ProperName
                                                                                                                                                                     'Language.PureScript.Names.ClassName)))
  Data.Set.Internal.union @ (Language.PureScript.Names.Qualified
                               (Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.ClassName))
                          $dOrd
  = Language.PureScript.TypeChecker.$sunion1
"SPEC/Language.PureScript.TypeChecker union @ ModuleName" [orphan] forall ($dOrd :: GHC.Classes.Ord
                                                                                      Language.PureScript.Names.ModuleName)
  Data.Set.Internal.union @ Language.PureScript.Names.ModuleName
                          $dOrd
  = Language.PureScript.TypeChecker.$sunion
"SPEC/Language.PureScript.TypeChecker unionWith @ (Qualified
                                                    (ProperName 'ClassName)) _" [orphan] forall @ a
                                                                                                                                                             ($dOrd :: GHC.Classes.Ord
                                                                                                                                                                         (Language.PureScript.Names.Qualified
                                                                                                                                                                            (Language.PureScript.Names.ProperName
                                                                                                                                                                               'Language.PureScript.Names.ClassName)))
  Data.Map.Internal.unionWith @ (Language.PureScript.Names.Qualified
                                   (Language.PureScript.Names.ProperName
                                      'Language.PureScript.Names.ClassName))
                              @ a
                              $dOrd
  = Language.PureScript.TypeChecker.$sunionWith @ a
"SPEC/Language.PureScript.TypeChecker unionWith @ (Qualified
                                                    Ident) _" [orphan] forall @ a
                                                                                                                                           ($dOrd :: GHC.Classes.Ord
                                                                                                                                                       (Language.PureScript.Names.Qualified
                                                                                                                                                          Language.PureScript.Names.Ident))
  Data.Map.Internal.unionWith @ (Language.PureScript.Names.Qualified
                                   Language.PureScript.Names.Ident)
                              @ a
                              $dOrd
  = Language.PureScript.TypeChecker.$sunionWith1 @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

