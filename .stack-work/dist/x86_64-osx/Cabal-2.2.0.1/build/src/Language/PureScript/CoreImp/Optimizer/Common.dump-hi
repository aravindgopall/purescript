
==================== FINAL INTERFACE ====================
2019-01-24 14:16:20.784621 UTC

interface purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.CoreImp.Optimizer.Common 8043
  interface hash: 1ce146cb4ba5540fe75d6c2bce93be93
  ABI hash: f77cc52a6dde77bba5df16c20fb29fac
  export-list hash: 35654d9237eb883ff052c1e1ed279bb1
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: bec0ba85914d2da9e0a4be22213f6c78
  opt_hash: 2c98c95d41c045ae9c2fb565ec8aabc6
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Language.PureScript.CoreImp.Optimizer.Common.applyAll
  Language.PureScript.CoreImp.Optimizer.Common.isDict
  Language.PureScript.CoreImp.Optimizer.Common.isDict'
  Language.PureScript.CoreImp.Optimizer.Common.isReassigned
  Language.PureScript.CoreImp.Optimizer.Common.isRebound
  Language.PureScript.CoreImp.Optimizer.Common.isUpdated
  Language.PureScript.CoreImp.Optimizer.Common.isUsed
  Language.PureScript.CoreImp.Optimizer.Common.removeFromBlock
  Language.PureScript.CoreImp.Optimizer.Common.replaceIdent
  Language.PureScript.CoreImp.Optimizer.Common.replaceIdents
  Language.PureScript.CoreImp.Optimizer.Common.targetVariable
module dependencies: Control.Monad.Supply
                     Control.Monad.Supply.Class Language.PureScript.AST
                     Language.PureScript.AST.Binders
                     Language.PureScript.AST.Declarations
                     Language.PureScript.AST.Exported Language.PureScript.AST.Literals
                     Language.PureScript.AST.Operators Language.PureScript.AST.SourcePos
                     Language.PureScript.AST.Traversals Language.PureScript.Bundle
                     Language.PureScript.Comments Language.PureScript.Constants
                     Language.PureScript.CoreImp.AST Language.PureScript.Crash
                     Language.PureScript.Environment Language.PureScript.Kinds
                     Language.PureScript.Label Language.PureScript.Names
                     Language.PureScript.PSString Language.PureScript.Traversals
                     Language.PureScript.TypeClassDictionaries Language.PureScript.Types
                     Paths_purescript
package dependencies: aeson-1.3.1.1 array-0.5.2.0 async-2.2.1
                      attoparsec-0.13.2.2 base-4.11.1.0 base-compat-0.10.4 binary-0.8.5.1
                      blaze-builder-0.4.1.0 bytestring-0.10.8.2 containers-0.5.11.0
                      deepseq-1.4.3.0 dlist-0.8.0.4 filepath-1.4.2 ghc-boot-th-8.4.3
                      ghc-prim-0.5.2.0 hashable-1.2.7.0 integer-gmp-1.0.2.0
                      integer-logarithms-1.0.2.1 language-javascript-0.6.0.11
                      microlens-0.4.9.1 microlens-ghc-0.4.9 microlens-mtl-0.1.11.1
                      microlens-platform-0.3.10 microlens-th-0.4.2.1 mtl-2.2.2
                      parsec-3.1.13.0 pretty-1.1.3.6 primitive-0.6.3.0 protolude-0.2.2
                      random-1.1 scientific-0.3.6.2 sourcemap-0.1.6 stm-2.4.5.0 syb-0.7
                      tagged-0.8.5 template-haskell-2.13.0.0 text-1.2.3.0
                      th-abstraction-0.2.8.0 time-1.8.0.2 time-locale-compat-0.1.1.4
                      transformers-0.5.5.0 unordered-containers-0.2.9.0
                      utf8-string-1.0.1.1 uuid-types-1.0.3 vector-0.12.0.1
orphans: syb-0.7:Data.Generics.Instances
         stm-2.4.5.0:Control.Monad.STM
         microlens-platform-0.3.10:Lens.Micro.Platform
         microlens-ghc-0.4.9:Lens.Micro.GHC
         attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         vector-0.12.0.1:Data.Vector.Unboxed
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.0:Data.Text.Lazy
         text-1.2.3.0:Data.Text binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.5.0:Control.Monad.Trans.Error
         base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: aeson-1.3.1.1:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.Graph
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         dlist-0.8.0.4:Data.DList ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         microlens-0.4.9.1:Lens.Micro.Internal
                         microlens-ghc-0.4.9:Lens.Micro.GHC
                         microlens-mtl-0.1.11.1:Lens.Micro.Mtl.Internal
                         microlens-platform-0.3.10:Lens.Micro.Platform
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.Declarations
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.Operators
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.SourcePos
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Comments
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Environment
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Kinds
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Label
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Names
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.PSString
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.TypeClassDictionaries
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Types
                         tagged-0.8.5:Data.Tagged
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
                         th-abstraction-0.2.8.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.List 83dc843e47bfc0c5af51e19c6f3476d5
import  -/  base-4.11.1.0:Data.Maybe 409c3da2b142470b68be39ce1d97a9f7
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-compat-0.10.4:Prelude.Compat bb6796186ed35a1d09dc34362a3fc27e
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  Language.PureScript.CoreImp.AST e13d2052141e50eca2a5dfdad2a67d5a
  exports: d4ba1e9a31e7dde56b84028e789bb579
  AST 27e474366a6164e874a6d4e5cad82745
  Assignment 2e4cb577a1928495b663b23c83a20417
  Block 7fbe9eae8f7ef21e5be6cd4f87dbd7bb
  For aa0b5c32e6a9797f40e678cc70c73aeb
  ForIn c75cadf99554876e98286956580c490e
  Function 2710f3d739ccf31052f17a06deb026c1
  Indexer b754e3d8b497f4ad29c8bd5817cd1f9c
  StringLiteral 60beb3f92e5b8969f2f1b00baaaee73d
  Var 22edb01eb085c313bbae6149799eeeee
  VariableIntroduction 564ecc61882b20dd946b2a6b65aaab39
  everything 2db98064b3dee88f5ae4efc31c39a098
  everywhere b72aec4edb3793e6cf984fe7c0beffe3
import  -/  Language.PureScript.Crash 3dd739d57f17e8a1e9cd97afd3faf067
  exports: a9d2725f359c2d113bd38076e88ec681
  internalError d33c2a09c5cbe8e68c0bc27d1500ba1a
import  -/  Language.PureScript.PSString 482bcd39d274b3e3efbde5749bd9d797
  exports: dedd5d31dc509736134f041863efd1d4
  PSString 96ffea2472d48cda76cc39d47ab7bb82
import  -/  text-1.2.3.0:Data.Text 7daa7e6c9b39d8cc1679e5ec5c64d2be
import  -/  text-1.2.3.0:Data.Text.Internal 30a0a123f71f63b26cd34c6b24f23411
f5a25ebf449af7601ac2b78c15f09b9a
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Language.PureScript.CoreImp.Optimizer.Common.$trModule3
                   Language.PureScript.CoreImp.Optimizer.Common.$trModule1) -}
e33a5e510ae828ffc6a64bbb6542f7e3
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.CoreImp.Optimizer.Common.$trModule2) -}
5ac23cfe9e4f74635898297fb0da6fa1
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Language.PureScript.CoreImp.Optimizer.Common"#) -}
cf1d566a444ac4d985f6487d383afc27
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.CoreImp.Optimizer.Common.$trModule4) -}
0429b5e417a68eebcee7d136d3b80185
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"#) -}
0cd0d85821f9306bd3e3925da0d3d464
  $wisDict ::
    Data.Text.Internal.Text
    -> Language.PureScript.PSString.PSString
    -> Language.PureScript.CoreImp.AST.AST
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(U,U,U)><L,1*U><S,1*U>, Inline: [0],
     Unfolding: (\ (ww :: Data.Text.Internal.Text)
                   (ww1 :: Language.PureScript.PSString.PSString)
                   (w :: Language.PureScript.CoreImp.AST.AST) ->
                 case w of wild {
                   DEFAULT -> GHC.Types.False
                   Language.PureScript.CoreImp.AST.Indexer ds ds1 ds2
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.CoreImp.AST.StringLiteral ds3 x
                        -> case ds2 of wild2 {
                             DEFAULT -> GHC.Types.False
                             Language.PureScript.CoreImp.AST.Var ds4 y
                             -> case GHC.Classes.$fEq[]_$c==
                                       @ GHC.Word.Word16
                                       GHC.Word.$fEqWord16
                                       x `cast` (Language.PureScript.PSString.N:PSString[0])
                                       ww1
                                         `cast`
                                       (Language.PureScript.PSString.N:PSString[0]) of wild3 {
                                  GHC.Types.False -> GHC.Types.False
                                  GHC.Types.True -> Data.Text.$fEqText_$c== y ww } } } }) -}
3363d918d9a2ed790eb2715c7758fea9
  applyAll :: [a -> a] -> a -> a
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (\ @ a ->
                 GHC.List.foldl'
                   @ (a -> a)
                   @ (a -> a)
                   (GHC.Base.. @ a @ a @ a)
                   (GHC.Base.id @ a)) -}
ee71858a411ace591c46a330339c5634
  isDict ::
    (Data.Text.Internal.Text, Language.PureScript.PSString.PSString)
    -> Language.PureScript.CoreImp.AST.AST -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S,1*U(1*U(U,U,U),1*U)><S,1*U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: (Data.Text.Internal.Text,
                          Language.PureScript.PSString.PSString))
                   (w1 :: Language.PureScript.CoreImp.AST.AST) ->
                 case w of ww { (,) ww1 ww2 ->
                 Language.PureScript.CoreImp.Optimizer.Common.$wisDict
                   ww1
                   ww2
                   w1 }) -}
a86047b1df479257652aae2b493d2f19
  isDict' ::
    [(Data.Text.Internal.Text, Language.PureScript.PSString.PSString)]
    -> Language.PureScript.CoreImp.AST.AST -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.CoreImp.Optimizer.Common.isDict'1
                  `cast`
                (<[(Data.Text.Internal.Text,
                    Language.PureScript.PSString.PSString)]>_R
                 ->_R <Language.PureScript.CoreImp.AST.AST>_R
                 ->_R Data.Semigroup.Internal.N:Any[0]) -}
90e98718cc0b45fc93070808de74cbea
  isDict'1 ::
    [(Data.Text.Internal.Text, Language.PureScript.PSString.PSString)]
    -> Language.PureScript.CoreImp.AST.AST
    -> Data.Semigroup.Internal.Any
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (xs :: [(Data.Text.Internal.Text,
                            Language.PureScript.PSString.PSString)])
                   (js :: Language.PureScript.CoreImp.AST.AST) ->
                 letrec {
                   go :: [(Data.Text.Internal.Text,
                           Language.PureScript.PSString.PSString)]
                         -> Data.Semigroup.Internal.Any
                     <join 1> {- Arity: 1 -}
                   = \ (ds :: [(Data.Text.Internal.Text,
                                Language.PureScript.PSString.PSString)]) ->
                     case ds of wild {
                       []
                       -> GHC.Types.False `cast` (Sym (Data.Semigroup.Internal.N:Any[0]))
                       : y ys
                       -> case Language.PureScript.CoreImp.Optimizer.Common.isDict
                                 y
                                 js of wild1 {
                            GHC.Types.False -> go ys
                            GHC.Types.True
                            -> GHC.Types.True
                                 `cast`
                               (Sym (Data.Semigroup.Internal.N:Any[0])) } }
                 } in
                 go xs) -}
f297005aa3b2c99542686f76d1b0f394
  isReassigned ::
    Data.Text.Internal.Text
    -> Language.PureScript.CoreImp.AST.AST -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U(U,U,U)><S,1*U>,
     Unfolding: (\ (var1 :: Data.Text.Internal.Text)
                   (eta :: Language.PureScript.CoreImp.AST.AST) ->
                 Language.PureScript.CoreImp.AST.everything
                   @ GHC.Types.Bool
                   GHC.Classes.||
                   (\ (ds :: Language.PureScript.CoreImp.AST.AST) ->
                    case ds of wild {
                      DEFAULT -> GHC.Types.False
                      Language.PureScript.CoreImp.AST.Function ds1 ds2 args ds3
                      -> GHC.List.elem
                           @ Data.Text.Internal.Text
                           Data.Text.$fEqText
                           var1
                           args
                      Language.PureScript.CoreImp.AST.VariableIntroduction ds1 arg ds2
                      -> Data.Text.$fEqText_$c== var1 arg
                      Language.PureScript.CoreImp.AST.Assignment ds1 ds2 ds3
                      -> case ds2 of wild1 {
                           DEFAULT -> GHC.Types.False
                           Language.PureScript.CoreImp.AST.Var ds4 arg
                           -> Data.Text.$fEqText_$c== var1 arg }
                      Language.PureScript.CoreImp.AST.For ds1 arg ds2 ds3 ds4
                      -> Data.Text.$fEqText_$c== var1 arg
                      Language.PureScript.CoreImp.AST.ForIn ds1 arg ds2 ds3
                      -> Data.Text.$fEqText_$c== var1 arg })
                   eta) -}
2a608c9b953027c723ee28cd977d1ba9
  isRebound ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.CoreImp.Optimizer.Common.isRebound1
                  `cast`
                (<Language.PureScript.CoreImp.AST.AST>_R
                 ->_R <Language.PureScript.CoreImp.AST.AST>_R
                 ->_R Data.Semigroup.Internal.N:Any[0]) -}
70da2853f91cca64bf03ac8673fd5b52
  isRebound1 ::
    Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
    -> Data.Semigroup.Internal.Any
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ (js :: Language.PureScript.CoreImp.AST.AST)
                   (d :: Language.PureScript.CoreImp.AST.AST) ->
                 letrec {
                   go :: [Data.Text.Internal.Text] -> Data.Semigroup.Internal.Any
                     <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [Data.Text.Internal.Text]) ->
                     case ds of wild {
                       []
                       -> GHC.Types.False `cast` (Sym (Data.Semigroup.Internal.N:Any[0]))
                       : y ys
                       -> case Language.PureScript.CoreImp.Optimizer.Common.isReassigned
                                 y
                                 d of wild1 {
                            GHC.Types.False
                            -> case Language.PureScript.CoreImp.Optimizer.Common.isUpdated
                                      y
                                      d of wild2 {
                                 GHC.Types.False -> go ys
                                 GHC.Types.True
                                 -> GHC.Types.True `cast` (Sym (Data.Semigroup.Internal.N:Any[0])) }
                            GHC.Types.True
                            -> GHC.Types.True
                                 `cast`
                               (Sym (Data.Semigroup.Internal.N:Any[0])) } }
                 } in
                 go
                   (Language.PureScript.CoreImp.AST.everything
                      @ [Data.Text.Internal.Text]
                      (GHC.Base.++ @ Data.Text.Internal.Text)
                      Language.PureScript.CoreImp.Optimizer.Common.isRebound2
                      js)) -}
cffdc75ad289979ef18e15ff4b3430cb
  isRebound2 ::
    Language.PureScript.CoreImp.AST.AST -> [Data.Text.Internal.Text]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.CoreImp.AST.AST) ->
                 case ds of wild {
                   DEFAULT -> GHC.Types.[] @ Data.Text.Internal.Text
                   Language.PureScript.CoreImp.AST.Var ds1 var
                   -> GHC.Types.:
                        @ Data.Text.Internal.Text
                        var
                        (GHC.Types.[] @ Data.Text.Internal.Text) }) -}
acf3f9de0e5d7b5be99a5d6739a85e91
  isUpdated ::
    Data.Text.Internal.Text
    -> Language.PureScript.CoreImp.AST.AST -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U(U,U,U)><S,1*U>,
     Unfolding: (\ (var1 :: Data.Text.Internal.Text)
                   (eta :: Language.PureScript.CoreImp.AST.AST) ->
                 Language.PureScript.CoreImp.AST.everything
                   @ GHC.Types.Bool
                   GHC.Classes.||
                   (\ (ds :: Language.PureScript.CoreImp.AST.AST) ->
                    case ds of wild {
                      DEFAULT -> GHC.Types.False
                      Language.PureScript.CoreImp.AST.Assignment ds1 target ds2
                      -> case var1 of wild1 { Data.Text.Internal.Text dt dt1 dt2 ->
                         case Language.PureScript.CoreImp.Optimizer.Common.targetVariable
                                target of wild2 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                         case GHC.Prim.==# dt2 dt5 of lwild {
                           DEFAULT -> GHC.Types.False
                           1#
                           -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.ByteArray#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.State# GHC.Prim.RealWorld
                                                             -> (# GHC.Prim.State#
                                                                     GHC.Prim.RealWorld,
                                                                   GHC.Prim.Int# #)}
                                     dt
                                     (GHC.Prim.int2Word# dt1)
                                     dt3
                                     (GHC.Prim.int2Word# dt4)
                                     (GHC.Prim.int2Word# dt2)
                                     GHC.Prim.realWorld# of wild5 { (#,#) ds3 ds4 ->
                              case GHC.Prim.narrow32Int# ds4 of wild3 {
                                DEFAULT -> GHC.Types.False 0# -> GHC.Types.True } } } } } })
                   eta) -}
44465718b00b47148105a31d0b97f7bf
  isUsed ::
    Data.Text.Internal.Text
    -> Language.PureScript.CoreImp.AST.AST -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U(U,U,U)><S,1*U>,
     Unfolding: (\ (var1 :: Data.Text.Internal.Text)
                   (eta :: Language.PureScript.CoreImp.AST.AST) ->
                 Language.PureScript.CoreImp.AST.everything
                   @ GHC.Types.Bool
                   GHC.Classes.||
                   (\ (ds :: Language.PureScript.CoreImp.AST.AST) ->
                    case ds of wild {
                      DEFAULT -> GHC.Types.False
                      Language.PureScript.CoreImp.AST.Var ds1 var2
                      -> Data.Text.$fEqText_$c== var1 var2
                      Language.PureScript.CoreImp.AST.Assignment ds1 target ds2
                      -> case var1 of wild1 { Data.Text.Internal.Text dt dt1 dt2 ->
                         case Language.PureScript.CoreImp.Optimizer.Common.targetVariable
                                target of wild2 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                         case GHC.Prim.==# dt2 dt5 of lwild {
                           DEFAULT -> GHC.Types.False
                           1#
                           -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.ByteArray#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.State# GHC.Prim.RealWorld
                                                             -> (# GHC.Prim.State#
                                                                     GHC.Prim.RealWorld,
                                                                   GHC.Prim.Int# #)}
                                     dt
                                     (GHC.Prim.int2Word# dt1)
                                     dt3
                                     (GHC.Prim.int2Word# dt4)
                                     (GHC.Prim.int2Word# dt2)
                                     GHC.Prim.realWorld# of wild5 { (#,#) ds3 ds4 ->
                              case GHC.Prim.narrow32Int# ds4 of wild3 {
                                DEFAULT -> GHC.Types.False 0# -> GHC.Types.True } } } } } })
                   eta) -}
0157b87fb5bd12f4148618d6af3406a1
  removeFromBlock ::
    ([Language.PureScript.CoreImp.AST.AST]
     -> [Language.PureScript.CoreImp.AST.AST])
    -> Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (go :: [Language.PureScript.CoreImp.AST.AST]
                          -> [Language.PureScript.CoreImp.AST.AST])
                   (ds :: Language.PureScript.CoreImp.AST.AST) ->
                 case ds of wild {
                   DEFAULT -> wild
                   Language.PureScript.CoreImp.AST.Block ss sts
                   -> Language.PureScript.CoreImp.AST.Block ss (go sts) }) -}
6b7f7aeb3c0c280576b5070f6f2c2d32
  replaceIdent ::
    Data.Text.Internal.Text
    -> Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U(U,U,U)><L,U><S,1*U>,
     Unfolding: (\ (var1 :: Data.Text.Internal.Text)
                   (js :: Language.PureScript.CoreImp.AST.AST)
                   (eta :: Language.PureScript.CoreImp.AST.AST) ->
                 Language.PureScript.CoreImp.AST.everywhere
                   (\ (ds :: Language.PureScript.CoreImp.AST.AST) ->
                    case ds of wild {
                      DEFAULT -> wild
                      Language.PureScript.CoreImp.AST.Var ds1 var2
                      -> case var1 of wild1 { Data.Text.Internal.Text dt dt1 dt2 ->
                         case var2 of wild2 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                         case GHC.Prim.==# dt2 dt5 of lwild {
                           DEFAULT -> wild
                           1#
                           -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.ByteArray#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.Word#
                                                             -> GHC.Prim.State# GHC.Prim.RealWorld
                                                             -> (# GHC.Prim.State#
                                                                     GHC.Prim.RealWorld,
                                                                   GHC.Prim.Int# #)}
                                     dt
                                     (GHC.Prim.int2Word# dt1)
                                     dt3
                                     (GHC.Prim.int2Word# dt4)
                                     (GHC.Prim.int2Word# dt2)
                                     GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                              case GHC.Prim.narrow32Int# ds3 of wild3 {
                                DEFAULT -> wild 0# -> js } } } } } })
                   eta) -}
16f8035b8032093a965026a0eaff7a5e
  replaceIdents ::
    [(Data.Text.Internal.Text, Language.PureScript.CoreImp.AST.AST)]
    -> Language.PureScript.CoreImp.AST.AST
    -> Language.PureScript.CoreImp.AST.AST
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>,
     Unfolding: (\ (vars :: [(Data.Text.Internal.Text,
                              Language.PureScript.CoreImp.AST.AST)])
                   (eta :: Language.PureScript.CoreImp.AST.AST) ->
                 Language.PureScript.CoreImp.AST.everywhere
                   (\ (v :: Language.PureScript.CoreImp.AST.AST) ->
                    case v of wild {
                      DEFAULT -> wild
                      Language.PureScript.CoreImp.AST.Var ds var
                      -> case GHC.List.lookup
                                @ Data.Text.Internal.Text
                                @ Language.PureScript.CoreImp.AST.AST
                                Data.Text.$fEqText
                                var
                                vars of wild1 {
                           GHC.Base.Nothing -> wild GHC.Base.Just v1 -> v1 } })
                   eta) -}
9286b5238844c6fafa4be0403609bbd0
  targetVariable ::
    Language.PureScript.CoreImp.AST.AST -> Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S,1*U> -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

