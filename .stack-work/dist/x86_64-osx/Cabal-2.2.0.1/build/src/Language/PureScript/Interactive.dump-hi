
==================== FINAL INTERFACE ====================
2019-01-24 14:17:38.524253 UTC

interface purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Interactive 8043
  interface hash: 44433189d8029f04fd6dd8d289ab4a10
  ABI hash: 3fd904461a7445d7c728d6926158dc75
  export-list hash: bf99ba9e72de112c537c8b9bddb312a2
  orphan hash: e79d09f37a93458bb72575b609c87275
  flag hash: 2ae478d21823b7c739b1b08c46262eb0
  opt_hash: 2c98c95d41c045ae9c2fb565ec8aabc6
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Language.PureScript.Interactive.handleCommand
  Language.PureScript.Interactive.make
  Language.PureScript.Interactive.runMake
  Language.PureScript.Interactive.Completion.completion
  Language.PureScript.Interactive.Completion.completion'
  Language.PureScript.Interactive.Completion.formatCompletions
  Language.PureScript.Interactive.Completion.liftCompletionM
  Language.PureScript.Interactive.IO.findNodeProcess
  Language.PureScript.Interactive.IO.getHistoryFilename
  Language.PureScript.Interactive.Message.guideURL
  Language.PureScript.Interactive.Message.helpMessage
  Language.PureScript.Interactive.Message.noInputMessage
  Language.PureScript.Interactive.Message.prologueMessage
  Language.PureScript.Interactive.Message.quitMessage
  Language.PureScript.Interactive.Message.supportModuleMessage
  Language.PureScript.Interactive.Module.createTemporaryModule
  Language.PureScript.Interactive.Module.createTemporaryModuleForImports
  Language.PureScript.Interactive.Module.createTemporaryModuleForKind
  Language.PureScript.Interactive.Module.importDecl
  Language.PureScript.Interactive.Module.indexFile
  Language.PureScript.Interactive.Module.internalSpan
  Language.PureScript.Interactive.Module.loadAllModules
  Language.PureScript.Interactive.Module.loadModule
  Language.PureScript.Interactive.Module.modulesDir
  Language.PureScript.Interactive.Module.supportModuleIsDefined
  Language.PureScript.Interactive.Module.supportModuleName
  Language.PureScript.Interactive.Parser.parseCommand
  Language.PureScript.Interactive.Parser.parseDotFile
  Language.PureScript.Interactive.Printer.printModuleSignatures
  Language.PureScript.Interactive.Printer.textT
  Language.PureScript.Interactive.Types.initialInteractivePrint
  Language.PureScript.Interactive.Types.initialPSCiState
  Language.PureScript.Interactive.Types.parseReplQuery
  Language.PureScript.Interactive.Types.psciEnvironment
  Language.PureScript.Interactive.Types.psciExports
  Language.PureScript.Interactive.Types.psciImportedModuleNames
  Language.PureScript.Interactive.Types.psciImportedModules
  Language.PureScript.Interactive.Types.psciImports
  Language.PureScript.Interactive.Types.psciInteractivePrint
  Language.PureScript.Interactive.Types.psciLetBindings
  Language.PureScript.Interactive.Types.psciLoadedExterns
  Language.PureScript.Interactive.Types.replQueries
  Language.PureScript.Interactive.Types.replQueryStrings
  Language.PureScript.Interactive.Types.setInteractivePrint
  Language.PureScript.Interactive.Types.showReplQuery
  Language.PureScript.Interactive.Types.updateImportExports
  Language.PureScript.Interactive.Types.updateImportedModules
  Language.PureScript.Interactive.Types.updateLets
  Language.PureScript.Interactive.Types.updateLoadedExterns
  Language.PureScript.Interactive.Completion.CompletionM
  Language.PureScript.Interactive.Types.Command{Language.PureScript.Interactive.Types.BrowseModule Language.PureScript.Interactive.Types.ClearState Language.PureScript.Interactive.Types.CompleteStr Language.PureScript.Interactive.Types.Decls Language.PureScript.Interactive.Types.Expression Language.PureScript.Interactive.Types.Import Language.PureScript.Interactive.Types.KindOf Language.PureScript.Interactive.Types.PasteLines Language.PureScript.Interactive.Types.QuitPSCi Language.PureScript.Interactive.Types.ReloadState Language.PureScript.Interactive.Types.ReloadVariableState Language.PureScript.Interactive.Types.SetInteractivePrint Language.PureScript.Interactive.Types.ShowHelp Language.PureScript.Interactive.Types.ShowInfo Language.PureScript.Interactive.Types.TypeOf}
  Language.PureScript.Interactive.Types.Directive{Language.PureScript.Interactive.Types.Browse Language.PureScript.Interactive.Types.Clear Language.PureScript.Interactive.Types.Complete Language.PureScript.Interactive.Types.Help Language.PureScript.Interactive.Types.Kind Language.PureScript.Interactive.Types.Paste Language.PureScript.Interactive.Types.Print Language.PureScript.Interactive.Types.Quit Language.PureScript.Interactive.Types.Reload Language.PureScript.Interactive.Types.ReloadV Language.PureScript.Interactive.Types.Show Language.PureScript.Interactive.Types.Type}
  Language.PureScript.Interactive.Types.ImportedModule
  Language.PureScript.Interactive.Types.PSCiConfig{Language.PureScript.Interactive.Types.PSCiConfig psciFileGlobs}
  Language.PureScript.Interactive.Types.PSCiState{Language.PureScript.Interactive.Types.PSCiState}
  Language.PureScript.Interactive.Types.ReplQuery{Language.PureScript.Interactive.Types.QueryImport Language.PureScript.Interactive.Types.QueryLoaded Language.PureScript.Interactive.Types.QueryPrint}
module dependencies: Control.Monad.Logger Control.Monad.Supply
                     Control.Monad.Supply.Class Language.PureScript
                     Language.PureScript.AST Language.PureScript.AST.Binders
                     Language.PureScript.AST.Declarations
                     Language.PureScript.AST.Exported Language.PureScript.AST.Literals
                     Language.PureScript.AST.Operators Language.PureScript.AST.SourcePos
                     Language.PureScript.AST.Traversals Language.PureScript.Bundle
                     Language.PureScript.CodeGen.JS
                     Language.PureScript.CodeGen.JS.Common
                     Language.PureScript.CodeGen.JS.Printer Language.PureScript.Comments
                     Language.PureScript.Constants Language.PureScript.CoreFn
                     Language.PureScript.CoreFn.Ann Language.PureScript.CoreFn.Binders
                     Language.PureScript.CoreFn.Desugar Language.PureScript.CoreFn.Expr
                     Language.PureScript.CoreFn.Meta Language.PureScript.CoreFn.Module
                     Language.PureScript.CoreFn.Optimizer
                     Language.PureScript.CoreFn.ToJSON
                     Language.PureScript.CoreFn.Traversals
                     Language.PureScript.CoreImp.AST
                     Language.PureScript.CoreImp.Optimizer
                     Language.PureScript.CoreImp.Optimizer.Blocks
                     Language.PureScript.CoreImp.Optimizer.Common
                     Language.PureScript.CoreImp.Optimizer.Inliner
                     Language.PureScript.CoreImp.Optimizer.MagicDo
                     Language.PureScript.CoreImp.Optimizer.TCO
                     Language.PureScript.CoreImp.Optimizer.Unused
                     Language.PureScript.Crash Language.PureScript.Environment
                     Language.PureScript.Errors Language.PureScript.Externs
                     Language.PureScript.Interactive.Completion
                     Language.PureScript.Interactive.Directive
                     Language.PureScript.Interactive.IO
                     Language.PureScript.Interactive.Message
                     Language.PureScript.Interactive.Module
                     Language.PureScript.Interactive.Parser
                     Language.PureScript.Interactive.Printer
                     Language.PureScript.Interactive.Types Language.PureScript.Kinds
                     Language.PureScript.Label Language.PureScript.Linter
                     Language.PureScript.Linter.Exhaustive
                     Language.PureScript.Linter.Imports Language.PureScript.Make
                     Language.PureScript.Make.Actions Language.PureScript.Make.BuildPlan
                     Language.PureScript.Make.Monad
                     Language.PureScript.ModuleDependencies Language.PureScript.Names
                     Language.PureScript.Options Language.PureScript.PSString
                     Language.PureScript.Parser Language.PureScript.Parser.Common
                     Language.PureScript.Parser.Declarations
                     Language.PureScript.Parser.Kinds Language.PureScript.Parser.Lexer
                     Language.PureScript.Parser.State Language.PureScript.Parser.Types
                     Language.PureScript.Pretty Language.PureScript.Pretty.Common
                     Language.PureScript.Pretty.Kinds Language.PureScript.Pretty.Types
                     Language.PureScript.Pretty.Values
                     Language.PureScript.Publish.BoxesHelpers
                     Language.PureScript.Renamer Language.PureScript.Sugar
                     Language.PureScript.Sugar.AdoNotation
                     Language.PureScript.Sugar.BindingGroups
                     Language.PureScript.Sugar.CaseDeclarations
                     Language.PureScript.Sugar.DoNotation
                     Language.PureScript.Sugar.LetPattern
                     Language.PureScript.Sugar.Names
                     Language.PureScript.Sugar.Names.Common
                     Language.PureScript.Sugar.Names.Env
                     Language.PureScript.Sugar.Names.Exports
                     Language.PureScript.Sugar.Names.Imports
                     Language.PureScript.Sugar.ObjectWildcards
                     Language.PureScript.Sugar.Operators
                     Language.PureScript.Sugar.Operators.Binders
                     Language.PureScript.Sugar.Operators.Common
                     Language.PureScript.Sugar.Operators.Expr
                     Language.PureScript.Sugar.Operators.Types
                     Language.PureScript.Sugar.TypeClasses
                     Language.PureScript.Sugar.TypeClasses.Deriving
                     Language.PureScript.Sugar.TypeDeclarations
                     Language.PureScript.Traversals Language.PureScript.TypeChecker
                     Language.PureScript.TypeChecker.Entailment
                     Language.PureScript.TypeChecker.Kinds
                     Language.PureScript.TypeChecker.Monad
                     Language.PureScript.TypeChecker.Skolems
                     Language.PureScript.TypeChecker.Subsumption
                     Language.PureScript.TypeChecker.Synonyms
                     Language.PureScript.TypeChecker.TypeSearch
                     Language.PureScript.TypeChecker.Types
                     Language.PureScript.TypeChecker.Unify
                     Language.PureScript.TypeClassDictionaries Language.PureScript.Types
                     Paths_purescript System.IO.UTF8
package dependencies: Glob-0.9.2 aeson-1.3.1.1
                      ansi-terminal-0.8.0.4 array-0.5.2.0 async-2.2.1 attoparsec-0.13.2.2
                      base-4.11.1.0 base-compat-0.10.4 binary-0.8.5.1
                      blaze-builder-0.4.1.0 boxes-0.1.5 bytestring-0.10.8.2 colour-2.3.4
                      containers-0.5.11.0 data-ordlist-0.4.7.0 deepseq-1.4.3.0
                      directory-1.3.1.5 dlist-0.8.0.4 filepath-1.4.2 ghc-boot-th-8.4.3
                      ghc-prim-0.5.2.0 hashable-1.2.7.0 haskeline-0.7.4.3
                      integer-gmp-1.0.2.0 integer-logarithms-1.0.2.1
                      language-javascript-0.6.0.11 lifted-base-0.2.3.12 microlens-0.4.9.1
                      microlens-ghc-0.4.9 microlens-mtl-0.1.11.1
                      microlens-platform-0.3.10 microlens-th-0.4.2.1
                      monad-control-1.0.2.3 mtl-2.2.2 parallel-3.2.1.1 parsec-3.1.13.0
                      pattern-arrows-0.0.2 pretty-1.1.3.6 primitive-0.6.3.0
                      protolude-0.2.2 random-1.1 safe-0.3.17 scientific-0.3.6.2
                      sourcemap-0.1.6 split-0.2.3.3 stm-2.4.5.0 stringsearch-0.3.6.6
                      syb-0.7 tagged-0.8.5 template-haskell-2.13.0.0 terminfo-0.4.1.1
                      text-1.2.3.0 th-abstraction-0.2.8.0 time-1.8.0.2
                      time-locale-compat-0.1.1.4 transformers-0.5.5.0
                      transformers-base-0.4.5.2 unix-2.7.2.2 unordered-containers-0.2.9.0
                      utf8-string-1.0.1.1 uuid-types-1.0.3 vector-0.12.0.1
orphans: syb-0.7:Data.Generics.Instances
         stm-2.4.5.0:Control.Monad.STM
         microlens-platform-0.3.10:Lens.Micro.Platform
         microlens-ghc-0.4.9:Lens.Micro.GHC colour-2.3.4:Data.Colour
         attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         vector-0.12.0.1:Data.Vector.Unboxed
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.0:Data.Text.Lazy
         vector-0.12.0.1:Data.Vector.Fusion.Bundle text-1.2.3.0:Data.Text
         binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show
         transformers-0.5.5.0:Control.Monad.Trans.Error
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: aeson-1.3.1.1:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.Graph
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         dlist-0.8.0.4:Data.DList ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         microlens-0.4.9.1:Lens.Micro.Internal
                         microlens-ghc-0.4.9:Lens.Micro.GHC
                         microlens-mtl-0.1.11.1:Lens.Micro.Mtl.Internal
                         microlens-platform-0.3.10:Lens.Micro.Platform
                         monad-control-1.0.2.3:Control.Monad.Trans.Control
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Control.Monad.Logger
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.Declarations
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.Operators
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.SourcePos
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Comments
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Environment
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Kinds
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Label
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Make.Monad
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Names
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.PSString
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.TypeClassDictionaries
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Types
                         tagged-0.8.5:Data.Tagged
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
                         th-abstraction-0.2.8.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  Glob-0.9.2:System.FilePath.Glob 8625fdb96b8fcebd81114734e6844e2a
import  -/  Glob-0.9.2:System.FilePath.Glob.Directory d42249ffcaa5351009a12b5db988f46f
import  -/  base-4.11.1.0:Control.Monad.IO.Class 96109c36cb3c919872278540487fa39e
import  -/  base-4.11.1.0:Data.Either 39d922b371c4c52d426e9ee66de8371a
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.Functor f522c3501272159820fd6f242510732f
import  -/  base-4.11.1.0:Data.List 83dc843e47bfc0c5af51e19c6f3476d5
import  -/  base-4.11.1.0:Data.Maybe 409c3da2b142470b68be39ce1d97a9f7
import  -/  base-4.11.1.0:Data.OldList 1b35aa3c6805ff7c8887a35a866fe006
import  -/  base-4.11.1.0:Data.Traversable 7ad4edb9184ea1ae8e73f6b94f115c8c
import  -/  base-4.11.1.0:Data.Tuple 3af66f3ac61ed95ba8a3a3f68ebc5003
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.IO 1d5542cc02075c5e948018bfacea89c1
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  base-4.11.1.0:System.IO ce09fff7d191d14067bddc2efd9b53a4
import  -/  base-compat-0.10.4:Prelude.Compat bb6796186ed35a1d09dc34362a3fc27e
import  -/  containers-0.5.11.0:Data.Map 0dbdaec812ef695a364aa6c69e7f7d53
import  -/  containers-0.5.11.0:Data.Map.Internal 0150e210d0ae8df0f3a0669d5e32d8fa
import  -/  containers-0.5.11.0:Data.Set 7d3c64a641be4cacbcd8119445bab919
import  -/  containers-0.5.11.0:Data.Set.Internal 93fa3ef95853aa2a7aadf32d693bd451
import  -/  directory-1.3.1.5:System.Directory bc76216f25ffcaf1c91b529f41ea3bf7
import  -/  directory-1.3.1.5:System.Directory.Internal.Common 88eeec2dd4e3d7d63bc24c2d657e6981
import  -/  filepath-1.4.2:System.FilePath a538d436328dd004b88f7d29a8b244c0
import  -/  filepath-1.4.2:System.FilePath.Posix c021b7a40cfcdd9b08724b5bb7566b59
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  mtl-2.2.2:Control.Monad.Reader.Class a5ac59953d953ab8532b5c11f5e8e0b0
import  -/  mtl-2.2.2:Control.Monad.State.Class acc76e93f44ac4486524db1a327e0a0a
import  -/  mtl-2.2.2:Control.Monad.Writer.Strict e3cd7baae7382fae2917ef7ca8074d86
import  -/  protolude-0.2.2:Protolude 2c2d16096c8a60f59f646a3b93b0eb7b
import  -/  protolude-0.2.2:Protolude.List 3a80368167450d7a4360ebf1ea443345
import  -/  Language.PureScript 4a24ccd892adbf021daf2410ebd61e22
  exports: 139dcaa90af8ddcee6aa0492159f351d
import  -/  Language.PureScript.AST.Declarations 586bc75044e8737d02875208d17d4395
  App ae4e12e545757da5fb62189548835120
  Declaration e92f6ee78a22c0eadc3566d7d1f48d5b
  DeclarationRef 1ef988d2f8db98f35f578bde9282f468
  Explicit 0e7d786f7f26f8b40dc941854a989937
  Expr e92f6ee78a22c0eadc3566d7d1f48d5b
  Hiding 14af127ef57cd3e7808a207407b44158
  Implicit 3dec7010cde86de5e211cd1c4e2e7a9d
  KindRef fdcf7f61e078f63d583e2e92289fb303
  Literal bdcf4b137a448fe7c2ed57fe33a72cd3
  MkUnguarded d9deae30ea78016a4bdb453d9978bfa3
  Module 3342e00ee072addfd009ee61e87fb865
  ModuleRef 2ff9e8ed233e41ffb08c38dcae5865c0
  ReExportRef 2fef75d8ce745db15f225b0cb5e0c76d
  TypeClassRef 0dfae6fa12be94e312c419132246a1f3
  TypeInstanceRef 1a4ec4636edef4ba31547e9816ff48da
  TypeOpRef cd0b4bf0e37e512f28be11229ab2e497
  TypeRef 7b2aa9fe81ad40f64c659855da835def
  ValueDecl 97b38919d86cd9182cb8d86b6f4ae734
  ValueOpRef 08efa0d335ba46b69b381a343c739614
  ValueRef 78dee2d86cdf935e8811ecdd18c169d3
  Var 5fd1e80d993ab2f76a4e002bbbfc9990
  getModuleName 7aa2ed3fa39338f5edb2f1938e29c924
import  -/  Language.PureScript.AST.Literals da2ec269f063125450b272321f85468a
  NumericLiteral 660c8129bba11812cfd17a4819557d36
  ObjectLiteral d17d3a090fe8a89f303c679b0a417ae9
import  -/  Language.PureScript.AST.SourcePos 63acacac5b7be73d04e5be0047a9a89a
  nullSourceSpan d3ce9e45794cd4f5ddfad4b02b318f51
import  -/  Language.PureScript.Constants 69f48af5637c1cbbd07a6f85918359c3
  exports: 9c458e31ccbc9e07ff15471cf48a55ee
  primModules 357fd5e56d4f01a182cfde64b7dbba2c
import  -/  Language.PureScript.Crash 3dd739d57f17e8a1e9cd97afd3faf067
  internalError d33c2a09c5cbe8e68c0bc27d1500ba1a
import  -/  Language.PureScript.Environment 467b25d81b890e1aaabe28d0f09d192d
  Environment 7eb61fe78108d98d82e39145869b2402
  Public 599cf7bfef97fea0107da5ef3bf1cbf8
  initEnvironment 3ad13bed759e200214c30a8db150a0f5
  names 7eb61fe78108d98d82e39145869b2402
  typeSynonyms 7eb61fe78108d98d82e39145869b2402
import  -/  Language.PureScript.Errors 3c1ad933587510f8b20a8c9ec2e86ce9
  MultipleErrors e1ef6a17348ccfe3ef65185d3c5f9026
  defaultPPEOptions 745195dd42b1496c9a7f7aafb0bc8f92
  ppeRelativeDirectory e4d7a637be529184ef49fa954b2afc7b
  prettyPrintMultipleErrors 4a620ac5870775a2503b24ddb7e2c4dd
import  -/  Language.PureScript.Externs cf933be49760ec7d1e991d8ad7f6146f
  ExternsFile c010c09fe85776adf7c6787c7d79c898
  applyExternsFileToEnvironment 302b0a30a60f6f9ca01301b13755ca49
import  -/  Language.PureScript.Interactive.Completion 843f05a69516a80551b3551e2cb65f98
  exports: 64a4aec8fb6a026ecc1affc93edfebff
  CompletionM e7b670af4d89a54c63d51518ff468e87
  completion 62097ded073333b10b9c30bd3ef989a8
  completion' 41b467c8a7d120fb9e30d1ecfc873318
  formatCompletions a6c7b7936f15035a305a69e235554093
  liftCompletionM cf71aab633e9bac49319d2d555c73d33
import  -/  Language.PureScript.Interactive.IO 33ca8876dd13899a31566d98915b8bcb
  exports: 68142b9a4eb8a5ac583606d644c791b4
  findNodeProcess a35c69141916ad6fc6274a025f342b3a
  getHistoryFilename f7de335e908018e1b81e47c17dd9251c
import  -/  Language.PureScript.Interactive.Message 70b4e47eedaebdadda7d9c80cfd4311e
  exports: 661f34152b20bc80d5223c4efa747124
  guideURL 33c0384b6e1d5fd048ac8c3920a11136
  helpMessage 551dd0969f320cb5ebb86843740ad53e
  noInputMessage 35538353b5cb48434bcf8b4d8e011dc0
  prologueMessage 31ebdaea56529eb5dbe5afe3de3f51d1
  quitMessage 8f3d5757e9fe245d0f6dd402c0dbab90
  supportModuleMessage 681160caf40cf040b25001631c3e1065
import  -/  Language.PureScript.Interactive.Module 44280dc546abaf03982cd8659476d9a6
  exports: 70a4d9d8e8aeb772f099eb710fa6d4a0
  createTemporaryModule 9f2d025790ab0f5a83a3c06ee2b5efa0
  createTemporaryModuleForImports 5da729d0aac61e1dd2840bfe2bb30268
  createTemporaryModuleForKind d688879c19f90d3a9aa0c4f4cff0f2b0
  importDecl e9a392c8912c2278ee6afc1df47c64fa
  indexFile 00961305a85f3e6d95101cf0febe5982
  internalSpan fe929f2d2a4d426ec417ae68af470945
  loadAllModules e9289808e129e92f33ab37a013812964
  loadModule 79cbead1da4f782da16846870165a3af
  modulesDir 8b97b96cf1ecadf3841809bbd7f52a20
  supportModuleIsDefined 0f3913966d03ff2792f09df42d7fc283
  supportModuleName fce276f9ba1a9a99afca27f5dccb4511
import  -/  Language.PureScript.Interactive.Parser 40fec16bebe37758d6499616a516d8ba
  exports: 18fb8620ae282321762cd01ac97c4f45
  parseCommand d7ced6af7bb1cc6322bcda003db91c76
  parseDotFile 53ccac77fcafc44fd978b253a6247ded
import  -/  Language.PureScript.Interactive.Printer 8f8d7ef8fa20d769e50009503807efe4
  exports: 3152ecb0902fb33583fb9d4001a32f88
  printModuleSignatures 7ffea7905ea90fe733aa129a09fcf058
  textT fb3e54bd3a2fa08b248c7447fe707691
import  -/  Language.PureScript.Interactive.Types 4e19f70dd31c7d7b6ef50a08ad8425bf
  exports: 1b53f4922e79c9de65e5100c6fc4ac8b
  Browse 4f6ee24f134c752f17c61836529fc379
  BrowseModule c329a9c9b116036273f92b6458745a72
  Clear 106912ae2768ec365ef379e0c16b6d83
  ClearState 8c9fe6f301126974673bdaafcd88aef9
  Command dafebe94f69e69480c05be438e4778e9
  Complete 9b26194773f2dc42247c002ee63e1593
  CompleteStr cfb1cece8ec47286b9f6db4ec1d54a5b
  Decls 84873a5f9ff5369dc906feaca487e700
  Directive 9a76f7dd17b564fb8a5f6688bdedc91b
  Expression 9146f91c8e785223957cdf39ec98a59e
  Help 3bd1cb5fa7f8998d2eeb54739061ae2b
  Import 421d37f065c7c11dc69b6a376a68d6c6
  ImportedModule 7c1a00256946ded4523271f31684d76d
  Kind b628b5282eacf80d832e4e65522528ce
  KindOf 89e59b034d708580ed074514639d999e
  PSCiConfig 99c341abd39f3fb493306699c3808a56
  PSCiConfig 9fc6e6e06b7b62f8dfab58c0780c4f49
  PSCiState edb6009506a19eafecef85c2c58d6d0d
  PSCiState 876224c4cea1642e91e4ad0b6a812184
  Paste f57e757d9cbef09a052fd9a8a4369751
  PasteLines 5142b4ca636eb1e2457d6446adf0b8e2
  Print f7a5bb702be46cd059c86d08d953721f
  QueryImport 1aea925f61546705d2d9ad2a8055156d
  QueryLoaded 85e4118663c6b278d0f0473c590fd9e3
  QueryPrint 0f5b9ff2efca4616aef48ebbb513d894
  Quit 7459d0de9701fe545a0b326e70b3dd7a
  QuitPSCi 918c5d5f91fd3f20324693342183188e
  Reload e3ed0f9285c9ece845074acedd5fdeca
  ReloadState 1788ad8770a0234a663010f203a9ac90
  ReloadV 3be4feb63bed1458ec572169a3789f30
  ReloadVariableState 18c538ee0c479e3c3aa61ee97ccc55b3
  ReplQuery 7b2f73f4cc083a478b85e05eddca17d4
  SetInteractivePrint 15ee954c85fce009dc98945d81deb254
  Show 31ea2d863b893e207ecbca0731c28013
  ShowHelp 8d8f3ca60012cd73b2dd13288ac95c3d
  ShowInfo 549ebb8de86c7416db86f27792855e8d
  Type 840ae366507922350098912d887ed709
  TypeOf d0bc3f28a1a25523799b1f7762b4c4cb
  initialInteractivePrint 5eb1f06d06b2a08b69655916b0e838e5
  initialPSCiState a188925673bce391a6778789dc77428c
  parseReplQuery 5c45fe0f377e224dddee9b281e69d8f6
  psciEnvironment 2383d12d7b05348fdd4cb17ab0f9fb72
  psciExports e7c5cdfca54fb278247a2935b5e8109c
  psciFileGlobs 9fc6e6e06b7b62f8dfab58c0780c4f49
  psciImportedModuleNames ccfa45734ae535856e1fe61ac9a61823
  psciImportedModules 25bdeac3e73ad8d16c1f9f21e6844d71
  psciImports b77ca26e50f5814901de20987c2ecb54
  psciInteractivePrint ff19227c389605ef5776b3ed2ffce59b
  psciLetBindings a1d865b43424ff6cd93e21313f9fa73b
  psciLoadedExterns 33d0b537a115b20de45407a6e24b39aa
  replQueries 1a935b2388a3831e6508d20bd8520b1d
  replQueryStrings aab7d48d93c897d1ca781a49489e615e
  setInteractivePrint 5306b4e8b813c720ea2bb8a3573fc6ff
  showReplQuery 17c57e03aefd7fd6acce80ec4f6523f1
  updateImportExports 77aa76268f61bff2808d93c70255b3ac
  updateImportedModules 7ac5f45edd06dd834a35c6800801aef6
  updateLets f49b26924128a58747f65bc3e99b8314
  updateLoadedExterns e27d6464fd5ac509b243109140a29293
import  -/  Language.PureScript.Make a45ced05ef945b46ab201444ccadc5c9
  inferForeignModules 4909847491cbb47cc441123469e11d19
  make b4ee8c0547a3ec1bd90b8d96f8083f4f
  rebuildModule cdf51a6925332865ebf416e4d8e33375
import  -/  Language.PureScript.Make.Actions d964d3443f97c4366835ba8624e5a3fb
  MakeActions b3e64d282c220fb028af7420464074c0
  RebuildAlways 4c02622e32018823187273644c1aae4d
  RebuildPolicy 9e87da6e8f3d80dfe923a125596f291e
  buildMakeActions ffd31c1d8bb38416a469a44f6d866eac
  progress b3e64d282c220fb028af7420464074c0
import  -/  Language.PureScript.Make.Monad 31242626e8d67103dbe8824cd3d4896a
  Make 2384e2052993ac0b8b29c8eccd939cb5
  runMake ab2867f8bdf000c620b889012835e285
import  -/  Language.PureScript.Names 00f694509122478d97b327fbbccae327
  exports: ad7ae34f85124c68e8ba1c90fb2e732f
  Ident 71f167265716f619863a793fa311e198
  Ident bad3562aa6138b6192713ac281080869
  ModuleName e77bf9e056798332a9668212060e8e06
  ModuleName 1b2ddf0c04464d2fa2588925f10c1966
  ProperName f69d3801241fcb4773f1284cd28f2dee
  Qualified b6e1bc9e7244a41d3c6149c9b5c2d6d8
  mkQualified de973a57bf2bc638b6df90f1eccf8e1a
  runIdent f4727e6f001b3b7d933fd4e8122af572
  runModuleName 58b788b37f600c0f34fa85241d7748ad
  runProperName a7268334e0b909381550b9329cb80fcc
  showOp b45e7917a51eac70fb9658fd0956a139
import  -/  Language.PureScript.Options 2e36bd5fcc2b2ebbc36ff47b336cef60
  defaultOptions d5de66b0cf6e3104b6ad5f0defb7954a
import  -/  Language.PureScript.Pretty.Kinds 1231cbf0b1be99cf8261312fb9302146
  prettyPrintKind f60a6c7beaabc8993b1df72e46c79d4c
import  -/  Language.PureScript.Pretty.Types 1303ea05006a6ec61edb2f109218248a
  prettyPrintType 8c85e68e61e192deeac8b6a436f4802e
import  -/  Language.PureScript.TypeChecker.Kinds 02e90efcd8f2a4f544b757693da40686
  kindOf 70af85459cf3b4a44152c3e17e69ec09
import  -/  Language.PureScript.TypeChecker.Monad 5c6d6cca9d9f5acb98ab527615b54d6d
  CheckState 9cc3cef00c43c0c2ac24a31e9b521e29
  checkCurrentModule 9cc3cef00c43c0c2ac24a31e9b521e29
  emptyCheckState 702a26b401e2a266972b7fdf9b28e232
import  -/  Language.PureScript.Types 80a51f62cb3e6c71f024289b88f07b7f
  SourceType 0ac818517c14fedd280ef5885ae0cdc3
import  -/  text-1.2.3.0:Data.Text 7daa7e6c9b39d8cc1679e5ec5c64d2be
import  -/  text-1.2.3.0:Data.Text.Internal 30a0a123f71f63b26cd34c6b24f23411
import  -/  text-1.2.3.0:Data.Text.Show 3b4b6fb2985a731022d67f636682da2b
import  -/  transformers-0.5.5.0:Control.Monad.Trans.Except 1cac4acbba7f36bd732fcc993d3cc20d
import  -/  transformers-0.5.5.0:Control.Monad.Trans.State.Strict 04b71a3f25b12af5c8b92a12d96be4c4
import  -/  transformers-0.5.5.0:Control.Monad.Trans.Writer.Strict 1cbd139bf8e92032997c41b58cb8e1af
860dc10cd3c23be8661a1872b92edf25
  $s$fApplicativeStateT ::
    GHC.Base.Applicative
      (Control.Monad.Trans.State.Strict.StateT
         s
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Errors.MultipleErrors
            (Control.Monad.Trans.Writer.Strict.Writer
               Language.PureScript.Errors.MultipleErrors)))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ s.
                  @ (Control.Monad.Trans.State.Strict.StateT
                       s
                       (Control.Monad.Trans.Except.ExceptT
                          Language.PureScript.Errors.MultipleErrors
                          (Control.Monad.Trans.Writer.Strict.Writer
                             Language.PureScript.Errors.MultipleErrors)))
                  (Language.PureScript.Interactive.$s$fApplicativeStateT_$s$fFunctorStateT
                     @ s)
                  (Language.PureScript.Interactive.$s$fApplicativeStateT_$s$fApplicativeStateT_$cpure
                     @ s)
                  (Language.PureScript.Interactive.$s$fApplicativeStateT_$s$fApplicativeStateT_$c<*>
                     @ s)
                  (Control.Monad.Trans.State.Strict.$fAlternativeStateT4
                     @ (Control.Monad.Trans.Except.ExceptT
                          Language.PureScript.Errors.MultipleErrors
                          (Control.Monad.Trans.Writer.Strict.Writer
                             Language.PureScript.Errors.MultipleErrors))
                     @ s
                     Language.PureScript.Interactive.$s$fApplicativeStateT_v
                     (Language.PureScript.Interactive.$s$fApplicativeStateT_$s$fMonadExceptT
                        @ Language.PureScript.Errors.MultipleErrors))
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N) (c :: <*>_N).
                   <a -> b -> c>_R
                   ->_R <Control.Monad.Trans.State.Strict.StateT
                           s
                           (Control.Monad.Trans.Except.ExceptT
                              Language.PureScript.Errors.MultipleErrors
                              (Control.Monad.Trans.Writer.Strict.Writer
                                 Language.PureScript.Errors.MultipleErrors))
                           a>_R
                   ->_R <Control.Monad.Trans.State.Strict.StateT
                           s
                           (Control.Monad.Trans.Except.ExceptT
                              Language.PureScript.Errors.MultipleErrors
                              (Control.Monad.Trans.Writer.Strict.Writer
                                 Language.PureScript.Errors.MultipleErrors))
                           b>_R
                   ->_R Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                 <s>_N
                                 <Control.Monad.Trans.Except.ExceptT
                                    Language.PureScript.Errors.MultipleErrors
                                    (Control.Monad.Trans.Writer.Strict.Writer
                                       Language.PureScript.Errors.MultipleErrors)>_R
                                 <c>_N))
                  (Language.PureScript.Interactive.$s$fApplicativeStateT_$s$fApplicativeStateT_$c*>
                     @ s)
                  (Language.PureScript.Interactive.$s$fApplicativeStateT_$s$fApplicativeStateT1
                     @ s)
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   <Control.Monad.Trans.State.Strict.StateT
                      s
                      (Control.Monad.Trans.Except.ExceptT
                         Language.PureScript.Errors.MultipleErrors
                         (Control.Monad.Trans.Writer.Strict.Writer
                            Language.PureScript.Errors.MultipleErrors))
                      a>_R
                   ->_R <Control.Monad.Trans.State.Strict.StateT
                           s
                           (Control.Monad.Trans.Except.ExceptT
                              Language.PureScript.Errors.MultipleErrors
                              (Control.Monad.Trans.Writer.Strict.Writer
                                 Language.PureScript.Errors.MultipleErrors))
                           b>_R
                   ->_R Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                 <s>_N
                                 <Control.Monad.Trans.Except.ExceptT
                                    Language.PureScript.Errors.MultipleErrors
                                    (Control.Monad.Trans.Writer.Strict.Writer
                                       Language.PureScript.Errors.MultipleErrors)>_R
                                 <a>_N)) -}
78c55b24aaddc283e87cc910680fccf1
  $s$fApplicativeStateT_$s$fApplicativeStateT1 ::
    Control.Monad.Trans.State.Strict.StateT
      s
      (Control.Monad.Trans.Except.ExceptT
         Language.PureScript.Errors.MultipleErrors
         (Control.Monad.Trans.Writer.Strict.Writer
            Language.PureScript.Errors.MultipleErrors))
      a
    -> Control.Monad.Trans.State.Strict.StateT
         s
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Errors.MultipleErrors
            (Control.Monad.Trans.Writer.Strict.Writer
               Language.PureScript.Errors.MultipleErrors))
         b
    -> s
    -> Control.Monad.Trans.Except.ExceptT
         Language.PureScript.Errors.MultipleErrors
         (Control.Monad.Trans.Writer.Strict.Writer
            Language.PureScript.Errors.MultipleErrors)
         (a, s)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S(SL)),1*C1(U(U,U))><L,1*C1(U(1*U,1*U))><L,U>m,
     Unfolding: InlineRule (0, True, False)
                (\ @ s
                   @ a
                   @ b
                   (x :: Control.Monad.Trans.State.Strict.StateT
                           s
                           (Control.Monad.Trans.Except.ExceptT
                              Language.PureScript.Errors.MultipleErrors
                              (Control.Monad.Trans.Writer.Strict.Writer
                                 Language.PureScript.Errors.MultipleErrors))
                           a)
                   (eta :: Control.Monad.Trans.State.Strict.StateT
                             s
                             (Control.Monad.Trans.Except.ExceptT
                                Language.PureScript.Errors.MultipleErrors
                                (Control.Monad.Trans.Writer.Strict.Writer
                                   Language.PureScript.Errors.MultipleErrors))
                             b)
                   (eta1 :: s) ->
                 case (x `cast`
                       (Control.Monad.Trans.State.Strict.N:StateT[0]
                            <s>_N
                            <Control.Monad.Trans.Except.ExceptT
                               Language.PureScript.Errors.MultipleErrors
                               (Control.Monad.Trans.Writer.Strict.Writer
                                  Language.PureScript.Errors.MultipleErrors)>_R
                            <a>_N)
                         eta1)
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <Language.PureScript.Errors.MultipleErrors>_N
                           <Control.Monad.Trans.Writer.Strict.WriterT
                              Language.PureScript.Errors.MultipleErrors
                              Data.Functor.Identity.Identity>_R
                           <(a, s)>_N ; (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                             <Language.PureScript.Errors.MultipleErrors>_N
                                             <Data.Functor.Identity.Identity>_R
                                             <Data.Either.Either
                                                Language.PureScript.Errors.MultipleErrors
                                                (a, s)>_N ; Data.Functor.Identity.N:Identity[0]
                                                                <(Data.Either.Either
                                                                    Language.PureScript.Errors.MultipleErrors
                                                                    (a, s),
                                                                  Language.PureScript.Errors.MultipleErrors)>_R)) of wild { (,) a1 w1 ->
                 case a1 of wild1 {
                   Data.Either.Left x1
                   -> (Data.Either.Left
                         @ Language.PureScript.Errors.MultipleErrors
                         @ (a, s)
                         x1,
                       (GHC.Base.build
                          @ Language.PureScript.AST.Declarations.ErrorMessage
                          (\ @ b1
                             (c :: Language.PureScript.AST.Declarations.ErrorMessage
                                   -> b1 -> b1)[OneShot]
                             (n :: b1)[OneShot] ->
                           GHC.Base.foldr
                             @ Language.PureScript.AST.Declarations.ErrorMessage
                             @ b1
                             c
                             n
                             w1 `cast` (Language.PureScript.Errors.N:MultipleErrors[0])))
                         `cast`
                       (Sym (Language.PureScript.Errors.N:MultipleErrors[0])))
                        `cast`
                      (Sym (Data.Functor.Identity.N:Identity[0]
                                <(Data.Either.Either
                                    Language.PureScript.Errors.MultipleErrors (a, s),
                                  Language.PureScript.Errors.MultipleErrors)>_R) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                             <Language.PureScript.Errors.MultipleErrors>_N
                                                                                             <Data.Functor.Identity.Identity>_R
                                                                                             <Data.Either.Either
                                                                                                Language.PureScript.Errors.MultipleErrors
                                                                                                (a,
                                                                                                 s)>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                   <Language.PureScript.Errors.MultipleErrors>_N
                                                                                                                   <Control.Monad.Trans.Writer.Strict.WriterT
                                                                                                                      Language.PureScript.Errors.MultipleErrors
                                                                                                                      Data.Functor.Identity.Identity>_R
                                                                                                                   <(a,
                                                                                                                     s)>_N)))
                   Data.Either.Right y
                   -> case y of wild2 { (,) a2 s' ->
                      case (eta
                              `cast`
                            (Control.Monad.Trans.State.Strict.N:StateT[0]
                                 <s>_N
                                 <Control.Monad.Trans.Except.ExceptT
                                    Language.PureScript.Errors.MultipleErrors
                                    (Control.Monad.Trans.Writer.Strict.Writer
                                       Language.PureScript.Errors.MultipleErrors)>_R
                                 <b>_N)
                              s')
                             `cast`
                           (Control.Monad.Trans.Except.N:ExceptT[0]
                                <Language.PureScript.Errors.MultipleErrors>_N
                                <Control.Monad.Trans.Writer.Strict.WriterT
                                   Language.PureScript.Errors.MultipleErrors
                                   Data.Functor.Identity.Identity>_R
                                <(b, s)>_N ; (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                  <Language.PureScript.Errors.MultipleErrors>_N
                                                  <Data.Functor.Identity.Identity>_R
                                                  <Data.Either.Either
                                                     Language.PureScript.Errors.MultipleErrors
                                                     (b, s)>_N ; Data.Functor.Identity.N:Identity[0]
                                                                     <(Data.Either.Either
                                                                         Language.PureScript.Errors.MultipleErrors
                                                                         (b, s),
                                                                       Language.PureScript.Errors.MultipleErrors)>_R)) of wild3 { (,) a3 w2 ->
                      case a3 of wild4 {
                        Data.Either.Left e1
                        -> (Data.Either.Left
                              @ Language.PureScript.Errors.MultipleErrors
                              @ (a, s)
                              e1,
                            (GHC.Base.build
                               @ Language.PureScript.AST.Declarations.ErrorMessage
                               (\ @ b1
                                  (c :: Language.PureScript.AST.Declarations.ErrorMessage
                                        -> b1 -> b1)[OneShot]
                                  (n :: b1)[OneShot] ->
                                GHC.Base.foldr
                                  @ Language.PureScript.AST.Declarations.ErrorMessage
                                  @ b1
                                  c
                                  (GHC.Base.foldr
                                     @ Language.PureScript.AST.Declarations.ErrorMessage
                                     @ b1
                                     c
                                     n
                                     w2 `cast` (Language.PureScript.Errors.N:MultipleErrors[0]))
                                  w1 `cast` (Language.PureScript.Errors.N:MultipleErrors[0])))
                              `cast`
                            (Sym (Language.PureScript.Errors.N:MultipleErrors[0])))
                             `cast`
                           (Sym (Data.Functor.Identity.N:Identity[0]
                                     <(Data.Either.Either
                                         Language.PureScript.Errors.MultipleErrors (a, s),
                                       Language.PureScript.Errors.MultipleErrors)>_R) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                                  <Language.PureScript.Errors.MultipleErrors>_N
                                                                                                  <Data.Functor.Identity.Identity>_R
                                                                                                  <Data.Either.Either
                                                                                                     Language.PureScript.Errors.MultipleErrors
                                                                                                     (a,
                                                                                                      s)>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                        <Language.PureScript.Errors.MultipleErrors>_N
                                                                                                                        <Control.Monad.Trans.Writer.Strict.WriterT
                                                                                                                           Language.PureScript.Errors.MultipleErrors
                                                                                                                           Data.Functor.Identity.Identity>_R
                                                                                                                        <(a,
                                                                                                                          s)>_N)))
                        Data.Either.Right x1
                        -> case x1 of wild5 { (,) x2 s'' ->
                           (Data.Either.Right
                              @ Language.PureScript.Errors.MultipleErrors
                              @ (a, s)
                              (a2, s''),
                            (GHC.Base.build
                               @ Language.PureScript.AST.Declarations.ErrorMessage
                               (\ @ b1
                                  (c :: Language.PureScript.AST.Declarations.ErrorMessage
                                        -> b1 -> b1)[OneShot]
                                  (n :: b1)[OneShot] ->
                                GHC.Base.foldr
                                  @ Language.PureScript.AST.Declarations.ErrorMessage
                                  @ b1
                                  c
                                  (GHC.Base.foldr
                                     @ Language.PureScript.AST.Declarations.ErrorMessage
                                     @ b1
                                     c
                                     n
                                     w2 `cast` (Language.PureScript.Errors.N:MultipleErrors[0]))
                                  w1 `cast` (Language.PureScript.Errors.N:MultipleErrors[0])))
                              `cast`
                            (Sym (Language.PureScript.Errors.N:MultipleErrors[0])))
                             `cast`
                           (Sym (Data.Functor.Identity.N:Identity[0]
                                     <(Data.Either.Either
                                         Language.PureScript.Errors.MultipleErrors (a, s),
                                       Language.PureScript.Errors.MultipleErrors)>_R) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                                  <Language.PureScript.Errors.MultipleErrors>_N
                                                                                                  <Data.Functor.Identity.Identity>_R
                                                                                                  <Data.Either.Either
                                                                                                     Language.PureScript.Errors.MultipleErrors
                                                                                                     (a,
                                                                                                      s)>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                        <Language.PureScript.Errors.MultipleErrors>_N
                                                                                                                        <Control.Monad.Trans.Writer.Strict.WriterT
                                                                                                                           Language.PureScript.Errors.MultipleErrors
                                                                                                                           Data.Functor.Identity.Identity>_R
                                                                                                                        <(a,
                                                                                                                          s)>_N))) } } } } } }) -}
2a4eb89ae24dfea497522c939e7f5a86
  $s$fApplicativeStateT_$s$fApplicativeStateT_$c*> ::
    Control.Monad.Trans.State.Strict.StateT
      s
      (Control.Monad.Trans.Except.ExceptT
         Language.PureScript.Errors.MultipleErrors
         (Control.Monad.Trans.Writer.Strict.Writer
            Language.PureScript.Errors.MultipleErrors))
      a
    -> Control.Monad.Trans.State.Strict.StateT
         s
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Errors.MultipleErrors
            (Control.Monad.Trans.Writer.Strict.Writer
               Language.PureScript.Errors.MultipleErrors))
         b
    -> Control.Monad.Trans.State.Strict.StateT
         s
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Errors.MultipleErrors
            (Control.Monad.Trans.Writer.Strict.Writer
               Language.PureScript.Errors.MultipleErrors))
         b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S(SL)),1*C1(U(1*U,U))><L,1*C1(U(U,1*U))><L,U>m,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ a
                   @ b
                   (m1 :: Control.Monad.Trans.State.Strict.StateT
                            s
                            (Control.Monad.Trans.Except.ExceptT
                               Language.PureScript.Errors.MultipleErrors
                               (Control.Monad.Trans.Writer.Strict.Writer
                                  Language.PureScript.Errors.MultipleErrors))
                            a)
                   (k :: Control.Monad.Trans.State.Strict.StateT
                           s
                           (Control.Monad.Trans.Except.ExceptT
                              Language.PureScript.Errors.MultipleErrors
                              (Control.Monad.Trans.Writer.Strict.Writer
                                 Language.PureScript.Errors.MultipleErrors))
                           b)
                   (s1 :: s) ->
                 case (m1
                         `cast`
                       (Control.Monad.Trans.State.Strict.N:StateT[0]
                            <s>_N
                            <Control.Monad.Trans.Except.ExceptT
                               Language.PureScript.Errors.MultipleErrors
                               (Control.Monad.Trans.Writer.Strict.Writer
                                  Language.PureScript.Errors.MultipleErrors)>_R
                            <a>_N)
                         s1)
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <Language.PureScript.Errors.MultipleErrors>_N
                           <Control.Monad.Trans.Writer.Strict.WriterT
                              Language.PureScript.Errors.MultipleErrors
                              Data.Functor.Identity.Identity>_R
                           <(a, s)>_N ; (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                             <Language.PureScript.Errors.MultipleErrors>_N
                                             <Data.Functor.Identity.Identity>_R
                                             <Data.Either.Either
                                                Language.PureScript.Errors.MultipleErrors
                                                (a, s)>_N ; Data.Functor.Identity.N:Identity[0]
                                                                <(Data.Either.Either
                                                                    Language.PureScript.Errors.MultipleErrors
                                                                    (a, s),
                                                                  Language.PureScript.Errors.MultipleErrors)>_R)) of wild { (,) a1 w1 ->
                 case a1 of wild1 {
                   Data.Either.Left e1
                   -> (Data.Either.Left
                         @ Language.PureScript.Errors.MultipleErrors
                         @ (b, s)
                         e1,
                       (GHC.Base.build
                          @ Language.PureScript.AST.Declarations.ErrorMessage
                          (\ @ b1
                             (c :: Language.PureScript.AST.Declarations.ErrorMessage
                                   -> b1 -> b1)[OneShot]
                             (n :: b1)[OneShot] ->
                           GHC.Base.foldr
                             @ Language.PureScript.AST.Declarations.ErrorMessage
                             @ b1
                             c
                             n
                             w1 `cast` (Language.PureScript.Errors.N:MultipleErrors[0])))
                         `cast`
                       (Sym (Language.PureScript.Errors.N:MultipleErrors[0])))
                        `cast`
                      (Sym (Data.Functor.Identity.N:Identity[0]
                                <(Data.Either.Either
                                    Language.PureScript.Errors.MultipleErrors (b, s),
                                  Language.PureScript.Errors.MultipleErrors)>_R) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                             <Language.PureScript.Errors.MultipleErrors>_N
                                                                                             <Data.Functor.Identity.Identity>_R
                                                                                             <Data.Either.Either
                                                                                                Language.PureScript.Errors.MultipleErrors
                                                                                                (b,
                                                                                                 s)>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                   <Language.PureScript.Errors.MultipleErrors>_N
                                                                                                                   <Control.Monad.Trans.Writer.Strict.WriterT
                                                                                                                      Language.PureScript.Errors.MultipleErrors
                                                                                                                      Data.Functor.Identity.Identity>_R
                                                                                                                   <(b,
                                                                                                                     s)>_N)))
                   Data.Either.Right x
                   -> case x of wild2 { (,) a2 s' ->
                      case (k `cast`
                            (Control.Monad.Trans.State.Strict.N:StateT[0]
                                 <s>_N
                                 <Control.Monad.Trans.Except.ExceptT
                                    Language.PureScript.Errors.MultipleErrors
                                    (Control.Monad.Trans.Writer.Strict.Writer
                                       Language.PureScript.Errors.MultipleErrors)>_R
                                 <b>_N)
                              s')
                             `cast`
                           (Control.Monad.Trans.Except.N:ExceptT[0]
                                <Language.PureScript.Errors.MultipleErrors>_N
                                <Control.Monad.Trans.Writer.Strict.WriterT
                                   Language.PureScript.Errors.MultipleErrors
                                   Data.Functor.Identity.Identity>_R
                                <(b, s)>_N ; (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                  <Language.PureScript.Errors.MultipleErrors>_N
                                                  <Data.Functor.Identity.Identity>_R
                                                  <Data.Either.Either
                                                     Language.PureScript.Errors.MultipleErrors
                                                     (b, s)>_N ; Data.Functor.Identity.N:Identity[0]
                                                                     <(Data.Either.Either
                                                                         Language.PureScript.Errors.MultipleErrors
                                                                         (b, s),
                                                                       Language.PureScript.Errors.MultipleErrors)>_R)) of wild3 { (,) b1 w' ->
                      (b1,
                       (GHC.Base.augment
                          @ Language.PureScript.AST.Declarations.ErrorMessage
                          (\ @ b2
                             (c :: Language.PureScript.AST.Declarations.ErrorMessage
                                   -> b2 -> b2)[OneShot]
                             (n :: b2)[OneShot] ->
                           GHC.Base.foldr
                             @ Language.PureScript.AST.Declarations.ErrorMessage
                             @ b2
                             c
                             n
                             w1 `cast` (Language.PureScript.Errors.N:MultipleErrors[0]))
                          w' `cast` (Language.PureScript.Errors.N:MultipleErrors[0]))
                         `cast`
                       (Sym (Language.PureScript.Errors.N:MultipleErrors[0])))
                        `cast`
                      (Sym (Data.Functor.Identity.N:Identity[0]
                                <(Data.Either.Either
                                    Language.PureScript.Errors.MultipleErrors (b, s),
                                  Language.PureScript.Errors.MultipleErrors)>_R) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                             <Language.PureScript.Errors.MultipleErrors>_N
                                                                                             <Data.Functor.Identity.Identity>_R
                                                                                             <Data.Either.Either
                                                                                                Language.PureScript.Errors.MultipleErrors
                                                                                                (b,
                                                                                                 s)>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                   <Language.PureScript.Errors.MultipleErrors>_N
                                                                                                                   <Control.Monad.Trans.Writer.Strict.WriterT
                                                                                                                      Language.PureScript.Errors.MultipleErrors
                                                                                                                      Data.Functor.Identity.Identity>_R
                                                                                                                   <(b,
                                                                                                                     s)>_N))) } } } })
                  `cast`
                (forall (s :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.State.Strict.StateT
                    s
                    (Control.Monad.Trans.Except.ExceptT
                       Language.PureScript.Errors.MultipleErrors
                       (Control.Monad.Trans.Writer.Strict.Writer
                          Language.PureScript.Errors.MultipleErrors))
                    a>_R
                 ->_R <Control.Monad.Trans.State.Strict.StateT
                         s
                         (Control.Monad.Trans.Except.ExceptT
                            Language.PureScript.Errors.MultipleErrors
                            (Control.Monad.Trans.Writer.Strict.Writer
                               Language.PureScript.Errors.MultipleErrors))
                         b>_R
                 ->_R Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                               <s>_N
                               <Control.Monad.Trans.Except.ExceptT
                                  Language.PureScript.Errors.MultipleErrors
                                  (Control.Monad.Trans.Writer.Strict.Writer
                                     Language.PureScript.Errors.MultipleErrors)>_R
                               <b>_N)) -}
21c85da18d1ac518e7d56ba981bef222
  $s$fApplicativeStateT_$s$fApplicativeStateT_$c<*> ::
    Control.Monad.Trans.State.Strict.StateT
      s
      (Control.Monad.Trans.Except.ExceptT
         Language.PureScript.Errors.MultipleErrors
         (Control.Monad.Trans.Writer.Strict.Writer
            Language.PureScript.Errors.MultipleErrors))
      (a -> b)
    -> Control.Monad.Trans.State.Strict.StateT
         s
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Errors.MultipleErrors
            (Control.Monad.Trans.Writer.Strict.Writer
               Language.PureScript.Errors.MultipleErrors))
         a
    -> Control.Monad.Trans.State.Strict.StateT
         s
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Errors.MultipleErrors
            (Control.Monad.Trans.Writer.Strict.Writer
               Language.PureScript.Errors.MultipleErrors))
         b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S(SL)),1*C1(U(1*U,U))><L,1*C1(U(1*U,1*U))><L,U>m,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ a
                   @ b
                   (ds :: Control.Monad.Trans.State.Strict.StateT
                            s
                            (Control.Monad.Trans.Except.ExceptT
                               Language.PureScript.Errors.MultipleErrors
                               (Control.Monad.Trans.Writer.Strict.Writer
                                  Language.PureScript.Errors.MultipleErrors))
                            (a -> b))
                   (ds1 :: Control.Monad.Trans.State.Strict.StateT
                             s
                             (Control.Monad.Trans.Except.ExceptT
                                Language.PureScript.Errors.MultipleErrors
                                (Control.Monad.Trans.Writer.Strict.Writer
                                   Language.PureScript.Errors.MultipleErrors))
                             a)
                   (s1 :: s) ->
                 case (ds
                         `cast`
                       (Control.Monad.Trans.State.Strict.N:StateT[0]
                            <s>_N
                            <Control.Monad.Trans.Except.ExceptT
                               Language.PureScript.Errors.MultipleErrors
                               (Control.Monad.Trans.Writer.Strict.Writer
                                  Language.PureScript.Errors.MultipleErrors)>_R
                            <a -> b>_N)
                         s1)
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <Language.PureScript.Errors.MultipleErrors>_N
                           <Control.Monad.Trans.Writer.Strict.WriterT
                              Language.PureScript.Errors.MultipleErrors
                              Data.Functor.Identity.Identity>_R
                           <(a -> b, s)>_N ; (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                  <Language.PureScript.Errors.MultipleErrors>_N
                                                  <Data.Functor.Identity.Identity>_R
                                                  <Data.Either.Either
                                                     Language.PureScript.Errors.MultipleErrors
                                                     (a -> b,
                                                      s)>_N ; Data.Functor.Identity.N:Identity[0]
                                                                  <(Data.Either.Either
                                                                      Language.PureScript.Errors.MultipleErrors
                                                                      (a -> b, s),
                                                                    Language.PureScript.Errors.MultipleErrors)>_R)) of wild { (,) a1 w1 ->
                 case a1 of wild1 {
                   Data.Either.Left e1
                   -> (Data.Either.Left
                         @ Language.PureScript.Errors.MultipleErrors
                         @ (b, s)
                         e1,
                       (GHC.Base.build
                          @ Language.PureScript.AST.Declarations.ErrorMessage
                          (\ @ b1
                             (c :: Language.PureScript.AST.Declarations.ErrorMessage
                                   -> b1 -> b1)[OneShot]
                             (n :: b1)[OneShot] ->
                           GHC.Base.foldr
                             @ Language.PureScript.AST.Declarations.ErrorMessage
                             @ b1
                             c
                             n
                             w1 `cast` (Language.PureScript.Errors.N:MultipleErrors[0])))
                         `cast`
                       (Sym (Language.PureScript.Errors.N:MultipleErrors[0])))
                        `cast`
                      (Sym (Data.Functor.Identity.N:Identity[0]
                                <(Data.Either.Either
                                    Language.PureScript.Errors.MultipleErrors (b, s),
                                  Language.PureScript.Errors.MultipleErrors)>_R) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                             <Language.PureScript.Errors.MultipleErrors>_N
                                                                                             <Data.Functor.Identity.Identity>_R
                                                                                             <Data.Either.Either
                                                                                                Language.PureScript.Errors.MultipleErrors
                                                                                                (b,
                                                                                                 s)>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                   <Language.PureScript.Errors.MultipleErrors>_N
                                                                                                                   <Control.Monad.Trans.Writer.Strict.WriterT
                                                                                                                      Language.PureScript.Errors.MultipleErrors
                                                                                                                      Data.Functor.Identity.Identity>_R
                                                                                                                   <(b,
                                                                                                                     s)>_N)))
                   Data.Either.Right x
                   -> case x of wild2 { (,) f s' ->
                      case (ds1
                              `cast`
                            (Control.Monad.Trans.State.Strict.N:StateT[0]
                                 <s>_N
                                 <Control.Monad.Trans.Except.ExceptT
                                    Language.PureScript.Errors.MultipleErrors
                                    (Control.Monad.Trans.Writer.Strict.Writer
                                       Language.PureScript.Errors.MultipleErrors)>_R
                                 <a>_N)
                              s')
                             `cast`
                           (Control.Monad.Trans.Except.N:ExceptT[0]
                                <Language.PureScript.Errors.MultipleErrors>_N
                                <Control.Monad.Trans.Writer.Strict.WriterT
                                   Language.PureScript.Errors.MultipleErrors
                                   Data.Functor.Identity.Identity>_R
                                <(a, s)>_N ; (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                  <Language.PureScript.Errors.MultipleErrors>_N
                                                  <Data.Functor.Identity.Identity>_R
                                                  <Data.Either.Either
                                                     Language.PureScript.Errors.MultipleErrors
                                                     (a, s)>_N ; Data.Functor.Identity.N:Identity[0]
                                                                     <(Data.Either.Either
                                                                         Language.PureScript.Errors.MultipleErrors
                                                                         (a, s),
                                                                       Language.PureScript.Errors.MultipleErrors)>_R)) of wild3 { (,) a2 w2 ->
                      case a2 of wild4 {
                        Data.Either.Left e1
                        -> (Data.Either.Left
                              @ Language.PureScript.Errors.MultipleErrors
                              @ (b, s)
                              e1,
                            (GHC.Base.build
                               @ Language.PureScript.AST.Declarations.ErrorMessage
                               (\ @ b1
                                  (c :: Language.PureScript.AST.Declarations.ErrorMessage
                                        -> b1 -> b1)[OneShot]
                                  (n :: b1)[OneShot] ->
                                GHC.Base.foldr
                                  @ Language.PureScript.AST.Declarations.ErrorMessage
                                  @ b1
                                  c
                                  (GHC.Base.foldr
                                     @ Language.PureScript.AST.Declarations.ErrorMessage
                                     @ b1
                                     c
                                     n
                                     w2 `cast` (Language.PureScript.Errors.N:MultipleErrors[0]))
                                  w1 `cast` (Language.PureScript.Errors.N:MultipleErrors[0])))
                              `cast`
                            (Sym (Language.PureScript.Errors.N:MultipleErrors[0])))
                             `cast`
                           (Sym (Data.Functor.Identity.N:Identity[0]
                                     <(Data.Either.Either
                                         Language.PureScript.Errors.MultipleErrors (b, s),
                                       Language.PureScript.Errors.MultipleErrors)>_R) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                                  <Language.PureScript.Errors.MultipleErrors>_N
                                                                                                  <Data.Functor.Identity.Identity>_R
                                                                                                  <Data.Either.Either
                                                                                                     Language.PureScript.Errors.MultipleErrors
                                                                                                     (b,
                                                                                                      s)>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                        <Language.PureScript.Errors.MultipleErrors>_N
                                                                                                                        <Control.Monad.Trans.Writer.Strict.WriterT
                                                                                                                           Language.PureScript.Errors.MultipleErrors
                                                                                                                           Data.Functor.Identity.Identity>_R
                                                                                                                        <(b,
                                                                                                                          s)>_N)))
                        Data.Either.Right x1
                        -> case x1 of wild5 { (,) x2 s'' ->
                           (Data.Either.Right
                              @ Language.PureScript.Errors.MultipleErrors
                              @ (b, s)
                              (f x2, s''),
                            (GHC.Base.build
                               @ Language.PureScript.AST.Declarations.ErrorMessage
                               (\ @ b1
                                  (c :: Language.PureScript.AST.Declarations.ErrorMessage
                                        -> b1 -> b1)[OneShot]
                                  (n :: b1)[OneShot] ->
                                GHC.Base.foldr
                                  @ Language.PureScript.AST.Declarations.ErrorMessage
                                  @ b1
                                  c
                                  (GHC.Base.foldr
                                     @ Language.PureScript.AST.Declarations.ErrorMessage
                                     @ b1
                                     c
                                     n
                                     w2 `cast` (Language.PureScript.Errors.N:MultipleErrors[0]))
                                  w1 `cast` (Language.PureScript.Errors.N:MultipleErrors[0])))
                              `cast`
                            (Sym (Language.PureScript.Errors.N:MultipleErrors[0])))
                             `cast`
                           (Sym (Data.Functor.Identity.N:Identity[0]
                                     <(Data.Either.Either
                                         Language.PureScript.Errors.MultipleErrors (b, s),
                                       Language.PureScript.Errors.MultipleErrors)>_R) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                                  <Language.PureScript.Errors.MultipleErrors>_N
                                                                                                  <Data.Functor.Identity.Identity>_R
                                                                                                  <Data.Either.Either
                                                                                                     Language.PureScript.Errors.MultipleErrors
                                                                                                     (b,
                                                                                                      s)>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                        <Language.PureScript.Errors.MultipleErrors>_N
                                                                                                                        <Control.Monad.Trans.Writer.Strict.WriterT
                                                                                                                           Language.PureScript.Errors.MultipleErrors
                                                                                                                           Data.Functor.Identity.Identity>_R
                                                                                                                        <(b,
                                                                                                                          s)>_N))) } } } } } })
                  `cast`
                (forall (s :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.State.Strict.StateT
                    s
                    (Control.Monad.Trans.Except.ExceptT
                       Language.PureScript.Errors.MultipleErrors
                       (Control.Monad.Trans.Writer.Strict.Writer
                          Language.PureScript.Errors.MultipleErrors))
                    (a -> b)>_R
                 ->_R <Control.Monad.Trans.State.Strict.StateT
                         s
                         (Control.Monad.Trans.Except.ExceptT
                            Language.PureScript.Errors.MultipleErrors
                            (Control.Monad.Trans.Writer.Strict.Writer
                               Language.PureScript.Errors.MultipleErrors))
                         a>_R
                 ->_R Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                               <s>_N
                               <Control.Monad.Trans.Except.ExceptT
                                  Language.PureScript.Errors.MultipleErrors
                                  (Control.Monad.Trans.Writer.Strict.Writer
                                     Language.PureScript.Errors.MultipleErrors)>_R
                               <b>_N)) -}
01b6f4e1b3879291f78fbfe43b402e3c
  $s$fApplicativeStateT_$s$fApplicativeStateT_$cpure ::
    a
    -> Control.Monad.Trans.State.Strict.StateT
         s
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Errors.MultipleErrors
            (Control.Monad.Trans.Writer.Strict.Writer
               Language.PureScript.Errors.MultipleErrors))
         a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ s @ a (a1 :: a) (s1 :: s) ->
                 (Data.Either.Right
                    @ Language.PureScript.Errors.MultipleErrors
                    @ (a, s)
                    (a1, s1),
                  (GHC.Types.[] @ Language.PureScript.AST.Declarations.ErrorMessage)
                    `cast`
                  (Sym (Language.PureScript.Errors.N:MultipleErrors[0]))))
                  `cast`
                (forall (s :: <*>_N) (a :: <*>_N).
                 <a>_R
                 ->_R (<s>_R
                       ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                     <(Data.Either.Either
                                         Language.PureScript.Errors.MultipleErrors (a, s),
                                       Language.PureScript.Errors.MultipleErrors)>_R) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                                  <Language.PureScript.Errors.MultipleErrors>_N
                                                                                                  <Data.Functor.Identity.Identity>_R
                                                                                                  <Data.Either.Either
                                                                                                     Language.PureScript.Errors.MultipleErrors
                                                                                                     (a,
                                                                                                      s)>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                        <Language.PureScript.Errors.MultipleErrors>_N
                                                                                                                        <Control.Monad.Trans.Writer.Strict.WriterT
                                                                                                                           Language.PureScript.Errors.MultipleErrors
                                                                                                                           Data.Functor.Identity.Identity>_R
                                                                                                                        <(a,
                                                                                                                          s)>_N))) ; Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                                                                                              <s>_N
                                                                                                                                              <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                 Language.PureScript.Errors.MultipleErrors
                                                                                                                                                 (Control.Monad.Trans.Writer.Strict.Writer
                                                                                                                                                    Language.PureScript.Errors.MultipleErrors)>_R
                                                                                                                                              <a>_N)) -}
44ef25a4a06da22d62b5a8182abb74b3
  $s$fApplicativeStateT_$s$fApplicativeWriterT ::
    GHC.Base.Applicative
      (Control.Monad.Trans.Writer.Strict.WriterT
         Language.PureScript.Errors.MultipleErrors
         Data.Functor.Identity.Identity)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Trans.Writer.Strict.WriterT
                       Language.PureScript.Errors.MultipleErrors
                       Data.Functor.Identity.Identity)
                  (Language.PureScript.Interactive.$s$fApplicativeStateT_$s$fFunctorWriterT
                     @ Language.PureScript.Errors.MultipleErrors)
                  Language.PureScript.Interactive.$s$fApplicativeStateT_$s$fApplicativeWriterT_$cpure
                  Language.PureScript.Interactive.$s$fApplicativeStateT_$s$fApplicativeWriterT_$c<*>
                  (Control.Monad.Trans.Writer.Strict.$fApplicativeWriterT_$cliftA2
                     @ Language.PureScript.Errors.MultipleErrors
                     @ Data.Functor.Identity.Identity
                     Language.PureScript.Errors.$fMonoidMultipleErrors
                     Data.Functor.Identity.$fApplicativeIdentity)
                  (\ @ a
                     @ b
                     (eta :: Control.Monad.Trans.Writer.Strict.WriterT
                               Language.PureScript.Errors.MultipleErrors
                               Data.Functor.Identity.Identity
                               a)
                     (eta1 :: Control.Monad.Trans.Writer.Strict.WriterT
                                Language.PureScript.Errors.MultipleErrors
                                Data.Functor.Identity.Identity
                                b) ->
                   case eta
                          `cast`
                        (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                             <Language.PureScript.Errors.MultipleErrors>_N
                             <Data.Functor.Identity.Identity>_R
                             <a>_N ; Data.Functor.Identity.N:Identity[0]
                                         <(a,
                                           Language.PureScript.Errors.MultipleErrors)>_R) of wild { (,) a1 w1 ->
                   case eta1
                          `cast`
                        (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                             <Language.PureScript.Errors.MultipleErrors>_N
                             <Data.Functor.Identity.Identity>_R
                             <b>_N ; Data.Functor.Identity.N:Identity[0]
                                         <(b,
                                           Language.PureScript.Errors.MultipleErrors)>_R) of wild1 { (,) b1 w' ->
                   (b1,
                    (GHC.Base.augment
                       @ Language.PureScript.AST.Declarations.ErrorMessage
                       (\ @ b2
                          (c :: Language.PureScript.AST.Declarations.ErrorMessage
                                -> b2 -> b2)[OneShot]
                          (n :: b2)[OneShot] ->
                        GHC.Base.foldr
                          @ Language.PureScript.AST.Declarations.ErrorMessage
                          @ b2
                          c
                          n
                          w1 `cast` (Language.PureScript.Errors.N:MultipleErrors[0]))
                       w' `cast` (Language.PureScript.Errors.N:MultipleErrors[0]))
                      `cast`
                    (Sym (Language.PureScript.Errors.N:MultipleErrors[0])))
                     `cast`
                   (Sym (Data.Functor.Identity.N:Identity[0]
                             <(b, Language.PureScript.Errors.MultipleErrors)>_R)) } })
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   <Control.Monad.Trans.Writer.Strict.WriterT
                      Language.PureScript.Errors.MultipleErrors
                      Data.Functor.Identity.Identity
                      a>_R
                   ->_R <Control.Monad.Trans.Writer.Strict.WriterT
                           Language.PureScript.Errors.MultipleErrors
                           Data.Functor.Identity.Identity
                           b>_R
                   ->_R Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                 <Language.PureScript.Errors.MultipleErrors>_N
                                 <Data.Functor.Identity.Identity>_R
                                 <b>_N))
                  (\ @ a
                     @ b
                     (eta :: Control.Monad.Trans.Writer.Strict.WriterT
                               Language.PureScript.Errors.MultipleErrors
                               Data.Functor.Identity.Identity
                               a) ->
                   Language.PureScript.Interactive.$s$fApplicativeStateT_$s$fApplicativeWriterT_$c<*>
                     @ b
                     @ a
                     (Control.Monad.Trans.Writer.Strict.$fApplicativeWriterT1
                        @ a
                        @ b
                        @ Language.PureScript.Errors.MultipleErrors
                        eta
                          `cast`
                        (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                             <Language.PureScript.Errors.MultipleErrors>_N
                             <Data.Functor.Identity.Identity>_R
                             <a>_N ; Data.Functor.Identity.N:Identity[0]
                                         <(a, Language.PureScript.Errors.MultipleErrors)>_R))
                       `cast`
                     (Sym (Data.Functor.Identity.N:Identity[0]
                               <(b -> a,
                                 Language.PureScript.Errors.MultipleErrors)>_R) ; Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                           <Language.PureScript.Errors.MultipleErrors>_N
                                                                                           <Data.Functor.Identity.Identity>_R
                                                                                           <b
                                                                                            -> a>_N))) -}
f212cddb02548263ca48955846478562
  $s$fApplicativeStateT_$s$fApplicativeWriterT_$c<*> ::
    Control.Monad.Trans.Writer.Strict.WriterT
      Language.PureScript.Errors.MultipleErrors
      Data.Functor.Identity.Identity
      (a -> b)
    -> Control.Monad.Trans.Writer.Strict.WriterT
         Language.PureScript.Errors.MultipleErrors
         Data.Functor.Identity.Identity
         a
    -> Control.Monad.Trans.Writer.Strict.WriterT
         Language.PureScript.Errors.MultipleErrors
         Data.Functor.Identity.Identity
         b
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S,1*U(1*C1(U),1*U)><S,1*U(U,1*U)>m,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ a
                   @ b
                   (f :: Control.Monad.Trans.Writer.Strict.WriterT
                           Language.PureScript.Errors.MultipleErrors
                           Data.Functor.Identity.Identity
                           (a -> b))
                   (v :: Control.Monad.Trans.Writer.Strict.WriterT
                           Language.PureScript.Errors.MultipleErrors
                           Data.Functor.Identity.Identity
                           a) ->
                 case f `cast`
                      (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                           <Language.PureScript.Errors.MultipleErrors>_N
                           <Data.Functor.Identity.Identity>_R
                           <a -> b>_N ; Data.Functor.Identity.N:Identity[0]
                                            <(a -> b,
                                              Language.PureScript.Errors.MultipleErrors)>_R) of wild { (,) a1 w1 ->
                 case v `cast`
                      (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                           <Language.PureScript.Errors.MultipleErrors>_N
                           <Data.Functor.Identity.Identity>_R
                           <a>_N ; Data.Functor.Identity.N:Identity[0]
                                       <(a,
                                         Language.PureScript.Errors.MultipleErrors)>_R) of wild1 { (,) b1 w' ->
                 (a1 b1,
                  (GHC.Base.augment
                     @ Language.PureScript.AST.Declarations.ErrorMessage
                     (\ @ b2
                        (c :: Language.PureScript.AST.Declarations.ErrorMessage
                              -> b2 -> b2)[OneShot]
                        (n :: b2)[OneShot] ->
                      GHC.Base.foldr
                        @ Language.PureScript.AST.Declarations.ErrorMessage
                        @ b2
                        c
                        n
                        w1 `cast` (Language.PureScript.Errors.N:MultipleErrors[0]))
                     w' `cast` (Language.PureScript.Errors.N:MultipleErrors[0]))
                    `cast`
                  (Sym (Language.PureScript.Errors.N:MultipleErrors[0])))
                   `cast`
                 (Sym (Data.Functor.Identity.N:Identity[0]
                           <(b, Language.PureScript.Errors.MultipleErrors)>_R)) } })
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.Writer.Strict.WriterT
                    Language.PureScript.Errors.MultipleErrors
                    Data.Functor.Identity.Identity
                    (a -> b)>_R
                 ->_R <Control.Monad.Trans.Writer.Strict.WriterT
                         Language.PureScript.Errors.MultipleErrors
                         Data.Functor.Identity.Identity
                         a>_R
                 ->_R Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                               <Language.PureScript.Errors.MultipleErrors>_N
                               <Data.Functor.Identity.Identity>_R
                               <b>_N)) -}
406f42d42cdd13b31fa7382be4dbdeff
  $s$fApplicativeStateT_$s$fApplicativeWriterT_$cpure ::
    a
    -> Control.Monad.Trans.Writer.Strict.WriterT
         Language.PureScript.Errors.MultipleErrors
         Data.Functor.Identity.Identity
         a
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ a (a1 :: a) ->
                 (a1,
                  (GHC.Types.[] @ Language.PureScript.AST.Declarations.ErrorMessage)
                    `cast`
                  (Sym (Language.PureScript.Errors.N:MultipleErrors[0]))))
                  `cast`
                (forall (a :: <*>_N).
                 <a>_R
                 ->_R Sym (Data.Functor.Identity.N:Identity[0]
                               <(a,
                                 Language.PureScript.Errors.MultipleErrors)>_R) ; Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                           <Language.PureScript.Errors.MultipleErrors>_N
                                                                                           <Data.Functor.Identity.Identity>_R
                                                                                           <a>_N)) -}
647a75cf5b113bfc065c4603d5f62a18
  $s$fApplicativeStateT_$s$fFunctorStateT ::
    GHC.Base.Functor
      (Control.Monad.Trans.State.Strict.StateT
         s
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Errors.MultipleErrors
            (Control.Monad.Trans.Writer.Strict.Writer
               Language.PureScript.Errors.MultipleErrors)))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ s.
                  @ (Control.Monad.Trans.State.Strict.StateT
                       s
                       (Control.Monad.Trans.Except.ExceptT
                          Language.PureScript.Errors.MultipleErrors
                          (Control.Monad.Trans.Writer.Strict.Writer
                             Language.PureScript.Errors.MultipleErrors)))
                  (Control.Monad.Trans.State.Strict.$fFunctorStateT_$cfmap
                     @ (Control.Monad.Trans.Except.ExceptT
                          Language.PureScript.Errors.MultipleErrors
                          (Control.Monad.Trans.Writer.Strict.Writer
                             Language.PureScript.Errors.MultipleErrors))
                     @ s
                     Language.PureScript.Interactive.$s$fApplicativeStateT_v)
                  (\ @ a
                     @ b
                     (x :: a)
                     (eta :: Control.Monad.Trans.State.Strict.StateT
                               s
                               (Control.Monad.Trans.Except.ExceptT
                                  Language.PureScript.Errors.MultipleErrors
                                  (Control.Monad.Trans.Writer.Strict.Writer
                                     Language.PureScript.Errors.MultipleErrors))
                               b)
                     (eta1 :: s) ->
                   case (eta
                           `cast`
                         (Control.Monad.Trans.State.Strict.N:StateT[0]
                              <s>_N
                              <Control.Monad.Trans.Except.ExceptT
                                 Language.PureScript.Errors.MultipleErrors
                                 (Control.Monad.Trans.Writer.Strict.Writer
                                    Language.PureScript.Errors.MultipleErrors)>_R
                              <b>_N)
                           eta1)
                          `cast`
                        (Control.Monad.Trans.Except.N:ExceptT[0]
                             <Language.PureScript.Errors.MultipleErrors>_N
                             <Control.Monad.Trans.Writer.Strict.WriterT
                                Language.PureScript.Errors.MultipleErrors
                                Data.Functor.Identity.Identity>_R
                             <(b, s)>_N ; (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                               <Language.PureScript.Errors.MultipleErrors>_N
                                               <Data.Functor.Identity.Identity>_R
                                               <Data.Either.Either
                                                  Language.PureScript.Errors.MultipleErrors
                                                  (b, s)>_N ; Data.Functor.Identity.N:Identity[0]
                                                                  <(Data.Either.Either
                                                                      Language.PureScript.Errors.MultipleErrors
                                                                      (b, s),
                                                                    Language.PureScript.Errors.MultipleErrors)>_R)) of wild { (,) a1 w1 ->
                   (case a1 of wild1 {
                      Data.Either.Left x1
                      -> Data.Either.Left
                           @ Language.PureScript.Errors.MultipleErrors
                           @ (a, s)
                           x1
                      Data.Either.Right y
                      -> Data.Either.Right
                           @ Language.PureScript.Errors.MultipleErrors
                           @ (a, s)
                           (case y of wild2 { (,) a2 s' -> (x, s') }) },
                    w1)
                     `cast`
                   (Sym (Data.Functor.Identity.N:Identity[0]
                             <(Data.Either.Either
                                 Language.PureScript.Errors.MultipleErrors (a, s),
                               Language.PureScript.Errors.MultipleErrors)>_R) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                          <Language.PureScript.Errors.MultipleErrors>_N
                                                                                          <Data.Functor.Identity.Identity>_R
                                                                                          <Data.Either.Either
                                                                                             Language.PureScript.Errors.MultipleErrors
                                                                                             (a,
                                                                                              s)>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                <Language.PureScript.Errors.MultipleErrors>_N
                                                                                                                <Control.Monad.Trans.Writer.Strict.WriterT
                                                                                                                   Language.PureScript.Errors.MultipleErrors
                                                                                                                   Data.Functor.Identity.Identity>_R
                                                                                                                <(a,
                                                                                                                  s)>_N))) })
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   <a>_R
                   ->_R <Control.Monad.Trans.State.Strict.StateT
                           s
                           (Control.Monad.Trans.Except.ExceptT
                              Language.PureScript.Errors.MultipleErrors
                              (Control.Monad.Trans.Writer.Strict.Writer
                                 Language.PureScript.Errors.MultipleErrors))
                           b>_R
                   ->_R Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                 <s>_N
                                 <Control.Monad.Trans.Except.ExceptT
                                    Language.PureScript.Errors.MultipleErrors
                                    (Control.Monad.Trans.Writer.Strict.Writer
                                       Language.PureScript.Errors.MultipleErrors)>_R
                                 <a>_N)) -}
e77e769e325164e153678c15a9038b13
  $s$fApplicativeStateT_$s$fFunctorWriterT ::
    GHC.Base.Functor
      (Control.Monad.Trans.Writer.Strict.WriterT
         w Data.Functor.Identity.Identity)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ w.
                  @ (Control.Monad.Trans.Writer.Strict.WriterT
                       w Data.Functor.Identity.Identity)
                  (Language.PureScript.Interactive.$s$fApplicativeStateT_$s$fFunctorWriterT_$cfmap
                     @ w)
                  (\ @ a @ b (x :: a) ->
                   Control.Monad.Trans.Writer.Strict.mapWriterT
                     @ Data.Functor.Identity.Identity
                     @ b
                     @ w
                     @ Data.Functor.Identity.Identity
                     @ a
                     @ w
                     (\ (ds :: (b, w)) -> case ds of wild { (,) a1 w1 -> (x, w1) })
                       `cast`
                     (Sym (Data.Functor.Identity.N:Identity[0] <(b, w)>_R)
                      ->_R Sym (Data.Functor.Identity.N:Identity[0] <(a, w)>_R))) -}
4b6430e41c1f2bdb53c53356654bf55e
  $s$fApplicativeStateT_$s$fFunctorWriterT_$cfmap ::
    (a -> b)
    -> Control.Monad.Trans.Writer.Strict.WriterT
         w Data.Functor.Identity.Identity a
    -> Control.Monad.Trans.Writer.Strict.WriterT
         w Data.Functor.Identity.Identity b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><S,1*U(U,U)>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ w @ a @ b (f :: a -> b) ->
                 Control.Monad.Trans.Writer.Strict.mapWriterT
                   @ Data.Functor.Identity.Identity
                   @ a
                   @ w
                   @ Data.Functor.Identity.Identity
                   @ b
                   @ w
                   (\ (ds :: (a, w)) -> case ds of wild { (,) a1 w1 -> (f a1, w1) })
                     `cast`
                   (Sym (Data.Functor.Identity.N:Identity[0] <(a, w)>_R)
                    ->_R Sym (Data.Functor.Identity.N:Identity[0] <(b, w)>_R))) -}
55e6913c904d2d90cd199fb8f126af96
  $s$fApplicativeStateT_$s$fMonadExceptT ::
    GHC.Base.Monad
      (Control.Monad.Trans.Except.ExceptT
         e
         (Control.Monad.Trans.Writer.Strict.WriterT
            Language.PureScript.Errors.MultipleErrors
            Data.Functor.Identity.Identity))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ e.
                  @ (Control.Monad.Trans.Except.ExceptT
                       e
                       (Control.Monad.Trans.Writer.Strict.WriterT
                          Language.PureScript.Errors.MultipleErrors
                          Data.Functor.Identity.Identity))
                  (Control.Monad.Trans.Except.$fApplicativeExceptT
                     @ (Control.Monad.Trans.Writer.Strict.WriterT
                          Language.PureScript.Errors.MultipleErrors
                          Data.Functor.Identity.Identity)
                     @ e
                     (Language.PureScript.Interactive.$s$fApplicativeStateT_$s$fFunctorWriterT
                        @ Language.PureScript.Errors.MultipleErrors)
                     Language.PureScript.Interactive.$s$fApplicativeStateT_$s$fMonadWriterT)
                  (Control.Monad.Trans.Except.$fMonadExceptT_$c>>=
                     @ (Control.Monad.Trans.Writer.Strict.WriterT
                          Language.PureScript.Errors.MultipleErrors
                          Data.Functor.Identity.Identity)
                     @ e
                     Language.PureScript.Interactive.$s$fApplicativeStateT_$s$fMonadWriterT)
                  (Control.Monad.Trans.Except.$fMonadExceptT_$c>>
                     @ (Control.Monad.Trans.Writer.Strict.WriterT
                          Language.PureScript.Errors.MultipleErrors
                          Data.Functor.Identity.Identity)
                     @ e
                     Language.PureScript.Interactive.$s$fApplicativeStateT_$s$fMonadWriterT)
                  (\ @ a (eta :: a) ->
                   (Data.Either.Right @ e @ a eta,
                    (GHC.Types.[] @ Language.PureScript.AST.Declarations.ErrorMessage)
                      `cast`
                    (Sym (Language.PureScript.Errors.N:MultipleErrors[0]))))
                    `cast`
                  (forall (a :: <*>_N).
                   <a>_R
                   ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                 <(Data.Either.Either e a,
                                   Language.PureScript.Errors.MultipleErrors)>_R) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                              <Language.PureScript.Errors.MultipleErrors>_N
                                                                                              <Data.Functor.Identity.Identity>_R
                                                                                              <Data.Either.Either
                                                                                                 e
                                                                                                 a>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                  <e>_N
                                                                                                                  <Control.Monad.Trans.Writer.Strict.WriterT
                                                                                                                     Language.PureScript.Errors.MultipleErrors
                                                                                                                     Data.Functor.Identity.Identity>_R
                                                                                                                  <a>_N)))
                  (\ @ a ->
                   GHC.Err.errorWithoutStackTrace
                     @ 'GHC.Types.LiftedRep
                     @ (Data.Functor.Identity.Identity
                          (Data.Either.Either e a,
                           Language.PureScript.Errors.MultipleErrors)))
                    `cast`
                  (forall (a :: <*>_N).
                   <GHC.Base.String>_R
                   ->_R Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                 <Language.PureScript.Errors.MultipleErrors>_N
                                 <Data.Functor.Identity.Identity>_R
                                 <Data.Either.Either
                                    e a>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                       <e>_N
                                                       <Control.Monad.Trans.Writer.Strict.WriterT
                                                          Language.PureScript.Errors.MultipleErrors
                                                          Data.Functor.Identity.Identity>_R
                                                       <a>_N)) -}
8a114d38a0d3ec9aa812e2f1ade92b00
  $s$fApplicativeStateT_$s$fMonadWriterT ::
    GHC.Base.Monad
      (Control.Monad.Trans.Writer.Strict.WriterT
         Language.PureScript.Errors.MultipleErrors
         Data.Functor.Identity.Identity)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Trans.Writer.Strict.WriterT
                       Language.PureScript.Errors.MultipleErrors
                       Data.Functor.Identity.Identity)
                  Language.PureScript.Interactive.$s$fApplicativeStateT_$s$fApplicativeWriterT
                  Language.PureScript.Interactive.$s$fApplicativeStateT_$s$fMonadWriterT_$c>>=
                  Language.PureScript.Interactive.$s$fApplicativeStateT_$s$fMonadWriterT_$c>>
                  (\ @ a (eta :: a) ->
                   (eta,
                    (GHC.Types.[] @ Language.PureScript.AST.Declarations.ErrorMessage)
                      `cast`
                    (Sym (Language.PureScript.Errors.N:MultipleErrors[0]))))
                    `cast`
                  (forall (a :: <*>_N).
                   <a>_R
                   ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                 <(a,
                                   Language.PureScript.Errors.MultipleErrors)>_R) ; Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                             <Language.PureScript.Errors.MultipleErrors>_N
                                                                                             <Data.Functor.Identity.Identity>_R
                                                                                             <a>_N))
                  Language.PureScript.Interactive.$s$fApplicativeStateT_$s$fMonadWriterT_$cfail -}
71ea7764edd820a8af94418b4d3850d5
  $s$fApplicativeStateT_$s$fMonadWriterT_$c>> ::
    Control.Monad.Trans.Writer.Strict.WriterT
      Language.PureScript.Errors.MultipleErrors
      Data.Functor.Identity.Identity
      a
    -> Control.Monad.Trans.Writer.Strict.WriterT
         Language.PureScript.Errors.MultipleErrors
         Data.Functor.Identity.Identity
         b
    -> Control.Monad.Trans.Writer.Strict.WriterT
         Language.PureScript.Errors.MultipleErrors
         Data.Functor.Identity.Identity
         b
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S,1*U(A,1*U)><S,1*U(U,1*U)>m, Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ a
                   @ b
                   (m1 :: Control.Monad.Trans.Writer.Strict.WriterT
                            Language.PureScript.Errors.MultipleErrors
                            Data.Functor.Identity.Identity
                            a)
                   (k :: Control.Monad.Trans.Writer.Strict.WriterT
                           Language.PureScript.Errors.MultipleErrors
                           Data.Functor.Identity.Identity
                           b) ->
                 case m1
                        `cast`
                      (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                           <Language.PureScript.Errors.MultipleErrors>_N
                           <Data.Functor.Identity.Identity>_R
                           <a>_N ; Data.Functor.Identity.N:Identity[0]
                                       <(a,
                                         Language.PureScript.Errors.MultipleErrors)>_R) of wild { (,) a1 w1 ->
                 case k `cast`
                      (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                           <Language.PureScript.Errors.MultipleErrors>_N
                           <Data.Functor.Identity.Identity>_R
                           <b>_N ; Data.Functor.Identity.N:Identity[0]
                                       <(b,
                                         Language.PureScript.Errors.MultipleErrors)>_R) of wild1 { (,) b1 w' ->
                 (b1,
                  (GHC.Base.augment
                     @ Language.PureScript.AST.Declarations.ErrorMessage
                     (\ @ b2
                        (c :: Language.PureScript.AST.Declarations.ErrorMessage
                              -> b2 -> b2)[OneShot]
                        (n :: b2)[OneShot] ->
                      GHC.Base.foldr
                        @ Language.PureScript.AST.Declarations.ErrorMessage
                        @ b2
                        c
                        n
                        w1 `cast` (Language.PureScript.Errors.N:MultipleErrors[0]))
                     w' `cast` (Language.PureScript.Errors.N:MultipleErrors[0]))
                    `cast`
                  (Sym (Language.PureScript.Errors.N:MultipleErrors[0])))
                   `cast`
                 (Sym (Data.Functor.Identity.N:Identity[0]
                           <(b, Language.PureScript.Errors.MultipleErrors)>_R)) } })
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.Writer.Strict.WriterT
                    Language.PureScript.Errors.MultipleErrors
                    Data.Functor.Identity.Identity
                    a>_R
                 ->_R <Control.Monad.Trans.Writer.Strict.WriterT
                         Language.PureScript.Errors.MultipleErrors
                         Data.Functor.Identity.Identity
                         b>_R
                 ->_R Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                               <Language.PureScript.Errors.MultipleErrors>_N
                               <Data.Functor.Identity.Identity>_R
                               <b>_N)) -}
0aa947fb85e1b590768fd52268517b5d
  $s$fApplicativeStateT_$s$fMonadWriterT_$c>>= ::
    Control.Monad.Trans.Writer.Strict.WriterT
      Language.PureScript.Errors.MultipleErrors
      Data.Functor.Identity.Identity
      a
    -> (a
        -> Control.Monad.Trans.Writer.Strict.WriterT
             Language.PureScript.Errors.MultipleErrors
             Data.Functor.Identity.Identity
             b)
    -> Control.Monad.Trans.Writer.Strict.WriterT
         Language.PureScript.Errors.MultipleErrors
         Data.Functor.Identity.Identity
         b
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S,1*U(U,1*U)><C(S),1*C1(U(U,1*U))>m,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ a
                   @ b
                   (m1 :: Control.Monad.Trans.Writer.Strict.WriterT
                            Language.PureScript.Errors.MultipleErrors
                            Data.Functor.Identity.Identity
                            a)
                   (k :: a
                         -> Control.Monad.Trans.Writer.Strict.WriterT
                              Language.PureScript.Errors.MultipleErrors
                              Data.Functor.Identity.Identity
                              b) ->
                 case m1
                        `cast`
                      (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                           <Language.PureScript.Errors.MultipleErrors>_N
                           <Data.Functor.Identity.Identity>_R
                           <a>_N ; Data.Functor.Identity.N:Identity[0]
                                       <(a,
                                         Language.PureScript.Errors.MultipleErrors)>_R) of wild { (,) a1 w1 ->
                 case (k a1)
                        `cast`
                      (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                           <Language.PureScript.Errors.MultipleErrors>_N
                           <Data.Functor.Identity.Identity>_R
                           <b>_N ; Data.Functor.Identity.N:Identity[0]
                                       <(b,
                                         Language.PureScript.Errors.MultipleErrors)>_R) of wild1 { (,) b1 w' ->
                 (b1,
                  (GHC.Base.augment
                     @ Language.PureScript.AST.Declarations.ErrorMessage
                     (\ @ b2
                        (c :: Language.PureScript.AST.Declarations.ErrorMessage
                              -> b2 -> b2)[OneShot]
                        (n :: b2)[OneShot] ->
                      GHC.Base.foldr
                        @ Language.PureScript.AST.Declarations.ErrorMessage
                        @ b2
                        c
                        n
                        w1 `cast` (Language.PureScript.Errors.N:MultipleErrors[0]))
                     w' `cast` (Language.PureScript.Errors.N:MultipleErrors[0]))
                    `cast`
                  (Sym (Language.PureScript.Errors.N:MultipleErrors[0])))
                   `cast`
                 (Sym (Data.Functor.Identity.N:Identity[0]
                           <(b, Language.PureScript.Errors.MultipleErrors)>_R)) } })
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.Writer.Strict.WriterT
                    Language.PureScript.Errors.MultipleErrors
                    Data.Functor.Identity.Identity
                    a>_R
                 ->_R <a
                       -> Control.Monad.Trans.Writer.Strict.WriterT
                            Language.PureScript.Errors.MultipleErrors
                            Data.Functor.Identity.Identity
                            b>_R
                 ->_R Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                               <Language.PureScript.Errors.MultipleErrors>_N
                               <Data.Functor.Identity.Identity>_R
                               <b>_N)) -}
bf9fdd40614e587fb435e4d5df4168b3
  $s$fApplicativeStateT_$s$fMonadWriterT_$cfail ::
    GHC.Base.String
    -> Control.Monad.Trans.Writer.Strict.WriterT
         Language.PureScript.Errors.MultipleErrors
         Data.Functor.Identity.Identity
         a
  {- Arity: 1, Strictness: <B,U>x, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, True)
                (\ @ a (msg :: GHC.Base.String) ->
                 GHC.Err.errorWithoutStackTrace
                   @ 'GHC.Types.LiftedRep
                   @ (Data.Functor.Identity.Identity
                        (a, Language.PureScript.Errors.MultipleErrors))
                   msg)
                  `cast`
                (forall (a :: <*>_N).
                 <GHC.Base.String>_R
                 ->_R Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                               <Language.PureScript.Errors.MultipleErrors>_N
                               <Data.Functor.Identity.Identity>_R
                               <a>_N)) -}
580d5a9a1da4b3b6e74d972692302547
  $s$fApplicativeStateT_v ::
    GHC.Base.Functor
      (Control.Monad.Trans.Except.ExceptT
         Language.PureScript.Errors.MultipleErrors
         (Control.Monad.Trans.Writer.Strict.Writer
            Language.PureScript.Errors.MultipleErrors))
  {- Unfolding: (Control.Monad.Trans.Except.$fFunctorExceptT
                   @ (Control.Monad.Trans.Writer.Strict.WriterT
                        Language.PureScript.Errors.MultipleErrors
                        Data.Functor.Identity.Identity)
                   @ Language.PureScript.Errors.MultipleErrors
                   (Language.PureScript.Interactive.$s$fApplicativeStateT_$s$fFunctorWriterT
                      @ Language.PureScript.Errors.MultipleErrors)) -}
c9c00b609f4bdc393e1ac336020ae87f
  $s$fApplicativeWriterT_$c<* ::
    Control.Monad.Trans.Writer.Strict.WriterT
      Language.PureScript.Errors.MultipleErrors
      Data.Functor.Identity.Identity
      a
    -> Control.Monad.Trans.Writer.Strict.WriterT
         Language.PureScript.Errors.MultipleErrors
         Data.Functor.Identity.Identity
         b
    -> Control.Monad.Trans.Writer.Strict.WriterT
         Language.PureScript.Errors.MultipleErrors
         Data.Functor.Identity.Identity
         a
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*U(U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a
                   @ b
                   (eta :: Control.Monad.Trans.Writer.Strict.WriterT
                             Language.PureScript.Errors.MultipleErrors
                             Data.Functor.Identity.Identity
                             a) ->
                 Language.PureScript.Interactive.$s$fApplicativeStateT_$s$fApplicativeWriterT_$c<*>
                   @ b
                   @ a
                   (Control.Monad.Trans.Writer.Strict.$fApplicativeWriterT1
                      @ a
                      @ b
                      @ Language.PureScript.Errors.MultipleErrors
                      eta
                        `cast`
                      (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                           <Language.PureScript.Errors.MultipleErrors>_N
                           <Data.Functor.Identity.Identity>_R
                           <a>_N ; Data.Functor.Identity.N:Identity[0]
                                       <(a, Language.PureScript.Errors.MultipleErrors)>_R))
                     `cast`
                   (Sym (Data.Functor.Identity.N:Identity[0]
                             <(b -> a,
                               Language.PureScript.Errors.MultipleErrors)>_R) ; Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                         <Language.PureScript.Errors.MultipleErrors>_N
                                                                                         <Data.Functor.Identity.Identity>_R
                                                                                         <b
                                                                                          -> a>_N))) -}
1db4b1946fbae275a1b54d20ee3d061f
  $s$fMonadErroreStateT ::
    Control.Monad.Error.Class.MonadError
      Language.PureScript.Errors.MultipleErrors
      (Control.Monad.Trans.State.Strict.StateT
         s
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Errors.MultipleErrors
            (Control.Monad.Trans.Writer.Strict.Writer
               Language.PureScript.Errors.MultipleErrors)))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ s.
                  @ Language.PureScript.Errors.MultipleErrors
                  @ (Control.Monad.Trans.State.Strict.StateT
                       s
                       (Control.Monad.Trans.Except.ExceptT
                          Language.PureScript.Errors.MultipleErrors
                          (Control.Monad.Trans.Writer.Strict.Writer
                             Language.PureScript.Errors.MultipleErrors)))
                  (Language.PureScript.Interactive.$s$fMonadErroreStateT_$s$fMonadStateT
                     @ s)
                  (\ @ a
                     (eta :: Language.PureScript.Errors.MultipleErrors)
                     (s1 :: s) ->
                   (Data.Either.Left
                      @ Language.PureScript.Errors.MultipleErrors
                      @ (a, s)
                      eta,
                    (GHC.Base.build
                       @ Language.PureScript.AST.Declarations.ErrorMessage
                       (\ @ b
                          (c :: Language.PureScript.AST.Declarations.ErrorMessage
                                -> b -> b)[OneShot]
                          (n :: b)[OneShot] ->
                        n))
                      `cast`
                    (Sym (Language.PureScript.Errors.N:MultipleErrors[0]))))
                    `cast`
                  (forall (a :: <*>_N).
                   <Language.PureScript.Errors.MultipleErrors>_R
                   ->_R (<s>_R
                         ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                       <(Data.Either.Either
                                           Language.PureScript.Errors.MultipleErrors (a, s),
                                         Language.PureScript.Errors.MultipleErrors)>_R) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                                    <Language.PureScript.Errors.MultipleErrors>_N
                                                                                                    <Data.Functor.Identity.Identity>_R
                                                                                                    <Data.Either.Either
                                                                                                       Language.PureScript.Errors.MultipleErrors
                                                                                                       (a,
                                                                                                        s)>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                          <Language.PureScript.Errors.MultipleErrors>_N
                                                                                                                          <Control.Monad.Trans.Writer.Strict.WriterT
                                                                                                                             Language.PureScript.Errors.MultipleErrors
                                                                                                                             Data.Functor.Identity.Identity>_R
                                                                                                                          <(a,
                                                                                                                            s)>_N))) ; Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                                                                                                <s>_N
                                                                                                                                                <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                   Language.PureScript.Errors.MultipleErrors
                                                                                                                                                   (Control.Monad.Trans.Writer.Strict.Writer
                                                                                                                                                      Language.PureScript.Errors.MultipleErrors)>_R
                                                                                                                                                <a>_N))
                  (\ @ a
                     (eta :: Control.Monad.Trans.State.Strict.StateT
                               s
                               (Control.Monad.Trans.Except.ExceptT
                                  Language.PureScript.Errors.MultipleErrors
                                  (Control.Monad.Trans.Writer.Strict.Writer
                                     Language.PureScript.Errors.MultipleErrors))
                               a)
                     (eta1 :: Language.PureScript.Errors.MultipleErrors
                              -> Control.Monad.Trans.State.Strict.StateT
                                   s
                                   (Control.Monad.Trans.Except.ExceptT
                                      Language.PureScript.Errors.MultipleErrors
                                      (Control.Monad.Trans.Writer.Strict.Writer
                                         Language.PureScript.Errors.MultipleErrors))
                                   a)
                     (eta2 :: s) ->
                   case (eta
                           `cast`
                         (Control.Monad.Trans.State.Strict.N:StateT[0]
                              <s>_N
                              <Control.Monad.Trans.Except.ExceptT
                                 Language.PureScript.Errors.MultipleErrors
                                 (Control.Monad.Trans.Writer.Strict.Writer
                                    Language.PureScript.Errors.MultipleErrors)>_R
                              <a>_N)
                           eta2)
                          `cast`
                        (Control.Monad.Trans.Except.N:ExceptT[0]
                             <Language.PureScript.Errors.MultipleErrors>_N
                             <Control.Monad.Trans.Writer.Strict.WriterT
                                Language.PureScript.Errors.MultipleErrors
                                Data.Functor.Identity.Identity>_R
                             <(a, s)>_N ; (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                               <Language.PureScript.Errors.MultipleErrors>_N
                                               <Data.Functor.Identity.Identity>_R
                                               <Data.Either.Either
                                                  Language.PureScript.Errors.MultipleErrors
                                                  (a, s)>_N ; Data.Functor.Identity.N:Identity[0]
                                                                  <(Data.Either.Either
                                                                      Language.PureScript.Errors.MultipleErrors
                                                                      (a, s),
                                                                    Language.PureScript.Errors.MultipleErrors)>_R)) of wild { (,) a1 w1 ->
                   case a1 of wild1 {
                     Data.Either.Left l
                     -> case ((eta1 l)
                                `cast`
                              (Control.Monad.Trans.State.Strict.N:StateT[0]
                                   <s>_N
                                   <Control.Monad.Trans.Except.ExceptT
                                      Language.PureScript.Errors.MultipleErrors
                                      (Control.Monad.Trans.Writer.Strict.Writer
                                         Language.PureScript.Errors.MultipleErrors)>_R
                                   <a>_N)
                                eta2)
                               `cast`
                             (Control.Monad.Trans.Except.N:ExceptT[0]
                                  <Language.PureScript.Errors.MultipleErrors>_N
                                  <Control.Monad.Trans.Writer.Strict.WriterT
                                     Language.PureScript.Errors.MultipleErrors
                                     Data.Functor.Identity.Identity>_R
                                  <(a, s)>_N ; (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                    <Language.PureScript.Errors.MultipleErrors>_N
                                                    <Data.Functor.Identity.Identity>_R
                                                    <Data.Either.Either
                                                       Language.PureScript.Errors.MultipleErrors
                                                       (a,
                                                        s)>_N ; Data.Functor.Identity.N:Identity[0]
                                                                    <(Data.Either.Either
                                                                        Language.PureScript.Errors.MultipleErrors
                                                                        (a, s),
                                                                      Language.PureScript.Errors.MultipleErrors)>_R)) of wild2 { (,) b1 w' ->
                        (b1,
                         (GHC.Base.augment
                            @ Language.PureScript.AST.Declarations.ErrorMessage
                            (\ @ b
                               (c :: Language.PureScript.AST.Declarations.ErrorMessage
                                     -> b -> b)[OneShot]
                               (n :: b)[OneShot] ->
                             GHC.Base.foldr
                               @ Language.PureScript.AST.Declarations.ErrorMessage
                               @ b
                               c
                               n
                               w1 `cast` (Language.PureScript.Errors.N:MultipleErrors[0]))
                            w' `cast` (Language.PureScript.Errors.N:MultipleErrors[0]))
                           `cast`
                         (Sym (Language.PureScript.Errors.N:MultipleErrors[0])))
                          `cast`
                        (Sym (Data.Functor.Identity.N:Identity[0]
                                  <(Data.Either.Either
                                      Language.PureScript.Errors.MultipleErrors (a, s),
                                    Language.PureScript.Errors.MultipleErrors)>_R) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                               <Language.PureScript.Errors.MultipleErrors>_N
                                                                                               <Data.Functor.Identity.Identity>_R
                                                                                               <Data.Either.Either
                                                                                                  Language.PureScript.Errors.MultipleErrors
                                                                                                  (a,
                                                                                                   s)>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                     <Language.PureScript.Errors.MultipleErrors>_N
                                                                                                                     <Control.Monad.Trans.Writer.Strict.WriterT
                                                                                                                        Language.PureScript.Errors.MultipleErrors
                                                                                                                        Data.Functor.Identity.Identity>_R
                                                                                                                     <(a,
                                                                                                                       s)>_N))) }
                     Data.Either.Right r
                     -> (Data.Either.Right
                           @ Language.PureScript.Errors.MultipleErrors
                           @ (a, s)
                           r,
                         (GHC.Base.build
                            @ Language.PureScript.AST.Declarations.ErrorMessage
                            (\ @ b
                               (c :: Language.PureScript.AST.Declarations.ErrorMessage
                                     -> b -> b)[OneShot]
                               (n :: b)[OneShot] ->
                             GHC.Base.foldr
                               @ Language.PureScript.AST.Declarations.ErrorMessage
                               @ b
                               c
                               n
                               w1 `cast` (Language.PureScript.Errors.N:MultipleErrors[0])))
                           `cast`
                         (Sym (Language.PureScript.Errors.N:MultipleErrors[0])))
                          `cast`
                        (Sym (Data.Functor.Identity.N:Identity[0]
                                  <(Data.Either.Either
                                      Language.PureScript.Errors.MultipleErrors (a, s),
                                    Language.PureScript.Errors.MultipleErrors)>_R) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                               <Language.PureScript.Errors.MultipleErrors>_N
                                                                                               <Data.Functor.Identity.Identity>_R
                                                                                               <Data.Either.Either
                                                                                                  Language.PureScript.Errors.MultipleErrors
                                                                                                  (a,
                                                                                                   s)>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                     <Language.PureScript.Errors.MultipleErrors>_N
                                                                                                                     <Control.Monad.Trans.Writer.Strict.WriterT
                                                                                                                        Language.PureScript.Errors.MultipleErrors
                                                                                                                        Data.Functor.Identity.Identity>_R
                                                                                                                     <(a,
                                                                                                                       s)>_N))) } })
                    `cast`
                  (forall (a :: <*>_N).
                   <Control.Monad.Trans.State.Strict.StateT
                      s
                      (Control.Monad.Trans.Except.ExceptT
                         Language.PureScript.Errors.MultipleErrors
                         (Control.Monad.Trans.Writer.Strict.Writer
                            Language.PureScript.Errors.MultipleErrors))
                      a>_R
                   ->_R <Language.PureScript.Errors.MultipleErrors
                         -> Control.Monad.Trans.State.Strict.StateT
                              s
                              (Control.Monad.Trans.Except.ExceptT
                                 Language.PureScript.Errors.MultipleErrors
                                 (Control.Monad.Trans.Writer.Strict.Writer
                                    Language.PureScript.Errors.MultipleErrors))
                              a>_R
                   ->_R Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                 <s>_N
                                 <Control.Monad.Trans.Except.ExceptT
                                    Language.PureScript.Errors.MultipleErrors
                                    (Control.Monad.Trans.Writer.Strict.Writer
                                       Language.PureScript.Errors.MultipleErrors)>_R
                                 <a>_N)) -}
5d88ed73b646ed49ae954d693f158bd7
  $s$fMonadErroreStateT1 ::
    Control.Monad.Trans.State.Strict.StateT
      s
      (Control.Monad.Trans.Except.ExceptT
         Language.PureScript.Errors.MultipleErrors
         (Control.Monad.Trans.Writer.Strict.Writer
            Language.PureScript.Errors.MultipleErrors))
      a
    -> (Language.PureScript.Errors.MultipleErrors
        -> Control.Monad.Trans.State.Strict.StateT
             s
             (Control.Monad.Trans.Except.ExceptT
                Language.PureScript.Errors.MultipleErrors
                (Control.Monad.Trans.Writer.Strict.Writer
                   Language.PureScript.Errors.MultipleErrors))
             a)
    -> s
    -> Control.Monad.Trans.Except.ExceptT
         Language.PureScript.Errors.MultipleErrors
         (Control.Monad.Trans.Writer.Strict.Writer
            Language.PureScript.Errors.MultipleErrors)
         (a, s)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S(SL)),1*C1(U(U,U))><L,1*C1(C1(U(U,1*U)))><L,U>m,
     Unfolding: InlineRule (3, True, False)
                (\ @ s
                   @ a
                   (eta :: Control.Monad.Trans.State.Strict.StateT
                             s
                             (Control.Monad.Trans.Except.ExceptT
                                Language.PureScript.Errors.MultipleErrors
                                (Control.Monad.Trans.Writer.Strict.Writer
                                   Language.PureScript.Errors.MultipleErrors))
                             a)
                   (eta1 :: Language.PureScript.Errors.MultipleErrors
                            -> Control.Monad.Trans.State.Strict.StateT
                                 s
                                 (Control.Monad.Trans.Except.ExceptT
                                    Language.PureScript.Errors.MultipleErrors
                                    (Control.Monad.Trans.Writer.Strict.Writer
                                       Language.PureScript.Errors.MultipleErrors))
                                 a)
                   (eta2 :: s) ->
                 case (eta
                         `cast`
                       (Control.Monad.Trans.State.Strict.N:StateT[0]
                            <s>_N
                            <Control.Monad.Trans.Except.ExceptT
                               Language.PureScript.Errors.MultipleErrors
                               (Control.Monad.Trans.Writer.Strict.Writer
                                  Language.PureScript.Errors.MultipleErrors)>_R
                            <a>_N)
                         eta2)
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <Language.PureScript.Errors.MultipleErrors>_N
                           <Control.Monad.Trans.Writer.Strict.WriterT
                              Language.PureScript.Errors.MultipleErrors
                              Data.Functor.Identity.Identity>_R
                           <(a, s)>_N ; (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                             <Language.PureScript.Errors.MultipleErrors>_N
                                             <Data.Functor.Identity.Identity>_R
                                             <Data.Either.Either
                                                Language.PureScript.Errors.MultipleErrors
                                                (a, s)>_N ; Data.Functor.Identity.N:Identity[0]
                                                                <(Data.Either.Either
                                                                    Language.PureScript.Errors.MultipleErrors
                                                                    (a, s),
                                                                  Language.PureScript.Errors.MultipleErrors)>_R)) of wild { (,) a1 w1 ->
                 case a1 of wild1 {
                   Data.Either.Left l
                   -> case ((eta1 l)
                              `cast`
                            (Control.Monad.Trans.State.Strict.N:StateT[0]
                                 <s>_N
                                 <Control.Monad.Trans.Except.ExceptT
                                    Language.PureScript.Errors.MultipleErrors
                                    (Control.Monad.Trans.Writer.Strict.Writer
                                       Language.PureScript.Errors.MultipleErrors)>_R
                                 <a>_N)
                              eta2)
                             `cast`
                           (Control.Monad.Trans.Except.N:ExceptT[0]
                                <Language.PureScript.Errors.MultipleErrors>_N
                                <Control.Monad.Trans.Writer.Strict.WriterT
                                   Language.PureScript.Errors.MultipleErrors
                                   Data.Functor.Identity.Identity>_R
                                <(a, s)>_N ; (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                  <Language.PureScript.Errors.MultipleErrors>_N
                                                  <Data.Functor.Identity.Identity>_R
                                                  <Data.Either.Either
                                                     Language.PureScript.Errors.MultipleErrors
                                                     (a, s)>_N ; Data.Functor.Identity.N:Identity[0]
                                                                     <(Data.Either.Either
                                                                         Language.PureScript.Errors.MultipleErrors
                                                                         (a, s),
                                                                       Language.PureScript.Errors.MultipleErrors)>_R)) of wild2 { (,) b1 w' ->
                      (b1,
                       (GHC.Base.augment
                          @ Language.PureScript.AST.Declarations.ErrorMessage
                          (\ @ b
                             (c :: Language.PureScript.AST.Declarations.ErrorMessage
                                   -> b -> b)[OneShot]
                             (n :: b)[OneShot] ->
                           GHC.Base.foldr
                             @ Language.PureScript.AST.Declarations.ErrorMessage
                             @ b
                             c
                             n
                             w1 `cast` (Language.PureScript.Errors.N:MultipleErrors[0]))
                          w' `cast` (Language.PureScript.Errors.N:MultipleErrors[0]))
                         `cast`
                       (Sym (Language.PureScript.Errors.N:MultipleErrors[0])))
                        `cast`
                      (Sym (Data.Functor.Identity.N:Identity[0]
                                <(Data.Either.Either
                                    Language.PureScript.Errors.MultipleErrors (a, s),
                                  Language.PureScript.Errors.MultipleErrors)>_R) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                             <Language.PureScript.Errors.MultipleErrors>_N
                                                                                             <Data.Functor.Identity.Identity>_R
                                                                                             <Data.Either.Either
                                                                                                Language.PureScript.Errors.MultipleErrors
                                                                                                (a,
                                                                                                 s)>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                   <Language.PureScript.Errors.MultipleErrors>_N
                                                                                                                   <Control.Monad.Trans.Writer.Strict.WriterT
                                                                                                                      Language.PureScript.Errors.MultipleErrors
                                                                                                                      Data.Functor.Identity.Identity>_R
                                                                                                                   <(a,
                                                                                                                     s)>_N))) }
                   Data.Either.Right r
                   -> (Data.Either.Right
                         @ Language.PureScript.Errors.MultipleErrors
                         @ (a, s)
                         r,
                       (GHC.Base.build
                          @ Language.PureScript.AST.Declarations.ErrorMessage
                          (\ @ b
                             (c :: Language.PureScript.AST.Declarations.ErrorMessage
                                   -> b -> b)[OneShot]
                             (n :: b)[OneShot] ->
                           GHC.Base.foldr
                             @ Language.PureScript.AST.Declarations.ErrorMessage
                             @ b
                             c
                             n
                             w1 `cast` (Language.PureScript.Errors.N:MultipleErrors[0])))
                         `cast`
                       (Sym (Language.PureScript.Errors.N:MultipleErrors[0])))
                        `cast`
                      (Sym (Data.Functor.Identity.N:Identity[0]
                                <(Data.Either.Either
                                    Language.PureScript.Errors.MultipleErrors (a, s),
                                  Language.PureScript.Errors.MultipleErrors)>_R) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                             <Language.PureScript.Errors.MultipleErrors>_N
                                                                                             <Data.Functor.Identity.Identity>_R
                                                                                             <Data.Either.Either
                                                                                                Language.PureScript.Errors.MultipleErrors
                                                                                                (a,
                                                                                                 s)>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                   <Language.PureScript.Errors.MultipleErrors>_N
                                                                                                                   <Control.Monad.Trans.Writer.Strict.WriterT
                                                                                                                      Language.PureScript.Errors.MultipleErrors
                                                                                                                      Data.Functor.Identity.Identity>_R
                                                                                                                   <(a,
                                                                                                                     s)>_N))) } }) -}
04138abed1c3121c2172bd132cfbd6f8
  $s$fMonadErroreStateT_$s$fMonadStateT ::
    GHC.Base.Monad
      (Control.Monad.Trans.State.Strict.StateT
         s
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Errors.MultipleErrors
            (Control.Monad.Trans.Writer.Strict.Writer
               Language.PureScript.Errors.MultipleErrors)))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ s.
                  @ (Control.Monad.Trans.State.Strict.StateT
                       s
                       (Control.Monad.Trans.Except.ExceptT
                          Language.PureScript.Errors.MultipleErrors
                          (Control.Monad.Trans.Writer.Strict.Writer
                             Language.PureScript.Errors.MultipleErrors)))
                  (Language.PureScript.Interactive.$s$fApplicativeStateT @ s)
                  (Language.PureScript.Interactive.$s$fMonadErroreStateT_$s$fMonadStateT_$c>>=
                     @ s)
                  (Language.PureScript.Interactive.$s$fMonadErroreStateT_$s$fMonadStateT_$c>>
                     @ s)
                  (\ @ a (eta :: a) (eta1 :: s) ->
                   (Data.Either.Right
                      @ Language.PureScript.Errors.MultipleErrors
                      @ (a, s)
                      (eta, eta1),
                    (GHC.Types.[] @ Language.PureScript.AST.Declarations.ErrorMessage)
                      `cast`
                    (Sym (Language.PureScript.Errors.N:MultipleErrors[0]))))
                    `cast`
                  (forall (a :: <*>_N).
                   <a>_R
                   ->_R (<s>_R
                         ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                       <(Data.Either.Either
                                           Language.PureScript.Errors.MultipleErrors (a, s),
                                         Language.PureScript.Errors.MultipleErrors)>_R) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                                    <Language.PureScript.Errors.MultipleErrors>_N
                                                                                                    <Data.Functor.Identity.Identity>_R
                                                                                                    <Data.Either.Either
                                                                                                       Language.PureScript.Errors.MultipleErrors
                                                                                                       (a,
                                                                                                        s)>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                          <Language.PureScript.Errors.MultipleErrors>_N
                                                                                                                          <Control.Monad.Trans.Writer.Strict.WriterT
                                                                                                                             Language.PureScript.Errors.MultipleErrors
                                                                                                                             Data.Functor.Identity.Identity>_R
                                                                                                                          <(a,
                                                                                                                            s)>_N))) ; Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                                                                                                <s>_N
                                                                                                                                                <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                   Language.PureScript.Errors.MultipleErrors
                                                                                                                                                   (Control.Monad.Trans.Writer.Strict.Writer
                                                                                                                                                      Language.PureScript.Errors.MultipleErrors)>_R
                                                                                                                                                <a>_N))
                  (Language.PureScript.Interactive.$s$fMonadErroreStateT_$s$fMonadStateT_$cfail
                     @ s) -}
ed52b18030c32ef11826030986adb053
  $s$fMonadErroreStateT_$s$fMonadStateT_$c>> ::
    Control.Monad.Trans.State.Strict.StateT
      s
      (Control.Monad.Trans.Except.ExceptT
         Language.PureScript.Errors.MultipleErrors
         (Control.Monad.Trans.Writer.Strict.Writer
            Language.PureScript.Errors.MultipleErrors))
      a
    -> Control.Monad.Trans.State.Strict.StateT
         s
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Errors.MultipleErrors
            (Control.Monad.Trans.Writer.Strict.Writer
               Language.PureScript.Errors.MultipleErrors))
         b
    -> Control.Monad.Trans.State.Strict.StateT
         s
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Errors.MultipleErrors
            (Control.Monad.Trans.Writer.Strict.Writer
               Language.PureScript.Errors.MultipleErrors))
         b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S(SL)),1*C1(U(1*U,U))><L,1*C1(U(U,1*U))><L,U>m,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ a
                   @ b
                   (m1 :: Control.Monad.Trans.State.Strict.StateT
                            s
                            (Control.Monad.Trans.Except.ExceptT
                               Language.PureScript.Errors.MultipleErrors
                               (Control.Monad.Trans.Writer.Strict.Writer
                                  Language.PureScript.Errors.MultipleErrors))
                            a)
                   (k :: Control.Monad.Trans.State.Strict.StateT
                           s
                           (Control.Monad.Trans.Except.ExceptT
                              Language.PureScript.Errors.MultipleErrors
                              (Control.Monad.Trans.Writer.Strict.Writer
                                 Language.PureScript.Errors.MultipleErrors))
                           b)
                   (s1 :: s) ->
                 case (m1
                         `cast`
                       (Control.Monad.Trans.State.Strict.N:StateT[0]
                            <s>_N
                            <Control.Monad.Trans.Except.ExceptT
                               Language.PureScript.Errors.MultipleErrors
                               (Control.Monad.Trans.Writer.Strict.Writer
                                  Language.PureScript.Errors.MultipleErrors)>_R
                            <a>_N)
                         s1)
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <Language.PureScript.Errors.MultipleErrors>_N
                           <Control.Monad.Trans.Writer.Strict.WriterT
                              Language.PureScript.Errors.MultipleErrors
                              Data.Functor.Identity.Identity>_R
                           <(a, s)>_N ; (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                             <Language.PureScript.Errors.MultipleErrors>_N
                                             <Data.Functor.Identity.Identity>_R
                                             <Data.Either.Either
                                                Language.PureScript.Errors.MultipleErrors
                                                (a, s)>_N ; Data.Functor.Identity.N:Identity[0]
                                                                <(Data.Either.Either
                                                                    Language.PureScript.Errors.MultipleErrors
                                                                    (a, s),
                                                                  Language.PureScript.Errors.MultipleErrors)>_R)) of wild { (,) a1 w1 ->
                 case a1 of wild1 {
                   Data.Either.Left e1
                   -> (Data.Either.Left
                         @ Language.PureScript.Errors.MultipleErrors
                         @ (b, s)
                         e1,
                       (GHC.Base.build
                          @ Language.PureScript.AST.Declarations.ErrorMessage
                          (\ @ b1
                             (c :: Language.PureScript.AST.Declarations.ErrorMessage
                                   -> b1 -> b1)[OneShot]
                             (n :: b1)[OneShot] ->
                           GHC.Base.foldr
                             @ Language.PureScript.AST.Declarations.ErrorMessage
                             @ b1
                             c
                             n
                             w1 `cast` (Language.PureScript.Errors.N:MultipleErrors[0])))
                         `cast`
                       (Sym (Language.PureScript.Errors.N:MultipleErrors[0])))
                        `cast`
                      (Sym (Data.Functor.Identity.N:Identity[0]
                                <(Data.Either.Either
                                    Language.PureScript.Errors.MultipleErrors (b, s),
                                  Language.PureScript.Errors.MultipleErrors)>_R) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                             <Language.PureScript.Errors.MultipleErrors>_N
                                                                                             <Data.Functor.Identity.Identity>_R
                                                                                             <Data.Either.Either
                                                                                                Language.PureScript.Errors.MultipleErrors
                                                                                                (b,
                                                                                                 s)>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                   <Language.PureScript.Errors.MultipleErrors>_N
                                                                                                                   <Control.Monad.Trans.Writer.Strict.WriterT
                                                                                                                      Language.PureScript.Errors.MultipleErrors
                                                                                                                      Data.Functor.Identity.Identity>_R
                                                                                                                   <(b,
                                                                                                                     s)>_N)))
                   Data.Either.Right x
                   -> case x of wild2 { (,) a2 s' ->
                      case (k `cast`
                            (Control.Monad.Trans.State.Strict.N:StateT[0]
                                 <s>_N
                                 <Control.Monad.Trans.Except.ExceptT
                                    Language.PureScript.Errors.MultipleErrors
                                    (Control.Monad.Trans.Writer.Strict.Writer
                                       Language.PureScript.Errors.MultipleErrors)>_R
                                 <b>_N)
                              s')
                             `cast`
                           (Control.Monad.Trans.Except.N:ExceptT[0]
                                <Language.PureScript.Errors.MultipleErrors>_N
                                <Control.Monad.Trans.Writer.Strict.WriterT
                                   Language.PureScript.Errors.MultipleErrors
                                   Data.Functor.Identity.Identity>_R
                                <(b, s)>_N ; (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                  <Language.PureScript.Errors.MultipleErrors>_N
                                                  <Data.Functor.Identity.Identity>_R
                                                  <Data.Either.Either
                                                     Language.PureScript.Errors.MultipleErrors
                                                     (b, s)>_N ; Data.Functor.Identity.N:Identity[0]
                                                                     <(Data.Either.Either
                                                                         Language.PureScript.Errors.MultipleErrors
                                                                         (b, s),
                                                                       Language.PureScript.Errors.MultipleErrors)>_R)) of wild3 { (,) b1 w' ->
                      (b1,
                       (GHC.Base.augment
                          @ Language.PureScript.AST.Declarations.ErrorMessage
                          (\ @ b2
                             (c :: Language.PureScript.AST.Declarations.ErrorMessage
                                   -> b2 -> b2)[OneShot]
                             (n :: b2)[OneShot] ->
                           GHC.Base.foldr
                             @ Language.PureScript.AST.Declarations.ErrorMessage
                             @ b2
                             c
                             n
                             w1 `cast` (Language.PureScript.Errors.N:MultipleErrors[0]))
                          w' `cast` (Language.PureScript.Errors.N:MultipleErrors[0]))
                         `cast`
                       (Sym (Language.PureScript.Errors.N:MultipleErrors[0])))
                        `cast`
                      (Sym (Data.Functor.Identity.N:Identity[0]
                                <(Data.Either.Either
                                    Language.PureScript.Errors.MultipleErrors (b, s),
                                  Language.PureScript.Errors.MultipleErrors)>_R) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                             <Language.PureScript.Errors.MultipleErrors>_N
                                                                                             <Data.Functor.Identity.Identity>_R
                                                                                             <Data.Either.Either
                                                                                                Language.PureScript.Errors.MultipleErrors
                                                                                                (b,
                                                                                                 s)>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                   <Language.PureScript.Errors.MultipleErrors>_N
                                                                                                                   <Control.Monad.Trans.Writer.Strict.WriterT
                                                                                                                      Language.PureScript.Errors.MultipleErrors
                                                                                                                      Data.Functor.Identity.Identity>_R
                                                                                                                   <(b,
                                                                                                                     s)>_N))) } } } })
                  `cast`
                (forall (s :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.State.Strict.StateT
                    s
                    (Control.Monad.Trans.Except.ExceptT
                       Language.PureScript.Errors.MultipleErrors
                       (Control.Monad.Trans.Writer.Strict.Writer
                          Language.PureScript.Errors.MultipleErrors))
                    a>_R
                 ->_R <Control.Monad.Trans.State.Strict.StateT
                         s
                         (Control.Monad.Trans.Except.ExceptT
                            Language.PureScript.Errors.MultipleErrors
                            (Control.Monad.Trans.Writer.Strict.Writer
                               Language.PureScript.Errors.MultipleErrors))
                         b>_R
                 ->_R Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                               <s>_N
                               <Control.Monad.Trans.Except.ExceptT
                                  Language.PureScript.Errors.MultipleErrors
                                  (Control.Monad.Trans.Writer.Strict.Writer
                                     Language.PureScript.Errors.MultipleErrors)>_R
                               <b>_N)) -}
33057aa65a0c008ecc4131d5e6a51391
  $s$fMonadErroreStateT_$s$fMonadStateT_$c>>= ::
    Control.Monad.Trans.State.Strict.StateT
      s
      (Control.Monad.Trans.Except.ExceptT
         Language.PureScript.Errors.MultipleErrors
         (Control.Monad.Trans.Writer.Strict.Writer
            Language.PureScript.Errors.MultipleErrors))
      a
    -> (a
        -> Control.Monad.Trans.State.Strict.StateT
             s
             (Control.Monad.Trans.Except.ExceptT
                Language.PureScript.Errors.MultipleErrors
                (Control.Monad.Trans.Writer.Strict.Writer
                   Language.PureScript.Errors.MultipleErrors))
             b)
    -> Control.Monad.Trans.State.Strict.StateT
         s
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Errors.MultipleErrors
            (Control.Monad.Trans.Writer.Strict.Writer
               Language.PureScript.Errors.MultipleErrors))
         b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S(SL)),1*C1(U(1*U,U))><L,1*C1(C1(U(U,1*U)))><L,U>m,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ a
                   @ b
                   (m1 :: Control.Monad.Trans.State.Strict.StateT
                            s
                            (Control.Monad.Trans.Except.ExceptT
                               Language.PureScript.Errors.MultipleErrors
                               (Control.Monad.Trans.Writer.Strict.Writer
                                  Language.PureScript.Errors.MultipleErrors))
                            a)
                   (k :: a
                         -> Control.Monad.Trans.State.Strict.StateT
                              s
                              (Control.Monad.Trans.Except.ExceptT
                                 Language.PureScript.Errors.MultipleErrors
                                 (Control.Monad.Trans.Writer.Strict.Writer
                                    Language.PureScript.Errors.MultipleErrors))
                              b)
                   (s1 :: s) ->
                 case (m1
                         `cast`
                       (Control.Monad.Trans.State.Strict.N:StateT[0]
                            <s>_N
                            <Control.Monad.Trans.Except.ExceptT
                               Language.PureScript.Errors.MultipleErrors
                               (Control.Monad.Trans.Writer.Strict.Writer
                                  Language.PureScript.Errors.MultipleErrors)>_R
                            <a>_N)
                         s1)
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <Language.PureScript.Errors.MultipleErrors>_N
                           <Control.Monad.Trans.Writer.Strict.WriterT
                              Language.PureScript.Errors.MultipleErrors
                              Data.Functor.Identity.Identity>_R
                           <(a, s)>_N ; (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                             <Language.PureScript.Errors.MultipleErrors>_N
                                             <Data.Functor.Identity.Identity>_R
                                             <Data.Either.Either
                                                Language.PureScript.Errors.MultipleErrors
                                                (a, s)>_N ; Data.Functor.Identity.N:Identity[0]
                                                                <(Data.Either.Either
                                                                    Language.PureScript.Errors.MultipleErrors
                                                                    (a, s),
                                                                  Language.PureScript.Errors.MultipleErrors)>_R)) of wild { (,) a1 w1 ->
                 case a1 of wild1 {
                   Data.Either.Left e1
                   -> (Data.Either.Left
                         @ Language.PureScript.Errors.MultipleErrors
                         @ (b, s)
                         e1,
                       (GHC.Base.build
                          @ Language.PureScript.AST.Declarations.ErrorMessage
                          (\ @ b1
                             (c :: Language.PureScript.AST.Declarations.ErrorMessage
                                   -> b1 -> b1)[OneShot]
                             (n :: b1)[OneShot] ->
                           GHC.Base.foldr
                             @ Language.PureScript.AST.Declarations.ErrorMessage
                             @ b1
                             c
                             n
                             w1 `cast` (Language.PureScript.Errors.N:MultipleErrors[0])))
                         `cast`
                       (Sym (Language.PureScript.Errors.N:MultipleErrors[0])))
                        `cast`
                      (Sym (Data.Functor.Identity.N:Identity[0]
                                <(Data.Either.Either
                                    Language.PureScript.Errors.MultipleErrors (b, s),
                                  Language.PureScript.Errors.MultipleErrors)>_R) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                             <Language.PureScript.Errors.MultipleErrors>_N
                                                                                             <Data.Functor.Identity.Identity>_R
                                                                                             <Data.Either.Either
                                                                                                Language.PureScript.Errors.MultipleErrors
                                                                                                (b,
                                                                                                 s)>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                   <Language.PureScript.Errors.MultipleErrors>_N
                                                                                                                   <Control.Monad.Trans.Writer.Strict.WriterT
                                                                                                                      Language.PureScript.Errors.MultipleErrors
                                                                                                                      Data.Functor.Identity.Identity>_R
                                                                                                                   <(b,
                                                                                                                     s)>_N)))
                   Data.Either.Right x
                   -> case x of wild2 { (,) a2 s' ->
                      case ((k a2)
                              `cast`
                            (Control.Monad.Trans.State.Strict.N:StateT[0]
                                 <s>_N
                                 <Control.Monad.Trans.Except.ExceptT
                                    Language.PureScript.Errors.MultipleErrors
                                    (Control.Monad.Trans.Writer.Strict.Writer
                                       Language.PureScript.Errors.MultipleErrors)>_R
                                 <b>_N)
                              s')
                             `cast`
                           (Control.Monad.Trans.Except.N:ExceptT[0]
                                <Language.PureScript.Errors.MultipleErrors>_N
                                <Control.Monad.Trans.Writer.Strict.WriterT
                                   Language.PureScript.Errors.MultipleErrors
                                   Data.Functor.Identity.Identity>_R
                                <(b, s)>_N ; (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                  <Language.PureScript.Errors.MultipleErrors>_N
                                                  <Data.Functor.Identity.Identity>_R
                                                  <Data.Either.Either
                                                     Language.PureScript.Errors.MultipleErrors
                                                     (b, s)>_N ; Data.Functor.Identity.N:Identity[0]
                                                                     <(Data.Either.Either
                                                                         Language.PureScript.Errors.MultipleErrors
                                                                         (b, s),
                                                                       Language.PureScript.Errors.MultipleErrors)>_R)) of wild3 { (,) b1 w' ->
                      (b1,
                       (GHC.Base.augment
                          @ Language.PureScript.AST.Declarations.ErrorMessage
                          (\ @ b2
                             (c :: Language.PureScript.AST.Declarations.ErrorMessage
                                   -> b2 -> b2)[OneShot]
                             (n :: b2)[OneShot] ->
                           GHC.Base.foldr
                             @ Language.PureScript.AST.Declarations.ErrorMessage
                             @ b2
                             c
                             n
                             w1 `cast` (Language.PureScript.Errors.N:MultipleErrors[0]))
                          w' `cast` (Language.PureScript.Errors.N:MultipleErrors[0]))
                         `cast`
                       (Sym (Language.PureScript.Errors.N:MultipleErrors[0])))
                        `cast`
                      (Sym (Data.Functor.Identity.N:Identity[0]
                                <(Data.Either.Either
                                    Language.PureScript.Errors.MultipleErrors (b, s),
                                  Language.PureScript.Errors.MultipleErrors)>_R) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                             <Language.PureScript.Errors.MultipleErrors>_N
                                                                                             <Data.Functor.Identity.Identity>_R
                                                                                             <Data.Either.Either
                                                                                                Language.PureScript.Errors.MultipleErrors
                                                                                                (b,
                                                                                                 s)>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                   <Language.PureScript.Errors.MultipleErrors>_N
                                                                                                                   <Control.Monad.Trans.Writer.Strict.WriterT
                                                                                                                      Language.PureScript.Errors.MultipleErrors
                                                                                                                      Data.Functor.Identity.Identity>_R
                                                                                                                   <(b,
                                                                                                                     s)>_N))) } } } })
                  `cast`
                (forall (s :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.State.Strict.StateT
                    s
                    (Control.Monad.Trans.Except.ExceptT
                       Language.PureScript.Errors.MultipleErrors
                       (Control.Monad.Trans.Writer.Strict.Writer
                          Language.PureScript.Errors.MultipleErrors))
                    a>_R
                 ->_R <a
                       -> Control.Monad.Trans.State.Strict.StateT
                            s
                            (Control.Monad.Trans.Except.ExceptT
                               Language.PureScript.Errors.MultipleErrors
                               (Control.Monad.Trans.Writer.Strict.Writer
                                  Language.PureScript.Errors.MultipleErrors))
                            b>_R
                 ->_R Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                               <s>_N
                               <Control.Monad.Trans.Except.ExceptT
                                  Language.PureScript.Errors.MultipleErrors
                                  (Control.Monad.Trans.Writer.Strict.Writer
                                     Language.PureScript.Errors.MultipleErrors)>_R
                               <b>_N)) -}
876fcab4665905123efa99cad8214697
  $s$fMonadErroreStateT_$s$fMonadStateT_$cfail ::
    GHC.Base.String
    -> Control.Monad.Trans.State.Strict.StateT
         s
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Errors.MultipleErrors
            (Control.Monad.Trans.Writer.Strict.Writer
               Language.PureScript.Errors.MultipleErrors))
         a
  {- Arity: 2, Strictness: <B,U><B,A>x, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, True)
                (\ @ s @ a (str :: GHC.Base.String) (ds :: s) ->
                 GHC.Err.errorWithoutStackTrace
                   @ 'GHC.Types.LiftedRep
                   @ (Data.Functor.Identity.Identity
                        (Data.Either.Either
                           Language.PureScript.Errors.MultipleErrors (a, s),
                         Language.PureScript.Errors.MultipleErrors))
                   str)
                  `cast`
                (forall (s :: <*>_N) (a :: <*>_N).
                 <GHC.Base.String>_R
                 ->_R (<s>_R
                       ->_R Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                     <Language.PureScript.Errors.MultipleErrors>_N
                                     <Data.Functor.Identity.Identity>_R
                                     <Data.Either.Either
                                        Language.PureScript.Errors.MultipleErrors
                                        (a, s)>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                              <Language.PureScript.Errors.MultipleErrors>_N
                                                              <Control.Monad.Trans.Writer.Strict.WriterT
                                                                 Language.PureScript.Errors.MultipleErrors
                                                                 Data.Functor.Identity.Identity>_R
                                                              <(a,
                                                                s)>_N)) ; Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                                   <s>_N
                                                                                   <Control.Monad.Trans.Except.ExceptT
                                                                                      Language.PureScript.Errors.MultipleErrors
                                                                                      (Control.Monad.Trans.Writer.Strict.Writer
                                                                                         Language.PureScript.Errors.MultipleErrors)>_R
                                                                                   <a>_N)) -}
f32c873f71dfbd5bac677dab9e8415e5
  $s$fMonadStatesStateT ::
    Control.Monad.State.Class.MonadState
      s
      (Control.Monad.Trans.State.Strict.StateT
         s
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Errors.MultipleErrors
            (Control.Monad.Trans.Writer.Strict.Writer
               Language.PureScript.Errors.MultipleErrors)))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ s.
                  @ s
                  @ (Control.Monad.Trans.State.Strict.StateT
                       s
                       (Control.Monad.Trans.Except.ExceptT
                          Language.PureScript.Errors.MultipleErrors
                          (Control.Monad.Trans.Writer.Strict.Writer
                             Language.PureScript.Errors.MultipleErrors)))
                  (Language.PureScript.Interactive.$s$fMonadErroreStateT_$s$fMonadStateT
                     @ s)
                  (\ (x :: s) ->
                   (Data.Either.Right
                      @ Language.PureScript.Errors.MultipleErrors
                      @ (s, s)
                      (x, x),
                    (GHC.Types.[] @ Language.PureScript.AST.Declarations.ErrorMessage)
                      `cast`
                    (Sym (Language.PureScript.Errors.N:MultipleErrors[0]))))
                    `cast`
                  ((<s>_R
                    ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                  <(Data.Either.Either
                                      Language.PureScript.Errors.MultipleErrors (s, s),
                                    Language.PureScript.Errors.MultipleErrors)>_R) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                               <Language.PureScript.Errors.MultipleErrors>_N
                                                                                               <Data.Functor.Identity.Identity>_R
                                                                                               <Data.Either.Either
                                                                                                  Language.PureScript.Errors.MultipleErrors
                                                                                                  (s,
                                                                                                   s)>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                     <Language.PureScript.Errors.MultipleErrors>_N
                                                                                                                     <Control.Monad.Trans.Writer.Strict.WriterT
                                                                                                                        Language.PureScript.Errors.MultipleErrors
                                                                                                                        Data.Functor.Identity.Identity>_R
                                                                                                                     <(s,
                                                                                                                       s)>_N))) ; Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                                                                                           <s>_N
                                                                                                                                           <Control.Monad.Trans.Except.ExceptT
                                                                                                                                              Language.PureScript.Errors.MultipleErrors
                                                                                                                                              (Control.Monad.Trans.Writer.Strict.Writer
                                                                                                                                                 Language.PureScript.Errors.MultipleErrors)>_R
                                                                                                                                           <s>_N))
                  (Language.PureScript.Interactive.$s$fMonadStatesStateT_$sput @ s)
                  (Language.PureScript.Interactive.$s$fMonadStatesStateT_$sstate
                     @ s) -}
98287a5dc9badd8909c8c7e770cf50e9
  $s$fMonadStatesStateT_$sput ::
    s
    -> Control.Monad.Trans.State.Strict.StateT
         s
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Errors.MultipleErrors
            (Control.Monad.Trans.Writer.Strict.Writer
               Language.PureScript.Errors.MultipleErrors))
         ()
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,A>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ s (s1 :: s) (x :: s) ->
                 (Data.Either.Right
                    @ Language.PureScript.Errors.MultipleErrors
                    @ ((), s)
                    (GHC.Tuple.(), s1),
                  (GHC.Types.[] @ Language.PureScript.AST.Declarations.ErrorMessage)
                    `cast`
                  (Sym (Language.PureScript.Errors.N:MultipleErrors[0]))))
                  `cast`
                (forall (s :: <*>_N).
                 <s>_R
                 ->_R (<s>_R
                       ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                     <(Data.Either.Either
                                         Language.PureScript.Errors.MultipleErrors ((), s),
                                       Language.PureScript.Errors.MultipleErrors)>_R) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                                  <Language.PureScript.Errors.MultipleErrors>_N
                                                                                                  <Data.Functor.Identity.Identity>_R
                                                                                                  <Data.Either.Either
                                                                                                     Language.PureScript.Errors.MultipleErrors
                                                                                                     ((),
                                                                                                      s)>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                        <Language.PureScript.Errors.MultipleErrors>_N
                                                                                                                        <Control.Monad.Trans.Writer.Strict.WriterT
                                                                                                                           Language.PureScript.Errors.MultipleErrors
                                                                                                                           Data.Functor.Identity.Identity>_R
                                                                                                                        <((),
                                                                                                                          s)>_N))) ; Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                                                                                              <s>_N
                                                                                                                                              <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                 Language.PureScript.Errors.MultipleErrors
                                                                                                                                                 (Control.Monad.Trans.Writer.Strict.Writer
                                                                                                                                                    Language.PureScript.Errors.MultipleErrors)>_R
                                                                                                                                              <()>_N)) -}
fa55df55ebf0c1168b120fac6de3b8bc
  $s$fMonadStatesStateT_$sstate ::
    (s -> (a, s))
    -> Control.Monad.Trans.State.Strict.StateT
         s
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Errors.MultipleErrors
            (Control.Monad.Trans.Writer.Strict.Writer
               Language.PureScript.Errors.MultipleErrors))
         a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><L,U>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ s @ a (f :: s -> (a, s)) (x :: s) ->
                 (Data.Either.Right
                    @ Language.PureScript.Errors.MultipleErrors
                    @ (a, s)
                    (f x),
                  (GHC.Types.[] @ Language.PureScript.AST.Declarations.ErrorMessage)
                    `cast`
                  (Sym (Language.PureScript.Errors.N:MultipleErrors[0]))))
                  `cast`
                (forall (s :: <*>_N) (a :: <*>_N).
                 <s -> (a, s)>_R
                 ->_R (<s>_R
                       ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                     <(Data.Either.Either
                                         Language.PureScript.Errors.MultipleErrors (a, s),
                                       Language.PureScript.Errors.MultipleErrors)>_R) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                                  <Language.PureScript.Errors.MultipleErrors>_N
                                                                                                  <Data.Functor.Identity.Identity>_R
                                                                                                  <Data.Either.Either
                                                                                                     Language.PureScript.Errors.MultipleErrors
                                                                                                     (a,
                                                                                                      s)>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                        <Language.PureScript.Errors.MultipleErrors>_N
                                                                                                                        <Control.Monad.Trans.Writer.Strict.WriterT
                                                                                                                           Language.PureScript.Errors.MultipleErrors
                                                                                                                           Data.Functor.Identity.Identity>_R
                                                                                                                        <(a,
                                                                                                                          s)>_N))) ; Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                                                                                              <s>_N
                                                                                                                                              <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                 Language.PureScript.Errors.MultipleErrors
                                                                                                                                                 (Control.Monad.Trans.Writer.Strict.Writer
                                                                                                                                                    Language.PureScript.Errors.MultipleErrors)>_R
                                                                                                                                              <a>_N)) -}
aac797105c724821235b7fc0aac76474
  $sfromList ::
    [Language.PureScript.Names.ModuleName]
    -> Data.Set.Internal.Set Language.PureScript.Names.ModuleName
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [Language.PureScript.Names.ModuleName]) ->
                 case ds of wild {
                   [] -> Data.Set.Internal.Tip @ Language.PureScript.Names.ModuleName
                   : x ds1
                   -> case ds1 of wild1 {
                        []
                        -> case x `cast`
                                (Language.PureScript.Names.N:ModuleName[0]) of nt { DEFAULT ->
                           Data.Set.Internal.Bin
                             @ Language.PureScript.Names.ModuleName
                             1#
                             nt `cast` (Sym (Language.PureScript.Names.N:ModuleName[0]))
                             (Data.Set.Internal.Tip @ Language.PureScript.Names.ModuleName)
                             (Data.Set.Internal.Tip @ Language.PureScript.Names.ModuleName) }
                        : ipv ipv1
                        -> case GHC.Classes.$fOrd[]_$ccompare
                                  @ (Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.Namespace)
                                  (Language.PureScript.Names.$fOrdProperName
                                     @ 'Language.PureScript.Names.Namespace)
                                  x `cast` (Language.PureScript.Names.N:ModuleName[0])
                                  ipv `cast` (Language.PureScript.Names.N:ModuleName[0]) of wild2 {
                             DEFAULT
                             -> case x `cast`
                                     (Language.PureScript.Names.N:ModuleName[0]) of nt { DEFAULT ->
                                Language.PureScript.Interactive.$sfromList_$sgo4
                                  ipv
                                  ipv1
                                  (Data.Set.Internal.Bin
                                     @ Language.PureScript.Names.ModuleName
                                     1#
                                     nt `cast` (Sym (Language.PureScript.Names.N:ModuleName[0]))
                                     (Data.Set.Internal.Tip @ Language.PureScript.Names.ModuleName)
                                     (Data.Set.Internal.Tip
                                        @ Language.PureScript.Names.ModuleName)) }
                             GHC.Types.LT
                             -> case x `cast`
                                     (Language.PureScript.Names.N:ModuleName[0]) of nt { DEFAULT ->
                                Language.PureScript.Interactive.$sfromList_$s$wgo3
                                  ipv
                                  ipv1
                                  (Data.Set.Internal.Bin
                                     @ Language.PureScript.Names.ModuleName
                                     1#
                                     nt `cast` (Sym (Language.PureScript.Names.N:ModuleName[0]))
                                     (Data.Set.Internal.Tip @ Language.PureScript.Names.ModuleName)
                                     (Data.Set.Internal.Tip @ Language.PureScript.Names.ModuleName))
                                  1# } } } }) -}
9f699d7272aa0ee5e55ce7ebc0ab3d63
  $sfromList1 ::
    [(Language.PureScript.Names.ModuleName, a)]
    -> Data.Map.Internal.Map Language.PureScript.Names.ModuleName a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a
                   (ds :: [(Language.PureScript.Names.ModuleName, a)]) ->
                 case ds of wild {
                   []
                   -> Data.Map.Internal.Tip @ Language.PureScript.Names.ModuleName @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case kx
                                  `cast`
                                (Language.PureScript.Names.N:ModuleName[0]) of nt { DEFAULT ->
                           Data.Map.Internal.Bin
                             @ Language.PureScript.Names.ModuleName
                             @ a
                             1#
                             nt `cast` (Sym (Language.PureScript.Names.N:ModuleName[0]))
                             x
                             (Data.Map.Internal.Tip @ Language.PureScript.Names.ModuleName @ a)
                             (Data.Map.Internal.Tip
                                @ Language.PureScript.Names.ModuleName
                                @ a) }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case GHC.Classes.$fOrd[]_$ccompare
                                  @ (Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.Namespace)
                                  (Language.PureScript.Names.$fOrdProperName
                                     @ 'Language.PureScript.Names.Namespace)
                                  kx `cast` (Language.PureScript.Names.N:ModuleName[0])
                                  ky `cast` (Language.PureScript.Names.N:ModuleName[0]) of wild4 {
                             DEFAULT
                             -> case kx
                                       `cast`
                                     (Language.PureScript.Names.N:ModuleName[0]) of nt { DEFAULT ->
                                Language.PureScript.Interactive.$sfromList_$spoly_go14
                                  @ a
                                  ky
                                  ds3
                                  ipv1
                                  (Data.Map.Internal.Bin
                                     @ Language.PureScript.Names.ModuleName
                                     @ a
                                     1#
                                     nt `cast` (Sym (Language.PureScript.Names.N:ModuleName[0]))
                                     x
                                     (Data.Map.Internal.Tip
                                        @ Language.PureScript.Names.ModuleName
                                        @ a)
                                     (Data.Map.Internal.Tip
                                        @ Language.PureScript.Names.ModuleName
                                        @ a)) }
                             GHC.Types.LT
                             -> case kx
                                       `cast`
                                     (Language.PureScript.Names.N:ModuleName[0]) of nt { DEFAULT ->
                                Language.PureScript.Interactive.$sfromList_$s$wpoly_go13
                                  @ a
                                  ky
                                  ds3
                                  ipv1
                                  (Data.Map.Internal.Bin
                                     @ Language.PureScript.Names.ModuleName
                                     @ a
                                     1#
                                     nt `cast` (Sym (Language.PureScript.Names.N:ModuleName[0]))
                                     x
                                     (Data.Map.Internal.Tip
                                        @ Language.PureScript.Names.ModuleName
                                        @ a)
                                     (Data.Map.Internal.Tip
                                        @ Language.PureScript.Names.ModuleName
                                        @ a))
                                  1# } } } } } }) -}
5734b9f7ccddf7fc4f534cedc71baac4
  $sfromList_$s$wgo3 ::
    Language.PureScript.Names.ModuleName
    -> [Language.PureScript.Names.ModuleName]
    -> Data.Set.Internal.Set Language.PureScript.Names.ModuleName
    -> GHC.Prim.Int#
    -> Data.Set.Internal.Set Language.PureScript.Names.ModuleName
  {- Arity: 4, Strictness: <S,U><S,1*U><S,1*U><L,U> -}
1ec371b8bc19108d23ebe5f1f059cee9
  $sfromList_$s$wpoly_go13 ::
    Language.PureScript.Names.ModuleName
    -> a
    -> [(Language.PureScript.Names.ModuleName, a)]
    -> Data.Map.Internal.Map Language.PureScript.Names.ModuleName a
    -> GHC.Prim.Int#
    -> Data.Map.Internal.Map Language.PureScript.Names.ModuleName a
  {- Arity: 5, Strictness: <S,U><L,U><S,1*U><S,1*U><L,U> -}
d679a58e8df56a9969435b1272d8b947
  $sfromList_$sgo4 ::
    Language.PureScript.Names.ModuleName
    -> [Language.PureScript.Names.ModuleName]
    -> Data.Set.Internal.Set Language.PureScript.Names.ModuleName
    -> Data.Set.Internal.Set Language.PureScript.Names.ModuleName
  {- Arity: 3, Strictness: <S,U><S,1*U><S,1*U> -}
3c8efa338f672d91fe7ac93352a8cf48
  $sfromList_$spoly_go14 ::
    Language.PureScript.Names.ModuleName
    -> a
    -> [(Language.PureScript.Names.ModuleName, a)]
    -> Data.Map.Internal.Map Language.PureScript.Names.ModuleName a
    -> Data.Map.Internal.Map Language.PureScript.Names.ModuleName a
  {- Arity: 4, Strictness: <S,U><L,U><S,1*U><S,1*U> -}
7c679c6f5ff214390f555842c1f33097
  $sinsert_$sgo13 ::
    Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ModuleName
    -> a1
    -> Data.Map.Internal.Map Language.PureScript.Names.ModuleName a1
    -> Data.Map.Internal.Map Language.PureScript.Names.ModuleName a1
  {- Arity: 4, Strictness: <L,U><S,1*U><L,U><S,1*U> -}
7d56f343be6129d9c492529176242a39
  $sinsert_$sgo3 ::
    Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ModuleName
    -> Data.Set.Internal.Set Language.PureScript.Names.ModuleName
    -> Data.Set.Internal.Set Language.PureScript.Names.ModuleName
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U> -}
12c916dc998b352ac5fbbf9aff40e9ec
  $slookup_$s$wpoly_go13 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         Language.PureScript.Names.Ident)
      (Language.PureScript.Types.Type
         (Language.PureScript.AST.SourcePos.SourceSpan,
          [Language.PureScript.Comments.Comment]),
       Language.PureScript.Environment.NameKind,
       Language.PureScript.Environment.NameVisibility)
    -> Language.PureScript.Names.Ident
    -> Language.PureScript.Names.ModuleName
    -> GHC.Base.Maybe
         (Language.PureScript.Types.SourceType,
          Language.PureScript.Environment.NameKind,
          Language.PureScript.Environment.NameVisibility)
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,U><L,U> -}
34a5332495f72f1d7aae63a17c11e956
  $slookup_$s$wpoly_go2 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName))
      ([(Data.Text.Internal.Text,
         GHC.Base.Maybe
           (Language.PureScript.Kinds.Kind
              (Language.PureScript.AST.SourcePos.SourceSpan,
               [Language.PureScript.Comments.Comment])))],
       Language.PureScript.Types.Type
         (Language.PureScript.AST.SourcePos.SourceSpan,
          [Language.PureScript.Comments.Comment]))
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName
    -> Language.PureScript.Names.ModuleName
    -> GHC.Base.Maybe
         ([(Data.Text.Internal.Text,
            GHC.Base.Maybe Language.PureScript.Kinds.SourceKind)],
          Language.PureScript.Types.SourceType)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U(U,U,U)><L,U> -}
bdf8c5e213be6aece4fef0c8872085da
  $slookup_$s$wpoly_go3 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName))
      ([(Data.Text.Internal.Text,
         GHC.Base.Maybe
           (Language.PureScript.Kinds.Kind
              (Language.PureScript.AST.SourcePos.SourceSpan,
               [Language.PureScript.Comments.Comment])))],
       Language.PureScript.Types.Type
         (Language.PureScript.AST.SourcePos.SourceSpan,
          [Language.PureScript.Comments.Comment]))
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> ((Data.Text.Internal.Text :: *)
        ~R# (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.TypeName :: *)) =>
       Language.PureScript.Names.ModuleName
       -> GHC.Base.Maybe
            ([(Data.Text.Internal.Text,
               GHC.Base.Maybe Language.PureScript.Kinds.SourceKind)],
             Language.PureScript.Types.SourceType)
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S,1*U><L,U><L,U><L,U><L,U><L,U> -}
1e7ba2600e946a753f9c0143b985fb62
  $smember_go3 ::
    Language.PureScript.Names.ModuleName
    -> Data.Set.Internal.Set Language.PureScript.Names.ModuleName
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
246794c0e71984fbf849b99708f447a2
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Language.PureScript.Interactive.$trModule3
                   Language.PureScript.Interactive.$trModule1) -}
4b229ba26423c0d0f4cd3dd6f227efbb
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.$trModule2) -}
c3a15bd649b9bc74f32228b07383c56b
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Language.PureScript.Interactive"#) -}
efc95242873b43da702a4201c5c27190
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.$trModule4) -}
1359ce022ad0723a379d2c1aa66c95b1
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"#) -}
3566a24c62277bc190a0d14b2f6dc64c
  $wgo ::
    [Language.PureScript.Externs.ExternsFile]
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            Language.PureScript.Names.Ident)
         (Language.PureScript.Types.SourceType,
          Language.PureScript.Environment.NameKind,
          Language.PureScript.Environment.NameVisibility)
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.TypeName))
         (Language.PureScript.Kinds.SourceKind,
          Language.PureScript.Environment.TypeKind)
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ConstructorName))
         (Language.PureScript.Environment.DataDeclType,
          Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName,
          Language.PureScript.Types.SourceType,
          [Language.PureScript.Names.Ident])
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.TypeName))
         ([(Data.Text.Internal.Text,
            GHC.Base.Maybe Language.PureScript.Kinds.SourceKind)],
          Language.PureScript.Types.SourceType)
    -> Data.Map.Internal.Map
         (GHC.Base.Maybe Language.PureScript.Names.ModuleName)
         (Data.Map.Internal.Map
            (Language.PureScript.Names.Qualified
               (Language.PureScript.Names.ProperName
                  'Language.PureScript.Names.ClassName))
            (Data.Map.Internal.Map
               (Language.PureScript.Names.Qualified
                  Language.PureScript.Names.Ident)
               (GHC.Base.NonEmpty
                  Language.PureScript.TypeClassDictionaries.NamedDict)))
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName))
         Language.PureScript.Environment.TypeClassData
    -> Data.Set.Internal.Set
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.KindName))
    -> Language.PureScript.Environment.Environment
  {- Arity: 8,
     Strictness: <S,1*U><L,U><L,U><L,U><L,U><L,U><L,U><L,U>m,
     Inline: [0] -}
37953393042a2855beeb86f3fb542948
  handleCommand ::
    (Control.Monad.Reader.Class.MonadReader
       Language.PureScript.Interactive.Types.PSCiConfig m,
     Control.Monad.State.Class.MonadState
       Language.PureScript.Interactive.Types.PSCiState m,
     Control.Monad.IO.Class.MonadIO m) =>
    (GHC.Base.String -> m ())
    -> m ()
    -> (GHC.Base.String -> m ())
    -> Language.PureScript.Interactive.Types.Command
    -> m ()
  {- Arity: 3,
     Strictness: <L,U(U(A,C(C1(U)),C(C1(U)),C(U),A),A,A,C(U))><L,U(1*U(1*U(1*U(1*C1(C1(U)),A),A,A,A,A,A),C(C1(U)),A,C(U),A),1*U,C(U),C(U))><L,U(1*U(A,C(C1(U)),A,C(U),A),C(U))> -}
fa8ae8e9f0172f588664192da55e8d76
  make ::
    [(GHC.IO.FilePath, Language.PureScript.AST.Declarations.Module)]
    -> Language.PureScript.Make.Monad.Make
         ([Language.PureScript.Externs.ExternsFile],
          Language.PureScript.Environment.Environment)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (ms :: [(GHC.IO.FilePath,
                            Language.PureScript.AST.Declarations.Module)]) ->
                 let {
                   lvl99 :: [Language.PureScript.AST.Declarations.Module]
                   = GHC.Base.map
                       @ (GHC.IO.FilePath, Language.PureScript.AST.Declarations.Module)
                       @ Language.PureScript.AST.Declarations.Module
                       (Data.Tuple.snd
                          @ GHC.IO.FilePath
                          @ Language.PureScript.AST.Declarations.Module)
                       ms
                 } in
                 let {
                   filePathMap :: Data.Map.Internal.Map
                                    Language.PureScript.Names.ModuleName
                                    (Data.Either.Either
                                       Language.PureScript.Make.Actions.RebuildPolicy
                                       GHC.IO.FilePath)
                   = Language.PureScript.Interactive.$sfromList1
                       @ (Data.Either.Either
                            Language.PureScript.Make.Actions.RebuildPolicy GHC.IO.FilePath)
                       (GHC.Base.map
                          @ (GHC.IO.FilePath, Language.PureScript.AST.Declarations.Module)
                          @ (Language.PureScript.Names.ModuleName,
                             Data.Either.Either
                               Language.PureScript.Make.Actions.RebuildPolicy GHC.IO.FilePath)
                          Language.PureScript.Interactive.make2
                          ms)
                 } in
                 let {
                   m1 :: Language.PureScript.Make.Monad.Make
                           (Data.Map.Internal.Map
                              Language.PureScript.Names.ModuleName GHC.IO.FilePath)
                   = Language.PureScript.Interactive.make1 filePathMap
                 } in
                 (\ (r1 :: Language.PureScript.Options.Options) ->
                  let {
                    ds :: Control.Monad.Trans.Except.ExceptT
                            Language.PureScript.Errors.MultipleErrors
                            (Control.Monad.Logger.Logger
                               Language.PureScript.Errors.MultipleErrors)
                            (Data.Map.Internal.Map
                               Language.PureScript.Names.ModuleName GHC.IO.FilePath)
                    = m1
                        `cast`
                      (Language.PureScript.Make.Monad.N:Make[0] <Data.Map.Internal.Map
                                                                   Language.PureScript.Names.ModuleName
                                                                   GHC.IO.FilePath>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                            <*>_N
                                                                                            <Language.PureScript.Options.Options>_R
                                                                                            <Control.Monad.Trans.Except.ExceptT
                                                                                               Language.PureScript.Errors.MultipleErrors
                                                                                               (Control.Monad.Logger.Logger
                                                                                                  Language.PureScript.Errors.MultipleErrors)>_R
                                                                                            <Data.Map.Internal.Map
                                                                                               Language.PureScript.Names.ModuleName
                                                                                               GHC.IO.FilePath>_N)
                        r1
                  } in
                  (\ (r2 :: GHC.IORef.IORef
                              Language.PureScript.Errors.MultipleErrors)
                     (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                   case (ds
                           `cast`
                         (Control.Monad.Trans.Except.N:ExceptT[0]
                              <Language.PureScript.Errors.MultipleErrors>_N
                              <Control.Monad.Logger.Logger
                                 Language.PureScript.Errors.MultipleErrors>_R
                              <Data.Map.Internal.Map
                                 Language.PureScript.Names.ModuleName
                                 GHC.IO.FilePath>_N ; Control.Monad.Logger.N:Logger[0]
                                                          <Language.PureScript.Errors.MultipleErrors>_R
                                                          <Data.Either.Either
                                                             Language.PureScript.Errors.MultipleErrors
                                                             (Data.Map.Internal.Map
                                                                Language.PureScript.Names.ModuleName
                                                                GHC.IO.FilePath)>_R)
                           r2)
                          `cast`
                        (GHC.Types.N:IO[0]
                             <Data.Either.Either
                                Language.PureScript.Errors.MultipleErrors
                                (Data.Map.Internal.Map
                                   Language.PureScript.Names.ModuleName GHC.IO.FilePath)>_R)
                          s of ds1 { (#,#) ipv ipv1 ->
                   case ipv1 of wild {
                     Data.Either.Left e1
                     -> (# ipv,
                           Data.Either.Left
                             @ Language.PureScript.Errors.MultipleErrors
                             @ ([Language.PureScript.Externs.ExternsFile],
                                Language.PureScript.Environment.Environment)
                             e1 #)
                     Data.Either.Right x
                     -> case Language.PureScript.Make.Actions.$wbuildMakeActions
                               Language.PureScript.Interactive.Module.modulesDir
                               filePathMap
                               x
                               GHC.Types.False of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                        case (((Language.PureScript.Make.make
                                  @ Language.PureScript.Make.Monad.Make
                                  Language.PureScript.Make.Monad.$fMonadMake
                                  Language.PureScript.Make.Monad.$fMonadBaseControlIOMake
                                  Language.PureScript.Make.Monad.$fMonadErrorMake
                                  Language.PureScript.Make.Monad.$fMonadWriterMake
                                  (Language.PureScript.Make.Actions.MakeActions
                                     @ Language.PureScript.Make.Monad.Make
                                     ww1
                                     ww2
                                     ww3
                                     ww4
                                     ww5
                                     ww6)
                                  lvl99)
                                 `cast`
                               (Language.PureScript.Make.Monad.N:Make[0] <[Language.PureScript.Externs.ExternsFile]>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                             <*>_N
                                                                                                                             <Language.PureScript.Options.Options>_R
                                                                                                                             <Control.Monad.Trans.Except.ExceptT
                                                                                                                                Language.PureScript.Errors.MultipleErrors
                                                                                                                                (Control.Monad.Logger.Logger
                                                                                                                                   Language.PureScript.Errors.MultipleErrors)>_R
                                                                                                                             <[Language.PureScript.Externs.ExternsFile]>_N)
                                 r1)
                                `cast`
                              (Control.Monad.Trans.Except.N:ExceptT[0]
                                   <Language.PureScript.Errors.MultipleErrors>_N
                                   <Control.Monad.Logger.Logger
                                      Language.PureScript.Errors.MultipleErrors>_R
                                   <[Language.PureScript.Externs.ExternsFile]>_N ; Control.Monad.Logger.N:Logger[0]
                                                                                       <Language.PureScript.Errors.MultipleErrors>_R
                                                                                       <Data.Either.Either
                                                                                          Language.PureScript.Errors.MultipleErrors
                                                                                          [Language.PureScript.Externs.ExternsFile]>_R)
                                r2)
                               `cast`
                             (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     Language.PureScript.Errors.MultipleErrors
                                     [Language.PureScript.Externs.ExternsFile]>_R)
                               ipv of ds2 { (#,#) ipv2 ipv3 ->
                        case ipv3 of wild1 {
                          Data.Either.Left e1
                          -> (# ipv2,
                                Data.Either.Left
                                  @ Language.PureScript.Errors.MultipleErrors
                                  @ ([Language.PureScript.Externs.ExternsFile],
                                     Language.PureScript.Environment.Environment)
                                  e1 #)
                          Data.Either.Right x1
                          -> (# ipv2,
                                Data.Either.Right
                                  @ Language.PureScript.Errors.MultipleErrors
                                  @ ([Language.PureScript.Externs.ExternsFile],
                                     Language.PureScript.Environment.Environment)
                                  (x1,
                                   Language.PureScript.Interactive.$wgo
                                     x1
                                     (Data.Map.Internal.Tip
                                        @ (Language.PureScript.Names.Qualified
                                             Language.PureScript.Names.Ident)
                                        @ (Language.PureScript.Types.SourceType,
                                           Language.PureScript.Environment.NameKind,
                                           Language.PureScript.Environment.NameVisibility))
                                     Language.PureScript.Environment.allPrimTypes
                                     (Data.Map.Internal.Tip
                                        @ (Language.PureScript.Names.Qualified
                                             (Language.PureScript.Names.ProperName
                                                'Language.PureScript.Names.ConstructorName))
                                        @ (Language.PureScript.Environment.DataDeclType,
                                           Language.PureScript.Names.ProperName
                                             'Language.PureScript.Names.TypeName,
                                           Language.PureScript.Types.SourceType,
                                           [Language.PureScript.Names.Ident]))
                                     (Data.Map.Internal.Tip
                                        @ (Language.PureScript.Names.Qualified
                                             (Language.PureScript.Names.ProperName
                                                'Language.PureScript.Names.TypeName))
                                        @ ([(Data.Text.Internal.Text,
                                             GHC.Base.Maybe Language.PureScript.Kinds.SourceKind)],
                                           Language.PureScript.Types.SourceType))
                                     (Data.Map.Internal.Tip
                                        @ (GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                                        @ (Data.Map.Internal.Map
                                             (Language.PureScript.Names.Qualified
                                                (Language.PureScript.Names.ProperName
                                                   'Language.PureScript.Names.ClassName))
                                             (Data.Map.Internal.Map
                                                (Language.PureScript.Names.Qualified
                                                   Language.PureScript.Names.Ident)
                                                (GHC.Base.NonEmpty
                                                   Language.PureScript.TypeClassDictionaries.NamedDict))))
                                     Language.PureScript.Environment.allPrimClasses
                                     Language.PureScript.Environment.allPrimKinds) #) } } } } })
                    `cast`
                  ((<GHC.IORef.IORef Language.PureScript.Errors.MultipleErrors>_R
                    ->_R Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     Language.PureScript.Errors.MultipleErrors
                                     ([Language.PureScript.Externs.ExternsFile],
                                      Language.PureScript.Environment.Environment)>_R)) ; (Sym (Control.Monad.Logger.N:Logger[0]
                                                                                                    <Language.PureScript.Errors.MultipleErrors>_R
                                                                                                    <Data.Either.Either
                                                                                                       Language.PureScript.Errors.MultipleErrors
                                                                                                       ([Language.PureScript.Externs.ExternsFile],
                                                                                                        Language.PureScript.Environment.Environment)>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                                                                    <Language.PureScript.Errors.MultipleErrors>_N
                                                                                                                                                                    <Control.Monad.Logger.Logger
                                                                                                                                                                       Language.PureScript.Errors.MultipleErrors>_R
                                                                                                                                                                    <([Language.PureScript.Externs.ExternsFile],
                                                                                                                                                                      Language.PureScript.Environment.Environment)>_N))))
                   `cast`
                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                           <*>_N
                           <Language.PureScript.Options.Options>_R
                           <Control.Monad.Trans.Except.ExceptT
                              Language.PureScript.Errors.MultipleErrors
                              (Control.Monad.Logger.Logger
                                 Language.PureScript.Errors.MultipleErrors)>_R
                           <([Language.PureScript.Externs.ExternsFile],
                             Language.PureScript.Environment.Environment)>_N) ; Sym (Language.PureScript.Make.Monad.N:Make[0]) <([Language.PureScript.Externs.ExternsFile],
                                                                                                                                 Language.PureScript.Environment.Environment)>_N)) -}
b4e64c227fc6dfb3c40eeeafd6c5b29e
  make1 ::
    Data.Map.Internal.Map
      Language.PureScript.Names.ModuleName
      (Data.Either.Either
         Language.PureScript.Make.Actions.RebuildPolicy GHC.IO.FilePath)
    -> Language.PureScript.Make.Monad.Make
         (Data.Map.Internal.Map
            Language.PureScript.Names.ModuleName GHC.IO.FilePath)
  {- Unfolding: (Language.PureScript.Make.inferForeignModules
                   @ Language.PureScript.Make.Monad.Make
                   Language.PureScript.Make.Monad.$fMonadIOMake) -}
004ac6afbaceca27859231cb55d42425
  make2 ::
    (GHC.IO.FilePath, Language.PureScript.AST.Declarations.Module)
    -> (Language.PureScript.Names.ModuleName,
        Data.Either.Either
          Language.PureScript.Make.Actions.RebuildPolicy GHC.IO.FilePath)
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S,1*U(U,1*U(A,A,1*U,A,A))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: (GHC.IO.FilePath,
                           Language.PureScript.AST.Declarations.Module)) ->
                 case ds of wild { (,) fp m ->
                 (Language.PureScript.AST.Declarations.getModuleName m,
                  Data.Either.Right
                    @ Language.PureScript.Make.Actions.RebuildPolicy
                    @ GHC.IO.FilePath
                    fp) }) -}
dfddc89cb019e224c291b4f131dfb541
  runMake ::
    Language.PureScript.Make.Monad.Make a
    -> GHC.Types.IO
         (Data.Either.Either Language.PureScript.Errors.MultipleErrors a)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <C(C(C(S(SL)))),1*C1(C1(C1(U(U,U))))><S,U>,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Interactive.runMake1
                  `cast`
                (forall (a :: <*>_N).
                 <Language.PureScript.Make.Monad.Make a>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  Language.PureScript.Errors.MultipleErrors a>_R)) -}
66bc6f1f4a31d2ee83a5591da7e25ae7
  runMake1 ::
    Language.PureScript.Make.Monad.Make a
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either Language.PureScript.Errors.MultipleErrors a #)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <C(C(C(S(SL)))),1*C1(C1(C1(U(U,U))))><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (mk :: Language.PureScript.Make.Monad.Make a)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Prim.newMutVar#
                        @ Language.PureScript.Errors.MultipleErrors
                        @ GHC.Prim.RealWorld
                        (GHC.Types.[] @ Language.PureScript.AST.Declarations.ErrorMessage)
                          `cast`
                        (Sym (Language.PureScript.Errors.N:MultipleErrors[0]))
                        eta of ds { (#,#) ipv ipv1 ->
                 case ((mk
                          `cast`
                        (Language.PureScript.Make.Monad.N:Make[0] <a>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                              <*>_N
                                                                              <Language.PureScript.Options.Options>_R
                                                                              <Control.Monad.Trans.Except.ExceptT
                                                                                 Language.PureScript.Errors.MultipleErrors
                                                                                 (Control.Monad.Logger.Logger
                                                                                    Language.PureScript.Errors.MultipleErrors)>_R
                                                                              <a>_N)
                          Language.PureScript.Options.defaultOptions)
                         `cast`
                       (Control.Monad.Trans.Except.N:ExceptT[0]
                            <Language.PureScript.Errors.MultipleErrors>_N
                            <Control.Monad.Logger.Logger
                               Language.PureScript.Errors.MultipleErrors>_R
                            <a>_N ; Control.Monad.Logger.N:Logger[0]
                                        <Language.PureScript.Errors.MultipleErrors>_R
                                        <Data.Either.Either
                                           Language.PureScript.Errors.MultipleErrors a>_R)
                         (GHC.STRef.STRef
                            @ GHC.Prim.RealWorld
                            @ Language.PureScript.Errors.MultipleErrors
                            ipv1)
                           `cast`
                         (Sym (GHC.IORef.N:IORef[0]) <Language.PureScript.Errors.MultipleErrors>_N))
                        `cast`
                      (GHC.Types.N:IO[0]
                           <Data.Either.Either Language.PureScript.Errors.MultipleErrors a>_R)
                        ipv of ds1 { (#,#) ipv2 ipv3 ->
                 case GHC.Prim.readMutVar#
                        @ GHC.Prim.RealWorld
                        @ Language.PureScript.Errors.MultipleErrors
                        ipv1
                        ipv2 of ds2 { (#,#) ipv4 ipv5 ->
                 (# ipv4, ipv3 #) } } }) -}
"SPEC/Language.PureScript.Interactive $fApplicativeStateT @ (ExceptT
                                                              MultipleErrors
                                                              (Writer MultipleErrors)) _" [orphan] forall @ s
                                                                                                                                                                                                                                                            (v1 :: GHC.Base.Monad
                                                                                                                                                                                                                                                                     (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                                                                                        Language.PureScript.Errors.MultipleErrors
                                                                                                                                                                                                                                                                        (Control.Monad.Trans.Writer.Strict.Writer
                                                                                                                                                                                                                                                                           Language.PureScript.Errors.MultipleErrors)))
                                                                                                                                                                                                                                                            (v :: GHC.Base.Functor
                                                                                                                                                                                                                                                                    (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                                                                                       Language.PureScript.Errors.MultipleErrors
                                                                                                                                                                                                                                                                       (Control.Monad.Trans.Writer.Strict.Writer
                                                                                                                                                                                                                                                                          Language.PureScript.Errors.MultipleErrors)))
  Control.Monad.Trans.State.Strict.$fApplicativeStateT @ (Control.Monad.Trans.Except.ExceptT
                                                            Language.PureScript.Errors.MultipleErrors
                                                            (Control.Monad.Trans.Writer.Strict.Writer
                                                               Language.PureScript.Errors.MultipleErrors))
                                                       @ s
                                                       v
                                                       v1
  = Language.PureScript.Interactive.$s$fApplicativeStateT @ s
"SPEC/Language.PureScript.Interactive $fApplicativeStateT1 @ (ExceptT
                                                               MultipleErrors
                                                               (Writer MultipleErrors)) _" [orphan] forall @ s
                                                                                                                                                                                                                                                               ($dMonad :: GHC.Base.Monad
                                                                                                                                                                                                                                                                             (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                                                                                                Language.PureScript.Errors.MultipleErrors
                                                                                                                                                                                                                                                                                (Control.Monad.Trans.Writer.Strict.Writer
                                                                                                                                                                                                                                                                                   Language.PureScript.Errors.MultipleErrors)))
                                                                                                                                                                                                                                                               ($dFunctor :: GHC.Base.Functor
                                                                                                                                                                                                                                                                               (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                                                                                                  Language.PureScript.Errors.MultipleErrors
                                                                                                                                                                                                                                                                                  (Control.Monad.Trans.Writer.Strict.Writer
                                                                                                                                                                                                                                                                                     Language.PureScript.Errors.MultipleErrors)))
  Control.Monad.Trans.State.Strict.$fApplicativeStateT1 @ (Control.Monad.Trans.Except.ExceptT
                                                             Language.PureScript.Errors.MultipleErrors
                                                             (Control.Monad.Trans.Writer.Strict.Writer
                                                                Language.PureScript.Errors.MultipleErrors))
                                                        @ s
                                                        $dFunctor
                                                        $dMonad
  = Language.PureScript.Interactive.$s$fApplicativeStateT_$s$fApplicativeStateT1
      @ s
"SPEC/Language.PureScript.Interactive $fApplicativeStateT_$c*> @ (ExceptT
                                                                   MultipleErrors
                                                                   (Writer MultipleErrors)) _" [orphan] forall @ s
                                                                                                                                                                                                                                                                           ($dMonad :: GHC.Base.Monad
                                                                                                                                                                                                                                                                                         (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                                                                                                            Language.PureScript.Errors.MultipleErrors
                                                                                                                                                                                                                                                                                            (Control.Monad.Trans.Writer.Strict.Writer
                                                                                                                                                                                                                                                                                               Language.PureScript.Errors.MultipleErrors)))
                                                                                                                                                                                                                                                                           ($dFunctor :: GHC.Base.Functor
                                                                                                                                                                                                                                                                                           (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                                                                                                              Language.PureScript.Errors.MultipleErrors
                                                                                                                                                                                                                                                                                              (Control.Monad.Trans.Writer.Strict.Writer
                                                                                                                                                                                                                                                                                                 Language.PureScript.Errors.MultipleErrors)))
  Control.Monad.Trans.State.Strict.$fApplicativeStateT_$c*> @ (Control.Monad.Trans.Except.ExceptT
                                                                 Language.PureScript.Errors.MultipleErrors
                                                                 (Control.Monad.Trans.Writer.Strict.Writer
                                                                    Language.PureScript.Errors.MultipleErrors))
                                                            @ s
                                                            $dFunctor
                                                            $dMonad
  = Language.PureScript.Interactive.$s$fApplicativeStateT_$s$fApplicativeStateT_$c*>
      @ s
"SPEC/Language.PureScript.Interactive $fApplicativeStateT_$c<*> @ (ExceptT
                                                                    MultipleErrors
                                                                    (Writer MultipleErrors)) _" [orphan] forall @ s
                                                                                                                                                                                                                                                                              ($dMonad :: GHC.Base.Monad
                                                                                                                                                                                                                                                                                            (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                                                                                                               Language.PureScript.Errors.MultipleErrors
                                                                                                                                                                                                                                                                                               (Control.Monad.Trans.Writer.Strict.Writer
                                                                                                                                                                                                                                                                                                  Language.PureScript.Errors.MultipleErrors)))
                                                                                                                                                                                                                                                                              ($dFunctor :: GHC.Base.Functor
                                                                                                                                                                                                                                                                                              (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                                                                                                                 Language.PureScript.Errors.MultipleErrors
                                                                                                                                                                                                                                                                                                 (Control.Monad.Trans.Writer.Strict.Writer
                                                                                                                                                                                                                                                                                                    Language.PureScript.Errors.MultipleErrors)))
  Control.Monad.Trans.State.Strict.$fApplicativeStateT_$c<*> @ (Control.Monad.Trans.Except.ExceptT
                                                                  Language.PureScript.Errors.MultipleErrors
                                                                  (Control.Monad.Trans.Writer.Strict.Writer
                                                                     Language.PureScript.Errors.MultipleErrors))
                                                             @ s
                                                             $dFunctor
                                                             $dMonad
  = Language.PureScript.Interactive.$s$fApplicativeStateT_$s$fApplicativeStateT_$c<*>
      @ s
"SPEC/Language.PureScript.Interactive $fApplicativeStateT_$cpure @ (ExceptT
                                                                     MultipleErrors
                                                                     (Writer MultipleErrors)) _" [orphan] forall @ s
                                                                                                                                                                                                                                                                                 ($dMonad :: GHC.Base.Monad
                                                                                                                                                                                                                                                                                               (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                                                                                                                  Language.PureScript.Errors.MultipleErrors
                                                                                                                                                                                                                                                                                                  (Control.Monad.Trans.Writer.Strict.Writer
                                                                                                                                                                                                                                                                                                     Language.PureScript.Errors.MultipleErrors)))
                                                                                                                                                                                                                                                                                 ($dFunctor :: GHC.Base.Functor
                                                                                                                                                                                                                                                                                                 (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                                                                                                                    Language.PureScript.Errors.MultipleErrors
                                                                                                                                                                                                                                                                                                    (Control.Monad.Trans.Writer.Strict.Writer
                                                                                                                                                                                                                                                                                                       Language.PureScript.Errors.MultipleErrors)))
  Control.Monad.Trans.State.Strict.$fApplicativeStateT_$cpure @ (Control.Monad.Trans.Except.ExceptT
                                                                   Language.PureScript.Errors.MultipleErrors
                                                                   (Control.Monad.Trans.Writer.Strict.Writer
                                                                      Language.PureScript.Errors.MultipleErrors))
                                                              @ s
                                                              $dFunctor
                                                              $dMonad
  = Language.PureScript.Interactive.$s$fApplicativeStateT_$s$fApplicativeStateT_$cpure
      @ s
"SPEC/Language.PureScript.Interactive $fApplicativeWriterT @ MultipleErrors @ Identity" [orphan] forall (v1 :: GHC.Base.Applicative
                                                                                                                 Data.Functor.Identity.Identity)
                                                                                                        (v :: GHC.Base.Monoid
                                                                                                                Language.PureScript.Errors.MultipleErrors)
  Control.Monad.Trans.Writer.Strict.$fApplicativeWriterT @ Language.PureScript.Errors.MultipleErrors
                                                         @ Data.Functor.Identity.Identity
                                                         v
                                                         v1
  = Language.PureScript.Interactive.$s$fApplicativeStateT_$s$fApplicativeWriterT
"SPEC/Language.PureScript.Interactive $fApplicativeWriterT_$c<* @ MultipleErrors @ Identity" [orphan] forall ($dApplicative :: GHC.Base.Applicative
                                                                                                                                 Data.Functor.Identity.Identity)
                                                                                                             ($dMonoid :: GHC.Base.Monoid
                                                                                                                            Language.PureScript.Errors.MultipleErrors)
  Control.Monad.Trans.Writer.Strict.$fApplicativeWriterT_$c<* @ Language.PureScript.Errors.MultipleErrors
                                                              @ Data.Functor.Identity.Identity
                                                              $dMonoid
                                                              $dApplicative
  = Language.PureScript.Interactive.$s$fApplicativeWriterT_$c<*
"SPEC/Language.PureScript.Interactive $fApplicativeWriterT_$c<*> @ MultipleErrors @ Identity" [orphan] forall ($dApplicative :: GHC.Base.Applicative
                                                                                                                                  Data.Functor.Identity.Identity)
                                                                                                              ($dMonoid :: GHC.Base.Monoid
                                                                                                                             Language.PureScript.Errors.MultipleErrors)
  Control.Monad.Trans.Writer.Strict.$fApplicativeWriterT_$c<*> @ Language.PureScript.Errors.MultipleErrors
                                                               @ Data.Functor.Identity.Identity
                                                               $dMonoid
                                                               $dApplicative
  = Language.PureScript.Interactive.$s$fApplicativeStateT_$s$fApplicativeWriterT_$c<*>
"SPEC/Language.PureScript.Interactive $fApplicativeWriterT_$cpure @ MultipleErrors @ Identity" [orphan] forall ($dApplicative :: GHC.Base.Applicative
                                                                                                                                   Data.Functor.Identity.Identity)
                                                                                                               ($dMonoid :: GHC.Base.Monoid
                                                                                                                              Language.PureScript.Errors.MultipleErrors)
  Control.Monad.Trans.Writer.Strict.$fApplicativeWriterT_$cpure @ Language.PureScript.Errors.MultipleErrors
                                                                @ Data.Functor.Identity.Identity
                                                                $dMonoid
                                                                $dApplicative
  = Language.PureScript.Interactive.$s$fApplicativeStateT_$s$fApplicativeWriterT_$cpure
"SPEC/Language.PureScript.Interactive $fFunctorStateT @ (ExceptT
                                                          MultipleErrors (Writer MultipleErrors)) _" [orphan] forall @ s
                                                                                                                                                                                      (v :: GHC.Base.Functor
                                                                                                                                                                                              (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                 Language.PureScript.Errors.MultipleErrors
                                                                                                                                                                                                 (Control.Monad.Trans.Writer.Strict.Writer
                                                                                                                                                                                                    Language.PureScript.Errors.MultipleErrors)))
  Control.Monad.Trans.State.Strict.$fFunctorStateT @ (Control.Monad.Trans.Except.ExceptT
                                                        Language.PureScript.Errors.MultipleErrors
                                                        (Control.Monad.Trans.Writer.Strict.Writer
                                                           Language.PureScript.Errors.MultipleErrors))
                                                   @ s
                                                   v
  = Language.PureScript.Interactive.$s$fApplicativeStateT_$s$fFunctorStateT
      @ s
"SPEC/Language.PureScript.Interactive $fFunctorWriterT @ Identity _" [orphan] forall @ w
                                                                                     (v :: GHC.Base.Functor
                                                                                             Data.Functor.Identity.Identity)
  Control.Monad.Trans.Writer.Strict.$fFunctorWriterT @ Data.Functor.Identity.Identity
                                                     @ w
                                                     v
  = Language.PureScript.Interactive.$s$fApplicativeStateT_$s$fFunctorWriterT
      @ w
"SPEC/Language.PureScript.Interactive $fFunctorWriterT_$cfmap @ Identity _" [orphan] forall @ w
                                                                                            ($dFunctor :: GHC.Base.Functor
                                                                                                            Data.Functor.Identity.Identity)
  Control.Monad.Trans.Writer.Strict.$fFunctorWriterT_$cfmap @ Data.Functor.Identity.Identity
                                                            @ w
                                                            $dFunctor
  = Language.PureScript.Interactive.$s$fApplicativeStateT_$s$fFunctorWriterT_$cfmap
      @ w
"SPEC/Language.PureScript.Interactive $fMonadErroreStateT @ MultipleErrors @ (ExceptT
                                                                               MultipleErrors
                                                                               (Writer
                                                                                  MultipleErrors)) _" [orphan] forall @ s
                                                                                                                                                                                                                                                                                                                                                                                                 (v :: Control.Monad.Error.Class.MonadError
                                                                                                                                                                                                                                                                                                                                                                                                         Language.PureScript.Errors.MultipleErrors
                                                                                                                                                                                                                                                                                                                                                                                                         (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                                                                                                                                                                                                                            Language.PureScript.Errors.MultipleErrors
                                                                                                                                                                                                                                                                                                                                                                                                            (Control.Monad.Trans.Writer.Strict.Writer
                                                                                                                                                                                                                                                                                                                                                                                                               Language.PureScript.Errors.MultipleErrors)))
  Control.Monad.Error.Class.$fMonadErroreStateT @ Language.PureScript.Errors.MultipleErrors
                                                @ (Control.Monad.Trans.Except.ExceptT
                                                     Language.PureScript.Errors.MultipleErrors
                                                     (Control.Monad.Trans.Writer.Strict.Writer
                                                        Language.PureScript.Errors.MultipleErrors))
                                                @ s
                                                v
  = Language.PureScript.Interactive.$s$fMonadErroreStateT @ s
"SPEC/Language.PureScript.Interactive $fMonadErroreStateT1 @ MultipleErrors @ (ExceptT
                                                                                MultipleErrors
                                                                                (Writer
                                                                                   MultipleErrors)) _" [orphan] forall @ s
                                                                                                                                                                                                                                                                                                                                                                                                     ($dMonadError :: Control.Monad.Error.Class.MonadError
                                                                                                                                                                                                                                                                                                                                                                                                                        Language.PureScript.Errors.MultipleErrors
                                                                                                                                                                                                                                                                                                                                                                                                                        (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                                                                                                                                                                                                                                           Language.PureScript.Errors.MultipleErrors
                                                                                                                                                                                                                                                                                                                                                                                                                           (Control.Monad.Trans.Writer.Strict.Writer
                                                                                                                                                                                                                                                                                                                                                                                                                              Language.PureScript.Errors.MultipleErrors)))
  Control.Monad.Error.Class.$fMonadErroreStateT1 @ Language.PureScript.Errors.MultipleErrors
                                                 @ (Control.Monad.Trans.Except.ExceptT
                                                      Language.PureScript.Errors.MultipleErrors
                                                      (Control.Monad.Trans.Writer.Strict.Writer
                                                         Language.PureScript.Errors.MultipleErrors))
                                                 @ s
                                                 $dMonadError
  = Language.PureScript.Interactive.$s$fMonadErroreStateT1 @ s
"SPEC/Language.PureScript.Interactive $fMonadExceptT @ (WriterT
                                                         MultipleErrors Identity) _" [orphan] forall @ e
                                                                                                                                                                     (v :: GHC.Base.Monad
                                                                                                                                                                             (Control.Monad.Trans.Writer.Strict.WriterT
                                                                                                                                                                                Language.PureScript.Errors.MultipleErrors
                                                                                                                                                                                Data.Functor.Identity.Identity))
  Control.Monad.Trans.Except.$fMonadExceptT @ (Control.Monad.Trans.Writer.Strict.WriterT
                                                 Language.PureScript.Errors.MultipleErrors
                                                 Data.Functor.Identity.Identity)
                                            @ e
                                            v
  = Language.PureScript.Interactive.$s$fApplicativeStateT_$s$fMonadExceptT
      @ e
"SPEC/Language.PureScript.Interactive $fMonadStateT @ (ExceptT
                                                        MultipleErrors (Writer MultipleErrors)) _" [orphan] forall @ s
                                                                                                                                                                                  (v :: GHC.Base.Monad
                                                                                                                                                                                          (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                             Language.PureScript.Errors.MultipleErrors
                                                                                                                                                                                             (Control.Monad.Trans.Writer.Strict.Writer
                                                                                                                                                                                                Language.PureScript.Errors.MultipleErrors)))
  Control.Monad.Trans.State.Strict.$fMonadStateT @ (Control.Monad.Trans.Except.ExceptT
                                                      Language.PureScript.Errors.MultipleErrors
                                                      (Control.Monad.Trans.Writer.Strict.Writer
                                                         Language.PureScript.Errors.MultipleErrors))
                                                 @ s
                                                 v
  = Language.PureScript.Interactive.$s$fMonadErroreStateT_$s$fMonadStateT
      @ s
"SPEC/Language.PureScript.Interactive $fMonadStateT_$c>> @ (ExceptT
                                                             MultipleErrors
                                                             (Writer MultipleErrors)) _" [orphan] forall @ s
                                                                                                                                                                                                                                                         ($dMonad :: GHC.Base.Monad
                                                                                                                                                                                                                                                                       (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                                                                                          Language.PureScript.Errors.MultipleErrors
                                                                                                                                                                                                                                                                          (Control.Monad.Trans.Writer.Strict.Writer
                                                                                                                                                                                                                                                                             Language.PureScript.Errors.MultipleErrors)))
  Control.Monad.Trans.State.Strict.$fMonadStateT_$c>> @ (Control.Monad.Trans.Except.ExceptT
                                                           Language.PureScript.Errors.MultipleErrors
                                                           (Control.Monad.Trans.Writer.Strict.Writer
                                                              Language.PureScript.Errors.MultipleErrors))
                                                      @ s
                                                      $dMonad
  = Language.PureScript.Interactive.$s$fMonadErroreStateT_$s$fMonadStateT_$c>>
      @ s
"SPEC/Language.PureScript.Interactive $fMonadStateT_$c>>= @ (ExceptT
                                                              MultipleErrors
                                                              (Writer MultipleErrors)) _" [orphan] forall @ s
                                                                                                                                                                                                                                                            ($dMonad :: GHC.Base.Monad
                                                                                                                                                                                                                                                                          (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                                                                                             Language.PureScript.Errors.MultipleErrors
                                                                                                                                                                                                                                                                             (Control.Monad.Trans.Writer.Strict.Writer
                                                                                                                                                                                                                                                                                Language.PureScript.Errors.MultipleErrors)))
  Control.Monad.Trans.State.Strict.$fMonadStateT_$c>>= @ (Control.Monad.Trans.Except.ExceptT
                                                            Language.PureScript.Errors.MultipleErrors
                                                            (Control.Monad.Trans.Writer.Strict.Writer
                                                               Language.PureScript.Errors.MultipleErrors))
                                                       @ s
                                                       $dMonad
  = Language.PureScript.Interactive.$s$fMonadErroreStateT_$s$fMonadStateT_$c>>=
      @ s
"SPEC/Language.PureScript.Interactive $fMonadStateT_$cfail @ (ExceptT
                                                               MultipleErrors
                                                               (Writer MultipleErrors)) _" [orphan] forall @ s
                                                                                                                                                                                                                                                               ($dMonad :: GHC.Base.Monad
                                                                                                                                                                                                                                                                             (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                                                                                                Language.PureScript.Errors.MultipleErrors
                                                                                                                                                                                                                                                                                (Control.Monad.Trans.Writer.Strict.Writer
                                                                                                                                                                                                                                                                                   Language.PureScript.Errors.MultipleErrors)))
  Control.Monad.Trans.State.Strict.$fMonadStateT_$cfail @ (Control.Monad.Trans.Except.ExceptT
                                                             Language.PureScript.Errors.MultipleErrors
                                                             (Control.Monad.Trans.Writer.Strict.Writer
                                                                Language.PureScript.Errors.MultipleErrors))
                                                        @ s
                                                        $dMonad
  = Language.PureScript.Interactive.$s$fMonadErroreStateT_$s$fMonadStateT_$cfail
      @ s
"SPEC/Language.PureScript.Interactive $fMonadStatesStateT @ (ExceptT
                                                              MultipleErrors
                                                              (Writer MultipleErrors)) _" [orphan] forall @ s
                                                                                                                                                                                                                                                            (v :: GHC.Base.Monad
                                                                                                                                                                                                                                                                    (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                                                                                       Language.PureScript.Errors.MultipleErrors
                                                                                                                                                                                                                                                                       (Control.Monad.Trans.Writer.Strict.Writer
                                                                                                                                                                                                                                                                          Language.PureScript.Errors.MultipleErrors)))
  Control.Monad.State.Class.$fMonadStatesStateT @ (Control.Monad.Trans.Except.ExceptT
                                                     Language.PureScript.Errors.MultipleErrors
                                                     (Control.Monad.Trans.Writer.Strict.Writer
                                                        Language.PureScript.Errors.MultipleErrors))
                                                @ s
                                                v
  = Language.PureScript.Interactive.$s$fMonadStatesStateT @ s
"SPEC/Language.PureScript.Interactive $fMonadWriterT @ MultipleErrors @ Identity" [orphan] forall (v1 :: GHC.Base.Monad
                                                                                                           Data.Functor.Identity.Identity)
                                                                                                  (v :: GHC.Base.Monoid
                                                                                                          Language.PureScript.Errors.MultipleErrors)
  Control.Monad.Trans.Writer.Strict.$fMonadWriterT @ Language.PureScript.Errors.MultipleErrors
                                                   @ Data.Functor.Identity.Identity
                                                   v
                                                   v1
  = Language.PureScript.Interactive.$s$fApplicativeStateT_$s$fMonadWriterT
"SPEC/Language.PureScript.Interactive $fMonadWriterT_$c>> @ MultipleErrors @ Identity" [orphan] forall ($dMonad :: GHC.Base.Monad
                                                                                                                     Data.Functor.Identity.Identity)
                                                                                                       ($dMonoid :: GHC.Base.Monoid
                                                                                                                      Language.PureScript.Errors.MultipleErrors)
  Control.Monad.Trans.Writer.Strict.$fMonadWriterT_$c>> @ Language.PureScript.Errors.MultipleErrors
                                                        @ Data.Functor.Identity.Identity
                                                        $dMonoid
                                                        $dMonad
  = Language.PureScript.Interactive.$s$fApplicativeStateT_$s$fMonadWriterT_$c>>
"SPEC/Language.PureScript.Interactive $fMonadWriterT_$c>>= @ MultipleErrors @ Identity" [orphan] forall ($dMonad :: GHC.Base.Monad
                                                                                                                      Data.Functor.Identity.Identity)
                                                                                                        ($dMonoid :: GHC.Base.Monoid
                                                                                                                       Language.PureScript.Errors.MultipleErrors)
  Control.Monad.Trans.Writer.Strict.$fMonadWriterT_$c>>= @ Language.PureScript.Errors.MultipleErrors
                                                         @ Data.Functor.Identity.Identity
                                                         $dMonoid
                                                         $dMonad
  = Language.PureScript.Interactive.$s$fApplicativeStateT_$s$fMonadWriterT_$c>>=
"SPEC/Language.PureScript.Interactive $fMonadWriterT_$cfail @ MultipleErrors @ Identity" [orphan] forall ($dMonad :: GHC.Base.Monad
                                                                                                                       Data.Functor.Identity.Identity)
                                                                                                         ($dMonoid :: GHC.Base.Monoid
                                                                                                                        Language.PureScript.Errors.MultipleErrors)
  Control.Monad.Trans.Writer.Strict.$fMonadWriterT_$cfail @ Language.PureScript.Errors.MultipleErrors
                                                          @ Data.Functor.Identity.Identity
                                                          $dMonoid
                                                          $dMonad
  = Language.PureScript.Interactive.$s$fApplicativeStateT_$s$fMonadWriterT_$cfail
"SPEC/Language.PureScript.Interactive fromList @ ModuleName" [orphan] forall ($dOrd :: GHC.Classes.Ord
                                                                                         Language.PureScript.Names.ModuleName)
  Data.Set.Internal.fromList @ Language.PureScript.Names.ModuleName
                             $dOrd
  = Language.PureScript.Interactive.$sfromList
"SPEC/Language.PureScript.Interactive fromList @ ModuleName _" [orphan] forall @ a
                                                                               ($dOrd :: GHC.Classes.Ord
                                                                                           Language.PureScript.Names.ModuleName)
  Data.Map.Internal.fromList @ Language.PureScript.Names.ModuleName
                             @ a
                             $dOrd
  = Language.PureScript.Interactive.$sfromList1 @ a
"SPEC/Language.PureScript.Interactive put @ (ExceptT
                                              MultipleErrors (Writer MultipleErrors)) _" [orphan] forall @ s
                                                                                                                                                              ($dMonad :: GHC.Base.Monad
                                                                                                                                                                            (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                               Language.PureScript.Errors.MultipleErrors
                                                                                                                                                                               (Control.Monad.Trans.Writer.Strict.Writer
                                                                                                                                                                                  Language.PureScript.Errors.MultipleErrors)))
  Control.Monad.Trans.State.Strict.put @ (Control.Monad.Trans.Except.ExceptT
                                            Language.PureScript.Errors.MultipleErrors
                                            (Control.Monad.Trans.Writer.Strict.Writer
                                               Language.PureScript.Errors.MultipleErrors))
                                       @ s
                                       $dMonad
  = Language.PureScript.Interactive.$s$fMonadStatesStateT_$sput @ s
"SPEC/Language.PureScript.Interactive state @ (ExceptT
                                                MultipleErrors (Writer MultipleErrors)) _ _" [orphan] forall @ s
                                                                                                                                                                    @ a
                                                                                                                                                                    ($dMonad :: GHC.Base.Monad
                                                                                                                                                                                  (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                     Language.PureScript.Errors.MultipleErrors
                                                                                                                                                                                     (Control.Monad.Trans.Writer.Strict.Writer
                                                                                                                                                                                        Language.PureScript.Errors.MultipleErrors)))
  Control.Monad.Trans.State.Strict.state @ (Control.Monad.Trans.Except.ExceptT
                                              Language.PureScript.Errors.MultipleErrors
                                              (Control.Monad.Trans.Writer.Strict.Writer
                                                 Language.PureScript.Errors.MultipleErrors))
                                         @ s
                                         @ a
                                         $dMonad
  = Language.PureScript.Interactive.$s$fMonadStatesStateT_$sstate
      @ s
      @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

