
==================== FINAL INTERFACE ====================
2018-11-30 20:48:24.035039 UTC

interface purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Interactive 8043
  interface hash: 063f3197d343ff090ed08b39b33dfc42
  ABI hash: a12ce7755fdd70b3d810ee8036fc44b7
  export-list hash: 2b4d06b74a79ed5c4393f5549f96e7c6
  orphan hash: 3d5d55aacba70978d38a57d23d8d4ade
  flag hash: 2ae478d21823b7c739b1b08c46262eb0
  opt_hash: 2c98c95d41c045ae9c2fb565ec8aabc6
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Language.PureScript.Interactive.handleCommand
  Language.PureScript.Interactive.make
  Language.PureScript.Interactive.runMake
  Language.PureScript.Interactive.Completion.completion
  Language.PureScript.Interactive.Completion.completion'
  Language.PureScript.Interactive.Completion.formatCompletions
  Language.PureScript.Interactive.Completion.liftCompletionM
  Language.PureScript.Interactive.IO.findNodeProcess
  Language.PureScript.Interactive.IO.getHistoryFilename
  Language.PureScript.Interactive.Message.guideURL
  Language.PureScript.Interactive.Message.helpMessage
  Language.PureScript.Interactive.Message.noInputMessage
  Language.PureScript.Interactive.Message.prologueMessage
  Language.PureScript.Interactive.Message.quitMessage
  Language.PureScript.Interactive.Message.supportModuleMessage
  Language.PureScript.Interactive.Module.createTemporaryModule
  Language.PureScript.Interactive.Module.createTemporaryModuleForImports
  Language.PureScript.Interactive.Module.createTemporaryModuleForKind
  Language.PureScript.Interactive.Module.importDecl
  Language.PureScript.Interactive.Module.indexFile
  Language.PureScript.Interactive.Module.internalSpan
  Language.PureScript.Interactive.Module.loadAllModules
  Language.PureScript.Interactive.Module.loadModule
  Language.PureScript.Interactive.Module.modulesDir
  Language.PureScript.Interactive.Module.supportModuleIsDefined
  Language.PureScript.Interactive.Module.supportModuleName
  Language.PureScript.Interactive.Parser.parseCommand
  Language.PureScript.Interactive.Parser.parseDotFile
  Language.PureScript.Interactive.Printer.printModuleSignatures
  Language.PureScript.Interactive.Printer.textT
  Language.PureScript.Interactive.Types.initialPSCiState
  Language.PureScript.Interactive.Types.parseReplQuery
  Language.PureScript.Interactive.Types.psciEnvironment
  Language.PureScript.Interactive.Types.psciExports
  Language.PureScript.Interactive.Types.psciImportedModuleNames
  Language.PureScript.Interactive.Types.psciImportedModules
  Language.PureScript.Interactive.Types.psciImports
  Language.PureScript.Interactive.Types.psciLetBindings
  Language.PureScript.Interactive.Types.psciLoadedExterns
  Language.PureScript.Interactive.Types.replQueries
  Language.PureScript.Interactive.Types.replQueryStrings
  Language.PureScript.Interactive.Types.showReplQuery
  Language.PureScript.Interactive.Types.updateImportExports
  Language.PureScript.Interactive.Types.updateImportedModules
  Language.PureScript.Interactive.Types.updateLets
  Language.PureScript.Interactive.Types.updateLoadedExterns
  Language.PureScript.Interactive.Completion.CompletionM
  Language.PureScript.Interactive.Types.Command{Language.PureScript.Interactive.Types.BrowseModule Language.PureScript.Interactive.Types.ClearState Language.PureScript.Interactive.Types.CompleteStr Language.PureScript.Interactive.Types.Decls Language.PureScript.Interactive.Types.Expression Language.PureScript.Interactive.Types.Import Language.PureScript.Interactive.Types.KindOf Language.PureScript.Interactive.Types.PasteLines Language.PureScript.Interactive.Types.QuitPSCi Language.PureScript.Interactive.Types.ReloadState Language.PureScript.Interactive.Types.ReloadVariableState Language.PureScript.Interactive.Types.ShowHelp Language.PureScript.Interactive.Types.ShowInfo Language.PureScript.Interactive.Types.TypeOf}
  Language.PureScript.Interactive.Types.Directive{Language.PureScript.Interactive.Types.Browse Language.PureScript.Interactive.Types.Clear Language.PureScript.Interactive.Types.Complete Language.PureScript.Interactive.Types.Help Language.PureScript.Interactive.Types.Kind Language.PureScript.Interactive.Types.Paste Language.PureScript.Interactive.Types.Quit Language.PureScript.Interactive.Types.Reload Language.PureScript.Interactive.Types.ReloadV Language.PureScript.Interactive.Types.Show Language.PureScript.Interactive.Types.Type}
  Language.PureScript.Interactive.Types.ImportedModule
  Language.PureScript.Interactive.Types.PSCiConfig{Language.PureScript.Interactive.Types.PSCiConfig psciFileGlobs}
  Language.PureScript.Interactive.Types.PSCiState{Language.PureScript.Interactive.Types.PSCiState}
  Language.PureScript.Interactive.Types.ReplQuery{Language.PureScript.Interactive.Types.QueryImport Language.PureScript.Interactive.Types.QueryLoaded}
module dependencies: Control.Monad.Logger Control.Monad.Supply
                     Control.Monad.Supply.Class Language.PureScript
                     Language.PureScript.AST Language.PureScript.AST.Binders
                     Language.PureScript.AST.Declarations
                     Language.PureScript.AST.Exported Language.PureScript.AST.Literals
                     Language.PureScript.AST.Operators Language.PureScript.AST.SourcePos
                     Language.PureScript.AST.Traversals Language.PureScript.Bundle
                     Language.PureScript.CodeGen.JS
                     Language.PureScript.CodeGen.JS.Common
                     Language.PureScript.CodeGen.JS.Printer Language.PureScript.Comments
                     Language.PureScript.Constants Language.PureScript.CoreFn
                     Language.PureScript.CoreFn.Ann Language.PureScript.CoreFn.Binders
                     Language.PureScript.CoreFn.Desugar Language.PureScript.CoreFn.Expr
                     Language.PureScript.CoreFn.Meta Language.PureScript.CoreFn.Module
                     Language.PureScript.CoreFn.Optimizer
                     Language.PureScript.CoreFn.ToJSON
                     Language.PureScript.CoreFn.Traversals
                     Language.PureScript.CoreImp.AST
                     Language.PureScript.CoreImp.Optimizer
                     Language.PureScript.CoreImp.Optimizer.Blocks
                     Language.PureScript.CoreImp.Optimizer.Common
                     Language.PureScript.CoreImp.Optimizer.Inliner
                     Language.PureScript.CoreImp.Optimizer.MagicDo
                     Language.PureScript.CoreImp.Optimizer.TCO
                     Language.PureScript.CoreImp.Optimizer.Unused
                     Language.PureScript.Crash Language.PureScript.Environment
                     Language.PureScript.Errors Language.PureScript.Externs
                     Language.PureScript.Interactive.Completion
                     Language.PureScript.Interactive.Directive
                     Language.PureScript.Interactive.IO
                     Language.PureScript.Interactive.Message
                     Language.PureScript.Interactive.Module
                     Language.PureScript.Interactive.Parser
                     Language.PureScript.Interactive.Printer
                     Language.PureScript.Interactive.Types Language.PureScript.Kinds
                     Language.PureScript.Label Language.PureScript.Linter
                     Language.PureScript.Linter.Exhaustive
                     Language.PureScript.Linter.Imports Language.PureScript.Make
                     Language.PureScript.Make.Actions Language.PureScript.Make.BuildPlan
                     Language.PureScript.Make.Monad
                     Language.PureScript.ModuleDependencies Language.PureScript.Names
                     Language.PureScript.Options Language.PureScript.PSString
                     Language.PureScript.Parser Language.PureScript.Parser.Common
                     Language.PureScript.Parser.Declarations
                     Language.PureScript.Parser.Kinds Language.PureScript.Parser.Lexer
                     Language.PureScript.Parser.State Language.PureScript.Parser.Types
                     Language.PureScript.Pretty Language.PureScript.Pretty.Common
                     Language.PureScript.Pretty.Kinds Language.PureScript.Pretty.Types
                     Language.PureScript.Pretty.Values
                     Language.PureScript.Publish.BoxesHelpers
                     Language.PureScript.Renamer Language.PureScript.Sugar
                     Language.PureScript.Sugar.AdoNotation
                     Language.PureScript.Sugar.BindingGroups
                     Language.PureScript.Sugar.CaseDeclarations
                     Language.PureScript.Sugar.DoNotation
                     Language.PureScript.Sugar.LetPattern
                     Language.PureScript.Sugar.Names
                     Language.PureScript.Sugar.Names.Common
                     Language.PureScript.Sugar.Names.Env
                     Language.PureScript.Sugar.Names.Exports
                     Language.PureScript.Sugar.Names.Imports
                     Language.PureScript.Sugar.ObjectWildcards
                     Language.PureScript.Sugar.Operators
                     Language.PureScript.Sugar.Operators.Binders
                     Language.PureScript.Sugar.Operators.Common
                     Language.PureScript.Sugar.Operators.Expr
                     Language.PureScript.Sugar.Operators.Types
                     Language.PureScript.Sugar.TypeClasses
                     Language.PureScript.Sugar.TypeClasses.Deriving
                     Language.PureScript.Sugar.TypeDeclarations
                     Language.PureScript.Traversals Language.PureScript.TypeChecker
                     Language.PureScript.TypeChecker.Entailment
                     Language.PureScript.TypeChecker.Kinds
                     Language.PureScript.TypeChecker.Monad
                     Language.PureScript.TypeChecker.Skolems
                     Language.PureScript.TypeChecker.Subsumption
                     Language.PureScript.TypeChecker.Synonyms
                     Language.PureScript.TypeChecker.TypeSearch
                     Language.PureScript.TypeChecker.Types
                     Language.PureScript.TypeChecker.Unify
                     Language.PureScript.TypeClassDictionaries Language.PureScript.Types
                     Paths_purescript System.IO.UTF8
package dependencies: Glob-0.9.2 aeson-1.3.1.1
                      aeson-better-errors-0.9.1.0 ansi-terminal-0.8.0.4 array-0.5.2.0
                      async-2.2.1 attoparsec-0.13.2.2 base-4.11.1.0 base-compat-0.10.4
                      binary-0.8.5.1 blaze-builder-0.4.1.0 boxes-0.1.5
                      bytestring-0.10.8.2 colour-2.3.4 containers-0.5.11.0
                      data-ordlist-0.4.7.0 deepseq-1.4.3.0 directory-1.3.1.5
                      dlist-0.8.0.4 filepath-1.4.2 ghc-boot-th-8.4.3 ghc-prim-0.5.2.0
                      hashable-1.2.7.0 haskeline-0.7.4.3 integer-gmp-1.0.2.0
                      integer-logarithms-1.0.2.1 language-javascript-0.6.0.11
                      lifted-base-0.2.3.12 microlens-0.4.9.1 microlens-ghc-0.4.9
                      microlens-mtl-0.1.11.1 microlens-platform-0.3.10
                      microlens-th-0.4.2.1 monad-control-1.0.2.3 mtl-2.2.2
                      parallel-3.2.1.1 parsec-3.1.13.0 pattern-arrows-0.0.2
                      pretty-1.1.3.6 primitive-0.6.3.0 protolude-0.2.2 random-1.1
                      safe-0.3.17 scientific-0.3.6.2 sourcemap-0.1.6 split-0.2.3.3
                      stm-2.4.5.0 stringsearch-0.3.6.6 syb-0.7 tagged-0.8.5
                      template-haskell-2.13.0.0 terminfo-0.4.1.1 text-1.2.3.0
                      th-abstraction-0.2.8.0 time-1.8.0.2 time-locale-compat-0.1.1.4
                      transformers-0.5.5.0 transformers-base-0.4.5.2 unix-2.7.2.2
                      unordered-containers-0.2.9.0 utf8-string-1.0.1.1 uuid-types-1.0.3
                      vector-0.12.0.1
orphans: microlens-platform-0.3.10:Lens.Micro.Platform
         microlens-ghc-0.4.9:Lens.Micro.GHC syb-0.7:Data.Generics.Instances
         stm-2.4.5.0:Control.Monad.STM colour-2.3.4:Data.Colour
         attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         vector-0.12.0.1:Data.Vector.Unboxed
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.0:Data.Text.Lazy
         vector-0.12.0.1:Data.Vector.Fusion.Bundle text-1.2.3.0:Data.Text
         binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show
         transformers-0.5.5.0:Control.Monad.Trans.Error
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: aeson-1.3.1.1:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.Graph
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         dlist-0.8.0.4:Data.DList ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         microlens-0.4.9.1:Lens.Micro.Internal
                         microlens-ghc-0.4.9:Lens.Micro.GHC
                         microlens-mtl-0.1.11.1:Lens.Micro.Mtl.Internal
                         microlens-platform-0.3.10:Lens.Micro.Platform
                         monad-control-1.0.2.3:Control.Monad.Trans.Control
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Control.Monad.Logger
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.AST.Declarations
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.AST.Operators
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.AST.SourcePos
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Environment
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Kinds
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Label
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Make.Monad
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Names
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.PSString
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.TypeClassDictionaries
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Types
                         tagged-0.8.5:Data.Tagged
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
                         th-abstraction-0.2.8.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  Glob-0.9.2:System.FilePath.Glob 8625fdb96b8fcebd81114734e6844e2a
import  -/  Glob-0.9.2:System.FilePath.Glob.Directory d42249ffcaa5351009a12b5db988f46f
import  -/  base-4.11.1.0:Control.Monad.IO.Class 96109c36cb3c919872278540487fa39e
import  -/  base-4.11.1.0:Data.Either 39d922b371c4c52d426e9ee66de8371a
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.Functor f522c3501272159820fd6f242510732f
import  -/  base-4.11.1.0:Data.List 83dc843e47bfc0c5af51e19c6f3476d5
import  -/  base-4.11.1.0:Data.Maybe 409c3da2b142470b68be39ce1d97a9f7
import  -/  base-4.11.1.0:Data.OldList 1b35aa3c6805ff7c8887a35a866fe006
import  -/  base-4.11.1.0:Data.Traversable 7ad4edb9184ea1ae8e73f6b94f115c8c
import  -/  base-4.11.1.0:Data.Tuple 3af66f3ac61ed95ba8a3a3f68ebc5003
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.IO 1d5542cc02075c5e948018bfacea89c1
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  base-4.11.1.0:System.IO ce09fff7d191d14067bddc2efd9b53a4
import  -/  base-compat-0.10.4:Prelude.Compat bb6796186ed35a1d09dc34362a3fc27e
import  -/  containers-0.5.11.0:Data.Map 0dbdaec812ef695a364aa6c69e7f7d53
import  -/  containers-0.5.11.0:Data.Map.Internal 0150e210d0ae8df0f3a0669d5e32d8fa
import  -/  containers-0.5.11.0:Data.Set 7d3c64a641be4cacbcd8119445bab919
import  -/  containers-0.5.11.0:Data.Set.Internal 93fa3ef95853aa2a7aadf32d693bd451
import  -/  directory-1.3.1.5:System.Directory bc76216f25ffcaf1c91b529f41ea3bf7
import  -/  directory-1.3.1.5:System.Directory.Internal.Common 88eeec2dd4e3d7d63bc24c2d657e6981
import  -/  filepath-1.4.2:System.FilePath a538d436328dd004b88f7d29a8b244c0
import  -/  filepath-1.4.2:System.FilePath.Posix c021b7a40cfcdd9b08724b5bb7566b59
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  mtl-2.2.2:Control.Monad.Reader.Class a5ac59953d953ab8532b5c11f5e8e0b0
import  -/  mtl-2.2.2:Control.Monad.State.Class acc76e93f44ac4486524db1a327e0a0a
import  -/  mtl-2.2.2:Control.Monad.Writer.Strict e3cd7baae7382fae2917ef7ca8074d86
import  -/  protolude-0.2.2:Protolude 2c2d16096c8a60f59f646a3b93b0eb7b
import  -/  protolude-0.2.2:Protolude.List 3a80368167450d7a4360ebf1ea443345
import  -/  Language.PureScript 055283757289375c92e0f1e11d744c0e
  exports: 01fc85db00ce4cf253ba5c16e07330e5
import  -/  Language.PureScript.AST.Declarations 568e046fbf27b243bfc96f09017d4782
  App 60282620a1433a146ffafd0d8773af87
  Declaration b31d94d0c7b90700d40f9ba6ec420e41
  DeclarationRef 9de74e8b46bfd07e044a72617cc5da5c
  Explicit b1c38eaf46155af7f2da52da8f5861c4
  Expr b31d94d0c7b90700d40f9ba6ec420e41
  Hiding 8116598858a7036038611cde115d4da3
  Implicit 850358a1da5071d49098050ad7d1227d
  KindRef 8245863d9321690e594853e7ff0fdb63
  Literal 25fe050a9db328cb74b9c2f7e7994889
  MkUnguarded b86897bed7e8aa9bc4f5498c0c74ad91
  Module 7cf4b96f7d4b51b446726a099ab87bb6
  ModuleRef 9bebdcb4233f1d570107d6e7f75034d7
  ReExportRef f67e2c43a2cbc62a4a950b387e3ed943
  TypeClassRef 93a0e32770563d43fa3f04289a54725f
  TypeDeclaration a12f822b0dbc597658a7d1e27db5ac22
  TypeDeclarationData 99fd3317c24e020d90e98686ac5a9cec
  TypeInstanceRef 850b5eee032f7eade911f65aaca47804
  TypeOpRef 9ae3d7bbee64a9887c8d95defd65b0b0
  TypeRef f23e4bfa1c94ce55e9357e5fb97176c4
  ValueDecl ccaaa682babb730c1361bddf2c5eee25
  ValueOpRef 340c88beba94c802cc00b112ca1ce8ae
  ValueRef 984b564c7d121e5297a91fc424d0970b
  Var 0202d242cce06e67fa6944b3c05a8982
  getModuleName 578b1d81b22244b5aeca14680df8f57d
import  -/  Language.PureScript.AST.Literals 3440d35205601002007fae6139f2b416
  ObjectLiteral 6a79fd56232b94e65385c3eab269a6a5
import  -/  Language.PureScript.AST.SourcePos b3f67f807f2dce79528bbb15bd9c7104
  nullSourceSpan 24686a17cbb8e08b60ddb2b502e97316
import  -/  Language.PureScript.Constants d290cccb0db8657cab5f1253ab0da1ee
  exports: cd83a0f5b6591e5c66c598e34359260d
  primModules d9355e396a04309f4d117a0106a262c8
import  -/  Language.PureScript.Crash 1bc11bf824676e9581610d0d05d26761
  internalError f3db7e23c75878c9d13888d6d114012d
import  -/  Language.PureScript.Environment 31667499b7017b19998bb405474fbe93
  Environment c291d940fae22a3f1400d8c90f26bdd4
  Public 167adf8dc42c910fd600ab439657b017
  initEnvironment 7e43632077c77373180c2c3d6aac18ae
  names c291d940fae22a3f1400d8c90f26bdd4
  typeSynonyms c291d940fae22a3f1400d8c90f26bdd4
import  -/  Language.PureScript.Errors 15d6eb6b2d4d480750061a0585d4e64c
  MultipleErrors ad1de73a1d5a6b0ccd9657dedebc94f3
  defaultPPEOptions 21c4c963ab953c0b8bd75ee82fd5c9f2
  ppeRelativeDirectory 37dce5890976a3a862fc1f4b820d7aef
  prettyPrintMultipleErrors 4aa93ae5a9ef68ba85aa2d04599d93ff
import  -/  Language.PureScript.Externs 17598d5385c46f650a2a55de08912a53
  ExternsFile b2e76f24ecba17bf3b946e078a8414b6
  applyExternsFileToEnvironment c56361d10b2931793da8568bf3fc9c13
import  -/  Language.PureScript.Interactive.Completion 524618b1515a6d351aa35c62eb5d336b
  exports: 043e50d84e51660200a2d9598accf1eb
  CompletionM 63554d6023096b7add387e29b8aa6861
  completion fac4e0adc7f07f0ddf81627e2c798c26
  completion' e05293776bf2aebf3f5408dc17dac100
  formatCompletions c0c6b13ce9eadd9a04f029f6b42c535f
  liftCompletionM 984c74ca6fd69944e40196ed30c26c0e
import  -/  Language.PureScript.Interactive.IO b1c5ce61acd8876be2ed86384ba77724
  exports: 94bd8e06a2ed25bff90c8e17834e488b
  findNodeProcess 08f2ddefb47f29aa9a71dbdc82dbab60
  getHistoryFilename eaaccd4a327cf8f60b446820d4695f34
import  -/  Language.PureScript.Interactive.Message af2718e22728b0bf0a7787c91ae938ac
  exports: 92dad8b7d97db31bdc264a4ada103a4e
  guideURL 5ca5724f502ab735d7257e2c9e61c2c7
  helpMessage e03c864aab15d037bc36a7c1da197ea6
  noInputMessage 7c411d65e31960a508af365159e58ec4
  prologueMessage 0113adebad879a8a183db22347966a45
  quitMessage 65f2c9122b69f9cb38ba1535915c7e85
  supportModuleMessage eeaaedc0122d7a4f496a4bb4e056c644
import  -/  Language.PureScript.Interactive.Module 38e4acf60ad7ffa304419054a4739f7c
  exports: a9df73f169fb414c318ba3caa6fe7131
  createTemporaryModule fe0c1942d65532f69ffb240aec7ed924
  createTemporaryModuleForImports fe10ef2a983d0cfd63321c914e6ebf70
  createTemporaryModuleForKind 8ff872146fccfa7b48205e019a113cdd
  importDecl 1718a22ff09d47376e60b14e4a3404fb
  indexFile 7fb4e204423f8e98035956bda482d094
  internalSpan 135abc07b7c7313ce20997f2b551caff
  loadAllModules 75d217ab2be8a7503fc18e06293f63ce
  loadModule 720ea825c7fb3a3c9f1af02110f8ef16
  modulesDir 368669dcb3d4c8d6a8b7441d070b34b5
  supportModuleIsDefined ddf5e4cdf6f377144178df241334d8ab
  supportModuleName d3b2c1ab5b8b61f4ed75589827021056
import  -/  Language.PureScript.Interactive.Parser a1989291f0edce9f5b478ca4fc52115f
  exports: 1c2637e9fbac42a4ac24a19eb56695f9
  parseCommand c0491328c8628d8754d48be5f759b940
  parseDotFile e052571a7d183444a8f50e974b34f91d
import  -/  Language.PureScript.Interactive.Printer 02cb341e6adffc4d60089660a5b10226
  exports: 84fa4a3244dea9735489358880af4ffc
  printModuleSignatures 3f56422589ddbd4f116a40ba9c9d5da7
  textT 0acc92380dda6a321eba0a582eeec3e4
import  -/  Language.PureScript.Interactive.Types 3ce82c8ef1b298c922daa3739e0e39a4
  exports: 720882d0a070fd7ca0bf1b7bc77c153a
  Browse d3b8549ef24bee7ebe65cb38eb17335e
  BrowseModule 0929ec0d6bfcae35cd234c68ae62a37f
  Clear e274c554162f2ef6f066634a71bd1d97
  ClearState 074080d3d189701410e7edeeb23f3580
  Command bbe66beb3be641e2ba0166b7a498957b
  Complete 964c91350f87833a8599e583f0e62e9a
  CompleteStr 65edf38b878e7c49f92a7dd2e2ee66e4
  Decls c1738849fe8d9ace590dd436f52b410d
  Directive 6d04fdb5e26b466ffd22b01b64e3342d
  Expression b2ff218f4b46e1b424fbf44b5dd54fa7
  Help a5c71dc8380390df3219d31bcea5b14d
  Import 893b8d05207d31d661e220a5dd712a4e
  ImportedModule 3f1b4508dee4fbba31a4a64cf09c98ba
  Kind 6fe4acd55dfa7ab7ae53d80844953cb1
  KindOf c886387a5a0449b25da555bc34bb3fad
  PSCiConfig 804fe025364165953c8aaa8e2c05dbe3
  PSCiConfig 41419e455c8d61ff11d56793d4f68c48
  PSCiState 15ca5caace84b5884c52f12cd5075c78
  PSCiState f802fa09b94f8d7be8d3d7d42508ed4f
  Paste 3c646746b17b57fc570accbea747151b
  PasteLines fbb41165055621e1911cb29bc1ac3f12
  QueryImport 7698c6c6e2b3a5badd6fdef5121de71d
  QueryLoaded 4f7ba5aaf8246cbbc44361b6370a19bb
  Quit a869b821d307a203043f2e3c54e94e87
  QuitPSCi afdd0f6cb4ff31be990edd25e203563d
  Reload aadccc58414d5d1139bdb54e82c875f0
  ReloadState fdb71f29852876d50d403ec880969289
  ReloadV 30214530475c56a615ce2651f66893d0
  ReloadVariableState 5153715819027ad15e18130455ce3d0a
  ReplQuery 4484fd29d895671a056057576a9a07ef
  Show 712f875a45ac39da1020f17d29de0109
  ShowHelp 70e9f7f9e83de446028d30ff0179ee92
  ShowInfo 4977323b98731ae9b357ca20448f1a0e
  Type 4b419e10e321de3d96c8a0004a82d2f6
  TypeOf 8765b029d74af5bbe62dc90dfe970f1d
  initialPSCiState a43dd1376bf837a7220312dcde88b9b3
  parseReplQuery 5fc5f100d81eff2319a25228310423fa
  psciEnvironment a688d138fbb7c78a73eb16625b8cc41c
  psciExports 49de8076178644440a52845dfb56ea90
  psciFileGlobs 41419e455c8d61ff11d56793d4f68c48
  psciImportedModuleNames 0adad9e249da2668eccac3a42f0de2d5
  psciImportedModules 5289f97505947f7480177aa803abfb88
  psciImports 89b802f8a95122de853dd26c101509bd
  psciLetBindings 46ab95524e195448e830b5f2c5671ccb
  psciLoadedExterns 3e2267ddb1449aa03ec020531a8a9e91
  replQueries 763d44e99c4db04000346335479c40b1
  replQueryStrings 5e2085733802f5d9257bec4ae11aaa0e
  showReplQuery 3463f95633ec65d5979ebaf498d96b8e
  updateImportExports 02190740b8a4d82fa6f5538bff831cbc
  updateImportedModules b6bb88dfe20b799585c531431a2c15c8
  updateLets 3c15e42143916163f9fe3813579781ee
  updateLoadedExterns 679f29e7353ca0632fecdeb8ee60ea47
import  -/  Language.PureScript.Make 713a2fc5192c903bd4cdae68219dcbe6
  inferForeignModules f8d56df90d1c2a51c39705ec4ded62bf
  make 0b58810beec91fbca08f61a18fd79251
  rebuildModule 4ffb6962b766117a5afb6f43a697b701
import  -/  Language.PureScript.Make.Actions e063664ba4322d93370f5867c4f87435
  MakeActions 3d0bef297a2110ab738574f1f980a96f
  RebuildAlways b94fbe68b9aa06f782c873cc554ae11c
  RebuildPolicy dc23e87659656978c63bb77d0007e1f3
  buildMakeActions 8edae1aecd538f1dde247973ebaaef4f
  progress 3d0bef297a2110ab738574f1f980a96f
import  -/  Language.PureScript.Make.Monad 0cf50a6714897adf0be9853da80fce0b
  Make 3e3b14b08c410e5ba3c590f1d3af7206
  runMake 8977069e35c039b39b7cc3a8ba1933f5
import  -/  Language.PureScript.Names b3bf151840f3e8f2eb61eff186432886
  exports: f7f3503d20957194bda83c16bb5f1288
  Ident 0ccd7f2221de64569e50634367691253
  ModuleName 0cb2c8b6c90c347a41315bf0e0fd925c
  ModuleName 5a70062bbdf29e6dc659ad8bf5326b50
  ProperName 9eb330c84db102abf2d0f2652fe4a144
  Qualified d600a7f01c8203cf5504999de99c923c
  mkQualified b0a7675f8f28abc4eb1712d5b786c286
  runIdent bc5cc3d3ba9d105c169eb6038c65d1a8
  runModuleName e07c63fa3ece350e6976663ef993edbb
  runProperName 29f101e190cc99df85623423972e606f
  showOp 6a554085bb7bff6e6a827b374081272a
import  -/  Language.PureScript.Options 41178707a96359e93f10aa9345b25f64
  defaultOptions 48c52e5e8f11e1286056b69e62c52460
import  -/  Language.PureScript.Pretty.Kinds 61520f24125a18b860156c88cb953ccd
  prettyPrintKind 7cb5c666396112b6de1d2e646e595fab
import  -/  Language.PureScript.Pretty.Types 55abc63b15198d7c72c92dad86c3e447
  prettyPrintType cc66574a7951d989b0a885f58cf82665
import  -/  Language.PureScript.TypeChecker.Kinds b53b0498ce052fc5d101d2ed5b824cab
  kindOf 26a7df2f638aaba66e351082b7743d8f
import  -/  Language.PureScript.TypeChecker.Monad 36a86b5cfef989dae17621bbace19db6
  CheckState 5c23016b2e80baec4bdda0c92644cfa1
  checkCurrentModule 5c23016b2e80baec4bdda0c92644cfa1
  emptyCheckState b22dfcf495287a9495d33db1875afeb2
import  -/  Language.PureScript.Types 74562e642f5297557b3a23aac7819ad1
  Type 93223f8afa90d0facc05a03f863dc72d
  TypeApp 8aa2c93426facb8054d5caf77ff9d922
  TypeConstructor 5e1c42d22ac701f08c049fde0171d9ac
  TypeWildcard d993619c31ecd71f696448ee686f32f4
import  -/  text-1.2.3.0:Data.Text 7daa7e6c9b39d8cc1679e5ec5c64d2be
import  -/  text-1.2.3.0:Data.Text.Internal 30a0a123f71f63b26cd34c6b24f23411
import  -/  text-1.2.3.0:Data.Text.Show 3b4b6fb2985a731022d67f636682da2b
import  -/  transformers-0.5.5.0:Control.Monad.Trans.Except 1cac4acbba7f36bd732fcc993d3cc20d
import  -/  transformers-0.5.5.0:Control.Monad.Trans.State.Strict 04b71a3f25b12af5c8b92a12d96be4c4
import  -/  transformers-0.5.5.0:Control.Monad.Trans.Writer.Strict 1cbd139bf8e92032997c41b58cb8e1af
5c4781edb5e5429387ac2bbaaf6866a9
  $s$fApplicativeStateT ::
    GHC.Base.Applicative
      (Control.Monad.Trans.State.Strict.StateT
         s
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Errors.MultipleErrors
            (Control.Monad.Trans.Writer.Strict.Writer
               Language.PureScript.Errors.MultipleErrors)))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ s.
                  @ (Control.Monad.Trans.State.Strict.StateT
                       s
                       (Control.Monad.Trans.Except.ExceptT
                          Language.PureScript.Errors.MultipleErrors
                          (Control.Monad.Trans.Writer.Strict.Writer
                             Language.PureScript.Errors.MultipleErrors)))
                  (Language.PureScript.Interactive.$s$fApplicativeStateT_$s$fFunctorStateT
                     @ s)
                  (Language.PureScript.Interactive.$s$fApplicativeStateT_$s$fApplicativeStateT_$cpure
                     @ s)
                  (Language.PureScript.Interactive.$s$fApplicativeStateT_$s$fApplicativeStateT_$c<*>
                     @ s)
                  (Control.Monad.Trans.State.Strict.$fAlternativeStateT4
                     @ (Control.Monad.Trans.Except.ExceptT
                          Language.PureScript.Errors.MultipleErrors
                          (Control.Monad.Trans.Writer.Strict.Writer
                             Language.PureScript.Errors.MultipleErrors))
                     @ s
                     Language.PureScript.Interactive.$s$fApplicativeStateT_v
                     (Language.PureScript.Interactive.$s$fApplicativeStateT_$s$fMonadExceptT
                        @ Language.PureScript.Errors.MultipleErrors))
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N) (c :: <*>_N).
                   <a -> b -> c>_R
                   ->_R <Control.Monad.Trans.State.Strict.StateT
                           s
                           (Control.Monad.Trans.Except.ExceptT
                              Language.PureScript.Errors.MultipleErrors
                              (Control.Monad.Trans.Writer.Strict.Writer
                                 Language.PureScript.Errors.MultipleErrors))
                           a>_R
                   ->_R <Control.Monad.Trans.State.Strict.StateT
                           s
                           (Control.Monad.Trans.Except.ExceptT
                              Language.PureScript.Errors.MultipleErrors
                              (Control.Monad.Trans.Writer.Strict.Writer
                                 Language.PureScript.Errors.MultipleErrors))
                           b>_R
                   ->_R Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                 <s>_N
                                 <Control.Monad.Trans.Except.ExceptT
                                    Language.PureScript.Errors.MultipleErrors
                                    (Control.Monad.Trans.Writer.Strict.Writer
                                       Language.PureScript.Errors.MultipleErrors)>_R
                                 <c>_N))
                  (Language.PureScript.Interactive.$s$fApplicativeStateT_$s$fApplicativeStateT_$c*>
                     @ s)
                  (Language.PureScript.Interactive.$s$fApplicativeStateT_$s$fApplicativeStateT1
                     @ s)
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   <Control.Monad.Trans.State.Strict.StateT
                      s
                      (Control.Monad.Trans.Except.ExceptT
                         Language.PureScript.Errors.MultipleErrors
                         (Control.Monad.Trans.Writer.Strict.Writer
                            Language.PureScript.Errors.MultipleErrors))
                      a>_R
                   ->_R <Control.Monad.Trans.State.Strict.StateT
                           s
                           (Control.Monad.Trans.Except.ExceptT
                              Language.PureScript.Errors.MultipleErrors
                              (Control.Monad.Trans.Writer.Strict.Writer
                                 Language.PureScript.Errors.MultipleErrors))
                           b>_R
                   ->_R Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                 <s>_N
                                 <Control.Monad.Trans.Except.ExceptT
                                    Language.PureScript.Errors.MultipleErrors
                                    (Control.Monad.Trans.Writer.Strict.Writer
                                       Language.PureScript.Errors.MultipleErrors)>_R
                                 <a>_N)) -}
8a722d05894afce451c491a5f7ba40b8
  $s$fApplicativeStateT_$s$fApplicativeStateT1 ::
    Control.Monad.Trans.State.Strict.StateT
      s
      (Control.Monad.Trans.Except.ExceptT
         Language.PureScript.Errors.MultipleErrors
         (Control.Monad.Trans.Writer.Strict.Writer
            Language.PureScript.Errors.MultipleErrors))
      a
    -> Control.Monad.Trans.State.Strict.StateT
         s
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Errors.MultipleErrors
            (Control.Monad.Trans.Writer.Strict.Writer
               Language.PureScript.Errors.MultipleErrors))
         b
    -> s
    -> Control.Monad.Trans.Except.ExceptT
         Language.PureScript.Errors.MultipleErrors
         (Control.Monad.Trans.Writer.Strict.Writer
            Language.PureScript.Errors.MultipleErrors)
         (a, s)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S(SL)),1*C1(U(U,U))><L,1*C1(U(1*U,1*U))><L,U>m,
     Unfolding: InlineRule (0, True, False)
                (\ @ s
                   @ a
                   @ b
                   (x :: Control.Monad.Trans.State.Strict.StateT
                           s
                           (Control.Monad.Trans.Except.ExceptT
                              Language.PureScript.Errors.MultipleErrors
                              (Control.Monad.Trans.Writer.Strict.Writer
                                 Language.PureScript.Errors.MultipleErrors))
                           a)
                   (eta :: Control.Monad.Trans.State.Strict.StateT
                             s
                             (Control.Monad.Trans.Except.ExceptT
                                Language.PureScript.Errors.MultipleErrors
                                (Control.Monad.Trans.Writer.Strict.Writer
                                   Language.PureScript.Errors.MultipleErrors))
                             b)
                   (eta1 :: s) ->
                 case (x `cast`
                       (Control.Monad.Trans.State.Strict.N:StateT[0]
                            <s>_N
                            <Control.Monad.Trans.Except.ExceptT
                               Language.PureScript.Errors.MultipleErrors
                               (Control.Monad.Trans.Writer.Strict.Writer
                                  Language.PureScript.Errors.MultipleErrors)>_R
                            <a>_N)
                         eta1)
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <Language.PureScript.Errors.MultipleErrors>_N
                           <Control.Monad.Trans.Writer.Strict.WriterT
                              Language.PureScript.Errors.MultipleErrors
                              Data.Functor.Identity.Identity>_R
                           <(a, s)>_N ; (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                             <Language.PureScript.Errors.MultipleErrors>_N
                                             <Data.Functor.Identity.Identity>_R
                                             <Data.Either.Either
                                                Language.PureScript.Errors.MultipleErrors
                                                (a, s)>_N ; Data.Functor.Identity.N:Identity[0]
                                                                <(Data.Either.Either
                                                                    Language.PureScript.Errors.MultipleErrors
                                                                    (a, s),
                                                                  Language.PureScript.Errors.MultipleErrors)>_R)) of wild { (,) a1 w1 ->
                 case a1 of wild1 {
                   Data.Either.Left x1
                   -> (Data.Either.Left
                         @ Language.PureScript.Errors.MultipleErrors
                         @ (a, s)
                         x1,
                       (GHC.Base.build
                          @ Language.PureScript.AST.Declarations.ErrorMessage
                          (\ @ b1
                             (c :: Language.PureScript.AST.Declarations.ErrorMessage
                                   -> b1 -> b1)[OneShot]
                             (n :: b1)[OneShot] ->
                           GHC.Base.foldr
                             @ Language.PureScript.AST.Declarations.ErrorMessage
                             @ b1
                             c
                             n
                             w1 `cast` (Language.PureScript.Errors.N:MultipleErrors[0])))
                         `cast`
                       (Sym (Language.PureScript.Errors.N:MultipleErrors[0])))
                        `cast`
                      (Sym (Data.Functor.Identity.N:Identity[0]
                                <(Data.Either.Either
                                    Language.PureScript.Errors.MultipleErrors (a, s),
                                  Language.PureScript.Errors.MultipleErrors)>_R) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                             <Language.PureScript.Errors.MultipleErrors>_N
                                                                                             <Data.Functor.Identity.Identity>_R
                                                                                             <Data.Either.Either
                                                                                                Language.PureScript.Errors.MultipleErrors
                                                                                                (a,
                                                                                                 s)>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                   <Language.PureScript.Errors.MultipleErrors>_N
                                                                                                                   <Control.Monad.Trans.Writer.Strict.WriterT
                                                                                                                      Language.PureScript.Errors.MultipleErrors
                                                                                                                      Data.Functor.Identity.Identity>_R
                                                                                                                   <(a,
                                                                                                                     s)>_N)))
                   Data.Either.Right y
                   -> case y of wild2 { (,) a2 s' ->
                      case (eta
                              `cast`
                            (Control.Monad.Trans.State.Strict.N:StateT[0]
                                 <s>_N
                                 <Control.Monad.Trans.Except.ExceptT
                                    Language.PureScript.Errors.MultipleErrors
                                    (Control.Monad.Trans.Writer.Strict.Writer
                                       Language.PureScript.Errors.MultipleErrors)>_R
                                 <b>_N)
                              s')
                             `cast`
                           (Control.Monad.Trans.Except.N:ExceptT[0]
                                <Language.PureScript.Errors.MultipleErrors>_N
                                <Control.Monad.Trans.Writer.Strict.WriterT
                                   Language.PureScript.Errors.MultipleErrors
                                   Data.Functor.Identity.Identity>_R
                                <(b, s)>_N ; (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                  <Language.PureScript.Errors.MultipleErrors>_N
                                                  <Data.Functor.Identity.Identity>_R
                                                  <Data.Either.Either
                                                     Language.PureScript.Errors.MultipleErrors
                                                     (b, s)>_N ; Data.Functor.Identity.N:Identity[0]
                                                                     <(Data.Either.Either
                                                                         Language.PureScript.Errors.MultipleErrors
                                                                         (b, s),
                                                                       Language.PureScript.Errors.MultipleErrors)>_R)) of wild3 { (,) a3 w2 ->
                      case a3 of wild4 {
                        Data.Either.Left e1
                        -> (Data.Either.Left
                              @ Language.PureScript.Errors.MultipleErrors
                              @ (a, s)
                              e1,
                            (GHC.Base.build
                               @ Language.PureScript.AST.Declarations.ErrorMessage
                               (\ @ b1
                                  (c :: Language.PureScript.AST.Declarations.ErrorMessage
                                        -> b1 -> b1)[OneShot]
                                  (n :: b1)[OneShot] ->
                                GHC.Base.foldr
                                  @ Language.PureScript.AST.Declarations.ErrorMessage
                                  @ b1
                                  c
                                  (GHC.Base.foldr
                                     @ Language.PureScript.AST.Declarations.ErrorMessage
                                     @ b1
                                     c
                                     n
                                     w2 `cast` (Language.PureScript.Errors.N:MultipleErrors[0]))
                                  w1 `cast` (Language.PureScript.Errors.N:MultipleErrors[0])))
                              `cast`
                            (Sym (Language.PureScript.Errors.N:MultipleErrors[0])))
                             `cast`
                           (Sym (Data.Functor.Identity.N:Identity[0]
                                     <(Data.Either.Either
                                         Language.PureScript.Errors.MultipleErrors (a, s),
                                       Language.PureScript.Errors.MultipleErrors)>_R) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                                  <Language.PureScript.Errors.MultipleErrors>_N
                                                                                                  <Data.Functor.Identity.Identity>_R
                                                                                                  <Data.Either.Either
                                                                                                     Language.PureScript.Errors.MultipleErrors
                                                                                                     (a,
                                                                                                      s)>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                        <Language.PureScript.Errors.MultipleErrors>_N
                                                                                                                        <Control.Monad.Trans.Writer.Strict.WriterT
                                                                                                                           Language.PureScript.Errors.MultipleErrors
                                                                                                                           Data.Functor.Identity.Identity>_R
                                                                                                                        <(a,
                                                                                                                          s)>_N)))
                        Data.Either.Right x1
                        -> case x1 of wild5 { (,) x2 s'' ->
                           (Data.Either.Right
                              @ Language.PureScript.Errors.MultipleErrors
                              @ (a, s)
                              (a2, s''),
                            (GHC.Base.build
                               @ Language.PureScript.AST.Declarations.ErrorMessage
                               (\ @ b1
                                  (c :: Language.PureScript.AST.Declarations.ErrorMessage
                                        -> b1 -> b1)[OneShot]
                                  (n :: b1)[OneShot] ->
                                GHC.Base.foldr
                                  @ Language.PureScript.AST.Declarations.ErrorMessage
                                  @ b1
                                  c
                                  (GHC.Base.foldr
                                     @ Language.PureScript.AST.Declarations.ErrorMessage
                                     @ b1
                                     c
                                     n
                                     w2 `cast` (Language.PureScript.Errors.N:MultipleErrors[0]))
                                  w1 `cast` (Language.PureScript.Errors.N:MultipleErrors[0])))
                              `cast`
                            (Sym (Language.PureScript.Errors.N:MultipleErrors[0])))
                             `cast`
                           (Sym (Data.Functor.Identity.N:Identity[0]
                                     <(Data.Either.Either
                                         Language.PureScript.Errors.MultipleErrors (a, s),
                                       Language.PureScript.Errors.MultipleErrors)>_R) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                                  <Language.PureScript.Errors.MultipleErrors>_N
                                                                                                  <Data.Functor.Identity.Identity>_R
                                                                                                  <Data.Either.Either
                                                                                                     Language.PureScript.Errors.MultipleErrors
                                                                                                     (a,
                                                                                                      s)>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                        <Language.PureScript.Errors.MultipleErrors>_N
                                                                                                                        <Control.Monad.Trans.Writer.Strict.WriterT
                                                                                                                           Language.PureScript.Errors.MultipleErrors
                                                                                                                           Data.Functor.Identity.Identity>_R
                                                                                                                        <(a,
                                                                                                                          s)>_N))) } } } } } }) -}
e0a2c8f8d1e7db1ebd6591a6ed316650
  $s$fApplicativeStateT_$s$fApplicativeStateT_$c*> ::
    Control.Monad.Trans.State.Strict.StateT
      s
      (Control.Monad.Trans.Except.ExceptT
         Language.PureScript.Errors.MultipleErrors
         (Control.Monad.Trans.Writer.Strict.Writer
            Language.PureScript.Errors.MultipleErrors))
      a
    -> Control.Monad.Trans.State.Strict.StateT
         s
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Errors.MultipleErrors
            (Control.Monad.Trans.Writer.Strict.Writer
               Language.PureScript.Errors.MultipleErrors))
         b
    -> Control.Monad.Trans.State.Strict.StateT
         s
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Errors.MultipleErrors
            (Control.Monad.Trans.Writer.Strict.Writer
               Language.PureScript.Errors.MultipleErrors))
         b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S(SL)),1*C1(U(1*U,U))><L,1*C1(U(U,1*U))><L,U>m,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ a
                   @ b
                   (m1 :: Control.Monad.Trans.State.Strict.StateT
                            s
                            (Control.Monad.Trans.Except.ExceptT
                               Language.PureScript.Errors.MultipleErrors
                               (Control.Monad.Trans.Writer.Strict.Writer
                                  Language.PureScript.Errors.MultipleErrors))
                            a)
                   (k :: Control.Monad.Trans.State.Strict.StateT
                           s
                           (Control.Monad.Trans.Except.ExceptT
                              Language.PureScript.Errors.MultipleErrors
                              (Control.Monad.Trans.Writer.Strict.Writer
                                 Language.PureScript.Errors.MultipleErrors))
                           b)
                   (s1 :: s) ->
                 case (m1
                         `cast`
                       (Control.Monad.Trans.State.Strict.N:StateT[0]
                            <s>_N
                            <Control.Monad.Trans.Except.ExceptT
                               Language.PureScript.Errors.MultipleErrors
                               (Control.Monad.Trans.Writer.Strict.Writer
                                  Language.PureScript.Errors.MultipleErrors)>_R
                            <a>_N)
                         s1)
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <Language.PureScript.Errors.MultipleErrors>_N
                           <Control.Monad.Trans.Writer.Strict.WriterT
                              Language.PureScript.Errors.MultipleErrors
                              Data.Functor.Identity.Identity>_R
                           <(a, s)>_N ; (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                             <Language.PureScript.Errors.MultipleErrors>_N
                                             <Data.Functor.Identity.Identity>_R
                                             <Data.Either.Either
                                                Language.PureScript.Errors.MultipleErrors
                                                (a, s)>_N ; Data.Functor.Identity.N:Identity[0]
                                                                <(Data.Either.Either
                                                                    Language.PureScript.Errors.MultipleErrors
                                                                    (a, s),
                                                                  Language.PureScript.Errors.MultipleErrors)>_R)) of wild { (,) a1 w1 ->
                 case a1 of wild1 {
                   Data.Either.Left e1
                   -> (Data.Either.Left
                         @ Language.PureScript.Errors.MultipleErrors
                         @ (b, s)
                         e1,
                       (GHC.Base.build
                          @ Language.PureScript.AST.Declarations.ErrorMessage
                          (\ @ b1
                             (c :: Language.PureScript.AST.Declarations.ErrorMessage
                                   -> b1 -> b1)[OneShot]
                             (n :: b1)[OneShot] ->
                           GHC.Base.foldr
                             @ Language.PureScript.AST.Declarations.ErrorMessage
                             @ b1
                             c
                             n
                             w1 `cast` (Language.PureScript.Errors.N:MultipleErrors[0])))
                         `cast`
                       (Sym (Language.PureScript.Errors.N:MultipleErrors[0])))
                        `cast`
                      (Sym (Data.Functor.Identity.N:Identity[0]
                                <(Data.Either.Either
                                    Language.PureScript.Errors.MultipleErrors (b, s),
                                  Language.PureScript.Errors.MultipleErrors)>_R) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                             <Language.PureScript.Errors.MultipleErrors>_N
                                                                                             <Data.Functor.Identity.Identity>_R
                                                                                             <Data.Either.Either
                                                                                                Language.PureScript.Errors.MultipleErrors
                                                                                                (b,
                                                                                                 s)>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                   <Language.PureScript.Errors.MultipleErrors>_N
                                                                                                                   <Control.Monad.Trans.Writer.Strict.WriterT
                                                                                                                      Language.PureScript.Errors.MultipleErrors
                                                                                                                      Data.Functor.Identity.Identity>_R
                                                                                                                   <(b,
                                                                                                                     s)>_N)))
                   Data.Either.Right x
                   -> case x of wild2 { (,) a2 s' ->
                      case (k `cast`
                            (Control.Monad.Trans.State.Strict.N:StateT[0]
                                 <s>_N
                                 <Control.Monad.Trans.Except.ExceptT
                                    Language.PureScript.Errors.MultipleErrors
                                    (Control.Monad.Trans.Writer.Strict.Writer
                                       Language.PureScript.Errors.MultipleErrors)>_R
                                 <b>_N)
                              s')
                             `cast`
                           (Control.Monad.Trans.Except.N:ExceptT[0]
                                <Language.PureScript.Errors.MultipleErrors>_N
                                <Control.Monad.Trans.Writer.Strict.WriterT
                                   Language.PureScript.Errors.MultipleErrors
                                   Data.Functor.Identity.Identity>_R
                                <(b, s)>_N ; (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                  <Language.PureScript.Errors.MultipleErrors>_N
                                                  <Data.Functor.Identity.Identity>_R
                                                  <Data.Either.Either
                                                     Language.PureScript.Errors.MultipleErrors
                                                     (b, s)>_N ; Data.Functor.Identity.N:Identity[0]
                                                                     <(Data.Either.Either
                                                                         Language.PureScript.Errors.MultipleErrors
                                                                         (b, s),
                                                                       Language.PureScript.Errors.MultipleErrors)>_R)) of wild3 { (,) b1 w' ->
                      (b1,
                       (GHC.Base.augment
                          @ Language.PureScript.AST.Declarations.ErrorMessage
                          (\ @ b2
                             (c :: Language.PureScript.AST.Declarations.ErrorMessage
                                   -> b2 -> b2)[OneShot]
                             (n :: b2)[OneShot] ->
                           GHC.Base.foldr
                             @ Language.PureScript.AST.Declarations.ErrorMessage
                             @ b2
                             c
                             n
                             w1 `cast` (Language.PureScript.Errors.N:MultipleErrors[0]))
                          w' `cast` (Language.PureScript.Errors.N:MultipleErrors[0]))
                         `cast`
                       (Sym (Language.PureScript.Errors.N:MultipleErrors[0])))
                        `cast`
                      (Sym (Data.Functor.Identity.N:Identity[0]
                                <(Data.Either.Either
                                    Language.PureScript.Errors.MultipleErrors (b, s),
                                  Language.PureScript.Errors.MultipleErrors)>_R) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                             <Language.PureScript.Errors.MultipleErrors>_N
                                                                                             <Data.Functor.Identity.Identity>_R
                                                                                             <Data.Either.Either
                                                                                                Language.PureScript.Errors.MultipleErrors
                                                                                                (b,
                                                                                                 s)>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                   <Language.PureScript.Errors.MultipleErrors>_N
                                                                                                                   <Control.Monad.Trans.Writer.Strict.WriterT
                                                                                                                      Language.PureScript.Errors.MultipleErrors
                                                                                                                      Data.Functor.Identity.Identity>_R
                                                                                                                   <(b,
                                                                                                                     s)>_N))) } } } })
                  `cast`
                (forall (s :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.State.Strict.StateT
                    s
                    (Control.Monad.Trans.Except.ExceptT
                       Language.PureScript.Errors.MultipleErrors
                       (Control.Monad.Trans.Writer.Strict.Writer
                          Language.PureScript.Errors.MultipleErrors))
                    a>_R
                 ->_R <Control.Monad.Trans.State.Strict.StateT
                         s
                         (Control.Monad.Trans.Except.ExceptT
                            Language.PureScript.Errors.MultipleErrors
                            (Control.Monad.Trans.Writer.Strict.Writer
                               Language.PureScript.Errors.MultipleErrors))
                         b>_R
                 ->_R Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                               <s>_N
                               <Control.Monad.Trans.Except.ExceptT
                                  Language.PureScript.Errors.MultipleErrors
                                  (Control.Monad.Trans.Writer.Strict.Writer
                                     Language.PureScript.Errors.MultipleErrors)>_R
                               <b>_N)) -}
e660a0e283c2c440fc4db15c938c7944
  $s$fApplicativeStateT_$s$fApplicativeStateT_$c<*> ::
    Control.Monad.Trans.State.Strict.StateT
      s
      (Control.Monad.Trans.Except.ExceptT
         Language.PureScript.Errors.MultipleErrors
         (Control.Monad.Trans.Writer.Strict.Writer
            Language.PureScript.Errors.MultipleErrors))
      (a -> b)
    -> Control.Monad.Trans.State.Strict.StateT
         s
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Errors.MultipleErrors
            (Control.Monad.Trans.Writer.Strict.Writer
               Language.PureScript.Errors.MultipleErrors))
         a
    -> Control.Monad.Trans.State.Strict.StateT
         s
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Errors.MultipleErrors
            (Control.Monad.Trans.Writer.Strict.Writer
               Language.PureScript.Errors.MultipleErrors))
         b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S(SL)),1*C1(U(1*U,U))><L,1*C1(U(1*U,1*U))><L,U>m,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ a
                   @ b
                   (ds :: Control.Monad.Trans.State.Strict.StateT
                            s
                            (Control.Monad.Trans.Except.ExceptT
                               Language.PureScript.Errors.MultipleErrors
                               (Control.Monad.Trans.Writer.Strict.Writer
                                  Language.PureScript.Errors.MultipleErrors))
                            (a -> b))
                   (ds1 :: Control.Monad.Trans.State.Strict.StateT
                             s
                             (Control.Monad.Trans.Except.ExceptT
                                Language.PureScript.Errors.MultipleErrors
                                (Control.Monad.Trans.Writer.Strict.Writer
                                   Language.PureScript.Errors.MultipleErrors))
                             a)
                   (s1 :: s) ->
                 case (ds
                         `cast`
                       (Control.Monad.Trans.State.Strict.N:StateT[0]
                            <s>_N
                            <Control.Monad.Trans.Except.ExceptT
                               Language.PureScript.Errors.MultipleErrors
                               (Control.Monad.Trans.Writer.Strict.Writer
                                  Language.PureScript.Errors.MultipleErrors)>_R
                            <a -> b>_N)
                         s1)
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <Language.PureScript.Errors.MultipleErrors>_N
                           <Control.Monad.Trans.Writer.Strict.WriterT
                              Language.PureScript.Errors.MultipleErrors
                              Data.Functor.Identity.Identity>_R
                           <(a -> b, s)>_N ; (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                  <Language.PureScript.Errors.MultipleErrors>_N
                                                  <Data.Functor.Identity.Identity>_R
                                                  <Data.Either.Either
                                                     Language.PureScript.Errors.MultipleErrors
                                                     (a -> b,
                                                      s)>_N ; Data.Functor.Identity.N:Identity[0]
                                                                  <(Data.Either.Either
                                                                      Language.PureScript.Errors.MultipleErrors
                                                                      (a -> b, s),
                                                                    Language.PureScript.Errors.MultipleErrors)>_R)) of wild { (,) a1 w1 ->
                 case a1 of wild1 {
                   Data.Either.Left e1
                   -> (Data.Either.Left
                         @ Language.PureScript.Errors.MultipleErrors
                         @ (b, s)
                         e1,
                       (GHC.Base.build
                          @ Language.PureScript.AST.Declarations.ErrorMessage
                          (\ @ b1
                             (c :: Language.PureScript.AST.Declarations.ErrorMessage
                                   -> b1 -> b1)[OneShot]
                             (n :: b1)[OneShot] ->
                           GHC.Base.foldr
                             @ Language.PureScript.AST.Declarations.ErrorMessage
                             @ b1
                             c
                             n
                             w1 `cast` (Language.PureScript.Errors.N:MultipleErrors[0])))
                         `cast`
                       (Sym (Language.PureScript.Errors.N:MultipleErrors[0])))
                        `cast`
                      (Sym (Data.Functor.Identity.N:Identity[0]
                                <(Data.Either.Either
                                    Language.PureScript.Errors.MultipleErrors (b, s),
                                  Language.PureScript.Errors.MultipleErrors)>_R) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                             <Language.PureScript.Errors.MultipleErrors>_N
                                                                                             <Data.Functor.Identity.Identity>_R
                                                                                             <Data.Either.Either
                                                                                                Language.PureScript.Errors.MultipleErrors
                                                                                                (b,
                                                                                                 s)>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                   <Language.PureScript.Errors.MultipleErrors>_N
                                                                                                                   <Control.Monad.Trans.Writer.Strict.WriterT
                                                                                                                      Language.PureScript.Errors.MultipleErrors
                                                                                                                      Data.Functor.Identity.Identity>_R
                                                                                                                   <(b,
                                                                                                                     s)>_N)))
                   Data.Either.Right x
                   -> case x of wild2 { (,) f s' ->
                      case (ds1
                              `cast`
                            (Control.Monad.Trans.State.Strict.N:StateT[0]
                                 <s>_N
                                 <Control.Monad.Trans.Except.ExceptT
                                    Language.PureScript.Errors.MultipleErrors
                                    (Control.Monad.Trans.Writer.Strict.Writer
                                       Language.PureScript.Errors.MultipleErrors)>_R
                                 <a>_N)
                              s')
                             `cast`
                           (Control.Monad.Trans.Except.N:ExceptT[0]
                                <Language.PureScript.Errors.MultipleErrors>_N
                                <Control.Monad.Trans.Writer.Strict.WriterT
                                   Language.PureScript.Errors.MultipleErrors
                                   Data.Functor.Identity.Identity>_R
                                <(a, s)>_N ; (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                  <Language.PureScript.Errors.MultipleErrors>_N
                                                  <Data.Functor.Identity.Identity>_R
                                                  <Data.Either.Either
                                                     Language.PureScript.Errors.MultipleErrors
                                                     (a, s)>_N ; Data.Functor.Identity.N:Identity[0]
                                                                     <(Data.Either.Either
                                                                         Language.PureScript.Errors.MultipleErrors
                                                                         (a, s),
                                                                       Language.PureScript.Errors.MultipleErrors)>_R)) of wild3 { (,) a2 w2 ->
                      case a2 of wild4 {
                        Data.Either.Left e1
                        -> (Data.Either.Left
                              @ Language.PureScript.Errors.MultipleErrors
                              @ (b, s)
                              e1,
                            (GHC.Base.build
                               @ Language.PureScript.AST.Declarations.ErrorMessage
                               (\ @ b1
                                  (c :: Language.PureScript.AST.Declarations.ErrorMessage
                                        -> b1 -> b1)[OneShot]
                                  (n :: b1)[OneShot] ->
                                GHC.Base.foldr
                                  @ Language.PureScript.AST.Declarations.ErrorMessage
                                  @ b1
                                  c
                                  (GHC.Base.foldr
                                     @ Language.PureScript.AST.Declarations.ErrorMessage
                                     @ b1
                                     c
                                     n
                                     w2 `cast` (Language.PureScript.Errors.N:MultipleErrors[0]))
                                  w1 `cast` (Language.PureScript.Errors.N:MultipleErrors[0])))
                              `cast`
                            (Sym (Language.PureScript.Errors.N:MultipleErrors[0])))
                             `cast`
                           (Sym (Data.Functor.Identity.N:Identity[0]
                                     <(Data.Either.Either
                                         Language.PureScript.Errors.MultipleErrors (b, s),
                                       Language.PureScript.Errors.MultipleErrors)>_R) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                                  <Language.PureScript.Errors.MultipleErrors>_N
                                                                                                  <Data.Functor.Identity.Identity>_R
                                                                                                  <Data.Either.Either
                                                                                                     Language.PureScript.Errors.MultipleErrors
                                                                                                     (b,
                                                                                                      s)>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                        <Language.PureScript.Errors.MultipleErrors>_N
                                                                                                                        <Control.Monad.Trans.Writer.Strict.WriterT
                                                                                                                           Language.PureScript.Errors.MultipleErrors
                                                                                                                           Data.Functor.Identity.Identity>_R
                                                                                                                        <(b,
                                                                                                                          s)>_N)))
                        Data.Either.Right x1
                        -> case x1 of wild5 { (,) x2 s'' ->
                           (Data.Either.Right
                              @ Language.PureScript.Errors.MultipleErrors
                              @ (b, s)
                              (f x2, s''),
                            (GHC.Base.build
                               @ Language.PureScript.AST.Declarations.ErrorMessage
                               (\ @ b1
                                  (c :: Language.PureScript.AST.Declarations.ErrorMessage
                                        -> b1 -> b1)[OneShot]
                                  (n :: b1)[OneShot] ->
                                GHC.Base.foldr
                                  @ Language.PureScript.AST.Declarations.ErrorMessage
                                  @ b1
                                  c
                                  (GHC.Base.foldr
                                     @ Language.PureScript.AST.Declarations.ErrorMessage
                                     @ b1
                                     c
                                     n
                                     w2 `cast` (Language.PureScript.Errors.N:MultipleErrors[0]))
                                  w1 `cast` (Language.PureScript.Errors.N:MultipleErrors[0])))
                              `cast`
                            (Sym (Language.PureScript.Errors.N:MultipleErrors[0])))
                             `cast`
                           (Sym (Data.Functor.Identity.N:Identity[0]
                                     <(Data.Either.Either
                                         Language.PureScript.Errors.MultipleErrors (b, s),
                                       Language.PureScript.Errors.MultipleErrors)>_R) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                                  <Language.PureScript.Errors.MultipleErrors>_N
                                                                                                  <Data.Functor.Identity.Identity>_R
                                                                                                  <Data.Either.Either
                                                                                                     Language.PureScript.Errors.MultipleErrors
                                                                                                     (b,
                                                                                                      s)>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                        <Language.PureScript.Errors.MultipleErrors>_N
                                                                                                                        <Control.Monad.Trans.Writer.Strict.WriterT
                                                                                                                           Language.PureScript.Errors.MultipleErrors
                                                                                                                           Data.Functor.Identity.Identity>_R
                                                                                                                        <(b,
                                                                                                                          s)>_N))) } } } } } })
                  `cast`
                (forall (s :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.State.Strict.StateT
                    s
                    (Control.Monad.Trans.Except.ExceptT
                       Language.PureScript.Errors.MultipleErrors
                       (Control.Monad.Trans.Writer.Strict.Writer
                          Language.PureScript.Errors.MultipleErrors))
                    (a -> b)>_R
                 ->_R <Control.Monad.Trans.State.Strict.StateT
                         s
                         (Control.Monad.Trans.Except.ExceptT
                            Language.PureScript.Errors.MultipleErrors
                            (Control.Monad.Trans.Writer.Strict.Writer
                               Language.PureScript.Errors.MultipleErrors))
                         a>_R
                 ->_R Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                               <s>_N
                               <Control.Monad.Trans.Except.ExceptT
                                  Language.PureScript.Errors.MultipleErrors
                                  (Control.Monad.Trans.Writer.Strict.Writer
                                     Language.PureScript.Errors.MultipleErrors)>_R
                               <b>_N)) -}
8e515e6c127fc880f7f197d89f7bf648
  $s$fApplicativeStateT_$s$fApplicativeStateT_$cpure ::
    a
    -> Control.Monad.Trans.State.Strict.StateT
         s
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Errors.MultipleErrors
            (Control.Monad.Trans.Writer.Strict.Writer
               Language.PureScript.Errors.MultipleErrors))
         a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ s @ a (a1 :: a) (s1 :: s) ->
                 (Data.Either.Right
                    @ Language.PureScript.Errors.MultipleErrors
                    @ (a, s)
                    (a1, s1),
                  (GHC.Types.[] @ Language.PureScript.AST.Declarations.ErrorMessage)
                    `cast`
                  (Sym (Language.PureScript.Errors.N:MultipleErrors[0]))))
                  `cast`
                (forall (s :: <*>_N) (a :: <*>_N).
                 <a>_R
                 ->_R (<s>_R
                       ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                     <(Data.Either.Either
                                         Language.PureScript.Errors.MultipleErrors (a, s),
                                       Language.PureScript.Errors.MultipleErrors)>_R) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                                  <Language.PureScript.Errors.MultipleErrors>_N
                                                                                                  <Data.Functor.Identity.Identity>_R
                                                                                                  <Data.Either.Either
                                                                                                     Language.PureScript.Errors.MultipleErrors
                                                                                                     (a,
                                                                                                      s)>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                        <Language.PureScript.Errors.MultipleErrors>_N
                                                                                                                        <Control.Monad.Trans.Writer.Strict.WriterT
                                                                                                                           Language.PureScript.Errors.MultipleErrors
                                                                                                                           Data.Functor.Identity.Identity>_R
                                                                                                                        <(a,
                                                                                                                          s)>_N))) ; Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                                                                                              <s>_N
                                                                                                                                              <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                 Language.PureScript.Errors.MultipleErrors
                                                                                                                                                 (Control.Monad.Trans.Writer.Strict.Writer
                                                                                                                                                    Language.PureScript.Errors.MultipleErrors)>_R
                                                                                                                                              <a>_N)) -}
f2e10ec3428fc3152d62a621b7a99129
  $s$fApplicativeStateT_$s$fApplicativeWriterT ::
    GHC.Base.Applicative
      (Control.Monad.Trans.Writer.Strict.WriterT
         Language.PureScript.Errors.MultipleErrors
         Data.Functor.Identity.Identity)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Trans.Writer.Strict.WriterT
                       Language.PureScript.Errors.MultipleErrors
                       Data.Functor.Identity.Identity)
                  (Language.PureScript.Interactive.$s$fApplicativeStateT_$s$fFunctorWriterT
                     @ Language.PureScript.Errors.MultipleErrors)
                  Language.PureScript.Interactive.$s$fApplicativeStateT_$s$fApplicativeWriterT_$cpure
                  Language.PureScript.Interactive.$s$fApplicativeStateT_$s$fApplicativeWriterT_$c<*>
                  (Control.Monad.Trans.Writer.Strict.$fApplicativeWriterT_$cliftA2
                     @ Language.PureScript.Errors.MultipleErrors
                     @ Data.Functor.Identity.Identity
                     Language.PureScript.Errors.$fMonoidMultipleErrors
                     Data.Functor.Identity.$fApplicativeIdentity)
                  (\ @ a
                     @ b
                     (eta :: Control.Monad.Trans.Writer.Strict.WriterT
                               Language.PureScript.Errors.MultipleErrors
                               Data.Functor.Identity.Identity
                               a)
                     (eta1 :: Control.Monad.Trans.Writer.Strict.WriterT
                                Language.PureScript.Errors.MultipleErrors
                                Data.Functor.Identity.Identity
                                b) ->
                   case eta
                          `cast`
                        (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                             <Language.PureScript.Errors.MultipleErrors>_N
                             <Data.Functor.Identity.Identity>_R
                             <a>_N ; Data.Functor.Identity.N:Identity[0]
                                         <(a,
                                           Language.PureScript.Errors.MultipleErrors)>_R) of wild { (,) a1 w1 ->
                   case eta1
                          `cast`
                        (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                             <Language.PureScript.Errors.MultipleErrors>_N
                             <Data.Functor.Identity.Identity>_R
                             <b>_N ; Data.Functor.Identity.N:Identity[0]
                                         <(b,
                                           Language.PureScript.Errors.MultipleErrors)>_R) of wild1 { (,) b1 w' ->
                   (b1,
                    (GHC.Base.augment
                       @ Language.PureScript.AST.Declarations.ErrorMessage
                       (\ @ b2
                          (c :: Language.PureScript.AST.Declarations.ErrorMessage
                                -> b2 -> b2)[OneShot]
                          (n :: b2)[OneShot] ->
                        GHC.Base.foldr
                          @ Language.PureScript.AST.Declarations.ErrorMessage
                          @ b2
                          c
                          n
                          w1 `cast` (Language.PureScript.Errors.N:MultipleErrors[0]))
                       w' `cast` (Language.PureScript.Errors.N:MultipleErrors[0]))
                      `cast`
                    (Sym (Language.PureScript.Errors.N:MultipleErrors[0])))
                     `cast`
                   (Sym (Data.Functor.Identity.N:Identity[0]
                             <(b, Language.PureScript.Errors.MultipleErrors)>_R)) } })
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   <Control.Monad.Trans.Writer.Strict.WriterT
                      Language.PureScript.Errors.MultipleErrors
                      Data.Functor.Identity.Identity
                      a>_R
                   ->_R <Control.Monad.Trans.Writer.Strict.WriterT
                           Language.PureScript.Errors.MultipleErrors
                           Data.Functor.Identity.Identity
                           b>_R
                   ->_R Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                 <Language.PureScript.Errors.MultipleErrors>_N
                                 <Data.Functor.Identity.Identity>_R
                                 <b>_N))
                  (\ @ a
                     @ b
                     (eta :: Control.Monad.Trans.Writer.Strict.WriterT
                               Language.PureScript.Errors.MultipleErrors
                               Data.Functor.Identity.Identity
                               a) ->
                   Language.PureScript.Interactive.$s$fApplicativeStateT_$s$fApplicativeWriterT_$c<*>
                     @ b
                     @ a
                     (Control.Monad.Trans.Writer.Strict.$fApplicativeWriterT1
                        @ a
                        @ b
                        @ Language.PureScript.Errors.MultipleErrors
                        eta
                          `cast`
                        (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                             <Language.PureScript.Errors.MultipleErrors>_N
                             <Data.Functor.Identity.Identity>_R
                             <a>_N ; Data.Functor.Identity.N:Identity[0]
                                         <(a, Language.PureScript.Errors.MultipleErrors)>_R))
                       `cast`
                     (Sym (Data.Functor.Identity.N:Identity[0]
                               <(b -> a,
                                 Language.PureScript.Errors.MultipleErrors)>_R) ; Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                           <Language.PureScript.Errors.MultipleErrors>_N
                                                                                           <Data.Functor.Identity.Identity>_R
                                                                                           <b
                                                                                            -> a>_N))) -}
454963bda7a878c9aa4010b2f7de9d73
  $s$fApplicativeStateT_$s$fApplicativeWriterT_$c<*> ::
    Control.Monad.Trans.Writer.Strict.WriterT
      Language.PureScript.Errors.MultipleErrors
      Data.Functor.Identity.Identity
      (a -> b)
    -> Control.Monad.Trans.Writer.Strict.WriterT
         Language.PureScript.Errors.MultipleErrors
         Data.Functor.Identity.Identity
         a
    -> Control.Monad.Trans.Writer.Strict.WriterT
         Language.PureScript.Errors.MultipleErrors
         Data.Functor.Identity.Identity
         b
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S,1*U(1*C1(U),1*U)><S,1*U(U,1*U)>m,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ a
                   @ b
                   (f :: Control.Monad.Trans.Writer.Strict.WriterT
                           Language.PureScript.Errors.MultipleErrors
                           Data.Functor.Identity.Identity
                           (a -> b))
                   (v :: Control.Monad.Trans.Writer.Strict.WriterT
                           Language.PureScript.Errors.MultipleErrors
                           Data.Functor.Identity.Identity
                           a) ->
                 case f `cast`
                      (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                           <Language.PureScript.Errors.MultipleErrors>_N
                           <Data.Functor.Identity.Identity>_R
                           <a -> b>_N ; Data.Functor.Identity.N:Identity[0]
                                            <(a -> b,
                                              Language.PureScript.Errors.MultipleErrors)>_R) of wild { (,) a1 w1 ->
                 case v `cast`
                      (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                           <Language.PureScript.Errors.MultipleErrors>_N
                           <Data.Functor.Identity.Identity>_R
                           <a>_N ; Data.Functor.Identity.N:Identity[0]
                                       <(a,
                                         Language.PureScript.Errors.MultipleErrors)>_R) of wild1 { (,) b1 w' ->
                 (a1 b1,
                  (GHC.Base.augment
                     @ Language.PureScript.AST.Declarations.ErrorMessage
                     (\ @ b2
                        (c :: Language.PureScript.AST.Declarations.ErrorMessage
                              -> b2 -> b2)[OneShot]
                        (n :: b2)[OneShot] ->
                      GHC.Base.foldr
                        @ Language.PureScript.AST.Declarations.ErrorMessage
                        @ b2
                        c
                        n
                        w1 `cast` (Language.PureScript.Errors.N:MultipleErrors[0]))
                     w' `cast` (Language.PureScript.Errors.N:MultipleErrors[0]))
                    `cast`
                  (Sym (Language.PureScript.Errors.N:MultipleErrors[0])))
                   `cast`
                 (Sym (Data.Functor.Identity.N:Identity[0]
                           <(b, Language.PureScript.Errors.MultipleErrors)>_R)) } })
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.Writer.Strict.WriterT
                    Language.PureScript.Errors.MultipleErrors
                    Data.Functor.Identity.Identity
                    (a -> b)>_R
                 ->_R <Control.Monad.Trans.Writer.Strict.WriterT
                         Language.PureScript.Errors.MultipleErrors
                         Data.Functor.Identity.Identity
                         a>_R
                 ->_R Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                               <Language.PureScript.Errors.MultipleErrors>_N
                               <Data.Functor.Identity.Identity>_R
                               <b>_N)) -}
466a6f13a5fc3a6aa2c8873ea347b361
  $s$fApplicativeStateT_$s$fApplicativeWriterT_$cpure ::
    a
    -> Control.Monad.Trans.Writer.Strict.WriterT
         Language.PureScript.Errors.MultipleErrors
         Data.Functor.Identity.Identity
         a
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ a (a1 :: a) ->
                 (a1,
                  (GHC.Types.[] @ Language.PureScript.AST.Declarations.ErrorMessage)
                    `cast`
                  (Sym (Language.PureScript.Errors.N:MultipleErrors[0]))))
                  `cast`
                (forall (a :: <*>_N).
                 <a>_R
                 ->_R Sym (Data.Functor.Identity.N:Identity[0]
                               <(a,
                                 Language.PureScript.Errors.MultipleErrors)>_R) ; Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                           <Language.PureScript.Errors.MultipleErrors>_N
                                                                                           <Data.Functor.Identity.Identity>_R
                                                                                           <a>_N)) -}
bd21cc5f4595273f9e9a7f59831997db
  $s$fApplicativeStateT_$s$fFunctorStateT ::
    GHC.Base.Functor
      (Control.Monad.Trans.State.Strict.StateT
         s
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Errors.MultipleErrors
            (Control.Monad.Trans.Writer.Strict.Writer
               Language.PureScript.Errors.MultipleErrors)))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ s.
                  @ (Control.Monad.Trans.State.Strict.StateT
                       s
                       (Control.Monad.Trans.Except.ExceptT
                          Language.PureScript.Errors.MultipleErrors
                          (Control.Monad.Trans.Writer.Strict.Writer
                             Language.PureScript.Errors.MultipleErrors)))
                  (Control.Monad.Trans.State.Strict.$fFunctorStateT_$cfmap
                     @ (Control.Monad.Trans.Except.ExceptT
                          Language.PureScript.Errors.MultipleErrors
                          (Control.Monad.Trans.Writer.Strict.Writer
                             Language.PureScript.Errors.MultipleErrors))
                     @ s
                     Language.PureScript.Interactive.$s$fApplicativeStateT_v)
                  (\ @ a
                     @ b
                     (x :: a)
                     (eta :: Control.Monad.Trans.State.Strict.StateT
                               s
                               (Control.Monad.Trans.Except.ExceptT
                                  Language.PureScript.Errors.MultipleErrors
                                  (Control.Monad.Trans.Writer.Strict.Writer
                                     Language.PureScript.Errors.MultipleErrors))
                               b)
                     (eta1 :: s) ->
                   case (eta
                           `cast`
                         (Control.Monad.Trans.State.Strict.N:StateT[0]
                              <s>_N
                              <Control.Monad.Trans.Except.ExceptT
                                 Language.PureScript.Errors.MultipleErrors
                                 (Control.Monad.Trans.Writer.Strict.Writer
                                    Language.PureScript.Errors.MultipleErrors)>_R
                              <b>_N)
                           eta1)
                          `cast`
                        (Control.Monad.Trans.Except.N:ExceptT[0]
                             <Language.PureScript.Errors.MultipleErrors>_N
                             <Control.Monad.Trans.Writer.Strict.WriterT
                                Language.PureScript.Errors.MultipleErrors
                                Data.Functor.Identity.Identity>_R
                             <(b, s)>_N ; (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                               <Language.PureScript.Errors.MultipleErrors>_N
                                               <Data.Functor.Identity.Identity>_R
                                               <Data.Either.Either
                                                  Language.PureScript.Errors.MultipleErrors
                                                  (b, s)>_N ; Data.Functor.Identity.N:Identity[0]
                                                                  <(Data.Either.Either
                                                                      Language.PureScript.Errors.MultipleErrors
                                                                      (b, s),
                                                                    Language.PureScript.Errors.MultipleErrors)>_R)) of wild { (,) a1 w1 ->
                   (case a1 of wild1 {
                      Data.Either.Left x1
                      -> Data.Either.Left
                           @ Language.PureScript.Errors.MultipleErrors
                           @ (a, s)
                           x1
                      Data.Either.Right y
                      -> Data.Either.Right
                           @ Language.PureScript.Errors.MultipleErrors
                           @ (a, s)
                           (case y of wild2 { (,) a2 s' -> (x, s') }) },
                    w1)
                     `cast`
                   (Sym (Data.Functor.Identity.N:Identity[0]
                             <(Data.Either.Either
                                 Language.PureScript.Errors.MultipleErrors (a, s),
                               Language.PureScript.Errors.MultipleErrors)>_R) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                          <Language.PureScript.Errors.MultipleErrors>_N
                                                                                          <Data.Functor.Identity.Identity>_R
                                                                                          <Data.Either.Either
                                                                                             Language.PureScript.Errors.MultipleErrors
                                                                                             (a,
                                                                                              s)>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                <Language.PureScript.Errors.MultipleErrors>_N
                                                                                                                <Control.Monad.Trans.Writer.Strict.WriterT
                                                                                                                   Language.PureScript.Errors.MultipleErrors
                                                                                                                   Data.Functor.Identity.Identity>_R
                                                                                                                <(a,
                                                                                                                  s)>_N))) })
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   <a>_R
                   ->_R <Control.Monad.Trans.State.Strict.StateT
                           s
                           (Control.Monad.Trans.Except.ExceptT
                              Language.PureScript.Errors.MultipleErrors
                              (Control.Monad.Trans.Writer.Strict.Writer
                                 Language.PureScript.Errors.MultipleErrors))
                           b>_R
                   ->_R Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                 <s>_N
                                 <Control.Monad.Trans.Except.ExceptT
                                    Language.PureScript.Errors.MultipleErrors
                                    (Control.Monad.Trans.Writer.Strict.Writer
                                       Language.PureScript.Errors.MultipleErrors)>_R
                                 <a>_N)) -}
3a0c91d0ba5c9aa2363b0860f90af789
  $s$fApplicativeStateT_$s$fFunctorWriterT ::
    GHC.Base.Functor
      (Control.Monad.Trans.Writer.Strict.WriterT
         w Data.Functor.Identity.Identity)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ w.
                  @ (Control.Monad.Trans.Writer.Strict.WriterT
                       w Data.Functor.Identity.Identity)
                  (Language.PureScript.Interactive.$s$fApplicativeStateT_$s$fFunctorWriterT_$cfmap
                     @ w)
                  (\ @ a @ b (x :: a) ->
                   Control.Monad.Trans.Writer.Strict.mapWriterT
                     @ Data.Functor.Identity.Identity
                     @ b
                     @ w
                     @ Data.Functor.Identity.Identity
                     @ a
                     @ w
                     (\ (ds :: (b, w)) -> case ds of wild { (,) a1 w1 -> (x, w1) })
                       `cast`
                     (Sym (Data.Functor.Identity.N:Identity[0] <(b, w)>_R)
                      ->_R Sym (Data.Functor.Identity.N:Identity[0] <(a, w)>_R))) -}
4f537f771f81241172bb10f6bcd99dba
  $s$fApplicativeStateT_$s$fFunctorWriterT_$cfmap ::
    (a -> b)
    -> Control.Monad.Trans.Writer.Strict.WriterT
         w Data.Functor.Identity.Identity a
    -> Control.Monad.Trans.Writer.Strict.WriterT
         w Data.Functor.Identity.Identity b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><S,1*U(U,U)>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ w @ a @ b (f :: a -> b) ->
                 Control.Monad.Trans.Writer.Strict.mapWriterT
                   @ Data.Functor.Identity.Identity
                   @ a
                   @ w
                   @ Data.Functor.Identity.Identity
                   @ b
                   @ w
                   (\ (ds :: (a, w)) -> case ds of wild { (,) a1 w1 -> (f a1, w1) })
                     `cast`
                   (Sym (Data.Functor.Identity.N:Identity[0] <(a, w)>_R)
                    ->_R Sym (Data.Functor.Identity.N:Identity[0] <(b, w)>_R))) -}
4f1e26aa51087a5392c512b4ef540973
  $s$fApplicativeStateT_$s$fMonadExceptT ::
    GHC.Base.Monad
      (Control.Monad.Trans.Except.ExceptT
         e
         (Control.Monad.Trans.Writer.Strict.WriterT
            Language.PureScript.Errors.MultipleErrors
            Data.Functor.Identity.Identity))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ e.
                  @ (Control.Monad.Trans.Except.ExceptT
                       e
                       (Control.Monad.Trans.Writer.Strict.WriterT
                          Language.PureScript.Errors.MultipleErrors
                          Data.Functor.Identity.Identity))
                  (Control.Monad.Trans.Except.$fApplicativeExceptT
                     @ (Control.Monad.Trans.Writer.Strict.WriterT
                          Language.PureScript.Errors.MultipleErrors
                          Data.Functor.Identity.Identity)
                     @ e
                     (Language.PureScript.Interactive.$s$fApplicativeStateT_$s$fFunctorWriterT
                        @ Language.PureScript.Errors.MultipleErrors)
                     Language.PureScript.Interactive.$s$fApplicativeStateT_$s$fMonadWriterT)
                  (Control.Monad.Trans.Except.$fMonadExceptT_$c>>=
                     @ (Control.Monad.Trans.Writer.Strict.WriterT
                          Language.PureScript.Errors.MultipleErrors
                          Data.Functor.Identity.Identity)
                     @ e
                     Language.PureScript.Interactive.$s$fApplicativeStateT_$s$fMonadWriterT)
                  (Control.Monad.Trans.Except.$fMonadExceptT_$c>>
                     @ (Control.Monad.Trans.Writer.Strict.WriterT
                          Language.PureScript.Errors.MultipleErrors
                          Data.Functor.Identity.Identity)
                     @ e
                     Language.PureScript.Interactive.$s$fApplicativeStateT_$s$fMonadWriterT)
                  (\ @ a (eta :: a) ->
                   (Data.Either.Right @ e @ a eta,
                    (GHC.Types.[] @ Language.PureScript.AST.Declarations.ErrorMessage)
                      `cast`
                    (Sym (Language.PureScript.Errors.N:MultipleErrors[0]))))
                    `cast`
                  (forall (a :: <*>_N).
                   <a>_R
                   ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                 <(Data.Either.Either e a,
                                   Language.PureScript.Errors.MultipleErrors)>_R) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                              <Language.PureScript.Errors.MultipleErrors>_N
                                                                                              <Data.Functor.Identity.Identity>_R
                                                                                              <Data.Either.Either
                                                                                                 e
                                                                                                 a>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                  <e>_N
                                                                                                                  <Control.Monad.Trans.Writer.Strict.WriterT
                                                                                                                     Language.PureScript.Errors.MultipleErrors
                                                                                                                     Data.Functor.Identity.Identity>_R
                                                                                                                  <a>_N)))
                  (\ @ a ->
                   GHC.Err.errorWithoutStackTrace
                     @ 'GHC.Types.LiftedRep
                     @ (Data.Functor.Identity.Identity
                          (Data.Either.Either e a,
                           Language.PureScript.Errors.MultipleErrors)))
                    `cast`
                  (forall (a :: <*>_N).
                   <GHC.Base.String>_R
                   ->_R Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                 <Language.PureScript.Errors.MultipleErrors>_N
                                 <Data.Functor.Identity.Identity>_R
                                 <Data.Either.Either
                                    e a>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                       <e>_N
                                                       <Control.Monad.Trans.Writer.Strict.WriterT
                                                          Language.PureScript.Errors.MultipleErrors
                                                          Data.Functor.Identity.Identity>_R
                                                       <a>_N)) -}
3dca408906adf369fe107d1f93064d51
  $s$fApplicativeStateT_$s$fMonadWriterT ::
    GHC.Base.Monad
      (Control.Monad.Trans.Writer.Strict.WriterT
         Language.PureScript.Errors.MultipleErrors
         Data.Functor.Identity.Identity)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Control.Monad.Trans.Writer.Strict.WriterT
                       Language.PureScript.Errors.MultipleErrors
                       Data.Functor.Identity.Identity)
                  Language.PureScript.Interactive.$s$fApplicativeStateT_$s$fApplicativeWriterT
                  Language.PureScript.Interactive.$s$fApplicativeStateT_$s$fMonadWriterT_$c>>=
                  Language.PureScript.Interactive.$s$fApplicativeStateT_$s$fMonadWriterT_$c>>
                  (\ @ a (eta :: a) ->
                   (eta,
                    (GHC.Types.[] @ Language.PureScript.AST.Declarations.ErrorMessage)
                      `cast`
                    (Sym (Language.PureScript.Errors.N:MultipleErrors[0]))))
                    `cast`
                  (forall (a :: <*>_N).
                   <a>_R
                   ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                 <(a,
                                   Language.PureScript.Errors.MultipleErrors)>_R) ; Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                             <Language.PureScript.Errors.MultipleErrors>_N
                                                                                             <Data.Functor.Identity.Identity>_R
                                                                                             <a>_N))
                  Language.PureScript.Interactive.$s$fApplicativeStateT_$s$fMonadWriterT_$cfail -}
b072cae0bd36d5eb277384f16b99072e
  $s$fApplicativeStateT_$s$fMonadWriterT_$c>> ::
    Control.Monad.Trans.Writer.Strict.WriterT
      Language.PureScript.Errors.MultipleErrors
      Data.Functor.Identity.Identity
      a
    -> Control.Monad.Trans.Writer.Strict.WriterT
         Language.PureScript.Errors.MultipleErrors
         Data.Functor.Identity.Identity
         b
    -> Control.Monad.Trans.Writer.Strict.WriterT
         Language.PureScript.Errors.MultipleErrors
         Data.Functor.Identity.Identity
         b
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S,1*U(A,1*U)><S,1*U(U,1*U)>m, Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ a
                   @ b
                   (m1 :: Control.Monad.Trans.Writer.Strict.WriterT
                            Language.PureScript.Errors.MultipleErrors
                            Data.Functor.Identity.Identity
                            a)
                   (k :: Control.Monad.Trans.Writer.Strict.WriterT
                           Language.PureScript.Errors.MultipleErrors
                           Data.Functor.Identity.Identity
                           b) ->
                 case m1
                        `cast`
                      (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                           <Language.PureScript.Errors.MultipleErrors>_N
                           <Data.Functor.Identity.Identity>_R
                           <a>_N ; Data.Functor.Identity.N:Identity[0]
                                       <(a,
                                         Language.PureScript.Errors.MultipleErrors)>_R) of wild { (,) a1 w1 ->
                 case k `cast`
                      (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                           <Language.PureScript.Errors.MultipleErrors>_N
                           <Data.Functor.Identity.Identity>_R
                           <b>_N ; Data.Functor.Identity.N:Identity[0]
                                       <(b,
                                         Language.PureScript.Errors.MultipleErrors)>_R) of wild1 { (,) b1 w' ->
                 (b1,
                  (GHC.Base.augment
                     @ Language.PureScript.AST.Declarations.ErrorMessage
                     (\ @ b2
                        (c :: Language.PureScript.AST.Declarations.ErrorMessage
                              -> b2 -> b2)[OneShot]
                        (n :: b2)[OneShot] ->
                      GHC.Base.foldr
                        @ Language.PureScript.AST.Declarations.ErrorMessage
                        @ b2
                        c
                        n
                        w1 `cast` (Language.PureScript.Errors.N:MultipleErrors[0]))
                     w' `cast` (Language.PureScript.Errors.N:MultipleErrors[0]))
                    `cast`
                  (Sym (Language.PureScript.Errors.N:MultipleErrors[0])))
                   `cast`
                 (Sym (Data.Functor.Identity.N:Identity[0]
                           <(b, Language.PureScript.Errors.MultipleErrors)>_R)) } })
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.Writer.Strict.WriterT
                    Language.PureScript.Errors.MultipleErrors
                    Data.Functor.Identity.Identity
                    a>_R
                 ->_R <Control.Monad.Trans.Writer.Strict.WriterT
                         Language.PureScript.Errors.MultipleErrors
                         Data.Functor.Identity.Identity
                         b>_R
                 ->_R Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                               <Language.PureScript.Errors.MultipleErrors>_N
                               <Data.Functor.Identity.Identity>_R
                               <b>_N)) -}
fd7828a55b2b7c97fd5c28cd254f3805
  $s$fApplicativeStateT_$s$fMonadWriterT_$c>>= ::
    Control.Monad.Trans.Writer.Strict.WriterT
      Language.PureScript.Errors.MultipleErrors
      Data.Functor.Identity.Identity
      a
    -> (a
        -> Control.Monad.Trans.Writer.Strict.WriterT
             Language.PureScript.Errors.MultipleErrors
             Data.Functor.Identity.Identity
             b)
    -> Control.Monad.Trans.Writer.Strict.WriterT
         Language.PureScript.Errors.MultipleErrors
         Data.Functor.Identity.Identity
         b
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S,1*U(U,1*U)><C(S),1*C1(U(U,1*U))>m,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ a
                   @ b
                   (m1 :: Control.Monad.Trans.Writer.Strict.WriterT
                            Language.PureScript.Errors.MultipleErrors
                            Data.Functor.Identity.Identity
                            a)
                   (k :: a
                         -> Control.Monad.Trans.Writer.Strict.WriterT
                              Language.PureScript.Errors.MultipleErrors
                              Data.Functor.Identity.Identity
                              b) ->
                 case m1
                        `cast`
                      (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                           <Language.PureScript.Errors.MultipleErrors>_N
                           <Data.Functor.Identity.Identity>_R
                           <a>_N ; Data.Functor.Identity.N:Identity[0]
                                       <(a,
                                         Language.PureScript.Errors.MultipleErrors)>_R) of wild { (,) a1 w1 ->
                 case (k a1)
                        `cast`
                      (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                           <Language.PureScript.Errors.MultipleErrors>_N
                           <Data.Functor.Identity.Identity>_R
                           <b>_N ; Data.Functor.Identity.N:Identity[0]
                                       <(b,
                                         Language.PureScript.Errors.MultipleErrors)>_R) of wild1 { (,) b1 w' ->
                 (b1,
                  (GHC.Base.augment
                     @ Language.PureScript.AST.Declarations.ErrorMessage
                     (\ @ b2
                        (c :: Language.PureScript.AST.Declarations.ErrorMessage
                              -> b2 -> b2)[OneShot]
                        (n :: b2)[OneShot] ->
                      GHC.Base.foldr
                        @ Language.PureScript.AST.Declarations.ErrorMessage
                        @ b2
                        c
                        n
                        w1 `cast` (Language.PureScript.Errors.N:MultipleErrors[0]))
                     w' `cast` (Language.PureScript.Errors.N:MultipleErrors[0]))
                    `cast`
                  (Sym (Language.PureScript.Errors.N:MultipleErrors[0])))
                   `cast`
                 (Sym (Data.Functor.Identity.N:Identity[0]
                           <(b, Language.PureScript.Errors.MultipleErrors)>_R)) } })
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.Writer.Strict.WriterT
                    Language.PureScript.Errors.MultipleErrors
                    Data.Functor.Identity.Identity
                    a>_R
                 ->_R <a
                       -> Control.Monad.Trans.Writer.Strict.WriterT
                            Language.PureScript.Errors.MultipleErrors
                            Data.Functor.Identity.Identity
                            b>_R
                 ->_R Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                               <Language.PureScript.Errors.MultipleErrors>_N
                               <Data.Functor.Identity.Identity>_R
                               <b>_N)) -}
d3e720dd2403543e7f242619d10e7c1b
  $s$fApplicativeStateT_$s$fMonadWriterT_$cfail ::
    GHC.Base.String
    -> Control.Monad.Trans.Writer.Strict.WriterT
         Language.PureScript.Errors.MultipleErrors
         Data.Functor.Identity.Identity
         a
  {- Arity: 1, Strictness: <B,U>x, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, True)
                (\ @ a (msg :: GHC.Base.String) ->
                 GHC.Err.errorWithoutStackTrace
                   @ 'GHC.Types.LiftedRep
                   @ (Data.Functor.Identity.Identity
                        (a, Language.PureScript.Errors.MultipleErrors))
                   msg)
                  `cast`
                (forall (a :: <*>_N).
                 <GHC.Base.String>_R
                 ->_R Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                               <Language.PureScript.Errors.MultipleErrors>_N
                               <Data.Functor.Identity.Identity>_R
                               <a>_N)) -}
df3a9abf939ee95af81ef4aa9b9da795
  $s$fApplicativeStateT_v ::
    GHC.Base.Functor
      (Control.Monad.Trans.Except.ExceptT
         Language.PureScript.Errors.MultipleErrors
         (Control.Monad.Trans.Writer.Strict.Writer
            Language.PureScript.Errors.MultipleErrors))
  {- Unfolding: (Control.Monad.Trans.Except.$fFunctorExceptT
                   @ (Control.Monad.Trans.Writer.Strict.WriterT
                        Language.PureScript.Errors.MultipleErrors
                        Data.Functor.Identity.Identity)
                   @ Language.PureScript.Errors.MultipleErrors
                   (Language.PureScript.Interactive.$s$fApplicativeStateT_$s$fFunctorWriterT
                      @ Language.PureScript.Errors.MultipleErrors)) -}
4372b0779c787c46386fff293026f825
  $s$fApplicativeWriterT_$c<* ::
    Control.Monad.Trans.Writer.Strict.WriterT
      Language.PureScript.Errors.MultipleErrors
      Data.Functor.Identity.Identity
      a
    -> Control.Monad.Trans.Writer.Strict.WriterT
         Language.PureScript.Errors.MultipleErrors
         Data.Functor.Identity.Identity
         b
    -> Control.Monad.Trans.Writer.Strict.WriterT
         Language.PureScript.Errors.MultipleErrors
         Data.Functor.Identity.Identity
         a
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*U(U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a
                   @ b
                   (eta :: Control.Monad.Trans.Writer.Strict.WriterT
                             Language.PureScript.Errors.MultipleErrors
                             Data.Functor.Identity.Identity
                             a) ->
                 Language.PureScript.Interactive.$s$fApplicativeStateT_$s$fApplicativeWriterT_$c<*>
                   @ b
                   @ a
                   (Control.Monad.Trans.Writer.Strict.$fApplicativeWriterT1
                      @ a
                      @ b
                      @ Language.PureScript.Errors.MultipleErrors
                      eta
                        `cast`
                      (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                           <Language.PureScript.Errors.MultipleErrors>_N
                           <Data.Functor.Identity.Identity>_R
                           <a>_N ; Data.Functor.Identity.N:Identity[0]
                                       <(a, Language.PureScript.Errors.MultipleErrors)>_R))
                     `cast`
                   (Sym (Data.Functor.Identity.N:Identity[0]
                             <(b -> a,
                               Language.PureScript.Errors.MultipleErrors)>_R) ; Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                         <Language.PureScript.Errors.MultipleErrors>_N
                                                                                         <Data.Functor.Identity.Identity>_R
                                                                                         <b
                                                                                          -> a>_N))) -}
d795ef46eb60c94820dceb3847978f47
  $s$fMonadErroreStateT ::
    Control.Monad.Error.Class.MonadError
      Language.PureScript.Errors.MultipleErrors
      (Control.Monad.Trans.State.Strict.StateT
         s
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Errors.MultipleErrors
            (Control.Monad.Trans.Writer.Strict.Writer
               Language.PureScript.Errors.MultipleErrors)))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ s.
                  @ Language.PureScript.Errors.MultipleErrors
                  @ (Control.Monad.Trans.State.Strict.StateT
                       s
                       (Control.Monad.Trans.Except.ExceptT
                          Language.PureScript.Errors.MultipleErrors
                          (Control.Monad.Trans.Writer.Strict.Writer
                             Language.PureScript.Errors.MultipleErrors)))
                  (Language.PureScript.Interactive.$s$fMonadErroreStateT_$s$fMonadStateT
                     @ s)
                  (\ @ a
                     (eta :: Language.PureScript.Errors.MultipleErrors)
                     (s1 :: s) ->
                   (Data.Either.Left
                      @ Language.PureScript.Errors.MultipleErrors
                      @ (a, s)
                      eta,
                    (GHC.Base.build
                       @ Language.PureScript.AST.Declarations.ErrorMessage
                       (\ @ b
                          (c :: Language.PureScript.AST.Declarations.ErrorMessage
                                -> b -> b)[OneShot]
                          (n :: b)[OneShot] ->
                        n))
                      `cast`
                    (Sym (Language.PureScript.Errors.N:MultipleErrors[0]))))
                    `cast`
                  (forall (a :: <*>_N).
                   <Language.PureScript.Errors.MultipleErrors>_R
                   ->_R (<s>_R
                         ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                       <(Data.Either.Either
                                           Language.PureScript.Errors.MultipleErrors (a, s),
                                         Language.PureScript.Errors.MultipleErrors)>_R) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                                    <Language.PureScript.Errors.MultipleErrors>_N
                                                                                                    <Data.Functor.Identity.Identity>_R
                                                                                                    <Data.Either.Either
                                                                                                       Language.PureScript.Errors.MultipleErrors
                                                                                                       (a,
                                                                                                        s)>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                          <Language.PureScript.Errors.MultipleErrors>_N
                                                                                                                          <Control.Monad.Trans.Writer.Strict.WriterT
                                                                                                                             Language.PureScript.Errors.MultipleErrors
                                                                                                                             Data.Functor.Identity.Identity>_R
                                                                                                                          <(a,
                                                                                                                            s)>_N))) ; Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                                                                                                <s>_N
                                                                                                                                                <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                   Language.PureScript.Errors.MultipleErrors
                                                                                                                                                   (Control.Monad.Trans.Writer.Strict.Writer
                                                                                                                                                      Language.PureScript.Errors.MultipleErrors)>_R
                                                                                                                                                <a>_N))
                  (\ @ a
                     (eta :: Control.Monad.Trans.State.Strict.StateT
                               s
                               (Control.Monad.Trans.Except.ExceptT
                                  Language.PureScript.Errors.MultipleErrors
                                  (Control.Monad.Trans.Writer.Strict.Writer
                                     Language.PureScript.Errors.MultipleErrors))
                               a)
                     (eta1 :: Language.PureScript.Errors.MultipleErrors
                              -> Control.Monad.Trans.State.Strict.StateT
                                   s
                                   (Control.Monad.Trans.Except.ExceptT
                                      Language.PureScript.Errors.MultipleErrors
                                      (Control.Monad.Trans.Writer.Strict.Writer
                                         Language.PureScript.Errors.MultipleErrors))
                                   a)
                     (eta2 :: s) ->
                   case (eta
                           `cast`
                         (Control.Monad.Trans.State.Strict.N:StateT[0]
                              <s>_N
                              <Control.Monad.Trans.Except.ExceptT
                                 Language.PureScript.Errors.MultipleErrors
                                 (Control.Monad.Trans.Writer.Strict.Writer
                                    Language.PureScript.Errors.MultipleErrors)>_R
                              <a>_N)
                           eta2)
                          `cast`
                        (Control.Monad.Trans.Except.N:ExceptT[0]
                             <Language.PureScript.Errors.MultipleErrors>_N
                             <Control.Monad.Trans.Writer.Strict.WriterT
                                Language.PureScript.Errors.MultipleErrors
                                Data.Functor.Identity.Identity>_R
                             <(a, s)>_N ; (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                               <Language.PureScript.Errors.MultipleErrors>_N
                                               <Data.Functor.Identity.Identity>_R
                                               <Data.Either.Either
                                                  Language.PureScript.Errors.MultipleErrors
                                                  (a, s)>_N ; Data.Functor.Identity.N:Identity[0]
                                                                  <(Data.Either.Either
                                                                      Language.PureScript.Errors.MultipleErrors
                                                                      (a, s),
                                                                    Language.PureScript.Errors.MultipleErrors)>_R)) of wild { (,) a1 w1 ->
                   case a1 of wild1 {
                     Data.Either.Left l
                     -> case ((eta1 l)
                                `cast`
                              (Control.Monad.Trans.State.Strict.N:StateT[0]
                                   <s>_N
                                   <Control.Monad.Trans.Except.ExceptT
                                      Language.PureScript.Errors.MultipleErrors
                                      (Control.Monad.Trans.Writer.Strict.Writer
                                         Language.PureScript.Errors.MultipleErrors)>_R
                                   <a>_N)
                                eta2)
                               `cast`
                             (Control.Monad.Trans.Except.N:ExceptT[0]
                                  <Language.PureScript.Errors.MultipleErrors>_N
                                  <Control.Monad.Trans.Writer.Strict.WriterT
                                     Language.PureScript.Errors.MultipleErrors
                                     Data.Functor.Identity.Identity>_R
                                  <(a, s)>_N ; (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                    <Language.PureScript.Errors.MultipleErrors>_N
                                                    <Data.Functor.Identity.Identity>_R
                                                    <Data.Either.Either
                                                       Language.PureScript.Errors.MultipleErrors
                                                       (a,
                                                        s)>_N ; Data.Functor.Identity.N:Identity[0]
                                                                    <(Data.Either.Either
                                                                        Language.PureScript.Errors.MultipleErrors
                                                                        (a, s),
                                                                      Language.PureScript.Errors.MultipleErrors)>_R)) of wild2 { (,) b1 w' ->
                        (b1,
                         (GHC.Base.augment
                            @ Language.PureScript.AST.Declarations.ErrorMessage
                            (\ @ b
                               (c :: Language.PureScript.AST.Declarations.ErrorMessage
                                     -> b -> b)[OneShot]
                               (n :: b)[OneShot] ->
                             GHC.Base.foldr
                               @ Language.PureScript.AST.Declarations.ErrorMessage
                               @ b
                               c
                               n
                               w1 `cast` (Language.PureScript.Errors.N:MultipleErrors[0]))
                            w' `cast` (Language.PureScript.Errors.N:MultipleErrors[0]))
                           `cast`
                         (Sym (Language.PureScript.Errors.N:MultipleErrors[0])))
                          `cast`
                        (Sym (Data.Functor.Identity.N:Identity[0]
                                  <(Data.Either.Either
                                      Language.PureScript.Errors.MultipleErrors (a, s),
                                    Language.PureScript.Errors.MultipleErrors)>_R) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                               <Language.PureScript.Errors.MultipleErrors>_N
                                                                                               <Data.Functor.Identity.Identity>_R
                                                                                               <Data.Either.Either
                                                                                                  Language.PureScript.Errors.MultipleErrors
                                                                                                  (a,
                                                                                                   s)>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                     <Language.PureScript.Errors.MultipleErrors>_N
                                                                                                                     <Control.Monad.Trans.Writer.Strict.WriterT
                                                                                                                        Language.PureScript.Errors.MultipleErrors
                                                                                                                        Data.Functor.Identity.Identity>_R
                                                                                                                     <(a,
                                                                                                                       s)>_N))) }
                     Data.Either.Right r
                     -> (Data.Either.Right
                           @ Language.PureScript.Errors.MultipleErrors
                           @ (a, s)
                           r,
                         (GHC.Base.build
                            @ Language.PureScript.AST.Declarations.ErrorMessage
                            (\ @ b
                               (c :: Language.PureScript.AST.Declarations.ErrorMessage
                                     -> b -> b)[OneShot]
                               (n :: b)[OneShot] ->
                             GHC.Base.foldr
                               @ Language.PureScript.AST.Declarations.ErrorMessage
                               @ b
                               c
                               n
                               w1 `cast` (Language.PureScript.Errors.N:MultipleErrors[0])))
                           `cast`
                         (Sym (Language.PureScript.Errors.N:MultipleErrors[0])))
                          `cast`
                        (Sym (Data.Functor.Identity.N:Identity[0]
                                  <(Data.Either.Either
                                      Language.PureScript.Errors.MultipleErrors (a, s),
                                    Language.PureScript.Errors.MultipleErrors)>_R) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                               <Language.PureScript.Errors.MultipleErrors>_N
                                                                                               <Data.Functor.Identity.Identity>_R
                                                                                               <Data.Either.Either
                                                                                                  Language.PureScript.Errors.MultipleErrors
                                                                                                  (a,
                                                                                                   s)>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                     <Language.PureScript.Errors.MultipleErrors>_N
                                                                                                                     <Control.Monad.Trans.Writer.Strict.WriterT
                                                                                                                        Language.PureScript.Errors.MultipleErrors
                                                                                                                        Data.Functor.Identity.Identity>_R
                                                                                                                     <(a,
                                                                                                                       s)>_N))) } })
                    `cast`
                  (forall (a :: <*>_N).
                   <Control.Monad.Trans.State.Strict.StateT
                      s
                      (Control.Monad.Trans.Except.ExceptT
                         Language.PureScript.Errors.MultipleErrors
                         (Control.Monad.Trans.Writer.Strict.Writer
                            Language.PureScript.Errors.MultipleErrors))
                      a>_R
                   ->_R <Language.PureScript.Errors.MultipleErrors
                         -> Control.Monad.Trans.State.Strict.StateT
                              s
                              (Control.Monad.Trans.Except.ExceptT
                                 Language.PureScript.Errors.MultipleErrors
                                 (Control.Monad.Trans.Writer.Strict.Writer
                                    Language.PureScript.Errors.MultipleErrors))
                              a>_R
                   ->_R Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                 <s>_N
                                 <Control.Monad.Trans.Except.ExceptT
                                    Language.PureScript.Errors.MultipleErrors
                                    (Control.Monad.Trans.Writer.Strict.Writer
                                       Language.PureScript.Errors.MultipleErrors)>_R
                                 <a>_N)) -}
f0720305bc99d424c0ff604e99d9a6a5
  $s$fMonadErroreStateT1 ::
    Control.Monad.Trans.State.Strict.StateT
      s
      (Control.Monad.Trans.Except.ExceptT
         Language.PureScript.Errors.MultipleErrors
         (Control.Monad.Trans.Writer.Strict.Writer
            Language.PureScript.Errors.MultipleErrors))
      a
    -> (Language.PureScript.Errors.MultipleErrors
        -> Control.Monad.Trans.State.Strict.StateT
             s
             (Control.Monad.Trans.Except.ExceptT
                Language.PureScript.Errors.MultipleErrors
                (Control.Monad.Trans.Writer.Strict.Writer
                   Language.PureScript.Errors.MultipleErrors))
             a)
    -> s
    -> Control.Monad.Trans.Except.ExceptT
         Language.PureScript.Errors.MultipleErrors
         (Control.Monad.Trans.Writer.Strict.Writer
            Language.PureScript.Errors.MultipleErrors)
         (a, s)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S(SL)),1*C1(U(U,U))><L,1*C1(C1(U(U,1*U)))><L,U>m,
     Unfolding: InlineRule (3, True, False)
                (\ @ s
                   @ a
                   (eta :: Control.Monad.Trans.State.Strict.StateT
                             s
                             (Control.Monad.Trans.Except.ExceptT
                                Language.PureScript.Errors.MultipleErrors
                                (Control.Monad.Trans.Writer.Strict.Writer
                                   Language.PureScript.Errors.MultipleErrors))
                             a)
                   (eta1 :: Language.PureScript.Errors.MultipleErrors
                            -> Control.Monad.Trans.State.Strict.StateT
                                 s
                                 (Control.Monad.Trans.Except.ExceptT
                                    Language.PureScript.Errors.MultipleErrors
                                    (Control.Monad.Trans.Writer.Strict.Writer
                                       Language.PureScript.Errors.MultipleErrors))
                                 a)
                   (eta2 :: s) ->
                 case (eta
                         `cast`
                       (Control.Monad.Trans.State.Strict.N:StateT[0]
                            <s>_N
                            <Control.Monad.Trans.Except.ExceptT
                               Language.PureScript.Errors.MultipleErrors
                               (Control.Monad.Trans.Writer.Strict.Writer
                                  Language.PureScript.Errors.MultipleErrors)>_R
                            <a>_N)
                         eta2)
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <Language.PureScript.Errors.MultipleErrors>_N
                           <Control.Monad.Trans.Writer.Strict.WriterT
                              Language.PureScript.Errors.MultipleErrors
                              Data.Functor.Identity.Identity>_R
                           <(a, s)>_N ; (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                             <Language.PureScript.Errors.MultipleErrors>_N
                                             <Data.Functor.Identity.Identity>_R
                                             <Data.Either.Either
                                                Language.PureScript.Errors.MultipleErrors
                                                (a, s)>_N ; Data.Functor.Identity.N:Identity[0]
                                                                <(Data.Either.Either
                                                                    Language.PureScript.Errors.MultipleErrors
                                                                    (a, s),
                                                                  Language.PureScript.Errors.MultipleErrors)>_R)) of wild { (,) a1 w1 ->
                 case a1 of wild1 {
                   Data.Either.Left l
                   -> case ((eta1 l)
                              `cast`
                            (Control.Monad.Trans.State.Strict.N:StateT[0]
                                 <s>_N
                                 <Control.Monad.Trans.Except.ExceptT
                                    Language.PureScript.Errors.MultipleErrors
                                    (Control.Monad.Trans.Writer.Strict.Writer
                                       Language.PureScript.Errors.MultipleErrors)>_R
                                 <a>_N)
                              eta2)
                             `cast`
                           (Control.Monad.Trans.Except.N:ExceptT[0]
                                <Language.PureScript.Errors.MultipleErrors>_N
                                <Control.Monad.Trans.Writer.Strict.WriterT
                                   Language.PureScript.Errors.MultipleErrors
                                   Data.Functor.Identity.Identity>_R
                                <(a, s)>_N ; (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                  <Language.PureScript.Errors.MultipleErrors>_N
                                                  <Data.Functor.Identity.Identity>_R
                                                  <Data.Either.Either
                                                     Language.PureScript.Errors.MultipleErrors
                                                     (a, s)>_N ; Data.Functor.Identity.N:Identity[0]
                                                                     <(Data.Either.Either
                                                                         Language.PureScript.Errors.MultipleErrors
                                                                         (a, s),
                                                                       Language.PureScript.Errors.MultipleErrors)>_R)) of wild2 { (,) b1 w' ->
                      (b1,
                       (GHC.Base.augment
                          @ Language.PureScript.AST.Declarations.ErrorMessage
                          (\ @ b
                             (c :: Language.PureScript.AST.Declarations.ErrorMessage
                                   -> b -> b)[OneShot]
                             (n :: b)[OneShot] ->
                           GHC.Base.foldr
                             @ Language.PureScript.AST.Declarations.ErrorMessage
                             @ b
                             c
                             n
                             w1 `cast` (Language.PureScript.Errors.N:MultipleErrors[0]))
                          w' `cast` (Language.PureScript.Errors.N:MultipleErrors[0]))
                         `cast`
                       (Sym (Language.PureScript.Errors.N:MultipleErrors[0])))
                        `cast`
                      (Sym (Data.Functor.Identity.N:Identity[0]
                                <(Data.Either.Either
                                    Language.PureScript.Errors.MultipleErrors (a, s),
                                  Language.PureScript.Errors.MultipleErrors)>_R) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                             <Language.PureScript.Errors.MultipleErrors>_N
                                                                                             <Data.Functor.Identity.Identity>_R
                                                                                             <Data.Either.Either
                                                                                                Language.PureScript.Errors.MultipleErrors
                                                                                                (a,
                                                                                                 s)>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                   <Language.PureScript.Errors.MultipleErrors>_N
                                                                                                                   <Control.Monad.Trans.Writer.Strict.WriterT
                                                                                                                      Language.PureScript.Errors.MultipleErrors
                                                                                                                      Data.Functor.Identity.Identity>_R
                                                                                                                   <(a,
                                                                                                                     s)>_N))) }
                   Data.Either.Right r
                   -> (Data.Either.Right
                         @ Language.PureScript.Errors.MultipleErrors
                         @ (a, s)
                         r,
                       (GHC.Base.build
                          @ Language.PureScript.AST.Declarations.ErrorMessage
                          (\ @ b
                             (c :: Language.PureScript.AST.Declarations.ErrorMessage
                                   -> b -> b)[OneShot]
                             (n :: b)[OneShot] ->
                           GHC.Base.foldr
                             @ Language.PureScript.AST.Declarations.ErrorMessage
                             @ b
                             c
                             n
                             w1 `cast` (Language.PureScript.Errors.N:MultipleErrors[0])))
                         `cast`
                       (Sym (Language.PureScript.Errors.N:MultipleErrors[0])))
                        `cast`
                      (Sym (Data.Functor.Identity.N:Identity[0]
                                <(Data.Either.Either
                                    Language.PureScript.Errors.MultipleErrors (a, s),
                                  Language.PureScript.Errors.MultipleErrors)>_R) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                             <Language.PureScript.Errors.MultipleErrors>_N
                                                                                             <Data.Functor.Identity.Identity>_R
                                                                                             <Data.Either.Either
                                                                                                Language.PureScript.Errors.MultipleErrors
                                                                                                (a,
                                                                                                 s)>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                   <Language.PureScript.Errors.MultipleErrors>_N
                                                                                                                   <Control.Monad.Trans.Writer.Strict.WriterT
                                                                                                                      Language.PureScript.Errors.MultipleErrors
                                                                                                                      Data.Functor.Identity.Identity>_R
                                                                                                                   <(a,
                                                                                                                     s)>_N))) } }) -}
387b29755af1ec9506ca70285713da35
  $s$fMonadErroreStateT_$s$fMonadStateT ::
    GHC.Base.Monad
      (Control.Monad.Trans.State.Strict.StateT
         s
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Errors.MultipleErrors
            (Control.Monad.Trans.Writer.Strict.Writer
               Language.PureScript.Errors.MultipleErrors)))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ s.
                  @ (Control.Monad.Trans.State.Strict.StateT
                       s
                       (Control.Monad.Trans.Except.ExceptT
                          Language.PureScript.Errors.MultipleErrors
                          (Control.Monad.Trans.Writer.Strict.Writer
                             Language.PureScript.Errors.MultipleErrors)))
                  (Language.PureScript.Interactive.$s$fApplicativeStateT @ s)
                  (Language.PureScript.Interactive.$s$fMonadErroreStateT_$s$fMonadStateT_$c>>=
                     @ s)
                  (Language.PureScript.Interactive.$s$fMonadErroreStateT_$s$fMonadStateT_$c>>
                     @ s)
                  (\ @ a (eta :: a) (eta1 :: s) ->
                   (Data.Either.Right
                      @ Language.PureScript.Errors.MultipleErrors
                      @ (a, s)
                      (eta, eta1),
                    (GHC.Types.[] @ Language.PureScript.AST.Declarations.ErrorMessage)
                      `cast`
                    (Sym (Language.PureScript.Errors.N:MultipleErrors[0]))))
                    `cast`
                  (forall (a :: <*>_N).
                   <a>_R
                   ->_R (<s>_R
                         ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                       <(Data.Either.Either
                                           Language.PureScript.Errors.MultipleErrors (a, s),
                                         Language.PureScript.Errors.MultipleErrors)>_R) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                                    <Language.PureScript.Errors.MultipleErrors>_N
                                                                                                    <Data.Functor.Identity.Identity>_R
                                                                                                    <Data.Either.Either
                                                                                                       Language.PureScript.Errors.MultipleErrors
                                                                                                       (a,
                                                                                                        s)>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                          <Language.PureScript.Errors.MultipleErrors>_N
                                                                                                                          <Control.Monad.Trans.Writer.Strict.WriterT
                                                                                                                             Language.PureScript.Errors.MultipleErrors
                                                                                                                             Data.Functor.Identity.Identity>_R
                                                                                                                          <(a,
                                                                                                                            s)>_N))) ; Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                                                                                                <s>_N
                                                                                                                                                <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                   Language.PureScript.Errors.MultipleErrors
                                                                                                                                                   (Control.Monad.Trans.Writer.Strict.Writer
                                                                                                                                                      Language.PureScript.Errors.MultipleErrors)>_R
                                                                                                                                                <a>_N))
                  (Language.PureScript.Interactive.$s$fMonadErroreStateT_$s$fMonadStateT_$cfail
                     @ s) -}
697680ea95752cbb49d2870afc60cd49
  $s$fMonadErroreStateT_$s$fMonadStateT_$c>> ::
    Control.Monad.Trans.State.Strict.StateT
      s
      (Control.Monad.Trans.Except.ExceptT
         Language.PureScript.Errors.MultipleErrors
         (Control.Monad.Trans.Writer.Strict.Writer
            Language.PureScript.Errors.MultipleErrors))
      a
    -> Control.Monad.Trans.State.Strict.StateT
         s
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Errors.MultipleErrors
            (Control.Monad.Trans.Writer.Strict.Writer
               Language.PureScript.Errors.MultipleErrors))
         b
    -> Control.Monad.Trans.State.Strict.StateT
         s
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Errors.MultipleErrors
            (Control.Monad.Trans.Writer.Strict.Writer
               Language.PureScript.Errors.MultipleErrors))
         b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S(SL)),1*C1(U(1*U,U))><L,1*C1(U(U,1*U))><L,U>m,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ a
                   @ b
                   (m1 :: Control.Monad.Trans.State.Strict.StateT
                            s
                            (Control.Monad.Trans.Except.ExceptT
                               Language.PureScript.Errors.MultipleErrors
                               (Control.Monad.Trans.Writer.Strict.Writer
                                  Language.PureScript.Errors.MultipleErrors))
                            a)
                   (k :: Control.Monad.Trans.State.Strict.StateT
                           s
                           (Control.Monad.Trans.Except.ExceptT
                              Language.PureScript.Errors.MultipleErrors
                              (Control.Monad.Trans.Writer.Strict.Writer
                                 Language.PureScript.Errors.MultipleErrors))
                           b)
                   (s1 :: s) ->
                 case (m1
                         `cast`
                       (Control.Monad.Trans.State.Strict.N:StateT[0]
                            <s>_N
                            <Control.Monad.Trans.Except.ExceptT
                               Language.PureScript.Errors.MultipleErrors
                               (Control.Monad.Trans.Writer.Strict.Writer
                                  Language.PureScript.Errors.MultipleErrors)>_R
                            <a>_N)
                         s1)
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <Language.PureScript.Errors.MultipleErrors>_N
                           <Control.Monad.Trans.Writer.Strict.WriterT
                              Language.PureScript.Errors.MultipleErrors
                              Data.Functor.Identity.Identity>_R
                           <(a, s)>_N ; (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                             <Language.PureScript.Errors.MultipleErrors>_N
                                             <Data.Functor.Identity.Identity>_R
                                             <Data.Either.Either
                                                Language.PureScript.Errors.MultipleErrors
                                                (a, s)>_N ; Data.Functor.Identity.N:Identity[0]
                                                                <(Data.Either.Either
                                                                    Language.PureScript.Errors.MultipleErrors
                                                                    (a, s),
                                                                  Language.PureScript.Errors.MultipleErrors)>_R)) of wild { (,) a1 w1 ->
                 case a1 of wild1 {
                   Data.Either.Left e1
                   -> (Data.Either.Left
                         @ Language.PureScript.Errors.MultipleErrors
                         @ (b, s)
                         e1,
                       (GHC.Base.build
                          @ Language.PureScript.AST.Declarations.ErrorMessage
                          (\ @ b1
                             (c :: Language.PureScript.AST.Declarations.ErrorMessage
                                   -> b1 -> b1)[OneShot]
                             (n :: b1)[OneShot] ->
                           GHC.Base.foldr
                             @ Language.PureScript.AST.Declarations.ErrorMessage
                             @ b1
                             c
                             n
                             w1 `cast` (Language.PureScript.Errors.N:MultipleErrors[0])))
                         `cast`
                       (Sym (Language.PureScript.Errors.N:MultipleErrors[0])))
                        `cast`
                      (Sym (Data.Functor.Identity.N:Identity[0]
                                <(Data.Either.Either
                                    Language.PureScript.Errors.MultipleErrors (b, s),
                                  Language.PureScript.Errors.MultipleErrors)>_R) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                             <Language.PureScript.Errors.MultipleErrors>_N
                                                                                             <Data.Functor.Identity.Identity>_R
                                                                                             <Data.Either.Either
                                                                                                Language.PureScript.Errors.MultipleErrors
                                                                                                (b,
                                                                                                 s)>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                   <Language.PureScript.Errors.MultipleErrors>_N
                                                                                                                   <Control.Monad.Trans.Writer.Strict.WriterT
                                                                                                                      Language.PureScript.Errors.MultipleErrors
                                                                                                                      Data.Functor.Identity.Identity>_R
                                                                                                                   <(b,
                                                                                                                     s)>_N)))
                   Data.Either.Right x
                   -> case x of wild2 { (,) a2 s' ->
                      case (k `cast`
                            (Control.Monad.Trans.State.Strict.N:StateT[0]
                                 <s>_N
                                 <Control.Monad.Trans.Except.ExceptT
                                    Language.PureScript.Errors.MultipleErrors
                                    (Control.Monad.Trans.Writer.Strict.Writer
                                       Language.PureScript.Errors.MultipleErrors)>_R
                                 <b>_N)
                              s')
                             `cast`
                           (Control.Monad.Trans.Except.N:ExceptT[0]
                                <Language.PureScript.Errors.MultipleErrors>_N
                                <Control.Monad.Trans.Writer.Strict.WriterT
                                   Language.PureScript.Errors.MultipleErrors
                                   Data.Functor.Identity.Identity>_R
                                <(b, s)>_N ; (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                  <Language.PureScript.Errors.MultipleErrors>_N
                                                  <Data.Functor.Identity.Identity>_R
                                                  <Data.Either.Either
                                                     Language.PureScript.Errors.MultipleErrors
                                                     (b, s)>_N ; Data.Functor.Identity.N:Identity[0]
                                                                     <(Data.Either.Either
                                                                         Language.PureScript.Errors.MultipleErrors
                                                                         (b, s),
                                                                       Language.PureScript.Errors.MultipleErrors)>_R)) of wild3 { (,) b1 w' ->
                      (b1,
                       (GHC.Base.augment
                          @ Language.PureScript.AST.Declarations.ErrorMessage
                          (\ @ b2
                             (c :: Language.PureScript.AST.Declarations.ErrorMessage
                                   -> b2 -> b2)[OneShot]
                             (n :: b2)[OneShot] ->
                           GHC.Base.foldr
                             @ Language.PureScript.AST.Declarations.ErrorMessage
                             @ b2
                             c
                             n
                             w1 `cast` (Language.PureScript.Errors.N:MultipleErrors[0]))
                          w' `cast` (Language.PureScript.Errors.N:MultipleErrors[0]))
                         `cast`
                       (Sym (Language.PureScript.Errors.N:MultipleErrors[0])))
                        `cast`
                      (Sym (Data.Functor.Identity.N:Identity[0]
                                <(Data.Either.Either
                                    Language.PureScript.Errors.MultipleErrors (b, s),
                                  Language.PureScript.Errors.MultipleErrors)>_R) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                             <Language.PureScript.Errors.MultipleErrors>_N
                                                                                             <Data.Functor.Identity.Identity>_R
                                                                                             <Data.Either.Either
                                                                                                Language.PureScript.Errors.MultipleErrors
                                                                                                (b,
                                                                                                 s)>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                   <Language.PureScript.Errors.MultipleErrors>_N
                                                                                                                   <Control.Monad.Trans.Writer.Strict.WriterT
                                                                                                                      Language.PureScript.Errors.MultipleErrors
                                                                                                                      Data.Functor.Identity.Identity>_R
                                                                                                                   <(b,
                                                                                                                     s)>_N))) } } } })
                  `cast`
                (forall (s :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.State.Strict.StateT
                    s
                    (Control.Monad.Trans.Except.ExceptT
                       Language.PureScript.Errors.MultipleErrors
                       (Control.Monad.Trans.Writer.Strict.Writer
                          Language.PureScript.Errors.MultipleErrors))
                    a>_R
                 ->_R <Control.Monad.Trans.State.Strict.StateT
                         s
                         (Control.Monad.Trans.Except.ExceptT
                            Language.PureScript.Errors.MultipleErrors
                            (Control.Monad.Trans.Writer.Strict.Writer
                               Language.PureScript.Errors.MultipleErrors))
                         b>_R
                 ->_R Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                               <s>_N
                               <Control.Monad.Trans.Except.ExceptT
                                  Language.PureScript.Errors.MultipleErrors
                                  (Control.Monad.Trans.Writer.Strict.Writer
                                     Language.PureScript.Errors.MultipleErrors)>_R
                               <b>_N)) -}
071ebd9cac49cfba7e951d5b7769d1d0
  $s$fMonadErroreStateT_$s$fMonadStateT_$c>>= ::
    Control.Monad.Trans.State.Strict.StateT
      s
      (Control.Monad.Trans.Except.ExceptT
         Language.PureScript.Errors.MultipleErrors
         (Control.Monad.Trans.Writer.Strict.Writer
            Language.PureScript.Errors.MultipleErrors))
      a
    -> (a
        -> Control.Monad.Trans.State.Strict.StateT
             s
             (Control.Monad.Trans.Except.ExceptT
                Language.PureScript.Errors.MultipleErrors
                (Control.Monad.Trans.Writer.Strict.Writer
                   Language.PureScript.Errors.MultipleErrors))
             b)
    -> Control.Monad.Trans.State.Strict.StateT
         s
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Errors.MultipleErrors
            (Control.Monad.Trans.Writer.Strict.Writer
               Language.PureScript.Errors.MultipleErrors))
         b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S(SL)),1*C1(U(1*U,U))><L,1*C1(C1(U(U,1*U)))><L,U>m,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ a
                   @ b
                   (m1 :: Control.Monad.Trans.State.Strict.StateT
                            s
                            (Control.Monad.Trans.Except.ExceptT
                               Language.PureScript.Errors.MultipleErrors
                               (Control.Monad.Trans.Writer.Strict.Writer
                                  Language.PureScript.Errors.MultipleErrors))
                            a)
                   (k :: a
                         -> Control.Monad.Trans.State.Strict.StateT
                              s
                              (Control.Monad.Trans.Except.ExceptT
                                 Language.PureScript.Errors.MultipleErrors
                                 (Control.Monad.Trans.Writer.Strict.Writer
                                    Language.PureScript.Errors.MultipleErrors))
                              b)
                   (s1 :: s) ->
                 case (m1
                         `cast`
                       (Control.Monad.Trans.State.Strict.N:StateT[0]
                            <s>_N
                            <Control.Monad.Trans.Except.ExceptT
                               Language.PureScript.Errors.MultipleErrors
                               (Control.Monad.Trans.Writer.Strict.Writer
                                  Language.PureScript.Errors.MultipleErrors)>_R
                            <a>_N)
                         s1)
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <Language.PureScript.Errors.MultipleErrors>_N
                           <Control.Monad.Trans.Writer.Strict.WriterT
                              Language.PureScript.Errors.MultipleErrors
                              Data.Functor.Identity.Identity>_R
                           <(a, s)>_N ; (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                             <Language.PureScript.Errors.MultipleErrors>_N
                                             <Data.Functor.Identity.Identity>_R
                                             <Data.Either.Either
                                                Language.PureScript.Errors.MultipleErrors
                                                (a, s)>_N ; Data.Functor.Identity.N:Identity[0]
                                                                <(Data.Either.Either
                                                                    Language.PureScript.Errors.MultipleErrors
                                                                    (a, s),
                                                                  Language.PureScript.Errors.MultipleErrors)>_R)) of wild { (,) a1 w1 ->
                 case a1 of wild1 {
                   Data.Either.Left e1
                   -> (Data.Either.Left
                         @ Language.PureScript.Errors.MultipleErrors
                         @ (b, s)
                         e1,
                       (GHC.Base.build
                          @ Language.PureScript.AST.Declarations.ErrorMessage
                          (\ @ b1
                             (c :: Language.PureScript.AST.Declarations.ErrorMessage
                                   -> b1 -> b1)[OneShot]
                             (n :: b1)[OneShot] ->
                           GHC.Base.foldr
                             @ Language.PureScript.AST.Declarations.ErrorMessage
                             @ b1
                             c
                             n
                             w1 `cast` (Language.PureScript.Errors.N:MultipleErrors[0])))
                         `cast`
                       (Sym (Language.PureScript.Errors.N:MultipleErrors[0])))
                        `cast`
                      (Sym (Data.Functor.Identity.N:Identity[0]
                                <(Data.Either.Either
                                    Language.PureScript.Errors.MultipleErrors (b, s),
                                  Language.PureScript.Errors.MultipleErrors)>_R) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                             <Language.PureScript.Errors.MultipleErrors>_N
                                                                                             <Data.Functor.Identity.Identity>_R
                                                                                             <Data.Either.Either
                                                                                                Language.PureScript.Errors.MultipleErrors
                                                                                                (b,
                                                                                                 s)>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                   <Language.PureScript.Errors.MultipleErrors>_N
                                                                                                                   <Control.Monad.Trans.Writer.Strict.WriterT
                                                                                                                      Language.PureScript.Errors.MultipleErrors
                                                                                                                      Data.Functor.Identity.Identity>_R
                                                                                                                   <(b,
                                                                                                                     s)>_N)))
                   Data.Either.Right x
                   -> case x of wild2 { (,) a2 s' ->
                      case ((k a2)
                              `cast`
                            (Control.Monad.Trans.State.Strict.N:StateT[0]
                                 <s>_N
                                 <Control.Monad.Trans.Except.ExceptT
                                    Language.PureScript.Errors.MultipleErrors
                                    (Control.Monad.Trans.Writer.Strict.Writer
                                       Language.PureScript.Errors.MultipleErrors)>_R
                                 <b>_N)
                              s')
                             `cast`
                           (Control.Monad.Trans.Except.N:ExceptT[0]
                                <Language.PureScript.Errors.MultipleErrors>_N
                                <Control.Monad.Trans.Writer.Strict.WriterT
                                   Language.PureScript.Errors.MultipleErrors
                                   Data.Functor.Identity.Identity>_R
                                <(b, s)>_N ; (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                  <Language.PureScript.Errors.MultipleErrors>_N
                                                  <Data.Functor.Identity.Identity>_R
                                                  <Data.Either.Either
                                                     Language.PureScript.Errors.MultipleErrors
                                                     (b, s)>_N ; Data.Functor.Identity.N:Identity[0]
                                                                     <(Data.Either.Either
                                                                         Language.PureScript.Errors.MultipleErrors
                                                                         (b, s),
                                                                       Language.PureScript.Errors.MultipleErrors)>_R)) of wild3 { (,) b1 w' ->
                      (b1,
                       (GHC.Base.augment
                          @ Language.PureScript.AST.Declarations.ErrorMessage
                          (\ @ b2
                             (c :: Language.PureScript.AST.Declarations.ErrorMessage
                                   -> b2 -> b2)[OneShot]
                             (n :: b2)[OneShot] ->
                           GHC.Base.foldr
                             @ Language.PureScript.AST.Declarations.ErrorMessage
                             @ b2
                             c
                             n
                             w1 `cast` (Language.PureScript.Errors.N:MultipleErrors[0]))
                          w' `cast` (Language.PureScript.Errors.N:MultipleErrors[0]))
                         `cast`
                       (Sym (Language.PureScript.Errors.N:MultipleErrors[0])))
                        `cast`
                      (Sym (Data.Functor.Identity.N:Identity[0]
                                <(Data.Either.Either
                                    Language.PureScript.Errors.MultipleErrors (b, s),
                                  Language.PureScript.Errors.MultipleErrors)>_R) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                             <Language.PureScript.Errors.MultipleErrors>_N
                                                                                             <Data.Functor.Identity.Identity>_R
                                                                                             <Data.Either.Either
                                                                                                Language.PureScript.Errors.MultipleErrors
                                                                                                (b,
                                                                                                 s)>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                   <Language.PureScript.Errors.MultipleErrors>_N
                                                                                                                   <Control.Monad.Trans.Writer.Strict.WriterT
                                                                                                                      Language.PureScript.Errors.MultipleErrors
                                                                                                                      Data.Functor.Identity.Identity>_R
                                                                                                                   <(b,
                                                                                                                     s)>_N))) } } } })
                  `cast`
                (forall (s :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.State.Strict.StateT
                    s
                    (Control.Monad.Trans.Except.ExceptT
                       Language.PureScript.Errors.MultipleErrors
                       (Control.Monad.Trans.Writer.Strict.Writer
                          Language.PureScript.Errors.MultipleErrors))
                    a>_R
                 ->_R <a
                       -> Control.Monad.Trans.State.Strict.StateT
                            s
                            (Control.Monad.Trans.Except.ExceptT
                               Language.PureScript.Errors.MultipleErrors
                               (Control.Monad.Trans.Writer.Strict.Writer
                                  Language.PureScript.Errors.MultipleErrors))
                            b>_R
                 ->_R Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                               <s>_N
                               <Control.Monad.Trans.Except.ExceptT
                                  Language.PureScript.Errors.MultipleErrors
                                  (Control.Monad.Trans.Writer.Strict.Writer
                                     Language.PureScript.Errors.MultipleErrors)>_R
                               <b>_N)) -}
3b54767f095b686b95cd4a9c3046bdb4
  $s$fMonadErroreStateT_$s$fMonadStateT_$cfail ::
    GHC.Base.String
    -> Control.Monad.Trans.State.Strict.StateT
         s
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Errors.MultipleErrors
            (Control.Monad.Trans.Writer.Strict.Writer
               Language.PureScript.Errors.MultipleErrors))
         a
  {- Arity: 2, Strictness: <B,U><B,A>x, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, True)
                (\ @ s @ a (str :: GHC.Base.String) (ds :: s) ->
                 GHC.Err.errorWithoutStackTrace
                   @ 'GHC.Types.LiftedRep
                   @ (Data.Functor.Identity.Identity
                        (Data.Either.Either
                           Language.PureScript.Errors.MultipleErrors (a, s),
                         Language.PureScript.Errors.MultipleErrors))
                   str)
                  `cast`
                (forall (s :: <*>_N) (a :: <*>_N).
                 <GHC.Base.String>_R
                 ->_R (<s>_R
                       ->_R Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                     <Language.PureScript.Errors.MultipleErrors>_N
                                     <Data.Functor.Identity.Identity>_R
                                     <Data.Either.Either
                                        Language.PureScript.Errors.MultipleErrors
                                        (a, s)>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                              <Language.PureScript.Errors.MultipleErrors>_N
                                                              <Control.Monad.Trans.Writer.Strict.WriterT
                                                                 Language.PureScript.Errors.MultipleErrors
                                                                 Data.Functor.Identity.Identity>_R
                                                              <(a,
                                                                s)>_N)) ; Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                                   <s>_N
                                                                                   <Control.Monad.Trans.Except.ExceptT
                                                                                      Language.PureScript.Errors.MultipleErrors
                                                                                      (Control.Monad.Trans.Writer.Strict.Writer
                                                                                         Language.PureScript.Errors.MultipleErrors)>_R
                                                                                   <a>_N)) -}
0955aa5112601419ff3c900fea1a2c0a
  $s$fMonadStatesStateT ::
    Control.Monad.State.Class.MonadState
      s
      (Control.Monad.Trans.State.Strict.StateT
         s
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Errors.MultipleErrors
            (Control.Monad.Trans.Writer.Strict.Writer
               Language.PureScript.Errors.MultipleErrors)))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ s.
                  @ s
                  @ (Control.Monad.Trans.State.Strict.StateT
                       s
                       (Control.Monad.Trans.Except.ExceptT
                          Language.PureScript.Errors.MultipleErrors
                          (Control.Monad.Trans.Writer.Strict.Writer
                             Language.PureScript.Errors.MultipleErrors)))
                  (Language.PureScript.Interactive.$s$fMonadErroreStateT_$s$fMonadStateT
                     @ s)
                  (\ (x :: s) ->
                   (Data.Either.Right
                      @ Language.PureScript.Errors.MultipleErrors
                      @ (s, s)
                      (x, x),
                    (GHC.Types.[] @ Language.PureScript.AST.Declarations.ErrorMessage)
                      `cast`
                    (Sym (Language.PureScript.Errors.N:MultipleErrors[0]))))
                    `cast`
                  ((<s>_R
                    ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                  <(Data.Either.Either
                                      Language.PureScript.Errors.MultipleErrors (s, s),
                                    Language.PureScript.Errors.MultipleErrors)>_R) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                               <Language.PureScript.Errors.MultipleErrors>_N
                                                                                               <Data.Functor.Identity.Identity>_R
                                                                                               <Data.Either.Either
                                                                                                  Language.PureScript.Errors.MultipleErrors
                                                                                                  (s,
                                                                                                   s)>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                     <Language.PureScript.Errors.MultipleErrors>_N
                                                                                                                     <Control.Monad.Trans.Writer.Strict.WriterT
                                                                                                                        Language.PureScript.Errors.MultipleErrors
                                                                                                                        Data.Functor.Identity.Identity>_R
                                                                                                                     <(s,
                                                                                                                       s)>_N))) ; Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                                                                                           <s>_N
                                                                                                                                           <Control.Monad.Trans.Except.ExceptT
                                                                                                                                              Language.PureScript.Errors.MultipleErrors
                                                                                                                                              (Control.Monad.Trans.Writer.Strict.Writer
                                                                                                                                                 Language.PureScript.Errors.MultipleErrors)>_R
                                                                                                                                           <s>_N))
                  (Language.PureScript.Interactive.$s$fMonadStatesStateT_$sput @ s)
                  (Language.PureScript.Interactive.$s$fMonadStatesStateT_$sstate
                     @ s) -}
0162e378ae156be6b3e13d0dcb32851e
  $s$fMonadStatesStateT_$sput ::
    s
    -> Control.Monad.Trans.State.Strict.StateT
         s
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Errors.MultipleErrors
            (Control.Monad.Trans.Writer.Strict.Writer
               Language.PureScript.Errors.MultipleErrors))
         ()
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,A>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ s (s1 :: s) (x :: s) ->
                 (Data.Either.Right
                    @ Language.PureScript.Errors.MultipleErrors
                    @ ((), s)
                    (GHC.Tuple.(), s1),
                  (GHC.Types.[] @ Language.PureScript.AST.Declarations.ErrorMessage)
                    `cast`
                  (Sym (Language.PureScript.Errors.N:MultipleErrors[0]))))
                  `cast`
                (forall (s :: <*>_N).
                 <s>_R
                 ->_R (<s>_R
                       ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                     <(Data.Either.Either
                                         Language.PureScript.Errors.MultipleErrors ((), s),
                                       Language.PureScript.Errors.MultipleErrors)>_R) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                                  <Language.PureScript.Errors.MultipleErrors>_N
                                                                                                  <Data.Functor.Identity.Identity>_R
                                                                                                  <Data.Either.Either
                                                                                                     Language.PureScript.Errors.MultipleErrors
                                                                                                     ((),
                                                                                                      s)>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                        <Language.PureScript.Errors.MultipleErrors>_N
                                                                                                                        <Control.Monad.Trans.Writer.Strict.WriterT
                                                                                                                           Language.PureScript.Errors.MultipleErrors
                                                                                                                           Data.Functor.Identity.Identity>_R
                                                                                                                        <((),
                                                                                                                          s)>_N))) ; Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                                                                                              <s>_N
                                                                                                                                              <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                 Language.PureScript.Errors.MultipleErrors
                                                                                                                                                 (Control.Monad.Trans.Writer.Strict.Writer
                                                                                                                                                    Language.PureScript.Errors.MultipleErrors)>_R
                                                                                                                                              <()>_N)) -}
d2d467ef5ed6a8dfdc5a738459dfc368
  $s$fMonadStatesStateT_$sstate ::
    (s -> (a, s))
    -> Control.Monad.Trans.State.Strict.StateT
         s
         (Control.Monad.Trans.Except.ExceptT
            Language.PureScript.Errors.MultipleErrors
            (Control.Monad.Trans.Writer.Strict.Writer
               Language.PureScript.Errors.MultipleErrors))
         a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><L,U>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ s @ a (f :: s -> (a, s)) (x :: s) ->
                 (Data.Either.Right
                    @ Language.PureScript.Errors.MultipleErrors
                    @ (a, s)
                    (f x),
                  (GHC.Types.[] @ Language.PureScript.AST.Declarations.ErrorMessage)
                    `cast`
                  (Sym (Language.PureScript.Errors.N:MultipleErrors[0]))))
                  `cast`
                (forall (s :: <*>_N) (a :: <*>_N).
                 <s -> (a, s)>_R
                 ->_R (<s>_R
                       ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                     <(Data.Either.Either
                                         Language.PureScript.Errors.MultipleErrors (a, s),
                                       Language.PureScript.Errors.MultipleErrors)>_R) ; (Sym (Control.Monad.Trans.Writer.Strict.N:WriterT[0]
                                                                                                  <Language.PureScript.Errors.MultipleErrors>_N
                                                                                                  <Data.Functor.Identity.Identity>_R
                                                                                                  <Data.Either.Either
                                                                                                     Language.PureScript.Errors.MultipleErrors
                                                                                                     (a,
                                                                                                      s)>_N) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                        <Language.PureScript.Errors.MultipleErrors>_N
                                                                                                                        <Control.Monad.Trans.Writer.Strict.WriterT
                                                                                                                           Language.PureScript.Errors.MultipleErrors
                                                                                                                           Data.Functor.Identity.Identity>_R
                                                                                                                        <(a,
                                                                                                                          s)>_N))) ; Sym (Control.Monad.Trans.State.Strict.N:StateT[0]
                                                                                                                                              <s>_N
                                                                                                                                              <Control.Monad.Trans.Except.ExceptT
                                                                                                                                                 Language.PureScript.Errors.MultipleErrors
                                                                                                                                                 (Control.Monad.Trans.Writer.Strict.Writer
                                                                                                                                                    Language.PureScript.Errors.MultipleErrors)>_R
                                                                                                                                              <a>_N)) -}
abc6d37d07112539a6c91286c49787c1
  $sfromList ::
    [Language.PureScript.Names.ModuleName]
    -> Data.Set.Internal.Set Language.PureScript.Names.ModuleName
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [Language.PureScript.Names.ModuleName]) ->
                 case ds of wild {
                   [] -> Data.Set.Internal.Tip @ Language.PureScript.Names.ModuleName
                   : x ds1
                   -> case ds1 of wild1 {
                        []
                        -> case x `cast`
                                (Language.PureScript.Names.N:ModuleName[0]) of nt { DEFAULT ->
                           Data.Set.Internal.Bin
                             @ Language.PureScript.Names.ModuleName
                             1#
                             nt `cast` (Sym (Language.PureScript.Names.N:ModuleName[0]))
                             (Data.Set.Internal.Tip @ Language.PureScript.Names.ModuleName)
                             (Data.Set.Internal.Tip @ Language.PureScript.Names.ModuleName) }
                        : ipv ipv1
                        -> case GHC.Classes.$fOrd[]_$ccompare
                                  @ (Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.Namespace)
                                  (Language.PureScript.Names.$fOrdProperName
                                     @ 'Language.PureScript.Names.Namespace)
                                  x `cast` (Language.PureScript.Names.N:ModuleName[0])
                                  ipv `cast` (Language.PureScript.Names.N:ModuleName[0]) of wild2 {
                             DEFAULT
                             -> case x `cast`
                                     (Language.PureScript.Names.N:ModuleName[0]) of nt { DEFAULT ->
                                Language.PureScript.Interactive.$sfromList_$sgo4
                                  ipv
                                  ipv1
                                  (Data.Set.Internal.Bin
                                     @ Language.PureScript.Names.ModuleName
                                     1#
                                     nt `cast` (Sym (Language.PureScript.Names.N:ModuleName[0]))
                                     (Data.Set.Internal.Tip @ Language.PureScript.Names.ModuleName)
                                     (Data.Set.Internal.Tip
                                        @ Language.PureScript.Names.ModuleName)) }
                             GHC.Types.LT
                             -> case x `cast`
                                     (Language.PureScript.Names.N:ModuleName[0]) of nt { DEFAULT ->
                                Language.PureScript.Interactive.$sfromList_$s$wgo3
                                  ipv
                                  ipv1
                                  (Data.Set.Internal.Bin
                                     @ Language.PureScript.Names.ModuleName
                                     1#
                                     nt `cast` (Sym (Language.PureScript.Names.N:ModuleName[0]))
                                     (Data.Set.Internal.Tip @ Language.PureScript.Names.ModuleName)
                                     (Data.Set.Internal.Tip @ Language.PureScript.Names.ModuleName))
                                  1# } } } }) -}
3766bad53f14e09061ee179e441bf7ab
  $sfromList1 ::
    [(Language.PureScript.Names.ModuleName, a)]
    -> Data.Map.Internal.Map Language.PureScript.Names.ModuleName a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a
                   (ds :: [(Language.PureScript.Names.ModuleName, a)]) ->
                 case ds of wild {
                   []
                   -> Data.Map.Internal.Tip @ Language.PureScript.Names.ModuleName @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case kx
                                  `cast`
                                (Language.PureScript.Names.N:ModuleName[0]) of nt { DEFAULT ->
                           Data.Map.Internal.Bin
                             @ Language.PureScript.Names.ModuleName
                             @ a
                             1#
                             nt `cast` (Sym (Language.PureScript.Names.N:ModuleName[0]))
                             x
                             (Data.Map.Internal.Tip @ Language.PureScript.Names.ModuleName @ a)
                             (Data.Map.Internal.Tip
                                @ Language.PureScript.Names.ModuleName
                                @ a) }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case GHC.Classes.$fOrd[]_$ccompare
                                  @ (Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.Namespace)
                                  (Language.PureScript.Names.$fOrdProperName
                                     @ 'Language.PureScript.Names.Namespace)
                                  kx `cast` (Language.PureScript.Names.N:ModuleName[0])
                                  ky `cast` (Language.PureScript.Names.N:ModuleName[0]) of wild4 {
                             DEFAULT
                             -> case kx
                                       `cast`
                                     (Language.PureScript.Names.N:ModuleName[0]) of nt { DEFAULT ->
                                Language.PureScript.Interactive.$sfromList_$spoly_go14
                                  @ a
                                  ky
                                  ds3
                                  ipv1
                                  (Data.Map.Internal.Bin
                                     @ Language.PureScript.Names.ModuleName
                                     @ a
                                     1#
                                     nt `cast` (Sym (Language.PureScript.Names.N:ModuleName[0]))
                                     x
                                     (Data.Map.Internal.Tip
                                        @ Language.PureScript.Names.ModuleName
                                        @ a)
                                     (Data.Map.Internal.Tip
                                        @ Language.PureScript.Names.ModuleName
                                        @ a)) }
                             GHC.Types.LT
                             -> case kx
                                       `cast`
                                     (Language.PureScript.Names.N:ModuleName[0]) of nt { DEFAULT ->
                                Language.PureScript.Interactive.$sfromList_$s$wpoly_go13
                                  @ a
                                  ky
                                  ds3
                                  ipv1
                                  (Data.Map.Internal.Bin
                                     @ Language.PureScript.Names.ModuleName
                                     @ a
                                     1#
                                     nt `cast` (Sym (Language.PureScript.Names.N:ModuleName[0]))
                                     x
                                     (Data.Map.Internal.Tip
                                        @ Language.PureScript.Names.ModuleName
                                        @ a)
                                     (Data.Map.Internal.Tip
                                        @ Language.PureScript.Names.ModuleName
                                        @ a))
                                  1# } } } } } }) -}
dab5c32ab34e12e4b79e7b2cc95047de
  $sfromList_$s$wgo3 ::
    Language.PureScript.Names.ModuleName
    -> [Language.PureScript.Names.ModuleName]
    -> Data.Set.Internal.Set Language.PureScript.Names.ModuleName
    -> GHC.Prim.Int#
    -> Data.Set.Internal.Set Language.PureScript.Names.ModuleName
  {- Arity: 4, Strictness: <S,U><S,1*U><S,1*U><L,U> -}
df122d50c6775acf40942512f0daec34
  $sfromList_$s$wpoly_go13 ::
    Language.PureScript.Names.ModuleName
    -> a
    -> [(Language.PureScript.Names.ModuleName, a)]
    -> Data.Map.Internal.Map Language.PureScript.Names.ModuleName a
    -> GHC.Prim.Int#
    -> Data.Map.Internal.Map Language.PureScript.Names.ModuleName a
  {- Arity: 5, Strictness: <S,U><L,U><S,1*U><S,1*U><L,U> -}
d8c460a2b00e69edf5323f4c60a659d2
  $sfromList_$sgo4 ::
    Language.PureScript.Names.ModuleName
    -> [Language.PureScript.Names.ModuleName]
    -> Data.Set.Internal.Set Language.PureScript.Names.ModuleName
    -> Data.Set.Internal.Set Language.PureScript.Names.ModuleName
  {- Arity: 3, Strictness: <S,U><S,1*U><S,1*U> -}
762ba6b1391ae75c0764cd61d35cbeeb
  $sfromList_$spoly_go14 ::
    Language.PureScript.Names.ModuleName
    -> a
    -> [(Language.PureScript.Names.ModuleName, a)]
    -> Data.Map.Internal.Map Language.PureScript.Names.ModuleName a
    -> Data.Map.Internal.Map Language.PureScript.Names.ModuleName a
  {- Arity: 4, Strictness: <S,U><L,U><S,1*U><S,1*U> -}
700b605af81fbce62d711d7fb82423d5
  $sinsert_$sgo13 ::
    Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ModuleName
    -> a1
    -> Data.Map.Internal.Map Language.PureScript.Names.ModuleName a1
    -> Data.Map.Internal.Map Language.PureScript.Names.ModuleName a1
  {- Arity: 4, Strictness: <L,U><S,1*U><L,U><S,1*U> -}
9d8666b7f430ad1587b623a4dfed8cab
  $sinsert_$sgo3 ::
    Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ModuleName
    -> Data.Set.Internal.Set Language.PureScript.Names.ModuleName
    -> Data.Set.Internal.Set Language.PureScript.Names.ModuleName
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U> -}
335b26ccf863597ab55381134fcd757d
  $slookup_$s$wpoly_go13 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         Language.PureScript.Names.Ident)
      (Language.PureScript.Types.Type,
       Language.PureScript.Environment.NameKind,
       Language.PureScript.Environment.NameVisibility)
    -> Language.PureScript.Names.Ident
    -> Language.PureScript.Names.ModuleName
    -> GHC.Base.Maybe
         (Language.PureScript.Types.Type,
          Language.PureScript.Environment.NameKind,
          Language.PureScript.Environment.NameVisibility)
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,U><L,U> -}
916b95bdf23144198ec7f8558c86cc50
  $slookup_$s$wpoly_go2 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName))
      ([(Data.Text.Internal.Text,
         GHC.Base.Maybe Language.PureScript.Kinds.Kind)],
       Language.PureScript.Types.Type)
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName
    -> Language.PureScript.Names.ModuleName
    -> GHC.Base.Maybe
         ([(Data.Text.Internal.Text,
            GHC.Base.Maybe Language.PureScript.Kinds.Kind)],
          Language.PureScript.Types.Type)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U(U,U,U)><L,U> -}
3df838bf98e1e3d1b64e2d52875c2197
  $slookup_$s$wpoly_go3 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName))
      ([(Data.Text.Internal.Text,
         GHC.Base.Maybe Language.PureScript.Kinds.Kind)],
       Language.PureScript.Types.Type)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> ((Data.Text.Internal.Text :: *)
        ~R# (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.TypeName :: *)) =>
       Language.PureScript.Names.ModuleName
       -> GHC.Base.Maybe
            ([(Data.Text.Internal.Text,
               GHC.Base.Maybe Language.PureScript.Kinds.Kind)],
             Language.PureScript.Types.Type)
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S,1*U><L,U><L,U><L,U><L,U><L,U> -}
408330930d683ebd63c7daf6696dfb7d
  $smember_go3 ::
    Language.PureScript.Names.ModuleName
    -> Data.Set.Internal.Set Language.PureScript.Names.ModuleName
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
c704b12485fd1a69acaa16830a2d8789
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Language.PureScript.Interactive.$trModule3
                   Language.PureScript.Interactive.$trModule1) -}
e927b995889128300d6dbb793e142466
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.$trModule2) -}
82f063ccff7c9e9e1632508bf1b958fb
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Language.PureScript.Interactive"#) -}
f2c7ae38a40a1ba712726b22777ea3d5
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.$trModule4) -}
0ad669b791ca5dbcbea949f3d362177b
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"#) -}
b40966418ae729d57f06064a78db6106
  $wgo ::
    [Language.PureScript.Externs.ExternsFile]
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            Language.PureScript.Names.Ident)
         (Language.PureScript.Types.Type,
          Language.PureScript.Environment.NameKind,
          Language.PureScript.Environment.NameVisibility)
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.TypeName))
         (Language.PureScript.Kinds.Kind,
          Language.PureScript.Environment.TypeKind)
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ConstructorName))
         (Language.PureScript.Environment.DataDeclType,
          Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName,
          Language.PureScript.Types.Type, [Language.PureScript.Names.Ident])
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.TypeName))
         ([(Data.Text.Internal.Text,
            GHC.Base.Maybe Language.PureScript.Kinds.Kind)],
          Language.PureScript.Types.Type)
    -> Data.Map.Internal.Map
         (GHC.Base.Maybe Language.PureScript.Names.ModuleName)
         (Data.Map.Internal.Map
            (Language.PureScript.Names.Qualified
               (Language.PureScript.Names.ProperName
                  'Language.PureScript.Names.ClassName))
            (Data.Map.Internal.Map
               (Language.PureScript.Names.Qualified
                  Language.PureScript.Names.Ident)
               Language.PureScript.TypeClassDictionaries.NamedDict))
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName))
         Language.PureScript.Environment.TypeClassData
    -> Data.Set.Internal.Set
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.KindName))
    -> Language.PureScript.Environment.Environment
  {- Arity: 8,
     Strictness: <S,1*U><L,U><L,U><L,U><L,U><L,U><L,U><L,U>m,
     Inline: [0] -}
fffc482f7e86845fc5bfc68022877715
  handleCommand ::
    (Control.Monad.Reader.Class.MonadReader
       Language.PureScript.Interactive.Types.PSCiConfig m,
     Control.Monad.State.Class.MonadState
       Language.PureScript.Interactive.Types.PSCiState m,
     Control.Monad.IO.Class.MonadIO m) =>
    (GHC.Base.String -> m ())
    -> m ()
    -> (GHC.Base.String -> m ())
    -> Language.PureScript.Interactive.Types.Command
    -> m ()
  {- Arity: 3,
     Strictness: <L,U(U(A,C(C1(U)),C(C1(U)),C(U),A),A,A,C(U))><L,U(1*U(1*U(1*U(1*C1(C1(U)),A),A,A,A,A,A),C(C1(U)),A,C(U),A),1*U,C(U),C(U))><L,U(1*U(A,C(C1(U)),A,C(U),A),C(U))> -}
a3ef838eb48917ad58e8f9e1f8ac8fe5
  make ::
    [(GHC.IO.FilePath, Language.PureScript.AST.Declarations.Module)]
    -> Language.PureScript.Make.Monad.Make
         ([Language.PureScript.Externs.ExternsFile],
          Language.PureScript.Environment.Environment)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (ms :: [(GHC.IO.FilePath,
                            Language.PureScript.AST.Declarations.Module)]) ->
                 let {
                   lvl98 :: [Language.PureScript.AST.Declarations.Module]
                   = GHC.Base.map
                       @ (GHC.IO.FilePath, Language.PureScript.AST.Declarations.Module)
                       @ Language.PureScript.AST.Declarations.Module
                       (Data.Tuple.snd
                          @ GHC.IO.FilePath
                          @ Language.PureScript.AST.Declarations.Module)
                       ms
                 } in
                 let {
                   filePathMap :: Data.Map.Internal.Map
                                    Language.PureScript.Names.ModuleName
                                    (Data.Either.Either
                                       Language.PureScript.Make.Actions.RebuildPolicy
                                       GHC.IO.FilePath)
                   = Language.PureScript.Interactive.$sfromList1
                       @ (Data.Either.Either
                            Language.PureScript.Make.Actions.RebuildPolicy GHC.IO.FilePath)
                       (GHC.Base.map
                          @ (GHC.IO.FilePath, Language.PureScript.AST.Declarations.Module)
                          @ (Language.PureScript.Names.ModuleName,
                             Data.Either.Either
                               Language.PureScript.Make.Actions.RebuildPolicy GHC.IO.FilePath)
                          Language.PureScript.Interactive.make2
                          ms)
                 } in
                 let {
                   m1 :: Language.PureScript.Make.Monad.Make
                           (Data.Map.Internal.Map
                              Language.PureScript.Names.ModuleName GHC.IO.FilePath)
                   = Language.PureScript.Interactive.make1 filePathMap
                 } in
                 (\ (r1 :: Language.PureScript.Options.Options) ->
                  let {
                    ds :: Control.Monad.Trans.Except.ExceptT
                            Language.PureScript.Errors.MultipleErrors
                            (Control.Monad.Logger.Logger
                               Language.PureScript.Errors.MultipleErrors)
                            (Data.Map.Internal.Map
                               Language.PureScript.Names.ModuleName GHC.IO.FilePath)
                    = m1
                        `cast`
                      (Language.PureScript.Make.Monad.N:Make[0] <Data.Map.Internal.Map
                                                                   Language.PureScript.Names.ModuleName
                                                                   GHC.IO.FilePath>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                            <*>_N
                                                                                            <Language.PureScript.Options.Options>_R
                                                                                            <Control.Monad.Trans.Except.ExceptT
                                                                                               Language.PureScript.Errors.MultipleErrors
                                                                                               (Control.Monad.Logger.Logger
                                                                                                  Language.PureScript.Errors.MultipleErrors)>_R
                                                                                            <Data.Map.Internal.Map
                                                                                               Language.PureScript.Names.ModuleName
                                                                                               GHC.IO.FilePath>_N)
                        r1
                  } in
                  (\ (r2 :: GHC.IORef.IORef
                              Language.PureScript.Errors.MultipleErrors)
                     (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                   case (ds
                           `cast`
                         (Control.Monad.Trans.Except.N:ExceptT[0]
                              <Language.PureScript.Errors.MultipleErrors>_N
                              <Control.Monad.Logger.Logger
                                 Language.PureScript.Errors.MultipleErrors>_R
                              <Data.Map.Internal.Map
                                 Language.PureScript.Names.ModuleName
                                 GHC.IO.FilePath>_N ; Control.Monad.Logger.N:Logger[0]
                                                          <Language.PureScript.Errors.MultipleErrors>_R
                                                          <Data.Either.Either
                                                             Language.PureScript.Errors.MultipleErrors
                                                             (Data.Map.Internal.Map
                                                                Language.PureScript.Names.ModuleName
                                                                GHC.IO.FilePath)>_R)
                           r2)
                          `cast`
                        (GHC.Types.N:IO[0]
                             <Data.Either.Either
                                Language.PureScript.Errors.MultipleErrors
                                (Data.Map.Internal.Map
                                   Language.PureScript.Names.ModuleName GHC.IO.FilePath)>_R)
                          s of ds1 { (#,#) ipv ipv1 ->
                   case ipv1 of wild {
                     Data.Either.Left e1
                     -> (# ipv,
                           Data.Either.Left
                             @ Language.PureScript.Errors.MultipleErrors
                             @ ([Language.PureScript.Externs.ExternsFile],
                                Language.PureScript.Environment.Environment)
                             e1 #)
                     Data.Either.Right x
                     -> case Language.PureScript.Make.Actions.$wbuildMakeActions
                               Language.PureScript.Interactive.Module.modulesDir
                               filePathMap
                               x
                               GHC.Types.False of ww { (#,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ->
                        case (((Language.PureScript.Make.make
                                  @ Language.PureScript.Make.Monad.Make
                                  Language.PureScript.Make.Monad.$fMonadMake
                                  Language.PureScript.Make.Monad.$fMonadBaseControlIOMake
                                  Language.PureScript.Make.Monad.$fMonadErrorMake
                                  Language.PureScript.Make.Monad.$fMonadWriterMake
                                  (Language.PureScript.Make.Actions.MakeActions
                                     @ Language.PureScript.Make.Monad.Make
                                     ww1
                                     ww2
                                     ww3
                                     ww4
                                     ww5
                                     ww6)
                                  lvl98)
                                 `cast`
                               (Language.PureScript.Make.Monad.N:Make[0] <[Language.PureScript.Externs.ExternsFile]>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                             <*>_N
                                                                                                                             <Language.PureScript.Options.Options>_R
                                                                                                                             <Control.Monad.Trans.Except.ExceptT
                                                                                                                                Language.PureScript.Errors.MultipleErrors
                                                                                                                                (Control.Monad.Logger.Logger
                                                                                                                                   Language.PureScript.Errors.MultipleErrors)>_R
                                                                                                                             <[Language.PureScript.Externs.ExternsFile]>_N)
                                 r1)
                                `cast`
                              (Control.Monad.Trans.Except.N:ExceptT[0]
                                   <Language.PureScript.Errors.MultipleErrors>_N
                                   <Control.Monad.Logger.Logger
                                      Language.PureScript.Errors.MultipleErrors>_R
                                   <[Language.PureScript.Externs.ExternsFile]>_N ; Control.Monad.Logger.N:Logger[0]
                                                                                       <Language.PureScript.Errors.MultipleErrors>_R
                                                                                       <Data.Either.Either
                                                                                          Language.PureScript.Errors.MultipleErrors
                                                                                          [Language.PureScript.Externs.ExternsFile]>_R)
                                r2)
                               `cast`
                             (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     Language.PureScript.Errors.MultipleErrors
                                     [Language.PureScript.Externs.ExternsFile]>_R)
                               ipv of ds2 { (#,#) ipv2 ipv3 ->
                        case ipv3 of wild1 {
                          Data.Either.Left e1
                          -> (# ipv2,
                                Data.Either.Left
                                  @ Language.PureScript.Errors.MultipleErrors
                                  @ ([Language.PureScript.Externs.ExternsFile],
                                     Language.PureScript.Environment.Environment)
                                  e1 #)
                          Data.Either.Right x1
                          -> (# ipv2,
                                Data.Either.Right
                                  @ Language.PureScript.Errors.MultipleErrors
                                  @ ([Language.PureScript.Externs.ExternsFile],
                                     Language.PureScript.Environment.Environment)
                                  (x1,
                                   Language.PureScript.Interactive.$wgo
                                     x1
                                     (Data.Map.Internal.Tip
                                        @ (Language.PureScript.Names.Qualified
                                             Language.PureScript.Names.Ident)
                                        @ (Language.PureScript.Types.Type,
                                           Language.PureScript.Environment.NameKind,
                                           Language.PureScript.Environment.NameVisibility))
                                     Language.PureScript.Environment.allPrimTypes
                                     (Data.Map.Internal.Tip
                                        @ (Language.PureScript.Names.Qualified
                                             (Language.PureScript.Names.ProperName
                                                'Language.PureScript.Names.ConstructorName))
                                        @ (Language.PureScript.Environment.DataDeclType,
                                           Language.PureScript.Names.ProperName
                                             'Language.PureScript.Names.TypeName,
                                           Language.PureScript.Types.Type,
                                           [Language.PureScript.Names.Ident]))
                                     (Data.Map.Internal.Tip
                                        @ (Language.PureScript.Names.Qualified
                                             (Language.PureScript.Names.ProperName
                                                'Language.PureScript.Names.TypeName))
                                        @ ([(Data.Text.Internal.Text,
                                             GHC.Base.Maybe Language.PureScript.Kinds.Kind)],
                                           Language.PureScript.Types.Type))
                                     (Data.Map.Internal.Tip
                                        @ (GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                                        @ (Data.Map.Internal.Map
                                             (Language.PureScript.Names.Qualified
                                                (Language.PureScript.Names.ProperName
                                                   'Language.PureScript.Names.ClassName))
                                             (Data.Map.Internal.Map
                                                (Language.PureScript.Names.Qualified
                                                   Language.PureScript.Names.Ident)
                                                Language.PureScript.TypeClassDictionaries.NamedDict)))
                                     Language.PureScript.Environment.allPrimClasses
                                     Language.PureScript.Environment.allPrimKinds) #) } } } } })
                    `cast`
                  ((<GHC.IORef.IORef Language.PureScript.Errors.MultipleErrors>_R
                    ->_R Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     Language.PureScript.Errors.MultipleErrors
                                     ([Language.PureScript.Externs.ExternsFile],
                                      Language.PureScript.Environment.Environment)>_R)) ; (Sym (Control.Monad.Logger.N:Logger[0]
                                                                                                    <Language.PureScript.Errors.MultipleErrors>_R
                                                                                                    <Data.Either.Either
                                                                                                       Language.PureScript.Errors.MultipleErrors
                                                                                                       ([Language.PureScript.Externs.ExternsFile],
                                                                                                        Language.PureScript.Environment.Environment)>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                                                                                                    <Language.PureScript.Errors.MultipleErrors>_N
                                                                                                                                                                    <Control.Monad.Logger.Logger
                                                                                                                                                                       Language.PureScript.Errors.MultipleErrors>_R
                                                                                                                                                                    <([Language.PureScript.Externs.ExternsFile],
                                                                                                                                                                      Language.PureScript.Environment.Environment)>_N))))
                   `cast`
                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                           <*>_N
                           <Language.PureScript.Options.Options>_R
                           <Control.Monad.Trans.Except.ExceptT
                              Language.PureScript.Errors.MultipleErrors
                              (Control.Monad.Logger.Logger
                                 Language.PureScript.Errors.MultipleErrors)>_R
                           <([Language.PureScript.Externs.ExternsFile],
                             Language.PureScript.Environment.Environment)>_N) ; Sym (Language.PureScript.Make.Monad.N:Make[0]) <([Language.PureScript.Externs.ExternsFile],
                                                                                                                                 Language.PureScript.Environment.Environment)>_N)) -}
67b17a6c3fe19119eaab32ec44d84ceb
  make1 ::
    Data.Map.Internal.Map
      Language.PureScript.Names.ModuleName
      (Data.Either.Either
         Language.PureScript.Make.Actions.RebuildPolicy GHC.IO.FilePath)
    -> Language.PureScript.Make.Monad.Make
         (Data.Map.Internal.Map
            Language.PureScript.Names.ModuleName GHC.IO.FilePath)
  {- Unfolding: (Language.PureScript.Make.inferForeignModules
                   @ Language.PureScript.Make.Monad.Make
                   Language.PureScript.Make.Monad.$fMonadIOMake) -}
7ec896cf50645974d0149485e29bbcb5
  make2 ::
    (GHC.IO.FilePath, Language.PureScript.AST.Declarations.Module)
    -> (Language.PureScript.Names.ModuleName,
        Data.Either.Either
          Language.PureScript.Make.Actions.RebuildPolicy GHC.IO.FilePath)
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S,1*U(U,1*U(A,A,1*U,A,A))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: (GHC.IO.FilePath,
                           Language.PureScript.AST.Declarations.Module)) ->
                 case ds of wild { (,) fp m ->
                 (Language.PureScript.AST.Declarations.getModuleName m,
                  Data.Either.Right
                    @ Language.PureScript.Make.Actions.RebuildPolicy
                    @ GHC.IO.FilePath
                    fp) }) -}
e0ff5387cd3069b5a49d527c8aef55bf
  runMake ::
    Language.PureScript.Make.Monad.Make a
    -> GHC.Types.IO
         (Data.Either.Either Language.PureScript.Errors.MultipleErrors a)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <C(C(C(S(SL)))),1*C1(C1(C1(U(U,U))))><S,U>,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Interactive.runMake1
                  `cast`
                (forall (a :: <*>_N).
                 <Language.PureScript.Make.Monad.Make a>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  Language.PureScript.Errors.MultipleErrors a>_R)) -}
71c5e1018e091c5b60005330396df87c
  runMake1 ::
    Language.PureScript.Make.Monad.Make a
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either Language.PureScript.Errors.MultipleErrors a #)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <C(C(C(S(SL)))),1*C1(C1(C1(U(U,U))))><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (mk :: Language.PureScript.Make.Monad.Make a)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Prim.newMutVar#
                        @ Language.PureScript.Errors.MultipleErrors
                        @ GHC.Prim.RealWorld
                        (GHC.Types.[] @ Language.PureScript.AST.Declarations.ErrorMessage)
                          `cast`
                        (Sym (Language.PureScript.Errors.N:MultipleErrors[0]))
                        eta of ds { (#,#) ipv ipv1 ->
                 case ((mk
                          `cast`
                        (Language.PureScript.Make.Monad.N:Make[0] <a>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                              <*>_N
                                                                              <Language.PureScript.Options.Options>_R
                                                                              <Control.Monad.Trans.Except.ExceptT
                                                                                 Language.PureScript.Errors.MultipleErrors
                                                                                 (Control.Monad.Logger.Logger
                                                                                    Language.PureScript.Errors.MultipleErrors)>_R
                                                                              <a>_N)
                          Language.PureScript.Options.defaultOptions)
                         `cast`
                       (Control.Monad.Trans.Except.N:ExceptT[0]
                            <Language.PureScript.Errors.MultipleErrors>_N
                            <Control.Monad.Logger.Logger
                               Language.PureScript.Errors.MultipleErrors>_R
                            <a>_N ; Control.Monad.Logger.N:Logger[0]
                                        <Language.PureScript.Errors.MultipleErrors>_R
                                        <Data.Either.Either
                                           Language.PureScript.Errors.MultipleErrors a>_R)
                         (GHC.STRef.STRef
                            @ GHC.Prim.RealWorld
                            @ Language.PureScript.Errors.MultipleErrors
                            ipv1)
                           `cast`
                         (Sym (GHC.IORef.N:IORef[0]) <Language.PureScript.Errors.MultipleErrors>_N))
                        `cast`
                      (GHC.Types.N:IO[0]
                           <Data.Either.Either Language.PureScript.Errors.MultipleErrors a>_R)
                        ipv of ds1 { (#,#) ipv2 ipv3 ->
                 case GHC.Prim.readMutVar#
                        @ GHC.Prim.RealWorld
                        @ Language.PureScript.Errors.MultipleErrors
                        ipv1
                        ipv2 of ds2 { (#,#) ipv4 ipv5 ->
                 (# ipv4, ipv3 #) } } }) -}
"SPEC/Language.PureScript.Interactive $fApplicativeStateT @ (ExceptT
                                                              MultipleErrors
                                                              (Writer MultipleErrors)) _" [orphan] forall @ s
                                                                                                                                                                                                                                                            (v1 :: GHC.Base.Monad
                                                                                                                                                                                                                                                                     (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                                                                                        Language.PureScript.Errors.MultipleErrors
                                                                                                                                                                                                                                                                        (Control.Monad.Trans.Writer.Strict.Writer
                                                                                                                                                                                                                                                                           Language.PureScript.Errors.MultipleErrors)))
                                                                                                                                                                                                                                                            (v :: GHC.Base.Functor
                                                                                                                                                                                                                                                                    (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                                                                                       Language.PureScript.Errors.MultipleErrors
                                                                                                                                                                                                                                                                       (Control.Monad.Trans.Writer.Strict.Writer
                                                                                                                                                                                                                                                                          Language.PureScript.Errors.MultipleErrors)))
  Control.Monad.Trans.State.Strict.$fApplicativeStateT @ (Control.Monad.Trans.Except.ExceptT
                                                            Language.PureScript.Errors.MultipleErrors
                                                            (Control.Monad.Trans.Writer.Strict.Writer
                                                               Language.PureScript.Errors.MultipleErrors))
                                                       @ s
                                                       v
                                                       v1
  = Language.PureScript.Interactive.$s$fApplicativeStateT @ s
"SPEC/Language.PureScript.Interactive $fApplicativeStateT1 @ (ExceptT
                                                               MultipleErrors
                                                               (Writer MultipleErrors)) _" [orphan] forall @ s
                                                                                                                                                                                                                                                               ($dMonad :: GHC.Base.Monad
                                                                                                                                                                                                                                                                             (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                                                                                                Language.PureScript.Errors.MultipleErrors
                                                                                                                                                                                                                                                                                (Control.Monad.Trans.Writer.Strict.Writer
                                                                                                                                                                                                                                                                                   Language.PureScript.Errors.MultipleErrors)))
                                                                                                                                                                                                                                                               ($dFunctor :: GHC.Base.Functor
                                                                                                                                                                                                                                                                               (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                                                                                                  Language.PureScript.Errors.MultipleErrors
                                                                                                                                                                                                                                                                                  (Control.Monad.Trans.Writer.Strict.Writer
                                                                                                                                                                                                                                                                                     Language.PureScript.Errors.MultipleErrors)))
  Control.Monad.Trans.State.Strict.$fApplicativeStateT1 @ (Control.Monad.Trans.Except.ExceptT
                                                             Language.PureScript.Errors.MultipleErrors
                                                             (Control.Monad.Trans.Writer.Strict.Writer
                                                                Language.PureScript.Errors.MultipleErrors))
                                                        @ s
                                                        $dFunctor
                                                        $dMonad
  = Language.PureScript.Interactive.$s$fApplicativeStateT_$s$fApplicativeStateT1
      @ s
"SPEC/Language.PureScript.Interactive $fApplicativeStateT_$c*> @ (ExceptT
                                                                   MultipleErrors
                                                                   (Writer MultipleErrors)) _" [orphan] forall @ s
                                                                                                                                                                                                                                                                           ($dMonad :: GHC.Base.Monad
                                                                                                                                                                                                                                                                                         (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                                                                                                            Language.PureScript.Errors.MultipleErrors
                                                                                                                                                                                                                                                                                            (Control.Monad.Trans.Writer.Strict.Writer
                                                                                                                                                                                                                                                                                               Language.PureScript.Errors.MultipleErrors)))
                                                                                                                                                                                                                                                                           ($dFunctor :: GHC.Base.Functor
                                                                                                                                                                                                                                                                                           (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                                                                                                              Language.PureScript.Errors.MultipleErrors
                                                                                                                                                                                                                                                                                              (Control.Monad.Trans.Writer.Strict.Writer
                                                                                                                                                                                                                                                                                                 Language.PureScript.Errors.MultipleErrors)))
  Control.Monad.Trans.State.Strict.$fApplicativeStateT_$c*> @ (Control.Monad.Trans.Except.ExceptT
                                                                 Language.PureScript.Errors.MultipleErrors
                                                                 (Control.Monad.Trans.Writer.Strict.Writer
                                                                    Language.PureScript.Errors.MultipleErrors))
                                                            @ s
                                                            $dFunctor
                                                            $dMonad
  = Language.PureScript.Interactive.$s$fApplicativeStateT_$s$fApplicativeStateT_$c*>
      @ s
"SPEC/Language.PureScript.Interactive $fApplicativeStateT_$c<*> @ (ExceptT
                                                                    MultipleErrors
                                                                    (Writer MultipleErrors)) _" [orphan] forall @ s
                                                                                                                                                                                                                                                                              ($dMonad :: GHC.Base.Monad
                                                                                                                                                                                                                                                                                            (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                                                                                                               Language.PureScript.Errors.MultipleErrors
                                                                                                                                                                                                                                                                                               (Control.Monad.Trans.Writer.Strict.Writer
                                                                                                                                                                                                                                                                                                  Language.PureScript.Errors.MultipleErrors)))
                                                                                                                                                                                                                                                                              ($dFunctor :: GHC.Base.Functor
                                                                                                                                                                                                                                                                                              (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                                                                                                                 Language.PureScript.Errors.MultipleErrors
                                                                                                                                                                                                                                                                                                 (Control.Monad.Trans.Writer.Strict.Writer
                                                                                                                                                                                                                                                                                                    Language.PureScript.Errors.MultipleErrors)))
  Control.Monad.Trans.State.Strict.$fApplicativeStateT_$c<*> @ (Control.Monad.Trans.Except.ExceptT
                                                                  Language.PureScript.Errors.MultipleErrors
                                                                  (Control.Monad.Trans.Writer.Strict.Writer
                                                                     Language.PureScript.Errors.MultipleErrors))
                                                             @ s
                                                             $dFunctor
                                                             $dMonad
  = Language.PureScript.Interactive.$s$fApplicativeStateT_$s$fApplicativeStateT_$c<*>
      @ s
"SPEC/Language.PureScript.Interactive $fApplicativeStateT_$cpure @ (ExceptT
                                                                     MultipleErrors
                                                                     (Writer MultipleErrors)) _" [orphan] forall @ s
                                                                                                                                                                                                                                                                                 ($dMonad :: GHC.Base.Monad
                                                                                                                                                                                                                                                                                               (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                                                                                                                  Language.PureScript.Errors.MultipleErrors
                                                                                                                                                                                                                                                                                                  (Control.Monad.Trans.Writer.Strict.Writer
                                                                                                                                                                                                                                                                                                     Language.PureScript.Errors.MultipleErrors)))
                                                                                                                                                                                                                                                                                 ($dFunctor :: GHC.Base.Functor
                                                                                                                                                                                                                                                                                                 (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                                                                                                                    Language.PureScript.Errors.MultipleErrors
                                                                                                                                                                                                                                                                                                    (Control.Monad.Trans.Writer.Strict.Writer
                                                                                                                                                                                                                                                                                                       Language.PureScript.Errors.MultipleErrors)))
  Control.Monad.Trans.State.Strict.$fApplicativeStateT_$cpure @ (Control.Monad.Trans.Except.ExceptT
                                                                   Language.PureScript.Errors.MultipleErrors
                                                                   (Control.Monad.Trans.Writer.Strict.Writer
                                                                      Language.PureScript.Errors.MultipleErrors))
                                                              @ s
                                                              $dFunctor
                                                              $dMonad
  = Language.PureScript.Interactive.$s$fApplicativeStateT_$s$fApplicativeStateT_$cpure
      @ s
"SPEC/Language.PureScript.Interactive $fApplicativeWriterT @ MultipleErrors @ Identity" [orphan] forall (v1 :: GHC.Base.Applicative
                                                                                                                 Data.Functor.Identity.Identity)
                                                                                                        (v :: GHC.Base.Monoid
                                                                                                                Language.PureScript.Errors.MultipleErrors)
  Control.Monad.Trans.Writer.Strict.$fApplicativeWriterT @ Language.PureScript.Errors.MultipleErrors
                                                         @ Data.Functor.Identity.Identity
                                                         v
                                                         v1
  = Language.PureScript.Interactive.$s$fApplicativeStateT_$s$fApplicativeWriterT
"SPEC/Language.PureScript.Interactive $fApplicativeWriterT_$c<* @ MultipleErrors @ Identity" [orphan] forall ($dApplicative :: GHC.Base.Applicative
                                                                                                                                 Data.Functor.Identity.Identity)
                                                                                                             ($dMonoid :: GHC.Base.Monoid
                                                                                                                            Language.PureScript.Errors.MultipleErrors)
  Control.Monad.Trans.Writer.Strict.$fApplicativeWriterT_$c<* @ Language.PureScript.Errors.MultipleErrors
                                                              @ Data.Functor.Identity.Identity
                                                              $dMonoid
                                                              $dApplicative
  = Language.PureScript.Interactive.$s$fApplicativeWriterT_$c<*
"SPEC/Language.PureScript.Interactive $fApplicativeWriterT_$c<*> @ MultipleErrors @ Identity" [orphan] forall ($dApplicative :: GHC.Base.Applicative
                                                                                                                                  Data.Functor.Identity.Identity)
                                                                                                              ($dMonoid :: GHC.Base.Monoid
                                                                                                                             Language.PureScript.Errors.MultipleErrors)
  Control.Monad.Trans.Writer.Strict.$fApplicativeWriterT_$c<*> @ Language.PureScript.Errors.MultipleErrors
                                                               @ Data.Functor.Identity.Identity
                                                               $dMonoid
                                                               $dApplicative
  = Language.PureScript.Interactive.$s$fApplicativeStateT_$s$fApplicativeWriterT_$c<*>
"SPEC/Language.PureScript.Interactive $fApplicativeWriterT_$cpure @ MultipleErrors @ Identity" [orphan] forall ($dApplicative :: GHC.Base.Applicative
                                                                                                                                   Data.Functor.Identity.Identity)
                                                                                                               ($dMonoid :: GHC.Base.Monoid
                                                                                                                              Language.PureScript.Errors.MultipleErrors)
  Control.Monad.Trans.Writer.Strict.$fApplicativeWriterT_$cpure @ Language.PureScript.Errors.MultipleErrors
                                                                @ Data.Functor.Identity.Identity
                                                                $dMonoid
                                                                $dApplicative
  = Language.PureScript.Interactive.$s$fApplicativeStateT_$s$fApplicativeWriterT_$cpure
"SPEC/Language.PureScript.Interactive $fFunctorStateT @ (ExceptT
                                                          MultipleErrors (Writer MultipleErrors)) _" [orphan] forall @ s
                                                                                                                                                                                      (v :: GHC.Base.Functor
                                                                                                                                                                                              (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                 Language.PureScript.Errors.MultipleErrors
                                                                                                                                                                                                 (Control.Monad.Trans.Writer.Strict.Writer
                                                                                                                                                                                                    Language.PureScript.Errors.MultipleErrors)))
  Control.Monad.Trans.State.Strict.$fFunctorStateT @ (Control.Monad.Trans.Except.ExceptT
                                                        Language.PureScript.Errors.MultipleErrors
                                                        (Control.Monad.Trans.Writer.Strict.Writer
                                                           Language.PureScript.Errors.MultipleErrors))
                                                   @ s
                                                   v
  = Language.PureScript.Interactive.$s$fApplicativeStateT_$s$fFunctorStateT
      @ s
"SPEC/Language.PureScript.Interactive $fFunctorWriterT @ Identity _" [orphan] forall @ w
                                                                                     (v :: GHC.Base.Functor
                                                                                             Data.Functor.Identity.Identity)
  Control.Monad.Trans.Writer.Strict.$fFunctorWriterT @ Data.Functor.Identity.Identity
                                                     @ w
                                                     v
  = Language.PureScript.Interactive.$s$fApplicativeStateT_$s$fFunctorWriterT
      @ w
"SPEC/Language.PureScript.Interactive $fFunctorWriterT_$cfmap @ Identity _" [orphan] forall @ w
                                                                                            ($dFunctor :: GHC.Base.Functor
                                                                                                            Data.Functor.Identity.Identity)
  Control.Monad.Trans.Writer.Strict.$fFunctorWriterT_$cfmap @ Data.Functor.Identity.Identity
                                                            @ w
                                                            $dFunctor
  = Language.PureScript.Interactive.$s$fApplicativeStateT_$s$fFunctorWriterT_$cfmap
      @ w
"SPEC/Language.PureScript.Interactive $fMonadErroreStateT @ MultipleErrors @ (ExceptT
                                                                               MultipleErrors
                                                                               (Writer
                                                                                  MultipleErrors)) _" [orphan] forall @ s
                                                                                                                                                                                                                                                                                                                                                                                                 (v :: Control.Monad.Error.Class.MonadError
                                                                                                                                                                                                                                                                                                                                                                                                         Language.PureScript.Errors.MultipleErrors
                                                                                                                                                                                                                                                                                                                                                                                                         (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                                                                                                                                                                                                                            Language.PureScript.Errors.MultipleErrors
                                                                                                                                                                                                                                                                                                                                                                                                            (Control.Monad.Trans.Writer.Strict.Writer
                                                                                                                                                                                                                                                                                                                                                                                                               Language.PureScript.Errors.MultipleErrors)))
  Control.Monad.Error.Class.$fMonadErroreStateT @ Language.PureScript.Errors.MultipleErrors
                                                @ (Control.Monad.Trans.Except.ExceptT
                                                     Language.PureScript.Errors.MultipleErrors
                                                     (Control.Monad.Trans.Writer.Strict.Writer
                                                        Language.PureScript.Errors.MultipleErrors))
                                                @ s
                                                v
  = Language.PureScript.Interactive.$s$fMonadErroreStateT @ s
"SPEC/Language.PureScript.Interactive $fMonadErroreStateT1 @ MultipleErrors @ (ExceptT
                                                                                MultipleErrors
                                                                                (Writer
                                                                                   MultipleErrors)) _" [orphan] forall @ s
                                                                                                                                                                                                                                                                                                                                                                                                     ($dMonadError :: Control.Monad.Error.Class.MonadError
                                                                                                                                                                                                                                                                                                                                                                                                                        Language.PureScript.Errors.MultipleErrors
                                                                                                                                                                                                                                                                                                                                                                                                                        (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                                                                                                                                                                                                                                           Language.PureScript.Errors.MultipleErrors
                                                                                                                                                                                                                                                                                                                                                                                                                           (Control.Monad.Trans.Writer.Strict.Writer
                                                                                                                                                                                                                                                                                                                                                                                                                              Language.PureScript.Errors.MultipleErrors)))
  Control.Monad.Error.Class.$fMonadErroreStateT1 @ Language.PureScript.Errors.MultipleErrors
                                                 @ (Control.Monad.Trans.Except.ExceptT
                                                      Language.PureScript.Errors.MultipleErrors
                                                      (Control.Monad.Trans.Writer.Strict.Writer
                                                         Language.PureScript.Errors.MultipleErrors))
                                                 @ s
                                                 $dMonadError
  = Language.PureScript.Interactive.$s$fMonadErroreStateT1 @ s
"SPEC/Language.PureScript.Interactive $fMonadExceptT @ (WriterT
                                                         MultipleErrors Identity) _" [orphan] forall @ e
                                                                                                                                                                     (v :: GHC.Base.Monad
                                                                                                                                                                             (Control.Monad.Trans.Writer.Strict.WriterT
                                                                                                                                                                                Language.PureScript.Errors.MultipleErrors
                                                                                                                                                                                Data.Functor.Identity.Identity))
  Control.Monad.Trans.Except.$fMonadExceptT @ (Control.Monad.Trans.Writer.Strict.WriterT
                                                 Language.PureScript.Errors.MultipleErrors
                                                 Data.Functor.Identity.Identity)
                                            @ e
                                            v
  = Language.PureScript.Interactive.$s$fApplicativeStateT_$s$fMonadExceptT
      @ e
"SPEC/Language.PureScript.Interactive $fMonadStateT @ (ExceptT
                                                        MultipleErrors (Writer MultipleErrors)) _" [orphan] forall @ s
                                                                                                                                                                                  (v :: GHC.Base.Monad
                                                                                                                                                                                          (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                             Language.PureScript.Errors.MultipleErrors
                                                                                                                                                                                             (Control.Monad.Trans.Writer.Strict.Writer
                                                                                                                                                                                                Language.PureScript.Errors.MultipleErrors)))
  Control.Monad.Trans.State.Strict.$fMonadStateT @ (Control.Monad.Trans.Except.ExceptT
                                                      Language.PureScript.Errors.MultipleErrors
                                                      (Control.Monad.Trans.Writer.Strict.Writer
                                                         Language.PureScript.Errors.MultipleErrors))
                                                 @ s
                                                 v
  = Language.PureScript.Interactive.$s$fMonadErroreStateT_$s$fMonadStateT
      @ s
"SPEC/Language.PureScript.Interactive $fMonadStateT_$c>> @ (ExceptT
                                                             MultipleErrors
                                                             (Writer MultipleErrors)) _" [orphan] forall @ s
                                                                                                                                                                                                                                                         ($dMonad :: GHC.Base.Monad
                                                                                                                                                                                                                                                                       (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                                                                                          Language.PureScript.Errors.MultipleErrors
                                                                                                                                                                                                                                                                          (Control.Monad.Trans.Writer.Strict.Writer
                                                                                                                                                                                                                                                                             Language.PureScript.Errors.MultipleErrors)))
  Control.Monad.Trans.State.Strict.$fMonadStateT_$c>> @ (Control.Monad.Trans.Except.ExceptT
                                                           Language.PureScript.Errors.MultipleErrors
                                                           (Control.Monad.Trans.Writer.Strict.Writer
                                                              Language.PureScript.Errors.MultipleErrors))
                                                      @ s
                                                      $dMonad
  = Language.PureScript.Interactive.$s$fMonadErroreStateT_$s$fMonadStateT_$c>>
      @ s
"SPEC/Language.PureScript.Interactive $fMonadStateT_$c>>= @ (ExceptT
                                                              MultipleErrors
                                                              (Writer MultipleErrors)) _" [orphan] forall @ s
                                                                                                                                                                                                                                                            ($dMonad :: GHC.Base.Monad
                                                                                                                                                                                                                                                                          (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                                                                                             Language.PureScript.Errors.MultipleErrors
                                                                                                                                                                                                                                                                             (Control.Monad.Trans.Writer.Strict.Writer
                                                                                                                                                                                                                                                                                Language.PureScript.Errors.MultipleErrors)))
  Control.Monad.Trans.State.Strict.$fMonadStateT_$c>>= @ (Control.Monad.Trans.Except.ExceptT
                                                            Language.PureScript.Errors.MultipleErrors
                                                            (Control.Monad.Trans.Writer.Strict.Writer
                                                               Language.PureScript.Errors.MultipleErrors))
                                                       @ s
                                                       $dMonad
  = Language.PureScript.Interactive.$s$fMonadErroreStateT_$s$fMonadStateT_$c>>=
      @ s
"SPEC/Language.PureScript.Interactive $fMonadStateT_$cfail @ (ExceptT
                                                               MultipleErrors
                                                               (Writer MultipleErrors)) _" [orphan] forall @ s
                                                                                                                                                                                                                                                               ($dMonad :: GHC.Base.Monad
                                                                                                                                                                                                                                                                             (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                                                                                                Language.PureScript.Errors.MultipleErrors
                                                                                                                                                                                                                                                                                (Control.Monad.Trans.Writer.Strict.Writer
                                                                                                                                                                                                                                                                                   Language.PureScript.Errors.MultipleErrors)))
  Control.Monad.Trans.State.Strict.$fMonadStateT_$cfail @ (Control.Monad.Trans.Except.ExceptT
                                                             Language.PureScript.Errors.MultipleErrors
                                                             (Control.Monad.Trans.Writer.Strict.Writer
                                                                Language.PureScript.Errors.MultipleErrors))
                                                        @ s
                                                        $dMonad
  = Language.PureScript.Interactive.$s$fMonadErroreStateT_$s$fMonadStateT_$cfail
      @ s
"SPEC/Language.PureScript.Interactive $fMonadStatesStateT @ (ExceptT
                                                              MultipleErrors
                                                              (Writer MultipleErrors)) _" [orphan] forall @ s
                                                                                                                                                                                                                                                            (v :: GHC.Base.Monad
                                                                                                                                                                                                                                                                    (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                                                                                                       Language.PureScript.Errors.MultipleErrors
                                                                                                                                                                                                                                                                       (Control.Monad.Trans.Writer.Strict.Writer
                                                                                                                                                                                                                                                                          Language.PureScript.Errors.MultipleErrors)))
  Control.Monad.State.Class.$fMonadStatesStateT @ (Control.Monad.Trans.Except.ExceptT
                                                     Language.PureScript.Errors.MultipleErrors
                                                     (Control.Monad.Trans.Writer.Strict.Writer
                                                        Language.PureScript.Errors.MultipleErrors))
                                                @ s
                                                v
  = Language.PureScript.Interactive.$s$fMonadStatesStateT @ s
"SPEC/Language.PureScript.Interactive $fMonadWriterT @ MultipleErrors @ Identity" [orphan] forall (v1 :: GHC.Base.Monad
                                                                                                           Data.Functor.Identity.Identity)
                                                                                                  (v :: GHC.Base.Monoid
                                                                                                          Language.PureScript.Errors.MultipleErrors)
  Control.Monad.Trans.Writer.Strict.$fMonadWriterT @ Language.PureScript.Errors.MultipleErrors
                                                   @ Data.Functor.Identity.Identity
                                                   v
                                                   v1
  = Language.PureScript.Interactive.$s$fApplicativeStateT_$s$fMonadWriterT
"SPEC/Language.PureScript.Interactive $fMonadWriterT_$c>> @ MultipleErrors @ Identity" [orphan] forall ($dMonad :: GHC.Base.Monad
                                                                                                                     Data.Functor.Identity.Identity)
                                                                                                       ($dMonoid :: GHC.Base.Monoid
                                                                                                                      Language.PureScript.Errors.MultipleErrors)
  Control.Monad.Trans.Writer.Strict.$fMonadWriterT_$c>> @ Language.PureScript.Errors.MultipleErrors
                                                        @ Data.Functor.Identity.Identity
                                                        $dMonoid
                                                        $dMonad
  = Language.PureScript.Interactive.$s$fApplicativeStateT_$s$fMonadWriterT_$c>>
"SPEC/Language.PureScript.Interactive $fMonadWriterT_$c>>= @ MultipleErrors @ Identity" [orphan] forall ($dMonad :: GHC.Base.Monad
                                                                                                                      Data.Functor.Identity.Identity)
                                                                                                        ($dMonoid :: GHC.Base.Monoid
                                                                                                                       Language.PureScript.Errors.MultipleErrors)
  Control.Monad.Trans.Writer.Strict.$fMonadWriterT_$c>>= @ Language.PureScript.Errors.MultipleErrors
                                                         @ Data.Functor.Identity.Identity
                                                         $dMonoid
                                                         $dMonad
  = Language.PureScript.Interactive.$s$fApplicativeStateT_$s$fMonadWriterT_$c>>=
"SPEC/Language.PureScript.Interactive $fMonadWriterT_$cfail @ MultipleErrors @ Identity" [orphan] forall ($dMonad :: GHC.Base.Monad
                                                                                                                       Data.Functor.Identity.Identity)
                                                                                                         ($dMonoid :: GHC.Base.Monoid
                                                                                                                        Language.PureScript.Errors.MultipleErrors)
  Control.Monad.Trans.Writer.Strict.$fMonadWriterT_$cfail @ Language.PureScript.Errors.MultipleErrors
                                                          @ Data.Functor.Identity.Identity
                                                          $dMonoid
                                                          $dMonad
  = Language.PureScript.Interactive.$s$fApplicativeStateT_$s$fMonadWriterT_$cfail
"SPEC/Language.PureScript.Interactive fromList @ ModuleName" [orphan] forall ($dOrd :: GHC.Classes.Ord
                                                                                         Language.PureScript.Names.ModuleName)
  Data.Set.Internal.fromList @ Language.PureScript.Names.ModuleName
                             $dOrd
  = Language.PureScript.Interactive.$sfromList
"SPEC/Language.PureScript.Interactive fromList @ ModuleName _" [orphan] forall @ a
                                                                               ($dOrd :: GHC.Classes.Ord
                                                                                           Language.PureScript.Names.ModuleName)
  Data.Map.Internal.fromList @ Language.PureScript.Names.ModuleName
                             @ a
                             $dOrd
  = Language.PureScript.Interactive.$sfromList1 @ a
"SPEC/Language.PureScript.Interactive put @ (ExceptT
                                              MultipleErrors (Writer MultipleErrors)) _" [orphan] forall @ s
                                                                                                                                                              ($dMonad :: GHC.Base.Monad
                                                                                                                                                                            (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                               Language.PureScript.Errors.MultipleErrors
                                                                                                                                                                               (Control.Monad.Trans.Writer.Strict.Writer
                                                                                                                                                                                  Language.PureScript.Errors.MultipleErrors)))
  Control.Monad.Trans.State.Strict.put @ (Control.Monad.Trans.Except.ExceptT
                                            Language.PureScript.Errors.MultipleErrors
                                            (Control.Monad.Trans.Writer.Strict.Writer
                                               Language.PureScript.Errors.MultipleErrors))
                                       @ s
                                       $dMonad
  = Language.PureScript.Interactive.$s$fMonadStatesStateT_$sput @ s
"SPEC/Language.PureScript.Interactive state @ (ExceptT
                                                MultipleErrors (Writer MultipleErrors)) _ _" [orphan] forall @ s
                                                                                                                                                                    @ a
                                                                                                                                                                    ($dMonad :: GHC.Base.Monad
                                                                                                                                                                                  (Control.Monad.Trans.Except.ExceptT
                                                                                                                                                                                     Language.PureScript.Errors.MultipleErrors
                                                                                                                                                                                     (Control.Monad.Trans.Writer.Strict.Writer
                                                                                                                                                                                        Language.PureScript.Errors.MultipleErrors)))
  Control.Monad.Trans.State.Strict.state @ (Control.Monad.Trans.Except.ExceptT
                                              Language.PureScript.Errors.MultipleErrors
                                              (Control.Monad.Trans.Writer.Strict.Writer
                                                 Language.PureScript.Errors.MultipleErrors))
                                         @ s
                                         @ a
                                         $dMonad
  = Language.PureScript.Interactive.$s$fMonadStatesStateT_$sstate
      @ s
      @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

