
==================== FINAL INTERFACE ====================
2019-01-24 14:16:47.898691 UTC

interface purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Interactive.Completion 8043
  interface hash: 030c76c1913c64b2e859729aaacccd4f
  ABI hash: 843f05a69516a80551b3551e2cb65f98
  export-list hash: 64a4aec8fb6a026ecc1affc93edfebff
  orphan hash: 81f1e73bb3d70e8aa9a49d2e351cec2c
  flag hash: 6b91193d6f95e3c74259a28b4bb30bdf
  opt_hash: 2c98c95d41c045ae9c2fb565ec8aabc6
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Language.PureScript.Interactive.Completion.completion
  Language.PureScript.Interactive.Completion.completion'
  Language.PureScript.Interactive.Completion.formatCompletions
  Language.PureScript.Interactive.Completion.liftCompletionM
  Language.PureScript.Interactive.Completion.CompletionM
module dependencies: Control.Monad.Logger Control.Monad.Supply
                     Control.Monad.Supply.Class Language.PureScript
                     Language.PureScript.AST Language.PureScript.AST.Binders
                     Language.PureScript.AST.Declarations
                     Language.PureScript.AST.Exported Language.PureScript.AST.Literals
                     Language.PureScript.AST.Operators Language.PureScript.AST.SourcePos
                     Language.PureScript.AST.Traversals Language.PureScript.Bundle
                     Language.PureScript.CodeGen.JS
                     Language.PureScript.CodeGen.JS.Common
                     Language.PureScript.CodeGen.JS.Printer Language.PureScript.Comments
                     Language.PureScript.Constants Language.PureScript.CoreFn
                     Language.PureScript.CoreFn.Ann Language.PureScript.CoreFn.Binders
                     Language.PureScript.CoreFn.Desugar Language.PureScript.CoreFn.Expr
                     Language.PureScript.CoreFn.Meta Language.PureScript.CoreFn.Module
                     Language.PureScript.CoreFn.Optimizer
                     Language.PureScript.CoreFn.ToJSON
                     Language.PureScript.CoreFn.Traversals
                     Language.PureScript.CoreImp.AST
                     Language.PureScript.CoreImp.Optimizer
                     Language.PureScript.CoreImp.Optimizer.Blocks
                     Language.PureScript.CoreImp.Optimizer.Common
                     Language.PureScript.CoreImp.Optimizer.Inliner
                     Language.PureScript.CoreImp.Optimizer.MagicDo
                     Language.PureScript.CoreImp.Optimizer.TCO
                     Language.PureScript.CoreImp.Optimizer.Unused
                     Language.PureScript.Crash Language.PureScript.Environment
                     Language.PureScript.Errors Language.PureScript.Externs
                     Language.PureScript.Interactive.Directive
                     Language.PureScript.Interactive.Types Language.PureScript.Kinds
                     Language.PureScript.Label Language.PureScript.Linter
                     Language.PureScript.Linter.Exhaustive
                     Language.PureScript.Linter.Imports Language.PureScript.Make
                     Language.PureScript.Make.Actions Language.PureScript.Make.BuildPlan
                     Language.PureScript.Make.Monad
                     Language.PureScript.ModuleDependencies Language.PureScript.Names
                     Language.PureScript.Options Language.PureScript.PSString
                     Language.PureScript.Parser Language.PureScript.Parser.Common
                     Language.PureScript.Parser.Declarations
                     Language.PureScript.Parser.Kinds Language.PureScript.Parser.Lexer
                     Language.PureScript.Parser.State Language.PureScript.Parser.Types
                     Language.PureScript.Pretty Language.PureScript.Pretty.Common
                     Language.PureScript.Pretty.Kinds Language.PureScript.Pretty.Types
                     Language.PureScript.Pretty.Values
                     Language.PureScript.Publish.BoxesHelpers
                     Language.PureScript.Renamer Language.PureScript.Sugar
                     Language.PureScript.Sugar.AdoNotation
                     Language.PureScript.Sugar.BindingGroups
                     Language.PureScript.Sugar.CaseDeclarations
                     Language.PureScript.Sugar.DoNotation
                     Language.PureScript.Sugar.LetPattern
                     Language.PureScript.Sugar.Names
                     Language.PureScript.Sugar.Names.Common
                     Language.PureScript.Sugar.Names.Env
                     Language.PureScript.Sugar.Names.Exports
                     Language.PureScript.Sugar.Names.Imports
                     Language.PureScript.Sugar.ObjectWildcards
                     Language.PureScript.Sugar.Operators
                     Language.PureScript.Sugar.Operators.Binders
                     Language.PureScript.Sugar.Operators.Common
                     Language.PureScript.Sugar.Operators.Expr
                     Language.PureScript.Sugar.Operators.Types
                     Language.PureScript.Sugar.TypeClasses
                     Language.PureScript.Sugar.TypeClasses.Deriving
                     Language.PureScript.Sugar.TypeDeclarations
                     Language.PureScript.Traversals Language.PureScript.TypeChecker
                     Language.PureScript.TypeChecker.Entailment
                     Language.PureScript.TypeChecker.Kinds
                     Language.PureScript.TypeChecker.Monad
                     Language.PureScript.TypeChecker.Skolems
                     Language.PureScript.TypeChecker.Subsumption
                     Language.PureScript.TypeChecker.Synonyms
                     Language.PureScript.TypeChecker.TypeSearch
                     Language.PureScript.TypeChecker.Types
                     Language.PureScript.TypeChecker.Unify
                     Language.PureScript.TypeClassDictionaries Language.PureScript.Types
                     Paths_purescript
package dependencies: aeson-1.3.1.1 ansi-terminal-0.8.0.4
                      array-0.5.2.0 async-2.2.1 attoparsec-0.13.2.2 base-4.11.1.0
                      base-compat-0.10.4 binary-0.8.5.1 blaze-builder-0.4.1.0 boxes-0.1.5
                      bytestring-0.10.8.2 colour-2.3.4 containers-0.5.11.0
                      data-ordlist-0.4.7.0 deepseq-1.4.3.0 directory-1.3.1.5
                      dlist-0.8.0.4 filepath-1.4.2 ghc-boot-th-8.4.3 ghc-prim-0.5.2.0
                      hashable-1.2.7.0 haskeline-0.7.4.3 integer-gmp-1.0.2.0
                      integer-logarithms-1.0.2.1 language-javascript-0.6.0.11
                      lifted-base-0.2.3.12 microlens-0.4.9.1 microlens-ghc-0.4.9
                      microlens-mtl-0.1.11.1 microlens-platform-0.3.10
                      microlens-th-0.4.2.1 monad-control-1.0.2.3 mtl-2.2.2
                      parallel-3.2.1.1 parsec-3.1.13.0 pattern-arrows-0.0.2
                      pretty-1.1.3.6 primitive-0.6.3.0 protolude-0.2.2 random-1.1
                      safe-0.3.17 scientific-0.3.6.2 sourcemap-0.1.6 split-0.2.3.3
                      stm-2.4.5.0 syb-0.7 tagged-0.8.5 template-haskell-2.13.0.0
                      terminfo-0.4.1.1 text-1.2.3.0 th-abstraction-0.2.8.0 time-1.8.0.2
                      time-locale-compat-0.1.1.4 transformers-0.5.5.0
                      transformers-base-0.4.5.2 unix-2.7.2.2 unordered-containers-0.2.9.0
                      utf8-string-1.0.1.1 uuid-types-1.0.3 vector-0.12.0.1
orphans: syb-0.7:Data.Generics.Instances
         microlens-platform-0.3.10:Lens.Micro.Platform
         microlens-ghc-0.4.9:Lens.Micro.GHC colour-2.3.4:Data.Colour
         attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         vector-0.12.0.1:Data.Vector.Unboxed
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.0:Data.Text.Lazy
         vector-0.12.0.1:Data.Vector.Fusion.Bundle text-1.2.3.0:Data.Text
         binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         stm-2.4.5.0:Control.Monad.STM
         transformers-0.5.5.0:Control.Monad.Trans.Error
         base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: aeson-1.3.1.1:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.Graph
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         dlist-0.8.0.4:Data.DList ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         microlens-0.4.9.1:Lens.Micro.Internal
                         microlens-ghc-0.4.9:Lens.Micro.GHC
                         microlens-mtl-0.1.11.1:Lens.Micro.Mtl.Internal
                         microlens-platform-0.3.10:Lens.Micro.Platform
                         monad-control-1.0.2.3:Control.Monad.Trans.Control
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Control.Monad.Logger
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.Declarations
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.Operators
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.SourcePos
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Comments
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Environment
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Kinds
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Label
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Make.Monad
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Names
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.PSString
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.TypeClassDictionaries
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Types
                         tagged-0.8.5:Data.Tagged
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
                         th-abstraction-0.2.8.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  base-4.11.1.0:Control.Monad.IO.Class 96109c36cb3c919872278540487fa39e
import  -/  base-4.11.1.0:Data.Either 39d922b371c4c52d426e9ee66de8371a
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.Functor f522c3501272159820fd6f242510732f
import  -/  base-4.11.1.0:Data.List 83dc843e47bfc0c5af51e19c6f3476d5
import  -/  base-4.11.1.0:Data.Maybe 409c3da2b142470b68be39ce1d97a9f7
import  -/  base-4.11.1.0:Data.OldList 1b35aa3c6805ff7c8887a35a866fe006
import  -/  base-4.11.1.0:Data.Traversable 7ad4edb9184ea1ae8e73f6b94f115c8c
import  -/  base-4.11.1.0:Data.Tuple 3af66f3ac61ed95ba8a3a3f68ebc5003
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-compat-0.10.4:Prelude.Compat bb6796186ed35a1d09dc34362a3fc27e
import  -/  containers-0.5.11.0:Data.Map 0dbdaec812ef695a364aa6c69e7f7d53
import  -/  containers-0.5.11.0:Data.Map.Internal 0150e210d0ae8df0f3a0669d5e32d8fa
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  haskeline-0.7.4.3:System.Console.Haskeline c3a206239edcfaa31c60fa8750a015f7
import  -/  haskeline-0.7.4.3:System.Console.Haskeline.Completion 7742937bebf679235bc2a7f6289815bd
import  -/  mtl-2.2.2:Control.Monad.State.Class acc76e93f44ac4486524db1a327e0a0a
import  -/  protolude-0.2.2:Protolude 2c2d16096c8a60f59f646a3b93b0eb7b
import  -/  protolude-0.2.2:Protolude.List 3a80368167450d7a4360ebf1ea443345
import  -/  Language.PureScript 4a24ccd892adbf021daf2410ebd61e22
  exports: 139dcaa90af8ddcee6aa0492159f351d
import  -/  Language.PureScript.AST.Declarations 586bc75044e8737d02875208d17d4395
  Module 3342e00ee072addfd009ee61e87fb865
  getModuleName 7aa2ed3fa39338f5edb2f1938e29c924
import  -/  Language.PureScript.Interactive.Directive 209bc29b7638809b285c0fc7c80bc3a3
  exports: 6521b72e25a35e80225f60e0fa9f065c
  directiveStringsFor 2df2dacc0e029773810fe0e2eb84bd10
  directivesFor f8fced14fb5df33df9117cdde1bbad46
import  -/  Language.PureScript.Interactive.Types 4e19f70dd31c7d7b6ef50a08ad8425bf
  exports: 1b53f4922e79c9de65e5100c6fc4ac8b
  Browse 4f6ee24f134c752f17c61836529fc379
  Directive 9a76f7dd17b564fb8a5f6688bdedc91b
  Kind b628b5282eacf80d832e4e65522528ce
  PSCiState 876224c4cea1642e91e4ad0b6a812184
  Show 31ea2d863b893e207ecbca0731c28013
  Type 840ae366507922350098912d887ed709
  psciExports e7c5cdfca54fb278247a2935b5e8109c
  psciImports b77ca26e50f5814901de20987c2ecb54
  psciLoadedExterns 33d0b537a115b20de45407a6e24b39aa
  replQueryStrings aab7d48d93c897d1ca781a49489e615e
import  -/  Language.PureScript.Names 00f694509122478d97b327fbbccae327
  runModuleName 58b788b37f600c0f34fa85241d7748ad
  runOpName 9af301165f72160425c5e0dde6525338
  runProperName a7268334e0b909381550b9329cb80fcc
  showIdent 6e8d83433e1fcc9da5f1cf76585fd968
  showQualified 5ab4b15825b0e65e211bc57f19d57784
import  -/  Language.PureScript.Sugar.Names.Env 97518f893bef0c5e5749cfa9e4ca9265
  exportedTypeOps d2107d9c7383e14684c4687121fab2f3
  exportedTypes d2107d9c7383e14684c4687121fab2f3
  exportedValueOps d2107d9c7383e14684c4687121fab2f3
  exportedValues d2107d9c7383e14684c4687121fab2f3
  importedDataConstructors 330f296cc3ed68256ee5fc6aa457fa42
  importedTypeOps 330f296cc3ed68256ee5fc6aa457fa42
  importedTypes 330f296cc3ed68256ee5fc6aa457fa42
  importedValueOps 330f296cc3ed68256ee5fc6aa457fa42
  importedValues 330f296cc3ed68256ee5fc6aa457fa42
import  -/  text-1.2.3.0:Data.Text 7daa7e6c9b39d8cc1679e5ec5c64d2be
import  -/  text-1.2.3.0:Data.Text.Show 3b4b6fb2985a731022d67f636682da2b
import  -/  transformers-0.5.5.0:Control.Monad.Trans.Reader 42962052353a5a0f766912058b765b5d
e3f9307503c7063160f3342ca6f82643
  $fShowCompletionContext ::
    GHC.Show.Show
      Language.PureScript.Interactive.Completion.CompletionContext
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Interactive.Completion.CompletionContext
                  Language.PureScript.Interactive.Completion.$fShowCompletionContext_$cshowsPrec
                  Language.PureScript.Interactive.Completion.$fShowCompletionContext_$cshow
                  Language.PureScript.Interactive.Completion.$fShowCompletionContext_$cshowList -}
e3f9307503c7063160f3342ca6f82643
  $fShowCompletionContext1 ::
    Language.PureScript.Interactive.Completion.CompletionContext
    -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (Language.PureScript.Interactive.Completion.$fShowCompletionContext_$cshowsPrec
                   Language.PureScript.Interactive.Completion.$fShowCompletionContext2) -}
3ba1ccaa7433976383e61d338d3ea20b
  $fShowCompletionContext10 :: [GHC.Types.Char]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.$fShow(,)3
                   (GHC.Types.[] @ GHC.Types.Char)) -}
836c333071764f7f1edf4244bd0dea3c
  $fShowCompletionContext11 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("CtxDirective "#) -}
cd9bf440a0c0164540b35251afef2471
  $fShowCompletionContext2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
af61bf4d655ec582076ed216d6835e5b
  $fShowCompletionContext3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("CtxFixed "#) -}
98d1959e58e42447ac7d78840b14c139
  $fShowCompletionContext4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("CtxType "#) -}
f65990ed5a0394b2b6ec92c4de13855a
  $fShowCompletionContext5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Interactive.Completion.$fShowCompletionContext6) -}
0b073bfe9ead4b2d55f4817478fd89c1
  $fShowCompletionContext6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("CtxIdentifier"#) -}
7af2e60f739e22e001ca6c49c0c7cce3
  $fShowCompletionContext7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Interactive.Completion.$fShowCompletionContext8) -}
0e556d498d5e910242e94aea95afe3a4
  $fShowCompletionContext8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("CtxModule"#) -}
f4c8ae5cb14c3de9a17f84f4729de01a
  $fShowCompletionContext9 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("CtxFilePath "#) -}
e3f9307503c7063160f3342ca6f82643
  $fShowCompletionContext_$cshow ::
    Language.PureScript.Interactive.Completion.CompletionContext
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: Language.PureScript.Interactive.Completion.CompletionContext) ->
                 case x of wild {
                   Language.PureScript.Interactive.Completion.CtxDirective b1
                   -> GHC.CString.unpackAppendCString#
                        Language.PureScript.Interactive.Completion.$fShowCompletionContext11
                        (GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.$fShow(,)3
                           (GHC.Show.showLitString
                              b1
                              Language.PureScript.Interactive.Completion.$fShowCompletionContext10))
                   Language.PureScript.Interactive.Completion.CtxFilePath b1
                   -> GHC.CString.unpackAppendCString#
                        Language.PureScript.Interactive.Completion.$fShowCompletionContext9
                        (GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.$fShow(,)3
                           (GHC.Show.showLitString
                              b1
                              Language.PureScript.Interactive.Completion.$fShowCompletionContext10))
                   Language.PureScript.Interactive.Completion.CtxModule
                   -> Language.PureScript.Interactive.Completion.$fShowCompletionContext7
                   Language.PureScript.Interactive.Completion.CtxIdentifier
                   -> Language.PureScript.Interactive.Completion.$fShowCompletionContext5
                   Language.PureScript.Interactive.Completion.CtxType b1
                   -> GHC.CString.unpackAppendCString#
                        Language.PureScript.Interactive.Completion.$fShowCompletionContext4
                        (GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.$fShow(,)3
                           (GHC.Show.showLitString
                              b1
                              Language.PureScript.Interactive.Completion.$fShowCompletionContext10))
                   Language.PureScript.Interactive.Completion.CtxFixed b1
                   -> GHC.CString.unpackAppendCString#
                        Language.PureScript.Interactive.Completion.$fShowCompletionContext3
                        (GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.$fShow(,)3
                           (GHC.Show.showLitString
                              b1
                              Language.PureScript.Interactive.Completion.$fShowCompletionContext10)) }) -}
e3f9307503c7063160f3342ca6f82643
  $fShowCompletionContext_$cshowList ::
    [Language.PureScript.Interactive.Completion.CompletionContext]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Interactive.Completion.CompletionContext])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Interactive.Completion.CompletionContext
                   Language.PureScript.Interactive.Completion.$fShowCompletionContext1
                   ls
                   s) -}
e3f9307503c7063160f3342ca6f82643
  $fShowCompletionContext_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Interactive.Completion.CompletionContext
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U> -}
8ee0ef030c3cc1ec2da99c5c474fd382
  $s$fApplicativeReaderT ::
    GHC.Base.Applicative
      (Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ r.
                  @ (Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO)
                  (Language.PureScript.Interactive.Completion.$s$fApplicativeReaderT_$s$fFunctorReaderT
                     @ r)
                  (\ @ a (x :: a) ->
                   let {
                     m1 :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
                       {- Arity: 1 -}
                     = \ (s :: GHC.Prim.State# GHC.Prim.RealWorld) -> (# s, x #)
                   } in
                   (\ (ds :: r) -> m1)
                     `cast`
                   ((<r>_R
                     ->_R Sym (GHC.Types.N:IO[0]
                                   <a>_R)) ; Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                      <*>_N <r>_R <GHC.Types.IO>_R <a>_N)))
                  (Language.PureScript.Interactive.Completion.$s$fApplicativeReaderT_$s$fApplicativeReaderT_$c<*>
                     @ r)
                  (Control.Monad.Trans.Reader.$fApplicativeReaderT_$cliftA2
                     @ GHC.Types.IO
                     @ r
                     GHC.Base.$fApplicativeIO)
                  (Language.PureScript.Interactive.Completion.$s$fApplicativeReaderT_$s$fApplicativeReaderT_$c*>
                     @ r)
                  (Language.PureScript.Interactive.Completion.$s$fApplicativeReaderT_$s$fApplicativeReaderT_$c<*
                     @ r) -}
2cc17fcaa90066db659a639e65e11841
  $s$fApplicativeReaderT_$s$fApplicativeReaderT_$c*> ::
    Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a
    -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b
    -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S(SL))),1*C1(C1(U(U,A)))><L,1*C1(C1(U(U,U)))><L,U><S,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ r
                   @ a
                   @ b
                   (u :: Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a)
                   (v :: Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b)
                   (r1 :: r)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (u `cast`
                       (Control.Monad.Trans.Reader.N:ReaderT[0]
                            <*>_N <r>_R <GHC.Types.IO>_R <a>_N)
                         r1)
                        `cast`
                      (GHC.Types.N:IO[0] <a>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 (v `cast`
                  (Control.Monad.Trans.Reader.N:ReaderT[0]
                       <*>_N <r>_R <GHC.Types.IO>_R <b>_N)
                    r1)
                   `cast`
                 (GHC.Types.N:IO[0] <b>_R)
                   ipv })
                  `cast`
                (forall (r :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a>_R
                 ->_R <Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b>_R
                 ->_R (<r>_R
                       ->_R Sym (GHC.Types.N:IO[0]
                                     <b>_R)) ; Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                        <*>_N <r>_R <GHC.Types.IO>_R <b>_N)) -}
8ae160e8b1e25d24fca558f3c4b68d8e
  $s$fApplicativeReaderT_$s$fApplicativeReaderT_$c<* ::
    Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a
    -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b
    -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S(SL))),1*C1(C1(U(U,U)))><L,1*C1(C1(U(U,A)))><L,U><S,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ r
                   @ a
                   @ b
                   (u :: Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a)
                   (v :: Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b)
                   (r1 :: r)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (u `cast`
                       (Control.Monad.Trans.Reader.N:ReaderT[0]
                            <*>_N <r>_R <GHC.Types.IO>_R <a>_N)
                         r1)
                        `cast`
                      (GHC.Types.N:IO[0] <a>_R)
                        s of ds { (#,#) ipv ipv1 ->
                 case (v `cast`
                       (Control.Monad.Trans.Reader.N:ReaderT[0]
                            <*>_N <r>_R <GHC.Types.IO>_R <b>_N)
                         r1)
                        `cast`
                      (GHC.Types.N:IO[0] <b>_R)
                        ipv of ds1 { (#,#) ipv2 ipv3 ->
                 (# ipv2, ipv1 #) } })
                  `cast`
                (forall (r :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a>_R
                 ->_R <Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b>_R
                 ->_R (<r>_R
                       ->_R Sym (GHC.Types.N:IO[0]
                                     <a>_R)) ; Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                        <*>_N <r>_R <GHC.Types.IO>_R <a>_N)) -}
9a3791b426c70a0d2814593fe4799044
  $s$fApplicativeReaderT_$s$fApplicativeReaderT_$c<*> ::
    Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO (a -> b)
    -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a
    -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S(SL))),1*C1(C1(U(U,1*C1(U))))><L,1*C1(C1(U(U,U)))><L,U><S,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ r
                   @ a
                   @ b
                   (f1 :: Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO (a -> b))
                   (v :: Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a)
                   (r1 :: r)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (f1
                         `cast`
                       (Control.Monad.Trans.Reader.N:ReaderT[0]
                            <*>_N <r>_R <GHC.Types.IO>_R <a -> b>_N)
                         r1)
                        `cast`
                      (GHC.Types.N:IO[0] <a -> b>_R)
                        s of ds { (#,#) ipv ipv1 ->
                 case (v `cast`
                       (Control.Monad.Trans.Reader.N:ReaderT[0]
                            <*>_N <r>_R <GHC.Types.IO>_R <a>_N)
                         r1)
                        `cast`
                      (GHC.Types.N:IO[0] <a>_R)
                        ipv of ds1 { (#,#) ipv2 ipv3 ->
                 (# ipv2, ipv1 ipv3 #) } })
                  `cast`
                (forall (r :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO (a -> b)>_R
                 ->_R <Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a>_R
                 ->_R (<r>_R
                       ->_R Sym (GHC.Types.N:IO[0]
                                     <b>_R)) ; Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                        <*>_N <r>_R <GHC.Types.IO>_R <b>_N)) -}
68b11e8812fe6f2d90115cc6380d2eb3
  $s$fApplicativeReaderT_$s$fFunctorReaderT ::
    GHC.Base.Functor
      (Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ r.
                  @ (Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO)
                  (Language.PureScript.Interactive.Completion.$s$fApplicativeReaderT_$s$fFunctorReaderT_$cfmap
                     @ r)
                  (Language.PureScript.Interactive.Completion.$s$fApplicativeReaderT_$s$fFunctorReaderT_$c<$
                     @ r) -}
44713f7a4e01919c63b1ce4405cc96b9
  $s$fApplicativeReaderT_$s$fFunctorReaderT_$c<$ ::
    a
    -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b
    -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U><C(C(S(SL))),1*C1(C1(U(U,A)))><L,U><S,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ r
                   @ a
                   @ b
                   (x :: a)
                   (v :: Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b)
                   (x1 :: r)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (v `cast`
                       (Control.Monad.Trans.Reader.N:ReaderT[0]
                            <*>_N <r>_R <GHC.Types.IO>_R <b>_N)
                         x1)
                        `cast`
                      (GHC.Types.N:IO[0] <b>_R)
                        eta1 of ds { (#,#) ipv ipv1 ->
                 (# ipv, x #) })
                  `cast`
                (forall (r :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <a>_R
                 ->_R <Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b>_R
                 ->_R (<r>_R
                       ->_R Sym (GHC.Types.N:IO[0]
                                     <a>_R)) ; Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                        <*>_N <r>_R <GHC.Types.IO>_R <a>_N)) -}
a3590c5e00c3bfe377f6b6defdfda122
  $s$fApplicativeReaderT_$s$fFunctorReaderT_$cfmap ::
    (a -> b)
    -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a
    -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*C1(U)><C(C(S(SL))),1*C1(C1(U(U,U)))><L,U><S,U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ r @ a @ b (f1 :: a -> b) ->
                 Control.Monad.Trans.Reader.mapReaderT
                   @ *
                   @ *
                   @ GHC.Types.IO
                   @ a
                   @ GHC.Types.IO
                   @ b
                   @ r
                   (GHC.Base.$fFunctorIO2 @ a @ b f1)
                     `cast`
                   (<GHC.Types.IO a>_R ->_R Sym (GHC.Types.N:IO[0] <b>_R))) -}
7c83e1f0d02890d94d37f9c6edb40f9f
  $s$fMonadIOReaderT ::
    Control.Monad.IO.Class.MonadIO
      (Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ r.
                  @ (Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO)
                  (Language.PureScript.Interactive.Completion.$s$fMonadIOReaderT_$s$fMonadReaderT
                     @ r)
                  (\ @ a (x :: GHC.Types.IO a) (ds :: r) -> x)
                    `cast`
                  (forall (a :: <*>_N).
                   <GHC.Types.IO a>_R
                   ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                 <*>_N <r>_R <GHC.Types.IO>_R <a>_N)) -}
c72ae0082ecba24155a9cccd06463c50
  $s$fMonadIOReaderT_$s$fMonadReaderT ::
    GHC.Base.Monad (Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ r.
                  @ (Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO)
                  (Language.PureScript.Interactive.Completion.$s$fApplicativeReaderT
                     @ r)
                  (Language.PureScript.Interactive.Completion.$s$fMonadIOReaderT_$s$fMonadReaderT_$c>>=
                     @ r)
                  (Language.PureScript.Interactive.Completion.$s$fApplicativeReaderT_$s$fApplicativeReaderT_$c*>
                     @ r)
                  (\ @ a (eta :: a) ->
                   let {
                     m1 :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
                       {- Arity: 1 -}
                     = \ (s :: GHC.Prim.State# GHC.Prim.RealWorld) -> (# s, eta #)
                   } in
                   (\ (ds :: r) -> m1)
                     `cast`
                   ((<r>_R
                     ->_R Sym (GHC.Types.N:IO[0]
                                   <a>_R)) ; Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                      <*>_N <r>_R <GHC.Types.IO>_R <a>_N)))
                  (Language.PureScript.Interactive.Completion.$s$fMonadIOReaderT_$s$fMonadReaderT_$cfail
                     @ r) -}
d32c7a3f6df3deaecd696bd4cf92f2e0
  $s$fMonadIOReaderT_$s$fMonadReaderT_$c>>= ::
    Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a
    -> (a -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b)
    -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S(SL))),1*C1(C1(U(U,U)))><L,1*C1(C1(C1(U(U,U))))><L,U><S,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ r
                   @ a
                   @ b
                   (m1 :: Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a)
                   (k :: a -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b)
                   (r1 :: r)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (m1
                         `cast`
                       (Control.Monad.Trans.Reader.N:ReaderT[0]
                            <*>_N <r>_R <GHC.Types.IO>_R <a>_N)
                         r1)
                        `cast`
                      (GHC.Types.N:IO[0] <a>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 ((k ipv1)
                    `cast`
                  (Control.Monad.Trans.Reader.N:ReaderT[0]
                       <*>_N <r>_R <GHC.Types.IO>_R <b>_N)
                    r1)
                   `cast`
                 (GHC.Types.N:IO[0] <b>_R)
                   ipv })
                  `cast`
                (forall (r :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a>_R
                 ->_R <a -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b>_R
                 ->_R (<r>_R
                       ->_R Sym (GHC.Types.N:IO[0]
                                     <b>_R)) ; Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                        <*>_N <r>_R <GHC.Types.IO>_R <b>_N)) -}
3a507fb2569c678e1c15e7c3c4589dca
  $s$fMonadIOReaderT_$s$fMonadReaderT_$cfail ::
    GHC.Base.String
    -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a
  {- Arity: 1, Strictness: <L,U>, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ r @ a (msg :: GHC.Base.String) ->
                 let {
                   m1 :: GHC.Types.IO a
                   = GHC.Magic.noinline
                       @ (forall a1. [GHC.Types.Char] -> GHC.Types.IO a1)
                       GHC.IO.failIO1
                         `cast`
                       (forall (a1 :: <*>_N).
                        <GHC.Base.String>_R ->_R Sym (GHC.Types.N:IO[0] <a1>_R))
                       @ a
                       msg
                 } in
                 (\ (ds :: r) -> m1)
                   `cast`
                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                           <*>_N <r>_R <GHC.Types.IO>_R <a>_N))) -}
41cbdeae7f79759b59f3049e1f9cc6f1
  $tc'CtxDirective :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14971998128808681914##
                   2925095494960366575##
                   Language.PureScript.Interactive.Completion.$trModule
                   Language.PureScript.Interactive.Completion.$tc'CtxDirective2
                   0#
                   Language.PureScript.Interactive.Completion.$tc'CtxDirective1) -}
3f02d23d8bf395550e9419570343cda2
  $tc'CtxDirective1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
20ecd94311d11cf838aad24b48a41cbd
  $tc'CtxDirective2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Completion.$tc'CtxDirective3) -}
133985eeb8e8c89adab51f026dd11d2e
  $tc'CtxDirective3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'CtxDirective"#) -}
9cfb1dbc3c6c4aad04a27d0998961da0
  $tc'CtxFilePath :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17747236160109211119##
                   6825222350777687981##
                   Language.PureScript.Interactive.Completion.$trModule
                   Language.PureScript.Interactive.Completion.$tc'CtxFilePath1
                   0#
                   Language.PureScript.Interactive.Completion.$tc'CtxDirective1) -}
9dcd822e357641b9297e189961e1f41d
  $tc'CtxFilePath1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Completion.$tc'CtxFilePath2) -}
5f7d380abaa98d78db825d84bf998791
  $tc'CtxFilePath2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'CtxFilePath"#) -}
e0527c05a2e95eafe9f841c02d9521c8
  $tc'CtxFixed :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12710728339573618758##
                   17146386161462722200##
                   Language.PureScript.Interactive.Completion.$trModule
                   Language.PureScript.Interactive.Completion.$tc'CtxFixed1
                   0#
                   Language.PureScript.Interactive.Completion.$tc'CtxDirective1) -}
642b65545e0515be3a467edddc40e290
  $tc'CtxFixed1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Completion.$tc'CtxFixed2) -}
3d19e4c1080744eb218c06c8a9f993a7
  $tc'CtxFixed2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'CtxFixed"#) -}
84ab3b459843e76cb21c878001791859
  $tc'CtxIdentifier :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10150586127378034988##
                   8653813902173261722##
                   Language.PureScript.Interactive.Completion.$trModule
                   Language.PureScript.Interactive.Completion.$tc'CtxIdentifier2
                   0#
                   Language.PureScript.Interactive.Completion.$tc'CtxIdentifier1) -}
4f46cb082bdb13b2fc1bef30b73787e9
  $tc'CtxIdentifier1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
ed787689eaeba5177dfd7bd50bd904aa
  $tc'CtxIdentifier2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Completion.$tc'CtxIdentifier3) -}
872cc93458c715ae74b7bd0c7203a077
  $tc'CtxIdentifier3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'CtxIdentifier"#) -}
7fd83809b5db721c0e3ade9cf982f65c
  $tc'CtxModule :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17711991737374928845##
                   5394580065294375711##
                   Language.PureScript.Interactive.Completion.$trModule
                   Language.PureScript.Interactive.Completion.$tc'CtxModule1
                   0#
                   Language.PureScript.Interactive.Completion.$tc'CtxIdentifier1) -}
2956ed83700fa7fa496ca88e223c68c4
  $tc'CtxModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Completion.$tc'CtxModule2) -}
ba963e153a5c56bd5ec276ed556f87a6
  $tc'CtxModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'CtxModule"#) -}
c9660fb80f85c23ecede75d7ac8a9a70
  $tc'CtxType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14154345265806023090##
                   5055211366488377101##
                   Language.PureScript.Interactive.Completion.$trModule
                   Language.PureScript.Interactive.Completion.$tc'CtxType1
                   0#
                   Language.PureScript.Interactive.Completion.$tc'CtxDirective1) -}
f712b56e6fa34eed0d4fc258fce3e452
  $tc'CtxType1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Completion.$tc'CtxType2) -}
39e62e419fcb1a2de12eae5dc65dcfa4
  $tc'CtxType2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'CtxType"#) -}
9e32ad26572cc0ae5c303439dd28c88d
  $tcCompletionContext :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5487011271159917915##
                   3785630630526651886##
                   Language.PureScript.Interactive.Completion.$trModule
                   Language.PureScript.Interactive.Completion.$tcCompletionContext1
                   0#
                   GHC.Types.krep$*) -}
3c2bebf56e18a2f1b9714a035a2b85bb
  $tcCompletionContext1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Completion.$tcCompletionContext2) -}
8c04b7bc53551d9886a13f437cb831aa
  $tcCompletionContext2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("CompletionContext"#) -}
412d835f8b28e6d28e3e9396af6d31a6
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Language.PureScript.Interactive.Completion.$trModule3
                   Language.PureScript.Interactive.Completion.$trModule1) -}
511a6f38bb43573982218621e37ac823
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Completion.$trModule2) -}
a20ab1e87cde025af4af262a71790108
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Language.PureScript.Interactive.Completion"#) -}
489cefe29f9479c2f312e02565366c22
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Completion.$trModule4) -}
ed52e8b3e338a99c72b05797efad2606
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"#) -}
37dd49a519e1a0c508c46877f3048f3e
  $wformatCompletions ::
    GHC.Base.String
    -> [System.Console.Haskeline.Completion.Completion]
    -> [GHC.Base.String]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.String)
                   (ww1 :: [System.Console.Haskeline.Completion.Completion]) ->
                 let {
                   lvl16 :: [GHC.Types.Char]
                   = GHC.List.reverse1
                       @ GHC.Types.Char
                       ww
                       (GHC.Types.[] @ GHC.Types.Char)
                 } in
                 GHC.Base.map
                   @ System.Console.Haskeline.Completion.Completion
                   @ [GHC.Types.Char]
                   (\ (x :: System.Console.Haskeline.Completion.Completion) ->
                    GHC.Base.++
                      @ GHC.Types.Char
                      lvl16
                      (case x of wild { System.Console.Haskeline.Completion.Completion ds1 ds2 ds3 ->
                       ds1 }))
                   ww1) -}
e3f9307503c7063160f3342ca6f82643
  data CompletionContext
    = CtxDirective GHC.Base.String
    | CtxFilePath GHC.Base.String
    | CtxModule
    | CtxIdentifier
    | CtxType GHC.Base.String
    | CtxFixed GHC.Base.String
e7b670af4d89a54c63d51518ff468e87
  type CompletionM =
    Control.Monad.Trans.Reader.ReaderT
      Language.PureScript.Interactive.Types.PSCiState GHC.Types.IO
    :: * -> *
62097ded073333b10b9c30bd3ef989a8
  completion ::
    (Control.Monad.State.Class.MonadState
       Language.PureScript.Interactive.Types.PSCiState m,
     Control.Monad.IO.Class.MonadIO m) =>
    System.Console.Haskeline.Completion.CompletionFunc m
  {- Arity: 3,
     Strictness: <S(S(LC(C(S))LLL)LLL),U(U(A,C(C1(U)),A,A,A),U,A,A)><L,U(A,C(U))><L,1*U(1*U,A)>,
     Unfolding: (\ @ m :: * -> *
                   ($dMonadState :: Control.Monad.State.Class.MonadState
                                      Language.PureScript.Interactive.Types.PSCiState m)
                   ($dMonadIO :: Control.Monad.IO.Class.MonadIO m)
                   (x :: (GHC.Base.String, GHC.Base.String)) ->
                 Language.PureScript.Interactive.Completion.liftCompletionM
                   @ m
                   @ (GHC.Base.String,
                      [System.Console.Haskeline.Completion.Completion])
                   $dMonadState
                   $dMonadIO
                   (case x of ww { (,) ww1 ww2 ->
                    System.Console.Haskeline.Completion.$wcompleteWordWithPrev
                      @ (Control.Monad.Trans.Reader.ReaderT
                           Language.PureScript.Interactive.Types.PSCiState GHC.Types.IO)
                      (Language.PureScript.Interactive.Completion.$s$fMonadIOReaderT_$s$fMonadReaderT
                         @ Language.PureScript.Interactive.Types.PSCiState)
                      (GHC.Base.Nothing @ GHC.Types.Char)
                      Language.PureScript.Interactive.Completion.completion1
                      Language.PureScript.Interactive.Completion.findCompletions
                      ww1 })) -}
41b467c8a7d120fb9e30d1ecfc873318
  completion' ::
    System.Console.Haskeline.Completion.CompletionFunc
      Language.PureScript.Interactive.Completion.CompletionM
  {- Arity: 1, Strictness: <S,1*U(1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (w4 :: (GHC.Base.String, GHC.Base.String)) ->
                 case w4 of ww { (,) ww1 ww2 ->
                 System.Console.Haskeline.Completion.$wcompleteWordWithPrev
                   @ (Control.Monad.Trans.Reader.ReaderT
                        Language.PureScript.Interactive.Types.PSCiState GHC.Types.IO)
                   (Language.PureScript.Interactive.Completion.$s$fMonadIOReaderT_$s$fMonadReaderT
                      @ Language.PureScript.Interactive.Types.PSCiState)
                   (GHC.Base.Nothing @ GHC.Types.Char)
                   Language.PureScript.Interactive.Completion.completion1
                   Language.PureScript.Interactive.Completion.findCompletions
                   ww1 }) -}
c39b245bf0e2462de2d1572ef456caca
  completion1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Interactive.Completion.completion2) -}
b6a8c8e9c6f5577d9a9f65b317beda2d
  completion2 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: (" \t\n\
                 \\r(["#) -}
f30452a5dc418ca38748658625582880
  findCompletions ::
    GHC.Base.String
    -> GHC.Base.String
    -> Language.PureScript.Interactive.Completion.CompletionM
         [System.Console.Haskeline.Completion.Completion]
  {- Arity: 2, Strictness: <L,1*U><L,U> -}
a6c7b7936f15035a305a69e235554093
  formatCompletions ::
    (GHC.Base.String, [System.Console.Haskeline.Completion.Completion])
    -> [GHC.Base.String]
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(1*U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: (GHC.Base.String,
                          [System.Console.Haskeline.Completion.Completion])) ->
                 case w of ww { (,) ww1 ww2 ->
                 Language.PureScript.Interactive.Completion.$wformatCompletions
                   ww1
                   ww2 }) -}
cf71aab633e9bac49319d2d555c73d33
  liftCompletionM ::
    (Control.Monad.State.Class.MonadState
       Language.PureScript.Interactive.Types.PSCiState m,
     Control.Monad.IO.Class.MonadIO m) =>
    Language.PureScript.Interactive.Completion.CompletionM a -> m a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S(LC(C(S))LLL)LLL),U(1*U(A,1*C1(C1(U)),A,A,A),1*U,A,A)><L,U(A,C(U))><L,C(U)>,
     Unfolding: (\ @ m :: * -> *
                   @ a
                   ($dMonadState :: Control.Monad.State.Class.MonadState
                                      Language.PureScript.Interactive.Types.PSCiState m)
                   ($dMonadIO :: Control.Monad.IO.Class.MonadIO m)
                   (eta :: Language.PureScript.Interactive.Completion.CompletionM
                             a) ->
                 GHC.Base.>>=
                   @ m
                   (Control.Monad.State.Class.$p1MonadState
                      @ Language.PureScript.Interactive.Types.PSCiState
                      @ m
                      $dMonadState)
                   @ Language.PureScript.Interactive.Types.PSCiState
                   @ a
                   (Control.Monad.State.Class.get
                      @ Language.PureScript.Interactive.Types.PSCiState
                      @ m
                      $dMonadState)
                   (\ (st :: Language.PureScript.Interactive.Types.PSCiState) ->
                    Control.Monad.IO.Class.liftIO
                      @ m
                      $dMonadIO
                      @ a
                      (eta
                         `cast`
                       (Control.Monad.Trans.Reader.N:ReaderT[0]
                            <*>_N
                            <Language.PureScript.Interactive.Types.PSCiState>_R
                            <GHC.Types.IO>_R
                            <a>_N)
                         st))) -}
instance GHC.Show.Show [Language.PureScript.Interactive.Completion.CompletionContext]
  = Language.PureScript.Interactive.Completion.$fShowCompletionContext
"SPEC/Language.PureScript.Interactive.Completion $fApplicativeReaderT @ IO _" [orphan] forall @ r
                                                                                              (v :: GHC.Base.Applicative
                                                                                                      GHC.Types.IO)
  Control.Monad.Trans.Reader.$fApplicativeReaderT @ GHC.Types.IO
                                                  @ r
                                                  v
  = Language.PureScript.Interactive.Completion.$s$fApplicativeReaderT
      @ r
"SPEC/Language.PureScript.Interactive.Completion $fApplicativeReaderT_$c*> @ IO _" [orphan] forall @ r
                                                                                                   ($dApplicative :: GHC.Base.Applicative
                                                                                                                       GHC.Types.IO)
  Control.Monad.Trans.Reader.$fApplicativeReaderT_$c*> @ GHC.Types.IO
                                                       @ r
                                                       $dApplicative
  = Language.PureScript.Interactive.Completion.$s$fApplicativeReaderT_$s$fApplicativeReaderT_$c*>
      @ r
"SPEC/Language.PureScript.Interactive.Completion $fApplicativeReaderT_$c<* @ IO _" [orphan] forall @ r
                                                                                                   ($dApplicative :: GHC.Base.Applicative
                                                                                                                       GHC.Types.IO)
  Control.Monad.Trans.Reader.$fApplicativeReaderT_$c<* @ GHC.Types.IO
                                                       @ r
                                                       $dApplicative
  = Language.PureScript.Interactive.Completion.$s$fApplicativeReaderT_$s$fApplicativeReaderT_$c<*
      @ r
"SPEC/Language.PureScript.Interactive.Completion $fApplicativeReaderT_$c<*> @ IO _" [orphan] forall @ r
                                                                                                    ($dApplicative :: GHC.Base.Applicative
                                                                                                                        GHC.Types.IO)
  Control.Monad.Trans.Reader.$fApplicativeReaderT_$c<*> @ GHC.Types.IO
                                                        @ r
                                                        $dApplicative
  = Language.PureScript.Interactive.Completion.$s$fApplicativeReaderT_$s$fApplicativeReaderT_$c<*>
      @ r
"SPEC/Language.PureScript.Interactive.Completion $fFunctorReaderT @ IO _" [orphan] forall @ r
                                                                                          (v :: GHC.Base.Functor
                                                                                                  GHC.Types.IO)
  Control.Monad.Trans.Reader.$fFunctorReaderT @ GHC.Types.IO @ r v
  = Language.PureScript.Interactive.Completion.$s$fApplicativeReaderT_$s$fFunctorReaderT
      @ r
"SPEC/Language.PureScript.Interactive.Completion $fFunctorReaderT_$c<$ @ IO _" [orphan] forall @ r
                                                                                               ($dFunctor :: GHC.Base.Functor
                                                                                                               GHC.Types.IO)
  Control.Monad.Trans.Reader.$fFunctorReaderT_$c<$ @ GHC.Types.IO
                                                   @ r
                                                   $dFunctor
  = Language.PureScript.Interactive.Completion.$s$fApplicativeReaderT_$s$fFunctorReaderT_$c<$
      @ r
"SPEC/Language.PureScript.Interactive.Completion $fFunctorReaderT_$cfmap @ IO _" [orphan] forall @ r
                                                                                                 ($dFunctor :: GHC.Base.Functor
                                                                                                                 GHC.Types.IO)
  Control.Monad.Trans.Reader.$fFunctorReaderT_$cfmap @ GHC.Types.IO
                                                     @ r
                                                     $dFunctor
  = Language.PureScript.Interactive.Completion.$s$fApplicativeReaderT_$s$fFunctorReaderT_$cfmap
      @ r
"SPEC/Language.PureScript.Interactive.Completion $fMonadIOReaderT @ IO _" [orphan] forall @ r
                                                                                          (v :: Control.Monad.IO.Class.MonadIO
                                                                                                  GHC.Types.IO)
  Control.Monad.Trans.Reader.$fMonadIOReaderT @ GHC.Types.IO @ r v
  = Language.PureScript.Interactive.Completion.$s$fMonadIOReaderT @ r
"SPEC/Language.PureScript.Interactive.Completion $fMonadReaderT @ IO _" [orphan] forall @ r
                                                                                        (v :: GHC.Base.Monad
                                                                                                GHC.Types.IO)
  Control.Monad.Trans.Reader.$fMonadReaderT @ GHC.Types.IO @ r v
  = Language.PureScript.Interactive.Completion.$s$fMonadIOReaderT_$s$fMonadReaderT
      @ r
"SPEC/Language.PureScript.Interactive.Completion $fMonadReaderT_$c>>= @ IO _" [orphan] forall @ r
                                                                                              ($dMonad :: GHC.Base.Monad
                                                                                                            GHC.Types.IO)
  Control.Monad.Trans.Reader.$fMonadReaderT_$c>>= @ GHC.Types.IO
                                                  @ r
                                                  $dMonad
  = Language.PureScript.Interactive.Completion.$s$fMonadIOReaderT_$s$fMonadReaderT_$c>>=
      @ r
"SPEC/Language.PureScript.Interactive.Completion $fMonadReaderT_$cfail @ IO _" [orphan] forall @ r
                                                                                               ($dMonad :: GHC.Base.Monad
                                                                                                             GHC.Types.IO)
  Control.Monad.Trans.Reader.$fMonadReaderT_$cfail @ GHC.Types.IO
                                                   @ r
                                                   $dMonad
  = Language.PureScript.Interactive.Completion.$s$fMonadIOReaderT_$s$fMonadReaderT_$cfail
      @ r
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

