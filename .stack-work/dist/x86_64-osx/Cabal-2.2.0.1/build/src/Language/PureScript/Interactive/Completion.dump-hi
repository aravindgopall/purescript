
==================== FINAL INTERFACE ====================
2018-11-30 20:48:04.30729 UTC

interface purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Interactive.Completion 8043
  interface hash: 176c470b76ac3f7c5d65be83c1b0ef60
  ABI hash: 524618b1515a6d351aa35c62eb5d336b
  export-list hash: 043e50d84e51660200a2d9598accf1eb
  orphan hash: 37b0964b6c8f00e40b6a231f186df7ee
  flag hash: 6b91193d6f95e3c74259a28b4bb30bdf
  opt_hash: 2c98c95d41c045ae9c2fb565ec8aabc6
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Language.PureScript.Interactive.Completion.completion
  Language.PureScript.Interactive.Completion.completion'
  Language.PureScript.Interactive.Completion.formatCompletions
  Language.PureScript.Interactive.Completion.liftCompletionM
  Language.PureScript.Interactive.Completion.CompletionM
module dependencies: Control.Monad.Logger Control.Monad.Supply
                     Control.Monad.Supply.Class Language.PureScript
                     Language.PureScript.AST Language.PureScript.AST.Binders
                     Language.PureScript.AST.Declarations
                     Language.PureScript.AST.Exported Language.PureScript.AST.Literals
                     Language.PureScript.AST.Operators Language.PureScript.AST.SourcePos
                     Language.PureScript.AST.Traversals Language.PureScript.Bundle
                     Language.PureScript.CodeGen.JS
                     Language.PureScript.CodeGen.JS.Common
                     Language.PureScript.CodeGen.JS.Printer Language.PureScript.Comments
                     Language.PureScript.Constants Language.PureScript.CoreFn
                     Language.PureScript.CoreFn.Ann Language.PureScript.CoreFn.Binders
                     Language.PureScript.CoreFn.Desugar Language.PureScript.CoreFn.Expr
                     Language.PureScript.CoreFn.Meta Language.PureScript.CoreFn.Module
                     Language.PureScript.CoreFn.Optimizer
                     Language.PureScript.CoreFn.ToJSON
                     Language.PureScript.CoreFn.Traversals
                     Language.PureScript.CoreImp.AST
                     Language.PureScript.CoreImp.Optimizer
                     Language.PureScript.CoreImp.Optimizer.Blocks
                     Language.PureScript.CoreImp.Optimizer.Common
                     Language.PureScript.CoreImp.Optimizer.Inliner
                     Language.PureScript.CoreImp.Optimizer.MagicDo
                     Language.PureScript.CoreImp.Optimizer.TCO
                     Language.PureScript.CoreImp.Optimizer.Unused
                     Language.PureScript.Crash Language.PureScript.Environment
                     Language.PureScript.Errors Language.PureScript.Externs
                     Language.PureScript.Interactive.Directive
                     Language.PureScript.Interactive.Types Language.PureScript.Kinds
                     Language.PureScript.Label Language.PureScript.Linter
                     Language.PureScript.Linter.Exhaustive
                     Language.PureScript.Linter.Imports Language.PureScript.Make
                     Language.PureScript.Make.Actions Language.PureScript.Make.BuildPlan
                     Language.PureScript.Make.Monad
                     Language.PureScript.ModuleDependencies Language.PureScript.Names
                     Language.PureScript.Options Language.PureScript.PSString
                     Language.PureScript.Parser Language.PureScript.Parser.Common
                     Language.PureScript.Parser.Declarations
                     Language.PureScript.Parser.Kinds Language.PureScript.Parser.Lexer
                     Language.PureScript.Parser.State Language.PureScript.Parser.Types
                     Language.PureScript.Pretty Language.PureScript.Pretty.Common
                     Language.PureScript.Pretty.Kinds Language.PureScript.Pretty.Types
                     Language.PureScript.Pretty.Values
                     Language.PureScript.Publish.BoxesHelpers
                     Language.PureScript.Renamer Language.PureScript.Sugar
                     Language.PureScript.Sugar.AdoNotation
                     Language.PureScript.Sugar.BindingGroups
                     Language.PureScript.Sugar.CaseDeclarations
                     Language.PureScript.Sugar.DoNotation
                     Language.PureScript.Sugar.LetPattern
                     Language.PureScript.Sugar.Names
                     Language.PureScript.Sugar.Names.Common
                     Language.PureScript.Sugar.Names.Env
                     Language.PureScript.Sugar.Names.Exports
                     Language.PureScript.Sugar.Names.Imports
                     Language.PureScript.Sugar.ObjectWildcards
                     Language.PureScript.Sugar.Operators
                     Language.PureScript.Sugar.Operators.Binders
                     Language.PureScript.Sugar.Operators.Common
                     Language.PureScript.Sugar.Operators.Expr
                     Language.PureScript.Sugar.Operators.Types
                     Language.PureScript.Sugar.TypeClasses
                     Language.PureScript.Sugar.TypeClasses.Deriving
                     Language.PureScript.Sugar.TypeDeclarations
                     Language.PureScript.Traversals Language.PureScript.TypeChecker
                     Language.PureScript.TypeChecker.Entailment
                     Language.PureScript.TypeChecker.Kinds
                     Language.PureScript.TypeChecker.Monad
                     Language.PureScript.TypeChecker.Skolems
                     Language.PureScript.TypeChecker.Subsumption
                     Language.PureScript.TypeChecker.Synonyms
                     Language.PureScript.TypeChecker.TypeSearch
                     Language.PureScript.TypeChecker.Types
                     Language.PureScript.TypeChecker.Unify
                     Language.PureScript.TypeClassDictionaries Language.PureScript.Types
                     Paths_purescript
package dependencies: aeson-1.3.1.1 aeson-better-errors-0.9.1.0
                      ansi-terminal-0.8.0.4 array-0.5.2.0 async-2.2.1 attoparsec-0.13.2.2
                      base-4.11.1.0 base-compat-0.10.4 binary-0.8.5.1
                      blaze-builder-0.4.1.0 boxes-0.1.5 bytestring-0.10.8.2 colour-2.3.4
                      containers-0.5.11.0 data-ordlist-0.4.7.0 deepseq-1.4.3.0
                      directory-1.3.1.5 dlist-0.8.0.4 filepath-1.4.2 ghc-boot-th-8.4.3
                      ghc-prim-0.5.2.0 hashable-1.2.7.0 haskeline-0.7.4.3
                      integer-gmp-1.0.2.0 integer-logarithms-1.0.2.1
                      language-javascript-0.6.0.11 lifted-base-0.2.3.12 microlens-0.4.9.1
                      microlens-ghc-0.4.9 microlens-mtl-0.1.11.1
                      microlens-platform-0.3.10 microlens-th-0.4.2.1
                      monad-control-1.0.2.3 mtl-2.2.2 parallel-3.2.1.1 parsec-3.1.13.0
                      pattern-arrows-0.0.2 pretty-1.1.3.6 primitive-0.6.3.0
                      protolude-0.2.2 random-1.1 safe-0.3.17 scientific-0.3.6.2
                      sourcemap-0.1.6 split-0.2.3.3 stm-2.4.5.0 syb-0.7 tagged-0.8.5
                      template-haskell-2.13.0.0 terminfo-0.4.1.1 text-1.2.3.0
                      th-abstraction-0.2.8.0 time-1.8.0.2 time-locale-compat-0.1.1.4
                      transformers-0.5.5.0 transformers-base-0.4.5.2 unix-2.7.2.2
                      unordered-containers-0.2.9.0 utf8-string-1.0.1.1 uuid-types-1.0.3
                      vector-0.12.0.1
orphans: microlens-platform-0.3.10:Lens.Micro.Platform
         microlens-ghc-0.4.9:Lens.Micro.GHC syb-0.7:Data.Generics.Instances
         colour-2.3.4:Data.Colour
         attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         vector-0.12.0.1:Data.Vector.Unboxed
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.0:Data.Text.Lazy
         vector-0.12.0.1:Data.Vector.Fusion.Bundle text-1.2.3.0:Data.Text
         binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         stm-2.4.5.0:Control.Monad.STM
         transformers-0.5.5.0:Control.Monad.Trans.Error
         base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: aeson-1.3.1.1:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.Graph
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         dlist-0.8.0.4:Data.DList ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         microlens-0.4.9.1:Lens.Micro.Internal
                         microlens-ghc-0.4.9:Lens.Micro.GHC
                         microlens-mtl-0.1.11.1:Lens.Micro.Mtl.Internal
                         microlens-platform-0.3.10:Lens.Micro.Platform
                         monad-control-1.0.2.3:Control.Monad.Trans.Control
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Control.Monad.Logger
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.AST.Declarations
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.AST.Operators
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.AST.SourcePos
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Environment
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Kinds
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Label
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Make.Monad
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Names
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.PSString
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.TypeClassDictionaries
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Types
                         tagged-0.8.5:Data.Tagged
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
                         th-abstraction-0.2.8.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  base-4.11.1.0:Control.Monad.IO.Class 96109c36cb3c919872278540487fa39e
import  -/  base-4.11.1.0:Data.Either 39d922b371c4c52d426e9ee66de8371a
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.Functor f522c3501272159820fd6f242510732f
import  -/  base-4.11.1.0:Data.List 83dc843e47bfc0c5af51e19c6f3476d5
import  -/  base-4.11.1.0:Data.Maybe 409c3da2b142470b68be39ce1d97a9f7
import  -/  base-4.11.1.0:Data.OldList 1b35aa3c6805ff7c8887a35a866fe006
import  -/  base-4.11.1.0:Data.Traversable 7ad4edb9184ea1ae8e73f6b94f115c8c
import  -/  base-4.11.1.0:Data.Tuple 3af66f3ac61ed95ba8a3a3f68ebc5003
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-compat-0.10.4:Prelude.Compat bb6796186ed35a1d09dc34362a3fc27e
import  -/  containers-0.5.11.0:Data.Map 0dbdaec812ef695a364aa6c69e7f7d53
import  -/  containers-0.5.11.0:Data.Map.Internal 0150e210d0ae8df0f3a0669d5e32d8fa
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  haskeline-0.7.4.3:System.Console.Haskeline c3a206239edcfaa31c60fa8750a015f7
import  -/  haskeline-0.7.4.3:System.Console.Haskeline.Completion 7742937bebf679235bc2a7f6289815bd
import  -/  mtl-2.2.2:Control.Monad.State.Class acc76e93f44ac4486524db1a327e0a0a
import  -/  protolude-0.2.2:Protolude 2c2d16096c8a60f59f646a3b93b0eb7b
import  -/  protolude-0.2.2:Protolude.List 3a80368167450d7a4360ebf1ea443345
import  -/  Language.PureScript 055283757289375c92e0f1e11d744c0e
  exports: 01fc85db00ce4cf253ba5c16e07330e5
import  -/  Language.PureScript.AST.Declarations 568e046fbf27b243bfc96f09017d4782
  Module 7cf4b96f7d4b51b446726a099ab87bb6
  getModuleName 578b1d81b22244b5aeca14680df8f57d
import  -/  Language.PureScript.Interactive.Directive db12e918fb0cb1e9e071d5ffe955200a
  exports: bc9bf0665b5d50838e9e9b8e0bd63992
  directiveStringsFor f91cb195e50c767ebbd7c7367e47815c
  directivesFor f5a1b40a50d445ddcc341c6bc6f74519
import  -/  Language.PureScript.Interactive.Types 3ce82c8ef1b298c922daa3739e0e39a4
  exports: 720882d0a070fd7ca0bf1b7bc77c153a
  Browse d3b8549ef24bee7ebe65cb38eb17335e
  Directive 6d04fdb5e26b466ffd22b01b64e3342d
  Kind 6fe4acd55dfa7ab7ae53d80844953cb1
  PSCiState f802fa09b94f8d7be8d3d7d42508ed4f
  Show 712f875a45ac39da1020f17d29de0109
  Type 4b419e10e321de3d96c8a0004a82d2f6
  psciExports 49de8076178644440a52845dfb56ea90
  psciImports 89b802f8a95122de853dd26c101509bd
  psciLoadedExterns 3e2267ddb1449aa03ec020531a8a9e91
  replQueryStrings 5e2085733802f5d9257bec4ae11aaa0e
import  -/  Language.PureScript.Names b3bf151840f3e8f2eb61eff186432886
  runModuleName e07c63fa3ece350e6976663ef993edbb
  runOpName 1522672b880b192c6e05e6cf8a45712d
  runProperName 29f101e190cc99df85623423972e606f
  showIdent 5c662c2cc0373f386893e9287ea83382
  showQualified 3c507c3595affc1e0cc61d34a906a736
import  -/  Language.PureScript.Sugar.Names.Env 86ed82ed542c248a8928297b6b346572
  exportedTypeOps 2212f1aeac86faa420eb4b44c2cc2982
  exportedTypes 2212f1aeac86faa420eb4b44c2cc2982
  exportedValueOps 2212f1aeac86faa420eb4b44c2cc2982
  exportedValues 2212f1aeac86faa420eb4b44c2cc2982
  importedDataConstructors b53ca872c8c47c3d8839f496fc15c222
  importedTypeOps b53ca872c8c47c3d8839f496fc15c222
  importedTypes b53ca872c8c47c3d8839f496fc15c222
  importedValueOps b53ca872c8c47c3d8839f496fc15c222
  importedValues b53ca872c8c47c3d8839f496fc15c222
import  -/  text-1.2.3.0:Data.Text 7daa7e6c9b39d8cc1679e5ec5c64d2be
import  -/  text-1.2.3.0:Data.Text.Show 3b4b6fb2985a731022d67f636682da2b
import  -/  transformers-0.5.5.0:Control.Monad.Trans.Reader 42962052353a5a0f766912058b765b5d
692a1d6383cbbe66edd0122963ce42b0
  $fShowCompletionContext ::
    GHC.Show.Show
      Language.PureScript.Interactive.Completion.CompletionContext
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Interactive.Completion.CompletionContext
                  Language.PureScript.Interactive.Completion.$fShowCompletionContext_$cshowsPrec
                  Language.PureScript.Interactive.Completion.$fShowCompletionContext_$cshow
                  Language.PureScript.Interactive.Completion.$fShowCompletionContext_$cshowList -}
692a1d6383cbbe66edd0122963ce42b0
  $fShowCompletionContext1 ::
    Language.PureScript.Interactive.Completion.CompletionContext
    -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (Language.PureScript.Interactive.Completion.$fShowCompletionContext_$cshowsPrec
                   Language.PureScript.Interactive.Completion.$fShowCompletionContext2) -}
acc4fe1f64e093e3dc9804337686f555
  $fShowCompletionContext10 :: [GHC.Types.Char]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.$fShow(,)3
                   (GHC.Types.[] @ GHC.Types.Char)) -}
0c1d50e44110ad4d073dbca2fc80c976
  $fShowCompletionContext11 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("CtxDirective "#) -}
ee2ba5fc194a849965cf879b130cce41
  $fShowCompletionContext2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
5c360a13916bf2fb092f411111cc5afc
  $fShowCompletionContext3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("CtxFixed "#) -}
b53a7d2ed6c3bb8c33d38a721973d96e
  $fShowCompletionContext4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("CtxType "#) -}
a608425dfe34893b337c270be5f6bd4d
  $fShowCompletionContext5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Interactive.Completion.$fShowCompletionContext6) -}
1fd557c59d0d211201bb1104de38fa24
  $fShowCompletionContext6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("CtxIdentifier"#) -}
da3c620c850eabbef79f03cb64e3ab8b
  $fShowCompletionContext7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Interactive.Completion.$fShowCompletionContext8) -}
14f9631cc2cb12549db9c877800e69d4
  $fShowCompletionContext8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("CtxModule"#) -}
4b54afc29e8d1c40a289dc758a42583f
  $fShowCompletionContext9 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("CtxFilePath "#) -}
692a1d6383cbbe66edd0122963ce42b0
  $fShowCompletionContext_$cshow ::
    Language.PureScript.Interactive.Completion.CompletionContext
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: Language.PureScript.Interactive.Completion.CompletionContext) ->
                 case x of wild {
                   Language.PureScript.Interactive.Completion.CtxDirective b1
                   -> GHC.CString.unpackAppendCString#
                        Language.PureScript.Interactive.Completion.$fShowCompletionContext11
                        (GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.$fShow(,)3
                           (GHC.Show.showLitString
                              b1
                              Language.PureScript.Interactive.Completion.$fShowCompletionContext10))
                   Language.PureScript.Interactive.Completion.CtxFilePath b1
                   -> GHC.CString.unpackAppendCString#
                        Language.PureScript.Interactive.Completion.$fShowCompletionContext9
                        (GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.$fShow(,)3
                           (GHC.Show.showLitString
                              b1
                              Language.PureScript.Interactive.Completion.$fShowCompletionContext10))
                   Language.PureScript.Interactive.Completion.CtxModule
                   -> Language.PureScript.Interactive.Completion.$fShowCompletionContext7
                   Language.PureScript.Interactive.Completion.CtxIdentifier
                   -> Language.PureScript.Interactive.Completion.$fShowCompletionContext5
                   Language.PureScript.Interactive.Completion.CtxType b1
                   -> GHC.CString.unpackAppendCString#
                        Language.PureScript.Interactive.Completion.$fShowCompletionContext4
                        (GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.$fShow(,)3
                           (GHC.Show.showLitString
                              b1
                              Language.PureScript.Interactive.Completion.$fShowCompletionContext10))
                   Language.PureScript.Interactive.Completion.CtxFixed b1
                   -> GHC.CString.unpackAppendCString#
                        Language.PureScript.Interactive.Completion.$fShowCompletionContext3
                        (GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.$fShow(,)3
                           (GHC.Show.showLitString
                              b1
                              Language.PureScript.Interactive.Completion.$fShowCompletionContext10)) }) -}
692a1d6383cbbe66edd0122963ce42b0
  $fShowCompletionContext_$cshowList ::
    [Language.PureScript.Interactive.Completion.CompletionContext]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Interactive.Completion.CompletionContext])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Interactive.Completion.CompletionContext
                   Language.PureScript.Interactive.Completion.$fShowCompletionContext1
                   ls
                   s) -}
692a1d6383cbbe66edd0122963ce42b0
  $fShowCompletionContext_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Interactive.Completion.CompletionContext
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,1*U(U)><S,1*U><L,U> -}
54a96d4ef7a3e99b64762796a0211254
  $s$fApplicativeReaderT ::
    GHC.Base.Applicative
      (Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ r.
                  @ (Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO)
                  (Language.PureScript.Interactive.Completion.$s$fApplicativeReaderT_$s$fFunctorReaderT
                     @ r)
                  (\ @ a (x :: a) ->
                   let {
                     m1 :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
                       {- Arity: 1 -}
                     = \ (s :: GHC.Prim.State# GHC.Prim.RealWorld) -> (# s, x #)
                   } in
                   (\ (ds :: r) -> m1)
                     `cast`
                   ((<r>_R
                     ->_R Sym (GHC.Types.N:IO[0]
                                   <a>_R)) ; Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                      <*>_N <r>_R <GHC.Types.IO>_R <a>_N)))
                  (Language.PureScript.Interactive.Completion.$s$fApplicativeReaderT_$s$fApplicativeReaderT_$c<*>
                     @ r)
                  (Control.Monad.Trans.Reader.$fApplicativeReaderT_$cliftA2
                     @ GHC.Types.IO
                     @ r
                     GHC.Base.$fApplicativeIO)
                  (Language.PureScript.Interactive.Completion.$s$fApplicativeReaderT_$s$fApplicativeReaderT_$c*>
                     @ r)
                  (Language.PureScript.Interactive.Completion.$s$fApplicativeReaderT_$s$fApplicativeReaderT_$c<*
                     @ r) -}
c184f02760ea35a130f1dd7a3327d94c
  $s$fApplicativeReaderT_$s$fApplicativeReaderT_$c*> ::
    Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a
    -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b
    -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S(SL))),1*C1(C1(U(U,A)))><L,1*C1(C1(U(U,U)))><L,U><S,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ r
                   @ a
                   @ b
                   (u :: Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a)
                   (v :: Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b)
                   (r1 :: r)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (u `cast`
                       (Control.Monad.Trans.Reader.N:ReaderT[0]
                            <*>_N <r>_R <GHC.Types.IO>_R <a>_N)
                         r1)
                        `cast`
                      (GHC.Types.N:IO[0] <a>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 (v `cast`
                  (Control.Monad.Trans.Reader.N:ReaderT[0]
                       <*>_N <r>_R <GHC.Types.IO>_R <b>_N)
                    r1)
                   `cast`
                 (GHC.Types.N:IO[0] <b>_R)
                   ipv })
                  `cast`
                (forall (r :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a>_R
                 ->_R <Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b>_R
                 ->_R (<r>_R
                       ->_R Sym (GHC.Types.N:IO[0]
                                     <b>_R)) ; Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                        <*>_N <r>_R <GHC.Types.IO>_R <b>_N)) -}
f2bbe08c229c2e6f3c9fdd01da178b4d
  $s$fApplicativeReaderT_$s$fApplicativeReaderT_$c<* ::
    Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a
    -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b
    -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S(SL))),1*C1(C1(U(U,U)))><L,1*C1(C1(U(U,A)))><L,U><S,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ r
                   @ a
                   @ b
                   (u :: Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a)
                   (v :: Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b)
                   (r1 :: r)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (u `cast`
                       (Control.Monad.Trans.Reader.N:ReaderT[0]
                            <*>_N <r>_R <GHC.Types.IO>_R <a>_N)
                         r1)
                        `cast`
                      (GHC.Types.N:IO[0] <a>_R)
                        s of ds { (#,#) ipv ipv1 ->
                 case (v `cast`
                       (Control.Monad.Trans.Reader.N:ReaderT[0]
                            <*>_N <r>_R <GHC.Types.IO>_R <b>_N)
                         r1)
                        `cast`
                      (GHC.Types.N:IO[0] <b>_R)
                        ipv of ds1 { (#,#) ipv2 ipv3 ->
                 (# ipv2, ipv1 #) } })
                  `cast`
                (forall (r :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a>_R
                 ->_R <Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b>_R
                 ->_R (<r>_R
                       ->_R Sym (GHC.Types.N:IO[0]
                                     <a>_R)) ; Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                        <*>_N <r>_R <GHC.Types.IO>_R <a>_N)) -}
0fbd1003e0cd046edaaf3f201548753c
  $s$fApplicativeReaderT_$s$fApplicativeReaderT_$c<*> ::
    Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO (a -> b)
    -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a
    -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S(SL))),1*C1(C1(U(U,1*C1(U))))><L,1*C1(C1(U(U,U)))><L,U><S,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ r
                   @ a
                   @ b
                   (f1 :: Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO (a -> b))
                   (v :: Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a)
                   (r1 :: r)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (f1
                         `cast`
                       (Control.Monad.Trans.Reader.N:ReaderT[0]
                            <*>_N <r>_R <GHC.Types.IO>_R <a -> b>_N)
                         r1)
                        `cast`
                      (GHC.Types.N:IO[0] <a -> b>_R)
                        s of ds { (#,#) ipv ipv1 ->
                 case (v `cast`
                       (Control.Monad.Trans.Reader.N:ReaderT[0]
                            <*>_N <r>_R <GHC.Types.IO>_R <a>_N)
                         r1)
                        `cast`
                      (GHC.Types.N:IO[0] <a>_R)
                        ipv of ds1 { (#,#) ipv2 ipv3 ->
                 (# ipv2, ipv1 ipv3 #) } })
                  `cast`
                (forall (r :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO (a -> b)>_R
                 ->_R <Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a>_R
                 ->_R (<r>_R
                       ->_R Sym (GHC.Types.N:IO[0]
                                     <b>_R)) ; Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                        <*>_N <r>_R <GHC.Types.IO>_R <b>_N)) -}
92055464d1fb0b2799de8543a7e494d8
  $s$fApplicativeReaderT_$s$fFunctorReaderT ::
    GHC.Base.Functor
      (Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ r.
                  @ (Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO)
                  (Language.PureScript.Interactive.Completion.$s$fApplicativeReaderT_$s$fFunctorReaderT_$cfmap
                     @ r)
                  (Language.PureScript.Interactive.Completion.$s$fApplicativeReaderT_$s$fFunctorReaderT_$c<$
                     @ r) -}
fcaaf7150162b4c77352592c9474631d
  $s$fApplicativeReaderT_$s$fFunctorReaderT_$c<$ ::
    a
    -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b
    -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U><C(C(S(SL))),1*C1(C1(U(U,A)))><L,U><S,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ r
                   @ a
                   @ b
                   (x :: a)
                   (v :: Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b)
                   (x1 :: r)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (v `cast`
                       (Control.Monad.Trans.Reader.N:ReaderT[0]
                            <*>_N <r>_R <GHC.Types.IO>_R <b>_N)
                         x1)
                        `cast`
                      (GHC.Types.N:IO[0] <b>_R)
                        eta1 of ds { (#,#) ipv ipv1 ->
                 (# ipv, x #) })
                  `cast`
                (forall (r :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <a>_R
                 ->_R <Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b>_R
                 ->_R (<r>_R
                       ->_R Sym (GHC.Types.N:IO[0]
                                     <a>_R)) ; Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                        <*>_N <r>_R <GHC.Types.IO>_R <a>_N)) -}
efdede5f74fed7d632b7eca1ffdbb720
  $s$fApplicativeReaderT_$s$fFunctorReaderT_$cfmap ::
    (a -> b)
    -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a
    -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*C1(U)><C(C(S(SL))),1*C1(C1(U(U,U)))><L,U><S,U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ r @ a @ b (f1 :: a -> b) ->
                 Control.Monad.Trans.Reader.mapReaderT
                   @ *
                   @ *
                   @ GHC.Types.IO
                   @ a
                   @ GHC.Types.IO
                   @ b
                   @ r
                   (GHC.Base.$fFunctorIO2 @ a @ b f1)
                     `cast`
                   (<GHC.Types.IO a>_R ->_R Sym (GHC.Types.N:IO[0] <b>_R))) -}
a902df174dc51cfa143d730709e66efa
  $s$fMonadIOReaderT ::
    Control.Monad.IO.Class.MonadIO
      (Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ r.
                  @ (Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO)
                  (Language.PureScript.Interactive.Completion.$s$fMonadIOReaderT_$s$fMonadReaderT
                     @ r)
                  (\ @ a (x :: GHC.Types.IO a) (ds :: r) -> x)
                    `cast`
                  (forall (a :: <*>_N).
                   <GHC.Types.IO a>_R
                   ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                 <*>_N <r>_R <GHC.Types.IO>_R <a>_N)) -}
9427271f00d2b508e63fbfe0ab9b3ee9
  $s$fMonadIOReaderT_$s$fMonadReaderT ::
    GHC.Base.Monad (Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ r.
                  @ (Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO)
                  (Language.PureScript.Interactive.Completion.$s$fApplicativeReaderT
                     @ r)
                  (Language.PureScript.Interactive.Completion.$s$fMonadIOReaderT_$s$fMonadReaderT_$c>>=
                     @ r)
                  (Language.PureScript.Interactive.Completion.$s$fApplicativeReaderT_$s$fApplicativeReaderT_$c*>
                     @ r)
                  (\ @ a (eta :: a) ->
                   let {
                     m1 :: GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
                       {- Arity: 1 -}
                     = \ (s :: GHC.Prim.State# GHC.Prim.RealWorld) -> (# s, eta #)
                   } in
                   (\ (ds :: r) -> m1)
                     `cast`
                   ((<r>_R
                     ->_R Sym (GHC.Types.N:IO[0]
                                   <a>_R)) ; Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                      <*>_N <r>_R <GHC.Types.IO>_R <a>_N)))
                  (Language.PureScript.Interactive.Completion.$s$fMonadIOReaderT_$s$fMonadReaderT_$cfail
                     @ r) -}
ffccfa77b93be73c4742ccf2513ffa1d
  $s$fMonadIOReaderT_$s$fMonadReaderT_$c>>= ::
    Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a
    -> (a -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b)
    -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S(SL))),1*C1(C1(U(U,U)))><L,1*C1(C1(C1(U(U,U))))><L,U><S,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ r
                   @ a
                   @ b
                   (m1 :: Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a)
                   (k :: a -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b)
                   (r1 :: r)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (m1
                         `cast`
                       (Control.Monad.Trans.Reader.N:ReaderT[0]
                            <*>_N <r>_R <GHC.Types.IO>_R <a>_N)
                         r1)
                        `cast`
                      (GHC.Types.N:IO[0] <a>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 ((k ipv1)
                    `cast`
                  (Control.Monad.Trans.Reader.N:ReaderT[0]
                       <*>_N <r>_R <GHC.Types.IO>_R <b>_N)
                    r1)
                   `cast`
                 (GHC.Types.N:IO[0] <b>_R)
                   ipv })
                  `cast`
                (forall (r :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a>_R
                 ->_R <a -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO b>_R
                 ->_R (<r>_R
                       ->_R Sym (GHC.Types.N:IO[0]
                                     <b>_R)) ; Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                        <*>_N <r>_R <GHC.Types.IO>_R <b>_N)) -}
5347650829627669a979e47bbb1a2b97
  $s$fMonadIOReaderT_$s$fMonadReaderT_$cfail ::
    GHC.Base.String
    -> Control.Monad.Trans.Reader.ReaderT r GHC.Types.IO a
  {- Arity: 1, Strictness: <L,U>, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ r @ a (msg :: GHC.Base.String) ->
                 let {
                   m1 :: GHC.Types.IO a
                   = GHC.Magic.noinline
                       @ (forall a1. [GHC.Types.Char] -> GHC.Types.IO a1)
                       GHC.IO.failIO1
                         `cast`
                       (forall (a1 :: <*>_N).
                        <GHC.Base.String>_R ->_R Sym (GHC.Types.N:IO[0] <a1>_R))
                       @ a
                       msg
                 } in
                 (\ (ds :: r) -> m1)
                   `cast`
                 (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                           <*>_N <r>_R <GHC.Types.IO>_R <a>_N))) -}
34730f2395812f1b6ce152ef099074db
  $tc'CtxDirective :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7934387600440483057##
                   281330806248997095##
                   Language.PureScript.Interactive.Completion.$trModule
                   Language.PureScript.Interactive.Completion.$tc'CtxDirective2
                   0#
                   Language.PureScript.Interactive.Completion.$tc'CtxDirective1) -}
368010141070e3a1d1c44dae4ce1fe0a
  $tc'CtxDirective1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
ae1a17b78206d4242fec16367fadbf74
  $tc'CtxDirective2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Completion.$tc'CtxDirective3) -}
89927c0f23965c3ca646f80a1e8a029d
  $tc'CtxDirective3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'CtxDirective"#) -}
c5fc52a2d54110ba6db1ccc25a60bd5e
  $tc'CtxFilePath :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   109491929543104249##
                   10133796455170187558##
                   Language.PureScript.Interactive.Completion.$trModule
                   Language.PureScript.Interactive.Completion.$tc'CtxFilePath1
                   0#
                   Language.PureScript.Interactive.Completion.$tc'CtxDirective1) -}
f262a5541f817288158d099773230bc4
  $tc'CtxFilePath1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Completion.$tc'CtxFilePath2) -}
422f8bc2eeab2b1b24ea73c1a8fa42c5
  $tc'CtxFilePath2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'CtxFilePath"#) -}
a578deca1e591c04a33cfd7bff43b0f0
  $tc'CtxFixed :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4751427314528360653##
                   2147215261216060532##
                   Language.PureScript.Interactive.Completion.$trModule
                   Language.PureScript.Interactive.Completion.$tc'CtxFixed1
                   0#
                   Language.PureScript.Interactive.Completion.$tc'CtxDirective1) -}
adb4fbd8606cd27c17eec9006da95224
  $tc'CtxFixed1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Completion.$tc'CtxFixed2) -}
c96ddc5dab9683e9b0ef475498936d25
  $tc'CtxFixed2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'CtxFixed"#) -}
cb6f089369e80fcb61c0ea97f91ae7d6
  $tc'CtxIdentifier :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1599461756587585238##
                   7056517850012675808##
                   Language.PureScript.Interactive.Completion.$trModule
                   Language.PureScript.Interactive.Completion.$tc'CtxIdentifier2
                   0#
                   Language.PureScript.Interactive.Completion.$tc'CtxIdentifier1) -}
808d1c40cbda32b77b4a91131578dac1
  $tc'CtxIdentifier1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
399581b5a9e36f0dc9d2ff980ca0d82b
  $tc'CtxIdentifier2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Completion.$tc'CtxIdentifier3) -}
e746717d2d5f8bb39b41f04e620473c6
  $tc'CtxIdentifier3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'CtxIdentifier"#) -}
a641395800096ecc0afd79411fe3009a
  $tc'CtxModule :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13484447927964594932##
                   1621352997654934338##
                   Language.PureScript.Interactive.Completion.$trModule
                   Language.PureScript.Interactive.Completion.$tc'CtxModule1
                   0#
                   Language.PureScript.Interactive.Completion.$tc'CtxIdentifier1) -}
7e1577bfc06bb7362f093b61f14e00aa
  $tc'CtxModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Completion.$tc'CtxModule2) -}
eac6d6c05fb0a47ab2a6c35c037dc250
  $tc'CtxModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'CtxModule"#) -}
8676ec80ba3738d34d97b89f0b0d606d
  $tc'CtxType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17608761790409939145##
                   2139944827454655857##
                   Language.PureScript.Interactive.Completion.$trModule
                   Language.PureScript.Interactive.Completion.$tc'CtxType1
                   0#
                   Language.PureScript.Interactive.Completion.$tc'CtxDirective1) -}
7a4dce3478fa8e93c3166d942d370d92
  $tc'CtxType1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Completion.$tc'CtxType2) -}
fc09c4f94bdca5b991b0f0eb9ea1c6d2
  $tc'CtxType2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'CtxType"#) -}
f11b9697ce35b28bce6b197ee0852c6b
  $tcCompletionContext :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14289541096190707383##
                   12059580337394742336##
                   Language.PureScript.Interactive.Completion.$trModule
                   Language.PureScript.Interactive.Completion.$tcCompletionContext1
                   0#
                   GHC.Types.krep$*) -}
175c1a9d347ea1e8affef72a27aef2e5
  $tcCompletionContext1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Completion.$tcCompletionContext2) -}
63f8c9697b67718299a30639d45f48bb
  $tcCompletionContext2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("CompletionContext"#) -}
5c4924f9b4c967af8729474dd2bfb25e
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Language.PureScript.Interactive.Completion.$trModule3
                   Language.PureScript.Interactive.Completion.$trModule1) -}
7755d29755a712c538f14e19703ab77f
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Completion.$trModule2) -}
545b9ec8e55deb5b2d400efcf3c8818f
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Language.PureScript.Interactive.Completion"#) -}
88ad46493746a6be685af9ff58f81244
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Interactive.Completion.$trModule4) -}
494a8f27f2f3888a9a81f2fb89fd5acd
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"#) -}
2cc8aa3cf6461b3e32c7f9ed4017b7d1
  $wformatCompletions ::
    GHC.Base.String
    -> [System.Console.Haskeline.Completion.Completion]
    -> [GHC.Base.String]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.String)
                   (ww1 :: [System.Console.Haskeline.Completion.Completion]) ->
                 let {
                   lvl16 :: [GHC.Types.Char]
                   = GHC.List.reverse1
                       @ GHC.Types.Char
                       ww
                       (GHC.Types.[] @ GHC.Types.Char)
                 } in
                 GHC.Base.map
                   @ System.Console.Haskeline.Completion.Completion
                   @ [GHC.Types.Char]
                   (\ (x :: System.Console.Haskeline.Completion.Completion) ->
                    GHC.Base.++
                      @ GHC.Types.Char
                      lvl16
                      (case x of wild { System.Console.Haskeline.Completion.Completion ds1 ds2 ds3 ->
                       ds1 }))
                   ww1) -}
692a1d6383cbbe66edd0122963ce42b0
  data CompletionContext
    = CtxDirective GHC.Base.String
    | CtxFilePath GHC.Base.String
    | CtxModule
    | CtxIdentifier
    | CtxType GHC.Base.String
    | CtxFixed GHC.Base.String
63554d6023096b7add387e29b8aa6861
  type CompletionM =
    Control.Monad.Trans.Reader.ReaderT
      Language.PureScript.Interactive.Types.PSCiState GHC.Types.IO
    :: * -> *
fac4e0adc7f07f0ddf81627e2c798c26
  completion ::
    (Control.Monad.State.Class.MonadState
       Language.PureScript.Interactive.Types.PSCiState m,
     Control.Monad.IO.Class.MonadIO m) =>
    System.Console.Haskeline.Completion.CompletionFunc m
  {- Arity: 3,
     Strictness: <S(S(LC(C(S))LLL)LLL),U(U(A,C(C1(U)),A,A,A),U,A,A)><L,U(A,C(U))><L,1*U(1*U,A)>,
     Unfolding: (\ @ m :: * -> *
                   ($dMonadState :: Control.Monad.State.Class.MonadState
                                      Language.PureScript.Interactive.Types.PSCiState m)
                   ($dMonadIO :: Control.Monad.IO.Class.MonadIO m)
                   (x :: (GHC.Base.String, GHC.Base.String)) ->
                 Language.PureScript.Interactive.Completion.liftCompletionM
                   @ m
                   @ (GHC.Base.String,
                      [System.Console.Haskeline.Completion.Completion])
                   $dMonadState
                   $dMonadIO
                   (case x of ww { (,) ww1 ww2 ->
                    System.Console.Haskeline.Completion.$wcompleteWordWithPrev
                      @ (Control.Monad.Trans.Reader.ReaderT
                           Language.PureScript.Interactive.Types.PSCiState GHC.Types.IO)
                      (Language.PureScript.Interactive.Completion.$s$fMonadIOReaderT_$s$fMonadReaderT
                         @ Language.PureScript.Interactive.Types.PSCiState)
                      (GHC.Base.Nothing @ GHC.Types.Char)
                      Language.PureScript.Interactive.Completion.completion1
                      Language.PureScript.Interactive.Completion.findCompletions
                      ww1 })) -}
e05293776bf2aebf3f5408dc17dac100
  completion' ::
    System.Console.Haskeline.Completion.CompletionFunc
      Language.PureScript.Interactive.Completion.CompletionM
  {- Arity: 1, Strictness: <S,1*U(1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (w4 :: (GHC.Base.String, GHC.Base.String)) ->
                 case w4 of ww { (,) ww1 ww2 ->
                 System.Console.Haskeline.Completion.$wcompleteWordWithPrev
                   @ (Control.Monad.Trans.Reader.ReaderT
                        Language.PureScript.Interactive.Types.PSCiState GHC.Types.IO)
                   (Language.PureScript.Interactive.Completion.$s$fMonadIOReaderT_$s$fMonadReaderT
                      @ Language.PureScript.Interactive.Types.PSCiState)
                   (GHC.Base.Nothing @ GHC.Types.Char)
                   Language.PureScript.Interactive.Completion.completion1
                   Language.PureScript.Interactive.Completion.findCompletions
                   ww1 }) -}
909f65d2e9035cf7caf8991910599cab
  completion1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Interactive.Completion.completion2) -}
d9a0eaabe15afda997032fca229f31f0
  completion2 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: (" \t\n\
                 \\r(["#) -}
98f909cf9131315769511bd9747b6218
  findCompletions ::
    GHC.Base.String
    -> GHC.Base.String
    -> Language.PureScript.Interactive.Completion.CompletionM
         [System.Console.Haskeline.Completion.Completion]
  {- Arity: 2, Strictness: <L,1*U><L,U> -}
c0c6b13ce9eadd9a04f029f6b42c535f
  formatCompletions ::
    (GHC.Base.String, [System.Console.Haskeline.Completion.Completion])
    -> [GHC.Base.String]
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(1*U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: (GHC.Base.String,
                          [System.Console.Haskeline.Completion.Completion])) ->
                 case w of ww { (,) ww1 ww2 ->
                 Language.PureScript.Interactive.Completion.$wformatCompletions
                   ww1
                   ww2 }) -}
984c74ca6fd69944e40196ed30c26c0e
  liftCompletionM ::
    (Control.Monad.State.Class.MonadState
       Language.PureScript.Interactive.Types.PSCiState m,
     Control.Monad.IO.Class.MonadIO m) =>
    Language.PureScript.Interactive.Completion.CompletionM a -> m a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S(LC(C(S))LLL)LLL),U(1*U(A,1*C1(C1(U)),A,A,A),1*U,A,A)><L,U(A,C(U))><L,C(U)>,
     Unfolding: (\ @ m :: * -> *
                   @ a
                   ($dMonadState :: Control.Monad.State.Class.MonadState
                                      Language.PureScript.Interactive.Types.PSCiState m)
                   ($dMonadIO :: Control.Monad.IO.Class.MonadIO m)
                   (eta :: Language.PureScript.Interactive.Completion.CompletionM
                             a) ->
                 GHC.Base.>>=
                   @ m
                   (Control.Monad.State.Class.$p1MonadState
                      @ Language.PureScript.Interactive.Types.PSCiState
                      @ m
                      $dMonadState)
                   @ Language.PureScript.Interactive.Types.PSCiState
                   @ a
                   (Control.Monad.State.Class.get
                      @ Language.PureScript.Interactive.Types.PSCiState
                      @ m
                      $dMonadState)
                   (\ (st :: Language.PureScript.Interactive.Types.PSCiState) ->
                    Control.Monad.IO.Class.liftIO
                      @ m
                      $dMonadIO
                      @ a
                      (eta
                         `cast`
                       (Control.Monad.Trans.Reader.N:ReaderT[0]
                            <*>_N
                            <Language.PureScript.Interactive.Types.PSCiState>_R
                            <GHC.Types.IO>_R
                            <a>_N)
                         st))) -}
instance GHC.Show.Show [Language.PureScript.Interactive.Completion.CompletionContext]
  = Language.PureScript.Interactive.Completion.$fShowCompletionContext
"SPEC/Language.PureScript.Interactive.Completion $fApplicativeReaderT @ IO _" [orphan] forall @ r
                                                                                              (v :: GHC.Base.Applicative
                                                                                                      GHC.Types.IO)
  Control.Monad.Trans.Reader.$fApplicativeReaderT @ GHC.Types.IO
                                                  @ r
                                                  v
  = Language.PureScript.Interactive.Completion.$s$fApplicativeReaderT
      @ r
"SPEC/Language.PureScript.Interactive.Completion $fApplicativeReaderT_$c*> @ IO _" [orphan] forall @ r
                                                                                                   ($dApplicative :: GHC.Base.Applicative
                                                                                                                       GHC.Types.IO)
  Control.Monad.Trans.Reader.$fApplicativeReaderT_$c*> @ GHC.Types.IO
                                                       @ r
                                                       $dApplicative
  = Language.PureScript.Interactive.Completion.$s$fApplicativeReaderT_$s$fApplicativeReaderT_$c*>
      @ r
"SPEC/Language.PureScript.Interactive.Completion $fApplicativeReaderT_$c<* @ IO _" [orphan] forall @ r
                                                                                                   ($dApplicative :: GHC.Base.Applicative
                                                                                                                       GHC.Types.IO)
  Control.Monad.Trans.Reader.$fApplicativeReaderT_$c<* @ GHC.Types.IO
                                                       @ r
                                                       $dApplicative
  = Language.PureScript.Interactive.Completion.$s$fApplicativeReaderT_$s$fApplicativeReaderT_$c<*
      @ r
"SPEC/Language.PureScript.Interactive.Completion $fApplicativeReaderT_$c<*> @ IO _" [orphan] forall @ r
                                                                                                    ($dApplicative :: GHC.Base.Applicative
                                                                                                                        GHC.Types.IO)
  Control.Monad.Trans.Reader.$fApplicativeReaderT_$c<*> @ GHC.Types.IO
                                                        @ r
                                                        $dApplicative
  = Language.PureScript.Interactive.Completion.$s$fApplicativeReaderT_$s$fApplicativeReaderT_$c<*>
      @ r
"SPEC/Language.PureScript.Interactive.Completion $fFunctorReaderT @ IO _" [orphan] forall @ r
                                                                                          (v :: GHC.Base.Functor
                                                                                                  GHC.Types.IO)
  Control.Monad.Trans.Reader.$fFunctorReaderT @ GHC.Types.IO @ r v
  = Language.PureScript.Interactive.Completion.$s$fApplicativeReaderT_$s$fFunctorReaderT
      @ r
"SPEC/Language.PureScript.Interactive.Completion $fFunctorReaderT_$c<$ @ IO _" [orphan] forall @ r
                                                                                               ($dFunctor :: GHC.Base.Functor
                                                                                                               GHC.Types.IO)
  Control.Monad.Trans.Reader.$fFunctorReaderT_$c<$ @ GHC.Types.IO
                                                   @ r
                                                   $dFunctor
  = Language.PureScript.Interactive.Completion.$s$fApplicativeReaderT_$s$fFunctorReaderT_$c<$
      @ r
"SPEC/Language.PureScript.Interactive.Completion $fFunctorReaderT_$cfmap @ IO _" [orphan] forall @ r
                                                                                                 ($dFunctor :: GHC.Base.Functor
                                                                                                                 GHC.Types.IO)
  Control.Monad.Trans.Reader.$fFunctorReaderT_$cfmap @ GHC.Types.IO
                                                     @ r
                                                     $dFunctor
  = Language.PureScript.Interactive.Completion.$s$fApplicativeReaderT_$s$fFunctorReaderT_$cfmap
      @ r
"SPEC/Language.PureScript.Interactive.Completion $fMonadIOReaderT @ IO _" [orphan] forall @ r
                                                                                          (v :: Control.Monad.IO.Class.MonadIO
                                                                                                  GHC.Types.IO)
  Control.Monad.Trans.Reader.$fMonadIOReaderT @ GHC.Types.IO @ r v
  = Language.PureScript.Interactive.Completion.$s$fMonadIOReaderT @ r
"SPEC/Language.PureScript.Interactive.Completion $fMonadReaderT @ IO _" [orphan] forall @ r
                                                                                        (v :: GHC.Base.Monad
                                                                                                GHC.Types.IO)
  Control.Monad.Trans.Reader.$fMonadReaderT @ GHC.Types.IO @ r v
  = Language.PureScript.Interactive.Completion.$s$fMonadIOReaderT_$s$fMonadReaderT
      @ r
"SPEC/Language.PureScript.Interactive.Completion $fMonadReaderT_$c>>= @ IO _" [orphan] forall @ r
                                                                                              ($dMonad :: GHC.Base.Monad
                                                                                                            GHC.Types.IO)
  Control.Monad.Trans.Reader.$fMonadReaderT_$c>>= @ GHC.Types.IO
                                                  @ r
                                                  $dMonad
  = Language.PureScript.Interactive.Completion.$s$fMonadIOReaderT_$s$fMonadReaderT_$c>>=
      @ r
"SPEC/Language.PureScript.Interactive.Completion $fMonadReaderT_$cfail @ IO _" [orphan] forall @ r
                                                                                               ($dMonad :: GHC.Base.Monad
                                                                                                             GHC.Types.IO)
  Control.Monad.Trans.Reader.$fMonadReaderT_$cfail @ GHC.Types.IO
                                                   @ r
                                                   $dMonad
  = Language.PureScript.Interactive.Completion.$s$fMonadIOReaderT_$s$fMonadReaderT_$cfail
      @ r
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

