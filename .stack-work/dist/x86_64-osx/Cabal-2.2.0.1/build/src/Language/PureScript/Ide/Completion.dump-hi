
==================== FINAL INTERFACE ====================
2019-01-24 14:17:56.07862 UTC

interface purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Ide.Completion 8043
  interface hash: 37549ca29f7b6c547408b1e7782aa67b
  ABI hash: 272946a4c81fac87f8e80f053300fdd8
  export-list hash: 9eb5f5ff96a863487609bcfa4bbf03f0
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 5ca2b6297314332f988f1cde11325eb2
  opt_hash: 2c98c95d41c045ae9c2fb565ec8aabc6
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Language.PureScript.Ide.Completion.applyCompletionOptions
  Language.PureScript.Ide.Completion.completionFromMatch
  Language.PureScript.Ide.Completion.defaultCompletionOptions
  Language.PureScript.Ide.Completion.getCompletions
  Language.PureScript.Ide.Completion.getExactCompletions
  Language.PureScript.Ide.Completion.getExactMatches
  Language.PureScript.Ide.Completion.simpleExport
  Language.PureScript.Ide.Completion.CompletionOptions{Language.PureScript.Ide.Completion.CompletionOptions coGroupReexports coMaxResults}
module dependencies: Control.Monad.Logger Control.Monad.Supply
                     Control.Monad.Supply.Class Language.PureScript
                     Language.PureScript.AST Language.PureScript.AST.Binders
                     Language.PureScript.AST.Declarations
                     Language.PureScript.AST.Exported Language.PureScript.AST.Literals
                     Language.PureScript.AST.Operators Language.PureScript.AST.SourcePos
                     Language.PureScript.AST.Traversals Language.PureScript.Bundle
                     Language.PureScript.CodeGen.JS
                     Language.PureScript.CodeGen.JS.Common
                     Language.PureScript.CodeGen.JS.Printer Language.PureScript.Comments
                     Language.PureScript.Constants Language.PureScript.CoreFn
                     Language.PureScript.CoreFn.Ann Language.PureScript.CoreFn.Binders
                     Language.PureScript.CoreFn.Desugar Language.PureScript.CoreFn.Expr
                     Language.PureScript.CoreFn.Meta Language.PureScript.CoreFn.Module
                     Language.PureScript.CoreFn.Optimizer
                     Language.PureScript.CoreFn.ToJSON
                     Language.PureScript.CoreFn.Traversals
                     Language.PureScript.CoreImp.AST
                     Language.PureScript.CoreImp.Optimizer
                     Language.PureScript.CoreImp.Optimizer.Blocks
                     Language.PureScript.CoreImp.Optimizer.Common
                     Language.PureScript.CoreImp.Optimizer.Inliner
                     Language.PureScript.CoreImp.Optimizer.MagicDo
                     Language.PureScript.CoreImp.Optimizer.TCO
                     Language.PureScript.CoreImp.Optimizer.Unused
                     Language.PureScript.Crash Language.PureScript.Environment
                     Language.PureScript.Errors Language.PureScript.Errors.JSON
                     Language.PureScript.Externs Language.PureScript.Ide.Error
                     Language.PureScript.Ide.Filter
                     Language.PureScript.Ide.Filter.Declaration
                     Language.PureScript.Ide.Logging Language.PureScript.Ide.Matcher
                     Language.PureScript.Ide.Types Language.PureScript.Ide.Util
                     Language.PureScript.Kinds Language.PureScript.Label
                     Language.PureScript.Linter Language.PureScript.Linter.Exhaustive
                     Language.PureScript.Linter.Imports Language.PureScript.Make
                     Language.PureScript.Make.Actions Language.PureScript.Make.BuildPlan
                     Language.PureScript.Make.Monad
                     Language.PureScript.ModuleDependencies Language.PureScript.Names
                     Language.PureScript.Options Language.PureScript.PSString
                     Language.PureScript.Parser Language.PureScript.Parser.Common
                     Language.PureScript.Parser.Declarations
                     Language.PureScript.Parser.Kinds Language.PureScript.Parser.Lexer
                     Language.PureScript.Parser.State Language.PureScript.Parser.Types
                     Language.PureScript.Pretty Language.PureScript.Pretty.Common
                     Language.PureScript.Pretty.Kinds Language.PureScript.Pretty.Types
                     Language.PureScript.Pretty.Values
                     Language.PureScript.Publish.BoxesHelpers
                     Language.PureScript.Renamer Language.PureScript.Sugar
                     Language.PureScript.Sugar.AdoNotation
                     Language.PureScript.Sugar.BindingGroups
                     Language.PureScript.Sugar.CaseDeclarations
                     Language.PureScript.Sugar.DoNotation
                     Language.PureScript.Sugar.LetPattern
                     Language.PureScript.Sugar.Names
                     Language.PureScript.Sugar.Names.Common
                     Language.PureScript.Sugar.Names.Env
                     Language.PureScript.Sugar.Names.Exports
                     Language.PureScript.Sugar.Names.Imports
                     Language.PureScript.Sugar.ObjectWildcards
                     Language.PureScript.Sugar.Operators
                     Language.PureScript.Sugar.Operators.Binders
                     Language.PureScript.Sugar.Operators.Common
                     Language.PureScript.Sugar.Operators.Expr
                     Language.PureScript.Sugar.Operators.Types
                     Language.PureScript.Sugar.TypeClasses
                     Language.PureScript.Sugar.TypeClasses.Deriving
                     Language.PureScript.Sugar.TypeDeclarations
                     Language.PureScript.Traversals Language.PureScript.TypeChecker
                     Language.PureScript.TypeChecker.Entailment
                     Language.PureScript.TypeChecker.Kinds
                     Language.PureScript.TypeChecker.Monad
                     Language.PureScript.TypeChecker.Skolems
                     Language.PureScript.TypeChecker.Subsumption
                     Language.PureScript.TypeChecker.Synonyms
                     Language.PureScript.TypeChecker.TypeSearch
                     Language.PureScript.TypeChecker.Types
                     Language.PureScript.TypeChecker.Unify
                     Language.PureScript.TypeClassDictionaries Language.PureScript.Types
                     Paths_purescript System.IO.UTF8
package dependencies: aeson-1.3.1.1 ansi-terminal-0.8.0.4
                      array-0.5.2.0 async-2.2.1 attoparsec-0.13.2.2 auto-update-0.1.4
                      base-4.11.1.0 base-compat-0.10.4 binary-0.8.5.1
                      blaze-builder-0.4.1.0 boxes-0.1.5 bytestring-0.10.8.2 clock-0.7.2
                      colour-2.3.4 conduit-1.3.0.3 conduit-extra-1.3.0
                      containers-0.5.11.0 data-ordlist-0.4.7.0 deepseq-1.4.3.0
                      directory-1.3.1.5 dlist-0.8.0.4 easy-file-0.2.2
                      edit-distance-0.2.2.1 exceptions-0.10.0 fast-logger-2.4.11
                      filepath-1.4.2 ghc-boot-th-8.4.3 ghc-prim-0.5.2.0 hashable-1.2.7.0
                      integer-gmp-1.0.2.0 integer-logarithms-1.0.2.1
                      language-javascript-0.6.0.11 lifted-base-0.2.3.12 microlens-0.4.9.1
                      microlens-ghc-0.4.9 microlens-mtl-0.1.11.1
                      microlens-platform-0.3.10 microlens-th-0.4.2.1
                      monad-control-1.0.2.3 monad-logger-0.3.28.5 monad-loops-0.4.3
                      mtl-2.2.2 old-locale-1.0.0.7 old-time-1.1.0.3 parallel-3.2.1.1
                      parsec-3.1.13.0 pattern-arrows-0.0.2 pretty-1.1.3.6
                      primitive-0.6.3.0 protolude-0.2.2 random-1.1 regex-base-0.93.2
                      regex-tdfa-1.2.3.1 resourcet-1.2.1 safe-0.3.17 scientific-0.3.6.2
                      sourcemap-0.1.6 split-0.2.3.3 stm-2.4.5.0 stm-chans-3.0.0.4
                      stringsearch-0.3.6.6 syb-0.7 tagged-0.8.5 template-haskell-2.13.0.0
                      text-1.2.3.0 th-abstraction-0.2.8.0 time-1.8.0.2
                      time-locale-compat-0.1.1.4 transformers-0.5.5.0
                      transformers-base-0.4.5.2 unix-2.7.2.2 unix-time-0.3.8
                      unliftio-core-0.1.1.0 unordered-containers-0.2.9.0
                      utf8-string-1.0.1.1 uuid-types-1.0.3 vector-0.12.0.1
orphans: regex-tdfa-1.2.3.1:Text.Regex.TDFA.ByteString
         regex-tdfa-1.2.3.1:Text.Regex.TDFA.ByteString.Lazy
         regex-tdfa-1.2.3.1:Text.Regex.TDFA.Sequence
         regex-tdfa-1.2.3.1:Text.Regex.TDFA.String
         regex-base-0.93.2:Text.Regex.Base.Context
         unix-time-0.3.8:Data.UnixTime.Diff syb-0.7:Data.Generics.Instances
         colour-2.3.4:Data.Colour stm-2.4.5.0:Control.Monad.STM
         attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         microlens-platform-0.3.10:Lens.Micro.Platform
         microlens-ghc-0.4.9:Lens.Micro.GHC
         hashable-1.2.7.0:Data.Hashable.Generic
         vector-0.12.0.1:Data.Vector.Unboxed
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.5.0:Control.Monad.Trans.Error
         text-1.2.3.0:Data.Text.Lazy text-1.2.3.0:Data.Text
         binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: aeson-1.3.1.1:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         clock-0.7.2:System.Clock
                         conduit-1.3.0.3:Data.Conduit.Internal.Conduit
                         conduit-1.3.0.3:Data.Conduit.Internal.Pipe
                         containers-0.5.11.0:Data.Graph
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         dlist-0.8.0.4:Data.DList ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         microlens-0.4.9.1:Lens.Micro.Internal
                         microlens-ghc-0.4.9:Lens.Micro.GHC
                         microlens-mtl-0.1.11.1:Lens.Micro.Mtl.Internal
                         microlens-platform-0.3.10:Lens.Micro.Platform
                         monad-control-1.0.2.3:Control.Monad.Trans.Control
                         monad-logger-0.3.28.5:Control.Monad.Logger
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Control.Monad.Logger
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.Declarations
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.Operators
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.SourcePos
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Comments
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Environment
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Ide.Types
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Kinds
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Label
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Make.Monad
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Names
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.PSString
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.TypeClassDictionaries
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Types
                         resourcet-1.2.1:Control.Monad.Trans.Resource.Internal
                         tagged-0.8.5:Data.Tagged
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
                         th-abstraction-0.2.8.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  aeson-1.3.1.1:Data.Aeson 108dfb08de41cf77aad4693ac1dc3d44
import  -/  aeson-1.3.1.1:Data.Aeson.Types.FromJSON 1ea0c919856f0d29f12e53cd074d532c
import  -/  base-4.11.1.0:Data.Bifunctor a977586bad544f929bb5bc7f139aaa1c
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.Function 6e6aae9442025aeeb92a909c1bbc3fca
import  -/  base-4.11.1.0:Data.Functor f522c3501272159820fd6f242510732f
import  -/  base-4.11.1.0:Data.Maybe 409c3da2b142470b68be39ce1d97a9f7
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  containers-0.5.11.0:Data.Map 0dbdaec812ef695a364aa6c69e7f7d53
import  -/  containers-0.5.11.0:Data.Map.Internal 0150e210d0ae8df0f3a0669d5e32d8fa
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  microlens-0.4.9.1:Lens.Micro 962434009a31a5b07a9c325f04604c4d
import  -/  microlens-platform-0.3.10:Lens.Micro.Platform 0a8b1a3c754e3254d224cc9602b42f64
import  -/  protolude-0.2.2:Protolude 2c2d16096c8a60f59f646a3b93b0eb7b
import  -/  Language.PureScript 4a24ccd892adbf021daf2410ebd61e22
  exports: 139dcaa90af8ddcee6aa0492159f351d
import  -/  Language.PureScript.AST.Operators 615a873c5f62908f354b9d4840cbeb63
  Infix acee26fe4e59790dddcfdcb22d39c630
  Infixl 7a053ccfe48a809d0f2fd5ed84616765
  Infixr bbdac94db5d55a0387eb84cc7a57bedf
import  -/  Language.PureScript.Ide.Error b6eb0f8da112a6cbb4342061d1afef05
  exports: 618489d4d27b48ee8032da6edee10f0b
  prettyPrintTypeSingleLine bb416f1287f34931eb661b96b50eefcf
import  -/  Language.PureScript.Ide.Filter cfa1ebda6f0a8830c8c60e4462bab1ef
  exports: 346bf0e54a9a4816ea444c922e0ed4be
  Filter c4b7c89a6bcd0c21f2097e0bb7c93686
  applyFilters 0633c3ced31d3cf568d6ab54fd3fa291
  equalityFilter 43cd7e4cc0fab8e603590d14c4e9231d
import  -/  Language.PureScript.Ide.Matcher 5dff0aaebf270c984c3b36d5a920daee
  exports: 7e2a060070b4bb90c4378be98bb4f379
  Matcher 1f44fbd6c3952871236a12c94b19d1ea
  runMatcher aa4d1e07c9d72b61d95ee6b2248103a8
import  -/  Language.PureScript.Ide.Types 4bb81e9de3788f7f63a68a23e190eb73
  exports: e5ee4d37ef25d4dfedd36ea1d435a17a
  Completion 8516aef71676dd56642f7ff0d91a2145
  Completion 4b4d2eb10040d397c113a23d1ee3051f
  IdeDeclDataConstructor 8fce6bf53fa94a19e0d601b21857c083
  IdeDeclKind eadccdfcdc773a4889209905550631de
  IdeDeclType bf6a01d2f64dd736d0c0838c335e1f4d
  IdeDeclTypeClass daec5de1fc0811383493f72c17859b3c
  IdeDeclTypeOperator 942a106238947e7cdd45b0c72cd2559c
  IdeDeclTypeSynonym f16924e305412463e9d0339a34821aa8
  IdeDeclValue cff86d395b09e6db0f9fde8980f34310
  IdeDeclValueOperator 30db1956e4e27b3074312970c743db17
  IdeDeclarationAnn 1d5bc37494f0e43867ff35908b352362
  IdeDeclarationAnn b02d1e3d0d65a3bc0459005430392eb1
  IdeNamespace a433d742d266c5a84cd109a4a3bf8314
  IdeTypeOperator b9ef5dd7b6d30d2a7b873b7446e96d66
  IdeValueOperator aefb3dc42069d55d1ef6f5ca52aa3016
  Match 243377b70a0acc6a1f90cc91f4dfdeba
  Match fb37c344e14b1371a6bc8438855d851a
  _annDocumentation b02d1e3d0d65a3bc0459005430392eb1
  _annLocation b02d1e3d0d65a3bc0459005430392eb1
  _annTypeAnnotation b02d1e3d0d65a3bc0459005430392eb1
  annExportedFrom 1a728ad6f0d92c8e64b52b01be9afcbb
  complDocumentation 4b4d2eb10040d397c113a23d1ee3051f
  complExpandedType 4b4d2eb10040d397c113a23d1ee3051f
  complExportedFrom 4b4d2eb10040d397c113a23d1ee3051f
  complIdentifier 4b4d2eb10040d397c113a23d1ee3051f
  complLocation 4b4d2eb10040d397c113a23d1ee3051f
  complModule 4b4d2eb10040d397c113a23d1ee3051f
  complType 4b4d2eb10040d397c113a23d1ee3051f
  idaAnnotation 0fdfd8b35ab07c15de959e014e8b293c
  ideDtorName f5cb16b133f56c5181009aa7f78d9703
  ideDtorType 39d15c8ff3b20d67ac734f8d16472e8c
  ideSynonymName dba058d7cc24bbf5f5716fc90da609d5
  ideSynonymType eb7e9815ca9a6fb050c3562bfd884f48
  ideTCKind 474100277ac9c9c30997b77bff07c34c
  ideTCName 6707b0fb5bd9d8aacf896d456424bf01
  ideTypeKind 6702fd04c337d07b067bd4d1673884df
  ideTypeName 102b07c9135d8fc8731c934f05b32722
  ideValueIdent e8d6898aa2565d8b04f5faf56de63fbb
  ideValueType 1bd8bbfe4d021fa85d0c2b7ac126a976
import  -/  Language.PureScript.Ide.Util 23feade20e7d884b8e398315c4ffa11e
  exports: b783a834cebd9a63a606ae4111317a86
  identT dcd564adce62283fa7a9b3c22bf893ce
  identifierFromIdeDeclaration d3020ece8f1e881771f78c7f6ed69758
  namespaceForDeclaration 118407e31332438e83d40344230582f8
  properNameT e4d3618214ff774dcbb219a8feb710a8
  typeOperatorAliasT 7ec9a1d0a4d6371fdacfa5c7b8291c41
  valueOperatorAliasT 2b58245662f3e76a76ba5ed13b0d0223
import  -/  Language.PureScript.Names 00f694509122478d97b327fbbccae327
  ModuleName 1b2ddf0c04464d2fa2588925f10c1966
  runModuleName 58b788b37f600c0f34fa85241d7748ad
  runOpName 9af301165f72160425c5e0dde6525338
  runProperName a7268334e0b909381550b9329cb80fcc
import  -/  Language.PureScript.Pretty.Kinds 1231cbf0b1be99cf8261312fb9302146
  prettyPrintKind f60a6c7beaabc8993b1df72e46c79d4c
import  -/  text-1.2.3.0:Data.Text 7daa7e6c9b39d8cc1679e5ec5c64d2be
import  -/  text-1.2.3.0:Data.Text.Internal 30a0a123f71f63b26cd34c6b24f23411
503b28cdae99a5aaa945c47f74fa5a9d
  $fEqNamespaced ::
    GHC.Classes.Eq a =>
    GHC.Classes.Eq (Language.PureScript.Ide.Completion.Namespaced a)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Classes.Eq a).
                  @ (Language.PureScript.Ide.Completion.Namespaced a)
                  (Language.PureScript.Ide.Completion.$fEqNamespaced_$c== @ a v)
                  (Language.PureScript.Ide.Completion.$fEqNamespaced_$c/= @ a v) -}
503b28cdae99a5aaa945c47f74fa5a9d
  $fEqNamespaced_$c/= ::
    GHC.Classes.Eq a =>
    Language.PureScript.Ide.Completion.Namespaced a
    -> Language.PureScript.Ide.Completion.Namespaced a
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S(SL),1*U(1*U,U)><S(SL),1*U(1*U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ a
                   ($dEq :: GHC.Classes.Eq a)
                   (x :: Language.PureScript.Ide.Completion.Namespaced a)
                   (y :: Language.PureScript.Ide.Completion.Namespaced a) ->
                 case Language.PureScript.Ide.Completion.$fEqNamespaced_$c==
                        @ a
                        $dEq
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
503b28cdae99a5aaa945c47f74fa5a9d
  $fEqNamespaced_$c== ::
    GHC.Classes.Eq a =>
    Language.PureScript.Ide.Completion.Namespaced a
    -> Language.PureScript.Ide.Completion.Namespaced a
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S(SL),1*U(1*U,U)><S(SL),1*U(1*U,U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: GHC.Classes.Eq a)
                   (w1 :: Language.PureScript.Ide.Completion.Namespaced a)
                   (w2 :: Language.PureScript.Ide.Completion.Namespaced a) ->
                 case w1 of ww { Language.PureScript.Ide.Completion.Namespaced ww1 ww2 ->
                 case w2 of ww3 { Language.PureScript.Ide.Completion.Namespaced ww4 ww5 ->
                 Language.PureScript.Ide.Completion.$w$c==
                   @ a
                   w
                   ww1
                   ww2
                   ww4
                   ww5 } }) -}
503b28cdae99a5aaa945c47f74fa5a9d
  $fEqNamespaced_$s$c/= ::
    Language.PureScript.Ide.Completion.Namespaced
      Data.Text.Internal.Text
    -> Language.PureScript.Ide.Completion.Namespaced
         Data.Text.Internal.Text
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U(U,U,U))><S(SL),1*U(1*U,1*U(U,U,U))>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Ide.Completion.Namespaced
                           Data.Text.Internal.Text)
                   (y :: Language.PureScript.Ide.Completion.Namespaced
                           Data.Text.Internal.Text) ->
                 case x of wild { Language.PureScript.Ide.Completion.Namespaced a1 a2 ->
                 case y of wild1 { Language.PureScript.Ide.Completion.Namespaced b1 b2 ->
                 case a1 of wild2 {
                   Language.PureScript.Ide.Types.IdeNSValue
                   -> case b1 of wild3 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.Ide.Types.IdeNSValue
                        -> case a2 of wild4 { Data.Text.Internal.Text dt dt1 dt2 ->
                           case b2 of wild5 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                           case GHC.Classes.eqInt
                                  (GHC.Types.I# dt2)
                                  (GHC.Types.I# dt5) of wild6 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True
                             -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.ByteArray#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.State# GHC.Prim.RealWorld
                                                               -> (# GHC.Prim.State#
                                                                       GHC.Prim.RealWorld,
                                                                     GHC.Prim.Int# #)}
                                       dt
                                       (GHC.Prim.int2Word# dt1)
                                       dt3
                                       (GHC.Prim.int2Word# dt4)
                                       (GHC.Prim.int2Word# dt2)
                                       GHC.Prim.realWorld# of wild7 { (#,#) ds2 ds3 ->
                                case GHC.Int.eqInt32
                                       (GHC.Int.I32# (GHC.Prim.narrow32Int# ds3))
                                       (GHC.Int.I32# 0#) of wild8 {
                                  GHC.Types.False -> GHC.Types.True
                                  GHC.Types.True -> GHC.Types.False } } } } } }
                   Language.PureScript.Ide.Types.IdeNSType
                   -> case b1 of wild3 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.Ide.Types.IdeNSType
                        -> case a2 of wild4 { Data.Text.Internal.Text dt dt1 dt2 ->
                           case b2 of wild5 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                           case GHC.Classes.eqInt
                                  (GHC.Types.I# dt2)
                                  (GHC.Types.I# dt5) of wild6 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True
                             -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.ByteArray#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.State# GHC.Prim.RealWorld
                                                               -> (# GHC.Prim.State#
                                                                       GHC.Prim.RealWorld,
                                                                     GHC.Prim.Int# #)}
                                       dt
                                       (GHC.Prim.int2Word# dt1)
                                       dt3
                                       (GHC.Prim.int2Word# dt4)
                                       (GHC.Prim.int2Word# dt2)
                                       GHC.Prim.realWorld# of wild7 { (#,#) ds2 ds3 ->
                                case GHC.Int.eqInt32
                                       (GHC.Int.I32# (GHC.Prim.narrow32Int# ds3))
                                       (GHC.Int.I32# 0#) of wild8 {
                                  GHC.Types.False -> GHC.Types.True
                                  GHC.Types.True -> GHC.Types.False } } } } } }
                   Language.PureScript.Ide.Types.IdeNSKind
                   -> case b1 of wild3 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.Ide.Types.IdeNSKind
                        -> case a2 of wild4 { Data.Text.Internal.Text dt dt1 dt2 ->
                           case b2 of wild5 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                           case GHC.Classes.eqInt
                                  (GHC.Types.I# dt2)
                                  (GHC.Types.I# dt5) of wild6 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True
                             -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.ByteArray#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.State# GHC.Prim.RealWorld
                                                               -> (# GHC.Prim.State#
                                                                       GHC.Prim.RealWorld,
                                                                     GHC.Prim.Int# #)}
                                       dt
                                       (GHC.Prim.int2Word# dt1)
                                       dt3
                                       (GHC.Prim.int2Word# dt4)
                                       (GHC.Prim.int2Word# dt2)
                                       GHC.Prim.realWorld# of wild7 { (#,#) ds2 ds3 ->
                                case GHC.Int.eqInt32
                                       (GHC.Int.I32# (GHC.Prim.narrow32Int# ds3))
                                       (GHC.Int.I32# 0#) of wild8 {
                                  GHC.Types.False -> GHC.Types.True
                                  GHC.Types.True -> GHC.Types.False } } } } } } } } }) -}
503b28cdae99a5aaa945c47f74fa5a9d
  $fEqNamespaced_$s$c== ::
    Language.PureScript.Ide.Completion.Namespaced
      Data.Text.Internal.Text
    -> Language.PureScript.Ide.Completion.Namespaced
         Data.Text.Internal.Text
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U(U,U,U))><S(SL),1*U(1*U,1*U(U,U,U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Completion.Namespaced
                           Data.Text.Internal.Text)
                   (w1 :: Language.PureScript.Ide.Completion.Namespaced
                            Data.Text.Internal.Text) ->
                 case w of ww { Language.PureScript.Ide.Completion.Namespaced ww1 ww2 ->
                 case w1 of ww3 { Language.PureScript.Ide.Completion.Namespaced ww4 ww5 ->
                 Language.PureScript.Ide.Completion.$w$s$c== ww1 ww2 ww4 ww5 } }) -}
503b28cdae99a5aaa945c47f74fa5a9d
  $fEqNamespaced_$s$fEqNamespaced ::
    GHC.Classes.Eq
      (Language.PureScript.Ide.Completion.Namespaced
         Data.Text.Internal.Text)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Ide.Completion.Namespaced
                       Data.Text.Internal.Text)
                  Language.PureScript.Ide.Completion.$fEqNamespaced_$s$c==
                  Language.PureScript.Ide.Completion.$fEqNamespaced_$s$c/= -}
c8878fc5aee3f7b44d602425f6793e59
  $fFromJSONCompletionOptions ::
    Data.Aeson.Types.FromJSON.FromJSON
      Language.PureScript.Ide.Completion.CompletionOptions
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Completion.CompletionOptions
                  Language.PureScript.Ide.Completion.$fFromJSONCompletionOptions_$cparseJSON
                  Language.PureScript.Ide.Completion.$fFromJSONCompletionOptions_$cparseJSONList -}
b4633d2811b314768c07f3818f7071dd
  $fFromJSONCompletionOptions1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (", encountered "#) -}
b8180e0ae63d313614a481f655ed6e80
  $fFromJSONCompletionOptions2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("[a]"#) -}
373328ef513b325212d81ce5d2100e93
  $fFromJSONCompletionOptions3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("expected "#) -}
c8878fc5aee3f7b44d602425f6793e59
  $fFromJSONCompletionOptions4 ::
    Data.Aeson.Types.Internal.Object
    -> Data.Aeson.Types.Internal.Parser
         Language.PureScript.Ide.Completion.CompletionOptions
  {- Arity: 1, Strictness: <L,U> -}
fb93303a695f6b39e1d531e7a59f2879
  $fFromJSONCompletionOptions5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Ide.Completion.$fFromJSONCompletionOptions6) -}
558d07aba458cdaf7e4a810d216bcbf6
  $fFromJSONCompletionOptions6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("CompletionOptions"#) -}
c8878fc5aee3f7b44d602425f6793e59
  $fFromJSONCompletionOptions_$cparseJSON ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         Language.PureScript.Ide.Completion.CompletionOptions
  {- Arity: 1,
     Unfolding: (Data.Aeson.Types.FromJSON.withObject
                   @ Language.PureScript.Ide.Completion.CompletionOptions
                   Language.PureScript.Ide.Completion.$fFromJSONCompletionOptions5
                   Language.PureScript.Ide.Completion.$fFromJSONCompletionOptions4) -}
c8878fc5aee3f7b44d602425f6793e59
  $fFromJSONCompletionOptions_$cparseJSONList ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         [Language.PureScript.Ide.Completion.CompletionOptions]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Data.Aeson.Types.Internal.Value) ->
                 case ds of wild {
                   DEFAULT
                   -> let {
                        msg19 :: GHC.Base.String
                        = GHC.CString.unpackAppendCString#
                            Language.PureScript.Ide.Completion.$fFromJSONCompletionOptions3
                            (GHC.CString.unpackAppendCString#
                               Language.PureScript.Ide.Completion.$fFromJSONCompletionOptions2
                               (GHC.CString.unpackAppendCString#
                                  Language.PureScript.Ide.Completion.$fFromJSONCompletionOptions1
                                  (case wild of wild1 {
                                     Data.Aeson.Types.Internal.Object ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList10
                                     Data.Aeson.Types.Internal.String ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList8
                                     Data.Aeson.Types.Internal.Number ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList6
                                     Data.Aeson.Types.Internal.Bool ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList4
                                     Data.Aeson.Types.Internal.Null
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList1 })))
                      } in
                      (\ @ f4 :: * -> *
                         @ r
                         (path :: Data.Aeson.Types.Internal.JSONPath)
                         (kf :: Data.Aeson.Types.Internal.Failure f4 r)
                         (_ks :: Data.Aeson.Types.Internal.Success
                                   [Language.PureScript.Ide.Completion.CompletionOptions] f4 r) ->
                       kf
                         (GHC.List.reverse @ Data.Aeson.Types.Internal.JSONPathElement path)
                         msg19)
                        `cast`
                      (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                <[Language.PureScript.Ide.Completion.CompletionOptions]>_R))
                   Data.Aeson.Types.Internal.Array a2
                   -> case a2 of wild1 { Data.Vector.Vector dt dt1 dt2 ->
                      letrec {
                        $wgo1 :: GHC.Prim.Int# -> [Data.Aeson.Types.Internal.Value]
                          {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                        = \ (ww :: GHC.Prim.Int#) ->
                          case GHC.Prim.>=# ww dt1 of lwild {
                            DEFAULT
                            -> case GHC.Prim.indexArray#
                                      @ Data.Aeson.Types.Internal.Value
                                      dt2
                                      (GHC.Prim.+# dt ww) of ds3 { Unit# ipv ->
                               GHC.Types.:
                                 @ Data.Aeson.Types.Internal.Value
                                 ipv
                                 ($wgo1 (GHC.Prim.+# ww 1#)) }
                            1# -> GHC.Types.[] @ Data.Aeson.Types.Internal.Value }
                      } in
                      Language.PureScript.Ide.Completion.$fFromJSONCompletionOptions_go
                        0#
                        ($wgo1 0#) } }) -}
c8878fc5aee3f7b44d602425f6793e59
  $fFromJSONCompletionOptions_go ::
    GHC.Prim.Int#
    -> [Data.Aeson.Types.Internal.Value]
    -> Data.Aeson.Types.Internal.Parser
         [Language.PureScript.Ide.Completion.CompletionOptions]
  {- Arity: 2, Strictness: <L,U><S,1*U> -}
503b28cdae99a5aaa945c47f74fa5a9d
  $fOrdNamespaced ::
    GHC.Classes.Ord a =>
    GHC.Classes.Ord (Language.PureScript.Ide.Completion.Namespaced a)
  DFunId
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(1*U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Classes.Ord a).
                  @ (Language.PureScript.Ide.Completion.Namespaced a)
                  (Language.PureScript.Ide.Completion.$fOrdNamespaced_$cp1Ord @ a v)
                  (Language.PureScript.Ide.Completion.$fOrdNamespaced_$ccompare
                     @ a
                     v)
                  (Language.PureScript.Ide.Completion.$fOrdNamespaced_$c< @ a v)
                  (Language.PureScript.Ide.Completion.$fOrdNamespaced_$c<= @ a v)
                  (\ (a1 :: Language.PureScript.Ide.Completion.Namespaced a)
                     (b :: Language.PureScript.Ide.Completion.Namespaced a) ->
                   Language.PureScript.Ide.Completion.$fOrdNamespaced_$c< @ a v b a1)
                  (Language.PureScript.Ide.Completion.$fOrdNamespaced_$c>= @ a v)
                  (Language.PureScript.Ide.Completion.$fOrdNamespaced_$cmax @ a v)
                  (Language.PureScript.Ide.Completion.$fOrdNamespaced_$cmin @ a v) -}
503b28cdae99a5aaa945c47f74fa5a9d
  $fOrdNamespaced_$c< ::
    GHC.Classes.Ord a =>
    Language.PureScript.Ide.Completion.Namespaced a
    -> Language.PureScript.Ide.Completion.Namespaced a
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,A,1*C1(C1(U)),A,A,A,A,A)><S(SL),1*U(1*U,U)><S(SL),1*U(1*U,U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: GHC.Classes.Ord a)
                   (w1 :: Language.PureScript.Ide.Completion.Namespaced a)
                   (w2 :: Language.PureScript.Ide.Completion.Namespaced a) ->
                 case w1 of ww { Language.PureScript.Ide.Completion.Namespaced ww1 ww2 ->
                 case w2 of ww3 { Language.PureScript.Ide.Completion.Namespaced ww4 ww5 ->
                 Language.PureScript.Ide.Completion.$w$c<
                   @ a
                   w
                   ww1
                   ww2
                   ww4
                   ww5 } }) -}
503b28cdae99a5aaa945c47f74fa5a9d
  $fOrdNamespaced_$c<= ::
    GHC.Classes.Ord a =>
    Language.PureScript.Ide.Completion.Namespaced a
    -> Language.PureScript.Ide.Completion.Namespaced a
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,A,1*C1(C1(U)),A,A,A,A,A)><S(SL),1*U(1*U,U)><S(SL),1*U(1*U,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dOrd :: GHC.Classes.Ord a)
                   (a1 :: Language.PureScript.Ide.Completion.Namespaced a)
                   (b :: Language.PureScript.Ide.Completion.Namespaced a) ->
                 case Language.PureScript.Ide.Completion.$fOrdNamespaced_$c<
                        @ a
                        $dOrd
                        b
                        a1 of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
503b28cdae99a5aaa945c47f74fa5a9d
  $fOrdNamespaced_$c>= ::
    GHC.Classes.Ord a =>
    Language.PureScript.Ide.Completion.Namespaced a
    -> Language.PureScript.Ide.Completion.Namespaced a
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,A,1*C1(C1(U)),A,A,A,A,A)><S(SL),1*U(1*U,U)><S(SL),1*U(1*U,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dOrd :: GHC.Classes.Ord a)
                   (a1 :: Language.PureScript.Ide.Completion.Namespaced a)
                   (b :: Language.PureScript.Ide.Completion.Namespaced a) ->
                 case Language.PureScript.Ide.Completion.$fOrdNamespaced_$c<
                        @ a
                        $dOrd
                        a1
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
503b28cdae99a5aaa945c47f74fa5a9d
  $fOrdNamespaced_$ccompare ::
    GHC.Classes.Ord a =>
    Language.PureScript.Ide.Completion.Namespaced a
    -> Language.PureScript.Ide.Completion.Namespaced a
    -> GHC.Types.Ordering
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(C1(U)),A,A,A,A,A,A)><S(SL),1*U(1*U,U)><S(SL),1*U(1*U,U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: GHC.Classes.Ord a)
                   (w1 :: Language.PureScript.Ide.Completion.Namespaced a)
                   (w2 :: Language.PureScript.Ide.Completion.Namespaced a) ->
                 case w1 of ww { Language.PureScript.Ide.Completion.Namespaced ww1 ww2 ->
                 case w2 of ww3 { Language.PureScript.Ide.Completion.Namespaced ww4 ww5 ->
                 Language.PureScript.Ide.Completion.$w$ccompare
                   @ a
                   w
                   ww1
                   ww2
                   ww4
                   ww5 } }) -}
503b28cdae99a5aaa945c47f74fa5a9d
  $fOrdNamespaced_$cmax ::
    GHC.Classes.Ord a =>
    Language.PureScript.Ide.Completion.Namespaced a
    -> Language.PureScript.Ide.Completion.Namespaced a
    -> Language.PureScript.Ide.Completion.Namespaced a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,A,1*C1(C1(U)),A,A,A,A,A)><S(SL),1*U(U,U)><S(SL),1*U(U,U)>m,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dOrd :: GHC.Classes.Ord a)
                   (x :: Language.PureScript.Ide.Completion.Namespaced a)
                   (y :: Language.PureScript.Ide.Completion.Namespaced a) ->
                 case Language.PureScript.Ide.Completion.$fOrdNamespaced_$c<
                        @ a
                        $dOrd
                        y
                        x of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
503b28cdae99a5aaa945c47f74fa5a9d
  $fOrdNamespaced_$cmin ::
    GHC.Classes.Ord a =>
    Language.PureScript.Ide.Completion.Namespaced a
    -> Language.PureScript.Ide.Completion.Namespaced a
    -> Language.PureScript.Ide.Completion.Namespaced a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,A,1*C1(C1(U)),A,A,A,A,A)><S(SL),1*U(U,U)><S(SL),1*U(U,U)>m,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dOrd :: GHC.Classes.Ord a)
                   (x :: Language.PureScript.Ide.Completion.Namespaced a)
                   (y :: Language.PureScript.Ide.Completion.Namespaced a) ->
                 case Language.PureScript.Ide.Completion.$fOrdNamespaced_$c<
                        @ a
                        $dOrd
                        y
                        x of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
503b28cdae99a5aaa945c47f74fa5a9d
  $fOrdNamespaced_$cp1Ord ::
    GHC.Classes.Ord a =>
    GHC.Classes.Eq (Language.PureScript.Ide.Completion.Namespaced a)
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,1*U(1*U(C(C1(U)),A),A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ a ($dOrd :: GHC.Classes.Ord a) ->
                 Language.PureScript.Ide.Completion.$fEqNamespaced
                   @ a
                   (GHC.Classes.$p1Ord @ a $dOrd)) -}
503b28cdae99a5aaa945c47f74fa5a9d
  $fOrdNamespaced_$s$c< ::
    Language.PureScript.Ide.Completion.Namespaced
      Data.Text.Internal.Text
    -> Language.PureScript.Ide.Completion.Namespaced
         Data.Text.Internal.Text
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U(U,U,U))><S(SL),1*U(1*U,1*U(U,U,U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Completion.Namespaced
                           Data.Text.Internal.Text)
                   (w1 :: Language.PureScript.Ide.Completion.Namespaced
                            Data.Text.Internal.Text) ->
                 case w of ww { Language.PureScript.Ide.Completion.Namespaced ww1 ww2 ->
                 case w1 of ww3 { Language.PureScript.Ide.Completion.Namespaced ww4 ww5 ->
                 Language.PureScript.Ide.Completion.$w$s$c< ww1 ww2 ww4 ww5 } }) -}
cee45f4bf5832f82c7f74b5a7f6677ca
  $fOrdNamespaced_$s$c<= ::
    Language.PureScript.Ide.Completion.Namespaced
      Data.Text.Internal.Text
    -> Language.PureScript.Ide.Completion.Namespaced
         Data.Text.Internal.Text
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U(U,U,U))><S(SL),1*U(1*U,1*U(U,U,U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Completion.Namespaced
                           Data.Text.Internal.Text)
                   (w1 :: Language.PureScript.Ide.Completion.Namespaced
                            Data.Text.Internal.Text) ->
                 case w of ww { Language.PureScript.Ide.Completion.Namespaced ww1 ww2 ->
                 case w1 of ww3 { Language.PureScript.Ide.Completion.Namespaced ww4 ww5 ->
                 Language.PureScript.Ide.Completion.$w$s$c<= ww1 ww2 ww4 ww5 } }) -}
c3ce5daac604342a540fe38f704491f9
  $fOrdNamespaced_$s$c>= ::
    Language.PureScript.Ide.Completion.Namespaced
      Data.Text.Internal.Text
    -> Language.PureScript.Ide.Completion.Namespaced
         Data.Text.Internal.Text
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U(U,U,U))><S(SL),1*U(1*U,1*U(U,U,U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Completion.Namespaced
                           Data.Text.Internal.Text)
                   (w1 :: Language.PureScript.Ide.Completion.Namespaced
                            Data.Text.Internal.Text) ->
                 case w of ww { Language.PureScript.Ide.Completion.Namespaced ww1 ww2 ->
                 case w1 of ww3 { Language.PureScript.Ide.Completion.Namespaced ww4 ww5 ->
                 Language.PureScript.Ide.Completion.$w$s$c>= ww1 ww2 ww4 ww5 } }) -}
503b28cdae99a5aaa945c47f74fa5a9d
  $fOrdNamespaced_$s$ccompare ::
    Language.PureScript.Ide.Completion.Namespaced
      Data.Text.Internal.Text
    -> Language.PureScript.Ide.Completion.Namespaced
         Data.Text.Internal.Text
    -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U(U,U,U))><S(SL),1*U(1*U,1*U(U,U,U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Completion.Namespaced
                           Data.Text.Internal.Text)
                   (w1 :: Language.PureScript.Ide.Completion.Namespaced
                            Data.Text.Internal.Text) ->
                 case w of ww { Language.PureScript.Ide.Completion.Namespaced ww1 ww2 ->
                 case w1 of ww3 { Language.PureScript.Ide.Completion.Namespaced ww4 ww5 ->
                 Language.PureScript.Ide.Completion.$w$s$ccompare
                   ww1
                   ww2
                   ww4
                   ww5 } }) -}
09e9afe3e65eb55e1dd41252012f0394
  $fOrdNamespaced_$s$cmax ::
    Language.PureScript.Ide.Completion.Namespaced
      Data.Text.Internal.Text
    -> Language.PureScript.Ide.Completion.Namespaced
         Data.Text.Internal.Text
    -> Language.PureScript.Ide.Completion.Namespaced
         Data.Text.Internal.Text
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,U(U,U,U))><S(SL),1*U(1*U,U(U,U,U))>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Completion.Namespaced
                           Data.Text.Internal.Text)
                   (w1 :: Language.PureScript.Ide.Completion.Namespaced
                            Data.Text.Internal.Text) ->
                 case w of ww { Language.PureScript.Ide.Completion.Namespaced ww1 ww2 ->
                 case w1 of ww3 { Language.PureScript.Ide.Completion.Namespaced ww4 ww5 ->
                 case ww4 of wild {
                   Language.PureScript.Ide.Types.IdeNSValue
                   -> case ww1 of wild1 {
                        Language.PureScript.Ide.Types.IdeNSValue
                        -> case ww5 of ww6 { Data.Text.Internal.Text ww7 ww8 ww9 ->
                           case ww2 of ww10 { Data.Text.Internal.Text ww11 ww12 ww13 ->
                           case Data.Text.$w$ccompare ww7 ww8 ww9 ww11 ww12 ww13 of wild2 {
                             DEFAULT
                             -> Language.PureScript.Ide.Completion.Namespaced
                                  @ Data.Text.Internal.Text
                                  Language.PureScript.Ide.Types.IdeNSValue
                                  ww6
                             GHC.Types.LT
                             -> Language.PureScript.Ide.Completion.Namespaced
                                  @ Data.Text.Internal.Text
                                  Language.PureScript.Ide.Types.IdeNSValue
                                  ww10 } } }
                        Language.PureScript.Ide.Types.IdeNSType
                        -> Language.PureScript.Ide.Completion.Namespaced
                             @ Data.Text.Internal.Text
                             Language.PureScript.Ide.Types.IdeNSType
                             ww2
                        Language.PureScript.Ide.Types.IdeNSKind
                        -> Language.PureScript.Ide.Completion.Namespaced
                             @ Data.Text.Internal.Text
                             Language.PureScript.Ide.Types.IdeNSKind
                             ww2 }
                   Language.PureScript.Ide.Types.IdeNSType
                   -> case ww1 of wild1 {
                        Language.PureScript.Ide.Types.IdeNSValue
                        -> Language.PureScript.Ide.Completion.Namespaced
                             @ Data.Text.Internal.Text
                             Language.PureScript.Ide.Types.IdeNSType
                             ww5
                        Language.PureScript.Ide.Types.IdeNSType
                        -> case ww5 of ww6 { Data.Text.Internal.Text ww7 ww8 ww9 ->
                           case ww2 of ww10 { Data.Text.Internal.Text ww11 ww12 ww13 ->
                           case Data.Text.$w$ccompare ww7 ww8 ww9 ww11 ww12 ww13 of wild2 {
                             DEFAULT
                             -> Language.PureScript.Ide.Completion.Namespaced
                                  @ Data.Text.Internal.Text
                                  Language.PureScript.Ide.Types.IdeNSType
                                  ww6
                             GHC.Types.LT
                             -> Language.PureScript.Ide.Completion.Namespaced
                                  @ Data.Text.Internal.Text
                                  Language.PureScript.Ide.Types.IdeNSType
                                  ww10 } } }
                        Language.PureScript.Ide.Types.IdeNSKind
                        -> Language.PureScript.Ide.Completion.Namespaced
                             @ Data.Text.Internal.Text
                             Language.PureScript.Ide.Types.IdeNSKind
                             ww2 }
                   Language.PureScript.Ide.Types.IdeNSKind
                   -> case ww1 of wild1 {
                        DEFAULT
                        -> Language.PureScript.Ide.Completion.Namespaced
                             @ Data.Text.Internal.Text
                             Language.PureScript.Ide.Types.IdeNSKind
                             ww5
                        Language.PureScript.Ide.Types.IdeNSKind
                        -> case ww5 of ww6 { Data.Text.Internal.Text ww7 ww8 ww9 ->
                           case ww2 of ww10 { Data.Text.Internal.Text ww11 ww12 ww13 ->
                           case Data.Text.$w$ccompare ww7 ww8 ww9 ww11 ww12 ww13 of wild2 {
                             DEFAULT
                             -> Language.PureScript.Ide.Completion.Namespaced
                                  @ Data.Text.Internal.Text
                                  Language.PureScript.Ide.Types.IdeNSKind
                                  ww6
                             GHC.Types.LT
                             -> Language.PureScript.Ide.Completion.Namespaced
                                  @ Data.Text.Internal.Text
                                  Language.PureScript.Ide.Types.IdeNSKind
                                  ww10 } } } } } } }) -}
5e52a7eee24834e4874c5c60b062a0c7
  $fOrdNamespaced_$s$cmin ::
    Language.PureScript.Ide.Completion.Namespaced
      Data.Text.Internal.Text
    -> Language.PureScript.Ide.Completion.Namespaced
         Data.Text.Internal.Text
    -> Language.PureScript.Ide.Completion.Namespaced
         Data.Text.Internal.Text
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(U,U(U,U,U))><S(SL),1*U(1*U,U(U,U,U))>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Completion.Namespaced
                           Data.Text.Internal.Text)
                   (w1 :: Language.PureScript.Ide.Completion.Namespaced
                            Data.Text.Internal.Text) ->
                 case w of ww { Language.PureScript.Ide.Completion.Namespaced ww1 ww2 ->
                 case w1 of ww3 { Language.PureScript.Ide.Completion.Namespaced ww4 ww5 ->
                 case ww4 of wild {
                   Language.PureScript.Ide.Types.IdeNSValue
                   -> case ww1 of wild1 {
                        Language.PureScript.Ide.Types.IdeNSValue
                        -> case ww5 of ww6 { Data.Text.Internal.Text ww7 ww8 ww9 ->
                           case ww2 of ww10 { Data.Text.Internal.Text ww11 ww12 ww13 ->
                           case Data.Text.$w$ccompare ww7 ww8 ww9 ww11 ww12 ww13 of wild2 {
                             DEFAULT
                             -> Language.PureScript.Ide.Completion.Namespaced
                                  @ Data.Text.Internal.Text
                                  Language.PureScript.Ide.Types.IdeNSValue
                                  ww10
                             GHC.Types.LT
                             -> Language.PureScript.Ide.Completion.Namespaced
                                  @ Data.Text.Internal.Text
                                  Language.PureScript.Ide.Types.IdeNSValue
                                  ww6 } } }
                        Language.PureScript.Ide.Types.IdeNSType
                        -> Language.PureScript.Ide.Completion.Namespaced
                             @ Data.Text.Internal.Text
                             Language.PureScript.Ide.Types.IdeNSValue
                             ww5
                        Language.PureScript.Ide.Types.IdeNSKind
                        -> Language.PureScript.Ide.Completion.Namespaced
                             @ Data.Text.Internal.Text
                             Language.PureScript.Ide.Types.IdeNSValue
                             ww5 }
                   Language.PureScript.Ide.Types.IdeNSType
                   -> case ww1 of wild1 {
                        Language.PureScript.Ide.Types.IdeNSValue
                        -> Language.PureScript.Ide.Completion.Namespaced
                             @ Data.Text.Internal.Text
                             Language.PureScript.Ide.Types.IdeNSValue
                             ww2
                        Language.PureScript.Ide.Types.IdeNSType
                        -> case ww5 of ww6 { Data.Text.Internal.Text ww7 ww8 ww9 ->
                           case ww2 of ww10 { Data.Text.Internal.Text ww11 ww12 ww13 ->
                           case Data.Text.$w$ccompare ww7 ww8 ww9 ww11 ww12 ww13 of wild2 {
                             DEFAULT
                             -> Language.PureScript.Ide.Completion.Namespaced
                                  @ Data.Text.Internal.Text
                                  Language.PureScript.Ide.Types.IdeNSType
                                  ww10
                             GHC.Types.LT
                             -> Language.PureScript.Ide.Completion.Namespaced
                                  @ Data.Text.Internal.Text
                                  Language.PureScript.Ide.Types.IdeNSType
                                  ww6 } } }
                        Language.PureScript.Ide.Types.IdeNSKind
                        -> Language.PureScript.Ide.Completion.Namespaced
                             @ Data.Text.Internal.Text
                             Language.PureScript.Ide.Types.IdeNSType
                             ww5 }
                   Language.PureScript.Ide.Types.IdeNSKind
                   -> case ww1 of wild1 {
                        DEFAULT
                        -> Language.PureScript.Ide.Completion.Namespaced
                             @ Data.Text.Internal.Text
                             wild1
                             ww2
                        Language.PureScript.Ide.Types.IdeNSKind
                        -> case ww5 of ww6 { Data.Text.Internal.Text ww7 ww8 ww9 ->
                           case ww2 of ww10 { Data.Text.Internal.Text ww11 ww12 ww13 ->
                           case Data.Text.$w$ccompare ww7 ww8 ww9 ww11 ww12 ww13 of wild2 {
                             DEFAULT
                             -> Language.PureScript.Ide.Completion.Namespaced
                                  @ Data.Text.Internal.Text
                                  Language.PureScript.Ide.Types.IdeNSKind
                                  ww10
                             GHC.Types.LT
                             -> Language.PureScript.Ide.Completion.Namespaced
                                  @ Data.Text.Internal.Text
                                  Language.PureScript.Ide.Types.IdeNSKind
                                  ww6 } } } } } } }) -}
503b28cdae99a5aaa945c47f74fa5a9d
  $fOrdNamespaced_$s$fOrdNamespaced ::
    GHC.Classes.Ord
      (Language.PureScript.Ide.Completion.Namespaced
         Data.Text.Internal.Text)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Ide.Completion.Namespaced
                       Data.Text.Internal.Text)
                  Language.PureScript.Ide.Completion.$fEqNamespaced_$s$fEqNamespaced
                  Language.PureScript.Ide.Completion.$fOrdNamespaced_$s$ccompare
                  Language.PureScript.Ide.Completion.$fOrdNamespaced_$s$c<
                  (\ (a :: Language.PureScript.Ide.Completion.Namespaced
                             Data.Text.Internal.Text)
                     (b :: Language.PureScript.Ide.Completion.Namespaced
                             Data.Text.Internal.Text) ->
                   case b of wild { Language.PureScript.Ide.Completion.Namespaced a1 a2 ->
                   case a of wild1 { Language.PureScript.Ide.Completion.Namespaced b1 b2 ->
                   case a1 of wild2 {
                     Language.PureScript.Ide.Types.IdeNSValue
                     -> case b1 of wild3 {
                          Language.PureScript.Ide.Types.IdeNSValue
                          -> case Data.Text.$fOrdText_$ccompare a2 b2 of wild4 {
                               DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }
                          Language.PureScript.Ide.Types.IdeNSType -> GHC.Types.False
                          Language.PureScript.Ide.Types.IdeNSKind -> GHC.Types.False }
                     Language.PureScript.Ide.Types.IdeNSType
                     -> case b1 of wild3 {
                          Language.PureScript.Ide.Types.IdeNSValue -> GHC.Types.True
                          Language.PureScript.Ide.Types.IdeNSType
                          -> case Data.Text.$fOrdText_$ccompare a2 b2 of wild4 {
                               DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }
                          Language.PureScript.Ide.Types.IdeNSKind -> GHC.Types.False }
                     Language.PureScript.Ide.Types.IdeNSKind
                     -> case b1 of wild3 {
                          DEFAULT -> GHC.Types.True
                          Language.PureScript.Ide.Types.IdeNSKind
                          -> case Data.Text.$fOrdText_$ccompare a2 b2 of wild4 {
                               DEFAULT -> GHC.Types.True
                               GHC.Types.LT -> GHC.Types.False } } } } })
                  (\ (a :: Language.PureScript.Ide.Completion.Namespaced
                             Data.Text.Internal.Text)
                     (b :: Language.PureScript.Ide.Completion.Namespaced
                             Data.Text.Internal.Text) ->
                   Language.PureScript.Ide.Completion.$fOrdNamespaced_$s$c< b a)
                  (\ (a :: Language.PureScript.Ide.Completion.Namespaced
                             Data.Text.Internal.Text)
                     (b :: Language.PureScript.Ide.Completion.Namespaced
                             Data.Text.Internal.Text) ->
                   case a of wild { Language.PureScript.Ide.Completion.Namespaced a1 a2 ->
                   case b of wild1 { Language.PureScript.Ide.Completion.Namespaced b1 b2 ->
                   case a1 of wild2 {
                     Language.PureScript.Ide.Types.IdeNSValue
                     -> case b1 of wild3 {
                          Language.PureScript.Ide.Types.IdeNSValue
                          -> case Data.Text.$fOrdText_$ccompare a2 b2 of wild4 {
                               DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }
                          Language.PureScript.Ide.Types.IdeNSType -> GHC.Types.False
                          Language.PureScript.Ide.Types.IdeNSKind -> GHC.Types.False }
                     Language.PureScript.Ide.Types.IdeNSType
                     -> case b1 of wild3 {
                          Language.PureScript.Ide.Types.IdeNSValue -> GHC.Types.True
                          Language.PureScript.Ide.Types.IdeNSType
                          -> case Data.Text.$fOrdText_$ccompare a2 b2 of wild4 {
                               DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }
                          Language.PureScript.Ide.Types.IdeNSKind -> GHC.Types.False }
                     Language.PureScript.Ide.Types.IdeNSKind
                     -> case b1 of wild3 {
                          DEFAULT -> GHC.Types.True
                          Language.PureScript.Ide.Types.IdeNSKind
                          -> case Data.Text.$fOrdText_$ccompare a2 b2 of wild4 {
                               DEFAULT -> GHC.Types.True
                               GHC.Types.LT -> GHC.Types.False } } } } })
                  (\ (x :: Language.PureScript.Ide.Completion.Namespaced
                             Data.Text.Internal.Text)
                     (y :: Language.PureScript.Ide.Completion.Namespaced
                             Data.Text.Internal.Text) ->
                   case y of wild { Language.PureScript.Ide.Completion.Namespaced a1 a2 ->
                   case x of wild1 { Language.PureScript.Ide.Completion.Namespaced b1 b2 ->
                   case a1 of wild2 {
                     Language.PureScript.Ide.Types.IdeNSValue
                     -> case b1 of wild3 {
                          Language.PureScript.Ide.Types.IdeNSValue
                          -> case Data.Text.$fOrdText_$ccompare a2 b2 of wild4 {
                               DEFAULT -> wild GHC.Types.LT -> wild1 }
                          Language.PureScript.Ide.Types.IdeNSType -> wild1
                          Language.PureScript.Ide.Types.IdeNSKind -> wild1 }
                     Language.PureScript.Ide.Types.IdeNSType
                     -> case b1 of wild3 {
                          Language.PureScript.Ide.Types.IdeNSValue -> wild
                          Language.PureScript.Ide.Types.IdeNSType
                          -> case Data.Text.$fOrdText_$ccompare a2 b2 of wild4 {
                               DEFAULT -> wild GHC.Types.LT -> wild1 }
                          Language.PureScript.Ide.Types.IdeNSKind -> wild1 }
                     Language.PureScript.Ide.Types.IdeNSKind
                     -> case b1 of wild3 {
                          DEFAULT -> wild
                          Language.PureScript.Ide.Types.IdeNSKind
                          -> case Data.Text.$fOrdText_$ccompare a2 b2 of wild4 {
                               DEFAULT -> wild GHC.Types.LT -> wild1 } } } } })
                  (\ (x :: Language.PureScript.Ide.Completion.Namespaced
                             Data.Text.Internal.Text)
                     (y :: Language.PureScript.Ide.Completion.Namespaced
                             Data.Text.Internal.Text) ->
                   case y of wild { Language.PureScript.Ide.Completion.Namespaced a1 a2 ->
                   case x of wild1 { Language.PureScript.Ide.Completion.Namespaced b1 b2 ->
                   case a1 of wild2 {
                     Language.PureScript.Ide.Types.IdeNSValue
                     -> case b1 of wild3 {
                          Language.PureScript.Ide.Types.IdeNSValue
                          -> case Data.Text.$fOrdText_$ccompare a2 b2 of wild4 {
                               DEFAULT -> wild1 GHC.Types.LT -> wild }
                          Language.PureScript.Ide.Types.IdeNSType -> wild
                          Language.PureScript.Ide.Types.IdeNSKind -> wild }
                     Language.PureScript.Ide.Types.IdeNSType
                     -> case b1 of wild3 {
                          Language.PureScript.Ide.Types.IdeNSValue -> wild1
                          Language.PureScript.Ide.Types.IdeNSType
                          -> case Data.Text.$fOrdText_$ccompare a2 b2 of wild4 {
                               DEFAULT -> wild1 GHC.Types.LT -> wild }
                          Language.PureScript.Ide.Types.IdeNSKind -> wild }
                     Language.PureScript.Ide.Types.IdeNSKind
                     -> case b1 of wild3 {
                          DEFAULT -> wild1
                          Language.PureScript.Ide.Types.IdeNSKind
                          -> case Data.Text.$fOrdText_$ccompare a2 b2 of wild4 {
                               DEFAULT -> wild1 GHC.Types.LT -> wild } } } } }) -}
503b28cdae99a5aaa945c47f74fa5a9d
  $fShowNamespaced ::
    GHC.Show.Show a =>
    GHC.Show.Show (Language.PureScript.Ide.Completion.Namespaced a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Show.Show a).
                  @ (Language.PureScript.Ide.Completion.Namespaced a)
                  (Language.PureScript.Ide.Completion.$fShowNamespaced_$cshowsPrec
                     @ a
                     v)
                  (Language.PureScript.Ide.Completion.$fShowNamespaced_$cshow @ a v)
                  (Language.PureScript.Ide.Completion.$fShowNamespaced_$cshowList
                     @ a
                     v) -}
c3c45dee9b3b1c508ad633b67e30c779
  $fShowNamespaced1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
ba034034e867ea247fa88a063877b26d
  $fShowNamespaced2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Namespaced "#) -}
a740fa4ab02cc0d9596f83b738873988
  $fShowNamespaced3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11#) -}
503b28cdae99a5aaa945c47f74fa5a9d
  $fShowNamespaced_$cshow ::
    GHC.Show.Show a =>
    Language.PureScript.Ide.Completion.Namespaced a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U(1*C1(C1(C(U))),A,A)><S,1*U(U,U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (x :: Language.PureScript.Ide.Completion.Namespaced a) ->
                 Language.PureScript.Ide.Completion.$fShowNamespaced_$cshowsPrec
                   @ a
                   $dShow
                   Language.PureScript.Ide.Completion.$fShowNamespaced1
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
503b28cdae99a5aaa945c47f74fa5a9d
  $fShowNamespaced_$cshowList ::
    GHC.Show.Show a =>
    [Language.PureScript.Ide.Completion.Namespaced a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (ls :: [Language.PureScript.Ide.Completion.Namespaced a])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Language.PureScript.Ide.Completion.Namespaced a)
                   (Language.PureScript.Ide.Completion.$fShowNamespaced_$cshowsPrec
                      @ a
                      $dShow
                      Language.PureScript.Ide.Completion.$fShowNamespaced1)
                   ls
                   s) -}
503b28cdae99a5aaa945c47f74fa5a9d
  $fShowNamespaced_$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Types.Int
    -> Language.PureScript.Ide.Completion.Namespaced a
    -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,1*U(1*C1(C1(C(U))),A,A)><S(S),1*U(U)><S,1*U(U,U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: GHC.Show.Show a)
                   (w1 :: GHC.Types.Int)
                   (w2 :: Language.PureScript.Ide.Completion.Namespaced a) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Language.PureScript.Ide.Completion.Namespaced ww3 ww4 ->
                 Language.PureScript.Ide.Completion.$w$cshowsPrec
                   @ a
                   w
                   ww1
                   ww3
                   ww4 } }) -}
86444224678ea24276e660fe6c9257a2
  $salter_go13 ::
    GHC.Classes.Ord k1 =>
    (GHC.Base.Maybe a1 -> GHC.Base.Maybe a1)
    -> k1 -> Data.Map.Internal.Map k1 a1 -> Data.Map.Internal.Map k1 a1
  {- Arity: 4,
     Strictness: <L,U(A,C(C1(U)),A,A,A,A,A,A)><C(S),1*C1(U)><S,1*U><S,1*U> -}
7b28b663a7dd6c65c2b954779d40e88e
  $tc'CompletionOptions :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6113990987627291731##
                   9038617381922617675##
                   Language.PureScript.Ide.Completion.$trModule
                   Language.PureScript.Ide.Completion.$tc'CompletionOptions2
                   0#
                   Language.PureScript.Ide.Completion.$tc'CompletionOptions1) -}
05e583f830b246d7c17a0b707ae09335
  $tc'CompletionOptions1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
00541c1d14e5b76b340570b498a47a51
  $tc'CompletionOptions2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Completion.$tc'CompletionOptions3) -}
8190ead5d8d3926179b6d3a2c6e0bc4f
  $tc'CompletionOptions3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'CompletionOptions"#) -}
c2f12cf9c5ec4601f2fe4d7c48e635a4
  $tc'Namespaced :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12298528314467377832##
                   15860572577114385578##
                   Language.PureScript.Ide.Completion.$trModule
                   Language.PureScript.Ide.Completion.$tc'Namespaced2
                   1#
                   Language.PureScript.Ide.Completion.$tc'Namespaced1) -}
44303b2cb04fb1b0482b878fac294f85
  $tc'Namespaced1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
0697d857d6512fca321d8ee98ab76d26
  $tc'Namespaced2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Completion.$tc'Namespaced3) -}
7f71aecbbbb240fb4a65905a598d4a14
  $tc'Namespaced3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Namespaced"#) -}
ace99eefce4bfea8c09ed7257003dde2
  $tcCompletionOptions :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2991939879799286071##
                   223112086167083313##
                   Language.PureScript.Ide.Completion.$trModule
                   Language.PureScript.Ide.Completion.$tcCompletionOptions1
                   0#
                   GHC.Types.krep$*) -}
4e64818f156826efa49c4fa4433f76c0
  $tcCompletionOptions1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Completion.$fFromJSONCompletionOptions6) -}
8fac2b022ef150e0fd85bf088302a50f
  $tcNamespaced :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14171273853005103717##
                   15980735924000428842##
                   Language.PureScript.Ide.Completion.$trModule
                   Language.PureScript.Ide.Completion.$tcNamespaced1
                   0#
                   GHC.Types.krep$*Arr*) -}
6f2318701a08c891567085c9e9131edb
  $tcNamespaced1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Completion.$tcNamespaced2) -}
2708400f9925c970adb02394e64b235a
  $tcNamespaced2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Namespaced"#) -}
19443d56ef43b0388e44ee467bea3552
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Language.PureScript.Ide.Completion.$trModule3
                   Language.PureScript.Ide.Completion.$trModule1) -}
2136d95492ab563d84b6fb70190bdd23
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Completion.$trModule2) -}
a194be7ca47f1ce58527b8eaf6b99282
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Language.PureScript.Ide.Completion"#) -}
5066077611b7b836fb20a203dac3e49c
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Completion.$trModule4) -}
35647d53ac74de0c1174fe4178175524
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"#) -}
43e4e29d90cefe05dece654742bc3314
  $w$c< ::
    GHC.Classes.Ord a =>
    Language.PureScript.Ide.Types.IdeNamespace
    -> a
    -> Language.PureScript.Ide.Types.IdeNamespace
    -> a
    -> GHC.Types.Bool
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,A,1*C1(C1(U)),A,A,A,A,A)><S,1*U><L,U><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Classes.Ord a)
                   (ww :: Language.PureScript.Ide.Types.IdeNamespace)
                   (ww1 :: a)
                   (ww2 :: Language.PureScript.Ide.Types.IdeNamespace)
                   (ww3 :: a) ->
                 case ww of wild {
                   Language.PureScript.Ide.Types.IdeNSValue
                   -> case ww2 of wild1 {
                        Language.PureScript.Ide.Types.IdeNSValue
                        -> GHC.Classes.< @ a w ww1 ww3
                        Language.PureScript.Ide.Types.IdeNSType -> GHC.Types.True
                        Language.PureScript.Ide.Types.IdeNSKind -> GHC.Types.True }
                   Language.PureScript.Ide.Types.IdeNSType
                   -> case ww2 of wild1 {
                        Language.PureScript.Ide.Types.IdeNSValue -> GHC.Types.False
                        Language.PureScript.Ide.Types.IdeNSType
                        -> GHC.Classes.< @ a w ww1 ww3
                        Language.PureScript.Ide.Types.IdeNSKind -> GHC.Types.True }
                   Language.PureScript.Ide.Types.IdeNSKind
                   -> case ww2 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Ide.Types.IdeNSKind
                        -> GHC.Classes.< @ a w ww1 ww3 } }) -}
6a75406db50812dac509969ce1d6683f
  $w$c== ::
    GHC.Classes.Eq a =>
    Language.PureScript.Ide.Types.IdeNamespace
    -> a
    -> Language.PureScript.Ide.Types.IdeNamespace
    -> a
    -> GHC.Types.Bool
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S,1*U><L,U><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Classes.Eq a)
                   (ww :: Language.PureScript.Ide.Types.IdeNamespace)
                   (ww1 :: a)
                   (ww2 :: Language.PureScript.Ide.Types.IdeNamespace)
                   (ww3 :: a) ->
                 case ww of wild {
                   Language.PureScript.Ide.Types.IdeNSValue
                   -> case ww2 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Ide.Types.IdeNSValue
                        -> GHC.Classes.== @ a w ww1 ww3 }
                   Language.PureScript.Ide.Types.IdeNSType
                   -> case ww2 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Ide.Types.IdeNSType
                        -> GHC.Classes.== @ a w ww1 ww3 }
                   Language.PureScript.Ide.Types.IdeNSKind
                   -> case ww2 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Ide.Types.IdeNSKind
                        -> GHC.Classes.== @ a w ww1 ww3 } }) -}
492a3e8535f6e7089b2dc6b0fa79c288
  $w$ccompare ::
    GHC.Classes.Ord a =>
    Language.PureScript.Ide.Types.IdeNamespace
    -> a
    -> Language.PureScript.Ide.Types.IdeNamespace
    -> a
    -> GHC.Types.Ordering
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(C1(U)),A,A,A,A,A,A)><S,1*U><L,U><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Classes.Ord a)
                   (ww :: Language.PureScript.Ide.Types.IdeNamespace)
                   (ww1 :: a)
                   (ww2 :: Language.PureScript.Ide.Types.IdeNamespace)
                   (ww3 :: a) ->
                 case ww of wild {
                   Language.PureScript.Ide.Types.IdeNSValue
                   -> case ww2 of wild1 {
                        Language.PureScript.Ide.Types.IdeNSValue
                        -> GHC.Classes.compare @ a w ww1 ww3
                        Language.PureScript.Ide.Types.IdeNSType -> GHC.Types.LT
                        Language.PureScript.Ide.Types.IdeNSKind -> GHC.Types.LT }
                   Language.PureScript.Ide.Types.IdeNSType
                   -> case ww2 of wild1 {
                        Language.PureScript.Ide.Types.IdeNSValue -> GHC.Types.GT
                        Language.PureScript.Ide.Types.IdeNSType
                        -> GHC.Classes.compare @ a w ww1 ww3
                        Language.PureScript.Ide.Types.IdeNSKind -> GHC.Types.LT }
                   Language.PureScript.Ide.Types.IdeNSKind
                   -> case ww2 of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Language.PureScript.Ide.Types.IdeNSKind
                        -> GHC.Classes.compare @ a w ww1 ww3 } }) -}
1e3e48213de0d56c4097c2a94106803c
  $w$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Prim.Int#
    -> Language.PureScript.Ide.Types.IdeNamespace
    -> a
    -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,1*U(1*C1(C1(C(U))),A,A)><S,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Show.Show a)
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: Language.PureScript.Ide.Types.IdeNamespace)
                   (ww2 :: a) ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.showsPrec
                       @ a
                       w
                       Language.PureScript.Ide.Completion.$fShowNamespaced3
                       ww2
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> \ (x :: GHC.Base.String) ->
                      GHC.CString.unpackAppendCString#
                        Language.PureScript.Ide.Completion.$fShowNamespaced2
                        (Language.PureScript.Ide.Types.$w$cshowsPrec9
                           ww1
                           (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 (g x)))
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.CString.unpackAppendCString#
                           Language.PureScript.Ide.Completion.$fShowNamespaced2
                           (Language.PureScript.Ide.Types.$w$cshowsPrec9
                              ww1
                              (GHC.Types.:
                                 @ GHC.Types.Char
                                 GHC.Show.showSpace1
                                 (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))))) }) -}
3e5f88d71468e98522510f1b0ae5d5af
  $w$s$c< ::
    Language.PureScript.Ide.Types.IdeNamespace
    -> Data.Text.Internal.Text
    -> Language.PureScript.Ide.Types.IdeNamespace
    -> Data.Text.Internal.Text
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U(U,U,U)><S,1*U><L,1*U(U,U,U)>,
     Inline: [0],
     Unfolding: (\ (ww :: Language.PureScript.Ide.Types.IdeNamespace)
                   (ww1 :: Data.Text.Internal.Text)
                   (ww2 :: Language.PureScript.Ide.Types.IdeNamespace)
                   (ww3 :: Data.Text.Internal.Text) ->
                 case ww of wild {
                   Language.PureScript.Ide.Types.IdeNSValue
                   -> case ww2 of wild1 {
                        Language.PureScript.Ide.Types.IdeNSValue
                        -> Data.Text.$fOrdText_$c< ww1 ww3
                        Language.PureScript.Ide.Types.IdeNSType -> GHC.Types.True
                        Language.PureScript.Ide.Types.IdeNSKind -> GHC.Types.True }
                   Language.PureScript.Ide.Types.IdeNSType
                   -> case ww2 of wild1 {
                        Language.PureScript.Ide.Types.IdeNSValue -> GHC.Types.False
                        Language.PureScript.Ide.Types.IdeNSType
                        -> Data.Text.$fOrdText_$c< ww1 ww3
                        Language.PureScript.Ide.Types.IdeNSKind -> GHC.Types.True }
                   Language.PureScript.Ide.Types.IdeNSKind
                   -> case ww2 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Ide.Types.IdeNSKind
                        -> Data.Text.$fOrdText_$c< ww1 ww3 } }) -}
36a9271e367d702346980f2ea4d02464
  $w$s$c<= ::
    Language.PureScript.Ide.Types.IdeNamespace
    -> Data.Text.Internal.Text
    -> Language.PureScript.Ide.Types.IdeNamespace
    -> Data.Text.Internal.Text
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U(U,U,U)><S,1*U><L,1*U(U,U,U)>,
     Inline: [0],
     Unfolding: (\ (ww :: Language.PureScript.Ide.Types.IdeNamespace)
                   (ww1 :: Data.Text.Internal.Text)
                   (ww2 :: Language.PureScript.Ide.Types.IdeNamespace)
                   (ww3 :: Data.Text.Internal.Text) ->
                 case ww2 of wild {
                   Language.PureScript.Ide.Types.IdeNSValue
                   -> case ww of wild1 {
                        Language.PureScript.Ide.Types.IdeNSValue
                        -> case ww3 of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                           case ww1 of ww8 { Data.Text.Internal.Text ww9 ww10 ww11 ->
                           case Data.Text.$w$ccompare ww5 ww6 ww7 ww9 ww10 ww11 of wild2 {
                             DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False } } }
                        Language.PureScript.Ide.Types.IdeNSType -> GHC.Types.False
                        Language.PureScript.Ide.Types.IdeNSKind -> GHC.Types.False }
                   Language.PureScript.Ide.Types.IdeNSType
                   -> case ww of wild1 {
                        Language.PureScript.Ide.Types.IdeNSValue -> GHC.Types.True
                        Language.PureScript.Ide.Types.IdeNSType
                        -> case ww3 of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                           case ww1 of ww8 { Data.Text.Internal.Text ww9 ww10 ww11 ->
                           case Data.Text.$w$ccompare ww5 ww6 ww7 ww9 ww10 ww11 of wild2 {
                             DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False } } }
                        Language.PureScript.Ide.Types.IdeNSKind -> GHC.Types.False }
                   Language.PureScript.Ide.Types.IdeNSKind
                   -> case ww of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.Ide.Types.IdeNSKind
                        -> case ww3 of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                           case ww1 of ww8 { Data.Text.Internal.Text ww9 ww10 ww11 ->
                           case Data.Text.$w$ccompare ww5 ww6 ww7 ww9 ww10 ww11 of wild2 {
                             DEFAULT -> GHC.Types.True
                             GHC.Types.LT -> GHC.Types.False } } } } }) -}
ef2b6ac86c261aa5afd06b7dbd46a365
  $w$s$c== ::
    Language.PureScript.Ide.Types.IdeNamespace
    -> Data.Text.Internal.Text
    -> Language.PureScript.Ide.Types.IdeNamespace
    -> Data.Text.Internal.Text
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U(U,U,U)><S,1*U><L,1*U(U,U,U)>,
     Inline: [0],
     Unfolding: (\ (ww :: Language.PureScript.Ide.Types.IdeNamespace)
                   (ww1 :: Data.Text.Internal.Text)
                   (ww2 :: Language.PureScript.Ide.Types.IdeNamespace)
                   (ww3 :: Data.Text.Internal.Text) ->
                 case ww of wild {
                   Language.PureScript.Ide.Types.IdeNSValue
                   -> case ww2 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Ide.Types.IdeNSValue
                        -> Data.Text.$fEqText_$c== ww1 ww3 }
                   Language.PureScript.Ide.Types.IdeNSType
                   -> case ww2 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Ide.Types.IdeNSType
                        -> Data.Text.$fEqText_$c== ww1 ww3 }
                   Language.PureScript.Ide.Types.IdeNSKind
                   -> case ww2 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Ide.Types.IdeNSKind
                        -> Data.Text.$fEqText_$c== ww1 ww3 } }) -}
cefc12c0ef8d6131a8699de3507dce6a
  $w$s$c>= ::
    Language.PureScript.Ide.Types.IdeNamespace
    -> Data.Text.Internal.Text
    -> Language.PureScript.Ide.Types.IdeNamespace
    -> Data.Text.Internal.Text
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U(U,U,U)><S,1*U><L,1*U(U,U,U)>,
     Inline: [0],
     Unfolding: (\ (ww :: Language.PureScript.Ide.Types.IdeNamespace)
                   (ww1 :: Data.Text.Internal.Text)
                   (ww2 :: Language.PureScript.Ide.Types.IdeNamespace)
                   (ww3 :: Data.Text.Internal.Text) ->
                 case ww of wild {
                   Language.PureScript.Ide.Types.IdeNSValue
                   -> case ww2 of wild1 {
                        Language.PureScript.Ide.Types.IdeNSValue
                        -> case ww1 of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                           case ww3 of ww8 { Data.Text.Internal.Text ww9 ww10 ww11 ->
                           case Data.Text.$w$ccompare ww5 ww6 ww7 ww9 ww10 ww11 of wild2 {
                             DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False } } }
                        Language.PureScript.Ide.Types.IdeNSType -> GHC.Types.False
                        Language.PureScript.Ide.Types.IdeNSKind -> GHC.Types.False }
                   Language.PureScript.Ide.Types.IdeNSType
                   -> case ww2 of wild1 {
                        Language.PureScript.Ide.Types.IdeNSValue -> GHC.Types.True
                        Language.PureScript.Ide.Types.IdeNSType
                        -> case ww1 of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                           case ww3 of ww8 { Data.Text.Internal.Text ww9 ww10 ww11 ->
                           case Data.Text.$w$ccompare ww5 ww6 ww7 ww9 ww10 ww11 of wild2 {
                             DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False } } }
                        Language.PureScript.Ide.Types.IdeNSKind -> GHC.Types.False }
                   Language.PureScript.Ide.Types.IdeNSKind
                   -> case ww2 of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.Ide.Types.IdeNSKind
                        -> case ww1 of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                           case ww3 of ww8 { Data.Text.Internal.Text ww9 ww10 ww11 ->
                           case Data.Text.$w$ccompare ww5 ww6 ww7 ww9 ww10 ww11 of wild2 {
                             DEFAULT -> GHC.Types.True
                             GHC.Types.LT -> GHC.Types.False } } } } }) -}
2b21497569d0327018a85db5e66f44b4
  $w$s$ccompare ::
    Language.PureScript.Ide.Types.IdeNamespace
    -> Data.Text.Internal.Text
    -> Language.PureScript.Ide.Types.IdeNamespace
    -> Data.Text.Internal.Text
    -> GHC.Types.Ordering
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U(U,U,U)><S,1*U><L,1*U(U,U,U)>,
     Inline: [0],
     Unfolding: (\ (ww :: Language.PureScript.Ide.Types.IdeNamespace)
                   (ww1 :: Data.Text.Internal.Text)
                   (ww2 :: Language.PureScript.Ide.Types.IdeNamespace)
                   (ww3 :: Data.Text.Internal.Text) ->
                 case ww of wild {
                   Language.PureScript.Ide.Types.IdeNSValue
                   -> case ww2 of wild1 {
                        Language.PureScript.Ide.Types.IdeNSValue
                        -> Data.Text.$fOrdText_$ccompare ww1 ww3
                        Language.PureScript.Ide.Types.IdeNSType -> GHC.Types.LT
                        Language.PureScript.Ide.Types.IdeNSKind -> GHC.Types.LT }
                   Language.PureScript.Ide.Types.IdeNSType
                   -> case ww2 of wild1 {
                        Language.PureScript.Ide.Types.IdeNSValue -> GHC.Types.GT
                        Language.PureScript.Ide.Types.IdeNSType
                        -> Data.Text.$fOrdText_$ccompare ww1 ww3
                        Language.PureScript.Ide.Types.IdeNSKind -> GHC.Types.LT }
                   Language.PureScript.Ide.Types.IdeNSKind
                   -> case ww2 of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Language.PureScript.Ide.Types.IdeNSKind
                        -> Data.Text.$fOrdText_$ccompare ww1 ww3 } }) -}
f401eea6dcf271f232929474e4306604
  $wapplyCompletionOptions ::
    GHC.Base.Maybe GHC.Types.Int
    -> GHC.Types.Bool
    -> [Language.PureScript.Ide.Types.Match
          Language.PureScript.Ide.Types.IdeDeclarationAnn]
    -> [(Language.PureScript.Ide.Types.Match
           Language.PureScript.Ide.Types.IdeDeclarationAnn,
         [Language.PureScript.Names.ModuleName])]
  {- Arity: 3, Strictness: <S,1*U><L,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.Maybe GHC.Types.Int)
                   (ww1 :: GHC.Types.Bool)
                   (w :: [Language.PureScript.Ide.Types.Match
                            Language.PureScript.Ide.Types.IdeDeclarationAnn]) ->
                 let {
                   karg :: [(Language.PureScript.Ide.Types.Match
                               Language.PureScript.Ide.Types.IdeDeclarationAnn,
                             [Language.PureScript.Names.ModuleName])]
                   = case ww1 of wild {
                       GHC.Types.False
                       -> GHC.Base.map
                            @ (Language.PureScript.Ide.Types.Match
                                 Language.PureScript.Ide.Types.IdeDeclarationAnn)
                            @ (Language.PureScript.Ide.Types.Match
                                 Language.PureScript.Ide.Types.IdeDeclarationAnn,
                               [Language.PureScript.Names.ModuleName])
                            (Language.PureScript.Ide.Completion.simpleExport
                               @ Language.PureScript.Ide.Types.IdeDeclarationAnn)
                            w
                       GHC.Types.True
                       -> Data.Map.Internal.elems_go
                            @ (Language.PureScript.Ide.Completion.Namespaced
                                 Data.Text.Internal.Text)
                            @ (Language.PureScript.Ide.Types.Match
                                 Language.PureScript.Ide.Types.IdeDeclarationAnn,
                               [Language.PureScript.Names.ModuleName])
                            (GHC.Types.[]
                               @ (Language.PureScript.Ide.Types.Match
                                    Language.PureScript.Ide.Types.IdeDeclarationAnn,
                                  [Language.PureScript.Names.ModuleName]))
                            (Language.PureScript.Ide.Completion.applyCompletionOptions_go w) }
                 } in
                 case ww of wild {
                   GHC.Base.Nothing -> karg
                   GHC.Base.Just x
                   -> case x of wild1 { GHC.Types.I# y ->
                      case GHC.Prim.<# 0# y of lwild {
                        DEFAULT
                        -> GHC.Types.[]
                             @ (Language.PureScript.Ide.Types.Match
                                  Language.PureScript.Ide.Types.IdeDeclarationAnn,
                                [Language.PureScript.Names.ModuleName])
                        1#
                        -> GHC.List.$wunsafeTake
                             @ (Language.PureScript.Ide.Types.Match
                                  Language.PureScript.Ide.Types.IdeDeclarationAnn,
                                [Language.PureScript.Names.ModuleName])
                             y
                             karg } } }) -}
ae51b087dc079ba6d203bd8f9e7af191
  $wcompletionFromMatch ::
    Language.PureScript.Names.ModuleName
    -> Language.PureScript.Ide.Types.Annotation
    -> Language.PureScript.Ide.Types.IdeDeclaration
    -> [Language.PureScript.Names.ModuleName]
    -> (# Data.Text.Internal.Text, Data.Text.Internal.Text,
          Data.Text.Internal.Text, Data.Text.Internal.Text,
          GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan,
          GHC.Base.Maybe Data.Text.Internal.Text,
          [Language.PureScript.Names.ModuleName] #)
  {- Arity: 4, Strictness: <L,1*U><L,U(1*U,A,1*U,1*U)><L,1*U><L,U>,
     Inline: [0] -}
55624d1148f2a902e7c7a146663fd46c
  $wgetCompletions ::
    [Language.PureScript.Ide.Filter.Filter]
    -> Language.PureScript.Ide.Matcher.Matcher
         Language.PureScript.Ide.Types.IdeDeclarationAnn
    -> GHC.Base.Maybe GHC.Types.Int
    -> GHC.Types.Bool
    -> [Language.PureScript.Ide.Completion.Module]
    -> [Language.PureScript.Ide.Types.Completion]
  {- Arity: 5, Strictness: <L,1*U><L,1*C1(U)><S,1*U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (w :: [Language.PureScript.Ide.Filter.Filter])
                   (w1 :: Language.PureScript.Ide.Matcher.Matcher
                            Language.PureScript.Ide.Types.IdeDeclarationAnn)
                   (ww :: GHC.Base.Maybe GHC.Types.Int)
                   (ww1 :: GHC.Types.Bool)
                   (w2 :: [Language.PureScript.Ide.Completion.Module]) ->
                 let {
                   karg :: [(Language.PureScript.Ide.Types.Match
                               Language.PureScript.Ide.Types.IdeDeclarationAnn,
                             [Language.PureScript.Names.ModuleName])]
                   = let {
                       karg1 :: [Language.PureScript.Ide.Types.Match
                                   Language.PureScript.Ide.Types.IdeDeclarationAnn]
                       = w1
                           `cast`
                         (Language.PureScript.Ide.Matcher.N:Matcher[0]
                              <Language.PureScript.Ide.Types.IdeDeclarationAnn>_R ; Data.Semigroup.Internal.N:Endo[0]
                                                                                        <[Language.PureScript.Ide.Types.Match
                                                                                            Language.PureScript.Ide.Types.IdeDeclarationAnn]>_R)
                           (Language.PureScript.Ide.Completion.getCompletions_go
                              (Language.PureScript.Ide.Filter.applyFilters1 w w2))
                     } in
                     case ww1 of wild {
                       GHC.Types.False
                       -> GHC.Base.map
                            @ (Language.PureScript.Ide.Types.Match
                                 Language.PureScript.Ide.Types.IdeDeclarationAnn)
                            @ (Language.PureScript.Ide.Types.Match
                                 Language.PureScript.Ide.Types.IdeDeclarationAnn,
                               [Language.PureScript.Names.ModuleName])
                            (Language.PureScript.Ide.Completion.simpleExport
                               @ Language.PureScript.Ide.Types.IdeDeclarationAnn)
                            karg1
                       GHC.Types.True
                       -> Data.Map.Internal.elems_go
                            @ (Language.PureScript.Ide.Completion.Namespaced
                                 Data.Text.Internal.Text)
                            @ (Language.PureScript.Ide.Types.Match
                                 Language.PureScript.Ide.Types.IdeDeclarationAnn,
                               [Language.PureScript.Names.ModuleName])
                            (GHC.Types.[]
                               @ (Language.PureScript.Ide.Types.Match
                                    Language.PureScript.Ide.Types.IdeDeclarationAnn,
                                  [Language.PureScript.Names.ModuleName]))
                            (Language.PureScript.Ide.Completion.applyCompletionOptions_go
                               karg1) }
                 } in
                 case ww of wild {
                   GHC.Base.Nothing
                   -> GHC.Base.map
                        @ (Language.PureScript.Ide.Types.Match
                             Language.PureScript.Ide.Types.IdeDeclarationAnn,
                           [Language.PureScript.Names.ModuleName])
                        @ Language.PureScript.Ide.Types.Completion
                        Language.PureScript.Ide.Completion.completionFromMatch
                        karg
                   GHC.Base.Just x
                   -> case x of wild1 { GHC.Types.I# y ->
                      case GHC.Prim.<# 0# y of lwild {
                        DEFAULT -> GHC.Types.[] @ Language.PureScript.Ide.Types.Completion
                        1# -> Language.PureScript.Ide.Completion.$wgo karg y } } }) -}
fbac1d465defbd9d480b6b79d43ce798
  $wgo ::
    [(Language.PureScript.Ide.Types.Match
        Language.PureScript.Ide.Types.IdeDeclarationAnn,
      [Language.PureScript.Names.ModuleName])]
    -> GHC.Prim.Int# -> [Language.PureScript.Ide.Types.Completion]
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0] -}
c8878fc5aee3f7b44d602425f6793e59
  data CompletionOptions
    = CompletionOptions {coMaxResults :: GHC.Base.Maybe GHC.Types.Int,
                         coGroupReexports :: GHC.Types.Bool}
c01b2da2cb8d05caedab3ade81679189
  type Module =
    (Language.PureScript.Names.ModuleName,
     [Language.PureScript.Ide.Types.IdeDeclarationAnn])
503b28cdae99a5aaa945c47f74fa5a9d
  data Namespaced a
    = Namespaced Language.PureScript.Ide.Types.IdeNamespace a
8dd34e67668331e859e91c7a7414da7f
  applyCompletionOptions ::
    Language.PureScript.Ide.Completion.CompletionOptions
    -> [Language.PureScript.Ide.Types.Match
          Language.PureScript.Ide.Types.IdeDeclarationAnn]
    -> [(Language.PureScript.Ide.Types.Match
           Language.PureScript.Ide.Types.IdeDeclarationAnn,
         [Language.PureScript.Names.ModuleName])]
  {- Arity: 2, Strictness: <S(SL),1*U(1*U,1*U)><L,1*U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Completion.CompletionOptions)
                   (w1 :: [Language.PureScript.Ide.Types.Match
                             Language.PureScript.Ide.Types.IdeDeclarationAnn]) ->
                 case w of ww { Language.PureScript.Ide.Completion.CompletionOptions ww1 ww2 ->
                 Language.PureScript.Ide.Completion.$wapplyCompletionOptions
                   ww1
                   ww2
                   w1 }) -}
dc3d6fc06cb043a05e1e83b8334c812a
  applyCompletionOptions_go ::
    [Language.PureScript.Ide.Types.Match
       Language.PureScript.Ide.Types.IdeDeclarationAnn]
    -> Data.Map.Internal.Map
         (Language.PureScript.Ide.Completion.Namespaced
            Data.Text.Internal.Text)
         (Language.PureScript.Ide.Types.Match
            Language.PureScript.Ide.Types.IdeDeclarationAnn,
          [Language.PureScript.Names.ModuleName])
  {- Arity: 1, Strictness: <S,1*U> -}
c8878fc5aee3f7b44d602425f6793e59
  coGroupReexports ::
    Language.PureScript.Ide.Completion.CompletionOptions
    -> GHC.Types.Bool
  RecSel Left Language.PureScript.Ide.Completion.CompletionOptions
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Completion.CompletionOptions) ->
                 case ds of wild { Language.PureScript.Ide.Completion.CompletionOptions ds1 ds2 ->
                 ds2 }) -}
c8878fc5aee3f7b44d602425f6793e59
  coMaxResults ::
    Language.PureScript.Ide.Completion.CompletionOptions
    -> GHC.Base.Maybe GHC.Types.Int
  RecSel Left Language.PureScript.Ide.Completion.CompletionOptions
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Completion.CompletionOptions) ->
                 case ds of wild { Language.PureScript.Ide.Completion.CompletionOptions ds1 ds2 ->
                 ds1 }) -}
08a59c684bd88cd15f2fa3e4f7fffb32
  completionFromMatch ::
    (Language.PureScript.Ide.Types.Match
       Language.PureScript.Ide.Types.IdeDeclarationAnn,
     [Language.PureScript.Names.ModuleName])
    -> Language.PureScript.Ide.Types.Completion
  {- Arity: 1,
     Strictness: <S(S(LS)L),1*U(1*U(1*U,1*U(U(U,A,U,U),1*U)),U)>m,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: (Language.PureScript.Ide.Types.Match
                            Language.PureScript.Ide.Types.IdeDeclarationAnn,
                          [Language.PureScript.Names.ModuleName])) ->
                 case w of ww { (,) ww1 ww2 ->
                 case ww1
                        `cast`
                      (Language.PureScript.Ide.Types.N:Match[0] <Language.PureScript.Ide.Types.IdeDeclarationAnn>_N) of ww3 { (,) ww4 ww5 ->
                 case ww5 of ww6 { Language.PureScript.Ide.Types.IdeDeclarationAnn ww7 ww8 ->
                 case Language.PureScript.Ide.Completion.$wcompletionFromMatch
                        ww4
                        ww7
                        ww8
                        ww2 of ww9 { (#,,,,,,#) ww10 ww11 ww12 ww13 ww14 ww15 ww16 ->
                 Language.PureScript.Ide.Types.Completion
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15
                   ww16 } } } }) -}
8e3747d017040e5acb5876d738d5cf10
  defaultCompletionOptions ::
    Language.PureScript.Ide.Completion.CompletionOptions
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Language.PureScript.Ide.Completion.CompletionOptions
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   GHC.Types.False) -}
0e7f3deae13e530e935e24bb8ea5dae0
  getCompletions ::
    [Language.PureScript.Ide.Filter.Filter]
    -> Language.PureScript.Ide.Matcher.Matcher
         Language.PureScript.Ide.Types.IdeDeclarationAnn
    -> Language.PureScript.Ide.Completion.CompletionOptions
    -> [Language.PureScript.Ide.Completion.Module]
    -> [Language.PureScript.Ide.Types.Completion]
  {- Arity: 4,
     Strictness: <L,1*U><L,1*C1(U)><S(SL),1*U(1*U,1*U)><L,1*U>,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: [Language.PureScript.Ide.Filter.Filter])
                   (w1 :: Language.PureScript.Ide.Matcher.Matcher
                            Language.PureScript.Ide.Types.IdeDeclarationAnn)
                   (w2 :: Language.PureScript.Ide.Completion.CompletionOptions)
                   (w3 :: [Language.PureScript.Ide.Completion.Module]) ->
                 case w2 of ww { Language.PureScript.Ide.Completion.CompletionOptions ww1 ww2 ->
                 Language.PureScript.Ide.Completion.$wgetCompletions
                   w
                   w1
                   ww1
                   ww2
                   w3 }) -}
e9af73a238cd90620785c926cffb3c27
  getCompletions_go ::
    [(Language.PureScript.Names.ModuleName,
      [Language.PureScript.Ide.Types.IdeDeclarationAnn])]
    -> [Language.PureScript.Ide.Types.Match
          Language.PureScript.Ide.Types.IdeDeclarationAnn]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
19c92bdbff86bade41e423e8fc1e815c
  getExactCompletions ::
    Data.Text.Internal.Text
    -> [Language.PureScript.Ide.Filter.Filter]
    -> [Language.PureScript.Ide.Completion.Module]
    -> [Language.PureScript.Ide.Types.Completion]
  {- Arity: 3, Strictness: <L,U(U,U,U)><L,U><L,1*U>,
     Unfolding: (\ (search :: Data.Text.Internal.Text)
                   (filters :: [Language.PureScript.Ide.Filter.Filter])
                   (modules :: [Language.PureScript.Ide.Completion.Module]) ->
                 GHC.Base.map
                   @ (Language.PureScript.Ide.Types.Match
                        Language.PureScript.Ide.Types.IdeDeclarationAnn)
                   @ Language.PureScript.Ide.Types.Completion
                   Language.PureScript.Ide.Completion.getExactCompletions1
                   (Language.PureScript.Ide.Completion.getCompletions_go
                      (Language.PureScript.Ide.Filter.applyFilters1
                         (GHC.Types.:
                            @ Language.PureScript.Ide.Filter.Filter
                            (Language.PureScript.Ide.Filter.equalityFilter_g search)
                              `cast`
                            (Sym (Data.Semigroup.Internal.N:Endo[0]
                                      <[Language.PureScript.Ide.Filter.Module]>_R) ; Sym (Language.PureScript.Ide.Filter.N:Filter[0]))
                            filters)
                         modules))) -}
095202bff5b0145937a363335f36eedd
  getExactCompletions1 ::
    Language.PureScript.Ide.Types.Match
      Language.PureScript.Ide.Types.IdeDeclarationAnn
    -> Language.PureScript.Ide.Types.Completion
  {- Arity: 1, Strictness: <S(LS),1*U(U,1*U(U(U,A,U,U),1*U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Ide.Types.Match
                           Language.PureScript.Ide.Types.IdeDeclarationAnn) ->
                 case x `cast`
                      (Language.PureScript.Ide.Types.N:Match[0] <Language.PureScript.Ide.Types.IdeDeclarationAnn>_N) of wild { (,) moduleName ds ->
                 Language.PureScript.Ide.Completion.completionFromMatch
                   (wild
                      `cast`
                    (Sym (Language.PureScript.Ide.Types.N:Match[0]) <Language.PureScript.Ide.Types.IdeDeclarationAnn>_N),
                    GHC.Types.:
                      @ Language.PureScript.Names.ModuleName
                      moduleName
                      (GHC.Types.[] @ Language.PureScript.Names.ModuleName)) }) -}
d1b777121f96261bd304a2e74bbac0eb
  getExactMatches ::
    Data.Text.Internal.Text
    -> [Language.PureScript.Ide.Filter.Filter]
    -> [Language.PureScript.Ide.Completion.Module]
    -> [Language.PureScript.Ide.Types.Match
          Language.PureScript.Ide.Types.IdeDeclarationAnn]
  {- Arity: 3, Strictness: <L,U(U,U,U)><L,U><L,1*U>,
     Unfolding: (\ (search :: Data.Text.Internal.Text)
                   (filters :: [Language.PureScript.Ide.Filter.Filter])
                   (modules :: [Language.PureScript.Ide.Completion.Module]) ->
                 Language.PureScript.Ide.Completion.getCompletions_go
                   (Language.PureScript.Ide.Filter.applyFilters1
                      (GHC.Types.:
                         @ Language.PureScript.Ide.Filter.Filter
                         (Language.PureScript.Ide.Filter.equalityFilter_g search)
                           `cast`
                         (Sym (Data.Semigroup.Internal.N:Endo[0]
                                   <[Language.PureScript.Ide.Filter.Module]>_R) ; Sym (Language.PureScript.Ide.Filter.N:Filter[0]))
                         filters)
                      modules)) -}
aeadbbab616739dcdebe040ecad49adb
  simpleExport ::
    Language.PureScript.Ide.Types.Match a
    -> (Language.PureScript.Ide.Types.Match a,
        [Language.PureScript.Names.ModuleName])
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (match :: Language.PureScript.Ide.Types.Match a) ->
                 case match
                        `cast`
                      (Language.PureScript.Ide.Types.N:Match[0] <a>_N) of wild { (,) moduleName ds ->
                 (wild
                    `cast`
                  (Sym (Language.PureScript.Ide.Types.N:Match[0]) <a>_N),
                  GHC.Types.:
                    @ Language.PureScript.Names.ModuleName
                    moduleName
                    (GHC.Types.[] @ Language.PureScript.Names.ModuleName)) }) -}
instance GHC.Classes.Eq [Language.PureScript.Ide.Completion.Namespaced]
  = Language.PureScript.Ide.Completion.$fEqNamespaced
instance Data.Aeson.Types.FromJSON.FromJSON [Language.PureScript.Ide.Completion.CompletionOptions]
  = Language.PureScript.Ide.Completion.$fFromJSONCompletionOptions
instance GHC.Classes.Ord [Language.PureScript.Ide.Completion.Namespaced]
  = Language.PureScript.Ide.Completion.$fOrdNamespaced
instance GHC.Show.Show [Language.PureScript.Ide.Completion.Namespaced]
  = Language.PureScript.Ide.Completion.$fShowNamespaced
"SPEC $c/= @ Text" forall ($dEq :: GHC.Classes.Eq
                                     Data.Text.Internal.Text)
  Language.PureScript.Ide.Completion.$fEqNamespaced_$c/= @ Data.Text.Internal.Text
                                                         $dEq
  = Language.PureScript.Ide.Completion.$fEqNamespaced_$s$c/=
"SPEC $c< @ Text" forall ($dOrd :: GHC.Classes.Ord
                                     Data.Text.Internal.Text)
  Language.PureScript.Ide.Completion.$fOrdNamespaced_$c< @ Data.Text.Internal.Text
                                                         $dOrd
  = Language.PureScript.Ide.Completion.$fOrdNamespaced_$s$c<
"SPEC $c<= @ Text" forall ($dOrd :: GHC.Classes.Ord
                                      Data.Text.Internal.Text)
  Language.PureScript.Ide.Completion.$fOrdNamespaced_$c<= @ Data.Text.Internal.Text
                                                          $dOrd
  = Language.PureScript.Ide.Completion.$fOrdNamespaced_$s$c<=
"SPEC $c== @ Text" forall ($dEq :: GHC.Classes.Eq
                                     Data.Text.Internal.Text)
  Language.PureScript.Ide.Completion.$fEqNamespaced_$c== @ Data.Text.Internal.Text
                                                         $dEq
  = Language.PureScript.Ide.Completion.$fEqNamespaced_$s$c==
"SPEC $c>= @ Text" forall ($dOrd :: GHC.Classes.Ord
                                      Data.Text.Internal.Text)
  Language.PureScript.Ide.Completion.$fOrdNamespaced_$c>= @ Data.Text.Internal.Text
                                                          $dOrd
  = Language.PureScript.Ide.Completion.$fOrdNamespaced_$s$c>=
"SPEC $ccompare @ Text" forall ($dOrd :: GHC.Classes.Ord
                                           Data.Text.Internal.Text)
  Language.PureScript.Ide.Completion.$fOrdNamespaced_$ccompare @ Data.Text.Internal.Text
                                                               $dOrd
  = Language.PureScript.Ide.Completion.$fOrdNamespaced_$s$ccompare
"SPEC $cmax @ Text" forall ($dOrd :: GHC.Classes.Ord
                                       Data.Text.Internal.Text)
  Language.PureScript.Ide.Completion.$fOrdNamespaced_$cmax @ Data.Text.Internal.Text
                                                           $dOrd
  = Language.PureScript.Ide.Completion.$fOrdNamespaced_$s$cmax
"SPEC $cmin @ Text" forall ($dOrd :: GHC.Classes.Ord
                                       Data.Text.Internal.Text)
  Language.PureScript.Ide.Completion.$fOrdNamespaced_$cmin @ Data.Text.Internal.Text
                                                           $dOrd
  = Language.PureScript.Ide.Completion.$fOrdNamespaced_$s$cmin
"SPEC $cp1Ord @ Text" forall ($dOrd :: GHC.Classes.Ord
                                         Data.Text.Internal.Text)
  Language.PureScript.Ide.Completion.$fOrdNamespaced_$cp1Ord @ Data.Text.Internal.Text
                                                             $dOrd
  = Language.PureScript.Ide.Completion.$fEqNamespaced_$s$fEqNamespaced
"SPEC $fEqNamespaced @ Text" forall ($dEq :: GHC.Classes.Eq
                                               Data.Text.Internal.Text)
  Language.PureScript.Ide.Completion.$fEqNamespaced @ Data.Text.Internal.Text
                                                    $dEq
  = Language.PureScript.Ide.Completion.$fEqNamespaced_$s$fEqNamespaced
"SPEC $fOrdNamespaced @ Text" forall ($dOrd :: GHC.Classes.Ord
                                                 Data.Text.Internal.Text)
  Language.PureScript.Ide.Completion.$fOrdNamespaced @ Data.Text.Internal.Text
                                                     $dOrd
  = Language.PureScript.Ide.Completion.$fOrdNamespaced_$s$fOrdNamespaced
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

