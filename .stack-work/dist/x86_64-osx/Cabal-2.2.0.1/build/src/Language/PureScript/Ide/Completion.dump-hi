
==================== FINAL INTERFACE ====================
2018-11-30 20:48:35.154053 UTC

interface purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Ide.Completion 8043
  interface hash: 5932f5d71bfa63fb0369280fdce68fd7
  ABI hash: cacef853b689a5323952cf1c412e7913
  export-list hash: ba0919f24e3bbe8693ca0f6d3d010d2a
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 5ca2b6297314332f988f1cde11325eb2
  opt_hash: 2c98c95d41c045ae9c2fb565ec8aabc6
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Language.PureScript.Ide.Completion.applyCompletionOptions
  Language.PureScript.Ide.Completion.completionFromMatch
  Language.PureScript.Ide.Completion.defaultCompletionOptions
  Language.PureScript.Ide.Completion.getCompletions
  Language.PureScript.Ide.Completion.getExactCompletions
  Language.PureScript.Ide.Completion.getExactMatches
  Language.PureScript.Ide.Completion.simpleExport
  Language.PureScript.Ide.Completion.CompletionOptions{Language.PureScript.Ide.Completion.CompletionOptions coGroupReexports coMaxResults}
module dependencies: Control.Monad.Logger Control.Monad.Supply
                     Control.Monad.Supply.Class Language.PureScript
                     Language.PureScript.AST Language.PureScript.AST.Binders
                     Language.PureScript.AST.Declarations
                     Language.PureScript.AST.Exported Language.PureScript.AST.Literals
                     Language.PureScript.AST.Operators Language.PureScript.AST.SourcePos
                     Language.PureScript.AST.Traversals Language.PureScript.Bundle
                     Language.PureScript.CodeGen.JS
                     Language.PureScript.CodeGen.JS.Common
                     Language.PureScript.CodeGen.JS.Printer Language.PureScript.Comments
                     Language.PureScript.Constants Language.PureScript.CoreFn
                     Language.PureScript.CoreFn.Ann Language.PureScript.CoreFn.Binders
                     Language.PureScript.CoreFn.Desugar Language.PureScript.CoreFn.Expr
                     Language.PureScript.CoreFn.Meta Language.PureScript.CoreFn.Module
                     Language.PureScript.CoreFn.Optimizer
                     Language.PureScript.CoreFn.ToJSON
                     Language.PureScript.CoreFn.Traversals
                     Language.PureScript.CoreImp.AST
                     Language.PureScript.CoreImp.Optimizer
                     Language.PureScript.CoreImp.Optimizer.Blocks
                     Language.PureScript.CoreImp.Optimizer.Common
                     Language.PureScript.CoreImp.Optimizer.Inliner
                     Language.PureScript.CoreImp.Optimizer.MagicDo
                     Language.PureScript.CoreImp.Optimizer.TCO
                     Language.PureScript.CoreImp.Optimizer.Unused
                     Language.PureScript.Crash Language.PureScript.Environment
                     Language.PureScript.Errors Language.PureScript.Errors.JSON
                     Language.PureScript.Externs Language.PureScript.Ide.Error
                     Language.PureScript.Ide.Filter
                     Language.PureScript.Ide.Filter.Declaration
                     Language.PureScript.Ide.Logging Language.PureScript.Ide.Matcher
                     Language.PureScript.Ide.Types Language.PureScript.Ide.Util
                     Language.PureScript.Kinds Language.PureScript.Label
                     Language.PureScript.Linter Language.PureScript.Linter.Exhaustive
                     Language.PureScript.Linter.Imports Language.PureScript.Make
                     Language.PureScript.Make.Actions Language.PureScript.Make.BuildPlan
                     Language.PureScript.Make.Monad
                     Language.PureScript.ModuleDependencies Language.PureScript.Names
                     Language.PureScript.Options Language.PureScript.PSString
                     Language.PureScript.Parser Language.PureScript.Parser.Common
                     Language.PureScript.Parser.Declarations
                     Language.PureScript.Parser.Kinds Language.PureScript.Parser.Lexer
                     Language.PureScript.Parser.State Language.PureScript.Parser.Types
                     Language.PureScript.Pretty Language.PureScript.Pretty.Common
                     Language.PureScript.Pretty.Kinds Language.PureScript.Pretty.Types
                     Language.PureScript.Pretty.Values
                     Language.PureScript.Publish.BoxesHelpers
                     Language.PureScript.Renamer Language.PureScript.Sugar
                     Language.PureScript.Sugar.AdoNotation
                     Language.PureScript.Sugar.BindingGroups
                     Language.PureScript.Sugar.CaseDeclarations
                     Language.PureScript.Sugar.DoNotation
                     Language.PureScript.Sugar.LetPattern
                     Language.PureScript.Sugar.Names
                     Language.PureScript.Sugar.Names.Common
                     Language.PureScript.Sugar.Names.Env
                     Language.PureScript.Sugar.Names.Exports
                     Language.PureScript.Sugar.Names.Imports
                     Language.PureScript.Sugar.ObjectWildcards
                     Language.PureScript.Sugar.Operators
                     Language.PureScript.Sugar.Operators.Binders
                     Language.PureScript.Sugar.Operators.Common
                     Language.PureScript.Sugar.Operators.Expr
                     Language.PureScript.Sugar.Operators.Types
                     Language.PureScript.Sugar.TypeClasses
                     Language.PureScript.Sugar.TypeClasses.Deriving
                     Language.PureScript.Sugar.TypeDeclarations
                     Language.PureScript.Traversals Language.PureScript.TypeChecker
                     Language.PureScript.TypeChecker.Entailment
                     Language.PureScript.TypeChecker.Kinds
                     Language.PureScript.TypeChecker.Monad
                     Language.PureScript.TypeChecker.Skolems
                     Language.PureScript.TypeChecker.Subsumption
                     Language.PureScript.TypeChecker.Synonyms
                     Language.PureScript.TypeChecker.TypeSearch
                     Language.PureScript.TypeChecker.Types
                     Language.PureScript.TypeChecker.Unify
                     Language.PureScript.TypeClassDictionaries Language.PureScript.Types
                     Paths_purescript System.IO.UTF8
package dependencies: aeson-1.3.1.1 aeson-better-errors-0.9.1.0
                      ansi-terminal-0.8.0.4 array-0.5.2.0 async-2.2.1 attoparsec-0.13.2.2
                      auto-update-0.1.4 base-4.11.1.0 base-compat-0.10.4 binary-0.8.5.1
                      blaze-builder-0.4.1.0 boxes-0.1.5 bytestring-0.10.8.2 clock-0.7.2
                      colour-2.3.4 conduit-1.3.0.3 conduit-extra-1.3.0
                      containers-0.5.11.0 data-ordlist-0.4.7.0 deepseq-1.4.3.0
                      directory-1.3.1.5 dlist-0.8.0.4 easy-file-0.2.2
                      edit-distance-0.2.2.1 exceptions-0.10.0 fast-logger-2.4.11
                      filepath-1.4.2 ghc-boot-th-8.4.3 ghc-prim-0.5.2.0 hashable-1.2.7.0
                      integer-gmp-1.0.2.0 integer-logarithms-1.0.2.1
                      language-javascript-0.6.0.11 lifted-base-0.2.3.12 microlens-0.4.9.1
                      microlens-ghc-0.4.9 microlens-mtl-0.1.11.1
                      microlens-platform-0.3.10 microlens-th-0.4.2.1
                      monad-control-1.0.2.3 monad-logger-0.3.28.5 monad-loops-0.4.3
                      mtl-2.2.2 old-locale-1.0.0.7 old-time-1.1.0.3 parallel-3.2.1.1
                      parsec-3.1.13.0 pattern-arrows-0.0.2 pretty-1.1.3.6
                      primitive-0.6.3.0 protolude-0.2.2 random-1.1 regex-base-0.93.2
                      regex-tdfa-1.2.3.1 resourcet-1.2.1 safe-0.3.17 scientific-0.3.6.2
                      sourcemap-0.1.6 split-0.2.3.3 stm-2.4.5.0 stm-chans-3.0.0.4
                      stringsearch-0.3.6.6 syb-0.7 tagged-0.8.5 template-haskell-2.13.0.0
                      text-1.2.3.0 th-abstraction-0.2.8.0 time-1.8.0.2
                      time-locale-compat-0.1.1.4 transformers-0.5.5.0
                      transformers-base-0.4.5.2 unix-2.7.2.2 unix-time-0.3.8
                      unliftio-core-0.1.1.0 unordered-containers-0.2.9.0
                      utf8-string-1.0.1.1 uuid-types-1.0.3 vector-0.12.0.1
orphans: regex-tdfa-1.2.3.1:Text.Regex.TDFA.ByteString
         regex-tdfa-1.2.3.1:Text.Regex.TDFA.ByteString.Lazy
         regex-tdfa-1.2.3.1:Text.Regex.TDFA.Sequence
         regex-tdfa-1.2.3.1:Text.Regex.TDFA.String
         regex-base-0.93.2:Text.Regex.Base.Context
         unix-time-0.3.8:Data.UnixTime.Diff syb-0.7:Data.Generics.Instances
         colour-2.3.4:Data.Colour stm-2.4.5.0:Control.Monad.STM
         attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         microlens-platform-0.3.10:Lens.Micro.Platform
         microlens-ghc-0.4.9:Lens.Micro.GHC
         hashable-1.2.7.0:Data.Hashable.Generic
         vector-0.12.0.1:Data.Vector.Unboxed
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.5.0:Control.Monad.Trans.Error
         text-1.2.3.0:Data.Text.Lazy text-1.2.3.0:Data.Text
         binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: aeson-1.3.1.1:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         clock-0.7.2:System.Clock
                         conduit-1.3.0.3:Data.Conduit.Internal.Conduit
                         conduit-1.3.0.3:Data.Conduit.Internal.Pipe
                         containers-0.5.11.0:Data.Graph
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         dlist-0.8.0.4:Data.DList ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         microlens-0.4.9.1:Lens.Micro.Internal
                         microlens-ghc-0.4.9:Lens.Micro.GHC
                         microlens-mtl-0.1.11.1:Lens.Micro.Mtl.Internal
                         microlens-platform-0.3.10:Lens.Micro.Platform
                         monad-control-1.0.2.3:Control.Monad.Trans.Control
                         monad-logger-0.3.28.5:Control.Monad.Logger
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Control.Monad.Logger
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.AST.Declarations
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.AST.Operators
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.AST.SourcePos
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Environment
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Ide.Types
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Kinds
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Label
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Make.Monad
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Names
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.PSString
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.TypeClassDictionaries
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Types
                         resourcet-1.2.1:Control.Monad.Trans.Resource.Internal
                         tagged-0.8.5:Data.Tagged
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
                         th-abstraction-0.2.8.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  aeson-1.3.1.1:Data.Aeson 108dfb08de41cf77aad4693ac1dc3d44
import  -/  aeson-1.3.1.1:Data.Aeson.Types.FromJSON 1ea0c919856f0d29f12e53cd074d532c
import  -/  base-4.11.1.0:Data.Bifunctor a977586bad544f929bb5bc7f139aaa1c
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.Function 6e6aae9442025aeeb92a909c1bbc3fca
import  -/  base-4.11.1.0:Data.Functor f522c3501272159820fd6f242510732f
import  -/  base-4.11.1.0:Data.Maybe 409c3da2b142470b68be39ce1d97a9f7
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  containers-0.5.11.0:Data.Map 0dbdaec812ef695a364aa6c69e7f7d53
import  -/  containers-0.5.11.0:Data.Map.Internal 0150e210d0ae8df0f3a0669d5e32d8fa
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  microlens-0.4.9.1:Lens.Micro 962434009a31a5b07a9c325f04604c4d
import  -/  microlens-platform-0.3.10:Lens.Micro.Platform 0a8b1a3c754e3254d224cc9602b42f64
import  -/  protolude-0.2.2:Protolude 2c2d16096c8a60f59f646a3b93b0eb7b
import  -/  Language.PureScript 055283757289375c92e0f1e11d744c0e
  exports: 01fc85db00ce4cf253ba5c16e07330e5
import  -/  Language.PureScript.AST.Operators be736e316462ef3abce53315e7361a17
  Infix 48da7304e58a5ef64ef55f219a639205
  Infixl c355232652b8d07dc6f4cc3d968cd69f
  Infixr e374de6c2504281f30a71346ea589bed
import  -/  Language.PureScript.Ide.Error cef67e67cd2fefdfbab7f8e5964385b2
  exports: 4a39dd2ee53e53946ad697fd09af3e2c
  prettyPrintTypeSingleLine 3ac75c5811aa521a1fe55577b7eb5e0b
import  -/  Language.PureScript.Ide.Filter 50b2d29cb1abfaa784b156240c68fe4c
  exports: 637f60371a0d3b30fa27cd80b15c4708
  Filter d16290b775e24aa2734913a868cf34af
  applyFilters 90db5f2c90ec17be4334327f7951c7f9
  equalityFilter 02055be79f512f544fd0364f8ac2fb3d
import  -/  Language.PureScript.Ide.Matcher 0dfba958f56e00a92b8d9eb1c6907526
  exports: 4c1b64e21890548eca0e7d14520c818a
  Matcher ad7f74fcedc52803bc74a52fc968be5a
  runMatcher 4eebcc5fa94f525a18daf0999880a345
import  -/  Language.PureScript.Ide.Types d9d9fd4c2b6a1fdeece731a5e8479937
  exports: dd47afbd66baea5bbcdd5e2641556a91
  Completion c5284bec4e271d8e6bc25c40330b406d
  Completion 1dc8499524dd705daadd896960727d73
  IdeDeclDataConstructor 79fe65acfb276d9846795832f8cd5967
  IdeDeclKind f96b042ff6b5e4c79ef566bb7be1b354
  IdeDeclType 57208577780a76f017987bca4d2b2560
  IdeDeclTypeClass 42ebe2284da9669a4b1d687dc16c646e
  IdeDeclTypeOperator df9f5cb0624ba5f26f443c10cd955133
  IdeDeclTypeSynonym 28ae0a9332e5ab733f2495e6a4ce73c4
  IdeDeclValue 1a020d12f4b3babbfaa3f10dcf94e2d1
  IdeDeclValueOperator 54fcb442fafa92ac00e4505c9d086275
  IdeDeclarationAnn fcd7162a0948180de725959709c4eb31
  IdeDeclarationAnn 9e61215f32f4caed313e4d158f96dea0
  IdeNamespace bf12ce78c741411b8db21a537727174e
  IdeTypeOperator d1f800e3ed04b4786cc09f71fe5bc359
  IdeValueOperator eac7ac3efbcef67fef0264276ebbe4f4
  Match e711bd126b1395bd6790d29fba7bd7d1
  Match d599e8d66b83cee61665ee06fcb20991
  _annDocumentation 9e61215f32f4caed313e4d158f96dea0
  _annLocation 9e61215f32f4caed313e4d158f96dea0
  _annTypeAnnotation 9e61215f32f4caed313e4d158f96dea0
  annExportedFrom f7c30e8a6a1c7f1139386b04b04850df
  complDocumentation 1dc8499524dd705daadd896960727d73
  complExpandedType 1dc8499524dd705daadd896960727d73
  complExportedFrom 1dc8499524dd705daadd896960727d73
  complIdentifier 1dc8499524dd705daadd896960727d73
  complLocation 1dc8499524dd705daadd896960727d73
  complModule 1dc8499524dd705daadd896960727d73
  complType 1dc8499524dd705daadd896960727d73
  idaAnnotation fbbb7f9df853960d494f789a81b28c63
  ideDtorName 4b0e35dffdadad83f0994bd143209fc9
  ideDtorType 88238d24f2d1a10b2a977ac1a1991867
  ideSynonymName f05596230d9dbc39b510041107fb41e9
  ideSynonymType c2621955a65ce14df2bceecf2e4de207
  ideTCKind 5ed28d368ffc9b569c905cbf0b9b14e9
  ideTCName 66e9343e4eda36974b61203c0546ec1e
  ideTypeKind 41b7daeb2ecc3435543b5da07ba15ee3
  ideTypeName 07a28cae9afd06eac4ebbeba9047afee
  ideValueIdent 47a1c1011665faf42f703f8df96ff6f0
  ideValueType 9e0e4761099915fe4c8b2cf03ac5d1ce
import  -/  Language.PureScript.Ide.Util 28758b8888c6917067d0548bee7740c5
  exports: 984706b8dc3d9ad9746cf1d4cf6cd995
  identT bc899cf7c477c03712c3c784439d3cf0
  identifierFromIdeDeclaration 587930a1f9803f80a2100aa4013f1b14
  namespaceForDeclaration fb8520067cf09d3b9d73902667de2e29
  properNameT eeb3262d1e87ea333fe2a7b97d12fc1c
  typeOperatorAliasT 2a65deac9caa013e977daa9167351d5c
  valueOperatorAliasT 527b691d59856bb8fb12a41515fac9a3
import  -/  Language.PureScript.Names b3bf151840f3e8f2eb61eff186432886
  ModuleName 5a70062bbdf29e6dc659ad8bf5326b50
  runModuleName e07c63fa3ece350e6976663ef993edbb
  runOpName 1522672b880b192c6e05e6cf8a45712d
  runProperName 29f101e190cc99df85623423972e606f
import  -/  Language.PureScript.Pretty.Kinds 61520f24125a18b860156c88cb953ccd
  prettyPrintKind 7cb5c666396112b6de1d2e646e595fab
import  -/  text-1.2.3.0:Data.Text 7daa7e6c9b39d8cc1679e5ec5c64d2be
import  -/  text-1.2.3.0:Data.Text.Internal 30a0a123f71f63b26cd34c6b24f23411
3969089272cf40171e488f61f47381e0
  $fEqNamespaced ::
    GHC.Classes.Eq a =>
    GHC.Classes.Eq (Language.PureScript.Ide.Completion.Namespaced a)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Classes.Eq a).
                  @ (Language.PureScript.Ide.Completion.Namespaced a)
                  (Language.PureScript.Ide.Completion.$fEqNamespaced_$c== @ a v)
                  (Language.PureScript.Ide.Completion.$fEqNamespaced_$c/= @ a v) -}
3969089272cf40171e488f61f47381e0
  $fEqNamespaced_$c/= ::
    GHC.Classes.Eq a =>
    Language.PureScript.Ide.Completion.Namespaced a
    -> Language.PureScript.Ide.Completion.Namespaced a
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S(SL),1*U(1*U,U)><S(SL),1*U(1*U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ a
                   ($dEq :: GHC.Classes.Eq a)
                   (x :: Language.PureScript.Ide.Completion.Namespaced a)
                   (y :: Language.PureScript.Ide.Completion.Namespaced a) ->
                 case Language.PureScript.Ide.Completion.$fEqNamespaced_$c==
                        @ a
                        $dEq
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
3969089272cf40171e488f61f47381e0
  $fEqNamespaced_$c== ::
    GHC.Classes.Eq a =>
    Language.PureScript.Ide.Completion.Namespaced a
    -> Language.PureScript.Ide.Completion.Namespaced a
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S(SL),1*U(1*U,U)><S(SL),1*U(1*U,U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: GHC.Classes.Eq a)
                   (w1 :: Language.PureScript.Ide.Completion.Namespaced a)
                   (w2 :: Language.PureScript.Ide.Completion.Namespaced a) ->
                 case w1 of ww { Language.PureScript.Ide.Completion.Namespaced ww1 ww2 ->
                 case w2 of ww3 { Language.PureScript.Ide.Completion.Namespaced ww4 ww5 ->
                 Language.PureScript.Ide.Completion.$w$c==
                   @ a
                   w
                   ww1
                   ww2
                   ww4
                   ww5 } }) -}
3969089272cf40171e488f61f47381e0
  $fEqNamespaced_$s$c/= ::
    Language.PureScript.Ide.Completion.Namespaced
      Data.Text.Internal.Text
    -> Language.PureScript.Ide.Completion.Namespaced
         Data.Text.Internal.Text
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U(U,U,U))><S(SL),1*U(1*U,1*U(U,U,U))>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Ide.Completion.Namespaced
                           Data.Text.Internal.Text)
                   (y :: Language.PureScript.Ide.Completion.Namespaced
                           Data.Text.Internal.Text) ->
                 case x of wild { Language.PureScript.Ide.Completion.Namespaced a1 a2 ->
                 case y of wild1 { Language.PureScript.Ide.Completion.Namespaced b1 b2 ->
                 case a1 of wild2 {
                   Language.PureScript.Ide.Types.IdeNSValue
                   -> case b1 of wild3 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.Ide.Types.IdeNSValue
                        -> case a2 of wild4 { Data.Text.Internal.Text dt dt1 dt2 ->
                           case b2 of wild5 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                           case GHC.Classes.eqInt
                                  (GHC.Types.I# dt2)
                                  (GHC.Types.I# dt5) of wild6 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True
                             -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.ByteArray#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.State# GHC.Prim.RealWorld
                                                               -> (# GHC.Prim.State#
                                                                       GHC.Prim.RealWorld,
                                                                     GHC.Prim.Int# #)}
                                       dt
                                       (GHC.Prim.int2Word# dt1)
                                       dt3
                                       (GHC.Prim.int2Word# dt4)
                                       (GHC.Prim.int2Word# dt2)
                                       GHC.Prim.realWorld# of wild7 { (#,#) ds2 ds3 ->
                                case GHC.Int.eqInt32
                                       (GHC.Int.I32# (GHC.Prim.narrow32Int# ds3))
                                       (GHC.Int.I32# 0#) of wild8 {
                                  GHC.Types.False -> GHC.Types.True
                                  GHC.Types.True -> GHC.Types.False } } } } } }
                   Language.PureScript.Ide.Types.IdeNSType
                   -> case b1 of wild3 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.Ide.Types.IdeNSType
                        -> case a2 of wild4 { Data.Text.Internal.Text dt dt1 dt2 ->
                           case b2 of wild5 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                           case GHC.Classes.eqInt
                                  (GHC.Types.I# dt2)
                                  (GHC.Types.I# dt5) of wild6 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True
                             -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.ByteArray#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.State# GHC.Prim.RealWorld
                                                               -> (# GHC.Prim.State#
                                                                       GHC.Prim.RealWorld,
                                                                     GHC.Prim.Int# #)}
                                       dt
                                       (GHC.Prim.int2Word# dt1)
                                       dt3
                                       (GHC.Prim.int2Word# dt4)
                                       (GHC.Prim.int2Word# dt2)
                                       GHC.Prim.realWorld# of wild7 { (#,#) ds2 ds3 ->
                                case GHC.Int.eqInt32
                                       (GHC.Int.I32# (GHC.Prim.narrow32Int# ds3))
                                       (GHC.Int.I32# 0#) of wild8 {
                                  GHC.Types.False -> GHC.Types.True
                                  GHC.Types.True -> GHC.Types.False } } } } } }
                   Language.PureScript.Ide.Types.IdeNSKind
                   -> case b1 of wild3 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.Ide.Types.IdeNSKind
                        -> case a2 of wild4 { Data.Text.Internal.Text dt dt1 dt2 ->
                           case b2 of wild5 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                           case GHC.Classes.eqInt
                                  (GHC.Types.I# dt2)
                                  (GHC.Types.I# dt5) of wild6 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True
                             -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.ByteArray#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.State# GHC.Prim.RealWorld
                                                               -> (# GHC.Prim.State#
                                                                       GHC.Prim.RealWorld,
                                                                     GHC.Prim.Int# #)}
                                       dt
                                       (GHC.Prim.int2Word# dt1)
                                       dt3
                                       (GHC.Prim.int2Word# dt4)
                                       (GHC.Prim.int2Word# dt2)
                                       GHC.Prim.realWorld# of wild7 { (#,#) ds2 ds3 ->
                                case GHC.Int.eqInt32
                                       (GHC.Int.I32# (GHC.Prim.narrow32Int# ds3))
                                       (GHC.Int.I32# 0#) of wild8 {
                                  GHC.Types.False -> GHC.Types.True
                                  GHC.Types.True -> GHC.Types.False } } } } } } } } }) -}
3969089272cf40171e488f61f47381e0
  $fEqNamespaced_$s$c== ::
    Language.PureScript.Ide.Completion.Namespaced
      Data.Text.Internal.Text
    -> Language.PureScript.Ide.Completion.Namespaced
         Data.Text.Internal.Text
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U(U,U,U))><S(SL),1*U(1*U,1*U(U,U,U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Completion.Namespaced
                           Data.Text.Internal.Text)
                   (w1 :: Language.PureScript.Ide.Completion.Namespaced
                            Data.Text.Internal.Text) ->
                 case w of ww { Language.PureScript.Ide.Completion.Namespaced ww1 ww2 ->
                 case w1 of ww3 { Language.PureScript.Ide.Completion.Namespaced ww4 ww5 ->
                 Language.PureScript.Ide.Completion.$w$s$c== ww1 ww2 ww4 ww5 } }) -}
3969089272cf40171e488f61f47381e0
  $fEqNamespaced_$s$fEqNamespaced ::
    GHC.Classes.Eq
      (Language.PureScript.Ide.Completion.Namespaced
         Data.Text.Internal.Text)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Ide.Completion.Namespaced
                       Data.Text.Internal.Text)
                  Language.PureScript.Ide.Completion.$fEqNamespaced_$s$c==
                  Language.PureScript.Ide.Completion.$fEqNamespaced_$s$c/= -}
de2aa8be3674d3c40e8c84b66b264dcd
  $fFromJSONCompletionOptions ::
    Data.Aeson.Types.FromJSON.FromJSON
      Language.PureScript.Ide.Completion.CompletionOptions
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Completion.CompletionOptions
                  Language.PureScript.Ide.Completion.$fFromJSONCompletionOptions_$cparseJSON
                  Language.PureScript.Ide.Completion.$fFromJSONCompletionOptions_$cparseJSONList -}
9f87739b4b9762bd2a7a07316478c7b5
  $fFromJSONCompletionOptions1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (", encountered "#) -}
fbfd053248223041e5230947a6abd1ce
  $fFromJSONCompletionOptions2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("[a]"#) -}
10388d60c9112f8240cccd43654ae7d4
  $fFromJSONCompletionOptions3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("expected "#) -}
de2aa8be3674d3c40e8c84b66b264dcd
  $fFromJSONCompletionOptions4 ::
    Data.Aeson.Types.Internal.Object
    -> Data.Aeson.Types.Internal.Parser
         Language.PureScript.Ide.Completion.CompletionOptions
  {- Arity: 1, Strictness: <L,U> -}
88be625c02b4286f910517fdb84b3a39
  $fFromJSONCompletionOptions5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Ide.Completion.$fFromJSONCompletionOptions6) -}
5bfe6cc7efbd47aa9c366e668a6b1e0b
  $fFromJSONCompletionOptions6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("CompletionOptions"#) -}
de2aa8be3674d3c40e8c84b66b264dcd
  $fFromJSONCompletionOptions_$cparseJSON ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         Language.PureScript.Ide.Completion.CompletionOptions
  {- Arity: 1,
     Unfolding: (Data.Aeson.Types.FromJSON.withObject
                   @ Language.PureScript.Ide.Completion.CompletionOptions
                   Language.PureScript.Ide.Completion.$fFromJSONCompletionOptions5
                   Language.PureScript.Ide.Completion.$fFromJSONCompletionOptions4) -}
de2aa8be3674d3c40e8c84b66b264dcd
  $fFromJSONCompletionOptions_$cparseJSONList ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         [Language.PureScript.Ide.Completion.CompletionOptions]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Data.Aeson.Types.Internal.Value) ->
                 case ds of wild {
                   DEFAULT
                   -> let {
                        msg19 :: GHC.Base.String
                        = GHC.CString.unpackAppendCString#
                            Language.PureScript.Ide.Completion.$fFromJSONCompletionOptions3
                            (GHC.CString.unpackAppendCString#
                               Language.PureScript.Ide.Completion.$fFromJSONCompletionOptions2
                               (GHC.CString.unpackAppendCString#
                                  Language.PureScript.Ide.Completion.$fFromJSONCompletionOptions1
                                  (case wild of wild1 {
                                     Data.Aeson.Types.Internal.Object ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList10
                                     Data.Aeson.Types.Internal.String ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList8
                                     Data.Aeson.Types.Internal.Number ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList6
                                     Data.Aeson.Types.Internal.Bool ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList4
                                     Data.Aeson.Types.Internal.Null
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList1 })))
                      } in
                      (\ @ f4 :: * -> *
                         @ r
                         (path :: Data.Aeson.Types.Internal.JSONPath)
                         (kf :: Data.Aeson.Types.Internal.Failure f4 r)
                         (_ks :: Data.Aeson.Types.Internal.Success
                                   [Language.PureScript.Ide.Completion.CompletionOptions] f4 r) ->
                       kf
                         (GHC.List.reverse @ Data.Aeson.Types.Internal.JSONPathElement path)
                         msg19)
                        `cast`
                      (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                <[Language.PureScript.Ide.Completion.CompletionOptions]>_R))
                   Data.Aeson.Types.Internal.Array a2
                   -> case a2 of wild1 { Data.Vector.Vector dt dt1 dt2 ->
                      letrec {
                        $wgo1 :: GHC.Prim.Int# -> [Data.Aeson.Types.Internal.Value]
                          {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                        = \ (ww :: GHC.Prim.Int#) ->
                          case GHC.Prim.>=# ww dt1 of lwild {
                            DEFAULT
                            -> case GHC.Prim.indexArray#
                                      @ Data.Aeson.Types.Internal.Value
                                      dt2
                                      (GHC.Prim.+# dt ww) of ds3 { Unit# ipv ->
                               GHC.Types.:
                                 @ Data.Aeson.Types.Internal.Value
                                 ipv
                                 ($wgo1 (GHC.Prim.+# ww 1#)) }
                            1# -> GHC.Types.[] @ Data.Aeson.Types.Internal.Value }
                      } in
                      Language.PureScript.Ide.Completion.$fFromJSONCompletionOptions_go
                        0#
                        ($wgo1 0#) } }) -}
de2aa8be3674d3c40e8c84b66b264dcd
  $fFromJSONCompletionOptions_go ::
    GHC.Prim.Int#
    -> [Data.Aeson.Types.Internal.Value]
    -> Data.Aeson.Types.Internal.Parser
         [Language.PureScript.Ide.Completion.CompletionOptions]
  {- Arity: 2, Strictness: <L,U><S,1*U> -}
3969089272cf40171e488f61f47381e0
  $fOrdNamespaced ::
    GHC.Classes.Ord a =>
    GHC.Classes.Ord (Language.PureScript.Ide.Completion.Namespaced a)
  DFunId
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(1*U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Classes.Ord a).
                  @ (Language.PureScript.Ide.Completion.Namespaced a)
                  (Language.PureScript.Ide.Completion.$fOrdNamespaced_$cp1Ord @ a v)
                  (Language.PureScript.Ide.Completion.$fOrdNamespaced_$ccompare
                     @ a
                     v)
                  (Language.PureScript.Ide.Completion.$fOrdNamespaced_$c< @ a v)
                  (Language.PureScript.Ide.Completion.$fOrdNamespaced_$c<= @ a v)
                  (\ (a1 :: Language.PureScript.Ide.Completion.Namespaced a)
                     (b :: Language.PureScript.Ide.Completion.Namespaced a) ->
                   Language.PureScript.Ide.Completion.$fOrdNamespaced_$c< @ a v b a1)
                  (Language.PureScript.Ide.Completion.$fOrdNamespaced_$c>= @ a v)
                  (Language.PureScript.Ide.Completion.$fOrdNamespaced_$cmax @ a v)
                  (Language.PureScript.Ide.Completion.$fOrdNamespaced_$cmin @ a v) -}
3969089272cf40171e488f61f47381e0
  $fOrdNamespaced_$c< ::
    GHC.Classes.Ord a =>
    Language.PureScript.Ide.Completion.Namespaced a
    -> Language.PureScript.Ide.Completion.Namespaced a
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,A,1*C1(C1(U)),A,A,A,A,A)><S(SL),1*U(1*U,U)><S(SL),1*U(1*U,U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: GHC.Classes.Ord a)
                   (w1 :: Language.PureScript.Ide.Completion.Namespaced a)
                   (w2 :: Language.PureScript.Ide.Completion.Namespaced a) ->
                 case w1 of ww { Language.PureScript.Ide.Completion.Namespaced ww1 ww2 ->
                 case w2 of ww3 { Language.PureScript.Ide.Completion.Namespaced ww4 ww5 ->
                 Language.PureScript.Ide.Completion.$w$c<
                   @ a
                   w
                   ww1
                   ww2
                   ww4
                   ww5 } }) -}
3969089272cf40171e488f61f47381e0
  $fOrdNamespaced_$c<= ::
    GHC.Classes.Ord a =>
    Language.PureScript.Ide.Completion.Namespaced a
    -> Language.PureScript.Ide.Completion.Namespaced a
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,A,1*C1(C1(U)),A,A,A,A,A)><S(SL),1*U(1*U,U)><S(SL),1*U(1*U,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dOrd :: GHC.Classes.Ord a)
                   (a1 :: Language.PureScript.Ide.Completion.Namespaced a)
                   (b :: Language.PureScript.Ide.Completion.Namespaced a) ->
                 case Language.PureScript.Ide.Completion.$fOrdNamespaced_$c<
                        @ a
                        $dOrd
                        b
                        a1 of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
3969089272cf40171e488f61f47381e0
  $fOrdNamespaced_$c>= ::
    GHC.Classes.Ord a =>
    Language.PureScript.Ide.Completion.Namespaced a
    -> Language.PureScript.Ide.Completion.Namespaced a
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,A,1*C1(C1(U)),A,A,A,A,A)><S(SL),1*U(1*U,U)><S(SL),1*U(1*U,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dOrd :: GHC.Classes.Ord a)
                   (a1 :: Language.PureScript.Ide.Completion.Namespaced a)
                   (b :: Language.PureScript.Ide.Completion.Namespaced a) ->
                 case Language.PureScript.Ide.Completion.$fOrdNamespaced_$c<
                        @ a
                        $dOrd
                        a1
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
3969089272cf40171e488f61f47381e0
  $fOrdNamespaced_$ccompare ::
    GHC.Classes.Ord a =>
    Language.PureScript.Ide.Completion.Namespaced a
    -> Language.PureScript.Ide.Completion.Namespaced a
    -> GHC.Types.Ordering
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(C1(U)),A,A,A,A,A,A)><S(SL),1*U(1*U,U)><S(SL),1*U(1*U,U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: GHC.Classes.Ord a)
                   (w1 :: Language.PureScript.Ide.Completion.Namespaced a)
                   (w2 :: Language.PureScript.Ide.Completion.Namespaced a) ->
                 case w1 of ww { Language.PureScript.Ide.Completion.Namespaced ww1 ww2 ->
                 case w2 of ww3 { Language.PureScript.Ide.Completion.Namespaced ww4 ww5 ->
                 Language.PureScript.Ide.Completion.$w$ccompare
                   @ a
                   w
                   ww1
                   ww2
                   ww4
                   ww5 } }) -}
3969089272cf40171e488f61f47381e0
  $fOrdNamespaced_$cmax ::
    GHC.Classes.Ord a =>
    Language.PureScript.Ide.Completion.Namespaced a
    -> Language.PureScript.Ide.Completion.Namespaced a
    -> Language.PureScript.Ide.Completion.Namespaced a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,A,1*C1(C1(U)),A,A,A,A,A)><S(SL),1*U(U,U)><S(SL),1*U(U,U)>m,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dOrd :: GHC.Classes.Ord a)
                   (x :: Language.PureScript.Ide.Completion.Namespaced a)
                   (y :: Language.PureScript.Ide.Completion.Namespaced a) ->
                 case Language.PureScript.Ide.Completion.$fOrdNamespaced_$c<
                        @ a
                        $dOrd
                        y
                        x of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
3969089272cf40171e488f61f47381e0
  $fOrdNamespaced_$cmin ::
    GHC.Classes.Ord a =>
    Language.PureScript.Ide.Completion.Namespaced a
    -> Language.PureScript.Ide.Completion.Namespaced a
    -> Language.PureScript.Ide.Completion.Namespaced a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,A,1*C1(C1(U)),A,A,A,A,A)><S(SL),1*U(U,U)><S(SL),1*U(U,U)>m,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dOrd :: GHC.Classes.Ord a)
                   (x :: Language.PureScript.Ide.Completion.Namespaced a)
                   (y :: Language.PureScript.Ide.Completion.Namespaced a) ->
                 case Language.PureScript.Ide.Completion.$fOrdNamespaced_$c<
                        @ a
                        $dOrd
                        y
                        x of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
3969089272cf40171e488f61f47381e0
  $fOrdNamespaced_$cp1Ord ::
    GHC.Classes.Ord a =>
    GHC.Classes.Eq (Language.PureScript.Ide.Completion.Namespaced a)
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,1*U(1*U(C(C1(U)),A),A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ a ($dOrd :: GHC.Classes.Ord a) ->
                 Language.PureScript.Ide.Completion.$fEqNamespaced
                   @ a
                   (GHC.Classes.$p1Ord @ a $dOrd)) -}
3969089272cf40171e488f61f47381e0
  $fOrdNamespaced_$s$c< ::
    Language.PureScript.Ide.Completion.Namespaced
      Data.Text.Internal.Text
    -> Language.PureScript.Ide.Completion.Namespaced
         Data.Text.Internal.Text
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U(U,U,U))><S(SL),1*U(1*U,1*U(U,U,U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Completion.Namespaced
                           Data.Text.Internal.Text)
                   (w1 :: Language.PureScript.Ide.Completion.Namespaced
                            Data.Text.Internal.Text) ->
                 case w of ww { Language.PureScript.Ide.Completion.Namespaced ww1 ww2 ->
                 case w1 of ww3 { Language.PureScript.Ide.Completion.Namespaced ww4 ww5 ->
                 Language.PureScript.Ide.Completion.$w$s$c< ww1 ww2 ww4 ww5 } }) -}
52033f687a80b85cd800dcbc68d88d07
  $fOrdNamespaced_$s$c<= ::
    Language.PureScript.Ide.Completion.Namespaced
      Data.Text.Internal.Text
    -> Language.PureScript.Ide.Completion.Namespaced
         Data.Text.Internal.Text
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U(U,U,U))><S(SL),1*U(1*U,1*U(U,U,U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Completion.Namespaced
                           Data.Text.Internal.Text)
                   (w1 :: Language.PureScript.Ide.Completion.Namespaced
                            Data.Text.Internal.Text) ->
                 case w of ww { Language.PureScript.Ide.Completion.Namespaced ww1 ww2 ->
                 case w1 of ww3 { Language.PureScript.Ide.Completion.Namespaced ww4 ww5 ->
                 Language.PureScript.Ide.Completion.$w$s$c<= ww1 ww2 ww4 ww5 } }) -}
e8c93db3f3e2180e01fa16058672f53b
  $fOrdNamespaced_$s$c>= ::
    Language.PureScript.Ide.Completion.Namespaced
      Data.Text.Internal.Text
    -> Language.PureScript.Ide.Completion.Namespaced
         Data.Text.Internal.Text
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U(U,U,U))><S(SL),1*U(1*U,1*U(U,U,U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Completion.Namespaced
                           Data.Text.Internal.Text)
                   (w1 :: Language.PureScript.Ide.Completion.Namespaced
                            Data.Text.Internal.Text) ->
                 case w of ww { Language.PureScript.Ide.Completion.Namespaced ww1 ww2 ->
                 case w1 of ww3 { Language.PureScript.Ide.Completion.Namespaced ww4 ww5 ->
                 Language.PureScript.Ide.Completion.$w$s$c>= ww1 ww2 ww4 ww5 } }) -}
3969089272cf40171e488f61f47381e0
  $fOrdNamespaced_$s$ccompare ::
    Language.PureScript.Ide.Completion.Namespaced
      Data.Text.Internal.Text
    -> Language.PureScript.Ide.Completion.Namespaced
         Data.Text.Internal.Text
    -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U(U,U,U))><S(SL),1*U(1*U,1*U(U,U,U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Completion.Namespaced
                           Data.Text.Internal.Text)
                   (w1 :: Language.PureScript.Ide.Completion.Namespaced
                            Data.Text.Internal.Text) ->
                 case w of ww { Language.PureScript.Ide.Completion.Namespaced ww1 ww2 ->
                 case w1 of ww3 { Language.PureScript.Ide.Completion.Namespaced ww4 ww5 ->
                 Language.PureScript.Ide.Completion.$w$s$ccompare
                   ww1
                   ww2
                   ww4
                   ww5 } }) -}
4bc8effff5422fe101bf4c629d1db55b
  $fOrdNamespaced_$s$cmax ::
    Language.PureScript.Ide.Completion.Namespaced
      Data.Text.Internal.Text
    -> Language.PureScript.Ide.Completion.Namespaced
         Data.Text.Internal.Text
    -> Language.PureScript.Ide.Completion.Namespaced
         Data.Text.Internal.Text
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,U(U,U,U))><S(SL),1*U(1*U,U(U,U,U))>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Completion.Namespaced
                           Data.Text.Internal.Text)
                   (w1 :: Language.PureScript.Ide.Completion.Namespaced
                            Data.Text.Internal.Text) ->
                 case w of ww { Language.PureScript.Ide.Completion.Namespaced ww1 ww2 ->
                 case w1 of ww3 { Language.PureScript.Ide.Completion.Namespaced ww4 ww5 ->
                 case ww4 of wild {
                   Language.PureScript.Ide.Types.IdeNSValue
                   -> case ww1 of wild1 {
                        Language.PureScript.Ide.Types.IdeNSValue
                        -> case ww5 of ww6 { Data.Text.Internal.Text ww7 ww8 ww9 ->
                           case ww2 of ww10 { Data.Text.Internal.Text ww11 ww12 ww13 ->
                           case Data.Text.$w$ccompare ww7 ww8 ww9 ww11 ww12 ww13 of wild2 {
                             DEFAULT
                             -> Language.PureScript.Ide.Completion.Namespaced
                                  @ Data.Text.Internal.Text
                                  Language.PureScript.Ide.Types.IdeNSValue
                                  ww6
                             GHC.Types.LT
                             -> Language.PureScript.Ide.Completion.Namespaced
                                  @ Data.Text.Internal.Text
                                  Language.PureScript.Ide.Types.IdeNSValue
                                  ww10 } } }
                        Language.PureScript.Ide.Types.IdeNSType
                        -> Language.PureScript.Ide.Completion.Namespaced
                             @ Data.Text.Internal.Text
                             Language.PureScript.Ide.Types.IdeNSType
                             ww2
                        Language.PureScript.Ide.Types.IdeNSKind
                        -> Language.PureScript.Ide.Completion.Namespaced
                             @ Data.Text.Internal.Text
                             Language.PureScript.Ide.Types.IdeNSKind
                             ww2 }
                   Language.PureScript.Ide.Types.IdeNSType
                   -> case ww1 of wild1 {
                        Language.PureScript.Ide.Types.IdeNSValue
                        -> Language.PureScript.Ide.Completion.Namespaced
                             @ Data.Text.Internal.Text
                             Language.PureScript.Ide.Types.IdeNSType
                             ww5
                        Language.PureScript.Ide.Types.IdeNSType
                        -> case ww5 of ww6 { Data.Text.Internal.Text ww7 ww8 ww9 ->
                           case ww2 of ww10 { Data.Text.Internal.Text ww11 ww12 ww13 ->
                           case Data.Text.$w$ccompare ww7 ww8 ww9 ww11 ww12 ww13 of wild2 {
                             DEFAULT
                             -> Language.PureScript.Ide.Completion.Namespaced
                                  @ Data.Text.Internal.Text
                                  Language.PureScript.Ide.Types.IdeNSType
                                  ww6
                             GHC.Types.LT
                             -> Language.PureScript.Ide.Completion.Namespaced
                                  @ Data.Text.Internal.Text
                                  Language.PureScript.Ide.Types.IdeNSType
                                  ww10 } } }
                        Language.PureScript.Ide.Types.IdeNSKind
                        -> Language.PureScript.Ide.Completion.Namespaced
                             @ Data.Text.Internal.Text
                             Language.PureScript.Ide.Types.IdeNSKind
                             ww2 }
                   Language.PureScript.Ide.Types.IdeNSKind
                   -> case ww1 of wild1 {
                        DEFAULT
                        -> Language.PureScript.Ide.Completion.Namespaced
                             @ Data.Text.Internal.Text
                             Language.PureScript.Ide.Types.IdeNSKind
                             ww5
                        Language.PureScript.Ide.Types.IdeNSKind
                        -> case ww5 of ww6 { Data.Text.Internal.Text ww7 ww8 ww9 ->
                           case ww2 of ww10 { Data.Text.Internal.Text ww11 ww12 ww13 ->
                           case Data.Text.$w$ccompare ww7 ww8 ww9 ww11 ww12 ww13 of wild2 {
                             DEFAULT
                             -> Language.PureScript.Ide.Completion.Namespaced
                                  @ Data.Text.Internal.Text
                                  Language.PureScript.Ide.Types.IdeNSKind
                                  ww6
                             GHC.Types.LT
                             -> Language.PureScript.Ide.Completion.Namespaced
                                  @ Data.Text.Internal.Text
                                  Language.PureScript.Ide.Types.IdeNSKind
                                  ww10 } } } } } } }) -}
781472b9f72bc8f42d1ad6965a071432
  $fOrdNamespaced_$s$cmin ::
    Language.PureScript.Ide.Completion.Namespaced
      Data.Text.Internal.Text
    -> Language.PureScript.Ide.Completion.Namespaced
         Data.Text.Internal.Text
    -> Language.PureScript.Ide.Completion.Namespaced
         Data.Text.Internal.Text
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(U,U(U,U,U))><S(SL),1*U(1*U,U(U,U,U))>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Completion.Namespaced
                           Data.Text.Internal.Text)
                   (w1 :: Language.PureScript.Ide.Completion.Namespaced
                            Data.Text.Internal.Text) ->
                 case w of ww { Language.PureScript.Ide.Completion.Namespaced ww1 ww2 ->
                 case w1 of ww3 { Language.PureScript.Ide.Completion.Namespaced ww4 ww5 ->
                 case ww4 of wild {
                   Language.PureScript.Ide.Types.IdeNSValue
                   -> case ww1 of wild1 {
                        Language.PureScript.Ide.Types.IdeNSValue
                        -> case ww5 of ww6 { Data.Text.Internal.Text ww7 ww8 ww9 ->
                           case ww2 of ww10 { Data.Text.Internal.Text ww11 ww12 ww13 ->
                           case Data.Text.$w$ccompare ww7 ww8 ww9 ww11 ww12 ww13 of wild2 {
                             DEFAULT
                             -> Language.PureScript.Ide.Completion.Namespaced
                                  @ Data.Text.Internal.Text
                                  Language.PureScript.Ide.Types.IdeNSValue
                                  ww10
                             GHC.Types.LT
                             -> Language.PureScript.Ide.Completion.Namespaced
                                  @ Data.Text.Internal.Text
                                  Language.PureScript.Ide.Types.IdeNSValue
                                  ww6 } } }
                        Language.PureScript.Ide.Types.IdeNSType
                        -> Language.PureScript.Ide.Completion.Namespaced
                             @ Data.Text.Internal.Text
                             Language.PureScript.Ide.Types.IdeNSValue
                             ww5
                        Language.PureScript.Ide.Types.IdeNSKind
                        -> Language.PureScript.Ide.Completion.Namespaced
                             @ Data.Text.Internal.Text
                             Language.PureScript.Ide.Types.IdeNSValue
                             ww5 }
                   Language.PureScript.Ide.Types.IdeNSType
                   -> case ww1 of wild1 {
                        Language.PureScript.Ide.Types.IdeNSValue
                        -> Language.PureScript.Ide.Completion.Namespaced
                             @ Data.Text.Internal.Text
                             Language.PureScript.Ide.Types.IdeNSValue
                             ww2
                        Language.PureScript.Ide.Types.IdeNSType
                        -> case ww5 of ww6 { Data.Text.Internal.Text ww7 ww8 ww9 ->
                           case ww2 of ww10 { Data.Text.Internal.Text ww11 ww12 ww13 ->
                           case Data.Text.$w$ccompare ww7 ww8 ww9 ww11 ww12 ww13 of wild2 {
                             DEFAULT
                             -> Language.PureScript.Ide.Completion.Namespaced
                                  @ Data.Text.Internal.Text
                                  Language.PureScript.Ide.Types.IdeNSType
                                  ww10
                             GHC.Types.LT
                             -> Language.PureScript.Ide.Completion.Namespaced
                                  @ Data.Text.Internal.Text
                                  Language.PureScript.Ide.Types.IdeNSType
                                  ww6 } } }
                        Language.PureScript.Ide.Types.IdeNSKind
                        -> Language.PureScript.Ide.Completion.Namespaced
                             @ Data.Text.Internal.Text
                             Language.PureScript.Ide.Types.IdeNSType
                             ww5 }
                   Language.PureScript.Ide.Types.IdeNSKind
                   -> case ww1 of wild1 {
                        DEFAULT
                        -> Language.PureScript.Ide.Completion.Namespaced
                             @ Data.Text.Internal.Text
                             wild1
                             ww2
                        Language.PureScript.Ide.Types.IdeNSKind
                        -> case ww5 of ww6 { Data.Text.Internal.Text ww7 ww8 ww9 ->
                           case ww2 of ww10 { Data.Text.Internal.Text ww11 ww12 ww13 ->
                           case Data.Text.$w$ccompare ww7 ww8 ww9 ww11 ww12 ww13 of wild2 {
                             DEFAULT
                             -> Language.PureScript.Ide.Completion.Namespaced
                                  @ Data.Text.Internal.Text
                                  Language.PureScript.Ide.Types.IdeNSKind
                                  ww10
                             GHC.Types.LT
                             -> Language.PureScript.Ide.Completion.Namespaced
                                  @ Data.Text.Internal.Text
                                  Language.PureScript.Ide.Types.IdeNSKind
                                  ww6 } } } } } } }) -}
3969089272cf40171e488f61f47381e0
  $fOrdNamespaced_$s$fOrdNamespaced ::
    GHC.Classes.Ord
      (Language.PureScript.Ide.Completion.Namespaced
         Data.Text.Internal.Text)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Ide.Completion.Namespaced
                       Data.Text.Internal.Text)
                  Language.PureScript.Ide.Completion.$fEqNamespaced_$s$fEqNamespaced
                  Language.PureScript.Ide.Completion.$fOrdNamespaced_$s$ccompare
                  Language.PureScript.Ide.Completion.$fOrdNamespaced_$s$c<
                  (\ (a :: Language.PureScript.Ide.Completion.Namespaced
                             Data.Text.Internal.Text)
                     (b :: Language.PureScript.Ide.Completion.Namespaced
                             Data.Text.Internal.Text) ->
                   case b of wild { Language.PureScript.Ide.Completion.Namespaced a1 a2 ->
                   case a of wild1 { Language.PureScript.Ide.Completion.Namespaced b1 b2 ->
                   case a1 of wild2 {
                     Language.PureScript.Ide.Types.IdeNSValue
                     -> case b1 of wild3 {
                          Language.PureScript.Ide.Types.IdeNSValue
                          -> case Data.Text.$fOrdText_$ccompare a2 b2 of wild4 {
                               DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }
                          Language.PureScript.Ide.Types.IdeNSType -> GHC.Types.False
                          Language.PureScript.Ide.Types.IdeNSKind -> GHC.Types.False }
                     Language.PureScript.Ide.Types.IdeNSType
                     -> case b1 of wild3 {
                          Language.PureScript.Ide.Types.IdeNSValue -> GHC.Types.True
                          Language.PureScript.Ide.Types.IdeNSType
                          -> case Data.Text.$fOrdText_$ccompare a2 b2 of wild4 {
                               DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }
                          Language.PureScript.Ide.Types.IdeNSKind -> GHC.Types.False }
                     Language.PureScript.Ide.Types.IdeNSKind
                     -> case b1 of wild3 {
                          DEFAULT -> GHC.Types.True
                          Language.PureScript.Ide.Types.IdeNSKind
                          -> case Data.Text.$fOrdText_$ccompare a2 b2 of wild4 {
                               DEFAULT -> GHC.Types.True
                               GHC.Types.LT -> GHC.Types.False } } } } })
                  (\ (a :: Language.PureScript.Ide.Completion.Namespaced
                             Data.Text.Internal.Text)
                     (b :: Language.PureScript.Ide.Completion.Namespaced
                             Data.Text.Internal.Text) ->
                   Language.PureScript.Ide.Completion.$fOrdNamespaced_$s$c< b a)
                  (\ (a :: Language.PureScript.Ide.Completion.Namespaced
                             Data.Text.Internal.Text)
                     (b :: Language.PureScript.Ide.Completion.Namespaced
                             Data.Text.Internal.Text) ->
                   case a of wild { Language.PureScript.Ide.Completion.Namespaced a1 a2 ->
                   case b of wild1 { Language.PureScript.Ide.Completion.Namespaced b1 b2 ->
                   case a1 of wild2 {
                     Language.PureScript.Ide.Types.IdeNSValue
                     -> case b1 of wild3 {
                          Language.PureScript.Ide.Types.IdeNSValue
                          -> case Data.Text.$fOrdText_$ccompare a2 b2 of wild4 {
                               DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }
                          Language.PureScript.Ide.Types.IdeNSType -> GHC.Types.False
                          Language.PureScript.Ide.Types.IdeNSKind -> GHC.Types.False }
                     Language.PureScript.Ide.Types.IdeNSType
                     -> case b1 of wild3 {
                          Language.PureScript.Ide.Types.IdeNSValue -> GHC.Types.True
                          Language.PureScript.Ide.Types.IdeNSType
                          -> case Data.Text.$fOrdText_$ccompare a2 b2 of wild4 {
                               DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }
                          Language.PureScript.Ide.Types.IdeNSKind -> GHC.Types.False }
                     Language.PureScript.Ide.Types.IdeNSKind
                     -> case b1 of wild3 {
                          DEFAULT -> GHC.Types.True
                          Language.PureScript.Ide.Types.IdeNSKind
                          -> case Data.Text.$fOrdText_$ccompare a2 b2 of wild4 {
                               DEFAULT -> GHC.Types.True
                               GHC.Types.LT -> GHC.Types.False } } } } })
                  (\ (x :: Language.PureScript.Ide.Completion.Namespaced
                             Data.Text.Internal.Text)
                     (y :: Language.PureScript.Ide.Completion.Namespaced
                             Data.Text.Internal.Text) ->
                   case y of wild { Language.PureScript.Ide.Completion.Namespaced a1 a2 ->
                   case x of wild1 { Language.PureScript.Ide.Completion.Namespaced b1 b2 ->
                   case a1 of wild2 {
                     Language.PureScript.Ide.Types.IdeNSValue
                     -> case b1 of wild3 {
                          Language.PureScript.Ide.Types.IdeNSValue
                          -> case Data.Text.$fOrdText_$ccompare a2 b2 of wild4 {
                               DEFAULT -> wild GHC.Types.LT -> wild1 }
                          Language.PureScript.Ide.Types.IdeNSType -> wild1
                          Language.PureScript.Ide.Types.IdeNSKind -> wild1 }
                     Language.PureScript.Ide.Types.IdeNSType
                     -> case b1 of wild3 {
                          Language.PureScript.Ide.Types.IdeNSValue -> wild
                          Language.PureScript.Ide.Types.IdeNSType
                          -> case Data.Text.$fOrdText_$ccompare a2 b2 of wild4 {
                               DEFAULT -> wild GHC.Types.LT -> wild1 }
                          Language.PureScript.Ide.Types.IdeNSKind -> wild1 }
                     Language.PureScript.Ide.Types.IdeNSKind
                     -> case b1 of wild3 {
                          DEFAULT -> wild
                          Language.PureScript.Ide.Types.IdeNSKind
                          -> case Data.Text.$fOrdText_$ccompare a2 b2 of wild4 {
                               DEFAULT -> wild GHC.Types.LT -> wild1 } } } } })
                  (\ (x :: Language.PureScript.Ide.Completion.Namespaced
                             Data.Text.Internal.Text)
                     (y :: Language.PureScript.Ide.Completion.Namespaced
                             Data.Text.Internal.Text) ->
                   case y of wild { Language.PureScript.Ide.Completion.Namespaced a1 a2 ->
                   case x of wild1 { Language.PureScript.Ide.Completion.Namespaced b1 b2 ->
                   case a1 of wild2 {
                     Language.PureScript.Ide.Types.IdeNSValue
                     -> case b1 of wild3 {
                          Language.PureScript.Ide.Types.IdeNSValue
                          -> case Data.Text.$fOrdText_$ccompare a2 b2 of wild4 {
                               DEFAULT -> wild1 GHC.Types.LT -> wild }
                          Language.PureScript.Ide.Types.IdeNSType -> wild
                          Language.PureScript.Ide.Types.IdeNSKind -> wild }
                     Language.PureScript.Ide.Types.IdeNSType
                     -> case b1 of wild3 {
                          Language.PureScript.Ide.Types.IdeNSValue -> wild1
                          Language.PureScript.Ide.Types.IdeNSType
                          -> case Data.Text.$fOrdText_$ccompare a2 b2 of wild4 {
                               DEFAULT -> wild1 GHC.Types.LT -> wild }
                          Language.PureScript.Ide.Types.IdeNSKind -> wild }
                     Language.PureScript.Ide.Types.IdeNSKind
                     -> case b1 of wild3 {
                          DEFAULT -> wild1
                          Language.PureScript.Ide.Types.IdeNSKind
                          -> case Data.Text.$fOrdText_$ccompare a2 b2 of wild4 {
                               DEFAULT -> wild1 GHC.Types.LT -> wild } } } } }) -}
3969089272cf40171e488f61f47381e0
  $fShowNamespaced ::
    GHC.Show.Show a =>
    GHC.Show.Show (Language.PureScript.Ide.Completion.Namespaced a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Show.Show a).
                  @ (Language.PureScript.Ide.Completion.Namespaced a)
                  (Language.PureScript.Ide.Completion.$fShowNamespaced_$cshowsPrec
                     @ a
                     v)
                  (Language.PureScript.Ide.Completion.$fShowNamespaced_$cshow @ a v)
                  (Language.PureScript.Ide.Completion.$fShowNamespaced_$cshowList
                     @ a
                     v) -}
6ad55e494c19da23f33b724b12a07ac6
  $fShowNamespaced1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
32d2d003f4fd552ef30a3eb8e7608c7e
  $fShowNamespaced2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Namespaced "#) -}
2a9cbcb638839e4e808ca3386a7456cf
  $fShowNamespaced3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11#) -}
3969089272cf40171e488f61f47381e0
  $fShowNamespaced_$cshow ::
    GHC.Show.Show a =>
    Language.PureScript.Ide.Completion.Namespaced a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U(1*C1(C1(C(U))),A,A)><S,1*U(U,U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (x :: Language.PureScript.Ide.Completion.Namespaced a) ->
                 Language.PureScript.Ide.Completion.$fShowNamespaced_$cshowsPrec
                   @ a
                   $dShow
                   Language.PureScript.Ide.Completion.$fShowNamespaced1
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
3969089272cf40171e488f61f47381e0
  $fShowNamespaced_$cshowList ::
    GHC.Show.Show a =>
    [Language.PureScript.Ide.Completion.Namespaced a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (ls :: [Language.PureScript.Ide.Completion.Namespaced a])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Language.PureScript.Ide.Completion.Namespaced a)
                   (Language.PureScript.Ide.Completion.$fShowNamespaced_$cshowsPrec
                      @ a
                      $dShow
                      Language.PureScript.Ide.Completion.$fShowNamespaced1)
                   ls
                   s) -}
3969089272cf40171e488f61f47381e0
  $fShowNamespaced_$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Types.Int
    -> Language.PureScript.Ide.Completion.Namespaced a
    -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,1*U(1*C1(C1(C(U))),A,A)><S(S),1*U(U)><S,1*U(U,U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: GHC.Show.Show a)
                   (w1 :: GHC.Types.Int)
                   (w2 :: Language.PureScript.Ide.Completion.Namespaced a) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Language.PureScript.Ide.Completion.Namespaced ww3 ww4 ->
                 Language.PureScript.Ide.Completion.$w$cshowsPrec
                   @ a
                   w
                   ww1
                   ww3
                   ww4 } }) -}
d663aaaa3c0d9d06bda17c746e5adc32
  $salter_go13 ::
    GHC.Classes.Ord k1 =>
    (GHC.Base.Maybe a1 -> GHC.Base.Maybe a1)
    -> k1 -> Data.Map.Internal.Map k1 a1 -> Data.Map.Internal.Map k1 a1
  {- Arity: 4,
     Strictness: <L,U(A,C(C1(U)),A,A,A,A,A,A)><C(S),1*C1(U)><S,1*U><S,1*U> -}
6895fca567a6b4be226191756bbeaf2d
  $tc'CompletionOptions :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10690974816168718440##
                   5891790997909727822##
                   Language.PureScript.Ide.Completion.$trModule
                   Language.PureScript.Ide.Completion.$tc'CompletionOptions2
                   0#
                   Language.PureScript.Ide.Completion.$tc'CompletionOptions1) -}
f9e09d068034236e0da578b69c8e6c47
  $tc'CompletionOptions1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
9211bca60bcdae63833965f29bc7afa9
  $tc'CompletionOptions2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Completion.$tc'CompletionOptions3) -}
3fef8019298817ea027ab3ebd5fdf517
  $tc'CompletionOptions3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'CompletionOptions"#) -}
2a960e56d99b69000a27f66e5d434969
  $tc'Namespaced :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5692934525765612280##
                   14102424769690137057##
                   Language.PureScript.Ide.Completion.$trModule
                   Language.PureScript.Ide.Completion.$tc'Namespaced2
                   1#
                   Language.PureScript.Ide.Completion.$tc'Namespaced1) -}
32bb547a83cf8eaad10207ad58ec2597
  $tc'Namespaced1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
4e77caff670b4234bb29368deef6a36b
  $tc'Namespaced2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Completion.$tc'Namespaced3) -}
d787c4d31f1cd21603c76e6fab56444f
  $tc'Namespaced3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Namespaced"#) -}
8cae2038996bd09ea7c34f7b17377ee7
  $tcCompletionOptions :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11875715721342424029##
                   17681334519355410951##
                   Language.PureScript.Ide.Completion.$trModule
                   Language.PureScript.Ide.Completion.$tcCompletionOptions1
                   0#
                   GHC.Types.krep$*) -}
d2b173b49451b87e994e1ac32646b102
  $tcCompletionOptions1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Completion.$fFromJSONCompletionOptions6) -}
1dded2c247bcffb0e5fae5d3d3d52d49
  $tcNamespaced :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9163376402090173046##
                   13095376841967125906##
                   Language.PureScript.Ide.Completion.$trModule
                   Language.PureScript.Ide.Completion.$tcNamespaced1
                   0#
                   GHC.Types.krep$*Arr*) -}
865e379f6b14a53778787ed8fadd2d5a
  $tcNamespaced1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Completion.$tcNamespaced2) -}
2f7ec5f1095554e3be02bc1b9b75b31d
  $tcNamespaced2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Namespaced"#) -}
4bf37c3458f18320961fa092c5f42b00
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Language.PureScript.Ide.Completion.$trModule3
                   Language.PureScript.Ide.Completion.$trModule1) -}
7328130740cc3ab788b0ad17ecc44186
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Completion.$trModule2) -}
30739def1ae320527891917e259e9fc9
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Language.PureScript.Ide.Completion"#) -}
b1e78dd0cc28bdedbb6b15d4232896b2
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Completion.$trModule4) -}
8b42878beba7404218949c7afb812b68
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"#) -}
1643ae8011ae263802ee97d60ce2cb79
  $w$c< ::
    GHC.Classes.Ord a =>
    Language.PureScript.Ide.Types.IdeNamespace
    -> a
    -> Language.PureScript.Ide.Types.IdeNamespace
    -> a
    -> GHC.Types.Bool
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,A,1*C1(C1(U)),A,A,A,A,A)><S,1*U><L,U><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Classes.Ord a)
                   (ww :: Language.PureScript.Ide.Types.IdeNamespace)
                   (ww1 :: a)
                   (ww2 :: Language.PureScript.Ide.Types.IdeNamespace)
                   (ww3 :: a) ->
                 case ww of wild {
                   Language.PureScript.Ide.Types.IdeNSValue
                   -> case ww2 of wild1 {
                        Language.PureScript.Ide.Types.IdeNSValue
                        -> GHC.Classes.< @ a w ww1 ww3
                        Language.PureScript.Ide.Types.IdeNSType -> GHC.Types.True
                        Language.PureScript.Ide.Types.IdeNSKind -> GHC.Types.True }
                   Language.PureScript.Ide.Types.IdeNSType
                   -> case ww2 of wild1 {
                        Language.PureScript.Ide.Types.IdeNSValue -> GHC.Types.False
                        Language.PureScript.Ide.Types.IdeNSType
                        -> GHC.Classes.< @ a w ww1 ww3
                        Language.PureScript.Ide.Types.IdeNSKind -> GHC.Types.True }
                   Language.PureScript.Ide.Types.IdeNSKind
                   -> case ww2 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Ide.Types.IdeNSKind
                        -> GHC.Classes.< @ a w ww1 ww3 } }) -}
d41272cceb87ba3ed01a673d024e59ae
  $w$c== ::
    GHC.Classes.Eq a =>
    Language.PureScript.Ide.Types.IdeNamespace
    -> a
    -> Language.PureScript.Ide.Types.IdeNamespace
    -> a
    -> GHC.Types.Bool
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S,1*U><L,U><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Classes.Eq a)
                   (ww :: Language.PureScript.Ide.Types.IdeNamespace)
                   (ww1 :: a)
                   (ww2 :: Language.PureScript.Ide.Types.IdeNamespace)
                   (ww3 :: a) ->
                 case ww of wild {
                   Language.PureScript.Ide.Types.IdeNSValue
                   -> case ww2 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Ide.Types.IdeNSValue
                        -> GHC.Classes.== @ a w ww1 ww3 }
                   Language.PureScript.Ide.Types.IdeNSType
                   -> case ww2 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Ide.Types.IdeNSType
                        -> GHC.Classes.== @ a w ww1 ww3 }
                   Language.PureScript.Ide.Types.IdeNSKind
                   -> case ww2 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Ide.Types.IdeNSKind
                        -> GHC.Classes.== @ a w ww1 ww3 } }) -}
0119cdfa0bb56ff54c14af6e37c730bd
  $w$ccompare ::
    GHC.Classes.Ord a =>
    Language.PureScript.Ide.Types.IdeNamespace
    -> a
    -> Language.PureScript.Ide.Types.IdeNamespace
    -> a
    -> GHC.Types.Ordering
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(C1(U)),A,A,A,A,A,A)><S,1*U><L,U><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Classes.Ord a)
                   (ww :: Language.PureScript.Ide.Types.IdeNamespace)
                   (ww1 :: a)
                   (ww2 :: Language.PureScript.Ide.Types.IdeNamespace)
                   (ww3 :: a) ->
                 case ww of wild {
                   Language.PureScript.Ide.Types.IdeNSValue
                   -> case ww2 of wild1 {
                        Language.PureScript.Ide.Types.IdeNSValue
                        -> GHC.Classes.compare @ a w ww1 ww3
                        Language.PureScript.Ide.Types.IdeNSType -> GHC.Types.LT
                        Language.PureScript.Ide.Types.IdeNSKind -> GHC.Types.LT }
                   Language.PureScript.Ide.Types.IdeNSType
                   -> case ww2 of wild1 {
                        Language.PureScript.Ide.Types.IdeNSValue -> GHC.Types.GT
                        Language.PureScript.Ide.Types.IdeNSType
                        -> GHC.Classes.compare @ a w ww1 ww3
                        Language.PureScript.Ide.Types.IdeNSKind -> GHC.Types.LT }
                   Language.PureScript.Ide.Types.IdeNSKind
                   -> case ww2 of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Language.PureScript.Ide.Types.IdeNSKind
                        -> GHC.Classes.compare @ a w ww1 ww3 } }) -}
1c31176b641c66fe3b13859b66b04092
  $w$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Prim.Int#
    -> Language.PureScript.Ide.Types.IdeNamespace
    -> a
    -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,1*U(1*C1(C1(C(U))),A,A)><S,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Show.Show a)
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: Language.PureScript.Ide.Types.IdeNamespace)
                   (ww2 :: a) ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.showsPrec
                       @ a
                       w
                       Language.PureScript.Ide.Completion.$fShowNamespaced3
                       ww2
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> \ (x :: GHC.Base.String) ->
                      GHC.CString.unpackAppendCString#
                        Language.PureScript.Ide.Completion.$fShowNamespaced2
                        (Language.PureScript.Ide.Types.$w$cshowsPrec9
                           ww1
                           (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 (g x)))
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.CString.unpackAppendCString#
                           Language.PureScript.Ide.Completion.$fShowNamespaced2
                           (Language.PureScript.Ide.Types.$w$cshowsPrec9
                              ww1
                              (GHC.Types.:
                                 @ GHC.Types.Char
                                 GHC.Show.showSpace1
                                 (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))))) }) -}
f8c4413405a59759ea098ef75d1199f5
  $w$s$c< ::
    Language.PureScript.Ide.Types.IdeNamespace
    -> Data.Text.Internal.Text
    -> Language.PureScript.Ide.Types.IdeNamespace
    -> Data.Text.Internal.Text
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U(U,U,U)><S,1*U><L,1*U(U,U,U)>,
     Inline: [0],
     Unfolding: (\ (ww :: Language.PureScript.Ide.Types.IdeNamespace)
                   (ww1 :: Data.Text.Internal.Text)
                   (ww2 :: Language.PureScript.Ide.Types.IdeNamespace)
                   (ww3 :: Data.Text.Internal.Text) ->
                 case ww of wild {
                   Language.PureScript.Ide.Types.IdeNSValue
                   -> case ww2 of wild1 {
                        Language.PureScript.Ide.Types.IdeNSValue
                        -> Data.Text.$fOrdText_$c< ww1 ww3
                        Language.PureScript.Ide.Types.IdeNSType -> GHC.Types.True
                        Language.PureScript.Ide.Types.IdeNSKind -> GHC.Types.True }
                   Language.PureScript.Ide.Types.IdeNSType
                   -> case ww2 of wild1 {
                        Language.PureScript.Ide.Types.IdeNSValue -> GHC.Types.False
                        Language.PureScript.Ide.Types.IdeNSType
                        -> Data.Text.$fOrdText_$c< ww1 ww3
                        Language.PureScript.Ide.Types.IdeNSKind -> GHC.Types.True }
                   Language.PureScript.Ide.Types.IdeNSKind
                   -> case ww2 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Ide.Types.IdeNSKind
                        -> Data.Text.$fOrdText_$c< ww1 ww3 } }) -}
0405bd1f510933c7468c31f75c496031
  $w$s$c<= ::
    Language.PureScript.Ide.Types.IdeNamespace
    -> Data.Text.Internal.Text
    -> Language.PureScript.Ide.Types.IdeNamespace
    -> Data.Text.Internal.Text
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U(U,U,U)><S,1*U><L,1*U(U,U,U)>,
     Inline: [0],
     Unfolding: (\ (ww :: Language.PureScript.Ide.Types.IdeNamespace)
                   (ww1 :: Data.Text.Internal.Text)
                   (ww2 :: Language.PureScript.Ide.Types.IdeNamespace)
                   (ww3 :: Data.Text.Internal.Text) ->
                 case ww2 of wild {
                   Language.PureScript.Ide.Types.IdeNSValue
                   -> case ww of wild1 {
                        Language.PureScript.Ide.Types.IdeNSValue
                        -> case ww3 of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                           case ww1 of ww8 { Data.Text.Internal.Text ww9 ww10 ww11 ->
                           case Data.Text.$w$ccompare ww5 ww6 ww7 ww9 ww10 ww11 of wild2 {
                             DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False } } }
                        Language.PureScript.Ide.Types.IdeNSType -> GHC.Types.False
                        Language.PureScript.Ide.Types.IdeNSKind -> GHC.Types.False }
                   Language.PureScript.Ide.Types.IdeNSType
                   -> case ww of wild1 {
                        Language.PureScript.Ide.Types.IdeNSValue -> GHC.Types.True
                        Language.PureScript.Ide.Types.IdeNSType
                        -> case ww3 of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                           case ww1 of ww8 { Data.Text.Internal.Text ww9 ww10 ww11 ->
                           case Data.Text.$w$ccompare ww5 ww6 ww7 ww9 ww10 ww11 of wild2 {
                             DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False } } }
                        Language.PureScript.Ide.Types.IdeNSKind -> GHC.Types.False }
                   Language.PureScript.Ide.Types.IdeNSKind
                   -> case ww of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.Ide.Types.IdeNSKind
                        -> case ww3 of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                           case ww1 of ww8 { Data.Text.Internal.Text ww9 ww10 ww11 ->
                           case Data.Text.$w$ccompare ww5 ww6 ww7 ww9 ww10 ww11 of wild2 {
                             DEFAULT -> GHC.Types.True
                             GHC.Types.LT -> GHC.Types.False } } } } }) -}
4af428f54a6cd3bca5e34211690b58b3
  $w$s$c== ::
    Language.PureScript.Ide.Types.IdeNamespace
    -> Data.Text.Internal.Text
    -> Language.PureScript.Ide.Types.IdeNamespace
    -> Data.Text.Internal.Text
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U(U,U,U)><S,1*U><L,1*U(U,U,U)>,
     Inline: [0],
     Unfolding: (\ (ww :: Language.PureScript.Ide.Types.IdeNamespace)
                   (ww1 :: Data.Text.Internal.Text)
                   (ww2 :: Language.PureScript.Ide.Types.IdeNamespace)
                   (ww3 :: Data.Text.Internal.Text) ->
                 case ww of wild {
                   Language.PureScript.Ide.Types.IdeNSValue
                   -> case ww2 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Ide.Types.IdeNSValue
                        -> Data.Text.$fEqText_$c== ww1 ww3 }
                   Language.PureScript.Ide.Types.IdeNSType
                   -> case ww2 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Ide.Types.IdeNSType
                        -> Data.Text.$fEqText_$c== ww1 ww3 }
                   Language.PureScript.Ide.Types.IdeNSKind
                   -> case ww2 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Ide.Types.IdeNSKind
                        -> Data.Text.$fEqText_$c== ww1 ww3 } }) -}
ceab525212ed2373d2531703960b9a7b
  $w$s$c>= ::
    Language.PureScript.Ide.Types.IdeNamespace
    -> Data.Text.Internal.Text
    -> Language.PureScript.Ide.Types.IdeNamespace
    -> Data.Text.Internal.Text
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U(U,U,U)><S,1*U><L,1*U(U,U,U)>,
     Inline: [0],
     Unfolding: (\ (ww :: Language.PureScript.Ide.Types.IdeNamespace)
                   (ww1 :: Data.Text.Internal.Text)
                   (ww2 :: Language.PureScript.Ide.Types.IdeNamespace)
                   (ww3 :: Data.Text.Internal.Text) ->
                 case ww of wild {
                   Language.PureScript.Ide.Types.IdeNSValue
                   -> case ww2 of wild1 {
                        Language.PureScript.Ide.Types.IdeNSValue
                        -> case ww1 of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                           case ww3 of ww8 { Data.Text.Internal.Text ww9 ww10 ww11 ->
                           case Data.Text.$w$ccompare ww5 ww6 ww7 ww9 ww10 ww11 of wild2 {
                             DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False } } }
                        Language.PureScript.Ide.Types.IdeNSType -> GHC.Types.False
                        Language.PureScript.Ide.Types.IdeNSKind -> GHC.Types.False }
                   Language.PureScript.Ide.Types.IdeNSType
                   -> case ww2 of wild1 {
                        Language.PureScript.Ide.Types.IdeNSValue -> GHC.Types.True
                        Language.PureScript.Ide.Types.IdeNSType
                        -> case ww1 of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                           case ww3 of ww8 { Data.Text.Internal.Text ww9 ww10 ww11 ->
                           case Data.Text.$w$ccompare ww5 ww6 ww7 ww9 ww10 ww11 of wild2 {
                             DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False } } }
                        Language.PureScript.Ide.Types.IdeNSKind -> GHC.Types.False }
                   Language.PureScript.Ide.Types.IdeNSKind
                   -> case ww2 of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.Ide.Types.IdeNSKind
                        -> case ww1 of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                           case ww3 of ww8 { Data.Text.Internal.Text ww9 ww10 ww11 ->
                           case Data.Text.$w$ccompare ww5 ww6 ww7 ww9 ww10 ww11 of wild2 {
                             DEFAULT -> GHC.Types.True
                             GHC.Types.LT -> GHC.Types.False } } } } }) -}
238c3c10e30496ccebcf077e24018a30
  $w$s$ccompare ::
    Language.PureScript.Ide.Types.IdeNamespace
    -> Data.Text.Internal.Text
    -> Language.PureScript.Ide.Types.IdeNamespace
    -> Data.Text.Internal.Text
    -> GHC.Types.Ordering
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U(U,U,U)><S,1*U><L,1*U(U,U,U)>,
     Inline: [0],
     Unfolding: (\ (ww :: Language.PureScript.Ide.Types.IdeNamespace)
                   (ww1 :: Data.Text.Internal.Text)
                   (ww2 :: Language.PureScript.Ide.Types.IdeNamespace)
                   (ww3 :: Data.Text.Internal.Text) ->
                 case ww of wild {
                   Language.PureScript.Ide.Types.IdeNSValue
                   -> case ww2 of wild1 {
                        Language.PureScript.Ide.Types.IdeNSValue
                        -> Data.Text.$fOrdText_$ccompare ww1 ww3
                        Language.PureScript.Ide.Types.IdeNSType -> GHC.Types.LT
                        Language.PureScript.Ide.Types.IdeNSKind -> GHC.Types.LT }
                   Language.PureScript.Ide.Types.IdeNSType
                   -> case ww2 of wild1 {
                        Language.PureScript.Ide.Types.IdeNSValue -> GHC.Types.GT
                        Language.PureScript.Ide.Types.IdeNSType
                        -> Data.Text.$fOrdText_$ccompare ww1 ww3
                        Language.PureScript.Ide.Types.IdeNSKind -> GHC.Types.LT }
                   Language.PureScript.Ide.Types.IdeNSKind
                   -> case ww2 of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Language.PureScript.Ide.Types.IdeNSKind
                        -> Data.Text.$fOrdText_$ccompare ww1 ww3 } }) -}
72e4c8159e5b4a027feb46f12030515d
  $wapplyCompletionOptions ::
    GHC.Base.Maybe GHC.Types.Int
    -> GHC.Types.Bool
    -> [Language.PureScript.Ide.Types.Match
          Language.PureScript.Ide.Types.IdeDeclarationAnn]
    -> [(Language.PureScript.Ide.Types.Match
           Language.PureScript.Ide.Types.IdeDeclarationAnn,
         [Language.PureScript.Names.ModuleName])]
  {- Arity: 3, Strictness: <S,1*U><L,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.Maybe GHC.Types.Int)
                   (ww1 :: GHC.Types.Bool)
                   (w :: [Language.PureScript.Ide.Types.Match
                            Language.PureScript.Ide.Types.IdeDeclarationAnn]) ->
                 let {
                   karg :: [(Language.PureScript.Ide.Types.Match
                               Language.PureScript.Ide.Types.IdeDeclarationAnn,
                             [Language.PureScript.Names.ModuleName])]
                   = case ww1 of wild {
                       GHC.Types.False
                       -> GHC.Base.map
                            @ (Language.PureScript.Ide.Types.Match
                                 Language.PureScript.Ide.Types.IdeDeclarationAnn)
                            @ (Language.PureScript.Ide.Types.Match
                                 Language.PureScript.Ide.Types.IdeDeclarationAnn,
                               [Language.PureScript.Names.ModuleName])
                            (Language.PureScript.Ide.Completion.simpleExport
                               @ Language.PureScript.Ide.Types.IdeDeclarationAnn)
                            w
                       GHC.Types.True
                       -> Data.Map.Internal.elems_go
                            @ (Language.PureScript.Ide.Completion.Namespaced
                                 Data.Text.Internal.Text)
                            @ (Language.PureScript.Ide.Types.Match
                                 Language.PureScript.Ide.Types.IdeDeclarationAnn,
                               [Language.PureScript.Names.ModuleName])
                            (GHC.Types.[]
                               @ (Language.PureScript.Ide.Types.Match
                                    Language.PureScript.Ide.Types.IdeDeclarationAnn,
                                  [Language.PureScript.Names.ModuleName]))
                            (Language.PureScript.Ide.Completion.applyCompletionOptions_go w) }
                 } in
                 case ww of wild {
                   GHC.Base.Nothing -> karg
                   GHC.Base.Just x
                   -> case x of wild1 { GHC.Types.I# y ->
                      case GHC.Prim.<# 0# y of lwild {
                        DEFAULT
                        -> GHC.Types.[]
                             @ (Language.PureScript.Ide.Types.Match
                                  Language.PureScript.Ide.Types.IdeDeclarationAnn,
                                [Language.PureScript.Names.ModuleName])
                        1#
                        -> GHC.List.$wunsafeTake
                             @ (Language.PureScript.Ide.Types.Match
                                  Language.PureScript.Ide.Types.IdeDeclarationAnn,
                                [Language.PureScript.Names.ModuleName])
                             y
                             karg } } }) -}
369904f8c492e6a27f2134cd0e0c5a75
  $wcompletionFromMatch ::
    Language.PureScript.Names.ModuleName
    -> Language.PureScript.Ide.Types.Annotation
    -> Language.PureScript.Ide.Types.IdeDeclaration
    -> [Language.PureScript.Names.ModuleName]
    -> (# Data.Text.Internal.Text, Data.Text.Internal.Text,
          Data.Text.Internal.Text, Data.Text.Internal.Text,
          GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan,
          GHC.Base.Maybe Data.Text.Internal.Text,
          [Language.PureScript.Names.ModuleName] #)
  {- Arity: 4, Strictness: <L,1*U><L,U(1*U,A,1*U,1*U)><L,1*U><L,U>,
     Inline: [0] -}
a3cf163da01997a02a0cc0c90efc1aaf
  $wgetCompletions ::
    [Language.PureScript.Ide.Filter.Filter]
    -> Language.PureScript.Ide.Matcher.Matcher
         Language.PureScript.Ide.Types.IdeDeclarationAnn
    -> GHC.Base.Maybe GHC.Types.Int
    -> GHC.Types.Bool
    -> [Language.PureScript.Ide.Completion.Module]
    -> [Language.PureScript.Ide.Types.Completion]
  {- Arity: 5, Strictness: <L,1*U><L,1*C1(U)><S,1*U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (w :: [Language.PureScript.Ide.Filter.Filter])
                   (w1 :: Language.PureScript.Ide.Matcher.Matcher
                            Language.PureScript.Ide.Types.IdeDeclarationAnn)
                   (ww :: GHC.Base.Maybe GHC.Types.Int)
                   (ww1 :: GHC.Types.Bool)
                   (w2 :: [Language.PureScript.Ide.Completion.Module]) ->
                 let {
                   karg :: [(Language.PureScript.Ide.Types.Match
                               Language.PureScript.Ide.Types.IdeDeclarationAnn,
                             [Language.PureScript.Names.ModuleName])]
                   = let {
                       karg1 :: [Language.PureScript.Ide.Types.Match
                                   Language.PureScript.Ide.Types.IdeDeclarationAnn]
                       = w1
                           `cast`
                         (Language.PureScript.Ide.Matcher.N:Matcher[0]
                              <Language.PureScript.Ide.Types.IdeDeclarationAnn>_R ; Data.Semigroup.Internal.N:Endo[0]
                                                                                        <[Language.PureScript.Ide.Types.Match
                                                                                            Language.PureScript.Ide.Types.IdeDeclarationAnn]>_R)
                           (Language.PureScript.Ide.Completion.getCompletions_go
                              (Language.PureScript.Ide.Filter.applyFilters1 w w2))
                     } in
                     case ww1 of wild {
                       GHC.Types.False
                       -> GHC.Base.map
                            @ (Language.PureScript.Ide.Types.Match
                                 Language.PureScript.Ide.Types.IdeDeclarationAnn)
                            @ (Language.PureScript.Ide.Types.Match
                                 Language.PureScript.Ide.Types.IdeDeclarationAnn,
                               [Language.PureScript.Names.ModuleName])
                            (Language.PureScript.Ide.Completion.simpleExport
                               @ Language.PureScript.Ide.Types.IdeDeclarationAnn)
                            karg1
                       GHC.Types.True
                       -> Data.Map.Internal.elems_go
                            @ (Language.PureScript.Ide.Completion.Namespaced
                                 Data.Text.Internal.Text)
                            @ (Language.PureScript.Ide.Types.Match
                                 Language.PureScript.Ide.Types.IdeDeclarationAnn,
                               [Language.PureScript.Names.ModuleName])
                            (GHC.Types.[]
                               @ (Language.PureScript.Ide.Types.Match
                                    Language.PureScript.Ide.Types.IdeDeclarationAnn,
                                  [Language.PureScript.Names.ModuleName]))
                            (Language.PureScript.Ide.Completion.applyCompletionOptions_go
                               karg1) }
                 } in
                 case ww of wild {
                   GHC.Base.Nothing
                   -> GHC.Base.map
                        @ (Language.PureScript.Ide.Types.Match
                             Language.PureScript.Ide.Types.IdeDeclarationAnn,
                           [Language.PureScript.Names.ModuleName])
                        @ Language.PureScript.Ide.Types.Completion
                        Language.PureScript.Ide.Completion.completionFromMatch
                        karg
                   GHC.Base.Just x
                   -> case x of wild1 { GHC.Types.I# y ->
                      case GHC.Prim.<# 0# y of lwild {
                        DEFAULT -> GHC.Types.[] @ Language.PureScript.Ide.Types.Completion
                        1# -> Language.PureScript.Ide.Completion.$wgo karg y } } }) -}
06e52635465d2805ee5a614e854347a2
  $wgo ::
    [(Language.PureScript.Ide.Types.Match
        Language.PureScript.Ide.Types.IdeDeclarationAnn,
      [Language.PureScript.Names.ModuleName])]
    -> GHC.Prim.Int# -> [Language.PureScript.Ide.Types.Completion]
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0] -}
de2aa8be3674d3c40e8c84b66b264dcd
  data CompletionOptions
    = CompletionOptions {coMaxResults :: GHC.Base.Maybe GHC.Types.Int,
                         coGroupReexports :: GHC.Types.Bool}
00fe24f46d6270e72dc3aa5f62ca7cb2
  type Module =
    (Language.PureScript.Names.ModuleName,
     [Language.PureScript.Ide.Types.IdeDeclarationAnn])
3969089272cf40171e488f61f47381e0
  data Namespaced a
    = Namespaced Language.PureScript.Ide.Types.IdeNamespace a
99fe76e7d2c791e5923a5088f2e2df2b
  applyCompletionOptions ::
    Language.PureScript.Ide.Completion.CompletionOptions
    -> [Language.PureScript.Ide.Types.Match
          Language.PureScript.Ide.Types.IdeDeclarationAnn]
    -> [(Language.PureScript.Ide.Types.Match
           Language.PureScript.Ide.Types.IdeDeclarationAnn,
         [Language.PureScript.Names.ModuleName])]
  {- Arity: 2, Strictness: <S(SL),1*U(1*U,1*U)><L,1*U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Ide.Completion.CompletionOptions)
                   (w1 :: [Language.PureScript.Ide.Types.Match
                             Language.PureScript.Ide.Types.IdeDeclarationAnn]) ->
                 case w of ww { Language.PureScript.Ide.Completion.CompletionOptions ww1 ww2 ->
                 Language.PureScript.Ide.Completion.$wapplyCompletionOptions
                   ww1
                   ww2
                   w1 }) -}
2c14f11238d7c1a793b647e45b2a7e1b
  applyCompletionOptions_go ::
    [Language.PureScript.Ide.Types.Match
       Language.PureScript.Ide.Types.IdeDeclarationAnn]
    -> Data.Map.Internal.Map
         (Language.PureScript.Ide.Completion.Namespaced
            Data.Text.Internal.Text)
         (Language.PureScript.Ide.Types.Match
            Language.PureScript.Ide.Types.IdeDeclarationAnn,
          [Language.PureScript.Names.ModuleName])
  {- Arity: 1, Strictness: <S,1*U> -}
de2aa8be3674d3c40e8c84b66b264dcd
  coGroupReexports ::
    Language.PureScript.Ide.Completion.CompletionOptions
    -> GHC.Types.Bool
  RecSel Left Language.PureScript.Ide.Completion.CompletionOptions
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Completion.CompletionOptions) ->
                 case ds of wild { Language.PureScript.Ide.Completion.CompletionOptions ds1 ds2 ->
                 ds2 }) -}
de2aa8be3674d3c40e8c84b66b264dcd
  coMaxResults ::
    Language.PureScript.Ide.Completion.CompletionOptions
    -> GHC.Base.Maybe GHC.Types.Int
  RecSel Left Language.PureScript.Ide.Completion.CompletionOptions
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Ide.Completion.CompletionOptions) ->
                 case ds of wild { Language.PureScript.Ide.Completion.CompletionOptions ds1 ds2 ->
                 ds1 }) -}
c7760c5e18f60146ebe36a0a7e82676a
  completionFromMatch ::
    (Language.PureScript.Ide.Types.Match
       Language.PureScript.Ide.Types.IdeDeclarationAnn,
     [Language.PureScript.Names.ModuleName])
    -> Language.PureScript.Ide.Types.Completion
  {- Arity: 1,
     Strictness: <S(S(LS)L),1*U(1*U(1*U,1*U(U(U,A,U,U),1*U)),U)>m,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: (Language.PureScript.Ide.Types.Match
                            Language.PureScript.Ide.Types.IdeDeclarationAnn,
                          [Language.PureScript.Names.ModuleName])) ->
                 case w of ww { (,) ww1 ww2 ->
                 case ww1
                        `cast`
                      (Language.PureScript.Ide.Types.N:Match[0] <Language.PureScript.Ide.Types.IdeDeclarationAnn>_N) of ww3 { (,) ww4 ww5 ->
                 case ww5 of ww6 { Language.PureScript.Ide.Types.IdeDeclarationAnn ww7 ww8 ->
                 case Language.PureScript.Ide.Completion.$wcompletionFromMatch
                        ww4
                        ww7
                        ww8
                        ww2 of ww9 { (#,,,,,,#) ww10 ww11 ww12 ww13 ww14 ww15 ww16 ->
                 Language.PureScript.Ide.Types.Completion
                   ww10
                   ww11
                   ww12
                   ww13
                   ww14
                   ww15
                   ww16 } } } }) -}
b05f190320064d1b36aa9e50a478f836
  defaultCompletionOptions ::
    Language.PureScript.Ide.Completion.CompletionOptions
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Language.PureScript.Ide.Completion.CompletionOptions
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   GHC.Types.False) -}
4f5df6b1246fbc6f90feb306b3fc8536
  getCompletions ::
    [Language.PureScript.Ide.Filter.Filter]
    -> Language.PureScript.Ide.Matcher.Matcher
         Language.PureScript.Ide.Types.IdeDeclarationAnn
    -> Language.PureScript.Ide.Completion.CompletionOptions
    -> [Language.PureScript.Ide.Completion.Module]
    -> [Language.PureScript.Ide.Types.Completion]
  {- Arity: 4,
     Strictness: <L,1*U><L,1*C1(U)><S(SL),1*U(1*U,1*U)><L,1*U>,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: [Language.PureScript.Ide.Filter.Filter])
                   (w1 :: Language.PureScript.Ide.Matcher.Matcher
                            Language.PureScript.Ide.Types.IdeDeclarationAnn)
                   (w2 :: Language.PureScript.Ide.Completion.CompletionOptions)
                   (w3 :: [Language.PureScript.Ide.Completion.Module]) ->
                 case w2 of ww { Language.PureScript.Ide.Completion.CompletionOptions ww1 ww2 ->
                 Language.PureScript.Ide.Completion.$wgetCompletions
                   w
                   w1
                   ww1
                   ww2
                   w3 }) -}
aaf52654b85cbdad268ae53d6c69bfc8
  getCompletions_go ::
    [(Language.PureScript.Names.ModuleName,
      [Language.PureScript.Ide.Types.IdeDeclarationAnn])]
    -> [Language.PureScript.Ide.Types.Match
          Language.PureScript.Ide.Types.IdeDeclarationAnn]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
73aa529b89c1d3ec71407e99776a9f04
  getExactCompletions ::
    Data.Text.Internal.Text
    -> [Language.PureScript.Ide.Filter.Filter]
    -> [Language.PureScript.Ide.Completion.Module]
    -> [Language.PureScript.Ide.Types.Completion]
  {- Arity: 3, Strictness: <L,U(U,U,U)><L,U><L,1*U>,
     Unfolding: (\ (search :: Data.Text.Internal.Text)
                   (filters :: [Language.PureScript.Ide.Filter.Filter])
                   (modules :: [Language.PureScript.Ide.Completion.Module]) ->
                 GHC.Base.map
                   @ (Language.PureScript.Ide.Types.Match
                        Language.PureScript.Ide.Types.IdeDeclarationAnn)
                   @ Language.PureScript.Ide.Types.Completion
                   Language.PureScript.Ide.Completion.getExactCompletions1
                   (Language.PureScript.Ide.Completion.getCompletions_go
                      (Language.PureScript.Ide.Filter.applyFilters1
                         (GHC.Types.:
                            @ Language.PureScript.Ide.Filter.Filter
                            (Language.PureScript.Ide.Filter.equalityFilter_g search)
                              `cast`
                            (Sym (Data.Semigroup.Internal.N:Endo[0]
                                      <[Language.PureScript.Ide.Filter.Module]>_R) ; Sym (Language.PureScript.Ide.Filter.N:Filter[0]))
                            filters)
                         modules))) -}
4e57855d4203bbbdde68fd55b269c982
  getExactCompletions1 ::
    Language.PureScript.Ide.Types.Match
      Language.PureScript.Ide.Types.IdeDeclarationAnn
    -> Language.PureScript.Ide.Types.Completion
  {- Arity: 1, Strictness: <S(LS),1*U(U,1*U(U(U,A,U,U),1*U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Ide.Types.Match
                           Language.PureScript.Ide.Types.IdeDeclarationAnn) ->
                 case x `cast`
                      (Language.PureScript.Ide.Types.N:Match[0] <Language.PureScript.Ide.Types.IdeDeclarationAnn>_N) of wild { (,) moduleName ds ->
                 Language.PureScript.Ide.Completion.completionFromMatch
                   (wild
                      `cast`
                    (Sym (Language.PureScript.Ide.Types.N:Match[0]) <Language.PureScript.Ide.Types.IdeDeclarationAnn>_N),
                    GHC.Types.:
                      @ Language.PureScript.Names.ModuleName
                      moduleName
                      (GHC.Types.[] @ Language.PureScript.Names.ModuleName)) }) -}
c57f4e806a365b231dd1587a4d7dcc89
  getExactMatches ::
    Data.Text.Internal.Text
    -> [Language.PureScript.Ide.Filter.Filter]
    -> [Language.PureScript.Ide.Completion.Module]
    -> [Language.PureScript.Ide.Types.Match
          Language.PureScript.Ide.Types.IdeDeclarationAnn]
  {- Arity: 3, Strictness: <L,U(U,U,U)><L,U><L,1*U>,
     Unfolding: (\ (search :: Data.Text.Internal.Text)
                   (filters :: [Language.PureScript.Ide.Filter.Filter])
                   (modules :: [Language.PureScript.Ide.Completion.Module]) ->
                 Language.PureScript.Ide.Completion.getCompletions_go
                   (Language.PureScript.Ide.Filter.applyFilters1
                      (GHC.Types.:
                         @ Language.PureScript.Ide.Filter.Filter
                         (Language.PureScript.Ide.Filter.equalityFilter_g search)
                           `cast`
                         (Sym (Data.Semigroup.Internal.N:Endo[0]
                                   <[Language.PureScript.Ide.Filter.Module]>_R) ; Sym (Language.PureScript.Ide.Filter.N:Filter[0]))
                         filters)
                      modules)) -}
2cef79ff54197dfbab361774e991015b
  simpleExport ::
    Language.PureScript.Ide.Types.Match a
    -> (Language.PureScript.Ide.Types.Match a,
        [Language.PureScript.Names.ModuleName])
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (match :: Language.PureScript.Ide.Types.Match a) ->
                 case match
                        `cast`
                      (Language.PureScript.Ide.Types.N:Match[0] <a>_N) of wild { (,) moduleName ds ->
                 (wild
                    `cast`
                  (Sym (Language.PureScript.Ide.Types.N:Match[0]) <a>_N),
                  GHC.Types.:
                    @ Language.PureScript.Names.ModuleName
                    moduleName
                    (GHC.Types.[] @ Language.PureScript.Names.ModuleName)) }) -}
instance GHC.Classes.Eq [Language.PureScript.Ide.Completion.Namespaced]
  = Language.PureScript.Ide.Completion.$fEqNamespaced
instance Data.Aeson.Types.FromJSON.FromJSON [Language.PureScript.Ide.Completion.CompletionOptions]
  = Language.PureScript.Ide.Completion.$fFromJSONCompletionOptions
instance GHC.Classes.Ord [Language.PureScript.Ide.Completion.Namespaced]
  = Language.PureScript.Ide.Completion.$fOrdNamespaced
instance GHC.Show.Show [Language.PureScript.Ide.Completion.Namespaced]
  = Language.PureScript.Ide.Completion.$fShowNamespaced
"SPEC $c/= @ Text" forall ($dEq :: GHC.Classes.Eq
                                     Data.Text.Internal.Text)
  Language.PureScript.Ide.Completion.$fEqNamespaced_$c/= @ Data.Text.Internal.Text
                                                         $dEq
  = Language.PureScript.Ide.Completion.$fEqNamespaced_$s$c/=
"SPEC $c< @ Text" forall ($dOrd :: GHC.Classes.Ord
                                     Data.Text.Internal.Text)
  Language.PureScript.Ide.Completion.$fOrdNamespaced_$c< @ Data.Text.Internal.Text
                                                         $dOrd
  = Language.PureScript.Ide.Completion.$fOrdNamespaced_$s$c<
"SPEC $c<= @ Text" forall ($dOrd :: GHC.Classes.Ord
                                      Data.Text.Internal.Text)
  Language.PureScript.Ide.Completion.$fOrdNamespaced_$c<= @ Data.Text.Internal.Text
                                                          $dOrd
  = Language.PureScript.Ide.Completion.$fOrdNamespaced_$s$c<=
"SPEC $c== @ Text" forall ($dEq :: GHC.Classes.Eq
                                     Data.Text.Internal.Text)
  Language.PureScript.Ide.Completion.$fEqNamespaced_$c== @ Data.Text.Internal.Text
                                                         $dEq
  = Language.PureScript.Ide.Completion.$fEqNamespaced_$s$c==
"SPEC $c>= @ Text" forall ($dOrd :: GHC.Classes.Ord
                                      Data.Text.Internal.Text)
  Language.PureScript.Ide.Completion.$fOrdNamespaced_$c>= @ Data.Text.Internal.Text
                                                          $dOrd
  = Language.PureScript.Ide.Completion.$fOrdNamespaced_$s$c>=
"SPEC $ccompare @ Text" forall ($dOrd :: GHC.Classes.Ord
                                           Data.Text.Internal.Text)
  Language.PureScript.Ide.Completion.$fOrdNamespaced_$ccompare @ Data.Text.Internal.Text
                                                               $dOrd
  = Language.PureScript.Ide.Completion.$fOrdNamespaced_$s$ccompare
"SPEC $cmax @ Text" forall ($dOrd :: GHC.Classes.Ord
                                       Data.Text.Internal.Text)
  Language.PureScript.Ide.Completion.$fOrdNamespaced_$cmax @ Data.Text.Internal.Text
                                                           $dOrd
  = Language.PureScript.Ide.Completion.$fOrdNamespaced_$s$cmax
"SPEC $cmin @ Text" forall ($dOrd :: GHC.Classes.Ord
                                       Data.Text.Internal.Text)
  Language.PureScript.Ide.Completion.$fOrdNamespaced_$cmin @ Data.Text.Internal.Text
                                                           $dOrd
  = Language.PureScript.Ide.Completion.$fOrdNamespaced_$s$cmin
"SPEC $cp1Ord @ Text" forall ($dOrd :: GHC.Classes.Ord
                                         Data.Text.Internal.Text)
  Language.PureScript.Ide.Completion.$fOrdNamespaced_$cp1Ord @ Data.Text.Internal.Text
                                                             $dOrd
  = Language.PureScript.Ide.Completion.$fEqNamespaced_$s$fEqNamespaced
"SPEC $fEqNamespaced @ Text" forall ($dEq :: GHC.Classes.Eq
                                               Data.Text.Internal.Text)
  Language.PureScript.Ide.Completion.$fEqNamespaced @ Data.Text.Internal.Text
                                                    $dEq
  = Language.PureScript.Ide.Completion.$fEqNamespaced_$s$fEqNamespaced
"SPEC $fOrdNamespaced @ Text" forall ($dOrd :: GHC.Classes.Ord
                                                 Data.Text.Internal.Text)
  Language.PureScript.Ide.Completion.$fOrdNamespaced @ Data.Text.Internal.Text
                                                     $dOrd
  = Language.PureScript.Ide.Completion.$fOrdNamespaced_$s$fOrdNamespaced
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

