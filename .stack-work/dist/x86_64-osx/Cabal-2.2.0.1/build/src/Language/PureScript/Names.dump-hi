
==================== FINAL INTERFACE ====================
2018-11-30 19:26:12.225396 UTC

interface purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Names [family instance module] 8043
  interface hash: ee50c975cef0a1837c74b6982a4f87d4
  ABI hash: b3bf151840f3e8f2eb61eff186432886
  export-list hash: f7f3503d20957194bda83c16bb5f1288
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 1318664a0451f53cd25d6499eb9d0f16
  opt_hash: 2c98c95d41c045ae9c2fb565ec8aabc6
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: True
  where
exports:
  Language.PureScript.Names.coerceProperName
  Language.PureScript.Names.disqualify
  Language.PureScript.Names.disqualifyFor
  Language.PureScript.Names.eraseOpName
  Language.PureScript.Names.freshIdent
  Language.PureScript.Names.freshIdent'
  Language.PureScript.Names.getClassName
  Language.PureScript.Names.getDctorName
  Language.PureScript.Names.getIdentName
  Language.PureScript.Names.getKindName
  Language.PureScript.Names.getModName
  Language.PureScript.Names.getQual
  Language.PureScript.Names.getTypeName
  Language.PureScript.Names.getTypeOpName
  Language.PureScript.Names.getValOpName
  Language.PureScript.Names.isBuiltinModuleName
  Language.PureScript.Names.isQualified
  Language.PureScript.Names.isQualifiedWith
  Language.PureScript.Names.isUnqualified
  Language.PureScript.Names.mkQualified
  Language.PureScript.Names.moduleNameFromString
  Language.PureScript.Names.qualify
  Language.PureScript.Names.runIdent
  Language.PureScript.Names.runModuleName
  Language.PureScript.Names.showIdent
  Language.PureScript.Names.showOp
  Language.PureScript.Names.showQualified
  Language.PureScript.Names.Ident{Language.PureScript.Names.GenIdent Language.PureScript.Names.Ident Language.PureScript.Names.UnusedIdent}
  Language.PureScript.Names.ModuleName{Language.PureScript.Names.ModuleName}
  Language.PureScript.Names.Name{Language.PureScript.Names.DctorName Language.PureScript.Names.IdentName Language.PureScript.Names.KiName Language.PureScript.Names.ModName Language.PureScript.Names.TyClassName Language.PureScript.Names.TyName Language.PureScript.Names.TyOpName Language.PureScript.Names.ValOpName}
  Language.PureScript.Names.OpName{Language.PureScript.Names.OpName runOpName}
  Language.PureScript.Names.OpNameType{Language.PureScript.Names.AnyOpName Language.PureScript.Names.TypeOpName Language.PureScript.Names.ValueOpName}
  Language.PureScript.Names.ProperName{Language.PureScript.Names.ProperName runProperName}
  Language.PureScript.Names.ProperNameType{Language.PureScript.Names.ClassName Language.PureScript.Names.ConstructorName Language.PureScript.Names.KindName Language.PureScript.Names.Namespace Language.PureScript.Names.TypeName}
  Language.PureScript.Names.Qualified{Language.PureScript.Names.Qualified}
module dependencies: Control.Monad.Supply
                     Control.Monad.Supply.Class
package dependencies: aeson-1.3.1.1 array-0.5.2.0
                      attoparsec-0.13.2.2 base-4.11.1.0 base-compat-0.10.4 binary-0.8.5.1
                      bytestring-0.10.8.2 containers-0.5.11.0 deepseq-1.4.3.0
                      dlist-0.8.0.4 ghc-boot-th-8.4.3 ghc-prim-0.5.2.0 hashable-1.2.7.0
                      integer-gmp-1.0.2.0 integer-logarithms-1.0.2.1 mtl-2.2.2
                      pretty-1.1.3.6 primitive-0.6.3.0 random-1.1 scientific-0.3.6.2
                      tagged-0.8.5 template-haskell-2.13.0.0 text-1.2.3.0
                      th-abstraction-0.2.8.0 time-1.8.0.2 time-locale-compat-0.1.1.4
                      transformers-0.5.5.0 unordered-containers-0.2.9.0 uuid-types-1.0.3
                      vector-0.12.0.1
orphans: attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         vector-0.12.0.1:Data.Vector.Unboxed
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.0:Data.Text.Lazy
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.5.0:Control.Monad.Trans.Error
         text-1.2.3.0:Data.Text binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: aeson-1.3.1.1:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         dlist-0.8.0.4:Data.DList ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray tagged-0.8.5:Data.Tagged
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
                         th-abstraction-0.2.8.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  aeson-1.3.1.1:Data.Aeson 108dfb08de41cf77aad4693ac1dc3d44
import  -/  aeson-1.3.1.1:Data.Aeson.Encoding.Internal f04efae65181ca66f15bea14741e502d
import  -/  aeson-1.3.1.1:Data.Aeson.TH 7d552baba5d6d064e5d0fb814e331004
import  -/  aeson-1.3.1.1:Data.Aeson.Types.FromJSON 1ea0c919856f0d29f12e53cd074d532c
import  -/  aeson-1.3.1.1:Data.Aeson.Types.Internal df76c21edff000f9355bfb6fb0dbf3e6
import  -/  aeson-1.3.1.1:Data.Aeson.Types.ToJSON 587c7d8b9444e85253d7faf5f824f568
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.Functor f522c3501272159820fd6f242510732f
import  -/  base-4.11.1.0:Data.Traversable 7ad4edb9184ea1ae8e73f6b94f115c8c
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Generics 4d1469b3e29804a05a1be33d11accff6
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-compat-0.10.4:Prelude.Compat bb6796186ed35a1d09dc34362a3fc27e
import  -/  deepseq-1.4.3.0:Control.DeepSeq 171f1f567c47ef82860df4ad686d11b1
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  integer-gmp-1.0.2.0:GHC.Integer.Type f3d5169c3d3830854b19f6565b265403
import  -/  Control.Monad.Supply.Class a5ac88ebb2786fa0ca39c7248b7c5b8f
  exports: 91d489aaf16020272ece745e2b32bd17
  MonadSupply 6a9f80f28cc3fad47a987fee945f2fd2
  fresh 059a00eff867473c24270fd8cf5699ba
import  -/  text-1.2.3.0:Data.Text 7daa7e6c9b39d8cc1679e5ec5c64d2be
import  -/  text-1.2.3.0:Data.Text.Internal 30a0a123f71f63b26cd34c6b24f23411
import  -/  text-1.2.3.0:Data.Text.Show 3b4b6fb2985a731022d67f636682da2b
import  -/  unordered-containers-0.2.9.0:Data.HashMap.Base aa3368c2691ac85cecf0d74a4bea8e4d
import  -/  vector-0.12.0.1:Data.Vector f729e70597cc595442dc4fc6c91177bf
import  -/  vector-0.12.0.1:Data.Vector.Mutable e09e8bccd569472cc65f5c99a3d45010
ab98a56ffa88760dad1380079e8ee35a
  $fEqIdent :: GHC.Classes.Eq Language.PureScript.Names.Ident
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Names.Ident
                  Language.PureScript.Names.$fEqIdent_$c==
                  Language.PureScript.Names.$fEqIdent_$c/= -}
ab98a56ffa88760dad1380079e8ee35a
  $fEqIdent_$c/= ::
    Language.PureScript.Names.Ident
    -> Language.PureScript.Names.Ident -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Names.Ident)
                   (y :: Language.PureScript.Names.Ident) ->
                 case Language.PureScript.Names.$fEqIdent_$c== x y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
ab98a56ffa88760dad1380079e8ee35a
  $fEqIdent_$c== ::
    Language.PureScript.Names.Ident
    -> Language.PureScript.Names.Ident -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Language.PureScript.Names.Ident)
                   (ds1 :: Language.PureScript.Names.Ident) ->
                 case ds of wild {
                   Language.PureScript.Names.Ident a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Names.Ident b1
                        -> Data.Text.$fEqText_$c== a1 b1 }
                   Language.PureScript.Names.GenIdent a1 a2
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Names.GenIdent b1 b2
                        -> case a1 of wild2 {
                             GHC.Base.Nothing
                             -> case b1 of wild3 {
                                  GHC.Base.Nothing -> GHC.Integer.Type.eqInteger a2 b2
                                  GHC.Base.Just ipv -> GHC.Types.False }
                             GHC.Base.Just a4
                             -> case b1 of wild3 {
                                  GHC.Base.Nothing -> GHC.Types.False
                                  GHC.Base.Just b4
                                  -> case a4 of wild4 { Data.Text.Internal.Text dt dt1 dt2 ->
                                     case b4 of wild5 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                                     case GHC.Prim.==# dt2 dt5 of lwild {
                                       DEFAULT -> GHC.Types.False
                                       1#
                                       -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                                         -> GHC.Prim.Word#
                                                                         -> GHC.Prim.ByteArray#
                                                                         -> GHC.Prim.Word#
                                                                         -> GHC.Prim.Word#
                                                                         -> GHC.Prim.State#
                                                                              GHC.Prim.RealWorld
                                                                         -> (# GHC.Prim.State#
                                                                                 GHC.Prim.RealWorld,
                                                                               GHC.Prim.Int# #)}
                                                 dt
                                                 (GHC.Prim.int2Word# dt1)
                                                 dt3
                                                 (GHC.Prim.int2Word# dt4)
                                                 (GHC.Prim.int2Word# dt2)
                                                 GHC.Prim.realWorld# of wild6 { (#,#) ds2 ds3 ->
                                          case GHC.Prim.narrow32Int# ds3 of wild7 {
                                            DEFAULT -> GHC.Types.False
                                            0# -> GHC.Integer.Type.eqInteger a2 b2 } } } } } } } }
                   Language.PureScript.Names.UnusedIdent
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Names.UnusedIdent -> GHC.Types.True } }) -}
5a70062bbdf29e6dc659ad8bf5326b50
  $fEqModuleName ::
    GHC.Classes.Eq Language.PureScript.Names.ModuleName
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Names.ModuleName
                  Language.PureScript.Names.$fEqModuleName1
                    `cast`
                  (Sym (Language.PureScript.Names.N:ModuleName[0])
                   ->_R Sym (Language.PureScript.Names.N:ModuleName[0])
                   ->_R <GHC.Types.Bool>_R)
                  Language.PureScript.Names.$fEqModuleName_$s$fEq[]_$c/=
                    `cast`
                  (Sym (Language.PureScript.Names.N:ModuleName[0])
                   ->_R Sym (Language.PureScript.Names.N:ModuleName[0])
                   ->_R <GHC.Types.Bool>_R) -}
260f4ba4395d5cf80fc5e7f2723fad76
  $fEqModuleName1 ::
    [Language.PureScript.Names.ProperName
       'Language.PureScript.Names.Namespace]
    -> [Language.PureScript.Names.ProperName
          'Language.PureScript.Names.Namespace]
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (GHC.Classes.$fEq[]_$c==
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.Namespace)
                   (Language.PureScript.Names.$fEqProperName
                      @ 'Language.PureScript.Names.Namespace)) -}
29f101e190cc99df85623423972e606f
  $fEqModuleName_$s$fEq[]_$c/= ::
    [Language.PureScript.Names.ProperName
       'Language.PureScript.Names.Namespace]
    -> [Language.PureScript.Names.ProperName
          'Language.PureScript.Names.Namespace]
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: [Language.PureScript.Names.ProperName
                            'Language.PureScript.Names.Namespace])
                   (y :: [Language.PureScript.Names.ProperName
                            'Language.PureScript.Names.Namespace]) ->
                 case GHC.Classes.$fEq[]_$c==
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.Namespace)
                        (Language.PureScript.Names.$fEqProperName
                           @ 'Language.PureScript.Names.Namespace)
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
184494d9e734645f374e2a0fce32bfac
  $fEqName :: GHC.Classes.Eq Language.PureScript.Names.Name
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Names.Name
                  Language.PureScript.Names.$fEqName_$c==
                  Language.PureScript.Names.$fEqName_$c/= -}
184494d9e734645f374e2a0fce32bfac
  $fEqName_$c/= ::
    Language.PureScript.Names.Name
    -> Language.PureScript.Names.Name -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Names.Name)
                   (y :: Language.PureScript.Names.Name) ->
                 case Language.PureScript.Names.$fEqName_$c== x y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
184494d9e734645f374e2a0fce32bfac
  $fEqName_$c== ::
    Language.PureScript.Names.Name
    -> Language.PureScript.Names.Name -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Language.PureScript.Names.Name)
                   (ds1 :: Language.PureScript.Names.Name) ->
                 case ds of wild {
                   Language.PureScript.Names.IdentName a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Names.IdentName b1
                        -> Language.PureScript.Names.$fEqIdent_$c== a1 b1 }
                   Language.PureScript.Names.ValOpName a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Names.ValOpName b1
                        -> Data.Text.$fEqText_$c==
                             a1
                               `cast`
                             (Language.PureScript.Names.N:OpName[0]
                                  <'Language.PureScript.Names.ValueOpName>_P)
                             b1
                               `cast`
                             (Language.PureScript.Names.N:OpName[0]
                                  <'Language.PureScript.Names.ValueOpName>_P) }
                   Language.PureScript.Names.TyName a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Names.TyName b1
                        -> Data.Text.$fEqText_$c==
                             a1
                               `cast`
                             (Language.PureScript.Names.N:ProperName[0]
                                  <'Language.PureScript.Names.TypeName>_P)
                             b1
                               `cast`
                             (Language.PureScript.Names.N:ProperName[0]
                                  <'Language.PureScript.Names.TypeName>_P) }
                   Language.PureScript.Names.TyOpName a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Names.TyOpName b1
                        -> Data.Text.$fEqText_$c==
                             a1
                               `cast`
                             (Language.PureScript.Names.N:OpName[0]
                                  <'Language.PureScript.Names.TypeOpName>_P)
                             b1
                               `cast`
                             (Language.PureScript.Names.N:OpName[0]
                                  <'Language.PureScript.Names.TypeOpName>_P) }
                   Language.PureScript.Names.DctorName a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Names.DctorName b1
                        -> Data.Text.$fEqText_$c==
                             a1
                               `cast`
                             (Language.PureScript.Names.N:ProperName[0]
                                  <'Language.PureScript.Names.ConstructorName>_P)
                             b1
                               `cast`
                             (Language.PureScript.Names.N:ProperName[0]
                                  <'Language.PureScript.Names.ConstructorName>_P) }
                   Language.PureScript.Names.TyClassName a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Names.TyClassName b1
                        -> Data.Text.$fEqText_$c==
                             a1
                               `cast`
                             (Language.PureScript.Names.N:ProperName[0]
                                  <'Language.PureScript.Names.ClassName>_P)
                             b1
                               `cast`
                             (Language.PureScript.Names.N:ProperName[0]
                                  <'Language.PureScript.Names.ClassName>_P) }
                   Language.PureScript.Names.ModName a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Names.ModName b1
                        -> GHC.Classes.$fEq[]_$c==
                             @ (Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.Namespace)
                             (Language.PureScript.Names.$fEqProperName
                                @ 'Language.PureScript.Names.Namespace)
                             a1 `cast` (Language.PureScript.Names.N:ModuleName[0])
                             b1 `cast` (Language.PureScript.Names.N:ModuleName[0]) }
                   Language.PureScript.Names.KiName a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Names.KiName b1
                        -> Data.Text.$fEqText_$c==
                             a1
                               `cast`
                             (Language.PureScript.Names.N:ProperName[0]
                                  <'Language.PureScript.Names.KindName>_P)
                             b1
                               `cast`
                             (Language.PureScript.Names.N:ProperName[0]
                                  <'Language.PureScript.Names.KindName>_P) } }) -}
1522672b880b192c6e05e6cf8a45712d
  $fEqOpName :: GHC.Classes.Eq (Language.PureScript.Names.OpName a)
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ a :: Language.PureScript.Names.OpNameType.
                  @ (Language.PureScript.Names.OpName a)
                  Data.Text.$fEqText_$c==
                    `cast`
                  (Sym (Language.PureScript.Names.N:OpName[0] <a>_P)
                   ->_R Sym (Language.PureScript.Names.N:OpName[0] <a>_P)
                   ->_R <GHC.Types.Bool>_R)
                  Data.Text.$fEqText_$c/=
                    `cast`
                  (Sym (Language.PureScript.Names.N:OpName[0] <a>_P)
                   ->_R Sym (Language.PureScript.Names.N:OpName[0] <a>_P)
                   ->_R <GHC.Types.Bool>_R) -}
29f101e190cc99df85623423972e606f
  $fEqProperName ::
    GHC.Classes.Eq (Language.PureScript.Names.ProperName a)
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ a :: Language.PureScript.Names.ProperNameType.
                  @ (Language.PureScript.Names.ProperName a)
                  Data.Text.$fEqText_$c==
                    `cast`
                  (Sym (Language.PureScript.Names.N:ProperName[0] <a>_P)
                   ->_R Sym (Language.PureScript.Names.N:ProperName[0] <a>_P)
                   ->_R <GHC.Types.Bool>_R)
                  Data.Text.$fEqText_$c/=
                    `cast`
                  (Sym (Language.PureScript.Names.N:ProperName[0] <a>_P)
                   ->_R Sym (Language.PureScript.Names.N:ProperName[0] <a>_P)
                   ->_R <GHC.Types.Bool>_R) -}
5a70062bbdf29e6dc659ad8bf5326b50
  $fEqQualified ::
    GHC.Classes.Eq a =>
    GHC.Classes.Eq (Language.PureScript.Names.Qualified a)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Classes.Eq a).
                  @ (Language.PureScript.Names.Qualified a)
                  (Language.PureScript.Names.$fEqQualified_$c== @ a v)
                  (Language.PureScript.Names.$fEqQualified_$c/= @ a v) -}
5a70062bbdf29e6dc659ad8bf5326b50
  $fEqQualified_$c/= ::
    GHC.Classes.Eq a =>
    Language.PureScript.Names.Qualified a
    -> Language.PureScript.Names.Qualified a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S(SL),1*U(1*U,U)><S(SL),1*U(1*U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ a
                   ($dEq :: GHC.Classes.Eq a)
                   (x :: Language.PureScript.Names.Qualified a)
                   (y :: Language.PureScript.Names.Qualified a) ->
                 case Language.PureScript.Names.$fEqQualified_$c==
                        @ a
                        $dEq
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
5a70062bbdf29e6dc659ad8bf5326b50
  $fEqQualified_$c== ::
    GHC.Classes.Eq a =>
    Language.PureScript.Names.Qualified a
    -> Language.PureScript.Names.Qualified a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S(SL),1*U(1*U,U)><S(SL),1*U(1*U,U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: GHC.Classes.Eq a)
                   (w1 :: Language.PureScript.Names.Qualified a)
                   (w2 :: Language.PureScript.Names.Qualified a) ->
                 case w1 of ww { Language.PureScript.Names.Qualified ww1 ww2 ->
                 case w2 of ww3 { Language.PureScript.Names.Qualified ww4 ww5 ->
                 Language.PureScript.Names.$w$c== @ a w ww1 ww2 ww4 ww5 } }) -}
5a70062bbdf29e6dc659ad8bf5326b50
  $fFoldableQualified ::
    Data.Foldable.Foldable Language.PureScript.Names.Qualified
  DFunId
  {- HasNoCafRefs, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Names.Qualified
                  Language.PureScript.Names.$fFoldableQualified_$cfold
                  Language.PureScript.Names.$fFoldableQualified_$cfoldMap
                  Language.PureScript.Names.$fFoldableQualified_$cfoldr
                  Language.PureScript.Names.$fFoldableQualified_$cfoldr
                  Language.PureScript.Names.$fFoldableQualified_$cfoldl'
                  Language.PureScript.Names.$fFoldableQualified_$cfoldl'
                  Language.PureScript.Names.$fFoldableQualified_$cfoldr1
                  Language.PureScript.Names.$fFoldableQualified_$cfoldr1
                  Language.PureScript.Names.$fFoldableQualified_$ctoList
                  Language.PureScript.Names.$fFoldableQualified_$cnull
                  Language.PureScript.Names.$fFoldableQualified_$clength
                  Language.PureScript.Names.$fFoldableQualified_$celem
                  Language.PureScript.Names.$fFoldableQualified_$cminimum
                  Language.PureScript.Names.$fFoldableQualified_$cminimum
                  Language.PureScript.Names.$fFoldableQualified2
                    `cast`
                  (forall (a :: <*>_N).
                   <GHC.Num.Num a>_R
                   ->_R <Language.PureScript.Names.Qualified a>_R
                   ->_R Data.Semigroup.Internal.N:Sum[0] <a>_R)
                  Language.PureScript.Names.$fFoldableQualified1
                    `cast`
                  (forall (a :: <*>_N).
                   <GHC.Num.Num a>_R
                   ->_R <Language.PureScript.Names.Qualified a>_R
                   ->_R Data.Semigroup.Internal.N:Product[0] <a>_R) -}
5a70062bbdf29e6dc659ad8bf5326b50
  $fFoldableQualified1 ::
    GHC.Num.Num a =>
    Language.PureScript.Names.Qualified a
    -> Data.Semigroup.Internal.Product a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   ($dNum :: GHC.Num.Num a)
                   (eta :: Language.PureScript.Names.Qualified a) ->
                 case eta of wild { Language.PureScript.Names.Qualified a1 a2 ->
                 a2 `cast` (Sym (Data.Semigroup.Internal.N:Product[0] <a>_R)) }) -}
5a70062bbdf29e6dc659ad8bf5326b50
  $fFoldableQualified2 ::
    GHC.Num.Num a =>
    Language.PureScript.Names.Qualified a
    -> Data.Semigroup.Internal.Sum a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   ($dNum :: GHC.Num.Num a)
                   (eta :: Language.PureScript.Names.Qualified a) ->
                 case eta of wild { Language.PureScript.Names.Qualified a1 a2 ->
                 a2 `cast` (Sym (Data.Semigroup.Internal.N:Sum[0] <a>_R)) }) -}
5a70062bbdf29e6dc659ad8bf5326b50
  $fFoldableQualified3 :: Language.PureScript.Names.Qualified a -> a
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (x :: Language.PureScript.Names.Qualified a) ->
                 case x of wild { Language.PureScript.Names.Qualified a1 a2 ->
                 a2 }) -}
5a70062bbdf29e6dc659ad8bf5326b50
  $fFoldableQualified_$celem ::
    GHC.Classes.Eq a =>
    a -> Language.PureScript.Names.Qualified a -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(1*C1(C(U)),A)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a ($dEq :: GHC.Classes.Eq a) (eta :: a) ->
                 let {
                   f :: a -> GHC.Types.Bool = GHC.Classes.== @ a $dEq eta
                 } in
                 (\ (ds :: Language.PureScript.Names.Qualified a) ->
                  case ds of wild { Language.PureScript.Names.Qualified a1 a2 ->
                  (f a2) `cast` (Sym (Data.Semigroup.Internal.N:Any[0])) })
                   `cast`
                 (<Language.PureScript.Names.Qualified a>_R
                  ->_R Data.Semigroup.Internal.N:Any[0])) -}
5a70062bbdf29e6dc659ad8bf5326b50
  $fFoldableQualified_$cfold ::
    GHC.Base.Monoid m => Language.PureScript.Names.Qualified m -> m
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ m
                   ($dMonoid :: GHC.Base.Monoid m)
                   (ds :: Language.PureScript.Names.Qualified m) ->
                 case ds of wild { Language.PureScript.Names.Qualified a1 a2 ->
                 a2 }) -}
5a70062bbdf29e6dc659ad8bf5326b50
  $fFoldableQualified_$cfoldMap ::
    GHC.Base.Monoid m =>
    (a -> m) -> Language.PureScript.Names.Qualified a -> m
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,A><C(S),1*C1(U)><S,1*U(A,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ m
                   @ a
                   ($dMonoid :: GHC.Base.Monoid m)
                   (f :: a -> m)
                   (ds :: Language.PureScript.Names.Qualified a) ->
                 case ds of wild { Language.PureScript.Names.Qualified a1 a2 ->
                 f a2 }) -}
5a70062bbdf29e6dc659ad8bf5326b50
  $fFoldableQualified_$cfoldl' ::
    (b -> a -> b) -> b -> Language.PureScript.Names.Qualified a -> b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(C(S)),1*C1(C1(U))><L,U><S,1*U(A,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ b
                   @ a
                   (f :: b -> a -> b)
                   (z0 :: b)
                   (xs :: Language.PureScript.Names.Qualified a) ->
                 case xs of wild { Language.PureScript.Names.Qualified a1 a2 ->
                 f z0 a2 }) -}
5a70062bbdf29e6dc659ad8bf5326b50
  $fFoldableQualified_$cfoldr ::
    (a -> b -> b) -> b -> Language.PureScript.Names.Qualified a -> b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(C(S)),1*C1(C1(U))><L,U><S,1*U(A,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ b
                   (f :: a -> b -> b)
                   (z2 :: b)
                   (ds :: Language.PureScript.Names.Qualified a) ->
                 case ds of wild { Language.PureScript.Names.Qualified a1 a2 ->
                 f a2 z2 }) -}
5a70062bbdf29e6dc659ad8bf5326b50
  $fFoldableQualified_$cfoldr1 ::
    (a -> a -> a) -> Language.PureScript.Names.Qualified a -> a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (f :: a -> a -> a)
                   (xs :: Language.PureScript.Names.Qualified a) ->
                 case xs of wild { Language.PureScript.Names.Qualified a1 a2 ->
                 a2 }) -}
5a70062bbdf29e6dc659ad8bf5326b50
  $fFoldableQualified_$clength ::
    Language.PureScript.Names.Qualified a -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*H>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (xs :: Language.PureScript.Names.Qualified a) ->
                 case xs of wild { Language.PureScript.Names.Qualified a1 a2 ->
                 GHC.Types.I# 1# }) -}
5a70062bbdf29e6dc659ad8bf5326b50
  $fFoldableQualified_$cminimum ::
    GHC.Classes.Ord a => Language.PureScript.Names.Qualified a -> a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dOrd :: GHC.Classes.Ord a) ->
                 Language.PureScript.Names.$fFoldableQualified3 @ a) -}
5a70062bbdf29e6dc659ad8bf5326b50
  $fFoldableQualified_$cnull ::
    Language.PureScript.Names.Qualified a -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*H>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: Language.PureScript.Names.Qualified a) ->
                 case ds of wild { Language.PureScript.Names.Qualified ds1 ds2 ->
                 GHC.Types.False }) -}
5a70062bbdf29e6dc659ad8bf5326b50
  $fFoldableQualified_$ctoList ::
    Language.PureScript.Names.Qualified a -> [a]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(A,U)>m2,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ a (t2 :: Language.PureScript.Names.Qualified a) ->
                 GHC.Base.build
                   @ a
                   (\ @ b (c :: a -> b -> b)[OneShot] (n :: b)[OneShot] ->
                    case t2 of wild { Language.PureScript.Names.Qualified a1 a2 ->
                    c a2 n })) -}
ab98a56ffa88760dad1380079e8ee35a
  $fFromJSONIdent ::
    Data.Aeson.Types.FromJSON.FromJSON Language.PureScript.Names.Ident
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Names.Ident
                  Language.PureScript.Names.$fFromJSONIdent_$cparseJSON
                  Language.PureScript.Names.$fFromJSONIdent_$cparseJSONList -}
3ffc4f93cd9c46908ecb1cce622457b9
  $fFromJSONIdent1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (", encountered "#) -}
34f731af615ae8f66d369d001e202c48
  $fFromJSONIdent2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("[a]"#) -}
74f3d4ee1c4e21d232878a0bae89bc00
  $fFromJSONIdent3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("expected "#) -}
ab98a56ffa88760dad1380079e8ee35a
  $fFromJSONIdent4 ::
    [(Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value)]
    -> Data.Aeson.Types.Internal.Parser Language.PureScript.Names.Ident
  {- Arity: 1, Strictness: <S,U> -}
cec21f680265eaf25b195123f7c62a7f
  $fFromJSONIdent5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Names.$fFromJSONIdent6) -}
314398447df3a3dbd848ce7848f03303
  $fFromJSONIdent6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Language.PureScript.Names.Ident"#) -}
ab98a56ffa88760dad1380079e8ee35a
  $fFromJSONIdent_$cparseJSON ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser Language.PureScript.Names.Ident
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (value :: Data.Aeson.Types.Internal.Value) ->
                 case value of wild {
                   DEFAULT
                   -> Data.Aeson.TH.noObjectFail
                        @ Language.PureScript.Names.Ident
                        Language.PureScript.Names.$fFromJSONIdent5
                        (case wild of wild1 {
                           Data.Aeson.Types.Internal.Array ds9 -> Data.Aeson.TH.valueConName9
                           Data.Aeson.Types.Internal.String ds9 -> Data.Aeson.TH.valueConName7
                           Data.Aeson.Types.Internal.Number ds9 -> Data.Aeson.TH.valueConName5
                           Data.Aeson.Types.Internal.Bool ds9 -> Data.Aeson.TH.valueConName3
                           Data.Aeson.Types.Internal.Null -> Data.Aeson.TH.valueConName1 })
                   Data.Aeson.Types.Internal.Object obj
                   -> case obj of wild1 {
                        Data.HashMap.Base.Empty
                        -> Language.PureScript.Names.$fFromJSONIdent4
                             (GHC.Types.[]
                                @ (Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value))
                        Data.HashMap.Base.BitmapIndexed dt dt1
                        -> Language.PureScript.Names.$fFromJSONIdent4
                             (Language.PureScript.Names.$fFromJSONIdent_$s$wgo3
                                (GHC.Types.[]
                                   @ (Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value))
                                0#
                                (GHC.Prim.sizeofSmallArray#
                                   @ (Data.HashMap.Base.HashMap
                                        Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                                   dt1)
                                dt1)
                        Data.HashMap.Base.Leaf dt dt1 dt2
                        -> Language.PureScript.Names.$fFromJSONIdent4
                             (GHC.Types.:
                                @ (Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value)
                                (dt1, dt2)
                                (GHC.Types.[]
                                   @ (Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value)))
                        Data.HashMap.Base.Full dt
                        -> Language.PureScript.Names.$fFromJSONIdent4
                             (Language.PureScript.Names.$fFromJSONIdent_$s$wgo1
                                (GHC.Types.[]
                                   @ (Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value))
                                0#
                                (GHC.Prim.sizeofSmallArray#
                                   @ (Data.HashMap.Base.HashMap
                                        Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                                   dt)
                                dt)
                        Data.HashMap.Base.Collision dt dt1
                        -> Language.PureScript.Names.$fFromJSONIdent4
                             (Language.PureScript.Names.$fFromJSONIdent_$s$wgo2
                                (GHC.Types.[]
                                   @ (Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value))
                                0#
                                (GHC.Prim.sizeofSmallArray#
                                   @ (Data.HashMap.Base.Leaf
                                        Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                                   dt1)
                                dt1) } }) -}
ab98a56ffa88760dad1380079e8ee35a
  $fFromJSONIdent_$cparseJSONList ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         [Language.PureScript.Names.Ident]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Data.Aeson.Types.Internal.Value) ->
                 case ds of wild {
                   DEFAULT
                   -> let {
                        msg19 :: GHC.Base.String
                        = GHC.CString.unpackAppendCString#
                            Language.PureScript.Names.$fFromJSONIdent3
                            (GHC.CString.unpackAppendCString#
                               Language.PureScript.Names.$fFromJSONIdent2
                               (GHC.CString.unpackAppendCString#
                                  Language.PureScript.Names.$fFromJSONIdent1
                                  (case wild of wild1 {
                                     Data.Aeson.Types.Internal.Object ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList10
                                     Data.Aeson.Types.Internal.String ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList8
                                     Data.Aeson.Types.Internal.Number ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList6
                                     Data.Aeson.Types.Internal.Bool ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList4
                                     Data.Aeson.Types.Internal.Null
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList1 })))
                      } in
                      (\ @ f4 :: * -> *
                         @ r
                         (path :: Data.Aeson.Types.Internal.JSONPath)
                         (kf :: Data.Aeson.Types.Internal.Failure f4 r)
                         (_ks :: Data.Aeson.Types.Internal.Success
                                   [Language.PureScript.Names.Ident] f4 r) ->
                       kf
                         (GHC.List.reverse @ Data.Aeson.Types.Internal.JSONPathElement path)
                         msg19)
                        `cast`
                      (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                <[Language.PureScript.Names.Ident]>_R))
                   Data.Aeson.Types.Internal.Array a2
                   -> case a2 of wild1 { Data.Vector.Vector dt dt1 dt2 ->
                      letrec {
                        $wgo :: GHC.Prim.Int# -> [Data.Aeson.Types.Internal.Value]
                          {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                        = \ (ww :: GHC.Prim.Int#) ->
                          case GHC.Prim.>=# ww dt1 of lwild {
                            DEFAULT
                            -> case GHC.Prim.indexArray#
                                      @ Data.Aeson.Types.Internal.Value
                                      dt2
                                      (GHC.Prim.+# dt ww) of ds3 { Unit# ipv ->
                               GHC.Types.:
                                 @ Data.Aeson.Types.Internal.Value
                                 ipv
                                 ($wgo (GHC.Prim.+# ww 1#)) }
                            1# -> GHC.Types.[] @ Data.Aeson.Types.Internal.Value }
                      } in
                      Language.PureScript.Names.$fFromJSONIdent_go 0# ($wgo 0#) } }) -}
4b8d3aad68b721e18d35f5b06884cbe0
  $fFromJSONIdent_$s$wgo1 ::
    [(Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value)]
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.SmallArray#
         (Data.HashMap.Base.HashMap
            Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
    -> [(Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value)]
  {- Arity: 4, HasNoCafRefs, Strictness: <L,1*U><S,U><S,U><L,U> -}
cfe046face6afe7db83009335cd2dd4d
  $fFromJSONIdent_$s$wgo2 ::
    [(Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value)]
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.SmallArray#
         (Data.HashMap.Base.Leaf
            Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
    -> [(Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value)]
  {- Arity: 4, HasNoCafRefs, Strictness: <L,1*U><S,U><S,U><L,U> -}
cd8061105da4bc034a9ff676edc5a9ba
  $fFromJSONIdent_$s$wgo3 ::
    [(Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value)]
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.SmallArray#
         (Data.HashMap.Base.HashMap
            Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
    -> [(Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value)]
  {- Arity: 4, HasNoCafRefs, Strictness: <L,1*U><S,U><S,U><L,U> -}
ab98a56ffa88760dad1380079e8ee35a
  $fFromJSONIdent_go ::
    GHC.Prim.Int#
    -> [Data.Aeson.Types.Internal.Value]
    -> Data.Aeson.Types.Internal.Parser
         [Language.PureScript.Names.Ident]
  {- Arity: 2, Strictness: <L,U><S,1*U> -}
5a70062bbdf29e6dc659ad8bf5326b50
  $fFromJSONModuleName ::
    Data.Aeson.Types.FromJSON.FromJSON
      Language.PureScript.Names.ModuleName
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Names.ModuleName
                  Language.PureScript.Names.$fFromJSONModuleName_$cparseJSON
                  Language.PureScript.Names.$fFromJSONModuleName_$cparseJSONList -}
29f101e190cc99df85623423972e606f
  $fFromJSONModuleName1 ::
    GHC.Prim.Int#
    -> [Data.Aeson.Types.Internal.Value]
    -> Data.Aeson.Types.Internal.Parser
         [Language.PureScript.Names.ProperName a]
  {- Arity: 2, Strictness: <L,U><S,1*U> -}
5a70062bbdf29e6dc659ad8bf5326b50
  $fFromJSONModuleName_$cparseJSON ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         Language.PureScript.Names.ModuleName
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ (value :: Data.Aeson.Types.Internal.Value) ->
                 let {
                   m :: Data.Aeson.Types.Internal.Parser
                          [Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.Namespace]
                   = Language.PureScript.Names.$fFromJSONModuleName_$cparseJSONList1
                       @ 'Language.PureScript.Names.Namespace
                       value
                 } in
                 (\ @ f5 :: * -> *
                    @ r
                    (path :: Data.Aeson.Types.Internal.JSONPath)
                    (kf :: Data.Aeson.Types.Internal.Failure f5 r)
                    (ks :: Data.Aeson.Types.Internal.Success
                             Language.PureScript.Names.ModuleName f5 r) ->
                  m `cast`
                  (Data.Aeson.Types.Internal.N:Parser[0]
                       <[Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.Namespace]>_R)
                    @ f5
                    @ r
                    path
                    kf
                    (\ (a1 :: [Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.Namespace]) ->
                     ks a1 `cast` (Sym (Language.PureScript.Names.N:ModuleName[0]))))
                   `cast`
                 (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                           <Language.PureScript.Names.ModuleName>_R))) -}
5a70062bbdf29e6dc659ad8bf5326b50
  $fFromJSONModuleName_$cparseJSONList ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         [Language.PureScript.Names.ModuleName]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Data.Aeson.Types.Internal.Value) ->
                 case ds of wild {
                   DEFAULT
                   -> let {
                        msg19 :: GHC.Base.String
                        = GHC.CString.unpackAppendCString#
                            Language.PureScript.Names.$fFromJSONIdent3
                            (GHC.CString.unpackAppendCString#
                               Language.PureScript.Names.$fFromJSONIdent2
                               (GHC.CString.unpackAppendCString#
                                  Language.PureScript.Names.$fFromJSONIdent1
                                  (case wild of wild1 {
                                     Data.Aeson.Types.Internal.Object ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList10
                                     Data.Aeson.Types.Internal.String ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList8
                                     Data.Aeson.Types.Internal.Number ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList6
                                     Data.Aeson.Types.Internal.Bool ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList4
                                     Data.Aeson.Types.Internal.Null
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList1 })))
                      } in
                      (\ @ f4 :: * -> *
                         @ r
                         (path :: Data.Aeson.Types.Internal.JSONPath)
                         (kf :: Data.Aeson.Types.Internal.Failure f4 r)
                         (_ks :: Data.Aeson.Types.Internal.Success
                                   [Language.PureScript.Names.ModuleName] f4 r) ->
                       kf
                         (GHC.List.reverse @ Data.Aeson.Types.Internal.JSONPathElement path)
                         msg19)
                        `cast`
                      (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                <[Language.PureScript.Names.ModuleName]>_R))
                   Data.Aeson.Types.Internal.Array a2
                   -> case a2 of wild1 { Data.Vector.Vector dt dt1 dt2 ->
                      letrec {
                        $wgo :: GHC.Prim.Int# -> [Data.Aeson.Types.Internal.Value]
                          {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                        = \ (ww :: GHC.Prim.Int#) ->
                          case GHC.Prim.>=# ww dt1 of lwild {
                            DEFAULT
                            -> case GHC.Prim.indexArray#
                                      @ Data.Aeson.Types.Internal.Value
                                      dt2
                                      (GHC.Prim.+# dt ww) of ds3 { Unit# ipv ->
                               GHC.Types.:
                                 @ Data.Aeson.Types.Internal.Value
                                 ipv
                                 ($wgo (GHC.Prim.+# ww 1#)) }
                            1# -> GHC.Types.[] @ Data.Aeson.Types.Internal.Value }
                      } in
                      Language.PureScript.Names.$fFromJSONModuleName_go
                        0#
                        ($wgo 0#) } }) -}
29f101e190cc99df85623423972e606f
  $fFromJSONModuleName_$cparseJSONList1 ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         [Language.PureScript.Names.ProperName a]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a :: Language.PureScript.Names.ProperNameType
                   (ds :: Data.Aeson.Types.Internal.Value) ->
                 case ds of wild {
                   DEFAULT
                   -> let {
                        msg19 :: GHC.Base.String
                        = GHC.CString.unpackAppendCString#
                            Language.PureScript.Names.$fFromJSONIdent3
                            (GHC.CString.unpackAppendCString#
                               Language.PureScript.Names.$fFromJSONIdent2
                               (GHC.CString.unpackAppendCString#
                                  Language.PureScript.Names.$fFromJSONIdent1
                                  (case wild of wild1 {
                                     Data.Aeson.Types.Internal.Object ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList10
                                     Data.Aeson.Types.Internal.String ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList8
                                     Data.Aeson.Types.Internal.Number ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList6
                                     Data.Aeson.Types.Internal.Bool ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList4
                                     Data.Aeson.Types.Internal.Null
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList1 })))
                      } in
                      (\ @ f4 :: * -> *
                         @ r
                         (path :: Data.Aeson.Types.Internal.JSONPath)
                         (kf :: Data.Aeson.Types.Internal.Failure f4 r)
                         (_ks :: Data.Aeson.Types.Internal.Success
                                   [Language.PureScript.Names.ProperName a] f4 r) ->
                       kf
                         (GHC.List.reverse @ Data.Aeson.Types.Internal.JSONPathElement path)
                         msg19)
                        `cast`
                      (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                <[Language.PureScript.Names.ProperName a]>_R))
                   Data.Aeson.Types.Internal.Array a2
                   -> case a2 of wild1 { Data.Vector.Vector dt dt1 dt2 ->
                      letrec {
                        $wgo :: GHC.Prim.Int# -> [Data.Aeson.Types.Internal.Value]
                          {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                        = \ (ww :: GHC.Prim.Int#) ->
                          case GHC.Prim.>=# ww dt1 of lwild {
                            DEFAULT
                            -> case GHC.Prim.indexArray#
                                      @ Data.Aeson.Types.Internal.Value
                                      dt2
                                      (GHC.Prim.+# dt ww) of ds3 { Unit# ipv ->
                               GHC.Types.:
                                 @ Data.Aeson.Types.Internal.Value
                                 ipv
                                 ($wgo (GHC.Prim.+# ww 1#)) }
                            1# -> GHC.Types.[] @ Data.Aeson.Types.Internal.Value }
                      } in
                      Language.PureScript.Names.$fFromJSONModuleName1
                        @ a
                        0#
                        ($wgo 0#) } }) -}
5a70062bbdf29e6dc659ad8bf5326b50
  $fFromJSONModuleName_go ::
    GHC.Prim.Int#
    -> [Data.Aeson.Types.Internal.Value]
    -> Data.Aeson.Types.Internal.Parser
         [Language.PureScript.Names.ModuleName]
  {- Arity: 2, Strictness: <L,U><S,1*U> -}
1522672b880b192c6e05e6cf8a45712d
  $fFromJSONOpName ::
    Data.Aeson.Types.FromJSON.FromJSON
      (Language.PureScript.Names.OpName a)
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ a :: Language.PureScript.Names.OpNameType.
                  @ (Language.PureScript.Names.OpName a)
                  (Language.PureScript.Names.$fFromJSONOpName_$cparseJSON @ a)
                  (Language.PureScript.Names.$fFromJSONOpName_$cparseJSONList @ a) -}
1522672b880b192c6e05e6cf8a45712d
  $fFromJSONOpName1 ::
    GHC.Prim.Int#
    -> [Data.Aeson.Types.Internal.Value]
    -> Data.Aeson.Types.Internal.Parser
         [Language.PureScript.Names.OpName a]
  {- Arity: 2, Strictness: <L,U><S,1*U> -}
2b7edff12de7439e4896882aa1911579
  $fFromJSONOpName2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Names.$fFromJSONOpName3) -}
7bf0e7c51ae7c9193c2799bdbbc66c36
  $fFromJSONOpName3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Text"#) -}
1522672b880b192c6e05e6cf8a45712d
  $fFromJSONOpName_$cparseJSON ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         (Language.PureScript.Names.OpName a)
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ @ a :: Language.PureScript.Names.OpNameType
                   (x :: Data.Aeson.Types.Internal.Value) ->
                 let {
                   m :: Data.Aeson.Types.Internal.Parser Data.Text.Internal.Text
                   = case x of wild {
                       DEFAULT
                       -> let {
                            msg19 :: GHC.Base.String
                            = GHC.CString.unpackAppendCString#
                                Data.Aeson.Types.FromJSON.typeMismatch4
                                (GHC.Base.++
                                   @ GHC.Types.Char
                                   Language.PureScript.Names.$fFromJSONOpName2
                                   (GHC.CString.unpackAppendCString#
                                      Data.Aeson.Types.FromJSON.typeMismatch3
                                      (case wild of wild1 {
                                         Data.Aeson.Types.Internal.Object ds
                                         -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList10
                                         Data.Aeson.Types.Internal.Array ds
                                         -> Data.Aeson.Types.FromJSON.typeMismatch1
                                         Data.Aeson.Types.Internal.Number ds
                                         -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList6
                                         Data.Aeson.Types.Internal.Bool ds
                                         -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList4
                                         Data.Aeson.Types.Internal.Null
                                         -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList1 })))
                          } in
                          (\ @ f4 :: * -> *
                             @ r
                             (path :: Data.Aeson.Types.Internal.JSONPath)
                             (kf :: Data.Aeson.Types.Internal.Failure f4 r)[OneShot]
                             (_ks :: Data.Aeson.Types.Internal.Success
                                       Data.Text.Internal.Text f4 r)[OneShot] ->
                           kf
                             (GHC.List.reverse @ Data.Aeson.Types.Internal.JSONPathElement path)
                             msg19)
                            `cast`
                          (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                    <Data.Text.Internal.Text>_R))
                       Data.Aeson.Types.Internal.String txt
                       -> (\ @ f4 :: * -> *
                             @ r
                             (_path :: Data.Aeson.Types.Internal.JSONPath)
                             (_kf :: Data.Aeson.Types.Internal.Failure f4 r)[OneShot]
                             (ks :: Data.Aeson.Types.Internal.Success
                                      Data.Text.Internal.Text f4 r)[OneShot] ->
                           ks txt)
                            `cast`
                          (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                    <Data.Text.Internal.Text>_R)) }
                 } in
                 (\ @ f5 :: * -> *
                    @ r
                    (path :: Data.Aeson.Types.Internal.JSONPath)
                    (kf :: Data.Aeson.Types.Internal.Failure f5 r)
                    (ks :: Data.Aeson.Types.Internal.Success
                             (Language.PureScript.Names.OpName a) f5 r) ->
                  m `cast`
                  (Data.Aeson.Types.Internal.N:Parser[0] <Data.Text.Internal.Text>_R)
                    @ f5
                    @ r
                    path
                    kf
                    (\ (a1 :: Data.Text.Internal.Text) ->
                     ks a1 `cast` (Sym (Language.PureScript.Names.N:OpName[0] <a>_P))))
                   `cast`
                 (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                           <Language.PureScript.Names.OpName a>_R))) -}
1522672b880b192c6e05e6cf8a45712d
  $fFromJSONOpName_$cparseJSONList ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         [Language.PureScript.Names.OpName a]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a :: Language.PureScript.Names.OpNameType
                   (ds :: Data.Aeson.Types.Internal.Value) ->
                 case ds of wild {
                   DEFAULT
                   -> let {
                        msg19 :: GHC.Base.String
                        = GHC.CString.unpackAppendCString#
                            Language.PureScript.Names.$fFromJSONIdent3
                            (GHC.CString.unpackAppendCString#
                               Language.PureScript.Names.$fFromJSONIdent2
                               (GHC.CString.unpackAppendCString#
                                  Language.PureScript.Names.$fFromJSONIdent1
                                  (case wild of wild1 {
                                     Data.Aeson.Types.Internal.Object ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList10
                                     Data.Aeson.Types.Internal.String ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList8
                                     Data.Aeson.Types.Internal.Number ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList6
                                     Data.Aeson.Types.Internal.Bool ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList4
                                     Data.Aeson.Types.Internal.Null
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList1 })))
                      } in
                      (\ @ f4 :: * -> *
                         @ r
                         (path :: Data.Aeson.Types.Internal.JSONPath)
                         (kf :: Data.Aeson.Types.Internal.Failure f4 r)
                         (_ks :: Data.Aeson.Types.Internal.Success
                                   [Language.PureScript.Names.OpName a] f4 r) ->
                       kf
                         (GHC.List.reverse @ Data.Aeson.Types.Internal.JSONPathElement path)
                         msg19)
                        `cast`
                      (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                <[Language.PureScript.Names.OpName a]>_R))
                   Data.Aeson.Types.Internal.Array a2
                   -> case a2 of wild1 { Data.Vector.Vector dt dt1 dt2 ->
                      letrec {
                        $wgo :: GHC.Prim.Int# -> [Data.Aeson.Types.Internal.Value]
                          {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                        = \ (ww :: GHC.Prim.Int#) ->
                          case GHC.Prim.>=# ww dt1 of lwild {
                            DEFAULT
                            -> case GHC.Prim.indexArray#
                                      @ Data.Aeson.Types.Internal.Value
                                      dt2
                                      (GHC.Prim.+# dt ww) of ds3 { Unit# ipv ->
                               GHC.Types.:
                                 @ Data.Aeson.Types.Internal.Value
                                 ipv
                                 ($wgo (GHC.Prim.+# ww 1#)) }
                            1# -> GHC.Types.[] @ Data.Aeson.Types.Internal.Value }
                      } in
                      Language.PureScript.Names.$fFromJSONOpName1
                        @ a
                        0#
                        ($wgo 0#) } }) -}
29f101e190cc99df85623423972e606f
  $fFromJSONProperName ::
    Data.Aeson.Types.FromJSON.FromJSON
      (Language.PureScript.Names.ProperName a)
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ a :: Language.PureScript.Names.ProperNameType.
                  @ (Language.PureScript.Names.ProperName a)
                  (Language.PureScript.Names.$fFromJSONProperName_$cparseJSON @ a)
                  (Language.PureScript.Names.$fFromJSONModuleName_$cparseJSONList1
                     @ a) -}
29f101e190cc99df85623423972e606f
  $fFromJSONProperName_$cparseJSON ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         (Language.PureScript.Names.ProperName a)
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ @ a :: Language.PureScript.Names.ProperNameType
                   (x :: Data.Aeson.Types.Internal.Value) ->
                 let {
                   m :: Data.Aeson.Types.Internal.Parser Data.Text.Internal.Text
                   = case x of wild {
                       DEFAULT
                       -> let {
                            msg19 :: GHC.Base.String
                            = GHC.CString.unpackAppendCString#
                                Data.Aeson.Types.FromJSON.typeMismatch4
                                (GHC.Base.++
                                   @ GHC.Types.Char
                                   Language.PureScript.Names.$fFromJSONOpName2
                                   (GHC.CString.unpackAppendCString#
                                      Data.Aeson.Types.FromJSON.typeMismatch3
                                      (case wild of wild1 {
                                         Data.Aeson.Types.Internal.Object ds
                                         -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList10
                                         Data.Aeson.Types.Internal.Array ds
                                         -> Data.Aeson.Types.FromJSON.typeMismatch1
                                         Data.Aeson.Types.Internal.Number ds
                                         -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList6
                                         Data.Aeson.Types.Internal.Bool ds
                                         -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList4
                                         Data.Aeson.Types.Internal.Null
                                         -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList1 })))
                          } in
                          (\ @ f4 :: * -> *
                             @ r
                             (path :: Data.Aeson.Types.Internal.JSONPath)
                             (kf :: Data.Aeson.Types.Internal.Failure f4 r)[OneShot]
                             (_ks :: Data.Aeson.Types.Internal.Success
                                       Data.Text.Internal.Text f4 r)[OneShot] ->
                           kf
                             (GHC.List.reverse @ Data.Aeson.Types.Internal.JSONPathElement path)
                             msg19)
                            `cast`
                          (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                    <Data.Text.Internal.Text>_R))
                       Data.Aeson.Types.Internal.String txt
                       -> (\ @ f4 :: * -> *
                             @ r
                             (_path :: Data.Aeson.Types.Internal.JSONPath)
                             (_kf :: Data.Aeson.Types.Internal.Failure f4 r)[OneShot]
                             (ks :: Data.Aeson.Types.Internal.Success
                                      Data.Text.Internal.Text f4 r)[OneShot] ->
                           ks txt)
                            `cast`
                          (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                    <Data.Text.Internal.Text>_R)) }
                 } in
                 (\ @ f5 :: * -> *
                    @ r
                    (path :: Data.Aeson.Types.Internal.JSONPath)
                    (kf :: Data.Aeson.Types.Internal.Failure f5 r)
                    (ks :: Data.Aeson.Types.Internal.Success
                             (Language.PureScript.Names.ProperName a) f5 r) ->
                  m `cast`
                  (Data.Aeson.Types.Internal.N:Parser[0] <Data.Text.Internal.Text>_R)
                    @ f5
                    @ r
                    path
                    kf
                    (\ (a1 :: Data.Text.Internal.Text) ->
                     ks
                       a1 `cast` (Sym (Language.PureScript.Names.N:ProperName[0] <a>_P))))
                   `cast`
                 (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                           <Language.PureScript.Names.ProperName a>_R))) -}
5a70062bbdf29e6dc659ad8bf5326b50
  $fFromJSONQualified ::
    Data.Aeson.Types.FromJSON.FromJSON a =>
    Data.Aeson.Types.FromJSON.FromJSON
      (Language.PureScript.Names.Qualified a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C(C1(C1(U)))),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: Data.Aeson.Types.FromJSON.FromJSON a).
                  @ (Language.PureScript.Names.Qualified a)
                  (Language.PureScript.Names.$fFromJSONQualified_$cparseJSON @ a v)
                  (Language.PureScript.Names.$fFromJSONQualified_$cparseJSONList
                     @ a
                     v) -}
5a70062bbdf29e6dc659ad8bf5326b50
  $fFromJSONQualified1 ::
    Data.Aeson.Types.Internal.JSONPath
    -> Data.Aeson.Types.Internal.Failure f4 r
    -> Data.Aeson.Types.Internal.Success
         [Language.PureScript.Names.Qualified a] f4 r
    -> f4 r
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (3, True, True)
                (\ @ a
                   @ f4 :: * -> *
                   @ r
                   (_path :: Data.Aeson.Types.Internal.JSONPath)
                   (_kf :: Data.Aeson.Types.Internal.Failure f4 r)
                   (ks :: Data.Aeson.Types.Internal.Success
                            [Language.PureScript.Names.Qualified a] f4 r) ->
                 ks (GHC.Types.[] @ (Language.PureScript.Names.Qualified a))) -}
5a70062bbdf29e6dc659ad8bf5326b50
  $fFromJSONQualified_$cparseJSON ::
    Data.Aeson.Types.FromJSON.FromJSON a =>
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         (Language.PureScript.Names.Qualified a)
  {- Arity: 2, Strictness: <L,1*U(1*C1(C(C1(C1(U)))),A)><S,1*U> -}
5a70062bbdf29e6dc659ad8bf5326b50
  $fFromJSONQualified_$cparseJSONList ::
    Data.Aeson.Types.FromJSON.FromJSON a =>
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         [Language.PureScript.Names.Qualified a]
  {- Arity: 2, Strictness: <L,U(C(C(C1(C1(U)))),A)><S,1*U>,
     Unfolding: (\ @ a
                   ($dFromJSON :: Data.Aeson.Types.FromJSON.FromJSON a)
                   (ds :: Data.Aeson.Types.Internal.Value) ->
                 case ds of wild {
                   DEFAULT
                   -> let {
                        msg19 :: GHC.Base.String
                        = GHC.CString.unpackAppendCString#
                            Language.PureScript.Names.$fFromJSONIdent3
                            (GHC.CString.unpackAppendCString#
                               Language.PureScript.Names.$fFromJSONIdent2
                               (GHC.CString.unpackAppendCString#
                                  Language.PureScript.Names.$fFromJSONIdent1
                                  (case wild of wild1 {
                                     Data.Aeson.Types.Internal.Object ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList10
                                     Data.Aeson.Types.Internal.String ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList8
                                     Data.Aeson.Types.Internal.Number ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList6
                                     Data.Aeson.Types.Internal.Bool ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList4
                                     Data.Aeson.Types.Internal.Null
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList1 })))
                      } in
                      (\ @ f4 :: * -> *
                         @ r
                         (path :: Data.Aeson.Types.Internal.JSONPath)
                         (kf :: Data.Aeson.Types.Internal.Failure f4 r)
                         (_ks :: Data.Aeson.Types.Internal.Success
                                   [Language.PureScript.Names.Qualified a] f4 r) ->
                       kf
                         (GHC.List.reverse @ Data.Aeson.Types.Internal.JSONPathElement path)
                         msg19)
                        `cast`
                      (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                <[Language.PureScript.Names.Qualified a]>_R))
                   Data.Aeson.Types.Internal.Array a2
                   -> case a2 of wild1 { Data.Vector.Vector dt dt1 dt2 ->
                      letrec {
                        go2 :: GHC.Prim.Int#
                               -> [Data.Aeson.Types.Internal.Value]
                               -> Data.Aeson.Types.Internal.Parser
                                    [Language.PureScript.Names.Qualified a]
                          {- Arity: 2, Strictness: <L,U><S,1*U> -}
                        = \ (x :: GHC.Prim.Int#)
                            (eta :: [Data.Aeson.Types.Internal.Value]) ->
                          case eta of wild2 {
                            []
                            -> (Language.PureScript.Names.$fFromJSONQualified1 @ a)
                                 `cast`
                               (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                         <[Language.PureScript.Names.Qualified a]>_R))
                            : y ys
                            -> let {
                                 p1 :: Data.Aeson.Types.Internal.Parser
                                         (Language.PureScript.Names.Qualified a)
                                 = Language.PureScript.Names.$fFromJSONQualified_$cparseJSON
                                     @ a
                                     $dFromJSON
                                     y
                               } in
                               let {
                                 pathElem16 :: Data.Aeson.Types.Internal.JSONPathElement
                                 = Data.Aeson.Types.Internal.Index x
                               } in
                               let {
                                 ys1 :: Data.Aeson.Types.Internal.Parser
                                          [Language.PureScript.Names.Qualified a]
                                 = case x of wild3 {
                                     DEFAULT -> go2 (GHC.Prim.+# wild3 1#) ys
                                     9223372036854775807#
                                     -> (Language.PureScript.Names.$fFromJSONQualified1 @ a)
                                          `cast`
                                        (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                                  <[Language.PureScript.Names.Qualified a]>_R)) }
                               } in
                               (\ @ f5 :: * -> *
                                  @ r
                                  (eta1 :: Data.Aeson.Types.Internal.JSONPath)
                                  (eta2 :: Data.Aeson.Types.Internal.Failure f5 r)
                                  (eta3 :: Data.Aeson.Types.Internal.Success
                                             [Language.PureScript.Names.Qualified a] f5 r) ->
                                p1
                                  `cast`
                                (Data.Aeson.Types.Internal.N:Parser[0]
                                     <Language.PureScript.Names.Qualified a>_R)
                                  @ f5
                                  @ r
                                  (GHC.Types.:
                                     @ Data.Aeson.Types.Internal.JSONPathElement
                                     pathElem16
                                     eta1)
                                  eta2
                                  (\ (a3 :: Language.PureScript.Names.Qualified a) ->
                                   ys1
                                     `cast`
                                   (Data.Aeson.Types.Internal.N:Parser[0]
                                        <[Language.PureScript.Names.Qualified a]>_R)
                                     @ f5
                                     @ r
                                     eta1
                                     eta2
                                     (\ (a4 :: [Language.PureScript.Names.Qualified a]) ->
                                      eta3
                                        (GHC.Types.:
                                           @ (Language.PureScript.Names.Qualified a)
                                           a3
                                           a4))))
                                 `cast`
                               (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                         <[Language.PureScript.Names.Qualified a]>_R)) }
                      } in
                      letrec {
                        $wgo :: GHC.Prim.Int# -> [Data.Aeson.Types.Internal.Value]
                          {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                        = \ (ww :: GHC.Prim.Int#) ->
                          case GHC.Prim.>=# ww dt1 of lwild {
                            DEFAULT
                            -> case GHC.Prim.indexArray#
                                      @ Data.Aeson.Types.Internal.Value
                                      dt2
                                      (GHC.Prim.+# dt ww) of ds3 { Unit# ipv ->
                               GHC.Types.:
                                 @ Data.Aeson.Types.Internal.Value
                                 ipv
                                 ($wgo (GHC.Prim.+# ww 1#)) }
                            1# -> GHC.Types.[] @ Data.Aeson.Types.Internal.Value }
                      } in
                      go2 0# ($wgo 0#) } }) -}
5a70062bbdf29e6dc659ad8bf5326b50
  $fFunctorQualified ::
    GHC.Base.Functor Language.PureScript.Names.Qualified
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Names.Qualified
                  Language.PureScript.Names.$fFunctorQualified_$cfmap
                  Language.PureScript.Names.$fFunctorQualified_$c<$ -}
5a70062bbdf29e6dc659ad8bf5326b50
  $fFunctorQualified_$c<$ ::
    a
    -> Language.PureScript.Names.Qualified b
    -> Language.PureScript.Names.Qualified a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U(U,A)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   (z2 :: a)
                   (ds :: Language.PureScript.Names.Qualified b) ->
                 case ds of wild { Language.PureScript.Names.Qualified a1 a2 ->
                 Language.PureScript.Names.Qualified @ a a1 z2 }) -}
5a70062bbdf29e6dc659ad8bf5326b50
  $fFunctorQualified_$cfmap ::
    (a -> b)
    -> Language.PureScript.Names.Qualified a
    -> Language.PureScript.Names.Qualified b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><S,1*U(U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   (f :: a -> b)
                   (ds :: Language.PureScript.Names.Qualified a) ->
                 case ds of wild { Language.PureScript.Names.Qualified a1 a2 ->
                 Language.PureScript.Names.Qualified @ b a1 (f a2) }) -}
ab98a56ffa88760dad1380079e8ee35a
  $fGenericIdent ::
    GHC.Generics.Generic Language.PureScript.Names.Ident
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Names.Ident
                  Language.PureScript.Names.$fGenericIdent1
                    `cast`
                  (forall (x :: <*>_N).
                   <Language.PureScript.Names.Ident>_R
                   ->_R (Sym (GHC.Generics.N:M1[0]
                                  <*>_N
                                  <GHC.Generics.D>_P
                                  <'GHC.Generics.MetaData
                                     "Ident"
                                     "Language.PureScript.Names"
                                     "purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"
                                     'GHC.Types.False>_P
                                  <GHC.Generics.M1
                                     GHC.Generics.C
                                     ('GHC.Generics.MetaCons
                                        "Ident" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                     (GHC.Generics.M1
                                        GHC.Generics.S
                                        ('GHC.Generics.MetaSel
                                           'GHC.Base.Nothing
                                           'GHC.Generics.NoSourceUnpackedness
                                           'GHC.Generics.NoSourceStrictness
                                           'GHC.Generics.DecidedLazy)
                                        (GHC.Generics.K1 GHC.Generics.R Data.Text.Internal.Text))
                                   GHC.Generics.:+: (GHC.Generics.M1
                                                       GHC.Generics.C
                                                       ('GHC.Generics.MetaCons
                                                          "GenIdent"
                                                          'GHC.Generics.PrefixI
                                                          'GHC.Types.False)
                                                       (GHC.Generics.M1
                                                          GHC.Generics.S
                                                          ('GHC.Generics.MetaSel
                                                             'GHC.Base.Nothing
                                                             'GHC.Generics.NoSourceUnpackedness
                                                             'GHC.Generics.NoSourceStrictness
                                                             'GHC.Generics.DecidedLazy)
                                                          (GHC.Generics.K1
                                                             GHC.Generics.R
                                                             (GHC.Base.Maybe
                                                                Data.Text.Internal.Text))
                                                        GHC.Generics.:*: GHC.Generics.M1
                                                                           GHC.Generics.S
                                                                           ('GHC.Generics.MetaSel
                                                                              'GHC.Base.Nothing
                                                                              'GHC.Generics.NoSourceUnpackedness
                                                                              'GHC.Generics.NoSourceStrictness
                                                                              'GHC.Generics.DecidedLazy)
                                                                           (GHC.Generics.K1
                                                                              GHC.Generics.R
                                                                              GHC.Integer.Type.Integer))
                                                     GHC.Generics.:+: GHC.Generics.M1
                                                                        GHC.Generics.C
                                                                        ('GHC.Generics.MetaCons
                                                                           "UnusedIdent"
                                                                           'GHC.Generics.PrefixI
                                                                           'GHC.Types.False)
                                                                        GHC.Generics.U1)>_R) ; Sub (Sym (Language.PureScript.Names.Rep_Ident[0]))) <x>_N)
                  Language.PureScript.Names.$fGenericIdent_$cto -}
ab98a56ffa88760dad1380079e8ee35a
  $fGenericIdent1 ::
    Language.PureScript.Names.Ident
    -> (GHC.Generics.:+:)
         (GHC.Generics.M1
            GHC.Generics.C
            ('GHC.Generics.MetaCons
               "Ident" 'GHC.Generics.PrefixI 'GHC.Types.False)
            (GHC.Generics.M1
               GHC.Generics.S
               ('GHC.Generics.MetaSel
                  'GHC.Base.Nothing
                  'GHC.Generics.NoSourceUnpackedness
                  'GHC.Generics.NoSourceStrictness
                  'GHC.Generics.DecidedLazy)
               (GHC.Generics.K1 GHC.Generics.R Data.Text.Internal.Text)))
         (GHC.Generics.M1
            GHC.Generics.C
            ('GHC.Generics.MetaCons
               "GenIdent" 'GHC.Generics.PrefixI 'GHC.Types.False)
            (GHC.Generics.M1
               GHC.Generics.S
               ('GHC.Generics.MetaSel
                  'GHC.Base.Nothing
                  'GHC.Generics.NoSourceUnpackedness
                  'GHC.Generics.NoSourceStrictness
                  'GHC.Generics.DecidedLazy)
               (GHC.Generics.K1
                  GHC.Generics.R (GHC.Base.Maybe Data.Text.Internal.Text))
             GHC.Generics.:*: GHC.Generics.M1
                                GHC.Generics.S
                                ('GHC.Generics.MetaSel
                                   'GHC.Base.Nothing
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (GHC.Generics.K1 GHC.Generics.R GHC.Integer.Type.Integer))
          GHC.Generics.:+: GHC.Generics.M1
                             GHC.Generics.C
                             ('GHC.Generics.MetaCons
                                "UnusedIdent" 'GHC.Generics.PrefixI 'GHC.Types.False)
                             GHC.Generics.U1)
         x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ x (x1 :: Language.PureScript.Names.Ident) ->
                 case x1 of wild {
                   Language.PureScript.Names.Ident g1
                   -> GHC.Generics.L1
                        @ *
                        @ (GHC.Generics.M1
                             GHC.Generics.C
                             ('GHC.Generics.MetaCons
                                "Ident" 'GHC.Generics.PrefixI 'GHC.Types.False)
                             (GHC.Generics.M1
                                GHC.Generics.S
                                ('GHC.Generics.MetaSel
                                   'GHC.Base.Nothing
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (GHC.Generics.K1 GHC.Generics.R Data.Text.Internal.Text)))
                        @ (GHC.Generics.M1
                             GHC.Generics.C
                             ('GHC.Generics.MetaCons
                                "GenIdent" 'GHC.Generics.PrefixI 'GHC.Types.False)
                             (GHC.Generics.M1
                                GHC.Generics.S
                                ('GHC.Generics.MetaSel
                                   'GHC.Base.Nothing
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (GHC.Generics.K1
                                   GHC.Generics.R (GHC.Base.Maybe Data.Text.Internal.Text))
                              GHC.Generics.:*: GHC.Generics.M1
                                                 GHC.Generics.S
                                                 ('GHC.Generics.MetaSel
                                                    'GHC.Base.Nothing
                                                    'GHC.Generics.NoSourceUnpackedness
                                                    'GHC.Generics.NoSourceStrictness
                                                    'GHC.Generics.DecidedLazy)
                                                 (GHC.Generics.K1
                                                    GHC.Generics.R GHC.Integer.Type.Integer))
                           GHC.Generics.:+: GHC.Generics.M1
                                              GHC.Generics.C
                                              ('GHC.Generics.MetaCons
                                                 "UnusedIdent"
                                                 'GHC.Generics.PrefixI
                                                 'GHC.Types.False)
                                              GHC.Generics.U1)
                        @ x
                        g1
                          `cast`
                        (Sym (GHC.Generics.N:K1[0]
                                  <*>_N
                                  <GHC.Generics.R>_P
                                  <Data.Text.Internal.Text>_R
                                  <x>_P) ; (Sym (GHC.Generics.N:M1[0]
                                                     <*>_N
                                                     <GHC.Generics.S>_P
                                                     <'GHC.Generics.MetaSel
                                                        'GHC.Base.Nothing
                                                        'GHC.Generics.NoSourceUnpackedness
                                                        'GHC.Generics.NoSourceStrictness
                                                        'GHC.Generics.DecidedLazy>_P
                                                     <GHC.Generics.K1
                                                        GHC.Generics.R
                                                        Data.Text.Internal.Text>_R) ; Sym (GHC.Generics.N:M1[0]
                                                                                               <*>_N
                                                                                               <GHC.Generics.C>_P
                                                                                               <'GHC.Generics.MetaCons
                                                                                                  "Ident"
                                                                                                  'GHC.Generics.PrefixI
                                                                                                  'GHC.Types.False>_P
                                                                                               <GHC.Generics.M1
                                                                                                  GHC.Generics.S
                                                                                                  ('GHC.Generics.MetaSel
                                                                                                     'GHC.Base.Nothing
                                                                                                     'GHC.Generics.NoSourceUnpackedness
                                                                                                     'GHC.Generics.NoSourceStrictness
                                                                                                     'GHC.Generics.DecidedLazy)
                                                                                                  (GHC.Generics.K1
                                                                                                     GHC.Generics.R
                                                                                                     Data.Text.Internal.Text)>_R)) <x>_N)
                   Language.PureScript.Names.GenIdent g1 g2
                   -> GHC.Generics.R1
                        @ *
                        @ (GHC.Generics.M1
                             GHC.Generics.C
                             ('GHC.Generics.MetaCons
                                "Ident" 'GHC.Generics.PrefixI 'GHC.Types.False)
                             (GHC.Generics.M1
                                GHC.Generics.S
                                ('GHC.Generics.MetaSel
                                   'GHC.Base.Nothing
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (GHC.Generics.K1 GHC.Generics.R Data.Text.Internal.Text)))
                        @ (GHC.Generics.M1
                             GHC.Generics.C
                             ('GHC.Generics.MetaCons
                                "GenIdent" 'GHC.Generics.PrefixI 'GHC.Types.False)
                             (GHC.Generics.M1
                                GHC.Generics.S
                                ('GHC.Generics.MetaSel
                                   'GHC.Base.Nothing
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (GHC.Generics.K1
                                   GHC.Generics.R (GHC.Base.Maybe Data.Text.Internal.Text))
                              GHC.Generics.:*: GHC.Generics.M1
                                                 GHC.Generics.S
                                                 ('GHC.Generics.MetaSel
                                                    'GHC.Base.Nothing
                                                    'GHC.Generics.NoSourceUnpackedness
                                                    'GHC.Generics.NoSourceStrictness
                                                    'GHC.Generics.DecidedLazy)
                                                 (GHC.Generics.K1
                                                    GHC.Generics.R GHC.Integer.Type.Integer))
                           GHC.Generics.:+: GHC.Generics.M1
                                              GHC.Generics.C
                                              ('GHC.Generics.MetaCons
                                                 "UnusedIdent"
                                                 'GHC.Generics.PrefixI
                                                 'GHC.Types.False)
                                              GHC.Generics.U1)
                        @ x
                        (GHC.Generics.L1
                           @ *
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "GenIdent" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R (GHC.Base.Maybe Data.Text.Internal.Text))
                                 GHC.Generics.:*: GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R GHC.Integer.Type.Integer)))
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "UnusedIdent" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                GHC.Generics.U1)
                           @ x
                           (GHC.Generics.:*:
                              @ *
                              @ (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R (GHC.Base.Maybe Data.Text.Internal.Text)))
                              @ (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1 GHC.Generics.R GHC.Integer.Type.Integer))
                              @ x
                              g1
                                `cast`
                              (Sym (GHC.Generics.N:K1[0]
                                        <*>_N
                                        <GHC.Generics.R>_P
                                        <GHC.Base.Maybe Data.Text.Internal.Text>_R
                                        <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                          <*>_N
                                                          <GHC.Generics.S>_P
                                                          <'GHC.Generics.MetaSel
                                                             'GHC.Base.Nothing
                                                             'GHC.Generics.NoSourceUnpackedness
                                                             'GHC.Generics.NoSourceStrictness
                                                             'GHC.Generics.DecidedLazy>_P
                                                          <GHC.Generics.K1
                                                             GHC.Generics.R
                                                             (GHC.Base.Maybe
                                                                Data.Text.Internal.Text)>_R) <x>_N)
                              g2
                                `cast`
                              (Sym (GHC.Generics.N:K1[0]
                                        <*>_N
                                        <GHC.Generics.R>_P
                                        <GHC.Integer.Type.Integer>_R
                                        <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                          <*>_N
                                                          <GHC.Generics.S>_P
                                                          <'GHC.Generics.MetaSel
                                                             'GHC.Base.Nothing
                                                             'GHC.Generics.NoSourceUnpackedness
                                                             'GHC.Generics.NoSourceStrictness
                                                             'GHC.Generics.DecidedLazy>_P
                                                          <GHC.Generics.K1
                                                             GHC.Generics.R
                                                             GHC.Integer.Type.Integer>_R) <x>_N))
                             `cast`
                           (Sym (GHC.Generics.N:M1[0]
                                     <*>_N
                                     <GHC.Generics.C>_P
                                     <'GHC.Generics.MetaCons
                                        "GenIdent" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                     <GHC.Generics.M1
                                        GHC.Generics.S
                                        ('GHC.Generics.MetaSel
                                           'GHC.Base.Nothing
                                           'GHC.Generics.NoSourceUnpackedness
                                           'GHC.Generics.NoSourceStrictness
                                           'GHC.Generics.DecidedLazy)
                                        (GHC.Generics.K1
                                           GHC.Generics.R (GHC.Base.Maybe Data.Text.Internal.Text))
                                      GHC.Generics.:*: GHC.Generics.M1
                                                         GHC.Generics.S
                                                         ('GHC.Generics.MetaSel
                                                            'GHC.Base.Nothing
                                                            'GHC.Generics.NoSourceUnpackedness
                                                            'GHC.Generics.NoSourceStrictness
                                                            'GHC.Generics.DecidedLazy)
                                                         (GHC.Generics.K1
                                                            GHC.Generics.R
                                                            GHC.Integer.Type.Integer)>_R) <x>_N))
                   Language.PureScript.Names.UnusedIdent
                   -> Language.PureScript.Names.$fGenericIdent2 @ x }) -}
1588dd72507dc83d8659ff9e81c8ec53
  $fGenericIdent2 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Ident" 'GHC.Generics.PrefixI 'GHC.Types.False)
         (GHC.Generics.M1
            GHC.Generics.S
            ('GHC.Generics.MetaSel
               'GHC.Base.Nothing
               'GHC.Generics.NoSourceUnpackedness
               'GHC.Generics.NoSourceStrictness
               'GHC.Generics.DecidedLazy)
            (GHC.Generics.K1 GHC.Generics.R Data.Text.Internal.Text)))
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "GenIdent" 'GHC.Generics.PrefixI 'GHC.Types.False)
         (GHC.Generics.M1
            GHC.Generics.S
            ('GHC.Generics.MetaSel
               'GHC.Base.Nothing
               'GHC.Generics.NoSourceUnpackedness
               'GHC.Generics.NoSourceStrictness
               'GHC.Generics.DecidedLazy)
            (GHC.Generics.K1
               GHC.Generics.R (GHC.Base.Maybe Data.Text.Internal.Text))
          GHC.Generics.:*: GHC.Generics.M1
                             GHC.Generics.S
                             ('GHC.Generics.MetaSel
                                'GHC.Base.Nothing
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy)
                             (GHC.Generics.K1 GHC.Generics.R GHC.Integer.Type.Integer))
       GHC.Generics.:+: GHC.Generics.M1
                          GHC.Generics.C
                          ('GHC.Generics.MetaCons
                             "UnusedIdent" 'GHC.Generics.PrefixI 'GHC.Types.False)
                          GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (\ @ x ->
                 GHC.Generics.R1
                   @ *
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Ident" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        (GHC.Generics.M1
                           GHC.Generics.S
                           ('GHC.Generics.MetaSel
                              'GHC.Base.Nothing
                              'GHC.Generics.NoSourceUnpackedness
                              'GHC.Generics.NoSourceStrictness
                              'GHC.Generics.DecidedLazy)
                           (GHC.Generics.K1 GHC.Generics.R Data.Text.Internal.Text)))
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "GenIdent" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        (GHC.Generics.M1
                           GHC.Generics.S
                           ('GHC.Generics.MetaSel
                              'GHC.Base.Nothing
                              'GHC.Generics.NoSourceUnpackedness
                              'GHC.Generics.NoSourceStrictness
                              'GHC.Generics.DecidedLazy)
                           (GHC.Generics.K1
                              GHC.Generics.R (GHC.Base.Maybe Data.Text.Internal.Text))
                         GHC.Generics.:*: GHC.Generics.M1
                                            GHC.Generics.S
                                            ('GHC.Generics.MetaSel
                                               'GHC.Base.Nothing
                                               'GHC.Generics.NoSourceUnpackedness
                                               'GHC.Generics.NoSourceStrictness
                                               'GHC.Generics.DecidedLazy)
                                            (GHC.Generics.K1
                                               GHC.Generics.R GHC.Integer.Type.Integer))
                      GHC.Generics.:+: GHC.Generics.M1
                                         GHC.Generics.C
                                         ('GHC.Generics.MetaCons
                                            "UnusedIdent" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                         GHC.Generics.U1)
                   @ x
                   (Language.PureScript.Names.$fGenericIdent3 @ x)) -}
40f3bdd2bb9ed22dcb58f6ad0aa28f96
  $fGenericIdent3 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "GenIdent" 'GHC.Generics.PrefixI 'GHC.Types.False)
         (GHC.Generics.M1
            GHC.Generics.S
            ('GHC.Generics.MetaSel
               'GHC.Base.Nothing
               'GHC.Generics.NoSourceUnpackedness
               'GHC.Generics.NoSourceStrictness
               'GHC.Generics.DecidedLazy)
            (GHC.Generics.K1
               GHC.Generics.R (GHC.Base.Maybe Data.Text.Internal.Text))
          GHC.Generics.:*: GHC.Generics.M1
                             GHC.Generics.S
                             ('GHC.Generics.MetaSel
                                'GHC.Base.Nothing
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy)
                             (GHC.Generics.K1 GHC.Generics.R GHC.Integer.Type.Integer)))
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "UnusedIdent" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (\ @ x ->
                 GHC.Generics.R1
                   @ *
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "GenIdent" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        (GHC.Generics.M1
                           GHC.Generics.S
                           ('GHC.Generics.MetaSel
                              'GHC.Base.Nothing
                              'GHC.Generics.NoSourceUnpackedness
                              'GHC.Generics.NoSourceStrictness
                              'GHC.Generics.DecidedLazy)
                           (GHC.Generics.K1
                              GHC.Generics.R (GHC.Base.Maybe Data.Text.Internal.Text))
                         GHC.Generics.:*: GHC.Generics.M1
                                            GHC.Generics.S
                                            ('GHC.Generics.MetaSel
                                               'GHC.Base.Nothing
                                               'GHC.Generics.NoSourceUnpackedness
                                               'GHC.Generics.NoSourceStrictness
                                               'GHC.Generics.DecidedLazy)
                                            (GHC.Generics.K1
                                               GHC.Generics.R GHC.Integer.Type.Integer)))
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "UnusedIdent" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ x
                   (GHC.Generics.U1 @ * @ x)
                     `cast`
                   (Sym (GHC.Generics.N:M1[0]
                             <*>_N
                             <GHC.Generics.C>_P
                             <'GHC.Generics.MetaCons
                                "UnusedIdent" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                             <GHC.Generics.U1>_R) <x>_N)) -}
ab98a56ffa88760dad1380079e8ee35a
  $fGenericIdent_$cto ::
    GHC.Generics.Rep Language.PureScript.Names.Ident x
    -> Language.PureScript.Names.Ident
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ x
                   (ds :: GHC.Generics.Rep Language.PureScript.Names.Ident x) ->
                 case ds
                        `cast`
                      ((Sub (Language.PureScript.Names.Rep_Ident[0]) ; GHC.Generics.N:M1[0]
                                                                           <*>_N
                                                                           <GHC.Generics.D>_P
                                                                           <'GHC.Generics.MetaData
                                                                              "Ident"
                                                                              "Language.PureScript.Names"
                                                                              "purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"
                                                                              'GHC.Types.False>_P
                                                                           <GHC.Generics.M1
                                                                              GHC.Generics.C
                                                                              ('GHC.Generics.MetaCons
                                                                                 "Ident"
                                                                                 'GHC.Generics.PrefixI
                                                                                 'GHC.Types.False)
                                                                              (GHC.Generics.M1
                                                                                 GHC.Generics.S
                                                                                 ('GHC.Generics.MetaSel
                                                                                    'GHC.Base.Nothing
                                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                                    'GHC.Generics.NoSourceStrictness
                                                                                    'GHC.Generics.DecidedLazy)
                                                                                 (GHC.Generics.K1
                                                                                    GHC.Generics.R
                                                                                    Data.Text.Internal.Text))
                                                                            GHC.Generics.:+: (GHC.Generics.M1
                                                                                                GHC.Generics.C
                                                                                                ('GHC.Generics.MetaCons
                                                                                                   "GenIdent"
                                                                                                   'GHC.Generics.PrefixI
                                                                                                   'GHC.Types.False)
                                                                                                (GHC.Generics.M1
                                                                                                   GHC.Generics.S
                                                                                                   ('GHC.Generics.MetaSel
                                                                                                      'GHC.Base.Nothing
                                                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                                                      'GHC.Generics.NoSourceStrictness
                                                                                                      'GHC.Generics.DecidedLazy)
                                                                                                   (GHC.Generics.K1
                                                                                                      GHC.Generics.R
                                                                                                      (GHC.Base.Maybe
                                                                                                         Data.Text.Internal.Text))
                                                                                                 GHC.Generics.:*: GHC.Generics.M1
                                                                                                                    GHC.Generics.S
                                                                                                                    ('GHC.Generics.MetaSel
                                                                                                                       'GHC.Base.Nothing
                                                                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                                                                       'GHC.Generics.NoSourceStrictness
                                                                                                                       'GHC.Generics.DecidedLazy)
                                                                                                                    (GHC.Generics.K1
                                                                                                                       GHC.Generics.R
                                                                                                                       GHC.Integer.Type.Integer))
                                                                                              GHC.Generics.:+: GHC.Generics.M1
                                                                                                                 GHC.Generics.C
                                                                                                                 ('GHC.Generics.MetaCons
                                                                                                                    "UnusedIdent"
                                                                                                                    'GHC.Generics.PrefixI
                                                                                                                    'GHC.Types.False)
                                                                                                                 GHC.Generics.U1)>_R) <x>_N) of wild {
                   GHC.Generics.L1 ds1
                   -> Language.PureScript.Names.Ident
                        ds1
                          `cast`
                        ((GHC.Generics.N:M1[0]
                              <*>_N
                              <GHC.Generics.C>_P
                              <'GHC.Generics.MetaCons
                                 "Ident" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                              <GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R
                                    Data.Text.Internal.Text)>_R ; GHC.Generics.N:M1[0]
                                                                      <*>_N
                                                                      <GHC.Generics.S>_P
                                                                      <'GHC.Generics.MetaSel
                                                                         'GHC.Base.Nothing
                                                                         'GHC.Generics.NoSourceUnpackedness
                                                                         'GHC.Generics.NoSourceStrictness
                                                                         'GHC.Generics.DecidedLazy>_P
                                                                      <GHC.Generics.K1
                                                                         GHC.Generics.R
                                                                         Data.Text.Internal.Text>_R) <x>_N ; GHC.Generics.N:K1[0]
                                                                                                                 <*>_N
                                                                                                                 <GHC.Generics.R>_P
                                                                                                                 <Data.Text.Internal.Text>_R
                                                                                                                 <x>_P)
                   GHC.Generics.R1 ds1
                   -> case ds1 of wild1 {
                        GHC.Generics.L1 ds2
                        -> case ds2
                                  `cast`
                                (GHC.Generics.N:M1[0]
                                     <*>_N
                                     <GHC.Generics.C>_P
                                     <'GHC.Generics.MetaCons
                                        "GenIdent" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                     <GHC.Generics.M1
                                        GHC.Generics.S
                                        ('GHC.Generics.MetaSel
                                           'GHC.Base.Nothing
                                           'GHC.Generics.NoSourceUnpackedness
                                           'GHC.Generics.NoSourceStrictness
                                           'GHC.Generics.DecidedLazy)
                                        (GHC.Generics.K1
                                           GHC.Generics.R (GHC.Base.Maybe Data.Text.Internal.Text))
                                      GHC.Generics.:*: GHC.Generics.M1
                                                         GHC.Generics.S
                                                         ('GHC.Generics.MetaSel
                                                            'GHC.Base.Nothing
                                                            'GHC.Generics.NoSourceUnpackedness
                                                            'GHC.Generics.NoSourceStrictness
                                                            'GHC.Generics.DecidedLazy)
                                                         (GHC.Generics.K1
                                                            GHC.Generics.R
                                                            GHC.Integer.Type.Integer)>_R <x>_N) of wild2 { GHC.Generics.:*: ds3 ds4 ->
                           Language.PureScript.Names.GenIdent
                             ds3
                               `cast`
                             (GHC.Generics.N:M1[0]
                                  <*>_N
                                  <GHC.Generics.S>_P
                                  <'GHC.Generics.MetaSel
                                     'GHC.Base.Nothing
                                     'GHC.Generics.NoSourceUnpackedness
                                     'GHC.Generics.NoSourceStrictness
                                     'GHC.Generics.DecidedLazy>_P
                                  <GHC.Generics.K1
                                     GHC.Generics.R
                                     (GHC.Base.Maybe
                                        Data.Text.Internal.Text)>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                <*>_N
                                                                                <GHC.Generics.R>_P
                                                                                <GHC.Base.Maybe
                                                                                   Data.Text.Internal.Text>_R
                                                                                <x>_P)
                             ds4
                               `cast`
                             (GHC.Generics.N:M1[0]
                                  <*>_N
                                  <GHC.Generics.S>_P
                                  <'GHC.Generics.MetaSel
                                     'GHC.Base.Nothing
                                     'GHC.Generics.NoSourceUnpackedness
                                     'GHC.Generics.NoSourceStrictness
                                     'GHC.Generics.DecidedLazy>_P
                                  <GHC.Generics.K1
                                     GHC.Generics.R
                                     GHC.Integer.Type.Integer>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                             <*>_N
                                                                             <GHC.Generics.R>_P
                                                                             <GHC.Integer.Type.Integer>_R
                                                                             <x>_P) }
                        GHC.Generics.R1 ds2
                        -> case ds2
                                  `cast`
                                (GHC.Generics.N:M1[0]
                                     <*>_N
                                     <GHC.Generics.C>_P
                                     <'GHC.Generics.MetaCons
                                        "UnusedIdent" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                     <GHC.Generics.U1>_R <x>_N) of wild2 { GHC.Generics.U1 ->
                           Language.PureScript.Names.UnusedIdent } } }) -}
5a70062bbdf29e6dc659ad8bf5326b50
  $fGenericModuleName ::
    GHC.Generics.Generic Language.PureScript.Names.ModuleName
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Names.ModuleName
                  Language.PureScript.Names.$fGenericModuleName2
                    `cast`
                  (forall (x :: <*>_N).
                   <Language.PureScript.Names.ModuleName>_R
                   ->_R Language.PureScript.Names.N:ModuleName[0] ; (Sym (GHC.Generics.N:K1[0]
                                                                              <*>_N
                                                                              <GHC.Generics.R>_P
                                                                              <[Language.PureScript.Names.ProperName
                                                                                  'Language.PureScript.Names.Namespace]>_R
                                                                              <x>_P) ; (Sym (GHC.Generics.N:M1[0]
                                                                                                 <*>_N
                                                                                                 <GHC.Generics.S>_P
                                                                                                 <'GHC.Generics.MetaSel
                                                                                                    'GHC.Base.Nothing
                                                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                                                    'GHC.Generics.NoSourceStrictness
                                                                                                    'GHC.Generics.DecidedLazy>_P
                                                                                                 <GHC.Generics.K1
                                                                                                    GHC.Generics.R
                                                                                                    [Language.PureScript.Names.ProperName
                                                                                                       'Language.PureScript.Names.Namespace]>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                                                                                                             <*>_N
                                                                                                                                                             <GHC.Generics.C>_P
                                                                                                                                                             <'GHC.Generics.MetaCons
                                                                                                                                                                "ModuleName"
                                                                                                                                                                'GHC.Generics.PrefixI
                                                                                                                                                                'GHC.Types.False>_P
                                                                                                                                                             <GHC.Generics.M1
                                                                                                                                                                GHC.Generics.S
                                                                                                                                                                ('GHC.Generics.MetaSel
                                                                                                                                                                   'GHC.Base.Nothing
                                                                                                                                                                   'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                   'GHC.Generics.NoSourceStrictness
                                                                                                                                                                   'GHC.Generics.DecidedLazy)
                                                                                                                                                                (GHC.Generics.K1
                                                                                                                                                                   GHC.Generics.R
                                                                                                                                                                   [Language.PureScript.Names.ProperName
                                                                                                                                                                      'Language.PureScript.Names.Namespace])>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                                                                                                                                                                             <*>_N
                                                                                                                                                                                                                             <GHC.Generics.D>_P
                                                                                                                                                                                                                             <'GHC.Generics.MetaData
                                                                                                                                                                                                                                "ModuleName"
                                                                                                                                                                                                                                "Language.PureScript.Names"
                                                                                                                                                                                                                                "purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"
                                                                                                                                                                                                                                'GHC.Types.True>_P
                                                                                                                                                                                                                             <GHC.Generics.M1
                                                                                                                                                                                                                                GHC.Generics.C
                                                                                                                                                                                                                                ('GHC.Generics.MetaCons
                                                                                                                                                                                                                                   "ModuleName"
                                                                                                                                                                                                                                   'GHC.Generics.PrefixI
                                                                                                                                                                                                                                   'GHC.Types.False)
                                                                                                                                                                                                                                (GHC.Generics.M1
                                                                                                                                                                                                                                   GHC.Generics.S
                                                                                                                                                                                                                                   ('GHC.Generics.MetaSel
                                                                                                                                                                                                                                      'GHC.Base.Nothing
                                                                                                                                                                                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                                                      'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                                                      'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                                                   (GHC.Generics.K1
                                                                                                                                                                                                                                      GHC.Generics.R
                                                                                                                                                                                                                                      [Language.PureScript.Names.ProperName
                                                                                                                                                                                                                                         'Language.PureScript.Names.Namespace]))>_R) ; Sub (Sym (Language.PureScript.Names.Rep_ModuleName[0]))))) <x>_N))
                  Language.PureScript.Names.$fGenericModuleName1
                    `cast`
                  (forall (x :: <*>_N).
                   <GHC.Generics.Rep Language.PureScript.Names.ModuleName x>_R
                   ->_R (Sub (Language.PureScript.Names.Rep_ModuleName[0]) ; (GHC.Generics.N:M1[0]
                                                                                  <*>_N
                                                                                  <GHC.Generics.D>_P
                                                                                  <'GHC.Generics.MetaData
                                                                                     "ModuleName"
                                                                                     "Language.PureScript.Names"
                                                                                     "purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"
                                                                                     'GHC.Types.True>_P
                                                                                  <GHC.Generics.M1
                                                                                     GHC.Generics.C
                                                                                     ('GHC.Generics.MetaCons
                                                                                        "ModuleName"
                                                                                        'GHC.Generics.PrefixI
                                                                                        'GHC.Types.False)
                                                                                     (GHC.Generics.M1
                                                                                        GHC.Generics.S
                                                                                        ('GHC.Generics.MetaSel
                                                                                           'GHC.Base.Nothing
                                                                                           'GHC.Generics.NoSourceUnpackedness
                                                                                           'GHC.Generics.NoSourceStrictness
                                                                                           'GHC.Generics.DecidedLazy)
                                                                                        (GHC.Generics.K1
                                                                                           GHC.Generics.R
                                                                                           [Language.PureScript.Names.ProperName
                                                                                              'Language.PureScript.Names.Namespace]))>_R ; (GHC.Generics.N:M1[0]
                                                                                                                                                <*>_N
                                                                                                                                                <GHC.Generics.C>_P
                                                                                                                                                <'GHC.Generics.MetaCons
                                                                                                                                                   "ModuleName"
                                                                                                                                                   'GHC.Generics.PrefixI
                                                                                                                                                   'GHC.Types.False>_P
                                                                                                                                                <GHC.Generics.M1
                                                                                                                                                   GHC.Generics.S
                                                                                                                                                   ('GHC.Generics.MetaSel
                                                                                                                                                      'GHC.Base.Nothing
                                                                                                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                      'GHC.Generics.NoSourceStrictness
                                                                                                                                                      'GHC.Generics.DecidedLazy)
                                                                                                                                                   (GHC.Generics.K1
                                                                                                                                                      GHC.Generics.R
                                                                                                                                                      [Language.PureScript.Names.ProperName
                                                                                                                                                         'Language.PureScript.Names.Namespace])>_R ; GHC.Generics.N:M1[0]
                                                                                                                                                                                                         <*>_N
                                                                                                                                                                                                         <GHC.Generics.S>_P
                                                                                                                                                                                                         <'GHC.Generics.MetaSel
                                                                                                                                                                                                            'GHC.Base.Nothing
                                                                                                                                                                                                            'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                            'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                            'GHC.Generics.DecidedLazy>_P
                                                                                                                                                                                                         <GHC.Generics.K1
                                                                                                                                                                                                            GHC.Generics.R
                                                                                                                                                                                                            [Language.PureScript.Names.ProperName
                                                                                                                                                                                                               'Language.PureScript.Names.Namespace]>_R))) <x>_N ; (GHC.Generics.N:K1[0]
                                                                                                                                                                                                                                                                        <*>_N
                                                                                                                                                                                                                                                                        <GHC.Generics.R>_P
                                                                                                                                                                                                                                                                        <[Language.PureScript.Names.ProperName
                                                                                                                                                                                                                                                                            'Language.PureScript.Names.Namespace]>_R
                                                                                                                                                                                                                                                                        <x>_P ; Sym (Language.PureScript.Names.N:ModuleName[0]))) -}
5a70062bbdf29e6dc659ad8bf5326b50
  $fGenericModuleName1 ::
    GHC.Generics.Rep Language.PureScript.Names.ModuleName x
    -> GHC.Generics.Rep Language.PureScript.Names.ModuleName x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ @ x
                   (ds :: GHC.Generics.Rep Language.PureScript.Names.ModuleName x) ->
                 ds) -}
5a70062bbdf29e6dc659ad8bf5326b50
  $fGenericModuleName2 ::
    Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ModuleName
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ @ x (x1 :: Language.PureScript.Names.ModuleName) -> x1) -}
184494d9e734645f374e2a0fce32bfac
  $fGenericName ::
    GHC.Generics.Generic Language.PureScript.Names.Name
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Names.Name
                  Language.PureScript.Names.$fGenericName1
                    `cast`
                  (forall (x :: <*>_N).
                   <Language.PureScript.Names.Name>_R
                   ->_R (Sym (GHC.Generics.N:M1[0]
                                  <*>_N
                                  <GHC.Generics.D>_P
                                  <'GHC.Generics.MetaData
                                     "Name"
                                     "Language.PureScript.Names"
                                     "purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"
                                     'GHC.Types.False>_P
                                  <((GHC.Generics.M1
                                       GHC.Generics.C
                                       ('GHC.Generics.MetaCons
                                          "IdentName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                       (GHC.Generics.M1
                                          GHC.Generics.S
                                          ('GHC.Generics.MetaSel
                                             'GHC.Base.Nothing
                                             'GHC.Generics.NoSourceUnpackedness
                                             'GHC.Generics.NoSourceStrictness
                                             'GHC.Generics.DecidedLazy)
                                          (GHC.Generics.K1
                                             GHC.Generics.R Language.PureScript.Names.Ident))
                                     GHC.Generics.:+: GHC.Generics.M1
                                                        GHC.Generics.C
                                                        ('GHC.Generics.MetaCons
                                                           "ValOpName"
                                                           'GHC.Generics.PrefixI
                                                           'GHC.Types.False)
                                                        (GHC.Generics.M1
                                                           GHC.Generics.S
                                                           ('GHC.Generics.MetaSel
                                                              'GHC.Base.Nothing
                                                              'GHC.Generics.NoSourceUnpackedness
                                                              'GHC.Generics.NoSourceStrictness
                                                              'GHC.Generics.DecidedLazy)
                                                           (GHC.Generics.K1
                                                              GHC.Generics.R
                                                              (Language.PureScript.Names.OpName
                                                                 'Language.PureScript.Names.ValueOpName))))
                                    GHC.Generics.:+: (GHC.Generics.M1
                                                        GHC.Generics.C
                                                        ('GHC.Generics.MetaCons
                                                           "TyName"
                                                           'GHC.Generics.PrefixI
                                                           'GHC.Types.False)
                                                        (GHC.Generics.M1
                                                           GHC.Generics.S
                                                           ('GHC.Generics.MetaSel
                                                              'GHC.Base.Nothing
                                                              'GHC.Generics.NoSourceUnpackedness
                                                              'GHC.Generics.NoSourceStrictness
                                                              'GHC.Generics.DecidedLazy)
                                                           (GHC.Generics.K1
                                                              GHC.Generics.R
                                                              (Language.PureScript.Names.ProperName
                                                                 'Language.PureScript.Names.TypeName)))
                                                      GHC.Generics.:+: GHC.Generics.M1
                                                                         GHC.Generics.C
                                                                         ('GHC.Generics.MetaCons
                                                                            "TyOpName"
                                                                            'GHC.Generics.PrefixI
                                                                            'GHC.Types.False)
                                                                         (GHC.Generics.M1
                                                                            GHC.Generics.S
                                                                            ('GHC.Generics.MetaSel
                                                                               'GHC.Base.Nothing
                                                                               'GHC.Generics.NoSourceUnpackedness
                                                                               'GHC.Generics.NoSourceStrictness
                                                                               'GHC.Generics.DecidedLazy)
                                                                            (GHC.Generics.K1
                                                                               GHC.Generics.R
                                                                               (Language.PureScript.Names.OpName
                                                                                  'Language.PureScript.Names.TypeOpName)))))
                                   GHC.Generics.:+: ((GHC.Generics.M1
                                                        GHC.Generics.C
                                                        ('GHC.Generics.MetaCons
                                                           "DctorName"
                                                           'GHC.Generics.PrefixI
                                                           'GHC.Types.False)
                                                        (GHC.Generics.M1
                                                           GHC.Generics.S
                                                           ('GHC.Generics.MetaSel
                                                              'GHC.Base.Nothing
                                                              'GHC.Generics.NoSourceUnpackedness
                                                              'GHC.Generics.NoSourceStrictness
                                                              'GHC.Generics.DecidedLazy)
                                                           (GHC.Generics.K1
                                                              GHC.Generics.R
                                                              (Language.PureScript.Names.ProperName
                                                                 'Language.PureScript.Names.ConstructorName)))
                                                      GHC.Generics.:+: GHC.Generics.M1
                                                                         GHC.Generics.C
                                                                         ('GHC.Generics.MetaCons
                                                                            "TyClassName"
                                                                            'GHC.Generics.PrefixI
                                                                            'GHC.Types.False)
                                                                         (GHC.Generics.M1
                                                                            GHC.Generics.S
                                                                            ('GHC.Generics.MetaSel
                                                                               'GHC.Base.Nothing
                                                                               'GHC.Generics.NoSourceUnpackedness
                                                                               'GHC.Generics.NoSourceStrictness
                                                                               'GHC.Generics.DecidedLazy)
                                                                            (GHC.Generics.K1
                                                                               GHC.Generics.R
                                                                               (Language.PureScript.Names.ProperName
                                                                                  'Language.PureScript.Names.ClassName))))
                                                     GHC.Generics.:+: (GHC.Generics.M1
                                                                         GHC.Generics.C
                                                                         ('GHC.Generics.MetaCons
                                                                            "ModName"
                                                                            'GHC.Generics.PrefixI
                                                                            'GHC.Types.False)
                                                                         (GHC.Generics.M1
                                                                            GHC.Generics.S
                                                                            ('GHC.Generics.MetaSel
                                                                               'GHC.Base.Nothing
                                                                               'GHC.Generics.NoSourceUnpackedness
                                                                               'GHC.Generics.NoSourceStrictness
                                                                               'GHC.Generics.DecidedLazy)
                                                                            (GHC.Generics.K1
                                                                               GHC.Generics.R
                                                                               Language.PureScript.Names.ModuleName))
                                                                       GHC.Generics.:+: GHC.Generics.M1
                                                                                          GHC.Generics.C
                                                                                          ('GHC.Generics.MetaCons
                                                                                             "KiName"
                                                                                             'GHC.Generics.PrefixI
                                                                                             'GHC.Types.False)
                                                                                          (GHC.Generics.M1
                                                                                             GHC.Generics.S
                                                                                             ('GHC.Generics.MetaSel
                                                                                                'GHC.Base.Nothing
                                                                                                'GHC.Generics.NoSourceUnpackedness
                                                                                                'GHC.Generics.NoSourceStrictness
                                                                                                'GHC.Generics.DecidedLazy)
                                                                                             (GHC.Generics.K1
                                                                                                GHC.Generics.R
                                                                                                (Language.PureScript.Names.ProperName
                                                                                                   'Language.PureScript.Names.KindName)))))>_R) ; Sub (Sym (Language.PureScript.Names.Rep_Name[0]))) <x>_N)
                  Language.PureScript.Names.$fGenericName_$cto -}
184494d9e734645f374e2a0fce32bfac
  $fGenericName1 ::
    Language.PureScript.Names.Name
    -> (GHC.Generics.:+:)
         ((GHC.Generics.M1
             GHC.Generics.C
             ('GHC.Generics.MetaCons
                "IdentName" 'GHC.Generics.PrefixI 'GHC.Types.False)
             (GHC.Generics.M1
                GHC.Generics.S
                ('GHC.Generics.MetaSel
                   'GHC.Base.Nothing
                   'GHC.Generics.NoSourceUnpackedness
                   'GHC.Generics.NoSourceStrictness
                   'GHC.Generics.DecidedLazy)
                (GHC.Generics.K1 GHC.Generics.R Language.PureScript.Names.Ident))
           GHC.Generics.:+: GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "ValOpName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R
                                    (Language.PureScript.Names.OpName
                                       'Language.PureScript.Names.ValueOpName))))
          GHC.Generics.:+: (GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "TyName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R
                                    (Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.TypeName)))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "TyOpName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     (Language.PureScript.Names.OpName
                                                        'Language.PureScript.Names.TypeOpName)))))
         ((GHC.Generics.M1
             GHC.Generics.C
             ('GHC.Generics.MetaCons
                "DctorName" 'GHC.Generics.PrefixI 'GHC.Types.False)
             (GHC.Generics.M1
                GHC.Generics.S
                ('GHC.Generics.MetaSel
                   'GHC.Base.Nothing
                   'GHC.Generics.NoSourceUnpackedness
                   'GHC.Generics.NoSourceStrictness
                   'GHC.Generics.DecidedLazy)
                (GHC.Generics.K1
                   GHC.Generics.R
                   (Language.PureScript.Names.ProperName
                      'Language.PureScript.Names.ConstructorName)))
           GHC.Generics.:+: GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "TyClassName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R
                                    (Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.ClassName))))
          GHC.Generics.:+: (GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "ModName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R Language.PureScript.Names.ModuleName))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "KiName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     (Language.PureScript.Names.ProperName
                                                        'Language.PureScript.Names.KindName)))))
         x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ @ x (x1 :: Language.PureScript.Names.Name) ->
                 case x1 of wild {
                   Language.PureScript.Names.IdentName g1
                   -> GHC.Generics.L1
                        @ *
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "IdentName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1 GHC.Generics.R Language.PureScript.Names.Ident))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "ValOpName"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     (Language.PureScript.Names.OpName
                                                        'Language.PureScript.Names.ValueOpName))))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "TyName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     (Language.PureScript.Names.ProperName
                                                        'Language.PureScript.Names.TypeName)))
                                             GHC.Generics.:+: GHC.Generics.M1
                                                                GHC.Generics.C
                                                                ('GHC.Generics.MetaCons
                                                                   "TyOpName"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.False)
                                                                (GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      (Language.PureScript.Names.OpName
                                                                         'Language.PureScript.Names.TypeOpName)))))
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "DctorName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R
                                    (Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.ConstructorName)))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "TyClassName"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     (Language.PureScript.Names.ProperName
                                                        'Language.PureScript.Names.ClassName))))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "ModName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.Names.ModuleName))
                                             GHC.Generics.:+: GHC.Generics.M1
                                                                GHC.Generics.C
                                                                ('GHC.Generics.MetaCons
                                                                   "KiName"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.False)
                                                                (GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      (Language.PureScript.Names.ProperName
                                                                         'Language.PureScript.Names.KindName)))))
                        @ x
                        (GHC.Generics.L1
                           @ *
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "IdentName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1 GHC.Generics.R Language.PureScript.Names.Ident))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "ValOpName"
                                                    'GHC.Generics.PrefixI
                                                    'GHC.Types.False)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       (Language.PureScript.Names.OpName
                                                          'Language.PureScript.Names.ValueOpName))))
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "TyName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R
                                      (Language.PureScript.Names.ProperName
                                         'Language.PureScript.Names.TypeName)))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "TyOpName"
                                                    'GHC.Generics.PrefixI
                                                    'GHC.Types.False)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       (Language.PureScript.Names.OpName
                                                          'Language.PureScript.Names.TypeOpName))))
                           @ x
                           (GHC.Generics.L1
                              @ *
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "IdentName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R Language.PureScript.Names.Ident)))
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "ValOpName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         (Language.PureScript.Names.OpName
                                            'Language.PureScript.Names.ValueOpName))))
                              @ x
                              g1
                                `cast`
                              (Sym (GHC.Generics.N:K1[0]
                                        <*>_N
                                        <GHC.Generics.R>_P
                                        <Language.PureScript.Names.Ident>_R
                                        <x>_P) ; (Sym (GHC.Generics.N:M1[0]
                                                           <*>_N
                                                           <GHC.Generics.S>_P
                                                           <'GHC.Generics.MetaSel
                                                              'GHC.Base.Nothing
                                                              'GHC.Generics.NoSourceUnpackedness
                                                              'GHC.Generics.NoSourceStrictness
                                                              'GHC.Generics.DecidedLazy>_P
                                                           <GHC.Generics.K1
                                                              GHC.Generics.R
                                                              Language.PureScript.Names.Ident>_R) ; Sym (GHC.Generics.N:M1[0]
                                                                                                             <*>_N
                                                                                                             <GHC.Generics.C>_P
                                                                                                             <'GHC.Generics.MetaCons
                                                                                                                "IdentName"
                                                                                                                'GHC.Generics.PrefixI
                                                                                                                'GHC.Types.False>_P
                                                                                                             <GHC.Generics.M1
                                                                                                                GHC.Generics.S
                                                                                                                ('GHC.Generics.MetaSel
                                                                                                                   'GHC.Base.Nothing
                                                                                                                   'GHC.Generics.NoSourceUnpackedness
                                                                                                                   'GHC.Generics.NoSourceStrictness
                                                                                                                   'GHC.Generics.DecidedLazy)
                                                                                                                (GHC.Generics.K1
                                                                                                                   GHC.Generics.R
                                                                                                                   Language.PureScript.Names.Ident)>_R)) <x>_N)))
                   Language.PureScript.Names.ValOpName g1
                   -> GHC.Generics.L1
                        @ *
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "IdentName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1 GHC.Generics.R Language.PureScript.Names.Ident))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "ValOpName"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     (Language.PureScript.Names.OpName
                                                        'Language.PureScript.Names.ValueOpName))))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "TyName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     (Language.PureScript.Names.ProperName
                                                        'Language.PureScript.Names.TypeName)))
                                             GHC.Generics.:+: GHC.Generics.M1
                                                                GHC.Generics.C
                                                                ('GHC.Generics.MetaCons
                                                                   "TyOpName"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.False)
                                                                (GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      (Language.PureScript.Names.OpName
                                                                         'Language.PureScript.Names.TypeOpName)))))
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "DctorName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R
                                    (Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.ConstructorName)))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "TyClassName"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     (Language.PureScript.Names.ProperName
                                                        'Language.PureScript.Names.ClassName))))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "ModName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.Names.ModuleName))
                                             GHC.Generics.:+: GHC.Generics.M1
                                                                GHC.Generics.C
                                                                ('GHC.Generics.MetaCons
                                                                   "KiName"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.False)
                                                                (GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      (Language.PureScript.Names.ProperName
                                                                         'Language.PureScript.Names.KindName)))))
                        @ x
                        (GHC.Generics.L1
                           @ *
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "IdentName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1 GHC.Generics.R Language.PureScript.Names.Ident))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "ValOpName"
                                                    'GHC.Generics.PrefixI
                                                    'GHC.Types.False)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       (Language.PureScript.Names.OpName
                                                          'Language.PureScript.Names.ValueOpName))))
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "TyName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R
                                      (Language.PureScript.Names.ProperName
                                         'Language.PureScript.Names.TypeName)))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "TyOpName"
                                                    'GHC.Generics.PrefixI
                                                    'GHC.Types.False)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       (Language.PureScript.Names.OpName
                                                          'Language.PureScript.Names.TypeOpName))))
                           @ x
                           (GHC.Generics.R1
                              @ *
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "IdentName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R Language.PureScript.Names.Ident)))
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "ValOpName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         (Language.PureScript.Names.OpName
                                            'Language.PureScript.Names.ValueOpName))))
                              @ x
                              g1
                                `cast`
                              (Sym (GHC.Generics.N:K1[0]
                                        <*>_N
                                        <GHC.Generics.R>_P
                                        <Language.PureScript.Names.OpName
                                           'Language.PureScript.Names.ValueOpName>_R
                                        <x>_P) ; (Sym (GHC.Generics.N:M1[0]
                                                           <*>_N
                                                           <GHC.Generics.S>_P
                                                           <'GHC.Generics.MetaSel
                                                              'GHC.Base.Nothing
                                                              'GHC.Generics.NoSourceUnpackedness
                                                              'GHC.Generics.NoSourceStrictness
                                                              'GHC.Generics.DecidedLazy>_P
                                                           <GHC.Generics.K1
                                                              GHC.Generics.R
                                                              (Language.PureScript.Names.OpName
                                                                 'Language.PureScript.Names.ValueOpName)>_R) ; Sym (GHC.Generics.N:M1[0]
                                                                                                                        <*>_N
                                                                                                                        <GHC.Generics.C>_P
                                                                                                                        <'GHC.Generics.MetaCons
                                                                                                                           "ValOpName"
                                                                                                                           'GHC.Generics.PrefixI
                                                                                                                           'GHC.Types.False>_P
                                                                                                                        <GHC.Generics.M1
                                                                                                                           GHC.Generics.S
                                                                                                                           ('GHC.Generics.MetaSel
                                                                                                                              'GHC.Base.Nothing
                                                                                                                              'GHC.Generics.NoSourceUnpackedness
                                                                                                                              'GHC.Generics.NoSourceStrictness
                                                                                                                              'GHC.Generics.DecidedLazy)
                                                                                                                           (GHC.Generics.K1
                                                                                                                              GHC.Generics.R
                                                                                                                              (Language.PureScript.Names.OpName
                                                                                                                                 'Language.PureScript.Names.ValueOpName))>_R)) <x>_N)))
                   Language.PureScript.Names.TyName g1
                   -> GHC.Generics.L1
                        @ *
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "IdentName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1 GHC.Generics.R Language.PureScript.Names.Ident))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "ValOpName"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     (Language.PureScript.Names.OpName
                                                        'Language.PureScript.Names.ValueOpName))))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "TyName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     (Language.PureScript.Names.ProperName
                                                        'Language.PureScript.Names.TypeName)))
                                             GHC.Generics.:+: GHC.Generics.M1
                                                                GHC.Generics.C
                                                                ('GHC.Generics.MetaCons
                                                                   "TyOpName"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.False)
                                                                (GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      (Language.PureScript.Names.OpName
                                                                         'Language.PureScript.Names.TypeOpName)))))
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "DctorName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R
                                    (Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.ConstructorName)))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "TyClassName"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     (Language.PureScript.Names.ProperName
                                                        'Language.PureScript.Names.ClassName))))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "ModName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.Names.ModuleName))
                                             GHC.Generics.:+: GHC.Generics.M1
                                                                GHC.Generics.C
                                                                ('GHC.Generics.MetaCons
                                                                   "KiName"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.False)
                                                                (GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      (Language.PureScript.Names.ProperName
                                                                         'Language.PureScript.Names.KindName)))))
                        @ x
                        (GHC.Generics.R1
                           @ *
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "IdentName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1 GHC.Generics.R Language.PureScript.Names.Ident))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "ValOpName"
                                                    'GHC.Generics.PrefixI
                                                    'GHC.Types.False)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       (Language.PureScript.Names.OpName
                                                          'Language.PureScript.Names.ValueOpName))))
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "TyName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R
                                      (Language.PureScript.Names.ProperName
                                         'Language.PureScript.Names.TypeName)))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "TyOpName"
                                                    'GHC.Generics.PrefixI
                                                    'GHC.Types.False)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       (Language.PureScript.Names.OpName
                                                          'Language.PureScript.Names.TypeOpName))))
                           @ x
                           (GHC.Generics.L1
                              @ *
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "TyName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.TypeName))))
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "TyOpName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         (Language.PureScript.Names.OpName
                                            'Language.PureScript.Names.TypeOpName))))
                              @ x
                              g1
                                `cast`
                              (Sym (GHC.Generics.N:K1[0]
                                        <*>_N
                                        <GHC.Generics.R>_P
                                        <Language.PureScript.Names.ProperName
                                           'Language.PureScript.Names.TypeName>_R
                                        <x>_P) ; (Sym (GHC.Generics.N:M1[0]
                                                           <*>_N
                                                           <GHC.Generics.S>_P
                                                           <'GHC.Generics.MetaSel
                                                              'GHC.Base.Nothing
                                                              'GHC.Generics.NoSourceUnpackedness
                                                              'GHC.Generics.NoSourceStrictness
                                                              'GHC.Generics.DecidedLazy>_P
                                                           <GHC.Generics.K1
                                                              GHC.Generics.R
                                                              (Language.PureScript.Names.ProperName
                                                                 'Language.PureScript.Names.TypeName)>_R) ; Sym (GHC.Generics.N:M1[0]
                                                                                                                     <*>_N
                                                                                                                     <GHC.Generics.C>_P
                                                                                                                     <'GHC.Generics.MetaCons
                                                                                                                        "TyName"
                                                                                                                        'GHC.Generics.PrefixI
                                                                                                                        'GHC.Types.False>_P
                                                                                                                     <GHC.Generics.M1
                                                                                                                        GHC.Generics.S
                                                                                                                        ('GHC.Generics.MetaSel
                                                                                                                           'GHC.Base.Nothing
                                                                                                                           'GHC.Generics.NoSourceUnpackedness
                                                                                                                           'GHC.Generics.NoSourceStrictness
                                                                                                                           'GHC.Generics.DecidedLazy)
                                                                                                                        (GHC.Generics.K1
                                                                                                                           GHC.Generics.R
                                                                                                                           (Language.PureScript.Names.ProperName
                                                                                                                              'Language.PureScript.Names.TypeName))>_R)) <x>_N)))
                   Language.PureScript.Names.TyOpName g1
                   -> GHC.Generics.L1
                        @ *
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "IdentName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1 GHC.Generics.R Language.PureScript.Names.Ident))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "ValOpName"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     (Language.PureScript.Names.OpName
                                                        'Language.PureScript.Names.ValueOpName))))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "TyName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     (Language.PureScript.Names.ProperName
                                                        'Language.PureScript.Names.TypeName)))
                                             GHC.Generics.:+: GHC.Generics.M1
                                                                GHC.Generics.C
                                                                ('GHC.Generics.MetaCons
                                                                   "TyOpName"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.False)
                                                                (GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      (Language.PureScript.Names.OpName
                                                                         'Language.PureScript.Names.TypeOpName)))))
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "DctorName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R
                                    (Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.ConstructorName)))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "TyClassName"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     (Language.PureScript.Names.ProperName
                                                        'Language.PureScript.Names.ClassName))))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "ModName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.Names.ModuleName))
                                             GHC.Generics.:+: GHC.Generics.M1
                                                                GHC.Generics.C
                                                                ('GHC.Generics.MetaCons
                                                                   "KiName"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.False)
                                                                (GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      (Language.PureScript.Names.ProperName
                                                                         'Language.PureScript.Names.KindName)))))
                        @ x
                        (GHC.Generics.R1
                           @ *
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "IdentName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1 GHC.Generics.R Language.PureScript.Names.Ident))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "ValOpName"
                                                    'GHC.Generics.PrefixI
                                                    'GHC.Types.False)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       (Language.PureScript.Names.OpName
                                                          'Language.PureScript.Names.ValueOpName))))
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "TyName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R
                                      (Language.PureScript.Names.ProperName
                                         'Language.PureScript.Names.TypeName)))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "TyOpName"
                                                    'GHC.Generics.PrefixI
                                                    'GHC.Types.False)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       (Language.PureScript.Names.OpName
                                                          'Language.PureScript.Names.TypeOpName))))
                           @ x
                           (GHC.Generics.R1
                              @ *
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "TyName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.TypeName))))
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "TyOpName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         (Language.PureScript.Names.OpName
                                            'Language.PureScript.Names.TypeOpName))))
                              @ x
                              g1
                                `cast`
                              (Sym (GHC.Generics.N:K1[0]
                                        <*>_N
                                        <GHC.Generics.R>_P
                                        <Language.PureScript.Names.OpName
                                           'Language.PureScript.Names.TypeOpName>_R
                                        <x>_P) ; (Sym (GHC.Generics.N:M1[0]
                                                           <*>_N
                                                           <GHC.Generics.S>_P
                                                           <'GHC.Generics.MetaSel
                                                              'GHC.Base.Nothing
                                                              'GHC.Generics.NoSourceUnpackedness
                                                              'GHC.Generics.NoSourceStrictness
                                                              'GHC.Generics.DecidedLazy>_P
                                                           <GHC.Generics.K1
                                                              GHC.Generics.R
                                                              (Language.PureScript.Names.OpName
                                                                 'Language.PureScript.Names.TypeOpName)>_R) ; Sym (GHC.Generics.N:M1[0]
                                                                                                                       <*>_N
                                                                                                                       <GHC.Generics.C>_P
                                                                                                                       <'GHC.Generics.MetaCons
                                                                                                                          "TyOpName"
                                                                                                                          'GHC.Generics.PrefixI
                                                                                                                          'GHC.Types.False>_P
                                                                                                                       <GHC.Generics.M1
                                                                                                                          GHC.Generics.S
                                                                                                                          ('GHC.Generics.MetaSel
                                                                                                                             'GHC.Base.Nothing
                                                                                                                             'GHC.Generics.NoSourceUnpackedness
                                                                                                                             'GHC.Generics.NoSourceStrictness
                                                                                                                             'GHC.Generics.DecidedLazy)
                                                                                                                          (GHC.Generics.K1
                                                                                                                             GHC.Generics.R
                                                                                                                             (Language.PureScript.Names.OpName
                                                                                                                                'Language.PureScript.Names.TypeOpName))>_R)) <x>_N)))
                   Language.PureScript.Names.DctorName g1
                   -> GHC.Generics.R1
                        @ *
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "IdentName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1 GHC.Generics.R Language.PureScript.Names.Ident))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "ValOpName"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     (Language.PureScript.Names.OpName
                                                        'Language.PureScript.Names.ValueOpName))))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "TyName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     (Language.PureScript.Names.ProperName
                                                        'Language.PureScript.Names.TypeName)))
                                             GHC.Generics.:+: GHC.Generics.M1
                                                                GHC.Generics.C
                                                                ('GHC.Generics.MetaCons
                                                                   "TyOpName"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.False)
                                                                (GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      (Language.PureScript.Names.OpName
                                                                         'Language.PureScript.Names.TypeOpName)))))
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "DctorName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R
                                    (Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.ConstructorName)))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "TyClassName"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     (Language.PureScript.Names.ProperName
                                                        'Language.PureScript.Names.ClassName))))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "ModName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.Names.ModuleName))
                                             GHC.Generics.:+: GHC.Generics.M1
                                                                GHC.Generics.C
                                                                ('GHC.Generics.MetaCons
                                                                   "KiName"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.False)
                                                                (GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      (Language.PureScript.Names.ProperName
                                                                         'Language.PureScript.Names.KindName)))))
                        @ x
                        (GHC.Generics.L1
                           @ *
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "DctorName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R
                                      (Language.PureScript.Names.ProperName
                                         'Language.PureScript.Names.ConstructorName)))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "TyClassName"
                                                    'GHC.Generics.PrefixI
                                                    'GHC.Types.False)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       (Language.PureScript.Names.ProperName
                                                          'Language.PureScript.Names.ClassName))))
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "ModName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R Language.PureScript.Names.ModuleName))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "KiName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       (Language.PureScript.Names.ProperName
                                                          'Language.PureScript.Names.KindName))))
                           @ x
                           (GHC.Generics.L1
                              @ *
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "DctorName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.ConstructorName))))
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "TyClassName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.ClassName))))
                              @ x
                              g1
                                `cast`
                              (Sym (GHC.Generics.N:K1[0]
                                        <*>_N
                                        <GHC.Generics.R>_P
                                        <Language.PureScript.Names.ProperName
                                           'Language.PureScript.Names.ConstructorName>_R
                                        <x>_P) ; (Sym (GHC.Generics.N:M1[0]
                                                           <*>_N
                                                           <GHC.Generics.S>_P
                                                           <'GHC.Generics.MetaSel
                                                              'GHC.Base.Nothing
                                                              'GHC.Generics.NoSourceUnpackedness
                                                              'GHC.Generics.NoSourceStrictness
                                                              'GHC.Generics.DecidedLazy>_P
                                                           <GHC.Generics.K1
                                                              GHC.Generics.R
                                                              (Language.PureScript.Names.ProperName
                                                                 'Language.PureScript.Names.ConstructorName)>_R) ; Sym (GHC.Generics.N:M1[0]
                                                                                                                            <*>_N
                                                                                                                            <GHC.Generics.C>_P
                                                                                                                            <'GHC.Generics.MetaCons
                                                                                                                               "DctorName"
                                                                                                                               'GHC.Generics.PrefixI
                                                                                                                               'GHC.Types.False>_P
                                                                                                                            <GHC.Generics.M1
                                                                                                                               GHC.Generics.S
                                                                                                                               ('GHC.Generics.MetaSel
                                                                                                                                  'GHC.Base.Nothing
                                                                                                                                  'GHC.Generics.NoSourceUnpackedness
                                                                                                                                  'GHC.Generics.NoSourceStrictness
                                                                                                                                  'GHC.Generics.DecidedLazy)
                                                                                                                               (GHC.Generics.K1
                                                                                                                                  GHC.Generics.R
                                                                                                                                  (Language.PureScript.Names.ProperName
                                                                                                                                     'Language.PureScript.Names.ConstructorName))>_R)) <x>_N)))
                   Language.PureScript.Names.TyClassName g1
                   -> GHC.Generics.R1
                        @ *
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "IdentName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1 GHC.Generics.R Language.PureScript.Names.Ident))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "ValOpName"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     (Language.PureScript.Names.OpName
                                                        'Language.PureScript.Names.ValueOpName))))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "TyName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     (Language.PureScript.Names.ProperName
                                                        'Language.PureScript.Names.TypeName)))
                                             GHC.Generics.:+: GHC.Generics.M1
                                                                GHC.Generics.C
                                                                ('GHC.Generics.MetaCons
                                                                   "TyOpName"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.False)
                                                                (GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      (Language.PureScript.Names.OpName
                                                                         'Language.PureScript.Names.TypeOpName)))))
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "DctorName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R
                                    (Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.ConstructorName)))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "TyClassName"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     (Language.PureScript.Names.ProperName
                                                        'Language.PureScript.Names.ClassName))))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "ModName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.Names.ModuleName))
                                             GHC.Generics.:+: GHC.Generics.M1
                                                                GHC.Generics.C
                                                                ('GHC.Generics.MetaCons
                                                                   "KiName"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.False)
                                                                (GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      (Language.PureScript.Names.ProperName
                                                                         'Language.PureScript.Names.KindName)))))
                        @ x
                        (GHC.Generics.L1
                           @ *
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "DctorName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R
                                      (Language.PureScript.Names.ProperName
                                         'Language.PureScript.Names.ConstructorName)))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "TyClassName"
                                                    'GHC.Generics.PrefixI
                                                    'GHC.Types.False)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       (Language.PureScript.Names.ProperName
                                                          'Language.PureScript.Names.ClassName))))
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "ModName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R Language.PureScript.Names.ModuleName))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "KiName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       (Language.PureScript.Names.ProperName
                                                          'Language.PureScript.Names.KindName))))
                           @ x
                           (GHC.Generics.R1
                              @ *
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "DctorName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.ConstructorName))))
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "TyClassName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.ClassName))))
                              @ x
                              g1
                                `cast`
                              (Sym (GHC.Generics.N:K1[0]
                                        <*>_N
                                        <GHC.Generics.R>_P
                                        <Language.PureScript.Names.ProperName
                                           'Language.PureScript.Names.ClassName>_R
                                        <x>_P) ; (Sym (GHC.Generics.N:M1[0]
                                                           <*>_N
                                                           <GHC.Generics.S>_P
                                                           <'GHC.Generics.MetaSel
                                                              'GHC.Base.Nothing
                                                              'GHC.Generics.NoSourceUnpackedness
                                                              'GHC.Generics.NoSourceStrictness
                                                              'GHC.Generics.DecidedLazy>_P
                                                           <GHC.Generics.K1
                                                              GHC.Generics.R
                                                              (Language.PureScript.Names.ProperName
                                                                 'Language.PureScript.Names.ClassName)>_R) ; Sym (GHC.Generics.N:M1[0]
                                                                                                                      <*>_N
                                                                                                                      <GHC.Generics.C>_P
                                                                                                                      <'GHC.Generics.MetaCons
                                                                                                                         "TyClassName"
                                                                                                                         'GHC.Generics.PrefixI
                                                                                                                         'GHC.Types.False>_P
                                                                                                                      <GHC.Generics.M1
                                                                                                                         GHC.Generics.S
                                                                                                                         ('GHC.Generics.MetaSel
                                                                                                                            'GHC.Base.Nothing
                                                                                                                            'GHC.Generics.NoSourceUnpackedness
                                                                                                                            'GHC.Generics.NoSourceStrictness
                                                                                                                            'GHC.Generics.DecidedLazy)
                                                                                                                         (GHC.Generics.K1
                                                                                                                            GHC.Generics.R
                                                                                                                            (Language.PureScript.Names.ProperName
                                                                                                                               'Language.PureScript.Names.ClassName))>_R)) <x>_N)))
                   Language.PureScript.Names.ModName g1
                   -> GHC.Generics.R1
                        @ *
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "IdentName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1 GHC.Generics.R Language.PureScript.Names.Ident))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "ValOpName"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     (Language.PureScript.Names.OpName
                                                        'Language.PureScript.Names.ValueOpName))))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "TyName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     (Language.PureScript.Names.ProperName
                                                        'Language.PureScript.Names.TypeName)))
                                             GHC.Generics.:+: GHC.Generics.M1
                                                                GHC.Generics.C
                                                                ('GHC.Generics.MetaCons
                                                                   "TyOpName"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.False)
                                                                (GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      (Language.PureScript.Names.OpName
                                                                         'Language.PureScript.Names.TypeOpName)))))
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "DctorName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R
                                    (Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.ConstructorName)))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "TyClassName"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     (Language.PureScript.Names.ProperName
                                                        'Language.PureScript.Names.ClassName))))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "ModName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.Names.ModuleName))
                                             GHC.Generics.:+: GHC.Generics.M1
                                                                GHC.Generics.C
                                                                ('GHC.Generics.MetaCons
                                                                   "KiName"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.False)
                                                                (GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      (Language.PureScript.Names.ProperName
                                                                         'Language.PureScript.Names.KindName)))))
                        @ x
                        (GHC.Generics.R1
                           @ *
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "DctorName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R
                                      (Language.PureScript.Names.ProperName
                                         'Language.PureScript.Names.ConstructorName)))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "TyClassName"
                                                    'GHC.Generics.PrefixI
                                                    'GHC.Types.False)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       (Language.PureScript.Names.ProperName
                                                          'Language.PureScript.Names.ClassName))))
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "ModName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R Language.PureScript.Names.ModuleName))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "KiName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       (Language.PureScript.Names.ProperName
                                                          'Language.PureScript.Names.KindName))))
                           @ x
                           (GHC.Generics.L1
                              @ *
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "ModName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R Language.PureScript.Names.ModuleName)))
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "KiName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.KindName))))
                              @ x
                              g1
                                `cast`
                              (Sym (GHC.Generics.N:K1[0]
                                        <*>_N
                                        <GHC.Generics.R>_P
                                        <Language.PureScript.Names.ModuleName>_R
                                        <x>_P) ; (Sym (GHC.Generics.N:M1[0]
                                                           <*>_N
                                                           <GHC.Generics.S>_P
                                                           <'GHC.Generics.MetaSel
                                                              'GHC.Base.Nothing
                                                              'GHC.Generics.NoSourceUnpackedness
                                                              'GHC.Generics.NoSourceStrictness
                                                              'GHC.Generics.DecidedLazy>_P
                                                           <GHC.Generics.K1
                                                              GHC.Generics.R
                                                              Language.PureScript.Names.ModuleName>_R) ; Sym (GHC.Generics.N:M1[0]
                                                                                                                  <*>_N
                                                                                                                  <GHC.Generics.C>_P
                                                                                                                  <'GHC.Generics.MetaCons
                                                                                                                     "ModName"
                                                                                                                     'GHC.Generics.PrefixI
                                                                                                                     'GHC.Types.False>_P
                                                                                                                  <GHC.Generics.M1
                                                                                                                     GHC.Generics.S
                                                                                                                     ('GHC.Generics.MetaSel
                                                                                                                        'GHC.Base.Nothing
                                                                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                                                                        'GHC.Generics.NoSourceStrictness
                                                                                                                        'GHC.Generics.DecidedLazy)
                                                                                                                     (GHC.Generics.K1
                                                                                                                        GHC.Generics.R
                                                                                                                        Language.PureScript.Names.ModuleName)>_R)) <x>_N)))
                   Language.PureScript.Names.KiName g1
                   -> GHC.Generics.R1
                        @ *
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "IdentName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1 GHC.Generics.R Language.PureScript.Names.Ident))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "ValOpName"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     (Language.PureScript.Names.OpName
                                                        'Language.PureScript.Names.ValueOpName))))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "TyName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     (Language.PureScript.Names.ProperName
                                                        'Language.PureScript.Names.TypeName)))
                                             GHC.Generics.:+: GHC.Generics.M1
                                                                GHC.Generics.C
                                                                ('GHC.Generics.MetaCons
                                                                   "TyOpName"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.False)
                                                                (GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      (Language.PureScript.Names.OpName
                                                                         'Language.PureScript.Names.TypeOpName)))))
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "DctorName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R
                                    (Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.ConstructorName)))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "TyClassName"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     (Language.PureScript.Names.ProperName
                                                        'Language.PureScript.Names.ClassName))))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "ModName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.Names.ModuleName))
                                             GHC.Generics.:+: GHC.Generics.M1
                                                                GHC.Generics.C
                                                                ('GHC.Generics.MetaCons
                                                                   "KiName"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.False)
                                                                (GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      (Language.PureScript.Names.ProperName
                                                                         'Language.PureScript.Names.KindName)))))
                        @ x
                        (GHC.Generics.R1
                           @ *
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "DctorName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R
                                      (Language.PureScript.Names.ProperName
                                         'Language.PureScript.Names.ConstructorName)))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "TyClassName"
                                                    'GHC.Generics.PrefixI
                                                    'GHC.Types.False)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       (Language.PureScript.Names.ProperName
                                                          'Language.PureScript.Names.ClassName))))
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "ModName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R Language.PureScript.Names.ModuleName))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "KiName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       (Language.PureScript.Names.ProperName
                                                          'Language.PureScript.Names.KindName))))
                           @ x
                           (GHC.Generics.R1
                              @ *
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "ModName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R Language.PureScript.Names.ModuleName)))
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "KiName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.KindName))))
                              @ x
                              g1
                                `cast`
                              (Sym (GHC.Generics.N:K1[0]
                                        <*>_N
                                        <GHC.Generics.R>_P
                                        <Language.PureScript.Names.ProperName
                                           'Language.PureScript.Names.KindName>_R
                                        <x>_P) ; (Sym (GHC.Generics.N:M1[0]
                                                           <*>_N
                                                           <GHC.Generics.S>_P
                                                           <'GHC.Generics.MetaSel
                                                              'GHC.Base.Nothing
                                                              'GHC.Generics.NoSourceUnpackedness
                                                              'GHC.Generics.NoSourceStrictness
                                                              'GHC.Generics.DecidedLazy>_P
                                                           <GHC.Generics.K1
                                                              GHC.Generics.R
                                                              (Language.PureScript.Names.ProperName
                                                                 'Language.PureScript.Names.KindName)>_R) ; Sym (GHC.Generics.N:M1[0]
                                                                                                                     <*>_N
                                                                                                                     <GHC.Generics.C>_P
                                                                                                                     <'GHC.Generics.MetaCons
                                                                                                                        "KiName"
                                                                                                                        'GHC.Generics.PrefixI
                                                                                                                        'GHC.Types.False>_P
                                                                                                                     <GHC.Generics.M1
                                                                                                                        GHC.Generics.S
                                                                                                                        ('GHC.Generics.MetaSel
                                                                                                                           'GHC.Base.Nothing
                                                                                                                           'GHC.Generics.NoSourceUnpackedness
                                                                                                                           'GHC.Generics.NoSourceStrictness
                                                                                                                           'GHC.Generics.DecidedLazy)
                                                                                                                        (GHC.Generics.K1
                                                                                                                           GHC.Generics.R
                                                                                                                           (Language.PureScript.Names.ProperName
                                                                                                                              'Language.PureScript.Names.KindName))>_R)) <x>_N))) }) -}
184494d9e734645f374e2a0fce32bfac
  $fGenericName_$cto ::
    GHC.Generics.Rep Language.PureScript.Names.Name x
    -> Language.PureScript.Names.Name
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ @ x
                   (ds :: GHC.Generics.Rep Language.PureScript.Names.Name x) ->
                 case ds
                        `cast`
                      ((Sub (Language.PureScript.Names.Rep_Name[0]) ; GHC.Generics.N:M1[0]
                                                                          <*>_N
                                                                          <GHC.Generics.D>_P
                                                                          <'GHC.Generics.MetaData
                                                                             "Name"
                                                                             "Language.PureScript.Names"
                                                                             "purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"
                                                                             'GHC.Types.False>_P
                                                                          <((GHC.Generics.M1
                                                                               GHC.Generics.C
                                                                               ('GHC.Generics.MetaCons
                                                                                  "IdentName"
                                                                                  'GHC.Generics.PrefixI
                                                                                  'GHC.Types.False)
                                                                               (GHC.Generics.M1
                                                                                  GHC.Generics.S
                                                                                  ('GHC.Generics.MetaSel
                                                                                     'GHC.Base.Nothing
                                                                                     'GHC.Generics.NoSourceUnpackedness
                                                                                     'GHC.Generics.NoSourceStrictness
                                                                                     'GHC.Generics.DecidedLazy)
                                                                                  (GHC.Generics.K1
                                                                                     GHC.Generics.R
                                                                                     Language.PureScript.Names.Ident))
                                                                             GHC.Generics.:+: GHC.Generics.M1
                                                                                                GHC.Generics.C
                                                                                                ('GHC.Generics.MetaCons
                                                                                                   "ValOpName"
                                                                                                   'GHC.Generics.PrefixI
                                                                                                   'GHC.Types.False)
                                                                                                (GHC.Generics.M1
                                                                                                   GHC.Generics.S
                                                                                                   ('GHC.Generics.MetaSel
                                                                                                      'GHC.Base.Nothing
                                                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                                                      'GHC.Generics.NoSourceStrictness
                                                                                                      'GHC.Generics.DecidedLazy)
                                                                                                   (GHC.Generics.K1
                                                                                                      GHC.Generics.R
                                                                                                      (Language.PureScript.Names.OpName
                                                                                                         'Language.PureScript.Names.ValueOpName))))
                                                                            GHC.Generics.:+: (GHC.Generics.M1
                                                                                                GHC.Generics.C
                                                                                                ('GHC.Generics.MetaCons
                                                                                                   "TyName"
                                                                                                   'GHC.Generics.PrefixI
                                                                                                   'GHC.Types.False)
                                                                                                (GHC.Generics.M1
                                                                                                   GHC.Generics.S
                                                                                                   ('GHC.Generics.MetaSel
                                                                                                      'GHC.Base.Nothing
                                                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                                                      'GHC.Generics.NoSourceStrictness
                                                                                                      'GHC.Generics.DecidedLazy)
                                                                                                   (GHC.Generics.K1
                                                                                                      GHC.Generics.R
                                                                                                      (Language.PureScript.Names.ProperName
                                                                                                         'Language.PureScript.Names.TypeName)))
                                                                                              GHC.Generics.:+: GHC.Generics.M1
                                                                                                                 GHC.Generics.C
                                                                                                                 ('GHC.Generics.MetaCons
                                                                                                                    "TyOpName"
                                                                                                                    'GHC.Generics.PrefixI
                                                                                                                    'GHC.Types.False)
                                                                                                                 (GHC.Generics.M1
                                                                                                                    GHC.Generics.S
                                                                                                                    ('GHC.Generics.MetaSel
                                                                                                                       'GHC.Base.Nothing
                                                                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                                                                       'GHC.Generics.NoSourceStrictness
                                                                                                                       'GHC.Generics.DecidedLazy)
                                                                                                                    (GHC.Generics.K1
                                                                                                                       GHC.Generics.R
                                                                                                                       (Language.PureScript.Names.OpName
                                                                                                                          'Language.PureScript.Names.TypeOpName)))))
                                                                           GHC.Generics.:+: ((GHC.Generics.M1
                                                                                                GHC.Generics.C
                                                                                                ('GHC.Generics.MetaCons
                                                                                                   "DctorName"
                                                                                                   'GHC.Generics.PrefixI
                                                                                                   'GHC.Types.False)
                                                                                                (GHC.Generics.M1
                                                                                                   GHC.Generics.S
                                                                                                   ('GHC.Generics.MetaSel
                                                                                                      'GHC.Base.Nothing
                                                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                                                      'GHC.Generics.NoSourceStrictness
                                                                                                      'GHC.Generics.DecidedLazy)
                                                                                                   (GHC.Generics.K1
                                                                                                      GHC.Generics.R
                                                                                                      (Language.PureScript.Names.ProperName
                                                                                                         'Language.PureScript.Names.ConstructorName)))
                                                                                              GHC.Generics.:+: GHC.Generics.M1
                                                                                                                 GHC.Generics.C
                                                                                                                 ('GHC.Generics.MetaCons
                                                                                                                    "TyClassName"
                                                                                                                    'GHC.Generics.PrefixI
                                                                                                                    'GHC.Types.False)
                                                                                                                 (GHC.Generics.M1
                                                                                                                    GHC.Generics.S
                                                                                                                    ('GHC.Generics.MetaSel
                                                                                                                       'GHC.Base.Nothing
                                                                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                                                                       'GHC.Generics.NoSourceStrictness
                                                                                                                       'GHC.Generics.DecidedLazy)
                                                                                                                    (GHC.Generics.K1
                                                                                                                       GHC.Generics.R
                                                                                                                       (Language.PureScript.Names.ProperName
                                                                                                                          'Language.PureScript.Names.ClassName))))
                                                                                             GHC.Generics.:+: (GHC.Generics.M1
                                                                                                                 GHC.Generics.C
                                                                                                                 ('GHC.Generics.MetaCons
                                                                                                                    "ModName"
                                                                                                                    'GHC.Generics.PrefixI
                                                                                                                    'GHC.Types.False)
                                                                                                                 (GHC.Generics.M1
                                                                                                                    GHC.Generics.S
                                                                                                                    ('GHC.Generics.MetaSel
                                                                                                                       'GHC.Base.Nothing
                                                                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                                                                       'GHC.Generics.NoSourceStrictness
                                                                                                                       'GHC.Generics.DecidedLazy)
                                                                                                                    (GHC.Generics.K1
                                                                                                                       GHC.Generics.R
                                                                                                                       Language.PureScript.Names.ModuleName))
                                                                                                               GHC.Generics.:+: GHC.Generics.M1
                                                                                                                                  GHC.Generics.C
                                                                                                                                  ('GHC.Generics.MetaCons
                                                                                                                                     "KiName"
                                                                                                                                     'GHC.Generics.PrefixI
                                                                                                                                     'GHC.Types.False)
                                                                                                                                  (GHC.Generics.M1
                                                                                                                                     GHC.Generics.S
                                                                                                                                     ('GHC.Generics.MetaSel
                                                                                                                                        'GHC.Base.Nothing
                                                                                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                                                                                        'GHC.Generics.NoSourceStrictness
                                                                                                                                        'GHC.Generics.DecidedLazy)
                                                                                                                                     (GHC.Generics.K1
                                                                                                                                        GHC.Generics.R
                                                                                                                                        (Language.PureScript.Names.ProperName
                                                                                                                                           'Language.PureScript.Names.KindName)))))>_R) <x>_N) of wild {
                   GHC.Generics.L1 ds1
                   -> case ds1 of wild1 {
                        GHC.Generics.L1 ds2
                        -> case ds2 of wild2 {
                             GHC.Generics.L1 ds3
                             -> Language.PureScript.Names.IdentName
                                  ds3
                                    `cast`
                                  ((GHC.Generics.N:M1[0]
                                        <*>_N
                                        <GHC.Generics.C>_P
                                        <'GHC.Generics.MetaCons
                                           "IdentName" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                        <GHC.Generics.M1
                                           GHC.Generics.S
                                           ('GHC.Generics.MetaSel
                                              'GHC.Base.Nothing
                                              'GHC.Generics.NoSourceUnpackedness
                                              'GHC.Generics.NoSourceStrictness
                                              'GHC.Generics.DecidedLazy)
                                           (GHC.Generics.K1
                                              GHC.Generics.R
                                              Language.PureScript.Names.Ident)>_R ; GHC.Generics.N:M1[0]
                                                                                        <*>_N
                                                                                        <GHC.Generics.S>_P
                                                                                        <'GHC.Generics.MetaSel
                                                                                           'GHC.Base.Nothing
                                                                                           'GHC.Generics.NoSourceUnpackedness
                                                                                           'GHC.Generics.NoSourceStrictness
                                                                                           'GHC.Generics.DecidedLazy>_P
                                                                                        <GHC.Generics.K1
                                                                                           GHC.Generics.R
                                                                                           Language.PureScript.Names.Ident>_R) <x>_N ; GHC.Generics.N:K1[0]
                                                                                                                                           <*>_N
                                                                                                                                           <GHC.Generics.R>_P
                                                                                                                                           <Language.PureScript.Names.Ident>_R
                                                                                                                                           <x>_P)
                             GHC.Generics.R1 ds3
                             -> Language.PureScript.Names.ValOpName
                                  ds3
                                    `cast`
                                  ((GHC.Generics.N:M1[0]
                                        <*>_N
                                        <GHC.Generics.C>_P
                                        <'GHC.Generics.MetaCons
                                           "ValOpName" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                        <GHC.Generics.M1
                                           GHC.Generics.S
                                           ('GHC.Generics.MetaSel
                                              'GHC.Base.Nothing
                                              'GHC.Generics.NoSourceUnpackedness
                                              'GHC.Generics.NoSourceStrictness
                                              'GHC.Generics.DecidedLazy)
                                           (GHC.Generics.K1
                                              GHC.Generics.R
                                              (Language.PureScript.Names.OpName
                                                 'Language.PureScript.Names.ValueOpName))>_R ; GHC.Generics.N:M1[0]
                                                                                                   <*>_N
                                                                                                   <GHC.Generics.S>_P
                                                                                                   <'GHC.Generics.MetaSel
                                                                                                      'GHC.Base.Nothing
                                                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                                                      'GHC.Generics.NoSourceStrictness
                                                                                                      'GHC.Generics.DecidedLazy>_P
                                                                                                   <GHC.Generics.K1
                                                                                                      GHC.Generics.R
                                                                                                      (Language.PureScript.Names.OpName
                                                                                                         'Language.PureScript.Names.ValueOpName)>_R) <x>_N ; GHC.Generics.N:K1[0]
                                                                                                                                                                 <*>_N
                                                                                                                                                                 <GHC.Generics.R>_P
                                                                                                                                                                 <Language.PureScript.Names.OpName
                                                                                                                                                                    'Language.PureScript.Names.ValueOpName>_R
                                                                                                                                                                 <x>_P) }
                        GHC.Generics.R1 ds2
                        -> case ds2 of wild2 {
                             GHC.Generics.L1 ds3
                             -> Language.PureScript.Names.TyName
                                  ds3
                                    `cast`
                                  ((GHC.Generics.N:M1[0]
                                        <*>_N
                                        <GHC.Generics.C>_P
                                        <'GHC.Generics.MetaCons
                                           "TyName" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                        <GHC.Generics.M1
                                           GHC.Generics.S
                                           ('GHC.Generics.MetaSel
                                              'GHC.Base.Nothing
                                              'GHC.Generics.NoSourceUnpackedness
                                              'GHC.Generics.NoSourceStrictness
                                              'GHC.Generics.DecidedLazy)
                                           (GHC.Generics.K1
                                              GHC.Generics.R
                                              (Language.PureScript.Names.ProperName
                                                 'Language.PureScript.Names.TypeName))>_R ; GHC.Generics.N:M1[0]
                                                                                                <*>_N
                                                                                                <GHC.Generics.S>_P
                                                                                                <'GHC.Generics.MetaSel
                                                                                                   'GHC.Base.Nothing
                                                                                                   'GHC.Generics.NoSourceUnpackedness
                                                                                                   'GHC.Generics.NoSourceStrictness
                                                                                                   'GHC.Generics.DecidedLazy>_P
                                                                                                <GHC.Generics.K1
                                                                                                   GHC.Generics.R
                                                                                                   (Language.PureScript.Names.ProperName
                                                                                                      'Language.PureScript.Names.TypeName)>_R) <x>_N ; GHC.Generics.N:K1[0]
                                                                                                                                                           <*>_N
                                                                                                                                                           <GHC.Generics.R>_P
                                                                                                                                                           <Language.PureScript.Names.ProperName
                                                                                                                                                              'Language.PureScript.Names.TypeName>_R
                                                                                                                                                           <x>_P)
                             GHC.Generics.R1 ds3
                             -> Language.PureScript.Names.TyOpName
                                  ds3
                                    `cast`
                                  ((GHC.Generics.N:M1[0]
                                        <*>_N
                                        <GHC.Generics.C>_P
                                        <'GHC.Generics.MetaCons
                                           "TyOpName" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                        <GHC.Generics.M1
                                           GHC.Generics.S
                                           ('GHC.Generics.MetaSel
                                              'GHC.Base.Nothing
                                              'GHC.Generics.NoSourceUnpackedness
                                              'GHC.Generics.NoSourceStrictness
                                              'GHC.Generics.DecidedLazy)
                                           (GHC.Generics.K1
                                              GHC.Generics.R
                                              (Language.PureScript.Names.OpName
                                                 'Language.PureScript.Names.TypeOpName))>_R ; GHC.Generics.N:M1[0]
                                                                                                  <*>_N
                                                                                                  <GHC.Generics.S>_P
                                                                                                  <'GHC.Generics.MetaSel
                                                                                                     'GHC.Base.Nothing
                                                                                                     'GHC.Generics.NoSourceUnpackedness
                                                                                                     'GHC.Generics.NoSourceStrictness
                                                                                                     'GHC.Generics.DecidedLazy>_P
                                                                                                  <GHC.Generics.K1
                                                                                                     GHC.Generics.R
                                                                                                     (Language.PureScript.Names.OpName
                                                                                                        'Language.PureScript.Names.TypeOpName)>_R) <x>_N ; GHC.Generics.N:K1[0]
                                                                                                                                                               <*>_N
                                                                                                                                                               <GHC.Generics.R>_P
                                                                                                                                                               <Language.PureScript.Names.OpName
                                                                                                                                                                  'Language.PureScript.Names.TypeOpName>_R
                                                                                                                                                               <x>_P) } }
                   GHC.Generics.R1 ds1
                   -> case ds1 of wild1 {
                        GHC.Generics.L1 ds2
                        -> case ds2 of wild2 {
                             GHC.Generics.L1 ds3
                             -> Language.PureScript.Names.DctorName
                                  ds3
                                    `cast`
                                  ((GHC.Generics.N:M1[0]
                                        <*>_N
                                        <GHC.Generics.C>_P
                                        <'GHC.Generics.MetaCons
                                           "DctorName" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                        <GHC.Generics.M1
                                           GHC.Generics.S
                                           ('GHC.Generics.MetaSel
                                              'GHC.Base.Nothing
                                              'GHC.Generics.NoSourceUnpackedness
                                              'GHC.Generics.NoSourceStrictness
                                              'GHC.Generics.DecidedLazy)
                                           (GHC.Generics.K1
                                              GHC.Generics.R
                                              (Language.PureScript.Names.ProperName
                                                 'Language.PureScript.Names.ConstructorName))>_R ; GHC.Generics.N:M1[0]
                                                                                                       <*>_N
                                                                                                       <GHC.Generics.S>_P
                                                                                                       <'GHC.Generics.MetaSel
                                                                                                          'GHC.Base.Nothing
                                                                                                          'GHC.Generics.NoSourceUnpackedness
                                                                                                          'GHC.Generics.NoSourceStrictness
                                                                                                          'GHC.Generics.DecidedLazy>_P
                                                                                                       <GHC.Generics.K1
                                                                                                          GHC.Generics.R
                                                                                                          (Language.PureScript.Names.ProperName
                                                                                                             'Language.PureScript.Names.ConstructorName)>_R) <x>_N ; GHC.Generics.N:K1[0]
                                                                                                                                                                         <*>_N
                                                                                                                                                                         <GHC.Generics.R>_P
                                                                                                                                                                         <Language.PureScript.Names.ProperName
                                                                                                                                                                            'Language.PureScript.Names.ConstructorName>_R
                                                                                                                                                                         <x>_P)
                             GHC.Generics.R1 ds3
                             -> Language.PureScript.Names.TyClassName
                                  ds3
                                    `cast`
                                  ((GHC.Generics.N:M1[0]
                                        <*>_N
                                        <GHC.Generics.C>_P
                                        <'GHC.Generics.MetaCons
                                           "TyClassName" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                        <GHC.Generics.M1
                                           GHC.Generics.S
                                           ('GHC.Generics.MetaSel
                                              'GHC.Base.Nothing
                                              'GHC.Generics.NoSourceUnpackedness
                                              'GHC.Generics.NoSourceStrictness
                                              'GHC.Generics.DecidedLazy)
                                           (GHC.Generics.K1
                                              GHC.Generics.R
                                              (Language.PureScript.Names.ProperName
                                                 'Language.PureScript.Names.ClassName))>_R ; GHC.Generics.N:M1[0]
                                                                                                 <*>_N
                                                                                                 <GHC.Generics.S>_P
                                                                                                 <'GHC.Generics.MetaSel
                                                                                                    'GHC.Base.Nothing
                                                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                                                    'GHC.Generics.NoSourceStrictness
                                                                                                    'GHC.Generics.DecidedLazy>_P
                                                                                                 <GHC.Generics.K1
                                                                                                    GHC.Generics.R
                                                                                                    (Language.PureScript.Names.ProperName
                                                                                                       'Language.PureScript.Names.ClassName)>_R) <x>_N ; GHC.Generics.N:K1[0]
                                                                                                                                                             <*>_N
                                                                                                                                                             <GHC.Generics.R>_P
                                                                                                                                                             <Language.PureScript.Names.ProperName
                                                                                                                                                                'Language.PureScript.Names.ClassName>_R
                                                                                                                                                             <x>_P) }
                        GHC.Generics.R1 ds2
                        -> case ds2 of wild2 {
                             GHC.Generics.L1 ds3
                             -> Language.PureScript.Names.ModName
                                  ds3
                                    `cast`
                                  ((GHC.Generics.N:M1[0]
                                        <*>_N
                                        <GHC.Generics.C>_P
                                        <'GHC.Generics.MetaCons
                                           "ModName" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                        <GHC.Generics.M1
                                           GHC.Generics.S
                                           ('GHC.Generics.MetaSel
                                              'GHC.Base.Nothing
                                              'GHC.Generics.NoSourceUnpackedness
                                              'GHC.Generics.NoSourceStrictness
                                              'GHC.Generics.DecidedLazy)
                                           (GHC.Generics.K1
                                              GHC.Generics.R
                                              Language.PureScript.Names.ModuleName)>_R ; GHC.Generics.N:M1[0]
                                                                                             <*>_N
                                                                                             <GHC.Generics.S>_P
                                                                                             <'GHC.Generics.MetaSel
                                                                                                'GHC.Base.Nothing
                                                                                                'GHC.Generics.NoSourceUnpackedness
                                                                                                'GHC.Generics.NoSourceStrictness
                                                                                                'GHC.Generics.DecidedLazy>_P
                                                                                             <GHC.Generics.K1
                                                                                                GHC.Generics.R
                                                                                                Language.PureScript.Names.ModuleName>_R) <x>_N ; GHC.Generics.N:K1[0]
                                                                                                                                                     <*>_N
                                                                                                                                                     <GHC.Generics.R>_P
                                                                                                                                                     <Language.PureScript.Names.ModuleName>_R
                                                                                                                                                     <x>_P)
                             GHC.Generics.R1 ds3
                             -> Language.PureScript.Names.KiName
                                  ds3
                                    `cast`
                                  ((GHC.Generics.N:M1[0]
                                        <*>_N
                                        <GHC.Generics.C>_P
                                        <'GHC.Generics.MetaCons
                                           "KiName" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                        <GHC.Generics.M1
                                           GHC.Generics.S
                                           ('GHC.Generics.MetaSel
                                              'GHC.Base.Nothing
                                              'GHC.Generics.NoSourceUnpackedness
                                              'GHC.Generics.NoSourceStrictness
                                              'GHC.Generics.DecidedLazy)
                                           (GHC.Generics.K1
                                              GHC.Generics.R
                                              (Language.PureScript.Names.ProperName
                                                 'Language.PureScript.Names.KindName))>_R ; GHC.Generics.N:M1[0]
                                                                                                <*>_N
                                                                                                <GHC.Generics.S>_P
                                                                                                <'GHC.Generics.MetaSel
                                                                                                   'GHC.Base.Nothing
                                                                                                   'GHC.Generics.NoSourceUnpackedness
                                                                                                   'GHC.Generics.NoSourceStrictness
                                                                                                   'GHC.Generics.DecidedLazy>_P
                                                                                                <GHC.Generics.K1
                                                                                                   GHC.Generics.R
                                                                                                   (Language.PureScript.Names.ProperName
                                                                                                      'Language.PureScript.Names.KindName)>_R) <x>_N ; GHC.Generics.N:K1[0]
                                                                                                                                                           <*>_N
                                                                                                                                                           <GHC.Generics.R>_P
                                                                                                                                                           <Language.PureScript.Names.ProperName
                                                                                                                                                              'Language.PureScript.Names.KindName>_R
                                                                                                                                                           <x>_P) } } }) -}
1522672b880b192c6e05e6cf8a45712d
  $fGenericOpName ::
    GHC.Generics.Generic (Language.PureScript.Names.OpName a)
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ a :: Language.PureScript.Names.OpNameType.
                  @ (Language.PureScript.Names.OpName a)
                  (Language.PureScript.Names.$fGenericOpName2 @ a)
                    `cast`
                  (forall (x :: <*>_N).
                   <Language.PureScript.Names.OpName a>_R
                   ->_R Language.PureScript.Names.N:OpName[0]
                            <a>_P ; (Sym (GHC.Generics.N:K1[0]
                                              <*>_N
                                              <GHC.Generics.R>_P
                                              <Data.Text.Internal.Text>_R
                                              <x>_P) ; (Sym (GHC.Generics.N:M1[0]
                                                                 <*>_N
                                                                 <GHC.Generics.S>_P
                                                                 <'GHC.Generics.MetaSel
                                                                    ('GHC.Base.Just "runOpName")
                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                    'GHC.Generics.NoSourceStrictness
                                                                    'GHC.Generics.DecidedLazy>_P
                                                                 <GHC.Generics.K1
                                                                    GHC.Generics.R
                                                                    Data.Text.Internal.Text>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                                                            <*>_N
                                                                                                            <GHC.Generics.C>_P
                                                                                                            <'GHC.Generics.MetaCons
                                                                                                               "OpName"
                                                                                                               'GHC.Generics.PrefixI
                                                                                                               'GHC.Types.True>_P
                                                                                                            <GHC.Generics.M1
                                                                                                               GHC.Generics.S
                                                                                                               ('GHC.Generics.MetaSel
                                                                                                                  ('GHC.Base.Just
                                                                                                                     "runOpName")
                                                                                                                  'GHC.Generics.NoSourceUnpackedness
                                                                                                                  'GHC.Generics.NoSourceStrictness
                                                                                                                  'GHC.Generics.DecidedLazy)
                                                                                                               (GHC.Generics.K1
                                                                                                                  GHC.Generics.R
                                                                                                                  Data.Text.Internal.Text)>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                                                                                                           <*>_N
                                                                                                                                                           <GHC.Generics.D>_P
                                                                                                                                                           <'GHC.Generics.MetaData
                                                                                                                                                              "OpName"
                                                                                                                                                              "Language.PureScript.Names"
                                                                                                                                                              "purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"
                                                                                                                                                              'GHC.Types.True>_P
                                                                                                                                                           <GHC.Generics.M1
                                                                                                                                                              GHC.Generics.C
                                                                                                                                                              ('GHC.Generics.MetaCons
                                                                                                                                                                 "OpName"
                                                                                                                                                                 'GHC.Generics.PrefixI
                                                                                                                                                                 'GHC.Types.True)
                                                                                                                                                              (GHC.Generics.M1
                                                                                                                                                                 GHC.Generics.S
                                                                                                                                                                 ('GHC.Generics.MetaSel
                                                                                                                                                                    ('GHC.Base.Just
                                                                                                                                                                       "runOpName")
                                                                                                                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                    'GHC.Generics.NoSourceStrictness
                                                                                                                                                                    'GHC.Generics.DecidedLazy)
                                                                                                                                                                 (GHC.Generics.K1
                                                                                                                                                                    GHC.Generics.R
                                                                                                                                                                    Data.Text.Internal.Text))>_R) ; Sub (Sym (Language.PureScript.Names.Rep_OpName[0]
                                                                                                                                                                                                                  <a>_N))))) <x>_N))
                  (Language.PureScript.Names.$fGenericOpName1 @ a)
                    `cast`
                  (forall (x :: <*>_N).
                   <GHC.Generics.Rep (Language.PureScript.Names.OpName a) x>_R
                   ->_R (Sub (Language.PureScript.Names.Rep_OpName[0]
                                  <a>_N) ; (GHC.Generics.N:M1[0]
                                                <*>_N
                                                <GHC.Generics.D>_P
                                                <'GHC.Generics.MetaData
                                                   "OpName"
                                                   "Language.PureScript.Names"
                                                   "purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"
                                                   'GHC.Types.True>_P
                                                <GHC.Generics.M1
                                                   GHC.Generics.C
                                                   ('GHC.Generics.MetaCons
                                                      "OpName"
                                                      'GHC.Generics.PrefixI
                                                      'GHC.Types.True)
                                                   (GHC.Generics.M1
                                                      GHC.Generics.S
                                                      ('GHC.Generics.MetaSel
                                                         ('GHC.Base.Just "runOpName")
                                                         'GHC.Generics.NoSourceUnpackedness
                                                         'GHC.Generics.NoSourceStrictness
                                                         'GHC.Generics.DecidedLazy)
                                                      (GHC.Generics.K1
                                                         GHC.Generics.R
                                                         Data.Text.Internal.Text))>_R ; (GHC.Generics.N:M1[0]
                                                                                             <*>_N
                                                                                             <GHC.Generics.C>_P
                                                                                             <'GHC.Generics.MetaCons
                                                                                                "OpName"
                                                                                                'GHC.Generics.PrefixI
                                                                                                'GHC.Types.True>_P
                                                                                             <GHC.Generics.M1
                                                                                                GHC.Generics.S
                                                                                                ('GHC.Generics.MetaSel
                                                                                                   ('GHC.Base.Just
                                                                                                      "runOpName")
                                                                                                   'GHC.Generics.NoSourceUnpackedness
                                                                                                   'GHC.Generics.NoSourceStrictness
                                                                                                   'GHC.Generics.DecidedLazy)
                                                                                                (GHC.Generics.K1
                                                                                                   GHC.Generics.R
                                                                                                   Data.Text.Internal.Text)>_R ; GHC.Generics.N:M1[0]
                                                                                                                                     <*>_N
                                                                                                                                     <GHC.Generics.S>_P
                                                                                                                                     <'GHC.Generics.MetaSel
                                                                                                                                        ('GHC.Base.Just
                                                                                                                                           "runOpName")
                                                                                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                                                                                        'GHC.Generics.NoSourceStrictness
                                                                                                                                        'GHC.Generics.DecidedLazy>_P
                                                                                                                                     <GHC.Generics.K1
                                                                                                                                        GHC.Generics.R
                                                                                                                                        Data.Text.Internal.Text>_R))) <x>_N ; (GHC.Generics.N:K1[0]
                                                                                                                                                                                   <*>_N
                                                                                                                                                                                   <GHC.Generics.R>_P
                                                                                                                                                                                   <Data.Text.Internal.Text>_R
                                                                                                                                                                                   <x>_P ; Sym (Language.PureScript.Names.N:OpName[0]
                                                                                                                                                                                                    <a>_P))) -}
1522672b880b192c6e05e6cf8a45712d
  $fGenericOpName1 ::
    GHC.Generics.Rep (Language.PureScript.Names.OpName a) x
    -> GHC.Generics.Rep (Language.PureScript.Names.OpName a) x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U)>m,
     Unfolding: InlineRule (1, True, True)
                (\ @ a :: Language.PureScript.Names.OpNameType
                   @ x
                   (ds :: GHC.Generics.Rep (Language.PureScript.Names.OpName a) x) ->
                 ds) -}
1522672b880b192c6e05e6cf8a45712d
  $fGenericOpName2 ::
    Language.PureScript.Names.OpName a
    -> Language.PureScript.Names.OpName a
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U)>m,
     Unfolding: InlineRule (1, True, True)
                (\ @ a :: Language.PureScript.Names.OpNameType
                   @ x
                   (x1 :: Language.PureScript.Names.OpName a) ->
                 x1) -}
29f101e190cc99df85623423972e606f
  $fGenericProperName ::
    GHC.Generics.Generic (Language.PureScript.Names.ProperName a)
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ a :: Language.PureScript.Names.ProperNameType.
                  @ (Language.PureScript.Names.ProperName a)
                  (Language.PureScript.Names.$fGenericProperName2 @ a)
                    `cast`
                  (forall (x :: <*>_N).
                   <Language.PureScript.Names.ProperName a>_R
                   ->_R Language.PureScript.Names.N:ProperName[0]
                            <a>_P ; (Sym (GHC.Generics.N:K1[0]
                                              <*>_N
                                              <GHC.Generics.R>_P
                                              <Data.Text.Internal.Text>_R
                                              <x>_P) ; (Sym (GHC.Generics.N:M1[0]
                                                                 <*>_N
                                                                 <GHC.Generics.S>_P
                                                                 <'GHC.Generics.MetaSel
                                                                    ('GHC.Base.Just "runProperName")
                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                    'GHC.Generics.NoSourceStrictness
                                                                    'GHC.Generics.DecidedLazy>_P
                                                                 <GHC.Generics.K1
                                                                    GHC.Generics.R
                                                                    Data.Text.Internal.Text>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                                                            <*>_N
                                                                                                            <GHC.Generics.C>_P
                                                                                                            <'GHC.Generics.MetaCons
                                                                                                               "ProperName"
                                                                                                               'GHC.Generics.PrefixI
                                                                                                               'GHC.Types.True>_P
                                                                                                            <GHC.Generics.M1
                                                                                                               GHC.Generics.S
                                                                                                               ('GHC.Generics.MetaSel
                                                                                                                  ('GHC.Base.Just
                                                                                                                     "runProperName")
                                                                                                                  'GHC.Generics.NoSourceUnpackedness
                                                                                                                  'GHC.Generics.NoSourceStrictness
                                                                                                                  'GHC.Generics.DecidedLazy)
                                                                                                               (GHC.Generics.K1
                                                                                                                  GHC.Generics.R
                                                                                                                  Data.Text.Internal.Text)>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                                                                                                           <*>_N
                                                                                                                                                           <GHC.Generics.D>_P
                                                                                                                                                           <'GHC.Generics.MetaData
                                                                                                                                                              "ProperName"
                                                                                                                                                              "Language.PureScript.Names"
                                                                                                                                                              "purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"
                                                                                                                                                              'GHC.Types.True>_P
                                                                                                                                                           <GHC.Generics.M1
                                                                                                                                                              GHC.Generics.C
                                                                                                                                                              ('GHC.Generics.MetaCons
                                                                                                                                                                 "ProperName"
                                                                                                                                                                 'GHC.Generics.PrefixI
                                                                                                                                                                 'GHC.Types.True)
                                                                                                                                                              (GHC.Generics.M1
                                                                                                                                                                 GHC.Generics.S
                                                                                                                                                                 ('GHC.Generics.MetaSel
                                                                                                                                                                    ('GHC.Base.Just
                                                                                                                                                                       "runProperName")
                                                                                                                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                    'GHC.Generics.NoSourceStrictness
                                                                                                                                                                    'GHC.Generics.DecidedLazy)
                                                                                                                                                                 (GHC.Generics.K1
                                                                                                                                                                    GHC.Generics.R
                                                                                                                                                                    Data.Text.Internal.Text))>_R) ; Sub (Sym (Language.PureScript.Names.Rep_ProperName[0]
                                                                                                                                                                                                                  <a>_N))))) <x>_N))
                  (Language.PureScript.Names.$fGenericProperName1 @ a)
                    `cast`
                  (forall (x :: <*>_N).
                   <GHC.Generics.Rep (Language.PureScript.Names.ProperName a) x>_R
                   ->_R (Sub (Language.PureScript.Names.Rep_ProperName[0]
                                  <a>_N) ; (GHC.Generics.N:M1[0]
                                                <*>_N
                                                <GHC.Generics.D>_P
                                                <'GHC.Generics.MetaData
                                                   "ProperName"
                                                   "Language.PureScript.Names"
                                                   "purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"
                                                   'GHC.Types.True>_P
                                                <GHC.Generics.M1
                                                   GHC.Generics.C
                                                   ('GHC.Generics.MetaCons
                                                      "ProperName"
                                                      'GHC.Generics.PrefixI
                                                      'GHC.Types.True)
                                                   (GHC.Generics.M1
                                                      GHC.Generics.S
                                                      ('GHC.Generics.MetaSel
                                                         ('GHC.Base.Just "runProperName")
                                                         'GHC.Generics.NoSourceUnpackedness
                                                         'GHC.Generics.NoSourceStrictness
                                                         'GHC.Generics.DecidedLazy)
                                                      (GHC.Generics.K1
                                                         GHC.Generics.R
                                                         Data.Text.Internal.Text))>_R ; (GHC.Generics.N:M1[0]
                                                                                             <*>_N
                                                                                             <GHC.Generics.C>_P
                                                                                             <'GHC.Generics.MetaCons
                                                                                                "ProperName"
                                                                                                'GHC.Generics.PrefixI
                                                                                                'GHC.Types.True>_P
                                                                                             <GHC.Generics.M1
                                                                                                GHC.Generics.S
                                                                                                ('GHC.Generics.MetaSel
                                                                                                   ('GHC.Base.Just
                                                                                                      "runProperName")
                                                                                                   'GHC.Generics.NoSourceUnpackedness
                                                                                                   'GHC.Generics.NoSourceStrictness
                                                                                                   'GHC.Generics.DecidedLazy)
                                                                                                (GHC.Generics.K1
                                                                                                   GHC.Generics.R
                                                                                                   Data.Text.Internal.Text)>_R ; GHC.Generics.N:M1[0]
                                                                                                                                     <*>_N
                                                                                                                                     <GHC.Generics.S>_P
                                                                                                                                     <'GHC.Generics.MetaSel
                                                                                                                                        ('GHC.Base.Just
                                                                                                                                           "runProperName")
                                                                                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                                                                                        'GHC.Generics.NoSourceStrictness
                                                                                                                                        'GHC.Generics.DecidedLazy>_P
                                                                                                                                     <GHC.Generics.K1
                                                                                                                                        GHC.Generics.R
                                                                                                                                        Data.Text.Internal.Text>_R))) <x>_N ; (GHC.Generics.N:K1[0]
                                                                                                                                                                                   <*>_N
                                                                                                                                                                                   <GHC.Generics.R>_P
                                                                                                                                                                                   <Data.Text.Internal.Text>_R
                                                                                                                                                                                   <x>_P ; Sym (Language.PureScript.Names.N:ProperName[0]
                                                                                                                                                                                                    <a>_P))) -}
29f101e190cc99df85623423972e606f
  $fGenericProperName1 ::
    GHC.Generics.Rep (Language.PureScript.Names.ProperName a) x
    -> GHC.Generics.Rep (Language.PureScript.Names.ProperName a) x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U)>m,
     Unfolding: InlineRule (1, True, True)
                (\ @ a :: Language.PureScript.Names.ProperNameType
                   @ x
                   (ds :: GHC.Generics.Rep
                            (Language.PureScript.Names.ProperName a) x) ->
                 ds) -}
29f101e190cc99df85623423972e606f
  $fGenericProperName2 ::
    Language.PureScript.Names.ProperName a
    -> Language.PureScript.Names.ProperName a
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U)>m,
     Unfolding: InlineRule (1, True, True)
                (\ @ a :: Language.PureScript.Names.ProperNameType
                   @ x
                   (x1 :: Language.PureScript.Names.ProperName a) ->
                 x1) -}
5a70062bbdf29e6dc659ad8bf5326b50
  $fGenericQualified ::
    GHC.Generics.Generic (Language.PureScript.Names.Qualified a)
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ a.
                  @ (Language.PureScript.Names.Qualified a)
                  (Language.PureScript.Names.$fGenericQualified1 @ a)
                    `cast`
                  (forall (x :: <*>_N).
                   <Language.PureScript.Names.Qualified a>_R
                   ->_R (Sym (GHC.Generics.N:M1[0]
                                  <*>_N
                                  <GHC.Generics.D>_P
                                  <'GHC.Generics.MetaData
                                     "Qualified"
                                     "Language.PureScript.Names"
                                     "purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"
                                     'GHC.Types.False>_P
                                  <GHC.Generics.M1
                                     GHC.Generics.C
                                     ('GHC.Generics.MetaCons
                                        "Qualified" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                     (GHC.Generics.M1
                                        GHC.Generics.S
                                        ('GHC.Generics.MetaSel
                                           'GHC.Base.Nothing
                                           'GHC.Generics.NoSourceUnpackedness
                                           'GHC.Generics.NoSourceStrictness
                                           'GHC.Generics.DecidedLazy)
                                        (GHC.Generics.K1
                                           GHC.Generics.R
                                           (GHC.Base.Maybe Language.PureScript.Names.ModuleName))
                                      GHC.Generics.:*: GHC.Generics.M1
                                                         GHC.Generics.S
                                                         ('GHC.Generics.MetaSel
                                                            'GHC.Base.Nothing
                                                            'GHC.Generics.NoSourceUnpackedness
                                                            'GHC.Generics.NoSourceStrictness
                                                            'GHC.Generics.DecidedLazy)
                                                         (GHC.Generics.K1
                                                            GHC.Generics.R
                                                            a))>_R) ; Sub (Sym (Language.PureScript.Names.Rep_Qualified[0]
                                                                                    <a>_N))) <x>_N)
                  (Language.PureScript.Names.$fGenericQualified_$cto @ a) -}
5a70062bbdf29e6dc659ad8bf5326b50
  $fGenericQualified1 ::
    Language.PureScript.Names.Qualified a
    -> GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Qualified" 'GHC.Generics.PrefixI 'GHC.Types.False)
         (GHC.Generics.M1
            GHC.Generics.S
            ('GHC.Generics.MetaSel
               'GHC.Base.Nothing
               'GHC.Generics.NoSourceUnpackedness
               'GHC.Generics.NoSourceStrictness
               'GHC.Generics.DecidedLazy)
            (GHC.Generics.K1
               GHC.Generics.R
               (GHC.Base.Maybe Language.PureScript.Names.ModuleName))
          GHC.Generics.:*: GHC.Generics.M1
                             GHC.Generics.S
                             ('GHC.Generics.MetaSel
                                'GHC.Base.Nothing
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy)
                             (GHC.Generics.K1 GHC.Generics.R a))
         x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ a @ x (x1 :: Language.PureScript.Names.Qualified a) ->
                 case x1 of wild { Language.PureScript.Names.Qualified g1 g2 ->
                 (GHC.Generics.:*:
                    @ *
                    @ (GHC.Generics.M1
                         GHC.Generics.S
                         ('GHC.Generics.MetaSel
                            'GHC.Base.Nothing
                            'GHC.Generics.NoSourceUnpackedness
                            'GHC.Generics.NoSourceStrictness
                            'GHC.Generics.DecidedLazy)
                         (GHC.Generics.K1
                            GHC.Generics.R
                            (GHC.Base.Maybe Language.PureScript.Names.ModuleName)))
                    @ (GHC.Generics.M1
                         GHC.Generics.S
                         ('GHC.Generics.MetaSel
                            'GHC.Base.Nothing
                            'GHC.Generics.NoSourceUnpackedness
                            'GHC.Generics.NoSourceStrictness
                            'GHC.Generics.DecidedLazy)
                         (GHC.Generics.K1 GHC.Generics.R a))
                    @ x
                    g1
                      `cast`
                    (Sym (GHC.Generics.N:K1[0]
                              <*>_N
                              <GHC.Generics.R>_P
                              <GHC.Base.Maybe Language.PureScript.Names.ModuleName>_R
                              <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                <*>_N
                                                <GHC.Generics.S>_P
                                                <'GHC.Generics.MetaSel
                                                   'GHC.Base.Nothing
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy>_P
                                                <GHC.Generics.K1
                                                   GHC.Generics.R
                                                   (GHC.Base.Maybe
                                                      Language.PureScript.Names.ModuleName)>_R) <x>_N)
                    g2
                      `cast`
                    (Sym (GHC.Generics.N:K1[0]
                              <*>_N <GHC.Generics.R>_P <a>_R <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                                               <*>_N
                                                                               <GHC.Generics.S>_P
                                                                               <'GHC.Generics.MetaSel
                                                                                  'GHC.Base.Nothing
                                                                                  'GHC.Generics.NoSourceUnpackedness
                                                                                  'GHC.Generics.NoSourceStrictness
                                                                                  'GHC.Generics.DecidedLazy>_P
                                                                               <GHC.Generics.K1
                                                                                  GHC.Generics.R
                                                                                  a>_R) <x>_N))
                   `cast`
                 (Sym (GHC.Generics.N:M1[0]
                           <*>_N
                           <GHC.Generics.C>_P
                           <'GHC.Generics.MetaCons
                              "Qualified" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                           <GHC.Generics.M1
                              GHC.Generics.S
                              ('GHC.Generics.MetaSel
                                 'GHC.Base.Nothing
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (GHC.Generics.K1
                                 GHC.Generics.R
                                 (GHC.Base.Maybe Language.PureScript.Names.ModuleName))
                            GHC.Generics.:*: GHC.Generics.M1
                                               GHC.Generics.S
                                               ('GHC.Generics.MetaSel
                                                  'GHC.Base.Nothing
                                                  'GHC.Generics.NoSourceUnpackedness
                                                  'GHC.Generics.NoSourceStrictness
                                                  'GHC.Generics.DecidedLazy)
                                               (GHC.Generics.K1 GHC.Generics.R a)>_R) <x>_N) }) -}
5a70062bbdf29e6dc659ad8bf5326b50
  $fGenericQualified_$cto ::
    GHC.Generics.Rep (Language.PureScript.Names.Qualified a) x
    -> Language.PureScript.Names.Qualified a
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ a
                   @ x
                   (ds :: GHC.Generics.Rep
                            (Language.PureScript.Names.Qualified a) x) ->
                 case ds
                        `cast`
                      ((Sub (Language.PureScript.Names.Rep_Qualified[0]
                                 <a>_N) ; (GHC.Generics.N:M1[0]
                                               <*>_N
                                               <GHC.Generics.D>_P
                                               <'GHC.Generics.MetaData
                                                  "Qualified"
                                                  "Language.PureScript.Names"
                                                  "purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"
                                                  'GHC.Types.False>_P
                                               <GHC.Generics.M1
                                                  GHC.Generics.C
                                                  ('GHC.Generics.MetaCons
                                                     "Qualified"
                                                     'GHC.Generics.PrefixI
                                                     'GHC.Types.False)
                                                  (GHC.Generics.M1
                                                     GHC.Generics.S
                                                     ('GHC.Generics.MetaSel
                                                        'GHC.Base.Nothing
                                                        'GHC.Generics.NoSourceUnpackedness
                                                        'GHC.Generics.NoSourceStrictness
                                                        'GHC.Generics.DecidedLazy)
                                                     (GHC.Generics.K1
                                                        GHC.Generics.R
                                                        (GHC.Base.Maybe
                                                           Language.PureScript.Names.ModuleName))
                                                   GHC.Generics.:*: GHC.Generics.M1
                                                                      GHC.Generics.S
                                                                      ('GHC.Generics.MetaSel
                                                                         'GHC.Base.Nothing
                                                                         'GHC.Generics.NoSourceUnpackedness
                                                                         'GHC.Generics.NoSourceStrictness
                                                                         'GHC.Generics.DecidedLazy)
                                                                      (GHC.Generics.K1
                                                                         GHC.Generics.R
                                                                         a))>_R ; GHC.Generics.N:M1[0]
                                                                                      <*>_N
                                                                                      <GHC.Generics.C>_P
                                                                                      <'GHC.Generics.MetaCons
                                                                                         "Qualified"
                                                                                         'GHC.Generics.PrefixI
                                                                                         'GHC.Types.False>_P
                                                                                      <GHC.Generics.M1
                                                                                         GHC.Generics.S
                                                                                         ('GHC.Generics.MetaSel
                                                                                            'GHC.Base.Nothing
                                                                                            'GHC.Generics.NoSourceUnpackedness
                                                                                            'GHC.Generics.NoSourceStrictness
                                                                                            'GHC.Generics.DecidedLazy)
                                                                                         (GHC.Generics.K1
                                                                                            GHC.Generics.R
                                                                                            (GHC.Base.Maybe
                                                                                               Language.PureScript.Names.ModuleName))
                                                                                       GHC.Generics.:*: GHC.Generics.M1
                                                                                                          GHC.Generics.S
                                                                                                          ('GHC.Generics.MetaSel
                                                                                                             'GHC.Base.Nothing
                                                                                                             'GHC.Generics.NoSourceUnpackedness
                                                                                                             'GHC.Generics.NoSourceStrictness
                                                                                                             'GHC.Generics.DecidedLazy)
                                                                                                          (GHC.Generics.K1
                                                                                                             GHC.Generics.R
                                                                                                             a)>_R)) <x>_N) of wild { GHC.Generics.:*: ds1 ds2 ->
                 Language.PureScript.Names.Qualified
                   @ a
                   ds1
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           'GHC.Base.Nothing
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1
                           GHC.Generics.R
                           (GHC.Base.Maybe
                              Language.PureScript.Names.ModuleName)>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                   <*>_N
                                                                                   <GHC.Generics.R>_P
                                                                                   <GHC.Base.Maybe
                                                                                      Language.PureScript.Names.ModuleName>_R
                                                                                   <x>_P)
                   ds2
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           'GHC.Base.Nothing
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1 GHC.Generics.R a>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                         <*>_N
                                                                         <GHC.Generics.R>_P
                                                                         <a>_R
                                                                         <x>_P) }) -}
ab98a56ffa88760dad1380079e8ee35a
  $fNFDataIdent ::
    Control.DeepSeq.NFData Language.PureScript.Names.Ident
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Language.PureScript.Names.$fNFDataIdent_$crnf
                  `cast`
                (Sym (Control.DeepSeq.N:NFData[0]
                          <Language.PureScript.Names.Ident>_N)) -}
ab98a56ffa88760dad1380079e8ee35a
  $fNFDataIdent_$crnf :: Language.PureScript.Names.Ident -> ()
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (x :: Language.PureScript.Names.Ident) ->
                 case x of wild {
                   Language.PureScript.Names.Ident g1
                   -> Data.Text.$fNFDataText_$crnf g1
                   Language.PureScript.Names.GenIdent g1 g2
                   -> case g1 of wild1 {
                        GHC.Base.Nothing -> case g2 of ds1 { DEFAULT -> GHC.Tuple.() }
                        GHC.Base.Just x1
                        -> case x1 of ds1 { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                           case g2 of ds2 { DEFAULT -> GHC.Tuple.() } } }
                   Language.PureScript.Names.UnusedIdent -> GHC.Tuple.() }) -}
5a70062bbdf29e6dc659ad8bf5326b50
  $fNFDataModuleName ::
    Control.DeepSeq.NFData Language.PureScript.Names.ModuleName
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Language.PureScript.Names.$fNFDataModuleName_$crnf
                  `cast`
                (Sym (Control.DeepSeq.N:NFData[0]
                          <Language.PureScript.Names.ModuleName>_N)) -}
5a70062bbdf29e6dc659ad8bf5326b50
  $fNFDataModuleName_$crnf ::
    Language.PureScript.Names.ModuleName -> ()
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ (x :: Language.PureScript.Names.ModuleName) ->
                 Language.PureScript.Names.$fNFDataModuleName_go
                   x `cast` (Language.PureScript.Names.N:ModuleName[0])) -}
d14f5fab234d9d984f939ff58623d057
  $fNFDataModuleName_go ::
    [Language.PureScript.Names.ProperName
       'Language.PureScript.Names.Namespace]
    -> ()
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
184494d9e734645f374e2a0fce32bfac
  $fNFDataName ::
    Control.DeepSeq.NFData Language.PureScript.Names.Name
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Language.PureScript.Names.$fNFDataName_$crnf
                  `cast`
                (Sym (Control.DeepSeq.N:NFData[0]
                          <Language.PureScript.Names.Name>_N)) -}
184494d9e734645f374e2a0fce32bfac
  $fNFDataName_$crnf :: Language.PureScript.Names.Name -> ()
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (x :: Language.PureScript.Names.Name) ->
                 case x of wild {
                   Language.PureScript.Names.IdentName g1
                   -> Language.PureScript.Names.$fNFDataIdent_$crnf g1
                   Language.PureScript.Names.ValOpName g1
                   -> Data.Text.$fNFDataText_$crnf
                        g1
                          `cast`
                        (Language.PureScript.Names.N:OpName[0]
                             <'Language.PureScript.Names.ValueOpName>_P)
                   Language.PureScript.Names.TyName g1
                   -> Data.Text.$fNFDataText_$crnf
                        g1
                          `cast`
                        (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.TypeName>_P)
                   Language.PureScript.Names.TyOpName g1
                   -> Data.Text.$fNFDataText_$crnf
                        g1
                          `cast`
                        (Language.PureScript.Names.N:OpName[0]
                             <'Language.PureScript.Names.TypeOpName>_P)
                   Language.PureScript.Names.DctorName g1
                   -> Data.Text.$fNFDataText_$crnf
                        g1
                          `cast`
                        (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.ConstructorName>_P)
                   Language.PureScript.Names.TyClassName g1
                   -> Data.Text.$fNFDataText_$crnf
                        g1
                          `cast`
                        (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.ClassName>_P)
                   Language.PureScript.Names.ModName g1
                   -> Language.PureScript.Names.$fNFDataModuleName_go
                        g1 `cast` (Language.PureScript.Names.N:ModuleName[0])
                   Language.PureScript.Names.KiName g1
                   -> Data.Text.$fNFDataText_$crnf
                        g1
                          `cast`
                        (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.KindName>_P) }) -}
1522672b880b192c6e05e6cf8a45712d
  $fNFDataOpName ::
    Control.DeepSeq.NFData (Language.PureScript.Names.OpName a)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*H>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                (\ @ a :: Language.PureScript.Names.OpNameType ->
                 Data.Text.$fNFDataText_$crnf)
                  `cast`
                (forall (a :: <Language.PureScript.Names.OpNameType>_N).
                 (Sym (Language.PureScript.Names.N:OpName[0] <a>_P)
                  ->_R <()>_R) ; Sym (Control.DeepSeq.N:NFData[0]
                                          <Language.PureScript.Names.OpName a>_N)) -}
29f101e190cc99df85623423972e606f
  $fNFDataProperName ::
    Control.DeepSeq.NFData (Language.PureScript.Names.ProperName a)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*H>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                (\ @ a :: Language.PureScript.Names.ProperNameType ->
                 Data.Text.$fNFDataText_$crnf)
                  `cast`
                (forall (a :: <Language.PureScript.Names.ProperNameType>_N).
                 (Sym (Language.PureScript.Names.N:ProperName[0] <a>_P)
                  ->_R <()>_R) ; Sym (Control.DeepSeq.N:NFData[0]
                                          <Language.PureScript.Names.ProperName a>_N)) -}
5a70062bbdf29e6dc659ad8bf5326b50
  $fNFDataQualified ::
    Control.DeepSeq.NFData a =>
    Control.DeepSeq.NFData (Language.PureScript.Names.Qualified a)
  DFunId
  {- Arity: 2, HasNoCafRefs,
     Strictness: <C(S),1*C1(U())><S(SL),1*U(1*U,U)>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (1, False, True)
                Language.PureScript.Names.$fNFDataQualified_$crnf
                  `cast`
                (forall (a :: <*>_N).
                 <Control.DeepSeq.NFData a>_R
                 ->_R Sym (Control.DeepSeq.N:NFData[0]
                               <Language.PureScript.Names.Qualified a>_N)) -}
5a70062bbdf29e6dc659ad8bf5326b50
  $fNFDataQualified_$crnf ::
    Control.DeepSeq.NFData a =>
    Language.PureScript.Names.Qualified a -> ()
  {- Arity: 2, HasNoCafRefs,
     Strictness: <C(S),1*C1(U())><S(SL),1*U(1*U,U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (w :: Control.DeepSeq.NFData a)
                   (w1 :: Language.PureScript.Names.Qualified a) ->
                 case w1 of ww { Language.PureScript.Names.Qualified ww1 ww2 ->
                 Language.PureScript.Names.$w$crnf @ a w ww1 ww2 }) -}
ab98a56ffa88760dad1380079e8ee35a
  $fOrdIdent :: GHC.Classes.Ord Language.PureScript.Names.Ident
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Names.Ident
                  Language.PureScript.Names.$fEqIdent
                  Language.PureScript.Names.$fOrdIdent_$ccompare
                  Language.PureScript.Names.$fOrdIdent_$c<
                  Language.PureScript.Names.$fOrdIdent_$c<=
                  Language.PureScript.Names.$fOrdIdent_$c>
                  Language.PureScript.Names.$fOrdIdent_$c>=
                  Language.PureScript.Names.$fOrdIdent_$cmax
                  Language.PureScript.Names.$fOrdIdent_$cmin -}
ab98a56ffa88760dad1380079e8ee35a
  $fOrdIdent_$c< ::
    Language.PureScript.Names.Ident
    -> Language.PureScript.Names.Ident -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Language.PureScript.Names.Ident)
                   (b :: Language.PureScript.Names.Ident) ->
                 case a of wild {
                   Language.PureScript.Names.Ident a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.Names.Ident b1
                        -> Data.Text.$fOrdText_$c< a1 b1 }
                   Language.PureScript.Names.GenIdent a1 a2
                   -> case b of wild1 {
                        Language.PureScript.Names.Ident ds -> GHC.Types.False
                        Language.PureScript.Names.GenIdent b1 b2
                        -> case a1 of wild2 {
                             GHC.Base.Nothing
                             -> case b1 of wild3 {
                                  GHC.Base.Nothing -> GHC.Integer.Type.ltInteger a2 b2
                                  GHC.Base.Just ipv -> GHC.Types.True }
                             GHC.Base.Just a4
                             -> case b1 of wild3 {
                                  GHC.Base.Nothing -> GHC.Types.False
                                  GHC.Base.Just b4
                                  -> case a4 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                                     case b4 of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                                     case Data.Text.$w$ccompare ww1 ww2 ww3 ww5 ww6 ww7 of wild4 {
                                       GHC.Types.LT -> GHC.Types.True
                                       GHC.Types.EQ -> GHC.Integer.Type.ltInteger a2 b2
                                       GHC.Types.GT -> GHC.Types.False } } } } }
                        Language.PureScript.Names.UnusedIdent -> GHC.Types.True }
                   Language.PureScript.Names.UnusedIdent
                   -> case b of wild1 { DEFAULT -> GHC.Types.False } }) -}
ab98a56ffa88760dad1380079e8ee35a
  $fOrdIdent_$c<= ::
    Language.PureScript.Names.Ident
    -> Language.PureScript.Names.Ident -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.Names.Ident)
                   (b :: Language.PureScript.Names.Ident) ->
                 case Language.PureScript.Names.$fOrdIdent_$c< b a of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
ab98a56ffa88760dad1380079e8ee35a
  $fOrdIdent_$c> ::
    Language.PureScript.Names.Ident
    -> Language.PureScript.Names.Ident -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, True)
                (\ (a :: Language.PureScript.Names.Ident)
                   (b :: Language.PureScript.Names.Ident) ->
                 Language.PureScript.Names.$fOrdIdent_$c< b a) -}
ab98a56ffa88760dad1380079e8ee35a
  $fOrdIdent_$c>= ::
    Language.PureScript.Names.Ident
    -> Language.PureScript.Names.Ident -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.Names.Ident)
                   (b :: Language.PureScript.Names.Ident) ->
                 case Language.PureScript.Names.$fOrdIdent_$c< a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
ab98a56ffa88760dad1380079e8ee35a
  $fOrdIdent_$ccompare ::
    Language.PureScript.Names.Ident
    -> Language.PureScript.Names.Ident -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Language.PureScript.Names.Ident)
                   (b :: Language.PureScript.Names.Ident) ->
                 case a of wild {
                   Language.PureScript.Names.Ident a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.LT
                        Language.PureScript.Names.Ident b1
                        -> Data.Text.$fOrdText_$ccompare a1 b1 }
                   Language.PureScript.Names.GenIdent a1 a2
                   -> case b of wild1 {
                        Language.PureScript.Names.Ident ds -> GHC.Types.GT
                        Language.PureScript.Names.GenIdent b1 b2
                        -> case a1 of wild2 {
                             GHC.Base.Nothing
                             -> case b1 of wild3 {
                                  GHC.Base.Nothing -> GHC.Integer.Type.compareInteger a2 b2
                                  GHC.Base.Just ipv -> GHC.Types.LT }
                             GHC.Base.Just a4
                             -> case b1 of wild3 {
                                  GHC.Base.Nothing -> GHC.Types.GT
                                  GHC.Base.Just b4
                                  -> case a4 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                                     case b4 of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                                     case Data.Text.$w$ccompare ww1 ww2 ww3 ww5 ww6 ww7 of wild4 {
                                       GHC.Types.LT -> GHC.Types.LT
                                       GHC.Types.EQ -> GHC.Integer.Type.compareInteger a2 b2
                                       GHC.Types.GT -> GHC.Types.GT } } } } }
                        Language.PureScript.Names.UnusedIdent -> GHC.Types.LT }
                   Language.PureScript.Names.UnusedIdent
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Language.PureScript.Names.UnusedIdent -> GHC.Types.EQ } }) -}
ab98a56ffa88760dad1380079e8ee35a
  $fOrdIdent_$cmax ::
    Language.PureScript.Names.Ident
    -> Language.PureScript.Names.Ident
    -> Language.PureScript.Names.Ident
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Names.Ident)
                   (y :: Language.PureScript.Names.Ident) ->
                 case Language.PureScript.Names.$fOrdIdent_$c< y x of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
ab98a56ffa88760dad1380079e8ee35a
  $fOrdIdent_$cmin ::
    Language.PureScript.Names.Ident
    -> Language.PureScript.Names.Ident
    -> Language.PureScript.Names.Ident
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Names.Ident)
                   (y :: Language.PureScript.Names.Ident) ->
                 case Language.PureScript.Names.$fOrdIdent_$c< y x of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
5a70062bbdf29e6dc659ad8bf5326b50
  $fOrdModuleName ::
    GHC.Classes.Ord Language.PureScript.Names.ModuleName
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Names.ModuleName
                  Language.PureScript.Names.$fEqModuleName
                  Language.PureScript.Names.$fOrdModuleName7
                    `cast`
                  (Sym (Language.PureScript.Names.N:ModuleName[0])
                   ->_R Sym (Language.PureScript.Names.N:ModuleName[0])
                   ->_R <GHC.Types.Ordering>_R)
                  Language.PureScript.Names.$fOrdModuleName6
                    `cast`
                  (Sym (Language.PureScript.Names.N:ModuleName[0])
                   ->_R Sym (Language.PureScript.Names.N:ModuleName[0])
                   ->_R <GHC.Types.Bool>_R)
                  Language.PureScript.Names.$fOrdModuleName5
                    `cast`
                  (Sym (Language.PureScript.Names.N:ModuleName[0])
                   ->_R Sym (Language.PureScript.Names.N:ModuleName[0])
                   ->_R <GHC.Types.Bool>_R)
                  Language.PureScript.Names.$fOrdModuleName4
                    `cast`
                  (Sym (Language.PureScript.Names.N:ModuleName[0])
                   ->_R Sym (Language.PureScript.Names.N:ModuleName[0])
                   ->_R <GHC.Types.Bool>_R)
                  Language.PureScript.Names.$fOrdModuleName3
                    `cast`
                  (Sym (Language.PureScript.Names.N:ModuleName[0])
                   ->_R Sym (Language.PureScript.Names.N:ModuleName[0])
                   ->_R <GHC.Types.Bool>_R)
                  Language.PureScript.Names.$fOrdModuleName2
                    `cast`
                  (Sym (Language.PureScript.Names.N:ModuleName[0])
                   ->_R Sym (Language.PureScript.Names.N:ModuleName[0])
                   ->_R Sym (Language.PureScript.Names.N:ModuleName[0]))
                  Language.PureScript.Names.$fOrdModuleName1
                    `cast`
                  (Sym (Language.PureScript.Names.N:ModuleName[0])
                   ->_R Sym (Language.PureScript.Names.N:ModuleName[0])
                   ->_R Sym (Language.PureScript.Names.N:ModuleName[0])) -}
b9809ef856ce54113cb970b1ce8520c0
  $fOrdModuleName1 ::
    [Language.PureScript.Names.ProperName
       'Language.PureScript.Names.Namespace]
    -> [Language.PureScript.Names.ProperName
          'Language.PureScript.Names.Namespace]
    -> [Language.PureScript.Names.ProperName
          'Language.PureScript.Names.Namespace]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [Language.PureScript.Names.ProperName
                            'Language.PureScript.Names.Namespace])
                   (y :: [Language.PureScript.Names.ProperName
                            'Language.PureScript.Names.Namespace]) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.Namespace)
                        (Language.PureScript.Names.$fOrdProperName
                           @ 'Language.PureScript.Names.Namespace)
                        x
                        y of wild {
                   DEFAULT -> x GHC.Types.GT -> y }) -}
0dd35fc42881ddd08fe0643cc2790c79
  $fOrdModuleName2 ::
    [Language.PureScript.Names.ProperName
       'Language.PureScript.Names.Namespace]
    -> [Language.PureScript.Names.ProperName
          'Language.PureScript.Names.Namespace]
    -> [Language.PureScript.Names.ProperName
          'Language.PureScript.Names.Namespace]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [Language.PureScript.Names.ProperName
                            'Language.PureScript.Names.Namespace])
                   (y :: [Language.PureScript.Names.ProperName
                            'Language.PureScript.Names.Namespace]) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.Namespace)
                        (Language.PureScript.Names.$fOrdProperName
                           @ 'Language.PureScript.Names.Namespace)
                        x
                        y of wild {
                   DEFAULT -> y GHC.Types.GT -> x }) -}
3ea593396f68179e6c0e7fa99020e822
  $fOrdModuleName3 ::
    [Language.PureScript.Names.ProperName
       'Language.PureScript.Names.Namespace]
    -> [Language.PureScript.Names.ProperName
          'Language.PureScript.Names.Namespace]
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [Language.PureScript.Names.ProperName
                            'Language.PureScript.Names.Namespace])
                   (y :: [Language.PureScript.Names.ProperName
                            'Language.PureScript.Names.Namespace]) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.Namespace)
                        (Language.PureScript.Names.$fOrdProperName
                           @ 'Language.PureScript.Names.Namespace)
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }) -}
22f594f89f417e6c086451aaae4cb596
  $fOrdModuleName4 ::
    [Language.PureScript.Names.ProperName
       'Language.PureScript.Names.Namespace]
    -> [Language.PureScript.Names.ProperName
          'Language.PureScript.Names.Namespace]
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [Language.PureScript.Names.ProperName
                            'Language.PureScript.Names.Namespace])
                   (y :: [Language.PureScript.Names.ProperName
                            'Language.PureScript.Names.Namespace]) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.Namespace)
                        (Language.PureScript.Names.$fOrdProperName
                           @ 'Language.PureScript.Names.Namespace)
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True }) -}
6bd9c284ce7dcf4a215ef64311275eae
  $fOrdModuleName5 ::
    [Language.PureScript.Names.ProperName
       'Language.PureScript.Names.Namespace]
    -> [Language.PureScript.Names.ProperName
          'Language.PureScript.Names.Namespace]
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [Language.PureScript.Names.ProperName
                            'Language.PureScript.Names.Namespace])
                   (y :: [Language.PureScript.Names.ProperName
                            'Language.PureScript.Names.Namespace]) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.Namespace)
                        (Language.PureScript.Names.$fOrdProperName
                           @ 'Language.PureScript.Names.Namespace)
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False }) -}
9a752f4b5e862dd9a0e1885283ddf0d0
  $fOrdModuleName6 ::
    [Language.PureScript.Names.ProperName
       'Language.PureScript.Names.Namespace]
    -> [Language.PureScript.Names.ProperName
          'Language.PureScript.Names.Namespace]
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [Language.PureScript.Names.ProperName
                            'Language.PureScript.Names.Namespace])
                   (y :: [Language.PureScript.Names.ProperName
                            'Language.PureScript.Names.Namespace]) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.Namespace)
                        (Language.PureScript.Names.$fOrdProperName
                           @ 'Language.PureScript.Names.Namespace)
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True }) -}
ba31725231e6602fc6dbe792ed5137db
  $fOrdModuleName7 ::
    [Language.PureScript.Names.ProperName
       'Language.PureScript.Names.Namespace]
    -> [Language.PureScript.Names.ProperName
          'Language.PureScript.Names.Namespace]
    -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (GHC.Classes.$fOrd[]_$ccompare
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.Namespace)
                   (Language.PureScript.Names.$fOrdProperName
                      @ 'Language.PureScript.Names.Namespace)) -}
184494d9e734645f374e2a0fce32bfac
  $fOrdName :: GHC.Classes.Ord Language.PureScript.Names.Name
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Names.Name
                  Language.PureScript.Names.$fEqName
                  Language.PureScript.Names.$fOrdName_$ccompare
                  Language.PureScript.Names.$fOrdName_$c<
                  Language.PureScript.Names.$fOrdName_$c<=
                  Language.PureScript.Names.$fOrdName_$c>
                  Language.PureScript.Names.$fOrdName_$c>=
                  Language.PureScript.Names.$fOrdName_$cmax
                  Language.PureScript.Names.$fOrdName_$cmin -}
184494d9e734645f374e2a0fce32bfac
  $fOrdName_$c< ::
    Language.PureScript.Names.Name
    -> Language.PureScript.Names.Name -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Names.Name)
                   (y :: Language.PureScript.Names.Name) ->
                 case Language.PureScript.Names.$fOrdName_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True }) -}
184494d9e734645f374e2a0fce32bfac
  $fOrdName_$c<= ::
    Language.PureScript.Names.Name
    -> Language.PureScript.Names.Name -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Names.Name)
                   (y :: Language.PureScript.Names.Name) ->
                 case Language.PureScript.Names.$fOrdName_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False }) -}
184494d9e734645f374e2a0fce32bfac
  $fOrdName_$c> ::
    Language.PureScript.Names.Name
    -> Language.PureScript.Names.Name -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Names.Name)
                   (y :: Language.PureScript.Names.Name) ->
                 case Language.PureScript.Names.$fOrdName_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True }) -}
184494d9e734645f374e2a0fce32bfac
  $fOrdName_$c>= ::
    Language.PureScript.Names.Name
    -> Language.PureScript.Names.Name -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Names.Name)
                   (y :: Language.PureScript.Names.Name) ->
                 case Language.PureScript.Names.$fOrdName_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }) -}
184494d9e734645f374e2a0fce32bfac
  $fOrdName_$ccompare ::
    Language.PureScript.Names.Name
    -> Language.PureScript.Names.Name -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Language.PureScript.Names.Name)
                   (b :: Language.PureScript.Names.Name) ->
                 case a of wild {
                   Language.PureScript.Names.IdentName a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.LT
                        Language.PureScript.Names.IdentName b1
                        -> Language.PureScript.Names.$fOrdIdent_$ccompare a1 b1 }
                   Language.PureScript.Names.ValOpName a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.LT
                        Language.PureScript.Names.IdentName ds -> GHC.Types.GT
                        Language.PureScript.Names.ValOpName b1
                        -> Data.Text.$fOrdText_$ccompare
                             a1
                               `cast`
                             (Language.PureScript.Names.N:OpName[0]
                                  <'Language.PureScript.Names.ValueOpName>_P)
                             b1
                               `cast`
                             (Language.PureScript.Names.N:OpName[0]
                                  <'Language.PureScript.Names.ValueOpName>_P) }
                   Language.PureScript.Names.TyName a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Language.PureScript.Names.TyName ds
                        -> Data.Text.$fOrdText_$ccompare
                             a1
                               `cast`
                             (Language.PureScript.Names.N:ProperName[0]
                                  <'Language.PureScript.Names.TypeName>_P)
                             ds
                               `cast`
                             (Language.PureScript.Names.N:ProperName[0]
                                  <'Language.PureScript.Names.TypeName>_P)
                        Language.PureScript.Names.TyOpName ds -> GHC.Types.LT
                        Language.PureScript.Names.DctorName ds -> GHC.Types.LT
                        Language.PureScript.Names.TyClassName ds -> GHC.Types.LT
                        Language.PureScript.Names.ModName ds -> GHC.Types.LT
                        Language.PureScript.Names.KiName ds -> GHC.Types.LT }
                   Language.PureScript.Names.TyOpName a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Language.PureScript.Names.TyOpName ds
                        -> Data.Text.$fOrdText_$ccompare
                             a1
                               `cast`
                             (Language.PureScript.Names.N:OpName[0]
                                  <'Language.PureScript.Names.TypeOpName>_P)
                             ds
                               `cast`
                             (Language.PureScript.Names.N:OpName[0]
                                  <'Language.PureScript.Names.TypeOpName>_P)
                        Language.PureScript.Names.DctorName ds -> GHC.Types.LT
                        Language.PureScript.Names.TyClassName ds -> GHC.Types.LT
                        Language.PureScript.Names.ModName ds -> GHC.Types.LT
                        Language.PureScript.Names.KiName ds -> GHC.Types.LT }
                   Language.PureScript.Names.DctorName a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Language.PureScript.Names.DctorName ds
                        -> Data.Text.$fOrdText_$ccompare
                             a1
                               `cast`
                             (Language.PureScript.Names.N:ProperName[0]
                                  <'Language.PureScript.Names.ConstructorName>_P)
                             ds
                               `cast`
                             (Language.PureScript.Names.N:ProperName[0]
                                  <'Language.PureScript.Names.ConstructorName>_P)
                        Language.PureScript.Names.TyClassName ds -> GHC.Types.LT
                        Language.PureScript.Names.ModName ds -> GHC.Types.LT
                        Language.PureScript.Names.KiName ds -> GHC.Types.LT }
                   Language.PureScript.Names.TyClassName a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Language.PureScript.Names.TyClassName ds
                        -> Data.Text.$fOrdText_$ccompare
                             a1
                               `cast`
                             (Language.PureScript.Names.N:ProperName[0]
                                  <'Language.PureScript.Names.ClassName>_P)
                             ds
                               `cast`
                             (Language.PureScript.Names.N:ProperName[0]
                                  <'Language.PureScript.Names.ClassName>_P)
                        Language.PureScript.Names.ModName ds -> GHC.Types.LT
                        Language.PureScript.Names.KiName ds -> GHC.Types.LT }
                   Language.PureScript.Names.ModName a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Language.PureScript.Names.ModName b1
                        -> GHC.Classes.$fOrd[]_$ccompare
                             @ (Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.Namespace)
                             (Language.PureScript.Names.$fOrdProperName
                                @ 'Language.PureScript.Names.Namespace)
                             a1 `cast` (Language.PureScript.Names.N:ModuleName[0])
                             b1 `cast` (Language.PureScript.Names.N:ModuleName[0])
                        Language.PureScript.Names.KiName ds -> GHC.Types.LT }
                   Language.PureScript.Names.KiName a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Language.PureScript.Names.KiName b1
                        -> Data.Text.$fOrdText_$ccompare
                             a1
                               `cast`
                             (Language.PureScript.Names.N:ProperName[0]
                                  <'Language.PureScript.Names.KindName>_P)
                             b1
                               `cast`
                             (Language.PureScript.Names.N:ProperName[0]
                                  <'Language.PureScript.Names.KindName>_P) } }) -}
184494d9e734645f374e2a0fce32bfac
  $fOrdName_$cmax ::
    Language.PureScript.Names.Name
    -> Language.PureScript.Names.Name -> Language.PureScript.Names.Name
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Names.Name)
                   (y :: Language.PureScript.Names.Name) ->
                 case Language.PureScript.Names.$fOrdName_$ccompare x y of wild {
                   DEFAULT -> y GHC.Types.GT -> x }) -}
184494d9e734645f374e2a0fce32bfac
  $fOrdName_$cmin ::
    Language.PureScript.Names.Name
    -> Language.PureScript.Names.Name -> Language.PureScript.Names.Name
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Names.Name)
                   (y :: Language.PureScript.Names.Name) ->
                 case Language.PureScript.Names.$fOrdName_$ccompare x y of wild {
                   DEFAULT -> x GHC.Types.GT -> y }) -}
1522672b880b192c6e05e6cf8a45712d
  $fOrdOpName :: GHC.Classes.Ord (Language.PureScript.Names.OpName a)
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ a :: Language.PureScript.Names.OpNameType.
                  @ (Language.PureScript.Names.OpName a)
                  (Language.PureScript.Names.$fEqOpName @ a)
                  Data.Text.$fOrdText_$ccompare
                    `cast`
                  (Sym (Language.PureScript.Names.N:OpName[0] <a>_P)
                   ->_R Sym (Language.PureScript.Names.N:OpName[0] <a>_P)
                   ->_R <GHC.Types.Ordering>_R)
                  Data.Text.$fOrdText_$c<
                    `cast`
                  (Sym (Language.PureScript.Names.N:OpName[0] <a>_P)
                   ->_R Sym (Language.PureScript.Names.N:OpName[0] <a>_P)
                   ->_R <GHC.Types.Bool>_R)
                  Data.Text.$fOrdText_$c<=
                    `cast`
                  (Sym (Language.PureScript.Names.N:OpName[0] <a>_P)
                   ->_R Sym (Language.PureScript.Names.N:OpName[0] <a>_P)
                   ->_R <GHC.Types.Bool>_R)
                  Data.Text.$fOrdText_$c>
                    `cast`
                  (Sym (Language.PureScript.Names.N:OpName[0] <a>_P)
                   ->_R Sym (Language.PureScript.Names.N:OpName[0] <a>_P)
                   ->_R <GHC.Types.Bool>_R)
                  Data.Text.$fOrdText_$c>=
                    `cast`
                  (Sym (Language.PureScript.Names.N:OpName[0] <a>_P)
                   ->_R Sym (Language.PureScript.Names.N:OpName[0] <a>_P)
                   ->_R <GHC.Types.Bool>_R)
                  Data.Text.$fOrdText_$cmax
                    `cast`
                  (Sym (Language.PureScript.Names.N:OpName[0] <a>_P)
                   ->_R Sym (Language.PureScript.Names.N:OpName[0] <a>_P)
                   ->_R Sym (Language.PureScript.Names.N:OpName[0] <a>_P))
                  Data.Text.$fOrdText_$cmin
                    `cast`
                  (Sym (Language.PureScript.Names.N:OpName[0] <a>_P)
                   ->_R Sym (Language.PureScript.Names.N:OpName[0] <a>_P)
                   ->_R Sym (Language.PureScript.Names.N:OpName[0] <a>_P)) -}
29f101e190cc99df85623423972e606f
  $fOrdProperName ::
    GHC.Classes.Ord (Language.PureScript.Names.ProperName a)
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ a :: Language.PureScript.Names.ProperNameType.
                  @ (Language.PureScript.Names.ProperName a)
                  (Language.PureScript.Names.$fEqProperName @ a)
                  Data.Text.$fOrdText_$ccompare
                    `cast`
                  (Sym (Language.PureScript.Names.N:ProperName[0] <a>_P)
                   ->_R Sym (Language.PureScript.Names.N:ProperName[0] <a>_P)
                   ->_R <GHC.Types.Ordering>_R)
                  Data.Text.$fOrdText_$c<
                    `cast`
                  (Sym (Language.PureScript.Names.N:ProperName[0] <a>_P)
                   ->_R Sym (Language.PureScript.Names.N:ProperName[0] <a>_P)
                   ->_R <GHC.Types.Bool>_R)
                  Data.Text.$fOrdText_$c<=
                    `cast`
                  (Sym (Language.PureScript.Names.N:ProperName[0] <a>_P)
                   ->_R Sym (Language.PureScript.Names.N:ProperName[0] <a>_P)
                   ->_R <GHC.Types.Bool>_R)
                  Data.Text.$fOrdText_$c>
                    `cast`
                  (Sym (Language.PureScript.Names.N:ProperName[0] <a>_P)
                   ->_R Sym (Language.PureScript.Names.N:ProperName[0] <a>_P)
                   ->_R <GHC.Types.Bool>_R)
                  Data.Text.$fOrdText_$c>=
                    `cast`
                  (Sym (Language.PureScript.Names.N:ProperName[0] <a>_P)
                   ->_R Sym (Language.PureScript.Names.N:ProperName[0] <a>_P)
                   ->_R <GHC.Types.Bool>_R)
                  Data.Text.$fOrdText_$cmax
                    `cast`
                  (Sym (Language.PureScript.Names.N:ProperName[0] <a>_P)
                   ->_R Sym (Language.PureScript.Names.N:ProperName[0] <a>_P)
                   ->_R Sym (Language.PureScript.Names.N:ProperName[0] <a>_P))
                  Data.Text.$fOrdText_$cmin
                    `cast`
                  (Sym (Language.PureScript.Names.N:ProperName[0] <a>_P)
                   ->_R Sym (Language.PureScript.Names.N:ProperName[0] <a>_P)
                   ->_R Sym (Language.PureScript.Names.N:ProperName[0] <a>_P)) -}
5a70062bbdf29e6dc659ad8bf5326b50
  $fOrdQualified ::
    GHC.Classes.Ord a =>
    GHC.Classes.Ord (Language.PureScript.Names.Qualified a)
  DFunId
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(1*U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Classes.Ord a).
                  @ (Language.PureScript.Names.Qualified a)
                  (Language.PureScript.Names.$fOrdQualified_$cp1Ord @ a v)
                  (Language.PureScript.Names.$fOrdQualified_$ccompare @ a v)
                  (Language.PureScript.Names.$fOrdQualified_$c< @ a v)
                  (Language.PureScript.Names.$fOrdQualified_$c<= @ a v)
                  (\ (a1 :: Language.PureScript.Names.Qualified a)
                     (b :: Language.PureScript.Names.Qualified a) ->
                   Language.PureScript.Names.$fOrdQualified_$c< @ a v b a1)
                  (Language.PureScript.Names.$fOrdQualified_$c>= @ a v)
                  (Language.PureScript.Names.$fOrdQualified_$cmax @ a v)
                  (Language.PureScript.Names.$fOrdQualified_$cmin @ a v) -}
5a70062bbdf29e6dc659ad8bf5326b50
  $fOrdQualified_$c< ::
    GHC.Classes.Ord a =>
    Language.PureScript.Names.Qualified a
    -> Language.PureScript.Names.Qualified a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,A,1*C1(C1(U)),A,A,A,A,A)><S(SL),1*U(1*U,U)><S(SL),1*U(1*U,U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: GHC.Classes.Ord a)
                   (w1 :: Language.PureScript.Names.Qualified a)
                   (w2 :: Language.PureScript.Names.Qualified a) ->
                 case w1 of ww { Language.PureScript.Names.Qualified ww1 ww2 ->
                 case w2 of ww3 { Language.PureScript.Names.Qualified ww4 ww5 ->
                 Language.PureScript.Names.$w$c< @ a w ww1 ww2 ww4 ww5 } }) -}
5a70062bbdf29e6dc659ad8bf5326b50
  $fOrdQualified_$c<= ::
    GHC.Classes.Ord a =>
    Language.PureScript.Names.Qualified a
    -> Language.PureScript.Names.Qualified a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,A,1*C1(C1(U)),A,A,A,A,A)><S(SL),1*U(1*U,U)><S(SL),1*U(1*U,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dOrd :: GHC.Classes.Ord a)
                   (a1 :: Language.PureScript.Names.Qualified a)
                   (b :: Language.PureScript.Names.Qualified a) ->
                 case Language.PureScript.Names.$fOrdQualified_$c<
                        @ a
                        $dOrd
                        b
                        a1 of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
5a70062bbdf29e6dc659ad8bf5326b50
  $fOrdQualified_$c>= ::
    GHC.Classes.Ord a =>
    Language.PureScript.Names.Qualified a
    -> Language.PureScript.Names.Qualified a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,A,1*C1(C1(U)),A,A,A,A,A)><S(SL),1*U(1*U,U)><S(SL),1*U(1*U,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dOrd :: GHC.Classes.Ord a)
                   (a1 :: Language.PureScript.Names.Qualified a)
                   (b :: Language.PureScript.Names.Qualified a) ->
                 case Language.PureScript.Names.$fOrdQualified_$c<
                        @ a
                        $dOrd
                        a1
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
5a70062bbdf29e6dc659ad8bf5326b50
  $fOrdQualified_$ccompare ::
    GHC.Classes.Ord a =>
    Language.PureScript.Names.Qualified a
    -> Language.PureScript.Names.Qualified a -> GHC.Types.Ordering
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(C1(U)),A,A,A,A,A,A)><S(SL),1*U(1*U,U)><S(SL),1*U(1*U,U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: GHC.Classes.Ord a)
                   (w1 :: Language.PureScript.Names.Qualified a)
                   (w2 :: Language.PureScript.Names.Qualified a) ->
                 case w1 of ww { Language.PureScript.Names.Qualified ww1 ww2 ->
                 case w2 of ww3 { Language.PureScript.Names.Qualified ww4 ww5 ->
                 Language.PureScript.Names.$w$ccompare @ a w ww1 ww2 ww4 ww5 } }) -}
5a70062bbdf29e6dc659ad8bf5326b50
  $fOrdQualified_$cmax ::
    GHC.Classes.Ord a =>
    Language.PureScript.Names.Qualified a
    -> Language.PureScript.Names.Qualified a
    -> Language.PureScript.Names.Qualified a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,A,1*C1(C1(U)),A,A,A,A,A)><S(SL),1*U(U,U)><S(SL),1*U(U,U)>m,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dOrd :: GHC.Classes.Ord a)
                   (x :: Language.PureScript.Names.Qualified a)
                   (y :: Language.PureScript.Names.Qualified a) ->
                 case Language.PureScript.Names.$fOrdQualified_$c<
                        @ a
                        $dOrd
                        y
                        x of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
5a70062bbdf29e6dc659ad8bf5326b50
  $fOrdQualified_$cmin ::
    GHC.Classes.Ord a =>
    Language.PureScript.Names.Qualified a
    -> Language.PureScript.Names.Qualified a
    -> Language.PureScript.Names.Qualified a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,A,1*C1(C1(U)),A,A,A,A,A)><S(SL),1*U(U,U)><S(SL),1*U(U,U)>m,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dOrd :: GHC.Classes.Ord a)
                   (x :: Language.PureScript.Names.Qualified a)
                   (y :: Language.PureScript.Names.Qualified a) ->
                 case Language.PureScript.Names.$fOrdQualified_$c<
                        @ a
                        $dOrd
                        y
                        x of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
5a70062bbdf29e6dc659ad8bf5326b50
  $fOrdQualified_$cp1Ord ::
    GHC.Classes.Ord a =>
    GHC.Classes.Eq (Language.PureScript.Names.Qualified a)
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,1*U(1*U(C(C1(U)),A),A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ a ($dOrd :: GHC.Classes.Ord a) ->
                 Language.PureScript.Names.$fEqQualified
                   @ a
                   (GHC.Classes.$p1Ord @ a $dOrd)) -}
ab98a56ffa88760dad1380079e8ee35a
  $fShowIdent :: GHC.Show.Show Language.PureScript.Names.Ident
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Names.Ident
                  Language.PureScript.Names.$fShowIdent_$cshowsPrec
                  Language.PureScript.Names.$fShowIdent_$cshow
                  Language.PureScript.Names.$fShowIdent_$cshowList -}
ab98a56ffa88760dad1380079e8ee35a
  $fShowIdent1 :: Language.PureScript.Names.Ident -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (Language.PureScript.Names.$fShowIdent_$cshowsPrec
                   Language.PureScript.Names.$fShowIdent2) -}
c93664c374bb9cfedd213a381e524691
  $fShowIdent2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
7671757227b9581402aeaa07813dcdf1
  $fShowIdent3 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.PureScript.Names.$fShowIdent4) -}
c5aa4d8c3ae3ea300b4f59411f1a400e
  $fShowIdent4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Names.$fShowIdent5) -}
64cbf0f64682debd4744480b8979be4f
  $fShowIdent5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("UnusedIdent"#) -}
a04fecfa4244bbb3cda4be09c342b0da
  $fShowIdent6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("GenIdent "#) -}
765e31f27b3336d2517dc4a0c1ffc6ad
  $fShowIdent7 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11#) -}
dcb20b32cf3ce85df6e06bdfb97e679a
  $fShowIdent8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Ident "#) -}
ab98a56ffa88760dad1380079e8ee35a
  $fShowIdent_$cshow ::
    Language.PureScript.Names.Ident -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: Language.PureScript.Names.Ident) ->
                 case x of wild {
                   Language.PureScript.Names.Ident b1
                   -> GHC.CString.unpackAppendCString#
                        Language.PureScript.Names.$fShowIdent8
                        (case Data.Text.Show.$w$cshowsPrec
                                b1
                                (GHC.Types.[] @ GHC.Types.Char) of ww { (#,#) ww1 ww2 ->
                         GHC.Types.: @ GHC.Types.Char ww1 ww2 })
                   Language.PureScript.Names.GenIdent b1 b2
                   -> GHC.CString.unpackAppendCString#
                        Language.PureScript.Names.$fShowIdent6
                        (case b1 of wild1 {
                           GHC.Base.Nothing
                           -> GHC.Base.++
                                @ GHC.Types.Char
                                GHC.Show.$fShowMaybe4
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.showSpace1
                                   (case GHC.Show.$w$cshowsPrec4
                                           11#
                                           b2
                                           (GHC.Types.[] @ GHC.Types.Char) of ww2 { (#,#) ww3 ww4 ->
                                    GHC.Types.: @ GHC.Types.Char ww3 ww4 }))
                           GHC.Base.Just b4
                           -> GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.$fShow(,)4
                                (GHC.Base.++
                                   @ GHC.Types.Char
                                   GHC.Show.$fShowMaybe1
                                   (case Data.Text.Show.$w$cshowsPrec
                                           b4
                                           (GHC.Types.:
                                              @ GHC.Types.Char
                                              GHC.Show.$fShow(,)2
                                              (GHC.Types.:
                                                 @ GHC.Types.Char
                                                 GHC.Show.showSpace1
                                                 (case GHC.Show.$w$cshowsPrec4
                                                         11#
                                                         b2
                                                         (GHC.Types.[]
                                                            @ GHC.Types.Char) of ww2 { (#,#) ww3 ww4 ->
                                                  GHC.Types.:
                                                    @ GHC.Types.Char
                                                    ww3
                                                    ww4 }))) of ww { (#,#) ww1 ww2 ->
                                    GHC.Types.: @ GHC.Types.Char ww1 ww2 })) })
                   Language.PureScript.Names.UnusedIdent
                   -> Language.PureScript.Names.$fShowIdent4 }) -}
ab98a56ffa88760dad1380079e8ee35a
  $fShowIdent_$cshowList ::
    [Language.PureScript.Names.Ident] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Names.Ident])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Names.Ident
                   Language.PureScript.Names.$fShowIdent1
                   ls
                   s) -}
ab98a56ffa88760dad1380079e8ee35a
  $fShowIdent_$cshowsPrec ::
    GHC.Types.Int -> Language.PureScript.Names.Ident -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,1*U(U)><S,1*U>,
     Unfolding: (\ (a :: GHC.Types.Int)
                   (ds :: Language.PureScript.Names.Ident) ->
                 case ds of wild {
                   Language.PureScript.Names.Ident b1
                   -> case a of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.>=# x 11# of lwild {
                        DEFAULT
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.CString.unpackAppendCString#
                             Language.PureScript.Names.$fShowIdent8
                             (case Data.Text.Show.$w$cshowsPrec b1 x1 of ww { (#,#) ww1 ww2 ->
                              GHC.Types.: @ GHC.Types.Char ww1 ww2 })
                        1#
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.CString.unpackAppendCString#
                                Language.PureScript.Names.$fShowIdent8
                                (case Data.Text.Show.$w$cshowsPrec
                                        b1
                                        (GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.$fShow(,)2
                                           x1) of ww { (#,#) ww1 ww2 ->
                                 GHC.Types.: @ GHC.Types.Char ww1 ww2 })) } }
                   Language.PureScript.Names.GenIdent b1 b2
                   -> case a of wild1 { GHC.Types.I# x ->
                      let {
                        f :: GHC.Base.String -> GHC.Base.String
                        = GHC.Show.$fShowMaybe_$cshowsPrec
                            @ Data.Text.Internal.Text
                            Data.Text.Show.$fShowText
                            Language.PureScript.Names.$fShowIdent7
                            b1
                      } in
                      case GHC.Prim.>=# x 11# of lwild {
                        DEFAULT
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.CString.unpackAppendCString#
                             Language.PureScript.Names.$fShowIdent6
                             (f (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.showSpace1
                                   (case GHC.Show.$w$cshowsPrec4 11# b2 x1 of ww2 { (#,#) ww3 ww4 ->
                                    GHC.Types.: @ GHC.Types.Char ww3 ww4 })))
                        1#
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.CString.unpackAppendCString#
                                Language.PureScript.Names.$fShowIdent6
                                (f (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.showSpace1
                                      (case GHC.Show.$w$cshowsPrec4
                                              11#
                                              b2
                                              (GHC.Types.:
                                                 @ GHC.Types.Char
                                                 GHC.Show.$fShow(,)2
                                                 x1) of ww2 { (#,#) ww3 ww4 ->
                                       GHC.Types.: @ GHC.Types.Char ww3 ww4 })))) } }
                   Language.PureScript.Names.UnusedIdent
                   -> Language.PureScript.Names.$fShowIdent3 }) -}
5a70062bbdf29e6dc659ad8bf5326b50
  $fShowModuleName ::
    GHC.Show.Show Language.PureScript.Names.ModuleName
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Names.ModuleName
                  Language.PureScript.Names.$fShowModuleName_$cshowsPrec
                  Language.PureScript.Names.$fShowModuleName_$cshow
                  Language.PureScript.Names.$fShowModuleName_$cshowList -}
5a70062bbdf29e6dc659ad8bf5326b50
  $fShowModuleName1 ::
    Language.PureScript.Names.ModuleName -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,1*U><L,U>,
     Unfolding: (\ (w :: Language.PureScript.Names.ModuleName)
                   (w1 :: GHC.Base.String) ->
                 Language.PureScript.Names.$w$cshowsPrec 0# w w1) -}
0e080cb2fc151f5320f65f0fc228b312
  $fShowModuleName2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("}"#) -}
7b5345b54d3943647b44661fb8e08f50
  $fShowModuleName3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("runProperName = "#) -}
38f89fec53358777625eaa18c256f8e0
  $fShowModuleName4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ProperName {"#) -}
7d9c25ff96bc3649351560fdc6e3dbc9
  $fShowModuleName5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ModuleName "#) -}
5a70062bbdf29e6dc659ad8bf5326b50
  $fShowModuleName_$cshow ::
    Language.PureScript.Names.ModuleName -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Names.ModuleName) ->
                 Language.PureScript.Names.$fShowModuleName_$cshowsPrec
                   Language.PureScript.Names.$fShowIdent2
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
5a70062bbdf29e6dc659ad8bf5326b50
  $fShowModuleName_$cshowList ::
    [Language.PureScript.Names.ModuleName] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Names.ModuleName])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Names.ModuleName
                   Language.PureScript.Names.$fShowModuleName1
                   ls
                   s) -}
5a70062bbdf29e6dc659ad8bf5326b50
  $fShowModuleName_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Names.ModuleName -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><L,1*U><L,U>, Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Names.ModuleName)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Language.PureScript.Names.$w$cshowsPrec ww1 w1 w2 }) -}
184494d9e734645f374e2a0fce32bfac
  $fShowName :: GHC.Show.Show Language.PureScript.Names.Name
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Names.Name
                  Language.PureScript.Names.$fShowName_$cshowsPrec
                  Language.PureScript.Names.$fShowName_$cshow
                  Language.PureScript.Names.$fShowName_$cshowList -}
184494d9e734645f374e2a0fce32bfac
  $fShowName1 :: Language.PureScript.Names.Name -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (w :: Language.PureScript.Names.Name) ->
                 Language.PureScript.Names.$w$cshowsPrec1 0# w) -}
dc8b8716fa887e4974e97e700d47b2f6
  $fShowName10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Names.$fShowName11) -}
52a115606c5a98164f550b9736b32deb
  $fShowName11 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("TyOpName "#) -}
e9b805c3abf71cd5de604f6d051b8c2a
  $fShowName12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Names.$fShowName13) -}
b57bdec870eafe2b2bf0b353517d49dd
  $fShowName13 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("TyName "#) -}
55477a098fbf195d79f8669326716ae5
  $fShowName14 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("runOpName = "#) -}
d38ffec4f2993bbc67c231d1499d8d72
  $fShowName15 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("OpName {"#) -}
2ffffa410019eea1ca04884bf34c8941
  $fShowName16 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Names.$fShowName17) -}
6ee33c86a59ea4fc5f11eda233dc51c0
  $fShowName17 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ValOpName "#) -}
d075334047655052bcd5f382bd9eb7aa
  $fShowName18 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Names.$fShowName19) -}
9799d320d79df4ed7cee092b7ef3e8c7
  $fShowName19 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IdentName "#) -}
b3ef36a2fbc095a2b6912c6f95601698
  $fShowName2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Names.$fShowName3) -}
e08d2ec0ade0578b64bc951a3ec7ef5d
  $fShowName3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("KiName "#) -}
fd4ee98e7be33348e402ecca2f5d320c
  $fShowName4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Names.$fShowName5) -}
cf6e08dc1193a54da0890a118ec10954
  $fShowName5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ModName "#) -}
b6791ce28cd551812786d5eb7bb5c58b
  $fShowName6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Names.$fShowName7) -}
ce6300a1a36a6d50110dff5189fcace5
  $fShowName7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("TyClassName "#) -}
805271764abf29e9f3cffc5845d39374
  $fShowName8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Names.$fShowName9) -}
0574d3a314aa9904cef30388533c5053
  $fShowName9 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("DctorName "#) -}
184494d9e734645f374e2a0fce32bfac
  $fShowName_$cshow ::
    Language.PureScript.Names.Name -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U> -}
184494d9e734645f374e2a0fce32bfac
  $fShowName_$cshowList ::
    [Language.PureScript.Names.Name] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Names.Name])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Names.Name
                   Language.PureScript.Names.$fShowName1
                   ls
                   s) -}
184494d9e734645f374e2a0fce32bfac
  $fShowName_$cshowsPrec ::
    GHC.Types.Int -> Language.PureScript.Names.Name -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Language.PureScript.Names.Name) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Language.PureScript.Names.$w$cshowsPrec1 ww1 w1 }) -}
1522672b880b192c6e05e6cf8a45712d
  $fShowOpName :: GHC.Show.Show (Language.PureScript.Names.OpName a)
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ a :: Language.PureScript.Names.OpNameType.
                  @ (Language.PureScript.Names.OpName a)
                  (Language.PureScript.Names.$fShowOpName_$cshowsPrec @ a)
                  (Language.PureScript.Names.$fShowOpName_$cshow @ a)
                  (Language.PureScript.Names.$fShowOpName_$cshowList @ a) -}
1522672b880b192c6e05e6cf8a45712d
  $fShowOpName1 ::
    Language.PureScript.Names.OpName a -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,1*U(U,U,U)><L,U>,
     Unfolding: (\ @ a :: Language.PureScript.Names.OpNameType
                   (w :: Language.PureScript.Names.OpName a)
                   (w1 :: GHC.Base.String) ->
                 Language.PureScript.Names.$w$cshowsPrec3 @ a 0# w w1) -}
2796507f0f1b1cd7c5baf032cf6622e2
  $fShowOpName2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Names.$fShowModuleName2) -}
1522672b880b192c6e05e6cf8a45712d
  $fShowOpName_$cshow ::
    Language.PureScript.Names.OpName a -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U(U,U,U)>,
     Unfolding: (\ @ a :: Language.PureScript.Names.OpNameType
                   (x :: Language.PureScript.Names.OpName a) ->
                 GHC.CString.unpackAppendCString#
                   Language.PureScript.Names.$fShowName15
                   (GHC.CString.unpackAppendCString#
                      Language.PureScript.Names.$fShowName14
                      (case Data.Text.Show.$w$cshowsPrec
                              x `cast` (Language.PureScript.Names.N:OpName[0] <a>_P)
                              Language.PureScript.Names.$fShowOpName2 of ww { (#,#) ww1 ww2 ->
                       GHC.Types.: @ GHC.Types.Char ww1 ww2 }))) -}
1522672b880b192c6e05e6cf8a45712d
  $fShowOpName_$cshowList ::
    [Language.PureScript.Names.OpName a] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a :: Language.PureScript.Names.OpNameType
                   (ls :: [Language.PureScript.Names.OpName a])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Language.PureScript.Names.OpName a)
                   (Language.PureScript.Names.$fShowOpName1 @ a)
                   ls
                   s) -}
1522672b880b192c6e05e6cf8a45712d
  $fShowOpName_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Names.OpName a -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><L,1*U(U,U,U)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a :: Language.PureScript.Names.OpNameType
                   (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Names.OpName a)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Language.PureScript.Names.$w$cshowsPrec3 @ a ww1 w1 w2 }) -}
29f101e190cc99df85623423972e606f
  $fShowProperName ::
    GHC.Show.Show (Language.PureScript.Names.ProperName a)
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ a :: Language.PureScript.Names.ProperNameType.
                  @ (Language.PureScript.Names.ProperName a)
                  (Language.PureScript.Names.$fShowProperName_$cshowsPrec @ a)
                  (Language.PureScript.Names.$fShowProperName_$cshow @ a)
                  (Language.PureScript.Names.$fShowProperName_$cshowList @ a) -}
29f101e190cc99df85623423972e606f
  $fShowProperName1 ::
    Language.PureScript.Names.ProperName a -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,1*U(U,U,U)><L,U>,
     Unfolding: (\ @ a :: Language.PureScript.Names.ProperNameType
                   (w :: Language.PureScript.Names.ProperName a)
                   (w1 :: GHC.Base.String) ->
                 Language.PureScript.Names.$w$cshowsPrec2 @ a 0# w w1) -}
29f101e190cc99df85623423972e606f
  $fShowProperName_$cshow ::
    Language.PureScript.Names.ProperName a -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U(U,U,U)>,
     Unfolding: (\ @ a :: Language.PureScript.Names.ProperNameType
                   (x :: Language.PureScript.Names.ProperName a) ->
                 GHC.CString.unpackAppendCString#
                   Language.PureScript.Names.$fShowModuleName4
                   (GHC.CString.unpackAppendCString#
                      Language.PureScript.Names.$fShowModuleName3
                      (case Data.Text.Show.$w$cshowsPrec
                              x `cast` (Language.PureScript.Names.N:ProperName[0] <a>_P)
                              Language.PureScript.Names.$fShowOpName2 of ww { (#,#) ww1 ww2 ->
                       GHC.Types.: @ GHC.Types.Char ww1 ww2 }))) -}
29f101e190cc99df85623423972e606f
  $fShowProperName_$cshowList ::
    [Language.PureScript.Names.ProperName a] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a :: Language.PureScript.Names.ProperNameType
                   (ls :: [Language.PureScript.Names.ProperName a])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Language.PureScript.Names.ProperName a)
                   (Language.PureScript.Names.$fShowProperName1 @ a)
                   ls
                   s) -}
29f101e190cc99df85623423972e606f
  $fShowProperName_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Names.ProperName a -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><L,1*U(U,U,U)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a :: Language.PureScript.Names.ProperNameType
                   (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Names.ProperName a)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Language.PureScript.Names.$w$cshowsPrec2 @ a ww1 w1 w2 }) -}
5a70062bbdf29e6dc659ad8bf5326b50
  $fShowQualified ::
    GHC.Show.Show a =>
    GHC.Show.Show (Language.PureScript.Names.Qualified a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Show.Show a).
                  @ (Language.PureScript.Names.Qualified a)
                  (Language.PureScript.Names.$fShowQualified_$cshowsPrec @ a v)
                  (Language.PureScript.Names.$fShowQualified_$cshow @ a v)
                  (Language.PureScript.Names.$fShowQualified_$cshowList @ a v) -}
e4ca48a495da8ac61bf7adcf0121e763
  $fShowQualified1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Qualified "#) -}
5a70062bbdf29e6dc659ad8bf5326b50
  $fShowQualified_$cshow ::
    GHC.Show.Show a =>
    Language.PureScript.Names.Qualified a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U(1*C1(C1(C(U))),A,A)><S,1*U(1*U,U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (x :: Language.PureScript.Names.Qualified a) ->
                 Language.PureScript.Names.$fShowQualified_$cshowsPrec
                   @ a
                   $dShow
                   Language.PureScript.Names.$fShowIdent2
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
5a70062bbdf29e6dc659ad8bf5326b50
  $fShowQualified_$cshowList ::
    GHC.Show.Show a =>
    [Language.PureScript.Names.Qualified a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (ls :: [Language.PureScript.Names.Qualified a])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Language.PureScript.Names.Qualified a)
                   (Language.PureScript.Names.$fShowQualified_$cshowsPrec
                      @ a
                      $dShow
                      Language.PureScript.Names.$fShowIdent2)
                   ls
                   s) -}
5a70062bbdf29e6dc659ad8bf5326b50
  $fShowQualified_$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Types.Int
    -> Language.PureScript.Names.Qualified a -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,1*U(1*C1(C1(C(U))),A,A)><S(S),1*U(U)><S,1*U(1*U,U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: GHC.Show.Show a)
                   (w1 :: GHC.Types.Int)
                   (w2 :: Language.PureScript.Names.Qualified a) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Language.PureScript.Names.Qualified ww3 ww4 ->
                 Language.PureScript.Names.$w$cshowsPrec4 @ a w ww1 ww3 ww4 } }) -}
ab98a56ffa88760dad1380079e8ee35a
  $fToJSONIdent ::
    Data.Aeson.Types.ToJSON.ToJSON Language.PureScript.Names.Ident
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Names.Ident
                  Language.PureScript.Names.$fToJSONIdent_$ctoJSON
                  Language.PureScript.Names.$fToJSONIdent_$ctoEncoding
                  Language.PureScript.Names.$fToJSONIdent_$ctoJSONList
                  Language.PureScript.Names.$fToJSONIdent_$ctoEncodingList -}
174cf8cc75e7d075d3281020e96d7f29
  $fToJSONIdent1 :: Data.Aeson.Types.Internal.Value
  {- Unfolding: (Data.Aeson.Types.ToJSON.$fFromPairsValueDList_go
                   Language.PureScript.Names.$fToJSONIdent2
                   (Data.HashMap.Base.Empty
                      @ Data.Text.Internal.Text
                      @ Data.Aeson.Types.Internal.Value)) -}
de217a96752d0cdc64ff8c0ee42dc30f
  $fToJSONIdent10 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("GenIdent"#) -}
94b1750627be3d1a3d622e206aaf4bd6
  $fToJSONIdent11 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Text.Internal.Text #)
                        Language.PureScript.Names.$fToJSONIdent12 of ds1 { (#,#) ipv1 ipv2 ->
                 ipv2 }) -}
080fe165a9b4e0651df8c13a5f7859ef
  $fToJSONIdent12 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        10#
                        s1 of ds1 { (#,#) ipv1 ipv2 ->
                 Data.Aeson.Types.ToJSON.$wouter1
                   ipv2
                   4#
                   Language.PureScript.Names.$fToJSONIdent13
                   0#
                   ipv1 }) -}
50269e1298cf750f877d208b45820dbd
  $fToJSONIdent13 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Names.$fToJSONIdent14) -}
7f4051163323bd85160502f5baffbb71
  $fToJSONIdent14 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Ident"#) -}
56abdea71babebc8b3e5d7ec75df47ea
  $fToJSONIdent2 :: [Data.Aeson.Types.Internal.Pair]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Aeson.Types.Internal.Pair
                   Language.PureScript.Names.$fToJSONIdent3
                   (GHC.Types.[] @ Data.Aeson.Types.Internal.Pair)) -}
0c274e9629db377b36d656eb0ff49260
  $fToJSONIdent3 ::
    (Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Names.$fToJSONIdent5,
                  Language.PureScript.Names.$fToJSONIdent4)) -}
569052b579ff2f30bf640bb361d9cb3b
  $fToJSONIdent4 :: Data.Aeson.Types.Internal.Value
  {- Unfolding: (case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                             Data.Vector.Vector Data.Aeson.Types.Internal.Value #)
                        (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case GHC.Prim.newArray#
                                @ Data.Aeson.Types.Internal.Value
                                @ (Control.Monad.Primitive.PrimState
                                     (GHC.ST.ST GHC.Prim.RealWorld))
                                0#
                                (Data.Vector.Mutable.uninitialised
                                   @ Data.Aeson.Types.Internal.Value)
                                s1
                                  `cast`
                                (GHC.Prim.State#
                                   (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                             <GHC.Prim.RealWorld>_N)))_R of ds2 { (#,#) ipv ipv1 ->
                         case GHC.Prim.unsafeFreezeArray#
                                @ (Control.Monad.Primitive.PrimState
                                     (GHC.ST.ST GHC.Prim.RealWorld))
                                @ Data.Aeson.Types.Internal.Value
                                ipv1
                                ipv of ds1 { (#,#) ipv2 ipv3 ->
                         (# ipv2
                              `cast`
                            (GHC.Prim.State#
                               (Control.Monad.Primitive.D:R:PrimStateST[0]
                                    <GHC.Prim.RealWorld>_N))_R,
                            Data.Vector.Vector
                              @ Data.Aeson.Types.Internal.Value
                              0#
                              0#
                              ipv3 #) } }) of ds1 { (#,#) ipv1 ipv2 ->
                 case ipv2 of dt { Data.Vector.Vector ipv ipv4 ipv5 ->
                 Data.Aeson.Types.Internal.Array dt } }) -}
ccdc76910c70216a335cb6274bc86dba
  $fToJSONIdent5 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Text.Internal.Text #)
                        Language.PureScript.Names.$fToJSONIdent6 of ds1 { (#,#) ipv1 ipv2 ->
                 ipv2 }) -}
c3288c92e2e011e04a28d48edeef3c79
  $fToJSONIdent6 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        10#
                        s1 of ds1 { (#,#) ipv1 ipv2 ->
                 Data.Aeson.Types.ToJSON.$wouter1
                   ipv2
                   4#
                   Language.PureScript.Names.$fShowIdent4
                   0#
                   ipv1 }) -}
e6292cfa484e9e8efea5d1fa5c0f6438
  $fToJSONIdent7 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Text.Internal.Text #)
                        Language.PureScript.Names.$fToJSONIdent8 of ds1 { (#,#) ipv1 ipv2 ->
                 ipv2 }) -}
048b92947114002d83a6226191d0c176
  $fToJSONIdent8 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        10#
                        s1 of ds1 { (#,#) ipv1 ipv2 ->
                 Data.Aeson.Types.ToJSON.$wouter1
                   ipv2
                   4#
                   Language.PureScript.Names.$fToJSONIdent9
                   0#
                   ipv1 }) -}
d21435b76b926bf8ef7b93ca96699336
  $fToJSONIdent9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Names.$fToJSONIdent10) -}
ab98a56ffa88760dad1380079e8ee35a
  $fToJSONIdent_$ctoEncoding ::
    Language.PureScript.Names.Ident
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Strictness: <S,1*U> -}
ab98a56ffa88760dad1380079e8ee35a
  $fToJSONIdent_$ctoEncodingList ::
    [Language.PureScript.Names.Ident]
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (Data.Aeson.Encoding.Internal.list
                   @ Language.PureScript.Names.Ident
                   Language.PureScript.Names.$fToJSONIdent_$ctoEncoding) -}
ab98a56ffa88760dad1380079e8ee35a
  $fToJSONIdent_$ctoJSON ::
    Language.PureScript.Names.Ident -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (value :: Language.PureScript.Names.Ident) ->
                 case value of wild {
                   Language.PureScript.Names.Ident arg1
                   -> Data.Aeson.Types.ToJSON.$fFromPairsValueDList_go
                        (GHC.Types.:
                           @ Data.Aeson.Types.Internal.Pair
                           (Language.PureScript.Names.$fToJSONIdent11,
                            Data.Aeson.Types.Internal.$WString arg1)
                           (GHC.Types.[] @ Data.Aeson.Types.Internal.Pair))
                        (Data.HashMap.Base.Empty
                           @ Data.Text.Internal.Text
                           @ Data.Aeson.Types.Internal.Value)
                   Language.PureScript.Names.GenIdent arg1 arg2
                   -> Data.Aeson.Types.ToJSON.$fFromPairsValueDList_go
                        (GHC.Types.:
                           @ Data.Aeson.Types.Internal.Pair
                           (Language.PureScript.Names.$fToJSONIdent7,
                            case GHC.Magic.runRW#
                                   @ ('GHC.Types.TupleRep
                                        '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                                   @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                        Data.Vector.Vector Data.Aeson.Types.Internal.Value #)
                                   (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                    case GHC.Prim.newArray#
                                           @ Data.Aeson.Types.Internal.Value
                                           @ (Control.Monad.Primitive.PrimState
                                                (GHC.ST.ST GHC.Prim.RealWorld))
                                           2#
                                           (Data.Vector.Mutable.uninitialised
                                              @ Data.Aeson.Types.Internal.Value)
                                           s1
                                             `cast`
                                           (GHC.Prim.State#
                                              (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                        <GHC.Prim.RealWorld>_N)))_R of ds2 { (#,#) ipv ipv1 ->
                                    case GHC.Prim.writeArray#
                                           @ (Control.Monad.Primitive.PrimState
                                                (GHC.ST.ST GHC.Prim.RealWorld))
                                           @ Data.Aeson.Types.Internal.Value
                                           ipv1
                                           0#
                                           (case arg1 of wild1 {
                                              GHC.Base.Nothing -> Data.Aeson.Types.Internal.Null
                                              GHC.Base.Just a2
                                              -> Data.Aeson.Types.Internal.$WString a2 })
                                           ipv of s'# { DEFAULT ->
                                    case GHC.Prim.writeArray#
                                           @ (Control.Monad.Primitive.PrimState
                                                (GHC.ST.ST GHC.Prim.RealWorld))
                                           @ Data.Aeson.Types.Internal.Value
                                           ipv1
                                           1#
                                           (case arg2 of dt { DEFAULT ->
                                            Data.Aeson.Types.Internal.Number
                                              (Data.Scientific.Scientific dt 0#) })
                                           s'# of s'#1 { DEFAULT ->
                                    case GHC.Prim.unsafeFreezeArray#
                                           @ (Control.Monad.Primitive.PrimState
                                                (GHC.ST.ST GHC.Prim.RealWorld))
                                           @ Data.Aeson.Types.Internal.Value
                                           ipv1
                                           s'#1 of ds1 { (#,#) ipv2 ipv3 ->
                                    (# ipv2
                                         `cast`
                                       (GHC.Prim.State#
                                          (Control.Monad.Primitive.D:R:PrimStateST[0]
                                               <GHC.Prim.RealWorld>_N))_R,
                                       Data.Vector.Vector
                                         @ Data.Aeson.Types.Internal.Value
                                         0#
                                         2#
                                         ipv3 #) } } } }) of ds1 { (#,#) ipv1 ipv2 ->
                            case ipv2 of dt { Data.Vector.Vector ipv ipv4 ipv5 ->
                            Data.Aeson.Types.Internal.Array dt } })
                           (GHC.Types.[] @ Data.Aeson.Types.Internal.Pair))
                        (Data.HashMap.Base.Empty
                           @ Data.Text.Internal.Text
                           @ Data.Aeson.Types.Internal.Value)
                   Language.PureScript.Names.UnusedIdent
                   -> Language.PureScript.Names.$fToJSONIdent1 }) -}
ab98a56ffa88760dad1380079e8ee35a
  $fToJSONIdent_$ctoJSONList ::
    [Language.PureScript.Names.Ident]
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (x :: [Language.PureScript.Names.Ident]) ->
                 Data.Aeson.Types.Internal.$WArray
                   (Data.Vector.Generic.new
                      @ Data.Vector.Vector
                      @ Data.Aeson.Types.Internal.Value
                      (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                      (Data.Vector.Generic.New.unstream
                         @ Data.Vector.Vector
                         @ Data.Aeson.Types.Internal.Value
                         (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                         (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                            @ Data.Vector.Fusion.Util.Id
                            @ Data.Aeson.Types.Internal.Value
                            @ Data.Vector.Vector
                            Data.Vector.Fusion.Util.$fMonadId
                            Data.Vector.Fusion.Bundle.Size.Unknown
                            (GHC.Base.build
                               @ Data.Aeson.Types.Internal.Value
                               (\ @ b1
                                  (c :: Data.Aeson.Types.Internal.Value -> b1 -> b1)[OneShot]
                                  (n1 :: b1)[OneShot] ->
                                GHC.Base.foldr
                                  @ Language.PureScript.Names.Ident
                                  @ b1
                                  (GHC.Base.mapFB
                                     @ Data.Aeson.Types.Internal.Value
                                     @ b1
                                     @ Language.PureScript.Names.Ident
                                     c
                                     Language.PureScript.Names.$fToJSONIdent_$ctoJSON)
                                  n1
                                  x)))))) -}
5a70062bbdf29e6dc659ad8bf5326b50
  $fToJSONModuleName ::
    Data.Aeson.Types.ToJSON.ToJSON Language.PureScript.Names.ModuleName
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Names.ModuleName
                  Language.PureScript.Names.$fToJSONModuleName_$ctoJSON
                  Language.PureScript.Names.$fToJSONModuleName_$ctoEncoding
                  Language.PureScript.Names.$fToJSONModuleName_$ctoJSONList
                  Language.PureScript.Names.$fToJSONModuleName_$ctoEncodingList -}
5a70062bbdf29e6dc659ad8bf5326b50
  $fToJSONModuleName_$ctoEncoding ::
    Language.PureScript.Names.ModuleName
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (value :: Language.PureScript.Names.ModuleName) ->
                 case value
                        `cast`
                      (Language.PureScript.Names.N:ModuleName[0]) of wild {
                   []
                   -> Data.Aeson.Encoding.Builder.emptyArray_1
                        `cast`
                      ((forall (r :: <*>_N).
                        <Data.ByteString.Builder.Internal.BuildStep r>_R
                        ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                        ->_R Sym (GHC.Types.N:IO[0]
                                      <Data.ByteString.Builder.Internal.BuildSignal
                                         r>_R)) ; (Sym (Data.ByteString.Builder.Internal.N:Builder[0]) ; Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                                                                                  <Data.Aeson.Types.Internal.Value>_P)))
                   : x xs
                   -> (\ @ r ->
                       let {
                         f :: Data.ByteString.Builder.Internal.BuildStep r
                              -> Data.ByteString.Builder.Internal.BuildStep r
                         = case x `cast`
                                (Language.PureScript.Names.N:ProperName[0]
                                     <'Language.PureScript.Names.Namespace>_P) of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                           (Data.Aeson.Encoding.Builder.encodeToBuilder
                              (Data.Aeson.Types.Internal.String dt))
                             `cast`
                           (Data.ByteString.Builder.Internal.N:Builder[0])
                             @ r }
                       } in
                       let {
                         f1 :: Data.ByteString.Builder.Internal.BuildStep r
                               -> Data.ByteString.Builder.Internal.BuildStep r
                         = (Language.PureScript.Names.$fToJSONModuleName_go xs)
                             `cast`
                           (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                <Data.Aeson.Types.Internal.Value>_P ; Data.ByteString.Builder.Internal.N:Builder[0])
                             @ r
                       } in
                       (\ (x1 :: Data.ByteString.Builder.Internal.BuildStep r) ->
                        let {
                          w :: Data.ByteString.Builder.Internal.BuildStep r
                          = f (f1
                                 (Data.Aeson.Encoding.Internal.closeBracket1 @ r x1)
                                   `cast`
                                 (<Data.ByteString.Builder.Internal.BufferRange>_R
                                  ->_R Sym (GHC.Types.N:IO[0]
                                                <Data.ByteString.Builder.Internal.BuildSignal
                                                   r>_R)))
                        } in
                        \ (w1 :: Data.ByteString.Builder.Internal.BufferRange)
                          (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                        case w1 of ww { Data.ByteString.Builder.Internal.BufferRange ww1 ww2 ->
                        Data.Aeson.Encoding.Internal.$wopenBracket @ r w ww1 ww2 w2 })
                         `cast`
                       (<Data.ByteString.Builder.Internal.BuildStep r>_R
                        ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                        ->_R Sym (GHC.Types.N:IO[0]
                                      <Data.ByteString.Builder.Internal.BuildSignal r>_R)))
                        `cast`
                      (Sym (Data.ByteString.Builder.Internal.N:Builder[0]) ; Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                                                      <Data.Aeson.Types.Internal.Value>_P)) }) -}
5a70062bbdf29e6dc659ad8bf5326b50
  $fToJSONModuleName_$ctoEncodingList ::
    [Language.PureScript.Names.ModuleName]
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (Data.Aeson.Encoding.Internal.list
                   @ Language.PureScript.Names.ModuleName
                   Language.PureScript.Names.$fToJSONModuleName_$ctoEncoding) -}
5a70062bbdf29e6dc659ad8bf5326b50
  $fToJSONModuleName_$ctoJSON ::
    Language.PureScript.Names.ModuleName
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.PureScript.Names.ModuleName) ->
                 case Language.PureScript.Names.$w$ctoJSON w of ww { Unit# ww1 ->
                 Data.Aeson.Types.Internal.Array ww1 }) -}
5a70062bbdf29e6dc659ad8bf5326b50
  $fToJSONModuleName_$ctoJSONList ::
    [Language.PureScript.Names.ModuleName]
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (x :: [Language.PureScript.Names.ModuleName]) ->
                 Data.Aeson.Types.Internal.$WArray
                   (Data.Vector.Generic.new
                      @ Data.Vector.Vector
                      @ Data.Aeson.Types.Internal.Value
                      (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                      (Data.Vector.Generic.New.unstream
                         @ Data.Vector.Vector
                         @ Data.Aeson.Types.Internal.Value
                         (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                         (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                            @ Data.Vector.Fusion.Util.Id
                            @ Data.Aeson.Types.Internal.Value
                            @ Data.Vector.Vector
                            Data.Vector.Fusion.Util.$fMonadId
                            Data.Vector.Fusion.Bundle.Size.Unknown
                            (GHC.Base.build
                               @ Data.Aeson.Types.Internal.Value
                               (\ @ b1
                                  (c :: Data.Aeson.Types.Internal.Value -> b1 -> b1)[OneShot]
                                  (n1 :: b1)[OneShot] ->
                                GHC.Base.foldr
                                  @ Language.PureScript.Names.ModuleName
                                  @ b1
                                  (GHC.Base.mapFB
                                     @ Data.Aeson.Types.Internal.Value
                                     @ b1
                                     @ Language.PureScript.Names.ModuleName
                                     c
                                     Language.PureScript.Names.$fToJSONModuleName_$ctoJSON)
                                  n1
                                  x)))))) -}
944f61962e482793c8bba96bed54d7bd
  $fToJSONModuleName_$s$wfoldlM_loop ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> [Data.Aeson.Types.Internal.Value]
    -> GHC.Prim.Int#
    -> GHC.Prim.MutableArray#
         GHC.Prim.RealWorld Data.Aeson.Types.Internal.Value
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Vector.Vector Data.Aeson.Types.Internal.Value #)
  {- Arity: 6, Strictness: <S,U><S,1*U><L,U><S,U><L,U><L,U> -}
ef3d0bb38ccfbd58a45cc43965d9ee81
  $fToJSONModuleName_go ::
    [Language.PureScript.Names.ProperName
       'Language.PureScript.Names.Namespace]
    -> Data.Aeson.Encoding.Internal.Encoding'
         Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U> -}
1522672b880b192c6e05e6cf8a45712d
  $fToJSONOpName ::
    Data.Aeson.Types.ToJSON.ToJSON (Language.PureScript.Names.OpName a)
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ a :: Language.PureScript.Names.OpNameType.
                  @ (Language.PureScript.Names.OpName a)
                  Data.Aeson.Types.Internal.$WString
                    `cast`
                  (Sym (Language.PureScript.Names.N:OpName[0] <a>_P)
                   ->_R <Data.Aeson.Types.Internal.Value>_R)
                  (Language.PureScript.Names.$fToJSONOpName_$ctoEncoding @ a)
                  (Language.PureScript.Names.$fToJSONOpName_$ctoJSONList @ a)
                  (Language.PureScript.Names.$fToJSONOpName_$ctoEncodingList @ a) -}
1522672b880b192c6e05e6cf8a45712d
  $fToJSONOpName_$ctoEncoding ::
    Language.PureScript.Names.OpName a
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Strictness: <S,1*U(U,U,U)>, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ @ a :: Language.PureScript.Names.OpNameType
                   (x :: Language.PureScript.Names.OpName a) ->
                 Data.Aeson.Encoding.Builder.encodeToBuilder
                   (Data.Aeson.Types.Internal.$WString
                      x `cast` (Language.PureScript.Names.N:OpName[0] <a>_P)))
                  `cast`
                (forall (a :: <Language.PureScript.Names.OpNameType>_N).
                 <Language.PureScript.Names.OpName a>_R
                 ->_R Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                               <Data.Aeson.Types.Internal.Value>_P)) -}
1522672b880b192c6e05e6cf8a45712d
  $fToJSONOpName_$ctoEncodingList ::
    [Language.PureScript.Names.OpName a]
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ @ a :: Language.PureScript.Names.OpNameType ->
                 Data.Aeson.Encoding.Internal.list
                   @ (Language.PureScript.Names.OpName a)
                   (Language.PureScript.Names.$fToJSONOpName_$ctoEncoding @ a)) -}
1522672b880b192c6e05e6cf8a45712d
  $fToJSONOpName_$ctoJSONList ::
    [Language.PureScript.Names.OpName a]
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ @ a :: Language.PureScript.Names.OpNameType
                   (x :: [Language.PureScript.Names.OpName a]) ->
                 Data.Aeson.Types.Internal.$WArray
                   (Data.Vector.Generic.new
                      @ Data.Vector.Vector
                      @ Data.Aeson.Types.Internal.Value
                      (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                      (Data.Vector.Generic.New.unstream
                         @ Data.Vector.Vector
                         @ Data.Aeson.Types.Internal.Value
                         (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                         (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                            @ Data.Vector.Fusion.Util.Id
                            @ Data.Aeson.Types.Internal.Value
                            @ Data.Vector.Vector
                            Data.Vector.Fusion.Util.$fMonadId
                            Data.Vector.Fusion.Bundle.Size.Unknown
                            (GHC.Base.build
                               @ Data.Aeson.Types.Internal.Value
                               (\ @ b1
                                  (c :: Data.Aeson.Types.Internal.Value -> b1 -> b1)[OneShot]
                                  (n1 :: b1)[OneShot] ->
                                GHC.Base.foldr
                                  @ (Language.PureScript.Names.OpName a)
                                  @ b1
                                  (GHC.Base.mapFB
                                     @ Data.Aeson.Types.Internal.Value
                                     @ b1
                                     @ (Language.PureScript.Names.OpName a)
                                     c
                                     Data.Aeson.Types.Internal.$WString
                                       `cast`
                                     (Sym (Language.PureScript.Names.N:OpName[0] <a>_P)
                                      ->_R <Data.Aeson.Types.Internal.Value>_R))
                                  n1
                                  x)))))) -}
29f101e190cc99df85623423972e606f
  $fToJSONProperName ::
    Data.Aeson.Types.ToJSON.ToJSON
      (Language.PureScript.Names.ProperName a)
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ a :: Language.PureScript.Names.ProperNameType.
                  @ (Language.PureScript.Names.ProperName a)
                  Data.Aeson.Types.Internal.$WString
                    `cast`
                  (Sym (Language.PureScript.Names.N:ProperName[0] <a>_P)
                   ->_R <Data.Aeson.Types.Internal.Value>_R)
                  (Language.PureScript.Names.$fToJSONProperName_$ctoEncoding @ a)
                  (Language.PureScript.Names.$fToJSONProperName_$ctoJSONList @ a)
                  (Language.PureScript.Names.$fToJSONProperName_$ctoEncodingList
                     @ a) -}
29f101e190cc99df85623423972e606f
  $fToJSONProperName_$ctoEncoding ::
    Language.PureScript.Names.ProperName a
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Strictness: <S,1*U(U,U,U)>, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ @ a :: Language.PureScript.Names.ProperNameType
                   (x :: Language.PureScript.Names.ProperName a) ->
                 Data.Aeson.Encoding.Builder.encodeToBuilder
                   (Data.Aeson.Types.Internal.$WString
                      x `cast` (Language.PureScript.Names.N:ProperName[0] <a>_P)))
                  `cast`
                (forall (a :: <Language.PureScript.Names.ProperNameType>_N).
                 <Language.PureScript.Names.ProperName a>_R
                 ->_R Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                               <Data.Aeson.Types.Internal.Value>_P)) -}
29f101e190cc99df85623423972e606f
  $fToJSONProperName_$ctoEncodingList ::
    [Language.PureScript.Names.ProperName a]
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ @ a :: Language.PureScript.Names.ProperNameType ->
                 Data.Aeson.Encoding.Internal.list
                   @ (Language.PureScript.Names.ProperName a)
                   (Language.PureScript.Names.$fToJSONProperName_$ctoEncoding @ a)) -}
29f101e190cc99df85623423972e606f
  $fToJSONProperName_$ctoJSONList ::
    [Language.PureScript.Names.ProperName a]
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ @ a :: Language.PureScript.Names.ProperNameType
                   (x :: [Language.PureScript.Names.ProperName a]) ->
                 Data.Aeson.Types.Internal.$WArray
                   (Data.Vector.Generic.new
                      @ Data.Vector.Vector
                      @ Data.Aeson.Types.Internal.Value
                      (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                      (Data.Vector.Generic.New.unstream
                         @ Data.Vector.Vector
                         @ Data.Aeson.Types.Internal.Value
                         (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                         (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                            @ Data.Vector.Fusion.Util.Id
                            @ Data.Aeson.Types.Internal.Value
                            @ Data.Vector.Vector
                            Data.Vector.Fusion.Util.$fMonadId
                            Data.Vector.Fusion.Bundle.Size.Unknown
                            (GHC.Base.build
                               @ Data.Aeson.Types.Internal.Value
                               (\ @ b1
                                  (c :: Data.Aeson.Types.Internal.Value -> b1 -> b1)[OneShot]
                                  (n1 :: b1)[OneShot] ->
                                GHC.Base.foldr
                                  @ (Language.PureScript.Names.ProperName a)
                                  @ b1
                                  (GHC.Base.mapFB
                                     @ Data.Aeson.Types.Internal.Value
                                     @ b1
                                     @ (Language.PureScript.Names.ProperName a)
                                     c
                                     Data.Aeson.Types.Internal.$WString
                                       `cast`
                                     (Sym (Language.PureScript.Names.N:ProperName[0] <a>_P)
                                      ->_R <Data.Aeson.Types.Internal.Value>_R))
                                  n1
                                  x)))))) -}
5a70062bbdf29e6dc659ad8bf5326b50
  $fToJSONQualified ::
    Data.Aeson.Types.ToJSON.ToJSON a =>
    Data.Aeson.Types.ToJSON.ToJSON
      (Language.PureScript.Names.Qualified a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(U),C(C(C(C1(U(U,U))))),A,A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: Data.Aeson.Types.ToJSON.ToJSON a).
                  @ (Language.PureScript.Names.Qualified a)
                  (Language.PureScript.Names.$fToJSONQualified_$ctoJSON @ a v)
                  (Language.PureScript.Names.$fToJSONQualified_$ctoEncoding @ a v)
                  (Language.PureScript.Names.$fToJSONQualified_$ctoJSONList @ a v)
                  (Language.PureScript.Names.$fToJSONQualified_$ctoEncodingList
                     @ a
                     v) -}
5a70062bbdf29e6dc659ad8bf5326b50
  $fToJSONQualified_$ctoEncoding ::
    Data.Aeson.Types.ToJSON.ToJSON a =>
    Language.PureScript.Names.Qualified a
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 2,
     Strictness: <L,1*U(A,1*C1(C(C(C1(U(U,U))))),A,A)><S,1*U(1*U,U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (w :: Data.Aeson.Types.ToJSON.ToJSON a)
                   (w1 :: Language.PureScript.Names.Qualified a) ->
                 case w1 of ww { Language.PureScript.Names.Qualified ww1 ww2 ->
                 Language.PureScript.Names.$w$ctoEncoding @ a w ww1 ww2 }) -}
5a70062bbdf29e6dc659ad8bf5326b50
  $fToJSONQualified_$ctoEncodingList ::
    Data.Aeson.Types.ToJSON.ToJSON a =>
    [Language.PureScript.Names.Qualified a]
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 2, Strictness: <L,U(A,C(C(C(C1(U(U,U))))),A,A)><S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (1, False, False)
                (\ @ a ($dToJSON :: Data.Aeson.Types.ToJSON.ToJSON a) ->
                 Data.Aeson.Encoding.Internal.list
                   @ (Language.PureScript.Names.Qualified a)
                   (Language.PureScript.Names.$fToJSONQualified_$ctoEncoding
                      @ a
                      $dToJSON)) -}
5a70062bbdf29e6dc659ad8bf5326b50
  $fToJSONQualified_$ctoJSON ::
    Data.Aeson.Types.ToJSON.ToJSON a =>
    Language.PureScript.Names.Qualified a
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 2, Strictness: <L,1*U(1*C1(U),A,A,A)><S,1*U(1*U,U)>m2,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (w :: Data.Aeson.Types.ToJSON.ToJSON a)
                   (w1 :: Language.PureScript.Names.Qualified a) ->
                 case w1 of ww { Language.PureScript.Names.Qualified ww1 ww2 ->
                 case Language.PureScript.Names.$w$ctoJSON1
                        @ a
                        w
                        ww1
                        ww2 of ww3 { Unit# ww4 ->
                 Data.Aeson.Types.Internal.Array ww4 } }) -}
5a70062bbdf29e6dc659ad8bf5326b50
  $fToJSONQualified_$ctoJSONList ::
    Data.Aeson.Types.ToJSON.ToJSON a =>
    [Language.PureScript.Names.Qualified a]
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 2, Strictness: <L,U(C(U),A,A,A)><S,1*U>m2,
     Inline: (sat-args=0),
     Unfolding: InlineRule (1, False, False)
                (\ @ a ($dToJSON :: Data.Aeson.Types.ToJSON.ToJSON a) ->
                 let {
                   f5 :: Language.PureScript.Names.Qualified a
                         -> Data.Aeson.Types.Internal.Value
                     {- Arity: 1 -}
                   = Language.PureScript.Names.$fToJSONQualified_$ctoJSON @ a $dToJSON
                 } in
                 \ (x :: [Language.PureScript.Names.Qualified a]) ->
                 Data.Aeson.Types.Internal.$WArray
                   (Data.Vector.Generic.new
                      @ Data.Vector.Vector
                      @ Data.Aeson.Types.Internal.Value
                      (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                      (Data.Vector.Generic.New.unstream
                         @ Data.Vector.Vector
                         @ Data.Aeson.Types.Internal.Value
                         (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                         (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                            @ Data.Vector.Fusion.Util.Id
                            @ Data.Aeson.Types.Internal.Value
                            @ Data.Vector.Vector
                            Data.Vector.Fusion.Util.$fMonadId
                            Data.Vector.Fusion.Bundle.Size.Unknown
                            (GHC.Base.build
                               @ Data.Aeson.Types.Internal.Value
                               (\ @ b1
                                  (c :: Data.Aeson.Types.Internal.Value -> b1 -> b1)[OneShot]
                                  (n1 :: b1)[OneShot] ->
                                GHC.Base.foldr
                                  @ (Language.PureScript.Names.Qualified a)
                                  @ b1
                                  (GHC.Base.mapFB
                                     @ Data.Aeson.Types.Internal.Value
                                     @ b1
                                     @ (Language.PureScript.Names.Qualified a)
                                     c
                                     f5)
                                  n1
                                  x)))))) -}
5a70062bbdf29e6dc659ad8bf5326b50
  $fTraversableQualified ::
    Data.Traversable.Traversable Language.PureScript.Names.Qualified
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Names.Qualified
                  Language.PureScript.Names.$fFunctorQualified
                  Language.PureScript.Names.$fFoldableQualified
                  Language.PureScript.Names.$fTraversableQualified_$ctraverse
                  Language.PureScript.Names.$fTraversableQualified_$csequenceA
                  Language.PureScript.Names.$fTraversableQualified_$cmapM
                  Language.PureScript.Names.$fTraversableQualified_$csequence -}
5a70062bbdf29e6dc659ad8bf5326b50
  $fTraversableQualified_$cmapM ::
    GHC.Base.Monad m =>
    (a -> m b)
    -> Language.PureScript.Names.Qualified a
    -> m (Language.PureScript.Names.Qualified b)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S(S(C(C(S))L)LLLLL)LLLL),1*U(1*U(1*U(1*C1(C1(U)),A),A,A,A,A,A),A,A,A,A)><L,1*C1(U)><S,1*U(U,U)>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ @ m :: * -> * @ a @ b ($dMonad :: GHC.Base.Monad m) ->
                 Language.PureScript.Names.$fTraversableQualified_$ctraverse
                   @ m
                   @ a
                   @ b
                   (GHC.Base.$p1Monad @ m $dMonad)) -}
5a70062bbdf29e6dc659ad8bf5326b50
  $fTraversableQualified_$csequence ::
    GHC.Base.Monad m =>
    Language.PureScript.Names.Qualified (m a)
    -> m (Language.PureScript.Names.Qualified a)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S(C(C(S))L)LLLLL)LLLL),1*U(1*U(1*U(1*C1(C1(U)),A),A,A,A,A,A),A,A,A,A)><S,1*U(U,U)>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ @ m :: * -> * @ a ($dMonad :: GHC.Base.Monad m) ->
                 let {
                   $dApplicative :: GHC.Base.Applicative m
                   = GHC.Base.$p1Monad @ m $dMonad
                 } in
                 \ (eta :: Language.PureScript.Names.Qualified (m a)) ->
                 case eta of wild { Language.PureScript.Names.Qualified a1 a2 ->
                 GHC.Base.fmap
                   @ m
                   (GHC.Base.$p1Applicative @ m $dApplicative)
                   @ a
                   @ (Language.PureScript.Names.Qualified a)
                   (\ (b2 :: a) -> Language.PureScript.Names.Qualified @ a a1 b2)
                   a2 }) -}
5a70062bbdf29e6dc659ad8bf5326b50
  $fTraversableQualified_$csequenceA ::
    GHC.Base.Applicative f =>
    Language.PureScript.Names.Qualified (f a)
    -> f (Language.PureScript.Names.Qualified a)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(C(C(S))L)LLLLL),1*U(1*U(1*C1(C1(U)),A),A,A,A,A,A)><S,1*U(U,U)>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ @ f :: * -> *
                   @ a
                   ($dApplicative :: GHC.Base.Applicative f)
                   (eta :: Language.PureScript.Names.Qualified (f a)) ->
                 case eta of wild { Language.PureScript.Names.Qualified a1 a2 ->
                 GHC.Base.fmap
                   @ f
                   (GHC.Base.$p1Applicative @ f $dApplicative)
                   @ a
                   @ (Language.PureScript.Names.Qualified a)
                   (\ (b2 :: a) -> Language.PureScript.Names.Qualified @ a a1 b2)
                   a2 }) -}
5a70062bbdf29e6dc659ad8bf5326b50
  $fTraversableQualified_$ctraverse ::
    GHC.Base.Applicative f =>
    (a -> f b)
    -> Language.PureScript.Names.Qualified a
    -> f (Language.PureScript.Names.Qualified b)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S(C(C(S))L)LLLLL),1*U(1*U(1*C1(C1(U)),A),A,A,A,A,A)><L,1*C1(U)><S,1*U(U,U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ f :: * -> *
                   @ a
                   @ b
                   (w :: GHC.Base.Applicative f)
                   (w1 :: a -> f b)
                   (w2 :: Language.PureScript.Names.Qualified a) ->
                 case w2 of ww { Language.PureScript.Names.Qualified ww1 ww2 ->
                 Language.PureScript.Names.$w$ctraverse
                   @ f
                   @ a
                   @ b
                   w
                   w1
                   ww1
                   ww2 }) -}
3811f49be7cddca2d05c2a3b8f522f07
  $tc'AnyOpName :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11063812445558217586##
                   4750791578697331214##
                   Language.PureScript.Names.$trModule
                   Language.PureScript.Names.$tc'AnyOpName2
                   0#
                   Language.PureScript.Names.$tc'AnyOpName1) -}
c9d47b06e755088a506b5ffa9c0e3010
  $tc'AnyOpName1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
8266dda27c0e72a76268c9993752568e
  $tc'AnyOpName2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Names.$tc'AnyOpName3) -}
46dbf7245267df4de149fc6fe994bbde
  $tc'AnyOpName3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'AnyOpName"#) -}
d55544a691ce5a4cf17e9c788c99da68
  $tc'ClassName :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4244569175121916260##
                   15472121067868645785##
                   Language.PureScript.Names.$trModule
                   Language.PureScript.Names.$tc'ClassName2
                   0#
                   Language.PureScript.Names.$tc'ClassName1) -}
eb844883f1a7494938224c564f7ba0ae
  $tc'ClassName1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
b5ee7e59702359619b9ddc253f4f4db1
  $tc'ClassName2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Names.$tc'ClassName3) -}
9567506c2463eecd0bb8c63866f48d28
  $tc'ClassName3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ClassName"#) -}
ba6b05af51515c81a05a9f5ba39dddc4
  $tc'ConstructorName :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13746433937711141823##
                   1405558636326411119##
                   Language.PureScript.Names.$trModule
                   Language.PureScript.Names.$tc'ConstructorName1
                   0#
                   Language.PureScript.Names.$tc'ClassName1) -}
a6c9bb1c8cbb7e4f9e3cd49ce98b585a
  $tc'ConstructorName1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Names.$tc'ConstructorName2) -}
56717ff0b64fa42c1eedcb1c68148c0f
  $tc'ConstructorName2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ConstructorName"#) -}
41bc8250a37d0bc4db3468bd556bd8ea
  $tc'DctorName :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5138881869164353869##
                   6663001223341366490##
                   Language.PureScript.Names.$trModule
                   Language.PureScript.Names.$tc'DctorName2
                   0#
                   Language.PureScript.Names.$tc'DctorName1) -}
b4b84b66f025e92c9fb237dd1af1eac1
  $tc'DctorName1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
3518c50505c2b0772caab725c77ee70d
  $tc'DctorName2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Names.$tc'DctorName3) -}
ccc49c79586c7c39c3c2e3ffe380ed39
  $tc'DctorName3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'DctorName"#) -}
8bc1c3f4fd3f776d1e26fe66afad57e3
  $tc'GenIdent :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10699666020664715289##
                   2419014935692674915##
                   Language.PureScript.Names.$trModule
                   Language.PureScript.Names.$tc'GenIdent2
                   0#
                   Language.PureScript.Names.$tc'GenIdent1) -}
9013b0d0124fe568d099ef15b630e997
  $tc'GenIdent1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
9289bc86f0159810ddc6bd24036bc64e
  $tc'GenIdent2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Names.$tc'GenIdent3) -}
0f326cb3770b36ff791b3d7b00447826
  $tc'GenIdent3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'GenIdent"#) -}
4ac6ed7f28a8d6a1d081af31d2d39de1
  $tc'Ident :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12899928870518724491##
                   13599820360658115238##
                   Language.PureScript.Names.$trModule
                   Language.PureScript.Names.$tc'Ident2
                   0#
                   Language.PureScript.Names.$tc'Ident1) -}
3cef1355c0a801d16ec1e544821d8587
  $tc'Ident1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
de9b741026de9d57f85b7578f2a511f7
  $tc'Ident2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Names.$tc'Ident3) -}
c0467162416b61dbac29c5593881538d
  $tc'Ident3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Ident"#) -}
8701614fd5ff7f3bea31d0e35c9ea854
  $tc'IdentName :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16970836260538022527##
                   13264184094212840673##
                   Language.PureScript.Names.$trModule
                   Language.PureScript.Names.$tc'IdentName2
                   0#
                   Language.PureScript.Names.$tc'IdentName1) -}
181e54111e037027c6d490876d67ead5
  $tc'IdentName1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
62cfe753cbbb4f579ca68ee1685add6a
  $tc'IdentName2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Names.$tc'IdentName3) -}
8f39164ac5bf6eb0bc0981a58f0f9ea3
  $tc'IdentName3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IdentName"#) -}
9965396f89a0002687042318cbb9ceae
  $tc'KiName :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5035656113951529758##
                   12362764815294384419##
                   Language.PureScript.Names.$trModule
                   Language.PureScript.Names.$tc'KiName2
                   0#
                   Language.PureScript.Names.$tc'KiName1) -}
4c7299db4838948aba21354e22a9e039
  $tc'KiName1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
a7dfc7f7fc6165c4df16ecf3588f830b
  $tc'KiName2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Names.$tc'KiName3) -}
66914de5fb6f68e78a9b9b3eff402699
  $tc'KiName3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'KiName"#) -}
324f383024e506b29af57d374543a436
  $tc'KindName :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13068580164090983503##
                   15017801153469035582##
                   Language.PureScript.Names.$trModule
                   Language.PureScript.Names.$tc'KindName1
                   0#
                   Language.PureScript.Names.$tc'ClassName1) -}
ee8fad8fd96184420eb0872da68b0c6a
  $tc'KindName1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Names.$tc'KindName2) -}
d2d58194edc5d94e61f75f027378f4e6
  $tc'KindName2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'KindName"#) -}
3d4d04e4e066c7a790d5a9aef3998463
  $tc'ModName :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16316987979230595309##
                   9648159094002953837##
                   Language.PureScript.Names.$trModule
                   Language.PureScript.Names.$tc'ModName2
                   0#
                   Language.PureScript.Names.$tc'ModName1) -}
418724ae6bd374987b9b538d266ae463
  $tc'ModName1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
e92db888e627de7c07bae09988f2a705
  $tc'ModName2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Names.$tc'ModName3) -}
1c6ba677ebea873a2a61db9e21f4b2bf
  $tc'ModName3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ModName"#) -}
de899d937c3c9de4e43ad4cdfe5e640e
  $tc'ModuleName :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12623710853359256088##
                   11443289810725916239##
                   Language.PureScript.Names.$trModule
                   Language.PureScript.Names.$tc'ModuleName2
                   0#
                   Language.PureScript.Names.$tc'ModuleName1) -}
ac1540230f98bf6b3e447ddea3b47497
  $tc'ModuleName1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
64f9ab7bb2ec725ba14fbf89575eb6b5
  $tc'ModuleName2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Names.$tc'ModuleName3) -}
4efda9bee16a97a78fb5d76172b50597
  $tc'ModuleName3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ModuleName"#) -}
fc902118ada4a50a377f19b7e70b1e92
  $tc'Namespace :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8032308190167675091##
                   7755824577762971996##
                   Language.PureScript.Names.$trModule
                   Language.PureScript.Names.$tc'Namespace1
                   0#
                   Language.PureScript.Names.$tc'ClassName1) -}
56ac500b2cb730a4c5a4bb25fff2b652
  $tc'Namespace1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Names.$tc'Namespace2) -}
a79d9ef9ce9cd24b97c488ab210d6a9d
  $tc'Namespace2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Namespace"#) -}
cc53d07f4113c0ed78b3d276cc5f2705
  $tc'OpName :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   462534477719664788##
                   13592135877434331118##
                   Language.PureScript.Names.$trModule
                   Language.PureScript.Names.$tc'OpName2
                   1#
                   Language.PureScript.Names.$tc'OpName1) -}
b581410d14e961639567463c5b50f141
  $tc'OpName1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
ddbd6dcbeae53ee4c4f58f030da46991
  $tc'OpName2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Names.$tc'OpName3) -}
155a44e7de540a24fdba3d2032f8f79b
  $tc'OpName3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'OpName"#) -}
081c6c62beebcea1963a1fa1ee1f3790
  $tc'ProperName :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6805976522180277859##
                   6884518516104833900##
                   Language.PureScript.Names.$trModule
                   Language.PureScript.Names.$tc'ProperName2
                   1#
                   Language.PureScript.Names.$tc'ProperName1) -}
042cc83a89d082acac1a8fc46e1ba9b6
  $tc'ProperName1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
68dca3d361063eb7d3bb3848782afec2
  $tc'ProperName2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Names.$tc'ProperName3) -}
f73b179b3edf432ab4a5f9f5ba84fd7d
  $tc'ProperName3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ProperName"#) -}
795d54468cfc6f173e9f30dff91a5ab1
  $tc'Qualified :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11257439179192116579##
                   13242346156124669869##
                   Language.PureScript.Names.$trModule
                   Language.PureScript.Names.$tc'Qualified2
                   1#
                   Language.PureScript.Names.$tc'Qualified1) -}
902750023a0381bcdc662b10dfe8112b
  $tc'Qualified1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
6226c53b6f414e0e81ac31a9aafacc1a
  $tc'Qualified2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Names.$tc'Qualified3) -}
de80b59f9276ff943f96acd8893828ec
  $tc'Qualified3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Qualified"#) -}
ba37d7e56f8b4907c091247416f8a533
  $tc'TyClassName :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13491746015438651460##
                   12970276044003284047##
                   Language.PureScript.Names.$trModule
                   Language.PureScript.Names.$tc'TyClassName2
                   0#
                   Language.PureScript.Names.$tc'TyClassName1) -}
cfca1018c8cc97d0c736617896263e3c
  $tc'TyClassName1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
6f867ad87ee7798588fa543d588f1115
  $tc'TyClassName2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Names.$tc'TyClassName3) -}
959fe260178924c194fc8d9823720a00
  $tc'TyClassName3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TyClassName"#) -}
896d148a3324170204f6b86b60a2c237
  $tc'TyName :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10503292567703711425##
                   11377048665582991614##
                   Language.PureScript.Names.$trModule
                   Language.PureScript.Names.$tc'TyName2
                   0#
                   Language.PureScript.Names.$tc'TyName1) -}
f65f0a22bd9128652453fdc0bfcf629c
  $tc'TyName1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
ea395a48ba0c1e1e6cddc534873cef33
  $tc'TyName2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Names.$tc'TyName3) -}
8d2cf59ec0e95d3190adc5cb4ae776e2
  $tc'TyName3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TyName"#) -}
e772397a95811c5c372112056685b113
  $tc'TyOpName :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14731870702628502661##
                   12520832696470780117##
                   Language.PureScript.Names.$trModule
                   Language.PureScript.Names.$tc'TyOpName2
                   0#
                   Language.PureScript.Names.$tc'TyOpName1) -}
aac133e2e2909c220fd13cd694bbfd47
  $tc'TyOpName1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
1486bebb27db779a5869047270405a8a
  $tc'TyOpName2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Names.$tc'TyOpName3) -}
ddcf4bbb4f9ce8afc74275c90b0dc2ed
  $tc'TyOpName3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TyOpName"#) -}
b2a76397bc5eac34ad344298986602df
  $tc'TypeName :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2860687680312604625##
                   12072376337326335684##
                   Language.PureScript.Names.$trModule
                   Language.PureScript.Names.$tc'TypeName1
                   0#
                   Language.PureScript.Names.$tc'ClassName1) -}
e5a702a604d80d8051cb2c10c6bf1845
  $tc'TypeName1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Names.$tc'TypeName2) -}
809937e6a87cf649e53f8cc4a5d001b3
  $tc'TypeName2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TypeName"#) -}
614e1fbf2d47086fc0314b27b28c0737
  $tc'TypeOpName :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17630913683048998854##
                   11025287408593616065##
                   Language.PureScript.Names.$trModule
                   Language.PureScript.Names.$tc'TypeOpName1
                   0#
                   Language.PureScript.Names.$tc'AnyOpName1) -}
3d2a658c4c7bb976d509a8548d493789
  $tc'TypeOpName1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Names.$tc'TypeOpName2) -}
14d3d5af828d64aa69b43ef0742ada9a
  $tc'TypeOpName2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TypeOpName"#) -}
2d87cf275a5580f989bb26071d0b4011
  $tc'UnusedIdent :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8480936365686859329##
                   11520490687634837912##
                   Language.PureScript.Names.$trModule
                   Language.PureScript.Names.$tc'UnusedIdent2
                   0#
                   Language.PureScript.Names.$tc'UnusedIdent1) -}
61de0f786d13097fb2a283c832810874
  $tc'UnusedIdent1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
742c3139f98c1106f6fba0aed7232d8c
  $tc'UnusedIdent2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Names.$tc'UnusedIdent3) -}
92e5c0e7f5a8d89b6cdaa4da3207f7c2
  $tc'UnusedIdent3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'UnusedIdent"#) -}
25d5dc34340d1ec7102f302677afd6f9
  $tc'ValOpName :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   738994662486607769##
                   1598926912075599411##
                   Language.PureScript.Names.$trModule
                   Language.PureScript.Names.$tc'ValOpName2
                   0#
                   Language.PureScript.Names.$tc'ValOpName1) -}
1c055289130bf0b6e88a34a72fdd9dd8
  $tc'ValOpName1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
d708e88b248a618526867f07eef2192a
  $tc'ValOpName2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Names.$tc'ValOpName3) -}
67cd86a749c23841229e0990ee5ad451
  $tc'ValOpName3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ValOpName"#) -}
959653aa8259aded9bcbd437c9a09ad1
  $tc'ValueOpName :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1472502420484064891##
                   8664859942451051817##
                   Language.PureScript.Names.$trModule
                   Language.PureScript.Names.$tc'ValueOpName1
                   0#
                   Language.PureScript.Names.$tc'AnyOpName1) -}
24d1d7c478ff3a79969c386e9e12fc61
  $tc'ValueOpName1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Names.$tc'ValueOpName2) -}
26629c723d642ca3090c08660289aef5
  $tc'ValueOpName2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ValueOpName"#) -}
966a36c6865747ba7a35e9453ef2c07c
  $tcIdent :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4736350606529611655##
                   11809961699281550554##
                   Language.PureScript.Names.$trModule
                   Language.PureScript.Names.$tcIdent1
                   0#
                   GHC.Types.krep$*) -}
5173d9da616737932cebe860827e7a8b
  $tcIdent1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Names.$fToJSONIdent14) -}
21292af762458df34c7ed28b5cf0afa0
  $tcModuleName :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7736024956858346757##
                   7097432721269033470##
                   Language.PureScript.Names.$trModule
                   Language.PureScript.Names.$tcModuleName1
                   0#
                   GHC.Types.krep$*) -}
ec57bbd3ffa44c3b92b3275b96620132
  $tcModuleName1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Names.$tcModuleName2) -}
0e8e15098bb7392a3bf8cfb004794b3c
  $tcModuleName2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ModuleName"#) -}
94e3392601ad2d27ffa04da22f73728c
  $tcName :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4505729185512127401##
                   11563373492365941236##
                   Language.PureScript.Names.$trModule
                   Language.PureScript.Names.$tcName1
                   0#
                   GHC.Types.krep$*) -}
b7f6ed842647183bc1b9a46da3376a64
  $tcName1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Names.$tcName2) -}
cf2398dfaf113a80f301cce29bd94bb8
  $tcName2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Name"#) -}
d3a188a42789d6dbb346a1df8d286f80
  $tcOpName :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10845635388788390008##
                   3439368677896423222##
                   Language.PureScript.Names.$trModule
                   Language.PureScript.Names.$tcOpName2
                   0#
                   Language.PureScript.Names.$tcOpName1) -}
c13c1cbe29fe0634a942d231ecd1f850
  $tcOpName1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
7152d9b096fb9ed909db7955c3d94b34
  $tcOpName2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Names.$tcOpName3) -}
45d504780a64e8d5fd5d8b7ed01fe73e
  $tcOpName3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("OpName"#) -}
af479802d3200ca4c99104b0f0c45726
  $tcOpNameType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15513340502054109558##
                   9420234393991546320##
                   Language.PureScript.Names.$trModule
                   Language.PureScript.Names.$tcOpNameType1
                   0#
                   GHC.Types.krep$*) -}
2d2c6d285933e81ecdc790890efe4ef5
  $tcOpNameType1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Names.$tcOpNameType2) -}
fee06c5636a74c97d73fc65e5e15e988
  $tcOpNameType2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("OpNameType"#) -}
4e9d96fb81b94ee27746cdac1c997b1f
  $tcProperName :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   90153453291990563##
                   8617380980527325692##
                   Language.PureScript.Names.$trModule
                   Language.PureScript.Names.$tcProperName2
                   0#
                   Language.PureScript.Names.$tcProperName1) -}
ac7d8df6464afee7b5284aeea92f5cb9
  $tcProperName1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
64dcfc0e8fb0e89d87a58603e47ce167
  $tcProperName2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Names.$tcProperName3) -}
565d2718f296883fc277c6204cc58436
  $tcProperName3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ProperName"#) -}
56a1b5231dc5f575c21a71fae6cc7ef4
  $tcProperNameType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11624973255998651630##
                   5123140226058184308##
                   Language.PureScript.Names.$trModule
                   Language.PureScript.Names.$tcProperNameType1
                   0#
                   GHC.Types.krep$*) -}
86abc4932fd13d2d1d01f1882b30b3ed
  $tcProperNameType1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Names.$tcProperNameType2) -}
6e64c83a222f8c3a0846959fcf1b81ec
  $tcProperNameType2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ProperNameType"#) -}
e81ee2c5bc0ee0048363cc7377ed2059
  $tcQualified :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3815947644968409746##
                   6323662668059409650##
                   Language.PureScript.Names.$trModule
                   Language.PureScript.Names.$tcQualified1
                   0#
                   GHC.Types.krep$*Arr*) -}
e72087fb9085ad27ea7f707887d32eda
  $tcQualified1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Names.$tcQualified2) -}
b2834ccf9b8dccfc24882e0337881adb
  $tcQualified2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Qualified"#) -}
3513bb6faed776cba2174b2cacd6e1ad
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Language.PureScript.Names.$trModule3
                   Language.PureScript.Names.$trModule1) -}
d3ec45226ff46067b828306ca60bb920
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Names.$trModule2) -}
d2fb21ef33ad3869bbefdb8834a05895
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Language.PureScript.Names"#) -}
45d40d1eef60acbf8adec64d5d887e32
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Names.$trModule4) -}
958b5529de189ef4134911e9cf5a99e2
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"#) -}
5a70062bbdf29e6dc659ad8bf5326b50
  $w$c< ::
    GHC.Classes.Ord a =>
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> a
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> a
    -> GHC.Types.Bool
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,A,1*C1(C1(U)),A,A,A,A,A)><S,1*U><L,U><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Classes.Ord a)
                   (ww :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww1 :: a)
                   (ww2 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww3 :: a) ->
                 case ww of wild {
                   GHC.Base.Nothing
                   -> case ww2 of wild1 {
                        GHC.Base.Nothing -> GHC.Classes.< @ a w ww1 ww3
                        GHC.Base.Just ipv -> GHC.Types.True }
                   GHC.Base.Just a2
                   -> case ww2 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.False
                        GHC.Base.Just b1
                        -> case GHC.Classes.$fOrd[]_$ccompare
                                  @ (Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.Namespace)
                                  (Language.PureScript.Names.$fOrdProperName
                                     @ 'Language.PureScript.Names.Namespace)
                                  a2 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                  b1 `cast` (Language.PureScript.Names.N:ModuleName[0]) of wild2 {
                             GHC.Types.LT -> GHC.Types.True
                             GHC.Types.EQ -> GHC.Classes.< @ a w ww1 ww3
                             GHC.Types.GT -> GHC.Types.False } } }) -}
5a70062bbdf29e6dc659ad8bf5326b50
  $w$c== ::
    GHC.Classes.Eq a =>
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> a
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> a
    -> GHC.Types.Bool
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S,1*U><L,U><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Classes.Eq a)
                   (ww :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww1 :: a)
                   (ww2 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww3 :: a) ->
                 case ww of wild {
                   GHC.Base.Nothing
                   -> case ww2 of wild1 {
                        GHC.Base.Nothing -> GHC.Classes.== @ a w ww1 ww3
                        GHC.Base.Just ipv -> GHC.Types.False }
                   GHC.Base.Just a1
                   -> case ww2 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.False
                        GHC.Base.Just b1
                        -> case GHC.Classes.$fEq[]_$c==
                                  @ (Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.Namespace)
                                  (Language.PureScript.Names.$fEqProperName
                                     @ 'Language.PureScript.Names.Namespace)
                                  a1 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                  b1 `cast` (Language.PureScript.Names.N:ModuleName[0]) of wild2 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True -> GHC.Classes.== @ a w ww1 ww3 } } }) -}
5a70062bbdf29e6dc659ad8bf5326b50
  $w$ccompare ::
    GHC.Classes.Ord a =>
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> a
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> a
    -> GHC.Types.Ordering
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(C1(U)),A,A,A,A,A,A)><S,1*U><L,U><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Classes.Ord a)
                   (ww :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww1 :: a)
                   (ww2 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww3 :: a) ->
                 case ww of wild {
                   GHC.Base.Nothing
                   -> case ww2 of wild1 {
                        GHC.Base.Nothing -> GHC.Classes.compare @ a w ww1 ww3
                        GHC.Base.Just ipv -> GHC.Types.LT }
                   GHC.Base.Just a2
                   -> case ww2 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.GT
                        GHC.Base.Just b1
                        -> case GHC.Classes.$fOrd[]_$ccompare
                                  @ (Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.Namespace)
                                  (Language.PureScript.Names.$fOrdProperName
                                     @ 'Language.PureScript.Names.Namespace)
                                  a2 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                  b1 `cast` (Language.PureScript.Names.N:ModuleName[0]) of wild2 {
                             GHC.Types.LT -> GHC.Types.LT
                             GHC.Types.EQ -> GHC.Classes.compare @ a w ww1 ww3
                             GHC.Types.GT -> GHC.Types.GT } } }) -}
5a70062bbdf29e6dc659ad8bf5326b50
  $w$crnf ::
    Control.DeepSeq.NFData a =>
    GHC.Base.Maybe Language.PureScript.Names.ModuleName -> a -> ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S),1*C1(U())><S,1*U><L,U>, Inline: [0],
     Unfolding: (\ @ a
                   (w :: Control.DeepSeq.NFData a)
                   (ww :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww1 :: a) ->
                 case ww of wild {
                   GHC.Base.Nothing
                   -> w `cast` (Control.DeepSeq.N:NFData[0] <a>_N) ww1
                   GHC.Base.Just x
                   -> case Language.PureScript.Names.$fNFDataModuleName_go
                             x `cast`
                             (Language.PureScript.Names.N:ModuleName[0]) of wild1 { () ->
                      w `cast` (Control.DeepSeq.N:NFData[0] <a>_N) ww1 } }) -}
5a70062bbdf29e6dc659ad8bf5326b50
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> Language.PureScript.Names.ModuleName
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: Language.PureScript.Names.ModuleName)
                   (w1 :: GHC.Base.String) ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     GHC.CString.unpackAppendCString#
                       Language.PureScript.Names.$fShowModuleName5
                       (case w `cast`
                             (Language.PureScript.Names.N:ModuleName[0]) of wild {
                          [] -> GHC.CString.unpackAppendCString# GHC.Show.showList__4 x
                          : x1 xs
                          -> GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.showList__3
                               (GHC.CString.unpackAppendCString#
                                  Language.PureScript.Names.$fShowModuleName4
                                  (GHC.CString.unpackAppendCString#
                                     Language.PureScript.Names.$fShowModuleName3
                                     (case Data.Text.Show.$w$cshowsPrec
                                             x1
                                               `cast`
                                             (Language.PureScript.Names.N:ProperName[0]
                                                  <'Language.PureScript.Names.Namespace>_P)
                                             (GHC.CString.unpackAppendCString#
                                                Language.PureScript.Names.$fShowModuleName2
                                                (let {
                                                   lvl43 :: [GHC.Types.Char]
                                                   = GHC.Types.:
                                                       @ GHC.Types.Char
                                                       GHC.Show.showList__2
                                                       x
                                                 } in
                                                 letrec {
                                                   showl :: [Language.PureScript.Names.ProperName
                                                               'Language.PureScript.Names.Namespace]
                                                            -> GHC.Base.String
                                                     {- Arity: 1, Strictness: <S,1*U> -}
                                                   = \ (ds2 :: [Language.PureScript.Names.ProperName
                                                                  'Language.PureScript.Names.Namespace]) ->
                                                     case ds2 of wild1 {
                                                       [] -> lvl43
                                                       : y ys
                                                       -> GHC.Types.:
                                                            @ GHC.Types.Char
                                                            GHC.Show.showList__1
                                                            (GHC.CString.unpackAppendCString#
                                                               Language.PureScript.Names.$fShowModuleName4
                                                               (GHC.CString.unpackAppendCString#
                                                                  Language.PureScript.Names.$fShowModuleName3
                                                                  (case Data.Text.Show.$w$cshowsPrec
                                                                          y `cast`
                                                                          (Language.PureScript.Names.N:ProperName[0]
                                                                               <'Language.PureScript.Names.Namespace>_P)
                                                                          (GHC.CString.unpackAppendCString#
                                                                             Language.PureScript.Names.$fShowModuleName2
                                                                             (showl
                                                                                ys)) of ww1 { (#,#) ww2 ww3 ->
                                                                   GHC.Types.:
                                                                     @ GHC.Types.Char
                                                                     ww2
                                                                     ww3 }))) }
                                                 } in
                                                 showl xs)) of ww1 { (#,#) ww2 ww3 ->
                                      GHC.Types.: @ GHC.Types.Char ww2 ww3 }))) })
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT -> p w1
                   1#
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 w1)) }) -}
184494d9e734645f374e2a0fce32bfac
  $w$cshowsPrec1 ::
    GHC.Prim.Int# -> Language.PureScript.Names.Name -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: Language.PureScript.Names.Name) ->
                 case w of wild {
                   Language.PureScript.Names.IdentName b1
                   -> let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = Language.PureScript.Names.$fShowIdent_$cshowsPrec
                            Language.PureScript.Names.$fShowIdent7
                            b1
                      } in
                      case GHC.Prim.>=# ww 11# of lwild {
                        DEFAULT
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             Language.PureScript.Names.$fShowName18
                             (g x)
                        1#
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Language.PureScript.Names.$fShowName18
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))) }
                   Language.PureScript.Names.ValOpName b1
                   -> case GHC.Prim.>=# ww 11# of lwild {
                        DEFAULT
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             Language.PureScript.Names.$fShowName16
                             (Language.PureScript.Names.$w$cshowsPrec3
                                @ 'Language.PureScript.Names.ValueOpName
                                11#
                                b1
                                x)
                        1#
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Language.PureScript.Names.$fShowName16
                                (Language.PureScript.Names.$w$cshowsPrec3
                                   @ 'Language.PureScript.Names.ValueOpName
                                   11#
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))) }
                   Language.PureScript.Names.TyName b1
                   -> case GHC.Prim.>=# ww 11# of lwild {
                        DEFAULT
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             Language.PureScript.Names.$fShowName12
                             (Language.PureScript.Names.$w$cshowsPrec2
                                @ 'Language.PureScript.Names.TypeName
                                11#
                                b1
                                x)
                        1#
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Language.PureScript.Names.$fShowName12
                                (Language.PureScript.Names.$w$cshowsPrec2
                                   @ 'Language.PureScript.Names.TypeName
                                   11#
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))) }
                   Language.PureScript.Names.TyOpName b1
                   -> case GHC.Prim.>=# ww 11# of lwild {
                        DEFAULT
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             Language.PureScript.Names.$fShowName10
                             (Language.PureScript.Names.$w$cshowsPrec3
                                @ 'Language.PureScript.Names.TypeOpName
                                11#
                                b1
                                x)
                        1#
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Language.PureScript.Names.$fShowName10
                                (Language.PureScript.Names.$w$cshowsPrec3
                                   @ 'Language.PureScript.Names.TypeOpName
                                   11#
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))) }
                   Language.PureScript.Names.DctorName b1
                   -> case GHC.Prim.>=# ww 11# of lwild {
                        DEFAULT
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             Language.PureScript.Names.$fShowName8
                             (Language.PureScript.Names.$w$cshowsPrec2
                                @ 'Language.PureScript.Names.ConstructorName
                                11#
                                b1
                                x)
                        1#
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Language.PureScript.Names.$fShowName8
                                (Language.PureScript.Names.$w$cshowsPrec2
                                   @ 'Language.PureScript.Names.ConstructorName
                                   11#
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))) }
                   Language.PureScript.Names.TyClassName b1
                   -> case GHC.Prim.>=# ww 11# of lwild {
                        DEFAULT
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             Language.PureScript.Names.$fShowName6
                             (Language.PureScript.Names.$w$cshowsPrec2
                                @ 'Language.PureScript.Names.ClassName
                                11#
                                b1
                                x)
                        1#
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Language.PureScript.Names.$fShowName6
                                (Language.PureScript.Names.$w$cshowsPrec2
                                   @ 'Language.PureScript.Names.ClassName
                                   11#
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))) }
                   Language.PureScript.Names.ModName b1
                   -> case GHC.Prim.>=# ww 11# of lwild {
                        DEFAULT
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             Language.PureScript.Names.$fShowName4
                             (Language.PureScript.Names.$w$cshowsPrec 11# b1 x)
                        1#
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Language.PureScript.Names.$fShowName4
                                (Language.PureScript.Names.$w$cshowsPrec
                                   11#
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))) }
                   Language.PureScript.Names.KiName b1
                   -> case GHC.Prim.>=# ww 11# of lwild {
                        DEFAULT
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             Language.PureScript.Names.$fShowName2
                             (Language.PureScript.Names.$w$cshowsPrec2
                                @ 'Language.PureScript.Names.KindName
                                11#
                                b1
                                x)
                        1#
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Language.PureScript.Names.$fShowName2
                                (Language.PureScript.Names.$w$cshowsPrec2
                                   @ 'Language.PureScript.Names.KindName
                                   11#
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))) } }) -}
29f101e190cc99df85623423972e606f
  $w$cshowsPrec2 ::
    GHC.Prim.Int#
    -> Language.PureScript.Names.ProperName a
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><L,1*U(U,U,U)><L,U>, Inline: [0],
     Unfolding: (\ @ a :: Language.PureScript.Names.ProperNameType
                   (ww :: GHC.Prim.Int#)
                   (w :: Language.PureScript.Names.ProperName a)
                   (w1 :: GHC.Base.String) ->
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> GHC.CString.unpackAppendCString#
                        Language.PureScript.Names.$fShowModuleName4
                        (GHC.CString.unpackAppendCString#
                           Language.PureScript.Names.$fShowModuleName3
                           (case Data.Text.Show.$w$cshowsPrec
                                   w `cast` (Language.PureScript.Names.N:ProperName[0] <a>_P)
                                   (GHC.CString.unpackAppendCString#
                                      Language.PureScript.Names.$fShowModuleName2
                                      w1) of ww1 { (#,#) ww2 ww3 ->
                            GHC.Types.: @ GHC.Types.Char ww2 ww3 }))
                   1#
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.CString.unpackAppendCString#
                           Language.PureScript.Names.$fShowModuleName4
                           (GHC.CString.unpackAppendCString#
                              Language.PureScript.Names.$fShowModuleName3
                              (case Data.Text.Show.$w$cshowsPrec
                                      w `cast` (Language.PureScript.Names.N:ProperName[0] <a>_P)
                                      (GHC.CString.unpackAppendCString#
                                         Language.PureScript.Names.$fShowModuleName2
                                         (GHC.Types.:
                                            @ GHC.Types.Char
                                            GHC.Show.$fShow(,)2
                                            w1)) of ww1 { (#,#) ww2 ww3 ->
                               GHC.Types.: @ GHC.Types.Char ww2 ww3 }))) }) -}
1522672b880b192c6e05e6cf8a45712d
  $w$cshowsPrec3 ::
    GHC.Prim.Int#
    -> Language.PureScript.Names.OpName a
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><L,1*U(U,U,U)><L,U>, Inline: [0],
     Unfolding: (\ @ a :: Language.PureScript.Names.OpNameType
                   (ww :: GHC.Prim.Int#)
                   (w :: Language.PureScript.Names.OpName a)
                   (w1 :: GHC.Base.String) ->
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> GHC.CString.unpackAppendCString#
                        Language.PureScript.Names.$fShowName15
                        (GHC.CString.unpackAppendCString#
                           Language.PureScript.Names.$fShowName14
                           (case Data.Text.Show.$w$cshowsPrec
                                   w `cast` (Language.PureScript.Names.N:OpName[0] <a>_P)
                                   (GHC.CString.unpackAppendCString#
                                      Language.PureScript.Names.$fShowModuleName2
                                      w1) of ww1 { (#,#) ww2 ww3 ->
                            GHC.Types.: @ GHC.Types.Char ww2 ww3 }))
                   1#
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.CString.unpackAppendCString#
                           Language.PureScript.Names.$fShowName15
                           (GHC.CString.unpackAppendCString#
                              Language.PureScript.Names.$fShowName14
                              (case Data.Text.Show.$w$cshowsPrec
                                      w `cast` (Language.PureScript.Names.N:OpName[0] <a>_P)
                                      (GHC.CString.unpackAppendCString#
                                         Language.PureScript.Names.$fShowModuleName2
                                         (GHC.Types.:
                                            @ GHC.Types.Char
                                            GHC.Show.$fShow(,)2
                                            w1)) of ww1 { (#,#) ww2 ww3 ->
                               GHC.Types.: @ GHC.Types.Char ww2 ww3 }))) }) -}
5a70062bbdf29e6dc659ad8bf5326b50
  $w$cshowsPrec4 ::
    GHC.Show.Show a =>
    GHC.Prim.Int#
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> a
    -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,1*U(1*C1(C1(C(U))),A,A)><S,U><L,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Show.Show a)
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww2 :: a) ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.$fShowMaybe_$cshowsPrec
                       @ Language.PureScript.Names.ModuleName
                       Language.PureScript.Names.$fShowModuleName
                       Language.PureScript.Names.$fShowIdent7
                       ww1
                 } in
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.showsPrec
                       @ a
                       w
                       Language.PureScript.Names.$fShowIdent7
                       ww2
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> \ (x :: GHC.Base.String) ->
                      GHC.CString.unpackAppendCString#
                        Language.PureScript.Names.$fShowQualified1
                        (f (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 (g x)))
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.CString.unpackAppendCString#
                           Language.PureScript.Names.$fShowQualified1
                           (f (GHC.Types.:
                                 @ GHC.Types.Char
                                 GHC.Show.showSpace1
                                 (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))))) }) -}
5a70062bbdf29e6dc659ad8bf5326b50
  $w$ctoEncoding ::
    Data.Aeson.Types.ToJSON.ToJSON a =>
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> a -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 3,
     Strictness: <L,1*U(A,1*C1(C(C(C1(U(U,U))))),A,A)><L,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: Data.Aeson.Types.ToJSON.ToJSON a)
                   (ww :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww1 :: a) ->
                 let {
                   e :: Data.Aeson.Encoding.Internal.Encoding'
                          Data.Aeson.Types.Internal.Value
                   = case ww of wild {
                       GHC.Base.Nothing
                       -> Data.Aeson.Encoding.Builder.null_1
                            `cast`
                          ((forall (r :: <*>_N).
                            <Data.ByteString.Builder.Internal.BuildStep r>_R
                            ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                            ->_R Sym (GHC.Types.N:IO[0]
                                          <Data.ByteString.Builder.Internal.BuildSignal
                                             r>_R)) ; (Sym (Data.ByteString.Builder.Internal.N:Builder[0]) ; Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                                                                                      <Data.Aeson.Types.Internal.Value>_P)))
                       GHC.Base.Just a2
                       -> case a2
                                 `cast`
                               (Language.PureScript.Names.N:ModuleName[0]) of wild1 {
                            []
                            -> Data.Aeson.Encoding.Builder.emptyArray_1
                                 `cast`
                               ((forall (r :: <*>_N).
                                 <Data.ByteString.Builder.Internal.BuildStep r>_R
                                 ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                                 ->_R Sym (GHC.Types.N:IO[0]
                                               <Data.ByteString.Builder.Internal.BuildSignal
                                                  r>_R)) ; (Sym (Data.ByteString.Builder.Internal.N:Builder[0]) ; Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                                                                                           <Data.Aeson.Types.Internal.Value>_P)))
                            : x xs
                            -> (\ @ r ->
                                let {
                                  f :: Data.ByteString.Builder.Internal.BuildStep r
                                       -> Data.ByteString.Builder.Internal.BuildStep r
                                  = case x `cast`
                                         (Language.PureScript.Names.N:ProperName[0]
                                              <'Language.PureScript.Names.Namespace>_P) of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                                    (Data.Aeson.Encoding.Builder.encodeToBuilder
                                       (Data.Aeson.Types.Internal.String dt))
                                      `cast`
                                    (Data.ByteString.Builder.Internal.N:Builder[0])
                                      @ r }
                                } in
                                let {
                                  f1 :: Data.ByteString.Builder.Internal.BuildStep r
                                        -> Data.ByteString.Builder.Internal.BuildStep r
                                  = (Language.PureScript.Names.$fToJSONModuleName_go xs)
                                      `cast`
                                    (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                         <Data.Aeson.Types.Internal.Value>_P ; Data.ByteString.Builder.Internal.N:Builder[0])
                                      @ r
                                } in
                                (\ (x1 :: Data.ByteString.Builder.Internal.BuildStep r) ->
                                 let {
                                   w1 :: Data.ByteString.Builder.Internal.BuildStep r
                                   = f (f1
                                          (Data.Aeson.Encoding.Internal.closeBracket1 @ r x1)
                                            `cast`
                                          (<Data.ByteString.Builder.Internal.BufferRange>_R
                                           ->_R Sym (GHC.Types.N:IO[0]
                                                         <Data.ByteString.Builder.Internal.BuildSignal
                                                            r>_R)))
                                 } in
                                 \ (w2 :: Data.ByteString.Builder.Internal.BufferRange)
                                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                 case w2 of ww2 { Data.ByteString.Builder.Internal.BufferRange ww3 ww4 ->
                                 Data.Aeson.Encoding.Internal.$wopenBracket @ r w1 ww3 ww4 w3 })
                                  `cast`
                                (<Data.ByteString.Builder.Internal.BuildStep r>_R
                                 ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                                 ->_R Sym (GHC.Types.N:IO[0]
                                               <Data.ByteString.Builder.Internal.BuildSignal r>_R)))
                                 `cast`
                               (Sym (Data.ByteString.Builder.Internal.N:Builder[0]) ; Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                                                               <Data.Aeson.Types.Internal.Value>_P)) } }
                 } in
                 let {
                   e1 :: Data.Aeson.Encoding.Internal.Encoding
                   = Data.Aeson.Types.ToJSON.toEncoding @ a w ww1
                 } in
                 (\ @ r (x :: Data.ByteString.Builder.Internal.BuildStep r) ->
                  let {
                    w1 :: Data.ByteString.Builder.Internal.BuildStep r
                    = e `cast`
                      (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                           <Data.Aeson.Types.Internal.Value>_P ; Data.ByteString.Builder.Internal.N:Builder[0])
                        @ r
                        (let {
                           w2 :: Data.ByteString.Builder.Internal.BuildStep r
                           = e1
                               `cast`
                             (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                  <Data.Aeson.Types.Internal.Value>_P ; Data.ByteString.Builder.Internal.N:Builder[0])
                               @ r
                               (Data.Aeson.Encoding.Internal.closeBracket1 @ r x)
                                 `cast`
                               (<Data.ByteString.Builder.Internal.BufferRange>_R
                                ->_R Sym (GHC.Types.N:IO[0]
                                              <Data.ByteString.Builder.Internal.BuildSignal r>_R))
                         } in
                         (\ (w3 :: Data.ByteString.Builder.Internal.BufferRange)
                            (w4 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                          case w3 of ww2 { Data.ByteString.Builder.Internal.BufferRange ww3 ww4 ->
                          Data.Aeson.Encoding.Internal.$wcomma @ r w2 ww3 ww4 w4 })
                           `cast`
                         (<Data.ByteString.Builder.Internal.BufferRange>_R
                          ->_R Sym (GHC.Types.N:IO[0]
                                        <Data.ByteString.Builder.Internal.BuildSignal r>_R)))
                  } in
                  \ (w2 :: Data.ByteString.Builder.Internal.BufferRange)
                    (w3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                  case w2 of ww2 { Data.ByteString.Builder.Internal.BufferRange ww3 ww4 ->
                  Data.Aeson.Encoding.Internal.$wopenBracket @ r w1 ww3 ww4 w3 })
                   `cast`
                 ((forall (r :: <*>_N).
                   <Data.ByteString.Builder.Internal.BuildStep r>_R
                   ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <Data.ByteString.Builder.Internal.BuildSignal
                                    r>_R)) ; (Sym (Data.ByteString.Builder.Internal.N:Builder[0]) ; Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                                                                             <Data.Aeson.Types.Internal.Value>_P)))) -}
5a70062bbdf29e6dc659ad8bf5326b50
  $w$ctoJSON ::
    Language.PureScript.Names.ModuleName
    -> (# Data.Aeson.Types.Internal.Array #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ (w :: Language.PureScript.Names.ModuleName) ->
                 case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                             Data.Vector.Vector Data.Aeson.Types.Internal.Value #)
                        (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case GHC.Prim.newArray#
                                @ Data.Aeson.Types.Internal.Value
                                @ (Control.Monad.Primitive.PrimState
                                     (GHC.ST.ST GHC.Prim.RealWorld))
                                0#
                                (Data.Vector.Mutable.uninitialised
                                   @ Data.Aeson.Types.Internal.Value)
                                s1
                                  `cast`
                                (GHC.Prim.State#
                                   (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                             <GHC.Prim.RealWorld>_N)))_R of ds2 { (#,#) ipv ipv1 ->
                         Language.PureScript.Names.$fToJSONModuleName_$s$wfoldlM_loop
                           ipv
                             `cast`
                           (GHC.Prim.State#
                              (Control.Monad.Primitive.D:R:PrimStateST[0]
                                   <GHC.Prim.RealWorld>_N))_R
                           (GHC.Base.map
                              @ (Language.PureScript.Names.ProperName
                                   'Language.PureScript.Names.Namespace)
                              @ Data.Aeson.Types.Internal.Value
                              Data.Aeson.Types.Internal.$WString
                                `cast`
                              (Sym (Language.PureScript.Names.N:ProperName[0]
                                        <'Language.PureScript.Names.Namespace>_P)
                               ->_R <Data.Aeson.Types.Internal.Value>_R)
                              w `cast` (Language.PureScript.Names.N:ModuleName[0]))
                           0#
                           ipv1
                             `cast`
                           (GHC.Prim.MutableArray#
                              (Control.Monad.Primitive.D:R:PrimStateST[0] <GHC.Prim.RealWorld>_N)
                              <Data.Aeson.Types.Internal.Value>_R)_R
                           0#
                           0# }) of ds1 { (#,#) ipv1 ipv2 ->
                 case ipv2 of dt { Data.Vector.Vector ipv ipv4 ipv5 ->
                 (# dt #) } }) -}
5a70062bbdf29e6dc659ad8bf5326b50
  $w$ctoJSON1 ::
    Data.Aeson.Types.ToJSON.ToJSON a =>
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> a -> (# Data.Aeson.Types.Internal.Array #)
  {- Arity: 3, Strictness: <L,1*U(1*C1(U),A,A,A)><L,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: Data.Aeson.Types.ToJSON.ToJSON a)
                   (ww :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww1 :: a) ->
                 case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                             Data.Vector.Vector Data.Aeson.Types.Internal.Value #)
                        (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case GHC.Prim.newArray#
                                @ Data.Aeson.Types.Internal.Value
                                @ (Control.Monad.Primitive.PrimState
                                     (GHC.ST.ST GHC.Prim.RealWorld))
                                2#
                                (Data.Vector.Mutable.uninitialised
                                   @ Data.Aeson.Types.Internal.Value)
                                s1
                                  `cast`
                                (GHC.Prim.State#
                                   (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                             <GHC.Prim.RealWorld>_N)))_R of ds2 { (#,#) ipv ipv1 ->
                         case GHC.Prim.writeArray#
                                @ (Control.Monad.Primitive.PrimState
                                     (GHC.ST.ST GHC.Prim.RealWorld))
                                @ Data.Aeson.Types.Internal.Value
                                ipv1
                                0#
                                (case ww of wild {
                                   GHC.Base.Nothing -> Data.Aeson.Types.Internal.Null
                                   GHC.Base.Just a2
                                   -> case GHC.Magic.runRW#
                                             @ ('GHC.Types.TupleRep
                                                  '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                                             @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                  Data.Vector.Vector
                                                    Data.Aeson.Types.Internal.Value #)
                                             (\ (s2 :: GHC.Prim.State#
                                                         GHC.Prim.RealWorld)[OneShot] ->
                                              case GHC.Prim.newArray#
                                                     @ Data.Aeson.Types.Internal.Value
                                                     @ (Control.Monad.Primitive.PrimState
                                                          (GHC.ST.ST GHC.Prim.RealWorld))
                                                     0#
                                                     (Data.Vector.Mutable.uninitialised
                                                        @ Data.Aeson.Types.Internal.Value)
                                                     s2
                                                       `cast`
                                                     (GHC.Prim.State#
                                                        (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                  <GHC.Prim.RealWorld>_N)))_R of ds1 { (#,#) ipv2 ipv3 ->
                                              Language.PureScript.Names.$fToJSONModuleName_$s$wfoldlM_loop
                                                ipv2
                                                  `cast`
                                                (GHC.Prim.State#
                                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                        <GHC.Prim.RealWorld>_N))_R
                                                (GHC.Base.map
                                                   @ (Language.PureScript.Names.ProperName
                                                        'Language.PureScript.Names.Namespace)
                                                   @ Data.Aeson.Types.Internal.Value
                                                   Data.Aeson.Types.Internal.$WString
                                                     `cast`
                                                   (Sym (Language.PureScript.Names.N:ProperName[0]
                                                             <'Language.PureScript.Names.Namespace>_P)
                                                    ->_R <Data.Aeson.Types.Internal.Value>_R)
                                                   a2
                                                     `cast`
                                                   (Language.PureScript.Names.N:ModuleName[0]))
                                                0#
                                                ipv3
                                                  `cast`
                                                (GHC.Prim.MutableArray#
                                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                        <GHC.Prim.RealWorld>_N)
                                                   <Data.Aeson.Types.Internal.Value>_R)_R
                                                0#
                                                0# }) of ds1 { (#,#) ipv2 ipv3 ->
                                      case ipv3 of dt { Data.Vector.Vector ipv4 ipv5 ipv6 ->
                                      Data.Aeson.Types.Internal.Array dt } } })
                                ipv of s'# { DEFAULT ->
                         case GHC.Prim.writeArray#
                                @ (Control.Monad.Primitive.PrimState
                                     (GHC.ST.ST GHC.Prim.RealWorld))
                                @ Data.Aeson.Types.Internal.Value
                                ipv1
                                1#
                                (Data.Aeson.Types.ToJSON.toJSON @ a w ww1)
                                s'# of s'#1 { DEFAULT ->
                         case GHC.Prim.unsafeFreezeArray#
                                @ (Control.Monad.Primitive.PrimState
                                     (GHC.ST.ST GHC.Prim.RealWorld))
                                @ Data.Aeson.Types.Internal.Value
                                ipv1
                                s'#1 of ds1 { (#,#) ipv2 ipv3 ->
                         (# ipv2
                              `cast`
                            (GHC.Prim.State#
                               (Control.Monad.Primitive.D:R:PrimStateST[0]
                                    <GHC.Prim.RealWorld>_N))_R,
                            Data.Vector.Vector
                              @ Data.Aeson.Types.Internal.Value
                              0#
                              2#
                              ipv3 #) } } } }) of ds1 { (#,#) ipv1 ipv2 ->
                 case ipv2 of dt { Data.Vector.Vector ipv ipv4 ipv5 ->
                 (# dt #) } }) -}
5a70062bbdf29e6dc659ad8bf5326b50
  $w$ctraverse ::
    GHC.Base.Applicative f =>
    (a -> f b)
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> a
    -> f (Language.PureScript.Names.Qualified b)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(S(C(C(S))L)LLLLL),1*U(1*U(1*C1(C1(U)),A),A,A,A,A,A)><L,1*C1(U)><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ f :: * -> *
                   @ a
                   @ b
                   (w :: GHC.Base.Applicative f)
                   (w1 :: a -> f b)
                   (ww :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww1 :: a) ->
                 GHC.Base.fmap
                   @ f
                   (GHC.Base.$p1Applicative @ f w)
                   @ b
                   @ (Language.PureScript.Names.Qualified b)
                   (\ (b2 :: b) -> Language.PureScript.Names.Qualified @ b ww b2)
                   (w1 ww1)) -}
f2c8fc46f2c7602c6807d8f967747c6b
  $wdisqualifyFor ::
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> a
    -> GHC.Base.Maybe a
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww1 :: a) ->
                 case w of wild {
                   GHC.Base.Nothing
                   -> case ww of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Just @ a ww1
                        GHC.Base.Just ipv -> GHC.Base.Nothing @ a }
                   GHC.Base.Just a1
                   -> case ww of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just b1
                        -> case GHC.Classes.$fEq[]_$c==
                                  @ (Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.Namespace)
                                  (Language.PureScript.Names.$fEqProperName
                                     @ 'Language.PureScript.Names.Namespace)
                                  a1 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                  b1 `cast` (Language.PureScript.Names.N:ModuleName[0]) of wild2 {
                             GHC.Types.False -> GHC.Base.Nothing @ a
                             GHC.Types.True -> GHC.Base.Just @ a ww1 } } }) -}
5c5c0a7c843eb537c9d564e5e1d81e7f
  $wshowOp ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int# -> GHC.Prim.Int# -> Data.Text.Internal.Text
  {- Arity: 3, Strictness: <L,U><S,U><S,U>, Inline: [0] -}
6cb918a6a7fb2d66237531df093a4ae0
  $wshowQualified ::
    (a -> Data.Text.Internal.Text)
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> a
    -> Data.Text.Internal.Text
  {- Arity: 3, Strictness: <C(S),1*C1(U(U,U,U))><S,1*U><L,U>,
     Inline: [0] -}
c49aae497b31366ace42c1716bbf633b
  $wsplitProperNames ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> [Language.PureScript.Names.ProperName a]
  {- Arity: 3, Strictness: <L,U><L,U><S,U>, Inline: [0],
     Unfolding: (\ @ a :: Language.PureScript.Names.ProperNameType
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#) ->
                 let {
                   exit :: GHC.Prim.Int#
                           -> GHC.Prim.Int# -> [Language.PureScript.Names.ProperName a]
                     <join 2> {- Arity: 2, Strictness: <S,U><S,U> -}
                   = \ (ww3 :: GHC.Prim.Int#)[OneShot]
                       (ww4 :: GHC.Prim.Int#)[OneShot] ->
                     Language.PureScript.Names.moduleNameFromString3
                       @ a
                       ww
                       (GHC.Prim.+# ww1 ww3)
                       (GHC.Prim.-# ww2 ww4)
                 } in
                 let {
                   exit1 :: GHC.Prim.Int#
                            -> GHC.Prim.Int# -> [Language.PureScript.Names.ProperName a]
                     <join 2> {- Arity: 2, Strictness: <S,U><S,U> -}
                   = \ (ww3 :: GHC.Prim.Int#)[OneShot]
                       (ww4 :: GHC.Prim.Int#)[OneShot] ->
                     Language.PureScript.Names.moduleNameFromString3
                       @ a
                       ww
                       (GHC.Prim.+# ww1 ww3)
                       (GHC.Prim.-# ww2 ww4)
                 } in
                 let {
                   exit2 :: GHC.Prim.Int#
                            -> GHC.Prim.Int# -> [Language.PureScript.Names.ProperName a]
                     <join 2> {- Arity: 2, Strictness: <S,U><S,U> -}
                   = \ (ww3 :: GHC.Prim.Int#)[OneShot]
                       (ww4 :: GHC.Prim.Int#)[OneShot] ->
                     Language.PureScript.Names.moduleNameFromString3
                       @ a
                       ww
                       (GHC.Prim.+# ww1 ww3)
                       (GHC.Prim.-# ww2 ww4)
                 } in
                 letrec {
                   $wloop :: GHC.Prim.Int#
                             -> GHC.Prim.Int# -> [Language.PureScript.Names.ProperName a]
                     <join 2> {- Arity: 2, Strictness: <L,U><S,U>, Inline: [0] -}
                   = \ (ww3 :: GHC.Prim.Int#) (ww4 :: GHC.Prim.Int#) ->
                     case GHC.Prim.>=# ww4 ww2 of lwild {
                       DEFAULT
                       -> let {
                            j :: GHC.Prim.Int# = GHC.Prim.+# ww1 ww3
                          } in
                          case GHC.Prim.indexWord16Array# ww j of r# { DEFAULT ->
                          case GHC.Prim.ltWord# r# 55296## of lwild1 {
                            DEFAULT
                            -> case GHC.Prim.gtWord# r# 56319## of lwild2 {
                                 DEFAULT
                                 -> case GHC.Prim.indexWord16Array#
                                           ww
                                           (GHC.Prim.+# j 1#) of r#1 { DEFAULT ->
                                    case GHC.Prim.chr#
                                           (GHC.Prim.+#
                                              (GHC.Prim.+#
                                                 (GHC.Prim.uncheckedIShiftL#
                                                    (GHC.Prim.-# (GHC.Prim.word2Int# r#) 55296#)
                                                    10#)
                                                 (GHC.Prim.-# (GHC.Prim.word2Int# r#1) 56320#))
                                              65536#) of wild {
                                      DEFAULT -> exit ww3 ww4
                                      '.'# -> $wloop (GHC.Prim.+# ww3 2#) (GHC.Prim.+# ww4 2#) } }
                                 1#
                                 -> case GHC.Prim.chr# (GHC.Prim.word2Int# r#) of wild {
                                      DEFAULT -> exit1 ww3 ww4
                                      '.'# -> $wloop (GHC.Prim.+# ww3 1#) (GHC.Prim.+# ww4 1#) } }
                            1#
                            -> case GHC.Prim.chr# (GHC.Prim.word2Int# r#) of wild {
                                 DEFAULT -> exit2 ww3 ww4
                                 '.'# -> $wloop (GHC.Prim.+# ww3 1#) (GHC.Prim.+# ww4 1#) } } }
                       1# -> Language.PureScript.Names.moduleNameFromString2 @ a }
                 } in
                 $wloop 0# 0#) -}
ab98a56ffa88760dad1380079e8ee35a
  data Ident
    = Ident Data.Text.Internal.Text
    | GenIdent (GHC.Base.Maybe Data.Text.Internal.Text)
               GHC.Integer.Type.Integer
    | UnusedIdent
5a70062bbdf29e6dc659ad8bf5326b50
  newtype ModuleName
    = ModuleName [Language.PureScript.Names.ProperName
                    'Language.PureScript.Names.Namespace]
184494d9e734645f374e2a0fce32bfac
  data Name
    = IdentName Language.PureScript.Names.Ident
    | ValOpName (Language.PureScript.Names.OpName
                   'Language.PureScript.Names.ValueOpName)
    | TyName (Language.PureScript.Names.ProperName
                'Language.PureScript.Names.TypeName)
    | TyOpName (Language.PureScript.Names.OpName
                  'Language.PureScript.Names.TypeOpName)
    | DctorName (Language.PureScript.Names.ProperName
                   'Language.PureScript.Names.ConstructorName)
    | TyClassName (Language.PureScript.Names.ProperName
                     'Language.PureScript.Names.ClassName)
    | ModName Language.PureScript.Names.ModuleName
    | KiName (Language.PureScript.Names.ProperName
                'Language.PureScript.Names.KindName)
1522672b880b192c6e05e6cf8a45712d
  type role OpName phantom
  newtype OpName (a :: Language.PureScript.Names.OpNameType)
    = OpName {runOpName :: Data.Text.Internal.Text}
27f33aca008da750712cbd7dde400c24
  data OpNameType = ValueOpName | TypeOpName | AnyOpName
29f101e190cc99df85623423972e606f
  type role ProperName phantom
  newtype ProperName (a :: Language.PureScript.Names.ProperNameType)
    = ProperName {runProperName :: Data.Text.Internal.Text}
29f101e190cc99df85623423972e606f
  data ProperNameType
    = TypeName | ConstructorName | ClassName | KindName | Namespace
5a70062bbdf29e6dc659ad8bf5326b50
  data Qualified a
    = Qualified (GHC.Base.Maybe Language.PureScript.Names.ModuleName) a
ab98a56ffa88760dad1380079e8ee35a
  axiom Language.PureScript.Names.Rep_Ident::
      GHC.Generics.Rep Language.PureScript.Names.Ident
        = GHC.Generics.D1
            ('GHC.Generics.MetaData
               "Ident"
               "Language.PureScript.Names"
               "purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"
               'GHC.Types.False)
            (GHC.Generics.C1
               ('GHC.Generics.MetaCons
                  "Ident" 'GHC.Generics.PrefixI 'GHC.Types.False)
               (GHC.Generics.S1
                  ('GHC.Generics.MetaSel
                     'GHC.Base.Nothing
                     'GHC.Generics.NoSourceUnpackedness
                     'GHC.Generics.NoSourceStrictness
                     'GHC.Generics.DecidedLazy)
                  (GHC.Generics.Rec0 Data.Text.Internal.Text))
             GHC.Generics.:+: (GHC.Generics.C1
                                 ('GHC.Generics.MetaCons
                                    "GenIdent" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                 (GHC.Generics.S1
                                    ('GHC.Generics.MetaSel
                                       'GHC.Base.Nothing
                                       'GHC.Generics.NoSourceUnpackedness
                                       'GHC.Generics.NoSourceStrictness
                                       'GHC.Generics.DecidedLazy)
                                    (GHC.Generics.Rec0 (GHC.Base.Maybe Data.Text.Internal.Text))
                                  GHC.Generics.:*: GHC.Generics.S1
                                                     ('GHC.Generics.MetaSel
                                                        'GHC.Base.Nothing
                                                        'GHC.Generics.NoSourceUnpackedness
                                                        'GHC.Generics.NoSourceStrictness
                                                        'GHC.Generics.DecidedLazy)
                                                     (GHC.Generics.Rec0 GHC.Integer.Type.Integer))
                               GHC.Generics.:+: GHC.Generics.C1
                                                  ('GHC.Generics.MetaCons
                                                     "UnusedIdent"
                                                     'GHC.Generics.PrefixI
                                                     'GHC.Types.False)
                                                  GHC.Generics.U1))
5a70062bbdf29e6dc659ad8bf5326b50
  axiom Language.PureScript.Names.Rep_ModuleName::
      GHC.Generics.Rep Language.PureScript.Names.ModuleName
        = GHC.Generics.D1
            ('GHC.Generics.MetaData
               "ModuleName"
               "Language.PureScript.Names"
               "purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"
               'GHC.Types.True)
            (GHC.Generics.C1
               ('GHC.Generics.MetaCons
                  "ModuleName" 'GHC.Generics.PrefixI 'GHC.Types.False)
               (GHC.Generics.S1
                  ('GHC.Generics.MetaSel
                     'GHC.Base.Nothing
                     'GHC.Generics.NoSourceUnpackedness
                     'GHC.Generics.NoSourceStrictness
                     'GHC.Generics.DecidedLazy)
                  (GHC.Generics.Rec0
                     [Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.Namespace])))
184494d9e734645f374e2a0fce32bfac
  axiom Language.PureScript.Names.Rep_Name::
      GHC.Generics.Rep Language.PureScript.Names.Name
        = GHC.Generics.D1
            ('GHC.Generics.MetaData
               "Name"
               "Language.PureScript.Names"
               "purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"
               'GHC.Types.False)
            (((GHC.Generics.C1
                 ('GHC.Generics.MetaCons
                    "IdentName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                 (GHC.Generics.S1
                    ('GHC.Generics.MetaSel
                       'GHC.Base.Nothing
                       'GHC.Generics.NoSourceUnpackedness
                       'GHC.Generics.NoSourceStrictness
                       'GHC.Generics.DecidedLazy)
                    (GHC.Generics.Rec0 Language.PureScript.Names.Ident))
               GHC.Generics.:+: GHC.Generics.C1
                                  ('GHC.Generics.MetaCons
                                     "ValOpName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                  (GHC.Generics.S1
                                     ('GHC.Generics.MetaSel
                                        'GHC.Base.Nothing
                                        'GHC.Generics.NoSourceUnpackedness
                                        'GHC.Generics.NoSourceStrictness
                                        'GHC.Generics.DecidedLazy)
                                     (GHC.Generics.Rec0
                                        (Language.PureScript.Names.OpName
                                           'Language.PureScript.Names.ValueOpName))))
              GHC.Generics.:+: (GHC.Generics.C1
                                  ('GHC.Generics.MetaCons
                                     "TyName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                  (GHC.Generics.S1
                                     ('GHC.Generics.MetaSel
                                        'GHC.Base.Nothing
                                        'GHC.Generics.NoSourceUnpackedness
                                        'GHC.Generics.NoSourceStrictness
                                        'GHC.Generics.DecidedLazy)
                                     (GHC.Generics.Rec0
                                        (Language.PureScript.Names.ProperName
                                           'Language.PureScript.Names.TypeName)))
                                GHC.Generics.:+: GHC.Generics.C1
                                                   ('GHC.Generics.MetaCons
                                                      "TyOpName"
                                                      'GHC.Generics.PrefixI
                                                      'GHC.Types.False)
                                                   (GHC.Generics.S1
                                                      ('GHC.Generics.MetaSel
                                                         'GHC.Base.Nothing
                                                         'GHC.Generics.NoSourceUnpackedness
                                                         'GHC.Generics.NoSourceStrictness
                                                         'GHC.Generics.DecidedLazy)
                                                      (GHC.Generics.Rec0
                                                         (Language.PureScript.Names.OpName
                                                            'Language.PureScript.Names.TypeOpName)))))
             GHC.Generics.:+: ((GHC.Generics.C1
                                  ('GHC.Generics.MetaCons
                                     "DctorName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                  (GHC.Generics.S1
                                     ('GHC.Generics.MetaSel
                                        'GHC.Base.Nothing
                                        'GHC.Generics.NoSourceUnpackedness
                                        'GHC.Generics.NoSourceStrictness
                                        'GHC.Generics.DecidedLazy)
                                     (GHC.Generics.Rec0
                                        (Language.PureScript.Names.ProperName
                                           'Language.PureScript.Names.ConstructorName)))
                                GHC.Generics.:+: GHC.Generics.C1
                                                   ('GHC.Generics.MetaCons
                                                      "TyClassName"
                                                      'GHC.Generics.PrefixI
                                                      'GHC.Types.False)
                                                   (GHC.Generics.S1
                                                      ('GHC.Generics.MetaSel
                                                         'GHC.Base.Nothing
                                                         'GHC.Generics.NoSourceUnpackedness
                                                         'GHC.Generics.NoSourceStrictness
                                                         'GHC.Generics.DecidedLazy)
                                                      (GHC.Generics.Rec0
                                                         (Language.PureScript.Names.ProperName
                                                            'Language.PureScript.Names.ClassName))))
                               GHC.Generics.:+: (GHC.Generics.C1
                                                   ('GHC.Generics.MetaCons
                                                      "ModName"
                                                      'GHC.Generics.PrefixI
                                                      'GHC.Types.False)
                                                   (GHC.Generics.S1
                                                      ('GHC.Generics.MetaSel
                                                         'GHC.Base.Nothing
                                                         'GHC.Generics.NoSourceUnpackedness
                                                         'GHC.Generics.NoSourceStrictness
                                                         'GHC.Generics.DecidedLazy)
                                                      (GHC.Generics.Rec0
                                                         Language.PureScript.Names.ModuleName))
                                                 GHC.Generics.:+: GHC.Generics.C1
                                                                    ('GHC.Generics.MetaCons
                                                                       "KiName"
                                                                       'GHC.Generics.PrefixI
                                                                       'GHC.Types.False)
                                                                    (GHC.Generics.S1
                                                                       ('GHC.Generics.MetaSel
                                                                          'GHC.Base.Nothing
                                                                          'GHC.Generics.NoSourceUnpackedness
                                                                          'GHC.Generics.NoSourceStrictness
                                                                          'GHC.Generics.DecidedLazy)
                                                                       (GHC.Generics.Rec0
                                                                          (Language.PureScript.Names.ProperName
                                                                             'Language.PureScript.Names.KindName))))))
1522672b880b192c6e05e6cf8a45712d
  axiom Language.PureScript.Names.Rep_OpName::
      GHC.Generics.Rep (Language.PureScript.Names.OpName a)
        = GHC.Generics.D1
            ('GHC.Generics.MetaData
               "OpName"
               "Language.PureScript.Names"
               "purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"
               'GHC.Types.True)
            (GHC.Generics.C1
               ('GHC.Generics.MetaCons
                  "OpName" 'GHC.Generics.PrefixI 'GHC.Types.True)
               (GHC.Generics.S1
                  ('GHC.Generics.MetaSel
                     ('GHC.Base.Just "runOpName")
                     'GHC.Generics.NoSourceUnpackedness
                     'GHC.Generics.NoSourceStrictness
                     'GHC.Generics.DecidedLazy)
                  (GHC.Generics.Rec0 Data.Text.Internal.Text)))
29f101e190cc99df85623423972e606f
  axiom Language.PureScript.Names.Rep_ProperName::
      GHC.Generics.Rep (Language.PureScript.Names.ProperName a)
        = GHC.Generics.D1
            ('GHC.Generics.MetaData
               "ProperName"
               "Language.PureScript.Names"
               "purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"
               'GHC.Types.True)
            (GHC.Generics.C1
               ('GHC.Generics.MetaCons
                  "ProperName" 'GHC.Generics.PrefixI 'GHC.Types.True)
               (GHC.Generics.S1
                  ('GHC.Generics.MetaSel
                     ('GHC.Base.Just "runProperName")
                     'GHC.Generics.NoSourceUnpackedness
                     'GHC.Generics.NoSourceStrictness
                     'GHC.Generics.DecidedLazy)
                  (GHC.Generics.Rec0 Data.Text.Internal.Text)))
5a70062bbdf29e6dc659ad8bf5326b50
  axiom Language.PureScript.Names.Rep_Qualified::
      GHC.Generics.Rep (Language.PureScript.Names.Qualified a)
        = GHC.Generics.D1
            ('GHC.Generics.MetaData
               "Qualified"
               "Language.PureScript.Names"
               "purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"
               'GHC.Types.False)
            (GHC.Generics.C1
               ('GHC.Generics.MetaCons
                  "Qualified" 'GHC.Generics.PrefixI 'GHC.Types.False)
               (GHC.Generics.S1
                  ('GHC.Generics.MetaSel
                     'GHC.Base.Nothing
                     'GHC.Generics.NoSourceUnpackedness
                     'GHC.Generics.NoSourceStrictness
                     'GHC.Generics.DecidedLazy)
                  (GHC.Generics.Rec0
                     (GHC.Base.Maybe Language.PureScript.Names.ModuleName))
                GHC.Generics.:*: GHC.Generics.S1
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.Rec0 a)))
9cce674374cd97d7385253445133e737
  coerceProperName ::
    Language.PureScript.Names.ProperName a
    -> Language.PureScript.Names.ProperName b
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U)>m,
     Unfolding: InlineRule (0, True, True)
                (\ @ a :: Language.PureScript.Names.ProperNameType
                   @ b :: Language.PureScript.Names.ProperNameType ->
                 Language.PureScript.Names.coerceProperName1 @ a)
                  `cast`
                (forall (a :: <Language.PureScript.Names.ProperNameType>_N) (b :: <Language.PureScript.Names.ProperNameType>_N).
                 <Language.PureScript.Names.ProperName a>_R
                 ->_R Language.PureScript.Names.N:ProperName[0]
                          <a>_P ; Sym (Language.PureScript.Names.N:ProperName[0] <b>_P)) -}
29f101e190cc99df85623423972e606f
  coerceProperName1 ::
    Language.PureScript.Names.ProperName a
    -> Language.PureScript.Names.ProperName a
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U)>m,
     Unfolding: InlineRule (1, True, True)
                (\ @ a :: Language.PureScript.Names.ProperNameType
                   (ds :: Language.PureScript.Names.ProperName a) ->
                 ds) -}
3e7b8117c7613f1d74fadc5d62b59f54
  disqualify :: Language.PureScript.Names.Qualified a -> a
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: Language.PureScript.Names.Qualified a) ->
                 case ds of wild { Language.PureScript.Names.Qualified ds1 a1 ->
                 a1 }) -}
3f29138a9e3485e827b393d046b0e5ba
  disqualifyFor ::
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.Qualified a -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S(SL),1*U(1*U,U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (w :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (w1 :: Language.PureScript.Names.Qualified a) ->
                 case w1 of ww { Language.PureScript.Names.Qualified ww1 ww2 ->
                 Language.PureScript.Names.$wdisqualifyFor @ a w ww1 ww2 }) -}
8fbd69535ffc229c7c5e913872bf2854
  eraseOpName ::
    Language.PureScript.Names.OpName a
    -> Language.PureScript.Names.OpName
         'Language.PureScript.Names.AnyOpName
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U)>m,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Names.eraseOpName1
                  `cast`
                (forall (a :: <Language.PureScript.Names.OpNameType>_N).
                 <Language.PureScript.Names.OpName a>_R
                 ->_R Language.PureScript.Names.N:OpName[0]
                          <a>_P ; Sym (Language.PureScript.Names.N:OpName[0]
                                           <'Language.PureScript.Names.AnyOpName>_P)) -}
1522672b880b192c6e05e6cf8a45712d
  eraseOpName1 ::
    Language.PureScript.Names.OpName a
    -> Language.PureScript.Names.OpName a
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U)>m,
     Unfolding: InlineRule (1, True, True)
                (\ @ a :: Language.PureScript.Names.OpNameType
                   (ds :: Language.PureScript.Names.OpName a) ->
                 ds) -}
c187ad88fe7ace9670b49d0359388e88
  freshIdent ::
    Control.Monad.Supply.Class.MonadSupply m =>
    Data.Text.Internal.Text -> m Language.PureScript.Names.Ident
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S(S(C(C(S))L)LLLLL)LLLL)LL),U(1*U(1*U(1*U(1*C1(C1(U)),A),A,A,A,A,A),A,A,A,A),1*U,A)><L,U>,
     Unfolding: (\ @ m :: * -> *
                   ($dMonadSupply :: Control.Monad.Supply.Class.MonadSupply m)
                   (eta :: Data.Text.Internal.Text) ->
                 GHC.Base.fmap
                   @ m
                   (GHC.Base.$p1Applicative
                      @ m
                      (GHC.Base.$p1Monad
                         @ m
                         (Control.Monad.Supply.Class.$p1MonadSupply @ m $dMonadSupply)))
                   @ GHC.Integer.Type.Integer
                   @ Language.PureScript.Names.Ident
                   (Language.PureScript.Names.GenIdent
                      (GHC.Base.Just @ Data.Text.Internal.Text eta))
                   (Control.Monad.Supply.Class.fresh @ m $dMonadSupply)) -}
6b0c5ecac63752dd71b683e1c9b5a713
  freshIdent' ::
    Control.Monad.Supply.Class.MonadSupply m =>
    m Language.PureScript.Names.Ident
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(S(S(S(C(C(S))L)LLLLL)LLLL)LL),U(1*U(1*U(1*U(1*C1(C1(U)),A),A,A,A,A,A),A,A,A,A),1*U,A)>,
     Unfolding: (\ @ m :: * -> *
                   ($dMonadSupply :: Control.Monad.Supply.Class.MonadSupply m) ->
                 GHC.Base.fmap
                   @ m
                   (GHC.Base.$p1Applicative
                      @ m
                      (GHC.Base.$p1Monad
                         @ m
                         (Control.Monad.Supply.Class.$p1MonadSupply @ m $dMonadSupply)))
                   @ GHC.Integer.Type.Integer
                   @ Language.PureScript.Names.Ident
                   Language.PureScript.Names.freshIdent'1
                   (Control.Monad.Supply.Class.fresh @ m $dMonadSupply)) -}
6b19f32dab98adccbd9f0aa57c60782a
  freshIdent'1 ::
    GHC.Integer.Type.Integer -> Language.PureScript.Names.Ident
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (Language.PureScript.Names.GenIdent
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)) -}
c780df7e6467f0296a24d1a31e4fbc8b
  getClassName ::
    Language.PureScript.Names.Name
    -> GHC.Base.Maybe
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Names.Name) ->
                 case ds of wild {
                   DEFAULT
                   -> GHC.Base.Nothing
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ClassName)
                   Language.PureScript.Names.TyClassName name
                   -> GHC.Base.Just
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ClassName)
                        name }) -}
fcc1f2d552c74cea759070c84b872263
  getDctorName ::
    Language.PureScript.Names.Name
    -> GHC.Base.Maybe
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ConstructorName)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Names.Name) ->
                 case ds of wild {
                   DEFAULT
                   -> GHC.Base.Nothing
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ConstructorName)
                   Language.PureScript.Names.DctorName name
                   -> GHC.Base.Just
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ConstructorName)
                        name }) -}
7c09a83f9ea638c212a01e0364b01784
  getIdentName ::
    Language.PureScript.Names.Name
    -> GHC.Base.Maybe Language.PureScript.Names.Ident
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Names.Name) ->
                 case ds of wild {
                   DEFAULT -> GHC.Base.Nothing @ Language.PureScript.Names.Ident
                   Language.PureScript.Names.IdentName name
                   -> GHC.Base.Just @ Language.PureScript.Names.Ident name }) -}
98be7ae0203bc645e8e2b3c024b0edba
  getKindName ::
    Language.PureScript.Names.Name
    -> GHC.Base.Maybe
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.KindName)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Names.Name) ->
                 case ds of wild {
                   DEFAULT
                   -> GHC.Base.Nothing
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.KindName)
                   Language.PureScript.Names.KiName name
                   -> GHC.Base.Just
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.KindName)
                        name }) -}
f701fbcd2304df9b56232f8c4581411d
  getModName ::
    Language.PureScript.Names.Name
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Names.Name) ->
                 case ds of wild {
                   DEFAULT -> GHC.Base.Nothing @ Language.PureScript.Names.ModuleName
                   Language.PureScript.Names.ModName name
                   -> GHC.Base.Just @ Language.PureScript.Names.ModuleName name }) -}
878f7f5431a436ba3cc48c8dfb031d4d
  getQual ::
    Language.PureScript.Names.Qualified a
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: Language.PureScript.Names.Qualified a) ->
                 case ds of wild { Language.PureScript.Names.Qualified mn ds1 ->
                 mn }) -}
9443b324af8d23739ab259070b11272c
  getTypeName ::
    Language.PureScript.Names.Name
    -> GHC.Base.Maybe
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Names.Name) ->
                 case ds of wild {
                   DEFAULT
                   -> GHC.Base.Nothing
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.TypeName)
                   Language.PureScript.Names.TyName name
                   -> GHC.Base.Just
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.TypeName)
                        name }) -}
6075388781efd3165adabbf8ac6d95cf
  getTypeOpName ::
    Language.PureScript.Names.Name
    -> GHC.Base.Maybe
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.TypeOpName)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Names.Name) ->
                 case ds of wild {
                   DEFAULT
                   -> GHC.Base.Nothing
                        @ (Language.PureScript.Names.OpName
                             'Language.PureScript.Names.TypeOpName)
                   Language.PureScript.Names.TyOpName name
                   -> GHC.Base.Just
                        @ (Language.PureScript.Names.OpName
                             'Language.PureScript.Names.TypeOpName)
                        name }) -}
8e502c19034dacb1b06aa73925516aa5
  getValOpName ::
    Language.PureScript.Names.Name
    -> GHC.Base.Maybe
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.ValueOpName)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Names.Name) ->
                 case ds of wild {
                   DEFAULT
                   -> GHC.Base.Nothing
                        @ (Language.PureScript.Names.OpName
                             'Language.PureScript.Names.ValueOpName)
                   Language.PureScript.Names.ValOpName name
                   -> GHC.Base.Just
                        @ (Language.PureScript.Names.OpName
                             'Language.PureScript.Names.ValueOpName)
                        name }) -}
5dc7f70d89d8c2f31fb4ba7485ae62ee
  isBuiltinModuleName ::
    Language.PureScript.Names.ModuleName -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Language.PureScript.Names.ModuleName) ->
                 case ds
                        `cast`
                      (Language.PureScript.Names.N:ModuleName[0]) of wild {
                   [] -> GHC.Types.False
                   : ds1 ds2
                   -> case ds1
                             `cast`
                           (Language.PureScript.Names.N:ProperName[0]
                                <'Language.PureScript.Names.Namespace>_P) of wild1 { Data.Text.Internal.Text dt dt1 dt2 ->
                      case Language.PureScript.Names.isBuiltinModuleName1 of wild2 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                      case GHC.Prim.==# dt2 dt5 of lwild {
                        DEFAULT -> GHC.Types.False
                        1#
                        -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                          -> GHC.Prim.Word#
                                                          -> GHC.Prim.ByteArray#
                                                          -> GHC.Prim.Word#
                                                          -> GHC.Prim.Word#
                                                          -> GHC.Prim.State# GHC.Prim.RealWorld
                                                          -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                GHC.Prim.Int# #)}
                                  dt
                                  (GHC.Prim.int2Word# dt1)
                                  dt3
                                  (GHC.Prim.int2Word# dt4)
                                  (GHC.Prim.int2Word# dt2)
                                  GHC.Prim.realWorld# of wild5 { (#,#) ds3 ds4 ->
                           case GHC.Prim.narrow32Int# ds4 of wild3 {
                             DEFAULT -> GHC.Types.False 0# -> GHC.Types.True } } } } } }) -}
731d63c8c152a05fd96b96d6a0db2989
  isBuiltinModuleName1 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Names.isBuiltinModuleName2) -}
b1a990af1b53a2f37ab78d01afeff3a5
  isBuiltinModuleName2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Prim"#) -}
05654f708f61367305cb83da20612eec
  isQualified ::
    Language.PureScript.Names.Qualified a -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: Language.PureScript.Names.Qualified a) ->
                 case ds of wild { Language.PureScript.Names.Qualified ds1 ds2 ->
                 case ds1 of wild1 {
                   GHC.Base.Nothing -> GHC.Types.False
                   GHC.Base.Just ipv -> GHC.Types.True } }) -}
1a899c7992db0d6d9f94496786ac7c60
  isQualifiedWith ::
    Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.Qualified a -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (mn :: Language.PureScript.Names.ModuleName)
                   (ds :: Language.PureScript.Names.Qualified a) ->
                 case ds of wild { Language.PureScript.Names.Qualified ds1 ds2 ->
                 case ds1 of wild1 {
                   GHC.Base.Nothing -> GHC.Types.False
                   GHC.Base.Just mn'
                   -> GHC.Classes.$fEq[]_$c==
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.Namespace)
                        (Language.PureScript.Names.$fEqProperName
                           @ 'Language.PureScript.Names.Namespace)
                        mn `cast` (Language.PureScript.Names.N:ModuleName[0])
                        mn' `cast` (Language.PureScript.Names.N:ModuleName[0]) } }) -}
e37e569339287956fd68345c529e4b8c
  isUnqualified ::
    Language.PureScript.Names.Qualified a -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (x :: Language.PureScript.Names.Qualified a) ->
                 case x of wild { Language.PureScript.Names.Qualified ds ds1 ->
                 case ds of wild1 {
                   GHC.Base.Nothing -> GHC.Types.True
                   GHC.Base.Just ipv -> GHC.Types.False } }) -}
b0a7675f8f28abc4eb1712d5b786c286
  mkQualified ::
    a
    -> Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.Qualified a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ a (name :: a) (mn :: Language.PureScript.Names.ModuleName) ->
                 Language.PureScript.Names.Qualified
                   @ a
                   (GHC.Base.Just @ Language.PureScript.Names.ModuleName mn)
                   name) -}
79d26c792a293f252a003f5d0f01ddc4
  moduleNameFromString ::
    Data.Text.Internal.Text -> Language.PureScript.Names.ModuleName
  {- Arity: 1, Strictness: <S(SSS),1*U(U,U,U)>,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Names.moduleNameFromString1
                  `cast`
                (<Data.Text.Internal.Text>_R
                 ->_R Sym (Language.PureScript.Names.N:ModuleName[0])) -}
a68b64b231287f8cd9453f2466dde9a5
  moduleNameFromString1 ::
    Data.Text.Internal.Text
    -> [Language.PureScript.Names.ProperName
          'Language.PureScript.Names.Namespace]
  {- Arity: 1, Strictness: <S(SSS),1*U(U,U,U)>,
     Unfolding: InlineRule (1, True, True)
                (Language.PureScript.Names.moduleNameFromString_splitProperNames
                   @ 'Language.PureScript.Names.Namespace) -}
2f74c26b9d21b611df297c4b77c8d37c
  moduleNameFromString2 :: [Language.PureScript.Names.ProperName a]
9bab2d136c431334fde02ce4682c120d
  moduleNameFromString3 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> [Language.PureScript.Names.ProperName a]
  {- Arity: 3, Strictness: <L,U><L,U><S,U> -}
d928da50632280c5b14b3869fa0fe21f
  moduleNameFromString_splitProperNames ::
    Data.Text.Internal.Text -> [Language.PureScript.Names.ProperName a]
  {- Arity: 1, Strictness: <S(SSS),1*U(U,U,U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ @ a :: Language.PureScript.Names.ProperNameType
                   (w :: Data.Text.Internal.Text) ->
                 case w of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Language.PureScript.Names.$wsplitProperNames @ a ww1 ww2 ww3 }) -}
5c136be976042cc97c533bd3348928a5
  qualify ::
    Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.Qualified a
    -> (Language.PureScript.Names.ModuleName, a)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S(SL),1*U(1*U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (m :: Language.PureScript.Names.ModuleName)
                   (ds :: Language.PureScript.Names.Qualified a) ->
                 case ds of wild { Language.PureScript.Names.Qualified ds1 a1 ->
                 case ds1 of wild1 {
                   GHC.Base.Nothing -> (m, a1) GHC.Base.Just m1 -> (m1, a1) } }) -}
bc5cc3d3ba9d105c169eb6038c65d1a8
  runIdent ::
    Language.PureScript.Names.Ident -> Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S,1*U> -}
e07c63fa3ece350e6976663ef993edbb
  runModuleName ::
    Language.PureScript.Names.ModuleName -> Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Names.ModuleName) ->
                 case ds
                        `cast`
                      (Language.PureScript.Names.N:ModuleName[0] ; ([Language.PureScript.Names.N:ProperName[0]
                                                                         <'Language.PureScript.Names.Namespace>_P])_R) of wild {
                   [] -> Language.PureScript.Names.runModuleName1
                   : x1 xs
                   -> Data.Text.concat
                        (GHC.Types.:
                           @ Data.Text.Internal.Text
                           x1
                           (Language.PureScript.Names.runModuleName_go1 xs)) }) -}
95c885a3eaffe1c87761ad715b633f8c
  runModuleName1 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.concat
                   (GHC.Types.[] @ Data.Text.Internal.Text)) -}
4ac4ef3c10681bdc3b71857c40b5b26a
  runModuleName_go1 ::
    [Data.Text.Internal.Text] -> [Data.Text.Internal.Text]
  {- Arity: 1, Strictness: <S,1*U> -}
1522672b880b192c6e05e6cf8a45712d
  runOpName ::
    Language.PureScript.Names.OpName a -> Data.Text.Internal.Text
  RecSel Left Language.PureScript.Names.OpName
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U)>m,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Names.eraseOpName1
                  `cast`
                (forall (a :: <Language.PureScript.Names.OpNameType>_N).
                 <Language.PureScript.Names.OpName a>_R
                 ->_R Language.PureScript.Names.N:OpName[0] <a>_P) -}
29f101e190cc99df85623423972e606f
  runProperName ::
    Language.PureScript.Names.ProperName a -> Data.Text.Internal.Text
  RecSel Left Language.PureScript.Names.ProperName
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U)>m,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Names.coerceProperName1
                  `cast`
                (forall (a :: <Language.PureScript.Names.ProperNameType>_N).
                 <Language.PureScript.Names.ProperName a>_R
                 ->_R Language.PureScript.Names.N:ProperName[0] <a>_P) -}
5c662c2cc0373f386893e9287ea83382
  showIdent ::
    Language.PureScript.Names.Ident -> Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Names.runIdent -}
6a554085bb7bff6e6a827b374081272a
  showOp ::
    Language.PureScript.Names.OpName a -> Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S(SSS),1*U(U,U,U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ @ a :: Language.PureScript.Names.OpNameType
                   (w :: Language.PureScript.Names.OpName a) ->
                 case w `cast`
                      (Language.PureScript.Names.N:OpName[0]
                           <a>_P) of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Language.PureScript.Names.$wshowOp @ a ww1 ww2 ww3 }) -}
3c507c3595affc1e0cc61d34a906a736
  showQualified ::
    (a -> Data.Text.Internal.Text)
    -> Language.PureScript.Names.Qualified a -> Data.Text.Internal.Text
  {- Arity: 2, Strictness: <C(S),1*C1(U(U,U,U))><S(SL),1*U(1*U,U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (w :: a -> Data.Text.Internal.Text)
                   (w1 :: Language.PureScript.Names.Qualified a) ->
                 case w1 of ww { Language.PureScript.Names.Qualified ww1 ww2 ->
                 Language.PureScript.Names.$wshowQualified @ a w ww1 ww2 }) -}
instance GHC.Classes.Eq [Language.PureScript.Names.Ident]
  = Language.PureScript.Names.$fEqIdent
instance GHC.Classes.Eq [Language.PureScript.Names.ModuleName]
  = Language.PureScript.Names.$fEqModuleName
instance GHC.Classes.Eq [Language.PureScript.Names.Name]
  = Language.PureScript.Names.$fEqName
instance GHC.Classes.Eq [Language.PureScript.Names.OpName]
  = Language.PureScript.Names.$fEqOpName
instance GHC.Classes.Eq [Language.PureScript.Names.ProperName]
  = Language.PureScript.Names.$fEqProperName
instance GHC.Classes.Eq [Language.PureScript.Names.Qualified]
  = Language.PureScript.Names.$fEqQualified
instance Data.Foldable.Foldable [Language.PureScript.Names.Qualified]
  = Language.PureScript.Names.$fFoldableQualified
instance Data.Aeson.Types.FromJSON.FromJSON [Language.PureScript.Names.Ident]
  = Language.PureScript.Names.$fFromJSONIdent
instance Data.Aeson.Types.FromJSON.FromJSON [Language.PureScript.Names.ModuleName]
  = Language.PureScript.Names.$fFromJSONModuleName
instance Data.Aeson.Types.FromJSON.FromJSON [Language.PureScript.Names.OpName]
  = Language.PureScript.Names.$fFromJSONOpName
instance Data.Aeson.Types.FromJSON.FromJSON [Language.PureScript.Names.ProperName]
  = Language.PureScript.Names.$fFromJSONProperName
instance Data.Aeson.Types.FromJSON.FromJSON [Language.PureScript.Names.Qualified]
  = Language.PureScript.Names.$fFromJSONQualified
instance GHC.Base.Functor [Language.PureScript.Names.Qualified]
  = Language.PureScript.Names.$fFunctorQualified
instance GHC.Generics.Generic [Language.PureScript.Names.Ident]
  = Language.PureScript.Names.$fGenericIdent
instance GHC.Generics.Generic [Language.PureScript.Names.ModuleName]
  = Language.PureScript.Names.$fGenericModuleName
instance GHC.Generics.Generic [Language.PureScript.Names.Name]
  = Language.PureScript.Names.$fGenericName
instance GHC.Generics.Generic [Language.PureScript.Names.OpName]
  = Language.PureScript.Names.$fGenericOpName
instance GHC.Generics.Generic [Language.PureScript.Names.ProperName]
  = Language.PureScript.Names.$fGenericProperName
instance GHC.Generics.Generic [Language.PureScript.Names.Qualified]
  = Language.PureScript.Names.$fGenericQualified
instance Control.DeepSeq.NFData [Language.PureScript.Names.Ident]
  = Language.PureScript.Names.$fNFDataIdent
instance Control.DeepSeq.NFData [Language.PureScript.Names.ModuleName]
  = Language.PureScript.Names.$fNFDataModuleName
instance Control.DeepSeq.NFData [Language.PureScript.Names.Name]
  = Language.PureScript.Names.$fNFDataName
instance Control.DeepSeq.NFData [Language.PureScript.Names.OpName]
  = Language.PureScript.Names.$fNFDataOpName
instance Control.DeepSeq.NFData [Language.PureScript.Names.ProperName]
  = Language.PureScript.Names.$fNFDataProperName
instance Control.DeepSeq.NFData [Language.PureScript.Names.Qualified]
  = Language.PureScript.Names.$fNFDataQualified
instance GHC.Classes.Ord [Language.PureScript.Names.Ident]
  = Language.PureScript.Names.$fOrdIdent
instance GHC.Classes.Ord [Language.PureScript.Names.ModuleName]
  = Language.PureScript.Names.$fOrdModuleName
instance GHC.Classes.Ord [Language.PureScript.Names.Name]
  = Language.PureScript.Names.$fOrdName
instance GHC.Classes.Ord [Language.PureScript.Names.OpName]
  = Language.PureScript.Names.$fOrdOpName
instance GHC.Classes.Ord [Language.PureScript.Names.ProperName]
  = Language.PureScript.Names.$fOrdProperName
instance GHC.Classes.Ord [Language.PureScript.Names.Qualified]
  = Language.PureScript.Names.$fOrdQualified
instance GHC.Show.Show [Language.PureScript.Names.Ident]
  = Language.PureScript.Names.$fShowIdent
instance GHC.Show.Show [Language.PureScript.Names.ModuleName]
  = Language.PureScript.Names.$fShowModuleName
instance GHC.Show.Show [Language.PureScript.Names.Name]
  = Language.PureScript.Names.$fShowName
instance GHC.Show.Show [Language.PureScript.Names.OpName]
  = Language.PureScript.Names.$fShowOpName
instance GHC.Show.Show [Language.PureScript.Names.ProperName]
  = Language.PureScript.Names.$fShowProperName
instance GHC.Show.Show [Language.PureScript.Names.Qualified]
  = Language.PureScript.Names.$fShowQualified
instance Data.Aeson.Types.ToJSON.ToJSON [Language.PureScript.Names.Ident]
  = Language.PureScript.Names.$fToJSONIdent
instance Data.Aeson.Types.ToJSON.ToJSON [Language.PureScript.Names.ModuleName]
  = Language.PureScript.Names.$fToJSONModuleName
instance Data.Aeson.Types.ToJSON.ToJSON [Language.PureScript.Names.OpName]
  = Language.PureScript.Names.$fToJSONOpName
instance Data.Aeson.Types.ToJSON.ToJSON [Language.PureScript.Names.ProperName]
  = Language.PureScript.Names.$fToJSONProperName
instance Data.Aeson.Types.ToJSON.ToJSON [Language.PureScript.Names.Qualified]
  = Language.PureScript.Names.$fToJSONQualified
instance Data.Traversable.Traversable [Language.PureScript.Names.Qualified]
  = Language.PureScript.Names.$fTraversableQualified
family instance GHC.Generics.Rep [Language.PureScript.Names.Qualified]
  = Language.PureScript.Names.Rep_Qualified
family instance GHC.Generics.Rep [Language.PureScript.Names.Name]
  = Language.PureScript.Names.Rep_Name
family instance GHC.Generics.Rep [Language.PureScript.Names.ModuleName]
  = Language.PureScript.Names.Rep_ModuleName
family instance GHC.Generics.Rep [Language.PureScript.Names.ProperName]
  = Language.PureScript.Names.Rep_ProperName
family instance GHC.Generics.Rep [Language.PureScript.Names.OpName]
  = Language.PureScript.Names.Rep_OpName
family instance GHC.Generics.Rep [Language.PureScript.Names.Ident]
  = Language.PureScript.Names.Rep_Ident
"SPEC/Language.PureScript.Names $fEq[]_$c/= @ (ProperName
                                                'Namespace)" forall ($dEq :: GHC.Classes.Eq
                                                                                                                                         (Language.PureScript.Names.ProperName
                                                                                                                                            'Language.PureScript.Names.Namespace))
  GHC.Classes.$fEq[]_$c/= @ (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.Namespace)
                          $dEq
  = Language.PureScript.Names.$fEqModuleName_$s$fEq[]_$c/=
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

