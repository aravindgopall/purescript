
==================== FINAL INTERFACE ====================
2019-01-24 14:13:28.370601 UTC

interface purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Names [family instance module] 8043
  interface hash: 342fb07b4eba2090084988a2b220c48d
  ABI hash: 00f694509122478d97b327fbbccae327
  export-list hash: ad7ae34f85124c68e8ba1c90fb2e732f
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 1318664a0451f53cd25d6499eb9d0f16
  opt_hash: 2c98c95d41c045ae9c2fb565ec8aabc6
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: True
  where
exports:
  Language.PureScript.Names.coerceProperName
  Language.PureScript.Names.disqualify
  Language.PureScript.Names.disqualifyFor
  Language.PureScript.Names.eraseOpName
  Language.PureScript.Names.freshIdent
  Language.PureScript.Names.freshIdent'
  Language.PureScript.Names.getClassName
  Language.PureScript.Names.getDctorName
  Language.PureScript.Names.getIdentName
  Language.PureScript.Names.getKindName
  Language.PureScript.Names.getModName
  Language.PureScript.Names.getQual
  Language.PureScript.Names.getTypeName
  Language.PureScript.Names.getTypeOpName
  Language.PureScript.Names.getValOpName
  Language.PureScript.Names.isBuiltinModuleName
  Language.PureScript.Names.isQualified
  Language.PureScript.Names.isQualifiedWith
  Language.PureScript.Names.isUnqualified
  Language.PureScript.Names.mkQualified
  Language.PureScript.Names.moduleNameFromString
  Language.PureScript.Names.qualify
  Language.PureScript.Names.runIdent
  Language.PureScript.Names.runModuleName
  Language.PureScript.Names.showIdent
  Language.PureScript.Names.showOp
  Language.PureScript.Names.showQualified
  Language.PureScript.Names.Ident{Language.PureScript.Names.GenIdent Language.PureScript.Names.Ident Language.PureScript.Names.UnusedIdent}
  Language.PureScript.Names.ModuleName{Language.PureScript.Names.ModuleName}
  Language.PureScript.Names.Name{Language.PureScript.Names.DctorName Language.PureScript.Names.IdentName Language.PureScript.Names.KiName Language.PureScript.Names.ModName Language.PureScript.Names.TyClassName Language.PureScript.Names.TyName Language.PureScript.Names.TyOpName Language.PureScript.Names.ValOpName}
  Language.PureScript.Names.OpName{Language.PureScript.Names.OpName runOpName}
  Language.PureScript.Names.OpNameType{Language.PureScript.Names.AnyOpName Language.PureScript.Names.TypeOpName Language.PureScript.Names.ValueOpName}
  Language.PureScript.Names.ProperName{Language.PureScript.Names.ProperName runProperName}
  Language.PureScript.Names.ProperNameType{Language.PureScript.Names.ClassName Language.PureScript.Names.ConstructorName Language.PureScript.Names.KindName Language.PureScript.Names.Namespace Language.PureScript.Names.TypeName}
  Language.PureScript.Names.Qualified{Language.PureScript.Names.Qualified}
module dependencies: Control.Monad.Supply
                     Control.Monad.Supply.Class
package dependencies: aeson-1.3.1.1 array-0.5.2.0
                      attoparsec-0.13.2.2 base-4.11.1.0 base-compat-0.10.4 binary-0.8.5.1
                      bytestring-0.10.8.2 containers-0.5.11.0 deepseq-1.4.3.0
                      dlist-0.8.0.4 ghc-boot-th-8.4.3 ghc-prim-0.5.2.0 hashable-1.2.7.0
                      integer-gmp-1.0.2.0 integer-logarithms-1.0.2.1 mtl-2.2.2
                      pretty-1.1.3.6 primitive-0.6.3.0 random-1.1 scientific-0.3.6.2
                      tagged-0.8.5 template-haskell-2.13.0.0 text-1.2.3.0
                      th-abstraction-0.2.8.0 time-1.8.0.2 time-locale-compat-0.1.1.4
                      transformers-0.5.5.0 unordered-containers-0.2.9.0 uuid-types-1.0.3
                      vector-0.12.0.1
orphans: attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         vector-0.12.0.1:Data.Vector.Unboxed
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.0:Data.Text.Lazy
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.5.0:Control.Monad.Trans.Error
         text-1.2.3.0:Data.Text binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: aeson-1.3.1.1:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         dlist-0.8.0.4:Data.DList ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray tagged-0.8.5:Data.Tagged
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
                         th-abstraction-0.2.8.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  aeson-1.3.1.1:Data.Aeson 108dfb08de41cf77aad4693ac1dc3d44
import  -/  aeson-1.3.1.1:Data.Aeson.Encoding.Internal f04efae65181ca66f15bea14741e502d
import  -/  aeson-1.3.1.1:Data.Aeson.TH 7d552baba5d6d064e5d0fb814e331004
import  -/  aeson-1.3.1.1:Data.Aeson.Types.FromJSON 1ea0c919856f0d29f12e53cd074d532c
import  -/  aeson-1.3.1.1:Data.Aeson.Types.Internal df76c21edff000f9355bfb6fb0dbf3e6
import  -/  aeson-1.3.1.1:Data.Aeson.Types.ToJSON 587c7d8b9444e85253d7faf5f824f568
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.Functor f522c3501272159820fd6f242510732f
import  -/  base-4.11.1.0:Data.Traversable 7ad4edb9184ea1ae8e73f6b94f115c8c
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Generics 4d1469b3e29804a05a1be33d11accff6
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-compat-0.10.4:Prelude.Compat bb6796186ed35a1d09dc34362a3fc27e
import  -/  deepseq-1.4.3.0:Control.DeepSeq 171f1f567c47ef82860df4ad686d11b1
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  integer-gmp-1.0.2.0:GHC.Integer.Type f3d5169c3d3830854b19f6565b265403
import  -/  Control.Monad.Supply.Class 4b0577d8897e2d48cd4fc324f0e8c355
  exports: 9b5454b78bf2751cecd07ba41d8b4d51
  MonadSupply 6fd5e162006451a17cf4a7ae2eb71bd2
  fresh be25d0ae173e5fe4a403c67bc9aa3a21
import  -/  text-1.2.3.0:Data.Text 7daa7e6c9b39d8cc1679e5ec5c64d2be
import  -/  text-1.2.3.0:Data.Text.Internal 30a0a123f71f63b26cd34c6b24f23411
import  -/  text-1.2.3.0:Data.Text.Show 3b4b6fb2985a731022d67f636682da2b
import  -/  unordered-containers-0.2.9.0:Data.HashMap.Base aa3368c2691ac85cecf0d74a4bea8e4d
import  -/  vector-0.12.0.1:Data.Vector f729e70597cc595442dc4fc6c91177bf
import  -/  vector-0.12.0.1:Data.Vector.Mutable e09e8bccd569472cc65f5c99a3d45010
bad3562aa6138b6192713ac281080869
  $fEqIdent :: GHC.Classes.Eq Language.PureScript.Names.Ident
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Names.Ident
                  Language.PureScript.Names.$fEqIdent_$c==
                  Language.PureScript.Names.$fEqIdent_$c/= -}
bad3562aa6138b6192713ac281080869
  $fEqIdent_$c/= ::
    Language.PureScript.Names.Ident
    -> Language.PureScript.Names.Ident -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Names.Ident)
                   (y :: Language.PureScript.Names.Ident) ->
                 case Language.PureScript.Names.$fEqIdent_$c== x y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
bad3562aa6138b6192713ac281080869
  $fEqIdent_$c== ::
    Language.PureScript.Names.Ident
    -> Language.PureScript.Names.Ident -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Language.PureScript.Names.Ident)
                   (ds1 :: Language.PureScript.Names.Ident) ->
                 case ds of wild {
                   Language.PureScript.Names.Ident a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Names.Ident b1
                        -> Data.Text.$fEqText_$c== a1 b1 }
                   Language.PureScript.Names.GenIdent a1 a2
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Names.GenIdent b1 b2
                        -> case a1 of wild2 {
                             GHC.Base.Nothing
                             -> case b1 of wild3 {
                                  GHC.Base.Nothing -> GHC.Integer.Type.eqInteger a2 b2
                                  GHC.Base.Just ipv -> GHC.Types.False }
                             GHC.Base.Just a4
                             -> case b1 of wild3 {
                                  GHC.Base.Nothing -> GHC.Types.False
                                  GHC.Base.Just b4
                                  -> case a4 of wild4 { Data.Text.Internal.Text dt dt1 dt2 ->
                                     case b4 of wild5 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                                     case GHC.Prim.==# dt2 dt5 of lwild {
                                       DEFAULT -> GHC.Types.False
                                       1#
                                       -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                                         -> GHC.Prim.Word#
                                                                         -> GHC.Prim.ByteArray#
                                                                         -> GHC.Prim.Word#
                                                                         -> GHC.Prim.Word#
                                                                         -> GHC.Prim.State#
                                                                              GHC.Prim.RealWorld
                                                                         -> (# GHC.Prim.State#
                                                                                 GHC.Prim.RealWorld,
                                                                               GHC.Prim.Int# #)}
                                                 dt
                                                 (GHC.Prim.int2Word# dt1)
                                                 dt3
                                                 (GHC.Prim.int2Word# dt4)
                                                 (GHC.Prim.int2Word# dt2)
                                                 GHC.Prim.realWorld# of wild6 { (#,#) ds2 ds3 ->
                                          case GHC.Prim.narrow32Int# ds3 of wild7 {
                                            DEFAULT -> GHC.Types.False
                                            0# -> GHC.Integer.Type.eqInteger a2 b2 } } } } } } } }
                   Language.PureScript.Names.UnusedIdent
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Names.UnusedIdent -> GHC.Types.True } }) -}
1b2ddf0c04464d2fa2588925f10c1966
  $fEqModuleName ::
    GHC.Classes.Eq Language.PureScript.Names.ModuleName
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Names.ModuleName
                  Language.PureScript.Names.$fEqModuleName1
                    `cast`
                  (Sym (Language.PureScript.Names.N:ModuleName[0])
                   ->_R Sym (Language.PureScript.Names.N:ModuleName[0])
                   ->_R <GHC.Types.Bool>_R)
                  Language.PureScript.Names.$fEqModuleName_$s$fEq[]_$c/=
                    `cast`
                  (Sym (Language.PureScript.Names.N:ModuleName[0])
                   ->_R Sym (Language.PureScript.Names.N:ModuleName[0])
                   ->_R <GHC.Types.Bool>_R) -}
e352def30ad17af1b20ba3693df0999e
  $fEqModuleName1 ::
    [Language.PureScript.Names.ProperName
       'Language.PureScript.Names.Namespace]
    -> [Language.PureScript.Names.ProperName
          'Language.PureScript.Names.Namespace]
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (GHC.Classes.$fEq[]_$c==
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.Namespace)
                   (Language.PureScript.Names.$fEqProperName
                      @ 'Language.PureScript.Names.Namespace)) -}
a7268334e0b909381550b9329cb80fcc
  $fEqModuleName_$s$fEq[]_$c/= ::
    [Language.PureScript.Names.ProperName
       'Language.PureScript.Names.Namespace]
    -> [Language.PureScript.Names.ProperName
          'Language.PureScript.Names.Namespace]
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: [Language.PureScript.Names.ProperName
                            'Language.PureScript.Names.Namespace])
                   (y :: [Language.PureScript.Names.ProperName
                            'Language.PureScript.Names.Namespace]) ->
                 case GHC.Classes.$fEq[]_$c==
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.Namespace)
                        (Language.PureScript.Names.$fEqProperName
                           @ 'Language.PureScript.Names.Namespace)
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
d04047edf96c18708b7b5f72cb565394
  $fEqName :: GHC.Classes.Eq Language.PureScript.Names.Name
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Names.Name
                  Language.PureScript.Names.$fEqName_$c==
                  Language.PureScript.Names.$fEqName_$c/= -}
d04047edf96c18708b7b5f72cb565394
  $fEqName_$c/= ::
    Language.PureScript.Names.Name
    -> Language.PureScript.Names.Name -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Names.Name)
                   (y :: Language.PureScript.Names.Name) ->
                 case Language.PureScript.Names.$fEqName_$c== x y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
d04047edf96c18708b7b5f72cb565394
  $fEqName_$c== ::
    Language.PureScript.Names.Name
    -> Language.PureScript.Names.Name -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Language.PureScript.Names.Name)
                   (ds1 :: Language.PureScript.Names.Name) ->
                 case ds of wild {
                   Language.PureScript.Names.IdentName a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Names.IdentName b1
                        -> Language.PureScript.Names.$fEqIdent_$c== a1 b1 }
                   Language.PureScript.Names.ValOpName a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Names.ValOpName b1
                        -> Data.Text.$fEqText_$c==
                             a1
                               `cast`
                             (Language.PureScript.Names.N:OpName[0]
                                  <'Language.PureScript.Names.ValueOpName>_P)
                             b1
                               `cast`
                             (Language.PureScript.Names.N:OpName[0]
                                  <'Language.PureScript.Names.ValueOpName>_P) }
                   Language.PureScript.Names.TyName a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Names.TyName b1
                        -> Data.Text.$fEqText_$c==
                             a1
                               `cast`
                             (Language.PureScript.Names.N:ProperName[0]
                                  <'Language.PureScript.Names.TypeName>_P)
                             b1
                               `cast`
                             (Language.PureScript.Names.N:ProperName[0]
                                  <'Language.PureScript.Names.TypeName>_P) }
                   Language.PureScript.Names.TyOpName a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Names.TyOpName b1
                        -> Data.Text.$fEqText_$c==
                             a1
                               `cast`
                             (Language.PureScript.Names.N:OpName[0]
                                  <'Language.PureScript.Names.TypeOpName>_P)
                             b1
                               `cast`
                             (Language.PureScript.Names.N:OpName[0]
                                  <'Language.PureScript.Names.TypeOpName>_P) }
                   Language.PureScript.Names.DctorName a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Names.DctorName b1
                        -> Data.Text.$fEqText_$c==
                             a1
                               `cast`
                             (Language.PureScript.Names.N:ProperName[0]
                                  <'Language.PureScript.Names.ConstructorName>_P)
                             b1
                               `cast`
                             (Language.PureScript.Names.N:ProperName[0]
                                  <'Language.PureScript.Names.ConstructorName>_P) }
                   Language.PureScript.Names.TyClassName a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Names.TyClassName b1
                        -> Data.Text.$fEqText_$c==
                             a1
                               `cast`
                             (Language.PureScript.Names.N:ProperName[0]
                                  <'Language.PureScript.Names.ClassName>_P)
                             b1
                               `cast`
                             (Language.PureScript.Names.N:ProperName[0]
                                  <'Language.PureScript.Names.ClassName>_P) }
                   Language.PureScript.Names.ModName a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Names.ModName b1
                        -> GHC.Classes.$fEq[]_$c==
                             @ (Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.Namespace)
                             (Language.PureScript.Names.$fEqProperName
                                @ 'Language.PureScript.Names.Namespace)
                             a1 `cast` (Language.PureScript.Names.N:ModuleName[0])
                             b1 `cast` (Language.PureScript.Names.N:ModuleName[0]) }
                   Language.PureScript.Names.KiName a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Names.KiName b1
                        -> Data.Text.$fEqText_$c==
                             a1
                               `cast`
                             (Language.PureScript.Names.N:ProperName[0]
                                  <'Language.PureScript.Names.KindName>_P)
                             b1
                               `cast`
                             (Language.PureScript.Names.N:ProperName[0]
                                  <'Language.PureScript.Names.KindName>_P) } }) -}
9af301165f72160425c5e0dde6525338
  $fEqOpName :: GHC.Classes.Eq (Language.PureScript.Names.OpName a)
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ a :: Language.PureScript.Names.OpNameType.
                  @ (Language.PureScript.Names.OpName a)
                  Data.Text.$fEqText_$c==
                    `cast`
                  (Sym (Language.PureScript.Names.N:OpName[0] <a>_P)
                   ->_R Sym (Language.PureScript.Names.N:OpName[0] <a>_P)
                   ->_R <GHC.Types.Bool>_R)
                  Data.Text.$fEqText_$c/=
                    `cast`
                  (Sym (Language.PureScript.Names.N:OpName[0] <a>_P)
                   ->_R Sym (Language.PureScript.Names.N:OpName[0] <a>_P)
                   ->_R <GHC.Types.Bool>_R) -}
a7268334e0b909381550b9329cb80fcc
  $fEqProperName ::
    GHC.Classes.Eq (Language.PureScript.Names.ProperName a)
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ a :: Language.PureScript.Names.ProperNameType.
                  @ (Language.PureScript.Names.ProperName a)
                  Data.Text.$fEqText_$c==
                    `cast`
                  (Sym (Language.PureScript.Names.N:ProperName[0] <a>_P)
                   ->_R Sym (Language.PureScript.Names.N:ProperName[0] <a>_P)
                   ->_R <GHC.Types.Bool>_R)
                  Data.Text.$fEqText_$c/=
                    `cast`
                  (Sym (Language.PureScript.Names.N:ProperName[0] <a>_P)
                   ->_R Sym (Language.PureScript.Names.N:ProperName[0] <a>_P)
                   ->_R <GHC.Types.Bool>_R) -}
1b2ddf0c04464d2fa2588925f10c1966
  $fEqQualified ::
    GHC.Classes.Eq a =>
    GHC.Classes.Eq (Language.PureScript.Names.Qualified a)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Classes.Eq a).
                  @ (Language.PureScript.Names.Qualified a)
                  (Language.PureScript.Names.$fEqQualified_$c== @ a v)
                  (Language.PureScript.Names.$fEqQualified_$c/= @ a v) -}
1b2ddf0c04464d2fa2588925f10c1966
  $fEqQualified_$c/= ::
    GHC.Classes.Eq a =>
    Language.PureScript.Names.Qualified a
    -> Language.PureScript.Names.Qualified a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S(SL),1*U(1*U,U)><S(SL),1*U(1*U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ a
                   ($dEq :: GHC.Classes.Eq a)
                   (x :: Language.PureScript.Names.Qualified a)
                   (y :: Language.PureScript.Names.Qualified a) ->
                 case Language.PureScript.Names.$fEqQualified_$c==
                        @ a
                        $dEq
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
1b2ddf0c04464d2fa2588925f10c1966
  $fEqQualified_$c== ::
    GHC.Classes.Eq a =>
    Language.PureScript.Names.Qualified a
    -> Language.PureScript.Names.Qualified a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S(SL),1*U(1*U,U)><S(SL),1*U(1*U,U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: GHC.Classes.Eq a)
                   (w1 :: Language.PureScript.Names.Qualified a)
                   (w2 :: Language.PureScript.Names.Qualified a) ->
                 case w1 of ww { Language.PureScript.Names.Qualified ww1 ww2 ->
                 case w2 of ww3 { Language.PureScript.Names.Qualified ww4 ww5 ->
                 Language.PureScript.Names.$w$c== @ a w ww1 ww2 ww4 ww5 } }) -}
1b2ddf0c04464d2fa2588925f10c1966
  $fFoldableQualified ::
    Data.Foldable.Foldable Language.PureScript.Names.Qualified
  DFunId
  {- HasNoCafRefs, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Names.Qualified
                  Language.PureScript.Names.$fFoldableQualified_$cfold
                  Language.PureScript.Names.$fFoldableQualified_$cfoldMap
                  Language.PureScript.Names.$fFoldableQualified_$cfoldr
                  Language.PureScript.Names.$fFoldableQualified_$cfoldr
                  Language.PureScript.Names.$fFoldableQualified_$cfoldl'
                  Language.PureScript.Names.$fFoldableQualified_$cfoldl'
                  Language.PureScript.Names.$fFoldableQualified_$cfoldr1
                  Language.PureScript.Names.$fFoldableQualified_$cfoldr1
                  Language.PureScript.Names.$fFoldableQualified_$ctoList
                  Language.PureScript.Names.$fFoldableQualified_$cnull
                  Language.PureScript.Names.$fFoldableQualified_$clength
                  Language.PureScript.Names.$fFoldableQualified_$celem
                  Language.PureScript.Names.$fFoldableQualified_$cminimum
                  Language.PureScript.Names.$fFoldableQualified_$cminimum
                  Language.PureScript.Names.$fFoldableQualified2
                    `cast`
                  (forall (a :: <*>_N).
                   <GHC.Num.Num a>_R
                   ->_R <Language.PureScript.Names.Qualified a>_R
                   ->_R Data.Semigroup.Internal.N:Sum[0] <a>_R)
                  Language.PureScript.Names.$fFoldableQualified1
                    `cast`
                  (forall (a :: <*>_N).
                   <GHC.Num.Num a>_R
                   ->_R <Language.PureScript.Names.Qualified a>_R
                   ->_R Data.Semigroup.Internal.N:Product[0] <a>_R) -}
1b2ddf0c04464d2fa2588925f10c1966
  $fFoldableQualified1 ::
    GHC.Num.Num a =>
    Language.PureScript.Names.Qualified a
    -> Data.Semigroup.Internal.Product a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   ($dNum :: GHC.Num.Num a)
                   (eta :: Language.PureScript.Names.Qualified a) ->
                 case eta of wild { Language.PureScript.Names.Qualified a1 a2 ->
                 a2 `cast` (Sym (Data.Semigroup.Internal.N:Product[0] <a>_R)) }) -}
1b2ddf0c04464d2fa2588925f10c1966
  $fFoldableQualified2 ::
    GHC.Num.Num a =>
    Language.PureScript.Names.Qualified a
    -> Data.Semigroup.Internal.Sum a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   ($dNum :: GHC.Num.Num a)
                   (eta :: Language.PureScript.Names.Qualified a) ->
                 case eta of wild { Language.PureScript.Names.Qualified a1 a2 ->
                 a2 `cast` (Sym (Data.Semigroup.Internal.N:Sum[0] <a>_R)) }) -}
1b2ddf0c04464d2fa2588925f10c1966
  $fFoldableQualified3 :: Language.PureScript.Names.Qualified a -> a
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (x :: Language.PureScript.Names.Qualified a) ->
                 case x of wild { Language.PureScript.Names.Qualified a1 a2 ->
                 a2 }) -}
1b2ddf0c04464d2fa2588925f10c1966
  $fFoldableQualified_$celem ::
    GHC.Classes.Eq a =>
    a -> Language.PureScript.Names.Qualified a -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(1*C1(C(U)),A)><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a ($dEq :: GHC.Classes.Eq a) (eta :: a) ->
                 let {
                   f :: a -> GHC.Types.Bool = GHC.Classes.== @ a $dEq eta
                 } in
                 (\ (ds :: Language.PureScript.Names.Qualified a) ->
                  case ds of wild { Language.PureScript.Names.Qualified a1 a2 ->
                  (f a2) `cast` (Sym (Data.Semigroup.Internal.N:Any[0])) })
                   `cast`
                 (<Language.PureScript.Names.Qualified a>_R
                  ->_R Data.Semigroup.Internal.N:Any[0])) -}
1b2ddf0c04464d2fa2588925f10c1966
  $fFoldableQualified_$cfold ::
    GHC.Base.Monoid m => Language.PureScript.Names.Qualified m -> m
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ m
                   ($dMonoid :: GHC.Base.Monoid m)
                   (ds :: Language.PureScript.Names.Qualified m) ->
                 case ds of wild { Language.PureScript.Names.Qualified a1 a2 ->
                 a2 }) -}
1b2ddf0c04464d2fa2588925f10c1966
  $fFoldableQualified_$cfoldMap ::
    GHC.Base.Monoid m =>
    (a -> m) -> Language.PureScript.Names.Qualified a -> m
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,A><C(S),1*C1(U)><S,1*U(A,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ m
                   @ a
                   ($dMonoid :: GHC.Base.Monoid m)
                   (f :: a -> m)
                   (ds :: Language.PureScript.Names.Qualified a) ->
                 case ds of wild { Language.PureScript.Names.Qualified a1 a2 ->
                 f a2 }) -}
1b2ddf0c04464d2fa2588925f10c1966
  $fFoldableQualified_$cfoldl' ::
    (b -> a -> b) -> b -> Language.PureScript.Names.Qualified a -> b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(C(S)),1*C1(C1(U))><L,U><S,1*U(A,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ b
                   @ a
                   (f :: b -> a -> b)
                   (z0 :: b)
                   (xs :: Language.PureScript.Names.Qualified a) ->
                 case xs of wild { Language.PureScript.Names.Qualified a1 a2 ->
                 f z0 a2 }) -}
1b2ddf0c04464d2fa2588925f10c1966
  $fFoldableQualified_$cfoldr ::
    (a -> b -> b) -> b -> Language.PureScript.Names.Qualified a -> b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(C(S)),1*C1(C1(U))><L,U><S,1*U(A,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ b
                   (f :: a -> b -> b)
                   (z2 :: b)
                   (ds :: Language.PureScript.Names.Qualified a) ->
                 case ds of wild { Language.PureScript.Names.Qualified a1 a2 ->
                 f a2 z2 }) -}
1b2ddf0c04464d2fa2588925f10c1966
  $fFoldableQualified_$cfoldr1 ::
    (a -> a -> a) -> Language.PureScript.Names.Qualified a -> a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (f :: a -> a -> a)
                   (xs :: Language.PureScript.Names.Qualified a) ->
                 case xs of wild { Language.PureScript.Names.Qualified a1 a2 ->
                 a2 }) -}
1b2ddf0c04464d2fa2588925f10c1966
  $fFoldableQualified_$clength ::
    Language.PureScript.Names.Qualified a -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*H>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (xs :: Language.PureScript.Names.Qualified a) ->
                 case xs of wild { Language.PureScript.Names.Qualified a1 a2 ->
                 GHC.Types.I# 1# }) -}
1b2ddf0c04464d2fa2588925f10c1966
  $fFoldableQualified_$cminimum ::
    GHC.Classes.Ord a => Language.PureScript.Names.Qualified a -> a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ a ($dOrd :: GHC.Classes.Ord a) ->
                 Language.PureScript.Names.$fFoldableQualified3 @ a) -}
1b2ddf0c04464d2fa2588925f10c1966
  $fFoldableQualified_$cnull ::
    Language.PureScript.Names.Qualified a -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*H>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: Language.PureScript.Names.Qualified a) ->
                 case ds of wild { Language.PureScript.Names.Qualified ds1 ds2 ->
                 GHC.Types.False }) -}
1b2ddf0c04464d2fa2588925f10c1966
  $fFoldableQualified_$ctoList ::
    Language.PureScript.Names.Qualified a -> [a]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(A,U)>m2,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ a (t2 :: Language.PureScript.Names.Qualified a) ->
                 GHC.Base.build
                   @ a
                   (\ @ b (c :: a -> b -> b)[OneShot] (n :: b)[OneShot] ->
                    case t2 of wild { Language.PureScript.Names.Qualified a1 a2 ->
                    c a2 n })) -}
bad3562aa6138b6192713ac281080869
  $fFromJSONIdent ::
    Data.Aeson.Types.FromJSON.FromJSON Language.PureScript.Names.Ident
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Names.Ident
                  Language.PureScript.Names.$fFromJSONIdent_$cparseJSON
                  Language.PureScript.Names.$fFromJSONIdent_$cparseJSONList -}
9865095b1cef0f85beb6d9655513e2c3
  $fFromJSONIdent1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (", encountered "#) -}
9373b1fd7f3267380110f270ff79af74
  $fFromJSONIdent2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("[a]"#) -}
5ac2d1294c720c8377ba3658c7824767
  $fFromJSONIdent3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("expected "#) -}
bad3562aa6138b6192713ac281080869
  $fFromJSONIdent4 ::
    [(Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value)]
    -> Data.Aeson.Types.Internal.Parser Language.PureScript.Names.Ident
  {- Arity: 1, Strictness: <S,U> -}
f08955f0ed4f54de5047613adbccd889
  $fFromJSONIdent5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Names.$fFromJSONIdent6) -}
7c825b427aa105f906b91706f0e5c5ef
  $fFromJSONIdent6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Language.PureScript.Names.Ident"#) -}
bad3562aa6138b6192713ac281080869
  $fFromJSONIdent_$cparseJSON ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser Language.PureScript.Names.Ident
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (value :: Data.Aeson.Types.Internal.Value) ->
                 case value of wild {
                   DEFAULT
                   -> Data.Aeson.TH.noObjectFail
                        @ Language.PureScript.Names.Ident
                        Language.PureScript.Names.$fFromJSONIdent5
                        (case wild of wild1 {
                           Data.Aeson.Types.Internal.Array ds9 -> Data.Aeson.TH.valueConName9
                           Data.Aeson.Types.Internal.String ds9 -> Data.Aeson.TH.valueConName7
                           Data.Aeson.Types.Internal.Number ds9 -> Data.Aeson.TH.valueConName5
                           Data.Aeson.Types.Internal.Bool ds9 -> Data.Aeson.TH.valueConName3
                           Data.Aeson.Types.Internal.Null -> Data.Aeson.TH.valueConName1 })
                   Data.Aeson.Types.Internal.Object obj
                   -> case obj of wild1 {
                        Data.HashMap.Base.Empty
                        -> Language.PureScript.Names.$fFromJSONIdent4
                             (GHC.Types.[]
                                @ (Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value))
                        Data.HashMap.Base.BitmapIndexed dt dt1
                        -> Language.PureScript.Names.$fFromJSONIdent4
                             (Language.PureScript.Names.$fFromJSONIdent_$s$wgo3
                                (GHC.Types.[]
                                   @ (Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value))
                                0#
                                (GHC.Prim.sizeofSmallArray#
                                   @ (Data.HashMap.Base.HashMap
                                        Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                                   dt1)
                                dt1)
                        Data.HashMap.Base.Leaf dt dt1 dt2
                        -> Language.PureScript.Names.$fFromJSONIdent4
                             (GHC.Types.:
                                @ (Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value)
                                (dt1, dt2)
                                (GHC.Types.[]
                                   @ (Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value)))
                        Data.HashMap.Base.Full dt
                        -> Language.PureScript.Names.$fFromJSONIdent4
                             (Language.PureScript.Names.$fFromJSONIdent_$s$wgo1
                                (GHC.Types.[]
                                   @ (Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value))
                                0#
                                (GHC.Prim.sizeofSmallArray#
                                   @ (Data.HashMap.Base.HashMap
                                        Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                                   dt)
                                dt)
                        Data.HashMap.Base.Collision dt dt1
                        -> Language.PureScript.Names.$fFromJSONIdent4
                             (Language.PureScript.Names.$fFromJSONIdent_$s$wgo2
                                (GHC.Types.[]
                                   @ (Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value))
                                0#
                                (GHC.Prim.sizeofSmallArray#
                                   @ (Data.HashMap.Base.Leaf
                                        Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                                   dt1)
                                dt1) } }) -}
bad3562aa6138b6192713ac281080869
  $fFromJSONIdent_$cparseJSONList ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         [Language.PureScript.Names.Ident]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Data.Aeson.Types.Internal.Value) ->
                 case ds of wild {
                   DEFAULT
                   -> let {
                        msg19 :: GHC.Base.String
                        = GHC.CString.unpackAppendCString#
                            Language.PureScript.Names.$fFromJSONIdent3
                            (GHC.CString.unpackAppendCString#
                               Language.PureScript.Names.$fFromJSONIdent2
                               (GHC.CString.unpackAppendCString#
                                  Language.PureScript.Names.$fFromJSONIdent1
                                  (case wild of wild1 {
                                     Data.Aeson.Types.Internal.Object ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList10
                                     Data.Aeson.Types.Internal.String ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList8
                                     Data.Aeson.Types.Internal.Number ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList6
                                     Data.Aeson.Types.Internal.Bool ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList4
                                     Data.Aeson.Types.Internal.Null
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList1 })))
                      } in
                      (\ @ f4 :: * -> *
                         @ r
                         (path :: Data.Aeson.Types.Internal.JSONPath)
                         (kf :: Data.Aeson.Types.Internal.Failure f4 r)
                         (_ks :: Data.Aeson.Types.Internal.Success
                                   [Language.PureScript.Names.Ident] f4 r) ->
                       kf
                         (GHC.List.reverse @ Data.Aeson.Types.Internal.JSONPathElement path)
                         msg19)
                        `cast`
                      (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                <[Language.PureScript.Names.Ident]>_R))
                   Data.Aeson.Types.Internal.Array a2
                   -> case a2 of wild1 { Data.Vector.Vector dt dt1 dt2 ->
                      letrec {
                        $wgo :: GHC.Prim.Int# -> [Data.Aeson.Types.Internal.Value]
                          {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                        = \ (ww :: GHC.Prim.Int#) ->
                          case GHC.Prim.>=# ww dt1 of lwild {
                            DEFAULT
                            -> case GHC.Prim.indexArray#
                                      @ Data.Aeson.Types.Internal.Value
                                      dt2
                                      (GHC.Prim.+# dt ww) of ds3 { Unit# ipv ->
                               GHC.Types.:
                                 @ Data.Aeson.Types.Internal.Value
                                 ipv
                                 ($wgo (GHC.Prim.+# ww 1#)) }
                            1# -> GHC.Types.[] @ Data.Aeson.Types.Internal.Value }
                      } in
                      Language.PureScript.Names.$fFromJSONIdent_go 0# ($wgo 0#) } }) -}
642921d21bcf605758c3327037bbf2cb
  $fFromJSONIdent_$s$wgo1 ::
    [(Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value)]
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.SmallArray#
         (Data.HashMap.Base.HashMap
            Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
    -> [(Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value)]
  {- Arity: 4, HasNoCafRefs, Strictness: <L,1*U><S,U><S,U><L,U> -}
eb100dd289368ddc2ad9c8e9a1a20e00
  $fFromJSONIdent_$s$wgo2 ::
    [(Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value)]
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.SmallArray#
         (Data.HashMap.Base.Leaf
            Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
    -> [(Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value)]
  {- Arity: 4, HasNoCafRefs, Strictness: <L,1*U><S,U><S,U><L,U> -}
fcca0708a1d96e16035ff91407948ba6
  $fFromJSONIdent_$s$wgo3 ::
    [(Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value)]
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.SmallArray#
         (Data.HashMap.Base.HashMap
            Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
    -> [(Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value)]
  {- Arity: 4, HasNoCafRefs, Strictness: <L,1*U><S,U><S,U><L,U> -}
bad3562aa6138b6192713ac281080869
  $fFromJSONIdent_go ::
    GHC.Prim.Int#
    -> [Data.Aeson.Types.Internal.Value]
    -> Data.Aeson.Types.Internal.Parser
         [Language.PureScript.Names.Ident]
  {- Arity: 2, Strictness: <L,U><S,1*U> -}
1b2ddf0c04464d2fa2588925f10c1966
  $fFromJSONModuleName ::
    Data.Aeson.Types.FromJSON.FromJSON
      Language.PureScript.Names.ModuleName
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Names.ModuleName
                  Language.PureScript.Names.$fFromJSONModuleName_$cparseJSON
                  Language.PureScript.Names.$fFromJSONModuleName_$cparseJSONList -}
a7268334e0b909381550b9329cb80fcc
  $fFromJSONModuleName1 ::
    GHC.Prim.Int#
    -> [Data.Aeson.Types.Internal.Value]
    -> Data.Aeson.Types.Internal.Parser
         [Language.PureScript.Names.ProperName a]
  {- Arity: 2, Strictness: <L,U><S,1*U> -}
1b2ddf0c04464d2fa2588925f10c1966
  $fFromJSONModuleName_$cparseJSON ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         Language.PureScript.Names.ModuleName
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ (value :: Data.Aeson.Types.Internal.Value) ->
                 let {
                   m :: Data.Aeson.Types.Internal.Parser
                          [Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.Namespace]
                   = Language.PureScript.Names.$fFromJSONModuleName_$cparseJSONList1
                       @ 'Language.PureScript.Names.Namespace
                       value
                 } in
                 (\ @ f5 :: * -> *
                    @ r
                    (path :: Data.Aeson.Types.Internal.JSONPath)
                    (kf :: Data.Aeson.Types.Internal.Failure f5 r)
                    (ks :: Data.Aeson.Types.Internal.Success
                             Language.PureScript.Names.ModuleName f5 r) ->
                  m `cast`
                  (Data.Aeson.Types.Internal.N:Parser[0]
                       <[Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.Namespace]>_R)
                    @ f5
                    @ r
                    path
                    kf
                    (\ (a1 :: [Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.Namespace]) ->
                     ks a1 `cast` (Sym (Language.PureScript.Names.N:ModuleName[0]))))
                   `cast`
                 (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                           <Language.PureScript.Names.ModuleName>_R))) -}
1b2ddf0c04464d2fa2588925f10c1966
  $fFromJSONModuleName_$cparseJSONList ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         [Language.PureScript.Names.ModuleName]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Data.Aeson.Types.Internal.Value) ->
                 case ds of wild {
                   DEFAULT
                   -> let {
                        msg19 :: GHC.Base.String
                        = GHC.CString.unpackAppendCString#
                            Language.PureScript.Names.$fFromJSONIdent3
                            (GHC.CString.unpackAppendCString#
                               Language.PureScript.Names.$fFromJSONIdent2
                               (GHC.CString.unpackAppendCString#
                                  Language.PureScript.Names.$fFromJSONIdent1
                                  (case wild of wild1 {
                                     Data.Aeson.Types.Internal.Object ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList10
                                     Data.Aeson.Types.Internal.String ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList8
                                     Data.Aeson.Types.Internal.Number ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList6
                                     Data.Aeson.Types.Internal.Bool ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList4
                                     Data.Aeson.Types.Internal.Null
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList1 })))
                      } in
                      (\ @ f4 :: * -> *
                         @ r
                         (path :: Data.Aeson.Types.Internal.JSONPath)
                         (kf :: Data.Aeson.Types.Internal.Failure f4 r)
                         (_ks :: Data.Aeson.Types.Internal.Success
                                   [Language.PureScript.Names.ModuleName] f4 r) ->
                       kf
                         (GHC.List.reverse @ Data.Aeson.Types.Internal.JSONPathElement path)
                         msg19)
                        `cast`
                      (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                <[Language.PureScript.Names.ModuleName]>_R))
                   Data.Aeson.Types.Internal.Array a2
                   -> case a2 of wild1 { Data.Vector.Vector dt dt1 dt2 ->
                      letrec {
                        $wgo :: GHC.Prim.Int# -> [Data.Aeson.Types.Internal.Value]
                          {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                        = \ (ww :: GHC.Prim.Int#) ->
                          case GHC.Prim.>=# ww dt1 of lwild {
                            DEFAULT
                            -> case GHC.Prim.indexArray#
                                      @ Data.Aeson.Types.Internal.Value
                                      dt2
                                      (GHC.Prim.+# dt ww) of ds3 { Unit# ipv ->
                               GHC.Types.:
                                 @ Data.Aeson.Types.Internal.Value
                                 ipv
                                 ($wgo (GHC.Prim.+# ww 1#)) }
                            1# -> GHC.Types.[] @ Data.Aeson.Types.Internal.Value }
                      } in
                      Language.PureScript.Names.$fFromJSONModuleName_go
                        0#
                        ($wgo 0#) } }) -}
a7268334e0b909381550b9329cb80fcc
  $fFromJSONModuleName_$cparseJSONList1 ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         [Language.PureScript.Names.ProperName a]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a :: Language.PureScript.Names.ProperNameType
                   (ds :: Data.Aeson.Types.Internal.Value) ->
                 case ds of wild {
                   DEFAULT
                   -> let {
                        msg19 :: GHC.Base.String
                        = GHC.CString.unpackAppendCString#
                            Language.PureScript.Names.$fFromJSONIdent3
                            (GHC.CString.unpackAppendCString#
                               Language.PureScript.Names.$fFromJSONIdent2
                               (GHC.CString.unpackAppendCString#
                                  Language.PureScript.Names.$fFromJSONIdent1
                                  (case wild of wild1 {
                                     Data.Aeson.Types.Internal.Object ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList10
                                     Data.Aeson.Types.Internal.String ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList8
                                     Data.Aeson.Types.Internal.Number ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList6
                                     Data.Aeson.Types.Internal.Bool ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList4
                                     Data.Aeson.Types.Internal.Null
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList1 })))
                      } in
                      (\ @ f4 :: * -> *
                         @ r
                         (path :: Data.Aeson.Types.Internal.JSONPath)
                         (kf :: Data.Aeson.Types.Internal.Failure f4 r)
                         (_ks :: Data.Aeson.Types.Internal.Success
                                   [Language.PureScript.Names.ProperName a] f4 r) ->
                       kf
                         (GHC.List.reverse @ Data.Aeson.Types.Internal.JSONPathElement path)
                         msg19)
                        `cast`
                      (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                <[Language.PureScript.Names.ProperName a]>_R))
                   Data.Aeson.Types.Internal.Array a2
                   -> case a2 of wild1 { Data.Vector.Vector dt dt1 dt2 ->
                      letrec {
                        $wgo :: GHC.Prim.Int# -> [Data.Aeson.Types.Internal.Value]
                          {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                        = \ (ww :: GHC.Prim.Int#) ->
                          case GHC.Prim.>=# ww dt1 of lwild {
                            DEFAULT
                            -> case GHC.Prim.indexArray#
                                      @ Data.Aeson.Types.Internal.Value
                                      dt2
                                      (GHC.Prim.+# dt ww) of ds3 { Unit# ipv ->
                               GHC.Types.:
                                 @ Data.Aeson.Types.Internal.Value
                                 ipv
                                 ($wgo (GHC.Prim.+# ww 1#)) }
                            1# -> GHC.Types.[] @ Data.Aeson.Types.Internal.Value }
                      } in
                      Language.PureScript.Names.$fFromJSONModuleName1
                        @ a
                        0#
                        ($wgo 0#) } }) -}
1b2ddf0c04464d2fa2588925f10c1966
  $fFromJSONModuleName_go ::
    GHC.Prim.Int#
    -> [Data.Aeson.Types.Internal.Value]
    -> Data.Aeson.Types.Internal.Parser
         [Language.PureScript.Names.ModuleName]
  {- Arity: 2, Strictness: <L,U><S,1*U> -}
9af301165f72160425c5e0dde6525338
  $fFromJSONOpName ::
    Data.Aeson.Types.FromJSON.FromJSON
      (Language.PureScript.Names.OpName a)
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ a :: Language.PureScript.Names.OpNameType.
                  @ (Language.PureScript.Names.OpName a)
                  (Language.PureScript.Names.$fFromJSONOpName_$cparseJSON @ a)
                  (Language.PureScript.Names.$fFromJSONOpName_$cparseJSONList @ a) -}
9af301165f72160425c5e0dde6525338
  $fFromJSONOpName1 ::
    GHC.Prim.Int#
    -> [Data.Aeson.Types.Internal.Value]
    -> Data.Aeson.Types.Internal.Parser
         [Language.PureScript.Names.OpName a]
  {- Arity: 2, Strictness: <L,U><S,1*U> -}
48e18a9c8e8845a2d8fc18749b177e91
  $fFromJSONOpName2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Names.$fFromJSONOpName3) -}
75172d4afaeeaa1b2198c7eb7c6f6a19
  $fFromJSONOpName3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Text"#) -}
9af301165f72160425c5e0dde6525338
  $fFromJSONOpName_$cparseJSON ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         (Language.PureScript.Names.OpName a)
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ @ a :: Language.PureScript.Names.OpNameType
                   (x :: Data.Aeson.Types.Internal.Value) ->
                 let {
                   m :: Data.Aeson.Types.Internal.Parser Data.Text.Internal.Text
                   = case x of wild {
                       DEFAULT
                       -> let {
                            msg19 :: GHC.Base.String
                            = GHC.CString.unpackAppendCString#
                                Data.Aeson.Types.FromJSON.typeMismatch4
                                (GHC.Base.++
                                   @ GHC.Types.Char
                                   Language.PureScript.Names.$fFromJSONOpName2
                                   (GHC.CString.unpackAppendCString#
                                      Data.Aeson.Types.FromJSON.typeMismatch3
                                      (case wild of wild1 {
                                         Data.Aeson.Types.Internal.Object ds
                                         -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList10
                                         Data.Aeson.Types.Internal.Array ds
                                         -> Data.Aeson.Types.FromJSON.typeMismatch1
                                         Data.Aeson.Types.Internal.Number ds
                                         -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList6
                                         Data.Aeson.Types.Internal.Bool ds
                                         -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList4
                                         Data.Aeson.Types.Internal.Null
                                         -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList1 })))
                          } in
                          (\ @ f4 :: * -> *
                             @ r
                             (path :: Data.Aeson.Types.Internal.JSONPath)
                             (kf :: Data.Aeson.Types.Internal.Failure f4 r)[OneShot]
                             (_ks :: Data.Aeson.Types.Internal.Success
                                       Data.Text.Internal.Text f4 r)[OneShot] ->
                           kf
                             (GHC.List.reverse @ Data.Aeson.Types.Internal.JSONPathElement path)
                             msg19)
                            `cast`
                          (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                    <Data.Text.Internal.Text>_R))
                       Data.Aeson.Types.Internal.String txt
                       -> (\ @ f4 :: * -> *
                             @ r
                             (_path :: Data.Aeson.Types.Internal.JSONPath)
                             (_kf :: Data.Aeson.Types.Internal.Failure f4 r)[OneShot]
                             (ks :: Data.Aeson.Types.Internal.Success
                                      Data.Text.Internal.Text f4 r)[OneShot] ->
                           ks txt)
                            `cast`
                          (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                    <Data.Text.Internal.Text>_R)) }
                 } in
                 (\ @ f5 :: * -> *
                    @ r
                    (path :: Data.Aeson.Types.Internal.JSONPath)
                    (kf :: Data.Aeson.Types.Internal.Failure f5 r)
                    (ks :: Data.Aeson.Types.Internal.Success
                             (Language.PureScript.Names.OpName a) f5 r) ->
                  m `cast`
                  (Data.Aeson.Types.Internal.N:Parser[0] <Data.Text.Internal.Text>_R)
                    @ f5
                    @ r
                    path
                    kf
                    (\ (a1 :: Data.Text.Internal.Text) ->
                     ks a1 `cast` (Sym (Language.PureScript.Names.N:OpName[0] <a>_P))))
                   `cast`
                 (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                           <Language.PureScript.Names.OpName a>_R))) -}
9af301165f72160425c5e0dde6525338
  $fFromJSONOpName_$cparseJSONList ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         [Language.PureScript.Names.OpName a]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a :: Language.PureScript.Names.OpNameType
                   (ds :: Data.Aeson.Types.Internal.Value) ->
                 case ds of wild {
                   DEFAULT
                   -> let {
                        msg19 :: GHC.Base.String
                        = GHC.CString.unpackAppendCString#
                            Language.PureScript.Names.$fFromJSONIdent3
                            (GHC.CString.unpackAppendCString#
                               Language.PureScript.Names.$fFromJSONIdent2
                               (GHC.CString.unpackAppendCString#
                                  Language.PureScript.Names.$fFromJSONIdent1
                                  (case wild of wild1 {
                                     Data.Aeson.Types.Internal.Object ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList10
                                     Data.Aeson.Types.Internal.String ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList8
                                     Data.Aeson.Types.Internal.Number ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList6
                                     Data.Aeson.Types.Internal.Bool ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList4
                                     Data.Aeson.Types.Internal.Null
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList1 })))
                      } in
                      (\ @ f4 :: * -> *
                         @ r
                         (path :: Data.Aeson.Types.Internal.JSONPath)
                         (kf :: Data.Aeson.Types.Internal.Failure f4 r)
                         (_ks :: Data.Aeson.Types.Internal.Success
                                   [Language.PureScript.Names.OpName a] f4 r) ->
                       kf
                         (GHC.List.reverse @ Data.Aeson.Types.Internal.JSONPathElement path)
                         msg19)
                        `cast`
                      (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                <[Language.PureScript.Names.OpName a]>_R))
                   Data.Aeson.Types.Internal.Array a2
                   -> case a2 of wild1 { Data.Vector.Vector dt dt1 dt2 ->
                      letrec {
                        $wgo :: GHC.Prim.Int# -> [Data.Aeson.Types.Internal.Value]
                          {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                        = \ (ww :: GHC.Prim.Int#) ->
                          case GHC.Prim.>=# ww dt1 of lwild {
                            DEFAULT
                            -> case GHC.Prim.indexArray#
                                      @ Data.Aeson.Types.Internal.Value
                                      dt2
                                      (GHC.Prim.+# dt ww) of ds3 { Unit# ipv ->
                               GHC.Types.:
                                 @ Data.Aeson.Types.Internal.Value
                                 ipv
                                 ($wgo (GHC.Prim.+# ww 1#)) }
                            1# -> GHC.Types.[] @ Data.Aeson.Types.Internal.Value }
                      } in
                      Language.PureScript.Names.$fFromJSONOpName1
                        @ a
                        0#
                        ($wgo 0#) } }) -}
a7268334e0b909381550b9329cb80fcc
  $fFromJSONProperName ::
    Data.Aeson.Types.FromJSON.FromJSON
      (Language.PureScript.Names.ProperName a)
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ a :: Language.PureScript.Names.ProperNameType.
                  @ (Language.PureScript.Names.ProperName a)
                  (Language.PureScript.Names.$fFromJSONProperName_$cparseJSON @ a)
                  (Language.PureScript.Names.$fFromJSONModuleName_$cparseJSONList1
                     @ a) -}
a7268334e0b909381550b9329cb80fcc
  $fFromJSONProperName_$cparseJSON ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         (Language.PureScript.Names.ProperName a)
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: (\ @ a :: Language.PureScript.Names.ProperNameType
                   (x :: Data.Aeson.Types.Internal.Value) ->
                 let {
                   m :: Data.Aeson.Types.Internal.Parser Data.Text.Internal.Text
                   = case x of wild {
                       DEFAULT
                       -> let {
                            msg19 :: GHC.Base.String
                            = GHC.CString.unpackAppendCString#
                                Data.Aeson.Types.FromJSON.typeMismatch4
                                (GHC.Base.++
                                   @ GHC.Types.Char
                                   Language.PureScript.Names.$fFromJSONOpName2
                                   (GHC.CString.unpackAppendCString#
                                      Data.Aeson.Types.FromJSON.typeMismatch3
                                      (case wild of wild1 {
                                         Data.Aeson.Types.Internal.Object ds
                                         -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList10
                                         Data.Aeson.Types.Internal.Array ds
                                         -> Data.Aeson.Types.FromJSON.typeMismatch1
                                         Data.Aeson.Types.Internal.Number ds
                                         -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList6
                                         Data.Aeson.Types.Internal.Bool ds
                                         -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList4
                                         Data.Aeson.Types.Internal.Null
                                         -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList1 })))
                          } in
                          (\ @ f4 :: * -> *
                             @ r
                             (path :: Data.Aeson.Types.Internal.JSONPath)
                             (kf :: Data.Aeson.Types.Internal.Failure f4 r)[OneShot]
                             (_ks :: Data.Aeson.Types.Internal.Success
                                       Data.Text.Internal.Text f4 r)[OneShot] ->
                           kf
                             (GHC.List.reverse @ Data.Aeson.Types.Internal.JSONPathElement path)
                             msg19)
                            `cast`
                          (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                    <Data.Text.Internal.Text>_R))
                       Data.Aeson.Types.Internal.String txt
                       -> (\ @ f4 :: * -> *
                             @ r
                             (_path :: Data.Aeson.Types.Internal.JSONPath)
                             (_kf :: Data.Aeson.Types.Internal.Failure f4 r)[OneShot]
                             (ks :: Data.Aeson.Types.Internal.Success
                                      Data.Text.Internal.Text f4 r)[OneShot] ->
                           ks txt)
                            `cast`
                          (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                    <Data.Text.Internal.Text>_R)) }
                 } in
                 (\ @ f5 :: * -> *
                    @ r
                    (path :: Data.Aeson.Types.Internal.JSONPath)
                    (kf :: Data.Aeson.Types.Internal.Failure f5 r)
                    (ks :: Data.Aeson.Types.Internal.Success
                             (Language.PureScript.Names.ProperName a) f5 r) ->
                  m `cast`
                  (Data.Aeson.Types.Internal.N:Parser[0] <Data.Text.Internal.Text>_R)
                    @ f5
                    @ r
                    path
                    kf
                    (\ (a1 :: Data.Text.Internal.Text) ->
                     ks
                       a1 `cast` (Sym (Language.PureScript.Names.N:ProperName[0] <a>_P))))
                   `cast`
                 (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                           <Language.PureScript.Names.ProperName a>_R))) -}
1b2ddf0c04464d2fa2588925f10c1966
  $fFromJSONQualified ::
    Data.Aeson.Types.FromJSON.FromJSON a =>
    Data.Aeson.Types.FromJSON.FromJSON
      (Language.PureScript.Names.Qualified a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C(C1(C1(U)))),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: Data.Aeson.Types.FromJSON.FromJSON a).
                  @ (Language.PureScript.Names.Qualified a)
                  (Language.PureScript.Names.$fFromJSONQualified_$cparseJSON @ a v)
                  (Language.PureScript.Names.$fFromJSONQualified_$cparseJSONList
                     @ a
                     v) -}
1b2ddf0c04464d2fa2588925f10c1966
  $fFromJSONQualified1 ::
    Data.Aeson.Types.Internal.JSONPath
    -> Data.Aeson.Types.Internal.Failure f4 r
    -> Data.Aeson.Types.Internal.Success
         [Language.PureScript.Names.Qualified a] f4 r
    -> f4 r
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (3, True, True)
                (\ @ a
                   @ f4 :: * -> *
                   @ r
                   (_path :: Data.Aeson.Types.Internal.JSONPath)
                   (_kf :: Data.Aeson.Types.Internal.Failure f4 r)
                   (ks :: Data.Aeson.Types.Internal.Success
                            [Language.PureScript.Names.Qualified a] f4 r) ->
                 ks (GHC.Types.[] @ (Language.PureScript.Names.Qualified a))) -}
1b2ddf0c04464d2fa2588925f10c1966
  $fFromJSONQualified_$cparseJSON ::
    Data.Aeson.Types.FromJSON.FromJSON a =>
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         (Language.PureScript.Names.Qualified a)
  {- Arity: 2, Strictness: <L,1*U(1*C1(C(C1(C1(U)))),A)><S,1*U> -}
1b2ddf0c04464d2fa2588925f10c1966
  $fFromJSONQualified_$cparseJSONList ::
    Data.Aeson.Types.FromJSON.FromJSON a =>
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         [Language.PureScript.Names.Qualified a]
  {- Arity: 2, Strictness: <L,U(C(C(C1(C1(U)))),A)><S,1*U>,
     Unfolding: (\ @ a
                   ($dFromJSON :: Data.Aeson.Types.FromJSON.FromJSON a)
                   (ds :: Data.Aeson.Types.Internal.Value) ->
                 case ds of wild {
                   DEFAULT
                   -> let {
                        msg19 :: GHC.Base.String
                        = GHC.CString.unpackAppendCString#
                            Language.PureScript.Names.$fFromJSONIdent3
                            (GHC.CString.unpackAppendCString#
                               Language.PureScript.Names.$fFromJSONIdent2
                               (GHC.CString.unpackAppendCString#
                                  Language.PureScript.Names.$fFromJSONIdent1
                                  (case wild of wild1 {
                                     Data.Aeson.Types.Internal.Object ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList10
                                     Data.Aeson.Types.Internal.String ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList8
                                     Data.Aeson.Types.Internal.Number ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList6
                                     Data.Aeson.Types.Internal.Bool ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList4
                                     Data.Aeson.Types.Internal.Null
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList1 })))
                      } in
                      (\ @ f4 :: * -> *
                         @ r
                         (path :: Data.Aeson.Types.Internal.JSONPath)
                         (kf :: Data.Aeson.Types.Internal.Failure f4 r)
                         (_ks :: Data.Aeson.Types.Internal.Success
                                   [Language.PureScript.Names.Qualified a] f4 r) ->
                       kf
                         (GHC.List.reverse @ Data.Aeson.Types.Internal.JSONPathElement path)
                         msg19)
                        `cast`
                      (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                <[Language.PureScript.Names.Qualified a]>_R))
                   Data.Aeson.Types.Internal.Array a2
                   -> case a2 of wild1 { Data.Vector.Vector dt dt1 dt2 ->
                      letrec {
                        go2 :: GHC.Prim.Int#
                               -> [Data.Aeson.Types.Internal.Value]
                               -> Data.Aeson.Types.Internal.Parser
                                    [Language.PureScript.Names.Qualified a]
                          {- Arity: 2, Strictness: <L,U><S,1*U> -}
                        = \ (x :: GHC.Prim.Int#)
                            (eta :: [Data.Aeson.Types.Internal.Value]) ->
                          case eta of wild2 {
                            []
                            -> (Language.PureScript.Names.$fFromJSONQualified1 @ a)
                                 `cast`
                               (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                         <[Language.PureScript.Names.Qualified a]>_R))
                            : y ys
                            -> let {
                                 p1 :: Data.Aeson.Types.Internal.Parser
                                         (Language.PureScript.Names.Qualified a)
                                 = Language.PureScript.Names.$fFromJSONQualified_$cparseJSON
                                     @ a
                                     $dFromJSON
                                     y
                               } in
                               let {
                                 pathElem16 :: Data.Aeson.Types.Internal.JSONPathElement
                                 = Data.Aeson.Types.Internal.Index x
                               } in
                               let {
                                 ys1 :: Data.Aeson.Types.Internal.Parser
                                          [Language.PureScript.Names.Qualified a]
                                 = case x of wild3 {
                                     DEFAULT -> go2 (GHC.Prim.+# wild3 1#) ys
                                     9223372036854775807#
                                     -> (Language.PureScript.Names.$fFromJSONQualified1 @ a)
                                          `cast`
                                        (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                                  <[Language.PureScript.Names.Qualified a]>_R)) }
                               } in
                               (\ @ f5 :: * -> *
                                  @ r
                                  (eta1 :: Data.Aeson.Types.Internal.JSONPath)
                                  (eta2 :: Data.Aeson.Types.Internal.Failure f5 r)
                                  (eta3 :: Data.Aeson.Types.Internal.Success
                                             [Language.PureScript.Names.Qualified a] f5 r) ->
                                p1
                                  `cast`
                                (Data.Aeson.Types.Internal.N:Parser[0]
                                     <Language.PureScript.Names.Qualified a>_R)
                                  @ f5
                                  @ r
                                  (GHC.Types.:
                                     @ Data.Aeson.Types.Internal.JSONPathElement
                                     pathElem16
                                     eta1)
                                  eta2
                                  (\ (a3 :: Language.PureScript.Names.Qualified a) ->
                                   ys1
                                     `cast`
                                   (Data.Aeson.Types.Internal.N:Parser[0]
                                        <[Language.PureScript.Names.Qualified a]>_R)
                                     @ f5
                                     @ r
                                     eta1
                                     eta2
                                     (\ (a4 :: [Language.PureScript.Names.Qualified a]) ->
                                      eta3
                                        (GHC.Types.:
                                           @ (Language.PureScript.Names.Qualified a)
                                           a3
                                           a4))))
                                 `cast`
                               (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                         <[Language.PureScript.Names.Qualified a]>_R)) }
                      } in
                      letrec {
                        $wgo :: GHC.Prim.Int# -> [Data.Aeson.Types.Internal.Value]
                          {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                        = \ (ww :: GHC.Prim.Int#) ->
                          case GHC.Prim.>=# ww dt1 of lwild {
                            DEFAULT
                            -> case GHC.Prim.indexArray#
                                      @ Data.Aeson.Types.Internal.Value
                                      dt2
                                      (GHC.Prim.+# dt ww) of ds3 { Unit# ipv ->
                               GHC.Types.:
                                 @ Data.Aeson.Types.Internal.Value
                                 ipv
                                 ($wgo (GHC.Prim.+# ww 1#)) }
                            1# -> GHC.Types.[] @ Data.Aeson.Types.Internal.Value }
                      } in
                      go2 0# ($wgo 0#) } }) -}
1b2ddf0c04464d2fa2588925f10c1966
  $fFunctorQualified ::
    GHC.Base.Functor Language.PureScript.Names.Qualified
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Names.Qualified
                  Language.PureScript.Names.$fFunctorQualified_$cfmap
                  Language.PureScript.Names.$fFunctorQualified_$c<$ -}
1b2ddf0c04464d2fa2588925f10c1966
  $fFunctorQualified_$c<$ ::
    a
    -> Language.PureScript.Names.Qualified b
    -> Language.PureScript.Names.Qualified a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U(U,A)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   (z2 :: a)
                   (ds :: Language.PureScript.Names.Qualified b) ->
                 case ds of wild { Language.PureScript.Names.Qualified a1 a2 ->
                 Language.PureScript.Names.Qualified @ a a1 z2 }) -}
1b2ddf0c04464d2fa2588925f10c1966
  $fFunctorQualified_$cfmap ::
    (a -> b)
    -> Language.PureScript.Names.Qualified a
    -> Language.PureScript.Names.Qualified b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><S,1*U(U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   (f :: a -> b)
                   (ds :: Language.PureScript.Names.Qualified a) ->
                 case ds of wild { Language.PureScript.Names.Qualified a1 a2 ->
                 Language.PureScript.Names.Qualified @ b a1 (f a2) }) -}
bad3562aa6138b6192713ac281080869
  $fGenericIdent ::
    GHC.Generics.Generic Language.PureScript.Names.Ident
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Names.Ident
                  Language.PureScript.Names.$fGenericIdent1
                    `cast`
                  (forall (x :: <*>_N).
                   <Language.PureScript.Names.Ident>_R
                   ->_R (Sym (GHC.Generics.N:M1[0]
                                  <*>_N
                                  <GHC.Generics.D>_P
                                  <'GHC.Generics.MetaData
                                     "Ident"
                                     "Language.PureScript.Names"
                                     "purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"
                                     'GHC.Types.False>_P
                                  <GHC.Generics.M1
                                     GHC.Generics.C
                                     ('GHC.Generics.MetaCons
                                        "Ident" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                     (GHC.Generics.M1
                                        GHC.Generics.S
                                        ('GHC.Generics.MetaSel
                                           'GHC.Base.Nothing
                                           'GHC.Generics.NoSourceUnpackedness
                                           'GHC.Generics.NoSourceStrictness
                                           'GHC.Generics.DecidedLazy)
                                        (GHC.Generics.K1 GHC.Generics.R Data.Text.Internal.Text))
                                   GHC.Generics.:+: (GHC.Generics.M1
                                                       GHC.Generics.C
                                                       ('GHC.Generics.MetaCons
                                                          "GenIdent"
                                                          'GHC.Generics.PrefixI
                                                          'GHC.Types.False)
                                                       (GHC.Generics.M1
                                                          GHC.Generics.S
                                                          ('GHC.Generics.MetaSel
                                                             'GHC.Base.Nothing
                                                             'GHC.Generics.NoSourceUnpackedness
                                                             'GHC.Generics.NoSourceStrictness
                                                             'GHC.Generics.DecidedLazy)
                                                          (GHC.Generics.K1
                                                             GHC.Generics.R
                                                             (GHC.Base.Maybe
                                                                Data.Text.Internal.Text))
                                                        GHC.Generics.:*: GHC.Generics.M1
                                                                           GHC.Generics.S
                                                                           ('GHC.Generics.MetaSel
                                                                              'GHC.Base.Nothing
                                                                              'GHC.Generics.NoSourceUnpackedness
                                                                              'GHC.Generics.NoSourceStrictness
                                                                              'GHC.Generics.DecidedLazy)
                                                                           (GHC.Generics.K1
                                                                              GHC.Generics.R
                                                                              GHC.Integer.Type.Integer))
                                                     GHC.Generics.:+: GHC.Generics.M1
                                                                        GHC.Generics.C
                                                                        ('GHC.Generics.MetaCons
                                                                           "UnusedIdent"
                                                                           'GHC.Generics.PrefixI
                                                                           'GHC.Types.False)
                                                                        GHC.Generics.U1)>_R) ; Sub (Sym (Language.PureScript.Names.Rep_Ident[0]))) <x>_N)
                  Language.PureScript.Names.$fGenericIdent_$cto -}
bad3562aa6138b6192713ac281080869
  $fGenericIdent1 ::
    Language.PureScript.Names.Ident
    -> (GHC.Generics.:+:)
         (GHC.Generics.M1
            GHC.Generics.C
            ('GHC.Generics.MetaCons
               "Ident" 'GHC.Generics.PrefixI 'GHC.Types.False)
            (GHC.Generics.M1
               GHC.Generics.S
               ('GHC.Generics.MetaSel
                  'GHC.Base.Nothing
                  'GHC.Generics.NoSourceUnpackedness
                  'GHC.Generics.NoSourceStrictness
                  'GHC.Generics.DecidedLazy)
               (GHC.Generics.K1 GHC.Generics.R Data.Text.Internal.Text)))
         (GHC.Generics.M1
            GHC.Generics.C
            ('GHC.Generics.MetaCons
               "GenIdent" 'GHC.Generics.PrefixI 'GHC.Types.False)
            (GHC.Generics.M1
               GHC.Generics.S
               ('GHC.Generics.MetaSel
                  'GHC.Base.Nothing
                  'GHC.Generics.NoSourceUnpackedness
                  'GHC.Generics.NoSourceStrictness
                  'GHC.Generics.DecidedLazy)
               (GHC.Generics.K1
                  GHC.Generics.R (GHC.Base.Maybe Data.Text.Internal.Text))
             GHC.Generics.:*: GHC.Generics.M1
                                GHC.Generics.S
                                ('GHC.Generics.MetaSel
                                   'GHC.Base.Nothing
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (GHC.Generics.K1 GHC.Generics.R GHC.Integer.Type.Integer))
          GHC.Generics.:+: GHC.Generics.M1
                             GHC.Generics.C
                             ('GHC.Generics.MetaCons
                                "UnusedIdent" 'GHC.Generics.PrefixI 'GHC.Types.False)
                             GHC.Generics.U1)
         x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ x (x1 :: Language.PureScript.Names.Ident) ->
                 case x1 of wild {
                   Language.PureScript.Names.Ident g1
                   -> GHC.Generics.L1
                        @ *
                        @ (GHC.Generics.M1
                             GHC.Generics.C
                             ('GHC.Generics.MetaCons
                                "Ident" 'GHC.Generics.PrefixI 'GHC.Types.False)
                             (GHC.Generics.M1
                                GHC.Generics.S
                                ('GHC.Generics.MetaSel
                                   'GHC.Base.Nothing
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (GHC.Generics.K1 GHC.Generics.R Data.Text.Internal.Text)))
                        @ (GHC.Generics.M1
                             GHC.Generics.C
                             ('GHC.Generics.MetaCons
                                "GenIdent" 'GHC.Generics.PrefixI 'GHC.Types.False)
                             (GHC.Generics.M1
                                GHC.Generics.S
                                ('GHC.Generics.MetaSel
                                   'GHC.Base.Nothing
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (GHC.Generics.K1
                                   GHC.Generics.R (GHC.Base.Maybe Data.Text.Internal.Text))
                              GHC.Generics.:*: GHC.Generics.M1
                                                 GHC.Generics.S
                                                 ('GHC.Generics.MetaSel
                                                    'GHC.Base.Nothing
                                                    'GHC.Generics.NoSourceUnpackedness
                                                    'GHC.Generics.NoSourceStrictness
                                                    'GHC.Generics.DecidedLazy)
                                                 (GHC.Generics.K1
                                                    GHC.Generics.R GHC.Integer.Type.Integer))
                           GHC.Generics.:+: GHC.Generics.M1
                                              GHC.Generics.C
                                              ('GHC.Generics.MetaCons
                                                 "UnusedIdent"
                                                 'GHC.Generics.PrefixI
                                                 'GHC.Types.False)
                                              GHC.Generics.U1)
                        @ x
                        g1
                          `cast`
                        (Sym (GHC.Generics.N:K1[0]
                                  <*>_N
                                  <GHC.Generics.R>_P
                                  <Data.Text.Internal.Text>_R
                                  <x>_P) ; (Sym (GHC.Generics.N:M1[0]
                                                     <*>_N
                                                     <GHC.Generics.S>_P
                                                     <'GHC.Generics.MetaSel
                                                        'GHC.Base.Nothing
                                                        'GHC.Generics.NoSourceUnpackedness
                                                        'GHC.Generics.NoSourceStrictness
                                                        'GHC.Generics.DecidedLazy>_P
                                                     <GHC.Generics.K1
                                                        GHC.Generics.R
                                                        Data.Text.Internal.Text>_R) ; Sym (GHC.Generics.N:M1[0]
                                                                                               <*>_N
                                                                                               <GHC.Generics.C>_P
                                                                                               <'GHC.Generics.MetaCons
                                                                                                  "Ident"
                                                                                                  'GHC.Generics.PrefixI
                                                                                                  'GHC.Types.False>_P
                                                                                               <GHC.Generics.M1
                                                                                                  GHC.Generics.S
                                                                                                  ('GHC.Generics.MetaSel
                                                                                                     'GHC.Base.Nothing
                                                                                                     'GHC.Generics.NoSourceUnpackedness
                                                                                                     'GHC.Generics.NoSourceStrictness
                                                                                                     'GHC.Generics.DecidedLazy)
                                                                                                  (GHC.Generics.K1
                                                                                                     GHC.Generics.R
                                                                                                     Data.Text.Internal.Text)>_R)) <x>_N)
                   Language.PureScript.Names.GenIdent g1 g2
                   -> GHC.Generics.R1
                        @ *
                        @ (GHC.Generics.M1
                             GHC.Generics.C
                             ('GHC.Generics.MetaCons
                                "Ident" 'GHC.Generics.PrefixI 'GHC.Types.False)
                             (GHC.Generics.M1
                                GHC.Generics.S
                                ('GHC.Generics.MetaSel
                                   'GHC.Base.Nothing
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (GHC.Generics.K1 GHC.Generics.R Data.Text.Internal.Text)))
                        @ (GHC.Generics.M1
                             GHC.Generics.C
                             ('GHC.Generics.MetaCons
                                "GenIdent" 'GHC.Generics.PrefixI 'GHC.Types.False)
                             (GHC.Generics.M1
                                GHC.Generics.S
                                ('GHC.Generics.MetaSel
                                   'GHC.Base.Nothing
                                   'GHC.Generics.NoSourceUnpackedness
                                   'GHC.Generics.NoSourceStrictness
                                   'GHC.Generics.DecidedLazy)
                                (GHC.Generics.K1
                                   GHC.Generics.R (GHC.Base.Maybe Data.Text.Internal.Text))
                              GHC.Generics.:*: GHC.Generics.M1
                                                 GHC.Generics.S
                                                 ('GHC.Generics.MetaSel
                                                    'GHC.Base.Nothing
                                                    'GHC.Generics.NoSourceUnpackedness
                                                    'GHC.Generics.NoSourceStrictness
                                                    'GHC.Generics.DecidedLazy)
                                                 (GHC.Generics.K1
                                                    GHC.Generics.R GHC.Integer.Type.Integer))
                           GHC.Generics.:+: GHC.Generics.M1
                                              GHC.Generics.C
                                              ('GHC.Generics.MetaCons
                                                 "UnusedIdent"
                                                 'GHC.Generics.PrefixI
                                                 'GHC.Types.False)
                                              GHC.Generics.U1)
                        @ x
                        (GHC.Generics.L1
                           @ *
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "GenIdent" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R (GHC.Base.Maybe Data.Text.Internal.Text))
                                 GHC.Generics.:*: GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R GHC.Integer.Type.Integer)))
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "UnusedIdent" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                GHC.Generics.U1)
                           @ x
                           (GHC.Generics.:*:
                              @ *
                              @ (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R (GHC.Base.Maybe Data.Text.Internal.Text)))
                              @ (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1 GHC.Generics.R GHC.Integer.Type.Integer))
                              @ x
                              g1
                                `cast`
                              (Sym (GHC.Generics.N:K1[0]
                                        <*>_N
                                        <GHC.Generics.R>_P
                                        <GHC.Base.Maybe Data.Text.Internal.Text>_R
                                        <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                          <*>_N
                                                          <GHC.Generics.S>_P
                                                          <'GHC.Generics.MetaSel
                                                             'GHC.Base.Nothing
                                                             'GHC.Generics.NoSourceUnpackedness
                                                             'GHC.Generics.NoSourceStrictness
                                                             'GHC.Generics.DecidedLazy>_P
                                                          <GHC.Generics.K1
                                                             GHC.Generics.R
                                                             (GHC.Base.Maybe
                                                                Data.Text.Internal.Text)>_R) <x>_N)
                              g2
                                `cast`
                              (Sym (GHC.Generics.N:K1[0]
                                        <*>_N
                                        <GHC.Generics.R>_P
                                        <GHC.Integer.Type.Integer>_R
                                        <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                          <*>_N
                                                          <GHC.Generics.S>_P
                                                          <'GHC.Generics.MetaSel
                                                             'GHC.Base.Nothing
                                                             'GHC.Generics.NoSourceUnpackedness
                                                             'GHC.Generics.NoSourceStrictness
                                                             'GHC.Generics.DecidedLazy>_P
                                                          <GHC.Generics.K1
                                                             GHC.Generics.R
                                                             GHC.Integer.Type.Integer>_R) <x>_N))
                             `cast`
                           (Sym (GHC.Generics.N:M1[0]
                                     <*>_N
                                     <GHC.Generics.C>_P
                                     <'GHC.Generics.MetaCons
                                        "GenIdent" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                     <GHC.Generics.M1
                                        GHC.Generics.S
                                        ('GHC.Generics.MetaSel
                                           'GHC.Base.Nothing
                                           'GHC.Generics.NoSourceUnpackedness
                                           'GHC.Generics.NoSourceStrictness
                                           'GHC.Generics.DecidedLazy)
                                        (GHC.Generics.K1
                                           GHC.Generics.R (GHC.Base.Maybe Data.Text.Internal.Text))
                                      GHC.Generics.:*: GHC.Generics.M1
                                                         GHC.Generics.S
                                                         ('GHC.Generics.MetaSel
                                                            'GHC.Base.Nothing
                                                            'GHC.Generics.NoSourceUnpackedness
                                                            'GHC.Generics.NoSourceStrictness
                                                            'GHC.Generics.DecidedLazy)
                                                         (GHC.Generics.K1
                                                            GHC.Generics.R
                                                            GHC.Integer.Type.Integer)>_R) <x>_N))
                   Language.PureScript.Names.UnusedIdent
                   -> Language.PureScript.Names.$fGenericIdent2 @ x }) -}
e0adb75e1cc45a0764a9094fa7bf84f4
  $fGenericIdent2 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Ident" 'GHC.Generics.PrefixI 'GHC.Types.False)
         (GHC.Generics.M1
            GHC.Generics.S
            ('GHC.Generics.MetaSel
               'GHC.Base.Nothing
               'GHC.Generics.NoSourceUnpackedness
               'GHC.Generics.NoSourceStrictness
               'GHC.Generics.DecidedLazy)
            (GHC.Generics.K1 GHC.Generics.R Data.Text.Internal.Text)))
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "GenIdent" 'GHC.Generics.PrefixI 'GHC.Types.False)
         (GHC.Generics.M1
            GHC.Generics.S
            ('GHC.Generics.MetaSel
               'GHC.Base.Nothing
               'GHC.Generics.NoSourceUnpackedness
               'GHC.Generics.NoSourceStrictness
               'GHC.Generics.DecidedLazy)
            (GHC.Generics.K1
               GHC.Generics.R (GHC.Base.Maybe Data.Text.Internal.Text))
          GHC.Generics.:*: GHC.Generics.M1
                             GHC.Generics.S
                             ('GHC.Generics.MetaSel
                                'GHC.Base.Nothing
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy)
                             (GHC.Generics.K1 GHC.Generics.R GHC.Integer.Type.Integer))
       GHC.Generics.:+: GHC.Generics.M1
                          GHC.Generics.C
                          ('GHC.Generics.MetaCons
                             "UnusedIdent" 'GHC.Generics.PrefixI 'GHC.Types.False)
                          GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (\ @ x ->
                 GHC.Generics.R1
                   @ *
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "Ident" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        (GHC.Generics.M1
                           GHC.Generics.S
                           ('GHC.Generics.MetaSel
                              'GHC.Base.Nothing
                              'GHC.Generics.NoSourceUnpackedness
                              'GHC.Generics.NoSourceStrictness
                              'GHC.Generics.DecidedLazy)
                           (GHC.Generics.K1 GHC.Generics.R Data.Text.Internal.Text)))
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "GenIdent" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        (GHC.Generics.M1
                           GHC.Generics.S
                           ('GHC.Generics.MetaSel
                              'GHC.Base.Nothing
                              'GHC.Generics.NoSourceUnpackedness
                              'GHC.Generics.NoSourceStrictness
                              'GHC.Generics.DecidedLazy)
                           (GHC.Generics.K1
                              GHC.Generics.R (GHC.Base.Maybe Data.Text.Internal.Text))
                         GHC.Generics.:*: GHC.Generics.M1
                                            GHC.Generics.S
                                            ('GHC.Generics.MetaSel
                                               'GHC.Base.Nothing
                                               'GHC.Generics.NoSourceUnpackedness
                                               'GHC.Generics.NoSourceStrictness
                                               'GHC.Generics.DecidedLazy)
                                            (GHC.Generics.K1
                                               GHC.Generics.R GHC.Integer.Type.Integer))
                      GHC.Generics.:+: GHC.Generics.M1
                                         GHC.Generics.C
                                         ('GHC.Generics.MetaCons
                                            "UnusedIdent" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                         GHC.Generics.U1)
                   @ x
                   (Language.PureScript.Names.$fGenericIdent3 @ x)) -}
a1d4c5c19925a5377297d3ab8260007c
  $fGenericIdent3 ::
    (GHC.Generics.:+:)
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "GenIdent" 'GHC.Generics.PrefixI 'GHC.Types.False)
         (GHC.Generics.M1
            GHC.Generics.S
            ('GHC.Generics.MetaSel
               'GHC.Base.Nothing
               'GHC.Generics.NoSourceUnpackedness
               'GHC.Generics.NoSourceStrictness
               'GHC.Generics.DecidedLazy)
            (GHC.Generics.K1
               GHC.Generics.R (GHC.Base.Maybe Data.Text.Internal.Text))
          GHC.Generics.:*: GHC.Generics.M1
                             GHC.Generics.S
                             ('GHC.Generics.MetaSel
                                'GHC.Base.Nothing
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy)
                             (GHC.Generics.K1 GHC.Generics.R GHC.Integer.Type.Integer)))
      (GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "UnusedIdent" 'GHC.Generics.PrefixI 'GHC.Types.False)
         GHC.Generics.U1)
      x
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (\ @ x ->
                 GHC.Generics.R1
                   @ *
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "GenIdent" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        (GHC.Generics.M1
                           GHC.Generics.S
                           ('GHC.Generics.MetaSel
                              'GHC.Base.Nothing
                              'GHC.Generics.NoSourceUnpackedness
                              'GHC.Generics.NoSourceStrictness
                              'GHC.Generics.DecidedLazy)
                           (GHC.Generics.K1
                              GHC.Generics.R (GHC.Base.Maybe Data.Text.Internal.Text))
                         GHC.Generics.:*: GHC.Generics.M1
                                            GHC.Generics.S
                                            ('GHC.Generics.MetaSel
                                               'GHC.Base.Nothing
                                               'GHC.Generics.NoSourceUnpackedness
                                               'GHC.Generics.NoSourceStrictness
                                               'GHC.Generics.DecidedLazy)
                                            (GHC.Generics.K1
                                               GHC.Generics.R GHC.Integer.Type.Integer)))
                   @ (GHC.Generics.M1
                        GHC.Generics.C
                        ('GHC.Generics.MetaCons
                           "UnusedIdent" 'GHC.Generics.PrefixI 'GHC.Types.False)
                        GHC.Generics.U1)
                   @ x
                   (GHC.Generics.U1 @ * @ x)
                     `cast`
                   (Sym (GHC.Generics.N:M1[0]
                             <*>_N
                             <GHC.Generics.C>_P
                             <'GHC.Generics.MetaCons
                                "UnusedIdent" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                             <GHC.Generics.U1>_R) <x>_N)) -}
bad3562aa6138b6192713ac281080869
  $fGenericIdent_$cto ::
    GHC.Generics.Rep Language.PureScript.Names.Ident x
    -> Language.PureScript.Names.Ident
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ x
                   (ds :: GHC.Generics.Rep Language.PureScript.Names.Ident x) ->
                 case ds
                        `cast`
                      ((Sub (Language.PureScript.Names.Rep_Ident[0]) ; GHC.Generics.N:M1[0]
                                                                           <*>_N
                                                                           <GHC.Generics.D>_P
                                                                           <'GHC.Generics.MetaData
                                                                              "Ident"
                                                                              "Language.PureScript.Names"
                                                                              "purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"
                                                                              'GHC.Types.False>_P
                                                                           <GHC.Generics.M1
                                                                              GHC.Generics.C
                                                                              ('GHC.Generics.MetaCons
                                                                                 "Ident"
                                                                                 'GHC.Generics.PrefixI
                                                                                 'GHC.Types.False)
                                                                              (GHC.Generics.M1
                                                                                 GHC.Generics.S
                                                                                 ('GHC.Generics.MetaSel
                                                                                    'GHC.Base.Nothing
                                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                                    'GHC.Generics.NoSourceStrictness
                                                                                    'GHC.Generics.DecidedLazy)
                                                                                 (GHC.Generics.K1
                                                                                    GHC.Generics.R
                                                                                    Data.Text.Internal.Text))
                                                                            GHC.Generics.:+: (GHC.Generics.M1
                                                                                                GHC.Generics.C
                                                                                                ('GHC.Generics.MetaCons
                                                                                                   "GenIdent"
                                                                                                   'GHC.Generics.PrefixI
                                                                                                   'GHC.Types.False)
                                                                                                (GHC.Generics.M1
                                                                                                   GHC.Generics.S
                                                                                                   ('GHC.Generics.MetaSel
                                                                                                      'GHC.Base.Nothing
                                                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                                                      'GHC.Generics.NoSourceStrictness
                                                                                                      'GHC.Generics.DecidedLazy)
                                                                                                   (GHC.Generics.K1
                                                                                                      GHC.Generics.R
                                                                                                      (GHC.Base.Maybe
                                                                                                         Data.Text.Internal.Text))
                                                                                                 GHC.Generics.:*: GHC.Generics.M1
                                                                                                                    GHC.Generics.S
                                                                                                                    ('GHC.Generics.MetaSel
                                                                                                                       'GHC.Base.Nothing
                                                                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                                                                       'GHC.Generics.NoSourceStrictness
                                                                                                                       'GHC.Generics.DecidedLazy)
                                                                                                                    (GHC.Generics.K1
                                                                                                                       GHC.Generics.R
                                                                                                                       GHC.Integer.Type.Integer))
                                                                                              GHC.Generics.:+: GHC.Generics.M1
                                                                                                                 GHC.Generics.C
                                                                                                                 ('GHC.Generics.MetaCons
                                                                                                                    "UnusedIdent"
                                                                                                                    'GHC.Generics.PrefixI
                                                                                                                    'GHC.Types.False)
                                                                                                                 GHC.Generics.U1)>_R) <x>_N) of wild {
                   GHC.Generics.L1 ds1
                   -> Language.PureScript.Names.Ident
                        ds1
                          `cast`
                        ((GHC.Generics.N:M1[0]
                              <*>_N
                              <GHC.Generics.C>_P
                              <'GHC.Generics.MetaCons
                                 "Ident" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                              <GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R
                                    Data.Text.Internal.Text)>_R ; GHC.Generics.N:M1[0]
                                                                      <*>_N
                                                                      <GHC.Generics.S>_P
                                                                      <'GHC.Generics.MetaSel
                                                                         'GHC.Base.Nothing
                                                                         'GHC.Generics.NoSourceUnpackedness
                                                                         'GHC.Generics.NoSourceStrictness
                                                                         'GHC.Generics.DecidedLazy>_P
                                                                      <GHC.Generics.K1
                                                                         GHC.Generics.R
                                                                         Data.Text.Internal.Text>_R) <x>_N ; GHC.Generics.N:K1[0]
                                                                                                                 <*>_N
                                                                                                                 <GHC.Generics.R>_P
                                                                                                                 <Data.Text.Internal.Text>_R
                                                                                                                 <x>_P)
                   GHC.Generics.R1 ds1
                   -> case ds1 of wild1 {
                        GHC.Generics.L1 ds2
                        -> case ds2
                                  `cast`
                                (GHC.Generics.N:M1[0]
                                     <*>_N
                                     <GHC.Generics.C>_P
                                     <'GHC.Generics.MetaCons
                                        "GenIdent" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                     <GHC.Generics.M1
                                        GHC.Generics.S
                                        ('GHC.Generics.MetaSel
                                           'GHC.Base.Nothing
                                           'GHC.Generics.NoSourceUnpackedness
                                           'GHC.Generics.NoSourceStrictness
                                           'GHC.Generics.DecidedLazy)
                                        (GHC.Generics.K1
                                           GHC.Generics.R (GHC.Base.Maybe Data.Text.Internal.Text))
                                      GHC.Generics.:*: GHC.Generics.M1
                                                         GHC.Generics.S
                                                         ('GHC.Generics.MetaSel
                                                            'GHC.Base.Nothing
                                                            'GHC.Generics.NoSourceUnpackedness
                                                            'GHC.Generics.NoSourceStrictness
                                                            'GHC.Generics.DecidedLazy)
                                                         (GHC.Generics.K1
                                                            GHC.Generics.R
                                                            GHC.Integer.Type.Integer)>_R <x>_N) of wild2 { GHC.Generics.:*: ds3 ds4 ->
                           Language.PureScript.Names.GenIdent
                             ds3
                               `cast`
                             (GHC.Generics.N:M1[0]
                                  <*>_N
                                  <GHC.Generics.S>_P
                                  <'GHC.Generics.MetaSel
                                     'GHC.Base.Nothing
                                     'GHC.Generics.NoSourceUnpackedness
                                     'GHC.Generics.NoSourceStrictness
                                     'GHC.Generics.DecidedLazy>_P
                                  <GHC.Generics.K1
                                     GHC.Generics.R
                                     (GHC.Base.Maybe
                                        Data.Text.Internal.Text)>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                <*>_N
                                                                                <GHC.Generics.R>_P
                                                                                <GHC.Base.Maybe
                                                                                   Data.Text.Internal.Text>_R
                                                                                <x>_P)
                             ds4
                               `cast`
                             (GHC.Generics.N:M1[0]
                                  <*>_N
                                  <GHC.Generics.S>_P
                                  <'GHC.Generics.MetaSel
                                     'GHC.Base.Nothing
                                     'GHC.Generics.NoSourceUnpackedness
                                     'GHC.Generics.NoSourceStrictness
                                     'GHC.Generics.DecidedLazy>_P
                                  <GHC.Generics.K1
                                     GHC.Generics.R
                                     GHC.Integer.Type.Integer>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                             <*>_N
                                                                             <GHC.Generics.R>_P
                                                                             <GHC.Integer.Type.Integer>_R
                                                                             <x>_P) }
                        GHC.Generics.R1 ds2
                        -> case ds2
                                  `cast`
                                (GHC.Generics.N:M1[0]
                                     <*>_N
                                     <GHC.Generics.C>_P
                                     <'GHC.Generics.MetaCons
                                        "UnusedIdent" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                     <GHC.Generics.U1>_R <x>_N) of wild2 { GHC.Generics.U1 ->
                           Language.PureScript.Names.UnusedIdent } } }) -}
1b2ddf0c04464d2fa2588925f10c1966
  $fGenericModuleName ::
    GHC.Generics.Generic Language.PureScript.Names.ModuleName
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Names.ModuleName
                  Language.PureScript.Names.$fGenericModuleName2
                    `cast`
                  (forall (x :: <*>_N).
                   <Language.PureScript.Names.ModuleName>_R
                   ->_R Language.PureScript.Names.N:ModuleName[0] ; (Sym (GHC.Generics.N:K1[0]
                                                                              <*>_N
                                                                              <GHC.Generics.R>_P
                                                                              <[Language.PureScript.Names.ProperName
                                                                                  'Language.PureScript.Names.Namespace]>_R
                                                                              <x>_P) ; (Sym (GHC.Generics.N:M1[0]
                                                                                                 <*>_N
                                                                                                 <GHC.Generics.S>_P
                                                                                                 <'GHC.Generics.MetaSel
                                                                                                    'GHC.Base.Nothing
                                                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                                                    'GHC.Generics.NoSourceStrictness
                                                                                                    'GHC.Generics.DecidedLazy>_P
                                                                                                 <GHC.Generics.K1
                                                                                                    GHC.Generics.R
                                                                                                    [Language.PureScript.Names.ProperName
                                                                                                       'Language.PureScript.Names.Namespace]>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                                                                                                             <*>_N
                                                                                                                                                             <GHC.Generics.C>_P
                                                                                                                                                             <'GHC.Generics.MetaCons
                                                                                                                                                                "ModuleName"
                                                                                                                                                                'GHC.Generics.PrefixI
                                                                                                                                                                'GHC.Types.False>_P
                                                                                                                                                             <GHC.Generics.M1
                                                                                                                                                                GHC.Generics.S
                                                                                                                                                                ('GHC.Generics.MetaSel
                                                                                                                                                                   'GHC.Base.Nothing
                                                                                                                                                                   'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                   'GHC.Generics.NoSourceStrictness
                                                                                                                                                                   'GHC.Generics.DecidedLazy)
                                                                                                                                                                (GHC.Generics.K1
                                                                                                                                                                   GHC.Generics.R
                                                                                                                                                                   [Language.PureScript.Names.ProperName
                                                                                                                                                                      'Language.PureScript.Names.Namespace])>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                                                                                                                                                                             <*>_N
                                                                                                                                                                                                                             <GHC.Generics.D>_P
                                                                                                                                                                                                                             <'GHC.Generics.MetaData
                                                                                                                                                                                                                                "ModuleName"
                                                                                                                                                                                                                                "Language.PureScript.Names"
                                                                                                                                                                                                                                "purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"
                                                                                                                                                                                                                                'GHC.Types.True>_P
                                                                                                                                                                                                                             <GHC.Generics.M1
                                                                                                                                                                                                                                GHC.Generics.C
                                                                                                                                                                                                                                ('GHC.Generics.MetaCons
                                                                                                                                                                                                                                   "ModuleName"
                                                                                                                                                                                                                                   'GHC.Generics.PrefixI
                                                                                                                                                                                                                                   'GHC.Types.False)
                                                                                                                                                                                                                                (GHC.Generics.M1
                                                                                                                                                                                                                                   GHC.Generics.S
                                                                                                                                                                                                                                   ('GHC.Generics.MetaSel
                                                                                                                                                                                                                                      'GHC.Base.Nothing
                                                                                                                                                                                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                                                      'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                                                      'GHC.Generics.DecidedLazy)
                                                                                                                                                                                                                                   (GHC.Generics.K1
                                                                                                                                                                                                                                      GHC.Generics.R
                                                                                                                                                                                                                                      [Language.PureScript.Names.ProperName
                                                                                                                                                                                                                                         'Language.PureScript.Names.Namespace]))>_R) ; Sub (Sym (Language.PureScript.Names.Rep_ModuleName[0]))))) <x>_N))
                  Language.PureScript.Names.$fGenericModuleName1
                    `cast`
                  (forall (x :: <*>_N).
                   <GHC.Generics.Rep Language.PureScript.Names.ModuleName x>_R
                   ->_R (Sub (Language.PureScript.Names.Rep_ModuleName[0]) ; (GHC.Generics.N:M1[0]
                                                                                  <*>_N
                                                                                  <GHC.Generics.D>_P
                                                                                  <'GHC.Generics.MetaData
                                                                                     "ModuleName"
                                                                                     "Language.PureScript.Names"
                                                                                     "purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"
                                                                                     'GHC.Types.True>_P
                                                                                  <GHC.Generics.M1
                                                                                     GHC.Generics.C
                                                                                     ('GHC.Generics.MetaCons
                                                                                        "ModuleName"
                                                                                        'GHC.Generics.PrefixI
                                                                                        'GHC.Types.False)
                                                                                     (GHC.Generics.M1
                                                                                        GHC.Generics.S
                                                                                        ('GHC.Generics.MetaSel
                                                                                           'GHC.Base.Nothing
                                                                                           'GHC.Generics.NoSourceUnpackedness
                                                                                           'GHC.Generics.NoSourceStrictness
                                                                                           'GHC.Generics.DecidedLazy)
                                                                                        (GHC.Generics.K1
                                                                                           GHC.Generics.R
                                                                                           [Language.PureScript.Names.ProperName
                                                                                              'Language.PureScript.Names.Namespace]))>_R ; (GHC.Generics.N:M1[0]
                                                                                                                                                <*>_N
                                                                                                                                                <GHC.Generics.C>_P
                                                                                                                                                <'GHC.Generics.MetaCons
                                                                                                                                                   "ModuleName"
                                                                                                                                                   'GHC.Generics.PrefixI
                                                                                                                                                   'GHC.Types.False>_P
                                                                                                                                                <GHC.Generics.M1
                                                                                                                                                   GHC.Generics.S
                                                                                                                                                   ('GHC.Generics.MetaSel
                                                                                                                                                      'GHC.Base.Nothing
                                                                                                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                      'GHC.Generics.NoSourceStrictness
                                                                                                                                                      'GHC.Generics.DecidedLazy)
                                                                                                                                                   (GHC.Generics.K1
                                                                                                                                                      GHC.Generics.R
                                                                                                                                                      [Language.PureScript.Names.ProperName
                                                                                                                                                         'Language.PureScript.Names.Namespace])>_R ; GHC.Generics.N:M1[0]
                                                                                                                                                                                                         <*>_N
                                                                                                                                                                                                         <GHC.Generics.S>_P
                                                                                                                                                                                                         <'GHC.Generics.MetaSel
                                                                                                                                                                                                            'GHC.Base.Nothing
                                                                                                                                                                                                            'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                                                            'GHC.Generics.NoSourceStrictness
                                                                                                                                                                                                            'GHC.Generics.DecidedLazy>_P
                                                                                                                                                                                                         <GHC.Generics.K1
                                                                                                                                                                                                            GHC.Generics.R
                                                                                                                                                                                                            [Language.PureScript.Names.ProperName
                                                                                                                                                                                                               'Language.PureScript.Names.Namespace]>_R))) <x>_N ; (GHC.Generics.N:K1[0]
                                                                                                                                                                                                                                                                        <*>_N
                                                                                                                                                                                                                                                                        <GHC.Generics.R>_P
                                                                                                                                                                                                                                                                        <[Language.PureScript.Names.ProperName
                                                                                                                                                                                                                                                                            'Language.PureScript.Names.Namespace]>_R
                                                                                                                                                                                                                                                                        <x>_P ; Sym (Language.PureScript.Names.N:ModuleName[0]))) -}
1b2ddf0c04464d2fa2588925f10c1966
  $fGenericModuleName1 ::
    GHC.Generics.Rep Language.PureScript.Names.ModuleName x
    -> GHC.Generics.Rep Language.PureScript.Names.ModuleName x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ @ x
                   (ds :: GHC.Generics.Rep Language.PureScript.Names.ModuleName x) ->
                 ds) -}
1b2ddf0c04464d2fa2588925f10c1966
  $fGenericModuleName2 ::
    Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ModuleName
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ @ x (x1 :: Language.PureScript.Names.ModuleName) -> x1) -}
d04047edf96c18708b7b5f72cb565394
  $fGenericName ::
    GHC.Generics.Generic Language.PureScript.Names.Name
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Names.Name
                  Language.PureScript.Names.$fGenericName1
                    `cast`
                  (forall (x :: <*>_N).
                   <Language.PureScript.Names.Name>_R
                   ->_R (Sym (GHC.Generics.N:M1[0]
                                  <*>_N
                                  <GHC.Generics.D>_P
                                  <'GHC.Generics.MetaData
                                     "Name"
                                     "Language.PureScript.Names"
                                     "purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"
                                     'GHC.Types.False>_P
                                  <((GHC.Generics.M1
                                       GHC.Generics.C
                                       ('GHC.Generics.MetaCons
                                          "IdentName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                       (GHC.Generics.M1
                                          GHC.Generics.S
                                          ('GHC.Generics.MetaSel
                                             'GHC.Base.Nothing
                                             'GHC.Generics.NoSourceUnpackedness
                                             'GHC.Generics.NoSourceStrictness
                                             'GHC.Generics.DecidedLazy)
                                          (GHC.Generics.K1
                                             GHC.Generics.R Language.PureScript.Names.Ident))
                                     GHC.Generics.:+: GHC.Generics.M1
                                                        GHC.Generics.C
                                                        ('GHC.Generics.MetaCons
                                                           "ValOpName"
                                                           'GHC.Generics.PrefixI
                                                           'GHC.Types.False)
                                                        (GHC.Generics.M1
                                                           GHC.Generics.S
                                                           ('GHC.Generics.MetaSel
                                                              'GHC.Base.Nothing
                                                              'GHC.Generics.NoSourceUnpackedness
                                                              'GHC.Generics.NoSourceStrictness
                                                              'GHC.Generics.DecidedLazy)
                                                           (GHC.Generics.K1
                                                              GHC.Generics.R
                                                              (Language.PureScript.Names.OpName
                                                                 'Language.PureScript.Names.ValueOpName))))
                                    GHC.Generics.:+: (GHC.Generics.M1
                                                        GHC.Generics.C
                                                        ('GHC.Generics.MetaCons
                                                           "TyName"
                                                           'GHC.Generics.PrefixI
                                                           'GHC.Types.False)
                                                        (GHC.Generics.M1
                                                           GHC.Generics.S
                                                           ('GHC.Generics.MetaSel
                                                              'GHC.Base.Nothing
                                                              'GHC.Generics.NoSourceUnpackedness
                                                              'GHC.Generics.NoSourceStrictness
                                                              'GHC.Generics.DecidedLazy)
                                                           (GHC.Generics.K1
                                                              GHC.Generics.R
                                                              (Language.PureScript.Names.ProperName
                                                                 'Language.PureScript.Names.TypeName)))
                                                      GHC.Generics.:+: GHC.Generics.M1
                                                                         GHC.Generics.C
                                                                         ('GHC.Generics.MetaCons
                                                                            "TyOpName"
                                                                            'GHC.Generics.PrefixI
                                                                            'GHC.Types.False)
                                                                         (GHC.Generics.M1
                                                                            GHC.Generics.S
                                                                            ('GHC.Generics.MetaSel
                                                                               'GHC.Base.Nothing
                                                                               'GHC.Generics.NoSourceUnpackedness
                                                                               'GHC.Generics.NoSourceStrictness
                                                                               'GHC.Generics.DecidedLazy)
                                                                            (GHC.Generics.K1
                                                                               GHC.Generics.R
                                                                               (Language.PureScript.Names.OpName
                                                                                  'Language.PureScript.Names.TypeOpName)))))
                                   GHC.Generics.:+: ((GHC.Generics.M1
                                                        GHC.Generics.C
                                                        ('GHC.Generics.MetaCons
                                                           "DctorName"
                                                           'GHC.Generics.PrefixI
                                                           'GHC.Types.False)
                                                        (GHC.Generics.M1
                                                           GHC.Generics.S
                                                           ('GHC.Generics.MetaSel
                                                              'GHC.Base.Nothing
                                                              'GHC.Generics.NoSourceUnpackedness
                                                              'GHC.Generics.NoSourceStrictness
                                                              'GHC.Generics.DecidedLazy)
                                                           (GHC.Generics.K1
                                                              GHC.Generics.R
                                                              (Language.PureScript.Names.ProperName
                                                                 'Language.PureScript.Names.ConstructorName)))
                                                      GHC.Generics.:+: GHC.Generics.M1
                                                                         GHC.Generics.C
                                                                         ('GHC.Generics.MetaCons
                                                                            "TyClassName"
                                                                            'GHC.Generics.PrefixI
                                                                            'GHC.Types.False)
                                                                         (GHC.Generics.M1
                                                                            GHC.Generics.S
                                                                            ('GHC.Generics.MetaSel
                                                                               'GHC.Base.Nothing
                                                                               'GHC.Generics.NoSourceUnpackedness
                                                                               'GHC.Generics.NoSourceStrictness
                                                                               'GHC.Generics.DecidedLazy)
                                                                            (GHC.Generics.K1
                                                                               GHC.Generics.R
                                                                               (Language.PureScript.Names.ProperName
                                                                                  'Language.PureScript.Names.ClassName))))
                                                     GHC.Generics.:+: (GHC.Generics.M1
                                                                         GHC.Generics.C
                                                                         ('GHC.Generics.MetaCons
                                                                            "ModName"
                                                                            'GHC.Generics.PrefixI
                                                                            'GHC.Types.False)
                                                                         (GHC.Generics.M1
                                                                            GHC.Generics.S
                                                                            ('GHC.Generics.MetaSel
                                                                               'GHC.Base.Nothing
                                                                               'GHC.Generics.NoSourceUnpackedness
                                                                               'GHC.Generics.NoSourceStrictness
                                                                               'GHC.Generics.DecidedLazy)
                                                                            (GHC.Generics.K1
                                                                               GHC.Generics.R
                                                                               Language.PureScript.Names.ModuleName))
                                                                       GHC.Generics.:+: GHC.Generics.M1
                                                                                          GHC.Generics.C
                                                                                          ('GHC.Generics.MetaCons
                                                                                             "KiName"
                                                                                             'GHC.Generics.PrefixI
                                                                                             'GHC.Types.False)
                                                                                          (GHC.Generics.M1
                                                                                             GHC.Generics.S
                                                                                             ('GHC.Generics.MetaSel
                                                                                                'GHC.Base.Nothing
                                                                                                'GHC.Generics.NoSourceUnpackedness
                                                                                                'GHC.Generics.NoSourceStrictness
                                                                                                'GHC.Generics.DecidedLazy)
                                                                                             (GHC.Generics.K1
                                                                                                GHC.Generics.R
                                                                                                (Language.PureScript.Names.ProperName
                                                                                                   'Language.PureScript.Names.KindName)))))>_R) ; Sub (Sym (Language.PureScript.Names.Rep_Name[0]))) <x>_N)
                  Language.PureScript.Names.$fGenericName_$cto -}
d04047edf96c18708b7b5f72cb565394
  $fGenericName1 ::
    Language.PureScript.Names.Name
    -> (GHC.Generics.:+:)
         ((GHC.Generics.M1
             GHC.Generics.C
             ('GHC.Generics.MetaCons
                "IdentName" 'GHC.Generics.PrefixI 'GHC.Types.False)
             (GHC.Generics.M1
                GHC.Generics.S
                ('GHC.Generics.MetaSel
                   'GHC.Base.Nothing
                   'GHC.Generics.NoSourceUnpackedness
                   'GHC.Generics.NoSourceStrictness
                   'GHC.Generics.DecidedLazy)
                (GHC.Generics.K1 GHC.Generics.R Language.PureScript.Names.Ident))
           GHC.Generics.:+: GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "ValOpName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R
                                    (Language.PureScript.Names.OpName
                                       'Language.PureScript.Names.ValueOpName))))
          GHC.Generics.:+: (GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "TyName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R
                                    (Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.TypeName)))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "TyOpName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     (Language.PureScript.Names.OpName
                                                        'Language.PureScript.Names.TypeOpName)))))
         ((GHC.Generics.M1
             GHC.Generics.C
             ('GHC.Generics.MetaCons
                "DctorName" 'GHC.Generics.PrefixI 'GHC.Types.False)
             (GHC.Generics.M1
                GHC.Generics.S
                ('GHC.Generics.MetaSel
                   'GHC.Base.Nothing
                   'GHC.Generics.NoSourceUnpackedness
                   'GHC.Generics.NoSourceStrictness
                   'GHC.Generics.DecidedLazy)
                (GHC.Generics.K1
                   GHC.Generics.R
                   (Language.PureScript.Names.ProperName
                      'Language.PureScript.Names.ConstructorName)))
           GHC.Generics.:+: GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "TyClassName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R
                                    (Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.ClassName))))
          GHC.Generics.:+: (GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "ModName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R Language.PureScript.Names.ModuleName))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "KiName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     (Language.PureScript.Names.ProperName
                                                        'Language.PureScript.Names.KindName)))))
         x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ @ x (x1 :: Language.PureScript.Names.Name) ->
                 case x1 of wild {
                   Language.PureScript.Names.IdentName g1
                   -> GHC.Generics.L1
                        @ *
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "IdentName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1 GHC.Generics.R Language.PureScript.Names.Ident))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "ValOpName"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     (Language.PureScript.Names.OpName
                                                        'Language.PureScript.Names.ValueOpName))))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "TyName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     (Language.PureScript.Names.ProperName
                                                        'Language.PureScript.Names.TypeName)))
                                             GHC.Generics.:+: GHC.Generics.M1
                                                                GHC.Generics.C
                                                                ('GHC.Generics.MetaCons
                                                                   "TyOpName"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.False)
                                                                (GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      (Language.PureScript.Names.OpName
                                                                         'Language.PureScript.Names.TypeOpName)))))
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "DctorName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R
                                    (Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.ConstructorName)))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "TyClassName"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     (Language.PureScript.Names.ProperName
                                                        'Language.PureScript.Names.ClassName))))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "ModName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.Names.ModuleName))
                                             GHC.Generics.:+: GHC.Generics.M1
                                                                GHC.Generics.C
                                                                ('GHC.Generics.MetaCons
                                                                   "KiName"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.False)
                                                                (GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      (Language.PureScript.Names.ProperName
                                                                         'Language.PureScript.Names.KindName)))))
                        @ x
                        (GHC.Generics.L1
                           @ *
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "IdentName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1 GHC.Generics.R Language.PureScript.Names.Ident))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "ValOpName"
                                                    'GHC.Generics.PrefixI
                                                    'GHC.Types.False)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       (Language.PureScript.Names.OpName
                                                          'Language.PureScript.Names.ValueOpName))))
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "TyName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R
                                      (Language.PureScript.Names.ProperName
                                         'Language.PureScript.Names.TypeName)))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "TyOpName"
                                                    'GHC.Generics.PrefixI
                                                    'GHC.Types.False)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       (Language.PureScript.Names.OpName
                                                          'Language.PureScript.Names.TypeOpName))))
                           @ x
                           (GHC.Generics.L1
                              @ *
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "IdentName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R Language.PureScript.Names.Ident)))
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "ValOpName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         (Language.PureScript.Names.OpName
                                            'Language.PureScript.Names.ValueOpName))))
                              @ x
                              g1
                                `cast`
                              (Sym (GHC.Generics.N:K1[0]
                                        <*>_N
                                        <GHC.Generics.R>_P
                                        <Language.PureScript.Names.Ident>_R
                                        <x>_P) ; (Sym (GHC.Generics.N:M1[0]
                                                           <*>_N
                                                           <GHC.Generics.S>_P
                                                           <'GHC.Generics.MetaSel
                                                              'GHC.Base.Nothing
                                                              'GHC.Generics.NoSourceUnpackedness
                                                              'GHC.Generics.NoSourceStrictness
                                                              'GHC.Generics.DecidedLazy>_P
                                                           <GHC.Generics.K1
                                                              GHC.Generics.R
                                                              Language.PureScript.Names.Ident>_R) ; Sym (GHC.Generics.N:M1[0]
                                                                                                             <*>_N
                                                                                                             <GHC.Generics.C>_P
                                                                                                             <'GHC.Generics.MetaCons
                                                                                                                "IdentName"
                                                                                                                'GHC.Generics.PrefixI
                                                                                                                'GHC.Types.False>_P
                                                                                                             <GHC.Generics.M1
                                                                                                                GHC.Generics.S
                                                                                                                ('GHC.Generics.MetaSel
                                                                                                                   'GHC.Base.Nothing
                                                                                                                   'GHC.Generics.NoSourceUnpackedness
                                                                                                                   'GHC.Generics.NoSourceStrictness
                                                                                                                   'GHC.Generics.DecidedLazy)
                                                                                                                (GHC.Generics.K1
                                                                                                                   GHC.Generics.R
                                                                                                                   Language.PureScript.Names.Ident)>_R)) <x>_N)))
                   Language.PureScript.Names.ValOpName g1
                   -> GHC.Generics.L1
                        @ *
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "IdentName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1 GHC.Generics.R Language.PureScript.Names.Ident))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "ValOpName"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     (Language.PureScript.Names.OpName
                                                        'Language.PureScript.Names.ValueOpName))))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "TyName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     (Language.PureScript.Names.ProperName
                                                        'Language.PureScript.Names.TypeName)))
                                             GHC.Generics.:+: GHC.Generics.M1
                                                                GHC.Generics.C
                                                                ('GHC.Generics.MetaCons
                                                                   "TyOpName"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.False)
                                                                (GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      (Language.PureScript.Names.OpName
                                                                         'Language.PureScript.Names.TypeOpName)))))
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "DctorName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R
                                    (Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.ConstructorName)))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "TyClassName"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     (Language.PureScript.Names.ProperName
                                                        'Language.PureScript.Names.ClassName))))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "ModName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.Names.ModuleName))
                                             GHC.Generics.:+: GHC.Generics.M1
                                                                GHC.Generics.C
                                                                ('GHC.Generics.MetaCons
                                                                   "KiName"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.False)
                                                                (GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      (Language.PureScript.Names.ProperName
                                                                         'Language.PureScript.Names.KindName)))))
                        @ x
                        (GHC.Generics.L1
                           @ *
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "IdentName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1 GHC.Generics.R Language.PureScript.Names.Ident))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "ValOpName"
                                                    'GHC.Generics.PrefixI
                                                    'GHC.Types.False)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       (Language.PureScript.Names.OpName
                                                          'Language.PureScript.Names.ValueOpName))))
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "TyName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R
                                      (Language.PureScript.Names.ProperName
                                         'Language.PureScript.Names.TypeName)))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "TyOpName"
                                                    'GHC.Generics.PrefixI
                                                    'GHC.Types.False)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       (Language.PureScript.Names.OpName
                                                          'Language.PureScript.Names.TypeOpName))))
                           @ x
                           (GHC.Generics.R1
                              @ *
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "IdentName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R Language.PureScript.Names.Ident)))
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "ValOpName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         (Language.PureScript.Names.OpName
                                            'Language.PureScript.Names.ValueOpName))))
                              @ x
                              g1
                                `cast`
                              (Sym (GHC.Generics.N:K1[0]
                                        <*>_N
                                        <GHC.Generics.R>_P
                                        <Language.PureScript.Names.OpName
                                           'Language.PureScript.Names.ValueOpName>_R
                                        <x>_P) ; (Sym (GHC.Generics.N:M1[0]
                                                           <*>_N
                                                           <GHC.Generics.S>_P
                                                           <'GHC.Generics.MetaSel
                                                              'GHC.Base.Nothing
                                                              'GHC.Generics.NoSourceUnpackedness
                                                              'GHC.Generics.NoSourceStrictness
                                                              'GHC.Generics.DecidedLazy>_P
                                                           <GHC.Generics.K1
                                                              GHC.Generics.R
                                                              (Language.PureScript.Names.OpName
                                                                 'Language.PureScript.Names.ValueOpName)>_R) ; Sym (GHC.Generics.N:M1[0]
                                                                                                                        <*>_N
                                                                                                                        <GHC.Generics.C>_P
                                                                                                                        <'GHC.Generics.MetaCons
                                                                                                                           "ValOpName"
                                                                                                                           'GHC.Generics.PrefixI
                                                                                                                           'GHC.Types.False>_P
                                                                                                                        <GHC.Generics.M1
                                                                                                                           GHC.Generics.S
                                                                                                                           ('GHC.Generics.MetaSel
                                                                                                                              'GHC.Base.Nothing
                                                                                                                              'GHC.Generics.NoSourceUnpackedness
                                                                                                                              'GHC.Generics.NoSourceStrictness
                                                                                                                              'GHC.Generics.DecidedLazy)
                                                                                                                           (GHC.Generics.K1
                                                                                                                              GHC.Generics.R
                                                                                                                              (Language.PureScript.Names.OpName
                                                                                                                                 'Language.PureScript.Names.ValueOpName))>_R)) <x>_N)))
                   Language.PureScript.Names.TyName g1
                   -> GHC.Generics.L1
                        @ *
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "IdentName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1 GHC.Generics.R Language.PureScript.Names.Ident))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "ValOpName"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     (Language.PureScript.Names.OpName
                                                        'Language.PureScript.Names.ValueOpName))))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "TyName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     (Language.PureScript.Names.ProperName
                                                        'Language.PureScript.Names.TypeName)))
                                             GHC.Generics.:+: GHC.Generics.M1
                                                                GHC.Generics.C
                                                                ('GHC.Generics.MetaCons
                                                                   "TyOpName"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.False)
                                                                (GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      (Language.PureScript.Names.OpName
                                                                         'Language.PureScript.Names.TypeOpName)))))
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "DctorName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R
                                    (Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.ConstructorName)))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "TyClassName"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     (Language.PureScript.Names.ProperName
                                                        'Language.PureScript.Names.ClassName))))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "ModName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.Names.ModuleName))
                                             GHC.Generics.:+: GHC.Generics.M1
                                                                GHC.Generics.C
                                                                ('GHC.Generics.MetaCons
                                                                   "KiName"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.False)
                                                                (GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      (Language.PureScript.Names.ProperName
                                                                         'Language.PureScript.Names.KindName)))))
                        @ x
                        (GHC.Generics.R1
                           @ *
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "IdentName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1 GHC.Generics.R Language.PureScript.Names.Ident))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "ValOpName"
                                                    'GHC.Generics.PrefixI
                                                    'GHC.Types.False)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       (Language.PureScript.Names.OpName
                                                          'Language.PureScript.Names.ValueOpName))))
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "TyName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R
                                      (Language.PureScript.Names.ProperName
                                         'Language.PureScript.Names.TypeName)))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "TyOpName"
                                                    'GHC.Generics.PrefixI
                                                    'GHC.Types.False)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       (Language.PureScript.Names.OpName
                                                          'Language.PureScript.Names.TypeOpName))))
                           @ x
                           (GHC.Generics.L1
                              @ *
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "TyName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.TypeName))))
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "TyOpName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         (Language.PureScript.Names.OpName
                                            'Language.PureScript.Names.TypeOpName))))
                              @ x
                              g1
                                `cast`
                              (Sym (GHC.Generics.N:K1[0]
                                        <*>_N
                                        <GHC.Generics.R>_P
                                        <Language.PureScript.Names.ProperName
                                           'Language.PureScript.Names.TypeName>_R
                                        <x>_P) ; (Sym (GHC.Generics.N:M1[0]
                                                           <*>_N
                                                           <GHC.Generics.S>_P
                                                           <'GHC.Generics.MetaSel
                                                              'GHC.Base.Nothing
                                                              'GHC.Generics.NoSourceUnpackedness
                                                              'GHC.Generics.NoSourceStrictness
                                                              'GHC.Generics.DecidedLazy>_P
                                                           <GHC.Generics.K1
                                                              GHC.Generics.R
                                                              (Language.PureScript.Names.ProperName
                                                                 'Language.PureScript.Names.TypeName)>_R) ; Sym (GHC.Generics.N:M1[0]
                                                                                                                     <*>_N
                                                                                                                     <GHC.Generics.C>_P
                                                                                                                     <'GHC.Generics.MetaCons
                                                                                                                        "TyName"
                                                                                                                        'GHC.Generics.PrefixI
                                                                                                                        'GHC.Types.False>_P
                                                                                                                     <GHC.Generics.M1
                                                                                                                        GHC.Generics.S
                                                                                                                        ('GHC.Generics.MetaSel
                                                                                                                           'GHC.Base.Nothing
                                                                                                                           'GHC.Generics.NoSourceUnpackedness
                                                                                                                           'GHC.Generics.NoSourceStrictness
                                                                                                                           'GHC.Generics.DecidedLazy)
                                                                                                                        (GHC.Generics.K1
                                                                                                                           GHC.Generics.R
                                                                                                                           (Language.PureScript.Names.ProperName
                                                                                                                              'Language.PureScript.Names.TypeName))>_R)) <x>_N)))
                   Language.PureScript.Names.TyOpName g1
                   -> GHC.Generics.L1
                        @ *
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "IdentName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1 GHC.Generics.R Language.PureScript.Names.Ident))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "ValOpName"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     (Language.PureScript.Names.OpName
                                                        'Language.PureScript.Names.ValueOpName))))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "TyName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     (Language.PureScript.Names.ProperName
                                                        'Language.PureScript.Names.TypeName)))
                                             GHC.Generics.:+: GHC.Generics.M1
                                                                GHC.Generics.C
                                                                ('GHC.Generics.MetaCons
                                                                   "TyOpName"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.False)
                                                                (GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      (Language.PureScript.Names.OpName
                                                                         'Language.PureScript.Names.TypeOpName)))))
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "DctorName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R
                                    (Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.ConstructorName)))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "TyClassName"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     (Language.PureScript.Names.ProperName
                                                        'Language.PureScript.Names.ClassName))))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "ModName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.Names.ModuleName))
                                             GHC.Generics.:+: GHC.Generics.M1
                                                                GHC.Generics.C
                                                                ('GHC.Generics.MetaCons
                                                                   "KiName"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.False)
                                                                (GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      (Language.PureScript.Names.ProperName
                                                                         'Language.PureScript.Names.KindName)))))
                        @ x
                        (GHC.Generics.R1
                           @ *
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "IdentName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1 GHC.Generics.R Language.PureScript.Names.Ident))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "ValOpName"
                                                    'GHC.Generics.PrefixI
                                                    'GHC.Types.False)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       (Language.PureScript.Names.OpName
                                                          'Language.PureScript.Names.ValueOpName))))
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "TyName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R
                                      (Language.PureScript.Names.ProperName
                                         'Language.PureScript.Names.TypeName)))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "TyOpName"
                                                    'GHC.Generics.PrefixI
                                                    'GHC.Types.False)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       (Language.PureScript.Names.OpName
                                                          'Language.PureScript.Names.TypeOpName))))
                           @ x
                           (GHC.Generics.R1
                              @ *
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "TyName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.TypeName))))
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "TyOpName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         (Language.PureScript.Names.OpName
                                            'Language.PureScript.Names.TypeOpName))))
                              @ x
                              g1
                                `cast`
                              (Sym (GHC.Generics.N:K1[0]
                                        <*>_N
                                        <GHC.Generics.R>_P
                                        <Language.PureScript.Names.OpName
                                           'Language.PureScript.Names.TypeOpName>_R
                                        <x>_P) ; (Sym (GHC.Generics.N:M1[0]
                                                           <*>_N
                                                           <GHC.Generics.S>_P
                                                           <'GHC.Generics.MetaSel
                                                              'GHC.Base.Nothing
                                                              'GHC.Generics.NoSourceUnpackedness
                                                              'GHC.Generics.NoSourceStrictness
                                                              'GHC.Generics.DecidedLazy>_P
                                                           <GHC.Generics.K1
                                                              GHC.Generics.R
                                                              (Language.PureScript.Names.OpName
                                                                 'Language.PureScript.Names.TypeOpName)>_R) ; Sym (GHC.Generics.N:M1[0]
                                                                                                                       <*>_N
                                                                                                                       <GHC.Generics.C>_P
                                                                                                                       <'GHC.Generics.MetaCons
                                                                                                                          "TyOpName"
                                                                                                                          'GHC.Generics.PrefixI
                                                                                                                          'GHC.Types.False>_P
                                                                                                                       <GHC.Generics.M1
                                                                                                                          GHC.Generics.S
                                                                                                                          ('GHC.Generics.MetaSel
                                                                                                                             'GHC.Base.Nothing
                                                                                                                             'GHC.Generics.NoSourceUnpackedness
                                                                                                                             'GHC.Generics.NoSourceStrictness
                                                                                                                             'GHC.Generics.DecidedLazy)
                                                                                                                          (GHC.Generics.K1
                                                                                                                             GHC.Generics.R
                                                                                                                             (Language.PureScript.Names.OpName
                                                                                                                                'Language.PureScript.Names.TypeOpName))>_R)) <x>_N)))
                   Language.PureScript.Names.DctorName g1
                   -> GHC.Generics.R1
                        @ *
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "IdentName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1 GHC.Generics.R Language.PureScript.Names.Ident))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "ValOpName"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     (Language.PureScript.Names.OpName
                                                        'Language.PureScript.Names.ValueOpName))))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "TyName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     (Language.PureScript.Names.ProperName
                                                        'Language.PureScript.Names.TypeName)))
                                             GHC.Generics.:+: GHC.Generics.M1
                                                                GHC.Generics.C
                                                                ('GHC.Generics.MetaCons
                                                                   "TyOpName"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.False)
                                                                (GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      (Language.PureScript.Names.OpName
                                                                         'Language.PureScript.Names.TypeOpName)))))
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "DctorName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R
                                    (Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.ConstructorName)))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "TyClassName"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     (Language.PureScript.Names.ProperName
                                                        'Language.PureScript.Names.ClassName))))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "ModName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.Names.ModuleName))
                                             GHC.Generics.:+: GHC.Generics.M1
                                                                GHC.Generics.C
                                                                ('GHC.Generics.MetaCons
                                                                   "KiName"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.False)
                                                                (GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      (Language.PureScript.Names.ProperName
                                                                         'Language.PureScript.Names.KindName)))))
                        @ x
                        (GHC.Generics.L1
                           @ *
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "DctorName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R
                                      (Language.PureScript.Names.ProperName
                                         'Language.PureScript.Names.ConstructorName)))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "TyClassName"
                                                    'GHC.Generics.PrefixI
                                                    'GHC.Types.False)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       (Language.PureScript.Names.ProperName
                                                          'Language.PureScript.Names.ClassName))))
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "ModName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R Language.PureScript.Names.ModuleName))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "KiName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       (Language.PureScript.Names.ProperName
                                                          'Language.PureScript.Names.KindName))))
                           @ x
                           (GHC.Generics.L1
                              @ *
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "DctorName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.ConstructorName))))
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "TyClassName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.ClassName))))
                              @ x
                              g1
                                `cast`
                              (Sym (GHC.Generics.N:K1[0]
                                        <*>_N
                                        <GHC.Generics.R>_P
                                        <Language.PureScript.Names.ProperName
                                           'Language.PureScript.Names.ConstructorName>_R
                                        <x>_P) ; (Sym (GHC.Generics.N:M1[0]
                                                           <*>_N
                                                           <GHC.Generics.S>_P
                                                           <'GHC.Generics.MetaSel
                                                              'GHC.Base.Nothing
                                                              'GHC.Generics.NoSourceUnpackedness
                                                              'GHC.Generics.NoSourceStrictness
                                                              'GHC.Generics.DecidedLazy>_P
                                                           <GHC.Generics.K1
                                                              GHC.Generics.R
                                                              (Language.PureScript.Names.ProperName
                                                                 'Language.PureScript.Names.ConstructorName)>_R) ; Sym (GHC.Generics.N:M1[0]
                                                                                                                            <*>_N
                                                                                                                            <GHC.Generics.C>_P
                                                                                                                            <'GHC.Generics.MetaCons
                                                                                                                               "DctorName"
                                                                                                                               'GHC.Generics.PrefixI
                                                                                                                               'GHC.Types.False>_P
                                                                                                                            <GHC.Generics.M1
                                                                                                                               GHC.Generics.S
                                                                                                                               ('GHC.Generics.MetaSel
                                                                                                                                  'GHC.Base.Nothing
                                                                                                                                  'GHC.Generics.NoSourceUnpackedness
                                                                                                                                  'GHC.Generics.NoSourceStrictness
                                                                                                                                  'GHC.Generics.DecidedLazy)
                                                                                                                               (GHC.Generics.K1
                                                                                                                                  GHC.Generics.R
                                                                                                                                  (Language.PureScript.Names.ProperName
                                                                                                                                     'Language.PureScript.Names.ConstructorName))>_R)) <x>_N)))
                   Language.PureScript.Names.TyClassName g1
                   -> GHC.Generics.R1
                        @ *
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "IdentName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1 GHC.Generics.R Language.PureScript.Names.Ident))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "ValOpName"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     (Language.PureScript.Names.OpName
                                                        'Language.PureScript.Names.ValueOpName))))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "TyName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     (Language.PureScript.Names.ProperName
                                                        'Language.PureScript.Names.TypeName)))
                                             GHC.Generics.:+: GHC.Generics.M1
                                                                GHC.Generics.C
                                                                ('GHC.Generics.MetaCons
                                                                   "TyOpName"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.False)
                                                                (GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      (Language.PureScript.Names.OpName
                                                                         'Language.PureScript.Names.TypeOpName)))))
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "DctorName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R
                                    (Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.ConstructorName)))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "TyClassName"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     (Language.PureScript.Names.ProperName
                                                        'Language.PureScript.Names.ClassName))))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "ModName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.Names.ModuleName))
                                             GHC.Generics.:+: GHC.Generics.M1
                                                                GHC.Generics.C
                                                                ('GHC.Generics.MetaCons
                                                                   "KiName"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.False)
                                                                (GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      (Language.PureScript.Names.ProperName
                                                                         'Language.PureScript.Names.KindName)))))
                        @ x
                        (GHC.Generics.L1
                           @ *
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "DctorName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R
                                      (Language.PureScript.Names.ProperName
                                         'Language.PureScript.Names.ConstructorName)))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "TyClassName"
                                                    'GHC.Generics.PrefixI
                                                    'GHC.Types.False)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       (Language.PureScript.Names.ProperName
                                                          'Language.PureScript.Names.ClassName))))
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "ModName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R Language.PureScript.Names.ModuleName))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "KiName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       (Language.PureScript.Names.ProperName
                                                          'Language.PureScript.Names.KindName))))
                           @ x
                           (GHC.Generics.R1
                              @ *
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "DctorName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.ConstructorName))))
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "TyClassName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.ClassName))))
                              @ x
                              g1
                                `cast`
                              (Sym (GHC.Generics.N:K1[0]
                                        <*>_N
                                        <GHC.Generics.R>_P
                                        <Language.PureScript.Names.ProperName
                                           'Language.PureScript.Names.ClassName>_R
                                        <x>_P) ; (Sym (GHC.Generics.N:M1[0]
                                                           <*>_N
                                                           <GHC.Generics.S>_P
                                                           <'GHC.Generics.MetaSel
                                                              'GHC.Base.Nothing
                                                              'GHC.Generics.NoSourceUnpackedness
                                                              'GHC.Generics.NoSourceStrictness
                                                              'GHC.Generics.DecidedLazy>_P
                                                           <GHC.Generics.K1
                                                              GHC.Generics.R
                                                              (Language.PureScript.Names.ProperName
                                                                 'Language.PureScript.Names.ClassName)>_R) ; Sym (GHC.Generics.N:M1[0]
                                                                                                                      <*>_N
                                                                                                                      <GHC.Generics.C>_P
                                                                                                                      <'GHC.Generics.MetaCons
                                                                                                                         "TyClassName"
                                                                                                                         'GHC.Generics.PrefixI
                                                                                                                         'GHC.Types.False>_P
                                                                                                                      <GHC.Generics.M1
                                                                                                                         GHC.Generics.S
                                                                                                                         ('GHC.Generics.MetaSel
                                                                                                                            'GHC.Base.Nothing
                                                                                                                            'GHC.Generics.NoSourceUnpackedness
                                                                                                                            'GHC.Generics.NoSourceStrictness
                                                                                                                            'GHC.Generics.DecidedLazy)
                                                                                                                         (GHC.Generics.K1
                                                                                                                            GHC.Generics.R
                                                                                                                            (Language.PureScript.Names.ProperName
                                                                                                                               'Language.PureScript.Names.ClassName))>_R)) <x>_N)))
                   Language.PureScript.Names.ModName g1
                   -> GHC.Generics.R1
                        @ *
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "IdentName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1 GHC.Generics.R Language.PureScript.Names.Ident))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "ValOpName"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     (Language.PureScript.Names.OpName
                                                        'Language.PureScript.Names.ValueOpName))))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "TyName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     (Language.PureScript.Names.ProperName
                                                        'Language.PureScript.Names.TypeName)))
                                             GHC.Generics.:+: GHC.Generics.M1
                                                                GHC.Generics.C
                                                                ('GHC.Generics.MetaCons
                                                                   "TyOpName"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.False)
                                                                (GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      (Language.PureScript.Names.OpName
                                                                         'Language.PureScript.Names.TypeOpName)))))
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "DctorName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R
                                    (Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.ConstructorName)))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "TyClassName"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     (Language.PureScript.Names.ProperName
                                                        'Language.PureScript.Names.ClassName))))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "ModName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.Names.ModuleName))
                                             GHC.Generics.:+: GHC.Generics.M1
                                                                GHC.Generics.C
                                                                ('GHC.Generics.MetaCons
                                                                   "KiName"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.False)
                                                                (GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      (Language.PureScript.Names.ProperName
                                                                         'Language.PureScript.Names.KindName)))))
                        @ x
                        (GHC.Generics.R1
                           @ *
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "DctorName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R
                                      (Language.PureScript.Names.ProperName
                                         'Language.PureScript.Names.ConstructorName)))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "TyClassName"
                                                    'GHC.Generics.PrefixI
                                                    'GHC.Types.False)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       (Language.PureScript.Names.ProperName
                                                          'Language.PureScript.Names.ClassName))))
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "ModName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R Language.PureScript.Names.ModuleName))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "KiName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       (Language.PureScript.Names.ProperName
                                                          'Language.PureScript.Names.KindName))))
                           @ x
                           (GHC.Generics.L1
                              @ *
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "ModName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R Language.PureScript.Names.ModuleName)))
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "KiName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.KindName))))
                              @ x
                              g1
                                `cast`
                              (Sym (GHC.Generics.N:K1[0]
                                        <*>_N
                                        <GHC.Generics.R>_P
                                        <Language.PureScript.Names.ModuleName>_R
                                        <x>_P) ; (Sym (GHC.Generics.N:M1[0]
                                                           <*>_N
                                                           <GHC.Generics.S>_P
                                                           <'GHC.Generics.MetaSel
                                                              'GHC.Base.Nothing
                                                              'GHC.Generics.NoSourceUnpackedness
                                                              'GHC.Generics.NoSourceStrictness
                                                              'GHC.Generics.DecidedLazy>_P
                                                           <GHC.Generics.K1
                                                              GHC.Generics.R
                                                              Language.PureScript.Names.ModuleName>_R) ; Sym (GHC.Generics.N:M1[0]
                                                                                                                  <*>_N
                                                                                                                  <GHC.Generics.C>_P
                                                                                                                  <'GHC.Generics.MetaCons
                                                                                                                     "ModName"
                                                                                                                     'GHC.Generics.PrefixI
                                                                                                                     'GHC.Types.False>_P
                                                                                                                  <GHC.Generics.M1
                                                                                                                     GHC.Generics.S
                                                                                                                     ('GHC.Generics.MetaSel
                                                                                                                        'GHC.Base.Nothing
                                                                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                                                                        'GHC.Generics.NoSourceStrictness
                                                                                                                        'GHC.Generics.DecidedLazy)
                                                                                                                     (GHC.Generics.K1
                                                                                                                        GHC.Generics.R
                                                                                                                        Language.PureScript.Names.ModuleName)>_R)) <x>_N)))
                   Language.PureScript.Names.KiName g1
                   -> GHC.Generics.R1
                        @ *
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "IdentName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1 GHC.Generics.R Language.PureScript.Names.Ident))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "ValOpName"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     (Language.PureScript.Names.OpName
                                                        'Language.PureScript.Names.ValueOpName))))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "TyName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     (Language.PureScript.Names.ProperName
                                                        'Language.PureScript.Names.TypeName)))
                                             GHC.Generics.:+: GHC.Generics.M1
                                                                GHC.Generics.C
                                                                ('GHC.Generics.MetaCons
                                                                   "TyOpName"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.False)
                                                                (GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      (Language.PureScript.Names.OpName
                                                                         'Language.PureScript.Names.TypeOpName)))))
                        @ ((GHC.Generics.M1
                              GHC.Generics.C
                              ('GHC.Generics.MetaCons
                                 "DctorName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                              (GHC.Generics.M1
                                 GHC.Generics.S
                                 ('GHC.Generics.MetaSel
                                    'GHC.Base.Nothing
                                    'GHC.Generics.NoSourceUnpackedness
                                    'GHC.Generics.NoSourceStrictness
                                    'GHC.Generics.DecidedLazy)
                                 (GHC.Generics.K1
                                    GHC.Generics.R
                                    (Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.ConstructorName)))
                            GHC.Generics.:+: GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "TyClassName"
                                                  'GHC.Generics.PrefixI
                                                  'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     (Language.PureScript.Names.ProperName
                                                        'Language.PureScript.Names.ClassName))))
                           GHC.Generics.:+: (GHC.Generics.M1
                                               GHC.Generics.C
                                               ('GHC.Generics.MetaCons
                                                  "ModName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                               (GHC.Generics.M1
                                                  GHC.Generics.S
                                                  ('GHC.Generics.MetaSel
                                                     'GHC.Base.Nothing
                                                     'GHC.Generics.NoSourceUnpackedness
                                                     'GHC.Generics.NoSourceStrictness
                                                     'GHC.Generics.DecidedLazy)
                                                  (GHC.Generics.K1
                                                     GHC.Generics.R
                                                     Language.PureScript.Names.ModuleName))
                                             GHC.Generics.:+: GHC.Generics.M1
                                                                GHC.Generics.C
                                                                ('GHC.Generics.MetaCons
                                                                   "KiName"
                                                                   'GHC.Generics.PrefixI
                                                                   'GHC.Types.False)
                                                                (GHC.Generics.M1
                                                                   GHC.Generics.S
                                                                   ('GHC.Generics.MetaSel
                                                                      'GHC.Base.Nothing
                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                      'GHC.Generics.NoSourceStrictness
                                                                      'GHC.Generics.DecidedLazy)
                                                                   (GHC.Generics.K1
                                                                      GHC.Generics.R
                                                                      (Language.PureScript.Names.ProperName
                                                                         'Language.PureScript.Names.KindName)))))
                        @ x
                        (GHC.Generics.R1
                           @ *
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "DctorName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R
                                      (Language.PureScript.Names.ProperName
                                         'Language.PureScript.Names.ConstructorName)))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "TyClassName"
                                                    'GHC.Generics.PrefixI
                                                    'GHC.Types.False)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       (Language.PureScript.Names.ProperName
                                                          'Language.PureScript.Names.ClassName))))
                           @ (GHC.Generics.M1
                                GHC.Generics.C
                                ('GHC.Generics.MetaCons
                                   "ModName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                (GHC.Generics.M1
                                   GHC.Generics.S
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.K1
                                      GHC.Generics.R Language.PureScript.Names.ModuleName))
                              GHC.Generics.:+: GHC.Generics.M1
                                                 GHC.Generics.C
                                                 ('GHC.Generics.MetaCons
                                                    "KiName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                                 (GHC.Generics.M1
                                                    GHC.Generics.S
                                                    ('GHC.Generics.MetaSel
                                                       'GHC.Base.Nothing
                                                       'GHC.Generics.NoSourceUnpackedness
                                                       'GHC.Generics.NoSourceStrictness
                                                       'GHC.Generics.DecidedLazy)
                                                    (GHC.Generics.K1
                                                       GHC.Generics.R
                                                       (Language.PureScript.Names.ProperName
                                                          'Language.PureScript.Names.KindName))))
                           @ x
                           (GHC.Generics.R1
                              @ *
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "ModName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R Language.PureScript.Names.ModuleName)))
                              @ (GHC.Generics.M1
                                   GHC.Generics.C
                                   ('GHC.Generics.MetaCons
                                      "KiName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                   (GHC.Generics.M1
                                      GHC.Generics.S
                                      ('GHC.Generics.MetaSel
                                         'GHC.Base.Nothing
                                         'GHC.Generics.NoSourceUnpackedness
                                         'GHC.Generics.NoSourceStrictness
                                         'GHC.Generics.DecidedLazy)
                                      (GHC.Generics.K1
                                         GHC.Generics.R
                                         (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.KindName))))
                              @ x
                              g1
                                `cast`
                              (Sym (GHC.Generics.N:K1[0]
                                        <*>_N
                                        <GHC.Generics.R>_P
                                        <Language.PureScript.Names.ProperName
                                           'Language.PureScript.Names.KindName>_R
                                        <x>_P) ; (Sym (GHC.Generics.N:M1[0]
                                                           <*>_N
                                                           <GHC.Generics.S>_P
                                                           <'GHC.Generics.MetaSel
                                                              'GHC.Base.Nothing
                                                              'GHC.Generics.NoSourceUnpackedness
                                                              'GHC.Generics.NoSourceStrictness
                                                              'GHC.Generics.DecidedLazy>_P
                                                           <GHC.Generics.K1
                                                              GHC.Generics.R
                                                              (Language.PureScript.Names.ProperName
                                                                 'Language.PureScript.Names.KindName)>_R) ; Sym (GHC.Generics.N:M1[0]
                                                                                                                     <*>_N
                                                                                                                     <GHC.Generics.C>_P
                                                                                                                     <'GHC.Generics.MetaCons
                                                                                                                        "KiName"
                                                                                                                        'GHC.Generics.PrefixI
                                                                                                                        'GHC.Types.False>_P
                                                                                                                     <GHC.Generics.M1
                                                                                                                        GHC.Generics.S
                                                                                                                        ('GHC.Generics.MetaSel
                                                                                                                           'GHC.Base.Nothing
                                                                                                                           'GHC.Generics.NoSourceUnpackedness
                                                                                                                           'GHC.Generics.NoSourceStrictness
                                                                                                                           'GHC.Generics.DecidedLazy)
                                                                                                                        (GHC.Generics.K1
                                                                                                                           GHC.Generics.R
                                                                                                                           (Language.PureScript.Names.ProperName
                                                                                                                              'Language.PureScript.Names.KindName))>_R)) <x>_N))) }) -}
d04047edf96c18708b7b5f72cb565394
  $fGenericName_$cto ::
    GHC.Generics.Rep Language.PureScript.Names.Name x
    -> Language.PureScript.Names.Name
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ @ x
                   (ds :: GHC.Generics.Rep Language.PureScript.Names.Name x) ->
                 case ds
                        `cast`
                      ((Sub (Language.PureScript.Names.Rep_Name[0]) ; GHC.Generics.N:M1[0]
                                                                          <*>_N
                                                                          <GHC.Generics.D>_P
                                                                          <'GHC.Generics.MetaData
                                                                             "Name"
                                                                             "Language.PureScript.Names"
                                                                             "purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"
                                                                             'GHC.Types.False>_P
                                                                          <((GHC.Generics.M1
                                                                               GHC.Generics.C
                                                                               ('GHC.Generics.MetaCons
                                                                                  "IdentName"
                                                                                  'GHC.Generics.PrefixI
                                                                                  'GHC.Types.False)
                                                                               (GHC.Generics.M1
                                                                                  GHC.Generics.S
                                                                                  ('GHC.Generics.MetaSel
                                                                                     'GHC.Base.Nothing
                                                                                     'GHC.Generics.NoSourceUnpackedness
                                                                                     'GHC.Generics.NoSourceStrictness
                                                                                     'GHC.Generics.DecidedLazy)
                                                                                  (GHC.Generics.K1
                                                                                     GHC.Generics.R
                                                                                     Language.PureScript.Names.Ident))
                                                                             GHC.Generics.:+: GHC.Generics.M1
                                                                                                GHC.Generics.C
                                                                                                ('GHC.Generics.MetaCons
                                                                                                   "ValOpName"
                                                                                                   'GHC.Generics.PrefixI
                                                                                                   'GHC.Types.False)
                                                                                                (GHC.Generics.M1
                                                                                                   GHC.Generics.S
                                                                                                   ('GHC.Generics.MetaSel
                                                                                                      'GHC.Base.Nothing
                                                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                                                      'GHC.Generics.NoSourceStrictness
                                                                                                      'GHC.Generics.DecidedLazy)
                                                                                                   (GHC.Generics.K1
                                                                                                      GHC.Generics.R
                                                                                                      (Language.PureScript.Names.OpName
                                                                                                         'Language.PureScript.Names.ValueOpName))))
                                                                            GHC.Generics.:+: (GHC.Generics.M1
                                                                                                GHC.Generics.C
                                                                                                ('GHC.Generics.MetaCons
                                                                                                   "TyName"
                                                                                                   'GHC.Generics.PrefixI
                                                                                                   'GHC.Types.False)
                                                                                                (GHC.Generics.M1
                                                                                                   GHC.Generics.S
                                                                                                   ('GHC.Generics.MetaSel
                                                                                                      'GHC.Base.Nothing
                                                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                                                      'GHC.Generics.NoSourceStrictness
                                                                                                      'GHC.Generics.DecidedLazy)
                                                                                                   (GHC.Generics.K1
                                                                                                      GHC.Generics.R
                                                                                                      (Language.PureScript.Names.ProperName
                                                                                                         'Language.PureScript.Names.TypeName)))
                                                                                              GHC.Generics.:+: GHC.Generics.M1
                                                                                                                 GHC.Generics.C
                                                                                                                 ('GHC.Generics.MetaCons
                                                                                                                    "TyOpName"
                                                                                                                    'GHC.Generics.PrefixI
                                                                                                                    'GHC.Types.False)
                                                                                                                 (GHC.Generics.M1
                                                                                                                    GHC.Generics.S
                                                                                                                    ('GHC.Generics.MetaSel
                                                                                                                       'GHC.Base.Nothing
                                                                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                                                                       'GHC.Generics.NoSourceStrictness
                                                                                                                       'GHC.Generics.DecidedLazy)
                                                                                                                    (GHC.Generics.K1
                                                                                                                       GHC.Generics.R
                                                                                                                       (Language.PureScript.Names.OpName
                                                                                                                          'Language.PureScript.Names.TypeOpName)))))
                                                                           GHC.Generics.:+: ((GHC.Generics.M1
                                                                                                GHC.Generics.C
                                                                                                ('GHC.Generics.MetaCons
                                                                                                   "DctorName"
                                                                                                   'GHC.Generics.PrefixI
                                                                                                   'GHC.Types.False)
                                                                                                (GHC.Generics.M1
                                                                                                   GHC.Generics.S
                                                                                                   ('GHC.Generics.MetaSel
                                                                                                      'GHC.Base.Nothing
                                                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                                                      'GHC.Generics.NoSourceStrictness
                                                                                                      'GHC.Generics.DecidedLazy)
                                                                                                   (GHC.Generics.K1
                                                                                                      GHC.Generics.R
                                                                                                      (Language.PureScript.Names.ProperName
                                                                                                         'Language.PureScript.Names.ConstructorName)))
                                                                                              GHC.Generics.:+: GHC.Generics.M1
                                                                                                                 GHC.Generics.C
                                                                                                                 ('GHC.Generics.MetaCons
                                                                                                                    "TyClassName"
                                                                                                                    'GHC.Generics.PrefixI
                                                                                                                    'GHC.Types.False)
                                                                                                                 (GHC.Generics.M1
                                                                                                                    GHC.Generics.S
                                                                                                                    ('GHC.Generics.MetaSel
                                                                                                                       'GHC.Base.Nothing
                                                                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                                                                       'GHC.Generics.NoSourceStrictness
                                                                                                                       'GHC.Generics.DecidedLazy)
                                                                                                                    (GHC.Generics.K1
                                                                                                                       GHC.Generics.R
                                                                                                                       (Language.PureScript.Names.ProperName
                                                                                                                          'Language.PureScript.Names.ClassName))))
                                                                                             GHC.Generics.:+: (GHC.Generics.M1
                                                                                                                 GHC.Generics.C
                                                                                                                 ('GHC.Generics.MetaCons
                                                                                                                    "ModName"
                                                                                                                    'GHC.Generics.PrefixI
                                                                                                                    'GHC.Types.False)
                                                                                                                 (GHC.Generics.M1
                                                                                                                    GHC.Generics.S
                                                                                                                    ('GHC.Generics.MetaSel
                                                                                                                       'GHC.Base.Nothing
                                                                                                                       'GHC.Generics.NoSourceUnpackedness
                                                                                                                       'GHC.Generics.NoSourceStrictness
                                                                                                                       'GHC.Generics.DecidedLazy)
                                                                                                                    (GHC.Generics.K1
                                                                                                                       GHC.Generics.R
                                                                                                                       Language.PureScript.Names.ModuleName))
                                                                                                               GHC.Generics.:+: GHC.Generics.M1
                                                                                                                                  GHC.Generics.C
                                                                                                                                  ('GHC.Generics.MetaCons
                                                                                                                                     "KiName"
                                                                                                                                     'GHC.Generics.PrefixI
                                                                                                                                     'GHC.Types.False)
                                                                                                                                  (GHC.Generics.M1
                                                                                                                                     GHC.Generics.S
                                                                                                                                     ('GHC.Generics.MetaSel
                                                                                                                                        'GHC.Base.Nothing
                                                                                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                                                                                        'GHC.Generics.NoSourceStrictness
                                                                                                                                        'GHC.Generics.DecidedLazy)
                                                                                                                                     (GHC.Generics.K1
                                                                                                                                        GHC.Generics.R
                                                                                                                                        (Language.PureScript.Names.ProperName
                                                                                                                                           'Language.PureScript.Names.KindName)))))>_R) <x>_N) of wild {
                   GHC.Generics.L1 ds1
                   -> case ds1 of wild1 {
                        GHC.Generics.L1 ds2
                        -> case ds2 of wild2 {
                             GHC.Generics.L1 ds3
                             -> Language.PureScript.Names.IdentName
                                  ds3
                                    `cast`
                                  ((GHC.Generics.N:M1[0]
                                        <*>_N
                                        <GHC.Generics.C>_P
                                        <'GHC.Generics.MetaCons
                                           "IdentName" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                        <GHC.Generics.M1
                                           GHC.Generics.S
                                           ('GHC.Generics.MetaSel
                                              'GHC.Base.Nothing
                                              'GHC.Generics.NoSourceUnpackedness
                                              'GHC.Generics.NoSourceStrictness
                                              'GHC.Generics.DecidedLazy)
                                           (GHC.Generics.K1
                                              GHC.Generics.R
                                              Language.PureScript.Names.Ident)>_R ; GHC.Generics.N:M1[0]
                                                                                        <*>_N
                                                                                        <GHC.Generics.S>_P
                                                                                        <'GHC.Generics.MetaSel
                                                                                           'GHC.Base.Nothing
                                                                                           'GHC.Generics.NoSourceUnpackedness
                                                                                           'GHC.Generics.NoSourceStrictness
                                                                                           'GHC.Generics.DecidedLazy>_P
                                                                                        <GHC.Generics.K1
                                                                                           GHC.Generics.R
                                                                                           Language.PureScript.Names.Ident>_R) <x>_N ; GHC.Generics.N:K1[0]
                                                                                                                                           <*>_N
                                                                                                                                           <GHC.Generics.R>_P
                                                                                                                                           <Language.PureScript.Names.Ident>_R
                                                                                                                                           <x>_P)
                             GHC.Generics.R1 ds3
                             -> Language.PureScript.Names.ValOpName
                                  ds3
                                    `cast`
                                  ((GHC.Generics.N:M1[0]
                                        <*>_N
                                        <GHC.Generics.C>_P
                                        <'GHC.Generics.MetaCons
                                           "ValOpName" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                        <GHC.Generics.M1
                                           GHC.Generics.S
                                           ('GHC.Generics.MetaSel
                                              'GHC.Base.Nothing
                                              'GHC.Generics.NoSourceUnpackedness
                                              'GHC.Generics.NoSourceStrictness
                                              'GHC.Generics.DecidedLazy)
                                           (GHC.Generics.K1
                                              GHC.Generics.R
                                              (Language.PureScript.Names.OpName
                                                 'Language.PureScript.Names.ValueOpName))>_R ; GHC.Generics.N:M1[0]
                                                                                                   <*>_N
                                                                                                   <GHC.Generics.S>_P
                                                                                                   <'GHC.Generics.MetaSel
                                                                                                      'GHC.Base.Nothing
                                                                                                      'GHC.Generics.NoSourceUnpackedness
                                                                                                      'GHC.Generics.NoSourceStrictness
                                                                                                      'GHC.Generics.DecidedLazy>_P
                                                                                                   <GHC.Generics.K1
                                                                                                      GHC.Generics.R
                                                                                                      (Language.PureScript.Names.OpName
                                                                                                         'Language.PureScript.Names.ValueOpName)>_R) <x>_N ; GHC.Generics.N:K1[0]
                                                                                                                                                                 <*>_N
                                                                                                                                                                 <GHC.Generics.R>_P
                                                                                                                                                                 <Language.PureScript.Names.OpName
                                                                                                                                                                    'Language.PureScript.Names.ValueOpName>_R
                                                                                                                                                                 <x>_P) }
                        GHC.Generics.R1 ds2
                        -> case ds2 of wild2 {
                             GHC.Generics.L1 ds3
                             -> Language.PureScript.Names.TyName
                                  ds3
                                    `cast`
                                  ((GHC.Generics.N:M1[0]
                                        <*>_N
                                        <GHC.Generics.C>_P
                                        <'GHC.Generics.MetaCons
                                           "TyName" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                        <GHC.Generics.M1
                                           GHC.Generics.S
                                           ('GHC.Generics.MetaSel
                                              'GHC.Base.Nothing
                                              'GHC.Generics.NoSourceUnpackedness
                                              'GHC.Generics.NoSourceStrictness
                                              'GHC.Generics.DecidedLazy)
                                           (GHC.Generics.K1
                                              GHC.Generics.R
                                              (Language.PureScript.Names.ProperName
                                                 'Language.PureScript.Names.TypeName))>_R ; GHC.Generics.N:M1[0]
                                                                                                <*>_N
                                                                                                <GHC.Generics.S>_P
                                                                                                <'GHC.Generics.MetaSel
                                                                                                   'GHC.Base.Nothing
                                                                                                   'GHC.Generics.NoSourceUnpackedness
                                                                                                   'GHC.Generics.NoSourceStrictness
                                                                                                   'GHC.Generics.DecidedLazy>_P
                                                                                                <GHC.Generics.K1
                                                                                                   GHC.Generics.R
                                                                                                   (Language.PureScript.Names.ProperName
                                                                                                      'Language.PureScript.Names.TypeName)>_R) <x>_N ; GHC.Generics.N:K1[0]
                                                                                                                                                           <*>_N
                                                                                                                                                           <GHC.Generics.R>_P
                                                                                                                                                           <Language.PureScript.Names.ProperName
                                                                                                                                                              'Language.PureScript.Names.TypeName>_R
                                                                                                                                                           <x>_P)
                             GHC.Generics.R1 ds3
                             -> Language.PureScript.Names.TyOpName
                                  ds3
                                    `cast`
                                  ((GHC.Generics.N:M1[0]
                                        <*>_N
                                        <GHC.Generics.C>_P
                                        <'GHC.Generics.MetaCons
                                           "TyOpName" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                        <GHC.Generics.M1
                                           GHC.Generics.S
                                           ('GHC.Generics.MetaSel
                                              'GHC.Base.Nothing
                                              'GHC.Generics.NoSourceUnpackedness
                                              'GHC.Generics.NoSourceStrictness
                                              'GHC.Generics.DecidedLazy)
                                           (GHC.Generics.K1
                                              GHC.Generics.R
                                              (Language.PureScript.Names.OpName
                                                 'Language.PureScript.Names.TypeOpName))>_R ; GHC.Generics.N:M1[0]
                                                                                                  <*>_N
                                                                                                  <GHC.Generics.S>_P
                                                                                                  <'GHC.Generics.MetaSel
                                                                                                     'GHC.Base.Nothing
                                                                                                     'GHC.Generics.NoSourceUnpackedness
                                                                                                     'GHC.Generics.NoSourceStrictness
                                                                                                     'GHC.Generics.DecidedLazy>_P
                                                                                                  <GHC.Generics.K1
                                                                                                     GHC.Generics.R
                                                                                                     (Language.PureScript.Names.OpName
                                                                                                        'Language.PureScript.Names.TypeOpName)>_R) <x>_N ; GHC.Generics.N:K1[0]
                                                                                                                                                               <*>_N
                                                                                                                                                               <GHC.Generics.R>_P
                                                                                                                                                               <Language.PureScript.Names.OpName
                                                                                                                                                                  'Language.PureScript.Names.TypeOpName>_R
                                                                                                                                                               <x>_P) } }
                   GHC.Generics.R1 ds1
                   -> case ds1 of wild1 {
                        GHC.Generics.L1 ds2
                        -> case ds2 of wild2 {
                             GHC.Generics.L1 ds3
                             -> Language.PureScript.Names.DctorName
                                  ds3
                                    `cast`
                                  ((GHC.Generics.N:M1[0]
                                        <*>_N
                                        <GHC.Generics.C>_P
                                        <'GHC.Generics.MetaCons
                                           "DctorName" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                        <GHC.Generics.M1
                                           GHC.Generics.S
                                           ('GHC.Generics.MetaSel
                                              'GHC.Base.Nothing
                                              'GHC.Generics.NoSourceUnpackedness
                                              'GHC.Generics.NoSourceStrictness
                                              'GHC.Generics.DecidedLazy)
                                           (GHC.Generics.K1
                                              GHC.Generics.R
                                              (Language.PureScript.Names.ProperName
                                                 'Language.PureScript.Names.ConstructorName))>_R ; GHC.Generics.N:M1[0]
                                                                                                       <*>_N
                                                                                                       <GHC.Generics.S>_P
                                                                                                       <'GHC.Generics.MetaSel
                                                                                                          'GHC.Base.Nothing
                                                                                                          'GHC.Generics.NoSourceUnpackedness
                                                                                                          'GHC.Generics.NoSourceStrictness
                                                                                                          'GHC.Generics.DecidedLazy>_P
                                                                                                       <GHC.Generics.K1
                                                                                                          GHC.Generics.R
                                                                                                          (Language.PureScript.Names.ProperName
                                                                                                             'Language.PureScript.Names.ConstructorName)>_R) <x>_N ; GHC.Generics.N:K1[0]
                                                                                                                                                                         <*>_N
                                                                                                                                                                         <GHC.Generics.R>_P
                                                                                                                                                                         <Language.PureScript.Names.ProperName
                                                                                                                                                                            'Language.PureScript.Names.ConstructorName>_R
                                                                                                                                                                         <x>_P)
                             GHC.Generics.R1 ds3
                             -> Language.PureScript.Names.TyClassName
                                  ds3
                                    `cast`
                                  ((GHC.Generics.N:M1[0]
                                        <*>_N
                                        <GHC.Generics.C>_P
                                        <'GHC.Generics.MetaCons
                                           "TyClassName" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                        <GHC.Generics.M1
                                           GHC.Generics.S
                                           ('GHC.Generics.MetaSel
                                              'GHC.Base.Nothing
                                              'GHC.Generics.NoSourceUnpackedness
                                              'GHC.Generics.NoSourceStrictness
                                              'GHC.Generics.DecidedLazy)
                                           (GHC.Generics.K1
                                              GHC.Generics.R
                                              (Language.PureScript.Names.ProperName
                                                 'Language.PureScript.Names.ClassName))>_R ; GHC.Generics.N:M1[0]
                                                                                                 <*>_N
                                                                                                 <GHC.Generics.S>_P
                                                                                                 <'GHC.Generics.MetaSel
                                                                                                    'GHC.Base.Nothing
                                                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                                                    'GHC.Generics.NoSourceStrictness
                                                                                                    'GHC.Generics.DecidedLazy>_P
                                                                                                 <GHC.Generics.K1
                                                                                                    GHC.Generics.R
                                                                                                    (Language.PureScript.Names.ProperName
                                                                                                       'Language.PureScript.Names.ClassName)>_R) <x>_N ; GHC.Generics.N:K1[0]
                                                                                                                                                             <*>_N
                                                                                                                                                             <GHC.Generics.R>_P
                                                                                                                                                             <Language.PureScript.Names.ProperName
                                                                                                                                                                'Language.PureScript.Names.ClassName>_R
                                                                                                                                                             <x>_P) }
                        GHC.Generics.R1 ds2
                        -> case ds2 of wild2 {
                             GHC.Generics.L1 ds3
                             -> Language.PureScript.Names.ModName
                                  ds3
                                    `cast`
                                  ((GHC.Generics.N:M1[0]
                                        <*>_N
                                        <GHC.Generics.C>_P
                                        <'GHC.Generics.MetaCons
                                           "ModName" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                        <GHC.Generics.M1
                                           GHC.Generics.S
                                           ('GHC.Generics.MetaSel
                                              'GHC.Base.Nothing
                                              'GHC.Generics.NoSourceUnpackedness
                                              'GHC.Generics.NoSourceStrictness
                                              'GHC.Generics.DecidedLazy)
                                           (GHC.Generics.K1
                                              GHC.Generics.R
                                              Language.PureScript.Names.ModuleName)>_R ; GHC.Generics.N:M1[0]
                                                                                             <*>_N
                                                                                             <GHC.Generics.S>_P
                                                                                             <'GHC.Generics.MetaSel
                                                                                                'GHC.Base.Nothing
                                                                                                'GHC.Generics.NoSourceUnpackedness
                                                                                                'GHC.Generics.NoSourceStrictness
                                                                                                'GHC.Generics.DecidedLazy>_P
                                                                                             <GHC.Generics.K1
                                                                                                GHC.Generics.R
                                                                                                Language.PureScript.Names.ModuleName>_R) <x>_N ; GHC.Generics.N:K1[0]
                                                                                                                                                     <*>_N
                                                                                                                                                     <GHC.Generics.R>_P
                                                                                                                                                     <Language.PureScript.Names.ModuleName>_R
                                                                                                                                                     <x>_P)
                             GHC.Generics.R1 ds3
                             -> Language.PureScript.Names.KiName
                                  ds3
                                    `cast`
                                  ((GHC.Generics.N:M1[0]
                                        <*>_N
                                        <GHC.Generics.C>_P
                                        <'GHC.Generics.MetaCons
                                           "KiName" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                                        <GHC.Generics.M1
                                           GHC.Generics.S
                                           ('GHC.Generics.MetaSel
                                              'GHC.Base.Nothing
                                              'GHC.Generics.NoSourceUnpackedness
                                              'GHC.Generics.NoSourceStrictness
                                              'GHC.Generics.DecidedLazy)
                                           (GHC.Generics.K1
                                              GHC.Generics.R
                                              (Language.PureScript.Names.ProperName
                                                 'Language.PureScript.Names.KindName))>_R ; GHC.Generics.N:M1[0]
                                                                                                <*>_N
                                                                                                <GHC.Generics.S>_P
                                                                                                <'GHC.Generics.MetaSel
                                                                                                   'GHC.Base.Nothing
                                                                                                   'GHC.Generics.NoSourceUnpackedness
                                                                                                   'GHC.Generics.NoSourceStrictness
                                                                                                   'GHC.Generics.DecidedLazy>_P
                                                                                                <GHC.Generics.K1
                                                                                                   GHC.Generics.R
                                                                                                   (Language.PureScript.Names.ProperName
                                                                                                      'Language.PureScript.Names.KindName)>_R) <x>_N ; GHC.Generics.N:K1[0]
                                                                                                                                                           <*>_N
                                                                                                                                                           <GHC.Generics.R>_P
                                                                                                                                                           <Language.PureScript.Names.ProperName
                                                                                                                                                              'Language.PureScript.Names.KindName>_R
                                                                                                                                                           <x>_P) } } }) -}
9af301165f72160425c5e0dde6525338
  $fGenericOpName ::
    GHC.Generics.Generic (Language.PureScript.Names.OpName a)
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ a :: Language.PureScript.Names.OpNameType.
                  @ (Language.PureScript.Names.OpName a)
                  (Language.PureScript.Names.$fGenericOpName2 @ a)
                    `cast`
                  (forall (x :: <*>_N).
                   <Language.PureScript.Names.OpName a>_R
                   ->_R Language.PureScript.Names.N:OpName[0]
                            <a>_P ; (Sym (GHC.Generics.N:K1[0]
                                              <*>_N
                                              <GHC.Generics.R>_P
                                              <Data.Text.Internal.Text>_R
                                              <x>_P) ; (Sym (GHC.Generics.N:M1[0]
                                                                 <*>_N
                                                                 <GHC.Generics.S>_P
                                                                 <'GHC.Generics.MetaSel
                                                                    ('GHC.Base.Just "runOpName")
                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                    'GHC.Generics.NoSourceStrictness
                                                                    'GHC.Generics.DecidedLazy>_P
                                                                 <GHC.Generics.K1
                                                                    GHC.Generics.R
                                                                    Data.Text.Internal.Text>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                                                            <*>_N
                                                                                                            <GHC.Generics.C>_P
                                                                                                            <'GHC.Generics.MetaCons
                                                                                                               "OpName"
                                                                                                               'GHC.Generics.PrefixI
                                                                                                               'GHC.Types.True>_P
                                                                                                            <GHC.Generics.M1
                                                                                                               GHC.Generics.S
                                                                                                               ('GHC.Generics.MetaSel
                                                                                                                  ('GHC.Base.Just
                                                                                                                     "runOpName")
                                                                                                                  'GHC.Generics.NoSourceUnpackedness
                                                                                                                  'GHC.Generics.NoSourceStrictness
                                                                                                                  'GHC.Generics.DecidedLazy)
                                                                                                               (GHC.Generics.K1
                                                                                                                  GHC.Generics.R
                                                                                                                  Data.Text.Internal.Text)>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                                                                                                           <*>_N
                                                                                                                                                           <GHC.Generics.D>_P
                                                                                                                                                           <'GHC.Generics.MetaData
                                                                                                                                                              "OpName"
                                                                                                                                                              "Language.PureScript.Names"
                                                                                                                                                              "purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"
                                                                                                                                                              'GHC.Types.True>_P
                                                                                                                                                           <GHC.Generics.M1
                                                                                                                                                              GHC.Generics.C
                                                                                                                                                              ('GHC.Generics.MetaCons
                                                                                                                                                                 "OpName"
                                                                                                                                                                 'GHC.Generics.PrefixI
                                                                                                                                                                 'GHC.Types.True)
                                                                                                                                                              (GHC.Generics.M1
                                                                                                                                                                 GHC.Generics.S
                                                                                                                                                                 ('GHC.Generics.MetaSel
                                                                                                                                                                    ('GHC.Base.Just
                                                                                                                                                                       "runOpName")
                                                                                                                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                    'GHC.Generics.NoSourceStrictness
                                                                                                                                                                    'GHC.Generics.DecidedLazy)
                                                                                                                                                                 (GHC.Generics.K1
                                                                                                                                                                    GHC.Generics.R
                                                                                                                                                                    Data.Text.Internal.Text))>_R) ; Sub (Sym (Language.PureScript.Names.Rep_OpName[0]
                                                                                                                                                                                                                  <a>_N))))) <x>_N))
                  (Language.PureScript.Names.$fGenericOpName1 @ a)
                    `cast`
                  (forall (x :: <*>_N).
                   <GHC.Generics.Rep (Language.PureScript.Names.OpName a) x>_R
                   ->_R (Sub (Language.PureScript.Names.Rep_OpName[0]
                                  <a>_N) ; (GHC.Generics.N:M1[0]
                                                <*>_N
                                                <GHC.Generics.D>_P
                                                <'GHC.Generics.MetaData
                                                   "OpName"
                                                   "Language.PureScript.Names"
                                                   "purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"
                                                   'GHC.Types.True>_P
                                                <GHC.Generics.M1
                                                   GHC.Generics.C
                                                   ('GHC.Generics.MetaCons
                                                      "OpName"
                                                      'GHC.Generics.PrefixI
                                                      'GHC.Types.True)
                                                   (GHC.Generics.M1
                                                      GHC.Generics.S
                                                      ('GHC.Generics.MetaSel
                                                         ('GHC.Base.Just "runOpName")
                                                         'GHC.Generics.NoSourceUnpackedness
                                                         'GHC.Generics.NoSourceStrictness
                                                         'GHC.Generics.DecidedLazy)
                                                      (GHC.Generics.K1
                                                         GHC.Generics.R
                                                         Data.Text.Internal.Text))>_R ; (GHC.Generics.N:M1[0]
                                                                                             <*>_N
                                                                                             <GHC.Generics.C>_P
                                                                                             <'GHC.Generics.MetaCons
                                                                                                "OpName"
                                                                                                'GHC.Generics.PrefixI
                                                                                                'GHC.Types.True>_P
                                                                                             <GHC.Generics.M1
                                                                                                GHC.Generics.S
                                                                                                ('GHC.Generics.MetaSel
                                                                                                   ('GHC.Base.Just
                                                                                                      "runOpName")
                                                                                                   'GHC.Generics.NoSourceUnpackedness
                                                                                                   'GHC.Generics.NoSourceStrictness
                                                                                                   'GHC.Generics.DecidedLazy)
                                                                                                (GHC.Generics.K1
                                                                                                   GHC.Generics.R
                                                                                                   Data.Text.Internal.Text)>_R ; GHC.Generics.N:M1[0]
                                                                                                                                     <*>_N
                                                                                                                                     <GHC.Generics.S>_P
                                                                                                                                     <'GHC.Generics.MetaSel
                                                                                                                                        ('GHC.Base.Just
                                                                                                                                           "runOpName")
                                                                                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                                                                                        'GHC.Generics.NoSourceStrictness
                                                                                                                                        'GHC.Generics.DecidedLazy>_P
                                                                                                                                     <GHC.Generics.K1
                                                                                                                                        GHC.Generics.R
                                                                                                                                        Data.Text.Internal.Text>_R))) <x>_N ; (GHC.Generics.N:K1[0]
                                                                                                                                                                                   <*>_N
                                                                                                                                                                                   <GHC.Generics.R>_P
                                                                                                                                                                                   <Data.Text.Internal.Text>_R
                                                                                                                                                                                   <x>_P ; Sym (Language.PureScript.Names.N:OpName[0]
                                                                                                                                                                                                    <a>_P))) -}
9af301165f72160425c5e0dde6525338
  $fGenericOpName1 ::
    GHC.Generics.Rep (Language.PureScript.Names.OpName a) x
    -> GHC.Generics.Rep (Language.PureScript.Names.OpName a) x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U)>m,
     Unfolding: InlineRule (1, True, True)
                (\ @ a :: Language.PureScript.Names.OpNameType
                   @ x
                   (ds :: GHC.Generics.Rep (Language.PureScript.Names.OpName a) x) ->
                 ds) -}
9af301165f72160425c5e0dde6525338
  $fGenericOpName2 ::
    Language.PureScript.Names.OpName a
    -> Language.PureScript.Names.OpName a
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U)>m,
     Unfolding: InlineRule (1, True, True)
                (\ @ a :: Language.PureScript.Names.OpNameType
                   @ x
                   (x1 :: Language.PureScript.Names.OpName a) ->
                 x1) -}
a7268334e0b909381550b9329cb80fcc
  $fGenericProperName ::
    GHC.Generics.Generic (Language.PureScript.Names.ProperName a)
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ a :: Language.PureScript.Names.ProperNameType.
                  @ (Language.PureScript.Names.ProperName a)
                  (Language.PureScript.Names.$fGenericProperName2 @ a)
                    `cast`
                  (forall (x :: <*>_N).
                   <Language.PureScript.Names.ProperName a>_R
                   ->_R Language.PureScript.Names.N:ProperName[0]
                            <a>_P ; (Sym (GHC.Generics.N:K1[0]
                                              <*>_N
                                              <GHC.Generics.R>_P
                                              <Data.Text.Internal.Text>_R
                                              <x>_P) ; (Sym (GHC.Generics.N:M1[0]
                                                                 <*>_N
                                                                 <GHC.Generics.S>_P
                                                                 <'GHC.Generics.MetaSel
                                                                    ('GHC.Base.Just "runProperName")
                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                    'GHC.Generics.NoSourceStrictness
                                                                    'GHC.Generics.DecidedLazy>_P
                                                                 <GHC.Generics.K1
                                                                    GHC.Generics.R
                                                                    Data.Text.Internal.Text>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                                                            <*>_N
                                                                                                            <GHC.Generics.C>_P
                                                                                                            <'GHC.Generics.MetaCons
                                                                                                               "ProperName"
                                                                                                               'GHC.Generics.PrefixI
                                                                                                               'GHC.Types.True>_P
                                                                                                            <GHC.Generics.M1
                                                                                                               GHC.Generics.S
                                                                                                               ('GHC.Generics.MetaSel
                                                                                                                  ('GHC.Base.Just
                                                                                                                     "runProperName")
                                                                                                                  'GHC.Generics.NoSourceUnpackedness
                                                                                                                  'GHC.Generics.NoSourceStrictness
                                                                                                                  'GHC.Generics.DecidedLazy)
                                                                                                               (GHC.Generics.K1
                                                                                                                  GHC.Generics.R
                                                                                                                  Data.Text.Internal.Text)>_R) ; (Sym (GHC.Generics.N:M1[0]
                                                                                                                                                           <*>_N
                                                                                                                                                           <GHC.Generics.D>_P
                                                                                                                                                           <'GHC.Generics.MetaData
                                                                                                                                                              "ProperName"
                                                                                                                                                              "Language.PureScript.Names"
                                                                                                                                                              "purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"
                                                                                                                                                              'GHC.Types.True>_P
                                                                                                                                                           <GHC.Generics.M1
                                                                                                                                                              GHC.Generics.C
                                                                                                                                                              ('GHC.Generics.MetaCons
                                                                                                                                                                 "ProperName"
                                                                                                                                                                 'GHC.Generics.PrefixI
                                                                                                                                                                 'GHC.Types.True)
                                                                                                                                                              (GHC.Generics.M1
                                                                                                                                                                 GHC.Generics.S
                                                                                                                                                                 ('GHC.Generics.MetaSel
                                                                                                                                                                    ('GHC.Base.Just
                                                                                                                                                                       "runProperName")
                                                                                                                                                                    'GHC.Generics.NoSourceUnpackedness
                                                                                                                                                                    'GHC.Generics.NoSourceStrictness
                                                                                                                                                                    'GHC.Generics.DecidedLazy)
                                                                                                                                                                 (GHC.Generics.K1
                                                                                                                                                                    GHC.Generics.R
                                                                                                                                                                    Data.Text.Internal.Text))>_R) ; Sub (Sym (Language.PureScript.Names.Rep_ProperName[0]
                                                                                                                                                                                                                  <a>_N))))) <x>_N))
                  (Language.PureScript.Names.$fGenericProperName1 @ a)
                    `cast`
                  (forall (x :: <*>_N).
                   <GHC.Generics.Rep (Language.PureScript.Names.ProperName a) x>_R
                   ->_R (Sub (Language.PureScript.Names.Rep_ProperName[0]
                                  <a>_N) ; (GHC.Generics.N:M1[0]
                                                <*>_N
                                                <GHC.Generics.D>_P
                                                <'GHC.Generics.MetaData
                                                   "ProperName"
                                                   "Language.PureScript.Names"
                                                   "purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"
                                                   'GHC.Types.True>_P
                                                <GHC.Generics.M1
                                                   GHC.Generics.C
                                                   ('GHC.Generics.MetaCons
                                                      "ProperName"
                                                      'GHC.Generics.PrefixI
                                                      'GHC.Types.True)
                                                   (GHC.Generics.M1
                                                      GHC.Generics.S
                                                      ('GHC.Generics.MetaSel
                                                         ('GHC.Base.Just "runProperName")
                                                         'GHC.Generics.NoSourceUnpackedness
                                                         'GHC.Generics.NoSourceStrictness
                                                         'GHC.Generics.DecidedLazy)
                                                      (GHC.Generics.K1
                                                         GHC.Generics.R
                                                         Data.Text.Internal.Text))>_R ; (GHC.Generics.N:M1[0]
                                                                                             <*>_N
                                                                                             <GHC.Generics.C>_P
                                                                                             <'GHC.Generics.MetaCons
                                                                                                "ProperName"
                                                                                                'GHC.Generics.PrefixI
                                                                                                'GHC.Types.True>_P
                                                                                             <GHC.Generics.M1
                                                                                                GHC.Generics.S
                                                                                                ('GHC.Generics.MetaSel
                                                                                                   ('GHC.Base.Just
                                                                                                      "runProperName")
                                                                                                   'GHC.Generics.NoSourceUnpackedness
                                                                                                   'GHC.Generics.NoSourceStrictness
                                                                                                   'GHC.Generics.DecidedLazy)
                                                                                                (GHC.Generics.K1
                                                                                                   GHC.Generics.R
                                                                                                   Data.Text.Internal.Text)>_R ; GHC.Generics.N:M1[0]
                                                                                                                                     <*>_N
                                                                                                                                     <GHC.Generics.S>_P
                                                                                                                                     <'GHC.Generics.MetaSel
                                                                                                                                        ('GHC.Base.Just
                                                                                                                                           "runProperName")
                                                                                                                                        'GHC.Generics.NoSourceUnpackedness
                                                                                                                                        'GHC.Generics.NoSourceStrictness
                                                                                                                                        'GHC.Generics.DecidedLazy>_P
                                                                                                                                     <GHC.Generics.K1
                                                                                                                                        GHC.Generics.R
                                                                                                                                        Data.Text.Internal.Text>_R))) <x>_N ; (GHC.Generics.N:K1[0]
                                                                                                                                                                                   <*>_N
                                                                                                                                                                                   <GHC.Generics.R>_P
                                                                                                                                                                                   <Data.Text.Internal.Text>_R
                                                                                                                                                                                   <x>_P ; Sym (Language.PureScript.Names.N:ProperName[0]
                                                                                                                                                                                                    <a>_P))) -}
a7268334e0b909381550b9329cb80fcc
  $fGenericProperName1 ::
    GHC.Generics.Rep (Language.PureScript.Names.ProperName a) x
    -> GHC.Generics.Rep (Language.PureScript.Names.ProperName a) x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U)>m,
     Unfolding: InlineRule (1, True, True)
                (\ @ a :: Language.PureScript.Names.ProperNameType
                   @ x
                   (ds :: GHC.Generics.Rep
                            (Language.PureScript.Names.ProperName a) x) ->
                 ds) -}
a7268334e0b909381550b9329cb80fcc
  $fGenericProperName2 ::
    Language.PureScript.Names.ProperName a
    -> Language.PureScript.Names.ProperName a
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U)>m,
     Unfolding: InlineRule (1, True, True)
                (\ @ a :: Language.PureScript.Names.ProperNameType
                   @ x
                   (x1 :: Language.PureScript.Names.ProperName a) ->
                 x1) -}
1b2ddf0c04464d2fa2588925f10c1966
  $fGenericQualified ::
    GHC.Generics.Generic (Language.PureScript.Names.Qualified a)
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ a.
                  @ (Language.PureScript.Names.Qualified a)
                  (Language.PureScript.Names.$fGenericQualified1 @ a)
                    `cast`
                  (forall (x :: <*>_N).
                   <Language.PureScript.Names.Qualified a>_R
                   ->_R (Sym (GHC.Generics.N:M1[0]
                                  <*>_N
                                  <GHC.Generics.D>_P
                                  <'GHC.Generics.MetaData
                                     "Qualified"
                                     "Language.PureScript.Names"
                                     "purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"
                                     'GHC.Types.False>_P
                                  <GHC.Generics.M1
                                     GHC.Generics.C
                                     ('GHC.Generics.MetaCons
                                        "Qualified" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                     (GHC.Generics.M1
                                        GHC.Generics.S
                                        ('GHC.Generics.MetaSel
                                           'GHC.Base.Nothing
                                           'GHC.Generics.NoSourceUnpackedness
                                           'GHC.Generics.NoSourceStrictness
                                           'GHC.Generics.DecidedLazy)
                                        (GHC.Generics.K1
                                           GHC.Generics.R
                                           (GHC.Base.Maybe Language.PureScript.Names.ModuleName))
                                      GHC.Generics.:*: GHC.Generics.M1
                                                         GHC.Generics.S
                                                         ('GHC.Generics.MetaSel
                                                            'GHC.Base.Nothing
                                                            'GHC.Generics.NoSourceUnpackedness
                                                            'GHC.Generics.NoSourceStrictness
                                                            'GHC.Generics.DecidedLazy)
                                                         (GHC.Generics.K1
                                                            GHC.Generics.R
                                                            a))>_R) ; Sub (Sym (Language.PureScript.Names.Rep_Qualified[0]
                                                                                    <a>_N))) <x>_N)
                  (Language.PureScript.Names.$fGenericQualified_$cto @ a) -}
1b2ddf0c04464d2fa2588925f10c1966
  $fGenericQualified1 ::
    Language.PureScript.Names.Qualified a
    -> GHC.Generics.M1
         GHC.Generics.C
         ('GHC.Generics.MetaCons
            "Qualified" 'GHC.Generics.PrefixI 'GHC.Types.False)
         (GHC.Generics.M1
            GHC.Generics.S
            ('GHC.Generics.MetaSel
               'GHC.Base.Nothing
               'GHC.Generics.NoSourceUnpackedness
               'GHC.Generics.NoSourceStrictness
               'GHC.Generics.DecidedLazy)
            (GHC.Generics.K1
               GHC.Generics.R
               (GHC.Base.Maybe Language.PureScript.Names.ModuleName))
          GHC.Generics.:*: GHC.Generics.M1
                             GHC.Generics.S
                             ('GHC.Generics.MetaSel
                                'GHC.Base.Nothing
                                'GHC.Generics.NoSourceUnpackedness
                                'GHC.Generics.NoSourceStrictness
                                'GHC.Generics.DecidedLazy)
                             (GHC.Generics.K1 GHC.Generics.R a))
         x
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ a @ x (x1 :: Language.PureScript.Names.Qualified a) ->
                 case x1 of wild { Language.PureScript.Names.Qualified g1 g2 ->
                 (GHC.Generics.:*:
                    @ *
                    @ (GHC.Generics.M1
                         GHC.Generics.S
                         ('GHC.Generics.MetaSel
                            'GHC.Base.Nothing
                            'GHC.Generics.NoSourceUnpackedness
                            'GHC.Generics.NoSourceStrictness
                            'GHC.Generics.DecidedLazy)
                         (GHC.Generics.K1
                            GHC.Generics.R
                            (GHC.Base.Maybe Language.PureScript.Names.ModuleName)))
                    @ (GHC.Generics.M1
                         GHC.Generics.S
                         ('GHC.Generics.MetaSel
                            'GHC.Base.Nothing
                            'GHC.Generics.NoSourceUnpackedness
                            'GHC.Generics.NoSourceStrictness
                            'GHC.Generics.DecidedLazy)
                         (GHC.Generics.K1 GHC.Generics.R a))
                    @ x
                    g1
                      `cast`
                    (Sym (GHC.Generics.N:K1[0]
                              <*>_N
                              <GHC.Generics.R>_P
                              <GHC.Base.Maybe Language.PureScript.Names.ModuleName>_R
                              <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                <*>_N
                                                <GHC.Generics.S>_P
                                                <'GHC.Generics.MetaSel
                                                   'GHC.Base.Nothing
                                                   'GHC.Generics.NoSourceUnpackedness
                                                   'GHC.Generics.NoSourceStrictness
                                                   'GHC.Generics.DecidedLazy>_P
                                                <GHC.Generics.K1
                                                   GHC.Generics.R
                                                   (GHC.Base.Maybe
                                                      Language.PureScript.Names.ModuleName)>_R) <x>_N)
                    g2
                      `cast`
                    (Sym (GHC.Generics.N:K1[0]
                              <*>_N <GHC.Generics.R>_P <a>_R <x>_P) ; Sym (GHC.Generics.N:M1[0]
                                                                               <*>_N
                                                                               <GHC.Generics.S>_P
                                                                               <'GHC.Generics.MetaSel
                                                                                  'GHC.Base.Nothing
                                                                                  'GHC.Generics.NoSourceUnpackedness
                                                                                  'GHC.Generics.NoSourceStrictness
                                                                                  'GHC.Generics.DecidedLazy>_P
                                                                               <GHC.Generics.K1
                                                                                  GHC.Generics.R
                                                                                  a>_R) <x>_N))
                   `cast`
                 (Sym (GHC.Generics.N:M1[0]
                           <*>_N
                           <GHC.Generics.C>_P
                           <'GHC.Generics.MetaCons
                              "Qualified" 'GHC.Generics.PrefixI 'GHC.Types.False>_P
                           <GHC.Generics.M1
                              GHC.Generics.S
                              ('GHC.Generics.MetaSel
                                 'GHC.Base.Nothing
                                 'GHC.Generics.NoSourceUnpackedness
                                 'GHC.Generics.NoSourceStrictness
                                 'GHC.Generics.DecidedLazy)
                              (GHC.Generics.K1
                                 GHC.Generics.R
                                 (GHC.Base.Maybe Language.PureScript.Names.ModuleName))
                            GHC.Generics.:*: GHC.Generics.M1
                                               GHC.Generics.S
                                               ('GHC.Generics.MetaSel
                                                  'GHC.Base.Nothing
                                                  'GHC.Generics.NoSourceUnpackedness
                                                  'GHC.Generics.NoSourceStrictness
                                                  'GHC.Generics.DecidedLazy)
                                               (GHC.Generics.K1 GHC.Generics.R a)>_R) <x>_N) }) -}
1b2ddf0c04464d2fa2588925f10c1966
  $fGenericQualified_$cto ::
    GHC.Generics.Rep (Language.PureScript.Names.Qualified a) x
    -> Language.PureScript.Names.Qualified a
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ a
                   @ x
                   (ds :: GHC.Generics.Rep
                            (Language.PureScript.Names.Qualified a) x) ->
                 case ds
                        `cast`
                      ((Sub (Language.PureScript.Names.Rep_Qualified[0]
                                 <a>_N) ; (GHC.Generics.N:M1[0]
                                               <*>_N
                                               <GHC.Generics.D>_P
                                               <'GHC.Generics.MetaData
                                                  "Qualified"
                                                  "Language.PureScript.Names"
                                                  "purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"
                                                  'GHC.Types.False>_P
                                               <GHC.Generics.M1
                                                  GHC.Generics.C
                                                  ('GHC.Generics.MetaCons
                                                     "Qualified"
                                                     'GHC.Generics.PrefixI
                                                     'GHC.Types.False)
                                                  (GHC.Generics.M1
                                                     GHC.Generics.S
                                                     ('GHC.Generics.MetaSel
                                                        'GHC.Base.Nothing
                                                        'GHC.Generics.NoSourceUnpackedness
                                                        'GHC.Generics.NoSourceStrictness
                                                        'GHC.Generics.DecidedLazy)
                                                     (GHC.Generics.K1
                                                        GHC.Generics.R
                                                        (GHC.Base.Maybe
                                                           Language.PureScript.Names.ModuleName))
                                                   GHC.Generics.:*: GHC.Generics.M1
                                                                      GHC.Generics.S
                                                                      ('GHC.Generics.MetaSel
                                                                         'GHC.Base.Nothing
                                                                         'GHC.Generics.NoSourceUnpackedness
                                                                         'GHC.Generics.NoSourceStrictness
                                                                         'GHC.Generics.DecidedLazy)
                                                                      (GHC.Generics.K1
                                                                         GHC.Generics.R
                                                                         a))>_R ; GHC.Generics.N:M1[0]
                                                                                      <*>_N
                                                                                      <GHC.Generics.C>_P
                                                                                      <'GHC.Generics.MetaCons
                                                                                         "Qualified"
                                                                                         'GHC.Generics.PrefixI
                                                                                         'GHC.Types.False>_P
                                                                                      <GHC.Generics.M1
                                                                                         GHC.Generics.S
                                                                                         ('GHC.Generics.MetaSel
                                                                                            'GHC.Base.Nothing
                                                                                            'GHC.Generics.NoSourceUnpackedness
                                                                                            'GHC.Generics.NoSourceStrictness
                                                                                            'GHC.Generics.DecidedLazy)
                                                                                         (GHC.Generics.K1
                                                                                            GHC.Generics.R
                                                                                            (GHC.Base.Maybe
                                                                                               Language.PureScript.Names.ModuleName))
                                                                                       GHC.Generics.:*: GHC.Generics.M1
                                                                                                          GHC.Generics.S
                                                                                                          ('GHC.Generics.MetaSel
                                                                                                             'GHC.Base.Nothing
                                                                                                             'GHC.Generics.NoSourceUnpackedness
                                                                                                             'GHC.Generics.NoSourceStrictness
                                                                                                             'GHC.Generics.DecidedLazy)
                                                                                                          (GHC.Generics.K1
                                                                                                             GHC.Generics.R
                                                                                                             a)>_R)) <x>_N) of wild { GHC.Generics.:*: ds1 ds2 ->
                 Language.PureScript.Names.Qualified
                   @ a
                   ds1
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           'GHC.Base.Nothing
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1
                           GHC.Generics.R
                           (GHC.Base.Maybe
                              Language.PureScript.Names.ModuleName)>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                                   <*>_N
                                                                                   <GHC.Generics.R>_P
                                                                                   <GHC.Base.Maybe
                                                                                      Language.PureScript.Names.ModuleName>_R
                                                                                   <x>_P)
                   ds2
                     `cast`
                   (GHC.Generics.N:M1[0]
                        <*>_N
                        <GHC.Generics.S>_P
                        <'GHC.Generics.MetaSel
                           'GHC.Base.Nothing
                           'GHC.Generics.NoSourceUnpackedness
                           'GHC.Generics.NoSourceStrictness
                           'GHC.Generics.DecidedLazy>_P
                        <GHC.Generics.K1 GHC.Generics.R a>_R <x>_N ; GHC.Generics.N:K1[0]
                                                                         <*>_N
                                                                         <GHC.Generics.R>_P
                                                                         <a>_R
                                                                         <x>_P) }) -}
bad3562aa6138b6192713ac281080869
  $fNFDataIdent ::
    Control.DeepSeq.NFData Language.PureScript.Names.Ident
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Language.PureScript.Names.$fNFDataIdent_$crnf
                  `cast`
                (Sym (Control.DeepSeq.N:NFData[0]
                          <Language.PureScript.Names.Ident>_N)) -}
bad3562aa6138b6192713ac281080869
  $fNFDataIdent_$crnf :: Language.PureScript.Names.Ident -> ()
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (x :: Language.PureScript.Names.Ident) ->
                 case x of wild {
                   Language.PureScript.Names.Ident g1
                   -> Data.Text.$fNFDataText_$crnf g1
                   Language.PureScript.Names.GenIdent g1 g2
                   -> case g1 of wild1 {
                        GHC.Base.Nothing -> case g2 of ds1 { DEFAULT -> GHC.Tuple.() }
                        GHC.Base.Just x1
                        -> case x1 of ds1 { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                           case g2 of ds2 { DEFAULT -> GHC.Tuple.() } } }
                   Language.PureScript.Names.UnusedIdent -> GHC.Tuple.() }) -}
1b2ddf0c04464d2fa2588925f10c1966
  $fNFDataModuleName ::
    Control.DeepSeq.NFData Language.PureScript.Names.ModuleName
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Language.PureScript.Names.$fNFDataModuleName_$crnf
                  `cast`
                (Sym (Control.DeepSeq.N:NFData[0]
                          <Language.PureScript.Names.ModuleName>_N)) -}
1b2ddf0c04464d2fa2588925f10c1966
  $fNFDataModuleName_$crnf ::
    Language.PureScript.Names.ModuleName -> ()
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ (x :: Language.PureScript.Names.ModuleName) ->
                 Language.PureScript.Names.$fNFDataModuleName_go
                   x `cast` (Language.PureScript.Names.N:ModuleName[0])) -}
ac36963f756b37527ff1085d4a4ea281
  $fNFDataModuleName_go ::
    [Language.PureScript.Names.ProperName
       'Language.PureScript.Names.Namespace]
    -> ()
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
d04047edf96c18708b7b5f72cb565394
  $fNFDataName ::
    Control.DeepSeq.NFData Language.PureScript.Names.Name
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Language.PureScript.Names.$fNFDataName_$crnf
                  `cast`
                (Sym (Control.DeepSeq.N:NFData[0]
                          <Language.PureScript.Names.Name>_N)) -}
d04047edf96c18708b7b5f72cb565394
  $fNFDataName_$crnf :: Language.PureScript.Names.Name -> ()
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (x :: Language.PureScript.Names.Name) ->
                 case x of wild {
                   Language.PureScript.Names.IdentName g1
                   -> Language.PureScript.Names.$fNFDataIdent_$crnf g1
                   Language.PureScript.Names.ValOpName g1
                   -> Data.Text.$fNFDataText_$crnf
                        g1
                          `cast`
                        (Language.PureScript.Names.N:OpName[0]
                             <'Language.PureScript.Names.ValueOpName>_P)
                   Language.PureScript.Names.TyName g1
                   -> Data.Text.$fNFDataText_$crnf
                        g1
                          `cast`
                        (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.TypeName>_P)
                   Language.PureScript.Names.TyOpName g1
                   -> Data.Text.$fNFDataText_$crnf
                        g1
                          `cast`
                        (Language.PureScript.Names.N:OpName[0]
                             <'Language.PureScript.Names.TypeOpName>_P)
                   Language.PureScript.Names.DctorName g1
                   -> Data.Text.$fNFDataText_$crnf
                        g1
                          `cast`
                        (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.ConstructorName>_P)
                   Language.PureScript.Names.TyClassName g1
                   -> Data.Text.$fNFDataText_$crnf
                        g1
                          `cast`
                        (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.ClassName>_P)
                   Language.PureScript.Names.ModName g1
                   -> Language.PureScript.Names.$fNFDataModuleName_go
                        g1 `cast` (Language.PureScript.Names.N:ModuleName[0])
                   Language.PureScript.Names.KiName g1
                   -> Data.Text.$fNFDataText_$crnf
                        g1
                          `cast`
                        (Language.PureScript.Names.N:ProperName[0]
                             <'Language.PureScript.Names.KindName>_P) }) -}
9af301165f72160425c5e0dde6525338
  $fNFDataOpName ::
    Control.DeepSeq.NFData (Language.PureScript.Names.OpName a)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*H>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                (\ @ a :: Language.PureScript.Names.OpNameType ->
                 Data.Text.$fNFDataText_$crnf)
                  `cast`
                (forall (a :: <Language.PureScript.Names.OpNameType>_N).
                 (Sym (Language.PureScript.Names.N:OpName[0] <a>_P)
                  ->_R <()>_R) ; Sym (Control.DeepSeq.N:NFData[0]
                                          <Language.PureScript.Names.OpName a>_N)) -}
a7268334e0b909381550b9329cb80fcc
  $fNFDataProperName ::
    Control.DeepSeq.NFData (Language.PureScript.Names.ProperName a)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*H>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                (\ @ a :: Language.PureScript.Names.ProperNameType ->
                 Data.Text.$fNFDataText_$crnf)
                  `cast`
                (forall (a :: <Language.PureScript.Names.ProperNameType>_N).
                 (Sym (Language.PureScript.Names.N:ProperName[0] <a>_P)
                  ->_R <()>_R) ; Sym (Control.DeepSeq.N:NFData[0]
                                          <Language.PureScript.Names.ProperName a>_N)) -}
1b2ddf0c04464d2fa2588925f10c1966
  $fNFDataQualified ::
    Control.DeepSeq.NFData a =>
    Control.DeepSeq.NFData (Language.PureScript.Names.Qualified a)
  DFunId
  {- Arity: 2, HasNoCafRefs,
     Strictness: <C(S),1*C1(U())><S(SL),1*U(1*U,U)>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (1, False, True)
                Language.PureScript.Names.$fNFDataQualified_$crnf
                  `cast`
                (forall (a :: <*>_N).
                 <Control.DeepSeq.NFData a>_R
                 ->_R Sym (Control.DeepSeq.N:NFData[0]
                               <Language.PureScript.Names.Qualified a>_N)) -}
1b2ddf0c04464d2fa2588925f10c1966
  $fNFDataQualified_$crnf ::
    Control.DeepSeq.NFData a =>
    Language.PureScript.Names.Qualified a -> ()
  {- Arity: 2, HasNoCafRefs,
     Strictness: <C(S),1*C1(U())><S(SL),1*U(1*U,U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (w :: Control.DeepSeq.NFData a)
                   (w1 :: Language.PureScript.Names.Qualified a) ->
                 case w1 of ww { Language.PureScript.Names.Qualified ww1 ww2 ->
                 Language.PureScript.Names.$w$crnf @ a w ww1 ww2 }) -}
bad3562aa6138b6192713ac281080869
  $fOrdIdent :: GHC.Classes.Ord Language.PureScript.Names.Ident
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Names.Ident
                  Language.PureScript.Names.$fEqIdent
                  Language.PureScript.Names.$fOrdIdent_$ccompare
                  Language.PureScript.Names.$fOrdIdent_$c<
                  Language.PureScript.Names.$fOrdIdent_$c<=
                  Language.PureScript.Names.$fOrdIdent_$c>
                  Language.PureScript.Names.$fOrdIdent_$c>=
                  Language.PureScript.Names.$fOrdIdent_$cmax
                  Language.PureScript.Names.$fOrdIdent_$cmin -}
bad3562aa6138b6192713ac281080869
  $fOrdIdent_$c< ::
    Language.PureScript.Names.Ident
    -> Language.PureScript.Names.Ident -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Language.PureScript.Names.Ident)
                   (b :: Language.PureScript.Names.Ident) ->
                 case a of wild {
                   Language.PureScript.Names.Ident a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.Names.Ident b1
                        -> Data.Text.$fOrdText_$c< a1 b1 }
                   Language.PureScript.Names.GenIdent a1 a2
                   -> case b of wild1 {
                        Language.PureScript.Names.Ident ds -> GHC.Types.False
                        Language.PureScript.Names.GenIdent b1 b2
                        -> case a1 of wild2 {
                             GHC.Base.Nothing
                             -> case b1 of wild3 {
                                  GHC.Base.Nothing -> GHC.Integer.Type.ltInteger a2 b2
                                  GHC.Base.Just ipv -> GHC.Types.True }
                             GHC.Base.Just a4
                             -> case b1 of wild3 {
                                  GHC.Base.Nothing -> GHC.Types.False
                                  GHC.Base.Just b4
                                  -> case a4 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                                     case b4 of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                                     case Data.Text.$w$ccompare ww1 ww2 ww3 ww5 ww6 ww7 of wild4 {
                                       GHC.Types.LT -> GHC.Types.True
                                       GHC.Types.EQ -> GHC.Integer.Type.ltInteger a2 b2
                                       GHC.Types.GT -> GHC.Types.False } } } } }
                        Language.PureScript.Names.UnusedIdent -> GHC.Types.True }
                   Language.PureScript.Names.UnusedIdent
                   -> case b of wild1 { DEFAULT -> GHC.Types.False } }) -}
bad3562aa6138b6192713ac281080869
  $fOrdIdent_$c<= ::
    Language.PureScript.Names.Ident
    -> Language.PureScript.Names.Ident -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.Names.Ident)
                   (b :: Language.PureScript.Names.Ident) ->
                 case Language.PureScript.Names.$fOrdIdent_$c< b a of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
bad3562aa6138b6192713ac281080869
  $fOrdIdent_$c> ::
    Language.PureScript.Names.Ident
    -> Language.PureScript.Names.Ident -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, True)
                (\ (a :: Language.PureScript.Names.Ident)
                   (b :: Language.PureScript.Names.Ident) ->
                 Language.PureScript.Names.$fOrdIdent_$c< b a) -}
bad3562aa6138b6192713ac281080869
  $fOrdIdent_$c>= ::
    Language.PureScript.Names.Ident
    -> Language.PureScript.Names.Ident -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Language.PureScript.Names.Ident)
                   (b :: Language.PureScript.Names.Ident) ->
                 case Language.PureScript.Names.$fOrdIdent_$c< a b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
bad3562aa6138b6192713ac281080869
  $fOrdIdent_$ccompare ::
    Language.PureScript.Names.Ident
    -> Language.PureScript.Names.Ident -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Language.PureScript.Names.Ident)
                   (b :: Language.PureScript.Names.Ident) ->
                 case a of wild {
                   Language.PureScript.Names.Ident a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.LT
                        Language.PureScript.Names.Ident b1
                        -> Data.Text.$fOrdText_$ccompare a1 b1 }
                   Language.PureScript.Names.GenIdent a1 a2
                   -> case b of wild1 {
                        Language.PureScript.Names.Ident ds -> GHC.Types.GT
                        Language.PureScript.Names.GenIdent b1 b2
                        -> case a1 of wild2 {
                             GHC.Base.Nothing
                             -> case b1 of wild3 {
                                  GHC.Base.Nothing -> GHC.Integer.Type.compareInteger a2 b2
                                  GHC.Base.Just ipv -> GHC.Types.LT }
                             GHC.Base.Just a4
                             -> case b1 of wild3 {
                                  GHC.Base.Nothing -> GHC.Types.GT
                                  GHC.Base.Just b4
                                  -> case a4 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                                     case b4 of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                                     case Data.Text.$w$ccompare ww1 ww2 ww3 ww5 ww6 ww7 of wild4 {
                                       GHC.Types.LT -> GHC.Types.LT
                                       GHC.Types.EQ -> GHC.Integer.Type.compareInteger a2 b2
                                       GHC.Types.GT -> GHC.Types.GT } } } } }
                        Language.PureScript.Names.UnusedIdent -> GHC.Types.LT }
                   Language.PureScript.Names.UnusedIdent
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Language.PureScript.Names.UnusedIdent -> GHC.Types.EQ } }) -}
bad3562aa6138b6192713ac281080869
  $fOrdIdent_$cmax ::
    Language.PureScript.Names.Ident
    -> Language.PureScript.Names.Ident
    -> Language.PureScript.Names.Ident
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Names.Ident)
                   (y :: Language.PureScript.Names.Ident) ->
                 case Language.PureScript.Names.$fOrdIdent_$c< y x of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
bad3562aa6138b6192713ac281080869
  $fOrdIdent_$cmin ::
    Language.PureScript.Names.Ident
    -> Language.PureScript.Names.Ident
    -> Language.PureScript.Names.Ident
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Names.Ident)
                   (y :: Language.PureScript.Names.Ident) ->
                 case Language.PureScript.Names.$fOrdIdent_$c< y x of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
1b2ddf0c04464d2fa2588925f10c1966
  $fOrdModuleName ::
    GHC.Classes.Ord Language.PureScript.Names.ModuleName
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Names.ModuleName
                  Language.PureScript.Names.$fEqModuleName
                  Language.PureScript.Names.$fOrdModuleName7
                    `cast`
                  (Sym (Language.PureScript.Names.N:ModuleName[0])
                   ->_R Sym (Language.PureScript.Names.N:ModuleName[0])
                   ->_R <GHC.Types.Ordering>_R)
                  Language.PureScript.Names.$fOrdModuleName6
                    `cast`
                  (Sym (Language.PureScript.Names.N:ModuleName[0])
                   ->_R Sym (Language.PureScript.Names.N:ModuleName[0])
                   ->_R <GHC.Types.Bool>_R)
                  Language.PureScript.Names.$fOrdModuleName5
                    `cast`
                  (Sym (Language.PureScript.Names.N:ModuleName[0])
                   ->_R Sym (Language.PureScript.Names.N:ModuleName[0])
                   ->_R <GHC.Types.Bool>_R)
                  Language.PureScript.Names.$fOrdModuleName4
                    `cast`
                  (Sym (Language.PureScript.Names.N:ModuleName[0])
                   ->_R Sym (Language.PureScript.Names.N:ModuleName[0])
                   ->_R <GHC.Types.Bool>_R)
                  Language.PureScript.Names.$fOrdModuleName3
                    `cast`
                  (Sym (Language.PureScript.Names.N:ModuleName[0])
                   ->_R Sym (Language.PureScript.Names.N:ModuleName[0])
                   ->_R <GHC.Types.Bool>_R)
                  Language.PureScript.Names.$fOrdModuleName2
                    `cast`
                  (Sym (Language.PureScript.Names.N:ModuleName[0])
                   ->_R Sym (Language.PureScript.Names.N:ModuleName[0])
                   ->_R Sym (Language.PureScript.Names.N:ModuleName[0]))
                  Language.PureScript.Names.$fOrdModuleName1
                    `cast`
                  (Sym (Language.PureScript.Names.N:ModuleName[0])
                   ->_R Sym (Language.PureScript.Names.N:ModuleName[0])
                   ->_R Sym (Language.PureScript.Names.N:ModuleName[0])) -}
9be800ec643ab52018d848f2d8a38ed6
  $fOrdModuleName1 ::
    [Language.PureScript.Names.ProperName
       'Language.PureScript.Names.Namespace]
    -> [Language.PureScript.Names.ProperName
          'Language.PureScript.Names.Namespace]
    -> [Language.PureScript.Names.ProperName
          'Language.PureScript.Names.Namespace]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [Language.PureScript.Names.ProperName
                            'Language.PureScript.Names.Namespace])
                   (y :: [Language.PureScript.Names.ProperName
                            'Language.PureScript.Names.Namespace]) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.Namespace)
                        (Language.PureScript.Names.$fOrdProperName
                           @ 'Language.PureScript.Names.Namespace)
                        x
                        y of wild {
                   DEFAULT -> x GHC.Types.GT -> y }) -}
6860bfe683cc1b4df5f622d22227c365
  $fOrdModuleName2 ::
    [Language.PureScript.Names.ProperName
       'Language.PureScript.Names.Namespace]
    -> [Language.PureScript.Names.ProperName
          'Language.PureScript.Names.Namespace]
    -> [Language.PureScript.Names.ProperName
          'Language.PureScript.Names.Namespace]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [Language.PureScript.Names.ProperName
                            'Language.PureScript.Names.Namespace])
                   (y :: [Language.PureScript.Names.ProperName
                            'Language.PureScript.Names.Namespace]) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.Namespace)
                        (Language.PureScript.Names.$fOrdProperName
                           @ 'Language.PureScript.Names.Namespace)
                        x
                        y of wild {
                   DEFAULT -> y GHC.Types.GT -> x }) -}
849e4be75db70160241fc3d5580ef3d1
  $fOrdModuleName3 ::
    [Language.PureScript.Names.ProperName
       'Language.PureScript.Names.Namespace]
    -> [Language.PureScript.Names.ProperName
          'Language.PureScript.Names.Namespace]
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [Language.PureScript.Names.ProperName
                            'Language.PureScript.Names.Namespace])
                   (y :: [Language.PureScript.Names.ProperName
                            'Language.PureScript.Names.Namespace]) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.Namespace)
                        (Language.PureScript.Names.$fOrdProperName
                           @ 'Language.PureScript.Names.Namespace)
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }) -}
abca9e6c8db43d00d0815c093b8bc0e3
  $fOrdModuleName4 ::
    [Language.PureScript.Names.ProperName
       'Language.PureScript.Names.Namespace]
    -> [Language.PureScript.Names.ProperName
          'Language.PureScript.Names.Namespace]
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [Language.PureScript.Names.ProperName
                            'Language.PureScript.Names.Namespace])
                   (y :: [Language.PureScript.Names.ProperName
                            'Language.PureScript.Names.Namespace]) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.Namespace)
                        (Language.PureScript.Names.$fOrdProperName
                           @ 'Language.PureScript.Names.Namespace)
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True }) -}
b441e1f73b45903a27b365134d16b791
  $fOrdModuleName5 ::
    [Language.PureScript.Names.ProperName
       'Language.PureScript.Names.Namespace]
    -> [Language.PureScript.Names.ProperName
          'Language.PureScript.Names.Namespace]
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [Language.PureScript.Names.ProperName
                            'Language.PureScript.Names.Namespace])
                   (y :: [Language.PureScript.Names.ProperName
                            'Language.PureScript.Names.Namespace]) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.Namespace)
                        (Language.PureScript.Names.$fOrdProperName
                           @ 'Language.PureScript.Names.Namespace)
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False }) -}
514667d0d42a734c8b16e5af9950ea3c
  $fOrdModuleName6 ::
    [Language.PureScript.Names.ProperName
       'Language.PureScript.Names.Namespace]
    -> [Language.PureScript.Names.ProperName
          'Language.PureScript.Names.Namespace]
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: [Language.PureScript.Names.ProperName
                            'Language.PureScript.Names.Namespace])
                   (y :: [Language.PureScript.Names.ProperName
                            'Language.PureScript.Names.Namespace]) ->
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.Namespace)
                        (Language.PureScript.Names.$fOrdProperName
                           @ 'Language.PureScript.Names.Namespace)
                        x
                        y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True }) -}
143978fc24b1455307fb07f653d73126
  $fOrdModuleName7 ::
    [Language.PureScript.Names.ProperName
       'Language.PureScript.Names.Namespace]
    -> [Language.PureScript.Names.ProperName
          'Language.PureScript.Names.Namespace]
    -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Unfolding: (GHC.Classes.$fOrd[]_$ccompare
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.Namespace)
                   (Language.PureScript.Names.$fOrdProperName
                      @ 'Language.PureScript.Names.Namespace)) -}
d04047edf96c18708b7b5f72cb565394
  $fOrdName :: GHC.Classes.Ord Language.PureScript.Names.Name
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Names.Name
                  Language.PureScript.Names.$fEqName
                  Language.PureScript.Names.$fOrdName_$ccompare
                  Language.PureScript.Names.$fOrdName_$c<
                  Language.PureScript.Names.$fOrdName_$c<=
                  Language.PureScript.Names.$fOrdName_$c>
                  Language.PureScript.Names.$fOrdName_$c>=
                  Language.PureScript.Names.$fOrdName_$cmax
                  Language.PureScript.Names.$fOrdName_$cmin -}
d04047edf96c18708b7b5f72cb565394
  $fOrdName_$c< ::
    Language.PureScript.Names.Name
    -> Language.PureScript.Names.Name -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Names.Name)
                   (y :: Language.PureScript.Names.Name) ->
                 case Language.PureScript.Names.$fOrdName_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True }) -}
d04047edf96c18708b7b5f72cb565394
  $fOrdName_$c<= ::
    Language.PureScript.Names.Name
    -> Language.PureScript.Names.Name -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Names.Name)
                   (y :: Language.PureScript.Names.Name) ->
                 case Language.PureScript.Names.$fOrdName_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False }) -}
d04047edf96c18708b7b5f72cb565394
  $fOrdName_$c> ::
    Language.PureScript.Names.Name
    -> Language.PureScript.Names.Name -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Names.Name)
                   (y :: Language.PureScript.Names.Name) ->
                 case Language.PureScript.Names.$fOrdName_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True }) -}
d04047edf96c18708b7b5f72cb565394
  $fOrdName_$c>= ::
    Language.PureScript.Names.Name
    -> Language.PureScript.Names.Name -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Names.Name)
                   (y :: Language.PureScript.Names.Name) ->
                 case Language.PureScript.Names.$fOrdName_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }) -}
d04047edf96c18708b7b5f72cb565394
  $fOrdName_$ccompare ::
    Language.PureScript.Names.Name
    -> Language.PureScript.Names.Name -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Language.PureScript.Names.Name)
                   (b :: Language.PureScript.Names.Name) ->
                 case a of wild {
                   Language.PureScript.Names.IdentName a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.LT
                        Language.PureScript.Names.IdentName b1
                        -> Language.PureScript.Names.$fOrdIdent_$ccompare a1 b1 }
                   Language.PureScript.Names.ValOpName a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.LT
                        Language.PureScript.Names.IdentName ds -> GHC.Types.GT
                        Language.PureScript.Names.ValOpName b1
                        -> Data.Text.$fOrdText_$ccompare
                             a1
                               `cast`
                             (Language.PureScript.Names.N:OpName[0]
                                  <'Language.PureScript.Names.ValueOpName>_P)
                             b1
                               `cast`
                             (Language.PureScript.Names.N:OpName[0]
                                  <'Language.PureScript.Names.ValueOpName>_P) }
                   Language.PureScript.Names.TyName a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Language.PureScript.Names.TyName ds
                        -> Data.Text.$fOrdText_$ccompare
                             a1
                               `cast`
                             (Language.PureScript.Names.N:ProperName[0]
                                  <'Language.PureScript.Names.TypeName>_P)
                             ds
                               `cast`
                             (Language.PureScript.Names.N:ProperName[0]
                                  <'Language.PureScript.Names.TypeName>_P)
                        Language.PureScript.Names.TyOpName ds -> GHC.Types.LT
                        Language.PureScript.Names.DctorName ds -> GHC.Types.LT
                        Language.PureScript.Names.TyClassName ds -> GHC.Types.LT
                        Language.PureScript.Names.ModName ds -> GHC.Types.LT
                        Language.PureScript.Names.KiName ds -> GHC.Types.LT }
                   Language.PureScript.Names.TyOpName a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Language.PureScript.Names.TyOpName ds
                        -> Data.Text.$fOrdText_$ccompare
                             a1
                               `cast`
                             (Language.PureScript.Names.N:OpName[0]
                                  <'Language.PureScript.Names.TypeOpName>_P)
                             ds
                               `cast`
                             (Language.PureScript.Names.N:OpName[0]
                                  <'Language.PureScript.Names.TypeOpName>_P)
                        Language.PureScript.Names.DctorName ds -> GHC.Types.LT
                        Language.PureScript.Names.TyClassName ds -> GHC.Types.LT
                        Language.PureScript.Names.ModName ds -> GHC.Types.LT
                        Language.PureScript.Names.KiName ds -> GHC.Types.LT }
                   Language.PureScript.Names.DctorName a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Language.PureScript.Names.DctorName ds
                        -> Data.Text.$fOrdText_$ccompare
                             a1
                               `cast`
                             (Language.PureScript.Names.N:ProperName[0]
                                  <'Language.PureScript.Names.ConstructorName>_P)
                             ds
                               `cast`
                             (Language.PureScript.Names.N:ProperName[0]
                                  <'Language.PureScript.Names.ConstructorName>_P)
                        Language.PureScript.Names.TyClassName ds -> GHC.Types.LT
                        Language.PureScript.Names.ModName ds -> GHC.Types.LT
                        Language.PureScript.Names.KiName ds -> GHC.Types.LT }
                   Language.PureScript.Names.TyClassName a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Language.PureScript.Names.TyClassName ds
                        -> Data.Text.$fOrdText_$ccompare
                             a1
                               `cast`
                             (Language.PureScript.Names.N:ProperName[0]
                                  <'Language.PureScript.Names.ClassName>_P)
                             ds
                               `cast`
                             (Language.PureScript.Names.N:ProperName[0]
                                  <'Language.PureScript.Names.ClassName>_P)
                        Language.PureScript.Names.ModName ds -> GHC.Types.LT
                        Language.PureScript.Names.KiName ds -> GHC.Types.LT }
                   Language.PureScript.Names.ModName a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Language.PureScript.Names.ModName b1
                        -> GHC.Classes.$fOrd[]_$ccompare
                             @ (Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.Namespace)
                             (Language.PureScript.Names.$fOrdProperName
                                @ 'Language.PureScript.Names.Namespace)
                             a1 `cast` (Language.PureScript.Names.N:ModuleName[0])
                             b1 `cast` (Language.PureScript.Names.N:ModuleName[0])
                        Language.PureScript.Names.KiName ds -> GHC.Types.LT }
                   Language.PureScript.Names.KiName a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Language.PureScript.Names.KiName b1
                        -> Data.Text.$fOrdText_$ccompare
                             a1
                               `cast`
                             (Language.PureScript.Names.N:ProperName[0]
                                  <'Language.PureScript.Names.KindName>_P)
                             b1
                               `cast`
                             (Language.PureScript.Names.N:ProperName[0]
                                  <'Language.PureScript.Names.KindName>_P) } }) -}
d04047edf96c18708b7b5f72cb565394
  $fOrdName_$cmax ::
    Language.PureScript.Names.Name
    -> Language.PureScript.Names.Name -> Language.PureScript.Names.Name
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Names.Name)
                   (y :: Language.PureScript.Names.Name) ->
                 case Language.PureScript.Names.$fOrdName_$ccompare x y of wild {
                   DEFAULT -> y GHC.Types.GT -> x }) -}
d04047edf96c18708b7b5f72cb565394
  $fOrdName_$cmin ::
    Language.PureScript.Names.Name
    -> Language.PureScript.Names.Name -> Language.PureScript.Names.Name
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Names.Name)
                   (y :: Language.PureScript.Names.Name) ->
                 case Language.PureScript.Names.$fOrdName_$ccompare x y of wild {
                   DEFAULT -> x GHC.Types.GT -> y }) -}
9af301165f72160425c5e0dde6525338
  $fOrdOpName :: GHC.Classes.Ord (Language.PureScript.Names.OpName a)
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ a :: Language.PureScript.Names.OpNameType.
                  @ (Language.PureScript.Names.OpName a)
                  (Language.PureScript.Names.$fEqOpName @ a)
                  Data.Text.$fOrdText_$ccompare
                    `cast`
                  (Sym (Language.PureScript.Names.N:OpName[0] <a>_P)
                   ->_R Sym (Language.PureScript.Names.N:OpName[0] <a>_P)
                   ->_R <GHC.Types.Ordering>_R)
                  Data.Text.$fOrdText_$c<
                    `cast`
                  (Sym (Language.PureScript.Names.N:OpName[0] <a>_P)
                   ->_R Sym (Language.PureScript.Names.N:OpName[0] <a>_P)
                   ->_R <GHC.Types.Bool>_R)
                  Data.Text.$fOrdText_$c<=
                    `cast`
                  (Sym (Language.PureScript.Names.N:OpName[0] <a>_P)
                   ->_R Sym (Language.PureScript.Names.N:OpName[0] <a>_P)
                   ->_R <GHC.Types.Bool>_R)
                  Data.Text.$fOrdText_$c>
                    `cast`
                  (Sym (Language.PureScript.Names.N:OpName[0] <a>_P)
                   ->_R Sym (Language.PureScript.Names.N:OpName[0] <a>_P)
                   ->_R <GHC.Types.Bool>_R)
                  Data.Text.$fOrdText_$c>=
                    `cast`
                  (Sym (Language.PureScript.Names.N:OpName[0] <a>_P)
                   ->_R Sym (Language.PureScript.Names.N:OpName[0] <a>_P)
                   ->_R <GHC.Types.Bool>_R)
                  Data.Text.$fOrdText_$cmax
                    `cast`
                  (Sym (Language.PureScript.Names.N:OpName[0] <a>_P)
                   ->_R Sym (Language.PureScript.Names.N:OpName[0] <a>_P)
                   ->_R Sym (Language.PureScript.Names.N:OpName[0] <a>_P))
                  Data.Text.$fOrdText_$cmin
                    `cast`
                  (Sym (Language.PureScript.Names.N:OpName[0] <a>_P)
                   ->_R Sym (Language.PureScript.Names.N:OpName[0] <a>_P)
                   ->_R Sym (Language.PureScript.Names.N:OpName[0] <a>_P)) -}
a7268334e0b909381550b9329cb80fcc
  $fOrdProperName ::
    GHC.Classes.Ord (Language.PureScript.Names.ProperName a)
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ a :: Language.PureScript.Names.ProperNameType.
                  @ (Language.PureScript.Names.ProperName a)
                  (Language.PureScript.Names.$fEqProperName @ a)
                  Data.Text.$fOrdText_$ccompare
                    `cast`
                  (Sym (Language.PureScript.Names.N:ProperName[0] <a>_P)
                   ->_R Sym (Language.PureScript.Names.N:ProperName[0] <a>_P)
                   ->_R <GHC.Types.Ordering>_R)
                  Data.Text.$fOrdText_$c<
                    `cast`
                  (Sym (Language.PureScript.Names.N:ProperName[0] <a>_P)
                   ->_R Sym (Language.PureScript.Names.N:ProperName[0] <a>_P)
                   ->_R <GHC.Types.Bool>_R)
                  Data.Text.$fOrdText_$c<=
                    `cast`
                  (Sym (Language.PureScript.Names.N:ProperName[0] <a>_P)
                   ->_R Sym (Language.PureScript.Names.N:ProperName[0] <a>_P)
                   ->_R <GHC.Types.Bool>_R)
                  Data.Text.$fOrdText_$c>
                    `cast`
                  (Sym (Language.PureScript.Names.N:ProperName[0] <a>_P)
                   ->_R Sym (Language.PureScript.Names.N:ProperName[0] <a>_P)
                   ->_R <GHC.Types.Bool>_R)
                  Data.Text.$fOrdText_$c>=
                    `cast`
                  (Sym (Language.PureScript.Names.N:ProperName[0] <a>_P)
                   ->_R Sym (Language.PureScript.Names.N:ProperName[0] <a>_P)
                   ->_R <GHC.Types.Bool>_R)
                  Data.Text.$fOrdText_$cmax
                    `cast`
                  (Sym (Language.PureScript.Names.N:ProperName[0] <a>_P)
                   ->_R Sym (Language.PureScript.Names.N:ProperName[0] <a>_P)
                   ->_R Sym (Language.PureScript.Names.N:ProperName[0] <a>_P))
                  Data.Text.$fOrdText_$cmin
                    `cast`
                  (Sym (Language.PureScript.Names.N:ProperName[0] <a>_P)
                   ->_R Sym (Language.PureScript.Names.N:ProperName[0] <a>_P)
                   ->_R Sym (Language.PureScript.Names.N:ProperName[0] <a>_P)) -}
1b2ddf0c04464d2fa2588925f10c1966
  $fOrdQualified ::
    GHC.Classes.Ord a =>
    GHC.Classes.Ord (Language.PureScript.Names.Qualified a)
  DFunId
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(1*U(C(C1(U)),A),C(C1(U)),C(C1(U)),A,A,A,A,A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Classes.Ord a).
                  @ (Language.PureScript.Names.Qualified a)
                  (Language.PureScript.Names.$fOrdQualified_$cp1Ord @ a v)
                  (Language.PureScript.Names.$fOrdQualified_$ccompare @ a v)
                  (Language.PureScript.Names.$fOrdQualified_$c< @ a v)
                  (Language.PureScript.Names.$fOrdQualified_$c<= @ a v)
                  (\ (a1 :: Language.PureScript.Names.Qualified a)
                     (b :: Language.PureScript.Names.Qualified a) ->
                   Language.PureScript.Names.$fOrdQualified_$c< @ a v b a1)
                  (Language.PureScript.Names.$fOrdQualified_$c>= @ a v)
                  (Language.PureScript.Names.$fOrdQualified_$cmax @ a v)
                  (Language.PureScript.Names.$fOrdQualified_$cmin @ a v) -}
1b2ddf0c04464d2fa2588925f10c1966
  $fOrdQualified_$c< ::
    GHC.Classes.Ord a =>
    Language.PureScript.Names.Qualified a
    -> Language.PureScript.Names.Qualified a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,A,1*C1(C1(U)),A,A,A,A,A)><S(SL),1*U(1*U,U)><S(SL),1*U(1*U,U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: GHC.Classes.Ord a)
                   (w1 :: Language.PureScript.Names.Qualified a)
                   (w2 :: Language.PureScript.Names.Qualified a) ->
                 case w1 of ww { Language.PureScript.Names.Qualified ww1 ww2 ->
                 case w2 of ww3 { Language.PureScript.Names.Qualified ww4 ww5 ->
                 Language.PureScript.Names.$w$c< @ a w ww1 ww2 ww4 ww5 } }) -}
1b2ddf0c04464d2fa2588925f10c1966
  $fOrdQualified_$c<= ::
    GHC.Classes.Ord a =>
    Language.PureScript.Names.Qualified a
    -> Language.PureScript.Names.Qualified a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,A,1*C1(C1(U)),A,A,A,A,A)><S(SL),1*U(1*U,U)><S(SL),1*U(1*U,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dOrd :: GHC.Classes.Ord a)
                   (a1 :: Language.PureScript.Names.Qualified a)
                   (b :: Language.PureScript.Names.Qualified a) ->
                 case Language.PureScript.Names.$fOrdQualified_$c<
                        @ a
                        $dOrd
                        b
                        a1 of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
1b2ddf0c04464d2fa2588925f10c1966
  $fOrdQualified_$c>= ::
    GHC.Classes.Ord a =>
    Language.PureScript.Names.Qualified a
    -> Language.PureScript.Names.Qualified a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,A,1*C1(C1(U)),A,A,A,A,A)><S(SL),1*U(1*U,U)><S(SL),1*U(1*U,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dOrd :: GHC.Classes.Ord a)
                   (a1 :: Language.PureScript.Names.Qualified a)
                   (b :: Language.PureScript.Names.Qualified a) ->
                 case Language.PureScript.Names.$fOrdQualified_$c<
                        @ a
                        $dOrd
                        a1
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
1b2ddf0c04464d2fa2588925f10c1966
  $fOrdQualified_$ccompare ::
    GHC.Classes.Ord a =>
    Language.PureScript.Names.Qualified a
    -> Language.PureScript.Names.Qualified a -> GHC.Types.Ordering
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(C1(U)),A,A,A,A,A,A)><S(SL),1*U(1*U,U)><S(SL),1*U(1*U,U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: GHC.Classes.Ord a)
                   (w1 :: Language.PureScript.Names.Qualified a)
                   (w2 :: Language.PureScript.Names.Qualified a) ->
                 case w1 of ww { Language.PureScript.Names.Qualified ww1 ww2 ->
                 case w2 of ww3 { Language.PureScript.Names.Qualified ww4 ww5 ->
                 Language.PureScript.Names.$w$ccompare @ a w ww1 ww2 ww4 ww5 } }) -}
1b2ddf0c04464d2fa2588925f10c1966
  $fOrdQualified_$cmax ::
    GHC.Classes.Ord a =>
    Language.PureScript.Names.Qualified a
    -> Language.PureScript.Names.Qualified a
    -> Language.PureScript.Names.Qualified a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,A,1*C1(C1(U)),A,A,A,A,A)><S(SL),1*U(U,U)><S(SL),1*U(U,U)>m,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dOrd :: GHC.Classes.Ord a)
                   (x :: Language.PureScript.Names.Qualified a)
                   (y :: Language.PureScript.Names.Qualified a) ->
                 case Language.PureScript.Names.$fOrdQualified_$c<
                        @ a
                        $dOrd
                        y
                        x of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
1b2ddf0c04464d2fa2588925f10c1966
  $fOrdQualified_$cmin ::
    GHC.Classes.Ord a =>
    Language.PureScript.Names.Qualified a
    -> Language.PureScript.Names.Qualified a
    -> Language.PureScript.Names.Qualified a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,A,1*C1(C1(U)),A,A,A,A,A)><S(SL),1*U(U,U)><S(SL),1*U(U,U)>m,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dOrd :: GHC.Classes.Ord a)
                   (x :: Language.PureScript.Names.Qualified a)
                   (y :: Language.PureScript.Names.Qualified a) ->
                 case Language.PureScript.Names.$fOrdQualified_$c<
                        @ a
                        $dOrd
                        y
                        x of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
1b2ddf0c04464d2fa2588925f10c1966
  $fOrdQualified_$cp1Ord ::
    GHC.Classes.Ord a =>
    GHC.Classes.Eq (Language.PureScript.Names.Qualified a)
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,1*U(1*U(C(C1(U)),A),A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ a ($dOrd :: GHC.Classes.Ord a) ->
                 Language.PureScript.Names.$fEqQualified
                   @ a
                   (GHC.Classes.$p1Ord @ a $dOrd)) -}
bad3562aa6138b6192713ac281080869
  $fShowIdent :: GHC.Show.Show Language.PureScript.Names.Ident
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Names.Ident
                  Language.PureScript.Names.$fShowIdent_$cshowsPrec
                  Language.PureScript.Names.$fShowIdent_$cshow
                  Language.PureScript.Names.$fShowIdent_$cshowList -}
bad3562aa6138b6192713ac281080869
  $fShowIdent1 :: Language.PureScript.Names.Ident -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (Language.PureScript.Names.$fShowIdent_$cshowsPrec
                   Language.PureScript.Names.$fShowIdent2) -}
74ffa5aff4f04e05782d68a9019c9624
  $fShowIdent2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
3b164fce72d5b7d5f20897f98b40a304
  $fShowIdent3 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.PureScript.Names.$fShowIdent4) -}
8c3c7cd1b504e659cdb7ce1f7c37d4ad
  $fShowIdent4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Names.$fShowIdent5) -}
0ff928621acffb22f92eb4728eaca37c
  $fShowIdent5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("UnusedIdent"#) -}
a0c0d6c32211ac3a79e6a77bd6e0d64f
  $fShowIdent6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("GenIdent "#) -}
d78cc63f0f83341c2b461aa880f2eb25
  $fShowIdent7 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11#) -}
269082a38cef2a63c99bf24f5e34aa4a
  $fShowIdent8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Ident "#) -}
bad3562aa6138b6192713ac281080869
  $fShowIdent_$cshow ::
    Language.PureScript.Names.Ident -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: Language.PureScript.Names.Ident) ->
                 case x of wild {
                   Language.PureScript.Names.Ident b1
                   -> GHC.CString.unpackAppendCString#
                        Language.PureScript.Names.$fShowIdent8
                        (case Data.Text.Show.$w$cshowsPrec
                                b1
                                (GHC.Types.[] @ GHC.Types.Char) of ww { (#,#) ww1 ww2 ->
                         GHC.Types.: @ GHC.Types.Char ww1 ww2 })
                   Language.PureScript.Names.GenIdent b1 b2
                   -> GHC.CString.unpackAppendCString#
                        Language.PureScript.Names.$fShowIdent6
                        (case b1 of wild1 {
                           GHC.Base.Nothing
                           -> GHC.Base.++
                                @ GHC.Types.Char
                                GHC.Show.$fShowMaybe4
                                (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.showSpace1
                                   (case GHC.Show.$w$cshowsPrec4
                                           11#
                                           b2
                                           (GHC.Types.[] @ GHC.Types.Char) of ww2 { (#,#) ww3 ww4 ->
                                    GHC.Types.: @ GHC.Types.Char ww3 ww4 }))
                           GHC.Base.Just b4
                           -> GHC.Types.:
                                @ GHC.Types.Char
                                GHC.Show.$fShow(,)4
                                (GHC.Base.++
                                   @ GHC.Types.Char
                                   GHC.Show.$fShowMaybe1
                                   (case Data.Text.Show.$w$cshowsPrec
                                           b4
                                           (GHC.Types.:
                                              @ GHC.Types.Char
                                              GHC.Show.$fShow(,)2
                                              (GHC.Types.:
                                                 @ GHC.Types.Char
                                                 GHC.Show.showSpace1
                                                 (case GHC.Show.$w$cshowsPrec4
                                                         11#
                                                         b2
                                                         (GHC.Types.[]
                                                            @ GHC.Types.Char) of ww2 { (#,#) ww3 ww4 ->
                                                  GHC.Types.:
                                                    @ GHC.Types.Char
                                                    ww3
                                                    ww4 }))) of ww { (#,#) ww1 ww2 ->
                                    GHC.Types.: @ GHC.Types.Char ww1 ww2 })) })
                   Language.PureScript.Names.UnusedIdent
                   -> Language.PureScript.Names.$fShowIdent4 }) -}
bad3562aa6138b6192713ac281080869
  $fShowIdent_$cshowList ::
    [Language.PureScript.Names.Ident] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Names.Ident])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Names.Ident
                   Language.PureScript.Names.$fShowIdent1
                   ls
                   s) -}
bad3562aa6138b6192713ac281080869
  $fShowIdent_$cshowsPrec ::
    GHC.Types.Int -> Language.PureScript.Names.Ident -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,1*U(U)><S,1*U>,
     Unfolding: (\ (a :: GHC.Types.Int)
                   (ds :: Language.PureScript.Names.Ident) ->
                 case ds of wild {
                   Language.PureScript.Names.Ident b1
                   -> case a of wild1 { GHC.Types.I# x ->
                      case GHC.Prim.>=# x 11# of lwild {
                        DEFAULT
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.CString.unpackAppendCString#
                             Language.PureScript.Names.$fShowIdent8
                             (case Data.Text.Show.$w$cshowsPrec b1 x1 of ww { (#,#) ww1 ww2 ->
                              GHC.Types.: @ GHC.Types.Char ww1 ww2 })
                        1#
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.CString.unpackAppendCString#
                                Language.PureScript.Names.$fShowIdent8
                                (case Data.Text.Show.$w$cshowsPrec
                                        b1
                                        (GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.$fShow(,)2
                                           x1) of ww { (#,#) ww1 ww2 ->
                                 GHC.Types.: @ GHC.Types.Char ww1 ww2 })) } }
                   Language.PureScript.Names.GenIdent b1 b2
                   -> case a of wild1 { GHC.Types.I# x ->
                      let {
                        f :: GHC.Base.String -> GHC.Base.String
                        = GHC.Show.$fShowMaybe_$cshowsPrec
                            @ Data.Text.Internal.Text
                            Data.Text.Show.$fShowText
                            Language.PureScript.Names.$fShowIdent7
                            b1
                      } in
                      case GHC.Prim.>=# x 11# of lwild {
                        DEFAULT
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.CString.unpackAppendCString#
                             Language.PureScript.Names.$fShowIdent6
                             (f (GHC.Types.:
                                   @ GHC.Types.Char
                                   GHC.Show.showSpace1
                                   (case GHC.Show.$w$cshowsPrec4 11# b2 x1 of ww2 { (#,#) ww3 ww4 ->
                                    GHC.Types.: @ GHC.Types.Char ww3 ww4 })))
                        1#
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.CString.unpackAppendCString#
                                Language.PureScript.Names.$fShowIdent6
                                (f (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.showSpace1
                                      (case GHC.Show.$w$cshowsPrec4
                                              11#
                                              b2
                                              (GHC.Types.:
                                                 @ GHC.Types.Char
                                                 GHC.Show.$fShow(,)2
                                                 x1) of ww2 { (#,#) ww3 ww4 ->
                                       GHC.Types.: @ GHC.Types.Char ww3 ww4 })))) } }
                   Language.PureScript.Names.UnusedIdent
                   -> Language.PureScript.Names.$fShowIdent3 }) -}
1b2ddf0c04464d2fa2588925f10c1966
  $fShowModuleName ::
    GHC.Show.Show Language.PureScript.Names.ModuleName
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Names.ModuleName
                  Language.PureScript.Names.$fShowModuleName_$cshowsPrec
                  Language.PureScript.Names.$fShowModuleName_$cshow
                  Language.PureScript.Names.$fShowModuleName_$cshowList -}
1b2ddf0c04464d2fa2588925f10c1966
  $fShowModuleName1 ::
    Language.PureScript.Names.ModuleName -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,1*U><L,U>,
     Unfolding: (\ (w :: Language.PureScript.Names.ModuleName)
                   (w1 :: GHC.Base.String) ->
                 Language.PureScript.Names.$w$cshowsPrec 0# w w1) -}
352d88483337252edca45275492f7195
  $fShowModuleName2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("}"#) -}
c79d38cd41fb6a5f563ba9ac079e3e86
  $fShowModuleName3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("runProperName = "#) -}
4d343933b1393499cb3d87251a7a3ff9
  $fShowModuleName4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ProperName {"#) -}
c5911806296fd4515b73dfc0caaaf197
  $fShowModuleName5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ModuleName "#) -}
1b2ddf0c04464d2fa2588925f10c1966
  $fShowModuleName_$cshow ::
    Language.PureScript.Names.ModuleName -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Names.ModuleName) ->
                 Language.PureScript.Names.$fShowModuleName_$cshowsPrec
                   Language.PureScript.Names.$fShowIdent2
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
1b2ddf0c04464d2fa2588925f10c1966
  $fShowModuleName_$cshowList ::
    [Language.PureScript.Names.ModuleName] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Names.ModuleName])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Names.ModuleName
                   Language.PureScript.Names.$fShowModuleName1
                   ls
                   s) -}
1b2ddf0c04464d2fa2588925f10c1966
  $fShowModuleName_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Names.ModuleName -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><L,1*U><L,U>, Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Names.ModuleName)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Language.PureScript.Names.$w$cshowsPrec ww1 w1 w2 }) -}
d04047edf96c18708b7b5f72cb565394
  $fShowName :: GHC.Show.Show Language.PureScript.Names.Name
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Names.Name
                  Language.PureScript.Names.$fShowName_$cshowsPrec
                  Language.PureScript.Names.$fShowName_$cshow
                  Language.PureScript.Names.$fShowName_$cshowList -}
d04047edf96c18708b7b5f72cb565394
  $fShowName1 :: Language.PureScript.Names.Name -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (w :: Language.PureScript.Names.Name) ->
                 Language.PureScript.Names.$w$cshowsPrec1 0# w) -}
cc485445fa513da5b4a9c5d7c10c0e55
  $fShowName10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Names.$fShowName11) -}
b8f6a4e71d39bb4894e7496f8d7b7870
  $fShowName11 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("TyOpName "#) -}
3c067a1161975baa8673c9ddbe3131d3
  $fShowName12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Names.$fShowName13) -}
b0513544c7517e0f2d98d3e03a0d91fa
  $fShowName13 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("TyName "#) -}
6c653471369e04a02abd88f390a4363c
  $fShowName14 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("runOpName = "#) -}
f8b70e8e1d9f460e08d9ba26140eb93c
  $fShowName15 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("OpName {"#) -}
15649c2611e8d06b9dec125d9cb74ca6
  $fShowName16 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Names.$fShowName17) -}
40ae247fed0547c87a2b0c5b1447b4f7
  $fShowName17 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ValOpName "#) -}
b2ce5481f615fc5b8cf36910187b4c3f
  $fShowName18 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Names.$fShowName19) -}
2f7465587b9715ccb08ff973ffb8965a
  $fShowName19 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IdentName "#) -}
670bf0469ca7f96570071897c9822d08
  $fShowName2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Names.$fShowName3) -}
ea3a90e1c10fd3c2ec1bceb086d437c3
  $fShowName3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("KiName "#) -}
874e40315db4fe804ba2162f0b4d5895
  $fShowName4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Names.$fShowName5) -}
9ebb9355498505f56cc7130d29610fb5
  $fShowName5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ModName "#) -}
ea151ad307b70e0169f0d88b9ffde524
  $fShowName6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Names.$fShowName7) -}
fed9fb71ca6ebd5393aeb971d5a20310
  $fShowName7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("TyClassName "#) -}
c6558752323d71a5cc9698bdad023538
  $fShowName8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Names.$fShowName9) -}
f2515273fce361263d7657e35460dd0f
  $fShowName9 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("DctorName "#) -}
d04047edf96c18708b7b5f72cb565394
  $fShowName_$cshow ::
    Language.PureScript.Names.Name -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U> -}
d04047edf96c18708b7b5f72cb565394
  $fShowName_$cshowList ::
    [Language.PureScript.Names.Name] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Names.Name])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Names.Name
                   Language.PureScript.Names.$fShowName1
                   ls
                   s) -}
d04047edf96c18708b7b5f72cb565394
  $fShowName_$cshowsPrec ::
    GHC.Types.Int -> Language.PureScript.Names.Name -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Language.PureScript.Names.Name) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Language.PureScript.Names.$w$cshowsPrec1 ww1 w1 }) -}
9af301165f72160425c5e0dde6525338
  $fShowOpName :: GHC.Show.Show (Language.PureScript.Names.OpName a)
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ a :: Language.PureScript.Names.OpNameType.
                  @ (Language.PureScript.Names.OpName a)
                  (Language.PureScript.Names.$fShowOpName_$cshowsPrec @ a)
                  (Language.PureScript.Names.$fShowOpName_$cshow @ a)
                  (Language.PureScript.Names.$fShowOpName_$cshowList @ a) -}
9af301165f72160425c5e0dde6525338
  $fShowOpName1 ::
    Language.PureScript.Names.OpName a -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,1*U(U,U,U)><L,U>,
     Unfolding: (\ @ a :: Language.PureScript.Names.OpNameType
                   (w :: Language.PureScript.Names.OpName a)
                   (w1 :: GHC.Base.String) ->
                 Language.PureScript.Names.$w$cshowsPrec3 @ a 0# w w1) -}
ba2eb467c6cbd4689b195868a86c9e90
  $fShowOpName2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Names.$fShowModuleName2) -}
9af301165f72160425c5e0dde6525338
  $fShowOpName_$cshow ::
    Language.PureScript.Names.OpName a -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U(U,U,U)>,
     Unfolding: (\ @ a :: Language.PureScript.Names.OpNameType
                   (x :: Language.PureScript.Names.OpName a) ->
                 GHC.CString.unpackAppendCString#
                   Language.PureScript.Names.$fShowName15
                   (GHC.CString.unpackAppendCString#
                      Language.PureScript.Names.$fShowName14
                      (case Data.Text.Show.$w$cshowsPrec
                              x `cast` (Language.PureScript.Names.N:OpName[0] <a>_P)
                              Language.PureScript.Names.$fShowOpName2 of ww { (#,#) ww1 ww2 ->
                       GHC.Types.: @ GHC.Types.Char ww1 ww2 }))) -}
9af301165f72160425c5e0dde6525338
  $fShowOpName_$cshowList ::
    [Language.PureScript.Names.OpName a] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a :: Language.PureScript.Names.OpNameType
                   (ls :: [Language.PureScript.Names.OpName a])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Language.PureScript.Names.OpName a)
                   (Language.PureScript.Names.$fShowOpName1 @ a)
                   ls
                   s) -}
9af301165f72160425c5e0dde6525338
  $fShowOpName_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Names.OpName a -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><L,1*U(U,U,U)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a :: Language.PureScript.Names.OpNameType
                   (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Names.OpName a)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Language.PureScript.Names.$w$cshowsPrec3 @ a ww1 w1 w2 }) -}
a7268334e0b909381550b9329cb80fcc
  $fShowProperName ::
    GHC.Show.Show (Language.PureScript.Names.ProperName a)
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ a :: Language.PureScript.Names.ProperNameType.
                  @ (Language.PureScript.Names.ProperName a)
                  (Language.PureScript.Names.$fShowProperName_$cshowsPrec @ a)
                  (Language.PureScript.Names.$fShowProperName_$cshow @ a)
                  (Language.PureScript.Names.$fShowProperName_$cshowList @ a) -}
a7268334e0b909381550b9329cb80fcc
  $fShowProperName1 ::
    Language.PureScript.Names.ProperName a -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,1*U(U,U,U)><L,U>,
     Unfolding: (\ @ a :: Language.PureScript.Names.ProperNameType
                   (w :: Language.PureScript.Names.ProperName a)
                   (w1 :: GHC.Base.String) ->
                 Language.PureScript.Names.$w$cshowsPrec2 @ a 0# w w1) -}
a7268334e0b909381550b9329cb80fcc
  $fShowProperName_$cshow ::
    Language.PureScript.Names.ProperName a -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U(U,U,U)>,
     Unfolding: (\ @ a :: Language.PureScript.Names.ProperNameType
                   (x :: Language.PureScript.Names.ProperName a) ->
                 GHC.CString.unpackAppendCString#
                   Language.PureScript.Names.$fShowModuleName4
                   (GHC.CString.unpackAppendCString#
                      Language.PureScript.Names.$fShowModuleName3
                      (case Data.Text.Show.$w$cshowsPrec
                              x `cast` (Language.PureScript.Names.N:ProperName[0] <a>_P)
                              Language.PureScript.Names.$fShowOpName2 of ww { (#,#) ww1 ww2 ->
                       GHC.Types.: @ GHC.Types.Char ww1 ww2 }))) -}
a7268334e0b909381550b9329cb80fcc
  $fShowProperName_$cshowList ::
    [Language.PureScript.Names.ProperName a] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a :: Language.PureScript.Names.ProperNameType
                   (ls :: [Language.PureScript.Names.ProperName a])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Language.PureScript.Names.ProperName a)
                   (Language.PureScript.Names.$fShowProperName1 @ a)
                   ls
                   s) -}
a7268334e0b909381550b9329cb80fcc
  $fShowProperName_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Names.ProperName a -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><L,1*U(U,U,U)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a :: Language.PureScript.Names.ProperNameType
                   (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Names.ProperName a)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Language.PureScript.Names.$w$cshowsPrec2 @ a ww1 w1 w2 }) -}
1b2ddf0c04464d2fa2588925f10c1966
  $fShowQualified ::
    GHC.Show.Show a =>
    GHC.Show.Show (Language.PureScript.Names.Qualified a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Show.Show a).
                  @ (Language.PureScript.Names.Qualified a)
                  (Language.PureScript.Names.$fShowQualified_$cshowsPrec @ a v)
                  (Language.PureScript.Names.$fShowQualified_$cshow @ a v)
                  (Language.PureScript.Names.$fShowQualified_$cshowList @ a v) -}
ae357999ff0c6d9687063fa4c0988f8e
  $fShowQualified1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Qualified "#) -}
1b2ddf0c04464d2fa2588925f10c1966
  $fShowQualified_$cshow ::
    GHC.Show.Show a =>
    Language.PureScript.Names.Qualified a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U(1*C1(C1(C(U))),A,A)><S,1*U(1*U,U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (x :: Language.PureScript.Names.Qualified a) ->
                 Language.PureScript.Names.$fShowQualified_$cshowsPrec
                   @ a
                   $dShow
                   Language.PureScript.Names.$fShowIdent2
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
1b2ddf0c04464d2fa2588925f10c1966
  $fShowQualified_$cshowList ::
    GHC.Show.Show a =>
    [Language.PureScript.Names.Qualified a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (ls :: [Language.PureScript.Names.Qualified a])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Language.PureScript.Names.Qualified a)
                   (Language.PureScript.Names.$fShowQualified_$cshowsPrec
                      @ a
                      $dShow
                      Language.PureScript.Names.$fShowIdent2)
                   ls
                   s) -}
1b2ddf0c04464d2fa2588925f10c1966
  $fShowQualified_$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Types.Int
    -> Language.PureScript.Names.Qualified a -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,1*U(1*C1(C1(C(U))),A,A)><S(S),1*U(U)><S,1*U(1*U,U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: GHC.Show.Show a)
                   (w1 :: GHC.Types.Int)
                   (w2 :: Language.PureScript.Names.Qualified a) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Language.PureScript.Names.Qualified ww3 ww4 ->
                 Language.PureScript.Names.$w$cshowsPrec4 @ a w ww1 ww3 ww4 } }) -}
bad3562aa6138b6192713ac281080869
  $fToJSONIdent ::
    Data.Aeson.Types.ToJSON.ToJSON Language.PureScript.Names.Ident
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Names.Ident
                  Language.PureScript.Names.$fToJSONIdent_$ctoJSON
                  Language.PureScript.Names.$fToJSONIdent_$ctoEncoding
                  Language.PureScript.Names.$fToJSONIdent_$ctoJSONList
                  Language.PureScript.Names.$fToJSONIdent_$ctoEncodingList -}
3666e9882742166f56fd9aa7ba92df28
  $fToJSONIdent1 :: Data.Aeson.Types.Internal.Value
  {- Unfolding: (Data.Aeson.Types.ToJSON.$fFromPairsValueDList_go
                   Language.PureScript.Names.$fToJSONIdent2
                   (Data.HashMap.Base.Empty
                      @ Data.Text.Internal.Text
                      @ Data.Aeson.Types.Internal.Value)) -}
0f47629c14ab6050f9fce8be14967eb2
  $fToJSONIdent10 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("GenIdent"#) -}
e2f27002a77f662094323cee8720a7f4
  $fToJSONIdent11 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Text.Internal.Text #)
                        Language.PureScript.Names.$fToJSONIdent12 of ds1 { (#,#) ipv1 ipv2 ->
                 ipv2 }) -}
11f39a6d829719bca4092f286930ad39
  $fToJSONIdent12 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        10#
                        s1 of ds1 { (#,#) ipv1 ipv2 ->
                 Data.Aeson.Types.ToJSON.$wouter1
                   ipv2
                   4#
                   Language.PureScript.Names.$fToJSONIdent13
                   0#
                   ipv1 }) -}
73f139a0f88d6ad83b5b6f452011bfd6
  $fToJSONIdent13 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Names.$fToJSONIdent14) -}
821fa94716d1db5e3f79e6a9fcf4aafd
  $fToJSONIdent14 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Ident"#) -}
618435a0fb4abf933c66bf6d948db493
  $fToJSONIdent2 :: [Data.Aeson.Types.Internal.Pair]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Aeson.Types.Internal.Pair
                   Language.PureScript.Names.$fToJSONIdent3
                   (GHC.Types.[] @ Data.Aeson.Types.Internal.Pair)) -}
d9c546a80b29485a69f26eca4c5dfe99
  $fToJSONIdent3 ::
    (Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Names.$fToJSONIdent5,
                  Language.PureScript.Names.$fToJSONIdent4)) -}
231d332a4ca146b7526b19cdca822eb1
  $fToJSONIdent4 :: Data.Aeson.Types.Internal.Value
  {- Unfolding: (case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                             Data.Vector.Vector Data.Aeson.Types.Internal.Value #)
                        (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case GHC.Prim.newArray#
                                @ Data.Aeson.Types.Internal.Value
                                @ (Control.Monad.Primitive.PrimState
                                     (GHC.ST.ST GHC.Prim.RealWorld))
                                0#
                                (Data.Vector.Mutable.uninitialised
                                   @ Data.Aeson.Types.Internal.Value)
                                s1
                                  `cast`
                                (GHC.Prim.State#
                                   (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                             <GHC.Prim.RealWorld>_N)))_R of ds2 { (#,#) ipv ipv1 ->
                         case GHC.Prim.unsafeFreezeArray#
                                @ (Control.Monad.Primitive.PrimState
                                     (GHC.ST.ST GHC.Prim.RealWorld))
                                @ Data.Aeson.Types.Internal.Value
                                ipv1
                                ipv of ds1 { (#,#) ipv2 ipv3 ->
                         (# ipv2
                              `cast`
                            (GHC.Prim.State#
                               (Control.Monad.Primitive.D:R:PrimStateST[0]
                                    <GHC.Prim.RealWorld>_N))_R,
                            Data.Vector.Vector
                              @ Data.Aeson.Types.Internal.Value
                              0#
                              0#
                              ipv3 #) } }) of ds1 { (#,#) ipv1 ipv2 ->
                 case ipv2 of dt { Data.Vector.Vector ipv ipv4 ipv5 ->
                 Data.Aeson.Types.Internal.Array dt } }) -}
b65ac42eb9177bdba91ce259d1dcdd35
  $fToJSONIdent5 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Text.Internal.Text #)
                        Language.PureScript.Names.$fToJSONIdent6 of ds1 { (#,#) ipv1 ipv2 ->
                 ipv2 }) -}
b670b75733b767f54d3957188562fed1
  $fToJSONIdent6 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        10#
                        s1 of ds1 { (#,#) ipv1 ipv2 ->
                 Data.Aeson.Types.ToJSON.$wouter1
                   ipv2
                   4#
                   Language.PureScript.Names.$fShowIdent4
                   0#
                   ipv1 }) -}
8719f13397dd1a17cf657a35c06e055c
  $fToJSONIdent7 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Text.Internal.Text #)
                        Language.PureScript.Names.$fToJSONIdent8 of ds1 { (#,#) ipv1 ipv2 ->
                 ipv2 }) -}
d8d08abd460f776a2be9a1a536d2db94
  $fToJSONIdent8 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        10#
                        s1 of ds1 { (#,#) ipv1 ipv2 ->
                 Data.Aeson.Types.ToJSON.$wouter1
                   ipv2
                   4#
                   Language.PureScript.Names.$fToJSONIdent9
                   0#
                   ipv1 }) -}
a98d04d8e1653fb0273ebd612278232b
  $fToJSONIdent9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Names.$fToJSONIdent10) -}
bad3562aa6138b6192713ac281080869
  $fToJSONIdent_$ctoEncoding ::
    Language.PureScript.Names.Ident
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Strictness: <S,1*U> -}
bad3562aa6138b6192713ac281080869
  $fToJSONIdent_$ctoEncodingList ::
    [Language.PureScript.Names.Ident]
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (Data.Aeson.Encoding.Internal.list
                   @ Language.PureScript.Names.Ident
                   Language.PureScript.Names.$fToJSONIdent_$ctoEncoding) -}
bad3562aa6138b6192713ac281080869
  $fToJSONIdent_$ctoJSON ::
    Language.PureScript.Names.Ident -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (value :: Language.PureScript.Names.Ident) ->
                 case value of wild {
                   Language.PureScript.Names.Ident arg1
                   -> Data.Aeson.Types.ToJSON.$fFromPairsValueDList_go
                        (GHC.Types.:
                           @ Data.Aeson.Types.Internal.Pair
                           (Language.PureScript.Names.$fToJSONIdent11,
                            Data.Aeson.Types.Internal.$WString arg1)
                           (GHC.Types.[] @ Data.Aeson.Types.Internal.Pair))
                        (Data.HashMap.Base.Empty
                           @ Data.Text.Internal.Text
                           @ Data.Aeson.Types.Internal.Value)
                   Language.PureScript.Names.GenIdent arg1 arg2
                   -> Data.Aeson.Types.ToJSON.$fFromPairsValueDList_go
                        (GHC.Types.:
                           @ Data.Aeson.Types.Internal.Pair
                           (Language.PureScript.Names.$fToJSONIdent7,
                            case GHC.Magic.runRW#
                                   @ ('GHC.Types.TupleRep
                                        '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                                   @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                        Data.Vector.Vector Data.Aeson.Types.Internal.Value #)
                                   (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                    case GHC.Prim.newArray#
                                           @ Data.Aeson.Types.Internal.Value
                                           @ (Control.Monad.Primitive.PrimState
                                                (GHC.ST.ST GHC.Prim.RealWorld))
                                           2#
                                           (Data.Vector.Mutable.uninitialised
                                              @ Data.Aeson.Types.Internal.Value)
                                           s1
                                             `cast`
                                           (GHC.Prim.State#
                                              (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                        <GHC.Prim.RealWorld>_N)))_R of ds2 { (#,#) ipv ipv1 ->
                                    case GHC.Prim.writeArray#
                                           @ (Control.Monad.Primitive.PrimState
                                                (GHC.ST.ST GHC.Prim.RealWorld))
                                           @ Data.Aeson.Types.Internal.Value
                                           ipv1
                                           0#
                                           (case arg1 of wild1 {
                                              GHC.Base.Nothing -> Data.Aeson.Types.Internal.Null
                                              GHC.Base.Just a2
                                              -> Data.Aeson.Types.Internal.$WString a2 })
                                           ipv of s'# { DEFAULT ->
                                    case GHC.Prim.writeArray#
                                           @ (Control.Monad.Primitive.PrimState
                                                (GHC.ST.ST GHC.Prim.RealWorld))
                                           @ Data.Aeson.Types.Internal.Value
                                           ipv1
                                           1#
                                           (case arg2 of dt { DEFAULT ->
                                            Data.Aeson.Types.Internal.Number
                                              (Data.Scientific.Scientific dt 0#) })
                                           s'# of s'#1 { DEFAULT ->
                                    case GHC.Prim.unsafeFreezeArray#
                                           @ (Control.Monad.Primitive.PrimState
                                                (GHC.ST.ST GHC.Prim.RealWorld))
                                           @ Data.Aeson.Types.Internal.Value
                                           ipv1
                                           s'#1 of ds1 { (#,#) ipv2 ipv3 ->
                                    (# ipv2
                                         `cast`
                                       (GHC.Prim.State#
                                          (Control.Monad.Primitive.D:R:PrimStateST[0]
                                               <GHC.Prim.RealWorld>_N))_R,
                                       Data.Vector.Vector
                                         @ Data.Aeson.Types.Internal.Value
                                         0#
                                         2#
                                         ipv3 #) } } } }) of ds1 { (#,#) ipv1 ipv2 ->
                            case ipv2 of dt { Data.Vector.Vector ipv ipv4 ipv5 ->
                            Data.Aeson.Types.Internal.Array dt } })
                           (GHC.Types.[] @ Data.Aeson.Types.Internal.Pair))
                        (Data.HashMap.Base.Empty
                           @ Data.Text.Internal.Text
                           @ Data.Aeson.Types.Internal.Value)
                   Language.PureScript.Names.UnusedIdent
                   -> Language.PureScript.Names.$fToJSONIdent1 }) -}
bad3562aa6138b6192713ac281080869
  $fToJSONIdent_$ctoJSONList ::
    [Language.PureScript.Names.Ident]
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (x :: [Language.PureScript.Names.Ident]) ->
                 Data.Aeson.Types.Internal.$WArray
                   (Data.Vector.Generic.new
                      @ Data.Vector.Vector
                      @ Data.Aeson.Types.Internal.Value
                      (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                      (Data.Vector.Generic.New.unstream
                         @ Data.Vector.Vector
                         @ Data.Aeson.Types.Internal.Value
                         (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                         (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                            @ Data.Vector.Fusion.Util.Id
                            @ Data.Aeson.Types.Internal.Value
                            @ Data.Vector.Vector
                            Data.Vector.Fusion.Util.$fMonadId
                            Data.Vector.Fusion.Bundle.Size.Unknown
                            (GHC.Base.build
                               @ Data.Aeson.Types.Internal.Value
                               (\ @ b1
                                  (c :: Data.Aeson.Types.Internal.Value -> b1 -> b1)[OneShot]
                                  (n1 :: b1)[OneShot] ->
                                GHC.Base.foldr
                                  @ Language.PureScript.Names.Ident
                                  @ b1
                                  (GHC.Base.mapFB
                                     @ Data.Aeson.Types.Internal.Value
                                     @ b1
                                     @ Language.PureScript.Names.Ident
                                     c
                                     Language.PureScript.Names.$fToJSONIdent_$ctoJSON)
                                  n1
                                  x)))))) -}
1b2ddf0c04464d2fa2588925f10c1966
  $fToJSONModuleName ::
    Data.Aeson.Types.ToJSON.ToJSON Language.PureScript.Names.ModuleName
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Names.ModuleName
                  Language.PureScript.Names.$fToJSONModuleName_$ctoJSON
                  Language.PureScript.Names.$fToJSONModuleName_$ctoEncoding
                  Language.PureScript.Names.$fToJSONModuleName_$ctoJSONList
                  Language.PureScript.Names.$fToJSONModuleName_$ctoEncodingList -}
1b2ddf0c04464d2fa2588925f10c1966
  $fToJSONModuleName_$ctoEncoding ::
    Language.PureScript.Names.ModuleName
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (value :: Language.PureScript.Names.ModuleName) ->
                 case value
                        `cast`
                      (Language.PureScript.Names.N:ModuleName[0]) of wild {
                   []
                   -> Data.Aeson.Encoding.Builder.emptyArray_1
                        `cast`
                      ((forall (r :: <*>_N).
                        <Data.ByteString.Builder.Internal.BuildStep r>_R
                        ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                        ->_R Sym (GHC.Types.N:IO[0]
                                      <Data.ByteString.Builder.Internal.BuildSignal
                                         r>_R)) ; (Sym (Data.ByteString.Builder.Internal.N:Builder[0]) ; Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                                                                                  <Data.Aeson.Types.Internal.Value>_P)))
                   : x xs
                   -> (\ @ r ->
                       let {
                         f :: Data.ByteString.Builder.Internal.BuildStep r
                              -> Data.ByteString.Builder.Internal.BuildStep r
                         = case x `cast`
                                (Language.PureScript.Names.N:ProperName[0]
                                     <'Language.PureScript.Names.Namespace>_P) of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                           (Data.Aeson.Encoding.Builder.encodeToBuilder
                              (Data.Aeson.Types.Internal.String dt))
                             `cast`
                           (Data.ByteString.Builder.Internal.N:Builder[0])
                             @ r }
                       } in
                       let {
                         f1 :: Data.ByteString.Builder.Internal.BuildStep r
                               -> Data.ByteString.Builder.Internal.BuildStep r
                         = (Language.PureScript.Names.$fToJSONModuleName_go xs)
                             `cast`
                           (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                <Data.Aeson.Types.Internal.Value>_P ; Data.ByteString.Builder.Internal.N:Builder[0])
                             @ r
                       } in
                       (\ (x1 :: Data.ByteString.Builder.Internal.BuildStep r) ->
                        let {
                          w :: Data.ByteString.Builder.Internal.BuildStep r
                          = f (f1
                                 (Data.Aeson.Encoding.Internal.closeBracket1 @ r x1)
                                   `cast`
                                 (<Data.ByteString.Builder.Internal.BufferRange>_R
                                  ->_R Sym (GHC.Types.N:IO[0]
                                                <Data.ByteString.Builder.Internal.BuildSignal
                                                   r>_R)))
                        } in
                        \ (w1 :: Data.ByteString.Builder.Internal.BufferRange)
                          (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                        case w1 of ww { Data.ByteString.Builder.Internal.BufferRange ww1 ww2 ->
                        Data.Aeson.Encoding.Internal.$wopenBracket @ r w ww1 ww2 w2 })
                         `cast`
                       (<Data.ByteString.Builder.Internal.BuildStep r>_R
                        ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                        ->_R Sym (GHC.Types.N:IO[0]
                                      <Data.ByteString.Builder.Internal.BuildSignal r>_R)))
                        `cast`
                      (Sym (Data.ByteString.Builder.Internal.N:Builder[0]) ; Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                                                      <Data.Aeson.Types.Internal.Value>_P)) }) -}
1b2ddf0c04464d2fa2588925f10c1966
  $fToJSONModuleName_$ctoEncodingList ::
    [Language.PureScript.Names.ModuleName]
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (Data.Aeson.Encoding.Internal.list
                   @ Language.PureScript.Names.ModuleName
                   Language.PureScript.Names.$fToJSONModuleName_$ctoEncoding) -}
1b2ddf0c04464d2fa2588925f10c1966
  $fToJSONModuleName_$ctoJSON ::
    Language.PureScript.Names.ModuleName
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.PureScript.Names.ModuleName) ->
                 case Language.PureScript.Names.$w$ctoJSON w of ww { Unit# ww1 ->
                 Data.Aeson.Types.Internal.Array ww1 }) -}
1b2ddf0c04464d2fa2588925f10c1966
  $fToJSONModuleName_$ctoJSONList ::
    [Language.PureScript.Names.ModuleName]
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (x :: [Language.PureScript.Names.ModuleName]) ->
                 Data.Aeson.Types.Internal.$WArray
                   (Data.Vector.Generic.new
                      @ Data.Vector.Vector
                      @ Data.Aeson.Types.Internal.Value
                      (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                      (Data.Vector.Generic.New.unstream
                         @ Data.Vector.Vector
                         @ Data.Aeson.Types.Internal.Value
                         (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                         (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                            @ Data.Vector.Fusion.Util.Id
                            @ Data.Aeson.Types.Internal.Value
                            @ Data.Vector.Vector
                            Data.Vector.Fusion.Util.$fMonadId
                            Data.Vector.Fusion.Bundle.Size.Unknown
                            (GHC.Base.build
                               @ Data.Aeson.Types.Internal.Value
                               (\ @ b1
                                  (c :: Data.Aeson.Types.Internal.Value -> b1 -> b1)[OneShot]
                                  (n1 :: b1)[OneShot] ->
                                GHC.Base.foldr
                                  @ Language.PureScript.Names.ModuleName
                                  @ b1
                                  (GHC.Base.mapFB
                                     @ Data.Aeson.Types.Internal.Value
                                     @ b1
                                     @ Language.PureScript.Names.ModuleName
                                     c
                                     Language.PureScript.Names.$fToJSONModuleName_$ctoJSON)
                                  n1
                                  x)))))) -}
adee324571ab339af90f070fbbdc40c8
  $fToJSONModuleName_$s$wfoldlM_loop ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> [Data.Aeson.Types.Internal.Value]
    -> GHC.Prim.Int#
    -> GHC.Prim.MutableArray#
         GHC.Prim.RealWorld Data.Aeson.Types.Internal.Value
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Vector.Vector Data.Aeson.Types.Internal.Value #)
  {- Arity: 6, Strictness: <S,U><S,1*U><L,U><S,U><L,U><L,U> -}
31c49b6c33ab376d6591c5a46c7f6772
  $fToJSONModuleName_go ::
    [Language.PureScript.Names.ProperName
       'Language.PureScript.Names.Namespace]
    -> Data.Aeson.Encoding.Internal.Encoding'
         Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U> -}
9af301165f72160425c5e0dde6525338
  $fToJSONOpName ::
    Data.Aeson.Types.ToJSON.ToJSON (Language.PureScript.Names.OpName a)
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ a :: Language.PureScript.Names.OpNameType.
                  @ (Language.PureScript.Names.OpName a)
                  Data.Aeson.Types.Internal.$WString
                    `cast`
                  (Sym (Language.PureScript.Names.N:OpName[0] <a>_P)
                   ->_R <Data.Aeson.Types.Internal.Value>_R)
                  (Language.PureScript.Names.$fToJSONOpName_$ctoEncoding @ a)
                  (Language.PureScript.Names.$fToJSONOpName_$ctoJSONList @ a)
                  (Language.PureScript.Names.$fToJSONOpName_$ctoEncodingList @ a) -}
9af301165f72160425c5e0dde6525338
  $fToJSONOpName_$ctoEncoding ::
    Language.PureScript.Names.OpName a
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Strictness: <S,1*U(U,U,U)>, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ @ a :: Language.PureScript.Names.OpNameType
                   (x :: Language.PureScript.Names.OpName a) ->
                 Data.Aeson.Encoding.Builder.encodeToBuilder
                   (Data.Aeson.Types.Internal.$WString
                      x `cast` (Language.PureScript.Names.N:OpName[0] <a>_P)))
                  `cast`
                (forall (a :: <Language.PureScript.Names.OpNameType>_N).
                 <Language.PureScript.Names.OpName a>_R
                 ->_R Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                               <Data.Aeson.Types.Internal.Value>_P)) -}
9af301165f72160425c5e0dde6525338
  $fToJSONOpName_$ctoEncodingList ::
    [Language.PureScript.Names.OpName a]
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ @ a :: Language.PureScript.Names.OpNameType ->
                 Data.Aeson.Encoding.Internal.list
                   @ (Language.PureScript.Names.OpName a)
                   (Language.PureScript.Names.$fToJSONOpName_$ctoEncoding @ a)) -}
9af301165f72160425c5e0dde6525338
  $fToJSONOpName_$ctoJSONList ::
    [Language.PureScript.Names.OpName a]
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ @ a :: Language.PureScript.Names.OpNameType
                   (x :: [Language.PureScript.Names.OpName a]) ->
                 Data.Aeson.Types.Internal.$WArray
                   (Data.Vector.Generic.new
                      @ Data.Vector.Vector
                      @ Data.Aeson.Types.Internal.Value
                      (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                      (Data.Vector.Generic.New.unstream
                         @ Data.Vector.Vector
                         @ Data.Aeson.Types.Internal.Value
                         (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                         (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                            @ Data.Vector.Fusion.Util.Id
                            @ Data.Aeson.Types.Internal.Value
                            @ Data.Vector.Vector
                            Data.Vector.Fusion.Util.$fMonadId
                            Data.Vector.Fusion.Bundle.Size.Unknown
                            (GHC.Base.build
                               @ Data.Aeson.Types.Internal.Value
                               (\ @ b1
                                  (c :: Data.Aeson.Types.Internal.Value -> b1 -> b1)[OneShot]
                                  (n1 :: b1)[OneShot] ->
                                GHC.Base.foldr
                                  @ (Language.PureScript.Names.OpName a)
                                  @ b1
                                  (GHC.Base.mapFB
                                     @ Data.Aeson.Types.Internal.Value
                                     @ b1
                                     @ (Language.PureScript.Names.OpName a)
                                     c
                                     Data.Aeson.Types.Internal.$WString
                                       `cast`
                                     (Sym (Language.PureScript.Names.N:OpName[0] <a>_P)
                                      ->_R <Data.Aeson.Types.Internal.Value>_R))
                                  n1
                                  x)))))) -}
a7268334e0b909381550b9329cb80fcc
  $fToJSONProperName ::
    Data.Aeson.Types.ToJSON.ToJSON
      (Language.PureScript.Names.ProperName a)
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ a :: Language.PureScript.Names.ProperNameType.
                  @ (Language.PureScript.Names.ProperName a)
                  Data.Aeson.Types.Internal.$WString
                    `cast`
                  (Sym (Language.PureScript.Names.N:ProperName[0] <a>_P)
                   ->_R <Data.Aeson.Types.Internal.Value>_R)
                  (Language.PureScript.Names.$fToJSONProperName_$ctoEncoding @ a)
                  (Language.PureScript.Names.$fToJSONProperName_$ctoJSONList @ a)
                  (Language.PureScript.Names.$fToJSONProperName_$ctoEncodingList
                     @ a) -}
a7268334e0b909381550b9329cb80fcc
  $fToJSONProperName_$ctoEncoding ::
    Language.PureScript.Names.ProperName a
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Strictness: <S,1*U(U,U,U)>, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ @ a :: Language.PureScript.Names.ProperNameType
                   (x :: Language.PureScript.Names.ProperName a) ->
                 Data.Aeson.Encoding.Builder.encodeToBuilder
                   (Data.Aeson.Types.Internal.$WString
                      x `cast` (Language.PureScript.Names.N:ProperName[0] <a>_P)))
                  `cast`
                (forall (a :: <Language.PureScript.Names.ProperNameType>_N).
                 <Language.PureScript.Names.ProperName a>_R
                 ->_R Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                               <Data.Aeson.Types.Internal.Value>_P)) -}
a7268334e0b909381550b9329cb80fcc
  $fToJSONProperName_$ctoEncodingList ::
    [Language.PureScript.Names.ProperName a]
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ @ a :: Language.PureScript.Names.ProperNameType ->
                 Data.Aeson.Encoding.Internal.list
                   @ (Language.PureScript.Names.ProperName a)
                   (Language.PureScript.Names.$fToJSONProperName_$ctoEncoding @ a)) -}
a7268334e0b909381550b9329cb80fcc
  $fToJSONProperName_$ctoJSONList ::
    [Language.PureScript.Names.ProperName a]
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ @ a :: Language.PureScript.Names.ProperNameType
                   (x :: [Language.PureScript.Names.ProperName a]) ->
                 Data.Aeson.Types.Internal.$WArray
                   (Data.Vector.Generic.new
                      @ Data.Vector.Vector
                      @ Data.Aeson.Types.Internal.Value
                      (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                      (Data.Vector.Generic.New.unstream
                         @ Data.Vector.Vector
                         @ Data.Aeson.Types.Internal.Value
                         (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                         (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                            @ Data.Vector.Fusion.Util.Id
                            @ Data.Aeson.Types.Internal.Value
                            @ Data.Vector.Vector
                            Data.Vector.Fusion.Util.$fMonadId
                            Data.Vector.Fusion.Bundle.Size.Unknown
                            (GHC.Base.build
                               @ Data.Aeson.Types.Internal.Value
                               (\ @ b1
                                  (c :: Data.Aeson.Types.Internal.Value -> b1 -> b1)[OneShot]
                                  (n1 :: b1)[OneShot] ->
                                GHC.Base.foldr
                                  @ (Language.PureScript.Names.ProperName a)
                                  @ b1
                                  (GHC.Base.mapFB
                                     @ Data.Aeson.Types.Internal.Value
                                     @ b1
                                     @ (Language.PureScript.Names.ProperName a)
                                     c
                                     Data.Aeson.Types.Internal.$WString
                                       `cast`
                                     (Sym (Language.PureScript.Names.N:ProperName[0] <a>_P)
                                      ->_R <Data.Aeson.Types.Internal.Value>_R))
                                  n1
                                  x)))))) -}
1b2ddf0c04464d2fa2588925f10c1966
  $fToJSONQualified ::
    Data.Aeson.Types.ToJSON.ToJSON a =>
    Data.Aeson.Types.ToJSON.ToJSON
      (Language.PureScript.Names.Qualified a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(U),C(C(C(C1(U(U,U))))),A,A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: Data.Aeson.Types.ToJSON.ToJSON a).
                  @ (Language.PureScript.Names.Qualified a)
                  (Language.PureScript.Names.$fToJSONQualified_$ctoJSON @ a v)
                  (Language.PureScript.Names.$fToJSONQualified_$ctoEncoding @ a v)
                  (Language.PureScript.Names.$fToJSONQualified_$ctoJSONList @ a v)
                  (Language.PureScript.Names.$fToJSONQualified_$ctoEncodingList
                     @ a
                     v) -}
1b2ddf0c04464d2fa2588925f10c1966
  $fToJSONQualified_$ctoEncoding ::
    Data.Aeson.Types.ToJSON.ToJSON a =>
    Language.PureScript.Names.Qualified a
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 2,
     Strictness: <L,1*U(A,1*C1(C(C(C1(U(U,U))))),A,A)><S,1*U(1*U,U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (w :: Data.Aeson.Types.ToJSON.ToJSON a)
                   (w1 :: Language.PureScript.Names.Qualified a) ->
                 case w1 of ww { Language.PureScript.Names.Qualified ww1 ww2 ->
                 Language.PureScript.Names.$w$ctoEncoding @ a w ww1 ww2 }) -}
1b2ddf0c04464d2fa2588925f10c1966
  $fToJSONQualified_$ctoEncodingList ::
    Data.Aeson.Types.ToJSON.ToJSON a =>
    [Language.PureScript.Names.Qualified a]
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 2, Strictness: <L,U(A,C(C(C(C1(U(U,U))))),A,A)><S,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (1, False, False)
                (\ @ a ($dToJSON :: Data.Aeson.Types.ToJSON.ToJSON a) ->
                 Data.Aeson.Encoding.Internal.list
                   @ (Language.PureScript.Names.Qualified a)
                   (Language.PureScript.Names.$fToJSONQualified_$ctoEncoding
                      @ a
                      $dToJSON)) -}
1b2ddf0c04464d2fa2588925f10c1966
  $fToJSONQualified_$ctoJSON ::
    Data.Aeson.Types.ToJSON.ToJSON a =>
    Language.PureScript.Names.Qualified a
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 2, Strictness: <L,1*U(1*C1(U),A,A,A)><S,1*U(1*U,U)>m2,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (w :: Data.Aeson.Types.ToJSON.ToJSON a)
                   (w1 :: Language.PureScript.Names.Qualified a) ->
                 case w1 of ww { Language.PureScript.Names.Qualified ww1 ww2 ->
                 case Language.PureScript.Names.$w$ctoJSON1
                        @ a
                        w
                        ww1
                        ww2 of ww3 { Unit# ww4 ->
                 Data.Aeson.Types.Internal.Array ww4 } }) -}
1b2ddf0c04464d2fa2588925f10c1966
  $fToJSONQualified_$ctoJSONList ::
    Data.Aeson.Types.ToJSON.ToJSON a =>
    [Language.PureScript.Names.Qualified a]
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 2, Strictness: <L,U(C(U),A,A,A)><S,1*U>m2,
     Inline: (sat-args=0),
     Unfolding: InlineRule (1, False, False)
                (\ @ a ($dToJSON :: Data.Aeson.Types.ToJSON.ToJSON a) ->
                 let {
                   f5 :: Language.PureScript.Names.Qualified a
                         -> Data.Aeson.Types.Internal.Value
                     {- Arity: 1 -}
                   = Language.PureScript.Names.$fToJSONQualified_$ctoJSON @ a $dToJSON
                 } in
                 \ (x :: [Language.PureScript.Names.Qualified a]) ->
                 Data.Aeson.Types.Internal.$WArray
                   (Data.Vector.Generic.new
                      @ Data.Vector.Vector
                      @ Data.Aeson.Types.Internal.Value
                      (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                      (Data.Vector.Generic.New.unstream
                         @ Data.Vector.Vector
                         @ Data.Aeson.Types.Internal.Value
                         (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                         (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                            @ Data.Vector.Fusion.Util.Id
                            @ Data.Aeson.Types.Internal.Value
                            @ Data.Vector.Vector
                            Data.Vector.Fusion.Util.$fMonadId
                            Data.Vector.Fusion.Bundle.Size.Unknown
                            (GHC.Base.build
                               @ Data.Aeson.Types.Internal.Value
                               (\ @ b1
                                  (c :: Data.Aeson.Types.Internal.Value -> b1 -> b1)[OneShot]
                                  (n1 :: b1)[OneShot] ->
                                GHC.Base.foldr
                                  @ (Language.PureScript.Names.Qualified a)
                                  @ b1
                                  (GHC.Base.mapFB
                                     @ Data.Aeson.Types.Internal.Value
                                     @ b1
                                     @ (Language.PureScript.Names.Qualified a)
                                     c
                                     f5)
                                  n1
                                  x)))))) -}
1b2ddf0c04464d2fa2588925f10c1966
  $fTraversableQualified ::
    Data.Traversable.Traversable Language.PureScript.Names.Qualified
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Names.Qualified
                  Language.PureScript.Names.$fFunctorQualified
                  Language.PureScript.Names.$fFoldableQualified
                  Language.PureScript.Names.$fTraversableQualified_$ctraverse
                  Language.PureScript.Names.$fTraversableQualified_$csequenceA
                  Language.PureScript.Names.$fTraversableQualified_$cmapM
                  Language.PureScript.Names.$fTraversableQualified_$csequence -}
1b2ddf0c04464d2fa2588925f10c1966
  $fTraversableQualified_$cmapM ::
    GHC.Base.Monad m =>
    (a -> m b)
    -> Language.PureScript.Names.Qualified a
    -> m (Language.PureScript.Names.Qualified b)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S(S(C(C(S))L)LLLLL)LLLL),1*U(1*U(1*U(1*C1(C1(U)),A),A,A,A,A,A),A,A,A,A)><L,1*C1(U)><S,1*U(U,U)>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ @ m :: * -> * @ a @ b ($dMonad :: GHC.Base.Monad m) ->
                 Language.PureScript.Names.$fTraversableQualified_$ctraverse
                   @ m
                   @ a
                   @ b
                   (GHC.Base.$p1Monad @ m $dMonad)) -}
1b2ddf0c04464d2fa2588925f10c1966
  $fTraversableQualified_$csequence ::
    GHC.Base.Monad m =>
    Language.PureScript.Names.Qualified (m a)
    -> m (Language.PureScript.Names.Qualified a)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S(C(C(S))L)LLLLL)LLLL),1*U(1*U(1*U(1*C1(C1(U)),A),A,A,A,A,A),A,A,A,A)><S,1*U(U,U)>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ @ m :: * -> * @ a ($dMonad :: GHC.Base.Monad m) ->
                 let {
                   $dApplicative :: GHC.Base.Applicative m
                   = GHC.Base.$p1Monad @ m $dMonad
                 } in
                 \ (eta :: Language.PureScript.Names.Qualified (m a)) ->
                 case eta of wild { Language.PureScript.Names.Qualified a1 a2 ->
                 GHC.Base.fmap
                   @ m
                   (GHC.Base.$p1Applicative @ m $dApplicative)
                   @ a
                   @ (Language.PureScript.Names.Qualified a)
                   (\ (b2 :: a) -> Language.PureScript.Names.Qualified @ a a1 b2)
                   a2 }) -}
1b2ddf0c04464d2fa2588925f10c1966
  $fTraversableQualified_$csequenceA ::
    GHC.Base.Applicative f =>
    Language.PureScript.Names.Qualified (f a)
    -> f (Language.PureScript.Names.Qualified a)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(C(C(S))L)LLLLL),1*U(1*U(1*C1(C1(U)),A),A,A,A,A,A)><S,1*U(U,U)>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ @ f :: * -> *
                   @ a
                   ($dApplicative :: GHC.Base.Applicative f)
                   (eta :: Language.PureScript.Names.Qualified (f a)) ->
                 case eta of wild { Language.PureScript.Names.Qualified a1 a2 ->
                 GHC.Base.fmap
                   @ f
                   (GHC.Base.$p1Applicative @ f $dApplicative)
                   @ a
                   @ (Language.PureScript.Names.Qualified a)
                   (\ (b2 :: a) -> Language.PureScript.Names.Qualified @ a a1 b2)
                   a2 }) -}
1b2ddf0c04464d2fa2588925f10c1966
  $fTraversableQualified_$ctraverse ::
    GHC.Base.Applicative f =>
    (a -> f b)
    -> Language.PureScript.Names.Qualified a
    -> f (Language.PureScript.Names.Qualified b)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S(C(C(S))L)LLLLL),1*U(1*U(1*C1(C1(U)),A),A,A,A,A,A)><L,1*C1(U)><S,1*U(U,U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ f :: * -> *
                   @ a
                   @ b
                   (w :: GHC.Base.Applicative f)
                   (w1 :: a -> f b)
                   (w2 :: Language.PureScript.Names.Qualified a) ->
                 case w2 of ww { Language.PureScript.Names.Qualified ww1 ww2 ->
                 Language.PureScript.Names.$w$ctraverse
                   @ f
                   @ a
                   @ b
                   w
                   w1
                   ww1
                   ww2 }) -}
12c52cfea87ce4dbc464802b7778d040
  $tc'AnyOpName :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17951399881896219886##
                   16493358908093248316##
                   Language.PureScript.Names.$trModule
                   Language.PureScript.Names.$tc'AnyOpName2
                   0#
                   Language.PureScript.Names.$tc'AnyOpName1) -}
6ac21f915067138572c1fb1b66014e33
  $tc'AnyOpName1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
6c7e70979ac30442db3d0d7b776d9738
  $tc'AnyOpName2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Names.$tc'AnyOpName3) -}
5247c13696149aeb1e6389d528024cd8
  $tc'AnyOpName3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'AnyOpName"#) -}
2e3dba3432bb2348cceef15987ad71ac
  $tc'ClassName :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10018140219586662883##
                   17947511910578868385##
                   Language.PureScript.Names.$trModule
                   Language.PureScript.Names.$tc'ClassName2
                   0#
                   Language.PureScript.Names.$tc'ClassName1) -}
d8ab09ac8b7ce6fcec84e11d6de44c9e
  $tc'ClassName1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
63150a3e8907e6f49762d19367f115e7
  $tc'ClassName2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Names.$tc'ClassName3) -}
084ff0496ccee5c40dccfd7839bb8fe7
  $tc'ClassName3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ClassName"#) -}
0be68a6bbf702f78ea7a2956954cf491
  $tc'ConstructorName :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10251627349805183329##
                   12135403512709340380##
                   Language.PureScript.Names.$trModule
                   Language.PureScript.Names.$tc'ConstructorName1
                   0#
                   Language.PureScript.Names.$tc'ClassName1) -}
ef62320434cd630dee62c0398da1a5d5
  $tc'ConstructorName1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Names.$tc'ConstructorName2) -}
55ebec3fc04935319c5a4d56b670e7a7
  $tc'ConstructorName2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ConstructorName"#) -}
d347b15028db6aa2f6e1f607f38fe274
  $tc'DctorName :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8447549776000743537##
                   11619907321367982774##
                   Language.PureScript.Names.$trModule
                   Language.PureScript.Names.$tc'DctorName2
                   0#
                   Language.PureScript.Names.$tc'DctorName1) -}
df64ec790bb5cd12032d324cc01602a1
  $tc'DctorName1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
8459b0a498051609b5bb95555078342f
  $tc'DctorName2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Names.$tc'DctorName3) -}
eec015bb1aaf1b2ed283a703ea1d1c47
  $tc'DctorName3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'DctorName"#) -}
432509703e4235dcca1aac8545ef5a63
  $tc'GenIdent :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7563385380088259278##
                   4871133437012293581##
                   Language.PureScript.Names.$trModule
                   Language.PureScript.Names.$tc'GenIdent2
                   0#
                   Language.PureScript.Names.$tc'GenIdent1) -}
b16c5d727b3c8762ae687dfb839b309d
  $tc'GenIdent1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
2a59945163d5f47e942c20615f1716c6
  $tc'GenIdent2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Names.$tc'GenIdent3) -}
7c0684eec5e2b9f0b83a5aff50f8f09a
  $tc'GenIdent3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'GenIdent"#) -}
4425a2b208ff1d1abc55f27fe6801234
  $tc'Ident :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11846055528293907511##
                   14572496678414218766##
                   Language.PureScript.Names.$trModule
                   Language.PureScript.Names.$tc'Ident2
                   0#
                   Language.PureScript.Names.$tc'Ident1) -}
d62146bb7844fbfd498985d40b832eed
  $tc'Ident1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
8e386e1f2befc1fd770e747845703f53
  $tc'Ident2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Names.$tc'Ident3) -}
06461f5b9b6627110fea41da0c8e7da7
  $tc'Ident3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Ident"#) -}
f3b99a7f4fc891122ad72d23c8933017
  $tc'IdentName :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8817849413185630072##
                   12318967191135250164##
                   Language.PureScript.Names.$trModule
                   Language.PureScript.Names.$tc'IdentName2
                   0#
                   Language.PureScript.Names.$tc'IdentName1) -}
06e6134f72ba410fc90c7f8e09bd966b
  $tc'IdentName1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
b4af03668d51597909800737bd821a98
  $tc'IdentName2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Names.$tc'IdentName3) -}
3f54f776e6bcd74159d6ac53632f7f66
  $tc'IdentName3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IdentName"#) -}
44b034bd38ef722be48eef30409dcfad
  $tc'KiName :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16285562503911642649##
                   16916422320646100891##
                   Language.PureScript.Names.$trModule
                   Language.PureScript.Names.$tc'KiName2
                   0#
                   Language.PureScript.Names.$tc'KiName1) -}
f767c902e60434be8ebd6152fcec8703
  $tc'KiName1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
3f439b19d5da97ec60057a38ac8fc2ae
  $tc'KiName2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Names.$tc'KiName3) -}
3371222368680f106f24790e6aad7af1
  $tc'KiName3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'KiName"#) -}
0f7fe34a4f238168a6834a49634fb068
  $tc'KindName :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3911971582217931278##
                   13187774962609771766##
                   Language.PureScript.Names.$trModule
                   Language.PureScript.Names.$tc'KindName1
                   0#
                   Language.PureScript.Names.$tc'ClassName1) -}
5f39ceda08236d8c15bff5e61c78a48b
  $tc'KindName1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Names.$tc'KindName2) -}
33e106a5d6a92918209459e849e88ec2
  $tc'KindName2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'KindName"#) -}
41d0e510e3e072c9def87bed159bf9c1
  $tc'ModName :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15036836796747088059##
                   15877005181446016655##
                   Language.PureScript.Names.$trModule
                   Language.PureScript.Names.$tc'ModName2
                   0#
                   Language.PureScript.Names.$tc'ModName1) -}
47ce4f17a60597fe8ccc1196c2dc47c7
  $tc'ModName1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
4da8d3ee696e61be514cdfaa2a5f1445
  $tc'ModName2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Names.$tc'ModName3) -}
b941c7ad0af3f0c1b699c143e7ddaebe
  $tc'ModName3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ModName"#) -}
5394ac3d3fcdfa14848b53f7c801ac0b
  $tc'ModuleName :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4499457222310761467##
                   4793365084471233517##
                   Language.PureScript.Names.$trModule
                   Language.PureScript.Names.$tc'ModuleName2
                   0#
                   Language.PureScript.Names.$tc'ModuleName1) -}
1ae92824b8c896c07a1d8ca663232dc3
  $tc'ModuleName1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
29509d364ee37661cc554f14c35a5f78
  $tc'ModuleName2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Names.$tc'ModuleName3) -}
f8f5a3838081f1a597dcb601d0cf20d3
  $tc'ModuleName3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ModuleName"#) -}
6f70b98b5bf57e51dc61f0bbfc432226
  $tc'Namespace :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1558055230684826966##
                   10249129415860178415##
                   Language.PureScript.Names.$trModule
                   Language.PureScript.Names.$tc'Namespace1
                   0#
                   Language.PureScript.Names.$tc'ClassName1) -}
b9013ed88bb3d902fdd0d0638e9fa71e
  $tc'Namespace1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Names.$tc'Namespace2) -}
7de29054d81bfc9de7179aceb2a9f1d1
  $tc'Namespace2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Namespace"#) -}
9f44a805fd2bdcf8c2b2b9beb6317175
  $tc'OpName :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7133592251585732032##
                   13244724924201845862##
                   Language.PureScript.Names.$trModule
                   Language.PureScript.Names.$tc'OpName2
                   1#
                   Language.PureScript.Names.$tc'OpName1) -}
6bbf08efa114a3a912acc7e8c0a928b2
  $tc'OpName1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
0114f2ab9aef3e787774fe837acf2b23
  $tc'OpName2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Names.$tc'OpName3) -}
367e296cac55cf0007bfb0ad99267b7b
  $tc'OpName3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'OpName"#) -}
f10991be32390a620cbcdb69e7432a40
  $tc'ProperName :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16469726299027271796##
                   17355950947843227764##
                   Language.PureScript.Names.$trModule
                   Language.PureScript.Names.$tc'ProperName2
                   1#
                   Language.PureScript.Names.$tc'ProperName1) -}
a49e16bcb9f8cc14fd4c4176064170fa
  $tc'ProperName1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
58818769550861564c76c84cd02ff048
  $tc'ProperName2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Names.$tc'ProperName3) -}
a215cdaecd6205767fee2f7c673b793b
  $tc'ProperName3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ProperName"#) -}
476256e5c95ec1cc1b5636099f7a3cce
  $tc'Qualified :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3024641949912291172##
                   7610829645262862873##
                   Language.PureScript.Names.$trModule
                   Language.PureScript.Names.$tc'Qualified2
                   1#
                   Language.PureScript.Names.$tc'Qualified1) -}
000f70affb91040780d7594b68256eaf
  $tc'Qualified1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
370a363c51908d35a02efe8636235ffa
  $tc'Qualified2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Names.$tc'Qualified3) -}
d7c4132611c3f2bd80fb1fdd89d7616b
  $tc'Qualified3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Qualified"#) -}
b4a6dad7e598dbebcc2c94a87e62763c
  $tc'TyClassName :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15231328371304120264##
                   18360618457577981164##
                   Language.PureScript.Names.$trModule
                   Language.PureScript.Names.$tc'TyClassName2
                   0#
                   Language.PureScript.Names.$tc'TyClassName1) -}
e73f07e9ad1ba6192a9f4ec1d53bb789
  $tc'TyClassName1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
706440a49706e12ffc91dcd082ce6481
  $tc'TyClassName2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Names.$tc'TyClassName3) -}
b580b6f69eeee4401a45047b532ccb2d
  $tc'TyClassName3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TyClassName"#) -}
454898d22df2389be7d9af9dd26d63fd
  $tc'TyName :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5548013128773780290##
                   11373916936189196486##
                   Language.PureScript.Names.$trModule
                   Language.PureScript.Names.$tc'TyName2
                   0#
                   Language.PureScript.Names.$tc'TyName1) -}
3cc35f59ca970e68a03d1b1c51b3b8bb
  $tc'TyName1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
ffc946f476775cb7a854ff867b903413
  $tc'TyName2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Names.$tc'TyName3) -}
26f748d1e99a063a346f9775adcd2c0a
  $tc'TyName3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TyName"#) -}
ec12dd1e39e12ade5f6cd4de15bb2e86
  $tc'TyOpName :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5437007163539890835##
                   5224872513708696862##
                   Language.PureScript.Names.$trModule
                   Language.PureScript.Names.$tc'TyOpName2
                   0#
                   Language.PureScript.Names.$tc'TyOpName1) -}
a93bff8c3cea88de6df74feae8489b22
  $tc'TyOpName1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
2f8215feccb8c9edb08e8327e64fcd61
  $tc'TyOpName2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Names.$tc'TyOpName3) -}
8a6bef2a6ef4e62d019df3257993e17d
  $tc'TyOpName3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TyOpName"#) -}
4e23392a87bfe051dcbb072aaeb31e6f
  $tc'TypeName :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16595341606267782046##
                   15221452237177366974##
                   Language.PureScript.Names.$trModule
                   Language.PureScript.Names.$tc'TypeName1
                   0#
                   Language.PureScript.Names.$tc'ClassName1) -}
4b5cbb8726982ef9cd4ccead1d2e1d8b
  $tc'TypeName1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Names.$tc'TypeName2) -}
66c617f2e8cec76e5f71da2dc4e3a403
  $tc'TypeName2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TypeName"#) -}
26d1b76d55e3b5aecbaf9157c987b2e8
  $tc'TypeOpName :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9383015883845586667##
                   4536430066360547927##
                   Language.PureScript.Names.$trModule
                   Language.PureScript.Names.$tc'TypeOpName1
                   0#
                   Language.PureScript.Names.$tc'AnyOpName1) -}
deb0ed45237c5a27188cede16e346554
  $tc'TypeOpName1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Names.$tc'TypeOpName2) -}
41ee33e19164a45ccbbed9bf0095efbd
  $tc'TypeOpName2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TypeOpName"#) -}
00993c70a5fcfed547a2f92330b254f9
  $tc'UnusedIdent :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13153320181950415527##
                   14334064337862335378##
                   Language.PureScript.Names.$trModule
                   Language.PureScript.Names.$tc'UnusedIdent2
                   0#
                   Language.PureScript.Names.$tc'UnusedIdent1) -}
d32529042b4272bfed480f18ba509bbe
  $tc'UnusedIdent1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
cfccd701e8ebe581d0c819ebadb30165
  $tc'UnusedIdent2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Names.$tc'UnusedIdent3) -}
83ed37a1c7625e27d2d817ca136f52c2
  $tc'UnusedIdent3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'UnusedIdent"#) -}
2b561ed20f009ef9803db9dbcf1fcbb5
  $tc'ValOpName :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10474048290590632916##
                   12454719342981157543##
                   Language.PureScript.Names.$trModule
                   Language.PureScript.Names.$tc'ValOpName2
                   0#
                   Language.PureScript.Names.$tc'ValOpName1) -}
dfe84fc20bb0674518b14ee91fa87f23
  $tc'ValOpName1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
cc87fec8013d2fab729799867e56973e
  $tc'ValOpName2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Names.$tc'ValOpName3) -}
339d3b5e5649cc45d5c908a2d8e618af
  $tc'ValOpName3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ValOpName"#) -}
8e6fb49242cbbb4dc9272d179868e7ef
  $tc'ValueOpName :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4434024583765691960##
                   5686714670148741174##
                   Language.PureScript.Names.$trModule
                   Language.PureScript.Names.$tc'ValueOpName1
                   0#
                   Language.PureScript.Names.$tc'AnyOpName1) -}
e0bc1acf8126467c23c7710c1ed43ef4
  $tc'ValueOpName1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Names.$tc'ValueOpName2) -}
2cd2237735d4e4190fb2de88ab066d59
  $tc'ValueOpName2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ValueOpName"#) -}
7c7f3b76ac000fd8453c649a210a135d
  $tcIdent :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16395255107029855926##
                   3268919158421976262##
                   Language.PureScript.Names.$trModule
                   Language.PureScript.Names.$tcIdent1
                   0#
                   GHC.Types.krep$*) -}
13782a411cca6559055156479c99dd6a
  $tcIdent1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Names.$fToJSONIdent14) -}
150e9f69e383408e2fd266998fc7762c
  $tcModuleName :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11166703063560283294##
                   14473514314146877847##
                   Language.PureScript.Names.$trModule
                   Language.PureScript.Names.$tcModuleName1
                   0#
                   GHC.Types.krep$*) -}
44db3fce99b76f6ef5b9361b3655387c
  $tcModuleName1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Names.$tcModuleName2) -}
d13fe91c46047964a3c956a36eabded5
  $tcModuleName2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ModuleName"#) -}
b6affb21f2ea953f6950f4d4aa663327
  $tcName :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5032074310632771829##
                   542598064396659993##
                   Language.PureScript.Names.$trModule
                   Language.PureScript.Names.$tcName1
                   0#
                   GHC.Types.krep$*) -}
9e2e401dad4c81b045a0cd70bc5e72c3
  $tcName1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Names.$tcName2) -}
afa7accef9e969b9b3149547e0e315ac
  $tcName2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Name"#) -}
acd6d6e5ebb0a48dc204601f3883eef6
  $tcOpName :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15830929740805028614##
                   8521364591853502946##
                   Language.PureScript.Names.$trModule
                   Language.PureScript.Names.$tcOpName2
                   0#
                   Language.PureScript.Names.$tcOpName1) -}
1b69c9f19d11f12e6c5bf7b74eff6d6d
  $tcOpName1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
4ceb7348dfd4044f5573bbcedb424298
  $tcOpName2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Names.$tcOpName3) -}
be205fcf684439e6c7af9bf2deb6597f
  $tcOpName3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("OpName"#) -}
438032cd2d7b591fc276d187b47cc719
  $tcOpNameType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2639341770880536093##
                   2021015632444343104##
                   Language.PureScript.Names.$trModule
                   Language.PureScript.Names.$tcOpNameType1
                   0#
                   GHC.Types.krep$*) -}
2e74fa7041536b25a0a981d3476c4822
  $tcOpNameType1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Names.$tcOpNameType2) -}
d7e1a30ca792d35179651f459c262669
  $tcOpNameType2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("OpNameType"#) -}
4345ff36ca3dd4c26e763d9b46b03b44
  $tcProperName :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17045300449599780132##
                   4878322206949644746##
                   Language.PureScript.Names.$trModule
                   Language.PureScript.Names.$tcProperName2
                   0#
                   Language.PureScript.Names.$tcProperName1) -}
fa6bab92ebfe557cad6ef936e1ca4faa
  $tcProperName1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
7506012980f656b25207f649145a1e61
  $tcProperName2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Names.$tcProperName3) -}
63a94f4cb45a3ea8058ae3cac9f4afcf
  $tcProperName3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ProperName"#) -}
bf8e24c2c1168e9dc282e654ce96e2ff
  $tcProperNameType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13076756033574702559##
                   10798780203174358491##
                   Language.PureScript.Names.$trModule
                   Language.PureScript.Names.$tcProperNameType1
                   0#
                   GHC.Types.krep$*) -}
c0e3bd3e914ebed0de6cbda384afc332
  $tcProperNameType1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Names.$tcProperNameType2) -}
17ae3b8b7aeeee868dd2f2fda79bc0d3
  $tcProperNameType2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ProperNameType"#) -}
1d8a79caace1aeaddce86533bb6eb15f
  $tcQualified :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4063573572339862880##
                   13313641509854260228##
                   Language.PureScript.Names.$trModule
                   Language.PureScript.Names.$tcQualified1
                   0#
                   GHC.Types.krep$*Arr*) -}
b727985f228027c15bf734341f878d36
  $tcQualified1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Names.$tcQualified2) -}
6fa43218a99f380e7eb8e5c7634222e8
  $tcQualified2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Qualified"#) -}
d0930b03da2577a229beeed3f53576d4
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Language.PureScript.Names.$trModule3
                   Language.PureScript.Names.$trModule1) -}
bc79454cc1ea2412de0fecd160419045
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Names.$trModule2) -}
e705cf775f43a276d946d716db9a857a
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Language.PureScript.Names"#) -}
3c254cfa329d8bd3ea9ef9cce4d5e6df
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Names.$trModule4) -}
1abe032ece663e4ebc48b8f65ea9813f
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"#) -}
1b2ddf0c04464d2fa2588925f10c1966
  $w$c< ::
    GHC.Classes.Ord a =>
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> a
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> a
    -> GHC.Types.Bool
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,A,1*C1(C1(U)),A,A,A,A,A)><S,1*U><L,U><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Classes.Ord a)
                   (ww :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww1 :: a)
                   (ww2 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww3 :: a) ->
                 case ww of wild {
                   GHC.Base.Nothing
                   -> case ww2 of wild1 {
                        GHC.Base.Nothing -> GHC.Classes.< @ a w ww1 ww3
                        GHC.Base.Just ipv -> GHC.Types.True }
                   GHC.Base.Just a2
                   -> case ww2 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.False
                        GHC.Base.Just b1
                        -> case GHC.Classes.$fOrd[]_$ccompare
                                  @ (Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.Namespace)
                                  (Language.PureScript.Names.$fOrdProperName
                                     @ 'Language.PureScript.Names.Namespace)
                                  a2 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                  b1 `cast` (Language.PureScript.Names.N:ModuleName[0]) of wild2 {
                             GHC.Types.LT -> GHC.Types.True
                             GHC.Types.EQ -> GHC.Classes.< @ a w ww1 ww3
                             GHC.Types.GT -> GHC.Types.False } } }) -}
1b2ddf0c04464d2fa2588925f10c1966
  $w$c== ::
    GHC.Classes.Eq a =>
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> a
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> a
    -> GHC.Types.Bool
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S,1*U><L,U><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Classes.Eq a)
                   (ww :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww1 :: a)
                   (ww2 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww3 :: a) ->
                 case ww of wild {
                   GHC.Base.Nothing
                   -> case ww2 of wild1 {
                        GHC.Base.Nothing -> GHC.Classes.== @ a w ww1 ww3
                        GHC.Base.Just ipv -> GHC.Types.False }
                   GHC.Base.Just a1
                   -> case ww2 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.False
                        GHC.Base.Just b1
                        -> case GHC.Classes.$fEq[]_$c==
                                  @ (Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.Namespace)
                                  (Language.PureScript.Names.$fEqProperName
                                     @ 'Language.PureScript.Names.Namespace)
                                  a1 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                  b1 `cast` (Language.PureScript.Names.N:ModuleName[0]) of wild2 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True -> GHC.Classes.== @ a w ww1 ww3 } } }) -}
1b2ddf0c04464d2fa2588925f10c1966
  $w$ccompare ::
    GHC.Classes.Ord a =>
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> a
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> a
    -> GHC.Types.Ordering
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(C1(U)),A,A,A,A,A,A)><S,1*U><L,U><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Classes.Ord a)
                   (ww :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww1 :: a)
                   (ww2 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww3 :: a) ->
                 case ww of wild {
                   GHC.Base.Nothing
                   -> case ww2 of wild1 {
                        GHC.Base.Nothing -> GHC.Classes.compare @ a w ww1 ww3
                        GHC.Base.Just ipv -> GHC.Types.LT }
                   GHC.Base.Just a2
                   -> case ww2 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.GT
                        GHC.Base.Just b1
                        -> case GHC.Classes.$fOrd[]_$ccompare
                                  @ (Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.Namespace)
                                  (Language.PureScript.Names.$fOrdProperName
                                     @ 'Language.PureScript.Names.Namespace)
                                  a2 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                  b1 `cast` (Language.PureScript.Names.N:ModuleName[0]) of wild2 {
                             GHC.Types.LT -> GHC.Types.LT
                             GHC.Types.EQ -> GHC.Classes.compare @ a w ww1 ww3
                             GHC.Types.GT -> GHC.Types.GT } } }) -}
1b2ddf0c04464d2fa2588925f10c1966
  $w$crnf ::
    Control.DeepSeq.NFData a =>
    GHC.Base.Maybe Language.PureScript.Names.ModuleName -> a -> ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S),1*C1(U())><S,1*U><L,U>, Inline: [0],
     Unfolding: (\ @ a
                   (w :: Control.DeepSeq.NFData a)
                   (ww :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww1 :: a) ->
                 case ww of wild {
                   GHC.Base.Nothing
                   -> w `cast` (Control.DeepSeq.N:NFData[0] <a>_N) ww1
                   GHC.Base.Just x
                   -> case Language.PureScript.Names.$fNFDataModuleName_go
                             x `cast`
                             (Language.PureScript.Names.N:ModuleName[0]) of wild1 { () ->
                      w `cast` (Control.DeepSeq.N:NFData[0] <a>_N) ww1 } }) -}
1b2ddf0c04464d2fa2588925f10c1966
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> Language.PureScript.Names.ModuleName
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: Language.PureScript.Names.ModuleName)
                   (w1 :: GHC.Base.String) ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     GHC.CString.unpackAppendCString#
                       Language.PureScript.Names.$fShowModuleName5
                       (case w `cast`
                             (Language.PureScript.Names.N:ModuleName[0]) of wild {
                          [] -> GHC.CString.unpackAppendCString# GHC.Show.showList__4 x
                          : x1 xs
                          -> GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.showList__3
                               (GHC.CString.unpackAppendCString#
                                  Language.PureScript.Names.$fShowModuleName4
                                  (GHC.CString.unpackAppendCString#
                                     Language.PureScript.Names.$fShowModuleName3
                                     (case Data.Text.Show.$w$cshowsPrec
                                             x1
                                               `cast`
                                             (Language.PureScript.Names.N:ProperName[0]
                                                  <'Language.PureScript.Names.Namespace>_P)
                                             (GHC.CString.unpackAppendCString#
                                                Language.PureScript.Names.$fShowModuleName2
                                                (let {
                                                   lvl43 :: [GHC.Types.Char]
                                                   = GHC.Types.:
                                                       @ GHC.Types.Char
                                                       GHC.Show.showList__2
                                                       x
                                                 } in
                                                 letrec {
                                                   showl :: [Language.PureScript.Names.ProperName
                                                               'Language.PureScript.Names.Namespace]
                                                            -> GHC.Base.String
                                                     {- Arity: 1, Strictness: <S,1*U> -}
                                                   = \ (ds2 :: [Language.PureScript.Names.ProperName
                                                                  'Language.PureScript.Names.Namespace]) ->
                                                     case ds2 of wild1 {
                                                       [] -> lvl43
                                                       : y ys
                                                       -> GHC.Types.:
                                                            @ GHC.Types.Char
                                                            GHC.Show.showList__1
                                                            (GHC.CString.unpackAppendCString#
                                                               Language.PureScript.Names.$fShowModuleName4
                                                               (GHC.CString.unpackAppendCString#
                                                                  Language.PureScript.Names.$fShowModuleName3
                                                                  (case Data.Text.Show.$w$cshowsPrec
                                                                          y `cast`
                                                                          (Language.PureScript.Names.N:ProperName[0]
                                                                               <'Language.PureScript.Names.Namespace>_P)
                                                                          (GHC.CString.unpackAppendCString#
                                                                             Language.PureScript.Names.$fShowModuleName2
                                                                             (showl
                                                                                ys)) of ww1 { (#,#) ww2 ww3 ->
                                                                   GHC.Types.:
                                                                     @ GHC.Types.Char
                                                                     ww2
                                                                     ww3 }))) }
                                                 } in
                                                 showl xs)) of ww1 { (#,#) ww2 ww3 ->
                                      GHC.Types.: @ GHC.Types.Char ww2 ww3 }))) })
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT -> p w1
                   1#
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 w1)) }) -}
d04047edf96c18708b7b5f72cb565394
  $w$cshowsPrec1 ::
    GHC.Prim.Int# -> Language.PureScript.Names.Name -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: Language.PureScript.Names.Name) ->
                 case w of wild {
                   Language.PureScript.Names.IdentName b1
                   -> let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = Language.PureScript.Names.$fShowIdent_$cshowsPrec
                            Language.PureScript.Names.$fShowIdent7
                            b1
                      } in
                      case GHC.Prim.>=# ww 11# of lwild {
                        DEFAULT
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             Language.PureScript.Names.$fShowName18
                             (g x)
                        1#
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Language.PureScript.Names.$fShowName18
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))) }
                   Language.PureScript.Names.ValOpName b1
                   -> case GHC.Prim.>=# ww 11# of lwild {
                        DEFAULT
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             Language.PureScript.Names.$fShowName16
                             (Language.PureScript.Names.$w$cshowsPrec3
                                @ 'Language.PureScript.Names.ValueOpName
                                11#
                                b1
                                x)
                        1#
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Language.PureScript.Names.$fShowName16
                                (Language.PureScript.Names.$w$cshowsPrec3
                                   @ 'Language.PureScript.Names.ValueOpName
                                   11#
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))) }
                   Language.PureScript.Names.TyName b1
                   -> case GHC.Prim.>=# ww 11# of lwild {
                        DEFAULT
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             Language.PureScript.Names.$fShowName12
                             (Language.PureScript.Names.$w$cshowsPrec2
                                @ 'Language.PureScript.Names.TypeName
                                11#
                                b1
                                x)
                        1#
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Language.PureScript.Names.$fShowName12
                                (Language.PureScript.Names.$w$cshowsPrec2
                                   @ 'Language.PureScript.Names.TypeName
                                   11#
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))) }
                   Language.PureScript.Names.TyOpName b1
                   -> case GHC.Prim.>=# ww 11# of lwild {
                        DEFAULT
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             Language.PureScript.Names.$fShowName10
                             (Language.PureScript.Names.$w$cshowsPrec3
                                @ 'Language.PureScript.Names.TypeOpName
                                11#
                                b1
                                x)
                        1#
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Language.PureScript.Names.$fShowName10
                                (Language.PureScript.Names.$w$cshowsPrec3
                                   @ 'Language.PureScript.Names.TypeOpName
                                   11#
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))) }
                   Language.PureScript.Names.DctorName b1
                   -> case GHC.Prim.>=# ww 11# of lwild {
                        DEFAULT
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             Language.PureScript.Names.$fShowName8
                             (Language.PureScript.Names.$w$cshowsPrec2
                                @ 'Language.PureScript.Names.ConstructorName
                                11#
                                b1
                                x)
                        1#
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Language.PureScript.Names.$fShowName8
                                (Language.PureScript.Names.$w$cshowsPrec2
                                   @ 'Language.PureScript.Names.ConstructorName
                                   11#
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))) }
                   Language.PureScript.Names.TyClassName b1
                   -> case GHC.Prim.>=# ww 11# of lwild {
                        DEFAULT
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             Language.PureScript.Names.$fShowName6
                             (Language.PureScript.Names.$w$cshowsPrec2
                                @ 'Language.PureScript.Names.ClassName
                                11#
                                b1
                                x)
                        1#
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Language.PureScript.Names.$fShowName6
                                (Language.PureScript.Names.$w$cshowsPrec2
                                   @ 'Language.PureScript.Names.ClassName
                                   11#
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))) }
                   Language.PureScript.Names.ModName b1
                   -> case GHC.Prim.>=# ww 11# of lwild {
                        DEFAULT
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             Language.PureScript.Names.$fShowName4
                             (Language.PureScript.Names.$w$cshowsPrec 11# b1 x)
                        1#
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Language.PureScript.Names.$fShowName4
                                (Language.PureScript.Names.$w$cshowsPrec
                                   11#
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))) }
                   Language.PureScript.Names.KiName b1
                   -> case GHC.Prim.>=# ww 11# of lwild {
                        DEFAULT
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             Language.PureScript.Names.$fShowName2
                             (Language.PureScript.Names.$w$cshowsPrec2
                                @ 'Language.PureScript.Names.KindName
                                11#
                                b1
                                x)
                        1#
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Language.PureScript.Names.$fShowName2
                                (Language.PureScript.Names.$w$cshowsPrec2
                                   @ 'Language.PureScript.Names.KindName
                                   11#
                                   b1
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))) } }) -}
a7268334e0b909381550b9329cb80fcc
  $w$cshowsPrec2 ::
    GHC.Prim.Int#
    -> Language.PureScript.Names.ProperName a
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><L,1*U(U,U,U)><L,U>, Inline: [0],
     Unfolding: (\ @ a :: Language.PureScript.Names.ProperNameType
                   (ww :: GHC.Prim.Int#)
                   (w :: Language.PureScript.Names.ProperName a)
                   (w1 :: GHC.Base.String) ->
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> GHC.CString.unpackAppendCString#
                        Language.PureScript.Names.$fShowModuleName4
                        (GHC.CString.unpackAppendCString#
                           Language.PureScript.Names.$fShowModuleName3
                           (case Data.Text.Show.$w$cshowsPrec
                                   w `cast` (Language.PureScript.Names.N:ProperName[0] <a>_P)
                                   (GHC.CString.unpackAppendCString#
                                      Language.PureScript.Names.$fShowModuleName2
                                      w1) of ww1 { (#,#) ww2 ww3 ->
                            GHC.Types.: @ GHC.Types.Char ww2 ww3 }))
                   1#
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.CString.unpackAppendCString#
                           Language.PureScript.Names.$fShowModuleName4
                           (GHC.CString.unpackAppendCString#
                              Language.PureScript.Names.$fShowModuleName3
                              (case Data.Text.Show.$w$cshowsPrec
                                      w `cast` (Language.PureScript.Names.N:ProperName[0] <a>_P)
                                      (GHC.CString.unpackAppendCString#
                                         Language.PureScript.Names.$fShowModuleName2
                                         (GHC.Types.:
                                            @ GHC.Types.Char
                                            GHC.Show.$fShow(,)2
                                            w1)) of ww1 { (#,#) ww2 ww3 ->
                               GHC.Types.: @ GHC.Types.Char ww2 ww3 }))) }) -}
9af301165f72160425c5e0dde6525338
  $w$cshowsPrec3 ::
    GHC.Prim.Int#
    -> Language.PureScript.Names.OpName a
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><L,1*U(U,U,U)><L,U>, Inline: [0],
     Unfolding: (\ @ a :: Language.PureScript.Names.OpNameType
                   (ww :: GHC.Prim.Int#)
                   (w :: Language.PureScript.Names.OpName a)
                   (w1 :: GHC.Base.String) ->
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> GHC.CString.unpackAppendCString#
                        Language.PureScript.Names.$fShowName15
                        (GHC.CString.unpackAppendCString#
                           Language.PureScript.Names.$fShowName14
                           (case Data.Text.Show.$w$cshowsPrec
                                   w `cast` (Language.PureScript.Names.N:OpName[0] <a>_P)
                                   (GHC.CString.unpackAppendCString#
                                      Language.PureScript.Names.$fShowModuleName2
                                      w1) of ww1 { (#,#) ww2 ww3 ->
                            GHC.Types.: @ GHC.Types.Char ww2 ww3 }))
                   1#
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.CString.unpackAppendCString#
                           Language.PureScript.Names.$fShowName15
                           (GHC.CString.unpackAppendCString#
                              Language.PureScript.Names.$fShowName14
                              (case Data.Text.Show.$w$cshowsPrec
                                      w `cast` (Language.PureScript.Names.N:OpName[0] <a>_P)
                                      (GHC.CString.unpackAppendCString#
                                         Language.PureScript.Names.$fShowModuleName2
                                         (GHC.Types.:
                                            @ GHC.Types.Char
                                            GHC.Show.$fShow(,)2
                                            w1)) of ww1 { (#,#) ww2 ww3 ->
                               GHC.Types.: @ GHC.Types.Char ww2 ww3 }))) }) -}
1b2ddf0c04464d2fa2588925f10c1966
  $w$cshowsPrec4 ::
    GHC.Show.Show a =>
    GHC.Prim.Int#
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> a
    -> GHC.Show.ShowS
  {- Arity: 4,
     Strictness: <L,1*U(1*C1(C1(C(U))),A,A)><S,U><L,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Show.Show a)
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww2 :: a) ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.$fShowMaybe_$cshowsPrec
                       @ Language.PureScript.Names.ModuleName
                       Language.PureScript.Names.$fShowModuleName
                       Language.PureScript.Names.$fShowIdent7
                       ww1
                 } in
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.showsPrec
                       @ a
                       w
                       Language.PureScript.Names.$fShowIdent7
                       ww2
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> \ (x :: GHC.Base.String) ->
                      GHC.CString.unpackAppendCString#
                        Language.PureScript.Names.$fShowQualified1
                        (f (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 (g x)))
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.CString.unpackAppendCString#
                           Language.PureScript.Names.$fShowQualified1
                           (f (GHC.Types.:
                                 @ GHC.Types.Char
                                 GHC.Show.showSpace1
                                 (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))))) }) -}
1b2ddf0c04464d2fa2588925f10c1966
  $w$ctoEncoding ::
    Data.Aeson.Types.ToJSON.ToJSON a =>
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> a -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 3,
     Strictness: <L,1*U(A,1*C1(C(C(C1(U(U,U))))),A,A)><L,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: Data.Aeson.Types.ToJSON.ToJSON a)
                   (ww :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww1 :: a) ->
                 let {
                   e :: Data.Aeson.Encoding.Internal.Encoding'
                          Data.Aeson.Types.Internal.Value
                   = case ww of wild {
                       GHC.Base.Nothing
                       -> Data.Aeson.Encoding.Builder.null_1
                            `cast`
                          ((forall (r :: <*>_N).
                            <Data.ByteString.Builder.Internal.BuildStep r>_R
                            ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                            ->_R Sym (GHC.Types.N:IO[0]
                                          <Data.ByteString.Builder.Internal.BuildSignal
                                             r>_R)) ; (Sym (Data.ByteString.Builder.Internal.N:Builder[0]) ; Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                                                                                      <Data.Aeson.Types.Internal.Value>_P)))
                       GHC.Base.Just a2
                       -> case a2
                                 `cast`
                               (Language.PureScript.Names.N:ModuleName[0]) of wild1 {
                            []
                            -> Data.Aeson.Encoding.Builder.emptyArray_1
                                 `cast`
                               ((forall (r :: <*>_N).
                                 <Data.ByteString.Builder.Internal.BuildStep r>_R
                                 ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                                 ->_R Sym (GHC.Types.N:IO[0]
                                               <Data.ByteString.Builder.Internal.BuildSignal
                                                  r>_R)) ; (Sym (Data.ByteString.Builder.Internal.N:Builder[0]) ; Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                                                                                           <Data.Aeson.Types.Internal.Value>_P)))
                            : x xs
                            -> (\ @ r ->
                                let {
                                  f :: Data.ByteString.Builder.Internal.BuildStep r
                                       -> Data.ByteString.Builder.Internal.BuildStep r
                                  = case x `cast`
                                         (Language.PureScript.Names.N:ProperName[0]
                                              <'Language.PureScript.Names.Namespace>_P) of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                                    (Data.Aeson.Encoding.Builder.encodeToBuilder
                                       (Data.Aeson.Types.Internal.String dt))
                                      `cast`
                                    (Data.ByteString.Builder.Internal.N:Builder[0])
                                      @ r }
                                } in
                                let {
                                  f1 :: Data.ByteString.Builder.Internal.BuildStep r
                                        -> Data.ByteString.Builder.Internal.BuildStep r
                                  = (Language.PureScript.Names.$fToJSONModuleName_go xs)
                                      `cast`
                                    (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                         <Data.Aeson.Types.Internal.Value>_P ; Data.ByteString.Builder.Internal.N:Builder[0])
                                      @ r
                                } in
                                (\ (x1 :: Data.ByteString.Builder.Internal.BuildStep r) ->
                                 let {
                                   w1 :: Data.ByteString.Builder.Internal.BuildStep r
                                   = f (f1
                                          (Data.Aeson.Encoding.Internal.closeBracket1 @ r x1)
                                            `cast`
                                          (<Data.ByteString.Builder.Internal.BufferRange>_R
                                           ->_R Sym (GHC.Types.N:IO[0]
                                                         <Data.ByteString.Builder.Internal.BuildSignal
                                                            r>_R)))
                                 } in
                                 \ (w2 :: Data.ByteString.Builder.Internal.BufferRange)
                                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                 case w2 of ww2 { Data.ByteString.Builder.Internal.BufferRange ww3 ww4 ->
                                 Data.Aeson.Encoding.Internal.$wopenBracket @ r w1 ww3 ww4 w3 })
                                  `cast`
                                (<Data.ByteString.Builder.Internal.BuildStep r>_R
                                 ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                                 ->_R Sym (GHC.Types.N:IO[0]
                                               <Data.ByteString.Builder.Internal.BuildSignal r>_R)))
                                 `cast`
                               (Sym (Data.ByteString.Builder.Internal.N:Builder[0]) ; Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                                                               <Data.Aeson.Types.Internal.Value>_P)) } }
                 } in
                 let {
                   e1 :: Data.Aeson.Encoding.Internal.Encoding
                   = Data.Aeson.Types.ToJSON.toEncoding @ a w ww1
                 } in
                 (\ @ r (x :: Data.ByteString.Builder.Internal.BuildStep r) ->
                  let {
                    w1 :: Data.ByteString.Builder.Internal.BuildStep r
                    = e `cast`
                      (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                           <Data.Aeson.Types.Internal.Value>_P ; Data.ByteString.Builder.Internal.N:Builder[0])
                        @ r
                        (let {
                           w2 :: Data.ByteString.Builder.Internal.BuildStep r
                           = e1
                               `cast`
                             (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                  <Data.Aeson.Types.Internal.Value>_P ; Data.ByteString.Builder.Internal.N:Builder[0])
                               @ r
                               (Data.Aeson.Encoding.Internal.closeBracket1 @ r x)
                                 `cast`
                               (<Data.ByteString.Builder.Internal.BufferRange>_R
                                ->_R Sym (GHC.Types.N:IO[0]
                                              <Data.ByteString.Builder.Internal.BuildSignal r>_R))
                         } in
                         (\ (w3 :: Data.ByteString.Builder.Internal.BufferRange)
                            (w4 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                          case w3 of ww2 { Data.ByteString.Builder.Internal.BufferRange ww3 ww4 ->
                          Data.Aeson.Encoding.Internal.$wcomma @ r w2 ww3 ww4 w4 })
                           `cast`
                         (<Data.ByteString.Builder.Internal.BufferRange>_R
                          ->_R Sym (GHC.Types.N:IO[0]
                                        <Data.ByteString.Builder.Internal.BuildSignal r>_R)))
                  } in
                  \ (w2 :: Data.ByteString.Builder.Internal.BufferRange)
                    (w3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                  case w2 of ww2 { Data.ByteString.Builder.Internal.BufferRange ww3 ww4 ->
                  Data.Aeson.Encoding.Internal.$wopenBracket @ r w1 ww3 ww4 w3 })
                   `cast`
                 ((forall (r :: <*>_N).
                   <Data.ByteString.Builder.Internal.BuildStep r>_R
                   ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <Data.ByteString.Builder.Internal.BuildSignal
                                    r>_R)) ; (Sym (Data.ByteString.Builder.Internal.N:Builder[0]) ; Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                                                                             <Data.Aeson.Types.Internal.Value>_P)))) -}
1b2ddf0c04464d2fa2588925f10c1966
  $w$ctoJSON ::
    Language.PureScript.Names.ModuleName
    -> (# Data.Aeson.Types.Internal.Array #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ (w :: Language.PureScript.Names.ModuleName) ->
                 case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                             Data.Vector.Vector Data.Aeson.Types.Internal.Value #)
                        (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case GHC.Prim.newArray#
                                @ Data.Aeson.Types.Internal.Value
                                @ (Control.Monad.Primitive.PrimState
                                     (GHC.ST.ST GHC.Prim.RealWorld))
                                0#
                                (Data.Vector.Mutable.uninitialised
                                   @ Data.Aeson.Types.Internal.Value)
                                s1
                                  `cast`
                                (GHC.Prim.State#
                                   (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                             <GHC.Prim.RealWorld>_N)))_R of ds2 { (#,#) ipv ipv1 ->
                         Language.PureScript.Names.$fToJSONModuleName_$s$wfoldlM_loop
                           ipv
                             `cast`
                           (GHC.Prim.State#
                              (Control.Monad.Primitive.D:R:PrimStateST[0]
                                   <GHC.Prim.RealWorld>_N))_R
                           (GHC.Base.map
                              @ (Language.PureScript.Names.ProperName
                                   'Language.PureScript.Names.Namespace)
                              @ Data.Aeson.Types.Internal.Value
                              Data.Aeson.Types.Internal.$WString
                                `cast`
                              (Sym (Language.PureScript.Names.N:ProperName[0]
                                        <'Language.PureScript.Names.Namespace>_P)
                               ->_R <Data.Aeson.Types.Internal.Value>_R)
                              w `cast` (Language.PureScript.Names.N:ModuleName[0]))
                           0#
                           ipv1
                             `cast`
                           (GHC.Prim.MutableArray#
                              (Control.Monad.Primitive.D:R:PrimStateST[0] <GHC.Prim.RealWorld>_N)
                              <Data.Aeson.Types.Internal.Value>_R)_R
                           0#
                           0# }) of ds1 { (#,#) ipv1 ipv2 ->
                 case ipv2 of dt { Data.Vector.Vector ipv ipv4 ipv5 ->
                 (# dt #) } }) -}
1b2ddf0c04464d2fa2588925f10c1966
  $w$ctoJSON1 ::
    Data.Aeson.Types.ToJSON.ToJSON a =>
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> a -> (# Data.Aeson.Types.Internal.Array #)
  {- Arity: 3, Strictness: <L,1*U(1*C1(U),A,A,A)><L,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: Data.Aeson.Types.ToJSON.ToJSON a)
                   (ww :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww1 :: a) ->
                 case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                             Data.Vector.Vector Data.Aeson.Types.Internal.Value #)
                        (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case GHC.Prim.newArray#
                                @ Data.Aeson.Types.Internal.Value
                                @ (Control.Monad.Primitive.PrimState
                                     (GHC.ST.ST GHC.Prim.RealWorld))
                                2#
                                (Data.Vector.Mutable.uninitialised
                                   @ Data.Aeson.Types.Internal.Value)
                                s1
                                  `cast`
                                (GHC.Prim.State#
                                   (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                             <GHC.Prim.RealWorld>_N)))_R of ds2 { (#,#) ipv ipv1 ->
                         case GHC.Prim.writeArray#
                                @ (Control.Monad.Primitive.PrimState
                                     (GHC.ST.ST GHC.Prim.RealWorld))
                                @ Data.Aeson.Types.Internal.Value
                                ipv1
                                0#
                                (case ww of wild {
                                   GHC.Base.Nothing -> Data.Aeson.Types.Internal.Null
                                   GHC.Base.Just a2
                                   -> case GHC.Magic.runRW#
                                             @ ('GHC.Types.TupleRep
                                                  '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                                             @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                  Data.Vector.Vector
                                                    Data.Aeson.Types.Internal.Value #)
                                             (\ (s2 :: GHC.Prim.State#
                                                         GHC.Prim.RealWorld)[OneShot] ->
                                              case GHC.Prim.newArray#
                                                     @ Data.Aeson.Types.Internal.Value
                                                     @ (Control.Monad.Primitive.PrimState
                                                          (GHC.ST.ST GHC.Prim.RealWorld))
                                                     0#
                                                     (Data.Vector.Mutable.uninitialised
                                                        @ Data.Aeson.Types.Internal.Value)
                                                     s2
                                                       `cast`
                                                     (GHC.Prim.State#
                                                        (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                                  <GHC.Prim.RealWorld>_N)))_R of ds1 { (#,#) ipv2 ipv3 ->
                                              Language.PureScript.Names.$fToJSONModuleName_$s$wfoldlM_loop
                                                ipv2
                                                  `cast`
                                                (GHC.Prim.State#
                                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                        <GHC.Prim.RealWorld>_N))_R
                                                (GHC.Base.map
                                                   @ (Language.PureScript.Names.ProperName
                                                        'Language.PureScript.Names.Namespace)
                                                   @ Data.Aeson.Types.Internal.Value
                                                   Data.Aeson.Types.Internal.$WString
                                                     `cast`
                                                   (Sym (Language.PureScript.Names.N:ProperName[0]
                                                             <'Language.PureScript.Names.Namespace>_P)
                                                    ->_R <Data.Aeson.Types.Internal.Value>_R)
                                                   a2
                                                     `cast`
                                                   (Language.PureScript.Names.N:ModuleName[0]))
                                                0#
                                                ipv3
                                                  `cast`
                                                (GHC.Prim.MutableArray#
                                                   (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                        <GHC.Prim.RealWorld>_N)
                                                   <Data.Aeson.Types.Internal.Value>_R)_R
                                                0#
                                                0# }) of ds1 { (#,#) ipv2 ipv3 ->
                                      case ipv3 of dt { Data.Vector.Vector ipv4 ipv5 ipv6 ->
                                      Data.Aeson.Types.Internal.Array dt } } })
                                ipv of s'# { DEFAULT ->
                         case GHC.Prim.writeArray#
                                @ (Control.Monad.Primitive.PrimState
                                     (GHC.ST.ST GHC.Prim.RealWorld))
                                @ Data.Aeson.Types.Internal.Value
                                ipv1
                                1#
                                (Data.Aeson.Types.ToJSON.toJSON @ a w ww1)
                                s'# of s'#1 { DEFAULT ->
                         case GHC.Prim.unsafeFreezeArray#
                                @ (Control.Monad.Primitive.PrimState
                                     (GHC.ST.ST GHC.Prim.RealWorld))
                                @ Data.Aeson.Types.Internal.Value
                                ipv1
                                s'#1 of ds1 { (#,#) ipv2 ipv3 ->
                         (# ipv2
                              `cast`
                            (GHC.Prim.State#
                               (Control.Monad.Primitive.D:R:PrimStateST[0]
                                    <GHC.Prim.RealWorld>_N))_R,
                            Data.Vector.Vector
                              @ Data.Aeson.Types.Internal.Value
                              0#
                              2#
                              ipv3 #) } } } }) of ds1 { (#,#) ipv1 ipv2 ->
                 case ipv2 of dt { Data.Vector.Vector ipv ipv4 ipv5 ->
                 (# dt #) } }) -}
1b2ddf0c04464d2fa2588925f10c1966
  $w$ctraverse ::
    GHC.Base.Applicative f =>
    (a -> f b)
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> a
    -> f (Language.PureScript.Names.Qualified b)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(S(C(C(S))L)LLLLL),1*U(1*U(1*C1(C1(U)),A),A,A,A,A,A)><L,1*C1(U)><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ f :: * -> *
                   @ a
                   @ b
                   (w :: GHC.Base.Applicative f)
                   (w1 :: a -> f b)
                   (ww :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww1 :: a) ->
                 GHC.Base.fmap
                   @ f
                   (GHC.Base.$p1Applicative @ f w)
                   @ b
                   @ (Language.PureScript.Names.Qualified b)
                   (\ (b2 :: b) -> Language.PureScript.Names.Qualified @ b ww b2)
                   (w1 ww1)) -}
76eac6648b09582d620f0e629487953f
  $wdisqualifyFor ::
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> a
    -> GHC.Base.Maybe a
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><S,1*U><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww1 :: a) ->
                 case w of wild {
                   GHC.Base.Nothing
                   -> case ww of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Just @ a ww1
                        GHC.Base.Just ipv -> GHC.Base.Nothing @ a }
                   GHC.Base.Just a1
                   -> case ww of wild1 {
                        GHC.Base.Nothing -> GHC.Base.Nothing @ a
                        GHC.Base.Just b1
                        -> case GHC.Classes.$fEq[]_$c==
                                  @ (Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.Namespace)
                                  (Language.PureScript.Names.$fEqProperName
                                     @ 'Language.PureScript.Names.Namespace)
                                  a1 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                  b1 `cast` (Language.PureScript.Names.N:ModuleName[0]) of wild2 {
                             GHC.Types.False -> GHC.Base.Nothing @ a
                             GHC.Types.True -> GHC.Base.Just @ a ww1 } } }) -}
ff9ce7d0795fbda22203883a264e80eb
  $wshowOp ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int# -> GHC.Prim.Int# -> Data.Text.Internal.Text
  {- Arity: 3, Strictness: <L,U><S,U><S,U>, Inline: [0] -}
02ab3a6f36d7422239251bb338a2cb21
  $wshowQualified ::
    (a -> Data.Text.Internal.Text)
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> a
    -> Data.Text.Internal.Text
  {- Arity: 3, Strictness: <C(S),1*C1(U(U,U,U))><S,1*U><L,U>,
     Inline: [0] -}
f86642bfe4dab016935c382e9113a9be
  $wsplitProperNames ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> [Language.PureScript.Names.ProperName a]
  {- Arity: 3, Strictness: <L,U><L,U><S,U>, Inline: [0],
     Unfolding: (\ @ a :: Language.PureScript.Names.ProperNameType
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#) ->
                 let {
                   exit :: GHC.Prim.Int#
                           -> GHC.Prim.Int# -> [Language.PureScript.Names.ProperName a]
                     <join 2> {- Arity: 2, Strictness: <S,U><S,U> -}
                   = \ (ww3 :: GHC.Prim.Int#)[OneShot]
                       (ww4 :: GHC.Prim.Int#)[OneShot] ->
                     Language.PureScript.Names.moduleNameFromString3
                       @ a
                       ww
                       (GHC.Prim.+# ww1 ww3)
                       (GHC.Prim.-# ww2 ww4)
                 } in
                 let {
                   exit1 :: GHC.Prim.Int#
                            -> GHC.Prim.Int# -> [Language.PureScript.Names.ProperName a]
                     <join 2> {- Arity: 2, Strictness: <S,U><S,U> -}
                   = \ (ww3 :: GHC.Prim.Int#)[OneShot]
                       (ww4 :: GHC.Prim.Int#)[OneShot] ->
                     Language.PureScript.Names.moduleNameFromString3
                       @ a
                       ww
                       (GHC.Prim.+# ww1 ww3)
                       (GHC.Prim.-# ww2 ww4)
                 } in
                 let {
                   exit2 :: GHC.Prim.Int#
                            -> GHC.Prim.Int# -> [Language.PureScript.Names.ProperName a]
                     <join 2> {- Arity: 2, Strictness: <S,U><S,U> -}
                   = \ (ww3 :: GHC.Prim.Int#)[OneShot]
                       (ww4 :: GHC.Prim.Int#)[OneShot] ->
                     Language.PureScript.Names.moduleNameFromString3
                       @ a
                       ww
                       (GHC.Prim.+# ww1 ww3)
                       (GHC.Prim.-# ww2 ww4)
                 } in
                 letrec {
                   $wloop :: GHC.Prim.Int#
                             -> GHC.Prim.Int# -> [Language.PureScript.Names.ProperName a]
                     <join 2> {- Arity: 2, Strictness: <L,U><S,U>, Inline: [0] -}
                   = \ (ww3 :: GHC.Prim.Int#) (ww4 :: GHC.Prim.Int#) ->
                     case GHC.Prim.>=# ww4 ww2 of lwild {
                       DEFAULT
                       -> let {
                            j :: GHC.Prim.Int# = GHC.Prim.+# ww1 ww3
                          } in
                          case GHC.Prim.indexWord16Array# ww j of r# { DEFAULT ->
                          case GHC.Prim.ltWord# r# 55296## of lwild1 {
                            DEFAULT
                            -> case GHC.Prim.gtWord# r# 56319## of lwild2 {
                                 DEFAULT
                                 -> case GHC.Prim.indexWord16Array#
                                           ww
                                           (GHC.Prim.+# j 1#) of r#1 { DEFAULT ->
                                    case GHC.Prim.chr#
                                           (GHC.Prim.+#
                                              (GHC.Prim.+#
                                                 (GHC.Prim.uncheckedIShiftL#
                                                    (GHC.Prim.-# (GHC.Prim.word2Int# r#) 55296#)
                                                    10#)
                                                 (GHC.Prim.-# (GHC.Prim.word2Int# r#1) 56320#))
                                              65536#) of wild {
                                      DEFAULT -> exit ww3 ww4
                                      '.'# -> $wloop (GHC.Prim.+# ww3 2#) (GHC.Prim.+# ww4 2#) } }
                                 1#
                                 -> case GHC.Prim.chr# (GHC.Prim.word2Int# r#) of wild {
                                      DEFAULT -> exit1 ww3 ww4
                                      '.'# -> $wloop (GHC.Prim.+# ww3 1#) (GHC.Prim.+# ww4 1#) } }
                            1#
                            -> case GHC.Prim.chr# (GHC.Prim.word2Int# r#) of wild {
                                 DEFAULT -> exit2 ww3 ww4
                                 '.'# -> $wloop (GHC.Prim.+# ww3 1#) (GHC.Prim.+# ww4 1#) } } }
                       1# -> Language.PureScript.Names.moduleNameFromString2 @ a }
                 } in
                 $wloop 0# 0#) -}
bad3562aa6138b6192713ac281080869
  data Ident
    = Ident Data.Text.Internal.Text
    | GenIdent (GHC.Base.Maybe Data.Text.Internal.Text)
               GHC.Integer.Type.Integer
    | UnusedIdent
1b2ddf0c04464d2fa2588925f10c1966
  newtype ModuleName
    = ModuleName [Language.PureScript.Names.ProperName
                    'Language.PureScript.Names.Namespace]
d04047edf96c18708b7b5f72cb565394
  data Name
    = IdentName Language.PureScript.Names.Ident
    | ValOpName (Language.PureScript.Names.OpName
                   'Language.PureScript.Names.ValueOpName)
    | TyName (Language.PureScript.Names.ProperName
                'Language.PureScript.Names.TypeName)
    | TyOpName (Language.PureScript.Names.OpName
                  'Language.PureScript.Names.TypeOpName)
    | DctorName (Language.PureScript.Names.ProperName
                   'Language.PureScript.Names.ConstructorName)
    | TyClassName (Language.PureScript.Names.ProperName
                     'Language.PureScript.Names.ClassName)
    | ModName Language.PureScript.Names.ModuleName
    | KiName (Language.PureScript.Names.ProperName
                'Language.PureScript.Names.KindName)
9af301165f72160425c5e0dde6525338
  type role OpName phantom
  newtype OpName (a :: Language.PureScript.Names.OpNameType)
    = OpName {runOpName :: Data.Text.Internal.Text}
27b253be8365238664cd4538e7da0a1a
  data OpNameType = ValueOpName | TypeOpName | AnyOpName
a7268334e0b909381550b9329cb80fcc
  type role ProperName phantom
  newtype ProperName (a :: Language.PureScript.Names.ProperNameType)
    = ProperName {runProperName :: Data.Text.Internal.Text}
a7268334e0b909381550b9329cb80fcc
  data ProperNameType
    = TypeName | ConstructorName | ClassName | KindName | Namespace
1b2ddf0c04464d2fa2588925f10c1966
  data Qualified a
    = Qualified (GHC.Base.Maybe Language.PureScript.Names.ModuleName) a
bad3562aa6138b6192713ac281080869
  axiom Language.PureScript.Names.Rep_Ident::
      GHC.Generics.Rep Language.PureScript.Names.Ident
        = GHC.Generics.D1
            ('GHC.Generics.MetaData
               "Ident"
               "Language.PureScript.Names"
               "purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"
               'GHC.Types.False)
            (GHC.Generics.C1
               ('GHC.Generics.MetaCons
                  "Ident" 'GHC.Generics.PrefixI 'GHC.Types.False)
               (GHC.Generics.S1
                  ('GHC.Generics.MetaSel
                     'GHC.Base.Nothing
                     'GHC.Generics.NoSourceUnpackedness
                     'GHC.Generics.NoSourceStrictness
                     'GHC.Generics.DecidedLazy)
                  (GHC.Generics.Rec0 Data.Text.Internal.Text))
             GHC.Generics.:+: (GHC.Generics.C1
                                 ('GHC.Generics.MetaCons
                                    "GenIdent" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                 (GHC.Generics.S1
                                    ('GHC.Generics.MetaSel
                                       'GHC.Base.Nothing
                                       'GHC.Generics.NoSourceUnpackedness
                                       'GHC.Generics.NoSourceStrictness
                                       'GHC.Generics.DecidedLazy)
                                    (GHC.Generics.Rec0 (GHC.Base.Maybe Data.Text.Internal.Text))
                                  GHC.Generics.:*: GHC.Generics.S1
                                                     ('GHC.Generics.MetaSel
                                                        'GHC.Base.Nothing
                                                        'GHC.Generics.NoSourceUnpackedness
                                                        'GHC.Generics.NoSourceStrictness
                                                        'GHC.Generics.DecidedLazy)
                                                     (GHC.Generics.Rec0 GHC.Integer.Type.Integer))
                               GHC.Generics.:+: GHC.Generics.C1
                                                  ('GHC.Generics.MetaCons
                                                     "UnusedIdent"
                                                     'GHC.Generics.PrefixI
                                                     'GHC.Types.False)
                                                  GHC.Generics.U1))
1b2ddf0c04464d2fa2588925f10c1966
  axiom Language.PureScript.Names.Rep_ModuleName::
      GHC.Generics.Rep Language.PureScript.Names.ModuleName
        = GHC.Generics.D1
            ('GHC.Generics.MetaData
               "ModuleName"
               "Language.PureScript.Names"
               "purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"
               'GHC.Types.True)
            (GHC.Generics.C1
               ('GHC.Generics.MetaCons
                  "ModuleName" 'GHC.Generics.PrefixI 'GHC.Types.False)
               (GHC.Generics.S1
                  ('GHC.Generics.MetaSel
                     'GHC.Base.Nothing
                     'GHC.Generics.NoSourceUnpackedness
                     'GHC.Generics.NoSourceStrictness
                     'GHC.Generics.DecidedLazy)
                  (GHC.Generics.Rec0
                     [Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.Namespace])))
d04047edf96c18708b7b5f72cb565394
  axiom Language.PureScript.Names.Rep_Name::
      GHC.Generics.Rep Language.PureScript.Names.Name
        = GHC.Generics.D1
            ('GHC.Generics.MetaData
               "Name"
               "Language.PureScript.Names"
               "purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"
               'GHC.Types.False)
            (((GHC.Generics.C1
                 ('GHC.Generics.MetaCons
                    "IdentName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                 (GHC.Generics.S1
                    ('GHC.Generics.MetaSel
                       'GHC.Base.Nothing
                       'GHC.Generics.NoSourceUnpackedness
                       'GHC.Generics.NoSourceStrictness
                       'GHC.Generics.DecidedLazy)
                    (GHC.Generics.Rec0 Language.PureScript.Names.Ident))
               GHC.Generics.:+: GHC.Generics.C1
                                  ('GHC.Generics.MetaCons
                                     "ValOpName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                  (GHC.Generics.S1
                                     ('GHC.Generics.MetaSel
                                        'GHC.Base.Nothing
                                        'GHC.Generics.NoSourceUnpackedness
                                        'GHC.Generics.NoSourceStrictness
                                        'GHC.Generics.DecidedLazy)
                                     (GHC.Generics.Rec0
                                        (Language.PureScript.Names.OpName
                                           'Language.PureScript.Names.ValueOpName))))
              GHC.Generics.:+: (GHC.Generics.C1
                                  ('GHC.Generics.MetaCons
                                     "TyName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                  (GHC.Generics.S1
                                     ('GHC.Generics.MetaSel
                                        'GHC.Base.Nothing
                                        'GHC.Generics.NoSourceUnpackedness
                                        'GHC.Generics.NoSourceStrictness
                                        'GHC.Generics.DecidedLazy)
                                     (GHC.Generics.Rec0
                                        (Language.PureScript.Names.ProperName
                                           'Language.PureScript.Names.TypeName)))
                                GHC.Generics.:+: GHC.Generics.C1
                                                   ('GHC.Generics.MetaCons
                                                      "TyOpName"
                                                      'GHC.Generics.PrefixI
                                                      'GHC.Types.False)
                                                   (GHC.Generics.S1
                                                      ('GHC.Generics.MetaSel
                                                         'GHC.Base.Nothing
                                                         'GHC.Generics.NoSourceUnpackedness
                                                         'GHC.Generics.NoSourceStrictness
                                                         'GHC.Generics.DecidedLazy)
                                                      (GHC.Generics.Rec0
                                                         (Language.PureScript.Names.OpName
                                                            'Language.PureScript.Names.TypeOpName)))))
             GHC.Generics.:+: ((GHC.Generics.C1
                                  ('GHC.Generics.MetaCons
                                     "DctorName" 'GHC.Generics.PrefixI 'GHC.Types.False)
                                  (GHC.Generics.S1
                                     ('GHC.Generics.MetaSel
                                        'GHC.Base.Nothing
                                        'GHC.Generics.NoSourceUnpackedness
                                        'GHC.Generics.NoSourceStrictness
                                        'GHC.Generics.DecidedLazy)
                                     (GHC.Generics.Rec0
                                        (Language.PureScript.Names.ProperName
                                           'Language.PureScript.Names.ConstructorName)))
                                GHC.Generics.:+: GHC.Generics.C1
                                                   ('GHC.Generics.MetaCons
                                                      "TyClassName"
                                                      'GHC.Generics.PrefixI
                                                      'GHC.Types.False)
                                                   (GHC.Generics.S1
                                                      ('GHC.Generics.MetaSel
                                                         'GHC.Base.Nothing
                                                         'GHC.Generics.NoSourceUnpackedness
                                                         'GHC.Generics.NoSourceStrictness
                                                         'GHC.Generics.DecidedLazy)
                                                      (GHC.Generics.Rec0
                                                         (Language.PureScript.Names.ProperName
                                                            'Language.PureScript.Names.ClassName))))
                               GHC.Generics.:+: (GHC.Generics.C1
                                                   ('GHC.Generics.MetaCons
                                                      "ModName"
                                                      'GHC.Generics.PrefixI
                                                      'GHC.Types.False)
                                                   (GHC.Generics.S1
                                                      ('GHC.Generics.MetaSel
                                                         'GHC.Base.Nothing
                                                         'GHC.Generics.NoSourceUnpackedness
                                                         'GHC.Generics.NoSourceStrictness
                                                         'GHC.Generics.DecidedLazy)
                                                      (GHC.Generics.Rec0
                                                         Language.PureScript.Names.ModuleName))
                                                 GHC.Generics.:+: GHC.Generics.C1
                                                                    ('GHC.Generics.MetaCons
                                                                       "KiName"
                                                                       'GHC.Generics.PrefixI
                                                                       'GHC.Types.False)
                                                                    (GHC.Generics.S1
                                                                       ('GHC.Generics.MetaSel
                                                                          'GHC.Base.Nothing
                                                                          'GHC.Generics.NoSourceUnpackedness
                                                                          'GHC.Generics.NoSourceStrictness
                                                                          'GHC.Generics.DecidedLazy)
                                                                       (GHC.Generics.Rec0
                                                                          (Language.PureScript.Names.ProperName
                                                                             'Language.PureScript.Names.KindName))))))
9af301165f72160425c5e0dde6525338
  axiom Language.PureScript.Names.Rep_OpName::
      GHC.Generics.Rep (Language.PureScript.Names.OpName a)
        = GHC.Generics.D1
            ('GHC.Generics.MetaData
               "OpName"
               "Language.PureScript.Names"
               "purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"
               'GHC.Types.True)
            (GHC.Generics.C1
               ('GHC.Generics.MetaCons
                  "OpName" 'GHC.Generics.PrefixI 'GHC.Types.True)
               (GHC.Generics.S1
                  ('GHC.Generics.MetaSel
                     ('GHC.Base.Just "runOpName")
                     'GHC.Generics.NoSourceUnpackedness
                     'GHC.Generics.NoSourceStrictness
                     'GHC.Generics.DecidedLazy)
                  (GHC.Generics.Rec0 Data.Text.Internal.Text)))
a7268334e0b909381550b9329cb80fcc
  axiom Language.PureScript.Names.Rep_ProperName::
      GHC.Generics.Rep (Language.PureScript.Names.ProperName a)
        = GHC.Generics.D1
            ('GHC.Generics.MetaData
               "ProperName"
               "Language.PureScript.Names"
               "purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"
               'GHC.Types.True)
            (GHC.Generics.C1
               ('GHC.Generics.MetaCons
                  "ProperName" 'GHC.Generics.PrefixI 'GHC.Types.True)
               (GHC.Generics.S1
                  ('GHC.Generics.MetaSel
                     ('GHC.Base.Just "runProperName")
                     'GHC.Generics.NoSourceUnpackedness
                     'GHC.Generics.NoSourceStrictness
                     'GHC.Generics.DecidedLazy)
                  (GHC.Generics.Rec0 Data.Text.Internal.Text)))
1b2ddf0c04464d2fa2588925f10c1966
  axiom Language.PureScript.Names.Rep_Qualified::
      GHC.Generics.Rep (Language.PureScript.Names.Qualified a)
        = GHC.Generics.D1
            ('GHC.Generics.MetaData
               "Qualified"
               "Language.PureScript.Names"
               "purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"
               'GHC.Types.False)
            (GHC.Generics.C1
               ('GHC.Generics.MetaCons
                  "Qualified" 'GHC.Generics.PrefixI 'GHC.Types.False)
               (GHC.Generics.S1
                  ('GHC.Generics.MetaSel
                     'GHC.Base.Nothing
                     'GHC.Generics.NoSourceUnpackedness
                     'GHC.Generics.NoSourceStrictness
                     'GHC.Generics.DecidedLazy)
                  (GHC.Generics.Rec0
                     (GHC.Base.Maybe Language.PureScript.Names.ModuleName))
                GHC.Generics.:*: GHC.Generics.S1
                                   ('GHC.Generics.MetaSel
                                      'GHC.Base.Nothing
                                      'GHC.Generics.NoSourceUnpackedness
                                      'GHC.Generics.NoSourceStrictness
                                      'GHC.Generics.DecidedLazy)
                                   (GHC.Generics.Rec0 a)))
441cf2d4ab32b68a0b73ca234d2a628b
  coerceProperName ::
    Language.PureScript.Names.ProperName a
    -> Language.PureScript.Names.ProperName b
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U)>m,
     Unfolding: InlineRule (0, True, True)
                (\ @ a :: Language.PureScript.Names.ProperNameType
                   @ b :: Language.PureScript.Names.ProperNameType ->
                 Language.PureScript.Names.coerceProperName1 @ a)
                  `cast`
                (forall (a :: <Language.PureScript.Names.ProperNameType>_N) (b :: <Language.PureScript.Names.ProperNameType>_N).
                 <Language.PureScript.Names.ProperName a>_R
                 ->_R Language.PureScript.Names.N:ProperName[0]
                          <a>_P ; Sym (Language.PureScript.Names.N:ProperName[0] <b>_P)) -}
a7268334e0b909381550b9329cb80fcc
  coerceProperName1 ::
    Language.PureScript.Names.ProperName a
    -> Language.PureScript.Names.ProperName a
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U)>m,
     Unfolding: InlineRule (1, True, True)
                (\ @ a :: Language.PureScript.Names.ProperNameType
                   (ds :: Language.PureScript.Names.ProperName a) ->
                 ds) -}
bf1cc3b0e6c1ffc0008a6113bf8116c0
  disqualify :: Language.PureScript.Names.Qualified a -> a
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: Language.PureScript.Names.Qualified a) ->
                 case ds of wild { Language.PureScript.Names.Qualified ds1 a1 ->
                 a1 }) -}
a577cc297e2d6839098678ededd6031a
  disqualifyFor ::
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.Qualified a -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S(SL),1*U(1*U,U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (w :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (w1 :: Language.PureScript.Names.Qualified a) ->
                 case w1 of ww { Language.PureScript.Names.Qualified ww1 ww2 ->
                 Language.PureScript.Names.$wdisqualifyFor @ a w ww1 ww2 }) -}
5a45dc426e525e743596411595463e09
  eraseOpName ::
    Language.PureScript.Names.OpName a
    -> Language.PureScript.Names.OpName
         'Language.PureScript.Names.AnyOpName
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U)>m,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Names.eraseOpName1
                  `cast`
                (forall (a :: <Language.PureScript.Names.OpNameType>_N).
                 <Language.PureScript.Names.OpName a>_R
                 ->_R Language.PureScript.Names.N:OpName[0]
                          <a>_P ; Sym (Language.PureScript.Names.N:OpName[0]
                                           <'Language.PureScript.Names.AnyOpName>_P)) -}
9af301165f72160425c5e0dde6525338
  eraseOpName1 ::
    Language.PureScript.Names.OpName a
    -> Language.PureScript.Names.OpName a
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U)>m,
     Unfolding: InlineRule (1, True, True)
                (\ @ a :: Language.PureScript.Names.OpNameType
                   (ds :: Language.PureScript.Names.OpName a) ->
                 ds) -}
2eefe00dadde64e5aaf7e80827568225
  freshIdent ::
    Control.Monad.Supply.Class.MonadSupply m =>
    Data.Text.Internal.Text -> m Language.PureScript.Names.Ident
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S(S(C(C(S))L)LLLLL)LLLL)LL),U(1*U(1*U(1*U(1*C1(C1(U)),A),A,A,A,A,A),A,A,A,A),1*U,A)><L,U>,
     Unfolding: (\ @ m :: * -> *
                   ($dMonadSupply :: Control.Monad.Supply.Class.MonadSupply m)
                   (eta :: Data.Text.Internal.Text) ->
                 GHC.Base.fmap
                   @ m
                   (GHC.Base.$p1Applicative
                      @ m
                      (GHC.Base.$p1Monad
                         @ m
                         (Control.Monad.Supply.Class.$p1MonadSupply @ m $dMonadSupply)))
                   @ GHC.Integer.Type.Integer
                   @ Language.PureScript.Names.Ident
                   (Language.PureScript.Names.GenIdent
                      (GHC.Base.Just @ Data.Text.Internal.Text eta))
                   (Control.Monad.Supply.Class.fresh @ m $dMonadSupply)) -}
ace107ea735883acadb2cb5e1231d421
  freshIdent' ::
    Control.Monad.Supply.Class.MonadSupply m =>
    m Language.PureScript.Names.Ident
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(S(S(S(C(C(S))L)LLLLL)LLLL)LL),U(1*U(1*U(1*U(1*C1(C1(U)),A),A,A,A,A,A),A,A,A,A),1*U,A)>,
     Unfolding: (\ @ m :: * -> *
                   ($dMonadSupply :: Control.Monad.Supply.Class.MonadSupply m) ->
                 GHC.Base.fmap
                   @ m
                   (GHC.Base.$p1Applicative
                      @ m
                      (GHC.Base.$p1Monad
                         @ m
                         (Control.Monad.Supply.Class.$p1MonadSupply @ m $dMonadSupply)))
                   @ GHC.Integer.Type.Integer
                   @ Language.PureScript.Names.Ident
                   Language.PureScript.Names.freshIdent'1
                   (Control.Monad.Supply.Class.fresh @ m $dMonadSupply)) -}
67a10dc53bcf8ecf9de4088f0db494b5
  freshIdent'1 ::
    GHC.Integer.Type.Integer -> Language.PureScript.Names.Ident
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (Language.PureScript.Names.GenIdent
                   (GHC.Base.Nothing @ Data.Text.Internal.Text)) -}
2436b43b5a631a956e9ce0d8250b06c1
  getClassName ::
    Language.PureScript.Names.Name
    -> GHC.Base.Maybe
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Names.Name) ->
                 case ds of wild {
                   DEFAULT
                   -> GHC.Base.Nothing
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ClassName)
                   Language.PureScript.Names.TyClassName name
                   -> GHC.Base.Just
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ClassName)
                        name }) -}
e8fcb89c2752d2d6f620663a51aec263
  getDctorName ::
    Language.PureScript.Names.Name
    -> GHC.Base.Maybe
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ConstructorName)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Names.Name) ->
                 case ds of wild {
                   DEFAULT
                   -> GHC.Base.Nothing
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ConstructorName)
                   Language.PureScript.Names.DctorName name
                   -> GHC.Base.Just
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ConstructorName)
                        name }) -}
15279104fadfea4df18932cbe593afab
  getIdentName ::
    Language.PureScript.Names.Name
    -> GHC.Base.Maybe Language.PureScript.Names.Ident
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Names.Name) ->
                 case ds of wild {
                   DEFAULT -> GHC.Base.Nothing @ Language.PureScript.Names.Ident
                   Language.PureScript.Names.IdentName name
                   -> GHC.Base.Just @ Language.PureScript.Names.Ident name }) -}
c7cce80edd861327d298652be1665923
  getKindName ::
    Language.PureScript.Names.Name
    -> GHC.Base.Maybe
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.KindName)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Names.Name) ->
                 case ds of wild {
                   DEFAULT
                   -> GHC.Base.Nothing
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.KindName)
                   Language.PureScript.Names.KiName name
                   -> GHC.Base.Just
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.KindName)
                        name }) -}
b0b75fb50459e4d9ae5f337eb9f05049
  getModName ::
    Language.PureScript.Names.Name
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Names.Name) ->
                 case ds of wild {
                   DEFAULT -> GHC.Base.Nothing @ Language.PureScript.Names.ModuleName
                   Language.PureScript.Names.ModName name
                   -> GHC.Base.Just @ Language.PureScript.Names.ModuleName name }) -}
fd365f85b7d21d7f6d9822dd71085ff1
  getQual ::
    Language.PureScript.Names.Qualified a
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: Language.PureScript.Names.Qualified a) ->
                 case ds of wild { Language.PureScript.Names.Qualified mn ds1 ->
                 mn }) -}
50827e2ee9bc8fbe2aacc34d5c31a680
  getTypeName ::
    Language.PureScript.Names.Name
    -> GHC.Base.Maybe
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Names.Name) ->
                 case ds of wild {
                   DEFAULT
                   -> GHC.Base.Nothing
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.TypeName)
                   Language.PureScript.Names.TyName name
                   -> GHC.Base.Just
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.TypeName)
                        name }) -}
97007f7eb86551330c27144541f6b2f1
  getTypeOpName ::
    Language.PureScript.Names.Name
    -> GHC.Base.Maybe
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.TypeOpName)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Names.Name) ->
                 case ds of wild {
                   DEFAULT
                   -> GHC.Base.Nothing
                        @ (Language.PureScript.Names.OpName
                             'Language.PureScript.Names.TypeOpName)
                   Language.PureScript.Names.TyOpName name
                   -> GHC.Base.Just
                        @ (Language.PureScript.Names.OpName
                             'Language.PureScript.Names.TypeOpName)
                        name }) -}
2e54b223a38a12dab4d0d656ccf93318
  getValOpName ::
    Language.PureScript.Names.Name
    -> GHC.Base.Maybe
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.ValueOpName)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Names.Name) ->
                 case ds of wild {
                   DEFAULT
                   -> GHC.Base.Nothing
                        @ (Language.PureScript.Names.OpName
                             'Language.PureScript.Names.ValueOpName)
                   Language.PureScript.Names.ValOpName name
                   -> GHC.Base.Just
                        @ (Language.PureScript.Names.OpName
                             'Language.PureScript.Names.ValueOpName)
                        name }) -}
eaf9d299339def0b7cc5606f802f45a1
  isBuiltinModuleName ::
    Language.PureScript.Names.ModuleName -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Language.PureScript.Names.ModuleName) ->
                 case ds
                        `cast`
                      (Language.PureScript.Names.N:ModuleName[0]) of wild {
                   [] -> GHC.Types.False
                   : ds1 ds2
                   -> case ds1
                             `cast`
                           (Language.PureScript.Names.N:ProperName[0]
                                <'Language.PureScript.Names.Namespace>_P) of wild1 { Data.Text.Internal.Text dt dt1 dt2 ->
                      case Language.PureScript.Names.isBuiltinModuleName1 of wild2 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                      case GHC.Prim.==# dt2 dt5 of lwild {
                        DEFAULT -> GHC.Types.False
                        1#
                        -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                          -> GHC.Prim.Word#
                                                          -> GHC.Prim.ByteArray#
                                                          -> GHC.Prim.Word#
                                                          -> GHC.Prim.Word#
                                                          -> GHC.Prim.State# GHC.Prim.RealWorld
                                                          -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                GHC.Prim.Int# #)}
                                  dt
                                  (GHC.Prim.int2Word# dt1)
                                  dt3
                                  (GHC.Prim.int2Word# dt4)
                                  (GHC.Prim.int2Word# dt2)
                                  GHC.Prim.realWorld# of wild5 { (#,#) ds3 ds4 ->
                           case GHC.Prim.narrow32Int# ds4 of wild3 {
                             DEFAULT -> GHC.Types.False 0# -> GHC.Types.True } } } } } }) -}
8b88dbf19fd5d82c45d60c888e9c9758
  isBuiltinModuleName1 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Names.isBuiltinModuleName2) -}
64e31f3ece89442d2a6695cdaf9c64a7
  isBuiltinModuleName2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Prim"#) -}
aaa813ca766a4e34b35755fcebd13831
  isQualified ::
    Language.PureScript.Names.Qualified a -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: Language.PureScript.Names.Qualified a) ->
                 case ds of wild { Language.PureScript.Names.Qualified ds1 ds2 ->
                 case ds1 of wild1 {
                   GHC.Base.Nothing -> GHC.Types.False
                   GHC.Base.Just ipv -> GHC.Types.True } }) -}
8f37d555d49f68d6076bf50c183e125a
  isQualifiedWith ::
    Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.Qualified a -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (mn :: Language.PureScript.Names.ModuleName)
                   (ds :: Language.PureScript.Names.Qualified a) ->
                 case ds of wild { Language.PureScript.Names.Qualified ds1 ds2 ->
                 case ds1 of wild1 {
                   GHC.Base.Nothing -> GHC.Types.False
                   GHC.Base.Just mn'
                   -> GHC.Classes.$fEq[]_$c==
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.Namespace)
                        (Language.PureScript.Names.$fEqProperName
                           @ 'Language.PureScript.Names.Namespace)
                        mn `cast` (Language.PureScript.Names.N:ModuleName[0])
                        mn' `cast` (Language.PureScript.Names.N:ModuleName[0]) } }) -}
fe642671cf4a0414b402b54fe03875ad
  isUnqualified ::
    Language.PureScript.Names.Qualified a -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (x :: Language.PureScript.Names.Qualified a) ->
                 case x of wild { Language.PureScript.Names.Qualified ds ds1 ->
                 case ds of wild1 {
                   GHC.Base.Nothing -> GHC.Types.True
                   GHC.Base.Just ipv -> GHC.Types.False } }) -}
de973a57bf2bc638b6df90f1eccf8e1a
  mkQualified ::
    a
    -> Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.Qualified a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ a (name :: a) (mn :: Language.PureScript.Names.ModuleName) ->
                 Language.PureScript.Names.Qualified
                   @ a
                   (GHC.Base.Just @ Language.PureScript.Names.ModuleName mn)
                   name) -}
58dbc4d6b97c8eb6012ccda72d203acf
  moduleNameFromString ::
    Data.Text.Internal.Text -> Language.PureScript.Names.ModuleName
  {- Arity: 1, Strictness: <S(SSS),1*U(U,U,U)>,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Names.moduleNameFromString1
                  `cast`
                (<Data.Text.Internal.Text>_R
                 ->_R Sym (Language.PureScript.Names.N:ModuleName[0])) -}
2706bcc25b6c0be0d2348257daf74471
  moduleNameFromString1 ::
    Data.Text.Internal.Text
    -> [Language.PureScript.Names.ProperName
          'Language.PureScript.Names.Namespace]
  {- Arity: 1, Strictness: <S(SSS),1*U(U,U,U)>,
     Unfolding: InlineRule (1, True, True)
                (Language.PureScript.Names.moduleNameFromString_splitProperNames
                   @ 'Language.PureScript.Names.Namespace) -}
e38f99da614f29aa7738893fb901f96b
  moduleNameFromString2 :: [Language.PureScript.Names.ProperName a]
b8f49db9a216be1125808df02d7fd003
  moduleNameFromString3 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> [Language.PureScript.Names.ProperName a]
  {- Arity: 3, Strictness: <L,U><L,U><S,U> -}
d8902f62c02de082ea31ee1775af8182
  moduleNameFromString_splitProperNames ::
    Data.Text.Internal.Text -> [Language.PureScript.Names.ProperName a]
  {- Arity: 1, Strictness: <S(SSS),1*U(U,U,U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ @ a :: Language.PureScript.Names.ProperNameType
                   (w :: Data.Text.Internal.Text) ->
                 case w of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Language.PureScript.Names.$wsplitProperNames @ a ww1 ww2 ww3 }) -}
7fee779c1e743466991e1770cf2b48ba
  qualify ::
    Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.Qualified a
    -> (Language.PureScript.Names.ModuleName, a)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S(SL),1*U(1*U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (m :: Language.PureScript.Names.ModuleName)
                   (ds :: Language.PureScript.Names.Qualified a) ->
                 case ds of wild { Language.PureScript.Names.Qualified ds1 a1 ->
                 case ds1 of wild1 {
                   GHC.Base.Nothing -> (m, a1) GHC.Base.Just m1 -> (m1, a1) } }) -}
f4727e6f001b3b7d933fd4e8122af572
  runIdent ::
    Language.PureScript.Names.Ident -> Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S,1*U> -}
58b788b37f600c0f34fa85241d7748ad
  runModuleName ::
    Language.PureScript.Names.ModuleName -> Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Names.ModuleName) ->
                 case ds
                        `cast`
                      (Language.PureScript.Names.N:ModuleName[0] ; ([Language.PureScript.Names.N:ProperName[0]
                                                                         <'Language.PureScript.Names.Namespace>_P])_R) of wild {
                   [] -> Language.PureScript.Names.runModuleName1
                   : x1 xs
                   -> Data.Text.concat
                        (GHC.Types.:
                           @ Data.Text.Internal.Text
                           x1
                           (Language.PureScript.Names.runModuleName_go1 xs)) }) -}
da721353de57f0459325e427519c089b
  runModuleName1 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.concat
                   (GHC.Types.[] @ Data.Text.Internal.Text)) -}
5607cb3db60a3a6edf130e283d729249
  runModuleName_go1 ::
    [Data.Text.Internal.Text] -> [Data.Text.Internal.Text]
  {- Arity: 1, Strictness: <S,1*U> -}
9af301165f72160425c5e0dde6525338
  runOpName ::
    Language.PureScript.Names.OpName a -> Data.Text.Internal.Text
  RecSel Left Language.PureScript.Names.OpName
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U)>m,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Names.eraseOpName1
                  `cast`
                (forall (a :: <Language.PureScript.Names.OpNameType>_N).
                 <Language.PureScript.Names.OpName a>_R
                 ->_R Language.PureScript.Names.N:OpName[0] <a>_P) -}
a7268334e0b909381550b9329cb80fcc
  runProperName ::
    Language.PureScript.Names.ProperName a -> Data.Text.Internal.Text
  RecSel Left Language.PureScript.Names.ProperName
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U)>m,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Names.coerceProperName1
                  `cast`
                (forall (a :: <Language.PureScript.Names.ProperNameType>_N).
                 <Language.PureScript.Names.ProperName a>_R
                 ->_R Language.PureScript.Names.N:ProperName[0] <a>_P) -}
6e8d83433e1fcc9da5f1cf76585fd968
  showIdent ::
    Language.PureScript.Names.Ident -> Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Names.runIdent -}
b45e7917a51eac70fb9658fd0956a139
  showOp ::
    Language.PureScript.Names.OpName a -> Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S(SSS),1*U(U,U,U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ @ a :: Language.PureScript.Names.OpNameType
                   (w :: Language.PureScript.Names.OpName a) ->
                 case w `cast`
                      (Language.PureScript.Names.N:OpName[0]
                           <a>_P) of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Language.PureScript.Names.$wshowOp @ a ww1 ww2 ww3 }) -}
5ab4b15825b0e65e211bc57f19d57784
  showQualified ::
    (a -> Data.Text.Internal.Text)
    -> Language.PureScript.Names.Qualified a -> Data.Text.Internal.Text
  {- Arity: 2, Strictness: <C(S),1*C1(U(U,U,U))><S(SL),1*U(1*U,U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (w :: a -> Data.Text.Internal.Text)
                   (w1 :: Language.PureScript.Names.Qualified a) ->
                 case w1 of ww { Language.PureScript.Names.Qualified ww1 ww2 ->
                 Language.PureScript.Names.$wshowQualified @ a w ww1 ww2 }) -}
instance GHC.Classes.Eq [Language.PureScript.Names.Ident]
  = Language.PureScript.Names.$fEqIdent
instance GHC.Classes.Eq [Language.PureScript.Names.ModuleName]
  = Language.PureScript.Names.$fEqModuleName
instance GHC.Classes.Eq [Language.PureScript.Names.Name]
  = Language.PureScript.Names.$fEqName
instance GHC.Classes.Eq [Language.PureScript.Names.OpName]
  = Language.PureScript.Names.$fEqOpName
instance GHC.Classes.Eq [Language.PureScript.Names.ProperName]
  = Language.PureScript.Names.$fEqProperName
instance GHC.Classes.Eq [Language.PureScript.Names.Qualified]
  = Language.PureScript.Names.$fEqQualified
instance Data.Foldable.Foldable [Language.PureScript.Names.Qualified]
  = Language.PureScript.Names.$fFoldableQualified
instance Data.Aeson.Types.FromJSON.FromJSON [Language.PureScript.Names.Ident]
  = Language.PureScript.Names.$fFromJSONIdent
instance Data.Aeson.Types.FromJSON.FromJSON [Language.PureScript.Names.ModuleName]
  = Language.PureScript.Names.$fFromJSONModuleName
instance Data.Aeson.Types.FromJSON.FromJSON [Language.PureScript.Names.OpName]
  = Language.PureScript.Names.$fFromJSONOpName
instance Data.Aeson.Types.FromJSON.FromJSON [Language.PureScript.Names.ProperName]
  = Language.PureScript.Names.$fFromJSONProperName
instance Data.Aeson.Types.FromJSON.FromJSON [Language.PureScript.Names.Qualified]
  = Language.PureScript.Names.$fFromJSONQualified
instance GHC.Base.Functor [Language.PureScript.Names.Qualified]
  = Language.PureScript.Names.$fFunctorQualified
instance GHC.Generics.Generic [Language.PureScript.Names.Ident]
  = Language.PureScript.Names.$fGenericIdent
instance GHC.Generics.Generic [Language.PureScript.Names.ModuleName]
  = Language.PureScript.Names.$fGenericModuleName
instance GHC.Generics.Generic [Language.PureScript.Names.Name]
  = Language.PureScript.Names.$fGenericName
instance GHC.Generics.Generic [Language.PureScript.Names.OpName]
  = Language.PureScript.Names.$fGenericOpName
instance GHC.Generics.Generic [Language.PureScript.Names.ProperName]
  = Language.PureScript.Names.$fGenericProperName
instance GHC.Generics.Generic [Language.PureScript.Names.Qualified]
  = Language.PureScript.Names.$fGenericQualified
instance Control.DeepSeq.NFData [Language.PureScript.Names.Ident]
  = Language.PureScript.Names.$fNFDataIdent
instance Control.DeepSeq.NFData [Language.PureScript.Names.ModuleName]
  = Language.PureScript.Names.$fNFDataModuleName
instance Control.DeepSeq.NFData [Language.PureScript.Names.Name]
  = Language.PureScript.Names.$fNFDataName
instance Control.DeepSeq.NFData [Language.PureScript.Names.OpName]
  = Language.PureScript.Names.$fNFDataOpName
instance Control.DeepSeq.NFData [Language.PureScript.Names.ProperName]
  = Language.PureScript.Names.$fNFDataProperName
instance Control.DeepSeq.NFData [Language.PureScript.Names.Qualified]
  = Language.PureScript.Names.$fNFDataQualified
instance GHC.Classes.Ord [Language.PureScript.Names.Ident]
  = Language.PureScript.Names.$fOrdIdent
instance GHC.Classes.Ord [Language.PureScript.Names.ModuleName]
  = Language.PureScript.Names.$fOrdModuleName
instance GHC.Classes.Ord [Language.PureScript.Names.Name]
  = Language.PureScript.Names.$fOrdName
instance GHC.Classes.Ord [Language.PureScript.Names.OpName]
  = Language.PureScript.Names.$fOrdOpName
instance GHC.Classes.Ord [Language.PureScript.Names.ProperName]
  = Language.PureScript.Names.$fOrdProperName
instance GHC.Classes.Ord [Language.PureScript.Names.Qualified]
  = Language.PureScript.Names.$fOrdQualified
instance GHC.Show.Show [Language.PureScript.Names.Ident]
  = Language.PureScript.Names.$fShowIdent
instance GHC.Show.Show [Language.PureScript.Names.ModuleName]
  = Language.PureScript.Names.$fShowModuleName
instance GHC.Show.Show [Language.PureScript.Names.Name]
  = Language.PureScript.Names.$fShowName
instance GHC.Show.Show [Language.PureScript.Names.OpName]
  = Language.PureScript.Names.$fShowOpName
instance GHC.Show.Show [Language.PureScript.Names.ProperName]
  = Language.PureScript.Names.$fShowProperName
instance GHC.Show.Show [Language.PureScript.Names.Qualified]
  = Language.PureScript.Names.$fShowQualified
instance Data.Aeson.Types.ToJSON.ToJSON [Language.PureScript.Names.Ident]
  = Language.PureScript.Names.$fToJSONIdent
instance Data.Aeson.Types.ToJSON.ToJSON [Language.PureScript.Names.ModuleName]
  = Language.PureScript.Names.$fToJSONModuleName
instance Data.Aeson.Types.ToJSON.ToJSON [Language.PureScript.Names.OpName]
  = Language.PureScript.Names.$fToJSONOpName
instance Data.Aeson.Types.ToJSON.ToJSON [Language.PureScript.Names.ProperName]
  = Language.PureScript.Names.$fToJSONProperName
instance Data.Aeson.Types.ToJSON.ToJSON [Language.PureScript.Names.Qualified]
  = Language.PureScript.Names.$fToJSONQualified
instance Data.Traversable.Traversable [Language.PureScript.Names.Qualified]
  = Language.PureScript.Names.$fTraversableQualified
family instance GHC.Generics.Rep [Language.PureScript.Names.Qualified]
  = Language.PureScript.Names.Rep_Qualified
family instance GHC.Generics.Rep [Language.PureScript.Names.Name]
  = Language.PureScript.Names.Rep_Name
family instance GHC.Generics.Rep [Language.PureScript.Names.ModuleName]
  = Language.PureScript.Names.Rep_ModuleName
family instance GHC.Generics.Rep [Language.PureScript.Names.ProperName]
  = Language.PureScript.Names.Rep_ProperName
family instance GHC.Generics.Rep [Language.PureScript.Names.OpName]
  = Language.PureScript.Names.Rep_OpName
family instance GHC.Generics.Rep [Language.PureScript.Names.Ident]
  = Language.PureScript.Names.Rep_Ident
"SPEC/Language.PureScript.Names $fEq[]_$c/= @ (ProperName
                                                'Namespace)" forall ($dEq :: GHC.Classes.Eq
                                                                                                                                         (Language.PureScript.Names.ProperName
                                                                                                                                            'Language.PureScript.Names.Namespace))
  GHC.Classes.$fEq[]_$c/= @ (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.Namespace)
                          $dEq
  = Language.PureScript.Names.$fEqModuleName_$s$fEq[]_$c/=
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

