
==================== FINAL INTERFACE ====================
2018-11-30 19:26:07.349444 UTC

interface purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Comments 8043
  interface hash: 03486b9a027d3dafda35a1ae6ee44c2e
  ABI hash: f344ceddf328cf61908be13dd1f90917
  export-list hash: b1904caad26a3e7c6a77f0a1156c2d62
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: f3553c80622c9d61b5c3b385d3f3780b
  opt_hash: 2c98c95d41c045ae9c2fb565ec8aabc6
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: True
  where
exports:
  Language.PureScript.Comments.Comment{Language.PureScript.Comments.BlockComment Language.PureScript.Comments.LineComment}
module dependencies:
package dependencies: aeson-1.3.1.1 array-0.5.2.0
                      attoparsec-0.13.2.2 base-4.11.1.0 base-compat-0.10.4 binary-0.8.5.1
                      bytestring-0.10.8.2 containers-0.5.11.0 deepseq-1.4.3.0
                      dlist-0.8.0.4 ghc-boot-th-8.4.3 ghc-prim-0.5.2.0 hashable-1.2.7.0
                      integer-gmp-1.0.2.0 integer-logarithms-1.0.2.1 pretty-1.1.3.6
                      primitive-0.6.3.0 random-1.1 scientific-0.3.6.2 tagged-0.8.5
                      template-haskell-2.13.0.0 text-1.2.3.0 th-abstraction-0.2.8.0
                      time-1.8.0.2 time-locale-compat-0.1.1.4 transformers-0.5.5.0
                      unordered-containers-0.2.9.0 uuid-types-1.0.3 vector-0.12.0.1
orphans: attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         vector-0.12.0.1:Data.Vector.Unboxed
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.0:Data.Text.Lazy
         text-1.2.3.0:Data.Text binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.5.0:Control.Monad.Trans.Error
         base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: aeson-1.3.1.1:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         dlist-0.8.0.4:Data.DList ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray tagged-0.8.5:Data.Tagged
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
                         th-abstraction-0.2.8.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  aeson-1.3.1.1:Data.Aeson.TH 7d552baba5d6d064e5d0fb814e331004
import  -/  aeson-1.3.1.1:Data.Aeson.Types.FromJSON 1ea0c919856f0d29f12e53cd074d532c
import  -/  aeson-1.3.1.1:Data.Aeson.Types.Internal df76c21edff000f9355bfb6fb0dbf3e6
import  -/  aeson-1.3.1.1:Data.Aeson.Types.ToJSON 587c7d8b9444e85253d7faf5f824f568
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.Functor f522c3501272159820fd6f242510732f
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-compat-0.10.4:Prelude.Compat bb6796186ed35a1d09dc34362a3fc27e
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  text-1.2.3.0:Data.Text 7daa7e6c9b39d8cc1679e5ec5c64d2be
import  -/  text-1.2.3.0:Data.Text.Internal 30a0a123f71f63b26cd34c6b24f23411
import  -/  text-1.2.3.0:Data.Text.Show 3b4b6fb2985a731022d67f636682da2b
import  -/  unordered-containers-0.2.9.0:Data.HashMap.Base aa3368c2691ac85cecf0d74a4bea8e4d
23fbbb637db19d35ca8339b51dc9ecf5
  $fEqComment :: GHC.Classes.Eq Language.PureScript.Comments.Comment
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Comments.Comment
                  Language.PureScript.Comments.$fEqComment_$c==
                  Language.PureScript.Comments.$fEqComment_$c/= -}
23fbbb637db19d35ca8339b51dc9ecf5
  $fEqComment_$c/= ::
    Language.PureScript.Comments.Comment
    -> Language.PureScript.Comments.Comment -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Comments.Comment)
                   (y :: Language.PureScript.Comments.Comment) ->
                 case x of wild {
                   Language.PureScript.Comments.LineComment a1
                   -> case y of wild1 {
                        Language.PureScript.Comments.LineComment b1
                        -> case a1 of wild2 { Data.Text.Internal.Text dt dt1 dt2 ->
                           case b1 of wild3 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                           case GHC.Classes.eqInt
                                  (GHC.Types.I# dt2)
                                  (GHC.Types.I# dt5) of wild4 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True
                             -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.ByteArray#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.State# GHC.Prim.RealWorld
                                                               -> (# GHC.Prim.State#
                                                                       GHC.Prim.RealWorld,
                                                                     GHC.Prim.Int# #)}
                                       dt
                                       (GHC.Prim.int2Word# dt1)
                                       dt3
                                       (GHC.Prim.int2Word# dt4)
                                       (GHC.Prim.int2Word# dt2)
                                       GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                                case GHC.Int.eqInt32
                                       (GHC.Int.I32# (GHC.Prim.narrow32Int# ds3))
                                       (GHC.Int.I32# 0#) of wild6 {
                                  GHC.Types.False -> GHC.Types.True
                                  GHC.Types.True -> GHC.Types.False } } } } }
                        Language.PureScript.Comments.BlockComment ipv -> GHC.Types.True }
                   Language.PureScript.Comments.BlockComment a1
                   -> case y of wild1 {
                        Language.PureScript.Comments.LineComment ipv -> GHC.Types.True
                        Language.PureScript.Comments.BlockComment b1
                        -> case a1 of wild2 { Data.Text.Internal.Text dt dt1 dt2 ->
                           case b1 of wild3 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                           case GHC.Classes.eqInt
                                  (GHC.Types.I# dt2)
                                  (GHC.Types.I# dt5) of wild4 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True
                             -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.ByteArray#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.State# GHC.Prim.RealWorld
                                                               -> (# GHC.Prim.State#
                                                                       GHC.Prim.RealWorld,
                                                                     GHC.Prim.Int# #)}
                                       dt
                                       (GHC.Prim.int2Word# dt1)
                                       dt3
                                       (GHC.Prim.int2Word# dt4)
                                       (GHC.Prim.int2Word# dt2)
                                       GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                                case GHC.Int.eqInt32
                                       (GHC.Int.I32# (GHC.Prim.narrow32Int# ds3))
                                       (GHC.Int.I32# 0#) of wild6 {
                                  GHC.Types.False -> GHC.Types.True
                                  GHC.Types.True -> GHC.Types.False } } } } } } }) -}
23fbbb637db19d35ca8339b51dc9ecf5
  $fEqComment_$c== ::
    Language.PureScript.Comments.Comment
    -> Language.PureScript.Comments.Comment -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Language.PureScript.Comments.Comment)
                   (ds1 :: Language.PureScript.Comments.Comment) ->
                 case ds of wild {
                   Language.PureScript.Comments.LineComment a1
                   -> case ds1 of wild1 {
                        Language.PureScript.Comments.LineComment b1
                        -> Data.Text.$fEqText_$c== a1 b1
                        Language.PureScript.Comments.BlockComment ipv -> GHC.Types.False }
                   Language.PureScript.Comments.BlockComment a1
                   -> case ds1 of wild1 {
                        Language.PureScript.Comments.LineComment ipv -> GHC.Types.False
                        Language.PureScript.Comments.BlockComment b1
                        -> Data.Text.$fEqText_$c== a1 b1 } }) -}
23fbbb637db19d35ca8339b51dc9ecf5
  $fFromJSONComment ::
    Data.Aeson.Types.FromJSON.FromJSON
      Language.PureScript.Comments.Comment
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Comments.Comment
                  Language.PureScript.Comments.$fFromJSONComment_$cparseJSON
                  Language.PureScript.Comments.$fFromJSONComment_$cparseJSONList -}
b95b5dd8cd48389b68724adb0cedaa9b
  $fFromJSONComment1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (", encountered "#) -}
f021f43bf42513a9fb4568c7e3ae06ab
  $fFromJSONComment2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("[a]"#) -}
a8422341064e0d7bd8f0f6f6ab719c31
  $fFromJSONComment3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("expected "#) -}
23fbbb637db19d35ca8339b51dc9ecf5
  $fFromJSONComment4 ::
    [(Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value)]
    -> Data.Aeson.Types.Internal.Parser
         Language.PureScript.Comments.Comment
  {- Arity: 1, Strictness: <S,U> -}
1555b65e20ad8c0b3f978e8435358310
  $fFromJSONComment5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Comments.$fFromJSONComment6) -}
00fb0e518fffc9c8fce90b4ad8ac9964
  $fFromJSONComment6 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Language.PureScript.Comments.Comment"#) -}
23fbbb637db19d35ca8339b51dc9ecf5
  $fFromJSONComment_$cparseJSON ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         Language.PureScript.Comments.Comment
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (value :: Data.Aeson.Types.Internal.Value) ->
                 case value of wild {
                   DEFAULT
                   -> Data.Aeson.TH.noObjectFail
                        @ Language.PureScript.Comments.Comment
                        Language.PureScript.Comments.$fFromJSONComment5
                        (case wild of wild1 {
                           Data.Aeson.Types.Internal.Array ds9 -> Data.Aeson.TH.valueConName9
                           Data.Aeson.Types.Internal.String ds9 -> Data.Aeson.TH.valueConName7
                           Data.Aeson.Types.Internal.Number ds9 -> Data.Aeson.TH.valueConName5
                           Data.Aeson.Types.Internal.Bool ds9 -> Data.Aeson.TH.valueConName3
                           Data.Aeson.Types.Internal.Null -> Data.Aeson.TH.valueConName1 })
                   Data.Aeson.Types.Internal.Object obj
                   -> case obj of wild1 {
                        Data.HashMap.Base.Empty
                        -> Language.PureScript.Comments.$fFromJSONComment4
                             (GHC.Types.[]
                                @ (Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value))
                        Data.HashMap.Base.BitmapIndexed dt dt1
                        -> Language.PureScript.Comments.$fFromJSONComment4
                             (Language.PureScript.Comments.$fFromJSONComment_$s$wgo3
                                (GHC.Types.[]
                                   @ (Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value))
                                0#
                                (GHC.Prim.sizeofSmallArray#
                                   @ (Data.HashMap.Base.HashMap
                                        Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                                   dt1)
                                dt1)
                        Data.HashMap.Base.Leaf dt dt1 dt2
                        -> Language.PureScript.Comments.$fFromJSONComment4
                             (GHC.Types.:
                                @ (Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value)
                                (dt1, dt2)
                                (GHC.Types.[]
                                   @ (Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value)))
                        Data.HashMap.Base.Full dt
                        -> Language.PureScript.Comments.$fFromJSONComment4
                             (Language.PureScript.Comments.$fFromJSONComment_$s$wgo1
                                (GHC.Types.[]
                                   @ (Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value))
                                0#
                                (GHC.Prim.sizeofSmallArray#
                                   @ (Data.HashMap.Base.HashMap
                                        Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                                   dt)
                                dt)
                        Data.HashMap.Base.Collision dt dt1
                        -> Language.PureScript.Comments.$fFromJSONComment4
                             (Language.PureScript.Comments.$fFromJSONComment_$s$wgo2
                                (GHC.Types.[]
                                   @ (Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value))
                                0#
                                (GHC.Prim.sizeofSmallArray#
                                   @ (Data.HashMap.Base.Leaf
                                        Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
                                   dt1)
                                dt1) } }) -}
23fbbb637db19d35ca8339b51dc9ecf5
  $fFromJSONComment_$cparseJSONList ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         [Language.PureScript.Comments.Comment]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Data.Aeson.Types.Internal.Value) ->
                 case ds of wild {
                   DEFAULT
                   -> let {
                        msg19 :: GHC.Base.String
                        = GHC.CString.unpackAppendCString#
                            Language.PureScript.Comments.$fFromJSONComment3
                            (GHC.CString.unpackAppendCString#
                               Language.PureScript.Comments.$fFromJSONComment2
                               (GHC.CString.unpackAppendCString#
                                  Language.PureScript.Comments.$fFromJSONComment1
                                  (case wild of wild1 {
                                     Data.Aeson.Types.Internal.Object ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList10
                                     Data.Aeson.Types.Internal.String ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList8
                                     Data.Aeson.Types.Internal.Number ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList6
                                     Data.Aeson.Types.Internal.Bool ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList4
                                     Data.Aeson.Types.Internal.Null
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList1 })))
                      } in
                      (\ @ f4 :: * -> *
                         @ r
                         (path :: Data.Aeson.Types.Internal.JSONPath)
                         (kf :: Data.Aeson.Types.Internal.Failure f4 r)
                         (_ks :: Data.Aeson.Types.Internal.Success
                                   [Language.PureScript.Comments.Comment] f4 r) ->
                       kf
                         (GHC.List.reverse @ Data.Aeson.Types.Internal.JSONPathElement path)
                         msg19)
                        `cast`
                      (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                <[Language.PureScript.Comments.Comment]>_R))
                   Data.Aeson.Types.Internal.Array a2
                   -> case a2 of wild1 { Data.Vector.Vector dt dt1 dt2 ->
                      letrec {
                        $wgo :: GHC.Prim.Int# -> [Data.Aeson.Types.Internal.Value]
                          {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                        = \ (ww :: GHC.Prim.Int#) ->
                          case GHC.Prim.>=# ww dt1 of lwild {
                            DEFAULT
                            -> case GHC.Prim.indexArray#
                                      @ Data.Aeson.Types.Internal.Value
                                      dt2
                                      (GHC.Prim.+# dt ww) of ds3 { Unit# ipv ->
                               GHC.Types.:
                                 @ Data.Aeson.Types.Internal.Value
                                 ipv
                                 ($wgo (GHC.Prim.+# ww 1#)) }
                            1# -> GHC.Types.[] @ Data.Aeson.Types.Internal.Value }
                      } in
                      Language.PureScript.Comments.$fFromJSONComment_go
                        0#
                        ($wgo 0#) } }) -}
b87f5419534062a65fae96a31549fc70
  $fFromJSONComment_$s$wgo1 ::
    [(Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value)]
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.SmallArray#
         (Data.HashMap.Base.HashMap
            Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
    -> [(Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value)]
  {- Arity: 4, HasNoCafRefs, Strictness: <L,1*U><S,U><S,U><L,U> -}
0b4e55b9dddbceaa36773216d0a9d786
  $fFromJSONComment_$s$wgo2 ::
    [(Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value)]
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.SmallArray#
         (Data.HashMap.Base.Leaf
            Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
    -> [(Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value)]
  {- Arity: 4, HasNoCafRefs, Strictness: <L,1*U><S,U><S,U><L,U> -}
5eec104f08461c8a85c68095455948c7
  $fFromJSONComment_$s$wgo3 ::
    [(Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value)]
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.SmallArray#
         (Data.HashMap.Base.HashMap
            Data.Text.Internal.Text Data.Aeson.Types.Internal.Value)
    -> [(Data.Text.Internal.Text, Data.Aeson.Types.Internal.Value)]
  {- Arity: 4, HasNoCafRefs, Strictness: <L,1*U><S,U><S,U><L,U> -}
23fbbb637db19d35ca8339b51dc9ecf5
  $fFromJSONComment_go ::
    GHC.Prim.Int#
    -> [Data.Aeson.Types.Internal.Value]
    -> Data.Aeson.Types.Internal.Parser
         [Language.PureScript.Comments.Comment]
  {- Arity: 2, Strictness: <L,U><S,1*U> -}
23fbbb637db19d35ca8339b51dc9ecf5
  $fOrdComment ::
    GHC.Classes.Ord Language.PureScript.Comments.Comment
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Comments.Comment
                  Language.PureScript.Comments.$fEqComment
                  Language.PureScript.Comments.$fOrdComment_$ccompare
                  Language.PureScript.Comments.$fOrdComment_$c<
                  Language.PureScript.Comments.$fOrdComment_$c<=
                  Language.PureScript.Comments.$fOrdComment_$c>
                  Language.PureScript.Comments.$fOrdComment_$c>=
                  Language.PureScript.Comments.$fOrdComment_$cmax
                  Language.PureScript.Comments.$fOrdComment_$cmin -}
23fbbb637db19d35ca8339b51dc9ecf5
  $fOrdComment_$c< ::
    Language.PureScript.Comments.Comment
    -> Language.PureScript.Comments.Comment -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Language.PureScript.Comments.Comment)
                   (b :: Language.PureScript.Comments.Comment) ->
                 case a of wild {
                   Language.PureScript.Comments.LineComment a1
                   -> case b of wild1 {
                        Language.PureScript.Comments.LineComment b1
                        -> Data.Text.$fOrdText_$c< a1 b1
                        Language.PureScript.Comments.BlockComment ipv -> GHC.Types.True }
                   Language.PureScript.Comments.BlockComment a1
                   -> case b of wild1 {
                        Language.PureScript.Comments.LineComment ipv -> GHC.Types.False
                        Language.PureScript.Comments.BlockComment b1
                        -> Data.Text.$fOrdText_$c< a1 b1 } }) -}
23fbbb637db19d35ca8339b51dc9ecf5
  $fOrdComment_$c<= ::
    Language.PureScript.Comments.Comment
    -> Language.PureScript.Comments.Comment -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Language.PureScript.Comments.Comment)
                   (b :: Language.PureScript.Comments.Comment) ->
                 case b of wild {
                   Language.PureScript.Comments.LineComment a1
                   -> case a of wild1 {
                        Language.PureScript.Comments.LineComment b1
                        -> case a1 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                           case b1 of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                           case Data.Text.$w$ccompare ww1 ww2 ww3 ww5 ww6 ww7 of wild2 {
                             DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False } } }
                        Language.PureScript.Comments.BlockComment ipv -> GHC.Types.False }
                   Language.PureScript.Comments.BlockComment a1
                   -> case a of wild1 {
                        Language.PureScript.Comments.LineComment ipv -> GHC.Types.True
                        Language.PureScript.Comments.BlockComment b1
                        -> case a1 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                           case b1 of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                           case Data.Text.$w$ccompare ww1 ww2 ww3 ww5 ww6 ww7 of wild2 {
                             DEFAULT -> GHC.Types.True
                             GHC.Types.LT -> GHC.Types.False } } } } }) -}
23fbbb637db19d35ca8339b51dc9ecf5
  $fOrdComment_$c> ::
    Language.PureScript.Comments.Comment
    -> Language.PureScript.Comments.Comment -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, True)
                (\ (a :: Language.PureScript.Comments.Comment)
                   (b :: Language.PureScript.Comments.Comment) ->
                 Language.PureScript.Comments.$fOrdComment_$c< b a) -}
23fbbb637db19d35ca8339b51dc9ecf5
  $fOrdComment_$c>= ::
    Language.PureScript.Comments.Comment
    -> Language.PureScript.Comments.Comment -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Language.PureScript.Comments.Comment)
                   (b :: Language.PureScript.Comments.Comment) ->
                 case a of wild {
                   Language.PureScript.Comments.LineComment a1
                   -> case b of wild1 {
                        Language.PureScript.Comments.LineComment b1
                        -> case a1 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                           case b1 of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                           case Data.Text.$w$ccompare ww1 ww2 ww3 ww5 ww6 ww7 of wild2 {
                             DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False } } }
                        Language.PureScript.Comments.BlockComment ipv -> GHC.Types.False }
                   Language.PureScript.Comments.BlockComment a1
                   -> case b of wild1 {
                        Language.PureScript.Comments.LineComment ipv -> GHC.Types.True
                        Language.PureScript.Comments.BlockComment b1
                        -> case a1 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                           case b1 of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                           case Data.Text.$w$ccompare ww1 ww2 ww3 ww5 ww6 ww7 of wild2 {
                             DEFAULT -> GHC.Types.True
                             GHC.Types.LT -> GHC.Types.False } } } } }) -}
23fbbb637db19d35ca8339b51dc9ecf5
  $fOrdComment_$ccompare ::
    Language.PureScript.Comments.Comment
    -> Language.PureScript.Comments.Comment -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Language.PureScript.Comments.Comment)
                   (b :: Language.PureScript.Comments.Comment) ->
                 case a of wild {
                   Language.PureScript.Comments.LineComment a1
                   -> case b of wild1 {
                        Language.PureScript.Comments.LineComment b1
                        -> Data.Text.$fOrdText_$ccompare a1 b1
                        Language.PureScript.Comments.BlockComment ipv -> GHC.Types.LT }
                   Language.PureScript.Comments.BlockComment a1
                   -> case b of wild1 {
                        Language.PureScript.Comments.LineComment ipv -> GHC.Types.GT
                        Language.PureScript.Comments.BlockComment b1
                        -> Data.Text.$fOrdText_$ccompare a1 b1 } }) -}
23fbbb637db19d35ca8339b51dc9ecf5
  $fOrdComment_$cmax ::
    Language.PureScript.Comments.Comment
    -> Language.PureScript.Comments.Comment
    -> Language.PureScript.Comments.Comment
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (x :: Language.PureScript.Comments.Comment)
                   (y :: Language.PureScript.Comments.Comment) ->
                 case y of wild {
                   Language.PureScript.Comments.LineComment a1
                   -> case x of wild1 {
                        Language.PureScript.Comments.LineComment b1
                        -> case a1 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                           case b1 of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                           case Data.Text.$w$ccompare ww1 ww2 ww3 ww5 ww6 ww7 of wild2 {
                             DEFAULT -> wild GHC.Types.LT -> wild1 } } }
                        Language.PureScript.Comments.BlockComment ipv -> wild1 }
                   Language.PureScript.Comments.BlockComment a1
                   -> case x of wild1 {
                        Language.PureScript.Comments.LineComment ipv -> wild
                        Language.PureScript.Comments.BlockComment b1
                        -> case a1 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                           case b1 of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                           case Data.Text.$w$ccompare ww1 ww2 ww3 ww5 ww6 ww7 of wild2 {
                             DEFAULT -> wild GHC.Types.LT -> wild1 } } } } }) -}
23fbbb637db19d35ca8339b51dc9ecf5
  $fOrdComment_$cmin ::
    Language.PureScript.Comments.Comment
    -> Language.PureScript.Comments.Comment
    -> Language.PureScript.Comments.Comment
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (x :: Language.PureScript.Comments.Comment)
                   (y :: Language.PureScript.Comments.Comment) ->
                 case y of wild {
                   Language.PureScript.Comments.LineComment a1
                   -> case x of wild1 {
                        Language.PureScript.Comments.LineComment b1
                        -> case a1 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                           case b1 of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                           case Data.Text.$w$ccompare ww1 ww2 ww3 ww5 ww6 ww7 of wild2 {
                             DEFAULT -> wild1 GHC.Types.LT -> wild } } }
                        Language.PureScript.Comments.BlockComment ipv -> wild }
                   Language.PureScript.Comments.BlockComment a1
                   -> case x of wild1 {
                        Language.PureScript.Comments.LineComment ipv -> wild1
                        Language.PureScript.Comments.BlockComment b1
                        -> case a1 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                           case b1 of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                           case Data.Text.$w$ccompare ww1 ww2 ww3 ww5 ww6 ww7 of wild2 {
                             DEFAULT -> wild1 GHC.Types.LT -> wild } } } } }) -}
23fbbb637db19d35ca8339b51dc9ecf5
  $fShowComment :: GHC.Show.Show Language.PureScript.Comments.Comment
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Comments.Comment
                  Language.PureScript.Comments.$fShowComment_$cshowsPrec
                  Language.PureScript.Comments.$fShowComment_$cshow
                  Language.PureScript.Comments.$fShowComment_$cshowList -}
23fbbb637db19d35ca8339b51dc9ecf5
  $fShowComment1 ::
    Language.PureScript.Comments.Comment -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ (w :: Language.PureScript.Comments.Comment)
                   (w1 :: GHC.Base.String) ->
                 Language.PureScript.Comments.$w$cshowsPrec 0# w w1) -}
7ae3be445fb7a4d398428d5a800df665
  $fShowComment2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("BlockComment "#) -}
a80891b1d4fe54b099b20a05f8377e37
  $fShowComment3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("LineComment "#) -}
23fbbb637db19d35ca8339b51dc9ecf5
  $fShowComment_$cshow ::
    Language.PureScript.Comments.Comment -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: Language.PureScript.Comments.Comment) ->
                 case x of wild {
                   Language.PureScript.Comments.LineComment b1
                   -> GHC.CString.unpackAppendCString#
                        Language.PureScript.Comments.$fShowComment3
                        (case Data.Text.Show.$w$cshowsPrec
                                b1
                                (GHC.Types.[] @ GHC.Types.Char) of ww { (#,#) ww1 ww2 ->
                         GHC.Types.: @ GHC.Types.Char ww1 ww2 })
                   Language.PureScript.Comments.BlockComment b1
                   -> GHC.CString.unpackAppendCString#
                        Language.PureScript.Comments.$fShowComment2
                        (case Data.Text.Show.$w$cshowsPrec
                                b1
                                (GHC.Types.[] @ GHC.Types.Char) of ww { (#,#) ww1 ww2 ->
                         GHC.Types.: @ GHC.Types.Char ww1 ww2 }) }) -}
23fbbb637db19d35ca8339b51dc9ecf5
  $fShowComment_$cshowList ::
    [Language.PureScript.Comments.Comment] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Comments.Comment])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Comments.Comment
                   Language.PureScript.Comments.$fShowComment1
                   ls
                   s) -}
23fbbb637db19d35ca8339b51dc9ecf5
  $fShowComment_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Comments.Comment -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U><L,U>, Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Comments.Comment)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Language.PureScript.Comments.$w$cshowsPrec ww1 w1 w2 }) -}
23fbbb637db19d35ca8339b51dc9ecf5
  $fToJSONComment ::
    Data.Aeson.Types.ToJSON.ToJSON Language.PureScript.Comments.Comment
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Comments.Comment
                  Language.PureScript.Comments.$fToJSONComment_$ctoJSON
                  Language.PureScript.Comments.$fToJSONComment1
                    `cast`
                  (<Language.PureScript.Comments.Comment>_R
                   ->_R Sym (Data.ByteString.Builder.Internal.N:Builder[0]) ; Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                                                       <Data.Aeson.Types.Internal.Value>_P))
                  Language.PureScript.Comments.$fToJSONComment_$ctoJSONList
                  Language.PureScript.Comments.$fToJSONComment_$ctoEncodingList -}
23fbbb637db19d35ca8339b51dc9ecf5
  $fToJSONComment1 ::
    Language.PureScript.Comments.Comment
    -> forall r.
       Data.ByteString.Builder.Internal.BuildStep r
       -> Data.ByteString.Builder.Internal.BuildStep r
  {- Arity: 2, Strictness: <S,1*U><L,C(C1(U(U,U)))>,
     Unfolding: (\ (value :: Language.PureScript.Comments.Comment)
                   @ r
                   (eta :: Data.ByteString.Builder.Internal.BuildStep r) ->
                 case value of wild {
                   Language.PureScript.Comments.LineComment arg1
                   -> Data.Aeson.Types.ToJSON.$fFromPairsEncoding'Series1
                        @ Data.Aeson.Types.Internal.Value
                        Language.PureScript.Comments.$fToJSONComment_$d~~
                          `cast`
                        (Sym (Data.Type.Equality.N:~[0]
                                  <*>_N) <Data.Aeson.Types.Internal.Value>_N <Data.Aeson.Types.Internal.Value>_N)
                        (Data.Aeson.Encoding.Internal.Value
                           (\ @ r1
                              (x :: Data.ByteString.Builder.Internal.BuildStep r1)
                              (eta1 :: Data.ByteString.Builder.Internal.BufferRange)
                              (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                            case eta1 of ww { Data.ByteString.Builder.Internal.BufferRange ww1 ww2 ->
                            let {
                              lvl6 :: Data.ByteString.Builder.Internal.BufferRange
                                      -> GHC.Prim.State# GHC.Prim.RealWorld
                                      -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                            Data.ByteString.Builder.Internal.BuildSignal r1 #)
                                {- Arity: 2, Strictness: <S(SS),1*U(U,U)><S,U> -}
                              = \ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                                  (eta3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                case ds of wild1 { Data.ByteString.Builder.Internal.BufferRange dt dt1 ->
                                case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       dt
                                       0#
                                       58##
                                       eta3 of s2 { DEFAULT ->
                                Data.Aeson.Encoding.Builder.$wtext
                                  arg1
                                  @ r1
                                  x
                                  (GHC.Prim.plusAddr# dt 1#)
                                  dt1
                                  s2 } }
                            } in
                            Data.Aeson.Encoding.Builder.$wstring
                              Language.PureScript.Comments.$fToJSONComment4
                              @ r1
                              (\ (eta3 :: Data.ByteString.Builder.Internal.BufferRange)
                                 (eta4 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                               case eta3 of ww4 { Data.ByteString.Builder.Internal.BufferRange ww5 ww6 ->
                               case GHC.Prim.<# (GHC.Prim.minusAddr# ww6 ww5) 1# of lwild {
                                 DEFAULT
                                 -> case GHC.Prim.writeWord8OffAddr#
                                           @ GHC.Prim.RealWorld
                                           ww5
                                           0#
                                           58##
                                           eta4 of s2 { DEFAULT ->
                                    Data.Aeson.Encoding.Builder.$wtext
                                      arg1
                                      @ r1
                                      x
                                      (GHC.Prim.plusAddr# ww5 1#)
                                      ww6
                                      s2 }
                                 1#
                                 -> (# eta4,
                                       Data.ByteString.Builder.Internal.BufferFull
                                         @ r1
                                         1#
                                         ww5
                                         lvl6
                                           `cast`
                                         (<Data.ByteString.Builder.Internal.BufferRange>_R
                                          ->_R Sym (GHC.Types.N:IO[0]
                                                        <Data.ByteString.Builder.Internal.BuildSignal
                                                           r1>_R)) #) } })
                                `cast`
                              (<Data.ByteString.Builder.Internal.BufferRange>_R
                               ->_R Sym (GHC.Types.N:IO[0]
                                             <Data.ByteString.Builder.Internal.BuildSignal r1>_R))
                              ww1
                              ww2
                              eta2 })
                             `cast`
                           ((forall (r1 :: <*>_N).
                             <Data.ByteString.Builder.Internal.BuildStep r1>_R
                             ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                             ->_R Sym (GHC.Types.N:IO[0]
                                           <Data.ByteString.Builder.Internal.BuildSignal
                                              r1>_R)) ; (Sym (Data.ByteString.Builder.Internal.N:Builder[0]) ; Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                                                                                        <Data.Aeson.Encoding.Internal.Series>_P))))
                        @ r
                        eta
                   Language.PureScript.Comments.BlockComment arg1
                   -> Data.Aeson.Types.ToJSON.$fFromPairsEncoding'Series1
                        @ Data.Aeson.Types.Internal.Value
                        Language.PureScript.Comments.$fToJSONComment_$d~~
                          `cast`
                        (Sym (Data.Type.Equality.N:~[0]
                                  <*>_N) <Data.Aeson.Types.Internal.Value>_N <Data.Aeson.Types.Internal.Value>_N)
                        (Data.Aeson.Encoding.Internal.Value
                           (\ @ r1
                              (x :: Data.ByteString.Builder.Internal.BuildStep r1)
                              (eta1 :: Data.ByteString.Builder.Internal.BufferRange)
                              (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                            case eta1 of ww { Data.ByteString.Builder.Internal.BufferRange ww1 ww2 ->
                            let {
                              lvl6 :: Data.ByteString.Builder.Internal.BufferRange
                                      -> GHC.Prim.State# GHC.Prim.RealWorld
                                      -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                            Data.ByteString.Builder.Internal.BuildSignal r1 #)
                                {- Arity: 2, Strictness: <S(SS),1*U(U,U)><S,U> -}
                              = \ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                                  (eta3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                case ds of wild1 { Data.ByteString.Builder.Internal.BufferRange dt dt1 ->
                                case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       dt
                                       0#
                                       58##
                                       eta3 of s2 { DEFAULT ->
                                Data.Aeson.Encoding.Builder.$wtext
                                  arg1
                                  @ r1
                                  x
                                  (GHC.Prim.plusAddr# dt 1#)
                                  dt1
                                  s2 } }
                            } in
                            Data.Aeson.Encoding.Builder.$wstring
                              Language.PureScript.Comments.$fToJSONComment2
                              @ r1
                              (\ (eta3 :: Data.ByteString.Builder.Internal.BufferRange)
                                 (eta4 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                               case eta3 of ww4 { Data.ByteString.Builder.Internal.BufferRange ww5 ww6 ->
                               case GHC.Prim.<# (GHC.Prim.minusAddr# ww6 ww5) 1# of lwild {
                                 DEFAULT
                                 -> case GHC.Prim.writeWord8OffAddr#
                                           @ GHC.Prim.RealWorld
                                           ww5
                                           0#
                                           58##
                                           eta4 of s2 { DEFAULT ->
                                    Data.Aeson.Encoding.Builder.$wtext
                                      arg1
                                      @ r1
                                      x
                                      (GHC.Prim.plusAddr# ww5 1#)
                                      ww6
                                      s2 }
                                 1#
                                 -> (# eta4,
                                       Data.ByteString.Builder.Internal.BufferFull
                                         @ r1
                                         1#
                                         ww5
                                         lvl6
                                           `cast`
                                         (<Data.ByteString.Builder.Internal.BufferRange>_R
                                          ->_R Sym (GHC.Types.N:IO[0]
                                                        <Data.ByteString.Builder.Internal.BuildSignal
                                                           r1>_R)) #) } })
                                `cast`
                              (<Data.ByteString.Builder.Internal.BufferRange>_R
                               ->_R Sym (GHC.Types.N:IO[0]
                                             <Data.ByteString.Builder.Internal.BuildSignal r1>_R))
                              ww1
                              ww2
                              eta2 })
                             `cast`
                           ((forall (r1 :: <*>_N).
                             <Data.ByteString.Builder.Internal.BuildStep r1>_R
                             ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                             ->_R Sym (GHC.Types.N:IO[0]
                                           <Data.ByteString.Builder.Internal.BuildSignal
                                              r1>_R)) ; (Sym (Data.ByteString.Builder.Internal.N:Builder[0]) ; Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                                                                                        <Data.Aeson.Encoding.Internal.Series>_P))))
                        @ r
                        eta }) -}
8e4eddb6b0bec12de08dc94cc24c5546
  $fToJSONComment2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Comments.$fToJSONComment3) -}
a5c0ed2d13cf92f7f566cc0ae0ad0181
  $fToJSONComment3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("BlockComment"#) -}
46975c56ebed01172361807ec7c7a7de
  $fToJSONComment4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Comments.$fToJSONComment5) -}
4bba650b41262c24455e1761b201fc43
  $fToJSONComment5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("LineComment"#) -}
ec061c7e6bd5820c28ffc27d7f382ce0
  $fToJSONComment6 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Text.Internal.Text #)
                        Language.PureScript.Comments.$fToJSONComment7 of ds1 { (#,#) ipv1 ipv2 ->
                 ipv2 }) -}
7850dad3e93b8cec34e2e7093d6eae93
  $fToJSONComment7 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        10#
                        s1 of ds1 { (#,#) ipv1 ipv2 ->
                 Data.Aeson.Types.ToJSON.$wouter1
                   ipv2
                   4#
                   Language.PureScript.Comments.$fToJSONComment2
                   0#
                   ipv1 }) -}
e1227fdac3da772f7851ced83874e6c4
  $fToJSONComment8 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Text.Internal.Text #)
                        Language.PureScript.Comments.$fToJSONComment9 of ds1 { (#,#) ipv1 ipv2 ->
                 ipv2 }) -}
a50ae30f1d0a88c26bb158a3b6aa6be2
  $fToJSONComment9 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        10#
                        s1 of ds1 { (#,#) ipv1 ipv2 ->
                 Data.Aeson.Types.ToJSON.$wouter1
                   ipv2
                   4#
                   Language.PureScript.Comments.$fToJSONComment4
                   0#
                   ipv1 }) -}
23fbbb637db19d35ca8339b51dc9ecf5
  $fToJSONComment_$ctoEncodingList ::
    [Language.PureScript.Comments.Comment]
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (Data.Aeson.Encoding.Internal.list
                   @ Language.PureScript.Comments.Comment
                   Language.PureScript.Comments.$fToJSONComment1
                     `cast`
                   (<Language.PureScript.Comments.Comment>_R
                    ->_R Sym (Data.ByteString.Builder.Internal.N:Builder[0]) ; Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                                                        <Data.Aeson.Types.Internal.Value>_P))) -}
23fbbb637db19d35ca8339b51dc9ecf5
  $fToJSONComment_$ctoJSON ::
    Language.PureScript.Comments.Comment
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>m1, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.PureScript.Comments.Comment) ->
                 case Language.PureScript.Comments.$w$ctoJSON w of ww { Unit# ww1 ->
                 Data.Aeson.Types.Internal.Object ww1 }) -}
23fbbb637db19d35ca8339b51dc9ecf5
  $fToJSONComment_$ctoJSONList ::
    [Language.PureScript.Comments.Comment]
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (x :: [Language.PureScript.Comments.Comment]) ->
                 Data.Aeson.Types.Internal.$WArray
                   (Data.Vector.Generic.new
                      @ Data.Vector.Vector
                      @ Data.Aeson.Types.Internal.Value
                      (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                      (Data.Vector.Generic.New.unstream
                         @ Data.Vector.Vector
                         @ Data.Aeson.Types.Internal.Value
                         (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                         (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                            @ Data.Vector.Fusion.Util.Id
                            @ Data.Aeson.Types.Internal.Value
                            @ Data.Vector.Vector
                            Data.Vector.Fusion.Util.$fMonadId
                            Data.Vector.Fusion.Bundle.Size.Unknown
                            (GHC.Base.build
                               @ Data.Aeson.Types.Internal.Value
                               (\ @ b1
                                  (c :: Data.Aeson.Types.Internal.Value -> b1 -> b1)[OneShot]
                                  (n1 :: b1)[OneShot] ->
                                GHC.Base.foldr
                                  @ Language.PureScript.Comments.Comment
                                  @ b1
                                  (GHC.Base.mapFB
                                     @ Data.Aeson.Types.Internal.Value
                                     @ b1
                                     @ Language.PureScript.Comments.Comment
                                     c
                                     Language.PureScript.Comments.$fToJSONComment_$ctoJSON)
                                  n1
                                  x)))))) -}
040e555c1ea4c6629645e54b82abb9c1
  $fToJSONComment_$d~~ ::
    (Data.Aeson.Types.Internal.Value :: *)
    GHC.Types.~~ (Data.Aeson.Types.Internal.Value :: *)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Eq#
                   @ *
                   @ *
                   @ Data.Aeson.Types.Internal.Value
                   @ Data.Aeson.Types.Internal.Value
                   @~ <Data.Aeson.Types.Internal.Value>_N) -}
456e4fbc6c9bfe4e4a6d617d71793671
  $tc'BlockComment :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12761076938780660102##
                   8719271429568681802##
                   Language.PureScript.Comments.$trModule
                   Language.PureScript.Comments.$tc'BlockComment2
                   0#
                   Language.PureScript.Comments.$tc'BlockComment1) -}
dad2e0c4015c71bd37c62ed89b9767fb
  $tc'BlockComment1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
2544477869ac40d4e0f2b30175e1a467
  $tc'BlockComment2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Comments.$tc'BlockComment3) -}
b54d33044e3a44120bd859ec2c36a69e
  $tc'BlockComment3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'BlockComment"#) -}
77d3a751f4919a461f8de70d1f4f9952
  $tc'LineComment :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15713351522062204927##
                   14875078991340276633##
                   Language.PureScript.Comments.$trModule
                   Language.PureScript.Comments.$tc'LineComment1
                   0#
                   Language.PureScript.Comments.$tc'BlockComment1) -}
b616cac0f2754ae14d02611c20be7ebd
  $tc'LineComment1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Comments.$tc'LineComment2) -}
d4ba25b62f5eedcc8d91640afc6f85f0
  $tc'LineComment2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'LineComment"#) -}
fda2d1259476f5693eefc9be9beaa0e3
  $tcComment :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13942306553093458416##
                   1543437313717411994##
                   Language.PureScript.Comments.$trModule
                   Language.PureScript.Comments.$tcComment1
                   0#
                   GHC.Types.krep$*) -}
18a6ea7e962644bfac6934dec9096362
  $tcComment1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Comments.$tcComment2) -}
cd199773bdd45c25ab6eba0708707dd3
  $tcComment2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Comment"#) -}
ba528a3ac5528c50fc25c95ca761c0d1
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Language.PureScript.Comments.$trModule3
                   Language.PureScript.Comments.$trModule1) -}
1e46acc960815568169e88da20f38156
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Comments.$trModule2) -}
a8bbeefcbe6d2ce99616c806ffc54664
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Language.PureScript.Comments"#) -}
9f3efcd71eaa9a8f4879fa94f726ff04
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Comments.$trModule4) -}
7d2cf8c9e10daea486128cd22ce1ea6a
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"#) -}
23fbbb637db19d35ca8339b51dc9ecf5
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> Language.PureScript.Comments.Comment
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><S,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: Language.PureScript.Comments.Comment)
                   (w1 :: GHC.Base.String) ->
                 case w of wild {
                   Language.PureScript.Comments.LineComment b1
                   -> case GHC.Prim.>=# ww 11# of lwild {
                        DEFAULT
                        -> GHC.CString.unpackAppendCString#
                             Language.PureScript.Comments.$fShowComment3
                             (case Data.Text.Show.$w$cshowsPrec b1 w1 of ww1 { (#,#) ww2 ww3 ->
                              GHC.Types.: @ GHC.Types.Char ww2 ww3 })
                        1#
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.CString.unpackAppendCString#
                                Language.PureScript.Comments.$fShowComment3
                                (case Data.Text.Show.$w$cshowsPrec
                                        b1
                                        (GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.$fShow(,)2
                                           w1) of ww1 { (#,#) ww2 ww3 ->
                                 GHC.Types.: @ GHC.Types.Char ww2 ww3 })) }
                   Language.PureScript.Comments.BlockComment b1
                   -> case GHC.Prim.>=# ww 11# of lwild {
                        DEFAULT
                        -> GHC.CString.unpackAppendCString#
                             Language.PureScript.Comments.$fShowComment2
                             (case Data.Text.Show.$w$cshowsPrec b1 w1 of ww1 { (#,#) ww2 ww3 ->
                              GHC.Types.: @ GHC.Types.Char ww2 ww3 })
                        1#
                        -> GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.CString.unpackAppendCString#
                                Language.PureScript.Comments.$fShowComment2
                                (case Data.Text.Show.$w$cshowsPrec
                                        b1
                                        (GHC.Types.:
                                           @ GHC.Types.Char
                                           GHC.Show.$fShow(,)2
                                           w1) of ww1 { (#,#) ww2 ww3 ->
                                 GHC.Types.: @ GHC.Types.Char ww2 ww3 })) } }) -}
23fbbb637db19d35ca8339b51dc9ecf5
  $w$ctoJSON ::
    Language.PureScript.Comments.Comment
    -> (# Data.Aeson.Types.Internal.Object #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ (w :: Language.PureScript.Comments.Comment) ->
                 case w of wild {
                   Language.PureScript.Comments.LineComment arg1
                   -> case Data.Aeson.Types.ToJSON.$fFromPairsValueDList_go
                             (GHC.Types.:
                                @ Data.Aeson.Types.Internal.Pair
                                (Language.PureScript.Comments.$fToJSONComment8,
                                 Data.Aeson.Types.Internal.$WString arg1)
                                (GHC.Types.[] @ Data.Aeson.Types.Internal.Pair))
                             (Data.HashMap.Base.Empty
                                @ Data.Text.Internal.Text
                                @ Data.Aeson.Types.Internal.Value) of ww { Data.Aeson.Types.Internal.Object ww1 ->
                      (# ww1 #) }
                   Language.PureScript.Comments.BlockComment arg1
                   -> case Data.Aeson.Types.ToJSON.$fFromPairsValueDList_go
                             (GHC.Types.:
                                @ Data.Aeson.Types.Internal.Pair
                                (Language.PureScript.Comments.$fToJSONComment6,
                                 Data.Aeson.Types.Internal.$WString arg1)
                                (GHC.Types.[] @ Data.Aeson.Types.Internal.Pair))
                             (Data.HashMap.Base.Empty
                                @ Data.Text.Internal.Text
                                @ Data.Aeson.Types.Internal.Value) of ww { Data.Aeson.Types.Internal.Object ww1 ->
                      (# ww1 #) } }) -}
23fbbb637db19d35ca8339b51dc9ecf5
  data Comment
    = LineComment Data.Text.Internal.Text
    | BlockComment Data.Text.Internal.Text
instance GHC.Classes.Eq [Language.PureScript.Comments.Comment]
  = Language.PureScript.Comments.$fEqComment
instance Data.Aeson.Types.FromJSON.FromJSON [Language.PureScript.Comments.Comment]
  = Language.PureScript.Comments.$fFromJSONComment
instance GHC.Classes.Ord [Language.PureScript.Comments.Comment]
  = Language.PureScript.Comments.$fOrdComment
instance GHC.Show.Show [Language.PureScript.Comments.Comment]
  = Language.PureScript.Comments.$fShowComment
instance Data.Aeson.Types.ToJSON.ToJSON [Language.PureScript.Comments.Comment]
  = Language.PureScript.Comments.$fToJSONComment
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

