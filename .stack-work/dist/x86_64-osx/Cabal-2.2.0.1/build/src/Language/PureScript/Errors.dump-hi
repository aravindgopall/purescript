
==================== FINAL INTERFACE ====================
2019-01-24 14:14:57.398283 UTC

interface purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Errors 8043
  interface hash: 1385e717d3bcea20c52a5a998a0efcf5
  ABI hash: 3c1ad933587510f8b20a8c9ec2e86ce9
  export-list hash: 8e61484c4664eceb943d9fc4820c721b
  orphan hash: 434b6e098d560040a710bae47a7fba4e
  flag hash: 86092872c28014c54f5bdcac6ce694b6
  opt_hash: 2c98c95d41c045ae9c2fb565ec8aabc6
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Language.PureScript.AST.Binders.binderNames
  Language.PureScript.AST.Binders.isIrrefutable
  Language.PureScript.AST.Declarations.MkUnguarded
  Language.PureScript.AST.Declarations.TypeFixityDeclaration
  Language.PureScript.AST.Declarations.ValueDecl
  Language.PureScript.AST.Declarations.ValueFixityDeclaration
  Language.PureScript.AST.Declarations.addDefaultImport
  Language.PureScript.AST.Declarations.compDecRef
  Language.PureScript.AST.Declarations.declName
  Language.PureScript.AST.Declarations.declRefName
  Language.PureScript.AST.Declarations.declRefSourceSpan
  Language.PureScript.AST.Declarations.declSourceAnn
  Language.PureScript.AST.Declarations.declSourceSpan
  Language.PureScript.AST.Declarations.flattenDecls
  Language.PureScript.AST.Declarations.getFixityDecl
  Language.PureScript.AST.Declarations.getKindRef
  Language.PureScript.AST.Declarations.getModuleDeclarations
  Language.PureScript.AST.Declarations.getModuleName
  Language.PureScript.AST.Declarations.getModuleSourceSpan
  Language.PureScript.AST.Declarations.getTypeClassRef
  Language.PureScript.AST.Declarations.getTypeDeclaration
  Language.PureScript.AST.Declarations.getTypeOpRef
  Language.PureScript.AST.Declarations.getTypeRef
  Language.PureScript.AST.Declarations.getValueDeclaration
  Language.PureScript.AST.Declarations.getValueOpRef
  Language.PureScript.AST.Declarations.getValueRef
  Language.PureScript.AST.Declarations.importPrim
  Language.PureScript.AST.Declarations.isDataDecl
  Language.PureScript.AST.Declarations.isExplicit
  Language.PureScript.AST.Declarations.isExternDataDecl
  Language.PureScript.AST.Declarations.isExternDecl
  Language.PureScript.AST.Declarations.isExternKindDecl
  Language.PureScript.AST.Declarations.isFixityDecl
  Language.PureScript.AST.Declarations.isImplicit
  Language.PureScript.AST.Declarations.isImportDecl
  Language.PureScript.AST.Declarations.isModuleRef
  Language.PureScript.AST.Declarations.isTrueExpr
  Language.PureScript.AST.Declarations.isTypeClassDeclaration
  Language.PureScript.AST.Declarations.isTypeClassInstanceDeclaration
  Language.PureScript.AST.Declarations.isValueDecl
  Language.PureScript.AST.Declarations.mapTypeInstanceBody
  Language.PureScript.AST.Declarations.onTypeSearchTypes
  Language.PureScript.AST.Declarations.onTypeSearchTypesM
  Language.PureScript.AST.Declarations.overTypeDeclaration
  Language.PureScript.AST.Declarations.overValueDeclaration
  Language.PureScript.AST.Declarations.traverseTypeInstanceBody
  Language.PureScript.AST.Declarations.unwrapTypeDeclaration
  Language.PureScript.AST.Exported.exportedDeclarations
  Language.PureScript.AST.Exported.isExported
  Language.PureScript.AST.Operators.readAssoc
  Language.PureScript.AST.Operators.showAssoc
  Language.PureScript.AST.SourcePos.NullSourceAnn
  Language.PureScript.AST.SourcePos.NullSourceSpan
  Language.PureScript.AST.SourcePos.displaySourcePos
  Language.PureScript.AST.SourcePos.displaySourcePosShort
  Language.PureScript.AST.SourcePos.displaySourceSpan
  Language.PureScript.AST.SourcePos.displayStartEndPos
  Language.PureScript.AST.SourcePos.displayStartEndPosShort
  Language.PureScript.AST.SourcePos.internalModuleSourceSpan
  Language.PureScript.AST.SourcePos.nonEmptySpan
  Language.PureScript.AST.SourcePos.nullSourceAnn
  Language.PureScript.AST.SourcePos.nullSourceSpan
  Language.PureScript.AST.SourcePos.widenSourceAnn
  Language.PureScript.AST.SourcePos.widenSourceSpan
  Language.PureScript.AST.Traversals.accumKinds
  Language.PureScript.AST.Traversals.accumTypes
  Language.PureScript.AST.Traversals.everythingOnValues
  Language.PureScript.AST.Traversals.everythingWithContextOnValues
  Language.PureScript.AST.Traversals.everythingWithScope
  Language.PureScript.AST.Traversals.everywhereOnValues
  Language.PureScript.AST.Traversals.everywhereOnValuesM
  Language.PureScript.AST.Traversals.everywhereOnValuesTopDownM
  Language.PureScript.AST.Traversals.everywhereWithContextOnValuesM
  Language.PureScript.AST.Traversals.guardedExprM
  Language.PureScript.AST.Traversals.inScope
  Language.PureScript.AST.Traversals.litM
  Language.PureScript.AST.Traversals.mapGuardedExpr
  Language.PureScript.AST.Traversals.overTypes
  Language.PureScript.Errors.addHint
  Language.PureScript.Errors.addHints
  Language.PureScript.Errors.ansiColor
  Language.PureScript.Errors.ansiColorReset
  Language.PureScript.Errors.colorCode
  Language.PureScript.Errors.colorCodeBox
  Language.PureScript.Errors.defaultCodeColor
  Language.PureScript.Errors.defaultPPEOptions
  Language.PureScript.Errors.defaultUnknownMap
  Language.PureScript.Errors.errorCode
  Language.PureScript.Errors.errorDocUri
  Language.PureScript.Errors.errorMessage
  Language.PureScript.Errors.errorMessage'
  Language.PureScript.Errors.errorMessage''
  Language.PureScript.Errors.errorMessage'''
  Language.PureScript.Errors.errorModule
  Language.PureScript.Errors.errorSpan
  Language.PureScript.Errors.errorSuggestion
  Language.PureScript.Errors.escalateWarningWhen
  Language.PureScript.Errors.filterErrors
  Language.PureScript.Errors.findHint
  Language.PureScript.Errors.indent
  Language.PureScript.Errors.line
  Language.PureScript.Errors.lineS
  Language.PureScript.Errors.nonEmpty
  Language.PureScript.Errors.onErrorMessages
  Language.PureScript.Errors.onTypesInErrorMessage
  Language.PureScript.Errors.onTypesInErrorMessageM
  Language.PureScript.Errors.parU
  Language.PureScript.Errors.positionedError
  Language.PureScript.Errors.prettyPrintExport
  Language.PureScript.Errors.prettyPrintImport
  Language.PureScript.Errors.prettyPrintMultipleErrors
  Language.PureScript.Errors.prettyPrintMultipleErrorsBox
  Language.PureScript.Errors.prettyPrintMultipleErrorsWith
  Language.PureScript.Errors.prettyPrintMultipleWarnings
  Language.PureScript.Errors.prettyPrintMultipleWarningsBox
  Language.PureScript.Errors.prettyPrintParseError
  Language.PureScript.Errors.prettyPrintParseErrorMessages
  Language.PureScript.Errors.prettyPrintRef
  Language.PureScript.Errors.prettyPrintSingleError
  Language.PureScript.Errors.reflectErrors
  Language.PureScript.Errors.reifyErrors
  Language.PureScript.Errors.renderBox
  Language.PureScript.Errors.replaceUnknowns
  Language.PureScript.Errors.rethrow
  Language.PureScript.Errors.rethrowWithPosition
  Language.PureScript.Errors.showSuggestion
  Language.PureScript.Errors.singleError
  Language.PureScript.Errors.stripModuleAndSpan
  Language.PureScript.Errors.suggestionSpan
  Language.PureScript.Errors.toTypelevelString
  Language.PureScript.Errors.unwrapErrorMessage
  Language.PureScript.Errors.warnAndRethrow
  Language.PureScript.Errors.warnAndRethrowWithPosition
  Language.PureScript.Errors.warnWithPosition
  Language.PureScript.Errors.withPosition
  Language.PureScript.AST.Binders.Binder{Language.PureScript.AST.Binders.BinaryNoParensBinder Language.PureScript.AST.Binders.ConstructorBinder Language.PureScript.AST.Binders.LiteralBinder Language.PureScript.AST.Binders.NamedBinder Language.PureScript.AST.Binders.NullBinder Language.PureScript.AST.Binders.OpBinder Language.PureScript.AST.Binders.ParensInBinder Language.PureScript.AST.Binders.PositionedBinder Language.PureScript.AST.Binders.TypedBinder Language.PureScript.AST.Binders.VarBinder}
  Language.PureScript.AST.Declarations.AssocList{Language.PureScript.AST.Declarations.AssocList runAssocList}
  Language.PureScript.AST.Declarations.CaseAlternative{Language.PureScript.AST.Declarations.CaseAlternative caseAlternativeBinders caseAlternativeResult}
  Language.PureScript.AST.Declarations.Context
  Language.PureScript.AST.Declarations.Declaration{Language.PureScript.AST.Declarations.BindingGroupDeclaration Language.PureScript.AST.Declarations.BoundValueDeclaration Language.PureScript.AST.Declarations.DataBindingGroupDeclaration Language.PureScript.AST.Declarations.DataDeclaration Language.PureScript.AST.Declarations.ExternDataDeclaration Language.PureScript.AST.Declarations.ExternDeclaration Language.PureScript.AST.Declarations.ExternKindDeclaration Language.PureScript.AST.Declarations.FixityDeclaration Language.PureScript.AST.Declarations.ImportDeclaration Language.PureScript.AST.Declarations.TypeClassDeclaration Language.PureScript.AST.Declarations.TypeDeclaration Language.PureScript.AST.Declarations.TypeInstanceDeclaration Language.PureScript.AST.Declarations.TypeSynonymDeclaration Language.PureScript.AST.Declarations.ValueDeclaration}
  Language.PureScript.AST.Declarations.DeclarationRef{Language.PureScript.AST.Declarations.KindRef Language.PureScript.AST.Declarations.ModuleRef Language.PureScript.AST.Declarations.ReExportRef Language.PureScript.AST.Declarations.TypeClassRef Language.PureScript.AST.Declarations.TypeInstanceRef Language.PureScript.AST.Declarations.TypeOpRef Language.PureScript.AST.Declarations.TypeRef Language.PureScript.AST.Declarations.ValueOpRef Language.PureScript.AST.Declarations.ValueRef}
  Language.PureScript.AST.Declarations.DoNotationElement{Language.PureScript.AST.Declarations.DoNotationBind Language.PureScript.AST.Declarations.DoNotationLet Language.PureScript.AST.Declarations.DoNotationValue Language.PureScript.AST.Declarations.PositionedDoNotationElement}
  Language.PureScript.AST.Declarations.ErrorMessage{Language.PureScript.AST.Declarations.ErrorMessage}
  Language.PureScript.AST.Declarations.ErrorMessageHint{Language.PureScript.AST.Declarations.ErrorCheckingAccessor Language.PureScript.AST.Declarations.ErrorCheckingGuard Language.PureScript.AST.Declarations.ErrorCheckingKind Language.PureScript.AST.Declarations.ErrorCheckingType Language.PureScript.AST.Declarations.ErrorInApplication Language.PureScript.AST.Declarations.ErrorInBindingGroup Language.PureScript.AST.Declarations.ErrorInDataBindingGroup Language.PureScript.AST.Declarations.ErrorInDataConstructor Language.PureScript.AST.Declarations.ErrorInExpression Language.PureScript.AST.Declarations.ErrorInForeignImport Language.PureScript.AST.Declarations.ErrorInInstance Language.PureScript.AST.Declarations.ErrorInModule Language.PureScript.AST.Declarations.ErrorInSubsumption Language.PureScript.AST.Declarations.ErrorInTypeClassDeclaration Language.PureScript.AST.Declarations.ErrorInTypeConstructor Language.PureScript.AST.Declarations.ErrorInTypeDeclaration Language.PureScript.AST.Declarations.ErrorInTypeSynonym Language.PureScript.AST.Declarations.ErrorInValueDeclaration Language.PureScript.AST.Declarations.ErrorInferringType Language.PureScript.AST.Declarations.ErrorSolvingConstraint Language.PureScript.AST.Declarations.ErrorUnifyingTypes Language.PureScript.AST.Declarations.PositionedError}
  Language.PureScript.AST.Declarations.Expr{Language.PureScript.AST.Declarations.Abs Language.PureScript.AST.Declarations.Accessor Language.PureScript.AST.Declarations.Ado Language.PureScript.AST.Declarations.AnonymousArgument Language.PureScript.AST.Declarations.App Language.PureScript.AST.Declarations.BinaryNoParens Language.PureScript.AST.Declarations.Case Language.PureScript.AST.Declarations.Constructor Language.PureScript.AST.Declarations.DeferredDictionary Language.PureScript.AST.Declarations.Do Language.PureScript.AST.Declarations.Hole Language.PureScript.AST.Declarations.IfThenElse Language.PureScript.AST.Declarations.Let Language.PureScript.AST.Declarations.Literal Language.PureScript.AST.Declarations.ObjectUpdate Language.PureScript.AST.Declarations.ObjectUpdateNested Language.PureScript.AST.Declarations.Op Language.PureScript.AST.Declarations.Parens Language.PureScript.AST.Declarations.PositionedValue Language.PureScript.AST.Declarations.TypeClassDictionary Language.PureScript.AST.Declarations.TypeClassDictionaryAccessor Language.PureScript.AST.Declarations.TypeClassDictionaryConstructorApp Language.PureScript.AST.Declarations.TypedValue Language.PureScript.AST.Declarations.UnaryMinus Language.PureScript.AST.Declarations.Var}
  Language.PureScript.AST.Declarations.Guard{Language.PureScript.AST.Declarations.ConditionGuard Language.PureScript.AST.Declarations.PatternGuard}
  Language.PureScript.AST.Declarations.GuardedExpr{Language.PureScript.AST.Declarations.GuardedExpr}
  Language.PureScript.AST.Declarations.HintCategory{Language.PureScript.AST.Declarations.CheckHint Language.PureScript.AST.Declarations.ExprHint Language.PureScript.AST.Declarations.KindHint Language.PureScript.AST.Declarations.OtherHint Language.PureScript.AST.Declarations.PositionHint Language.PureScript.AST.Declarations.SolverHint}
  Language.PureScript.AST.Declarations.ImportDeclarationType{Language.PureScript.AST.Declarations.Explicit Language.PureScript.AST.Declarations.Hiding Language.PureScript.AST.Declarations.Implicit}
  Language.PureScript.AST.Declarations.Module{Language.PureScript.AST.Declarations.Module}
  Language.PureScript.AST.Declarations.PathNode{Language.PureScript.AST.Declarations.Branch Language.PureScript.AST.Declarations.Leaf}
  Language.PureScript.AST.Declarations.PathTree{Language.PureScript.AST.Declarations.PathTree}
  Language.PureScript.AST.Declarations.SimpleErrorMessage{Language.PureScript.AST.Declarations.AdditionalProperty Language.PureScript.AST.Declarations.AmbiguousTypeVariables Language.PureScript.AST.Declarations.ArgListLengthsDiffer Language.PureScript.AST.Declarations.CannotDefinePrimModules Language.PureScript.AST.Declarations.CannotDerive Language.PureScript.AST.Declarations.CannotDeriveNewtypeForData Language.PureScript.AST.Declarations.CannotFindDerivingType Language.PureScript.AST.Declarations.CannotGeneralizeRecursiveFunction Language.PureScript.AST.Declarations.CannotGetFileInfo Language.PureScript.AST.Declarations.CannotReadFile Language.PureScript.AST.Declarations.CannotUseBindWithDo Language.PureScript.AST.Declarations.CannotWriteFile Language.PureScript.AST.Declarations.CaseBinderLengthDiffers Language.PureScript.AST.Declarations.ClassInstanceArityMismatch Language.PureScript.AST.Declarations.ConstrainedTypeUnified Language.PureScript.AST.Declarations.CycleInDeclaration Language.PureScript.AST.Declarations.CycleInModules Language.PureScript.AST.Declarations.CycleInTypeSynonym Language.PureScript.AST.Declarations.DeclConflict Language.PureScript.AST.Declarations.DuplicateExportRef Language.PureScript.AST.Declarations.DuplicateImport Language.PureScript.AST.Declarations.DuplicateImportRef Language.PureScript.AST.Declarations.DuplicateInstance Language.PureScript.AST.Declarations.DuplicateLabel Language.PureScript.AST.Declarations.DuplicateModule Language.PureScript.AST.Declarations.DuplicateSelectiveImport Language.PureScript.AST.Declarations.DuplicateTypeArgument Language.PureScript.AST.Declarations.DuplicateTypeClass Language.PureScript.AST.Declarations.DuplicateValueDeclaration Language.PureScript.AST.Declarations.ErrorParsingFFIModule Language.PureScript.AST.Declarations.ErrorParsingModule Language.PureScript.AST.Declarations.EscapedSkolem Language.PureScript.AST.Declarations.ExpectedType Language.PureScript.AST.Declarations.ExpectedTypeConstructor Language.PureScript.AST.Declarations.ExpectedWildcard Language.PureScript.AST.Declarations.ExportConflict Language.PureScript.AST.Declarations.ExprDoesNotHaveType Language.PureScript.AST.Declarations.ExtraneousClassMember Language.PureScript.AST.Declarations.HidingImport Language.PureScript.AST.Declarations.HoleInferredType Language.PureScript.AST.Declarations.ImplicitImport Language.PureScript.AST.Declarations.ImplicitQualifiedImport Language.PureScript.AST.Declarations.ImplicitQualifiedImportReExport Language.PureScript.AST.Declarations.ImportHidingModule Language.PureScript.AST.Declarations.IncompleteExhaustivityCheck Language.PureScript.AST.Declarations.IncorrectAnonymousArgument Language.PureScript.AST.Declarations.IncorrectConstructorArity Language.PureScript.AST.Declarations.InfiniteKind Language.PureScript.AST.Declarations.InfiniteType Language.PureScript.AST.Declarations.IntOutOfRange Language.PureScript.AST.Declarations.InvalidDerivedInstance Language.PureScript.AST.Declarations.InvalidDoBind Language.PureScript.AST.Declarations.InvalidDoLet Language.PureScript.AST.Declarations.InvalidFFIIdentifier Language.PureScript.AST.Declarations.InvalidInstanceHead Language.PureScript.AST.Declarations.InvalidNewtype Language.PureScript.AST.Declarations.InvalidNewtypeInstance Language.PureScript.AST.Declarations.InvalidOperatorInBinder Language.PureScript.AST.Declarations.KindsDoNotUnify Language.PureScript.AST.Declarations.MisleadingEmptyTypeImport Language.PureScript.AST.Declarations.MissingClassMember Language.PureScript.AST.Declarations.MissingFFIImplementations Language.PureScript.AST.Declarations.MissingFFIModule Language.PureScript.AST.Declarations.MissingNewtypeSuperclassInstance Language.PureScript.AST.Declarations.MissingTypeDeclaration Language.PureScript.AST.Declarations.MixedAssociativityError Language.PureScript.AST.Declarations.ModuleNotFound Language.PureScript.AST.Declarations.MultipleTypeOpFixities Language.PureScript.AST.Declarations.MultipleValueOpFixities Language.PureScript.AST.Declarations.NameIsUndefined Language.PureScript.AST.Declarations.NoInstanceFound Language.PureScript.AST.Declarations.NonAssociativeError Language.PureScript.AST.Declarations.OrphanInstance Language.PureScript.AST.Declarations.OrphanTypeDeclaration Language.PureScript.AST.Declarations.OverlappingArgNames Language.PureScript.AST.Declarations.OverlappingInstances Language.PureScript.AST.Declarations.OverlappingNamesInLet Language.PureScript.AST.Declarations.OverlappingPattern Language.PureScript.AST.Declarations.PartiallyAppliedSynonym Language.PureScript.AST.Declarations.PossiblyInfiniteInstance Language.PureScript.AST.Declarations.PropertyIsMissing Language.PureScript.AST.Declarations.RedefinedIdent Language.PureScript.AST.Declarations.ScopeConflict Language.PureScript.AST.Declarations.ScopeShadowing Language.PureScript.AST.Declarations.ShadowedName Language.PureScript.AST.Declarations.ShadowedTypeVar Language.PureScript.AST.Declarations.TransitiveDctorExportError Language.PureScript.AST.Declarations.TransitiveExportError Language.PureScript.AST.Declarations.TypeSynonymInstance Language.PureScript.AST.Declarations.TypesDoNotUnify Language.PureScript.AST.Declarations.UndefinedTypeVariable Language.PureScript.AST.Declarations.UnknownClass Language.PureScript.AST.Declarations.UnknownExport Language.PureScript.AST.Declarations.UnknownExportDataConstructor Language.PureScript.AST.Declarations.UnknownImport Language.PureScript.AST.Declarations.UnknownImportDataConstructor Language.PureScript.AST.Declarations.UnknownName Language.PureScript.AST.Declarations.UnnecessaryFFIModule Language.PureScript.AST.Declarations.UnusableDeclaration Language.PureScript.AST.Declarations.UnusedDctorExplicitImport Language.PureScript.AST.Declarations.UnusedDctorImport Language.PureScript.AST.Declarations.UnusedExplicitImport Language.PureScript.AST.Declarations.UnusedFFIImplementations Language.PureScript.AST.Declarations.UnusedImport Language.PureScript.AST.Declarations.UnusedTypeVar Language.PureScript.AST.Declarations.UnverifiableSuperclassInstance Language.PureScript.AST.Declarations.UserDefinedWarning Language.PureScript.AST.Declarations.WildcardInferredType}
  Language.PureScript.AST.Declarations.TypeDeclarationData{Language.PureScript.AST.Declarations.TypeDeclarationData tydeclIdent tydeclSourceAnn tydeclType}
  Language.PureScript.AST.Declarations.TypeFixity{Language.PureScript.AST.Declarations.TypeFixity}
  Language.PureScript.AST.Declarations.TypeInstanceBody{Language.PureScript.AST.Declarations.DerivedInstance Language.PureScript.AST.Declarations.ExplicitInstance Language.PureScript.AST.Declarations.NewtypeInstance Language.PureScript.AST.Declarations.NewtypeInstanceWithDictionary}
  Language.PureScript.AST.Declarations.TypeSearch{Language.PureScript.AST.Declarations.TSAfter Language.PureScript.AST.Declarations.TSBefore tsAfterIdentifiers tsAfterRecordFields}
  Language.PureScript.AST.Declarations.ValueDeclarationData{Language.PureScript.AST.Declarations.ValueDeclarationData valdeclBinders valdeclExpression valdeclIdent valdeclName valdeclSourceAnn}
  Language.PureScript.AST.Declarations.ValueFixity{Language.PureScript.AST.Declarations.ValueFixity}
  Language.PureScript.AST.Declarations.WhereProvenance{Language.PureScript.AST.Declarations.FromLet Language.PureScript.AST.Declarations.FromWhere}
  Language.PureScript.AST.Literals.Literal{Language.PureScript.AST.Literals.ArrayLiteral Language.PureScript.AST.Literals.BooleanLiteral Language.PureScript.AST.Literals.CharLiteral Language.PureScript.AST.Literals.NumericLiteral Language.PureScript.AST.Literals.ObjectLiteral Language.PureScript.AST.Literals.StringLiteral}
  Language.PureScript.AST.Operators.Associativity{Language.PureScript.AST.Operators.Infix Language.PureScript.AST.Operators.Infixl Language.PureScript.AST.Operators.Infixr}
  Language.PureScript.AST.Operators.Fixity{Language.PureScript.AST.Operators.Fixity}
  Language.PureScript.AST.Operators.Precedence
  Language.PureScript.AST.SourcePos.SourceAnn
  Language.PureScript.AST.SourcePos.SourcePos{Language.PureScript.AST.SourcePos.SourcePos sourcePosColumn sourcePosLine}
  Language.PureScript.AST.SourcePos.SourceSpan{Language.PureScript.AST.SourcePos.SourceSpan spanEnd spanName spanStart}
  Language.PureScript.AST.Traversals.ScopedIdent{Language.PureScript.AST.Traversals.LocalIdent Language.PureScript.AST.Traversals.ToplevelIdent}
  Language.PureScript.Errors.ErrorSuggestion{Language.PureScript.Errors.ErrorSuggestion}
  Language.PureScript.Errors.Level{Language.PureScript.Errors.Error Language.PureScript.Errors.Warning}
  Language.PureScript.Errors.MultipleErrors{Language.PureScript.Errors.MultipleErrors runMultipleErrors}
  Language.PureScript.Errors.PPEOptions{Language.PureScript.Errors.PPEOptions ppeCodeColor ppeFull ppeLevel ppeRelativeDirectory ppeShowDocs}
  Language.PureScript.Errors.TypeMap{Language.PureScript.Errors.TypeMap umNextIndex umSkolemMap umUnknownMap}
module dependencies: Control.Monad.Supply
                     Control.Monad.Supply.Class Language.PureScript.AST
                     Language.PureScript.AST.Binders
                     Language.PureScript.AST.Declarations
                     Language.PureScript.AST.Exported Language.PureScript.AST.Literals
                     Language.PureScript.AST.Operators Language.PureScript.AST.SourcePos
                     Language.PureScript.AST.Traversals Language.PureScript.Bundle
                     Language.PureScript.Comments Language.PureScript.Constants
                     Language.PureScript.Crash Language.PureScript.Environment
                     Language.PureScript.Kinds Language.PureScript.Label
                     Language.PureScript.Names Language.PureScript.PSString
                     Language.PureScript.Parser.Lexer Language.PureScript.Parser.State
                     Language.PureScript.Pretty Language.PureScript.Pretty.Common
                     Language.PureScript.Pretty.Kinds Language.PureScript.Pretty.Types
                     Language.PureScript.Pretty.Values
                     Language.PureScript.Publish.BoxesHelpers
                     Language.PureScript.Traversals
                     Language.PureScript.TypeClassDictionaries Language.PureScript.Types
                     Paths_purescript
package dependencies: aeson-1.3.1.1 ansi-terminal-0.8.0.4
                      array-0.5.2.0 async-2.2.1 attoparsec-0.13.2.2 base-4.11.1.0
                      base-compat-0.10.4 binary-0.8.5.1 blaze-builder-0.4.1.0 boxes-0.1.5
                      bytestring-0.10.8.2 colour-2.3.4 containers-0.5.11.0
                      deepseq-1.4.3.0 dlist-0.8.0.4 filepath-1.4.2 ghc-boot-th-8.4.3
                      ghc-prim-0.5.2.0 hashable-1.2.7.0 integer-gmp-1.0.2.0
                      integer-logarithms-1.0.2.1 language-javascript-0.6.0.11
                      microlens-0.4.9.1 microlens-ghc-0.4.9 microlens-mtl-0.1.11.1
                      microlens-platform-0.3.10 microlens-th-0.4.2.1 mtl-2.2.2
                      parsec-3.1.13.0 pattern-arrows-0.0.2 pretty-1.1.3.6
                      primitive-0.6.3.0 protolude-0.2.2 random-1.1 scientific-0.3.6.2
                      sourcemap-0.1.6 split-0.2.3.3 stm-2.4.5.0 syb-0.7 tagged-0.8.5
                      template-haskell-2.13.0.0 text-1.2.3.0 th-abstraction-0.2.8.0
                      time-1.8.0.2 time-locale-compat-0.1.1.4 transformers-0.5.5.0
                      unordered-containers-0.2.9.0 utf8-string-1.0.1.1 uuid-types-1.0.3
                      vector-0.12.0.1
orphans: syb-0.7:Data.Generics.Instances
         stm-2.4.5.0:Control.Monad.STM
         attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         microlens-platform-0.3.10:Lens.Micro.Platform
         microlens-ghc-0.4.9:Lens.Micro.GHC
         hashable-1.2.7.0:Data.Hashable.Generic
         vector-0.12.0.1:Data.Vector.Unboxed
         vector-0.12.0.1:Data.Vector.Fusion.Bundle colour-2.3.4:Data.Colour
         text-1.2.3.0:Data.Text.Lazy text-1.2.3.0:Data.Text
         binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show
         transformers-0.5.5.0:Control.Monad.Trans.Error
         base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: aeson-1.3.1.1:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.Graph
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         dlist-0.8.0.4:Data.DList ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         microlens-0.4.9.1:Lens.Micro.Internal
                         microlens-ghc-0.4.9:Lens.Micro.GHC
                         microlens-mtl-0.1.11.1:Lens.Micro.Mtl.Internal
                         microlens-platform-0.3.10:Lens.Micro.Platform
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.Declarations
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.Operators
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.SourcePos
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Comments
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Environment
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Kinds
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Label
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Names
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.PSString
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.TypeClassDictionaries
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Types
                         tagged-0.8.5:Data.Tagged
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
                         th-abstraction-0.2.8.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  ansi-terminal-0.8.0.4:System.Console.ANSI 9542e556da778098d693d4850d7b8f65
import  -/  ansi-terminal-0.8.0.4:System.Console.ANSI.Codes 3f82779a1574ef76084e2c562ad43b8d
import  -/  ansi-terminal-0.8.0.4:System.Console.ANSI.Types 143a0b86b7e220cc7b473da5e9470584
import  -/  base-4.11.1.0:Control.Arrow ce43199b5356a11ee2a8317f0ec30aee
import  -/  base-4.11.1.0:Control.Monad c5f960c67d822497578bffbd3e4c01cf
import  -/  base-4.11.1.0:Data.Char 3e89818e2b8ef1a2cc5393163484da72
import  -/  base-4.11.1.0:Data.Either 39d922b371c4c52d426e9ee66de8371a
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.Functor f522c3501272159820fd6f242510732f
import  -/  base-4.11.1.0:Data.Functor.Identity 9430dcaadd71c129eeb5ca7b963c9b54
import  -/  base-4.11.1.0:Data.List 83dc843e47bfc0c5af51e19c6f3476d5
import  -/  base-4.11.1.0:Data.List.NonEmpty 595ee3baddcadebc4831ea7541427984
import  -/  base-4.11.1.0:Data.Maybe 409c3da2b142470b68be39ce1d97a9f7
import  -/  base-4.11.1.0:Data.Monoid c40cd435d79b84293ce5503253ee6d44
import  -/  base-4.11.1.0:Data.OldList 1b35aa3c6805ff7c8887a35a866fe006
import  -/  base-4.11.1.0:Data.Ord 8579f16310a4ec69c00617051bb5c3d9
import  -/  base-4.11.1.0:Data.Traversable 7ad4edb9184ea1ae8e73f6b94f115c8c
import  -/  base-4.11.1.0:Data.Tuple 3af66f3ac61ed95ba8a3a3f68ebc5003
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.IO 1d5542cc02075c5e948018bfacea89c1
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:GHC.Real b4beb0389ba1ad5d9640aae67848c5d3
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-4.11.1.0:GHC.Unicode 8234c40b59f035e845832a42e8725a00
import  -/  base-compat-0.10.4:Prelude.Compat bb6796186ed35a1d09dc34362a3fc27e
import  -/  boxes-0.1.5:Text.PrettyPrint.Boxes 49de0395c02f08dbf50ec04d019c04fb
import  -/  containers-0.5.11.0:Data.Map 0dbdaec812ef695a364aa6c69e7f7d53
import  -/  containers-0.5.11.0:Data.Map.Internal 0150e210d0ae8df0f3a0669d5e32d8fa
import  -/  containers-0.5.11.0:Data.Set 7d3c64a641be4cacbcd8119445bab919
import  -/  containers-0.5.11.0:Data.Set.Internal 93fa3ef95853aa2a7aadf32d693bd451
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  mtl-2.2.2:Control.Monad.Error.Class df146c18e27154b8df4c8637c59fd61b
import  -/  mtl-2.2.2:Control.Monad.Writer b86905dc6b5d4d3a09dfa93d3ac3bb98
import  -/  mtl-2.2.2:Control.Monad.Writer.Class 69f540e019eada69892c26d267276458
import  -/  parsec-3.1.13.0:Text.Parsec 963cbe7b4116cef91451434dc005a011
import  -/  parsec-3.1.13.0:Text.Parsec.Error 5c35aa426bd1cd52bcab90d9a1e3ce4c
import  -/  protolude-0.2.2:Protolude 2c2d16096c8a60f59f646a3b93b0eb7b
import  -/  protolude-0.2.2:Protolude.List 3a80368167450d7a4360ebf1ea443345
import  -/  Language.PureScript.AST e89b59f8e201961eafd3ff905a683659
  exports: be73d3bb7d4ebe5df082453f6d572075
import  -/  Language.PureScript.AST.Binders 482af52ec934a93b1ca6ec424fbe30f2
  BinaryNoParensBinder fa245b4b20e4d00bda41b59e19ae05a3
  Binder c96edaac3b5fcb24a174f6f4b3f084d4
  ConstructorBinder 82c410a4d9e21c325ba3e1527c50daff
  LiteralBinder 0a5559e7d3aabf0cf9c897b797edff85
  NamedBinder 0800b3be0f9ce7a64f901e627e87a982
  NullBinder d9d32ade0d56992460bb4b700e4464a4
  OpBinder a4e859ef3c8b2681b04a2dfae6eb0fb8
  ParensInBinder 5997f08e343521a086fe234687cfa21a
  PositionedBinder a6b770e5a8f88247c6ef23a04722a775
  TypedBinder 69e3490135b9eb76e3f2c68250002721
  VarBinder 2e20c3df0430901107dc9b8bd4a6015c
  binderNames 810a1bcb74988444206bd4c3a504cf72
  isIrrefutable e4e6a566ec833cb43d9ab9e0488c7483
import  -/  Language.PureScript.AST.Declarations 586bc75044e8737d02875208d17d4395
  Abs dae9a514c0c54a50406a57cd533f800a
  Accessor 75238d8cd32188d181bffb473f6c4802
  AdditionalProperty 8cc5bbff50321b1c6faa495114d0e5d1
  Ado aa51ec093a5d30de9008b28e35a2b3e8
  AmbiguousTypeVariables 32c9ff2da492cd27596b0460f325bfa1
  AnonymousArgument 1ad1b3db7194ff91451b9c62133033f7
  App ae4e12e545757da5fb62189548835120
  ArgListLengthsDiffer 5a1231cd1afd5ae274d33e3a3ed922bc
  AssocList bf5966f84a9fd3e8e225cc99068a5a6b
  AssocList 5252f47280702e464243816d50efc247
  BinaryNoParens fcc835654893b3cf82da9962f92ae61e
  BindingGroupDeclaration fe3c1705a7a0108b856351d712879737
  BoundValueDeclaration c15036e292c80286a90dbb25f336202d
  Branch d787000b149f61b309db177cce643145
  CannotDefinePrimModules 442dbb6eb5d534de0b1a5557a047f354
  CannotDerive bf50a2ba123bdefcc4175ba94380f372
  CannotDeriveNewtypeForData 5b955692e5773e4eb11bd2352562d8c9
  CannotFindDerivingType 526d71f1ccb2a6688a39b47612a0a331
  CannotGeneralizeRecursiveFunction 27f37994cf841dc091a8ecfb761d858e
  CannotGetFileInfo 00441a2081d95e7fed8268777edabaad
  CannotReadFile 14dc16d8c2f8a03a9a3da680e342d754
  CannotUseBindWithDo 8943749a428b93671be0fde1ef1300eb
  CannotWriteFile 182cf94a21f6ae610bfae1e998054ae7
  Case dbf8d0b5ac1a603149b8bb1459575de0
  CaseAlternative 8464f1c9f0c33f15833817399a071704
  CaseAlternative e92f6ee78a22c0eadc3566d7d1f48d5b
  CaseBinderLengthDiffers 522e8b990cc5720807ff762cc761d675
  CheckHint df81614c4636702fbc92cda4379967c3
  ClassInstanceArityMismatch 5336dd18a300e4af059fd0c3e2533863
  ConditionGuard de13c04599b5971ac3f21a1186c6e658
  ConstrainedTypeUnified 68b349f446a11480294fdc6e451f3186
  Constructor ea2b7d92995197a177f6abf42269c377
  Context 44dd7830663f65e1b8791f79a13f4cc0
  CycleInDeclaration e0dfc89422b1ddae332185ecc0077f4a
  CycleInModules 0af9e32ca1a469832094fae4e417174f
  CycleInTypeSynonym c41cd90aea3f14dfdae7bbe821a93a65
  DataBindingGroupDeclaration dd96274a1938234d4bfdc2a1d4e8e0ff
  DataDeclaration 2fcba6ad709595ed3c4d0926de54bc2c
  DeclConflict 4784ba482b28096b8a67353e4572e17f
  Declaration e92f6ee78a22c0eadc3566d7d1f48d5b
  DeclarationRef 1ef988d2f8db98f35f578bde9282f468
  DeferredDictionary 4767b924c347cb558c8259d23777dc47
  DerivedInstance 049e605b376a0b07eb640a4746618932
  Do 61408a6943b45292f7b373e76e9ffa63
  DoNotationBind 3860cb3df901dc1a4468bed348d53a88
  DoNotationElement e92f6ee78a22c0eadc3566d7d1f48d5b
  DoNotationLet cb7748a003aec3a844b46797cc9f3089
  DoNotationValue 8d573316807fe6334d3059181f3f010a
  DuplicateExportRef 2bc416d714a3132513c65fb115834354
  DuplicateImport 31f16e44385b2d00c67246f7434649af
  DuplicateImportRef 1a231a3c60f89a209268a2adc8fd01fc
  DuplicateInstance d6ce1d56981f24c5c738bf3578231015
  DuplicateLabel 8feaf7d623d5540590d68d31f0515182
  DuplicateModule 649213ca3938edf908a57b63818242b7
  DuplicateSelectiveImport 5534e34769da216b074f9fbce29850d0
  DuplicateTypeArgument 1dd3a867cfcb69332abcfb7dc9e9fd08
  DuplicateTypeClass a6fd946c6e800e6b57dff689d241240f
  DuplicateValueDeclaration 69e1dd10264823a972f6de1d23191235
  ErrorCheckingAccessor 72882f6c65176d04bcb28838744a5d3d
  ErrorCheckingGuard 14ee2584b4ccd745e0203b96f4ae9b1a
  ErrorCheckingKind a8e33adfba1fbf2cf4ffc292464a1363
  ErrorCheckingType 2eb9962f5589e0b297acb417d9acab76
  ErrorInApplication e280abbf2add98d167ba4cbf86682490
  ErrorInBindingGroup 2a332e5dc93ee8ae9fd1a76b70d2335b
  ErrorInDataBindingGroup 4e35b147ca975984c4c7c56d6c0a820a
  ErrorInDataConstructor 172043f820f67271f9b57e680e4414d6
  ErrorInExpression 6be781a6c814a2ac5a163f17629faf53
  ErrorInForeignImport 5cda31e408caaf5ddccab9b5d74cfcca
  ErrorInInstance 3f5fd04062107e7cfa6b465b93bd0079
  ErrorInModule fa705731a479914ad1b2d8aff2d06ff6
  ErrorInSubsumption 5d6c6f0ec0cd979a817e9c5890c91b72
  ErrorInTypeClassDeclaration 646a902488f0b9a1a46ee5f5c7063457
  ErrorInTypeConstructor 20a30789b5f11e3a3165ca50ff3138d6
  ErrorInTypeDeclaration 2112f70ad8fe0f06e0173bc417ba39b8
  ErrorInTypeSynonym eef1254e4c4d8e8fc0d8f54e0a205bcf
  ErrorInValueDeclaration b4d5773974cb3c247524eed712a032a5
  ErrorInferringType 6edd0bcc0ac0701140b4f26a3edd4a7d
  ErrorMessage b0470a74191782e72607e7c5b87318de
  ErrorMessage 7268a73b9f5bbe5a70110aa90f7e1194
  ErrorMessageHint e92f6ee78a22c0eadc3566d7d1f48d5b
  ErrorParsingFFIModule 995f795a4388db3ef8492c2c3a840810
  ErrorParsingModule 86b45a047817a32fc34ea35c834adb0d
  ErrorSolvingConstraint 11ab9039b50040d25e3f4f035aeb141e
  ErrorUnifyingTypes edab054a8bacddb8d896e88d9265b15d
  EscapedSkolem f75939254730ec13cf7427aa6a78667b
  ExpectedType 7a31bdb4cb0936757920cf70f374b411
  ExpectedTypeConstructor b752a30671422440d53bbf2351fe8e5e
  ExpectedWildcard 6e6e4e6e59fe15e5573be31041331478
  Explicit 0e7d786f7f26f8b40dc941854a989937
  ExplicitInstance 7626e63238a07a99c1bae428b77d3f66
  ExportConflict a964bbcd47281dc93ced690ab4d6f61d
  Expr e92f6ee78a22c0eadc3566d7d1f48d5b
  ExprDoesNotHaveType 2b6d380ece0eabf01b29df66dd561c32
  ExprHint 0b5a37c321383027c366f248a8ca470d
  ExternDataDeclaration 45e3d2e61e8f85403449183876d3af2f
  ExternDeclaration 180e172298441327dfef1022795a10e0
  ExternKindDeclaration 88852d174ecb6f9a3f22350e4bed5723
  ExtraneousClassMember eac2645deec7e543a609702e560a3f0b
  FixityDeclaration 95c5fd24977a7e9400ec16a2317bcd12
  FromLet bc7f79cdfc21eeb3e926d750f1216f83
  FromWhere 57f175353ef14f2790049c689ea914b0
  Guard e92f6ee78a22c0eadc3566d7d1f48d5b
  GuardedExpr 811952f37a620b8d78cc4a6176d99a2c
  GuardedExpr e92f6ee78a22c0eadc3566d7d1f48d5b
  Hiding 14af127ef57cd3e7808a207407b44158
  HidingImport b89b6387492f92801a46c239b962a5a8
  HintCategory 67a26b6b435418eb0468ab415e41d2f5
  Hole 65afb0f996a13cb636ce84111153af7c
  HoleInferredType 785c100e33c3249a5b102046be9d34f6
  IfThenElse 8071f8c4795174e5283a3ecdaa8b3c8f
  Implicit 3dec7010cde86de5e211cd1c4e2e7a9d
  ImplicitImport f46372b3303599a61ce56fb83b392d10
  ImplicitQualifiedImport 4626c43503de0d794c412d0a06e5f787
  ImplicitQualifiedImportReExport 99e1f1a554e020978c5d59c34e90137d
  ImportDeclaration b98a8b3e9f19a9a91825a99d72954601
  ImportDeclarationType ee54accdb974d8b355eb58984489a7af
  ImportHidingModule 5847caa6d81d248bc9080b4e6b53bf9b
  IncompleteExhaustivityCheck a94c2403060b3cddff039c4fb5ac6a3d
  IncorrectAnonymousArgument b18ba3c6cf1b726250739a3d78fd7886
  IncorrectConstructorArity 88cdf8016d2adea5107417413375a255
  InfiniteKind a3c9bfc4aa5a1d0b645ddf94cea2e9a1
  InfiniteType e2f4250f10f710caa807fa33adae8ad5
  IntOutOfRange 7e6f04f7e6c29c03cdd8d2d08c5112dc
  InvalidDerivedInstance 2850bb655a67c7b11c2abbc0a797324f
  InvalidDoBind e6a9193795f9c718c0bb8b3ee1d5007b
  InvalidDoLet 30d467057cb08d1a48bc45da98eddc94
  InvalidFFIIdentifier 1644089749df6b45d4e9fbf3319ed8ca
  InvalidInstanceHead 8b910cd07b3dfbe718c34545a7bfeef1
  InvalidNewtype 7b68333d588ba85eeef1ad0ea8fc2255
  InvalidNewtypeInstance 60deec26444e8cfc21c81a0f10872c25
  InvalidOperatorInBinder bb615f103eb53d9736f59c500b929de4
  KindHint 1f72de8b24fb27807ae5480a493daafb
  KindRef fdcf7f61e078f63d583e2e92289fb303
  KindsDoNotUnify 5eff4abdff15c722fce13c399150e3be
  Leaf a3cc7dfc810d7c4443ac2eb4be143512
  Let 5843430a3e31a1977aadcfb94efa8312
  Literal bdcf4b137a448fe7c2ed57fe33a72cd3
  MisleadingEmptyTypeImport 90b8813ca2e01430cccbe01e6bc6dc45
  MissingClassMember e01160d2e4b38da5d861a682e142ab70
  MissingFFIImplementations 471364375c7b113af9f9006bbad04a16
  MissingFFIModule 40159f8540b6290e57ee6090196f38c1
  MissingNewtypeSuperclassInstance 76c919104baa721f9f381a32aedf4230
  MissingTypeDeclaration fcd36d2a4c29a7a9bdad6b3c5794d9e6
  MixedAssociativityError 1d14d5929573da82d4205da8fc45cc8f
  MkUnguarded d9deae30ea78016a4bdb453d9978bfa3
  Module 305128e30e200d34d712365aa2d509df
  Module 3342e00ee072addfd009ee61e87fb865
  ModuleNotFound 7d08cbb5754760a5207e995e4aaee1c8
  ModuleRef 2ff9e8ed233e41ffb08c38dcae5865c0
  MultipleTypeOpFixities 17f52b303ca5418809e6ef3776320ec8
  MultipleValueOpFixities f0acf205081fb137d77ccba857846c71
  NameIsUndefined 95fff85d3aa32709f78982493966418a
  NewtypeInstance 43b0450709caa9cc5a685085197cb773
  NewtypeInstanceWithDictionary eddb3e7c62714e662f7945c8899ae4d1
  NoInstanceFound c5c9bc41add21c6bc4602b8371723def
  NonAssociativeError 826c4decdc006663e21a3ae7e60e3ed8
  ObjectUpdate 14b4ffe7d1b68ac321d3f2c2a27a17eb
  ObjectUpdateNested fdcbd615f1a1d120ea9765eaceb58198
  Op bbe2a0a58ceeace944ccf429f680f6bc
  OrphanInstance 5bb77f0e3d60fac3b55bf469df93e4be
  OrphanTypeDeclaration 1c7950c65a36e805e80c4880567e8aea
  OtherHint 15866329838ebdbeab9427ca7a2de6b5
  OverlappingArgNames 4abe87f1b7aaf0437e5be2df295bd221
  OverlappingInstances 6b43960ee47cf5e470909fb750ecd2ec
  OverlappingNamesInLet 085f9e30de57cd4f95a01e47912680cb
  OverlappingPattern 43b904c51414e626de65130b2baec4ff
  Parens ce804ea11612979be1464b51c74c24ab
  PartiallyAppliedSynonym f26cabb54c63740fea0e1444787e4fd4
  PathNode 0a046fc00d6584c1eeaef0123d3be18e
  PathTree 9e677c667044da338e6138c022cc791b
  PathTree 0a046fc00d6584c1eeaef0123d3be18e
  PatternGuard a27d707167917ad112543851031e65f9
  PositionHint 4d20bc875f53ea33a0d9723dbee216b7
  PositionedDoNotationElement dae30f378bb2ebb85464560daefe1b0b
  PositionedError c387f6033b140fe80063a1c6ade0cde7
  PositionedValue b90293950702fd6b659d7cd86d309f72
  PossiblyInfiniteInstance 764510a68b73540beb5c16f73e86041a
  PropertyIsMissing 7bd6a3b98e181ecb93fd20dfbbd43eb4
  ReExportRef 2fef75d8ce745db15f225b0cb5e0c76d
  RedefinedIdent e6dda0b5782c2bdcfc7c01cc908f16b1
  ScopeConflict 9f1446b4bee542b6895bd34446e09a8f
  ScopeShadowing e501b0fc235ceb98506dc1582e6469e3
  ShadowedName 6f8d35e7d7889e98ed7ad908b490ab39
  ShadowedTypeVar 4c52be86526b8358b21559ef04c405da
  SimpleErrorMessage 85049d3cbfbe9dc15f83f3061172f760
  SolverHint a9cc4da18a209555dac939e769583171
  TSAfter 3632e66d118941cae7ca81a4c9abccf6
  TSBefore 6b997cb4232ef55e62a34134149f518d
  TransitiveDctorExportError 9c72f8e85accb21ae307dbab45a1b7b2
  TransitiveExportError f05abdd432541d03ea993eba5ab2ffee
  TypeClassDeclaration 19936abcaf3693a6825ccbc13b2590dc
  TypeClassDictionary 531ed710fa3e0860894127586614f844
  TypeClassDictionaryAccessor 69c555dd17e3808e47bbd0baec81a1b6
  TypeClassDictionaryConstructorApp f15387264e84e75b0e5ed1f08eacb958
  TypeClassRef 0dfae6fa12be94e312c419132246a1f3
  TypeDeclaration 28394461dbd073cca9cdbd263dbb4335
  TypeDeclarationData 3e894c7cbf790244173310e6e620d669
  TypeDeclarationData c947d6d8aff56f68d1789e1833a9fcd2
  TypeFixity 422dbbc62f61e8d72aabe0ec3c32e2e8
  TypeFixity 298ce78be10d4367819875773ca00d0b
  TypeFixityDeclaration 5a4e2ba83bf57ee4021fdafe70b4eb9a
  TypeInstanceBody e92f6ee78a22c0eadc3566d7d1f48d5b
  TypeInstanceDeclaration 46d66658dd5a30ba03e36fc960162f20
  TypeInstanceRef 1a4ec4636edef4ba31547e9816ff48da
  TypeOpRef cd0b4bf0e37e512f28be11229ab2e497
  TypeRef 7b2aa9fe81ad40f64c659855da835def
  TypeSearch f66c915ceaf19a8b40bffcd6eb7d5cc6
  TypeSynonymDeclaration 1cfe9af195a40456074b96ff0ca4519c
  TypeSynonymInstance 368c737fcf239094eecb7825f3b821f2
  TypedValue 0acc3ace791a36484dcda3706df33cef
  TypesDoNotUnify 8366c89ce370f5cc8b8094dd4b727eaf
  UnaryMinus 00e8f54110f0049331236b115b108a07
  UndefinedTypeVariable 753aa04f581392bbd8dc7e51e2d8b736
  UnknownClass dccc9c75fce07f8065906de397b7fbbd
  UnknownExport c747030be48721fffbd54032523877f2
  UnknownExportDataConstructor 73b7f8a07075315e950e2247042eafab
  UnknownImport b58a7b0ddb7ba5431ab45c2c1db062c6
  UnknownImportDataConstructor 286c5ed7e9b332eb3aac1e426959e22a
  UnknownName 4183c70ff29ad805571bed2cb1e6b9e3
  UnnecessaryFFIModule f69963b37caa85cc0192500bcf206fd6
  UnusableDeclaration ed45eb8f984cb8e4da92d0834d894b1e
  UnusedDctorExplicitImport 61dabf77cfa792ae850406edee5667c1
  UnusedDctorImport e8b03809905af7b859f51c3534ce00be
  UnusedExplicitImport 3fad800c5eaf9c9c9ee39efe05c090c2
  UnusedFFIImplementations bf60bc9f2725ca66a0a79feae586d397
  UnusedImport 0ad58ebfa54b5782101a13c49bfacf89
  UnusedTypeVar 95ae612e3e3b25671c707e3403d88e92
  UnverifiableSuperclassInstance 3de05066922d1edec32da1840426a7c9
  UserDefinedWarning 4a7f6856d3ce3f16f9f5468151bfbbda
  ValueDecl 97b38919d86cd9182cb8d86b6f4ae734
  ValueDeclaration 3d506e6b33aef3e239802bd27220a2e5
  ValueDeclarationData fa2f49166ba51f7f4c31391bc9d776ce
  ValueDeclarationData dc3fe29a39c3efd97807e85c8c5dc302
  ValueFixity 9e475bb09c95e859fc062456332129d5
  ValueFixity 2b8c14ef4445d3b3d67c80ed60c831ef
  ValueFixityDeclaration 6da09cca72fc0dd8bafa2b8ed78d033e
  ValueOpRef 08efa0d335ba46b69b381a343c739614
  ValueRef 78dee2d86cdf935e8811ecdd18c169d3
  Var 5fd1e80d993ab2f76a4e002bbbfc9990
  WhereProvenance bfce38a8b694557bc33268834d37a7dc
  WildcardInferredType 387efde14cc07acdcea42bcae7f2e8c8
  addDefaultImport a9f33004e1174e39a513d2fa90d4a835
  caseAlternativeBinders e92f6ee78a22c0eadc3566d7d1f48d5b
  caseAlternativeResult e92f6ee78a22c0eadc3566d7d1f48d5b
  compDecRef 7ecd10c2cb7709fffc36d9d993e281f2
  declName 346365fb28af384d04391dc396f98282
  declRefName a467a4d4938967e35bf0f7f0e0d07090
  declRefSourceSpan 9d093733881fe15ce20b105d529f0011
  declSourceAnn 5d4803f8f30e53025f1e80c48cd481b1
  declSourceSpan 56c2d6f201f67f106a4f2e1dc3f0bb49
  flattenDecls f5b36690439fd53d08448e92938999ee
  getFixityDecl 37948c177690d6e92f7f8c057c91b5f1
  getKindRef e3282980e675c7ad2175d21e599edc5c
  getModuleDeclarations 77bbf79d27e1a58f6883cbe40cb44e01
  getModuleName 7aa2ed3fa39338f5edb2f1938e29c924
  getModuleSourceSpan 9836f61824b534227aa948fd618b76f6
  getTypeClassRef ea53048ed8eefd170e41dcd88fa96d29
  getTypeDeclaration eea7233e2bcca06180e0fde9a4729425
  getTypeOpRef f544549c7044502c660701544ec93b94
  getTypeRef 49d73504ee072e8c2fbd37f35c16fbff
  getValueDeclaration f4b5979539c3f43c9aac0104c9b38c92
  getValueOpRef 47a2050f95b57da4a8d94869a8fe7a30
  getValueRef 1fbe007758d53e3ecefa02005d694679
  importPrim 31ae0c55d3f2ad87be9893d84154e47e
  isDataDecl f9549daf5155cce3c930a968397a7afc
  isExplicit 7250ed047a60c57e774f73259cedd1d2
  isExternDataDecl c9ab061920499352f1d59ffdd3d1f80d
  isExternDecl dd5bf568456765ea4de3002134577d4d
  isExternKindDecl c8709b62905f1d8a52c5722d67855ffe
  isFixityDecl c04bd8d067304ee9a0b4788bfd047d98
  isImplicit 829ab788c574d0d4fa85725bfb45845a
  isImportDecl 64406b87a7f4a18bafdbc5bcb5a9f598
  isModuleRef e813ecefaf7692c4fa135ceea4ce559c
  isTrueExpr 68fdb6c54a1f333df017643f6dac7699
  isTypeClassDeclaration 7b108c8da44aa47fd4ec89829bd2208d
  isTypeClassInstanceDeclaration b777faacf0637e97b3f90ecebf237e06
  isValueDecl ec9808b5e7bdda595bcb228b10c9fef0
  mapTypeInstanceBody 8c10e95933c92cb479ab081da10c3627
  onTypeSearchTypes febdeb74c42c15f011c690652e6ae616
  onTypeSearchTypesM adc87a42966a873eb4c33a990e8956bb
  overTypeDeclaration e5ea580a2e6fb7ffeb2f6d21ba7a9289
  overValueDeclaration 957ede040169306777269b6b86e1fa8c
  runAssocList 5252f47280702e464243816d50efc247
  traverseTypeInstanceBody b3dc0429061d0ff256d8d3e4cc7c9512
  tsAfterIdentifiers f66c915ceaf19a8b40bffcd6eb7d5cc6
  tsAfterRecordFields f66c915ceaf19a8b40bffcd6eb7d5cc6
  tydeclIdent c947d6d8aff56f68d1789e1833a9fcd2
  tydeclSourceAnn c947d6d8aff56f68d1789e1833a9fcd2
  tydeclType c947d6d8aff56f68d1789e1833a9fcd2
  unwrapTypeDeclaration 348c99c29975a5b33457904ffa9aebcc
  valdeclBinders dc3fe29a39c3efd97807e85c8c5dc302
  valdeclExpression dc3fe29a39c3efd97807e85c8c5dc302
  valdeclIdent dc3fe29a39c3efd97807e85c8c5dc302
  valdeclName dc3fe29a39c3efd97807e85c8c5dc302
  valdeclSourceAnn dc3fe29a39c3efd97807e85c8c5dc302
import  -/  Language.PureScript.AST.Exported 35d5252d09ea4b599a53ca5936193681
  exportedDeclarations a778de38fea1ad931bb5793b1c0929a2
  isExported 1091ffd5e19d5d0065f855d778ee28cd
import  -/  Language.PureScript.AST.Literals da2ec269f063125450b272321f85468a
  ArrayLiteral 7cbd15adda8a5ed2a81035be22e2eae2
  BooleanLiteral 98d9c7b89f9a5dcc4796fae1c45898e6
  CharLiteral 463423afe7528a93062eb5622a63a8e9
  Literal 4b6b35be8d89b746a77fcd3d0c0a71d4
  NumericLiteral 660c8129bba11812cfd17a4819557d36
  ObjectLiteral d17d3a090fe8a89f303c679b0a417ae9
  StringLiteral 8514cef90500430ad3602ee97b69b883
import  -/  Language.PureScript.AST.Operators 615a873c5f62908f354b9d4840cbeb63
  Associativity 228a0ef1b3774b11d1a92fae92fb43a0
  Fixity 141f87a59136c90c1be577c19942dfd4
  Fixity 228a0ef1b3774b11d1a92fae92fb43a0
  Infix acee26fe4e59790dddcfdcb22d39c630
  Infixl 7a053ccfe48a809d0f2fd5ed84616765
  Infixr bbdac94db5d55a0387eb84cc7a57bedf
  Precedence ea481cf59a404ab1d4264846eb495580
  readAssoc 228a0ef1b3774b11d1a92fae92fb43a0
  showAssoc 703104148426196acec9a54732601094
import  -/  Language.PureScript.AST.SourcePos 63acacac5b7be73d04e5be0047a9a89a
  NullSourceAnn 5a0bced03127a02790cb165450e72c45
  NullSourceSpan fad53a2b37b7f02c9f2e1151d4bf9347
  SourceAnn f5708ed135df009dfa0254486771ef74
  SourcePos 1f89874c7dcd77e53f0f74e4d28f0a8c
  SourcePos 1e0cf2bd3ea18f97a2ff152297f09219
  SourceSpan 153dcf157f0acf76a2cdcf153aac30d3
  SourceSpan 1e0cf2bd3ea18f97a2ff152297f09219
  displaySourcePos cf9281da6eff56b2fc110fdaa8187669
  displaySourcePosShort e883474c4872f3867ae5ba77c85e4e19
  displaySourceSpan 11d4c6c7c27182d917b65dca3e11c4bf
  displayStartEndPos e5c46604f74bcadb3bc4a400eacda553
  displayStartEndPosShort 95a3d0cb80b7e85f6ff2d774252c312c
  internalModuleSourceSpan f13de72620ea3980769d3252f1949a4a
  nonEmptySpan 232f686ce9eaef22a6239187f1de0ae3
  nullSourceAnn f2dcb0c4d24a9cde0192cde9ecb60353
  nullSourceSpan d3ce9e45794cd4f5ddfad4b02b318f51
  sourcePosColumn 1e0cf2bd3ea18f97a2ff152297f09219
  sourcePosLine 1e0cf2bd3ea18f97a2ff152297f09219
  spanEnd 1e0cf2bd3ea18f97a2ff152297f09219
  spanName 1e0cf2bd3ea18f97a2ff152297f09219
  spanStart 1e0cf2bd3ea18f97a2ff152297f09219
  widenSourceAnn 2e2c7096d7706bbf13b659eb261cbe79
  widenSourceSpan 4b532ffaa51152e81f9e696cfeb2a4fc
import  -/  Language.PureScript.AST.Traversals f5adaf844c5e9d0f0678a8b574a32aa6
  LocalIdent bb84b4c96bd109d06b41acf4d65ddce6
  ScopedIdent a9386d37e7ebee7cdf58474c3889e380
  ToplevelIdent 385b77e95d89985d110388bfbf949e7e
  accumKinds 2c08759b6d6e363e3d39db46e55510eb
  accumTypes e488d62caf91c6b0af9b2261ad19da8d
  everythingOnValues d1f804aed21f7e21280e0cf1f8ea4257
  everythingWithContextOnValues b6cfbe573edb2754803b960a4d02edab
  everythingWithScope 569a5e5bf677f3eba029adc5853b1579
  everywhereOnValues f4659f155225bd0f038ec5ce751367f9
  everywhereOnValuesM 1c0cb3e06c4593fe6cb03329a6249e6d
  everywhereOnValuesTopDownM 75fdf2701c3b1d9ebfea98053cfea0c4
  everywhereWithContextOnValuesM 8b088f6a1ad3879e25631321bc5daeec
  guardedExprM 5b1f6760ac0efff4fc97873db2fa9a2e
  inScope 4071e4e3e23b5d4575aa2c5345069566
  litM 22c057d6921be8440814b92979717a96
  mapGuardedExpr a2524c33840358be0ec96b6f41c2df4f
  overTypes c5ba43021920ffb02d62737e1c4527b2
import  -/  Language.PureScript.Bundle e9fc080977a6cbbcf186d859a93ee390
  exports: 7e1ffaf1974cff705339929f1490c3b6
  printErrorMessage ea1fcd78f92f8c085dfe9f9b5c0c36d3
import  -/  Language.PureScript.Constants 69f48af5637c1cbbd07a6f85918359c3
  exports: 9c458e31ccbc9e07ff15471cf48a55ee
  Discard 879e6714f8e80050c4739db81bdefcb1
  Fail 6fc4c2aadc12c2517a0fea5ba9b8edf0
  Partial 78fd25ce055392a0b1d7b9f219d96bdd
  bind 7941b6ef28a5d94caf93a0b98bd059c8
  discard 72f5857dfc765662403507494c485147
  typeError 5c420dce614f2b372e246965fff0c014
import  -/  Language.PureScript.Crash 3dd739d57f17e8a1e9cd97afd3faf067
  exports: a9d2725f359c2d113bd38076e88ec681
  internalError d33c2a09c5cbe8e68c0bc27d1500ba1a
import  -/  Language.PureScript.Environment 467b25d81b890e1aaabe28d0f09d192d
  exports: a0cb6cb8c78c56365f58c9f88d1fe000
  kindType 5aa8fecbb78cb16f648b40b4c0a9a13c
  primSubName b55bd10d6245c2105c34677529a6ad2e
import  -/  Language.PureScript.Label 366bbe6039761c79dbc09aaf87b5753e
  exports: 0a72b1b943ee66379d53382d0212ef7e
  Label 1f1fefa14786357467485814549b59fb
import  -/  Language.PureScript.Names 00f694509122478d97b327fbbccae327
  exports: ad7ae34f85124c68e8ba1c90fb2e732f
  DctorName 058beae22056ca37fdd3776575b08a7a
  Ident 71f167265716f619863a793fa311e198
  IdentName f85afb00b35a2b992fb8ad7cbb2f9711
  KiName 3648c75d7b729914a2a52509b0a9365e
  ModName bdc8f8682bdb984467bbbfa35cbd8589
  ModuleName 1b2ddf0c04464d2fa2588925f10c1966
  Name d04047edf96c18708b7b5f72cb565394
  Qualified b6e1bc9e7244a41d3c6149c9b5c2d6d8
  Qualified 1b2ddf0c04464d2fa2588925f10c1966
  TyClassName e53bd54ac0d1b704756a477849dbd836
  TyName 6bd149eabdb95c312f9b6bf9d9f06c67
  TyOpName 440dd328b811fbf1c8a081bffcb8593d
  ValOpName c1457b90b10104e4d37147e7648f89b9
  disqualify bf1cc3b0e6c1ffc0008a6113bf8116c0
  moduleNameFromString 58dbc4d6b97c8eb6012ccda72d203acf
  runIdent f4727e6f001b3b7d933fd4e8122af572
  runModuleName 58b788b37f600c0f34fa85241d7748ad
  runProperName a7268334e0b909381550b9329cb80fcc
  showIdent 6e8d83433e1fcc9da5f1cf76585fd968
  showOp b45e7917a51eac70fb9658fd0956a139
  showQualified 5ab4b15825b0e65e211bc57f19d57784
import  -/  Language.PureScript.PSString 482bcd39d274b3e3efbde5749bd9d797
  exports: dedd5d31dc509736134f041863efd1d4
  decodeStringWithReplacement 4d3bd4dfdf423d9ed9fd011699696240
import  -/  Language.PureScript.Pretty 57ecf279a293b07740d5ecfc28eb4675
  exports: 3a072579339c430fe2a9542678a4dcf0
import  -/  Language.PureScript.Pretty.Common 5ad137006c9d22dbc8d348caeed567b2
  exports: c21a0ba6e9877729208defe8b5d16c9a
  endWith e864dc56632559b3010d3e4568205358
import  -/  Language.PureScript.Pretty.Kinds 1231cbf0b1be99cf8261312fb9302146
  prettyPrintKind f60a6c7beaabc8993b1df72e46c79d4c
import  -/  Language.PureScript.Pretty.Types 1303ea05006a6ec61edb2f109218248a
  prettyPrintLabel 11a28b259161844f1d8d17a50499925b
  prettyPrintSuggestedType b026e64af955b0ed374a3afe7835614b
  typeAsBox d61ced402e15c08e6ec6600aad86f871
  typeAtomAsBox af4f19fe8aa5ece789b8debdcbf4054f
import  -/  Language.PureScript.Pretty.Values e943ed88680ef50d4ac1596480de3b7e
  prettyPrintBinderAtom b8b024f903da0d3fd9cef56b83529716
  prettyPrintValue c0d2545f5c7eefe3694e6a7318dcf31d
import  -/  Language.PureScript.Publish.BoxesHelpers 4e18ad11989646e9b2f4ca1d531fd7a2
  exports: 2f46a8c1612b5ed0ef7162a8f1eb8356
  indented b3e980baf231c5c17c72e959f6007ff7
import  -/  Language.PureScript.Traversals e97764d7972cc6ba421a6be0a3ce6bda
  exports: cbb821b2ee7c6d00cdf62285e1dbe432
  sndM c93ef73e127a3a54c4cd1e5e2194b237
import  -/  Language.PureScript.Types 80a51f62cb3e6c71f024289b88f07b7f
  exports: 229bb7528146da886cffbefad5822e19
  Constraint a0b1e737f9fdb5b2f711c97dd5895f69
  PartialConstraintData edcc19957e9ee1ea6ea4032f01c28d44
  RCons baa72184843999f17a8e5f8391aabd36
  RowListItem 0e3231b388d844db12bae63a4b5c2cc0
  RowListItem 7b3cb6d68aaa473367a70ce66e9633f6
  Skolem aef73915115b060ec7781cdd3859082f
  SourceType 0ac818517c14fedd280ef5885ae0cdc3
  TUnknown 9d429c357e98c51eb9f7f00bef0a2346
  Type d5fc19231e8a71936895da17eade4f5b
  TypeApp 9dadf19674ff2d747cbba0c42dfad343
  TypeConstructor c7b7bcec494a17e684a206aeb55ef57b
  TypeLevelString 8a25ec25c9b44a7602f610ae833b697e
  eqType d5fc19231e8a71936895da17eade4f5b
  everythingOnTypes a337a56452e37b7c1eabcf74ce7ae28d
  everywhereOnTypesM 3778d2154e8de7bd894aef40e0e2cb61
  overConstraintArgs 2da70afc69a79b004bf08baecbde0992
  rowFromList 50b0e46715e1ec543fc59e157404928e
  rowToList 7eaee27c2477428659ea7da98530a691
import  -/  text-1.2.3.0:Data.Text 7daa7e6c9b39d8cc1679e5ec5c64d2be
import  -/  text-1.2.3.0:Data.Text.Internal 30a0a123f71f63b26cd34c6b24f23411
import  -/  text-1.2.3.0:Data.Text.Show 3b4b6fb2985a731022d67f636682da2b
import  -/  transformers-0.5.5.0:Control.Monad.Trans.State.Lazy bb07ba19cd14893d125b163b03c16c98
e1ef6a17348ccfe3ef65185d3c5f9026
  $fMonoidMultipleErrors ::
    GHC.Base.Monoid Language.PureScript.Errors.MultipleErrors
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Errors.MultipleErrors
                  Language.PureScript.Errors.$fSemigroupMultipleErrors
                  (GHC.Types.[] @ Language.PureScript.AST.Declarations.ErrorMessage)
                    `cast`
                  (Sym (Language.PureScript.Errors.N:MultipleErrors[0]))
                  (GHC.Base.++ @ Language.PureScript.AST.Declarations.ErrorMessage)
                    `cast`
                  (Sym (Language.PureScript.Errors.N:MultipleErrors[0])
                   ->_R Sym (Language.PureScript.Errors.N:MultipleErrors[0])
                   ->_R Sym (Language.PureScript.Errors.N:MultipleErrors[0]))
                  (GHC.Base.$fMonoid[]_$cmconcat
                     @ Language.PureScript.AST.Declarations.ErrorMessage)
                    `cast`
                  (([Sym (Language.PureScript.Errors.N:MultipleErrors[0])])_R
                   ->_R Sym (Language.PureScript.Errors.N:MultipleErrors[0])) -}
e1ef6a17348ccfe3ef65185d3c5f9026
  $fSemigroupMultipleErrors ::
    GHC.Base.Semigroup Language.PureScript.Errors.MultipleErrors
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Errors.MultipleErrors
                  (GHC.Base.++ @ Language.PureScript.AST.Declarations.ErrorMessage)
                    `cast`
                  (Sym (Language.PureScript.Errors.N:MultipleErrors[0])
                   ->_R Sym (Language.PureScript.Errors.N:MultipleErrors[0])
                   ->_R Sym (Language.PureScript.Errors.N:MultipleErrors[0]))
                  (GHC.Base.$fSemigroup[]_$csconcat
                     @ Language.PureScript.AST.Declarations.ErrorMessage)
                    `cast`
                  ((GHC.Base.NonEmpty
                      (Sym (Language.PureScript.Errors.N:MultipleErrors[0])))_R
                   ->_R Sym (Language.PureScript.Errors.N:MultipleErrors[0]))
                  Language.PureScript.Errors.$fSemigroupMultipleErrors1
                    `cast`
                  (forall (b :: <*>_N).
                   <GHC.Real.Integral b>_R
                   ->_R <b>_R
                   ->_R Sym (Language.PureScript.Errors.N:MultipleErrors[0])
                   ->_R Sym (Language.PureScript.Errors.N:MultipleErrors[0])) -}
661931501d0732d262d1c46882b7dd40
  $fSemigroupMultipleErrors1 ::
    GHC.Real.Integral b =>
    b
    -> [Language.PureScript.AST.Declarations.ErrorMessage]
    -> [Language.PureScript.AST.Declarations.ErrorMessage]
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ b ($dIntegral :: GHC.Real.Integral b) ->
                 GHC.Magic.noinline
                   @ (forall b1 a. GHC.Real.Integral b1 => b1 -> [a] -> [a])
                   Data.Semigroup.Internal.stimesList
                   @ b
                   @ Language.PureScript.AST.Declarations.ErrorMessage
                   $dIntegral) -}
b7d27648929ebd118857889472384e06
  $fShowLevel :: GHC.Show.Show Language.PureScript.Errors.Level
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Errors.Level
                  Language.PureScript.Errors.$fShowLevel_$cshowsPrec
                  Language.PureScript.Errors.$fShowLevel_$cshow
                  Language.PureScript.Errors.$fShowLevel_$cshowList -}
b7d27648929ebd118857889472384e06
  $fShowLevel1 :: Language.PureScript.Errors.Level -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Language.PureScript.Errors.Level)
                   (eta :: GHC.Base.String) ->
                 case ds of wild {
                   Language.PureScript.Errors.Error
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c1 :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c1
                           n
                           Language.PureScript.Errors.$fShowLevel4)
                        eta
                   Language.PureScript.Errors.Warning
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c1 :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c1
                           n
                           Language.PureScript.Errors.$fShowLevel2)
                        eta }) -}
cceee1ff40da36b88b40babef689d609
  $fShowLevel2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Errors.$fShowLevel3) -}
9bcdb3788848f7b9b8dc13c5a714c93c
  $fShowLevel3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Warning"#) -}
7763dbbefbcae4c6caaa4b127316d8d1
  $fShowLevel4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Errors.$fShowLevel5) -}
43928f7db241b3d337e8f6f83488cc0f
  $fShowLevel5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Error"#) -}
b7d27648929ebd118857889472384e06
  $fShowLevel_$cshow ::
    Language.PureScript.Errors.Level -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Errors.Level) ->
                 case x of wild {
                   Language.PureScript.Errors.Error
                   -> Language.PureScript.Errors.$fShowLevel4
                   Language.PureScript.Errors.Warning
                   -> Language.PureScript.Errors.$fShowLevel2 }) -}
b7d27648929ebd118857889472384e06
  $fShowLevel_$cshowList ::
    [Language.PureScript.Errors.Level] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Errors.Level])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Errors.Level
                   Language.PureScript.Errors.$fShowLevel1
                   ls
                   s) -}
b7d27648929ebd118857889472384e06
  $fShowLevel_$cshowsPrec ::
    GHC.Types.Int -> Language.PureScript.Errors.Level -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (ds1 :: Language.PureScript.Errors.Level)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   Language.PureScript.Errors.Error
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c1 :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c1
                           n
                           Language.PureScript.Errors.$fShowLevel4)
                        eta
                   Language.PureScript.Errors.Warning
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c1 :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c1
                           n
                           Language.PureScript.Errors.$fShowLevel2)
                        eta }) -}
e1ef6a17348ccfe3ef65185d3c5f9026
  $fShowMultipleErrors ::
    GHC.Show.Show Language.PureScript.Errors.MultipleErrors
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Errors.MultipleErrors
                  Language.PureScript.Errors.$fShowMultipleErrors_$cshowsPrec
                  Language.PureScript.Errors.$fShowMultipleErrors_$cshow
                  Language.PureScript.Errors.$fShowMultipleErrors_$cshowList -}
e1ef6a17348ccfe3ef65185d3c5f9026
  $fShowMultipleErrors1 ::
    Language.PureScript.Errors.MultipleErrors -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,1*U><L,U>,
     Unfolding: (\ (w :: Language.PureScript.Errors.MultipleErrors)
                   (w1 :: GHC.Base.String) ->
                 Language.PureScript.Errors.$w$cshowsPrec 0# w w1) -}
c01a261d506e8b2e5e2c5929f9bc1dc1
  $fShowMultipleErrors2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("}"#) -}
cddbffc337a55439742c8841edda13c9
  $fShowMultipleErrors3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("runMultipleErrors = "#) -}
cb269cd71c37dde271192c2a4ff2fb72
  $fShowMultipleErrors4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("MultipleErrors {"#) -}
8e977f1c067ed46dcf56027b48d990bd
  $fShowMultipleErrors5 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
e1ef6a17348ccfe3ef65185d3c5f9026
  $fShowMultipleErrors_$cshow ::
    Language.PureScript.Errors.MultipleErrors -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Errors.MultipleErrors) ->
                 Language.PureScript.Errors.$fShowMultipleErrors_$cshowsPrec
                   Language.PureScript.Errors.$fShowMultipleErrors5
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
e1ef6a17348ccfe3ef65185d3c5f9026
  $fShowMultipleErrors_$cshowList ::
    [Language.PureScript.Errors.MultipleErrors] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Errors.MultipleErrors])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Errors.MultipleErrors
                   Language.PureScript.Errors.$fShowMultipleErrors1
                   ls
                   s) -}
e1ef6a17348ccfe3ef65185d3c5f9026
  $fShowMultipleErrors_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Errors.MultipleErrors -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><L,1*U><L,U>, Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Errors.MultipleErrors)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Language.PureScript.Errors.$w$cshowsPrec ww1 w1 w2 }) -}
137fe19a711a5edf64e51ef23f802d22
  $fShowTypeMap :: GHC.Show.Show Language.PureScript.Errors.TypeMap
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Errors.TypeMap
                  Language.PureScript.Errors.$fShowTypeMap_$cshowsPrec
                  Language.PureScript.Errors.$fShowTypeMap_$cshow
                  Language.PureScript.Errors.$fShowTypeMap_$cshowList -}
137fe19a711a5edf64e51ef23f802d22
  $fShowTypeMap1 ::
    Language.PureScript.Errors.TypeMap -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U,U(U))>,
     Unfolding: (\ (w :: Language.PureScript.Errors.TypeMap) ->
                 case w of ww { Language.PureScript.Errors.TypeMap ww1 ww2 ww3 ->
                 Language.PureScript.Errors.$w$cshowsPrec1 0# ww1 ww2 ww3 }) -}
c6398bc2b25cb54f79556f431f6bc3a8
  $fShowTypeMap2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("umNextIndex = "#) -}
6db02948d5d73535a430a521fe649a8d
  $fShowTypeMap3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("umUnknownMap = "#) -}
baca93a35c6c378ce4472b26f025e0d1
  $fShowTypeMap4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("umSkolemMap = "#) -}
9ff47e3a3f9645b12ab3564225a81741
  $fShowTypeMap5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("TypeMap {"#) -}
137fe19a711a5edf64e51ef23f802d22
  $fShowTypeMap_$cshow ::
    Language.PureScript.Errors.TypeMap -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U,U(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Errors.TypeMap) ->
                 Language.PureScript.Errors.$fShowTypeMap_$cshowsPrec
                   Language.PureScript.Errors.$fShowMultipleErrors5
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
137fe19a711a5edf64e51ef23f802d22
  $fShowTypeMap_$cshowList ::
    [Language.PureScript.Errors.TypeMap] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Errors.TypeMap])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Errors.TypeMap
                   Language.PureScript.Errors.$fShowTypeMap1
                   ls
                   s) -}
137fe19a711a5edf64e51ef23f802d22
  $fShowTypeMap_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Errors.TypeMap -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U,U(U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Errors.TypeMap) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Language.PureScript.Errors.TypeMap ww3 ww4 ww5 ->
                 Language.PureScript.Errors.$w$cshowsPrec1 ww1 ww3 ww4 ww5 } }) -}
6b223f28c1971d5c0f1036ef1b934c74
  $fShowTypeMap_$s$fShow(,,) ::
    GHC.Show.Show
      ([GHC.Types.Char], GHC.Types.Int,
       GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ ([GHC.Types.Char], GHC.Types.Int,
                     GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan)
                  (GHC.Show.$fShow(,,)_$cshowsPrec
                     @ [GHC.Types.Char]
                     @ GHC.Types.Int
                     @ (GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan)
                     GHC.Show.$fShow[]_$s$fShow[]1
                     GHC.Show.$fShowInt
                     Language.PureScript.Errors.$fShowTypeMap_$s$fShowMaybe)
                  (\ (x :: ([GHC.Types.Char], GHC.Types.Int,
                            GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan)) ->
                   GHC.Show.$fShow(,,)_$cshowsPrec
                     @ [GHC.Types.Char]
                     @ GHC.Types.Int
                     @ (GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan)
                     GHC.Show.$fShow[]_$s$fShow[]1
                     GHC.Show.$fShowInt
                     Language.PureScript.Errors.$fShowTypeMap_$s$fShowMaybe
                     GHC.Show.$fShow(,)1
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [([GHC.Types.Char], GHC.Types.Int,
                              GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan)])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ ([GHC.Types.Char], GHC.Types.Int,
                        GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan)
                     (GHC.Show.$fShow(,,)_$cshowsPrec
                        @ [GHC.Types.Char]
                        @ GHC.Types.Int
                        @ (GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan)
                        GHC.Show.$fShow[]_$s$fShow[]1
                        GHC.Show.$fShowInt
                        Language.PureScript.Errors.$fShowTypeMap_$s$fShowMaybe
                        GHC.Show.$fShow(,)1)
                     ls
                     s) -}
23857559fd68ed98416434371f323346
  $fShowTypeMap_$s$fShowMaybe ::
    GHC.Show.Show
      (GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan)
                  (GHC.Show.$fShowMaybe_$cshowsPrec
                     @ Language.PureScript.AST.SourcePos.SourceSpan
                     Language.PureScript.AST.SourcePos.$fShowSourceSpan)
                  (\ (x :: GHC.Base.Maybe
                             Language.PureScript.AST.SourcePos.SourceSpan) ->
                   case x of wild {
                     GHC.Base.Nothing -> GHC.Show.$fShowMaybe4
                     GHC.Base.Just b1
                     -> GHC.Base.augment
                          @ GHC.Types.Char
                          (\ @ b
                             (c1 :: GHC.Types.Char -> b -> b)[OneShot]
                             (n :: b)[OneShot] ->
                           GHC.Base.foldr @ GHC.Types.Char @ b c1 n GHC.Show.$fShowMaybe1)
                          (Language.PureScript.AST.SourcePos.$fShowSourceSpan_$cshowsPrec
                             GHC.Show.appPrec1
                             b1
                             (GHC.Types.[] @ GHC.Types.Char)) })
                  (\ (ls :: [GHC.Base.Maybe
                               Language.PureScript.AST.SourcePos.SourceSpan])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan)
                     (GHC.Show.$fShowMaybe_$cshowsPrec
                        @ Language.PureScript.AST.SourcePos.SourceSpan
                        Language.PureScript.AST.SourcePos.$fShowSourceSpan
                        GHC.Show.$fShow(,)1)
                     ls
                     s) -}
0a772553e62d1bc209ce9bf0e2ab11b3
  $s$fApplicativeStateT ::
    GHC.Base.Applicative
      (Control.Monad.Trans.State.Lazy.StateT
         s Data.Functor.Identity.Identity)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ s.
                  @ (Control.Monad.Trans.State.Lazy.StateT
                       s Data.Functor.Identity.Identity)
                  (Language.PureScript.Errors.$s$fApplicativeStateT_$s$fFunctorStateT
                     @ s)
                  (Language.PureScript.Errors.$s$fApplicativeStateT_$s$fApplicativeStateT_$cpure
                     @ s)
                  (Language.PureScript.Errors.$s$fApplicativeStateT_$s$fApplicativeStateT_$c<*>
                     @ s)
                  (Control.Monad.Trans.State.Lazy.$fAlternativeStateT2
                     @ Data.Functor.Identity.Identity
                     @ s
                     Data.Functor.Identity.$fFunctorIdentity
                     Data.Functor.Identity.$fMonadIdentity)
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N) (c1 :: <*>_N).
                   <a -> b -> c1>_R
                   ->_R <Control.Monad.Trans.State.Lazy.StateT
                           s Data.Functor.Identity.Identity a>_R
                   ->_R <Control.Monad.Trans.State.Lazy.StateT
                           s Data.Functor.Identity.Identity b>_R
                   ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                 <s>_N <Data.Functor.Identity.Identity>_R <c1>_N))
                  (Language.PureScript.Errors.$s$fApplicativeStateT_$s$fApplicativeStateT_$c*>
                     @ s)
                  (\ @ a
                     @ b
                     (x :: Control.Monad.Trans.State.Lazy.StateT
                             s Data.Functor.Identity.Identity a)
                     (eta :: Control.Monad.Trans.State.Lazy.StateT
                               s Data.Functor.Identity.Identity b)
                     (eta1 :: s) ->
                   let {
                     ds :: Data.Functor.Identity.Identity (a, s)
                     = x `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <s>_N <Data.Functor.Identity.Identity>_R <a>_N)
                         eta1
                   } in
                   (case ds
                           `cast`
                         (Data.Functor.Identity.N:Identity[0]
                              <(a, s)>_R) of wild { (,) a1 s' ->
                    a1 },
                    case (eta
                            `cast`
                          (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <s>_N <Data.Functor.Identity.Identity>_R <b>_N)
                            (case ds
                                    `cast`
                                  (Data.Functor.Identity.N:Identity[0]
                                       <(a, s)>_R) of wild { (,) a1 s' ->
                             s' }))
                           `cast`
                         (Data.Functor.Identity.N:Identity[0]
                              <(b, s)>_R) of wild { (,) x1 s'' ->
                    s'' })
                     `cast`
                   (Sym (Data.Functor.Identity.N:Identity[0] <(a, s)>_R)))
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   <Control.Monad.Trans.State.Lazy.StateT
                      s Data.Functor.Identity.Identity a>_R
                   ->_R <Control.Monad.Trans.State.Lazy.StateT
                           s Data.Functor.Identity.Identity b>_R
                   ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                 <s>_N <Data.Functor.Identity.Identity>_R <a>_N)) -}
9938890115a13b04a7855dd4e9f9e536
  $s$fApplicativeStateT_$s$fApplicativeStateT_$c*> ::
    Control.Monad.Trans.State.Lazy.StateT
      s Data.Functor.Identity.Identity a
    -> Control.Monad.Trans.State.Lazy.StateT
         s Data.Functor.Identity.Identity b
    -> Control.Monad.Trans.State.Lazy.StateT
         s Data.Functor.Identity.Identity b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(U(A,1*U))><C(S),1*C1(U(U,U))><L,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ a
                   @ b
                   (m1 :: Control.Monad.Trans.State.Lazy.StateT
                            s Data.Functor.Identity.Identity a)
                   (k :: Control.Monad.Trans.State.Lazy.StateT
                           s Data.Functor.Identity.Identity b)
                   (s1 :: s) ->
                 k `cast`
                 (Control.Monad.Trans.State.Lazy.N:StateT[0]
                      <s>_N <Data.Functor.Identity.Identity>_R <b>_N)
                   (case (m1
                            `cast`
                          (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <s>_N <Data.Functor.Identity.Identity>_R <a>_N)
                            s1)
                           `cast`
                         (Data.Functor.Identity.N:Identity[0]
                              <(a, s)>_R) of wild { (,) a1 s' ->
                    s' }))
                  `cast`
                (forall (s :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.State.Lazy.StateT
                    s Data.Functor.Identity.Identity a>_R
                 ->_R <Control.Monad.Trans.State.Lazy.StateT
                         s Data.Functor.Identity.Identity b>_R
                 ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <s>_N <Data.Functor.Identity.Identity>_R <b>_N)) -}
6bb19d844ddbdaad61c69f24c29f5ab2
  $s$fApplicativeStateT_$s$fApplicativeStateT_$c<*> ::
    Control.Monad.Trans.State.Lazy.StateT
      s Data.Functor.Identity.Identity (a -> b)
    -> Control.Monad.Trans.State.Lazy.StateT
         s Data.Functor.Identity.Identity a
    -> Control.Monad.Trans.State.Lazy.StateT
         s Data.Functor.Identity.Identity b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(U(1*C1(U),1*U))><L,1*C1(U(1*U,1*U))><L,U>m,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ a
                   @ b
                   (ds :: Control.Monad.Trans.State.Lazy.StateT
                            s Data.Functor.Identity.Identity (a -> b))
                   (ds1 :: Control.Monad.Trans.State.Lazy.StateT
                             s Data.Functor.Identity.Identity a)
                   (s1 :: s) ->
                 let {
                   ds2 :: Data.Functor.Identity.Identity (a -> b, s)
                   = ds
                       `cast`
                     (Control.Monad.Trans.State.Lazy.N:StateT[0]
                          <s>_N <Data.Functor.Identity.Identity>_R <a -> b>_N)
                       s1
                 } in
                 let {
                   ds3 :: Data.Functor.Identity.Identity (a, s)
                   = ds1
                       `cast`
                     (Control.Monad.Trans.State.Lazy.N:StateT[0]
                          <s>_N <Data.Functor.Identity.Identity>_R <a>_N)
                       (case ds2
                               `cast`
                             (Data.Functor.Identity.N:Identity[0]
                                  <(a -> b, s)>_R) of wild { (,) f2 s' ->
                        s' })
                 } in
                 (case ds2
                         `cast`
                       (Data.Functor.Identity.N:Identity[0]
                            <(a -> b, s)>_R) of wild { (,) f2 s' ->
                  f2
                    (case ds3
                            `cast`
                          (Data.Functor.Identity.N:Identity[0]
                               <(a, s)>_R) of wild1 { (,) x s'' ->
                     x }) },
                  case ds3
                         `cast`
                       (Data.Functor.Identity.N:Identity[0]
                            <(a, s)>_R) of wild { (,) x s'' ->
                  s'' })
                   `cast`
                 (Sym (Data.Functor.Identity.N:Identity[0] <(b, s)>_R)))
                  `cast`
                (forall (s :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.State.Lazy.StateT
                    s Data.Functor.Identity.Identity (a -> b)>_R
                 ->_R <Control.Monad.Trans.State.Lazy.StateT
                         s Data.Functor.Identity.Identity a>_R
                 ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <s>_N <Data.Functor.Identity.Identity>_R <b>_N)) -}
433ff708ede0f6506a9290755e796c00
  $s$fApplicativeStateT_$s$fApplicativeStateT_$cpure ::
    a
    -> Control.Monad.Trans.State.Lazy.StateT
         s Data.Functor.Identity.Identity a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, True)
                (\ @ s @ a (a1 :: a) (s1 :: s) -> (a1, s1))
                  `cast`
                (forall (s :: <*>_N) (a :: <*>_N).
                 <a>_R
                 ->_R (<s>_R
                       ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                     <(a, s)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                             <s>_N
                                                             <Data.Functor.Identity.Identity>_R
                                                             <a>_N)) -}
1da6ccdd0f14ed8624833e9c2bf8c2be
  $s$fApplicativeStateT_$s$fFunctorStateT ::
    GHC.Base.Functor
      (Control.Monad.Trans.State.Lazy.StateT
         s Data.Functor.Identity.Identity)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ s.
                  @ (Control.Monad.Trans.State.Lazy.StateT
                       s Data.Functor.Identity.Identity)
                  (Control.Monad.Trans.State.Lazy.$fFunctorStateT_$cfmap
                     @ Data.Functor.Identity.Identity
                     @ s
                     Data.Functor.Identity.$fFunctorIdentity)
                  (\ @ a
                     @ b
                     (x :: a)
                     (eta :: Control.Monad.Trans.State.Lazy.StateT
                               s Data.Functor.Identity.Identity b)
                     (eta1 :: s) ->
                   (x,
                    case (eta
                            `cast`
                          (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <s>_N <Data.Functor.Identity.Identity>_R <b>_N)
                            eta1)
                           `cast`
                         (Data.Functor.Identity.N:Identity[0]
                              <(b, s)>_R) of wild { (,) a1 s' ->
                    s' }))
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   <a>_R
                   ->_R <Control.Monad.Trans.State.Lazy.StateT
                           s Data.Functor.Identity.Identity b>_R
                   ->_R (<s>_R
                         ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                       <(a,
                                         s)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                            <s>_N
                                                            <Data.Functor.Identity.Identity>_R
                                                            <a>_N)) -}
7e88e532cc513860e01964af1759deeb
  $s$fMonadStateT ::
    GHC.Base.Monad
      (Control.Monad.Trans.State.Lazy.StateT
         s Data.Functor.Identity.Identity)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ s.
                  @ (Control.Monad.Trans.State.Lazy.StateT
                       s Data.Functor.Identity.Identity)
                  (Language.PureScript.Errors.$s$fApplicativeStateT @ s)
                  (Language.PureScript.Errors.$s$fMonadStateT_$s$fMonadStateT_$c>>=
                     @ s)
                  (Language.PureScript.Errors.$s$fMonadStateT_$s$fMonadStateT_$c>>
                     @ s)
                  (\ @ a (eta :: a) (eta1 :: s) -> (eta, eta1))
                    `cast`
                  (forall (a :: <*>_N).
                   <a>_R
                   ->_R (<s>_R
                         ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                       <(a,
                                         s)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                            <s>_N
                                                            <Data.Functor.Identity.Identity>_R
                                                            <a>_N))
                  (Language.PureScript.Errors.$s$fMonadStateT_$s$fMonadStateT_$cfail
                     @ s) -}
ccea776363463ce04530e6c4c2872226
  $s$fMonadStateT_$s$fMonadStateT_$c>> ::
    Control.Monad.Trans.State.Lazy.StateT
      s Data.Functor.Identity.Identity a
    -> Control.Monad.Trans.State.Lazy.StateT
         s Data.Functor.Identity.Identity b
    -> Control.Monad.Trans.State.Lazy.StateT
         s Data.Functor.Identity.Identity b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(U(A,1*U))><C(S),1*C1(U(U,U))><L,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ a
                   @ b
                   (m1 :: Control.Monad.Trans.State.Lazy.StateT
                            s Data.Functor.Identity.Identity a)
                   (k :: Control.Monad.Trans.State.Lazy.StateT
                           s Data.Functor.Identity.Identity b)
                   (s1 :: s) ->
                 k `cast`
                 (Control.Monad.Trans.State.Lazy.N:StateT[0]
                      <s>_N <Data.Functor.Identity.Identity>_R <b>_N)
                   (case (m1
                            `cast`
                          (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <s>_N <Data.Functor.Identity.Identity>_R <a>_N)
                            s1)
                           `cast`
                         (Data.Functor.Identity.N:Identity[0]
                              <(a, s)>_R) of wild { (,) a1 s' ->
                    s' }))
                  `cast`
                (forall (s :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.State.Lazy.StateT
                    s Data.Functor.Identity.Identity a>_R
                 ->_R <Control.Monad.Trans.State.Lazy.StateT
                         s Data.Functor.Identity.Identity b>_R
                 ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <s>_N <Data.Functor.Identity.Identity>_R <b>_N)) -}
e76465fd8394074a74a166644f9f196b
  $s$fMonadStateT_$s$fMonadStateT_$c>>= ::
    Control.Monad.Trans.State.Lazy.StateT
      s Data.Functor.Identity.Identity a
    -> (a
        -> Control.Monad.Trans.State.Lazy.StateT
             s Data.Functor.Identity.Identity b)
    -> Control.Monad.Trans.State.Lazy.StateT
         s Data.Functor.Identity.Identity b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(U(1*U,1*U))><C(C(S)),1*C1(C1(U(U,U)))><L,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ a
                   @ b
                   (m1 :: Control.Monad.Trans.State.Lazy.StateT
                            s Data.Functor.Identity.Identity a)
                   (k :: a
                         -> Control.Monad.Trans.State.Lazy.StateT
                              s Data.Functor.Identity.Identity b)
                   (s1 :: s) ->
                 let {
                   ds :: Data.Functor.Identity.Identity (a, s)
                   = m1
                       `cast`
                     (Control.Monad.Trans.State.Lazy.N:StateT[0]
                          <s>_N <Data.Functor.Identity.Identity>_R <a>_N)
                       s1
                 } in
                 (k (case ds
                            `cast`
                          (Data.Functor.Identity.N:Identity[0]
                               <(a, s)>_R) of wild { (,) a1 s' ->
                     a1 }))
                   `cast`
                 (Control.Monad.Trans.State.Lazy.N:StateT[0]
                      <s>_N <Data.Functor.Identity.Identity>_R <b>_N)
                   (case ds
                           `cast`
                         (Data.Functor.Identity.N:Identity[0]
                              <(a, s)>_R) of wild { (,) a1 s' ->
                    s' }))
                  `cast`
                (forall (s :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.State.Lazy.StateT
                    s Data.Functor.Identity.Identity a>_R
                 ->_R <a
                       -> Control.Monad.Trans.State.Lazy.StateT
                            s Data.Functor.Identity.Identity b>_R
                 ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <s>_N <Data.Functor.Identity.Identity>_R <b>_N)) -}
2040d134ee4e19be0f718b66c80143d9
  $s$fMonadStateT_$s$fMonadStateT_$cfail ::
    GHC.Base.String
    -> Control.Monad.Trans.State.Lazy.StateT
         s Data.Functor.Identity.Identity a
  {- Arity: 2, Strictness: <B,U><B,A>x, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, True)
                (\ @ s @ a (str :: GHC.Base.String) (ds :: s) ->
                 GHC.Err.errorWithoutStackTrace
                   @ 'GHC.Types.LiftedRep
                   @ (Data.Functor.Identity.Identity (a, s))
                   str)
                  `cast`
                (forall (s :: <*>_N) (a :: <*>_N).
                 <GHC.Base.String>_R
                 ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <s>_N <Data.Functor.Identity.Identity>_R <a>_N)) -}
412bfc4eba77e5e674329d6f9440cebb
  $s$fShowMaybe_$cshowList ::
    [GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [GHC.Base.Maybe
                             Language.PureScript.AST.SourcePos.SourceSpan])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan)
                   (GHC.Show.$fShowMaybe_$cshowsPrec
                      @ Language.PureScript.AST.SourcePos.SourceSpan
                      Language.PureScript.AST.SourcePos.$fShowSourceSpan
                      GHC.Show.$fShow(,)1)
                   ls
                   s) -}
b2d9b7155629560500c7f549c29165f4
  $sdelete_$sgo3 ::
    Language.PureScript.Names.ModuleName
    -> Data.Set.Internal.Set Language.PureScript.Names.ModuleName
    -> Data.Set.Internal.Set Language.PureScript.Names.ModuleName
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
c09d1281843540f6d9254d190e56bfa6
  $tc'Error :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8793715997078925289##
                   18012770853181292055##
                   Language.PureScript.Errors.$trModule
                   Language.PureScript.Errors.$tc'Error2
                   0#
                   Language.PureScript.Errors.$tc'Error1) -}
0159579f0d8cf9012170535349e44148
  $tc'Error1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
afcf1f327d5055a5a1e0a5f3ef52f8c2
  $tc'Error2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Errors.$tc'Error3) -}
183ce740bd35c29246bf6a99d22f2974
  $tc'Error3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Error"#) -}
cd681b2d8120acd7b17bacc3a32e4b1c
  $tc'ErrorSuggestion :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5850968783689343991##
                   6269075992610951959##
                   Language.PureScript.Errors.$trModule
                   Language.PureScript.Errors.$tc'ErrorSuggestion2
                   0#
                   Language.PureScript.Errors.$tc'ErrorSuggestion1) -}
2ef16e20070bbfff18cb5261c2d826c7
  $tc'ErrorSuggestion1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
d8d999a4a04b1fc83d5a0a0b3d6861e1
  $tc'ErrorSuggestion2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Errors.$tc'ErrorSuggestion3) -}
61f57bc28c4679c67522c52f56ae5cf0
  $tc'ErrorSuggestion3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ErrorSuggestion"#) -}
02d0f933f3401c3b8fd0d7a8749f5bc6
  $tc'MultipleErrors :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4546224929855964583##
                   17410749560140492593##
                   Language.PureScript.Errors.$trModule
                   Language.PureScript.Errors.$tc'MultipleErrors2
                   0#
                   Language.PureScript.Errors.$tc'MultipleErrors1) -}
fb1045bb34e7ce2ed84c722902c17226
  $tc'MultipleErrors1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
3b4156177ac608fb639e669528f1c1b5
  $tc'MultipleErrors2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Errors.$tc'MultipleErrors3) -}
2de083a38821d9607dde51a240bceee7
  $tc'MultipleErrors3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'MultipleErrors"#) -}
58cf5d0cc75ca6648331bae7ba000387
  $tc'PPEOptions :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7166056235205563733##
                   17302016984920181184##
                   Language.PureScript.Errors.$trModule
                   Language.PureScript.Errors.$tc'PPEOptions2
                   0#
                   Language.PureScript.Errors.$tc'PPEOptions1) -}
5b0f3e59c9ab8201ca9a9b0c44dd3698
  $tc'PPEOptions1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
5eeb770a91099d608ebc189203f2001a
  $tc'PPEOptions2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Errors.$tc'PPEOptions3) -}
acc8a360872486380508d88249d42473
  $tc'PPEOptions3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'PPEOptions"#) -}
a27f4eb73874a26c8b03911b2281b299
  $tc'TypeMap :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6537805316149191005##
                   18118803715002861741##
                   Language.PureScript.Errors.$trModule
                   Language.PureScript.Errors.$tc'TypeMap2
                   0#
                   Language.PureScript.Errors.$tc'TypeMap1) -}
7b63b2f58a5c970febc5c0f59dcb0eee
  $tc'TypeMap1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
7c211862b0339e8c9caa2088376368f7
  $tc'TypeMap2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Errors.$tc'TypeMap3) -}
75d9155a1fb0da0d85306b056de42c87
  $tc'TypeMap3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TypeMap"#) -}
54994e9799810d7570c4c2e330693250
  $tc'Warning :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3306646657489085101##
                   1532698769037277215##
                   Language.PureScript.Errors.$trModule
                   Language.PureScript.Errors.$tc'Warning1
                   0#
                   Language.PureScript.Errors.$tc'Error1) -}
05e6964022a86904c3ee5150fa279f7a
  $tc'Warning1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Errors.$tc'Warning2) -}
651da551337937d2486862c5e6dcdcc6
  $tc'Warning2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Warning"#) -}
bff3a920269ea1c9627cb35efe5221e5
  $tcErrorSuggestion :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3285253024290940639##
                   6077974751479480845##
                   Language.PureScript.Errors.$trModule
                   Language.PureScript.Errors.$tcErrorSuggestion1
                   0#
                   GHC.Types.krep$*) -}
996324c346a6f11d5d8fd2a1b4e44edc
  $tcErrorSuggestion1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Errors.$tcErrorSuggestion2) -}
463473f5b85ef58fe85b7c3b5d9f7380
  $tcErrorSuggestion2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ErrorSuggestion"#) -}
e92fa1c60755e597e51e43018fb2ef25
  $tcLevel :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14383355982091306382##
                   7008729156673019881##
                   Language.PureScript.Errors.$trModule
                   Language.PureScript.Errors.$tcLevel1
                   0#
                   GHC.Types.krep$*) -}
27d86c4dea426131446998db63218135
  $tcLevel1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Errors.$tcLevel2) -}
6154a0003af943978977770d141420fc
  $tcLevel2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Level"#) -}
b389ef5371c0455010f2b01f82e286a8
  $tcMultipleErrors :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15786054092579072201##
                   3450541321828419861##
                   Language.PureScript.Errors.$trModule
                   Language.PureScript.Errors.$tcMultipleErrors1
                   0#
                   GHC.Types.krep$*) -}
9ba60fdb5a6f0c8728a4bd2ed2b5edaf
  $tcMultipleErrors1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Errors.$tcMultipleErrors2) -}
7debb0ea161c78d4b2ed02ec47cdd92a
  $tcMultipleErrors2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("MultipleErrors"#) -}
4a9384a805a6c001e730648bec3566a1
  $tcPPEOptions :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12180984744094348769##
                   6148814072571009625##
                   Language.PureScript.Errors.$trModule
                   Language.PureScript.Errors.$tcPPEOptions1
                   0#
                   GHC.Types.krep$*) -}
7405e1bdc39da4372590ce7bfbf8ab18
  $tcPPEOptions1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Errors.$tcPPEOptions2) -}
3a98c94d8d75e3d3b87758c0f6f70595
  $tcPPEOptions2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("PPEOptions"#) -}
458e44ce4ec513d241ddfdbd856c8a9a
  $tcTypeMap :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7604924872693316726##
                   8816919415684116465##
                   Language.PureScript.Errors.$trModule
                   Language.PureScript.Errors.$tcTypeMap1
                   0#
                   GHC.Types.krep$*) -}
01002a876fa89fa5d09f102988a81e14
  $tcTypeMap1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Errors.$tcTypeMap2) -}
5ad444cbf6440027a857003b508644c2
  $tcTypeMap2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("TypeMap"#) -}
75aa6886e6cda95e05787e226a66187d
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Language.PureScript.Errors.$trModule3
                   Language.PureScript.Errors.$trModule1) -}
1faab6f3b9bfe2ce252a5a6cc62ca96c
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Errors.$trModule2) -}
a187258d68fc7b1b7b2024cd85e01dcc
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Language.PureScript.Errors"#) -}
4a0cd7647d2586f3f2d26211ad96d73a
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Errors.$trModule4) -}
50213e5fdbbd0afdb5f028fabd8b4e3a
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"#) -}
e1ef6a17348ccfe3ef65185d3c5f9026
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> Language.PureScript.Errors.MultipleErrors
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: Language.PureScript.Errors.MultipleErrors)
                   (w1 :: GHC.Base.String) ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     GHC.CString.unpackAppendCString#
                       Language.PureScript.Errors.$fShowMultipleErrors4
                       (GHC.CString.unpackAppendCString#
                          Language.PureScript.Errors.$fShowMultipleErrors3
                          (let {
                             s :: GHC.Base.String
                             = GHC.CString.unpackAppendCString#
                                 Language.PureScript.Errors.$fShowMultipleErrors2
                                 x
                           } in
                           case w `cast`
                                (Language.PureScript.Errors.N:MultipleErrors[0]) of wild {
                             [] -> GHC.CString.unpackAppendCString# GHC.Show.showList__4 s
                             : x1 xs
                             -> GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showList__3
                                  (case x1 of ww1 { Language.PureScript.AST.Declarations.ErrorMessage ww2 ww3 ->
                                   Language.PureScript.AST.Declarations.$w$cshowsPrec5
                                     0#
                                     ww2
                                     ww3
                                     (let {
                                        lvl1141 :: [GHC.Types.Char]
                                        = GHC.Types.: @ GHC.Types.Char GHC.Show.showList__2 s
                                      } in
                                      letrec {
                                        showl :: [Language.PureScript.AST.Declarations.ErrorMessage]
                                                 -> GHC.Base.String
                                          {- Arity: 1, Strictness: <S,1*U> -}
                                        = \ (ds2 :: [Language.PureScript.AST.Declarations.ErrorMessage]) ->
                                          case ds2 of wild1 {
                                            [] -> lvl1141
                                            : y ys
                                            -> GHC.Types.:
                                                 @ GHC.Types.Char
                                                 GHC.Show.showList__1
                                                 (case y of ww4 { Language.PureScript.AST.Declarations.ErrorMessage ww5 ww6 ->
                                                  Language.PureScript.AST.Declarations.$w$cshowsPrec5
                                                    0#
                                                    ww5
                                                    ww6
                                                    (showl ys) }) }
                                      } in
                                      showl xs) }) }))
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT -> p w1
                   1#
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 w1)) }) -}
64868689c28423350383e41e66c0ae2a
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> Data.Map.Internal.Map
         GHC.Types.Int
         (GHC.Base.String, GHC.Types.Int,
          GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan)
    -> Data.Map.Internal.Map GHC.Types.Int GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Show.ShowS
  {- Arity: 4, Strictness: <S,U><L,1*U><L,1*U><L,U(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Data.Map.Internal.Map
                             GHC.Types.Int
                             (GHC.Base.String, GHC.Types.Int,
                              GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan))
                   (ww2 :: Data.Map.Internal.Map GHC.Types.Int GHC.Types.Int)
                   (ww3 :: GHC.Types.Int) ->
                 let {
                   f2 :: GHC.Base.String -> GHC.Base.String
                   = Data.Map.Internal.$w$cshowsPrec
                       @ GHC.Types.Int
                       @ (GHC.Base.String, GHC.Types.Int,
                          GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan)
                       GHC.Show.$fShowInt
                       Language.PureScript.Errors.$fShowTypeMap_$s$fShow(,,)
                       0#
                       ww1
                 } in
                 let {
                   f3 :: GHC.Base.String -> GHC.Base.String
                   = Data.Map.Internal.$w$cshowsPrec
                       @ GHC.Types.Int
                       @ GHC.Types.Int
                       GHC.Show.$fShowInt
                       GHC.Show.$fShowInt
                       0#
                       ww2
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> \ (x :: GHC.Base.String) ->
                      GHC.CString.unpackAppendCString#
                        Language.PureScript.Errors.$fShowTypeMap5
                        (GHC.CString.unpackAppendCString#
                           Language.PureScript.Errors.$fShowTypeMap4
                           (f2
                              (GHC.Base.++
                                 @ GHC.Types.Char
                                 GHC.Show.showCommaSpace1
                                 (GHC.CString.unpackAppendCString#
                                    Language.PureScript.Errors.$fShowTypeMap3
                                    (f3
                                       (GHC.Base.++
                                          @ GHC.Types.Char
                                          GHC.Show.showCommaSpace1
                                          (GHC.CString.unpackAppendCString#
                                             Language.PureScript.Errors.$fShowTypeMap2
                                             (case ww3 of ww4 { GHC.Types.I# ww5 ->
                                              case GHC.Show.$wshowSignedInt
                                                     0#
                                                     ww5
                                                     (GHC.CString.unpackAppendCString#
                                                        Language.PureScript.Errors.$fShowMultipleErrors2
                                                        x) of ww6 { (#,#) ww7 ww8 ->
                                              GHC.Types.: @ GHC.Types.Char ww7 ww8 } }))))))))
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.CString.unpackAppendCString#
                           Language.PureScript.Errors.$fShowTypeMap5
                           (GHC.CString.unpackAppendCString#
                              Language.PureScript.Errors.$fShowTypeMap4
                              (f2
                                 (GHC.Base.++
                                    @ GHC.Types.Char
                                    GHC.Show.showCommaSpace1
                                    (GHC.CString.unpackAppendCString#
                                       Language.PureScript.Errors.$fShowTypeMap3
                                       (f3
                                          (GHC.Base.++
                                             @ GHC.Types.Char
                                             GHC.Show.showCommaSpace1
                                             (GHC.CString.unpackAppendCString#
                                                Language.PureScript.Errors.$fShowTypeMap2
                                                (case ww3 of ww4 { GHC.Types.I# ww5 ->
                                                 case GHC.Show.$wshowSignedInt
                                                        0#
                                                        ww5
                                                        (GHC.CString.unpackAppendCString#
                                                           Language.PureScript.Errors.$fShowMultipleErrors2
                                                           (GHC.Types.:
                                                              @ GHC.Types.Char
                                                              GHC.Show.$fShow(,)2
                                                              x)) of ww6 { (#,#) ww7 ww8 ->
                                                 GHC.Types.:
                                                   @ GHC.Types.Char
                                                   ww7
                                                   ww8 } }))))))))) }) -}
4753daa79a5f3f61d8011b9e4307212e
  $w$sgo13 ::
    GHC.Types.Int
    -> GHC.Prim.Int#
    -> a1
    -> Data.Map.Internal.Map GHC.Types.Int a1
    -> Data.Map.Internal.Map GHC.Types.Int a1
  {- Arity: 4, Strictness: <L,U><L,U><L,U><S,1*U>, Inline: [0] -}
71e7d44e3904b95f1b4534cd344c171e
  $w$sonTypesInErrorMessageM ::
    (Language.PureScript.Types.SourceType
     -> Data.Functor.Identity.Identity
          Language.PureScript.Types.SourceType)
    -> [Language.PureScript.AST.Declarations.ErrorMessageHint]
    -> Language.PureScript.AST.Declarations.SimpleErrorMessage
    -> (# [Language.PureScript.AST.Declarations.ErrorMessageHint],
          Language.PureScript.AST.Declarations.SimpleErrorMessage #)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,C(U)><L,1*U><L,1*U>,
     Inline: [0] -}
ce3ae6681de6601dbc4797fd0a29ff4f
  $w$sonTypesInErrorMessageM1 ::
    (Language.PureScript.Types.SourceType
     -> Control.Monad.Trans.State.Lazy.StateT
          Language.PureScript.Errors.TypeMap
          Data.Functor.Identity.Identity
          Language.PureScript.Types.SourceType)
    -> [Language.PureScript.AST.Declarations.ErrorMessageHint]
    -> Language.PureScript.AST.Declarations.SimpleErrorMessage
    -> Language.PureScript.Errors.TypeMap
    -> (# Language.PureScript.AST.Declarations.ErrorMessage,
          Language.PureScript.Errors.TypeMap #)
  {- Arity: 4, Strictness: <L,C(U)><L,1*U><L,1*U><L,U>,
     Inline: [0] -}
d8b25b10ad09f6014ad623e4a0594a76
  $wansiColor ::
    System.Console.ANSI.Types.ColorIntensity
    -> System.Console.ANSI.Types.Color -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: System.Console.ANSI.Types.ColorIntensity)
                   (ww1 :: System.Console.ANSI.Types.Color) ->
                 System.Console.ANSI.Codes.csi
                   (System.Console.ANSI.Codes.setSGRCode_go
                      (GHC.Types.:
                         @ System.Console.ANSI.Types.SGR
                         (case ww of dt { DEFAULT ->
                          case ww1 of dt1 { DEFAULT ->
                          System.Console.ANSI.Types.SetColor
                            System.Console.ANSI.Types.Foreground
                            dt
                            dt1 } })
                         (GHC.Types.[] @ System.Console.ANSI.Types.SGR)))
                   System.Console.ANSI.Codes.setSGRCode1) -}
16b0792faff6be2ba2bebf15cd441cfe
  $wcolorCode ::
    GHC.Base.Maybe
      (System.Console.ANSI.Types.ColorIntensity,
       System.Console.ANSI.Types.Color)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Text.Internal.Text
  {- Arity: 4, Strictness: <S,1*U><L,U><S,U><S,U>, Inline: [0] -}
5692e43829dfed7e366d7b1bf5170f9f
  $wcolorCodeBox ::
    GHC.Base.Maybe
      (System.Console.ANSI.Types.ColorIntensity,
       System.Console.ANSI.Types.Color)
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> Text.PrettyPrint.Boxes.Content
    -> (# GHC.Types.Int, GHC.Types.Int,
          Text.PrettyPrint.Boxes.Content #)
  {- Arity: 4, Strictness: <S,1*U><L,U(U)><L,U><L,U>, Inline: [0] -}
c6764d537910e1a0d61cea3119681df8
  $werrorCode ::
    Language.PureScript.AST.Declarations.SimpleErrorMessage
    -> Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
1977d1fea01b5c08a5c55d68dc006d2a
  $werrorDocUri ::
    Language.PureScript.AST.Declarations.SimpleErrorMessage
    -> Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
6f75b3dcc60900768a60517d11075de3
  $wfindHint ::
    (Language.PureScript.AST.Declarations.ErrorMessageHint
     -> GHC.Base.Maybe a)
    -> [Language.PureScript.AST.Declarations.ErrorMessageHint]
    -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: Language.PureScript.AST.Declarations.ErrorMessageHint
                         -> GHC.Base.Maybe a)
                   (ww :: [Language.PureScript.AST.Declarations.ErrorMessageHint]) ->
                 letrec {
                   go8 :: [Language.PureScript.AST.Declarations.ErrorMessageHint]
                          -> Data.Monoid.Last a
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [Language.PureScript.AST.Declarations.ErrorMessageHint]) ->
                     case ds of wild {
                       []
                       -> (GHC.Base.Nothing @ a)
                            `cast`
                          (Sym (Data.Monoid.N:Last[0]) <a>_N)
                       : y ys
                       -> case (go8 ys) `cast` (Data.Monoid.N:Last[0] <a>_N) of wild1 {
                            GHC.Base.Nothing
                            -> (w y) `cast` (Sym (Data.Monoid.N:Last[0]) <a>_N)
                            GHC.Base.Just ipv
                            -> wild1 `cast` (Sym (Data.Monoid.N:Last[0]) <a>_N) } }
                 } in
                 (go8 ww) `cast` (Data.Monoid.N:Last[0] <a>_N)) -}
c8ff2178f3744248d8dd2393762043c6
  $windent ::
    Text.PrettyPrint.Boxes.Box
    -> (# GHC.Types.Int, GHC.Types.Int,
          Text.PrettyPrint.Boxes.Content #)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(U(U),U(U),U)>,
     Inline: [0],
     Unfolding: (\ (w :: Text.PrettyPrint.Boxes.Box) ->
                 let {
                   b :: GHC.Types.Int
                   = case w of wild { Text.PrettyPrint.Boxes.Box ds ds1 ds2 ->
                     case ds1 of wild1 { GHC.Types.I# x1 ->
                     GHC.Types.I# (GHC.Prim.+# x1 2#) } }
                 } in
                 let {
                   b1 :: GHC.Types.Int
                   = case w of wild { Text.PrettyPrint.Boxes.Box ds ds1 ds2 -> ds }
                 } in
                 let {
                   b2 :: GHC.Types.Int
                   = case b1 of wild1 { GHC.Types.I# x1 ->
                     GHC.Types.I# (GHC.Prim.+# x1 1#) }
                 } in
                 (# case b2 of wild1 { GHC.Types.I# x1 ->
                    GHC.Types.I# (GHC.Prim.+# x1 1#) },
                    b,
                    Text.PrettyPrint.Boxes.SubBox
                      Text.PrettyPrint.Boxes.AlignFirst
                      Text.PrettyPrint.Boxes.AlignFirst
                      (Text.PrettyPrint.Boxes.Box
                         b2
                         b
                         (Text.PrettyPrint.Boxes.SubBox
                            Text.PrettyPrint.Boxes.AlignFirst
                            Text.PrettyPrint.Boxes.AlignLast
                            (Text.PrettyPrint.Boxes.Box
                               b1
                               b
                               (Text.PrettyPrint.Boxes.SubBox
                                  Text.PrettyPrint.Boxes.AlignLast
                                  Text.PrettyPrint.Boxes.AlignFirst
                                  w)))) #)) -}
11cfc48dc2b20ac7b4845c5fa2b0f83b
  $wline ::
    Data.Text.Internal.Text
    -> (# GHC.Types.Int, GHC.Types.Int,
          Text.PrettyPrint.Boxes.Content #)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*U(U,U,U)>, Inline: [0],
     Unfolding: (\ (w :: Data.Text.Internal.Text) ->
                 let {
                   t104 :: GHC.Base.String
                   = case w of wild { Data.Text.Internal.Text dt dt1 dt2 ->
                     let {
                       end :: GHC.Prim.Int# = GHC.Prim.+# dt1 dt2
                     } in
                     letrec {
                       $wunfold :: GHC.Prim.Int# -> [GHC.Types.Char]
                         {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                       = \ (ww :: GHC.Prim.Int#) ->
                         case GHC.Prim.>=# ww end of lwild {
                           DEFAULT
                           -> case GHC.Prim.indexWord16Array# dt ww of r# { DEFAULT ->
                              case GHC.Prim.geWord# r# 55296## of lwild1 {
                                DEFAULT
                                -> GHC.Types.:
                                     @ GHC.Types.Char
                                     (GHC.Types.C# (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                     ($wunfold (GHC.Prim.+# ww 1#))
                                1#
                                -> case GHC.Prim.leWord# r# 56319## of lwild2 {
                                     DEFAULT
                                     -> GHC.Types.:
                                          @ GHC.Types.Char
                                          (GHC.Types.C# (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                          ($wunfold (GHC.Prim.+# ww 1#))
                                     1#
                                     -> case GHC.Prim.indexWord16Array#
                                               dt
                                               (GHC.Prim.+# ww 1#) of r#1 { DEFAULT ->
                                        GHC.Types.:
                                          @ GHC.Types.Char
                                          (GHC.Types.C#
                                             (GHC.Prim.chr#
                                                (GHC.Prim.+#
                                                   (GHC.Prim.+#
                                                      (GHC.Prim.uncheckedIShiftL#
                                                         (GHC.Prim.-#
                                                            (GHC.Prim.word2Int# r#)
                                                            55296#)
                                                         10#)
                                                      (GHC.Prim.-# (GHC.Prim.word2Int# r#1) 56320#))
                                                   65536#)))
                                          ($wunfold (GHC.Prim.+# ww 2#)) } } } }
                           1# -> GHC.Types.[] @ GHC.Types.Char }
                     } in
                     $wunfold dt1 }
                 } in
                 (# Text.PrettyPrint.Boxes.text1,
                    case GHC.List.$wlenAcc @ GHC.Types.Char t104 0# of ww2 { DEFAULT ->
                    GHC.Types.I# ww2 },
                    Text.PrettyPrint.Boxes.Text t104 #)) -}
d60963882c1ffa7b97e21a8217c081ee
  $wlvl ::
    GHC.Base.String
    -> Language.PureScript.AST.SourcePos.SourcePos
    -> Language.PureScript.AST.SourcePos.SourcePos
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U(1*U(1*U),1*U(1*U))><L,1*U(1*U(1*U),1*U(1*U))>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.String)
                   (ww1 :: Language.PureScript.AST.SourcePos.SourcePos)
                   (ww2 :: Language.PureScript.AST.SourcePos.SourcePos) ->
                 case GHC.Base.eqString ww (GHC.Types.[] @ GHC.Types.Char) of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True
                   -> case ww1 of wild1 { Language.PureScript.AST.SourcePos.SourcePos a1 a2 ->
                      case a1 of wild3 { GHC.Types.I# x ->
                      case x of wild2 {
                        DEFAULT -> GHC.Types.True
                        0#
                        -> case a2 of wild5 { GHC.Types.I# x1 ->
                           case x1 of wild4 {
                             DEFAULT -> GHC.Types.True
                             0#
                             -> case ww2 of ww3 { Language.PureScript.AST.SourcePos.SourcePos ww4 ww5 ->
                                case ww4 of ww6 { GHC.Types.I# ww7 ->
                                case ww7 of wild6 {
                                  DEFAULT -> GHC.Types.True
                                  0#
                                  -> case ww5 of wild7 { GHC.Types.I# x2 ->
                                     case x2 of wild8 {
                                       DEFAULT -> GHC.Types.True
                                       0# -> GHC.Types.False } } } } } } } } } } }) -}
830ceae6d23aa0292a5373d1f4429577
  $wonTypesInErrorMessageM ::
    GHC.Base.Applicative m =>
    (Language.PureScript.Types.SourceType
     -> m Language.PureScript.Types.SourceType)
    -> [Language.PureScript.AST.Declarations.ErrorMessageHint]
    -> Language.PureScript.AST.Declarations.SimpleErrorMessage
    -> m Language.PureScript.AST.Declarations.ErrorMessage
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LLC(C(S))LLL),U(U(C(C1(U)),A),C(U),C(C1(U)),C(C1(C1(U))),A,A)><L,C(U)><L,1*U><L,1*U>,
     Inline: [0] -}
3c53f076ffe902d9f02cedf8a3383095
  $wpoly_go13 ::
    GHC.Prim.Int#
    -> Data.Map.Internal.Map GHC.Types.Int a -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>, Inline: [0] -}
0f6f7545e0bb205b250bebd096ea1ed7
  $wprettyPrintParseError ::
    [Text.Parsec.Error.Message]
    -> (# GHC.Types.Int, GHC.Types.Int,
          Text.PrettyPrint.Boxes.Content #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ (ww :: [Text.Parsec.Error.Message]) ->
                 Language.PureScript.Errors.$wprettyPrintParseErrorMessages
                   Language.PureScript.Errors.prettyPrintParseError9
                   Language.PureScript.Errors.prettyPrintParseError7
                   Language.PureScript.Errors.prettyPrintParseError5
                   Language.PureScript.Errors.prettyPrintParseError3
                   Language.PureScript.Errors.prettyPrintParseError1
                   (Data.OldList.sortBy
                      @ Text.Parsec.Error.Message
                      Text.Parsec.Error.$fEqParseError_$ccompare
                      ww)) -}
ecd518db910c74a061386c5d98f9119e
  $wprettyPrintParseErrorMessages ::
    GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> [Text.Parsec.Error.Message]
    -> (# GHC.Types.Int, GHC.Types.Int,
          Text.PrettyPrint.Boxes.Content #)
  {- Arity: 6, Strictness: <L,U><L,U><L,1*U><L,U><L,U><S,1*U>,
     Inline: [0] -}
675051228aa502747446d11abf37662c
  $wprettyPrintSingleError ::
    GHC.Base.Maybe
      (System.Console.ANSI.Types.ColorIntensity,
       System.Console.ANSI.Types.Color)
    -> GHC.Types.Bool
    -> Language.PureScript.Errors.Level
    -> GHC.Types.Bool
    -> GHC.IO.FilePath
    -> [Language.PureScript.AST.Declarations.ErrorMessageHint]
    -> Language.PureScript.AST.Declarations.SimpleErrorMessage
    -> (# GHC.Types.Int, GHC.Types.Int,
          Text.PrettyPrint.Boxes.Content #)
  {- Arity: 7, Strictness: <L,U><S,U><L,1*U><L,1*U><L,U><L,1*U><L,U>,
     Inline: [0] -}
4c53574a8207f57070feb01b64b8e1b2
  $wrenderBox ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> Text.PrettyPrint.Boxes.Content
    -> GHC.Base.String
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U(U)><L,U(U)><S,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Types.Int)
                   (ww1 :: GHC.Types.Int)
                   (ww2 :: Text.PrettyPrint.Boxes.Content) ->
                 Data.OldList.unlines
                   (GHC.Base.map
                      @ [GHC.Types.Char]
                      @ [GHC.Types.Char]
                      Language.PureScript.Errors.renderBox1
                      (GHC.List.dropWhile
                         @ [GHC.Types.Char]
                         Language.PureScript.Errors.renderBox_go1
                           `cast`
                         (<[GHC.Types.Char]>_R ->_R Data.Semigroup.Internal.N:All[0])
                         (Language.PureScript.Errors.renderBox_go
                            (Data.OldList.lines
                               (Data.OldList.unlines
                                  (Text.PrettyPrint.Boxes.$wrenderBox ww ww1 ww2))))))) -}
5616bc00ab6843502eca27c70607527f
  $wreplaceTypes ::
    Language.PureScript.Types.Type
      Language.PureScript.AST.SourcePos.SourceAnn
    -> Language.PureScript.Errors.TypeMap
    -> (# Language.PureScript.Types.SourceType,
          Language.PureScript.Errors.TypeMap #)
  {- Arity: 2, Strictness: <S,1*U><L,U(U,U,U(U))>, Inline: [0],
     Unfolding: (\ (w :: Language.PureScript.Types.Type
                           Language.PureScript.AST.SourcePos.SourceAnn)
                   (w1 :: Language.PureScript.Errors.TypeMap) ->
                 case w of wild {
                   DEFAULT -> (# wild, w1 #)
                   Language.PureScript.Types.TUnknown ann u
                   -> case u of ww { GHC.Types.I# ww1 ->
                      case w1 of wild1 { Language.PureScript.Errors.TypeMap ds ds1 ds2 ->
                      case Language.PureScript.Errors.$wpoly_go13
                             @ GHC.Types.Int
                             ww1
                             ds1 of wild2 {
                        GHC.Base.Nothing
                        -> (# Language.PureScript.Types.TUnknown
                                @ Language.PureScript.AST.SourcePos.SourceAnn
                                ann
                                ds2,
                              Language.PureScript.Errors.TypeMap
                                ds
                                (Language.PureScript.Errors.$w$sgo13
                                   @ GHC.Types.Int
                                   ww
                                   ww1
                                   ds2
                                   ds1)
                                (case ds2 of wild3 { GHC.Types.I# x ->
                                 GHC.Types.I# (GHC.Prim.+# x 1#) }) #)
                        GHC.Base.Just u'
                        -> (# Language.PureScript.Types.TUnknown
                                @ Language.PureScript.AST.SourcePos.SourceAnn
                                ann
                                u',
                              wild1 #) } } }
                   Language.PureScript.Types.Skolem ann name s sko
                   -> case s of ww { GHC.Types.I# ww1 ->
                      case w1 of wild1 { Language.PureScript.Errors.TypeMap ds ds1 ds2 ->
                      case Language.PureScript.Errors.$wpoly_go13
                             @ (GHC.Base.String, GHC.Types.Int,
                                GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan)
                             ww1
                             ds of wild2 {
                        GHC.Base.Nothing
                        -> (# Language.PureScript.Types.Skolem
                                @ Language.PureScript.AST.SourcePos.SourceAnn
                                ann
                                name
                                ds2
                                sko,
                              Language.PureScript.Errors.TypeMap
                                (Language.PureScript.Errors.$w$sgo13
                                   @ (GHC.Base.String, GHC.Types.Int,
                                      GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan)
                                   ww
                                   ww1
                                   (case name of wild3 { Data.Text.Internal.Text dt dt1 dt2 ->
                                    let {
                                      end :: GHC.Prim.Int# = GHC.Prim.+# dt1 dt2
                                    } in
                                    letrec {
                                      $wunfold :: GHC.Prim.Int# -> [GHC.Types.Char]
                                        {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                                      = \ (ww2 :: GHC.Prim.Int#) ->
                                        case GHC.Prim.>=# ww2 end of lwild {
                                          DEFAULT
                                          -> case GHC.Prim.indexWord16Array#
                                                    dt
                                                    ww2 of r# { DEFAULT ->
                                             case GHC.Prim.geWord# r# 55296## of lwild1 {
                                               DEFAULT
                                               -> GHC.Types.:
                                                    @ GHC.Types.Char
                                                    (GHC.Types.C#
                                                       (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                                    ($wunfold (GHC.Prim.+# ww2 1#))
                                               1#
                                               -> case GHC.Prim.leWord# r# 56319## of lwild2 {
                                                    DEFAULT
                                                    -> GHC.Types.:
                                                         @ GHC.Types.Char
                                                         (GHC.Types.C#
                                                            (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                                         ($wunfold (GHC.Prim.+# ww2 1#))
                                                    1#
                                                    -> case GHC.Prim.indexWord16Array#
                                                              dt
                                                              (GHC.Prim.+#
                                                                 ww2
                                                                 1#) of r#1 { DEFAULT ->
                                                       GHC.Types.:
                                                         @ GHC.Types.Char
                                                         (GHC.Types.C#
                                                            (GHC.Prim.chr#
                                                               (GHC.Prim.+#
                                                                  (GHC.Prim.+#
                                                                     (GHC.Prim.uncheckedIShiftL#
                                                                        (GHC.Prim.-#
                                                                           (GHC.Prim.word2Int# r#)
                                                                           55296#)
                                                                        10#)
                                                                     (GHC.Prim.-#
                                                                        (GHC.Prim.word2Int# r#1)
                                                                        56320#))
                                                                  65536#)))
                                                         ($wunfold (GHC.Prim.+# ww2 2#)) } } } }
                                          1# -> GHC.Types.[] @ GHC.Types.Char }
                                    } in
                                    $wunfold dt1 },
                                    ds2,
                                    GHC.Base.Just
                                      @ Language.PureScript.AST.SourcePos.SourceSpan
                                      (Data.Tuple.fst
                                         @ Language.PureScript.AST.SourcePos.SourceSpan
                                         @ [Language.PureScript.Comments.Comment]
                                         ann))
                                   ds)
                                ds1
                                (case ds2 of wild3 { GHC.Types.I# x ->
                                 GHC.Types.I# (GHC.Prim.+# x 1#) }) #)
                        GHC.Base.Just ds3
                        -> case ds3 of wild3 { (,,) ds4 s' ds5 ->
                           (# Language.PureScript.Types.Skolem
                                @ Language.PureScript.AST.SourcePos.SourceAnn
                                ann
                                name
                                s'
                                sko,
                              wild1 #) } } } } }) -}
5ea58db6f3e13c56b81f7c9415561f42
  $wsuggestionSpan ::
    [Language.PureScript.AST.Declarations.ErrorMessageHint]
    -> Language.PureScript.AST.Declarations.SimpleErrorMessage
    -> GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: [Language.PureScript.AST.Declarations.ErrorMessageHint])
                   (ww1 :: Language.PureScript.AST.Declarations.SimpleErrorMessage) ->
                 case (Language.PureScript.Errors.errorSpan_go ww)
                        `cast`
                      (Data.Monoid.N:Last[0] <GHC.Base.NonEmpty
                                                Language.PureScript.AST.SourcePos.SourceSpan>_N) of wild {
                   GHC.Base.Nothing
                   -> GHC.Base.Nothing @ Language.PureScript.AST.SourcePos.SourceSpan
                   GHC.Base.Just a1
                   -> GHC.Base.Just
                        @ Language.PureScript.AST.SourcePos.SourceSpan
                        (case ww1 of wild1 {
                           DEFAULT -> case a1 of wild2 { GHC.Base.:| a2 ds1 -> a2 }
                           Language.PureScript.AST.Declarations.MissingTypeDeclaration ds ds1
                           -> case a1 of wild2 { GHC.Base.:| a2 ds2 ->
                              case a2 of wild3 { Language.PureScript.AST.SourcePos.SourceSpan ds3 ds4 ds5 ->
                              Language.PureScript.AST.SourcePos.SourceSpan
                                ds3
                                ds4
                                ds4 } } }) }) -}
6d36a3098c32d315226284f81f07b16f
  newtype ErrorSuggestion = ErrorSuggestion Data.Text.Internal.Text
b7d27648929ebd118857889472384e06
  data Level = Error | Warning
e1ef6a17348ccfe3ef65185d3c5f9026
  newtype MultipleErrors
    = MultipleErrors {runMultipleErrors :: [Language.PureScript.AST.Declarations.ErrorMessage]}
e4d7a637be529184ef49fa954b2afc7b
  data PPEOptions
    = PPEOptions {ppeCodeColor :: GHC.Base.Maybe
                                    (System.Console.ANSI.Types.ColorIntensity,
                                     System.Console.ANSI.Types.Color),
                  ppeFull :: GHC.Types.Bool,
                  ppeLevel :: Language.PureScript.Errors.Level,
                  ppeShowDocs :: GHC.Types.Bool,
                  ppeRelativeDirectory :: GHC.IO.FilePath}
137fe19a711a5edf64e51ef23f802d22
  data TypeMap
    = TypeMap {umSkolemMap :: Data.Map.Internal.Map
                                GHC.Types.Int
                                (GHC.Base.String, GHC.Types.Int,
                                 GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan),
               umUnknownMap :: Data.Map.Internal.Map GHC.Types.Int GHC.Types.Int,
               umNextIndex :: GHC.Types.Int}
4d7c0f041e7397261babf0b1c1669b2a
  addHint ::
    Language.PureScript.AST.Declarations.ErrorMessageHint
    -> Language.PureScript.Errors.MultipleErrors
    -> Language.PureScript.Errors.MultipleErrors
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Errors.addHint1
                  `cast`
                (<Language.PureScript.AST.Declarations.ErrorMessageHint>_R
                 ->_R <Language.PureScript.Errors.MultipleErrors>_R
                 ->_R Sym (Language.PureScript.Errors.N:MultipleErrors[0])) -}
b1c52fd0425bfd64c6a89b440fab254f
  addHint1 ::
    Language.PureScript.AST.Declarations.ErrorMessageHint
    -> Language.PureScript.Errors.MultipleErrors
    -> [Language.PureScript.AST.Declarations.ErrorMessage]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>,
     Unfolding: (\ (hint :: Language.PureScript.AST.Declarations.ErrorMessageHint)
                   (eta :: Language.PureScript.Errors.MultipleErrors) ->
                 GHC.Base.map
                   @ Language.PureScript.AST.Declarations.ErrorMessage
                   @ Language.PureScript.AST.Declarations.ErrorMessage
                   (\ (ds :: Language.PureScript.AST.Declarations.ErrorMessage) ->
                    case ds of wild { Language.PureScript.AST.Declarations.ErrorMessage hints' se ->
                    Language.PureScript.AST.Declarations.ErrorMessage
                      (GHC.Base.++_$s++
                         @ Language.PureScript.AST.Declarations.ErrorMessageHint
                         hints'
                         hint
                         (GHC.Types.[]
                            @ Language.PureScript.AST.Declarations.ErrorMessageHint))
                      se })
                   eta `cast` (Language.PureScript.Errors.N:MultipleErrors[0])) -}
d0fbd17243d9930e4662ffa1081486d9
  addHints ::
    [Language.PureScript.AST.Declarations.ErrorMessageHint]
    -> Language.PureScript.Errors.MultipleErrors
    -> Language.PureScript.Errors.MultipleErrors
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Errors.addHints1
                  `cast`
                (<[Language.PureScript.AST.Declarations.ErrorMessageHint]>_R
                 ->_R <Language.PureScript.Errors.MultipleErrors>_R
                 ->_R Sym (Language.PureScript.Errors.N:MultipleErrors[0])) -}
4627d2435a5fcf0e31ca4a18aac5d31f
  addHints1 ::
    [Language.PureScript.AST.Declarations.ErrorMessageHint]
    -> Language.PureScript.Errors.MultipleErrors
    -> [Language.PureScript.AST.Declarations.ErrorMessage]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (hints :: [Language.PureScript.AST.Declarations.ErrorMessageHint])
                   (eta :: Language.PureScript.Errors.MultipleErrors) ->
                 GHC.Base.build
                   @ Language.PureScript.AST.Declarations.ErrorMessage
                   (\ @ b1
                      (c1 :: Language.PureScript.AST.Declarations.ErrorMessage
                             -> b1 -> b1)[OneShot]
                      (n :: b1)[OneShot] ->
                    GHC.Base.foldr
                      @ Language.PureScript.AST.Declarations.ErrorMessage
                      @ b1
                      (GHC.Base.mapFB
                         @ Language.PureScript.AST.Declarations.ErrorMessage
                         @ b1
                         @ Language.PureScript.AST.Declarations.ErrorMessage
                         c1
                         (\ (ds :: Language.PureScript.AST.Declarations.ErrorMessage) ->
                          case ds of wild { Language.PureScript.AST.Declarations.ErrorMessage hints' se ->
                          Language.PureScript.AST.Declarations.ErrorMessage
                            (GHC.Base.augment
                               @ Language.PureScript.AST.Declarations.ErrorMessageHint
                               (\ @ b
                                  (c2 :: Language.PureScript.AST.Declarations.ErrorMessageHint
                                         -> b -> b)[OneShot]
                                  (n1 :: b)[OneShot] ->
                                GHC.Base.foldr
                                  @ Language.PureScript.AST.Declarations.ErrorMessageHint
                                  @ b
                                  c2
                                  n1
                                  hints)
                               hints')
                            se }))
                      n
                      eta `cast` (Language.PureScript.Errors.N:MultipleErrors[0]))) -}
f42ef46db800479bbf6c0e263154b9df
  ansiColor ::
    (System.Console.ANSI.Types.ColorIntensity,
     System.Console.ANSI.Types.Color)
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: (System.Console.ANSI.Types.ColorIntensity,
                          System.Console.ANSI.Types.Color)) ->
                 case w of ww { (,) ww1 ww2 ->
                 Language.PureScript.Errors.$wansiColor ww1 ww2 }) -}
0cdb9e72eba4c168f2fe7749c71abd13
  ansiColorReset :: GHC.Base.String
  {- Unfolding: (System.Console.ANSI.Codes.csi
                   Language.PureScript.Errors.ansiColorReset1
                   System.Console.ANSI.Codes.setSGRCode1) -}
300c84cee5c6e79b586d894f1fd00854
  ansiColorReset1 :: [GHC.Types.Int]
  {- Unfolding: (System.Console.ANSI.Codes.setSGRCode_go
                   Language.PureScript.Errors.ansiColorReset2) -}
55ff2185654649853cf2fba7752d8455
  ansiColorReset2 :: [System.Console.ANSI.Types.SGR]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ System.Console.ANSI.Types.SGR
                   System.Console.ANSI.Types.Reset
                   (GHC.Types.[] @ System.Console.ANSI.Types.SGR)) -}
c75d9a60956b396bfa2fda54b4e6eb5f
  colorCode ::
    GHC.Base.Maybe
      (System.Console.ANSI.Types.ColorIntensity,
       System.Console.ANSI.Types.Color)
    -> Data.Text.Internal.Text -> Data.Text.Internal.Text
  {- Arity: 2, Strictness: <S,1*U><S(SSS),1*U(U,U,U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Base.Maybe
                           (System.Console.ANSI.Types.ColorIntensity,
                            System.Console.ANSI.Types.Color))
                   (w1 :: Data.Text.Internal.Text) ->
                 case w1 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Language.PureScript.Errors.$wcolorCode w ww1 ww2 ww3 }) -}
ad3ac97ab29a43d0bd16d4d52f8d881e
  colorCodeBox ::
    GHC.Base.Maybe
      (System.Console.ANSI.Types.ColorIntensity,
       System.Console.ANSI.Types.Color)
    -> Text.PrettyPrint.Boxes.Box -> Text.PrettyPrint.Boxes.Box
  {- Arity: 2, Strictness: <S,1*U><S,1*U(U(U),U,U)>m, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Base.Maybe
                           (System.Console.ANSI.Types.ColorIntensity,
                            System.Console.ANSI.Types.Color))
                   (w1 :: Text.PrettyPrint.Boxes.Box) ->
                 case w1 of ww { Text.PrettyPrint.Boxes.Box ww1 ww2 ww3 ->
                 case Language.PureScript.Errors.$wcolorCodeBox
                        w
                        ww1
                        ww2
                        ww3 of ww4 { (#,,#) ww5 ww6 ww7 ->
                 Text.PrettyPrint.Boxes.Box ww5 ww6 ww7 } }) -}
05a6b173463cbc771896daf00f710fb7
  defaultCodeColor ::
    (System.Console.ANSI.Types.ColorIntensity,
     System.Console.ANSI.Types.Color)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((System.Console.ANSI.Types.Dull,
                  System.Console.ANSI.Types.Yellow)) -}
745195dd42b1496c9a7f7aafb0bc8f92
  defaultPPEOptions :: Language.PureScript.Errors.PPEOptions
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Language.PureScript.Errors.PPEOptions
                   Language.PureScript.Errors.defaultPPEOptions1
                   GHC.Types.False
                   Language.PureScript.Errors.Error
                   GHC.Types.True
                   (GHC.Types.[] @ GHC.Types.Char)) -}
d8d341d8eaf75e1e3b09ab402d9271d0
  defaultPPEOptions1 ::
    GHC.Base.Maybe
      (System.Console.ANSI.Types.ColorIntensity,
       System.Console.ANSI.Types.Color)
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ (System.Console.ANSI.Types.ColorIntensity,
                      System.Console.ANSI.Types.Color)
                   Language.PureScript.Errors.defaultCodeColor) -}
8d02e9aaf158505cf40b45070082163e
  defaultUnknownMap :: Language.PureScript.Errors.TypeMap
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Language.PureScript.Errors.TypeMap
                   (Data.Map.Internal.Tip
                      @ GHC.Types.Int
                      @ (GHC.Base.String, GHC.Types.Int,
                         GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan))
                   (Data.Map.Internal.Tip @ GHC.Types.Int @ GHC.Types.Int)
                   Language.PureScript.Errors.$fShowMultipleErrors5) -}
a162641bfba4a64db040e6a2c1248ff8
  errorCode ::
    Language.PureScript.AST.Declarations.ErrorMessage
    -> Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S(LS),1*U(A,1*U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.PureScript.AST.Declarations.ErrorMessage) ->
                 case w of ww { Language.PureScript.AST.Declarations.ErrorMessage ww1 ww2 ->
                 Language.PureScript.Errors.$werrorCode ww2 }) -}
846f9303429ab1e967cfc62dce407e9f
  errorDocUri ::
    Language.PureScript.AST.Declarations.ErrorMessage
    -> Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S(LS),1*U(A,1*U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.PureScript.AST.Declarations.ErrorMessage) ->
                 case w of ww { Language.PureScript.AST.Declarations.ErrorMessage ww1 ww2 ->
                 Language.PureScript.Errors.$werrorDocUri ww2 }) -}
4308e76c0636918842d6acdb173a8e4b
  errorMessage ::
    Language.PureScript.AST.Declarations.SimpleErrorMessage
    -> Language.PureScript.Errors.MultipleErrors
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m2,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Errors.errorMessage1
                  `cast`
                (<Language.PureScript.AST.Declarations.SimpleErrorMessage>_R
                 ->_R Sym (Language.PureScript.Errors.N:MultipleErrors[0])) -}
d5b3fcc13faf321f693b39ae31b8bd13
  errorMessage' ::
    Language.PureScript.AST.SourcePos.SourceSpan
    -> Language.PureScript.AST.Declarations.SimpleErrorMessage
    -> Language.PureScript.Errors.MultipleErrors
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m2,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Errors.errorMessage'1
                  `cast`
                (<Language.PureScript.AST.SourcePos.SourceSpan>_R
                 ->_R <Language.PureScript.AST.Declarations.SimpleErrorMessage>_R
                 ->_R Sym (Language.PureScript.Errors.N:MultipleErrors[0])) -}
7a0d1df22a3e37310e2eb01dd8bb5d96
  errorMessage'' ::
    GHC.Base.NonEmpty Language.PureScript.AST.SourcePos.SourceSpan
    -> Language.PureScript.AST.Declarations.SimpleErrorMessage
    -> Language.PureScript.Errors.MultipleErrors
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m2,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Errors.errorMessage''1
                  `cast`
                (<GHC.Base.NonEmpty Language.PureScript.AST.SourcePos.SourceSpan>_R
                 ->_R <Language.PureScript.AST.Declarations.SimpleErrorMessage>_R
                 ->_R Sym (Language.PureScript.Errors.N:MultipleErrors[0])) -}
b8d685d02d1ae03a8a416389e0820454
  errorMessage''' ::
    [Language.PureScript.AST.SourcePos.SourceSpan]
    -> Language.PureScript.AST.Declarations.SimpleErrorMessage
    -> Language.PureScript.Errors.MultipleErrors
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>m2, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: [Language.PureScript.AST.SourcePos.SourceSpan])
                   (w1 :: Language.PureScript.AST.Declarations.SimpleErrorMessage) ->
                 case GHC.List.reverse1
                        @ Language.PureScript.AST.SourcePos.SourceSpan
                        (Data.OldList.sortBy
                           @ Language.PureScript.AST.SourcePos.SourceSpan
                           Language.PureScript.AST.SourcePos.$fOrdSourceSpan_$ccompare
                           (GHC.List.filter
                              @ Language.PureScript.AST.SourcePos.SourceSpan
                              Language.PureScript.Errors.errorMessage'''1
                              w))
                        (GHC.Types.[]
                           @ Language.PureScript.AST.SourcePos.SourceSpan) of wild {
                   []
                   -> (GHC.Types.:
                         @ Language.PureScript.AST.Declarations.ErrorMessage
                         (Language.PureScript.AST.Declarations.ErrorMessage
                            (GHC.Types.[]
                               @ Language.PureScript.AST.Declarations.ErrorMessageHint)
                            w1)
                         (GHC.Types.[] @ Language.PureScript.AST.Declarations.ErrorMessage))
                        `cast`
                      (Sym (Language.PureScript.Errors.N:MultipleErrors[0]))
                   : a1 as
                   -> (GHC.Types.:
                         @ Language.PureScript.AST.Declarations.ErrorMessage
                         (Language.PureScript.AST.Declarations.ErrorMessage
                            (GHC.Types.:
                               @ Language.PureScript.AST.Declarations.ErrorMessageHint
                               (Language.PureScript.AST.Declarations.PositionedError
                                  (GHC.Base.:|
                                     @ Language.PureScript.AST.SourcePos.SourceSpan
                                     a1
                                     as))
                               (GHC.Types.[]
                                  @ Language.PureScript.AST.Declarations.ErrorMessageHint))
                            w1)
                         (GHC.Types.[] @ Language.PureScript.AST.Declarations.ErrorMessage))
                        `cast`
                      (Sym (Language.PureScript.Errors.N:MultipleErrors[0])) }) -}
2f604b63632d9866f2f3e4d12cc6ad73
  errorMessage'''1 ::
    Language.PureScript.AST.SourcePos.SourceSpan -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLL),1*U(1*U,1*U(1*U(1*U),1*U(1*U)),1*U(1*U(1*U),1*U(1*U)))>,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.PureScript.AST.SourcePos.SourceSpan) ->
                 case w of ww { Language.PureScript.AST.SourcePos.SourceSpan ww1 ww2 ww3 ->
                 Language.PureScript.Errors.$wlvl ww1 ww2 ww3 }) -}
0f29ef6fe74f2e1dce3ccaa49330445b
  errorMessage''1 ::
    GHC.Base.NonEmpty Language.PureScript.AST.SourcePos.SourceSpan
    -> Language.PureScript.AST.Declarations.SimpleErrorMessage
    -> [Language.PureScript.AST.Declarations.ErrorMessage]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m2,
     Unfolding: InlineRule (2, True, False)
                (\ (sss :: GHC.Base.NonEmpty
                             Language.PureScript.AST.SourcePos.SourceSpan)
                   (err :: Language.PureScript.AST.Declarations.SimpleErrorMessage) ->
                 GHC.Types.:
                   @ Language.PureScript.AST.Declarations.ErrorMessage
                   (Language.PureScript.AST.Declarations.ErrorMessage
                      (GHC.Types.:
                         @ Language.PureScript.AST.Declarations.ErrorMessageHint
                         (Language.PureScript.AST.Declarations.PositionedError sss)
                         (GHC.Types.[]
                            @ Language.PureScript.AST.Declarations.ErrorMessageHint))
                      err)
                   (GHC.Types.[]
                      @ Language.PureScript.AST.Declarations.ErrorMessage)) -}
8a3c11a3b13b54f2260e866f5a98392b
  errorMessage'1 ::
    Language.PureScript.AST.SourcePos.SourceSpan
    -> Language.PureScript.AST.Declarations.SimpleErrorMessage
    -> [Language.PureScript.AST.Declarations.ErrorMessage]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m2,
     Unfolding: InlineRule (2, True, False)
                (\ (ss :: Language.PureScript.AST.SourcePos.SourceSpan)
                   (err :: Language.PureScript.AST.Declarations.SimpleErrorMessage) ->
                 GHC.Types.:
                   @ Language.PureScript.AST.Declarations.ErrorMessage
                   (Language.PureScript.AST.Declarations.ErrorMessage
                      (GHC.Types.:
                         @ Language.PureScript.AST.Declarations.ErrorMessageHint
                         (Language.PureScript.Errors.positionedError ss)
                         (GHC.Types.[]
                            @ Language.PureScript.AST.Declarations.ErrorMessageHint))
                      err)
                   (GHC.Types.[]
                      @ Language.PureScript.AST.Declarations.ErrorMessage)) -}
e5e7038e75316efc7605ce9ed41d06de
  errorMessage1 ::
    Language.PureScript.AST.Declarations.SimpleErrorMessage
    -> [Language.PureScript.AST.Declarations.ErrorMessage]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (err :: Language.PureScript.AST.Declarations.SimpleErrorMessage) ->
                 GHC.Types.:
                   @ Language.PureScript.AST.Declarations.ErrorMessage
                   (Language.PureScript.AST.Declarations.ErrorMessage
                      (GHC.Types.[]
                         @ Language.PureScript.AST.Declarations.ErrorMessageHint)
                      err)
                   (GHC.Types.[]
                      @ Language.PureScript.AST.Declarations.ErrorMessage)) -}
7200a0daf363d878ae314bac157bfce9
  errorModule ::
    Language.PureScript.AST.Declarations.ErrorMessage
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.PureScript.AST.Declarations.ErrorMessage) ->
                 case w of ww { Language.PureScript.AST.Declarations.ErrorMessage ww1 ww2 ->
                 (Language.PureScript.Errors.errorModule_go ww1)
                   `cast`
                 (Data.Monoid.N:Last[0] <Language.PureScript.Names.ModuleName>_N) }) -}
1afb821c667f237cdeef92961b9a2472
  errorModule_go ::
    [Language.PureScript.AST.Declarations.ErrorMessageHint]
    -> Data.Monoid.Last Language.PureScript.Names.ModuleName
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
4f1afca5823a071810163f1e0787554d
  errorSpan ::
    Language.PureScript.AST.Declarations.ErrorMessage
    -> GHC.Base.Maybe
         (GHC.Base.NonEmpty Language.PureScript.AST.SourcePos.SourceSpan)
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.PureScript.AST.Declarations.ErrorMessage) ->
                 case w of ww { Language.PureScript.AST.Declarations.ErrorMessage ww1 ww2 ->
                 (Language.PureScript.Errors.errorSpan_go ww1)
                   `cast`
                 (Data.Monoid.N:Last[0] <GHC.Base.NonEmpty
                                           Language.PureScript.AST.SourcePos.SourceSpan>_N) }) -}
74e2de57df96766cb5a0d27b9c5ccec6
  errorSpan_go ::
    [Language.PureScript.AST.Declarations.ErrorMessageHint]
    -> Data.Monoid.Last
         (GHC.Base.NonEmpty Language.PureScript.AST.SourcePos.SourceSpan)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
fb2c132cb8b66afcc1eded136297fc96
  errorSuggestion ::
    Language.PureScript.AST.Declarations.SimpleErrorMessage
    -> GHC.Base.Maybe Language.PureScript.Errors.ErrorSuggestion
  {- Arity: 1, Strictness: <S,1*U> -}
1081b980eb1487cbd93c7cabe5a874be
  escalateWarningWhen ::
    (Control.Monad.Writer.Class.MonadWriter
       Language.PureScript.Errors.MultipleErrors m,
     Control.Monad.Error.Class.MonadError
       Language.PureScript.Errors.MultipleErrors m) =>
    (Language.PureScript.AST.Declarations.ErrorMessage
     -> GHC.Types.Bool)
    -> m a -> m a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LS(LC(C(S))LLL)LLLL),U(A,U(1*U(A,1*C1(U),A,A,A,A),C(C1(U)),C(C1(U)),C(U),A),A,C(U),1*C1(U),C(U))><L,U(A,C(U),A)><L,C(U)><L,U>,
     Unfolding: (\ @ m :: * -> *
                   @ a
                   ($dMonadWriter :: Control.Monad.Writer.Class.MonadWriter
                                       Language.PureScript.Errors.MultipleErrors m)
                   ($dMonadError :: Control.Monad.Error.Class.MonadError
                                      Language.PureScript.Errors.MultipleErrors m)
                   (eta :: Language.PureScript.AST.Declarations.ErrorMessage
                           -> GHC.Types.Bool)
                   (eta1 :: m a) ->
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.Writer.Class.$p2MonadWriter
                       @ Language.PureScript.Errors.MultipleErrors
                       @ m
                       $dMonadWriter
                 } in
                 let {
                   lvl1141 :: m ()
                   = GHC.Base.pure
                       @ m
                       (GHC.Base.$p1Monad @ m $dMonad)
                       @ ()
                       GHC.Tuple.()
                 } in
                 letrec {
                   $wgo1 :: [Language.PureScript.AST.Declarations.ErrorMessage]
                            -> (# [Language.PureScript.AST.Declarations.ErrorMessage],
                                  [Language.PureScript.AST.Declarations.ErrorMessage] #)
                     {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
                   = \ (w :: [Language.PureScript.AST.Declarations.ErrorMessage]) ->
                     case w of wild {
                       []
                       -> (# GHC.Types.[]
                               @ Language.PureScript.AST.Declarations.ErrorMessage,
                             GHC.Types.[] @ Language.PureScript.AST.Declarations.ErrorMessage #)
                       : y ys
                       -> let {
                            w2 :: ([Language.PureScript.AST.Declarations.ErrorMessage],
                                   [Language.PureScript.AST.Declarations.ErrorMessage])
                            = case $wgo1 ys of ww { (#,#) ww1 ww2 -> (ww1, ww2) }
                          } in
                          case eta y of wild1 {
                            GHC.Types.False
                            -> (# case w2 of wild2 { (,) ts fs -> ts },
                                  GHC.Types.:
                                    @ Language.PureScript.AST.Declarations.ErrorMessage
                                    y
                                    (case w2 of wild2 { (,) ts fs -> fs }) #)
                            GHC.Types.True
                            -> (# GHC.Types.:
                                    @ Language.PureScript.AST.Declarations.ErrorMessage
                                    y
                                    (case w2 of wild2 { (,) ts fs -> ts }),
                                  case w2 of wild2 { (,) ts fs -> fs } #) } }
                 } in
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ (a, Language.PureScript.Errors.MultipleErrors)
                   @ a
                   (Control.Monad.Writer.Class.censor
                      @ Language.PureScript.Errors.MultipleErrors
                      @ m
                      @ (a, Language.PureScript.Errors.MultipleErrors)
                      $dMonadWriter
                      Language.PureScript.Errors.escalateWarningWhen1
                        `cast`
                      (<Language.PureScript.Errors.MultipleErrors>_R
                       ->_R Sym (Language.PureScript.Errors.N:MultipleErrors[0]))
                      (Control.Monad.Writer.Class.listen
                         @ Language.PureScript.Errors.MultipleErrors
                         @ m
                         $dMonadWriter
                         @ a
                         eta1))
                   (\ (ds :: (a, Language.PureScript.Errors.MultipleErrors)) ->
                    case ds of wild { (,) a1 w ->
                    let {
                      ds1 :: ([Language.PureScript.AST.Declarations.ErrorMessage],
                              [Language.PureScript.AST.Declarations.ErrorMessage])
                      = case $wgo1
                               w `cast`
                               (Language.PureScript.Errors.N:MultipleErrors[0]) of ww { (#,#) ww1 ww2 ->
                        (ww1, ww2) }
                    } in
                    GHC.Base.>>
                      @ m
                      $dMonad
                      @ ()
                      @ a
                      (Control.Monad.Writer.Class.tell
                         @ Language.PureScript.Errors.MultipleErrors
                         @ m
                         $dMonadWriter
                         (case ds1 of wild1 { (,) errors warnings ->
                          warnings
                            `cast`
                          (Sym (Language.PureScript.Errors.N:MultipleErrors[0])) }))
                      (GHC.Base.>>
                         @ m
                         $dMonad
                         @ ()
                         @ a
                         (case ds1 of wild1 { (,) errors warnings ->
                          case errors of wild2 {
                            [] -> lvl1141
                            : ds2 ds3
                            -> Control.Monad.Error.Class.throwError
                                 @ Language.PureScript.Errors.MultipleErrors
                                 @ m
                                 $dMonadError
                                 @ ()
                                 wild2
                                   `cast`
                                 (Sym (Language.PureScript.Errors.N:MultipleErrors[0])) } })
                         (GHC.Base.return @ m $dMonad @ a a1)) })) -}
9eaa799308307c2fb86c342acc918ee4
  escalateWarningWhen1 ::
    Language.PureScript.Errors.MultipleErrors
    -> [Language.PureScript.AST.Declarations.ErrorMessage]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: Language.PureScript.Errors.MultipleErrors) ->
                 GHC.Types.[]
                   @ Language.PureScript.AST.Declarations.ErrorMessage) -}
4509003273781e6d9a799c773a622199
  filterErrors ::
    (Language.PureScript.AST.Declarations.ErrorMessage
     -> GHC.Types.Bool)
    -> Language.PureScript.Errors.MultipleErrors
    -> Language.PureScript.Errors.MultipleErrors
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                (GHC.List.filter
                   @ Language.PureScript.AST.Declarations.ErrorMessage)
                  `cast`
                (<Language.PureScript.AST.Declarations.ErrorMessage
                  -> GHC.Types.Bool>_R
                 ->_R Sym (Language.PureScript.Errors.N:MultipleErrors[0])
                 ->_R Sym (Language.PureScript.Errors.N:MultipleErrors[0])) -}
4385b8bbb8cb7572b23591d6325f0661
  findHint ::
    (Language.PureScript.AST.Declarations.ErrorMessageHint
     -> GHC.Base.Maybe a)
    -> Language.PureScript.AST.Declarations.ErrorMessage
    -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S(SL),1*U(1*U,A)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (w :: Language.PureScript.AST.Declarations.ErrorMessageHint
                         -> GHC.Base.Maybe a)
                   (w1 :: Language.PureScript.AST.Declarations.ErrorMessage) ->
                 case w1 of ww { Language.PureScript.AST.Declarations.ErrorMessage ww1 ww2 ->
                 Language.PureScript.Errors.$wfindHint @ a w ww1 }) -}
6d0ce1cec91f02adf9b820da317aef9f
  indent :: Text.PrettyPrint.Boxes.Box -> Text.PrettyPrint.Boxes.Box
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(U(U),U(U),U)>m,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Text.PrettyPrint.Boxes.Box) ->
                 case Language.PureScript.Errors.$windent
                        w of ww { (#,,#) ww1 ww2 ww3 ->
                 Text.PrettyPrint.Boxes.Box ww1 ww2 ww3 }) -}
6ec6f4126284375b4cead405220ab196
  line :: Data.Text.Internal.Text -> Text.PrettyPrint.Boxes.Box
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*U(U,U,U)>m,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Data.Text.Internal.Text) ->
                 case Language.PureScript.Errors.$wline
                        w of ww { (#,,#) ww1 ww2 ww3 ->
                 Text.PrettyPrint.Boxes.Box ww1 ww2 ww3 }) -}
3a85b51ee0e556bfc7be20949668ad16
  lineS :: GHC.Base.String -> Text.PrettyPrint.Boxes.Box
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
     Unfolding: InlineRule (0, True, True)
                Text.PrettyPrint.Boxes.text -}
1ecbae00ae9ac9c87c271a4ea91a567f
  nonEmpty ::
    Language.PureScript.Errors.MultipleErrors -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Errors.MultipleErrors) ->
                 case x `cast`
                      (Language.PureScript.Errors.N:MultipleErrors[0]) of wild {
                   [] -> GHC.Types.False : ds1 ds2 -> GHC.Types.True }) -}
ca84358c3cc6d2a317963ec9c48b02a9
  onErrorMessages ::
    (Language.PureScript.AST.Declarations.ErrorMessage
     -> Language.PureScript.AST.Declarations.ErrorMessage)
    -> Language.PureScript.Errors.MultipleErrors
    -> Language.PureScript.Errors.MultipleErrors
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                (GHC.Base.map
                   @ Language.PureScript.AST.Declarations.ErrorMessage
                   @ Language.PureScript.AST.Declarations.ErrorMessage)
                  `cast`
                (<Language.PureScript.AST.Declarations.ErrorMessage
                  -> Language.PureScript.AST.Declarations.ErrorMessage>_R
                 ->_R Sym (Language.PureScript.Errors.N:MultipleErrors[0])
                 ->_R Sym (Language.PureScript.Errors.N:MultipleErrors[0])) -}
7fb8e70f420c038d79387739757b1e3f
  onTypesInErrorMessage ::
    (Language.PureScript.Types.SourceType
     -> Language.PureScript.Types.SourceType)
    -> Language.PureScript.AST.Declarations.ErrorMessage
    -> Language.PureScript.AST.Declarations.ErrorMessage
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U(1*U,1*U)>m,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Errors.onTypesInErrorMessage1
                  `cast`
                (<Language.PureScript.Types.SourceType
                  -> Language.PureScript.Types.SourceType>_R
                 ->_R <Language.PureScript.AST.Declarations.ErrorMessage>_R
                 ->_R Data.Functor.Identity.N:Identity[0]
                          <Language.PureScript.AST.Declarations.ErrorMessage>_R) -}
a3fba6b1c7a2c57895e9eeb057a64f10
  onTypesInErrorMessage1 ::
    (Language.PureScript.Types.SourceType
     -> Language.PureScript.Types.SourceType)
    -> Language.PureScript.AST.Declarations.ErrorMessage
    -> Data.Functor.Identity.Identity
         Language.PureScript.AST.Declarations.ErrorMessage
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U(1*U,1*U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (f2 :: Language.PureScript.Types.SourceType
                          -> Language.PureScript.Types.SourceType)
                   (eta :: Language.PureScript.AST.Declarations.ErrorMessage) ->
                 Language.PureScript.Errors.onTypesInErrorMessage_$sonTypesInErrorMessageM
                   (\ (x :: Language.PureScript.Types.SourceType) -> f2 x)
                     `cast`
                   (<Language.PureScript.Types.SourceType>_R
                    ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                  <Language.PureScript.Types.SourceType>_R))
                   eta) -}
85fc9fc9ca8fef040a1f58dac9b6f539
  onTypesInErrorMessageM ::
    GHC.Base.Applicative m =>
    (Language.PureScript.Types.SourceType
     -> m Language.PureScript.Types.SourceType)
    -> Language.PureScript.AST.Declarations.ErrorMessage
    -> m Language.PureScript.AST.Declarations.ErrorMessage
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLC(C(S))LLL),U(U(C(C1(U)),A),C(U),C(C1(U)),C(C1(C1(U))),A,A)><L,C(U)><S,1*U(1*U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ m :: * -> *
                   (w :: GHC.Base.Applicative m)
                   (w1 :: Language.PureScript.Types.SourceType
                          -> m Language.PureScript.Types.SourceType)
                   (w2 :: Language.PureScript.AST.Declarations.ErrorMessage) ->
                 case w2 of ww { Language.PureScript.AST.Declarations.ErrorMessage ww1 ww2 ->
                 Language.PureScript.Errors.$wonTypesInErrorMessageM
                   @ m
                   w
                   w1
                   ww1
                   ww2 }) -}
ecdbbc419843379a0c86453c2f87a780
  onTypesInErrorMessage_$sonTypesInErrorMessageM ::
    (Language.PureScript.Types.SourceType
     -> Data.Functor.Identity.Identity
          Language.PureScript.Types.SourceType)
    -> Language.PureScript.AST.Declarations.ErrorMessage
    -> Data.Functor.Identity.Identity
         Language.PureScript.AST.Declarations.ErrorMessage
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U(1*U,1*U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Types.SourceType
                         -> Data.Functor.Identity.Identity
                              Language.PureScript.Types.SourceType)
                   (w1 :: Language.PureScript.AST.Declarations.ErrorMessage) ->
                 case w1 of ww { Language.PureScript.AST.Declarations.ErrorMessage ww1 ww2 ->
                 case Language.PureScript.Errors.$w$sonTypesInErrorMessageM
                        w
                        ww1
                        ww2 of ww3 { (#,#) ww4 ww5 ->
                 (Language.PureScript.AST.Declarations.ErrorMessage ww4 ww5)
                   `cast`
                 (Sym (Data.Functor.Identity.N:Identity[0]
                           <Language.PureScript.AST.Declarations.ErrorMessage>_R)) } }) -}
ba83f09a68cd72d36addca6319b4b6e0
  parU ::
    Control.Monad.Error.Class.MonadError
      Language.PureScript.Errors.MultipleErrors m =>
    [a] -> (a -> m b) -> m [b]
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S(LC(C(S))LLL)LL),U(1*U(1*U(1*U(C(C1(U)),A),1*C1(U),A,C(C1(C1(U))),A,A),1*C1(C1(U)),A,C(U),A),C(U),C(C1(U)))><L,1*U><L,C(U)>,
     Unfolding: (\ @ m :: * -> *
                   @ a
                   @ b
                   ($dMonadError :: Control.Monad.Error.Class.MonadError
                                      Language.PureScript.Errors.MultipleErrors m)
                   (eta :: [a])
                   (eta1 :: a -> m b) ->
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.Error.Class.$p1MonadError
                       @ Language.PureScript.Errors.MultipleErrors
                       @ m
                       $dMonadError
                 } in
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ [Data.Either.Either Language.PureScript.Errors.MultipleErrors b]
                   @ [b]
                   (let {
                      lvl1141 :: Language.PureScript.Errors.MultipleErrors
                                 -> m (Data.Either.Either
                                         Language.PureScript.Errors.MultipleErrors b)
                        {- Arity: 1, Strictness: <L,U>,
                           Unfolding: InlineRule (1, True, False)
                                      (\ (x :: Language.PureScript.Errors.MultipleErrors) ->
                                       GHC.Base.return
                                         @ m
                                         $dMonad
                                         @ (Data.Either.Either
                                              Language.PureScript.Errors.MultipleErrors b)
                                         (Data.Either.Left
                                            @ Language.PureScript.Errors.MultipleErrors
                                            @ b
                                            x)) -}
                      = \ (x :: Language.PureScript.Errors.MultipleErrors) ->
                        GHC.Base.return
                          @ m
                          $dMonad
                          @ (Data.Either.Either Language.PureScript.Errors.MultipleErrors b)
                          (Data.Either.Left
                             @ Language.PureScript.Errors.MultipleErrors
                             @ b
                             x)
                    } in
                    let {
                      $dApplicative :: GHC.Base.Applicative m
                      = GHC.Base.$p1Monad @ m $dMonad
                    } in
                    let {
                      $dFunctor :: GHC.Base.Functor m
                      = GHC.Base.$p1Applicative @ m $dApplicative
                    } in
                    let {
                      z :: m [Data.Either.Either
                                Language.PureScript.Errors.MultipleErrors b]
                      = GHC.Base.pure
                          @ m
                          $dApplicative
                          @ [Data.Either.Either Language.PureScript.Errors.MultipleErrors b]
                          (GHC.Types.[]
                             @ (Data.Either.Either Language.PureScript.Errors.MultipleErrors b))
                    } in
                    letrec {
                      go8 :: [a]
                             -> m [Data.Either.Either
                                     Language.PureScript.Errors.MultipleErrors b]
                        {- Arity: 1, Strictness: <S,1*U> -}
                      = \ (ds :: [a]) ->
                        case ds of wild {
                          [] -> z
                          : y ys
                          -> GHC.Base.liftA2
                               @ m
                               $dApplicative
                               @ (Data.Either.Either Language.PureScript.Errors.MultipleErrors b)
                               @ [Data.Either.Either Language.PureScript.Errors.MultipleErrors b]
                               @ [Data.Either.Either Language.PureScript.Errors.MultipleErrors b]
                               (GHC.Types.:
                                  @ (Data.Either.Either
                                       Language.PureScript.Errors.MultipleErrors b))
                               (Control.Monad.Error.Class.catchError
                                  @ Language.PureScript.Errors.MultipleErrors
                                  @ m
                                  $dMonadError
                                  @ (Data.Either.Either Language.PureScript.Errors.MultipleErrors b)
                                  (GHC.Base.fmap
                                     @ m
                                     $dFunctor
                                     @ b
                                     @ (Data.Either.Either
                                          Language.PureScript.Errors.MultipleErrors b)
                                     (Data.Either.Right
                                        @ Language.PureScript.Errors.MultipleErrors
                                        @ b)
                                     (eta1 y))
                                  lvl1141)
                               (go8 ys) }
                    } in
                    go8 eta)
                   (\ (es :: [Data.Either.Either
                                Language.PureScript.Errors.MultipleErrors b]) ->
                    case Data.Either.$wpartitionEithers
                           @ Language.PureScript.Errors.MultipleErrors
                           @ b
                           es of ww { (#,#) ww1 ww2 ->
                    case ww1 of wild {
                      [] -> GHC.Base.return @ m $dMonad @ [b] ww2
                      : ipv ipv1
                      -> Control.Monad.Error.Class.throwError
                           @ Language.PureScript.Errors.MultipleErrors
                           @ m
                           $dMonadError
                           @ [b]
                           (Language.PureScript.Errors.parU1 ipv ipv1)
                             `cast`
                           (Sym (Language.PureScript.Errors.N:MultipleErrors[0])) } })) -}
acac8e35e9e5eeb81be6fe162489c158
  parU1 ::
    Language.PureScript.Errors.MultipleErrors
    -> [Language.PureScript.Errors.MultipleErrors]
    -> [Language.PureScript.AST.Declarations.ErrorMessage]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U> -}
294ba93655a5845067da4cbeb75d1347
  positionedError ::
    Language.PureScript.AST.SourcePos.SourceSpan
    -> Language.PureScript.AST.Declarations.ErrorMessageHint
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m22,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.AST.SourcePos.SourceSpan) ->
                 Language.PureScript.AST.Declarations.PositionedError
                   (GHC.Base.$fApplicativeNonEmpty_$cpure
                      @ Language.PureScript.AST.SourcePos.SourceSpan
                      x)) -}
e4d7a637be529184ef49fa954b2afc7b
  ppeCodeColor ::
    Language.PureScript.Errors.PPEOptions
    -> GHC.Base.Maybe
         (System.Console.ANSI.Types.ColorIntensity,
          System.Console.ANSI.Types.Color)
  RecSel Left Language.PureScript.Errors.PPEOptions
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLLLL),1*U(1*U,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Errors.PPEOptions) ->
                 case ds of wild { Language.PureScript.Errors.PPEOptions ds1 ds2 ds3 ds4 ds5 ->
                 ds1 }) -}
e4d7a637be529184ef49fa954b2afc7b
  ppeFull :: Language.PureScript.Errors.PPEOptions -> GHC.Types.Bool
  RecSel Left Language.PureScript.Errors.PPEOptions
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSLLL),1*U(A,1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Errors.PPEOptions) ->
                 case ds of wild { Language.PureScript.Errors.PPEOptions ds1 ds2 ds3 ds4 ds5 ->
                 ds2 }) -}
e4d7a637be529184ef49fa954b2afc7b
  ppeLevel ::
    Language.PureScript.Errors.PPEOptions
    -> Language.PureScript.Errors.Level
  RecSel Left Language.PureScript.Errors.PPEOptions
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLSLL),1*U(A,A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Errors.PPEOptions) ->
                 case ds of wild { Language.PureScript.Errors.PPEOptions ds1 ds2 ds3 ds4 ds5 ->
                 ds3 }) -}
e4d7a637be529184ef49fa954b2afc7b
  ppeRelativeDirectory ::
    Language.PureScript.Errors.PPEOptions -> GHC.IO.FilePath
  RecSel Left Language.PureScript.Errors.PPEOptions
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLLLS),1*U(A,A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Errors.PPEOptions) ->
                 case ds of wild { Language.PureScript.Errors.PPEOptions ds1 ds2 ds3 ds4 ds5 ->
                 ds5 }) -}
e4d7a637be529184ef49fa954b2afc7b
  ppeShowDocs ::
    Language.PureScript.Errors.PPEOptions -> GHC.Types.Bool
  RecSel Left Language.PureScript.Errors.PPEOptions
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLLSL),1*U(A,A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Errors.PPEOptions) ->
                 case ds of wild { Language.PureScript.Errors.PPEOptions ds1 ds2 ds3 ds4 ds5 ->
                 ds4 }) -}
4c3125c07ac78ce292843252390e4db4
  prettyPrintExport ::
    Language.PureScript.AST.Declarations.DeclarationRef
    -> Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.AST.Declarations.DeclarationRef) ->
                 case ds of wild {
                   DEFAULT
                   -> case Language.PureScript.Errors.prettyPrintRef wild of wild1 {
                        GHC.Base.Nothing -> Language.PureScript.Errors.prettyPrintExport1
                        GHC.Base.Just v -> v }
                   Language.PureScript.AST.Declarations.TypeRef ds1 pn ds2
                   -> pn
                        `cast`
                      (Language.PureScript.Names.N:ProperName[0]
                           <'Language.PureScript.Names.TypeName>_P) }) -}
790c8a6ecbd104d5568d4495f6a62e72
  prettyPrintExport1 :: Data.Text.Internal.Text
  {- Strictness: x -}
0936b27a7dde07b00ea846cd534c7feb
  prettyPrintImport ::
    Language.PureScript.Names.ModuleName
    -> Language.PureScript.AST.Declarations.ImportDeclarationType
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Data.Text.Internal.Text
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,1*U> -}
4a620ac5870775a2503b24ddb7e2c4dd
  prettyPrintMultipleErrors ::
    Language.PureScript.Errors.PPEOptions
    -> Language.PureScript.Errors.MultipleErrors -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U(U,U,A,U,U)><S,U>,
     Unfolding: (\ (ppeOptions :: Language.PureScript.Errors.PPEOptions)
                   (x :: Language.PureScript.Errors.MultipleErrors) ->
                 Data.OldList.unlines
                   (GHC.Base.map
                      @ Text.PrettyPrint.Boxes.Box
                      @ [GHC.Types.Char]
                      Language.PureScript.Errors.renderBox
                      (Language.PureScript.Errors.prettyPrintMultipleErrorsWith
                         (case ppeOptions of wild { Language.PureScript.Errors.PPEOptions ds ds1 ds2 ds3 ds4 ->
                          Language.PureScript.Errors.PPEOptions
                            ds
                            ds1
                            Language.PureScript.Errors.Error
                            ds3
                            ds4 })
                         Language.PureScript.Errors.prettyPrintMultipleErrors1
                         Language.PureScript.Errors.$fShowLevel4
                         x))) -}
d14c3f0226accb733370bf8bfeaba18a
  prettyPrintMultipleErrors1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Errors.prettyPrintMultipleErrors2) -}
03db9f5d709f522b6f126663eda0c935
  prettyPrintMultipleErrors2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Error found:"#) -}
5908e95601a88eae4a405a6e316d3b2c
  prettyPrintMultipleErrorsBox ::
    Language.PureScript.Errors.PPEOptions
    -> Language.PureScript.Errors.MultipleErrors
    -> [Text.PrettyPrint.Boxes.Box]
  {- Arity: 2, Strictness: <L,1*U(U,U,A,U,U)><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ppeOptions :: Language.PureScript.Errors.PPEOptions)
                   (eta :: Language.PureScript.Errors.MultipleErrors) ->
                 Language.PureScript.Errors.prettyPrintMultipleErrorsWith
                   (case ppeOptions of wild { Language.PureScript.Errors.PPEOptions ds ds1 ds2 ds3 ds4 ->
                    Language.PureScript.Errors.PPEOptions
                      ds
                      ds1
                      Language.PureScript.Errors.Error
                      ds3
                      ds4 })
                   Language.PureScript.Errors.prettyPrintMultipleErrors1
                   Language.PureScript.Errors.$fShowLevel4
                   eta) -}
30ac070aff7786670966d70c0549ea35
  prettyPrintMultipleErrorsWith ::
    Language.PureScript.Errors.PPEOptions
    -> GHC.Base.String
    -> GHC.Base.String
    -> Language.PureScript.Errors.MultipleErrors
    -> [Text.PrettyPrint.Boxes.Box]
  {- Arity: 4, Strictness: <L,U(U,U,U,U,U)><L,U><L,U><S,U> -}
548f1d07df6b8adc6275599cbbd329a3
  prettyPrintMultipleWarnings ::
    Language.PureScript.Errors.PPEOptions
    -> Language.PureScript.Errors.MultipleErrors -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U(U,U,A,U,U)><S,U>,
     Unfolding: (\ (ppeOptions :: Language.PureScript.Errors.PPEOptions)
                   (x :: Language.PureScript.Errors.MultipleErrors) ->
                 Data.OldList.unlines
                   (GHC.Base.map
                      @ Text.PrettyPrint.Boxes.Box
                      @ [GHC.Types.Char]
                      Language.PureScript.Errors.renderBox
                      (Language.PureScript.Errors.prettyPrintMultipleErrorsWith
                         (case ppeOptions of wild { Language.PureScript.Errors.PPEOptions ds ds1 ds2 ds3 ds4 ->
                          Language.PureScript.Errors.PPEOptions
                            ds
                            ds1
                            Language.PureScript.Errors.Warning
                            ds3
                            ds4 })
                         Language.PureScript.Errors.prettyPrintMultipleWarnings1
                         Language.PureScript.Errors.$fShowLevel2
                         x))) -}
59d543c41e6570b29c2ab098f382dce7
  prettyPrintMultipleWarnings1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Errors.prettyPrintMultipleWarnings2) -}
e600b9ec0f8594d644b63dc9938f57e3
  prettyPrintMultipleWarnings2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Warning found:"#) -}
5fc74542cca285a79ba4b90fb1f6f9b6
  prettyPrintMultipleWarningsBox ::
    Language.PureScript.Errors.PPEOptions
    -> Language.PureScript.Errors.MultipleErrors
    -> [Text.PrettyPrint.Boxes.Box]
  {- Arity: 2, Strictness: <L,1*U(U,U,A,U,U)><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ppeOptions :: Language.PureScript.Errors.PPEOptions)
                   (eta :: Language.PureScript.Errors.MultipleErrors) ->
                 Language.PureScript.Errors.prettyPrintMultipleErrorsWith
                   (case ppeOptions of wild { Language.PureScript.Errors.PPEOptions ds ds1 ds2 ds3 ds4 ->
                    Language.PureScript.Errors.PPEOptions
                      ds
                      ds1
                      Language.PureScript.Errors.Warning
                      ds3
                      ds4 })
                   Language.PureScript.Errors.prettyPrintMultipleWarnings1
                   Language.PureScript.Errors.$fShowLevel2
                   eta) -}
ec0581d99a23fa809856b310feebc7b9
  prettyPrintParseError ::
    Text.Parsec.Error.ParseError -> Text.PrettyPrint.Boxes.Box
  {- Arity: 1, Strictness: <S(LS),1*U(A,1*U)>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Text.Parsec.Error.ParseError) ->
                 case w of ww { Text.Parsec.Error.ParseError ww1 ww2 ->
                 case Language.PureScript.Errors.$wprettyPrintParseError
                        ww2 of ww3 { (#,,#) ww4 ww5 ww6 ->
                 Text.PrettyPrint.Boxes.Box ww4 ww5 ww6 } }) -}
9242f4362ae1df4975289d2f81aa5d85
  prettyPrintParseError1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Errors.prettyPrintParseError2) -}
9b000302534900eb85a1edceb7e69559
  prettyPrintParseError10 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("or"#) -}
c8c5067300d4e91125dfa3bd5cee68dd
  prettyPrintParseError2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("end of input"#) -}
a3cb0c4f036d78e1c246a39a994b2a79
  prettyPrintParseError3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Errors.prettyPrintParseError4) -}
73baf698991e6aa7ad5fe99601729717
  prettyPrintParseError4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("unexpected"#) -}
808cb4400821d008eed5cd5d8a9bc148
  prettyPrintParseError5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Errors.prettyPrintParseError6) -}
d7621f28b2e3f942b54a65a9fa4e46e7
  prettyPrintParseError6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("expecting"#) -}
17fd78dfd19e70cf2e38d1ecdc059ef6
  prettyPrintParseError7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Errors.prettyPrintParseError8) -}
0a62b0fc0f3d1b872121b73aa842b8b5
  prettyPrintParseError8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("unknown parse error"#) -}
5465b959ca5b78609e51cd0baee0a1e8
  prettyPrintParseError9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Errors.prettyPrintParseError10) -}
6e944a800c45a0fb419d0c180066ee0c
  prettyPrintParseErrorMessages ::
    GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> [Text.Parsec.Error.Message]
    -> Text.PrettyPrint.Boxes.Box
  {- Arity: 6, Strictness: <L,U><L,U><L,1*U><L,U><L,U><S,1*U>m,
     Inline: [0],
     Unfolding: InlineRule (6, True, False)
                (\ (w :: GHC.Base.String)
                   (w1 :: GHC.Base.String)
                   (w2 :: GHC.Base.String)
                   (w3 :: GHC.Base.String)
                   (w4 :: GHC.Base.String)
                   (w5 :: [Text.Parsec.Error.Message]) ->
                 case Language.PureScript.Errors.$wprettyPrintParseErrorMessages
                        w
                        w1
                        w2
                        w3
                        w4
                        w5 of ww { (#,,#) ww1 ww2 ww3 ->
                 Text.PrettyPrint.Boxes.Box ww1 ww2 ww3 }) -}
d32d22412c8469f7d4a7dbe8f28ad77d
  prettyPrintRef ::
    Language.PureScript.AST.Declarations.DeclarationRef
    -> GHC.Base.Maybe Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S,1*U> -}
2b7661894346df5efbb78e7d601b7358
  prettyPrintSingleError ::
    Language.PureScript.Errors.PPEOptions
    -> Language.PureScript.AST.Declarations.ErrorMessage
    -> Text.PrettyPrint.Boxes.Box
  {- Arity: 2,
     Strictness: <S(LSLLL),1*U(U,U,1*U,1*U,U)><S,1*U(1*U,U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Errors.PPEOptions)
                   (w1 :: Language.PureScript.AST.Declarations.ErrorMessage) ->
                 case w of ww { Language.PureScript.Errors.PPEOptions ww1 ww2 ww3 ww4 ww5 ->
                 case w1 of ww6 { Language.PureScript.AST.Declarations.ErrorMessage ww7 ww8 ->
                 case Language.PureScript.Errors.$wprettyPrintSingleError
                        ww1
                        ww2
                        ww3
                        ww4
                        ww5
                        ww7
                        ww8 of ww9 { (#,,#) ww10 ww11 ww12 ->
                 Text.PrettyPrint.Boxes.Box ww10 ww11 ww12 } } }) -}
f62ecb82f22aa0e744c66e6a0e8d7d27
  reflectErrors ::
    Control.Monad.Error.Class.MonadError e m =>
    m (Data.Either.Either e a) -> m a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LC(C(S))LLL)LL),U(1*U(A,1*C1(C1(U)),A,C(U),A),C(U),A)><L,U>,
     Unfolding: (\ @ e
                   @ m :: * -> *
                   @ a
                   ($dMonadError :: Control.Monad.Error.Class.MonadError e m)
                   (eta :: m (Data.Either.Either e a)) ->
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.Error.Class.$p1MonadError @ e @ m $dMonadError
                 } in
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ (Data.Either.Either e a)
                   @ a
                   eta
                   (\ (ds1 :: Data.Either.Either e a) ->
                    case ds1 of wild {
                      Data.Either.Left x
                      -> Control.Monad.Error.Class.throwError @ e @ m $dMonadError @ a x
                      Data.Either.Right y -> GHC.Base.return @ m $dMonad @ a y })) -}
66179a8a0e556d8a73b3c1cfc86f470d
  reifyErrors ::
    Control.Monad.Error.Class.MonadError e m =>
    m a -> m (Data.Either.Either e a)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLC(C(S))),U(1*U(1*U(1*U(1*C1(C1(U)),A),A,A,A,A,A),A,A,C(U),A),A,1*C1(C1(U)))><L,U>,
     Unfolding: (\ @ e
                   @ m :: * -> *
                   @ a
                   ($dMonadError :: Control.Monad.Error.Class.MonadError e m)
                   (eta :: m a) ->
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.Error.Class.$p1MonadError @ e @ m $dMonadError
                 } in
                 Control.Monad.Error.Class.catchError
                   @ e
                   @ m
                   $dMonadError
                   @ (Data.Either.Either e a)
                   (GHC.Base.fmap
                      @ m
                      (GHC.Base.$p1Applicative @ m (GHC.Base.$p1Monad @ m $dMonad))
                      @ a
                      @ (Data.Either.Either e a)
                      (Data.Either.Right @ e @ a)
                      eta)
                   (\ (x :: e) ->
                    GHC.Base.return
                      @ m
                      $dMonad
                      @ (Data.Either.Either e a)
                      (Data.Either.Left @ e @ a x))) -}
0fcffef36342be11bfb9f61137932b31
  renderBox :: Text.PrettyPrint.Boxes.Box -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(U(U),U(U),1*U)>,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Text.PrettyPrint.Boxes.Box) ->
                 case w of ww { Text.PrettyPrint.Boxes.Box ww1 ww2 ww3 ->
                 Language.PureScript.Errors.$wrenderBox ww1 ww2 ww3 }) -}
bbd65cc454d700c0cde7b45f7d41a52a
  renderBox1 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (Data.OldList.dropWhileEnd
                   @ GHC.Types.Char
                   GHC.Unicode.isSpace) -}
a4ee576493abbf6b572e2ef703b9165c
  renderBox_go :: [[GHC.Types.Char]] -> [[GHC.Types.Char]]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
7da08acf92198b4c82e5379af37b0a31
  renderBox_go1 :: [GHC.Types.Char] -> Data.Semigroup.Internal.All
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
767eec676d2da292c35ddc6b7f1fe775
  replaceUnknowns ::
    Language.PureScript.Types.SourceType
    -> Control.Monad.Trans.State.Lazy.State
         Language.PureScript.Errors.TypeMap
         Language.PureScript.Types.SourceType
  {- Arity: 1,
     Unfolding: (Language.PureScript.Types.everywhereOnTypesM
                   @ (Control.Monad.Trans.State.Lazy.StateT
                        Language.PureScript.Errors.TypeMap Data.Functor.Identity.Identity)
                   @ Language.PureScript.AST.SourcePos.SourceAnn
                   (Language.PureScript.Errors.$s$fMonadStateT
                      @ Language.PureScript.Errors.TypeMap)
                   Language.PureScript.Errors.replaceUnknowns1
                     `cast`
                   (<Language.PureScript.Types.Type
                       Language.PureScript.AST.SourcePos.SourceAnn>_R
                    ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                  <Language.PureScript.Errors.TypeMap>_N
                                  <Data.Functor.Identity.Identity>_R
                                  <Language.PureScript.Types.SourceType>_N))) -}
67990fb0a90c18f356b433976fc2c6eb
  replaceUnknowns1 ::
    Language.PureScript.Types.Type
      Language.PureScript.AST.SourcePos.SourceAnn
    -> Language.PureScript.Errors.TypeMap
    -> Data.Functor.Identity.Identity
         (Language.PureScript.Types.SourceType,
          Language.PureScript.Errors.TypeMap)
  {- Arity: 2, Strictness: <S,1*U><L,U(U,U,U(U))>m, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Types.Type
                           Language.PureScript.AST.SourcePos.SourceAnn)
                   (w1 :: Language.PureScript.Errors.TypeMap) ->
                 case Language.PureScript.Errors.$wreplaceTypes
                        w
                        w1 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2)
                   `cast`
                 (Sym (Data.Functor.Identity.N:Identity[0]
                           <(Language.PureScript.Types.SourceType,
                             Language.PureScript.Errors.TypeMap)>_R)) }) -}
3f15f6976fa85d5a6c226df5a731c52a
  rethrow ::
    Control.Monad.Error.Class.MonadError e m => (e -> e) -> m a -> m a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLC(C(S))),U(A,C(U),1*C1(C1(U)))><L,C(U)><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ e
                   @ m :: * -> *
                   @ a
                   ($dMonadError :: Control.Monad.Error.Class.MonadError e m)
                   (f2 :: e -> e)
                   (eta :: m a) ->
                 Control.Monad.Error.Class.catchError
                   @ e
                   @ m
                   $dMonadError
                   @ a
                   eta
                   (\ (x :: e) ->
                    Control.Monad.Error.Class.throwError
                      @ e
                      @ m
                      $dMonadError
                      @ a
                      (f2 x))) -}
fdf5a24f58598d5459d72d8baaae797c
  rethrowWithPosition ::
    Control.Monad.Error.Class.MonadError
      Language.PureScript.Errors.MultipleErrors m =>
    Language.PureScript.AST.SourcePos.SourceSpan -> m a -> m a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLC(C(S))),U(A,C(U),1*C1(C1(U)))><L,U(U,U(U(U),U(U)),U(U(U),U(U)))><L,U>,
     Unfolding: (\ @ m :: * -> *
                   @ a
                   ($dMonadError :: Control.Monad.Error.Class.MonadError
                                      Language.PureScript.Errors.MultipleErrors m)
                   (pos :: Language.PureScript.AST.SourcePos.SourceSpan)
                   (eta :: m a) ->
                 let {
                   f2 :: Language.PureScript.AST.Declarations.ErrorMessage
                         -> Language.PureScript.AST.Declarations.ErrorMessage
                     {- Arity: 1 -}
                   = Language.PureScript.Errors.withPosition pos
                 } in
                 Control.Monad.Error.Class.catchError
                   @ Language.PureScript.Errors.MultipleErrors
                   @ m
                   $dMonadError
                   @ a
                   eta
                   (\ (x :: Language.PureScript.Errors.MultipleErrors) ->
                    Control.Monad.Error.Class.throwError
                      @ Language.PureScript.Errors.MultipleErrors
                      @ m
                      $dMonadError
                      @ a
                      (GHC.Base.map
                         @ Language.PureScript.AST.Declarations.ErrorMessage
                         @ Language.PureScript.AST.Declarations.ErrorMessage
                         f2
                         x `cast` (Language.PureScript.Errors.N:MultipleErrors[0]))
                        `cast`
                      (Sym (Language.PureScript.Errors.N:MultipleErrors[0])))) -}
e1ef6a17348ccfe3ef65185d3c5f9026
  runMultipleErrors ::
    Language.PureScript.Errors.MultipleErrors
    -> [Language.PureScript.AST.Declarations.ErrorMessage]
  RecSel Left Language.PureScript.Errors.MultipleErrors
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Errors.runMultipleErrors1
                  `cast`
                (<Language.PureScript.Errors.MultipleErrors>_R
                 ->_R Language.PureScript.Errors.N:MultipleErrors[0]) -}
e1ef6a17348ccfe3ef65185d3c5f9026
  runMultipleErrors1 ::
    Language.PureScript.Errors.MultipleErrors
    -> Language.PureScript.Errors.MultipleErrors
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: Language.PureScript.Errors.MultipleErrors) -> ds) -}
3ce3c2beeebee34bcccc3d890ab35efb
  showSuggestion ::
    Language.PureScript.AST.Declarations.SimpleErrorMessage
    -> Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (suggestion :: Language.PureScript.AST.Declarations.SimpleErrorMessage) ->
                 case Language.PureScript.Errors.errorSuggestion
                        suggestion of wild {
                   GHC.Base.Nothing -> Data.Text.Internal.empty_
                   GHC.Base.Just ds
                   -> ds
                        `cast`
                      (Language.PureScript.Errors.N:ErrorSuggestion[0]) }) -}
a36dd8bcfe054c062a952f4ca37285fa
  singleError ::
    Language.PureScript.AST.Declarations.ErrorMessage
    -> Language.PureScript.Errors.MultipleErrors
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m2,
     Unfolding: InlineRule (0, True, True)
                (GHC.Base.$fApplicative[]_$cpure
                   @ Language.PureScript.AST.Declarations.ErrorMessage)
                  `cast`
                (<Language.PureScript.AST.Declarations.ErrorMessage>_R
                 ->_R Sym (Language.PureScript.Errors.N:MultipleErrors[0])) -}
d930cd488d57f880f4da4b3e9f42169b
  stripModuleAndSpan ::
    Language.PureScript.AST.Declarations.ErrorMessage
    -> Language.PureScript.AST.Declarations.ErrorMessage
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(1*U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.AST.Declarations.ErrorMessage) ->
                 case ds of wild { Language.PureScript.AST.Declarations.ErrorMessage hints e ->
                 Language.PureScript.AST.Declarations.ErrorMessage
                   (GHC.Base.build
                      @ Language.PureScript.AST.Declarations.ErrorMessageHint
                      (\ @ b
                         (c1 :: Language.PureScript.AST.Declarations.ErrorMessageHint
                                -> b -> b)[OneShot]
                         (n :: b)[OneShot] ->
                       GHC.Base.foldr
                         @ Language.PureScript.AST.Declarations.ErrorMessageHint
                         @ b
                         (GHC.List.filterFB
                            @ Language.PureScript.AST.Declarations.ErrorMessageHint
                            @ b
                            c1
                            Language.PureScript.Errors.stripModuleAndSpan1)
                         n
                         hints))
                   e }) -}
799c61a40285ab9848890f57e50e833f
  stripModuleAndSpan1 ::
    Language.PureScript.AST.Declarations.ErrorMessageHint
    -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.AST.Declarations.ErrorMessageHint) ->
                 case x of wild {
                   DEFAULT -> GHC.Types.True
                   Language.PureScript.AST.Declarations.ErrorInModule ds
                   -> GHC.Types.False
                   Language.PureScript.AST.Declarations.PositionedError ds
                   -> GHC.Types.False }) -}
101baaa784cc4651beb27ca02ecfec3e
  suggestionSpan ::
    Language.PureScript.AST.Declarations.ErrorMessage
    -> GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.PureScript.AST.Declarations.ErrorMessage) ->
                 case w of ww { Language.PureScript.AST.Declarations.ErrorMessage ww1 ww2 ->
                 Language.PureScript.Errors.$wsuggestionSpan ww1 ww2 }) -}
dc2720853800780869fa0998a80d0af5
  toTypelevelString ::
    Language.PureScript.Types.Type a
    -> GHC.Base.Maybe Text.PrettyPrint.Boxes.Box
  {- Arity: 1, Strictness: <S,1*U> -}
137fe19a711a5edf64e51ef23f802d22
  umNextIndex :: Language.PureScript.Errors.TypeMap -> GHC.Types.Int
  RecSel Left Language.PureScript.Errors.TypeMap
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Errors.TypeMap) ->
                 case ds of wild { Language.PureScript.Errors.TypeMap ds1 ds2 ds3 ->
                 ds3 }) -}
137fe19a711a5edf64e51ef23f802d22
  umSkolemMap ::
    Language.PureScript.Errors.TypeMap
    -> Data.Map.Internal.Map
         GHC.Types.Int
         (GHC.Base.String, GHC.Types.Int,
          GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan)
  RecSel Left Language.PureScript.Errors.TypeMap
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Errors.TypeMap) ->
                 case ds of wild { Language.PureScript.Errors.TypeMap ds1 ds2 ds3 ->
                 ds1 }) -}
137fe19a711a5edf64e51ef23f802d22
  umUnknownMap ::
    Language.PureScript.Errors.TypeMap
    -> Data.Map.Internal.Map GHC.Types.Int GHC.Types.Int
  RecSel Left Language.PureScript.Errors.TypeMap
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Errors.TypeMap) ->
                 case ds of wild { Language.PureScript.Errors.TypeMap ds1 ds2 ds3 ->
                 ds2 }) -}
2af34378ccdb99865a0ce323ec994267
  unwrapErrorMessage ::
    Language.PureScript.AST.Declarations.ErrorMessage
    -> Language.PureScript.AST.Declarations.SimpleErrorMessage
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.AST.Declarations.ErrorMessage) ->
                 case ds of wild { Language.PureScript.AST.Declarations.ErrorMessage ds1 se ->
                 se }) -}
09f641606a5fc3036a7fc4bb9c410020
  warnAndRethrow ::
    (Control.Monad.Error.Class.MonadError e m,
     Control.Monad.Writer.Class.MonadWriter e m) =>
    (e -> e) -> m a -> m a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LLC(C(S))),U(A,C(U),1*C1(C1(U)))><L,U(A,U(A,C(C1(U)),A,C(U),A),A,A,A,C(U))><L,U><L,U>,
     Unfolding: (\ @ e
                   @ m :: * -> *
                   @ a
                   ($dMonadError :: Control.Monad.Error.Class.MonadError e m)
                   ($dMonadWriter :: Control.Monad.Writer.Class.MonadWriter e m)
                   (f2 :: e -> e)
                   (x :: m a) ->
                 Control.Monad.Error.Class.catchError
                   @ e
                   @ m
                   $dMonadError
                   @ a
                   (Control.Monad.Writer.Class.censor @ e @ m @ a $dMonadWriter f2 x)
                   (\ (x1 :: e) ->
                    Control.Monad.Error.Class.throwError
                      @ e
                      @ m
                      $dMonadError
                      @ a
                      (f2 x1))) -}
15effeb3aa9f232bcc53dc3061683016
  warnAndRethrowWithPosition ::
    (Control.Monad.Error.Class.MonadError
       Language.PureScript.Errors.MultipleErrors m,
     Control.Monad.Writer.Class.MonadWriter
       Language.PureScript.Errors.MultipleErrors m) =>
    Language.PureScript.AST.SourcePos.SourceSpan -> m a -> m a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LLC(C(S))),U(A,C(U),C(C1(U)))><L,U(A,U(A,C(C1(U)),A,C(U),A),A,A,A,C(U))><L,U(U,U(U(U),U(U)),U(U(U),U(U)))><L,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ m :: * -> *
                   @ a
                   ($dMonadError :: Control.Monad.Error.Class.MonadError
                                      Language.PureScript.Errors.MultipleErrors m)
                   ($dMonadWriter :: Control.Monad.Writer.Class.MonadWriter
                                       Language.PureScript.Errors.MultipleErrors m)
                   (pos :: Language.PureScript.AST.SourcePos.SourceSpan)
                   (x :: m a) ->
                 Language.PureScript.Errors.rethrowWithPosition
                   @ m
                   @ a
                   $dMonadError
                   pos
                   (Language.PureScript.Errors.warnWithPosition
                      @ m
                      @ a
                      $dMonadWriter
                      pos
                      x)) -}
7ad80b7c006a458b8324a8a9926b1f43
  warnWithPosition ::
    Control.Monad.Writer.Class.MonadWriter
      Language.PureScript.Errors.MultipleErrors m =>
    Language.PureScript.AST.SourcePos.SourceSpan -> m a -> m a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLLLLC(S)),U(A,U(A,C(C1(U)),A,C(U),A),A,A,A,C(U))><L,U(U,U(U(U),U(U)),U(U(U),U(U)))><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ m :: * -> *
                   @ a
                   ($dMonadWriter :: Control.Monad.Writer.Class.MonadWriter
                                       Language.PureScript.Errors.MultipleErrors m)
                   (pos :: Language.PureScript.AST.SourcePos.SourceSpan)
                   (eta :: m a) ->
                 Control.Monad.Writer.Class.censor
                   @ Language.PureScript.Errors.MultipleErrors
                   @ m
                   @ a
                   $dMonadWriter
                   (GHC.Base.map
                      @ Language.PureScript.AST.Declarations.ErrorMessage
                      @ Language.PureScript.AST.Declarations.ErrorMessage
                      (Language.PureScript.Errors.withPosition pos))
                     `cast`
                   (Sym (Language.PureScript.Errors.N:MultipleErrors[0])
                    ->_R Sym (Language.PureScript.Errors.N:MultipleErrors[0]))
                   eta) -}
3ba3d91dafe82fe07fdd730164771e96
  withPosition ::
    Language.PureScript.AST.SourcePos.SourceSpan
    -> Language.PureScript.AST.Declarations.ErrorMessage
    -> Language.PureScript.AST.Declarations.ErrorMessage
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLL),1*U(U,U(U(U),U(U)),U(U(U),U(U)))><S,1*U(U,U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.AST.SourcePos.SourceSpan)
                   (w1 :: Language.PureScript.AST.Declarations.ErrorMessage) ->
                 case w of ww { Language.PureScript.AST.SourcePos.SourceSpan ww1 ww2 ww3 ->
                 case w1 of ww4 { Language.PureScript.AST.Declarations.ErrorMessage ww5 ww6 ->
                 case ww1 of wild {
                   []
                   -> case ww2 of wild1 { Language.PureScript.AST.SourcePos.SourcePos ds ds1 ->
                      case ds of wild2 { GHC.Types.I# ds2 ->
                      case ds2 of ds3 {
                        DEFAULT
                        -> Language.PureScript.AST.Declarations.ErrorMessage
                             (GHC.Types.:
                                @ Language.PureScript.AST.Declarations.ErrorMessageHint
                                (Language.PureScript.AST.Declarations.PositionedError
                                   (GHC.Base.:|
                                      @ Language.PureScript.AST.SourcePos.SourceSpan
                                      (Language.PureScript.AST.SourcePos.SourceSpan
                                         (GHC.Types.[] @ GHC.Types.Char)
                                         wild1
                                         ww3)
                                      (GHC.Types.[]
                                         @ Language.PureScript.AST.SourcePos.SourceSpan)))
                                ww5)
                             ww6
                        0#
                        -> case ds1 of wild3 { GHC.Types.I# ds4 ->
                           case ds4 of ds5 {
                             DEFAULT
                             -> Language.PureScript.AST.Declarations.ErrorMessage
                                  (GHC.Types.:
                                     @ Language.PureScript.AST.Declarations.ErrorMessageHint
                                     (Language.PureScript.AST.Declarations.PositionedError
                                        (GHC.Base.:|
                                           @ Language.PureScript.AST.SourcePos.SourceSpan
                                           (Language.PureScript.AST.SourcePos.SourceSpan
                                              (GHC.Types.[] @ GHC.Types.Char)
                                              wild1
                                              ww3)
                                           (GHC.Types.[]
                                              @ Language.PureScript.AST.SourcePos.SourceSpan)))
                                     ww5)
                                  ww6
                             0#
                             -> case ww3 of wild4 { Language.PureScript.AST.SourcePos.SourcePos ds6 ds7 ->
                                case ds6 of wild5 { GHC.Types.I# ds8 ->
                                case ds8 of ds9 {
                                  DEFAULT
                                  -> Language.PureScript.AST.Declarations.ErrorMessage
                                       (GHC.Types.:
                                          @ Language.PureScript.AST.Declarations.ErrorMessageHint
                                          (Language.PureScript.AST.Declarations.PositionedError
                                             (GHC.Base.:|
                                                @ Language.PureScript.AST.SourcePos.SourceSpan
                                                (Language.PureScript.AST.SourcePos.SourceSpan
                                                   (GHC.Types.[] @ GHC.Types.Char)
                                                   wild1
                                                   wild4)
                                                (GHC.Types.[]
                                                   @ Language.PureScript.AST.SourcePos.SourceSpan)))
                                          ww5)
                                       ww6
                                  0#
                                  -> case ds7 of wild6 { GHC.Types.I# ds10 ->
                                     case ds10 of ds11 {
                                       DEFAULT
                                       -> Language.PureScript.AST.Declarations.ErrorMessage
                                            (GHC.Types.:
                                               @ Language.PureScript.AST.Declarations.ErrorMessageHint
                                               (Language.PureScript.AST.Declarations.PositionedError
                                                  (GHC.Base.:|
                                                     @ Language.PureScript.AST.SourcePos.SourceSpan
                                                     (Language.PureScript.AST.SourcePos.SourceSpan
                                                        (GHC.Types.[] @ GHC.Types.Char)
                                                        wild1
                                                        wild4)
                                                     (GHC.Types.[]
                                                        @ Language.PureScript.AST.SourcePos.SourceSpan)))
                                               ww5)
                                            ww6
                                       0#
                                       -> Language.PureScript.AST.Declarations.ErrorMessage
                                            ww5
                                            ww6 } } } } } } } } } }
                   : ipv ipv1
                   -> Language.PureScript.AST.Declarations.ErrorMessage
                        (GHC.Types.:
                           @ Language.PureScript.AST.Declarations.ErrorMessageHint
                           (Language.PureScript.AST.Declarations.PositionedError
                              (GHC.Base.:|
                                 @ Language.PureScript.AST.SourcePos.SourceSpan
                                 (Language.PureScript.AST.SourcePos.SourceSpan wild ww2 ww3)
                                 (GHC.Types.[] @ Language.PureScript.AST.SourcePos.SourceSpan)))
                           ww5)
                        ww6 } } }) -}
instance GHC.Base.Monoid [Language.PureScript.Errors.MultipleErrors]
  = Language.PureScript.Errors.$fMonoidMultipleErrors
instance GHC.Base.Semigroup [Language.PureScript.Errors.MultipleErrors]
  = Language.PureScript.Errors.$fSemigroupMultipleErrors
instance GHC.Show.Show [Language.PureScript.Errors.Level]
  = Language.PureScript.Errors.$fShowLevel
instance GHC.Show.Show [Language.PureScript.Errors.MultipleErrors]
  = Language.PureScript.Errors.$fShowMultipleErrors
instance GHC.Show.Show [Language.PureScript.Errors.TypeMap]
  = Language.PureScript.Errors.$fShowTypeMap
"SPEC onTypesInErrorMessageM @ Identity" forall ($dApplicative :: GHC.Base.Applicative
                                                                    Data.Functor.Identity.Identity)
  Language.PureScript.Errors.onTypesInErrorMessageM @ Data.Functor.Identity.Identity
                                                    $dApplicative
  = Language.PureScript.Errors.onTypesInErrorMessage_$sonTypesInErrorMessageM
"SPEC/Language.PureScript.Errors $fApplicativeStateT @ Identity _" [orphan] forall @ s
                                                                                   (v1 :: GHC.Base.Monad
                                                                                            Data.Functor.Identity.Identity)
                                                                                   (v :: GHC.Base.Functor
                                                                                           Data.Functor.Identity.Identity)
  Control.Monad.Trans.State.Lazy.$fApplicativeStateT @ Data.Functor.Identity.Identity
                                                     @ s
                                                     v
                                                     v1
  = Language.PureScript.Errors.$s$fApplicativeStateT @ s
"SPEC/Language.PureScript.Errors $fApplicativeStateT_$c*> @ Identity _" [orphan] forall @ s
                                                                                        ($dMonad :: GHC.Base.Monad
                                                                                                      Data.Functor.Identity.Identity)
                                                                                        ($dFunctor :: GHC.Base.Functor
                                                                                                        Data.Functor.Identity.Identity)
  Control.Monad.Trans.State.Lazy.$fApplicativeStateT_$c*> @ Data.Functor.Identity.Identity
                                                          @ s
                                                          $dFunctor
                                                          $dMonad
  = Language.PureScript.Errors.$s$fApplicativeStateT_$s$fApplicativeStateT_$c*>
      @ s
"SPEC/Language.PureScript.Errors $fApplicativeStateT_$c<*> @ Identity _" [orphan] forall @ s
                                                                                         ($dMonad :: GHC.Base.Monad
                                                                                                       Data.Functor.Identity.Identity)
                                                                                         ($dFunctor :: GHC.Base.Functor
                                                                                                         Data.Functor.Identity.Identity)
  Control.Monad.Trans.State.Lazy.$fApplicativeStateT_$c<*> @ Data.Functor.Identity.Identity
                                                           @ s
                                                           $dFunctor
                                                           $dMonad
  = Language.PureScript.Errors.$s$fApplicativeStateT_$s$fApplicativeStateT_$c<*>
      @ s
"SPEC/Language.PureScript.Errors $fApplicativeStateT_$cpure @ Identity _" [orphan] forall @ s
                                                                                          ($dMonad :: GHC.Base.Monad
                                                                                                        Data.Functor.Identity.Identity)
                                                                                          ($dFunctor :: GHC.Base.Functor
                                                                                                          Data.Functor.Identity.Identity)
  Control.Monad.Trans.State.Lazy.$fApplicativeStateT_$cpure @ Data.Functor.Identity.Identity
                                                            @ s
                                                            $dFunctor
                                                            $dMonad
  = Language.PureScript.Errors.$s$fApplicativeStateT_$s$fApplicativeStateT_$cpure
      @ s
"SPEC/Language.PureScript.Errors $fFunctorStateT @ Identity _" [orphan] forall @ s
                                                                               (v :: GHC.Base.Functor
                                                                                       Data.Functor.Identity.Identity)
  Control.Monad.Trans.State.Lazy.$fFunctorStateT @ Data.Functor.Identity.Identity
                                                 @ s
                                                 v
  = Language.PureScript.Errors.$s$fApplicativeStateT_$s$fFunctorStateT
      @ s
"SPEC/Language.PureScript.Errors $fMonadStateT @ Identity _" [orphan] forall @ s
                                                                             (v :: GHC.Base.Monad
                                                                                     Data.Functor.Identity.Identity)
  Control.Monad.Trans.State.Lazy.$fMonadStateT @ Data.Functor.Identity.Identity
                                               @ s
                                               v
  = Language.PureScript.Errors.$s$fMonadStateT @ s
"SPEC/Language.PureScript.Errors $fMonadStateT_$c>> @ Identity _" [orphan] forall @ s
                                                                                  ($dMonad :: GHC.Base.Monad
                                                                                                Data.Functor.Identity.Identity)
  Control.Monad.Trans.State.Lazy.$fMonadStateT_$c>> @ Data.Functor.Identity.Identity
                                                    @ s
                                                    $dMonad
  = Language.PureScript.Errors.$s$fMonadStateT_$s$fMonadStateT_$c>>
      @ s
"SPEC/Language.PureScript.Errors $fMonadStateT_$c>>= @ Identity _" [orphan] forall @ s
                                                                                   ($dMonad :: GHC.Base.Monad
                                                                                                 Data.Functor.Identity.Identity)
  Control.Monad.Trans.State.Lazy.$fMonadStateT_$c>>= @ Data.Functor.Identity.Identity
                                                     @ s
                                                     $dMonad
  = Language.PureScript.Errors.$s$fMonadStateT_$s$fMonadStateT_$c>>=
      @ s
"SPEC/Language.PureScript.Errors $fMonadStateT_$cfail @ Identity _" [orphan] forall @ s
                                                                                    ($dMonad :: GHC.Base.Monad
                                                                                                  Data.Functor.Identity.Identity)
  Control.Monad.Trans.State.Lazy.$fMonadStateT_$cfail @ Data.Functor.Identity.Identity
                                                      @ s
                                                      $dMonad
  = Language.PureScript.Errors.$s$fMonadStateT_$s$fMonadStateT_$cfail
      @ s
"SPEC/Language.PureScript.Errors $fShow(,,) @ [Char] @ Int @ (Maybe
                                                               SourceSpan)" [orphan] forall (v2 :: GHC.Show.Show
                                                                                                                                                                         (GHC.Base.Maybe
                                                                                                                                                                            Language.PureScript.AST.SourcePos.SourceSpan))
                                                                                                                                                                (v1 :: GHC.Show.Show
                                                                                                                                                                         GHC.Types.Int)
                                                                                                                                                                (v :: GHC.Show.Show
                                                                                                                                                                        [GHC.Types.Char])
  GHC.Show.$fShow(,,) @ [GHC.Types.Char]
                      @ GHC.Types.Int
                      @ (GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan)
                      v
                      v1
                      v2
  = Language.PureScript.Errors.$fShowTypeMap_$s$fShow(,,)
"SPEC/Language.PureScript.Errors $fShowMaybe @ SourceSpan" [orphan] forall (v :: GHC.Show.Show
                                                                                   Language.PureScript.AST.SourcePos.SourceSpan)
  GHC.Show.$fShowMaybe @ Language.PureScript.AST.SourcePos.SourceSpan
                       v
  = Language.PureScript.Errors.$fShowTypeMap_$s$fShowMaybe
"SPEC/Language.PureScript.Errors $fShowMaybe_$cshowList @ SourceSpan" [orphan] forall ($dShow :: GHC.Show.Show
                                                                                                   Language.PureScript.AST.SourcePos.SourceSpan)
  GHC.Show.$fShowMaybe_$cshowList @ Language.PureScript.AST.SourcePos.SourceSpan
                                  $dShow
  = Language.PureScript.Errors.$s$fShowMaybe_$cshowList
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

