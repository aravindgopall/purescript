
==================== FINAL INTERFACE ====================
2018-11-30 20:47:04.623786 UTC

interface purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Errors 8043
  interface hash: 4459dd917d229c87f324974389622947
  ABI hash: 15d6eb6b2d4d480750061a0585d4e64c
  export-list hash: 142ea650dec62642d1cff09ef1eee74e
  orphan hash: a699373e53acedc411b8b246852ede15
  flag hash: 86092872c28014c54f5bdcac6ce694b6
  opt_hash: 2c98c95d41c045ae9c2fb565ec8aabc6
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Language.PureScript.AST.Binders.binderNames
  Language.PureScript.AST.Binders.isIrrefutable
  Language.PureScript.AST.Declarations.MkUnguarded
  Language.PureScript.AST.Declarations.TypeFixityDeclaration
  Language.PureScript.AST.Declarations.ValueDecl
  Language.PureScript.AST.Declarations.ValueFixityDeclaration
  Language.PureScript.AST.Declarations.addDefaultImport
  Language.PureScript.AST.Declarations.compDecRef
  Language.PureScript.AST.Declarations.declName
  Language.PureScript.AST.Declarations.declRefName
  Language.PureScript.AST.Declarations.declRefSourceSpan
  Language.PureScript.AST.Declarations.declSourceAnn
  Language.PureScript.AST.Declarations.declSourceSpan
  Language.PureScript.AST.Declarations.flattenDecls
  Language.PureScript.AST.Declarations.getFixityDecl
  Language.PureScript.AST.Declarations.getKindRef
  Language.PureScript.AST.Declarations.getModuleDeclarations
  Language.PureScript.AST.Declarations.getModuleName
  Language.PureScript.AST.Declarations.getModuleSourceSpan
  Language.PureScript.AST.Declarations.getTypeClassRef
  Language.PureScript.AST.Declarations.getTypeDeclaration
  Language.PureScript.AST.Declarations.getTypeOpRef
  Language.PureScript.AST.Declarations.getTypeRef
  Language.PureScript.AST.Declarations.getValueDeclaration
  Language.PureScript.AST.Declarations.getValueOpRef
  Language.PureScript.AST.Declarations.getValueRef
  Language.PureScript.AST.Declarations.importPrim
  Language.PureScript.AST.Declarations.isDataDecl
  Language.PureScript.AST.Declarations.isExplicit
  Language.PureScript.AST.Declarations.isExternDataDecl
  Language.PureScript.AST.Declarations.isExternDecl
  Language.PureScript.AST.Declarations.isExternKindDecl
  Language.PureScript.AST.Declarations.isFixityDecl
  Language.PureScript.AST.Declarations.isImplicit
  Language.PureScript.AST.Declarations.isImportDecl
  Language.PureScript.AST.Declarations.isModuleRef
  Language.PureScript.AST.Declarations.isTrueExpr
  Language.PureScript.AST.Declarations.isTypeClassDeclaration
  Language.PureScript.AST.Declarations.isTypeClassInstanceDeclaration
  Language.PureScript.AST.Declarations.isValueDecl
  Language.PureScript.AST.Declarations.mapTypeInstanceBody
  Language.PureScript.AST.Declarations.onTypeSearchTypes
  Language.PureScript.AST.Declarations.onTypeSearchTypesM
  Language.PureScript.AST.Declarations.overTypeDeclaration
  Language.PureScript.AST.Declarations.overValueDeclaration
  Language.PureScript.AST.Declarations.traverseTypeInstanceBody
  Language.PureScript.AST.Declarations.unwrapTypeDeclaration
  Language.PureScript.AST.Exported.exportedDeclarations
  Language.PureScript.AST.Exported.isExported
  Language.PureScript.AST.Operators.readAssoc
  Language.PureScript.AST.Operators.showAssoc
  Language.PureScript.AST.SourcePos.displaySourcePos
  Language.PureScript.AST.SourcePos.displaySourceSpan
  Language.PureScript.AST.SourcePos.displayStartEndPos
  Language.PureScript.AST.SourcePos.internalModuleSourceSpan
  Language.PureScript.AST.SourcePos.nullSourceSpan
  Language.PureScript.AST.Traversals.accumKinds
  Language.PureScript.AST.Traversals.accumTypes
  Language.PureScript.AST.Traversals.everythingOnValues
  Language.PureScript.AST.Traversals.everythingWithContextOnValues
  Language.PureScript.AST.Traversals.everythingWithScope
  Language.PureScript.AST.Traversals.everywhereOnValues
  Language.PureScript.AST.Traversals.everywhereOnValuesM
  Language.PureScript.AST.Traversals.everywhereOnValuesTopDownM
  Language.PureScript.AST.Traversals.everywhereWithContextOnValuesM
  Language.PureScript.AST.Traversals.guardedExprM
  Language.PureScript.AST.Traversals.inScope
  Language.PureScript.AST.Traversals.litM
  Language.PureScript.AST.Traversals.mapGuardedExpr
  Language.PureScript.AST.Traversals.overTypes
  Language.PureScript.Errors.addHint
  Language.PureScript.Errors.addHints
  Language.PureScript.Errors.ansiColor
  Language.PureScript.Errors.ansiColorReset
  Language.PureScript.Errors.colorCode
  Language.PureScript.Errors.colorCodeBox
  Language.PureScript.Errors.defaultCodeColor
  Language.PureScript.Errors.defaultPPEOptions
  Language.PureScript.Errors.defaultUnknownMap
  Language.PureScript.Errors.errorCode
  Language.PureScript.Errors.errorDocUri
  Language.PureScript.Errors.errorMessage
  Language.PureScript.Errors.errorMessage'
  Language.PureScript.Errors.errorMessage''
  Language.PureScript.Errors.errorModule
  Language.PureScript.Errors.errorSpan
  Language.PureScript.Errors.errorSuggestion
  Language.PureScript.Errors.escalateWarningWhen
  Language.PureScript.Errors.findHint
  Language.PureScript.Errors.indent
  Language.PureScript.Errors.line
  Language.PureScript.Errors.lineS
  Language.PureScript.Errors.nonEmpty
  Language.PureScript.Errors.onErrorMessages
  Language.PureScript.Errors.onTypesInErrorMessage
  Language.PureScript.Errors.onTypesInErrorMessageM
  Language.PureScript.Errors.parU
  Language.PureScript.Errors.positionedError
  Language.PureScript.Errors.prettyPrintExport
  Language.PureScript.Errors.prettyPrintImport
  Language.PureScript.Errors.prettyPrintMultipleErrors
  Language.PureScript.Errors.prettyPrintMultipleErrorsBox
  Language.PureScript.Errors.prettyPrintMultipleErrorsWith
  Language.PureScript.Errors.prettyPrintMultipleWarnings
  Language.PureScript.Errors.prettyPrintMultipleWarningsBox
  Language.PureScript.Errors.prettyPrintParseError
  Language.PureScript.Errors.prettyPrintParseErrorMessages
  Language.PureScript.Errors.prettyPrintRef
  Language.PureScript.Errors.prettyPrintSingleError
  Language.PureScript.Errors.reflectErrors
  Language.PureScript.Errors.reifyErrors
  Language.PureScript.Errors.renderBox
  Language.PureScript.Errors.replaceUnknowns
  Language.PureScript.Errors.rethrow
  Language.PureScript.Errors.rethrowWithPosition
  Language.PureScript.Errors.showSuggestion
  Language.PureScript.Errors.singleError
  Language.PureScript.Errors.stripModuleAndSpan
  Language.PureScript.Errors.suggestionSpan
  Language.PureScript.Errors.toTypelevelString
  Language.PureScript.Errors.unwrapErrorMessage
  Language.PureScript.Errors.warnAndRethrow
  Language.PureScript.Errors.warnAndRethrowWithPosition
  Language.PureScript.Errors.warnWithPosition
  Language.PureScript.Errors.withPosition
  Language.PureScript.AST.Binders.Binder{Language.PureScript.AST.Binders.BinaryNoParensBinder Language.PureScript.AST.Binders.ConstructorBinder Language.PureScript.AST.Binders.LiteralBinder Language.PureScript.AST.Binders.NamedBinder Language.PureScript.AST.Binders.NullBinder Language.PureScript.AST.Binders.OpBinder Language.PureScript.AST.Binders.ParensInBinder Language.PureScript.AST.Binders.PositionedBinder Language.PureScript.AST.Binders.TypedBinder Language.PureScript.AST.Binders.VarBinder}
  Language.PureScript.AST.Declarations.AssocList{Language.PureScript.AST.Declarations.AssocList runAssocList}
  Language.PureScript.AST.Declarations.CaseAlternative{Language.PureScript.AST.Declarations.CaseAlternative caseAlternativeBinders caseAlternativeResult}
  Language.PureScript.AST.Declarations.Context
  Language.PureScript.AST.Declarations.Declaration{Language.PureScript.AST.Declarations.BindingGroupDeclaration Language.PureScript.AST.Declarations.BoundValueDeclaration Language.PureScript.AST.Declarations.DataBindingGroupDeclaration Language.PureScript.AST.Declarations.DataDeclaration Language.PureScript.AST.Declarations.ExternDataDeclaration Language.PureScript.AST.Declarations.ExternDeclaration Language.PureScript.AST.Declarations.ExternKindDeclaration Language.PureScript.AST.Declarations.FixityDeclaration Language.PureScript.AST.Declarations.ImportDeclaration Language.PureScript.AST.Declarations.TypeClassDeclaration Language.PureScript.AST.Declarations.TypeDeclaration Language.PureScript.AST.Declarations.TypeInstanceDeclaration Language.PureScript.AST.Declarations.TypeSynonymDeclaration Language.PureScript.AST.Declarations.ValueDeclaration}
  Language.PureScript.AST.Declarations.DeclarationRef{Language.PureScript.AST.Declarations.KindRef Language.PureScript.AST.Declarations.ModuleRef Language.PureScript.AST.Declarations.ReExportRef Language.PureScript.AST.Declarations.TypeClassRef Language.PureScript.AST.Declarations.TypeInstanceRef Language.PureScript.AST.Declarations.TypeOpRef Language.PureScript.AST.Declarations.TypeRef Language.PureScript.AST.Declarations.ValueOpRef Language.PureScript.AST.Declarations.ValueRef}
  Language.PureScript.AST.Declarations.DoNotationElement{Language.PureScript.AST.Declarations.DoNotationBind Language.PureScript.AST.Declarations.DoNotationLet Language.PureScript.AST.Declarations.DoNotationValue Language.PureScript.AST.Declarations.PositionedDoNotationElement}
  Language.PureScript.AST.Declarations.ErrorMessage{Language.PureScript.AST.Declarations.ErrorMessage}
  Language.PureScript.AST.Declarations.ErrorMessageHint{Language.PureScript.AST.Declarations.ErrorCheckingAccessor Language.PureScript.AST.Declarations.ErrorCheckingGuard Language.PureScript.AST.Declarations.ErrorCheckingKind Language.PureScript.AST.Declarations.ErrorCheckingType Language.PureScript.AST.Declarations.ErrorInApplication Language.PureScript.AST.Declarations.ErrorInBindingGroup Language.PureScript.AST.Declarations.ErrorInDataBindingGroup Language.PureScript.AST.Declarations.ErrorInDataConstructor Language.PureScript.AST.Declarations.ErrorInExpression Language.PureScript.AST.Declarations.ErrorInForeignImport Language.PureScript.AST.Declarations.ErrorInInstance Language.PureScript.AST.Declarations.ErrorInModule Language.PureScript.AST.Declarations.ErrorInSubsumption Language.PureScript.AST.Declarations.ErrorInTypeClassDeclaration Language.PureScript.AST.Declarations.ErrorInTypeConstructor Language.PureScript.AST.Declarations.ErrorInTypeDeclaration Language.PureScript.AST.Declarations.ErrorInTypeSynonym Language.PureScript.AST.Declarations.ErrorInValueDeclaration Language.PureScript.AST.Declarations.ErrorInferringType Language.PureScript.AST.Declarations.ErrorSolvingConstraint Language.PureScript.AST.Declarations.ErrorUnifyingTypes Language.PureScript.AST.Declarations.PositionedError}
  Language.PureScript.AST.Declarations.Expr{Language.PureScript.AST.Declarations.Abs Language.PureScript.AST.Declarations.Accessor Language.PureScript.AST.Declarations.Ado Language.PureScript.AST.Declarations.AnonymousArgument Language.PureScript.AST.Declarations.App Language.PureScript.AST.Declarations.BinaryNoParens Language.PureScript.AST.Declarations.Case Language.PureScript.AST.Declarations.Constructor Language.PureScript.AST.Declarations.DeferredDictionary Language.PureScript.AST.Declarations.Do Language.PureScript.AST.Declarations.Hole Language.PureScript.AST.Declarations.IfThenElse Language.PureScript.AST.Declarations.Let Language.PureScript.AST.Declarations.Literal Language.PureScript.AST.Declarations.ObjectUpdate Language.PureScript.AST.Declarations.ObjectUpdateNested Language.PureScript.AST.Declarations.Op Language.PureScript.AST.Declarations.Parens Language.PureScript.AST.Declarations.PositionedValue Language.PureScript.AST.Declarations.TypeClassDictionary Language.PureScript.AST.Declarations.TypeClassDictionaryAccessor Language.PureScript.AST.Declarations.TypeClassDictionaryConstructorApp Language.PureScript.AST.Declarations.TypedValue Language.PureScript.AST.Declarations.UnaryMinus Language.PureScript.AST.Declarations.Var}
  Language.PureScript.AST.Declarations.Guard{Language.PureScript.AST.Declarations.ConditionGuard Language.PureScript.AST.Declarations.PatternGuard}
  Language.PureScript.AST.Declarations.GuardedExpr{Language.PureScript.AST.Declarations.GuardedExpr}
  Language.PureScript.AST.Declarations.HintCategory{Language.PureScript.AST.Declarations.CheckHint Language.PureScript.AST.Declarations.ExprHint Language.PureScript.AST.Declarations.KindHint Language.PureScript.AST.Declarations.OtherHint Language.PureScript.AST.Declarations.PositionHint Language.PureScript.AST.Declarations.SolverHint}
  Language.PureScript.AST.Declarations.ImportDeclarationType{Language.PureScript.AST.Declarations.Explicit Language.PureScript.AST.Declarations.Hiding Language.PureScript.AST.Declarations.Implicit}
  Language.PureScript.AST.Declarations.Module{Language.PureScript.AST.Declarations.Module}
  Language.PureScript.AST.Declarations.PathNode{Language.PureScript.AST.Declarations.Branch Language.PureScript.AST.Declarations.Leaf}
  Language.PureScript.AST.Declarations.PathTree{Language.PureScript.AST.Declarations.PathTree}
  Language.PureScript.AST.Declarations.SimpleErrorMessage{Language.PureScript.AST.Declarations.AdditionalProperty Language.PureScript.AST.Declarations.AmbiguousTypeVariables Language.PureScript.AST.Declarations.ArgListLengthsDiffer Language.PureScript.AST.Declarations.CannotDefinePrimModules Language.PureScript.AST.Declarations.CannotDerive Language.PureScript.AST.Declarations.CannotDeriveNewtypeForData Language.PureScript.AST.Declarations.CannotFindDerivingType Language.PureScript.AST.Declarations.CannotGeneralizeRecursiveFunction Language.PureScript.AST.Declarations.CannotGetFileInfo Language.PureScript.AST.Declarations.CannotReadFile Language.PureScript.AST.Declarations.CannotUseBindWithDo Language.PureScript.AST.Declarations.CannotWriteFile Language.PureScript.AST.Declarations.CaseBinderLengthDiffers Language.PureScript.AST.Declarations.ClassInstanceArityMismatch Language.PureScript.AST.Declarations.ConstrainedTypeUnified Language.PureScript.AST.Declarations.CycleInDeclaration Language.PureScript.AST.Declarations.CycleInModules Language.PureScript.AST.Declarations.CycleInTypeSynonym Language.PureScript.AST.Declarations.DeclConflict Language.PureScript.AST.Declarations.DuplicateExportRef Language.PureScript.AST.Declarations.DuplicateImport Language.PureScript.AST.Declarations.DuplicateImportRef Language.PureScript.AST.Declarations.DuplicateInstance Language.PureScript.AST.Declarations.DuplicateLabel Language.PureScript.AST.Declarations.DuplicateModule Language.PureScript.AST.Declarations.DuplicateSelectiveImport Language.PureScript.AST.Declarations.DuplicateTypeArgument Language.PureScript.AST.Declarations.DuplicateTypeClass Language.PureScript.AST.Declarations.DuplicateValueDeclaration Language.PureScript.AST.Declarations.ErrorParsingFFIModule Language.PureScript.AST.Declarations.ErrorParsingModule Language.PureScript.AST.Declarations.EscapedSkolem Language.PureScript.AST.Declarations.ExpectedType Language.PureScript.AST.Declarations.ExpectedTypeConstructor Language.PureScript.AST.Declarations.ExpectedWildcard Language.PureScript.AST.Declarations.ExportConflict Language.PureScript.AST.Declarations.ExprDoesNotHaveType Language.PureScript.AST.Declarations.ExtraneousClassMember Language.PureScript.AST.Declarations.HidingImport Language.PureScript.AST.Declarations.HoleInferredType Language.PureScript.AST.Declarations.ImplicitImport Language.PureScript.AST.Declarations.ImplicitQualifiedImport Language.PureScript.AST.Declarations.ImplicitQualifiedImportReExport Language.PureScript.AST.Declarations.ImportHidingModule Language.PureScript.AST.Declarations.IncompleteExhaustivityCheck Language.PureScript.AST.Declarations.IncorrectAnonymousArgument Language.PureScript.AST.Declarations.IncorrectConstructorArity Language.PureScript.AST.Declarations.InfiniteKind Language.PureScript.AST.Declarations.InfiniteType Language.PureScript.AST.Declarations.IntOutOfRange Language.PureScript.AST.Declarations.InvalidDerivedInstance Language.PureScript.AST.Declarations.InvalidDoBind Language.PureScript.AST.Declarations.InvalidDoLet Language.PureScript.AST.Declarations.InvalidFFIIdentifier Language.PureScript.AST.Declarations.InvalidInstanceHead Language.PureScript.AST.Declarations.InvalidNewtype Language.PureScript.AST.Declarations.InvalidNewtypeInstance Language.PureScript.AST.Declarations.InvalidOperatorInBinder Language.PureScript.AST.Declarations.KindsDoNotUnify Language.PureScript.AST.Declarations.MisleadingEmptyTypeImport Language.PureScript.AST.Declarations.MissingClassMember Language.PureScript.AST.Declarations.MissingFFIImplementations Language.PureScript.AST.Declarations.MissingFFIModule Language.PureScript.AST.Declarations.MissingNewtypeSuperclassInstance Language.PureScript.AST.Declarations.MissingTypeDeclaration Language.PureScript.AST.Declarations.MixedAssociativityError Language.PureScript.AST.Declarations.ModuleNotFound Language.PureScript.AST.Declarations.MultipleTypeOpFixities Language.PureScript.AST.Declarations.MultipleValueOpFixities Language.PureScript.AST.Declarations.NameIsUndefined Language.PureScript.AST.Declarations.NoInstanceFound Language.PureScript.AST.Declarations.NonAssociativeError Language.PureScript.AST.Declarations.OrphanInstance Language.PureScript.AST.Declarations.OrphanTypeDeclaration Language.PureScript.AST.Declarations.OverlappingArgNames Language.PureScript.AST.Declarations.OverlappingInstances Language.PureScript.AST.Declarations.OverlappingNamesInLet Language.PureScript.AST.Declarations.OverlappingPattern Language.PureScript.AST.Declarations.PartiallyAppliedSynonym Language.PureScript.AST.Declarations.PossiblyInfiniteInstance Language.PureScript.AST.Declarations.PropertyIsMissing Language.PureScript.AST.Declarations.RedefinedIdent Language.PureScript.AST.Declarations.ScopeConflict Language.PureScript.AST.Declarations.ScopeShadowing Language.PureScript.AST.Declarations.ShadowedName Language.PureScript.AST.Declarations.ShadowedTypeVar Language.PureScript.AST.Declarations.TransitiveDctorExportError Language.PureScript.AST.Declarations.TransitiveExportError Language.PureScript.AST.Declarations.TypeSynonymInstance Language.PureScript.AST.Declarations.TypesDoNotUnify Language.PureScript.AST.Declarations.UndefinedTypeVariable Language.PureScript.AST.Declarations.UnknownClass Language.PureScript.AST.Declarations.UnknownExport Language.PureScript.AST.Declarations.UnknownExportDataConstructor Language.PureScript.AST.Declarations.UnknownImport Language.PureScript.AST.Declarations.UnknownImportDataConstructor Language.PureScript.AST.Declarations.UnknownName Language.PureScript.AST.Declarations.UnnecessaryFFIModule Language.PureScript.AST.Declarations.UnusableDeclaration Language.PureScript.AST.Declarations.UnusedDctorExplicitImport Language.PureScript.AST.Declarations.UnusedDctorImport Language.PureScript.AST.Declarations.UnusedExplicitImport Language.PureScript.AST.Declarations.UnusedFFIImplementations Language.PureScript.AST.Declarations.UnusedImport Language.PureScript.AST.Declarations.UnusedTypeVar Language.PureScript.AST.Declarations.UnverifiableSuperclassInstance Language.PureScript.AST.Declarations.UserDefinedWarning Language.PureScript.AST.Declarations.WildcardInferredType}
  Language.PureScript.AST.Declarations.TypeDeclarationData{Language.PureScript.AST.Declarations.TypeDeclarationData tydeclIdent tydeclSourceAnn tydeclType}
  Language.PureScript.AST.Declarations.TypeFixity{Language.PureScript.AST.Declarations.TypeFixity}
  Language.PureScript.AST.Declarations.TypeInstanceBody{Language.PureScript.AST.Declarations.DerivedInstance Language.PureScript.AST.Declarations.ExplicitInstance Language.PureScript.AST.Declarations.NewtypeInstance Language.PureScript.AST.Declarations.NewtypeInstanceWithDictionary}
  Language.PureScript.AST.Declarations.TypeSearch{Language.PureScript.AST.Declarations.TSAfter Language.PureScript.AST.Declarations.TSBefore tsAfterIdentifiers tsAfterRecordFields}
  Language.PureScript.AST.Declarations.ValueDeclarationData{Language.PureScript.AST.Declarations.ValueDeclarationData valdeclBinders valdeclExpression valdeclIdent valdeclName valdeclSourceAnn}
  Language.PureScript.AST.Declarations.ValueFixity{Language.PureScript.AST.Declarations.ValueFixity}
  Language.PureScript.AST.Declarations.WhereProvenance{Language.PureScript.AST.Declarations.FromLet Language.PureScript.AST.Declarations.FromWhere}
  Language.PureScript.AST.Literals.Literal{Language.PureScript.AST.Literals.ArrayLiteral Language.PureScript.AST.Literals.BooleanLiteral Language.PureScript.AST.Literals.CharLiteral Language.PureScript.AST.Literals.NumericLiteral Language.PureScript.AST.Literals.ObjectLiteral Language.PureScript.AST.Literals.StringLiteral}
  Language.PureScript.AST.Operators.Associativity{Language.PureScript.AST.Operators.Infix Language.PureScript.AST.Operators.Infixl Language.PureScript.AST.Operators.Infixr}
  Language.PureScript.AST.Operators.Fixity{Language.PureScript.AST.Operators.Fixity}
  Language.PureScript.AST.Operators.Precedence
  Language.PureScript.AST.SourcePos.SourceAnn
  Language.PureScript.AST.SourcePos.SourcePos{Language.PureScript.AST.SourcePos.SourcePos sourcePosColumn sourcePosLine}
  Language.PureScript.AST.SourcePos.SourceSpan{Language.PureScript.AST.SourcePos.SourceSpan spanEnd spanName spanStart}
  Language.PureScript.AST.Traversals.ScopedIdent{Language.PureScript.AST.Traversals.LocalIdent Language.PureScript.AST.Traversals.ToplevelIdent}
  Language.PureScript.Errors.ErrorSuggestion{Language.PureScript.Errors.ErrorSuggestion}
  Language.PureScript.Errors.Level{Language.PureScript.Errors.Error Language.PureScript.Errors.Warning}
  Language.PureScript.Errors.MultipleErrors{Language.PureScript.Errors.MultipleErrors runMultipleErrors}
  Language.PureScript.Errors.PPEOptions{Language.PureScript.Errors.PPEOptions ppeCodeColor ppeFull ppeLevel ppeRelativeDirectory ppeShowDocs}
  Language.PureScript.Errors.TypeMap{Language.PureScript.Errors.TypeMap umNextIndex umSkolemMap umUnknownMap}
module dependencies: Control.Monad.Supply
                     Control.Monad.Supply.Class Language.PureScript.AST
                     Language.PureScript.AST.Binders
                     Language.PureScript.AST.Declarations
                     Language.PureScript.AST.Exported Language.PureScript.AST.Literals
                     Language.PureScript.AST.Operators Language.PureScript.AST.SourcePos
                     Language.PureScript.AST.Traversals Language.PureScript.Bundle
                     Language.PureScript.Comments Language.PureScript.Constants
                     Language.PureScript.Crash Language.PureScript.Environment
                     Language.PureScript.Kinds Language.PureScript.Label
                     Language.PureScript.Names Language.PureScript.PSString
                     Language.PureScript.Parser.Lexer Language.PureScript.Parser.State
                     Language.PureScript.Pretty Language.PureScript.Pretty.Common
                     Language.PureScript.Pretty.Kinds Language.PureScript.Pretty.Types
                     Language.PureScript.Pretty.Values
                     Language.PureScript.Publish.BoxesHelpers
                     Language.PureScript.Traversals
                     Language.PureScript.TypeClassDictionaries Language.PureScript.Types
                     Paths_purescript
package dependencies: aeson-1.3.1.1 aeson-better-errors-0.9.1.0
                      ansi-terminal-0.8.0.4 array-0.5.2.0 async-2.2.1 attoparsec-0.13.2.2
                      base-4.11.1.0 base-compat-0.10.4 binary-0.8.5.1
                      blaze-builder-0.4.1.0 boxes-0.1.5 bytestring-0.10.8.2 colour-2.3.4
                      containers-0.5.11.0 deepseq-1.4.3.0 dlist-0.8.0.4 filepath-1.4.2
                      ghc-boot-th-8.4.3 ghc-prim-0.5.2.0 hashable-1.2.7.0
                      integer-gmp-1.0.2.0 integer-logarithms-1.0.2.1
                      language-javascript-0.6.0.11 mtl-2.2.2 parsec-3.1.13.0
                      pattern-arrows-0.0.2 pretty-1.1.3.6 primitive-0.6.3.0
                      protolude-0.2.2 random-1.1 scientific-0.3.6.2 sourcemap-0.1.6
                      split-0.2.3.3 stm-2.4.5.0 syb-0.7 tagged-0.8.5
                      template-haskell-2.13.0.0 text-1.2.3.0 th-abstraction-0.2.8.0
                      time-1.8.0.2 time-locale-compat-0.1.1.4 transformers-0.5.5.0
                      unordered-containers-0.2.9.0 utf8-string-1.0.1.1 uuid-types-1.0.3
                      vector-0.12.0.1
orphans: syb-0.7:Data.Generics.Instances
         stm-2.4.5.0:Control.Monad.STM
         attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         vector-0.12.0.1:Data.Vector.Unboxed
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         hashable-1.2.7.0:Data.Hashable.Generic
         vector-0.12.0.1:Data.Vector.Fusion.Bundle colour-2.3.4:Data.Colour
         text-1.2.3.0:Data.Text.Lazy text-1.2.3.0:Data.Text
         binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show
         transformers-0.5.5.0:Control.Monad.Trans.Error
         base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: aeson-1.3.1.1:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.Graph
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         dlist-0.8.0.4:Data.DList ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.AST.Declarations
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.AST.Operators
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.AST.SourcePos
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Environment
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Kinds
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Label
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Names
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.PSString
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.TypeClassDictionaries
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Types
                         tagged-0.8.5:Data.Tagged
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
                         th-abstraction-0.2.8.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  ansi-terminal-0.8.0.4:System.Console.ANSI 9542e556da778098d693d4850d7b8f65
import  -/  ansi-terminal-0.8.0.4:System.Console.ANSI.Codes 3f82779a1574ef76084e2c562ad43b8d
import  -/  ansi-terminal-0.8.0.4:System.Console.ANSI.Types 143a0b86b7e220cc7b473da5e9470584
import  -/  base-4.11.1.0:Control.Arrow ce43199b5356a11ee2a8317f0ec30aee
import  -/  base-4.11.1.0:Control.Monad c5f960c67d822497578bffbd3e4c01cf
import  -/  base-4.11.1.0:Data.Char 3e89818e2b8ef1a2cc5393163484da72
import  -/  base-4.11.1.0:Data.Either 39d922b371c4c52d426e9ee66de8371a
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.Functor f522c3501272159820fd6f242510732f
import  -/  base-4.11.1.0:Data.Functor.Identity 9430dcaadd71c129eeb5ca7b963c9b54
import  -/  base-4.11.1.0:Data.List 83dc843e47bfc0c5af51e19c6f3476d5
import  -/  base-4.11.1.0:Data.List.NonEmpty 595ee3baddcadebc4831ea7541427984
import  -/  base-4.11.1.0:Data.Maybe 409c3da2b142470b68be39ce1d97a9f7
import  -/  base-4.11.1.0:Data.Monoid c40cd435d79b84293ce5503253ee6d44
import  -/  base-4.11.1.0:Data.OldList 1b35aa3c6805ff7c8887a35a866fe006
import  -/  base-4.11.1.0:Data.Traversable 7ad4edb9184ea1ae8e73f6b94f115c8c
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.IO 1d5542cc02075c5e948018bfacea89c1
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:GHC.Real b4beb0389ba1ad5d9640aae67848c5d3
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-4.11.1.0:GHC.Unicode 8234c40b59f035e845832a42e8725a00
import  -/  base-compat-0.10.4:Prelude.Compat bb6796186ed35a1d09dc34362a3fc27e
import  -/  boxes-0.1.5:Text.PrettyPrint.Boxes 49de0395c02f08dbf50ec04d019c04fb
import  -/  containers-0.5.11.0:Data.Map 0dbdaec812ef695a364aa6c69e7f7d53
import  -/  containers-0.5.11.0:Data.Map.Internal 0150e210d0ae8df0f3a0669d5e32d8fa
import  -/  containers-0.5.11.0:Data.Set 7d3c64a641be4cacbcd8119445bab919
import  -/  containers-0.5.11.0:Data.Set.Internal 93fa3ef95853aa2a7aadf32d693bd451
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  mtl-2.2.2:Control.Monad.Error.Class df146c18e27154b8df4c8637c59fd61b
import  -/  mtl-2.2.2:Control.Monad.Writer b86905dc6b5d4d3a09dfa93d3ac3bb98
import  -/  mtl-2.2.2:Control.Monad.Writer.Class 69f540e019eada69892c26d267276458
import  -/  parsec-3.1.13.0:Text.Parsec 963cbe7b4116cef91451434dc005a011
import  -/  parsec-3.1.13.0:Text.Parsec.Error 5c35aa426bd1cd52bcab90d9a1e3ce4c
import  -/  protolude-0.2.2:Protolude 2c2d16096c8a60f59f646a3b93b0eb7b
import  -/  protolude-0.2.2:Protolude.List 3a80368167450d7a4360ebf1ea443345
import  -/  Language.PureScript.AST 7ed0e74bfed5b6489b8a5eabab5c0241
  exports: 0d53d92339536cd6d8d7dcfcad8e7c7e
import  -/  Language.PureScript.AST.Binders 9d60985147b34b89300370e810fed430
  BinaryNoParensBinder 0a9649b4372c6e05d173870dfa1006fa
  Binder 50aa153193e190eabd8ac7530e604f9c
  ConstructorBinder a80ed0550c5d3abdd1e6249cec7ebb29
  LiteralBinder fb24b5107abb72eda0b4f926a357d676
  NamedBinder b48e1eb9e717d35392ab81ba6112a0c5
  NullBinder d74abae0f95c6b96e50712c73008469c
  OpBinder 8c4232ee53e2707d427c05940eb3b3a1
  ParensInBinder d5e3e2b30a59f234cee3c52dcb18b9a6
  PositionedBinder 882f8081b0418fe44d4a7e237a20b9bb
  TypedBinder f780e44b8446316aee6b532b3afc4341
  VarBinder 2a223807b33e6f190799aea12e8ed5d7
  binderNames 02df671f437cb8e44f39ef8bc1273f3b
  isIrrefutable 740c816cedc66b3e1cadc13999353f80
import  -/  Language.PureScript.AST.Declarations 568e046fbf27b243bfc96f09017d4782
  Abs d07c7c6c44b48a3411184d34629a601e
  Accessor efce1a21efe3a6d2f322942575a5ad70
  AdditionalProperty 92ad56b21da7218a29c9d508e9576e62
  Ado 37d00c1fafdcb3ef01dc19068c5ac23a
  AmbiguousTypeVariables 2fa7b55254155c8d312143bec49cd38d
  AnonymousArgument 00cfc7b8f07b27936a2121d4b1833126
  App 60282620a1433a146ffafd0d8773af87
  ArgListLengthsDiffer 019d2f571964fba17266bbfbb0af3355
  AssocList 39fcde5015a592f021697e813166a819
  AssocList 6bb793796adb411b63074cabb1cd2dc5
  BinaryNoParens 74f8609dfb4850c239012b6c7f3f2502
  BindingGroupDeclaration d3c1d83dc1fbac7412bbc6e3b0fc8e06
  BoundValueDeclaration 2a1064417e2b13bd8230beec138bd3f3
  Branch 4e0ab8be808547ff6ab7f7473734521d
  CannotDefinePrimModules 0d33d937665b0004f64495328849f2bf
  CannotDerive 12002926ebee8124afe483ac0457151e
  CannotDeriveNewtypeForData e9efded074a416097f15509db0395634
  CannotFindDerivingType e0be076bb1ef5200dc1e3b5877ba9eda
  CannotGeneralizeRecursiveFunction b6644cd3878a7a4da0ce874c9f363ed2
  CannotGetFileInfo bccd08da8b44786e185afb19001c7ae6
  CannotReadFile bf83034dadcb55abb40fc0b3ef02c899
  CannotUseBindWithDo e532c8b51d49307ef5fc5071eccea469
  CannotWriteFile e62624cd56ba2286c2e8fb199761c478
  Case 26360a43049b71a59ced6dc5180ab8d3
  CaseAlternative 53d0b5fb91e3184ce5b575a7cf70b18d
  CaseAlternative b31d94d0c7b90700d40f9ba6ec420e41
  CaseBinderLengthDiffers d91749d5a8d6fc0a15a8901f67d9fd97
  CheckHint c2ffc8a57fd817a43cc11b3dbeeb0e21
  ClassInstanceArityMismatch 44d7fbf748c78a19cc298679fb77be43
  ConditionGuard 2db62e1fae4ae7a464999119c33e7329
  ConstrainedTypeUnified 943ab40382b61b5ceb1eb9c125dff42b
  Constructor bb7c3f03ee8743dfc68d80ee99f8c1e3
  Context c827e63ac539a5076a60fc8c74223610
  CycleInDeclaration 67af7f72c42808d9f19fc5097d3ab5da
  CycleInModules 5b05ad783f47450cdabd6fc8a4ee82af
  CycleInTypeSynonym b85c61fb17e7fc58efc369fedcc4cc8b
  DataBindingGroupDeclaration 6581515de193582450a8e6e01c902ba4
  DataDeclaration db5935397ffc86d7f21188808af5170e
  DeclConflict cb5b52b3ab1024c0145e35bbf5573c65
  Declaration b31d94d0c7b90700d40f9ba6ec420e41
  DeclarationRef 9de74e8b46bfd07e044a72617cc5da5c
  DeferredDictionary 7a56aac6dc1b7f4256df8373658d67a5
  DerivedInstance 75fe0998f1f44a98f35c594b934817d5
  Do b8fad0bebe96a0626d89acbd41a552b3
  DoNotationBind fec991d5ab40627d0cce74b30ebfede6
  DoNotationElement b31d94d0c7b90700d40f9ba6ec420e41
  DoNotationLet 6feff6a200614ac607daa94006ad3ed5
  DoNotationValue cc0f2bc0eef838fad83abc6d1864b17c
  DuplicateExportRef 4958fdce9a7a00cfa0d12002366d5ada
  DuplicateImport 91ee875abde4688d127d09cb7341865f
  DuplicateImportRef 986275ea0ced79279cbad170298f8188
  DuplicateInstance 750245cb65a52c2a8f29060cb7c2618e
  DuplicateLabel 5e790f3cd6611674118c2e08c4ff0702
  DuplicateModule 302ea58f4e4496b0b1aad98ae25a4e07
  DuplicateSelectiveImport db882007c51946da07b0a477057869db
  DuplicateTypeArgument 19423f81bc06d4682c7a1de6fdce8ba8
  DuplicateTypeClass 8ee16a03aebad4b4671ac3817933ea5a
  DuplicateValueDeclaration 0e2ac1d3629e07831ae753120e9cbe07
  ErrorCheckingAccessor c2e6f9395c9189bd2784d578603bc166
  ErrorCheckingGuard 6e7525bd1f3f19356433a7f67b8e0031
  ErrorCheckingKind 3b40723499a9a90b36a4b2b947609173
  ErrorCheckingType b88eb4d9d12f930534ef339bb4c2aa4a
  ErrorInApplication 9289ca1610bbf320a346e9d84ec657ec
  ErrorInBindingGroup ee8574f2c7e361c2e45ea26dfec4430d
  ErrorInDataBindingGroup 99b4fd674b2e0bec75114d470336fc8c
  ErrorInDataConstructor 7de25176b1816893ebf5b16d3ec80e28
  ErrorInExpression 358d86f3d7f781558b2b7efc3f66ec3a
  ErrorInForeignImport d9dd8101c1f4f9ef49d5302db30c000c
  ErrorInInstance 1865dd1ca2c6437b6ff5256c6f91770d
  ErrorInModule 30c97edb8a43314700377edb3b90ccc8
  ErrorInSubsumption dd3f47392501540365e39b4f0f23ab70
  ErrorInTypeClassDeclaration fe41cd6558f6f50671b4603fbc076d7d
  ErrorInTypeConstructor 8b85de840fa185c242b0934e147ca3b9
  ErrorInTypeDeclaration ae6d7c8f274e48295c5b6b770128b277
  ErrorInTypeSynonym fd846cdb7cd01d77b178a7caa7bf1369
  ErrorInValueDeclaration 96315a484ea1e4913f77262a86d2ad0d
  ErrorInferringType 8e1de70d36b8960f0f9daa9a0f4c3906
  ErrorMessage bc889ae8d74a01dbbd95e220faa4631d
  ErrorMessage cebd18718f7c34278cac50a2f0ab0386
  ErrorMessageHint b31d94d0c7b90700d40f9ba6ec420e41
  ErrorParsingFFIModule d3c01586d758e8345e918afbfb471538
  ErrorParsingModule 17f7ea545193606e314be46edd7a48ba
  ErrorSolvingConstraint fdde8ff66aefb0c3dbf6601383befc4d
  ErrorUnifyingTypes 2fd0706e76b416d4f08065799b10740f
  EscapedSkolem f37e734bbe28d00cd39992993f1e8b25
  ExpectedType 631de33f66ecc4d30e2234356694588b
  ExpectedTypeConstructor f67cdb09228fbf526d1f675d204e6f0f
  ExpectedWildcard bf76baa092912cbbeedfcb0c2b60a825
  Explicit b1c38eaf46155af7f2da52da8f5861c4
  ExplicitInstance 566045ea839404c561f5bf2109dbe534
  ExportConflict d314b1811c95dfbea35f529d02d2cbae
  Expr b31d94d0c7b90700d40f9ba6ec420e41
  ExprDoesNotHaveType 8ceb9887d0f4ac63b00d62ec5a1bfa9d
  ExprHint 160e085a2cf3bb3c5f971c117bec8a4c
  ExternDataDeclaration 55a53b09584ed2ea4b573ea27aa0f4e4
  ExternDeclaration 4969f865c6e08f5324b31f68ef85d043
  ExternKindDeclaration fdf7ad04c416fe681db015f254431a3c
  ExtraneousClassMember 5d936d2bb2c089cee8bf4ba501eb81b5
  FixityDeclaration ae83bbbeb0bf1b73467c4234bd14b77f
  FromLet 90dae67e7b749d252ac78837cb39cc5c
  FromWhere c84b3c6b3ef5e335709e19ad3dacaa71
  Guard b31d94d0c7b90700d40f9ba6ec420e41
  GuardedExpr 27042b32d879f10c681888a144cccbf4
  GuardedExpr b31d94d0c7b90700d40f9ba6ec420e41
  Hiding 8116598858a7036038611cde115d4da3
  HidingImport 1b9cb459f7de05f122cf213e908805ab
  HintCategory 5a4eef1c21520364cf5b424feb83c38c
  Hole e9e194ceaad4c99fef537ec8e2bb0f3e
  HoleInferredType a1ba3e2a6f31ea7404f9d606f8065b52
  IfThenElse 861db5e7c442fcad4ef6b09852058a52
  Implicit 850358a1da5071d49098050ad7d1227d
  ImplicitImport 407208787f8b3b3133edd0bf43c50c67
  ImplicitQualifiedImport a8d651a1fdeef948b6902269fdbb4bd5
  ImplicitQualifiedImportReExport 1d16f13998b0bc8bbf53ada4f4ff6284
  ImportDeclaration 0c2bc2f3ca892343473f34859c93a6e3
  ImportDeclarationType f900e8c96b49d573d3e54286bc8fd980
  ImportHidingModule bb6be7a0509de1b07063e99736b70b09
  IncompleteExhaustivityCheck 8aec391e679b45efa2075ff627fff071
  IncorrectAnonymousArgument 65c3c48d2ef21e705e4d89cad034f314
  IncorrectConstructorArity e3a0546a82bede0119ac2ad5d24cc14b
  InfiniteKind fa55e1c76dbd360e4681ee3fa0d2626c
  InfiniteType 9b34f8dfe13790d8f0edf3d13c627296
  IntOutOfRange 36c1c825bcc504de2916d16a29fed316
  InvalidDerivedInstance da339179d662ee730093b29e0416fcbb
  InvalidDoBind 5e7b61f2abd12ad0978f887d38573fd2
  InvalidDoLet aad7677b53d7dfae4bf945a587ec663b
  InvalidFFIIdentifier 06849bd73a647feca66eefc4bed14bc4
  InvalidInstanceHead 4d5bf2cabde37a614f5db3fb2deec801
  InvalidNewtype 0b00ffd386eaec0febd2e61753f3a11d
  InvalidNewtypeInstance 6165c7d79e3531500278edc285895e77
  InvalidOperatorInBinder b83c65663c2d922ee8fabb93f0ee69ec
  KindHint ed1823d6984f94b920e88d815b7a3d36
  KindRef 8245863d9321690e594853e7ff0fdb63
  KindsDoNotUnify 1b0f77113f20fe072593f35f7c937472
  Leaf 9a42cb9f6c50a64f9ad877bf952e0413
  Let 1e154f741d98347f87a436fe079b9677
  Literal 25fe050a9db328cb74b9c2f7e7994889
  MisleadingEmptyTypeImport 14b3a95421634e7af9ff811f42f6bd7d
  MissingClassMember ac5d6747c4a4d6129994f9c5d0b093ad
  MissingFFIImplementations 7dce9f6cf4969010ad8633867a328b17
  MissingFFIModule 17f063658d2d06bebf4df38e5ac29537
  MissingNewtypeSuperclassInstance d4fc49ab972aa91bee2af36ad7e63bee
  MissingTypeDeclaration c833a1252ea3267668f51cc415751668
  MixedAssociativityError 0d6e29625cc0749462ef88e6a94a5f08
  MkUnguarded b86897bed7e8aa9bc4f5498c0c74ad91
  Module b9e5d519f3251f7053b581e4ecd9e6bf
  Module 7cf4b96f7d4b51b446726a099ab87bb6
  ModuleNotFound c101418e68b6f071d1da8cea61bf23ae
  ModuleRef 9bebdcb4233f1d570107d6e7f75034d7
  MultipleTypeOpFixities b286f89f3b7830b506cfd4fff2da9fcb
  MultipleValueOpFixities ae9ab6180ec24b98839567ecc722eff4
  NameIsUndefined 9d817d271b064b6e392acd388ca5c97f
  NewtypeInstance eefeabcd731381919d00bd863d5e75f0
  NewtypeInstanceWithDictionary 2949dae5d307350f24e9fb4b0ff79def
  NoInstanceFound f67a7a96bcbeebf6527502254c020c6d
  NonAssociativeError f1b45362b7b0e203d7fe62782d6f32b6
  ObjectUpdate 6ecfa64620245159f62232366ffa0b51
  ObjectUpdateNested f0f594d942338e4c5632d561472ff5f5
  Op 4d49590d9b87d07686937c6859e5ae47
  OrphanInstance 81603c4e765dea52b74132e7e91dfcb3
  OrphanTypeDeclaration 7a37da5d0d9a15bd3acfbfab7717d8a1
  OtherHint 3abd0f602ec43b181187e9db020e01e6
  OverlappingArgNames a455bf72377dcdab235dff5dee7c7884
  OverlappingInstances d0861719ca18abc4281df0691195db8c
  OverlappingNamesInLet 3e4ae571cd30e5429fd2ceab0386c54c
  OverlappingPattern 3a1f9d572a63a674f5bbb753e8324d77
  Parens d8b532f50bb6822d72d510f7cf291c86
  PartiallyAppliedSynonym 4f8cf2b7993745234bb2d43286d85d6a
  PathNode 927a4a1acceccbe5ab77b4ee8603376a
  PathTree 1ec618e92677df1c0945827efcbe201c
  PathTree 927a4a1acceccbe5ab77b4ee8603376a
  PatternGuard 8f00c4347b1f607cbe6ab09d14685d9d
  PositionHint 4b7438781ab1578c6eb626a0f664315f
  PositionedDoNotationElement c12364668936cfdcd1fd6a9966e8f1cd
  PositionedError 1a06bb4c398f7c5e8de6f5fb8fd37088
  PositionedValue ce9f35ccf631ea46c29b12e823f5cdda
  PossiblyInfiniteInstance 8d4d3557a0758bed20a87e515a1110c1
  PropertyIsMissing 237b3879f5f204ab58e49865a12e1003
  ReExportRef f67e2c43a2cbc62a4a950b387e3ed943
  RedefinedIdent 4529a4115663255b4154a1bfecdd69a0
  ScopeConflict d7365087342503d7bc453cbf94362f04
  ScopeShadowing 65a89bf3e4004f4b48e4dd098baecdc9
  ShadowedName 7f09e2812f01f70871eec84f8f816b13
  ShadowedTypeVar d4a3c585e98afd60b41ec6774c6409e8
  SimpleErrorMessage 33c1a345bb3f2be69a13531f80c78fbd
  SolverHint 40f9b5a80fdd6026b1e765c2b4803cd8
  TSAfter adbcd96638ff0f958a5cce3bcdfbd229
  TSBefore c064af45c24dfbb0bcb67a82955a8c81
  TransitiveDctorExportError a5175dc7214c264d90a6faf93b234f92
  TransitiveExportError e29bbd988591c5392e7ebded7eda7181
  TypeClassDeclaration d4771a111b012cbefca253f911afd776
  TypeClassDictionary 9f4047c1c1ff9eeef0292c33d9ecb17c
  TypeClassDictionaryAccessor d00df144de09556bbac171169b1608a8
  TypeClassDictionaryConstructorApp e1cd14c07fae64c9cd8679680a21319e
  TypeClassRef 93a0e32770563d43fa3f04289a54725f
  TypeDeclaration a12f822b0dbc597658a7d1e27db5ac22
  TypeDeclarationData 99fd3317c24e020d90e98686ac5a9cec
  TypeDeclarationData 73dd7603bbe7fadce9f5fc48c4dc58fb
  TypeFixity 64291ec6ff5adfe62c3609f4ee3518e7
  TypeFixity 0d8e4197926d6b0160725c9c154c1438
  TypeFixityDeclaration 442ba50b491e46b095a0fd0218f236ad
  TypeInstanceBody b31d94d0c7b90700d40f9ba6ec420e41
  TypeInstanceDeclaration c99b2ac93a5feb1209c747921a9e548b
  TypeInstanceRef 850b5eee032f7eade911f65aaca47804
  TypeOpRef 9ae3d7bbee64a9887c8d95defd65b0b0
  TypeRef f23e4bfa1c94ce55e9357e5fb97176c4
  TypeSearch 9f93487d1a91f557ef94e379878c19dd
  TypeSynonymDeclaration b022b78d38da14b3619ada244eaf9299
  TypeSynonymInstance 99b4ebaadfb28ad228c47e4fdf69dc0e
  TypedValue d9e4565826b9abbfd5d9b0aba42f2e58
  TypesDoNotUnify 4a76f9bf2ffcba41714628ed0a8b3bf6
  UnaryMinus a219b7d00bf9c8706678ac90686eba33
  UndefinedTypeVariable 618567e3392059402b3fa9282160ade5
  UnknownClass 22302842385f514b8ad289bd1b19e402
  UnknownExport 5ba63d23280331d135bc79a6cc7f51db
  UnknownExportDataConstructor bf285148b2ea1fa2c8279a986bc8c64e
  UnknownImport 7980c76c2367bb4a76296906eff5eb25
  UnknownImportDataConstructor 6171e2d6f06e91b139eacfb3e940f789
  UnknownName 0628ac315dcabeec4442b9d03a3d0b84
  UnnecessaryFFIModule cbe3ee04a2fcfa9a3d89e22bc85e696f
  UnusableDeclaration a266f015519ca268789c0cbc1b245e52
  UnusedDctorExplicitImport 072cd589c2c4044d86ae240bc4154879
  UnusedDctorImport b9e1f7e8e169a2e719c139ab2026c33c
  UnusedExplicitImport 1a56a0421aab0fb41bedab47a8e42a4f
  UnusedFFIImplementations bbc70805a421143cbfb5176e99ae94c5
  UnusedImport 6c3a94947383a5e30fee3bbf986d90f7
  UnusedTypeVar 135de1b81ee1032211dd3f613ddd0d52
  UnverifiableSuperclassInstance 7c6c4372b3eac8d044923bdd87fe0968
  UserDefinedWarning 5946e75cb44a6c9c8eee94cd5ed4789e
  ValueDecl ccaaa682babb730c1361bddf2c5eee25
  ValueDeclaration 12e8a69dfeaef3b3a7e4d8343e12683e
  ValueDeclarationData 72033fd9413bf8066fce62a304ad15a4
  ValueDeclarationData 0c2d915175f1072d8eeca07af2b73e20
  ValueFixity 521665e029a7bb45169e478d9aced723
  ValueFixity a6d87ffa7a2578d28c7ac8f367bf0cf5
  ValueFixityDeclaration eb9c8f0bb082690f8aa4e758b5751212
  ValueOpRef 340c88beba94c802cc00b112ca1ce8ae
  ValueRef 984b564c7d121e5297a91fc424d0970b
  Var 0202d242cce06e67fa6944b3c05a8982
  WhereProvenance 65c0e50d69c9739c7a05491cae312524
  WildcardInferredType 3ad94b9b99330b1babbc72e2ccff856a
  addDefaultImport 35ff328750a3ec4b6f57a72d359a0bf6
  caseAlternativeBinders b31d94d0c7b90700d40f9ba6ec420e41
  caseAlternativeResult b31d94d0c7b90700d40f9ba6ec420e41
  compDecRef e6b9ede356764ec70bdeb002d83e4f15
  declName e5f550546a379316c2a828bc4bea491c
  declRefName 088fcb4e3edc129f809097a23b6de3c2
  declRefSourceSpan 48358271e032660f4b36f2c8b2ccb034
  declSourceAnn e369e234b56621b5ead544cee7b1e586
  declSourceSpan 901cd3587e8d9e55060bf90daca551d7
  flattenDecls 49bcc2e170bd98aa1cb4c655d447837b
  getFixityDecl d7bc7564b568f06a5f232daf0d83a6b1
  getKindRef 169d4cac4d05cba42539e2862c95b3db
  getModuleDeclarations 063e7db4cff83aa459c1c17d5048f5d2
  getModuleName 578b1d81b22244b5aeca14680df8f57d
  getModuleSourceSpan 1047991bfe9f810dab3d8fd03d3b2cf6
  getTypeClassRef 4a5cb731417baeb982ffa07d84f048ab
  getTypeDeclaration 59a0ca54505755f1fa0fc34ff5d66706
  getTypeOpRef c807c0d47029b8283509ed31e6fc3ff1
  getTypeRef 42ae9903e046664143824d50598f73c8
  getValueDeclaration ef64f0b12c753d90369287393976ca51
  getValueOpRef be7af64c7f2421e5081867b94579e0a9
  getValueRef 94912d263388bc977447f55c96bc921e
  importPrim a2ce5f6d1eda15c678f4b02aae653c68
  isDataDecl 4f20142d2169f2dcb68971dbb50efa1e
  isExplicit c43a0a53610d48db0933cf215a04e210
  isExternDataDecl 3ad8aa11d561a89123c76ef60c9d372c
  isExternDecl b3bd6c91aaac0522ff3c259e7d5beccb
  isExternKindDecl a89dc87707d299fc373370f6631a2085
  isFixityDecl b592576afb9be763cc362039fa8b14a7
  isImplicit 9f343b64df822f92c07e3199a3b2fded
  isImportDecl 1d21ef2480c9e223de992229b1d2d9ef
  isModuleRef 8269dde3a1e3ea44b18ed7f930f87a16
  isTrueExpr d58fb92abf9394b13231c5d40f42232a
  isTypeClassDeclaration 2dffac571768d89c1520ba80ce6a50d9
  isTypeClassInstanceDeclaration 156b7bc741b880eb775ca32915c80061
  isValueDecl 882e68af7a310fc848b5e94c3ce09b47
  mapTypeInstanceBody 1826036fea52f25657e6111625d52b7a
  onTypeSearchTypes 26ed5ea6cf9bf67b20006f6e76c30b8b
  onTypeSearchTypesM 4d5d253a595efbf2d353476a96d73de9
  overTypeDeclaration b9a1a9bce63f1924055aa891a13e92a9
  overValueDeclaration 9810c7d022732f62d93cb27952904bcd
  runAssocList 6bb793796adb411b63074cabb1cd2dc5
  traverseTypeInstanceBody 0b0b6c668555518d768d4dfdaf4d710b
  tsAfterIdentifiers 9f93487d1a91f557ef94e379878c19dd
  tsAfterRecordFields 9f93487d1a91f557ef94e379878c19dd
  tydeclIdent 73dd7603bbe7fadce9f5fc48c4dc58fb
  tydeclSourceAnn 73dd7603bbe7fadce9f5fc48c4dc58fb
  tydeclType 73dd7603bbe7fadce9f5fc48c4dc58fb
  unwrapTypeDeclaration cd3190b939e5767c5dbe58848d9227e3
  valdeclBinders 0c2d915175f1072d8eeca07af2b73e20
  valdeclExpression 0c2d915175f1072d8eeca07af2b73e20
  valdeclIdent 0c2d915175f1072d8eeca07af2b73e20
  valdeclName 0c2d915175f1072d8eeca07af2b73e20
  valdeclSourceAnn 0c2d915175f1072d8eeca07af2b73e20
import  -/  Language.PureScript.AST.Exported 2444000289cac04d19a71464030d0c24
  exportedDeclarations ee1a287c153102856a0d13b5ba61c74b
  isExported bfe6c67c45e2549140f143ba88e6412b
import  -/  Language.PureScript.AST.Literals 3440d35205601002007fae6139f2b416
  ArrayLiteral 5b23e15244983cff3a7817389b5e2212
  BooleanLiteral 242415ff3d034091eec7910a2e553d43
  CharLiteral 7acabe059e85dca07eb45a9c79e63a50
  Literal 9e9b6c02bfac90a56d53685e90c059b8
  NumericLiteral 9e8d18add8f8b3f13014ed6441c4254a
  ObjectLiteral 6a79fd56232b94e65385c3eab269a6a5
  StringLiteral 7a0f920d0282cd028b99b76b270f4906
import  -/  Language.PureScript.AST.Operators be736e316462ef3abce53315e7361a17
  Associativity 17f2097426b72eb751701f86cd97792c
  Fixity b54dc78c2a40564b4aeb547cc4004cc2
  Fixity 17f2097426b72eb751701f86cd97792c
  Infix 48da7304e58a5ef64ef55f219a639205
  Infixl c355232652b8d07dc6f4cc3d968cd69f
  Infixr e374de6c2504281f30a71346ea589bed
  Precedence bcd61162407eaf77832b70b749dfb2a6
  readAssoc 17f2097426b72eb751701f86cd97792c
  showAssoc f54fef35940752b58d0952abd939cff2
import  -/  Language.PureScript.AST.SourcePos b3f67f807f2dce79528bbb15bd9c7104
  SourceAnn cab2aecd85882b7f3973d54e49bcad4f
  SourcePos b32bf71fd97066221fb5294f6129d546
  SourcePos 73c071552214b3f18e94970349d3affc
  SourceSpan 80f1a6322ef7d45c295094f0b69c34ea
  SourceSpan 73c071552214b3f18e94970349d3affc
  displaySourcePos 2b1fba7cce08e66b9db97bd18aed510f
  displaySourceSpan 86fb202939b4257c0979ce3b310133e1
  displayStartEndPos d3293742657e1c673712c890a1911c16
  internalModuleSourceSpan 5f91a656f056fa441b3ec6940306d87a
  nullSourceSpan 24686a17cbb8e08b60ddb2b502e97316
  sourcePosColumn 73c071552214b3f18e94970349d3affc
  sourcePosLine 73c071552214b3f18e94970349d3affc
  spanEnd 73c071552214b3f18e94970349d3affc
  spanName 73c071552214b3f18e94970349d3affc
  spanStart 73c071552214b3f18e94970349d3affc
import  -/  Language.PureScript.AST.Traversals a3d1a9b4309f1aa3055f23e3fb101c5e
  LocalIdent 2663dd39c5a9f4f47625aeed98b864bc
  ScopedIdent fd1c63950c5ecf1a17f0b7742333850b
  ToplevelIdent 49ddb46e2087510f9c9e30bf6ac118cb
  accumKinds 34a02c7a8bb803687d93352bdff88b6a
  accumTypes 57de83595e87d9fa4f8615bb6ea4d7cf
  everythingOnValues c357e31af2a9709a2f6a4005be39c3f1
  everythingWithContextOnValues 96100f22de180f7be1760582c2409ed4
  everythingWithScope 299173827d0ece19df542f918941d0da
  everywhereOnValues ad4625d6eef7aa4388eb405da834d508
  everywhereOnValuesM 01a8d95490ca25e5157bbf2f4092d320
  everywhereOnValuesTopDownM eeb56e921678602b009af2041c8eba21
  everywhereWithContextOnValuesM 4fdd13188200e3f571550d8ad6f3de86
  guardedExprM 78bf5315840d518118f221b5678e37e0
  inScope 2ecdce1893ec3507816e8bc88c2fcb29
  litM f0cfc068760981c7cbd590be7d721279
  mapGuardedExpr f3496f057922e0cd7b9ce09305bf9712
  overTypes abfbcc4ac387d3565fd77fe0109b088c
import  -/  Language.PureScript.Bundle 850a0b3ac8794bcad3be1a1d23d53dc5
  exports: 436e6291784d08551205d74d8d15119b
  printErrorMessage b2aa4b138819780530762eb4c8f5b82d
import  -/  Language.PureScript.Constants d290cccb0db8657cab5f1253ab0da1ee
  exports: cd83a0f5b6591e5c66c598e34359260d
  Discard 7e65fafd8144b93bb486da8e16502b32
  Fail 949a6bc6c2802828e29ece08730c11c3
  Partial 03a896770e007ee2c219cc94f0cd9c4c
  bind 4a7a15c22b3ad4640c32dd3fec5a3581
  discard 4dca070a3b9cb9120189cb280acbec51
  typeError 94a173c1579f7d0f54304ec190a8c730
import  -/  Language.PureScript.Crash 1bc11bf824676e9581610d0d05d26761
  exports: 8a971f39d6ef3f27956f413640cb0a24
  internalError f3db7e23c75878c9d13888d6d114012d
import  -/  Language.PureScript.Environment 31667499b7017b19998bb405474fbe93
  exports: 56b1ef0ac6132b4c113ce26a807dcfb6
  kindType 48cea3ba64f9da0332e747a1d7b5f120
  primSubName 3d90bbc2bc70b1d013f6cebe8acaa937
import  -/  Language.PureScript.Label ac3bc484eb8b3b2ccf228cc34cdb537c
  exports: 62e65d694c1e96c81750d9cacc93e898
  Label 6f46d05ebbc78fa0ba91a5af362adcaf
  Label 61523a5f4fc28a2f2f6f00cce17ce1bb
import  -/  Language.PureScript.Names b3bf151840f3e8f2eb61eff186432886
  exports: f7f3503d20957194bda83c16bb5f1288
  DctorName 953e2be7c584ad49e8fe105d218f14a0
  Ident 0ccd7f2221de64569e50634367691253
  IdentName 5b06dbfa684a1a4686ae5dc3b60a0a36
  KiName 3988b2e6728e13d6e386f74a6394b09e
  ModName 3aadbf737116de1d7bcb446bea8a25af
  ModuleName 5a70062bbdf29e6dc659ad8bf5326b50
  Name 184494d9e734645f374e2a0fce32bfac
  Qualified d600a7f01c8203cf5504999de99c923c
  Qualified 5a70062bbdf29e6dc659ad8bf5326b50
  TyClassName 21009befdac7827e5cfc4e5a7606bd0e
  TyName 2de556166e59a0005c7143bf3b600f7e
  TyOpName 66cc4d214f55e6f0f298e52eab8013ac
  ValOpName f03a1a616a24e6d18322d9bb9fa39c73
  disqualify 3e7b8117c7613f1d74fadc5d62b59f54
  moduleNameFromString 79d26c792a293f252a003f5d0f01ddc4
  runIdent bc5cc3d3ba9d105c169eb6038c65d1a8
  runModuleName e07c63fa3ece350e6976663ef993edbb
  runProperName 29f101e190cc99df85623423972e606f
  showIdent 5c662c2cc0373f386893e9287ea83382
  showOp 6a554085bb7bff6e6a827b374081272a
  showQualified 3c507c3595affc1e0cc61d34a906a736
import  -/  Language.PureScript.PSString 29492f728997dffadb84d1bf161f2ce4
  exports: 41608caf7cc5b51f34de641c9952ab6d
  decodeStringWithReplacement 98feed7d81993f53de6fc81282cb761d
import  -/  Language.PureScript.Pretty d19d6f9663600b870448c57cebe98633
  exports: f61433a35cb96509f8170d78b32aff81
import  -/  Language.PureScript.Pretty.Common 3b6e69c173d325d7c9be0bb0169f3188
  exports: 3b669d7e8560d3ed86c28ef1f72a89c4
  endWith c024da0e558fab56fda4403ce0774be4
import  -/  Language.PureScript.Pretty.Kinds 61520f24125a18b860156c88cb953ccd
  prettyPrintKind 7cb5c666396112b6de1d2e646e595fab
import  -/  Language.PureScript.Pretty.Types 55abc63b15198d7c72c92dad86c3e447
  prettyPrintLabel 71e2d247b7c00b68530ecf063e33557c
  prettyPrintSuggestedType fa7c2411f759337e68ac258ccfd09b39
  typeAsBox b9289a1bb3ff026cfc8428a45c50c758
  typeAtomAsBox 090342212fcc8db36f243e485493a995
import  -/  Language.PureScript.Pretty.Values 48f32366222884d299dd29a7974ee349
  prettyPrintBinderAtom 414cc10e0c3acf18ca62d230d8340915
  prettyPrintValue cf54e4c77d213a9b5c9bce6515f0b46c
import  -/  Language.PureScript.Publish.BoxesHelpers 9952777b94bb2206cc92c72df1505c35
  exports: f3b36e9133bcb8776cbc4bce82b32397
  indented e4dc94d9fc2e61f790144b771ba45ba9
import  -/  Language.PureScript.Traversals 0b1167883a6d6cc72496ff4af9cd7535
  exports: ff3aac3cd7b378c02751a42ba037de7e
  sndM f92d028593bfff03fd7f7a06605574ae
import  -/  Language.PureScript.Types 74562e642f5297557b3a23aac7819ad1
  exports: ae97bc75fcebc59f59c970736847a827
  Constraint 07ef72cbe41926551b2da51008274cd5
  PartialConstraintData 31a7ae401324c5057e0785a5adc615cd
  RCons c8b1a363e575e040360112548c9c1bd6
  Skolem e2f87ac818d8dc245fc6ff263c6e89ee
  TUnknown 39441d842668db3aca11ba64b9f08b2c
  Type 93223f8afa90d0facc05a03f863dc72d
  TypeApp 8aa2c93426facb8054d5caf77ff9d922
  TypeConstructor 5e1c42d22ac701f08c049fde0171d9ac
  TypeLevelString b529cbddb07085442fd8755c41cb42eb
  everythingOnTypes ba4f3716db899e239fbb16fb1fa82a8f
  everywhereOnTypesM 46428778ed53c5878c6229be3528079b
  overConstraintArgs 7ca378c5ad28e960c2839b69cbfa46a6
  rowFromList 9f93289e7d64c25344406096f6428fc0
  rowToList 9d77c0b5f0cca3b051e88fcf65501542
import  -/  text-1.2.3.0:Data.Text 7daa7e6c9b39d8cc1679e5ec5c64d2be
import  -/  text-1.2.3.0:Data.Text.Internal 30a0a123f71f63b26cd34c6b24f23411
import  -/  text-1.2.3.0:Data.Text.Show 3b4b6fb2985a731022d67f636682da2b
import  -/  transformers-0.5.5.0:Control.Monad.Trans.State.Lazy bb07ba19cd14893d125b163b03c16c98
ad1de73a1d5a6b0ccd9657dedebc94f3
  $fMonoidMultipleErrors ::
    GHC.Base.Monoid Language.PureScript.Errors.MultipleErrors
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Errors.MultipleErrors
                  Language.PureScript.Errors.$fSemigroupMultipleErrors
                  (GHC.Types.[] @ Language.PureScript.AST.Declarations.ErrorMessage)
                    `cast`
                  (Sym (Language.PureScript.Errors.N:MultipleErrors[0]))
                  (GHC.Base.++ @ Language.PureScript.AST.Declarations.ErrorMessage)
                    `cast`
                  (Sym (Language.PureScript.Errors.N:MultipleErrors[0])
                   ->_R Sym (Language.PureScript.Errors.N:MultipleErrors[0])
                   ->_R Sym (Language.PureScript.Errors.N:MultipleErrors[0]))
                  (GHC.Base.$fMonoid[]_$cmconcat
                     @ Language.PureScript.AST.Declarations.ErrorMessage)
                    `cast`
                  (([Sym (Language.PureScript.Errors.N:MultipleErrors[0])])_R
                   ->_R Sym (Language.PureScript.Errors.N:MultipleErrors[0])) -}
ad1de73a1d5a6b0ccd9657dedebc94f3
  $fSemigroupMultipleErrors ::
    GHC.Base.Semigroup Language.PureScript.Errors.MultipleErrors
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Errors.MultipleErrors
                  (GHC.Base.++ @ Language.PureScript.AST.Declarations.ErrorMessage)
                    `cast`
                  (Sym (Language.PureScript.Errors.N:MultipleErrors[0])
                   ->_R Sym (Language.PureScript.Errors.N:MultipleErrors[0])
                   ->_R Sym (Language.PureScript.Errors.N:MultipleErrors[0]))
                  (GHC.Base.$fSemigroup[]_$csconcat
                     @ Language.PureScript.AST.Declarations.ErrorMessage)
                    `cast`
                  ((GHC.Base.NonEmpty
                      (Sym (Language.PureScript.Errors.N:MultipleErrors[0])))_R
                   ->_R Sym (Language.PureScript.Errors.N:MultipleErrors[0]))
                  Language.PureScript.Errors.$fSemigroupMultipleErrors1
                    `cast`
                  (forall (b :: <*>_N).
                   <GHC.Real.Integral b>_R
                   ->_R <b>_R
                   ->_R Sym (Language.PureScript.Errors.N:MultipleErrors[0])
                   ->_R Sym (Language.PureScript.Errors.N:MultipleErrors[0])) -}
a02feb1af3ed1f870e105c7581d71512
  $fSemigroupMultipleErrors1 ::
    GHC.Real.Integral b =>
    b
    -> [Language.PureScript.AST.Declarations.ErrorMessage]
    -> [Language.PureScript.AST.Declarations.ErrorMessage]
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ b ($dIntegral :: GHC.Real.Integral b) ->
                 GHC.Magic.noinline
                   @ (forall b1 a. GHC.Real.Integral b1 => b1 -> [a] -> [a])
                   Data.Semigroup.Internal.stimesList
                   @ b
                   @ Language.PureScript.AST.Declarations.ErrorMessage
                   $dIntegral) -}
f5ce61e445e04407a253c0b2bb946756
  $fShowLevel :: GHC.Show.Show Language.PureScript.Errors.Level
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Errors.Level
                  Language.PureScript.Errors.$fShowLevel_$cshowsPrec
                  Language.PureScript.Errors.$fShowLevel_$cshow
                  Language.PureScript.Errors.$fShowLevel_$cshowList -}
f5ce61e445e04407a253c0b2bb946756
  $fShowLevel1 :: Language.PureScript.Errors.Level -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Language.PureScript.Errors.Level)
                   (eta :: GHC.Base.String) ->
                 case ds of wild {
                   Language.PureScript.Errors.Error
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c1 :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c1
                           n
                           Language.PureScript.Errors.$fShowLevel4)
                        eta
                   Language.PureScript.Errors.Warning
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c1 :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c1
                           n
                           Language.PureScript.Errors.$fShowLevel2)
                        eta }) -}
cebfe0c95529449eb0e51a6075ce2e22
  $fShowLevel2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Errors.$fShowLevel3) -}
518193d2735dfa1c92830980b0b78cda
  $fShowLevel3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Warning"#) -}
a5e4cd43f8dd2c576a04fd39cdd4aca4
  $fShowLevel4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Errors.$fShowLevel5) -}
c2828e7a8a2eadd2e1b1458e63ff8d68
  $fShowLevel5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Error"#) -}
f5ce61e445e04407a253c0b2bb946756
  $fShowLevel_$cshow ::
    Language.PureScript.Errors.Level -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Errors.Level) ->
                 case x of wild {
                   Language.PureScript.Errors.Error
                   -> Language.PureScript.Errors.$fShowLevel4
                   Language.PureScript.Errors.Warning
                   -> Language.PureScript.Errors.$fShowLevel2 }) -}
f5ce61e445e04407a253c0b2bb946756
  $fShowLevel_$cshowList ::
    [Language.PureScript.Errors.Level] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Errors.Level])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Errors.Level
                   Language.PureScript.Errors.$fShowLevel1
                   ls
                   s) -}
f5ce61e445e04407a253c0b2bb946756
  $fShowLevel_$cshowsPrec ::
    GHC.Types.Int -> Language.PureScript.Errors.Level -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (ds1 :: Language.PureScript.Errors.Level)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   Language.PureScript.Errors.Error
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c1 :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c1
                           n
                           Language.PureScript.Errors.$fShowLevel4)
                        eta
                   Language.PureScript.Errors.Warning
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c1 :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c1
                           n
                           Language.PureScript.Errors.$fShowLevel2)
                        eta }) -}
ad1de73a1d5a6b0ccd9657dedebc94f3
  $fShowMultipleErrors ::
    GHC.Show.Show Language.PureScript.Errors.MultipleErrors
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Errors.MultipleErrors
                  Language.PureScript.Errors.$fShowMultipleErrors_$cshowsPrec
                  Language.PureScript.Errors.$fShowMultipleErrors_$cshow
                  Language.PureScript.Errors.$fShowMultipleErrors_$cshowList -}
ad1de73a1d5a6b0ccd9657dedebc94f3
  $fShowMultipleErrors1 ::
    Language.PureScript.Errors.MultipleErrors -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,1*U><L,U>,
     Unfolding: (\ (w :: Language.PureScript.Errors.MultipleErrors)
                   (w1 :: GHC.Base.String) ->
                 Language.PureScript.Errors.$w$cshowsPrec 0# w w1) -}
aa336f689d0df8e8fead4357186714d1
  $fShowMultipleErrors2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("}"#) -}
72bb6236b9aa228b8c8c3e70c131a978
  $fShowMultipleErrors3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("runMultipleErrors = "#) -}
e090608864bb0159d63d472e1d358253
  $fShowMultipleErrors4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("MultipleErrors {"#) -}
077b50225318f353efe000a1b6eb2062
  $fShowMultipleErrors5 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
ad1de73a1d5a6b0ccd9657dedebc94f3
  $fShowMultipleErrors_$cshow ::
    Language.PureScript.Errors.MultipleErrors -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Errors.MultipleErrors) ->
                 Language.PureScript.Errors.$fShowMultipleErrors_$cshowsPrec
                   Language.PureScript.Errors.$fShowMultipleErrors5
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
ad1de73a1d5a6b0ccd9657dedebc94f3
  $fShowMultipleErrors_$cshowList ::
    [Language.PureScript.Errors.MultipleErrors] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Errors.MultipleErrors])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Errors.MultipleErrors
                   Language.PureScript.Errors.$fShowMultipleErrors1
                   ls
                   s) -}
ad1de73a1d5a6b0ccd9657dedebc94f3
  $fShowMultipleErrors_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Errors.MultipleErrors -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><L,1*U><L,U>, Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Errors.MultipleErrors)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Language.PureScript.Errors.$w$cshowsPrec ww1 w1 w2 }) -}
5cdb754135809e92d129bf77d6f6dd99
  $fShowTypeMap :: GHC.Show.Show Language.PureScript.Errors.TypeMap
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Errors.TypeMap
                  Language.PureScript.Errors.$fShowTypeMap_$cshowsPrec
                  Language.PureScript.Errors.$fShowTypeMap_$cshow
                  Language.PureScript.Errors.$fShowTypeMap_$cshowList -}
5cdb754135809e92d129bf77d6f6dd99
  $fShowTypeMap1 ::
    Language.PureScript.Errors.TypeMap -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U,U(U))>,
     Unfolding: (\ (w :: Language.PureScript.Errors.TypeMap) ->
                 case w of ww { Language.PureScript.Errors.TypeMap ww1 ww2 ww3 ->
                 Language.PureScript.Errors.$w$cshowsPrec1 0# ww1 ww2 ww3 }) -}
910a2173c82807f3324e83c6e1f1584f
  $fShowTypeMap2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("umNextIndex = "#) -}
5a8dfa461d6b9c241b262e3803d2f092
  $fShowTypeMap3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("umUnknownMap = "#) -}
5809107476d6a743f16f402393c3149b
  $fShowTypeMap4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("umSkolemMap = "#) -}
f8de78b244a0f69909e386f04978067f
  $fShowTypeMap5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("TypeMap {"#) -}
5cdb754135809e92d129bf77d6f6dd99
  $fShowTypeMap_$cshow ::
    Language.PureScript.Errors.TypeMap -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U,U(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Errors.TypeMap) ->
                 Language.PureScript.Errors.$fShowTypeMap_$cshowsPrec
                   Language.PureScript.Errors.$fShowMultipleErrors5
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
5cdb754135809e92d129bf77d6f6dd99
  $fShowTypeMap_$cshowList ::
    [Language.PureScript.Errors.TypeMap] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Errors.TypeMap])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Errors.TypeMap
                   Language.PureScript.Errors.$fShowTypeMap1
                   ls
                   s) -}
5cdb754135809e92d129bf77d6f6dd99
  $fShowTypeMap_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Errors.TypeMap -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U,U(U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Errors.TypeMap) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Language.PureScript.Errors.TypeMap ww3 ww4 ww5 ->
                 Language.PureScript.Errors.$w$cshowsPrec1 ww1 ww3 ww4 ww5 } }) -}
50514486c179829781cd3dc266d9fa39
  $fShowTypeMap_$s$fShow(,,) ::
    GHC.Show.Show
      ([GHC.Types.Char], GHC.Types.Int,
       GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ ([GHC.Types.Char], GHC.Types.Int,
                     GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan)
                  (GHC.Show.$fShow(,,)_$cshowsPrec
                     @ [GHC.Types.Char]
                     @ GHC.Types.Int
                     @ (GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan)
                     GHC.Show.$fShow[]_$s$fShow[]1
                     GHC.Show.$fShowInt
                     Language.PureScript.Errors.$fShowTypeMap_$s$fShowMaybe)
                  (\ (x :: ([GHC.Types.Char], GHC.Types.Int,
                            GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan)) ->
                   GHC.Show.$fShow(,,)_$cshowsPrec
                     @ [GHC.Types.Char]
                     @ GHC.Types.Int
                     @ (GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan)
                     GHC.Show.$fShow[]_$s$fShow[]1
                     GHC.Show.$fShowInt
                     Language.PureScript.Errors.$fShowTypeMap_$s$fShowMaybe
                     GHC.Show.$fShow(,)1
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [([GHC.Types.Char], GHC.Types.Int,
                              GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan)])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ ([GHC.Types.Char], GHC.Types.Int,
                        GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan)
                     (GHC.Show.$fShow(,,)_$cshowsPrec
                        @ [GHC.Types.Char]
                        @ GHC.Types.Int
                        @ (GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan)
                        GHC.Show.$fShow[]_$s$fShow[]1
                        GHC.Show.$fShowInt
                        Language.PureScript.Errors.$fShowTypeMap_$s$fShowMaybe
                        GHC.Show.$fShow(,)1)
                     ls
                     s) -}
71d291c9b18da172419ced410c7bce8f
  $fShowTypeMap_$s$fShowMaybe ::
    GHC.Show.Show
      (GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan)
                  (GHC.Show.$fShowMaybe_$cshowsPrec
                     @ Language.PureScript.AST.SourcePos.SourceSpan
                     Language.PureScript.AST.SourcePos.$fShowSourceSpan)
                  (\ (x :: GHC.Base.Maybe
                             Language.PureScript.AST.SourcePos.SourceSpan) ->
                   case x of wild {
                     GHC.Base.Nothing -> GHC.Show.$fShowMaybe4
                     GHC.Base.Just b1
                     -> GHC.Base.augment
                          @ GHC.Types.Char
                          (\ @ b
                             (c1 :: GHC.Types.Char -> b -> b)[OneShot]
                             (n :: b)[OneShot] ->
                           GHC.Base.foldr @ GHC.Types.Char @ b c1 n GHC.Show.$fShowMaybe1)
                          (Language.PureScript.AST.SourcePos.$fShowSourceSpan_$cshowsPrec
                             GHC.Show.appPrec1
                             b1
                             (GHC.Types.[] @ GHC.Types.Char)) })
                  (\ (ls :: [GHC.Base.Maybe
                               Language.PureScript.AST.SourcePos.SourceSpan])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan)
                     (GHC.Show.$fShowMaybe_$cshowsPrec
                        @ Language.PureScript.AST.SourcePos.SourceSpan
                        Language.PureScript.AST.SourcePos.$fShowSourceSpan
                        GHC.Show.$fShow(,)1)
                     ls
                     s) -}
0d766045f280bb8ab4e794c9399dc7fe
  $s$fApplicativeStateT ::
    GHC.Base.Applicative
      (Control.Monad.Trans.State.Lazy.StateT
         s Data.Functor.Identity.Identity)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ s.
                  @ (Control.Monad.Trans.State.Lazy.StateT
                       s Data.Functor.Identity.Identity)
                  (Language.PureScript.Errors.$s$fApplicativeStateT_$s$fFunctorStateT
                     @ s)
                  (Language.PureScript.Errors.$s$fApplicativeStateT_$s$fApplicativeStateT_$cpure
                     @ s)
                  (Language.PureScript.Errors.$s$fApplicativeStateT_$s$fApplicativeStateT_$c<*>
                     @ s)
                  (Control.Monad.Trans.State.Lazy.$fAlternativeStateT2
                     @ Data.Functor.Identity.Identity
                     @ s
                     Data.Functor.Identity.$fFunctorIdentity
                     Data.Functor.Identity.$fMonadIdentity)
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N) (c1 :: <*>_N).
                   <a -> b -> c1>_R
                   ->_R <Control.Monad.Trans.State.Lazy.StateT
                           s Data.Functor.Identity.Identity a>_R
                   ->_R <Control.Monad.Trans.State.Lazy.StateT
                           s Data.Functor.Identity.Identity b>_R
                   ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                 <s>_N <Data.Functor.Identity.Identity>_R <c1>_N))
                  (Language.PureScript.Errors.$s$fApplicativeStateT_$s$fApplicativeStateT_$c*>
                     @ s)
                  (\ @ a
                     @ b
                     (x :: Control.Monad.Trans.State.Lazy.StateT
                             s Data.Functor.Identity.Identity a)
                     (eta :: Control.Monad.Trans.State.Lazy.StateT
                               s Data.Functor.Identity.Identity b)
                     (eta1 :: s) ->
                   let {
                     ds :: Data.Functor.Identity.Identity (a, s)
                     = x `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <s>_N <Data.Functor.Identity.Identity>_R <a>_N)
                         eta1
                   } in
                   (case ds
                           `cast`
                         (Data.Functor.Identity.N:Identity[0]
                              <(a, s)>_R) of wild { (,) a1 s' ->
                    a1 },
                    case (eta
                            `cast`
                          (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <s>_N <Data.Functor.Identity.Identity>_R <b>_N)
                            (case ds
                                    `cast`
                                  (Data.Functor.Identity.N:Identity[0]
                                       <(a, s)>_R) of wild { (,) a1 s' ->
                             s' }))
                           `cast`
                         (Data.Functor.Identity.N:Identity[0]
                              <(b, s)>_R) of wild { (,) x1 s'' ->
                    s'' })
                     `cast`
                   (Sym (Data.Functor.Identity.N:Identity[0] <(a, s)>_R)))
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   <Control.Monad.Trans.State.Lazy.StateT
                      s Data.Functor.Identity.Identity a>_R
                   ->_R <Control.Monad.Trans.State.Lazy.StateT
                           s Data.Functor.Identity.Identity b>_R
                   ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                 <s>_N <Data.Functor.Identity.Identity>_R <a>_N)) -}
209872bbad31ab84c7635939eb37667f
  $s$fApplicativeStateT_$s$fApplicativeStateT_$c*> ::
    Control.Monad.Trans.State.Lazy.StateT
      s Data.Functor.Identity.Identity a
    -> Control.Monad.Trans.State.Lazy.StateT
         s Data.Functor.Identity.Identity b
    -> Control.Monad.Trans.State.Lazy.StateT
         s Data.Functor.Identity.Identity b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(U(A,1*U))><C(S),1*C1(U(U,U))><L,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ a
                   @ b
                   (m1 :: Control.Monad.Trans.State.Lazy.StateT
                            s Data.Functor.Identity.Identity a)
                   (k :: Control.Monad.Trans.State.Lazy.StateT
                           s Data.Functor.Identity.Identity b)
                   (s1 :: s) ->
                 k `cast`
                 (Control.Monad.Trans.State.Lazy.N:StateT[0]
                      <s>_N <Data.Functor.Identity.Identity>_R <b>_N)
                   (case (m1
                            `cast`
                          (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <s>_N <Data.Functor.Identity.Identity>_R <a>_N)
                            s1)
                           `cast`
                         (Data.Functor.Identity.N:Identity[0]
                              <(a, s)>_R) of wild { (,) a1 s' ->
                    s' }))
                  `cast`
                (forall (s :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.State.Lazy.StateT
                    s Data.Functor.Identity.Identity a>_R
                 ->_R <Control.Monad.Trans.State.Lazy.StateT
                         s Data.Functor.Identity.Identity b>_R
                 ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <s>_N <Data.Functor.Identity.Identity>_R <b>_N)) -}
957f9806a74b075b367c7aef2cf1ba26
  $s$fApplicativeStateT_$s$fApplicativeStateT_$c<*> ::
    Control.Monad.Trans.State.Lazy.StateT
      s Data.Functor.Identity.Identity (a -> b)
    -> Control.Monad.Trans.State.Lazy.StateT
         s Data.Functor.Identity.Identity a
    -> Control.Monad.Trans.State.Lazy.StateT
         s Data.Functor.Identity.Identity b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(U(1*C1(U),1*U))><L,1*C1(U(1*U,1*U))><L,U>m,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ a
                   @ b
                   (ds :: Control.Monad.Trans.State.Lazy.StateT
                            s Data.Functor.Identity.Identity (a -> b))
                   (ds1 :: Control.Monad.Trans.State.Lazy.StateT
                             s Data.Functor.Identity.Identity a)
                   (s1 :: s) ->
                 let {
                   ds2 :: Data.Functor.Identity.Identity (a -> b, s)
                   = ds
                       `cast`
                     (Control.Monad.Trans.State.Lazy.N:StateT[0]
                          <s>_N <Data.Functor.Identity.Identity>_R <a -> b>_N)
                       s1
                 } in
                 let {
                   ds3 :: Data.Functor.Identity.Identity (a, s)
                   = ds1
                       `cast`
                     (Control.Monad.Trans.State.Lazy.N:StateT[0]
                          <s>_N <Data.Functor.Identity.Identity>_R <a>_N)
                       (case ds2
                               `cast`
                             (Data.Functor.Identity.N:Identity[0]
                                  <(a -> b, s)>_R) of wild { (,) f2 s' ->
                        s' })
                 } in
                 (case ds2
                         `cast`
                       (Data.Functor.Identity.N:Identity[0]
                            <(a -> b, s)>_R) of wild { (,) f2 s' ->
                  f2
                    (case ds3
                            `cast`
                          (Data.Functor.Identity.N:Identity[0]
                               <(a, s)>_R) of wild1 { (,) x s'' ->
                     x }) },
                  case ds3
                         `cast`
                       (Data.Functor.Identity.N:Identity[0]
                            <(a, s)>_R) of wild { (,) x s'' ->
                  s'' })
                   `cast`
                 (Sym (Data.Functor.Identity.N:Identity[0] <(b, s)>_R)))
                  `cast`
                (forall (s :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.State.Lazy.StateT
                    s Data.Functor.Identity.Identity (a -> b)>_R
                 ->_R <Control.Monad.Trans.State.Lazy.StateT
                         s Data.Functor.Identity.Identity a>_R
                 ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <s>_N <Data.Functor.Identity.Identity>_R <b>_N)) -}
42997c87fbd3c98db5043d9e0fc72c7e
  $s$fApplicativeStateT_$s$fApplicativeStateT_$cpure ::
    a
    -> Control.Monad.Trans.State.Lazy.StateT
         s Data.Functor.Identity.Identity a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, True)
                (\ @ s @ a (a1 :: a) (s1 :: s) -> (a1, s1))
                  `cast`
                (forall (s :: <*>_N) (a :: <*>_N).
                 <a>_R
                 ->_R (<s>_R
                       ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                     <(a, s)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                             <s>_N
                                                             <Data.Functor.Identity.Identity>_R
                                                             <a>_N)) -}
3768017a5895a4267ff4501c7c91f7bb
  $s$fApplicativeStateT_$s$fFunctorStateT ::
    GHC.Base.Functor
      (Control.Monad.Trans.State.Lazy.StateT
         s Data.Functor.Identity.Identity)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ s.
                  @ (Control.Monad.Trans.State.Lazy.StateT
                       s Data.Functor.Identity.Identity)
                  (Control.Monad.Trans.State.Lazy.$fFunctorStateT_$cfmap
                     @ Data.Functor.Identity.Identity
                     @ s
                     Data.Functor.Identity.$fFunctorIdentity)
                  (\ @ a
                     @ b
                     (x :: a)
                     (eta :: Control.Monad.Trans.State.Lazy.StateT
                               s Data.Functor.Identity.Identity b)
                     (eta1 :: s) ->
                   (x,
                    case (eta
                            `cast`
                          (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <s>_N <Data.Functor.Identity.Identity>_R <b>_N)
                            eta1)
                           `cast`
                         (Data.Functor.Identity.N:Identity[0]
                              <(b, s)>_R) of wild { (,) a1 s' ->
                    s' }))
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   <a>_R
                   ->_R <Control.Monad.Trans.State.Lazy.StateT
                           s Data.Functor.Identity.Identity b>_R
                   ->_R (<s>_R
                         ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                       <(a,
                                         s)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                            <s>_N
                                                            <Data.Functor.Identity.Identity>_R
                                                            <a>_N)) -}
61ef12d8078d8d8fcbf51e959eadea26
  $s$fEq(,) ::
    GHC.Classes.Eq
      (Language.PureScript.Label.Label, Language.PureScript.Types.Type)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Label.Label, Language.PureScript.Types.Type)
                  (GHC.Classes.$fEq(,)_$c==
                     @ Language.PureScript.Label.Label
                     @ Language.PureScript.Types.Type
                     Language.PureScript.Label.$fEqLabel
                     Language.PureScript.Types.$fEqType)
                  Language.PureScript.Errors.$s$fEq(,)_$s$fEq(,)_$c/= -}
db64c332833189b3c17fa30cc4252d5f
  $s$fEq(,)_$s$fEq(,)_$c/= ::
    (Language.PureScript.Label.Label, Language.PureScript.Types.Type)
    -> (Language.PureScript.Label.Label,
        Language.PureScript.Types.Type)
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: (Language.PureScript.Label.Label,
                          Language.PureScript.Types.Type))
                   (y :: (Language.PureScript.Label.Label,
                          Language.PureScript.Types.Type)) ->
                 case x of wild { (,) a1 a2 ->
                 case y of wild1 { (,) b1 b2 ->
                 case GHC.Classes.$fEq[]_$c==
                        @ GHC.Word.Word16
                        GHC.Word.$fEqWord16
                        a1
                          `cast`
                        (Language.PureScript.Label.N:Label[0] ; Language.PureScript.PSString.N:PSString[0])
                        b1
                          `cast`
                        (Language.PureScript.Label.N:Label[0] ; Language.PureScript.PSString.N:PSString[0]) of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True
                   -> case Language.PureScript.Types.$fEqType_$c== a2 b2 of wild3 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True -> GHC.Types.False } } } }) -}
ecec3d466b4bba20702519248032d305
  $s$fMonadStateT ::
    GHC.Base.Monad
      (Control.Monad.Trans.State.Lazy.StateT
         s Data.Functor.Identity.Identity)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ s.
                  @ (Control.Monad.Trans.State.Lazy.StateT
                       s Data.Functor.Identity.Identity)
                  (Language.PureScript.Errors.$s$fApplicativeStateT @ s)
                  (Language.PureScript.Errors.$s$fMonadStateT_$s$fMonadStateT_$c>>=
                     @ s)
                  (Language.PureScript.Errors.$s$fMonadStateT_$s$fMonadStateT_$c>>
                     @ s)
                  (\ @ a (eta :: a) (eta1 :: s) -> (eta, eta1))
                    `cast`
                  (forall (a :: <*>_N).
                   <a>_R
                   ->_R (<s>_R
                         ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                       <(a,
                                         s)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                            <s>_N
                                                            <Data.Functor.Identity.Identity>_R
                                                            <a>_N))
                  (Language.PureScript.Errors.$s$fMonadStateT_$s$fMonadStateT_$cfail
                     @ s) -}
b65a63f3272fd54c69920aa4bd435ad8
  $s$fMonadStateT_$s$fMonadStateT_$c>> ::
    Control.Monad.Trans.State.Lazy.StateT
      s Data.Functor.Identity.Identity a
    -> Control.Monad.Trans.State.Lazy.StateT
         s Data.Functor.Identity.Identity b
    -> Control.Monad.Trans.State.Lazy.StateT
         s Data.Functor.Identity.Identity b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(U(A,1*U))><C(S),1*C1(U(U,U))><L,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ a
                   @ b
                   (m1 :: Control.Monad.Trans.State.Lazy.StateT
                            s Data.Functor.Identity.Identity a)
                   (k :: Control.Monad.Trans.State.Lazy.StateT
                           s Data.Functor.Identity.Identity b)
                   (s1 :: s) ->
                 k `cast`
                 (Control.Monad.Trans.State.Lazy.N:StateT[0]
                      <s>_N <Data.Functor.Identity.Identity>_R <b>_N)
                   (case (m1
                            `cast`
                          (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <s>_N <Data.Functor.Identity.Identity>_R <a>_N)
                            s1)
                           `cast`
                         (Data.Functor.Identity.N:Identity[0]
                              <(a, s)>_R) of wild { (,) a1 s' ->
                    s' }))
                  `cast`
                (forall (s :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.State.Lazy.StateT
                    s Data.Functor.Identity.Identity a>_R
                 ->_R <Control.Monad.Trans.State.Lazy.StateT
                         s Data.Functor.Identity.Identity b>_R
                 ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <s>_N <Data.Functor.Identity.Identity>_R <b>_N)) -}
c33aeb133038c0c7a6614df7812d23e9
  $s$fMonadStateT_$s$fMonadStateT_$c>>= ::
    Control.Monad.Trans.State.Lazy.StateT
      s Data.Functor.Identity.Identity a
    -> (a
        -> Control.Monad.Trans.State.Lazy.StateT
             s Data.Functor.Identity.Identity b)
    -> Control.Monad.Trans.State.Lazy.StateT
         s Data.Functor.Identity.Identity b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(U(1*U,1*U))><C(C(S)),1*C1(C1(U(U,U)))><L,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ a
                   @ b
                   (m1 :: Control.Monad.Trans.State.Lazy.StateT
                            s Data.Functor.Identity.Identity a)
                   (k :: a
                         -> Control.Monad.Trans.State.Lazy.StateT
                              s Data.Functor.Identity.Identity b)
                   (s1 :: s) ->
                 let {
                   ds :: Data.Functor.Identity.Identity (a, s)
                   = m1
                       `cast`
                     (Control.Monad.Trans.State.Lazy.N:StateT[0]
                          <s>_N <Data.Functor.Identity.Identity>_R <a>_N)
                       s1
                 } in
                 (k (case ds
                            `cast`
                          (Data.Functor.Identity.N:Identity[0]
                               <(a, s)>_R) of wild { (,) a1 s' ->
                     a1 }))
                   `cast`
                 (Control.Monad.Trans.State.Lazy.N:StateT[0]
                      <s>_N <Data.Functor.Identity.Identity>_R <b>_N)
                   (case ds
                           `cast`
                         (Data.Functor.Identity.N:Identity[0]
                              <(a, s)>_R) of wild { (,) a1 s' ->
                    s' }))
                  `cast`
                (forall (s :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.State.Lazy.StateT
                    s Data.Functor.Identity.Identity a>_R
                 ->_R <a
                       -> Control.Monad.Trans.State.Lazy.StateT
                            s Data.Functor.Identity.Identity b>_R
                 ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <s>_N <Data.Functor.Identity.Identity>_R <b>_N)) -}
6539cf4d99f637195845e30c06f3a4e5
  $s$fMonadStateT_$s$fMonadStateT_$cfail ::
    GHC.Base.String
    -> Control.Monad.Trans.State.Lazy.StateT
         s Data.Functor.Identity.Identity a
  {- Arity: 2, Strictness: <B,U><B,A>x, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, True)
                (\ @ s @ a (str :: GHC.Base.String) (ds :: s) ->
                 GHC.Err.errorWithoutStackTrace
                   @ 'GHC.Types.LiftedRep
                   @ (Data.Functor.Identity.Identity (a, s))
                   str)
                  `cast`
                (forall (s :: <*>_N) (a :: <*>_N).
                 <GHC.Base.String>_R
                 ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <s>_N <Data.Functor.Identity.Identity>_R <a>_N)) -}
50a64055e2b694631cb33464db6a4ad4
  $s$fShowMaybe_$cshowList ::
    [GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [GHC.Base.Maybe
                             Language.PureScript.AST.SourcePos.SourceSpan])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan)
                   (GHC.Show.$fShowMaybe_$cshowsPrec
                      @ Language.PureScript.AST.SourcePos.SourceSpan
                      Language.PureScript.AST.SourcePos.$fShowSourceSpan
                      GHC.Show.$fShow(,)1)
                   ls
                   s) -}
b2c2a1e9190bf2fcd6c553ce11e33c34
  $sdelete_$sgo3 ::
    Language.PureScript.Names.ModuleName
    -> Data.Set.Internal.Set Language.PureScript.Names.ModuleName
    -> Data.Set.Internal.Set Language.PureScript.Names.ModuleName
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
5789304fdffee31368f9dd50a1ed20e1
  $tc'Error :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   741965974350310940##
                   1919973634072211849##
                   Language.PureScript.Errors.$trModule
                   Language.PureScript.Errors.$tc'Error2
                   0#
                   Language.PureScript.Errors.$tc'Error1) -}
8203aeb7f408f3b1d722ca738ad043b2
  $tc'Error1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
6836f390f9607d09ba2290d352c7adba
  $tc'Error2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Errors.$tc'Error3) -}
28f2d6d71d5a916971e3fd941668de2d
  $tc'Error3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Error"#) -}
7125682f0a3fee12a08eb9443b1e9155
  $tc'ErrorSuggestion :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13824378063099043045##
                   9251187027144875821##
                   Language.PureScript.Errors.$trModule
                   Language.PureScript.Errors.$tc'ErrorSuggestion2
                   0#
                   Language.PureScript.Errors.$tc'ErrorSuggestion1) -}
1db6709c91e5d32259c3aa3077e69c4e
  $tc'ErrorSuggestion1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
dd9aa9464ef0873cdac93987107a2dee
  $tc'ErrorSuggestion2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Errors.$tc'ErrorSuggestion3) -}
7387888e6d5bce95af52d1c6004be189
  $tc'ErrorSuggestion3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ErrorSuggestion"#) -}
05f0f318adcaa7b3bb647e018c0a9c36
  $tc'MultipleErrors :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13853455503832000732##
                   18377036205608058406##
                   Language.PureScript.Errors.$trModule
                   Language.PureScript.Errors.$tc'MultipleErrors2
                   0#
                   Language.PureScript.Errors.$tc'MultipleErrors1) -}
d9464332dcc144949af21e30af0c5c5f
  $tc'MultipleErrors1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
8e49aa3d11ad7d02394ebc2cf5f1da7d
  $tc'MultipleErrors2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Errors.$tc'MultipleErrors3) -}
47a7ba0382e3572ba6176cd6ec24691b
  $tc'MultipleErrors3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'MultipleErrors"#) -}
cbc40ee71ee35ef5bfd825171a3bb20c
  $tc'PPEOptions :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9221246363728107614##
                   4572784352062596440##
                   Language.PureScript.Errors.$trModule
                   Language.PureScript.Errors.$tc'PPEOptions2
                   0#
                   Language.PureScript.Errors.$tc'PPEOptions1) -}
b288aa80591dbcf569ba792bbaf78976
  $tc'PPEOptions1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
162e76561bf9062e676ba061a26d6117
  $tc'PPEOptions2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Errors.$tc'PPEOptions3) -}
507d9c40cf8713a42b398d5b441eebb8
  $tc'PPEOptions3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'PPEOptions"#) -}
dda516ed89d0e7b2ca0e097ce4d2a339
  $tc'TypeMap :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18167537764493535407##
                   813517675367955618##
                   Language.PureScript.Errors.$trModule
                   Language.PureScript.Errors.$tc'TypeMap2
                   0#
                   Language.PureScript.Errors.$tc'TypeMap1) -}
c5a39309b705eef6245d566a76e9d0bd
  $tc'TypeMap1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
2abfc594ee4b3cb39abaf80b1f874ee2
  $tc'TypeMap2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Errors.$tc'TypeMap3) -}
a523d12d65d69f84a708cc73ca231543
  $tc'TypeMap3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TypeMap"#) -}
1ebb01a477c1a0f91b6a94b0c2f65158
  $tc'Warning :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2637112571824836685##
                   9983040182340147289##
                   Language.PureScript.Errors.$trModule
                   Language.PureScript.Errors.$tc'Warning1
                   0#
                   Language.PureScript.Errors.$tc'Error1) -}
d55d3724ac778ea6863e026e394379a5
  $tc'Warning1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Errors.$tc'Warning2) -}
d23460a7aebd92c709cb3f72b44ba379
  $tc'Warning2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Warning"#) -}
7ca6e2cd5e393616666e27a03d4dd96e
  $tcErrorSuggestion :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5531553211772523044##
                   4242710047939506824##
                   Language.PureScript.Errors.$trModule
                   Language.PureScript.Errors.$tcErrorSuggestion1
                   0#
                   GHC.Types.krep$*) -}
ed9b76351e6d717ac1cf29005a293e4e
  $tcErrorSuggestion1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Errors.$tcErrorSuggestion2) -}
4f10c743da9db8146745008dbe300abf
  $tcErrorSuggestion2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ErrorSuggestion"#) -}
760c9082a1aacce0e6c51c70a58f1b73
  $tcLevel :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6739433799421722584##
                   7470688580833468514##
                   Language.PureScript.Errors.$trModule
                   Language.PureScript.Errors.$tcLevel1
                   0#
                   GHC.Types.krep$*) -}
676204ad4b9bb172b9b153e83da5d248
  $tcLevel1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Errors.$tcLevel2) -}
5d73380b0d18f137deabbfbad4296b0e
  $tcLevel2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Level"#) -}
c75c45f8202fc2fcc0c76d1fa96fc108
  $tcMultipleErrors :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9168505447230957723##
                   4102068397172770104##
                   Language.PureScript.Errors.$trModule
                   Language.PureScript.Errors.$tcMultipleErrors1
                   0#
                   GHC.Types.krep$*) -}
f8c96a1f5ebac6319bd95f71639c85a7
  $tcMultipleErrors1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Errors.$tcMultipleErrors2) -}
b5b2027695acd607e2b3090049f5fa43
  $tcMultipleErrors2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("MultipleErrors"#) -}
0409fa252eac7843f08227f2a7f2ad87
  $tcPPEOptions :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11242409306148936773##
                   14756972736723494072##
                   Language.PureScript.Errors.$trModule
                   Language.PureScript.Errors.$tcPPEOptions1
                   0#
                   GHC.Types.krep$*) -}
693201f089e93541521ded1de3b788f7
  $tcPPEOptions1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Errors.$tcPPEOptions2) -}
92ad643e659cd2c6079485de46d62a6a
  $tcPPEOptions2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("PPEOptions"#) -}
9c36c12ac45fe898ddc0eeb48e25db7a
  $tcTypeMap :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13513139331407892644##
                   14779226816656954953##
                   Language.PureScript.Errors.$trModule
                   Language.PureScript.Errors.$tcTypeMap1
                   0#
                   GHC.Types.krep$*) -}
d13111310d4d1c8863a0aa9bf7b47f8d
  $tcTypeMap1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Errors.$tcTypeMap2) -}
7774831029fe9502743fcc4d979a5588
  $tcTypeMap2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("TypeMap"#) -}
a884ec2c00129f1e2cb518bdecdff116
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Language.PureScript.Errors.$trModule3
                   Language.PureScript.Errors.$trModule1) -}
78d7fed6642d7b76fe199e641281c5f3
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Errors.$trModule2) -}
27654e37431910a553c27d98c1c9c548
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Language.PureScript.Errors"#) -}
02a2e173aa2ee14a0d1c6b881d0b4399
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Errors.$trModule4) -}
2ded53f2cb456f169e86e0588a7b167a
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"#) -}
ad1de73a1d5a6b0ccd9657dedebc94f3
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> Language.PureScript.Errors.MultipleErrors
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: Language.PureScript.Errors.MultipleErrors)
                   (w1 :: GHC.Base.String) ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     GHC.CString.unpackAppendCString#
                       Language.PureScript.Errors.$fShowMultipleErrors4
                       (GHC.CString.unpackAppendCString#
                          Language.PureScript.Errors.$fShowMultipleErrors3
                          (let {
                             s :: GHC.Base.String
                             = GHC.CString.unpackAppendCString#
                                 Language.PureScript.Errors.$fShowMultipleErrors2
                                 x
                           } in
                           case w `cast`
                                (Language.PureScript.Errors.N:MultipleErrors[0]) of wild {
                             [] -> GHC.CString.unpackAppendCString# GHC.Show.showList__4 s
                             : x1 xs
                             -> GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showList__3
                                  (case x1 of ww1 { Language.PureScript.AST.Declarations.ErrorMessage ww2 ww3 ->
                                   Language.PureScript.AST.Declarations.$w$cshowsPrec5
                                     0#
                                     ww2
                                     ww3
                                     (let {
                                        lvl1143 :: [GHC.Types.Char]
                                        = GHC.Types.: @ GHC.Types.Char GHC.Show.showList__2 s
                                      } in
                                      letrec {
                                        showl :: [Language.PureScript.AST.Declarations.ErrorMessage]
                                                 -> GHC.Base.String
                                          {- Arity: 1, Strictness: <S,1*U> -}
                                        = \ (ds2 :: [Language.PureScript.AST.Declarations.ErrorMessage]) ->
                                          case ds2 of wild1 {
                                            [] -> lvl1143
                                            : y ys
                                            -> GHC.Types.:
                                                 @ GHC.Types.Char
                                                 GHC.Show.showList__1
                                                 (case y of ww4 { Language.PureScript.AST.Declarations.ErrorMessage ww5 ww6 ->
                                                  Language.PureScript.AST.Declarations.$w$cshowsPrec5
                                                    0#
                                                    ww5
                                                    ww6
                                                    (showl ys) }) }
                                      } in
                                      showl xs) }) }))
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT -> p w1
                   1#
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 w1)) }) -}
2a6b0a69d8e58fc8d2a071b131987e85
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> Data.Map.Internal.Map
         GHC.Types.Int
         (GHC.Base.String, GHC.Types.Int,
          GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan)
    -> Data.Map.Internal.Map GHC.Types.Int GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Show.ShowS
  {- Arity: 4, Strictness: <S,U><L,1*U><L,1*U><L,U(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Data.Map.Internal.Map
                             GHC.Types.Int
                             (GHC.Base.String, GHC.Types.Int,
                              GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan))
                   (ww2 :: Data.Map.Internal.Map GHC.Types.Int GHC.Types.Int)
                   (ww3 :: GHC.Types.Int) ->
                 let {
                   f2 :: GHC.Base.String -> GHC.Base.String
                   = Data.Map.Internal.$w$cshowsPrec
                       @ GHC.Types.Int
                       @ (GHC.Base.String, GHC.Types.Int,
                          GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan)
                       GHC.Show.$fShowInt
                       Language.PureScript.Errors.$fShowTypeMap_$s$fShow(,,)
                       0#
                       ww1
                 } in
                 let {
                   f3 :: GHC.Base.String -> GHC.Base.String
                   = Data.Map.Internal.$w$cshowsPrec
                       @ GHC.Types.Int
                       @ GHC.Types.Int
                       GHC.Show.$fShowInt
                       GHC.Show.$fShowInt
                       0#
                       ww2
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> \ (x :: GHC.Base.String) ->
                      GHC.CString.unpackAppendCString#
                        Language.PureScript.Errors.$fShowTypeMap5
                        (GHC.CString.unpackAppendCString#
                           Language.PureScript.Errors.$fShowTypeMap4
                           (f2
                              (GHC.Base.++
                                 @ GHC.Types.Char
                                 GHC.Show.showCommaSpace1
                                 (GHC.CString.unpackAppendCString#
                                    Language.PureScript.Errors.$fShowTypeMap3
                                    (f3
                                       (GHC.Base.++
                                          @ GHC.Types.Char
                                          GHC.Show.showCommaSpace1
                                          (GHC.CString.unpackAppendCString#
                                             Language.PureScript.Errors.$fShowTypeMap2
                                             (case ww3 of ww4 { GHC.Types.I# ww5 ->
                                              case GHC.Show.$wshowSignedInt
                                                     0#
                                                     ww5
                                                     (GHC.CString.unpackAppendCString#
                                                        Language.PureScript.Errors.$fShowMultipleErrors2
                                                        x) of ww6 { (#,#) ww7 ww8 ->
                                              GHC.Types.: @ GHC.Types.Char ww7 ww8 } }))))))))
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.CString.unpackAppendCString#
                           Language.PureScript.Errors.$fShowTypeMap5
                           (GHC.CString.unpackAppendCString#
                              Language.PureScript.Errors.$fShowTypeMap4
                              (f2
                                 (GHC.Base.++
                                    @ GHC.Types.Char
                                    GHC.Show.showCommaSpace1
                                    (GHC.CString.unpackAppendCString#
                                       Language.PureScript.Errors.$fShowTypeMap3
                                       (f3
                                          (GHC.Base.++
                                             @ GHC.Types.Char
                                             GHC.Show.showCommaSpace1
                                             (GHC.CString.unpackAppendCString#
                                                Language.PureScript.Errors.$fShowTypeMap2
                                                (case ww3 of ww4 { GHC.Types.I# ww5 ->
                                                 case GHC.Show.$wshowSignedInt
                                                        0#
                                                        ww5
                                                        (GHC.CString.unpackAppendCString#
                                                           Language.PureScript.Errors.$fShowMultipleErrors2
                                                           (GHC.Types.:
                                                              @ GHC.Types.Char
                                                              GHC.Show.$fShow(,)2
                                                              x)) of ww6 { (#,#) ww7 ww8 ->
                                                 GHC.Types.:
                                                   @ GHC.Types.Char
                                                   ww7
                                                   ww8 } }))))))))) }) -}
8953bb31e200e6a397f66e881f47c085
  $w$sgo13 ::
    GHC.Types.Int
    -> GHC.Prim.Int#
    -> a1
    -> Data.Map.Internal.Map GHC.Types.Int a1
    -> Data.Map.Internal.Map GHC.Types.Int a1
  {- Arity: 4, Strictness: <L,U><L,U><L,U><S,1*U>, Inline: [0] -}
31a530718a3818f28050a2ff3de4c75a
  $w$sonTypesInErrorMessageM ::
    (Language.PureScript.Types.Type
     -> Data.Functor.Identity.Identity Language.PureScript.Types.Type)
    -> [Language.PureScript.AST.Declarations.ErrorMessageHint]
    -> Language.PureScript.AST.Declarations.SimpleErrorMessage
    -> (# [Language.PureScript.AST.Declarations.ErrorMessageHint],
          Language.PureScript.AST.Declarations.SimpleErrorMessage #)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,C(U)><L,1*U><L,1*U>,
     Inline: [0] -}
cf1cfcc37a87787e4feb54fa82f3bcee
  $w$sonTypesInErrorMessageM1 ::
    (Language.PureScript.Types.Type
     -> Control.Monad.Trans.State.Lazy.StateT
          Language.PureScript.Errors.TypeMap
          Data.Functor.Identity.Identity
          Language.PureScript.Types.Type)
    -> [Language.PureScript.AST.Declarations.ErrorMessageHint]
    -> Language.PureScript.AST.Declarations.SimpleErrorMessage
    -> Language.PureScript.Errors.TypeMap
    -> (# Language.PureScript.AST.Declarations.ErrorMessage,
          Language.PureScript.Errors.TypeMap #)
  {- Arity: 4, Strictness: <L,C(U)><L,1*U><L,1*U><L,U>,
     Inline: [0] -}
da6cb11509551e1e271c75d32d938a33
  $wansiColor ::
    System.Console.ANSI.Types.ColorIntensity
    -> System.Console.ANSI.Types.Color -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: System.Console.ANSI.Types.ColorIntensity)
                   (ww1 :: System.Console.ANSI.Types.Color) ->
                 System.Console.ANSI.Codes.csi
                   (System.Console.ANSI.Codes.setSGRCode_go
                      (GHC.Types.:
                         @ System.Console.ANSI.Types.SGR
                         (case ww of dt { DEFAULT ->
                          case ww1 of dt1 { DEFAULT ->
                          System.Console.ANSI.Types.SetColor
                            System.Console.ANSI.Types.Foreground
                            dt
                            dt1 } })
                         (GHC.Types.[] @ System.Console.ANSI.Types.SGR)))
                   System.Console.ANSI.Codes.setSGRCode1) -}
91c68e9cc4091524a36b9e3eb7e967e7
  $wcolorCode ::
    GHC.Base.Maybe
      (System.Console.ANSI.Types.ColorIntensity,
       System.Console.ANSI.Types.Color)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Text.Internal.Text
  {- Arity: 4, Strictness: <S,1*U><L,U><S,U><S,U>, Inline: [0] -}
5b139ac2b2b226476f332b4bb63b9611
  $wcolorCodeBox ::
    GHC.Base.Maybe
      (System.Console.ANSI.Types.ColorIntensity,
       System.Console.ANSI.Types.Color)
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> Text.PrettyPrint.Boxes.Content
    -> (# GHC.Types.Int, GHC.Types.Int,
          Text.PrettyPrint.Boxes.Content #)
  {- Arity: 4, Strictness: <S,1*U><L,U(U)><L,U><L,U>, Inline: [0] -}
a300c4f734535e438d306b7fff79e6f7
  $werrorCode ::
    Language.PureScript.AST.Declarations.SimpleErrorMessage
    -> Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
f81394d63ad9f46c80a01060f64e64eb
  $werrorDocUri ::
    Language.PureScript.AST.Declarations.SimpleErrorMessage
    -> Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
a51b1449004a29144f38ad24854ff3e3
  $wfindHint ::
    (Language.PureScript.AST.Declarations.ErrorMessageHint
     -> GHC.Base.Maybe a)
    -> [Language.PureScript.AST.Declarations.ErrorMessageHint]
    -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: Language.PureScript.AST.Declarations.ErrorMessageHint
                         -> GHC.Base.Maybe a)
                   (ww :: [Language.PureScript.AST.Declarations.ErrorMessageHint]) ->
                 letrec {
                   go8 :: [Language.PureScript.AST.Declarations.ErrorMessageHint]
                          -> Data.Monoid.Last a
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [Language.PureScript.AST.Declarations.ErrorMessageHint]) ->
                     case ds of wild {
                       []
                       -> (GHC.Base.Nothing @ a)
                            `cast`
                          (Sym (Data.Monoid.N:Last[0]) <a>_N)
                       : y ys
                       -> case (go8 ys) `cast` (Data.Monoid.N:Last[0] <a>_N) of wild1 {
                            GHC.Base.Nothing
                            -> (w y) `cast` (Sym (Data.Monoid.N:Last[0]) <a>_N)
                            GHC.Base.Just ipv
                            -> wild1 `cast` (Sym (Data.Monoid.N:Last[0]) <a>_N) } }
                 } in
                 (go8 ww) `cast` (Data.Monoid.N:Last[0] <a>_N)) -}
f41086c7c6450bb22e99fb547bf8b5ea
  $windent ::
    Text.PrettyPrint.Boxes.Box
    -> (# GHC.Types.Int, GHC.Types.Int,
          Text.PrettyPrint.Boxes.Content #)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(U(U),U(U),U)>,
     Inline: [0],
     Unfolding: (\ (w :: Text.PrettyPrint.Boxes.Box) ->
                 let {
                   b :: GHC.Types.Int
                   = case w of wild { Text.PrettyPrint.Boxes.Box ds ds1 ds2 ->
                     case ds1 of wild1 { GHC.Types.I# x1 ->
                     GHC.Types.I# (GHC.Prim.+# x1 2#) } }
                 } in
                 let {
                   b1 :: GHC.Types.Int
                   = case w of wild { Text.PrettyPrint.Boxes.Box ds ds1 ds2 -> ds }
                 } in
                 let {
                   b2 :: GHC.Types.Int
                   = case b1 of wild1 { GHC.Types.I# x1 ->
                     GHC.Types.I# (GHC.Prim.+# x1 1#) }
                 } in
                 (# case b2 of wild1 { GHC.Types.I# x1 ->
                    GHC.Types.I# (GHC.Prim.+# x1 1#) },
                    b,
                    Text.PrettyPrint.Boxes.SubBox
                      Text.PrettyPrint.Boxes.AlignFirst
                      Text.PrettyPrint.Boxes.AlignFirst
                      (Text.PrettyPrint.Boxes.Box
                         b2
                         b
                         (Text.PrettyPrint.Boxes.SubBox
                            Text.PrettyPrint.Boxes.AlignFirst
                            Text.PrettyPrint.Boxes.AlignLast
                            (Text.PrettyPrint.Boxes.Box
                               b1
                               b
                               (Text.PrettyPrint.Boxes.SubBox
                                  Text.PrettyPrint.Boxes.AlignLast
                                  Text.PrettyPrint.Boxes.AlignFirst
                                  w)))) #)) -}
5756277de8cd8bc85bb04de99a5a27ab
  $wline ::
    Data.Text.Internal.Text
    -> (# GHC.Types.Int, GHC.Types.Int,
          Text.PrettyPrint.Boxes.Content #)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*U(U,U,U)>, Inline: [0],
     Unfolding: (\ (w :: Data.Text.Internal.Text) ->
                 let {
                   t104 :: GHC.Base.String
                   = case w of wild { Data.Text.Internal.Text dt dt1 dt2 ->
                     let {
                       end :: GHC.Prim.Int# = GHC.Prim.+# dt1 dt2
                     } in
                     letrec {
                       $wunfold :: GHC.Prim.Int# -> [GHC.Types.Char]
                         {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                       = \ (ww :: GHC.Prim.Int#) ->
                         case GHC.Prim.>=# ww end of lwild {
                           DEFAULT
                           -> case GHC.Prim.indexWord16Array# dt ww of r# { DEFAULT ->
                              case GHC.Prim.geWord# r# 55296## of lwild1 {
                                DEFAULT
                                -> GHC.Types.:
                                     @ GHC.Types.Char
                                     (GHC.Types.C# (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                     ($wunfold (GHC.Prim.+# ww 1#))
                                1#
                                -> case GHC.Prim.leWord# r# 56319## of lwild2 {
                                     DEFAULT
                                     -> GHC.Types.:
                                          @ GHC.Types.Char
                                          (GHC.Types.C# (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                          ($wunfold (GHC.Prim.+# ww 1#))
                                     1#
                                     -> case GHC.Prim.indexWord16Array#
                                               dt
                                               (GHC.Prim.+# ww 1#) of r#1 { DEFAULT ->
                                        GHC.Types.:
                                          @ GHC.Types.Char
                                          (GHC.Types.C#
                                             (GHC.Prim.chr#
                                                (GHC.Prim.+#
                                                   (GHC.Prim.+#
                                                      (GHC.Prim.uncheckedIShiftL#
                                                         (GHC.Prim.-#
                                                            (GHC.Prim.word2Int# r#)
                                                            55296#)
                                                         10#)
                                                      (GHC.Prim.-# (GHC.Prim.word2Int# r#1) 56320#))
                                                   65536#)))
                                          ($wunfold (GHC.Prim.+# ww 2#)) } } } }
                           1# -> GHC.Types.[] @ GHC.Types.Char }
                     } in
                     $wunfold dt1 }
                 } in
                 (# Text.PrettyPrint.Boxes.text1,
                    case GHC.List.$wlenAcc @ GHC.Types.Char t104 0# of ww2 { DEFAULT ->
                    GHC.Types.I# ww2 },
                    Text.PrettyPrint.Boxes.Text t104 #)) -}
b065cfc180f1a093e0f7856851453b84
  $wonTypesInErrorMessageM ::
    GHC.Base.Applicative m =>
    (Language.PureScript.Types.Type
     -> m Language.PureScript.Types.Type)
    -> [Language.PureScript.AST.Declarations.ErrorMessageHint]
    -> Language.PureScript.AST.Declarations.SimpleErrorMessage
    -> m Language.PureScript.AST.Declarations.ErrorMessage
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LLC(C(S))LLL),U(U(C(C1(U)),A),C(U),C(C1(U)),C(C1(C1(U))),A,A)><L,C(U)><L,1*U><L,1*U>,
     Inline: [0] -}
140ad9694c6da8e7d0db8e99422e87b0
  $wpoly_go13 ::
    GHC.Prim.Int#
    -> Data.Map.Internal.Map GHC.Types.Int a -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>, Inline: [0] -}
8257c54f51824e92ec27bd80ff3e3c7d
  $wprettyPrintParseError ::
    [Text.Parsec.Error.Message]
    -> (# GHC.Types.Int, GHC.Types.Int,
          Text.PrettyPrint.Boxes.Content #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0],
     Unfolding: (\ (ww :: [Text.Parsec.Error.Message]) ->
                 Language.PureScript.Errors.$wprettyPrintParseErrorMessages
                   Language.PureScript.Errors.prettyPrintParseError9
                   Language.PureScript.Errors.prettyPrintParseError7
                   Language.PureScript.Errors.prettyPrintParseError5
                   Language.PureScript.Errors.prettyPrintParseError3
                   Language.PureScript.Errors.prettyPrintParseError1
                   (Data.OldList.sortBy
                      @ Text.Parsec.Error.Message
                      Text.Parsec.Error.$fEqParseError_$ccompare
                      ww)) -}
97f2d08f92c722da22905b04a8c17d20
  $wprettyPrintParseErrorMessages ::
    GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> [Text.Parsec.Error.Message]
    -> (# GHC.Types.Int, GHC.Types.Int,
          Text.PrettyPrint.Boxes.Content #)
  {- Arity: 6, Strictness: <L,U><L,U><L,1*U><L,U><L,U><S,1*U>,
     Inline: [0] -}
6f45062771e6ba256f26af80251078bf
  $wprettyPrintSingleError ::
    GHC.Base.Maybe
      (System.Console.ANSI.Types.ColorIntensity,
       System.Console.ANSI.Types.Color)
    -> GHC.Types.Bool
    -> Language.PureScript.Errors.Level
    -> GHC.Types.Bool
    -> GHC.IO.FilePath
    -> [Language.PureScript.AST.Declarations.ErrorMessageHint]
    -> Language.PureScript.AST.Declarations.SimpleErrorMessage
    -> (# GHC.Types.Int, GHC.Types.Int,
          Text.PrettyPrint.Boxes.Content #)
  {- Arity: 7, Strictness: <L,U><S,U><L,1*U><L,1*U><L,U><L,1*U><L,U>,
     Inline: [0] -}
09f952f22fc2b9a772f5953f2270fcf1
  $wrenderBox ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> Text.PrettyPrint.Boxes.Content
    -> GHC.Base.String
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U(U)><L,U(U)><S,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Types.Int)
                   (ww1 :: GHC.Types.Int)
                   (ww2 :: Text.PrettyPrint.Boxes.Content) ->
                 Data.OldList.unlines
                   (GHC.Base.map
                      @ [GHC.Types.Char]
                      @ [GHC.Types.Char]
                      Language.PureScript.Errors.renderBox1
                      (GHC.List.dropWhile
                         @ [GHC.Types.Char]
                         Language.PureScript.Errors.renderBox_go1
                           `cast`
                         (<[GHC.Types.Char]>_R ->_R Data.Semigroup.Internal.N:All[0])
                         (Language.PureScript.Errors.renderBox_go
                            (Data.OldList.lines
                               (Data.OldList.unlines
                                  (Text.PrettyPrint.Boxes.$wrenderBox ww ww1 ww2))))))) -}
252269446f5a0e03372e8764152527c5
  $wreplaceTypes ::
    Language.PureScript.Types.Type
    -> Language.PureScript.Errors.TypeMap
    -> (# Language.PureScript.Types.Type,
          Language.PureScript.Errors.TypeMap #)
  {- Arity: 2, Strictness: <S,1*U><L,U(U,U,U(U))>, Inline: [0],
     Unfolding: (\ (w :: Language.PureScript.Types.Type)
                   (w1 :: Language.PureScript.Errors.TypeMap) ->
                 case w of wild {
                   DEFAULT -> (# wild, w1 #)
                   Language.PureScript.Types.TUnknown u
                   -> case u of ww { GHC.Types.I# ww1 ->
                      case w1 of wild1 { Language.PureScript.Errors.TypeMap ds ds1 ds2 ->
                      case Language.PureScript.Errors.$wpoly_go13
                             @ GHC.Types.Int
                             ww1
                             ds1 of wild2 {
                        GHC.Base.Nothing
                        -> (# Language.PureScript.Types.TUnknown ds2,
                              Language.PureScript.Errors.TypeMap
                                ds
                                (Language.PureScript.Errors.$w$sgo13
                                   @ GHC.Types.Int
                                   ww
                                   ww1
                                   ds2
                                   ds1)
                                (case ds2 of wild3 { GHC.Types.I# x ->
                                 GHC.Types.I# (GHC.Prim.+# x 1#) }) #)
                        GHC.Base.Just u'
                        -> (# Language.PureScript.Types.TUnknown u', wild1 #) } } }
                   Language.PureScript.Types.Skolem name s sko ss
                   -> case s of ww { GHC.Types.I# ww1 ->
                      case w1 of wild1 { Language.PureScript.Errors.TypeMap ds ds1 ds2 ->
                      case Language.PureScript.Errors.$wpoly_go13
                             @ (GHC.Base.String, GHC.Types.Int,
                                GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan)
                             ww1
                             ds of wild2 {
                        GHC.Base.Nothing
                        -> (# Language.PureScript.Types.Skolem name ds2 sko ss,
                              Language.PureScript.Errors.TypeMap
                                (Language.PureScript.Errors.$w$sgo13
                                   @ (GHC.Base.String, GHC.Types.Int,
                                      GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan)
                                   ww
                                   ww1
                                   (case name of wild3 { Data.Text.Internal.Text dt dt1 dt2 ->
                                    let {
                                      end :: GHC.Prim.Int# = GHC.Prim.+# dt1 dt2
                                    } in
                                    letrec {
                                      $wunfold :: GHC.Prim.Int# -> [GHC.Types.Char]
                                        {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                                      = \ (ww2 :: GHC.Prim.Int#) ->
                                        case GHC.Prim.>=# ww2 end of lwild {
                                          DEFAULT
                                          -> case GHC.Prim.indexWord16Array#
                                                    dt
                                                    ww2 of r# { DEFAULT ->
                                             case GHC.Prim.geWord# r# 55296## of lwild1 {
                                               DEFAULT
                                               -> GHC.Types.:
                                                    @ GHC.Types.Char
                                                    (GHC.Types.C#
                                                       (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                                    ($wunfold (GHC.Prim.+# ww2 1#))
                                               1#
                                               -> case GHC.Prim.leWord# r# 56319## of lwild2 {
                                                    DEFAULT
                                                    -> GHC.Types.:
                                                         @ GHC.Types.Char
                                                         (GHC.Types.C#
                                                            (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                                         ($wunfold (GHC.Prim.+# ww2 1#))
                                                    1#
                                                    -> case GHC.Prim.indexWord16Array#
                                                              dt
                                                              (GHC.Prim.+#
                                                                 ww2
                                                                 1#) of r#1 { DEFAULT ->
                                                       GHC.Types.:
                                                         @ GHC.Types.Char
                                                         (GHC.Types.C#
                                                            (GHC.Prim.chr#
                                                               (GHC.Prim.+#
                                                                  (GHC.Prim.+#
                                                                     (GHC.Prim.uncheckedIShiftL#
                                                                        (GHC.Prim.-#
                                                                           (GHC.Prim.word2Int# r#)
                                                                           55296#)
                                                                        10#)
                                                                     (GHC.Prim.-#
                                                                        (GHC.Prim.word2Int# r#1)
                                                                        56320#))
                                                                  65536#)))
                                                         ($wunfold (GHC.Prim.+# ww2 2#)) } } } }
                                          1# -> GHC.Types.[] @ GHC.Types.Char }
                                    } in
                                    $wunfold dt1 },
                                    ds2, ss)
                                   ds)
                                ds1
                                (case ds2 of wild3 { GHC.Types.I# x ->
                                 GHC.Types.I# (GHC.Prim.+# x 1#) }) #)
                        GHC.Base.Just ds3
                        -> case ds3 of wild3 { (,,) ds4 s' ds5 ->
                           (# Language.PureScript.Types.Skolem name s' sko ss,
                              wild1 #) } } } } }) -}
00e8959d776f7181faf778c1c0ba4eba
  $wsuggestionSpan ::
    [Language.PureScript.AST.Declarations.ErrorMessageHint]
    -> Language.PureScript.AST.Declarations.SimpleErrorMessage
    -> GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: [Language.PureScript.AST.Declarations.ErrorMessageHint])
                   (ww1 :: Language.PureScript.AST.Declarations.SimpleErrorMessage) ->
                 case (Language.PureScript.Errors.errorSpan_go ww)
                        `cast`
                      (Data.Monoid.N:Last[0] <GHC.Base.NonEmpty
                                                Language.PureScript.AST.SourcePos.SourceSpan>_N) of wild {
                   GHC.Base.Nothing
                   -> GHC.Base.Nothing @ Language.PureScript.AST.SourcePos.SourceSpan
                   GHC.Base.Just a1
                   -> GHC.Base.Just
                        @ Language.PureScript.AST.SourcePos.SourceSpan
                        (case ww1 of wild1 {
                           DEFAULT -> case a1 of wild2 { GHC.Base.:| a2 ds1 -> a2 }
                           Language.PureScript.AST.Declarations.MissingTypeDeclaration ds ds1
                           -> case a1 of wild2 { GHC.Base.:| a2 ds2 ->
                              case a2 of wild3 { Language.PureScript.AST.SourcePos.SourceSpan ds3 ds4 ds5 ->
                              Language.PureScript.AST.SourcePos.SourceSpan
                                ds3
                                ds4
                                ds4 } } }) }) -}
72fc7f0ee0440896ce096fa022c25266
  newtype ErrorSuggestion = ErrorSuggestion Data.Text.Internal.Text
f5ce61e445e04407a253c0b2bb946756
  data Level = Error | Warning
ad1de73a1d5a6b0ccd9657dedebc94f3
  newtype MultipleErrors
    = MultipleErrors {runMultipleErrors :: [Language.PureScript.AST.Declarations.ErrorMessage]}
37dce5890976a3a862fc1f4b820d7aef
  data PPEOptions
    = PPEOptions {ppeCodeColor :: GHC.Base.Maybe
                                    (System.Console.ANSI.Types.ColorIntensity,
                                     System.Console.ANSI.Types.Color),
                  ppeFull :: GHC.Types.Bool,
                  ppeLevel :: Language.PureScript.Errors.Level,
                  ppeShowDocs :: GHC.Types.Bool,
                  ppeRelativeDirectory :: GHC.IO.FilePath}
5cdb754135809e92d129bf77d6f6dd99
  data TypeMap
    = TypeMap {umSkolemMap :: Data.Map.Internal.Map
                                GHC.Types.Int
                                (GHC.Base.String, GHC.Types.Int,
                                 GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan),
               umUnknownMap :: Data.Map.Internal.Map GHC.Types.Int GHC.Types.Int,
               umNextIndex :: GHC.Types.Int}
c2d92e868230119a30631ae026505b5b
  addHint ::
    Language.PureScript.AST.Declarations.ErrorMessageHint
    -> Language.PureScript.Errors.MultipleErrors
    -> Language.PureScript.Errors.MultipleErrors
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Errors.addHint1
                  `cast`
                (<Language.PureScript.AST.Declarations.ErrorMessageHint>_R
                 ->_R <Language.PureScript.Errors.MultipleErrors>_R
                 ->_R Sym (Language.PureScript.Errors.N:MultipleErrors[0])) -}
c2274fd194a5cef1427678b406b50aba
  addHint1 ::
    Language.PureScript.AST.Declarations.ErrorMessageHint
    -> Language.PureScript.Errors.MultipleErrors
    -> [Language.PureScript.AST.Declarations.ErrorMessage]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>,
     Unfolding: (\ (hint :: Language.PureScript.AST.Declarations.ErrorMessageHint)
                   (eta :: Language.PureScript.Errors.MultipleErrors) ->
                 GHC.Base.map
                   @ Language.PureScript.AST.Declarations.ErrorMessage
                   @ Language.PureScript.AST.Declarations.ErrorMessage
                   (\ (ds :: Language.PureScript.AST.Declarations.ErrorMessage) ->
                    case ds of wild { Language.PureScript.AST.Declarations.ErrorMessage hints' se ->
                    Language.PureScript.AST.Declarations.ErrorMessage
                      (GHC.Base.++_$s++
                         @ Language.PureScript.AST.Declarations.ErrorMessageHint
                         hints'
                         hint
                         (GHC.Types.[]
                            @ Language.PureScript.AST.Declarations.ErrorMessageHint))
                      se })
                   eta `cast` (Language.PureScript.Errors.N:MultipleErrors[0])) -}
375caaa0ed136239e27d7007c6086fb0
  addHints ::
    [Language.PureScript.AST.Declarations.ErrorMessageHint]
    -> Language.PureScript.Errors.MultipleErrors
    -> Language.PureScript.Errors.MultipleErrors
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Errors.addHints1
                  `cast`
                (<[Language.PureScript.AST.Declarations.ErrorMessageHint]>_R
                 ->_R <Language.PureScript.Errors.MultipleErrors>_R
                 ->_R Sym (Language.PureScript.Errors.N:MultipleErrors[0])) -}
aaa33615584fb0f7b918f9d937294c95
  addHints1 ::
    [Language.PureScript.AST.Declarations.ErrorMessageHint]
    -> Language.PureScript.Errors.MultipleErrors
    -> [Language.PureScript.AST.Declarations.ErrorMessage]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (hints :: [Language.PureScript.AST.Declarations.ErrorMessageHint])
                   (eta :: Language.PureScript.Errors.MultipleErrors) ->
                 GHC.Base.build
                   @ Language.PureScript.AST.Declarations.ErrorMessage
                   (\ @ b1
                      (c1 :: Language.PureScript.AST.Declarations.ErrorMessage
                             -> b1 -> b1)[OneShot]
                      (n :: b1)[OneShot] ->
                    GHC.Base.foldr
                      @ Language.PureScript.AST.Declarations.ErrorMessage
                      @ b1
                      (GHC.Base.mapFB
                         @ Language.PureScript.AST.Declarations.ErrorMessage
                         @ b1
                         @ Language.PureScript.AST.Declarations.ErrorMessage
                         c1
                         (\ (ds :: Language.PureScript.AST.Declarations.ErrorMessage) ->
                          case ds of wild { Language.PureScript.AST.Declarations.ErrorMessage hints' se ->
                          Language.PureScript.AST.Declarations.ErrorMessage
                            (GHC.Base.augment
                               @ Language.PureScript.AST.Declarations.ErrorMessageHint
                               (\ @ b
                                  (c2 :: Language.PureScript.AST.Declarations.ErrorMessageHint
                                         -> b -> b)[OneShot]
                                  (n1 :: b)[OneShot] ->
                                GHC.Base.foldr
                                  @ Language.PureScript.AST.Declarations.ErrorMessageHint
                                  @ b
                                  c2
                                  n1
                                  hints)
                               hints')
                            se }))
                      n
                      eta `cast` (Language.PureScript.Errors.N:MultipleErrors[0]))) -}
61509e54c8b8b294af8fd063ce47e1af
  ansiColor ::
    (System.Console.ANSI.Types.ColorIntensity,
     System.Console.ANSI.Types.Color)
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: (System.Console.ANSI.Types.ColorIntensity,
                          System.Console.ANSI.Types.Color)) ->
                 case w of ww { (,) ww1 ww2 ->
                 Language.PureScript.Errors.$wansiColor ww1 ww2 }) -}
0047e35ec909697c144e24f996942657
  ansiColorReset :: GHC.Base.String
  {- Unfolding: (System.Console.ANSI.Codes.csi
                   Language.PureScript.Errors.ansiColorReset1
                   System.Console.ANSI.Codes.setSGRCode1) -}
bbf537cde99ff8adf99508eea31eae45
  ansiColorReset1 :: [GHC.Types.Int]
  {- Unfolding: (System.Console.ANSI.Codes.setSGRCode_go
                   Language.PureScript.Errors.ansiColorReset2) -}
d4983c691be0c56c7120d1fb3ab86d67
  ansiColorReset2 :: [System.Console.ANSI.Types.SGR]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ System.Console.ANSI.Types.SGR
                   System.Console.ANSI.Types.Reset
                   (GHC.Types.[] @ System.Console.ANSI.Types.SGR)) -}
430f9630d93f2c541c86f22e596bd600
  colorCode ::
    GHC.Base.Maybe
      (System.Console.ANSI.Types.ColorIntensity,
       System.Console.ANSI.Types.Color)
    -> Data.Text.Internal.Text -> Data.Text.Internal.Text
  {- Arity: 2, Strictness: <S,1*U><S(SSS),1*U(U,U,U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Base.Maybe
                           (System.Console.ANSI.Types.ColorIntensity,
                            System.Console.ANSI.Types.Color))
                   (w1 :: Data.Text.Internal.Text) ->
                 case w1 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Language.PureScript.Errors.$wcolorCode w ww1 ww2 ww3 }) -}
bb70c8a39013c553c56f3b84549f0c1b
  colorCodeBox ::
    GHC.Base.Maybe
      (System.Console.ANSI.Types.ColorIntensity,
       System.Console.ANSI.Types.Color)
    -> Text.PrettyPrint.Boxes.Box -> Text.PrettyPrint.Boxes.Box
  {- Arity: 2, Strictness: <S,1*U><S,1*U(U(U),U,U)>m, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Base.Maybe
                           (System.Console.ANSI.Types.ColorIntensity,
                            System.Console.ANSI.Types.Color))
                   (w1 :: Text.PrettyPrint.Boxes.Box) ->
                 case w1 of ww { Text.PrettyPrint.Boxes.Box ww1 ww2 ww3 ->
                 case Language.PureScript.Errors.$wcolorCodeBox
                        w
                        ww1
                        ww2
                        ww3 of ww4 { (#,,#) ww5 ww6 ww7 ->
                 Text.PrettyPrint.Boxes.Box ww5 ww6 ww7 } }) -}
b99584113fcb3e3c736c26a72f86a867
  defaultCodeColor ::
    (System.Console.ANSI.Types.ColorIntensity,
     System.Console.ANSI.Types.Color)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((System.Console.ANSI.Types.Dull,
                  System.Console.ANSI.Types.Yellow)) -}
21c4c963ab953c0b8bd75ee82fd5c9f2
  defaultPPEOptions :: Language.PureScript.Errors.PPEOptions
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Language.PureScript.Errors.PPEOptions
                   Language.PureScript.Errors.defaultPPEOptions1
                   GHC.Types.False
                   Language.PureScript.Errors.Error
                   GHC.Types.True
                   (GHC.Types.[] @ GHC.Types.Char)) -}
30f0c9dffee48801e95aacdb45a9df15
  defaultPPEOptions1 ::
    GHC.Base.Maybe
      (System.Console.ANSI.Types.ColorIntensity,
       System.Console.ANSI.Types.Color)
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just
                   @ (System.Console.ANSI.Types.ColorIntensity,
                      System.Console.ANSI.Types.Color)
                   Language.PureScript.Errors.defaultCodeColor) -}
0c073777c725fbccd146e7c3bc9373b6
  defaultUnknownMap :: Language.PureScript.Errors.TypeMap
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Language.PureScript.Errors.TypeMap
                   (Data.Map.Internal.Tip
                      @ GHC.Types.Int
                      @ (GHC.Base.String, GHC.Types.Int,
                         GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan))
                   (Data.Map.Internal.Tip @ GHC.Types.Int @ GHC.Types.Int)
                   Language.PureScript.Errors.$fShowMultipleErrors5) -}
a47697ea73840f79dfd4b159fcce442f
  errorCode ::
    Language.PureScript.AST.Declarations.ErrorMessage
    -> Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S(LS),1*U(A,1*U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.PureScript.AST.Declarations.ErrorMessage) ->
                 case w of ww { Language.PureScript.AST.Declarations.ErrorMessage ww1 ww2 ->
                 Language.PureScript.Errors.$werrorCode ww2 }) -}
6dc5cb6c94fb6f3044a79bdcc368646f
  errorDocUri ::
    Language.PureScript.AST.Declarations.ErrorMessage
    -> Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S(LS),1*U(A,1*U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.PureScript.AST.Declarations.ErrorMessage) ->
                 case w of ww { Language.PureScript.AST.Declarations.ErrorMessage ww1 ww2 ->
                 Language.PureScript.Errors.$werrorDocUri ww2 }) -}
56e7aa221570d7d0bd9b4d606b8de7f2
  errorMessage ::
    Language.PureScript.AST.Declarations.SimpleErrorMessage
    -> Language.PureScript.Errors.MultipleErrors
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m2,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Errors.errorMessage1
                  `cast`
                (<Language.PureScript.AST.Declarations.SimpleErrorMessage>_R
                 ->_R Sym (Language.PureScript.Errors.N:MultipleErrors[0])) -}
5055fef8b372f878a840ac9e7783f39a
  errorMessage' ::
    Language.PureScript.AST.SourcePos.SourceSpan
    -> Language.PureScript.AST.Declarations.SimpleErrorMessage
    -> Language.PureScript.Errors.MultipleErrors
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m2,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Errors.errorMessage'1
                  `cast`
                (<Language.PureScript.AST.SourcePos.SourceSpan>_R
                 ->_R <Language.PureScript.AST.Declarations.SimpleErrorMessage>_R
                 ->_R Sym (Language.PureScript.Errors.N:MultipleErrors[0])) -}
a09a519bda696e6220386c7e3360c932
  errorMessage'' ::
    GHC.Base.NonEmpty Language.PureScript.AST.SourcePos.SourceSpan
    -> Language.PureScript.AST.Declarations.SimpleErrorMessage
    -> Language.PureScript.Errors.MultipleErrors
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m2,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Errors.errorMessage''1
                  `cast`
                (<GHC.Base.NonEmpty Language.PureScript.AST.SourcePos.SourceSpan>_R
                 ->_R <Language.PureScript.AST.Declarations.SimpleErrorMessage>_R
                 ->_R Sym (Language.PureScript.Errors.N:MultipleErrors[0])) -}
c549c5374348564ba80e877e6ed2119e
  errorMessage''1 ::
    GHC.Base.NonEmpty Language.PureScript.AST.SourcePos.SourceSpan
    -> Language.PureScript.AST.Declarations.SimpleErrorMessage
    -> [Language.PureScript.AST.Declarations.ErrorMessage]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m2,
     Unfolding: InlineRule (2, True, False)
                (\ (sss :: GHC.Base.NonEmpty
                             Language.PureScript.AST.SourcePos.SourceSpan)
                   (err :: Language.PureScript.AST.Declarations.SimpleErrorMessage) ->
                 GHC.Types.:
                   @ Language.PureScript.AST.Declarations.ErrorMessage
                   (Language.PureScript.AST.Declarations.ErrorMessage
                      (GHC.Types.:
                         @ Language.PureScript.AST.Declarations.ErrorMessageHint
                         (Language.PureScript.AST.Declarations.PositionedError sss)
                         (GHC.Types.[]
                            @ Language.PureScript.AST.Declarations.ErrorMessageHint))
                      err)
                   (GHC.Types.[]
                      @ Language.PureScript.AST.Declarations.ErrorMessage)) -}
1d69b21d7beb933057f4cfae79a9a2d0
  errorMessage'1 ::
    Language.PureScript.AST.SourcePos.SourceSpan
    -> Language.PureScript.AST.Declarations.SimpleErrorMessage
    -> [Language.PureScript.AST.Declarations.ErrorMessage]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m2,
     Unfolding: InlineRule (2, True, False)
                (\ (ss :: Language.PureScript.AST.SourcePos.SourceSpan)
                   (err :: Language.PureScript.AST.Declarations.SimpleErrorMessage) ->
                 GHC.Types.:
                   @ Language.PureScript.AST.Declarations.ErrorMessage
                   (Language.PureScript.AST.Declarations.ErrorMessage
                      (GHC.Types.:
                         @ Language.PureScript.AST.Declarations.ErrorMessageHint
                         (Language.PureScript.Errors.positionedError ss)
                         (GHC.Types.[]
                            @ Language.PureScript.AST.Declarations.ErrorMessageHint))
                      err)
                   (GHC.Types.[]
                      @ Language.PureScript.AST.Declarations.ErrorMessage)) -}
73d88737a6a15ce2c6bfa556cea29208
  errorMessage1 ::
    Language.PureScript.AST.Declarations.SimpleErrorMessage
    -> [Language.PureScript.AST.Declarations.ErrorMessage]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (err :: Language.PureScript.AST.Declarations.SimpleErrorMessage) ->
                 GHC.Types.:
                   @ Language.PureScript.AST.Declarations.ErrorMessage
                   (Language.PureScript.AST.Declarations.ErrorMessage
                      (GHC.Types.[]
                         @ Language.PureScript.AST.Declarations.ErrorMessageHint)
                      err)
                   (GHC.Types.[]
                      @ Language.PureScript.AST.Declarations.ErrorMessage)) -}
f528729d1b4e30fbb471d7516f5074f1
  errorModule ::
    Language.PureScript.AST.Declarations.ErrorMessage
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.PureScript.AST.Declarations.ErrorMessage) ->
                 case w of ww { Language.PureScript.AST.Declarations.ErrorMessage ww1 ww2 ->
                 (Language.PureScript.Errors.errorModule_go ww1)
                   `cast`
                 (Data.Monoid.N:Last[0] <Language.PureScript.Names.ModuleName>_N) }) -}
05f0448e4282dfd08f24d4b450bd5fd5
  errorModule_go ::
    [Language.PureScript.AST.Declarations.ErrorMessageHint]
    -> Data.Monoid.Last Language.PureScript.Names.ModuleName
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
b2ead8c48a7e47b9c0e1477646912b50
  errorSpan ::
    Language.PureScript.AST.Declarations.ErrorMessage
    -> GHC.Base.Maybe
         (GHC.Base.NonEmpty Language.PureScript.AST.SourcePos.SourceSpan)
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.PureScript.AST.Declarations.ErrorMessage) ->
                 case w of ww { Language.PureScript.AST.Declarations.ErrorMessage ww1 ww2 ->
                 (Language.PureScript.Errors.errorSpan_go ww1)
                   `cast`
                 (Data.Monoid.N:Last[0] <GHC.Base.NonEmpty
                                           Language.PureScript.AST.SourcePos.SourceSpan>_N) }) -}
cefe0428d6e0eff567801d9b69ad4c61
  errorSpan_go ::
    [Language.PureScript.AST.Declarations.ErrorMessageHint]
    -> Data.Monoid.Last
         (GHC.Base.NonEmpty Language.PureScript.AST.SourcePos.SourceSpan)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
864aad0ca3bb13080a6e3768c201c438
  errorSuggestion ::
    Language.PureScript.AST.Declarations.SimpleErrorMessage
    -> GHC.Base.Maybe Language.PureScript.Errors.ErrorSuggestion
  {- Arity: 1, Strictness: <S,1*U> -}
48131b8d3751b58e506af78a2fe51e86
  escalateWarningWhen ::
    (Control.Monad.Writer.Class.MonadWriter
       Language.PureScript.Errors.MultipleErrors m,
     Control.Monad.Error.Class.MonadError
       Language.PureScript.Errors.MultipleErrors m) =>
    (Language.PureScript.AST.Declarations.ErrorMessage
     -> GHC.Types.Bool)
    -> m a -> m a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LS(LC(C(S))LLL)LLLL),U(A,U(1*U(A,1*C1(U),A,A,A,A),C(C1(U)),C(C1(U)),C(U),A),A,C(U),1*C1(U),C(U))><L,U(A,C(U),A)><L,C(U)><L,U>,
     Unfolding: (\ @ m :: * -> *
                   @ a
                   ($dMonadWriter :: Control.Monad.Writer.Class.MonadWriter
                                       Language.PureScript.Errors.MultipleErrors m)
                   ($dMonadError :: Control.Monad.Error.Class.MonadError
                                      Language.PureScript.Errors.MultipleErrors m)
                   (eta :: Language.PureScript.AST.Declarations.ErrorMessage
                           -> GHC.Types.Bool)
                   (eta1 :: m a) ->
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.Writer.Class.$p2MonadWriter
                       @ Language.PureScript.Errors.MultipleErrors
                       @ m
                       $dMonadWriter
                 } in
                 let {
                   lvl1143 :: m ()
                   = GHC.Base.pure
                       @ m
                       (GHC.Base.$p1Monad @ m $dMonad)
                       @ ()
                       GHC.Tuple.()
                 } in
                 letrec {
                   $wgo1 :: [Language.PureScript.AST.Declarations.ErrorMessage]
                            -> (# [Language.PureScript.AST.Declarations.ErrorMessage],
                                  [Language.PureScript.AST.Declarations.ErrorMessage] #)
                     {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
                   = \ (w :: [Language.PureScript.AST.Declarations.ErrorMessage]) ->
                     case w of wild {
                       []
                       -> (# GHC.Types.[]
                               @ Language.PureScript.AST.Declarations.ErrorMessage,
                             GHC.Types.[] @ Language.PureScript.AST.Declarations.ErrorMessage #)
                       : y ys
                       -> let {
                            w2 :: ([Language.PureScript.AST.Declarations.ErrorMessage],
                                   [Language.PureScript.AST.Declarations.ErrorMessage])
                            = case $wgo1 ys of ww { (#,#) ww1 ww2 -> (ww1, ww2) }
                          } in
                          case eta y of wild1 {
                            GHC.Types.False
                            -> (# case w2 of wild2 { (,) ts fs -> ts },
                                  GHC.Types.:
                                    @ Language.PureScript.AST.Declarations.ErrorMessage
                                    y
                                    (case w2 of wild2 { (,) ts fs -> fs }) #)
                            GHC.Types.True
                            -> (# GHC.Types.:
                                    @ Language.PureScript.AST.Declarations.ErrorMessage
                                    y
                                    (case w2 of wild2 { (,) ts fs -> ts }),
                                  case w2 of wild2 { (,) ts fs -> fs } #) } }
                 } in
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ (a, Language.PureScript.Errors.MultipleErrors)
                   @ a
                   (Control.Monad.Writer.Class.censor
                      @ Language.PureScript.Errors.MultipleErrors
                      @ m
                      @ (a, Language.PureScript.Errors.MultipleErrors)
                      $dMonadWriter
                      Language.PureScript.Errors.escalateWarningWhen1
                        `cast`
                      (<Language.PureScript.Errors.MultipleErrors>_R
                       ->_R Sym (Language.PureScript.Errors.N:MultipleErrors[0]))
                      (Control.Monad.Writer.Class.listen
                         @ Language.PureScript.Errors.MultipleErrors
                         @ m
                         $dMonadWriter
                         @ a
                         eta1))
                   (\ (ds :: (a, Language.PureScript.Errors.MultipleErrors)) ->
                    case ds of wild { (,) a1 w ->
                    let {
                      ds1 :: ([Language.PureScript.AST.Declarations.ErrorMessage],
                              [Language.PureScript.AST.Declarations.ErrorMessage])
                      = case $wgo1
                               w `cast`
                               (Language.PureScript.Errors.N:MultipleErrors[0]) of ww { (#,#) ww1 ww2 ->
                        (ww1, ww2) }
                    } in
                    GHC.Base.>>
                      @ m
                      $dMonad
                      @ ()
                      @ a
                      (Control.Monad.Writer.Class.tell
                         @ Language.PureScript.Errors.MultipleErrors
                         @ m
                         $dMonadWriter
                         (case ds1 of wild1 { (,) errors warnings ->
                          warnings
                            `cast`
                          (Sym (Language.PureScript.Errors.N:MultipleErrors[0])) }))
                      (GHC.Base.>>
                         @ m
                         $dMonad
                         @ ()
                         @ a
                         (case ds1 of wild1 { (,) errors warnings ->
                          case errors of wild2 {
                            [] -> lvl1143
                            : ds2 ds3
                            -> Control.Monad.Error.Class.throwError
                                 @ Language.PureScript.Errors.MultipleErrors
                                 @ m
                                 $dMonadError
                                 @ ()
                                 wild2
                                   `cast`
                                 (Sym (Language.PureScript.Errors.N:MultipleErrors[0])) } })
                         (GHC.Base.return @ m $dMonad @ a a1)) })) -}
6efe9f76c8fe7d8cb6010be7fa937617
  escalateWarningWhen1 ::
    Language.PureScript.Errors.MultipleErrors
    -> [Language.PureScript.AST.Declarations.ErrorMessage]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: Language.PureScript.Errors.MultipleErrors) ->
                 GHC.Types.[]
                   @ Language.PureScript.AST.Declarations.ErrorMessage) -}
a7b4c56c2074376790f68324c136c877
  findHint ::
    (Language.PureScript.AST.Declarations.ErrorMessageHint
     -> GHC.Base.Maybe a)
    -> Language.PureScript.AST.Declarations.ErrorMessage
    -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S(SL),1*U(1*U,A)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (w :: Language.PureScript.AST.Declarations.ErrorMessageHint
                         -> GHC.Base.Maybe a)
                   (w1 :: Language.PureScript.AST.Declarations.ErrorMessage) ->
                 case w1 of ww { Language.PureScript.AST.Declarations.ErrorMessage ww1 ww2 ->
                 Language.PureScript.Errors.$wfindHint @ a w ww1 }) -}
22664ca7d885fbab7b6d68783d0eb075
  indent :: Text.PrettyPrint.Boxes.Box -> Text.PrettyPrint.Boxes.Box
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(U(U),U(U),U)>m,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Text.PrettyPrint.Boxes.Box) ->
                 case Language.PureScript.Errors.$windent
                        w of ww { (#,,#) ww1 ww2 ww3 ->
                 Text.PrettyPrint.Boxes.Box ww1 ww2 ww3 }) -}
35ed8c57e8b6aa316f19416a3a8ab447
  line :: Data.Text.Internal.Text -> Text.PrettyPrint.Boxes.Box
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*U(U,U,U)>m,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Data.Text.Internal.Text) ->
                 case Language.PureScript.Errors.$wline
                        w of ww { (#,,#) ww1 ww2 ww3 ->
                 Text.PrettyPrint.Boxes.Box ww1 ww2 ww3 }) -}
4c9b5128b51636348f7df43938628f73
  lineS :: GHC.Base.String -> Text.PrettyPrint.Boxes.Box
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
     Unfolding: InlineRule (0, True, True)
                Text.PrettyPrint.Boxes.text -}
74dd8bfbf913e4f20750ca8eb483c8d6
  nonEmpty ::
    Language.PureScript.Errors.MultipleErrors -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Errors.MultipleErrors) ->
                 case x `cast`
                      (Language.PureScript.Errors.N:MultipleErrors[0]) of wild {
                   [] -> GHC.Types.False : ds1 ds2 -> GHC.Types.True }) -}
cbe171691874b64627255e4d14226fc3
  onErrorMessages ::
    (Language.PureScript.AST.Declarations.ErrorMessage
     -> Language.PureScript.AST.Declarations.ErrorMessage)
    -> Language.PureScript.Errors.MultipleErrors
    -> Language.PureScript.Errors.MultipleErrors
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                (GHC.Base.map
                   @ Language.PureScript.AST.Declarations.ErrorMessage
                   @ Language.PureScript.AST.Declarations.ErrorMessage)
                  `cast`
                (<Language.PureScript.AST.Declarations.ErrorMessage
                  -> Language.PureScript.AST.Declarations.ErrorMessage>_R
                 ->_R Sym (Language.PureScript.Errors.N:MultipleErrors[0])
                 ->_R Sym (Language.PureScript.Errors.N:MultipleErrors[0])) -}
0362f0f3b820998aa4d77fce28e69475
  onTypesInErrorMessage ::
    (Language.PureScript.Types.Type -> Language.PureScript.Types.Type)
    -> Language.PureScript.AST.Declarations.ErrorMessage
    -> Language.PureScript.AST.Declarations.ErrorMessage
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U(1*U,1*U)>m,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Errors.onTypesInErrorMessage1
                  `cast`
                (<Language.PureScript.Types.Type
                  -> Language.PureScript.Types.Type>_R
                 ->_R <Language.PureScript.AST.Declarations.ErrorMessage>_R
                 ->_R Data.Functor.Identity.N:Identity[0]
                          <Language.PureScript.AST.Declarations.ErrorMessage>_R) -}
e36d70cbec23b196082623903e75cc01
  onTypesInErrorMessage1 ::
    (Language.PureScript.Types.Type -> Language.PureScript.Types.Type)
    -> Language.PureScript.AST.Declarations.ErrorMessage
    -> Data.Functor.Identity.Identity
         Language.PureScript.AST.Declarations.ErrorMessage
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U(1*U,1*U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (f2 :: Language.PureScript.Types.Type
                          -> Language.PureScript.Types.Type)
                   (eta :: Language.PureScript.AST.Declarations.ErrorMessage) ->
                 Language.PureScript.Errors.onTypesInErrorMessage_$sonTypesInErrorMessageM
                   (\ (x :: Language.PureScript.Types.Type) -> f2 x)
                     `cast`
                   (<Language.PureScript.Types.Type>_R
                    ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                  <Language.PureScript.Types.Type>_R))
                   eta) -}
f2d3b0468895e4c9a06e2031bdd48b19
  onTypesInErrorMessageM ::
    GHC.Base.Applicative m =>
    (Language.PureScript.Types.Type
     -> m Language.PureScript.Types.Type)
    -> Language.PureScript.AST.Declarations.ErrorMessage
    -> m Language.PureScript.AST.Declarations.ErrorMessage
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLC(C(S))LLL),U(U(C(C1(U)),A),C(U),C(C1(U)),C(C1(C1(U))),A,A)><L,C(U)><S,1*U(1*U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ m :: * -> *
                   (w :: GHC.Base.Applicative m)
                   (w1 :: Language.PureScript.Types.Type
                          -> m Language.PureScript.Types.Type)
                   (w2 :: Language.PureScript.AST.Declarations.ErrorMessage) ->
                 case w2 of ww { Language.PureScript.AST.Declarations.ErrorMessage ww1 ww2 ->
                 Language.PureScript.Errors.$wonTypesInErrorMessageM
                   @ m
                   w
                   w1
                   ww1
                   ww2 }) -}
99d66a02a141819b585642b166bac265
  onTypesInErrorMessage_$sonTypesInErrorMessageM ::
    (Language.PureScript.Types.Type
     -> Data.Functor.Identity.Identity Language.PureScript.Types.Type)
    -> Language.PureScript.AST.Declarations.ErrorMessage
    -> Data.Functor.Identity.Identity
         Language.PureScript.AST.Declarations.ErrorMessage
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U(1*U,1*U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Types.Type
                         -> Data.Functor.Identity.Identity Language.PureScript.Types.Type)
                   (w1 :: Language.PureScript.AST.Declarations.ErrorMessage) ->
                 case w1 of ww { Language.PureScript.AST.Declarations.ErrorMessage ww1 ww2 ->
                 case Language.PureScript.Errors.$w$sonTypesInErrorMessageM
                        w
                        ww1
                        ww2 of ww3 { (#,#) ww4 ww5 ->
                 (Language.PureScript.AST.Declarations.ErrorMessage ww4 ww5)
                   `cast`
                 (Sym (Data.Functor.Identity.N:Identity[0]
                           <Language.PureScript.AST.Declarations.ErrorMessage>_R)) } }) -}
da72186e6c92f529dd0bd0ac4699ef1e
  parU ::
    Control.Monad.Error.Class.MonadError
      Language.PureScript.Errors.MultipleErrors m =>
    [a] -> (a -> m b) -> m [b]
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S(LC(C(S))LLL)LL),U(1*U(1*U(1*U(C(C1(U)),A),1*C1(U),A,C(C1(C1(U))),A,A),1*C1(C1(U)),A,C(U),A),C(U),C(C1(U)))><L,1*U><L,C(U)>,
     Unfolding: (\ @ m :: * -> *
                   @ a
                   @ b
                   ($dMonadError :: Control.Monad.Error.Class.MonadError
                                      Language.PureScript.Errors.MultipleErrors m)
                   (eta :: [a])
                   (eta1 :: a -> m b) ->
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.Error.Class.$p1MonadError
                       @ Language.PureScript.Errors.MultipleErrors
                       @ m
                       $dMonadError
                 } in
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ [Data.Either.Either Language.PureScript.Errors.MultipleErrors b]
                   @ [b]
                   (let {
                      lvl1143 :: Language.PureScript.Errors.MultipleErrors
                                 -> m (Data.Either.Either
                                         Language.PureScript.Errors.MultipleErrors b)
                        {- Arity: 1, Strictness: <L,U>,
                           Unfolding: InlineRule (1, True, False)
                                      (\ (x :: Language.PureScript.Errors.MultipleErrors) ->
                                       GHC.Base.return
                                         @ m
                                         $dMonad
                                         @ (Data.Either.Either
                                              Language.PureScript.Errors.MultipleErrors b)
                                         (Data.Either.Left
                                            @ Language.PureScript.Errors.MultipleErrors
                                            @ b
                                            x)) -}
                      = \ (x :: Language.PureScript.Errors.MultipleErrors) ->
                        GHC.Base.return
                          @ m
                          $dMonad
                          @ (Data.Either.Either Language.PureScript.Errors.MultipleErrors b)
                          (Data.Either.Left
                             @ Language.PureScript.Errors.MultipleErrors
                             @ b
                             x)
                    } in
                    let {
                      $dApplicative :: GHC.Base.Applicative m
                      = GHC.Base.$p1Monad @ m $dMonad
                    } in
                    let {
                      $dFunctor :: GHC.Base.Functor m
                      = GHC.Base.$p1Applicative @ m $dApplicative
                    } in
                    let {
                      z :: m [Data.Either.Either
                                Language.PureScript.Errors.MultipleErrors b]
                      = GHC.Base.pure
                          @ m
                          $dApplicative
                          @ [Data.Either.Either Language.PureScript.Errors.MultipleErrors b]
                          (GHC.Types.[]
                             @ (Data.Either.Either Language.PureScript.Errors.MultipleErrors b))
                    } in
                    letrec {
                      go8 :: [a]
                             -> m [Data.Either.Either
                                     Language.PureScript.Errors.MultipleErrors b]
                        {- Arity: 1, Strictness: <S,1*U> -}
                      = \ (ds :: [a]) ->
                        case ds of wild {
                          [] -> z
                          : y ys
                          -> GHC.Base.liftA2
                               @ m
                               $dApplicative
                               @ (Data.Either.Either Language.PureScript.Errors.MultipleErrors b)
                               @ [Data.Either.Either Language.PureScript.Errors.MultipleErrors b]
                               @ [Data.Either.Either Language.PureScript.Errors.MultipleErrors b]
                               (GHC.Types.:
                                  @ (Data.Either.Either
                                       Language.PureScript.Errors.MultipleErrors b))
                               (Control.Monad.Error.Class.catchError
                                  @ Language.PureScript.Errors.MultipleErrors
                                  @ m
                                  $dMonadError
                                  @ (Data.Either.Either Language.PureScript.Errors.MultipleErrors b)
                                  (GHC.Base.fmap
                                     @ m
                                     $dFunctor
                                     @ b
                                     @ (Data.Either.Either
                                          Language.PureScript.Errors.MultipleErrors b)
                                     (Data.Either.Right
                                        @ Language.PureScript.Errors.MultipleErrors
                                        @ b)
                                     (eta1 y))
                                  lvl1143)
                               (go8 ys) }
                    } in
                    go8 eta)
                   (\ (es :: [Data.Either.Either
                                Language.PureScript.Errors.MultipleErrors b]) ->
                    case Data.Either.$wpartitionEithers
                           @ Language.PureScript.Errors.MultipleErrors
                           @ b
                           es of ww { (#,#) ww1 ww2 ->
                    case ww1 of wild {
                      [] -> GHC.Base.return @ m $dMonad @ [b] ww2
                      : ipv ipv1
                      -> Control.Monad.Error.Class.throwError
                           @ Language.PureScript.Errors.MultipleErrors
                           @ m
                           $dMonadError
                           @ [b]
                           (Language.PureScript.Errors.parU1 ipv ipv1)
                             `cast`
                           (Sym (Language.PureScript.Errors.N:MultipleErrors[0])) } })) -}
e17a4765c702cffeea3167c69ce9c1f1
  parU1 ::
    Language.PureScript.Errors.MultipleErrors
    -> [Language.PureScript.Errors.MultipleErrors]
    -> [Language.PureScript.AST.Declarations.ErrorMessage]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U> -}
d8ca57e35818a7e93c5200eeb190e167
  positionedError ::
    Language.PureScript.AST.SourcePos.SourceSpan
    -> Language.PureScript.AST.Declarations.ErrorMessageHint
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m22,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.AST.SourcePos.SourceSpan) ->
                 Language.PureScript.AST.Declarations.PositionedError
                   (GHC.Base.$fApplicativeNonEmpty_$cpure
                      @ Language.PureScript.AST.SourcePos.SourceSpan
                      x)) -}
37dce5890976a3a862fc1f4b820d7aef
  ppeCodeColor ::
    Language.PureScript.Errors.PPEOptions
    -> GHC.Base.Maybe
         (System.Console.ANSI.Types.ColorIntensity,
          System.Console.ANSI.Types.Color)
  RecSel Left Language.PureScript.Errors.PPEOptions
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLLLL),1*U(1*U,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Errors.PPEOptions) ->
                 case ds of wild { Language.PureScript.Errors.PPEOptions ds1 ds2 ds3 ds4 ds5 ->
                 ds1 }) -}
37dce5890976a3a862fc1f4b820d7aef
  ppeFull :: Language.PureScript.Errors.PPEOptions -> GHC.Types.Bool
  RecSel Left Language.PureScript.Errors.PPEOptions
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSLLL),1*U(A,1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Errors.PPEOptions) ->
                 case ds of wild { Language.PureScript.Errors.PPEOptions ds1 ds2 ds3 ds4 ds5 ->
                 ds2 }) -}
37dce5890976a3a862fc1f4b820d7aef
  ppeLevel ::
    Language.PureScript.Errors.PPEOptions
    -> Language.PureScript.Errors.Level
  RecSel Left Language.PureScript.Errors.PPEOptions
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLSLL),1*U(A,A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Errors.PPEOptions) ->
                 case ds of wild { Language.PureScript.Errors.PPEOptions ds1 ds2 ds3 ds4 ds5 ->
                 ds3 }) -}
37dce5890976a3a862fc1f4b820d7aef
  ppeRelativeDirectory ::
    Language.PureScript.Errors.PPEOptions -> GHC.IO.FilePath
  RecSel Left Language.PureScript.Errors.PPEOptions
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLLLS),1*U(A,A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Errors.PPEOptions) ->
                 case ds of wild { Language.PureScript.Errors.PPEOptions ds1 ds2 ds3 ds4 ds5 ->
                 ds5 }) -}
37dce5890976a3a862fc1f4b820d7aef
  ppeShowDocs ::
    Language.PureScript.Errors.PPEOptions -> GHC.Types.Bool
  RecSel Left Language.PureScript.Errors.PPEOptions
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLLSL),1*U(A,A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Errors.PPEOptions) ->
                 case ds of wild { Language.PureScript.Errors.PPEOptions ds1 ds2 ds3 ds4 ds5 ->
                 ds4 }) -}
b2f40e458bdc8562a524176d5579a3de
  prettyPrintExport ::
    Language.PureScript.AST.Declarations.DeclarationRef
    -> Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.AST.Declarations.DeclarationRef) ->
                 case ds of wild {
                   DEFAULT
                   -> case Language.PureScript.Errors.prettyPrintRef wild of wild1 {
                        GHC.Base.Nothing -> Language.PureScript.Errors.prettyPrintExport1
                        GHC.Base.Just v -> v }
                   Language.PureScript.AST.Declarations.TypeRef ds1 pn ds2
                   -> pn
                        `cast`
                      (Language.PureScript.Names.N:ProperName[0]
                           <'Language.PureScript.Names.TypeName>_P) }) -}
f00fcdfdbbde4957754149df25b35bb9
  prettyPrintExport1 :: Data.Text.Internal.Text
  {- Strictness: x -}
1a8c7f203cdcca602308b8391405d23f
  prettyPrintImport ::
    Language.PureScript.Names.ModuleName
    -> Language.PureScript.AST.Declarations.ImportDeclarationType
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Data.Text.Internal.Text
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,1*U> -}
4aa93ae5a9ef68ba85aa2d04599d93ff
  prettyPrintMultipleErrors ::
    Language.PureScript.Errors.PPEOptions
    -> Language.PureScript.Errors.MultipleErrors -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U(U,U,A,U,U)><S,U>,
     Unfolding: (\ (ppeOptions :: Language.PureScript.Errors.PPEOptions)
                   (x :: Language.PureScript.Errors.MultipleErrors) ->
                 Data.OldList.unlines
                   (GHC.Base.map
                      @ Text.PrettyPrint.Boxes.Box
                      @ [GHC.Types.Char]
                      Language.PureScript.Errors.renderBox
                      (Language.PureScript.Errors.prettyPrintMultipleErrorsWith
                         (case ppeOptions of wild { Language.PureScript.Errors.PPEOptions ds ds1 ds2 ds3 ds4 ->
                          Language.PureScript.Errors.PPEOptions
                            ds
                            ds1
                            Language.PureScript.Errors.Error
                            ds3
                            ds4 })
                         Language.PureScript.Errors.prettyPrintMultipleErrors1
                         Language.PureScript.Errors.$fShowLevel4
                         x))) -}
22c7e70702232b50a1e0640ed7e99859
  prettyPrintMultipleErrors1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Errors.prettyPrintMultipleErrors2) -}
4ef2fd039e52995cbb08ed53a34b1d50
  prettyPrintMultipleErrors2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Error found:"#) -}
cd1fddd77889444534ebb9c90ece0343
  prettyPrintMultipleErrorsBox ::
    Language.PureScript.Errors.PPEOptions
    -> Language.PureScript.Errors.MultipleErrors
    -> [Text.PrettyPrint.Boxes.Box]
  {- Arity: 2, Strictness: <L,1*U(U,U,A,U,U)><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ppeOptions :: Language.PureScript.Errors.PPEOptions)
                   (eta :: Language.PureScript.Errors.MultipleErrors) ->
                 Language.PureScript.Errors.prettyPrintMultipleErrorsWith
                   (case ppeOptions of wild { Language.PureScript.Errors.PPEOptions ds ds1 ds2 ds3 ds4 ->
                    Language.PureScript.Errors.PPEOptions
                      ds
                      ds1
                      Language.PureScript.Errors.Error
                      ds3
                      ds4 })
                   Language.PureScript.Errors.prettyPrintMultipleErrors1
                   Language.PureScript.Errors.$fShowLevel4
                   eta) -}
4cc8c18e8f16b93ad3eba35ffb80d4da
  prettyPrintMultipleErrorsWith ::
    Language.PureScript.Errors.PPEOptions
    -> GHC.Base.String
    -> GHC.Base.String
    -> Language.PureScript.Errors.MultipleErrors
    -> [Text.PrettyPrint.Boxes.Box]
  {- Arity: 4, Strictness: <L,U(U,U,U,U,U)><L,U><L,U><S,U> -}
75eb2fb7daa28467c607fa4e99bdb3d1
  prettyPrintMultipleWarnings ::
    Language.PureScript.Errors.PPEOptions
    -> Language.PureScript.Errors.MultipleErrors -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U(U,U,A,U,U)><S,U>,
     Unfolding: (\ (ppeOptions :: Language.PureScript.Errors.PPEOptions)
                   (x :: Language.PureScript.Errors.MultipleErrors) ->
                 Data.OldList.unlines
                   (GHC.Base.map
                      @ Text.PrettyPrint.Boxes.Box
                      @ [GHC.Types.Char]
                      Language.PureScript.Errors.renderBox
                      (Language.PureScript.Errors.prettyPrintMultipleErrorsWith
                         (case ppeOptions of wild { Language.PureScript.Errors.PPEOptions ds ds1 ds2 ds3 ds4 ->
                          Language.PureScript.Errors.PPEOptions
                            ds
                            ds1
                            Language.PureScript.Errors.Warning
                            ds3
                            ds4 })
                         Language.PureScript.Errors.prettyPrintMultipleWarnings1
                         Language.PureScript.Errors.$fShowLevel2
                         x))) -}
f10afeccc30ac68a1111cdb59ec96aa5
  prettyPrintMultipleWarnings1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Errors.prettyPrintMultipleWarnings2) -}
757d73d4a31beee26dcab57652fac45f
  prettyPrintMultipleWarnings2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Warning found:"#) -}
fcc147a858e8818358c49b3b1ff720f0
  prettyPrintMultipleWarningsBox ::
    Language.PureScript.Errors.PPEOptions
    -> Language.PureScript.Errors.MultipleErrors
    -> [Text.PrettyPrint.Boxes.Box]
  {- Arity: 2, Strictness: <L,1*U(U,U,A,U,U)><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ppeOptions :: Language.PureScript.Errors.PPEOptions)
                   (eta :: Language.PureScript.Errors.MultipleErrors) ->
                 Language.PureScript.Errors.prettyPrintMultipleErrorsWith
                   (case ppeOptions of wild { Language.PureScript.Errors.PPEOptions ds ds1 ds2 ds3 ds4 ->
                    Language.PureScript.Errors.PPEOptions
                      ds
                      ds1
                      Language.PureScript.Errors.Warning
                      ds3
                      ds4 })
                   Language.PureScript.Errors.prettyPrintMultipleWarnings1
                   Language.PureScript.Errors.$fShowLevel2
                   eta) -}
2ba40fb4cebe918252e83bff98f72b51
  prettyPrintParseError ::
    Text.Parsec.Error.ParseError -> Text.PrettyPrint.Boxes.Box
  {- Arity: 1, Strictness: <S(LS),1*U(A,1*U)>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Text.Parsec.Error.ParseError) ->
                 case w of ww { Text.Parsec.Error.ParseError ww1 ww2 ->
                 case Language.PureScript.Errors.$wprettyPrintParseError
                        ww2 of ww3 { (#,,#) ww4 ww5 ww6 ->
                 Text.PrettyPrint.Boxes.Box ww4 ww5 ww6 } }) -}
9c75e7df4372eee446054cdc39ac564c
  prettyPrintParseError1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Errors.prettyPrintParseError2) -}
1b5094fce56da99ed93c42ba0b343fdf
  prettyPrintParseError10 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("or"#) -}
3fe539b7fb60b8f1013c11583c8250d7
  prettyPrintParseError2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("end of input"#) -}
a1394c7b63702eaa13ed4ac52459eb4a
  prettyPrintParseError3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Errors.prettyPrintParseError4) -}
5aa091ab09f56e35e352d5d677d96999
  prettyPrintParseError4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("unexpected"#) -}
8a25ab7cfa5c6ac0e27daf5af30315c2
  prettyPrintParseError5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Errors.prettyPrintParseError6) -}
e3b68adb8642d46f8766807c36f20b3f
  prettyPrintParseError6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("expecting"#) -}
7d0387d5f8fe171c67d941c78ba71b28
  prettyPrintParseError7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Errors.prettyPrintParseError8) -}
1b79d30be1bafabfffbba67f2dfab9f7
  prettyPrintParseError8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("unknown parse error"#) -}
5803958b79f49422e357779a266d6e81
  prettyPrintParseError9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Errors.prettyPrintParseError10) -}
b55f8dcd7471f348568aed05341a6000
  prettyPrintParseErrorMessages ::
    GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> [Text.Parsec.Error.Message]
    -> Text.PrettyPrint.Boxes.Box
  {- Arity: 6, Strictness: <L,U><L,U><L,1*U><L,U><L,U><S,1*U>m,
     Inline: [0],
     Unfolding: InlineRule (6, True, False)
                (\ (w :: GHC.Base.String)
                   (w1 :: GHC.Base.String)
                   (w2 :: GHC.Base.String)
                   (w3 :: GHC.Base.String)
                   (w4 :: GHC.Base.String)
                   (w5 :: [Text.Parsec.Error.Message]) ->
                 case Language.PureScript.Errors.$wprettyPrintParseErrorMessages
                        w
                        w1
                        w2
                        w3
                        w4
                        w5 of ww { (#,,#) ww1 ww2 ww3 ->
                 Text.PrettyPrint.Boxes.Box ww1 ww2 ww3 }) -}
1aa0a04981f80d5250a5bc5655434e43
  prettyPrintRef ::
    Language.PureScript.AST.Declarations.DeclarationRef
    -> GHC.Base.Maybe Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S,1*U> -}
9c0d4ab80938df67a11af43623eb4cf3
  prettyPrintSingleError ::
    Language.PureScript.Errors.PPEOptions
    -> Language.PureScript.AST.Declarations.ErrorMessage
    -> Text.PrettyPrint.Boxes.Box
  {- Arity: 2,
     Strictness: <S(LSLLL),1*U(U,U,1*U,1*U,U)><S,1*U(1*U,U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Errors.PPEOptions)
                   (w1 :: Language.PureScript.AST.Declarations.ErrorMessage) ->
                 case w of ww { Language.PureScript.Errors.PPEOptions ww1 ww2 ww3 ww4 ww5 ->
                 case w1 of ww6 { Language.PureScript.AST.Declarations.ErrorMessage ww7 ww8 ->
                 case Language.PureScript.Errors.$wprettyPrintSingleError
                        ww1
                        ww2
                        ww3
                        ww4
                        ww5
                        ww7
                        ww8 of ww9 { (#,,#) ww10 ww11 ww12 ->
                 Text.PrettyPrint.Boxes.Box ww10 ww11 ww12 } } }) -}
3f4c45a84e1b8694c152ae230ec566c1
  reflectErrors ::
    Control.Monad.Error.Class.MonadError e m =>
    m (Data.Either.Either e a) -> m a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LC(C(S))LLL)LL),U(1*U(A,1*C1(C1(U)),A,C(U),A),C(U),A)><L,U>,
     Unfolding: (\ @ e
                   @ m :: * -> *
                   @ a
                   ($dMonadError :: Control.Monad.Error.Class.MonadError e m)
                   (eta :: m (Data.Either.Either e a)) ->
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.Error.Class.$p1MonadError @ e @ m $dMonadError
                 } in
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ (Data.Either.Either e a)
                   @ a
                   eta
                   (\ (ds1 :: Data.Either.Either e a) ->
                    case ds1 of wild {
                      Data.Either.Left x
                      -> Control.Monad.Error.Class.throwError @ e @ m $dMonadError @ a x
                      Data.Either.Right y -> GHC.Base.return @ m $dMonad @ a y })) -}
a271d1d4f594bb5d77efd0f360b48456
  reifyErrors ::
    Control.Monad.Error.Class.MonadError e m =>
    m a -> m (Data.Either.Either e a)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLC(C(S))),U(1*U(1*U(1*U(1*C1(C1(U)),A),A,A,A,A,A),A,A,C(U),A),A,1*C1(C1(U)))><L,U>,
     Unfolding: (\ @ e
                   @ m :: * -> *
                   @ a
                   ($dMonadError :: Control.Monad.Error.Class.MonadError e m)
                   (eta :: m a) ->
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.Error.Class.$p1MonadError @ e @ m $dMonadError
                 } in
                 Control.Monad.Error.Class.catchError
                   @ e
                   @ m
                   $dMonadError
                   @ (Data.Either.Either e a)
                   (GHC.Base.fmap
                      @ m
                      (GHC.Base.$p1Applicative @ m (GHC.Base.$p1Monad @ m $dMonad))
                      @ a
                      @ (Data.Either.Either e a)
                      (Data.Either.Right @ e @ a)
                      eta)
                   (\ (x :: e) ->
                    GHC.Base.return
                      @ m
                      $dMonad
                      @ (Data.Either.Either e a)
                      (Data.Either.Left @ e @ a x))) -}
7f6f93d9d728e36de4ca6de52c6c6350
  renderBox :: Text.PrettyPrint.Boxes.Box -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(U(U),U(U),1*U)>,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Text.PrettyPrint.Boxes.Box) ->
                 case w of ww { Text.PrettyPrint.Boxes.Box ww1 ww2 ww3 ->
                 Language.PureScript.Errors.$wrenderBox ww1 ww2 ww3 }) -}
41acd724786fd00d2daafa686fee386e
  renderBox1 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (Data.OldList.dropWhileEnd
                   @ GHC.Types.Char
                   GHC.Unicode.isSpace) -}
e91f7a6f10140a8d459020c70d5a6958
  renderBox_go :: [[GHC.Types.Char]] -> [[GHC.Types.Char]]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
58dbc7f40c821f0454bd876e1d34979d
  renderBox_go1 :: [GHC.Types.Char] -> Data.Semigroup.Internal.All
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
9a7c64cec1d87b588126baeaf8fdcd16
  replaceUnknowns ::
    Language.PureScript.Types.Type
    -> Control.Monad.Trans.State.Lazy.State
         Language.PureScript.Errors.TypeMap Language.PureScript.Types.Type
  {- Arity: 1,
     Unfolding: (Language.PureScript.Types.everywhereOnTypesM
                   @ (Control.Monad.Trans.State.Lazy.StateT
                        Language.PureScript.Errors.TypeMap Data.Functor.Identity.Identity)
                   (Language.PureScript.Errors.$s$fMonadStateT
                      @ Language.PureScript.Errors.TypeMap)
                   Language.PureScript.Errors.replaceUnknowns1
                     `cast`
                   (<Language.PureScript.Types.Type>_R
                    ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                  <Language.PureScript.Errors.TypeMap>_N
                                  <Data.Functor.Identity.Identity>_R
                                  <Language.PureScript.Types.Type>_N))) -}
3beb0bbbc75052e5c522c51dde1a062a
  replaceUnknowns1 ::
    Language.PureScript.Types.Type
    -> Language.PureScript.Errors.TypeMap
    -> Data.Functor.Identity.Identity
         (Language.PureScript.Types.Type,
          Language.PureScript.Errors.TypeMap)
  {- Arity: 2, Strictness: <S,1*U><L,U(U,U,U(U))>m, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Types.Type)
                   (w1 :: Language.PureScript.Errors.TypeMap) ->
                 case Language.PureScript.Errors.$wreplaceTypes
                        w
                        w1 of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2)
                   `cast`
                 (Sym (Data.Functor.Identity.N:Identity[0]
                           <(Language.PureScript.Types.Type,
                             Language.PureScript.Errors.TypeMap)>_R)) }) -}
f843b34a93fe990a8e71af5f4eb4be9f
  rethrow ::
    Control.Monad.Error.Class.MonadError e m => (e -> e) -> m a -> m a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLC(C(S))),U(A,C(U),1*C1(C1(U)))><L,C(U)><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ e
                   @ m :: * -> *
                   @ a
                   ($dMonadError :: Control.Monad.Error.Class.MonadError e m)
                   (f2 :: e -> e)
                   (eta :: m a) ->
                 Control.Monad.Error.Class.catchError
                   @ e
                   @ m
                   $dMonadError
                   @ a
                   eta
                   (\ (x :: e) ->
                    Control.Monad.Error.Class.throwError
                      @ e
                      @ m
                      $dMonadError
                      @ a
                      (f2 x))) -}
75b2386b9d003827c72a63532c561f67
  rethrowWithPosition ::
    Control.Monad.Error.Class.MonadError
      Language.PureScript.Errors.MultipleErrors m =>
    Language.PureScript.AST.SourcePos.SourceSpan -> m a -> m a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLC(C(S))),U(A,C(U),1*C1(C1(U)))><L,U><L,U>,
     Unfolding: (\ @ m :: * -> *
                   @ a
                   ($dMonadError :: Control.Monad.Error.Class.MonadError
                                      Language.PureScript.Errors.MultipleErrors m)
                   (pos :: Language.PureScript.AST.SourcePos.SourceSpan)
                   (eta :: m a) ->
                 let {
                   f2 :: Language.PureScript.AST.Declarations.ErrorMessage
                         -> Language.PureScript.AST.Declarations.ErrorMessage
                     {- Arity: 1 -}
                   = Language.PureScript.Errors.withPosition pos
                 } in
                 Control.Monad.Error.Class.catchError
                   @ Language.PureScript.Errors.MultipleErrors
                   @ m
                   $dMonadError
                   @ a
                   eta
                   (\ (x :: Language.PureScript.Errors.MultipleErrors) ->
                    Control.Monad.Error.Class.throwError
                      @ Language.PureScript.Errors.MultipleErrors
                      @ m
                      $dMonadError
                      @ a
                      (GHC.Base.map
                         @ Language.PureScript.AST.Declarations.ErrorMessage
                         @ Language.PureScript.AST.Declarations.ErrorMessage
                         f2
                         x `cast` (Language.PureScript.Errors.N:MultipleErrors[0]))
                        `cast`
                      (Sym (Language.PureScript.Errors.N:MultipleErrors[0])))) -}
ad1de73a1d5a6b0ccd9657dedebc94f3
  runMultipleErrors ::
    Language.PureScript.Errors.MultipleErrors
    -> [Language.PureScript.AST.Declarations.ErrorMessage]
  RecSel Left Language.PureScript.Errors.MultipleErrors
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Errors.runMultipleErrors1
                  `cast`
                (<Language.PureScript.Errors.MultipleErrors>_R
                 ->_R Language.PureScript.Errors.N:MultipleErrors[0]) -}
ad1de73a1d5a6b0ccd9657dedebc94f3
  runMultipleErrors1 ::
    Language.PureScript.Errors.MultipleErrors
    -> Language.PureScript.Errors.MultipleErrors
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: Language.PureScript.Errors.MultipleErrors) -> ds) -}
d1c73c81d7b81a31be22d9e9c156a9f6
  showSuggestion ::
    Language.PureScript.AST.Declarations.SimpleErrorMessage
    -> Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (suggestion :: Language.PureScript.AST.Declarations.SimpleErrorMessage) ->
                 case Language.PureScript.Errors.errorSuggestion
                        suggestion of wild {
                   GHC.Base.Nothing -> Data.Text.Internal.empty_
                   GHC.Base.Just ds
                   -> ds
                        `cast`
                      (Language.PureScript.Errors.N:ErrorSuggestion[0]) }) -}
8cdec4403bbf7ee5542ebca436a64fe1
  singleError ::
    Language.PureScript.AST.Declarations.ErrorMessage
    -> Language.PureScript.Errors.MultipleErrors
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m2,
     Unfolding: InlineRule (0, True, True)
                (GHC.Base.$fApplicative[]_$cpure
                   @ Language.PureScript.AST.Declarations.ErrorMessage)
                  `cast`
                (<Language.PureScript.AST.Declarations.ErrorMessage>_R
                 ->_R Sym (Language.PureScript.Errors.N:MultipleErrors[0])) -}
7711562f5c8c412a4f7f391f8fb5f855
  stripModuleAndSpan ::
    Language.PureScript.AST.Declarations.ErrorMessage
    -> Language.PureScript.AST.Declarations.ErrorMessage
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(1*U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.AST.Declarations.ErrorMessage) ->
                 case ds of wild { Language.PureScript.AST.Declarations.ErrorMessage hints e ->
                 Language.PureScript.AST.Declarations.ErrorMessage
                   (GHC.Base.build
                      @ Language.PureScript.AST.Declarations.ErrorMessageHint
                      (\ @ b
                         (c1 :: Language.PureScript.AST.Declarations.ErrorMessageHint
                                -> b -> b)[OneShot]
                         (n :: b)[OneShot] ->
                       GHC.Base.foldr
                         @ Language.PureScript.AST.Declarations.ErrorMessageHint
                         @ b
                         (GHC.List.filterFB
                            @ Language.PureScript.AST.Declarations.ErrorMessageHint
                            @ b
                            c1
                            Language.PureScript.Errors.stripModuleAndSpan1)
                         n
                         hints))
                   e }) -}
449248dc7b1570e7aee6fc610baba1f7
  stripModuleAndSpan1 ::
    Language.PureScript.AST.Declarations.ErrorMessageHint
    -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.AST.Declarations.ErrorMessageHint) ->
                 case x of wild {
                   DEFAULT -> GHC.Types.True
                   Language.PureScript.AST.Declarations.ErrorInModule ds
                   -> GHC.Types.False
                   Language.PureScript.AST.Declarations.PositionedError ds
                   -> GHC.Types.False }) -}
b1b4aefd9e2d17e5b532b12508a6d20b
  suggestionSpan ::
    Language.PureScript.AST.Declarations.ErrorMessage
    -> GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.PureScript.AST.Declarations.ErrorMessage) ->
                 case w of ww { Language.PureScript.AST.Declarations.ErrorMessage ww1 ww2 ->
                 Language.PureScript.Errors.$wsuggestionSpan ww1 ww2 }) -}
6662ac016a055b577b8b4ec4144d6249
  toTypelevelString ::
    Language.PureScript.Types.Type
    -> GHC.Base.Maybe Text.PrettyPrint.Boxes.Box
  {- Arity: 1, Strictness: <S,1*U> -}
5cdb754135809e92d129bf77d6f6dd99
  umNextIndex :: Language.PureScript.Errors.TypeMap -> GHC.Types.Int
  RecSel Left Language.PureScript.Errors.TypeMap
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLS),1*U(A,A,1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Errors.TypeMap) ->
                 case ds of wild { Language.PureScript.Errors.TypeMap ds1 ds2 ds3 ->
                 ds3 }) -}
5cdb754135809e92d129bf77d6f6dd99
  umSkolemMap ::
    Language.PureScript.Errors.TypeMap
    -> Data.Map.Internal.Map
         GHC.Types.Int
         (GHC.Base.String, GHC.Types.Int,
          GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan)
  RecSel Left Language.PureScript.Errors.TypeMap
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLL),1*U(1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Errors.TypeMap) ->
                 case ds of wild { Language.PureScript.Errors.TypeMap ds1 ds2 ds3 ->
                 ds1 }) -}
5cdb754135809e92d129bf77d6f6dd99
  umUnknownMap ::
    Language.PureScript.Errors.TypeMap
    -> Data.Map.Internal.Map GHC.Types.Int GHC.Types.Int
  RecSel Left Language.PureScript.Errors.TypeMap
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSL),1*U(A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Errors.TypeMap) ->
                 case ds of wild { Language.PureScript.Errors.TypeMap ds1 ds2 ds3 ->
                 ds2 }) -}
9e4106662e6ce3debb3a91374fcbef46
  unwrapErrorMessage ::
    Language.PureScript.AST.Declarations.ErrorMessage
    -> Language.PureScript.AST.Declarations.SimpleErrorMessage
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.AST.Declarations.ErrorMessage) ->
                 case ds of wild { Language.PureScript.AST.Declarations.ErrorMessage ds1 se ->
                 se }) -}
38a15ae4c90b2d8cb225173895fa7070
  warnAndRethrow ::
    (Control.Monad.Error.Class.MonadError e m,
     Control.Monad.Writer.Class.MonadWriter e m) =>
    (e -> e) -> m a -> m a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LLC(C(S))),U(A,C(U),1*C1(C1(U)))><L,U(A,U(A,C(C1(U)),A,C(U),A),A,A,A,C(U))><L,U><L,U>,
     Unfolding: (\ @ e
                   @ m :: * -> *
                   @ a
                   ($dMonadError :: Control.Monad.Error.Class.MonadError e m)
                   ($dMonadWriter :: Control.Monad.Writer.Class.MonadWriter e m)
                   (f2 :: e -> e)
                   (x :: m a) ->
                 Control.Monad.Error.Class.catchError
                   @ e
                   @ m
                   $dMonadError
                   @ a
                   (Control.Monad.Writer.Class.censor @ e @ m @ a $dMonadWriter f2 x)
                   (\ (x1 :: e) ->
                    Control.Monad.Error.Class.throwError
                      @ e
                      @ m
                      $dMonadError
                      @ a
                      (f2 x1))) -}
244bd1e640516a8c9aa68657648a6934
  warnAndRethrowWithPosition ::
    (Control.Monad.Error.Class.MonadError
       Language.PureScript.Errors.MultipleErrors m,
     Control.Monad.Writer.Class.MonadWriter
       Language.PureScript.Errors.MultipleErrors m) =>
    Language.PureScript.AST.SourcePos.SourceSpan -> m a -> m a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LLC(C(S))),U(A,C(U),C(C1(U)))><L,U(A,U(A,C(C1(U)),A,C(U),A),A,A,A,C(U))><L,U><L,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ m :: * -> *
                   @ a
                   ($dMonadError :: Control.Monad.Error.Class.MonadError
                                      Language.PureScript.Errors.MultipleErrors m)
                   ($dMonadWriter :: Control.Monad.Writer.Class.MonadWriter
                                       Language.PureScript.Errors.MultipleErrors m)
                   (pos :: Language.PureScript.AST.SourcePos.SourceSpan)
                   (x :: m a) ->
                 Language.PureScript.Errors.rethrowWithPosition
                   @ m
                   @ a
                   $dMonadError
                   pos
                   (Language.PureScript.Errors.warnWithPosition
                      @ m
                      @ a
                      $dMonadWriter
                      pos
                      x)) -}
f626dbbef53d3f006a3630d5b23307ee
  warnWithPosition ::
    Control.Monad.Writer.Class.MonadWriter
      Language.PureScript.Errors.MultipleErrors m =>
    Language.PureScript.AST.SourcePos.SourceSpan -> m a -> m a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLLLLC(S)),U(A,U(A,C(C1(U)),A,C(U),A),A,A,A,C(U))><L,U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ m :: * -> *
                   @ a
                   ($dMonadWriter :: Control.Monad.Writer.Class.MonadWriter
                                       Language.PureScript.Errors.MultipleErrors m)
                   (pos :: Language.PureScript.AST.SourcePos.SourceSpan)
                   (eta :: m a) ->
                 Control.Monad.Writer.Class.censor
                   @ Language.PureScript.Errors.MultipleErrors
                   @ m
                   @ a
                   $dMonadWriter
                   (GHC.Base.map
                      @ Language.PureScript.AST.Declarations.ErrorMessage
                      @ Language.PureScript.AST.Declarations.ErrorMessage
                      (Language.PureScript.Errors.withPosition pos))
                     `cast`
                   (Sym (Language.PureScript.Errors.N:MultipleErrors[0])
                    ->_R Sym (Language.PureScript.Errors.N:MultipleErrors[0]))
                   eta) -}
9a84c7073562f33043a43111f8bdb2e7
  withPosition ::
    Language.PureScript.AST.SourcePos.SourceSpan
    -> Language.PureScript.AST.Declarations.ErrorMessage
    -> Language.PureScript.AST.Declarations.ErrorMessage
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U(U,U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (pos :: Language.PureScript.AST.SourcePos.SourceSpan)
                   (ds :: Language.PureScript.AST.Declarations.ErrorMessage) ->
                 case ds of wild { Language.PureScript.AST.Declarations.ErrorMessage hints se ->
                 Language.PureScript.AST.Declarations.ErrorMessage
                   (GHC.Types.:
                      @ Language.PureScript.AST.Declarations.ErrorMessageHint
                      (Language.PureScript.Errors.positionedError pos)
                      hints)
                   se }) -}
instance GHC.Base.Monoid [Language.PureScript.Errors.MultipleErrors]
  = Language.PureScript.Errors.$fMonoidMultipleErrors
instance GHC.Base.Semigroup [Language.PureScript.Errors.MultipleErrors]
  = Language.PureScript.Errors.$fSemigroupMultipleErrors
instance GHC.Show.Show [Language.PureScript.Errors.Level]
  = Language.PureScript.Errors.$fShowLevel
instance GHC.Show.Show [Language.PureScript.Errors.MultipleErrors]
  = Language.PureScript.Errors.$fShowMultipleErrors
instance GHC.Show.Show [Language.PureScript.Errors.TypeMap]
  = Language.PureScript.Errors.$fShowTypeMap
"SPEC onTypesInErrorMessageM @ Identity" forall ($dApplicative :: GHC.Base.Applicative
                                                                    Data.Functor.Identity.Identity)
  Language.PureScript.Errors.onTypesInErrorMessageM @ Data.Functor.Identity.Identity
                                                    $dApplicative
  = Language.PureScript.Errors.onTypesInErrorMessage_$sonTypesInErrorMessageM
"SPEC/Language.PureScript.Errors $fApplicativeStateT @ Identity _" [orphan] forall @ s
                                                                                   (v1 :: GHC.Base.Monad
                                                                                            Data.Functor.Identity.Identity)
                                                                                   (v :: GHC.Base.Functor
                                                                                           Data.Functor.Identity.Identity)
  Control.Monad.Trans.State.Lazy.$fApplicativeStateT @ Data.Functor.Identity.Identity
                                                     @ s
                                                     v
                                                     v1
  = Language.PureScript.Errors.$s$fApplicativeStateT @ s
"SPEC/Language.PureScript.Errors $fApplicativeStateT_$c*> @ Identity _" [orphan] forall @ s
                                                                                        ($dMonad :: GHC.Base.Monad
                                                                                                      Data.Functor.Identity.Identity)
                                                                                        ($dFunctor :: GHC.Base.Functor
                                                                                                        Data.Functor.Identity.Identity)
  Control.Monad.Trans.State.Lazy.$fApplicativeStateT_$c*> @ Data.Functor.Identity.Identity
                                                          @ s
                                                          $dFunctor
                                                          $dMonad
  = Language.PureScript.Errors.$s$fApplicativeStateT_$s$fApplicativeStateT_$c*>
      @ s
"SPEC/Language.PureScript.Errors $fApplicativeStateT_$c<*> @ Identity _" [orphan] forall @ s
                                                                                         ($dMonad :: GHC.Base.Monad
                                                                                                       Data.Functor.Identity.Identity)
                                                                                         ($dFunctor :: GHC.Base.Functor
                                                                                                         Data.Functor.Identity.Identity)
  Control.Monad.Trans.State.Lazy.$fApplicativeStateT_$c<*> @ Data.Functor.Identity.Identity
                                                           @ s
                                                           $dFunctor
                                                           $dMonad
  = Language.PureScript.Errors.$s$fApplicativeStateT_$s$fApplicativeStateT_$c<*>
      @ s
"SPEC/Language.PureScript.Errors $fApplicativeStateT_$cpure @ Identity _" [orphan] forall @ s
                                                                                          ($dMonad :: GHC.Base.Monad
                                                                                                        Data.Functor.Identity.Identity)
                                                                                          ($dFunctor :: GHC.Base.Functor
                                                                                                          Data.Functor.Identity.Identity)
  Control.Monad.Trans.State.Lazy.$fApplicativeStateT_$cpure @ Data.Functor.Identity.Identity
                                                            @ s
                                                            $dFunctor
                                                            $dMonad
  = Language.PureScript.Errors.$s$fApplicativeStateT_$s$fApplicativeStateT_$cpure
      @ s
"SPEC/Language.PureScript.Errors $fEq(,) @ Label @ Type" [orphan] forall (v1 :: GHC.Classes.Eq
                                                                                  Language.PureScript.Types.Type)
                                                                         (v :: GHC.Classes.Eq
                                                                                 Language.PureScript.Label.Label)
  GHC.Classes.$fEq(,) @ Language.PureScript.Label.Label
                      @ Language.PureScript.Types.Type
                      v
                      v1
  = Language.PureScript.Errors.$s$fEq(,)
"SPEC/Language.PureScript.Errors $fEq(,)_$c/= @ Label @ Type" [orphan] forall ($dEq1 :: GHC.Classes.Eq
                                                                                          Language.PureScript.Types.Type)
                                                                              ($dEq :: GHC.Classes.Eq
                                                                                         Language.PureScript.Label.Label)
  GHC.Classes.$fEq(,)_$c/= @ Language.PureScript.Label.Label
                           @ Language.PureScript.Types.Type
                           $dEq
                           $dEq1
  = Language.PureScript.Errors.$s$fEq(,)_$s$fEq(,)_$c/=
"SPEC/Language.PureScript.Errors $fFunctorStateT @ Identity _" [orphan] forall @ s
                                                                               (v :: GHC.Base.Functor
                                                                                       Data.Functor.Identity.Identity)
  Control.Monad.Trans.State.Lazy.$fFunctorStateT @ Data.Functor.Identity.Identity
                                                 @ s
                                                 v
  = Language.PureScript.Errors.$s$fApplicativeStateT_$s$fFunctorStateT
      @ s
"SPEC/Language.PureScript.Errors $fMonadStateT @ Identity _" [orphan] forall @ s
                                                                             (v :: GHC.Base.Monad
                                                                                     Data.Functor.Identity.Identity)
  Control.Monad.Trans.State.Lazy.$fMonadStateT @ Data.Functor.Identity.Identity
                                               @ s
                                               v
  = Language.PureScript.Errors.$s$fMonadStateT @ s
"SPEC/Language.PureScript.Errors $fMonadStateT_$c>> @ Identity _" [orphan] forall @ s
                                                                                  ($dMonad :: GHC.Base.Monad
                                                                                                Data.Functor.Identity.Identity)
  Control.Monad.Trans.State.Lazy.$fMonadStateT_$c>> @ Data.Functor.Identity.Identity
                                                    @ s
                                                    $dMonad
  = Language.PureScript.Errors.$s$fMonadStateT_$s$fMonadStateT_$c>>
      @ s
"SPEC/Language.PureScript.Errors $fMonadStateT_$c>>= @ Identity _" [orphan] forall @ s
                                                                                   ($dMonad :: GHC.Base.Monad
                                                                                                 Data.Functor.Identity.Identity)
  Control.Monad.Trans.State.Lazy.$fMonadStateT_$c>>= @ Data.Functor.Identity.Identity
                                                     @ s
                                                     $dMonad
  = Language.PureScript.Errors.$s$fMonadStateT_$s$fMonadStateT_$c>>=
      @ s
"SPEC/Language.PureScript.Errors $fMonadStateT_$cfail @ Identity _" [orphan] forall @ s
                                                                                    ($dMonad :: GHC.Base.Monad
                                                                                                  Data.Functor.Identity.Identity)
  Control.Monad.Trans.State.Lazy.$fMonadStateT_$cfail @ Data.Functor.Identity.Identity
                                                      @ s
                                                      $dMonad
  = Language.PureScript.Errors.$s$fMonadStateT_$s$fMonadStateT_$cfail
      @ s
"SPEC/Language.PureScript.Errors $fShow(,,) @ [Char] @ Int @ (Maybe
                                                               SourceSpan)" [orphan] forall (v2 :: GHC.Show.Show
                                                                                                                                                                         (GHC.Base.Maybe
                                                                                                                                                                            Language.PureScript.AST.SourcePos.SourceSpan))
                                                                                                                                                                (v1 :: GHC.Show.Show
                                                                                                                                                                         GHC.Types.Int)
                                                                                                                                                                (v :: GHC.Show.Show
                                                                                                                                                                        [GHC.Types.Char])
  GHC.Show.$fShow(,,) @ [GHC.Types.Char]
                      @ GHC.Types.Int
                      @ (GHC.Base.Maybe Language.PureScript.AST.SourcePos.SourceSpan)
                      v
                      v1
                      v2
  = Language.PureScript.Errors.$fShowTypeMap_$s$fShow(,,)
"SPEC/Language.PureScript.Errors $fShowMaybe @ SourceSpan" [orphan] forall (v :: GHC.Show.Show
                                                                                   Language.PureScript.AST.SourcePos.SourceSpan)
  GHC.Show.$fShowMaybe @ Language.PureScript.AST.SourcePos.SourceSpan
                       v
  = Language.PureScript.Errors.$fShowTypeMap_$s$fShowMaybe
"SPEC/Language.PureScript.Errors $fShowMaybe_$cshowList @ SourceSpan" [orphan] forall ($dShow :: GHC.Show.Show
                                                                                                   Language.PureScript.AST.SourcePos.SourceSpan)
  GHC.Show.$fShowMaybe_$cshowList @ Language.PureScript.AST.SourcePos.SourceSpan
                                  $dShow
  = Language.PureScript.Errors.$s$fShowMaybe_$cshowList
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

