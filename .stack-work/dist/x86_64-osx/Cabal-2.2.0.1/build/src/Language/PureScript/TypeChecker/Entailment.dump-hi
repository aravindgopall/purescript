
==================== FINAL INTERFACE ====================
2018-11-30 20:47:28.399108 UTC

interface purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.TypeChecker.Entailment 8043
  interface hash: e0fa03e0fbe476cfd76cc75a83ef4029
  ABI hash: eb87eb512eb19a11b2861f2572464863
  export-list hash: f1282b4b4aaf0007ce1148430891b83d
  orphan hash: dc0de914c44270e1e527d33c6a995c17
  flag hash: d2c30bfa55bfd53466599f65e780dd5e
  opt_hash: 2c98c95d41c045ae9c2fb565ec8aabc6
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Language.PureScript.TypeChecker.Entailment.entails
  Language.PureScript.TypeChecker.Entailment.newDictionaries
  Language.PureScript.TypeChecker.Entailment.replaceTypeClassDictionaries
  Language.PureScript.TypeChecker.Entailment.InstanceContext
  Language.PureScript.TypeChecker.Entailment.SolverOptions{Language.PureScript.TypeChecker.Entailment.SolverOptions solverDeferErrors solverShouldGeneralize}
module dependencies: Control.Monad.Supply
                     Control.Monad.Supply.Class Language.PureScript.AST
                     Language.PureScript.AST.Binders
                     Language.PureScript.AST.Declarations
                     Language.PureScript.AST.Exported Language.PureScript.AST.Literals
                     Language.PureScript.AST.Operators Language.PureScript.AST.SourcePos
                     Language.PureScript.AST.Traversals Language.PureScript.Bundle
                     Language.PureScript.Comments Language.PureScript.Constants
                     Language.PureScript.Crash Language.PureScript.Environment
                     Language.PureScript.Errors Language.PureScript.Kinds
                     Language.PureScript.Label Language.PureScript.Names
                     Language.PureScript.PSString Language.PureScript.Parser.Lexer
                     Language.PureScript.Parser.State Language.PureScript.Pretty
                     Language.PureScript.Pretty.Common Language.PureScript.Pretty.Kinds
                     Language.PureScript.Pretty.Types Language.PureScript.Pretty.Values
                     Language.PureScript.Publish.BoxesHelpers
                     Language.PureScript.Traversals
                     Language.PureScript.TypeChecker.Monad
                     Language.PureScript.TypeChecker.Skolems
                     Language.PureScript.TypeChecker.Unify
                     Language.PureScript.TypeClassDictionaries Language.PureScript.Types
                     Paths_purescript
package dependencies: aeson-1.3.1.1 aeson-better-errors-0.9.1.0
                      ansi-terminal-0.8.0.4 array-0.5.2.0 async-2.2.1 attoparsec-0.13.2.2
                      base-4.11.1.0 base-compat-0.10.4 binary-0.8.5.1
                      blaze-builder-0.4.1.0 boxes-0.1.5 bytestring-0.10.8.2 colour-2.3.4
                      containers-0.5.11.0 deepseq-1.4.3.0 dlist-0.8.0.4 filepath-1.4.2
                      ghc-boot-th-8.4.3 ghc-prim-0.5.2.0 hashable-1.2.7.0
                      integer-gmp-1.0.2.0 integer-logarithms-1.0.2.1
                      language-javascript-0.6.0.11 mtl-2.2.2 parsec-3.1.13.0
                      pattern-arrows-0.0.2 pretty-1.1.3.6 primitive-0.6.3.0
                      protolude-0.2.2 random-1.1 scientific-0.3.6.2 sourcemap-0.1.6
                      split-0.2.3.3 stm-2.4.5.0 syb-0.7 tagged-0.8.5
                      template-haskell-2.13.0.0 text-1.2.3.0 th-abstraction-0.2.8.0
                      time-1.8.0.2 time-locale-compat-0.1.1.4 transformers-0.5.5.0
                      unordered-containers-0.2.9.0 utf8-string-1.0.1.1 uuid-types-1.0.3
                      vector-0.12.0.1
orphans: syb-0.7:Data.Generics.Instances colour-2.3.4:Data.Colour
         stm-2.4.5.0:Control.Monad.STM
         attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         vector-0.12.0.1:Data.Vector.Unboxed
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.0:Data.Text.Lazy
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.5.0:Control.Monad.Trans.Error
         text-1.2.3.0:Data.Text binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: aeson-1.3.1.1:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.Graph
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         dlist-0.8.0.4:Data.DList ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.AST.Declarations
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.AST.Operators
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.AST.SourcePos
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Environment
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Kinds
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Label
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Names
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.PSString
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.TypeClassDictionaries
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Types
                         tagged-0.8.5:Data.Tagged
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
                         th-abstraction-0.2.8.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  base-4.11.1.0:Control.Arrow ce43199b5356a11ee2a8317f0ec30aee
import  -/  base-4.11.1.0:Control.Monad c5f960c67d822497578bffbd3e4c01cf
import  -/  base-4.11.1.0:Data.Either 39d922b371c4c52d426e9ee66de8371a
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.Function 6e6aae9442025aeeb92a909c1bbc3fca
import  -/  base-4.11.1.0:Data.Functor f522c3501272159820fd6f242510732f
import  -/  base-4.11.1.0:Data.List 83dc843e47bfc0c5af51e19c6f3476d5
import  -/  base-4.11.1.0:Data.Maybe 409c3da2b142470b68be39ce1d97a9f7
import  -/  base-4.11.1.0:Data.OldList 1b35aa3c6805ff7c8887a35a866fe006
import  -/  base-4.11.1.0:Data.Semigroup.Internal 3e64145a879c21fc4c6fc83e5d8ca93b
import  -/  base-4.11.1.0:Data.Traversable 7ad4edb9184ea1ae8e73f6b94f115c8c
import  -/  base-4.11.1.0:Data.Tuple 3af66f3ac61ed95ba8a3a3f68ebc5003
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-compat-0.10.4:Prelude.Compat bb6796186ed35a1d09dc34362a3fc27e
import  -/  containers-0.5.11.0:Data.Map 0dbdaec812ef695a364aa6c69e7f7d53
import  -/  containers-0.5.11.0:Data.Map.Internal 0150e210d0ae8df0f3a0669d5e32d8fa
import  -/  containers-0.5.11.0:Data.Set 7d3c64a641be4cacbcd8119445bab919
import  -/  containers-0.5.11.0:Data.Set.Internal 93fa3ef95853aa2a7aadf32d693bd451
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  integer-gmp-1.0.2.0:GHC.Integer.Type f3d5169c3d3830854b19f6565b265403
import  -/  mtl-2.2.2:Control.Monad.Error.Class df146c18e27154b8df4c8637c59fd61b
import  -/  mtl-2.2.2:Control.Monad.State 1f28325cb5ef11b6b40ffadfe4bc2ca3
import  -/  mtl-2.2.2:Control.Monad.State.Class acc76e93f44ac4486524db1a327e0a0a
import  -/  mtl-2.2.2:Control.Monad.Writer b86905dc6b5d4d3a09dfa93d3ac3bb98
import  -/  mtl-2.2.2:Control.Monad.Writer.Class 69f540e019eada69892c26d267276458
import  -/  protolude-0.2.2:Protolude 2c2d16096c8a60f59f646a3b93b0eb7b
import  -/  protolude-0.2.2:Protolude.List 3a80368167450d7a4360ebf1ea443345
import  -/  Control.Monad.Supply.Class a5ac88ebb2786fa0ca39c7248b7c5b8f
  exports: 91d489aaf16020272ece745e2b32bd17
  MonadSupply 6a9f80f28cc3fad47a987fee945f2fd2
import  -/  Language.PureScript.AST 7ed0e74bfed5b6489b8a5eabab5c0241
  exports: 0d53d92339536cd6d8d7dcfcad8e7c7e
import  -/  Language.PureScript.AST.Binders 9d60985147b34b89300370e810fed430
  VarBinder 2a223807b33e6f190799aea12e8ed5d7
import  -/  Language.PureScript.AST.Declarations 568e046fbf27b243bfc96f09017d4782
  Abs d07c7c6c44b48a3411184d34629a601e
  Accessor efce1a21efe3a6d2f322942575a5ad70
  App 60282620a1433a146ffafd0d8773af87
  ErrorMessageHint b31d94d0c7b90700d40f9ba6ec420e41
  ErrorSolvingConstraint fdde8ff66aefb0c3dbf6601383befc4d
  Expr b31d94d0c7b90700d40f9ba6ec420e41
  Literal 25fe050a9db328cb74b9c2f7e7994889
  NoInstanceFound f67a7a96bcbeebf6527502254c020c6d
  OverlappingInstances d0861719ca18abc4281df0691195db8c
  PossiblyInfiniteInstance 8d4d3557a0758bed20a87e515a1110c1
  TypeClassDictionary 9f4047c1c1ff9eeef0292c33d9ecb17c
  TypeClassDictionaryConstructorApp e1cd14c07fae64c9cd8679680a21319e
  UnknownClass 22302842385f514b8ad289bd1b19e402
  UserDefinedWarning 5946e75cb44a6c9c8eee94cd5ed4789e
  Var 0202d242cce06e67fa6944b3c05a8982
import  -/  Language.PureScript.AST.Literals 3440d35205601002007fae6139f2b416
  ObjectLiteral 6a79fd56232b94e65385c3eab269a6a5
  StringLiteral 7a0f920d0282cd028b99b76b270f4906
import  -/  Language.PureScript.AST.SourcePos b3f67f807f2dce79528bbb15bd9c7104
  nullSourceSpan 24686a17cbb8e08b60ddb2b502e97316
import  -/  Language.PureScript.AST.Traversals a3d1a9b4309f1aa3055f23e3fb101c5e
  everywhereOnValuesTopDownM eeb56e921678602b009af2041c8eba21
import  -/  Language.PureScript.Constants d290cccb0db8657cab5f1253ab0da1ee
  exports: cd83a0f5b6591e5c66c598e34359260d
  IsSymbol d9ae627b608d1d95835573b011b89395
  RowCons 61d5d5ebd00d9ebe5b510ce50122375f
  RowLacks f0abf7cb81906e201affcfd87dd5c649
  RowListCons c03a43fa9a12089077fac4613e6b5a62
  RowListNil 7375ec6448fadd9f2d3908805a2d962b
  RowNub 8b2dcc33297c246457b8c80e82a4f309
  RowToList d74587a4eb7bb4def5d7b462e741d433
  RowUnion 56238858710f2399004c902571c29a99
  SymbolAppend 4e80d8a09dee207a50e9376f8588ac65
  SymbolCompare acf74d1c24525c0f7c5b9ba051b9e91f
  SymbolCons f3d420a592552850aaf987d2eb5f59b5
  Warn 3fd74ff91db8d7d5ecb2266c971970a3
  orderingEQ 1ce59a08f9ec73781d39be8c800ce02d
  orderingGT e000decdb6f2762819516d3d531acc01
  orderingLT bf4a4a91eeb386cc5d6191012a784e32
  prim 48b048c216cc1c04ce512572fd809a92
  undefined e59818a4be78c1acaccdcd57ca5c2293
import  -/  Language.PureScript.Crash 1bc11bf824676e9581610d0d05d26761
  exports: 8a971f39d6ef3f27956f413640cb0a24
  internalError f3db7e23c75878c9d13888d6d114012d
import  -/  Language.PureScript.Environment 31667499b7017b19998bb405474fbe93
  exports: 56b1ef0ac6132b4c113ce26a807dcfb6
  FunctionalDependency bfd9854bb96fc57917c12b6d3dc6067a
  FunctionalDependency ef672654cffb5adb82634076fd85ad4a
  TypeClassData c2906fb1dbfafc72d037603e0daeb12c
  fdDetermined ef672654cffb5adb82634076fd85ad4a
  fdDeterminers ef672654cffb5adb82634076fd85ad4a
  typeClassArguments ef672654cffb5adb82634076fd85ad4a
  typeClassCoveringSets ef672654cffb5adb82634076fd85ad4a
  typeClassDependencies ef672654cffb5adb82634076fd85ad4a
  typeClassDeterminedArguments ef672654cffb5adb82634076fd85ad4a
  typeClassMembers ef672654cffb5adb82634076fd85ad4a
  typeClassSuperclasses ef672654cffb5adb82634076fd85ad4a
  typeClasses c291d940fae22a3f1400d8c90f26bdd4
import  -/  Language.PureScript.Errors 15d6eb6b2d4d480750061a0585d4e64c
  exports: 142ea650dec62642d1cff09ef1eee74e
  MultipleErrors ad1de73a1d5a6b0ccd9657dedebc94f3
  addHints 375caaa0ed136239e27d7007c6086fb0
  errorMessage 56e7aa221570d7d0bd9b4d606b8de7f2
  rethrow f843b34a93fe990a8e71af5f4eb4be9f
import  -/  Language.PureScript.Label ac3bc484eb8b3b2ccf228cc34cdb537c
  exports: 62e65d694c1e96c81750d9cacc93e898
  Label 6f46d05ebbc78fa0ba91a5af362adcaf
  Label 61523a5f4fc28a2f2f6f00cce17ce1bb
  runLabel 61523a5f4fc28a2f2f6f00cce17ce1bb
import  -/  Language.PureScript.Names b3bf151840f3e8f2eb61eff186432886
  exports: f7f3503d20957194bda83c16bb5f1288
  ClassName e69348bcf8c43a2174540a1d5983bfaa
  Ident 0ccd7f2221de64569e50634367691253
  Ident ab98a56ffa88760dad1380079e8ee35a
  ModuleName 0cb2c8b6c90c347a41315bf0e0fd925c
  ModuleName 5a70062bbdf29e6dc659ad8bf5326b50
  ProperName 9eb330c84db102abf2d0f2652fe4a144
  ProperName 29f101e190cc99df85623423972e606f
  Qualified d600a7f01c8203cf5504999de99c923c
  Qualified 5a70062bbdf29e6dc659ad8bf5326b50
  UnusedIdent 054d24daf49a85444a23e09c0885fe16
  disqualify 3e7b8117c7613f1d74fadc5d62b59f54
  freshIdent c187ad88fe7ace9670b49d0359388e88
  runProperName 29f101e190cc99df85623423972e606f
import  -/  Language.PureScript.PSString 29492f728997dffadb84d1bf161f2ce4
  exports: 41608caf7cc5b51f34de641c9952ab6d
  PSString 0c2d9eac7fc8cff2b3ca27abf6053439
  decodeString 0c2d9eac7fc8cff2b3ca27abf6053439
  mkString 59c5695c0c0978fcb9d0a00f0304b905
import  -/  Language.PureScript.TypeChecker.Monad 36a86b5cfef989dae17621bbace19db6
  exports: 9d9d275b045efb93172c1bb44957da47
  CheckState 5c23016b2e80baec4bdda0c92644cfa1
  checkEnv 5c23016b2e80baec4bdda0c92644cfa1
  checkSubstitution 5c23016b2e80baec4bdda0c92644cfa1
  withErrorMessageHint 2c6ffe4a4583e9fbcf6d82baf0863283
import  -/  Language.PureScript.TypeChecker.Unify 8691f08fe31a36c2d93443f4bddc13e8
  exports: d8da060597f9e4fdf658eaa278b38c79
  alignRowsWith e26de58e42f4398a4c4c55bc1e7bcc5b
  freshType a5c186ce5fbab18def6677e2fd12efbe
  substituteType 790e5acc35abed1f12851a447c85f713
  unifyTypes b827ceec3d75557ebebfc302895f9c3b
import  -/  Language.PureScript.TypeClassDictionaries 85b2520728908ad345f56b1c2cbe3fca
  exports: cc9c93841004965313696be0c74a01eb
  NamedDict 1c7eb5af0357b976dbe077e65975eac8
  TypeClassDictionaryInScope c1f0a82f8146987fb0ec5a84ba847e8e
  TypeClassDictionaryInScope 6fae3e2d3c76b2d8044da9ff9cec0bdb
  superclassName f08fbdbf5604360f1e0216aef0f756c1
  tcdChain 6fae3e2d3c76b2d8044da9ff9cec0bdb
  tcdClassName 6fae3e2d3c76b2d8044da9ff9cec0bdb
  tcdDependencies 6fae3e2d3c76b2d8044da9ff9cec0bdb
  tcdIndex 6fae3e2d3c76b2d8044da9ff9cec0bdb
  tcdInstanceTypes 6fae3e2d3c76b2d8044da9ff9cec0bdb
  tcdPath 6fae3e2d3c76b2d8044da9ff9cec0bdb
  tcdValue 6fae3e2d3c76b2d8044da9ff9cec0bdb
import  -/  Language.PureScript.Types 74562e642f5297557b3a23aac7819ad1
  exports: ae97bc75fcebc59f59c970736847a827
  Constraint 07ef72cbe41926551b2da51008274cd5
  Constraint 93223f8afa90d0facc05a03f863dc72d
  KindedType 0c5178e2942b7d198426b0539b6f6442
  RCons c8b1a363e575e040360112548c9c1bd6
  REmpty 7b5d4ca839c026ea0c7f04daad457191
  Skolem e2f87ac818d8dc245fc6ff263c6e89ee
  TUnknown 39441d842668db3aca11ba64b9f08b2c
  Type 93223f8afa90d0facc05a03f863dc72d
  TypeApp 8aa2c93426facb8054d5caf77ff9d922
  TypeConstructor 5e1c42d22ac701f08c049fde0171d9ac
  TypeLevelString b529cbddb07085442fd8755c41cb42eb
  TypeVar ac604589bba317f51f6e97fef0e84f86
  constraintArgs 93223f8afa90d0facc05a03f863dc72d
  constraintClass 93223f8afa90d0facc05a03f863dc72d
  everythingOnTypes ba4f3716db899e239fbb16fb1fa82a8f
  mapConstraintArgs 4c5821e8c0e3a903ec8fe07d5d289eaf
  replaceAllTypeVars b1b07213df1ebf26d77b32c088290c22
  rowFromList 9f93289e7d64c25344406096f6428fc0
  rowToList 9d77c0b5f0cca3b051e88fcf65501542
  rowToSortedList 83f7660bb0b5e2e8d22b23b4ddfa9bdb
import  -/  text-1.2.3.0:Data.Text 7daa7e6c9b39d8cc1679e5ec5c64d2be
import  -/  text-1.2.3.0:Data.Text.Internal 30a0a123f71f63b26cd34c6b24f23411
import  -/  text-1.2.3.0:Data.Text.Show 3b4b6fb2985a731022d67f636682da2b
import  -/  transformers-0.5.5.0:Control.Monad.Trans.Class 352c7bdb1604d64f8f438c96bf57066a
import  -/  transformers-0.5.5.0:Control.Monad.Trans.State.Lazy bb07ba19cd14893d125b163b03c16c98
import  -/  transformers-0.5.5.0:Control.Monad.Trans.Writer.Lazy 932eb57f5933138df24d28686f218b40
856569fc3a488d9f7628dce5a272000a
  $fEqEvidence ::
    GHC.Classes.Eq Language.PureScript.TypeChecker.Entailment.Evidence
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.TypeChecker.Entailment.Evidence
                  Language.PureScript.TypeChecker.Entailment.$fEqEvidence_$c==
                  Language.PureScript.TypeChecker.Entailment.$fEqEvidence_$c/= -}
856569fc3a488d9f7628dce5a272000a
  $fEqEvidence_$c/= ::
    Language.PureScript.TypeChecker.Entailment.Evidence
    -> Language.PureScript.TypeChecker.Entailment.Evidence
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.TypeChecker.Entailment.Evidence)
                   (y :: Language.PureScript.TypeChecker.Entailment.Evidence) ->
                 case Language.PureScript.TypeChecker.Entailment.$fEqEvidence_$c==
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
856569fc3a488d9f7628dce5a272000a
  $fEqEvidence_$c== ::
    Language.PureScript.TypeChecker.Entailment.Evidence
    -> Language.PureScript.TypeChecker.Entailment.Evidence
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Language.PureScript.TypeChecker.Entailment.Evidence)
                   (ds1 :: Language.PureScript.TypeChecker.Entailment.Evidence) ->
                 case ds of wild {
                   Language.PureScript.TypeChecker.Entailment.NamedInstance a2
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.TypeChecker.Entailment.NamedInstance b1
                        -> case a2 of ww { Language.PureScript.Names.Qualified ww1 ww2 ->
                           case b1 of ww3 { Language.PureScript.Names.Qualified ww4 ww5 ->
                           case ww1 of wild2 {
                             GHC.Base.Nothing
                             -> case ww4 of wild3 {
                                  GHC.Base.Nothing
                                  -> Language.PureScript.Names.$fEqIdent_$c== ww2 ww5
                                  GHC.Base.Just ipv -> GHC.Types.False }
                             GHC.Base.Just a3
                             -> case ww4 of wild3 {
                                  GHC.Base.Nothing -> GHC.Types.False
                                  GHC.Base.Just b2
                                  -> case GHC.Classes.$fEq[]_$c==
                                            @ (Language.PureScript.Names.ProperName
                                                 'Language.PureScript.Names.Namespace)
                                            (Language.PureScript.Names.$fEqProperName
                                               @ 'Language.PureScript.Names.Namespace)
                                            a3 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                            b2
                                              `cast`
                                            (Language.PureScript.Names.N:ModuleName[0]) of wild4 {
                                       GHC.Types.False -> GHC.Types.False
                                       GHC.Types.True
                                       -> Language.PureScript.Names.$fEqIdent_$c==
                                            ww2
                                            ww5 } } } } } }
                   Language.PureScript.TypeChecker.Entailment.WarnInstance a2
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.TypeChecker.Entailment.WarnInstance b1
                        -> Language.PureScript.Types.$fEqType_$c== a2 b1 }
                   Language.PureScript.TypeChecker.Entailment.IsSymbolInstance a2
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.TypeChecker.Entailment.IsSymbolInstance b1
                        -> GHC.Classes.$fEq[]_$c==
                             @ GHC.Word.Word16
                             GHC.Word.$fEqWord16
                             a2 `cast` (Language.PureScript.PSString.N:PSString[0])
                             b1 `cast` (Language.PureScript.PSString.N:PSString[0]) }
                   Language.PureScript.TypeChecker.Entailment.EmptyClassInstance
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.TypeChecker.Entailment.EmptyClassInstance
                        -> GHC.Types.True } }) -}
b6530f1ee66309baf3896a9526dd5516
  $fEqMatched ::
    GHC.Classes.Eq t =>
    GHC.Classes.Eq
      (Language.PureScript.TypeChecker.Entailment.Matched t)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ t (v :: GHC.Classes.Eq t).
                  @ (Language.PureScript.TypeChecker.Entailment.Matched t)
                  (Language.PureScript.TypeChecker.Entailment.$fEqMatched_$c== @ t v)
                  (Language.PureScript.TypeChecker.Entailment.$fEqMatched_$c/=
                     @ t
                     v) -}
b6530f1ee66309baf3896a9526dd5516
  $fEqMatched_$c/= ::
    GHC.Classes.Eq t =>
    Language.PureScript.TypeChecker.Entailment.Matched t
    -> Language.PureScript.TypeChecker.Entailment.Matched t
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ t
                   ($dEq :: GHC.Classes.Eq t)
                   (x :: Language.PureScript.TypeChecker.Entailment.Matched t)
                   (y :: Language.PureScript.TypeChecker.Entailment.Matched t) ->
                 case x of wild {
                   Language.PureScript.TypeChecker.Entailment.Match a2
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.TypeChecker.Entailment.Match b1
                        -> case GHC.Classes.== @ t $dEq a2 b1 of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False } }
                   Language.PureScript.TypeChecker.Entailment.Apart
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.TypeChecker.Entailment.Apart
                        -> GHC.Types.False }
                   Language.PureScript.TypeChecker.Entailment.Unknown
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.TypeChecker.Entailment.Unknown
                        -> GHC.Types.False } }) -}
b6530f1ee66309baf3896a9526dd5516
  $fEqMatched_$c== ::
    GHC.Classes.Eq t =>
    Language.PureScript.TypeChecker.Entailment.Matched t
    -> Language.PureScript.TypeChecker.Entailment.Matched t
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: (\ @ t
                   ($dEq :: GHC.Classes.Eq t)
                   (ds :: Language.PureScript.TypeChecker.Entailment.Matched t)
                   (ds1 :: Language.PureScript.TypeChecker.Entailment.Matched t) ->
                 case ds of wild {
                   Language.PureScript.TypeChecker.Entailment.Match a2
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.TypeChecker.Entailment.Match b1
                        -> GHC.Classes.== @ t $dEq a2 b1 }
                   Language.PureScript.TypeChecker.Entailment.Apart
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.TypeChecker.Entailment.Apart
                        -> GHC.Types.True }
                   Language.PureScript.TypeChecker.Entailment.Unknown
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.TypeChecker.Entailment.Unknown
                        -> GHC.Types.True } }) -}
b6530f1ee66309baf3896a9526dd5516
  $fFunctorMatched ::
    GHC.Base.Functor Language.PureScript.TypeChecker.Entailment.Matched
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.TypeChecker.Entailment.Matched
                  Language.PureScript.TypeChecker.Entailment.$fFunctorMatched_$cfmap
                  Language.PureScript.TypeChecker.Entailment.$fFunctorMatched_$c<$ -}
b6530f1ee66309baf3896a9526dd5516
  $fFunctorMatched_$c<$ ::
    a
    -> Language.PureScript.TypeChecker.Entailment.Matched b
    -> Language.PureScript.TypeChecker.Entailment.Matched a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   (z :: a)
                   (ds :: Language.PureScript.TypeChecker.Entailment.Matched b) ->
                 case ds of wild {
                   Language.PureScript.TypeChecker.Entailment.Match a2
                   -> Language.PureScript.TypeChecker.Entailment.Match @ a z
                   Language.PureScript.TypeChecker.Entailment.Apart
                   -> Language.PureScript.TypeChecker.Entailment.Apart @ a
                   Language.PureScript.TypeChecker.Entailment.Unknown
                   -> Language.PureScript.TypeChecker.Entailment.Unknown @ a }) -}
b6530f1ee66309baf3896a9526dd5516
  $fFunctorMatched_$cfmap ::
    (a -> b)
    -> Language.PureScript.TypeChecker.Entailment.Matched a
    -> Language.PureScript.TypeChecker.Entailment.Matched b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   (f :: a -> b)
                   (ds :: Language.PureScript.TypeChecker.Entailment.Matched a) ->
                 case ds of wild {
                   Language.PureScript.TypeChecker.Entailment.Match a2
                   -> Language.PureScript.TypeChecker.Entailment.Match @ b (f a2)
                   Language.PureScript.TypeChecker.Entailment.Apart
                   -> Language.PureScript.TypeChecker.Entailment.Apart @ b
                   Language.PureScript.TypeChecker.Entailment.Unknown
                   -> Language.PureScript.TypeChecker.Entailment.Unknown @ b }) -}
b6530f1ee66309baf3896a9526dd5516
  $fMonoidMatched ::
    GHC.Base.Monoid t =>
    GHC.Base.Monoid
      (Language.PureScript.TypeChecker.Entailment.Matched t)
  DFunId
  {- Arity: 1, Strictness: <L,U(U(C(C1(U)),A,A),U,A,A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ t (v :: GHC.Base.Monoid t).
                  @ (Language.PureScript.TypeChecker.Entailment.Matched t)
                  (Language.PureScript.TypeChecker.Entailment.$fMonoidMatched_$cp1Monoid
                     @ t
                     v)
                  (Language.PureScript.TypeChecker.Entailment.$fMonoidMatched_$cmempty
                     @ t
                     v)
                  (Language.PureScript.TypeChecker.Entailment.$fMonoidMatched_$cmappend
                     @ t
                     v)
                  (Language.PureScript.TypeChecker.Entailment.$fMonoidMatched_$cmconcat
                     @ t
                     v) -}
fc6bb4885f5f7091a1504db9946ae311
  $fMonoidMatched1 ::
    Language.PureScript.TypeChecker.Entailment.Matched ()
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Language.PureScript.TypeChecker.Entailment.Match
                   @ ()
                   GHC.Tuple.()) -}
b6530f1ee66309baf3896a9526dd5516
  $fMonoidMatched_$c<> ::
    GHC.Base.Semigroup t =>
    Language.PureScript.TypeChecker.Entailment.Matched t
    -> Language.PureScript.TypeChecker.Entailment.Matched t
    -> Language.PureScript.TypeChecker.Entailment.Matched t
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><S,1*U><L,1*U>,
     Unfolding: (\ @ t
                   ($dSemigroup :: GHC.Base.Semigroup t)
                   (ds :: Language.PureScript.TypeChecker.Entailment.Matched t)
                   (ds1 :: Language.PureScript.TypeChecker.Entailment.Matched t) ->
                 case ds of wild {
                   Language.PureScript.TypeChecker.Entailment.Match l
                   -> case ds1 of wild1 {
                        DEFAULT -> wild1
                        Language.PureScript.TypeChecker.Entailment.Match r
                        -> Language.PureScript.TypeChecker.Entailment.Match
                             @ t
                             (GHC.Base.<> @ t $dSemigroup l r) }
                   Language.PureScript.TypeChecker.Entailment.Apart
                   -> Language.PureScript.TypeChecker.Entailment.Apart @ t
                   Language.PureScript.TypeChecker.Entailment.Unknown
                   -> case ds1 of wild1 {
                        DEFAULT -> Language.PureScript.TypeChecker.Entailment.Unknown @ t
                        Language.PureScript.TypeChecker.Entailment.Apart
                        -> Language.PureScript.TypeChecker.Entailment.Apart @ t } }) -}
b6530f1ee66309baf3896a9526dd5516
  $fMonoidMatched_$cmappend ::
    GHC.Base.Monoid t =>
    Language.PureScript.TypeChecker.Entailment.Matched t
    -> Language.PureScript.TypeChecker.Entailment.Matched t
    -> Language.PureScript.TypeChecker.Entailment.Matched t
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*U(1*C1(C1(U)),A,A),A,A,A)><S,1*U><L,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (1, False, False)
                (\ @ t ($dMonoid :: GHC.Base.Monoid t) ->
                 Language.PureScript.TypeChecker.Entailment.$fMonoidMatched_$c<>
                   @ t
                   (GHC.Base.$p1Monoid @ t $dMonoid)) -}
b6530f1ee66309baf3896a9526dd5516
  $fMonoidMatched_$cmconcat ::
    GHC.Base.Monoid t =>
    [Language.PureScript.TypeChecker.Entailment.Matched t]
    -> Language.PureScript.TypeChecker.Entailment.Matched t
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(1*U(C(C1(U)),A,A),1*U,A,A)><S,1*U>,
     Unfolding: (\ @ t
                   ($dMonoid :: GHC.Base.Monoid t)
                   (eta :: [Language.PureScript.TypeChecker.Entailment.Matched t]) ->
                 let {
                   $dSemigroup :: GHC.Base.Semigroup t
                   = GHC.Base.$p1Monoid @ t $dMonoid
                 } in
                 let {
                   z :: t = GHC.Base.mempty @ t $dMonoid
                 } in
                 let {
                   z1 :: Language.PureScript.TypeChecker.Entailment.Matched t
                   = Language.PureScript.TypeChecker.Entailment.Match @ t z
                 } in
                 letrec {
                   go23 :: [Language.PureScript.TypeChecker.Entailment.Matched t]
                           -> Language.PureScript.TypeChecker.Entailment.Matched t
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [Language.PureScript.TypeChecker.Entailment.Matched
                                 t]) ->
                     case ds of wild {
                       [] -> z1
                       : y ys
                       -> case y of wild1 {
                            Language.PureScript.TypeChecker.Entailment.Match l
                            -> case go23 ys of wild2 {
                                 DEFAULT -> wild2
                                 Language.PureScript.TypeChecker.Entailment.Match r
                                 -> Language.PureScript.TypeChecker.Entailment.Match
                                      @ t
                                      (GHC.Base.<> @ t $dSemigroup l r) }
                            Language.PureScript.TypeChecker.Entailment.Apart
                            -> Language.PureScript.TypeChecker.Entailment.Apart @ t
                            Language.PureScript.TypeChecker.Entailment.Unknown
                            -> case go23 ys of wild2 {
                                 DEFAULT -> Language.PureScript.TypeChecker.Entailment.Unknown @ t
                                 Language.PureScript.TypeChecker.Entailment.Apart
                                 -> Language.PureScript.TypeChecker.Entailment.Apart @ t } } }
                 } in
                 go23 eta) -}
b6530f1ee66309baf3896a9526dd5516
  $fMonoidMatched_$cmempty ::
    GHC.Base.Monoid t =>
    Language.PureScript.TypeChecker.Entailment.Matched t
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*U(A,1*U,A,A)>m1,
     Unfolding: InlineRule (1, True, False)
                (\ @ t ($dMonoid :: GHC.Base.Monoid t) ->
                 Language.PureScript.TypeChecker.Entailment.Match
                   @ t
                   (GHC.Base.mempty @ t $dMonoid)) -}
b6530f1ee66309baf3896a9526dd5516
  $fMonoidMatched_$cp1Monoid ::
    GHC.Base.Monoid t =>
    GHC.Base.Semigroup
      (Language.PureScript.TypeChecker.Entailment.Matched t)
  {- Arity: 1, Strictness: <L,1*U(1*U(C(C1(U)),A,A),A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ t ($dMonoid :: GHC.Base.Monoid t) ->
                 Language.PureScript.TypeChecker.Entailment.$fSemigroupMatched
                   @ t
                   (GHC.Base.$p1Monoid @ t $dMonoid)) -}
b6530f1ee66309baf3896a9526dd5516
  $fSemigroupMatched ::
    GHC.Base.Semigroup t =>
    GHC.Base.Semigroup
      (Language.PureScript.TypeChecker.Entailment.Matched t)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(U)),A,A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ t (v :: GHC.Base.Semigroup t).
                  @ (Language.PureScript.TypeChecker.Entailment.Matched t)
                  (Language.PureScript.TypeChecker.Entailment.$fMonoidMatched_$c<>
                     @ t
                     v)
                  (Language.PureScript.TypeChecker.Entailment.$fSemigroupMatched_$csconcat
                     @ t
                     v)
                  (Language.PureScript.TypeChecker.Entailment.$fSemigroupMatched_$cstimes
                     @ t
                     v) -}
b6530f1ee66309baf3896a9526dd5516
  $fSemigroupMatched_$csconcat ::
    GHC.Base.Semigroup t =>
    GHC.Base.NonEmpty
      (Language.PureScript.TypeChecker.Entailment.Matched t)
    -> Language.PureScript.TypeChecker.Entailment.Matched t
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A,A)><S(SS),1*U(1*U,1*U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ t
                   (w :: GHC.Base.Semigroup t)
                   (w1 :: GHC.Base.NonEmpty
                            (Language.PureScript.TypeChecker.Entailment.Matched t)) ->
                 case w1 of ww { GHC.Base.:| ww1 ww2 ->
                 Language.PureScript.TypeChecker.Entailment.$w$csconcat
                   @ t
                   w
                   ww1
                   ww2 }) -}
b6530f1ee66309baf3896a9526dd5516
  $fSemigroupMatched_$cstimes ::
    GHC.Base.Semigroup t =>
    forall b.
    GHC.Real.Integral b =>
    b
    -> Language.PureScript.TypeChecker.Entailment.Matched t
    -> Language.PureScript.TypeChecker.Entailment.Matched t
  {- Arity: 2, Strictness: <L,U(C(C1(U)),A,A)><L,U> -}
78965820e91bb4e7db858690d686df02
  $fShowEntailsResult ::
    GHC.Show.Show a =>
    GHC.Show.Show
      (Language.PureScript.TypeChecker.Entailment.EntailsResult a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Show.Show a).
                  @ (Language.PureScript.TypeChecker.Entailment.EntailsResult a)
                  (Language.PureScript.TypeChecker.Entailment.$fShowEntailsResult_$cshowsPrec
                     @ a
                     v)
                  (Language.PureScript.TypeChecker.Entailment.$fShowEntailsResult_$cshow
                     @ a
                     v)
                  (Language.PureScript.TypeChecker.Entailment.$fShowEntailsResult_$cshowList
                     @ a
                     v) -}
ed65acec85cd5f9784ac481c53201761
  $fShowEntailsResult1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
1286eb631406d3d03d556e6ea65ddf39
  $fShowEntailsResult2 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.PureScript.TypeChecker.Entailment.$fShowEntailsResult3) -}
cb8666e41cdf8623999bb7d5d89afffa
  $fShowEntailsResult3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.TypeChecker.Entailment.$fShowEntailsResult4) -}
f65c4d179b8df7f8f9b607e19ae58e80
  $fShowEntailsResult4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Deferred"#) -}
bfa76609cffe554a03e9fb4aa5e5429b
  $fShowEntailsResult5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.TypeChecker.Entailment.$fShowEntailsResult6) -}
dcdb3ac891ca852a3a52d164e16f99a4
  $fShowEntailsResult6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Unsolved "#) -}
813f5a1812ae8540168b12225df7eb51
  $fShowEntailsResult7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Solved "#) -}
78965820e91bb4e7db858690d686df02
  $fShowEntailsResult_$cshow ::
    GHC.Show.Show a =>
    Language.PureScript.TypeChecker.Entailment.EntailsResult a
    -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U(1*C1(C1(C1(U))),A,A)><S,1*U>,
     Unfolding: (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (x :: Language.PureScript.TypeChecker.Entailment.EntailsResult
                           a) ->
                 case x of wild {
                   Language.PureScript.TypeChecker.Entailment.Solved b1 b2
                   -> GHC.CString.unpackAppendCString#
                        Language.PureScript.TypeChecker.Entailment.$fShowEntailsResult7
                        (GHC.Show.showsPrec
                           @ a
                           $dShow
                           Language.PureScript.TypeChecker.Entailment.$fShowEvidence8
                           b1
                           (GHC.Types.:
                              @ GHC.Types.Char
                              GHC.Show.showSpace1
                              (case b2 of ww2 { Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope ww3 ww4 ww5 ww6 ww7 ww8 ww9 ->
                               Language.PureScript.TypeClassDictionaries.$w$cshowsPrec
                                 @ Language.PureScript.TypeChecker.Entailment.Evidence
                                 Language.PureScript.TypeChecker.Entailment.$fShowEvidence
                                 11#
                                 ww3
                                 ww4
                                 ww5
                                 ww6
                                 ww7
                                 ww8
                                 ww9
                                 (GHC.Types.[] @ GHC.Types.Char) })))
                   Language.PureScript.TypeChecker.Entailment.Unsolved b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.TypeChecker.Entailment.$fShowEntailsResult5
                        (case b1 of ww2 { Language.PureScript.Types.Constraint ww3 ww4 ww5 ->
                         Language.PureScript.Types.$w$cshowsPrec
                           11#
                           ww3
                           ww4
                           ww5
                           (GHC.Types.[] @ GHC.Types.Char) })
                   Language.PureScript.TypeChecker.Entailment.Deferred
                   -> Language.PureScript.TypeChecker.Entailment.$fShowEntailsResult3 }) -}
78965820e91bb4e7db858690d686df02
  $fShowEntailsResult_$cshowList ::
    GHC.Show.Show a =>
    [Language.PureScript.TypeChecker.Entailment.EntailsResult a]
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (ls :: [Language.PureScript.TypeChecker.Entailment.EntailsResult
                             a])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Language.PureScript.TypeChecker.Entailment.EntailsResult a)
                   (Language.PureScript.TypeChecker.Entailment.$fShowEntailsResult_$cshowsPrec
                      @ a
                      $dShow
                      Language.PureScript.TypeChecker.Entailment.$fShowEntailsResult1)
                   ls
                   s) -}
78965820e91bb4e7db858690d686df02
  $fShowEntailsResult_$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Types.Int
    -> Language.PureScript.TypeChecker.Entailment.EntailsResult a
    -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,1*U(1*C1(C1(C(U))),A,A)><L,1*U(U)><S,1*U>,
     Unfolding: (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (a2 :: GHC.Types.Int)
                   (ds :: Language.PureScript.TypeChecker.Entailment.EntailsResult
                            a) ->
                 case ds of wild {
                   Language.PureScript.TypeChecker.Entailment.Solved b1 b2
                   -> case a2 of wild1 { GHC.Types.I# x ->
                      let {
                        f :: GHC.Base.String -> GHC.Base.String
                        = GHC.Show.showsPrec
                            @ a
                            $dShow
                            Language.PureScript.TypeChecker.Entailment.$fShowEvidence8
                            b1
                      } in
                      let {
                        g1 :: GHC.Base.String -> GHC.Base.String
                        = case b2 of ww2 { Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope ww3 ww4 ww5 ww6 ww7 ww8 ww9 ->
                          Language.PureScript.TypeClassDictionaries.$w$cshowsPrec
                            @ Language.PureScript.TypeChecker.Entailment.Evidence
                            Language.PureScript.TypeChecker.Entailment.$fShowEvidence
                            11#
                            ww3
                            ww4
                            ww5
                            ww6
                            ww7
                            ww8
                            ww9 }
                      } in
                      case GHC.Prim.>=# x 11# of lwild {
                        DEFAULT
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.CString.unpackAppendCString#
                             Language.PureScript.TypeChecker.Entailment.$fShowEntailsResult7
                             (f (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 (g1 x1)))
                        1#
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.CString.unpackAppendCString#
                                Language.PureScript.TypeChecker.Entailment.$fShowEntailsResult7
                                (f (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.showSpace1
                                      (g1
                                         (GHC.Types.:
                                            @ GHC.Types.Char
                                            GHC.Show.$fShow(,)2
                                            x1))))) } }
                   Language.PureScript.TypeChecker.Entailment.Unsolved b1
                   -> case a2 of wild1 { GHC.Types.I# x ->
                      let {
                        g1 :: GHC.Base.String -> GHC.Base.String
                        = case b1 of ww2 { Language.PureScript.Types.Constraint ww3 ww4 ww5 ->
                          Language.PureScript.Types.$w$cshowsPrec 11# ww3 ww4 ww5 }
                      } in
                      case GHC.Prim.>=# x 11# of lwild {
                        DEFAULT
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             Language.PureScript.TypeChecker.Entailment.$fShowEntailsResult5
                             (g1 x1)
                        1#
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Language.PureScript.TypeChecker.Entailment.$fShowEntailsResult5
                                (g1 (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x1))) } }
                   Language.PureScript.TypeChecker.Entailment.Deferred
                   -> Language.PureScript.TypeChecker.Entailment.$fShowEntailsResult2 }) -}
856569fc3a488d9f7628dce5a272000a
  $fShowEvidence ::
    GHC.Show.Show Language.PureScript.TypeChecker.Entailment.Evidence
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.TypeChecker.Entailment.Evidence
                  Language.PureScript.TypeChecker.Entailment.$fShowEvidence_$cshowsPrec
                  Language.PureScript.TypeChecker.Entailment.$fShowEvidence_$cshow
                  Language.PureScript.TypeChecker.Entailment.$fShowEvidence_$cshowList -}
856569fc3a488d9f7628dce5a272000a
  $fShowEvidence1 ::
    Language.PureScript.TypeChecker.Entailment.Evidence
    -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (Language.PureScript.TypeChecker.Entailment.$fShowEvidence_$cshowsPrec
                   Language.PureScript.TypeChecker.Entailment.$fShowEntailsResult1) -}
698fe660683fe9921acfbf56d490d68e
  $fShowEvidence10 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("NamedInstance "#) -}
9ea2d3715c1b84e92026f83c4291ccdf
  $fShowEvidence11 :: [GHC.Types.Char]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.$fShow(,)2
                   (GHC.Types.[] @ GHC.Types.Char)) -}
938634940fee3caddddfa0d0705ff665
  $fShowEvidence2 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.PureScript.TypeChecker.Entailment.$fShowEvidence3) -}
963482f636e99c9e12eb53d803207a16
  $fShowEvidence3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.TypeChecker.Entailment.$fShowEvidence4) -}
0e1c2e164019ed0d8b4a2ffeb26f68a3
  $fShowEvidence4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("EmptyClassInstance"#) -}
cef5f80d10903c0d4e4ee7b4fc31a019
  $fShowEvidence5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IsSymbolInstance "#) -}
bbd3953a3caffd16775815b1d853ef47
  $fShowEvidence6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.TypeChecker.Entailment.$fShowEvidence7) -}
b20ce184843607a01a64c16d7c07a50c
  $fShowEvidence7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("WarnInstance "#) -}
63d029ca3c7defe8c8fa94d8b712c9cd
  $fShowEvidence8 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11#) -}
77ab2bb68ac1eaab177bad70c7396b4a
  $fShowEvidence9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.TypeChecker.Entailment.$fShowEvidence10) -}
856569fc3a488d9f7628dce5a272000a
  $fShowEvidence_$cshow ::
    Language.PureScript.TypeChecker.Entailment.Evidence
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: Language.PureScript.TypeChecker.Entailment.Evidence) ->
                 case x of wild {
                   Language.PureScript.TypeChecker.Entailment.NamedInstance b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.TypeChecker.Entailment.$fShowEvidence9
                        (case b1 of ww2 { Language.PureScript.Names.Qualified ww3 ww4 ->
                         GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.$fShow(,)4
                           (GHC.CString.unpackAppendCString#
                              Language.PureScript.Names.$fShowQualified1
                              (case ww3 of wild1 {
                                 GHC.Base.Nothing
                                 -> GHC.Base.++
                                      @ GHC.Types.Char
                                      GHC.Show.$fShowMaybe4
                                      (GHC.Types.:
                                         @ GHC.Types.Char
                                         GHC.Show.showSpace1
                                         (Language.PureScript.Names.$fShowIdent_$cshowsPrec
                                            Language.PureScript.Names.$fShowIdent7
                                            ww4
                                            Language.PureScript.TypeChecker.Entailment.$fShowEvidence11))
                                 GHC.Base.Just b2
                                 -> GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.$fShow(,)4
                                      (GHC.Base.++
                                         @ GHC.Types.Char
                                         GHC.Show.$fShowMaybe1
                                         (Language.PureScript.Names.$w$cshowsPrec
                                            11#
                                            b2
                                            (GHC.Types.:
                                               @ GHC.Types.Char
                                               GHC.Show.$fShow(,)2
                                               (GHC.Types.:
                                                  @ GHC.Types.Char
                                                  GHC.Show.showSpace1
                                                  (Language.PureScript.Names.$fShowIdent_$cshowsPrec
                                                     Language.PureScript.Names.$fShowIdent7
                                                     ww4
                                                     Language.PureScript.TypeChecker.Entailment.$fShowEvidence11))))) })) })
                   Language.PureScript.TypeChecker.Entailment.WarnInstance b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.TypeChecker.Entailment.$fShowEvidence6
                        (Language.PureScript.Types.$fShowConstraint_$cshowsPrec
                           Language.PureScript.TypeChecker.Entailment.$fShowEvidence8
                           b1
                           (GHC.Types.[] @ GHC.Types.Char))
                   Language.PureScript.TypeChecker.Entailment.IsSymbolInstance b1
                   -> GHC.CString.unpackAppendCString#
                        Language.PureScript.TypeChecker.Entailment.$fShowEvidence5
                        (GHC.Base.++_$s++
                           @ GHC.Types.Char
                           (GHC.Types.[] @ GHC.Types.Char)
                           GHC.Show.$fShow(,)3
                           (GHC.Show.showLitString
                              (GHC.Base.map
                                 @ (Data.Either.Either GHC.Word.Word16 GHC.Types.Char)
                                 @ GHC.Types.Char
                                 Language.PureScript.PSString.$fShowPSString2
                                 (Language.PureScript.PSString.$fShowPSString_go
                                    b1 `cast` (Language.PureScript.PSString.N:PSString[0])))
                              GHC.Show.$fShow[]1))
                   Language.PureScript.TypeChecker.Entailment.EmptyClassInstance
                   -> Language.PureScript.TypeChecker.Entailment.$fShowEvidence3 }) -}
856569fc3a488d9f7628dce5a272000a
  $fShowEvidence_$cshowList ::
    [Language.PureScript.TypeChecker.Entailment.Evidence]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.TypeChecker.Entailment.Evidence])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.TypeChecker.Entailment.Evidence
                   Language.PureScript.TypeChecker.Entailment.$fShowEvidence1
                   ls
                   s) -}
856569fc3a488d9f7628dce5a272000a
  $fShowEvidence_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.TypeChecker.Entailment.Evidence
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,1*U(U)><S,1*U>,
     Unfolding: (\ (a :: GHC.Types.Int)
                   (ds :: Language.PureScript.TypeChecker.Entailment.Evidence) ->
                 case ds of wild {
                   Language.PureScript.TypeChecker.Entailment.NamedInstance b1
                   -> case a of wild1 { GHC.Types.I# x ->
                      let {
                        g1 :: GHC.Base.String -> GHC.Base.String
                        = case b1 of ww2 { Language.PureScript.Names.Qualified ww3 ww4 ->
                          Language.PureScript.Names.$w$cshowsPrec4
                            @ Language.PureScript.Names.Ident
                            Language.PureScript.Names.$fShowIdent
                            11#
                            ww3
                            ww4 }
                      } in
                      case GHC.Prim.>=# x 11# of lwild {
                        DEFAULT
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             Language.PureScript.TypeChecker.Entailment.$fShowEvidence9
                             (g1 x1)
                        1#
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Language.PureScript.TypeChecker.Entailment.$fShowEvidence9
                                (g1 (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x1))) } }
                   Language.PureScript.TypeChecker.Entailment.WarnInstance b1
                   -> case a of wild1 { GHC.Types.I# x ->
                      let {
                        g1 :: GHC.Base.String -> GHC.Base.String
                        = Language.PureScript.Types.$fShowConstraint_$cshowsPrec
                            Language.PureScript.TypeChecker.Entailment.$fShowEvidence8
                            b1
                      } in
                      case GHC.Prim.>=# x 11# of lwild {
                        DEFAULT
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             Language.PureScript.TypeChecker.Entailment.$fShowEvidence6
                             (g1 x1)
                        1#
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Language.PureScript.TypeChecker.Entailment.$fShowEvidence6
                                (g1 (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x1))) } }
                   Language.PureScript.TypeChecker.Entailment.IsSymbolInstance b1
                   -> case a of wild1 { GHC.Types.I# x ->
                      let {
                        lvl91 :: GHC.Base.String
                        = GHC.Show.showLitString
                            (GHC.Base.map
                               @ (Data.Either.Either GHC.Word.Word16 GHC.Types.Char)
                               @ GHC.Types.Char
                               Language.PureScript.PSString.$fShowPSString2
                               (Language.PureScript.PSString.$fShowPSString_go
                                  b1 `cast` (Language.PureScript.PSString.N:PSString[0])))
                            GHC.Show.$fShow[]1
                      } in
                      case GHC.Prim.>=# x 11# of lwild {
                        DEFAULT
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.CString.unpackAppendCString#
                             Language.PureScript.TypeChecker.Entailment.$fShowEvidence5
                             (GHC.Base.++_$s++ @ GHC.Types.Char x1 GHC.Show.$fShow(,)3 lvl91)
                        1#
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.CString.unpackAppendCString#
                                Language.PureScript.TypeChecker.Entailment.$fShowEvidence5
                                (GHC.Base.++_$s++
                                   @ GHC.Types.Char
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x1)
                                   GHC.Show.$fShow(,)3
                                   lvl91)) } }
                   Language.PureScript.TypeChecker.Entailment.EmptyClassInstance
                   -> Language.PureScript.TypeChecker.Entailment.$fShowEvidence2 }) -}
b6530f1ee66309baf3896a9526dd5516
  $fShowMatched ::
    GHC.Show.Show t =>
    GHC.Show.Show
      (Language.PureScript.TypeChecker.Entailment.Matched t)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ t (v :: GHC.Show.Show t).
                  @ (Language.PureScript.TypeChecker.Entailment.Matched t)
                  (Language.PureScript.TypeChecker.Entailment.$fShowMatched_$cshowsPrec
                     @ t
                     v)
                  (Language.PureScript.TypeChecker.Entailment.$fShowMatched_$cshow
                     @ t
                     v)
                  (Language.PureScript.TypeChecker.Entailment.$fShowMatched_$cshowList
                     @ t
                     v) -}
b8217c0cfc2d497e932f198bbc31ff1d
  $fShowMatched1 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.PureScript.TypeChecker.Entailment.$fShowMatched2) -}
c5df8164be2843240e2acbf4e3f36c20
  $fShowMatched2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.TypeChecker.Entailment.$fShowMatched3) -}
4554f90e998929a868db3cd8f17ad629
  $fShowMatched3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Unknown"#) -}
a75153440faa7e61a87dbd466af92a80
  $fShowMatched4 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.PureScript.TypeChecker.Entailment.$fShowMatched5) -}
44bcd31ccc1498e8557878e426a429c6
  $fShowMatched5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.TypeChecker.Entailment.$fShowMatched6) -}
08ffd838a9bff7d43f76c24d2db34445
  $fShowMatched6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Apart"#) -}
e03311388b05ef159dc635d93f64effd
  $fShowMatched7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.TypeChecker.Entailment.$fShowMatched8) -}
45107fbda79fc5f8f6344de5636a4632
  $fShowMatched8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Match "#) -}
b6530f1ee66309baf3896a9526dd5516
  $fShowMatched_$cshow ::
    GHC.Show.Show t =>
    Language.PureScript.TypeChecker.Entailment.Matched t
    -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U(1*C1(C1(C1(U))),A,A)><S,1*U>,
     Unfolding: (\ @ t
                   ($dShow :: GHC.Show.Show t)
                   (x :: Language.PureScript.TypeChecker.Entailment.Matched t) ->
                 case x of wild {
                   Language.PureScript.TypeChecker.Entailment.Match b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.TypeChecker.Entailment.$fShowMatched7
                        (GHC.Show.showsPrec
                           @ t
                           $dShow
                           Language.PureScript.TypeChecker.Entailment.$fShowEvidence8
                           b1
                           (GHC.Types.[] @ GHC.Types.Char))
                   Language.PureScript.TypeChecker.Entailment.Apart
                   -> Language.PureScript.TypeChecker.Entailment.$fShowMatched5
                   Language.PureScript.TypeChecker.Entailment.Unknown
                   -> Language.PureScript.TypeChecker.Entailment.$fShowMatched2 }) -}
b6530f1ee66309baf3896a9526dd5516
  $fShowMatched_$cshowList ::
    GHC.Show.Show t =>
    [Language.PureScript.TypeChecker.Entailment.Matched t]
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ t
                   ($dShow :: GHC.Show.Show t)
                   (ls :: [Language.PureScript.TypeChecker.Entailment.Matched t])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Language.PureScript.TypeChecker.Entailment.Matched t)
                   (Language.PureScript.TypeChecker.Entailment.$fShowMatched_$cshowsPrec
                      @ t
                      $dShow
                      Language.PureScript.TypeChecker.Entailment.$fShowEntailsResult1)
                   ls
                   s) -}
b6530f1ee66309baf3896a9526dd5516
  $fShowMatched_$cshowsPrec ::
    GHC.Show.Show t =>
    GHC.Types.Int
    -> Language.PureScript.TypeChecker.Entailment.Matched t
    -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,1*U(1*C1(C1(C(U))),A,A)><L,1*U(U)><S,1*U>,
     Unfolding: (\ @ t
                   ($dShow :: GHC.Show.Show t)
                   (a :: GHC.Types.Int)
                   (ds :: Language.PureScript.TypeChecker.Entailment.Matched t) ->
                 case ds of wild {
                   Language.PureScript.TypeChecker.Entailment.Match b1
                   -> case a of wild1 { GHC.Types.I# x ->
                      let {
                        g1 :: GHC.Base.String -> GHC.Base.String
                        = GHC.Show.showsPrec
                            @ t
                            $dShow
                            Language.PureScript.TypeChecker.Entailment.$fShowEvidence8
                            b1
                      } in
                      case GHC.Prim.>=# x 11# of lwild {
                        DEFAULT
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             Language.PureScript.TypeChecker.Entailment.$fShowMatched7
                             (g1 x1)
                        1#
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Language.PureScript.TypeChecker.Entailment.$fShowMatched7
                                (g1 (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x1))) } }
                   Language.PureScript.TypeChecker.Entailment.Apart
                   -> Language.PureScript.TypeChecker.Entailment.$fShowMatched4
                   Language.PureScript.TypeChecker.Entailment.Unknown
                   -> Language.PureScript.TypeChecker.Entailment.$fShowMatched1 }) -}
1b7de0fb943c8e2c84846f1a9a14b9c6
  $s$fEqMaybe ::
    GHC.Classes.Eq
      (GHC.Base.Maybe Language.PureScript.Names.ModuleName)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                  (\ (ds :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                     (ds1 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName) ->
                   case ds of wild {
                     GHC.Base.Nothing
                     -> case ds1 of wild1 {
                          GHC.Base.Nothing -> GHC.Types.True
                          GHC.Base.Just ipv -> GHC.Types.False }
                     GHC.Base.Just a2
                     -> case ds1 of wild1 {
                          GHC.Base.Nothing -> GHC.Types.False
                          GHC.Base.Just b1
                          -> GHC.Classes.$fEq[]_$c==
                               @ (Language.PureScript.Names.ProperName
                                    'Language.PureScript.Names.Namespace)
                               (Language.PureScript.Names.$fEqProperName
                                  @ 'Language.PureScript.Names.Namespace)
                               a2 `cast` (Language.PureScript.Names.N:ModuleName[0])
                               b1 `cast` (Language.PureScript.Names.N:ModuleName[0]) } })
                  Language.PureScript.TypeChecker.Entailment.$s$fEqMaybe_$s$fEqMaybe_$c/= -}
bd141d32bdb2b279ff4f3d51c469c7f6
  $s$fEqMaybe_$c== ::
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ds1 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName) ->
                 case ds of wild {
                   GHC.Base.Nothing
                   -> case ds1 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.True
                        GHC.Base.Just ipv -> GHC.Types.False }
                   GHC.Base.Just a2
                   -> case ds1 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.False
                        GHC.Base.Just b1
                        -> GHC.Classes.$fEq[]_$c==
                             @ (Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.Namespace)
                             (Language.PureScript.Names.$fEqProperName
                                @ 'Language.PureScript.Names.Namespace)
                             a2 `cast` (Language.PureScript.Names.N:ModuleName[0])
                             b1 `cast` (Language.PureScript.Names.N:ModuleName[0]) } }) -}
dad06eba25cb063b9e4d9cd80c53c4c5
  $s$fEqMaybe_$s$fEqMaybe_$c/= ::
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (y :: GHC.Base.Maybe Language.PureScript.Names.ModuleName) ->
                 case x of wild {
                   GHC.Base.Nothing
                   -> case y of wild1 {
                        GHC.Base.Nothing -> GHC.Types.False
                        GHC.Base.Just ipv -> GHC.Types.True }
                   GHC.Base.Just a2
                   -> case y of wild1 {
                        GHC.Base.Nothing -> GHC.Types.True
                        GHC.Base.Just b1
                        -> case GHC.Classes.$fEq[]_$c==
                                  @ (Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.Namespace)
                                  (Language.PureScript.Names.$fEqProperName
                                     @ 'Language.PureScript.Names.Namespace)
                                  a2 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                  b1 `cast` (Language.PureScript.Names.N:ModuleName[0]) of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False } } }) -}
10f64f3fc9290e8f5f2d2133bcfed846
  $s$fEqQualified1 ::
    GHC.Classes.Eq
      (Language.PureScript.Names.Qualified
         Language.PureScript.Names.Ident)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.Qualified
                       Language.PureScript.Names.Ident)
                  (Language.PureScript.Names.$fEqQualified_$c==
                     @ Language.PureScript.Names.Ident
                     Language.PureScript.Names.$fEqIdent)
                  Language.PureScript.TypeChecker.Entailment.$s$fEqQualified_$s$fEqQualified_$c/=1 -}
6175e57aca04afc6ec4ff67315f35b47
  $s$fEqQualified_$s$fEqQualified_$c/=1 ::
    Language.PureScript.Names.Qualified Language.PureScript.Names.Ident
    -> Language.PureScript.Names.Qualified
         Language.PureScript.Names.Ident
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Names.Qualified
                           Language.PureScript.Names.Ident)
                   (y :: Language.PureScript.Names.Qualified
                           Language.PureScript.Names.Ident) ->
                 case Language.PureScript.Names.$fEqQualified_$c==
                        @ Language.PureScript.Names.Ident
                        Language.PureScript.Names.$fEqIdent
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
a1eec39ab20fa103918b103b6c5a98fd
  $s$fMonoid(,) ::
    GHC.Base.Monoid
      (Data.Semigroup.Internal.Any,
       [(Language.PureScript.Names.Ident,
         Language.PureScript.TypeChecker.Entailment.InstanceContext,
         Language.PureScript.Types.Constraint)])
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Semigroup.Internal.Any,
                     [(Language.PureScript.Names.Ident,
                       Language.PureScript.TypeChecker.Entailment.InstanceContext,
                       Language.PureScript.Types.Constraint)])
                  Language.PureScript.TypeChecker.Entailment.$s$fMonoid(,)_$s$fSemigroup(,)
                  (GHC.Types.False `cast` (Sym (Data.Semigroup.Internal.N:Any[0])),
                   GHC.Types.[]
                     @ (Language.PureScript.Names.Ident,
                        Language.PureScript.TypeChecker.Entailment.InstanceContext,
                        Language.PureScript.Types.Constraint))
                  (\ (ds :: (Data.Semigroup.Internal.Any,
                             [(Language.PureScript.Names.Ident,
                               Language.PureScript.TypeChecker.Entailment.InstanceContext,
                               Language.PureScript.Types.Constraint)]))
                     (ds1 :: (Data.Semigroup.Internal.Any,
                              [(Language.PureScript.Names.Ident,
                                Language.PureScript.TypeChecker.Entailment.InstanceContext,
                                Language.PureScript.Types.Constraint)])) ->
                   case ds of wild { (,) a2 b1 ->
                   case ds1 of wild1 { (,) a' b' ->
                   ((GHC.Classes.||
                       a2 `cast` (Data.Semigroup.Internal.N:Any[0])
                       a' `cast` (Data.Semigroup.Internal.N:Any[0]))
                      `cast`
                    (Sym (Data.Semigroup.Internal.N:Any[0])),
                    GHC.Base.augment
                      @ (Language.PureScript.Names.Ident,
                         Language.PureScript.TypeChecker.Entailment.InstanceContext,
                         Language.PureScript.Types.Constraint)
                      (\ @ b
                         (c :: (Language.PureScript.Names.Ident,
                                Language.PureScript.TypeChecker.Entailment.InstanceContext,
                                Language.PureScript.Types.Constraint)
                               -> b -> b)[OneShot]
                         (n :: b)[OneShot] ->
                       GHC.Base.foldr
                         @ (Language.PureScript.Names.Ident,
                            Language.PureScript.TypeChecker.Entailment.InstanceContext,
                            Language.PureScript.Types.Constraint)
                         @ b
                         c
                         n
                         b1)
                      b') } })
                  (GHC.Base.$fMonoid(,)_$cmconcat
                     @ Data.Semigroup.Internal.Any
                     @ [(Language.PureScript.Names.Ident,
                         Language.PureScript.TypeChecker.Entailment.InstanceContext,
                         Language.PureScript.Types.Constraint)]
                     Data.Semigroup.Internal.$fMonoidAny
                     (GHC.Base.$fMonoid[]
                        @ (Language.PureScript.Names.Ident,
                           Language.PureScript.TypeChecker.Entailment.InstanceContext,
                           Language.PureScript.Types.Constraint))) -}
77512780b20a77012cf16cb63a53da62
  $s$fMonoid(,)_$s$fSemigroup(,) ::
    GHC.Base.Semigroup
      (Data.Semigroup.Internal.Any,
       [(Language.PureScript.Names.Ident,
         Language.PureScript.TypeChecker.Entailment.InstanceContext,
         Language.PureScript.Types.Constraint)])
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Semigroup.Internal.Any,
                     [(Language.PureScript.Names.Ident,
                       Language.PureScript.TypeChecker.Entailment.InstanceContext,
                       Language.PureScript.Types.Constraint)])
                  (\ (ds :: (Data.Semigroup.Internal.Any,
                             [(Language.PureScript.Names.Ident,
                               Language.PureScript.TypeChecker.Entailment.InstanceContext,
                               Language.PureScript.Types.Constraint)]))
                     (ds1 :: (Data.Semigroup.Internal.Any,
                              [(Language.PureScript.Names.Ident,
                                Language.PureScript.TypeChecker.Entailment.InstanceContext,
                                Language.PureScript.Types.Constraint)])) ->
                   case ds of wild { (,) a2 b1 ->
                   case ds1 of wild1 { (,) a' b' ->
                   ((GHC.Classes.||
                       a2 `cast` (Data.Semigroup.Internal.N:Any[0])
                       a' `cast` (Data.Semigroup.Internal.N:Any[0]))
                      `cast`
                    (Sym (Data.Semigroup.Internal.N:Any[0])),
                    GHC.Base.augment
                      @ (Language.PureScript.Names.Ident,
                         Language.PureScript.TypeChecker.Entailment.InstanceContext,
                         Language.PureScript.Types.Constraint)
                      (\ @ b
                         (c :: (Language.PureScript.Names.Ident,
                                Language.PureScript.TypeChecker.Entailment.InstanceContext,
                                Language.PureScript.Types.Constraint)
                               -> b -> b)[OneShot]
                         (n :: b)[OneShot] ->
                       GHC.Base.foldr
                         @ (Language.PureScript.Names.Ident,
                            Language.PureScript.TypeChecker.Entailment.InstanceContext,
                            Language.PureScript.Types.Constraint)
                         @ b
                         c
                         n
                         b1)
                      b') } })
                  (GHC.Base.$fSemigroup(,)_$csconcat
                     @ Data.Semigroup.Internal.Any
                     @ [(Language.PureScript.Names.Ident,
                         Language.PureScript.TypeChecker.Entailment.InstanceContext,
                         Language.PureScript.Types.Constraint)]
                     Data.Semigroup.Internal.$fSemigroupAny
                     (GHC.Base.$fSemigroup[]
                        @ (Language.PureScript.Names.Ident,
                           Language.PureScript.TypeChecker.Entailment.InstanceContext,
                           Language.PureScript.Types.Constraint)))
                  (\ @ b1
                     ($dIntegral :: GHC.Real.Integral b1)
                     (n :: b1)
                     (ds :: (Data.Semigroup.Internal.Any,
                             [(Language.PureScript.Names.Ident,
                               Language.PureScript.TypeChecker.Entailment.InstanceContext,
                               Language.PureScript.Types.Constraint)])) ->
                   case ds of wild { (,) a2 b2 ->
                   (Data.Semigroup.Internal.$fSemigroupAny_$cstimes
                      @ b1
                      $dIntegral
                      n
                      a2,
                    GHC.Magic.noinline
                      @ (forall b a. GHC.Real.Integral b => b -> [a] -> [a])
                      Data.Semigroup.Internal.stimesList
                      @ b1
                      @ (Language.PureScript.Names.Ident,
                         Language.PureScript.TypeChecker.Entailment.InstanceContext,
                         Language.PureScript.Types.Constraint)
                      $dIntegral
                      n
                      b2) }) -}
2d28dbf54fd18dc611baef931442d05e
  $s$fOrd(,)_$ccompare_$s$fOrdQualified ::
    GHC.Classes.Ord
      (Language.PureScript.Names.Qualified
         Language.PureScript.Names.Ident)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.Qualified
                       Language.PureScript.Names.Ident)
                  Language.PureScript.TypeChecker.Entailment.$s$fEqQualified1
                  (Language.PureScript.Names.$fOrdQualified_$ccompare
                     @ Language.PureScript.Names.Ident
                     Language.PureScript.Names.$fOrdIdent)
                  (Language.PureScript.Names.$fOrdQualified_$c<
                     @ Language.PureScript.Names.Ident
                     Language.PureScript.Names.$fOrdIdent)
                  (\ (a2 :: Language.PureScript.Names.Qualified
                              Language.PureScript.Names.Ident)
                     (b :: Language.PureScript.Names.Qualified
                             Language.PureScript.Names.Ident) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ Language.PureScript.Names.Ident
                          Language.PureScript.Names.$fOrdIdent
                          b
                          a2 of wild {
                     GHC.Types.False -> GHC.Types.True
                     GHC.Types.True -> GHC.Types.False })
                  (\ (a2 :: Language.PureScript.Names.Qualified
                              Language.PureScript.Names.Ident)
                     (b :: Language.PureScript.Names.Qualified
                             Language.PureScript.Names.Ident) ->
                   Language.PureScript.Names.$fOrdQualified_$c<
                     @ Language.PureScript.Names.Ident
                     Language.PureScript.Names.$fOrdIdent
                     b
                     a2)
                  (\ (a2 :: Language.PureScript.Names.Qualified
                              Language.PureScript.Names.Ident)
                     (b :: Language.PureScript.Names.Qualified
                             Language.PureScript.Names.Ident) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ Language.PureScript.Names.Ident
                          Language.PureScript.Names.$fOrdIdent
                          a2
                          b of wild {
                     GHC.Types.False -> GHC.Types.True
                     GHC.Types.True -> GHC.Types.False })
                  (\ (x :: Language.PureScript.Names.Qualified
                             Language.PureScript.Names.Ident)
                     (y :: Language.PureScript.Names.Qualified
                             Language.PureScript.Names.Ident) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ Language.PureScript.Names.Ident
                          Language.PureScript.Names.$fOrdIdent
                          y
                          x of wild {
                     GHC.Types.False -> y GHC.Types.True -> x })
                  (\ (x :: Language.PureScript.Names.Qualified
                             Language.PureScript.Names.Ident)
                     (y :: Language.PureScript.Names.Qualified
                             Language.PureScript.Names.Ident) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ Language.PureScript.Names.Ident
                          Language.PureScript.Names.$fOrdIdent
                          y
                          x of wild {
                     GHC.Types.False -> x GHC.Types.True -> y }) -}
e440579e68258e69f44db7108f640a55
  $s$fOrdMaybe ::
    GHC.Classes.Ord
      (GHC.Base.Maybe Language.PureScript.Names.ModuleName)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                  Language.PureScript.TypeChecker.Entailment.$s$fEqMaybe
                  (\ (a2 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                     (b :: GHC.Base.Maybe Language.PureScript.Names.ModuleName) ->
                   case a2 of wild {
                     GHC.Base.Nothing
                     -> case b of wild1 {
                          GHC.Base.Nothing -> GHC.Types.EQ
                          GHC.Base.Just ipv -> GHC.Types.LT }
                     GHC.Base.Just a3
                     -> case b of wild1 {
                          GHC.Base.Nothing -> GHC.Types.GT
                          GHC.Base.Just b1
                          -> GHC.Classes.$fOrd[]_$ccompare
                               @ (Language.PureScript.Names.ProperName
                                    'Language.PureScript.Names.Namespace)
                               (Language.PureScript.Names.$fOrdProperName
                                  @ 'Language.PureScript.Names.Namespace)
                               a3 `cast` (Language.PureScript.Names.N:ModuleName[0])
                               b1 `cast` (Language.PureScript.Names.N:ModuleName[0]) } })
                  (\ (a2 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                     (b :: GHC.Base.Maybe Language.PureScript.Names.ModuleName) ->
                   case a2 of wild {
                     GHC.Base.Nothing
                     -> case b of wild1 {
                          GHC.Base.Nothing -> GHC.Types.False
                          GHC.Base.Just ipv -> GHC.Types.True }
                     GHC.Base.Just a3
                     -> case b of wild1 {
                          GHC.Base.Nothing -> GHC.Types.False
                          GHC.Base.Just b1
                          -> Language.PureScript.Names.$fOrdModuleName6
                               a3 `cast` (Language.PureScript.Names.N:ModuleName[0])
                               b1 `cast` (Language.PureScript.Names.N:ModuleName[0]) } })
                  (\ (a2 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                     (b :: GHC.Base.Maybe Language.PureScript.Names.ModuleName) ->
                   case b of wild {
                     GHC.Base.Nothing
                     -> case a2 of wild1 {
                          GHC.Base.Nothing -> GHC.Types.True
                          GHC.Base.Just ipv -> GHC.Types.False }
                     GHC.Base.Just a3
                     -> case a2 of wild1 {
                          GHC.Base.Nothing -> GHC.Types.True
                          GHC.Base.Just b1
                          -> case GHC.Classes.$fOrd[]_$ccompare
                                    @ (Language.PureScript.Names.ProperName
                                         'Language.PureScript.Names.Namespace)
                                    (Language.PureScript.Names.$fOrdProperName
                                       @ 'Language.PureScript.Names.Namespace)
                                    a3 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                    b1 `cast` (Language.PureScript.Names.N:ModuleName[0]) of wild2 {
                               DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False } } })
                  (\ (a2 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                     (b :: GHC.Base.Maybe Language.PureScript.Names.ModuleName) ->
                   case b of wild {
                     GHC.Base.Nothing
                     -> case a2 of wild1 {
                          GHC.Base.Nothing -> GHC.Types.False
                          GHC.Base.Just ipv -> GHC.Types.True }
                     GHC.Base.Just a3
                     -> case a2 of wild1 {
                          GHC.Base.Nothing -> GHC.Types.False
                          GHC.Base.Just b1
                          -> Language.PureScript.Names.$fOrdModuleName6
                               a3 `cast` (Language.PureScript.Names.N:ModuleName[0])
                               b1 `cast` (Language.PureScript.Names.N:ModuleName[0]) } })
                  (\ (a2 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                     (b :: GHC.Base.Maybe Language.PureScript.Names.ModuleName) ->
                   case a2 of wild {
                     GHC.Base.Nothing
                     -> case b of wild1 {
                          GHC.Base.Nothing -> GHC.Types.True
                          GHC.Base.Just ipv -> GHC.Types.False }
                     GHC.Base.Just a3
                     -> case b of wild1 {
                          GHC.Base.Nothing -> GHC.Types.True
                          GHC.Base.Just b1
                          -> case GHC.Classes.$fOrd[]_$ccompare
                                    @ (Language.PureScript.Names.ProperName
                                         'Language.PureScript.Names.Namespace)
                                    (Language.PureScript.Names.$fOrdProperName
                                       @ 'Language.PureScript.Names.Namespace)
                                    a3 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                    b1 `cast` (Language.PureScript.Names.N:ModuleName[0]) of wild2 {
                               DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False } } })
                  (\ (x :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                     (y :: GHC.Base.Maybe Language.PureScript.Names.ModuleName) ->
                   case y of wild {
                     GHC.Base.Nothing -> x
                     GHC.Base.Just a2
                     -> case x of wild1 {
                          GHC.Base.Nothing -> wild
                          GHC.Base.Just b1
                          -> case GHC.Classes.$fOrd[]_$ccompare
                                    @ (Language.PureScript.Names.ProperName
                                         'Language.PureScript.Names.Namespace)
                                    (Language.PureScript.Names.$fOrdProperName
                                       @ 'Language.PureScript.Names.Namespace)
                                    a2 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                    b1 `cast` (Language.PureScript.Names.N:ModuleName[0]) of wild2 {
                               DEFAULT -> wild GHC.Types.LT -> wild1 } } })
                  (\ (x :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                     (y :: GHC.Base.Maybe Language.PureScript.Names.ModuleName) ->
                   case y of wild {
                     GHC.Base.Nothing
                     -> case x of wild1 { DEFAULT ->
                        GHC.Base.Nothing @ Language.PureScript.Names.ModuleName }
                     GHC.Base.Just a2
                     -> case x of wild1 {
                          GHC.Base.Nothing
                          -> GHC.Base.Nothing @ Language.PureScript.Names.ModuleName
                          GHC.Base.Just b1
                          -> case GHC.Classes.$fOrd[]_$ccompare
                                    @ (Language.PureScript.Names.ProperName
                                         'Language.PureScript.Names.Namespace)
                                    (Language.PureScript.Names.$fOrdProperName
                                       @ 'Language.PureScript.Names.Namespace)
                                    a2 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                    b1 `cast` (Language.PureScript.Names.N:ModuleName[0]) of wild2 {
                               DEFAULT -> wild1 GHC.Types.LT -> wild } } }) -}
c1f2482062c6a8c617744e67177c054a
  $s$fSemigroup(,)_$csconcat ::
    GHC.Base.NonEmpty
      (Data.Semigroup.Internal.Any,
       [(Language.PureScript.Names.Ident,
         Language.PureScript.TypeChecker.Entailment.InstanceContext,
         Language.PureScript.Types.Constraint)])
    -> (Data.Semigroup.Internal.Any,
        [(Language.PureScript.Names.Ident,
          Language.PureScript.TypeChecker.Entailment.InstanceContext,
          Language.PureScript.Types.Constraint)])
  {- Arity: 1, Strictness: <S(SS),1*U(1*U(U,U),1*U)>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w2 :: GHC.Base.NonEmpty
                            (Data.Semigroup.Internal.Any,
                             [(Language.PureScript.Names.Ident,
                               Language.PureScript.TypeChecker.Entailment.InstanceContext,
                               Language.PureScript.Types.Constraint)])) ->
                 case w2 of ww { GHC.Base.:| ww1 ww2 ->
                 case ww1 of ww3 { (,) ww4 ww5 ->
                 case GHC.Base.$w$csconcat
                        @ Data.Semigroup.Internal.Any
                        @ [(Language.PureScript.Names.Ident,
                            Language.PureScript.TypeChecker.Entailment.InstanceContext,
                            Language.PureScript.Types.Constraint)]
                        Data.Semigroup.Internal.$fSemigroupAny
                        (GHC.Base.$fSemigroup[]
                           @ (Language.PureScript.Names.Ident,
                              Language.PureScript.TypeChecker.Entailment.InstanceContext,
                              Language.PureScript.Types.Constraint))
                        ww4
                        ww5
                        ww2 of ww6 { (#,#) ww7 ww8 ->
                 (ww7, ww8) } } }) -}
8b0b9578eac0e2d6c76cc6d9af3d976c
  $s$fSemigroup(,)_$cstimes ::
    GHC.Real.Integral b1 =>
    b1
    -> (Data.Semigroup.Internal.Any,
        [(Language.PureScript.Names.Ident,
          Language.PureScript.TypeChecker.Entailment.InstanceContext,
          Language.PureScript.Types.Constraint)])
    -> (Data.Semigroup.Internal.Any,
        [(Language.PureScript.Names.Ident,
          Language.PureScript.TypeChecker.Entailment.InstanceContext,
          Language.PureScript.Types.Constraint)])
  {- Arity: 3,
     Strictness: <L,U(U(U(U,U,U,U,U,U,U),U(U,U,U,U,U,U,U,U),U),U,U,U,U,U,U,U,U)><L,U><S,1*U(U,U)>m,
     Unfolding: InlineRule (3, True, False)
                (\ @ b1
                   ($dIntegral :: GHC.Real.Integral b1)
                   (n :: b1)
                   (ds :: (Data.Semigroup.Internal.Any,
                           [(Language.PureScript.Names.Ident,
                             Language.PureScript.TypeChecker.Entailment.InstanceContext,
                             Language.PureScript.Types.Constraint)])) ->
                 case ds of wild { (,) a2 b2 ->
                 (Data.Semigroup.Internal.$fSemigroupAny_$cstimes
                    @ b1
                    $dIntegral
                    n
                    a2,
                  GHC.Magic.noinline
                    @ (forall b a. GHC.Real.Integral b => b -> [a] -> [a])
                    Data.Semigroup.Internal.stimesList
                    @ b1
                    @ (Language.PureScript.Names.Ident,
                       Language.PureScript.TypeChecker.Entailment.InstanceContext,
                       Language.PureScript.Types.Constraint)
                    $dIntegral
                    n
                    b2) }) -}
9798c6d8263092ce4835f3af3901742f
  $s$wsplitLookup_$s$w$sgo1 ::
    GHC.Prim.Int#
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> a
    -> Data.Map.Internal.Map
         (GHC.Base.Maybe Language.PureScript.Names.ModuleName) a
    -> Data.Map.Internal.Map
         (GHC.Base.Maybe Language.PureScript.Names.ModuleName) a
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> (# Data.Map.Internal.Map
            (GHC.Base.Maybe Language.PureScript.Names.ModuleName) a,
          GHC.Base.Maybe a,
          Data.Map.Internal.Map
            (GHC.Base.Maybe Language.PureScript.Names.ModuleName) a #)
  {- Arity: 6, Strictness: <L,A><S,U><L,U><L,U><L,U><S,1*U> -}
93596be9676226a5ce7872767444c182
  $s$wsplitLookup_$s$w$sgo13 ::
    GHC.Prim.Int#
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> a
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName))
         a
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName))
         a
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> (# Data.Map.Internal.Map
            (Language.PureScript.Names.Qualified
               (Language.PureScript.Names.ProperName
                  'Language.PureScript.Names.ClassName))
            a,
          GHC.Base.Maybe a,
          Data.Map.Internal.Map
            (Language.PureScript.Names.Qualified
               (Language.PureScript.Names.ProperName
                  'Language.PureScript.Names.ClassName))
            a #)
  {- Arity: 8,
     Strictness: <L,A><S,U><L,U(U,U,U)><L,U><L,U><L,U><L,U(U,U,U)><S,U> -}
f3af4607a60e0e9d420122c2462eb7a2
  $s$wsplitLookup_$s$w$sgo2 ::
    Data.Map.Internal.Map
      (GHC.Base.Maybe Language.PureScript.Names.ModuleName) a
    -> Language.PureScript.Names.ModuleName
    -> (# Data.Map.Internal.Map
            (GHC.Base.Maybe Language.PureScript.Names.ModuleName) a,
          GHC.Base.Maybe a,
          Data.Map.Internal.Map
            (GHC.Base.Maybe Language.PureScript.Names.ModuleName) a #)
  {- Arity: 2, Strictness: <S,1*U><L,U> -}
9d906e4245e375cd4d5aaafdd882e93c
  $s$wsplitLookup_$s$w$sgo3 ::
    GHC.Prim.Int#
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> a
    -> Data.Map.Internal.Map Data.Text.Internal.Text a
    -> Data.Map.Internal.Map Data.Text.Internal.Text a
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.ByteArray#
    -> (# Data.Map.Internal.Map Data.Text.Internal.Text a,
          GHC.Base.Maybe a,
          Data.Map.Internal.Map Data.Text.Internal.Text a #)
  {- Arity: 10,
     Strictness: <L,A><S,U><S,U><S,U><L,U><L,U><L,U><S,U><S,U><S,U> -}
199cf12bfd6be454a9a82707ac9bd98b
  $s$wsplitS ::
    Data.Text.Internal.Text
    -> Data.Set.Internal.Set Data.Text.Internal.Text
    -> (# Data.Set.Internal.Set Data.Text.Internal.Text,
          Data.Set.Internal.Set Data.Text.Internal.Text #)
  {- Arity: 2, Strictness: <L,1*U(U,U,U)><S,1*U>, Inline: [~] -}
c3a68a5289f6f709279eabae7771eee1
  $s$wsplitS1 ::
    GHC.Types.Int
    -> Data.Set.Internal.Set GHC.Types.Int
    -> (# Data.Set.Internal.Set GHC.Types.Int,
          Data.Set.Internal.Set GHC.Types.Int #)
  {- Arity: 2, Strictness: <L,1*U(U)><S,1*U>, Inline: [~] -}
8b0beb584c908997a6396151aeda50f7
  $s$wsplit_$s$wpoly_go1 ::
    Data.Map.Internal.Map Data.Text.Internal.Text a
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> (# Data.Map.Internal.Map Data.Text.Internal.Text a,
          Data.Map.Internal.Map Data.Text.Internal.Text a #)
  {- Arity: 4, Strictness: <S,1*U><L,U><L,U><L,U> -}
86f8bf199faaf8043cc1d71ef73b409a
  $s$wsplit_$s$wpoly_go13 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         Language.PureScript.Names.Ident)
      a
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.Ident
    -> (# Data.Map.Internal.Map
            (Language.PureScript.Names.Qualified
               Language.PureScript.Names.Ident)
            a,
          Data.Map.Internal.Map
            (Language.PureScript.Names.Qualified
               Language.PureScript.Names.Ident)
            a #)
  {- Arity: 3, Strictness: <S,1*U><L,U><L,U> -}
f5f735af4e6d01ffa5a3327322dadc34
  $sdifference ::
    Data.Set.Internal.Set Data.Text.Internal.Text
    -> Data.Set.Internal.Set Data.Text.Internal.Text
    -> Data.Set.Internal.Set Data.Text.Internal.Text
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [~] -}
daf6a8d8e98d53009de05ea727d7dd12
  $sfromList ::
    [Data.Text.Internal.Text]
    -> Data.Set.Internal.Set Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [Data.Text.Internal.Text]) ->
                 case ds of wild {
                   [] -> Data.Set.Internal.Tip @ Data.Text.Internal.Text
                   : x ds1
                   -> case ds1 of wild1 {
                        []
                        -> case x of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                           Data.Set.Internal.Bin
                             @ Data.Text.Internal.Text
                             1#
                             dt
                             (Data.Set.Internal.Tip @ Data.Text.Internal.Text)
                             (Data.Set.Internal.Tip @ Data.Text.Internal.Text) }
                        : ipv ipv1
                        -> case x of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                           case ipv of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                           case Data.Text.$w$ccompare ww1 ww2 ww3 ww5 ww6 ww7 of wild2 {
                             DEFAULT
                             -> Language.PureScript.TypeChecker.Entailment.$sfromList_$sgo4
                                  ww5
                                  ww6
                                  ww7
                                  ipv1
                                  (Data.Set.Internal.Bin
                                     @ Data.Text.Internal.Text
                                     1#
                                     ww
                                     (Data.Set.Internal.Tip @ Data.Text.Internal.Text)
                                     (Data.Set.Internal.Tip @ Data.Text.Internal.Text))
                             GHC.Types.LT
                             -> Language.PureScript.TypeChecker.Entailment.$sfromList_$s$wgo3
                                  ww5
                                  ww6
                                  ww7
                                  ipv1
                                  (Data.Set.Internal.Bin
                                     @ Data.Text.Internal.Text
                                     1#
                                     ww
                                     (Data.Set.Internal.Tip @ Data.Text.Internal.Text)
                                     (Data.Set.Internal.Tip @ Data.Text.Internal.Text))
                                  1# } } } } }) -}
9e737bfda87c31beec363e965abb69aa
  $sfromList1 ::
    [GHC.Types.Int] -> Data.Set.Internal.Set GHC.Types.Int
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [GHC.Types.Int]) ->
                 case ds of wild {
                   [] -> Data.Set.Internal.Tip @ GHC.Types.Int
                   : x ds1
                   -> case ds1 of wild1 {
                        []
                        -> case x of dt { GHC.Types.I# ipv ->
                           Data.Set.Internal.Bin
                             @ GHC.Types.Int
                             1#
                             dt
                             (Data.Set.Internal.Tip @ GHC.Types.Int)
                             (Data.Set.Internal.Tip @ GHC.Types.Int) }
                        : ipv ipv1
                        -> case x of wild2 { GHC.Types.I# x1 ->
                           case ipv of wild3 { GHC.Types.I# y ->
                           case GHC.Prim.>=# x1 y of lwild {
                             DEFAULT
                             -> Language.PureScript.TypeChecker.Entailment.$sfromList_$s$wgo1
                                  y
                                  ipv1
                                  (Data.Set.Internal.Bin
                                     @ GHC.Types.Int
                                     1#
                                     wild2
                                     (Data.Set.Internal.Tip @ GHC.Types.Int)
                                     (Data.Set.Internal.Tip @ GHC.Types.Int))
                                  1#
                             1#
                             -> Language.PureScript.TypeChecker.Entailment.$sfromList_$sgo1
                                  y
                                  ipv1
                                  (Data.Set.Internal.Bin
                                     @ GHC.Types.Int
                                     1#
                                     wild2
                                     (Data.Set.Internal.Tip @ GHC.Types.Int)
                                     (Data.Set.Internal.Tip @ GHC.Types.Int)) } } } } }) -}
93755064230f8942966a02fe9f49639d
  $sfromList2 ::
    [(Data.Text.Internal.Text, a)]
    -> Data.Map.Internal.Map Data.Text.Internal.Text a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a (ds :: [(Data.Text.Internal.Text, a)]) ->
                 case ds of wild {
                   [] -> Data.Map.Internal.Tip @ Data.Text.Internal.Text @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case kx of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                           Data.Map.Internal.Bin
                             @ Data.Text.Internal.Text
                             @ a
                             1#
                             dt
                             x
                             (Data.Map.Internal.Tip @ Data.Text.Internal.Text @ a)
                             (Data.Map.Internal.Tip @ Data.Text.Internal.Text @ a) }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case kx of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                           case ky of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                           case Data.Text.$w$ccompare ww1 ww2 ww3 ww5 ww6 ww7 of wild4 {
                             DEFAULT
                             -> Language.PureScript.TypeChecker.Entailment.$sfromList_$spoly_go14
                                  @ a
                                  ww5
                                  ww6
                                  ww7
                                  ds3
                                  ipv1
                                  (Data.Map.Internal.Bin
                                     @ Data.Text.Internal.Text
                                     @ a
                                     1#
                                     ww
                                     x
                                     (Data.Map.Internal.Tip @ Data.Text.Internal.Text @ a)
                                     (Data.Map.Internal.Tip @ Data.Text.Internal.Text @ a))
                             GHC.Types.LT
                             -> Language.PureScript.TypeChecker.Entailment.$sfromList_$s$wpoly_go13
                                  @ a
                                  ww5
                                  ww6
                                  ww7
                                  ds3
                                  ipv1
                                  (Data.Map.Internal.Bin
                                     @ Data.Text.Internal.Text
                                     @ a
                                     1#
                                     ww
                                     x
                                     (Data.Map.Internal.Tip @ Data.Text.Internal.Text @ a)
                                     (Data.Map.Internal.Tip @ Data.Text.Internal.Text @ a))
                                  1# } } } } } } }) -}
51e5df2bf1456565d39398c9042f1004
  $sfromList_$s$wgo1 ::
    GHC.Prim.Int#
    -> [GHC.Types.Int]
    -> Data.Set.Internal.Set GHC.Types.Int
    -> GHC.Prim.Int#
    -> Data.Set.Internal.Set GHC.Types.Int
  {- Arity: 4, Strictness: <S,U><S,1*U><S,1*U><L,U> -}
1ca0231adc506f359da29fc699897f0b
  $sfromList_$s$wgo3 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> [Data.Text.Internal.Text]
    -> Data.Set.Internal.Set Data.Text.Internal.Text
    -> GHC.Prim.Int#
    -> Data.Set.Internal.Set Data.Text.Internal.Text
  {- Arity: 6, Strictness: <S,U><S,U><S,U><S,1*U><S,1*U><L,U> -}
b7404780aa73eb174ea7ec6a1ca4cf2a
  $sfromList_$s$wpoly_go13 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> a
    -> [(Data.Text.Internal.Text, a)]
    -> Data.Map.Internal.Map Data.Text.Internal.Text a
    -> GHC.Prim.Int#
    -> Data.Map.Internal.Map Data.Text.Internal.Text a
  {- Arity: 7, Strictness: <S,U><S,U><S,U><L,U><S,1*U><S,1*U><L,U> -}
9375e505db04ba908a8116f2df068e21
  $sfromList_$sgo1 ::
    GHC.Prim.Int#
    -> [GHC.Types.Int]
    -> Data.Set.Internal.Set GHC.Types.Int
    -> Data.Set.Internal.Set GHC.Types.Int
  {- Arity: 3, Strictness: <S,U><S,1*U><S,1*U> -}
b7e52008c0be5005a3073663f757c5df
  $sfromList_$sgo4 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> [Data.Text.Internal.Text]
    -> Data.Set.Internal.Set Data.Text.Internal.Text
    -> Data.Set.Internal.Set Data.Text.Internal.Text
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><S,1*U> -}
59cff03c23e08b2a70ad7de50d3c44e6
  $sfromList_$spoly_go14 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> a
    -> [(Data.Text.Internal.Text, a)]
    -> Data.Map.Internal.Map Data.Text.Internal.Text a
    -> Data.Map.Internal.Map Data.Text.Internal.Text a
  {- Arity: 6, Strictness: <S,U><S,U><S,U><L,U><S,1*U><S,1*U> -}
b2fc584a1525ca0aa3ada451d28ee9dd
  $sinsertWithR_$s$sgo13 ::
    Data.Map.Internal.Map
      (GHC.Base.Maybe Language.PureScript.Names.ModuleName) a1
    -> a1
    -> Language.PureScript.Names.ModuleName
    -> (a1 -> a1 -> a1)
    -> Data.Map.Internal.Map
         (GHC.Base.Maybe Language.PureScript.Names.ModuleName) a1
  {- Arity: 4, Strictness: <S,1*U><L,U><L,U><L,1*C1(C1(U))> -}
29dd58226e5fb0b3f0c3226173c07638
  $sinsertWithR_$sgo13 ::
    (a1 -> a1 -> a1)
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> a1
    -> Data.Map.Internal.Map
         (GHC.Base.Maybe Language.PureScript.Names.ModuleName) a1
    -> Data.Map.Internal.Map
         (GHC.Base.Maybe Language.PureScript.Names.ModuleName) a1
  {- Arity: 4, Strictness: <L,1*C1(C1(U))><S,1*U><L,U><S,1*U> -}
2e5113b745e68b0fb78b3ad39bf3fe5b
  $sinsertWith_$s$sgo1 ::
    Data.Map.Internal.Map
      (GHC.Base.Maybe Language.PureScript.Names.ModuleName) a
    -> a
    -> Language.PureScript.Names.ModuleName
    -> (a -> a -> a)
    -> Data.Map.Internal.Map
         (GHC.Base.Maybe Language.PureScript.Names.ModuleName) a
  {- Arity: 4, Strictness: <S,1*U><L,U><L,U><L,1*C1(C1(U))> -}
91f104cd4e463bb262d00026b47a3ae9
  $sinsertWith_$s$sgo13 ::
    GHC.Prim.Int#
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> a
    -> Data.Map.Internal.Map
         (GHC.Base.Maybe Language.PureScript.Names.ModuleName) a
    -> Data.Map.Internal.Map
         (GHC.Base.Maybe Language.PureScript.Names.ModuleName) a
    -> a
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> (a -> a -> a)
    -> Data.Map.Internal.Map
         (GHC.Base.Maybe Language.PureScript.Names.ModuleName) a
  {- Arity: 8,
     Strictness: <L,U><S,U><L,U><L,U><L,U><L,U><S,1*U><L,1*C1(C1(U))> -}
ee485e2648c64fe604233c0bfed50ad7
  $sinsertWith_$s$w$sgo13 ::
    GHC.Prim.Int#
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> a
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName))
         a
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName))
         a
    -> a
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> (a -> a -> a)
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName))
         a
  {- Arity: 10,
     Strictness: <L,U><S,U><L,U(U,U,U)><L,U><L,U><L,U><L,U><L,U(U,U,U)><S,U><L,1*C1(C1(U))> -}
7ab8c55abe0c1347e8e709fbe270f569
  $sinsertWith_$sgo13 ::
    (a1 -> a1 -> a1)
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> a1
    -> Data.Map.Internal.Map
         (GHC.Base.Maybe Language.PureScript.Names.ModuleName) a1
    -> Data.Map.Internal.Map
         (GHC.Base.Maybe Language.PureScript.Names.ModuleName) a1
  {- Arity: 4, Strictness: <L,1*C1(C1(U))><S,1*U><L,U><S,1*U> -}
6d3b535da1155a61911320c8d57f0aa9
  $sinsert_$s$w$sgo1 ::
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Set.Internal.Set GHC.Types.Int
    -> Data.Set.Internal.Set GHC.Types.Int
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Data.Set.Internal.Set GHC.Types.Int
  {- Arity: 6, Strictness: <L,U><S,U><L,U><L,U><S,U><L,U> -}
6d2d3ce24b714a3d20e2ba0a6110d729
  $sinsert_$s$w$sgo13 ::
    GHC.Prim.Int#
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.Ident
    -> a
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            Language.PureScript.Names.Ident)
         a
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            Language.PureScript.Names.Ident)
         a
    -> a
    -> Language.PureScript.Names.Ident
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.Qualified
         Language.PureScript.Names.Ident
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            Language.PureScript.Names.Ident)
         a
  {- Arity: 10,
     Strictness: <L,U><S,U><L,U><L,U><L,U><L,U><L,U><L,U><S,U><L,U> -}
f6df13d656826d310209f6fcc448ccc3
  $sinsert_$s$w$sgo3 ::
    GHC.Prim.Int#
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Set.Internal.Set Data.Text.Internal.Text
    -> Data.Set.Internal.Set Data.Text.Internal.Text
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.ByteArray#
    -> Data.Text.Internal.Text
    -> Data.Set.Internal.Set Data.Text.Internal.Text
  {- Arity: 10,
     Strictness: <L,U><S,U><S,U><S,U><L,U><L,U><S,U><S,U><S,U><L,U> -}
8931fc6f124acb98da64ee6d48e10f4b
  $sisSubsetOf ::
    Data.Set.Internal.Set GHC.Types.Int
    -> Data.Set.Internal.Set GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (t1 :: Data.Set.Internal.Set GHC.Types.Int)
                   (t2 :: Data.Set.Internal.Set GHC.Types.Int) ->
                 case t1 of wild {
                   Data.Set.Internal.Bin dt ds ds1 ds2
                   -> case t2 of wild1 {
                        Data.Set.Internal.Bin dt1 ds3 ds4 ds5
                        -> case GHC.Prim.<=# dt dt1 of lwild {
                             DEFAULT -> GHC.Types.False
                             1#
                             -> Data.Set.Internal.isProperSubsetOf_$sisSubsetOfX2
                                  @ GHC.Types.Int
                                  dt1
                                  ds3
                                  ds4
                                  ds5
                                  dt
                                  ds
                                  ds1
                                  ds2
                                  GHC.Classes.$fOrdInt }
                        Data.Set.Internal.Tip -> GHC.Types.False }
                   Data.Set.Internal.Tip
                   -> case t2 of wild1 {
                        Data.Set.Internal.Bin dt ds ds1 ds2
                        -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.<=# 0# dt)
                        Data.Set.Internal.Tip
                        -> Language.PureScript.TypeChecker.Entailment.$sisSubsetOf1 } }) -}
3caa77203de15337d4f4cac075ef16f1
  $sisSubsetOf1 :: GHC.Types.Bool
  {- Unfolding: (Language.PureScript.TypeChecker.Entailment.$sisSubsetOf_$sisSubsetOfX
                   (Data.Set.Internal.Tip @ GHC.Types.Int)
                   (Data.Set.Internal.Tip @ GHC.Types.Int)) -}
e48870da019ee67e3df528fce2904861
  $sisSubsetOf_$sisSubsetOfX ::
    Data.Set.Internal.Set GHC.Types.Int
    -> Data.Set.Internal.Set GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [~] -}
704cdc079c2d206989deca30e345e38f
  $slookup1 ::
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Data.Map.Internal.Map
         (GHC.Base.Maybe Language.PureScript.Names.ModuleName) a
    -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
f1889a9b05366c04a5968a3226e86f4e
  $slookup_$s$wpoly_go1 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName))
      (Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            Language.PureScript.Names.Ident)
         (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
            (Language.PureScript.Names.Qualified
               Language.PureScript.Names.Ident)))
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> ((Data.Text.Internal.Text :: *)
        ~R# (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName :: *)) =>
       Language.PureScript.Names.ModuleName
       -> GHC.Base.Maybe
            (Data.Map.Internal.Map
               (Language.PureScript.Names.Qualified
                  Language.PureScript.Names.Ident)
               Language.PureScript.TypeClassDictionaries.NamedDict)
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S,1*U><L,U><L,U><L,U><L,U><L,U> -}
ec15689a04768d77087a60cbb60e3752
  $slookup_$s$wpoly_go13 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName))
      (Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            Language.PureScript.Names.Ident)
         (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
            (Language.PureScript.Names.Qualified
               Language.PureScript.Names.Ident)))
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> Language.PureScript.Names.ModuleName
    -> GHC.Base.Maybe
         (Data.Map.Internal.Map
            (Language.PureScript.Names.Qualified
               Language.PureScript.Names.Ident)
            Language.PureScript.TypeClassDictionaries.NamedDict)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U(U,U,U)><L,U> -}
a68576417fa3f8ecb6ffa79c1e0727fb
  $slookup_$s$wpoly_go2 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName))
      a
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U(U,U,U)> -}
cb27fe8f1fc309473f5f3147604ce386
  $slookup_$spoly_go1 ::
    Data.Map.Internal.Map
      (GHC.Base.Maybe Language.PureScript.Names.ModuleName) a
    -> Language.PureScript.Names.ModuleName -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U> -}
06aad93a8876b508767230e1e168789a
  $slookup_$spoly_go13 ::
    Data.Map.Internal.Map
      (GHC.Base.Maybe Language.PureScript.Names.ModuleName)
      (Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName))
         (Data.Map.Internal.Map
            (Language.PureScript.Names.Qualified
               Language.PureScript.Names.Ident)
            (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
               (Language.PureScript.Names.Qualified
                  Language.PureScript.Names.Ident))))
    -> GHC.Base.Maybe
         (Data.Map.Internal.Map
            (Language.PureScript.Names.Qualified
               (Language.PureScript.Names.ProperName
                  'Language.PureScript.Names.ClassName))
            (Data.Map.Internal.Map
               (Language.PureScript.Names.Qualified
                  Language.PureScript.Names.Ident)
               Language.PureScript.TypeClassDictionaries.NamedDict))
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
4d4d74bd6562adaeb40ef855d528446e
  $sunion ::
    Data.Set.Internal.Set Data.Text.Internal.Text
    -> Data.Set.Internal.Set Data.Text.Internal.Text
    -> Data.Set.Internal.Set Data.Text.Internal.Text
  {- Arity: 2, Strictness: <S,1*U><S,1*U>, Inline: [~] -}
f73cdaefd7c610a330b0d56c6fcbd2ef
  $sunion1 ::
    Data.Set.Internal.Set GHC.Types.Int
    -> Data.Set.Internal.Set GHC.Types.Int
    -> Data.Set.Internal.Set GHC.Types.Int
  {- Arity: 2, Strictness: <S,1*U><S,1*U>, Inline: [~] -}
919cb050b5f1387388a22838570c39a3
  $sunion2 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         Language.PureScript.Names.Ident)
      a
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            Language.PureScript.Names.Ident)
         a
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            Language.PureScript.Names.Ident)
         a
  {- Arity: 2, Strictness: <S,1*U><S,1*U>, Inline: [~] -}
fd8e91ec49e6b069086270d18bacf6ec
  $sunion3 ::
    Data.Map.Internal.Map Data.Text.Internal.Text a
    -> Data.Map.Internal.Map Data.Text.Internal.Text a
    -> Data.Map.Internal.Map Data.Text.Internal.Text a
  {- Arity: 2, Strictness: <S,1*U><S,1*U>, Inline: [~] -}
3d7b3a3c785635478f05f02177a0720b
  $sunionWith ::
    (a -> a -> a)
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName))
         a
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName))
         a
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName))
         a
  {- Arity: 3, Strictness: <L,C(C1(U))><S,1*U><S,1*U>, Inline: [~] -}
3e07037115c8c2f712c84ad55c71b5e3
  $sunionWith1 ::
    (a -> a -> a)
    -> Data.Map.Internal.Map
         (GHC.Base.Maybe Language.PureScript.Names.ModuleName) a
    -> Data.Map.Internal.Map
         (GHC.Base.Maybe Language.PureScript.Names.ModuleName) a
    -> Data.Map.Internal.Map
         (GHC.Base.Maybe Language.PureScript.Names.ModuleName) a
  {- Arity: 3, Strictness: <L,C(C1(U))><S,1*U><S,1*U>, Inline: [~] -}
f46ad01c00f527b88c689d1e6cc28b60
  $sunionWith2 ::
    (a -> a -> a)
    -> Data.Map.Internal.Map Data.Text.Internal.Text a
    -> Data.Map.Internal.Map Data.Text.Internal.Text a
    -> Data.Map.Internal.Map Data.Text.Internal.Text a
  {- Arity: 3, Strictness: <L,C(C1(U))><S,1*U><S,1*U>, Inline: [~] -}
27377a8094c83ea497afd7f483cda318
  $tc'Apart :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15196928303543812140##
                   6460055256778729129##
                   Language.PureScript.TypeChecker.Entailment.$trModule
                   Language.PureScript.TypeChecker.Entailment.$tc'Apart2
                   1#
                   Language.PureScript.TypeChecker.Entailment.$tc'Apart1) -}
67c4290fe4ba27b70325e416f5c5737d
  $tc'Apart1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
a129fdf379749d58d676bf05c987002e
  $tc'Apart2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.TypeChecker.Entailment.$tc'Apart3) -}
dac0fce81e83e38f144a260f04ade489
  $tc'Apart3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Apart"#) -}
bc488afdf41baf44a24b63f8538684e8
  $tc'Deferred :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6558089103749094938##
                   328828722480019155##
                   Language.PureScript.TypeChecker.Entailment.$trModule
                   Language.PureScript.TypeChecker.Entailment.$tc'Deferred2
                   1#
                   Language.PureScript.TypeChecker.Entailment.$tc'Deferred1) -}
9027652f9356c8cdd533e6d1b57063da
  $tc'Deferred1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
531034a84fd5d499aa40f2279fe54bbc
  $tc'Deferred2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.TypeChecker.Entailment.$tc'Deferred3) -}
fc44af090ba31897ff940e4fb2f81938
  $tc'Deferred3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Deferred"#) -}
fb5e94f0e330bc1738edeb3881208267
  $tc'EmptyClassInstance :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13297275520987011240##
                   3598244914869834710##
                   Language.PureScript.TypeChecker.Entailment.$trModule
                   Language.PureScript.TypeChecker.Entailment.$tc'EmptyClassInstance2
                   0#
                   Language.PureScript.TypeChecker.Entailment.$tc'EmptyClassInstance1) -}
3872ec0271c7e4d4abd4c3b074e3a3dc
  $tc'EmptyClassInstance1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
e6df7901e97e4612a69a5ecbfd31b9e6
  $tc'EmptyClassInstance2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.TypeChecker.Entailment.$tc'EmptyClassInstance3) -}
b7fffbec60591e29501c74435ea86428
  $tc'EmptyClassInstance3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'EmptyClassInstance"#) -}
87f23d01d1e1ea7e6e81ca38bf345948
  $tc'IsSymbolInstance :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4268236319313808071##
                   4462584781424184857##
                   Language.PureScript.TypeChecker.Entailment.$trModule
                   Language.PureScript.TypeChecker.Entailment.$tc'IsSymbolInstance2
                   0#
                   Language.PureScript.TypeChecker.Entailment.$tc'IsSymbolInstance1) -}
17879d0829ddd3f61dad079f445a599b
  $tc'IsSymbolInstance1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
dd7c1e7ecd54a4d917adad704e6824c5
  $tc'IsSymbolInstance2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.TypeChecker.Entailment.$tc'IsSymbolInstance3) -}
057b0d425547f65038995f02fc5d4547
  $tc'IsSymbolInstance3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IsSymbolInstance"#) -}
0abebaf09cb1e392b530bb5374d6bf5e
  $tc'Match :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   81922175212472254##
                   7505723887534336330##
                   Language.PureScript.TypeChecker.Entailment.$trModule
                   Language.PureScript.TypeChecker.Entailment.$tc'Match2
                   1#
                   Language.PureScript.TypeChecker.Entailment.$tc'Match1) -}
25848576c53634040a13d058b21a2238
  $tc'Match1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
f4c9ec7f8de8324f1538667dfff5995d
  $tc'Match2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.TypeChecker.Entailment.$tc'Match3) -}
d5dbe9f40a773fb61b747ed04896e7c7
  $tc'Match3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Match"#) -}
8f8c8d73c1cdd53a0eae8aab552b956c
  $tc'NamedInstance :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1567508329569485543##
                   14721325348556511053##
                   Language.PureScript.TypeChecker.Entailment.$trModule
                   Language.PureScript.TypeChecker.Entailment.$tc'NamedInstance2
                   0#
                   Language.PureScript.TypeChecker.Entailment.$tc'NamedInstance1) -}
5bb14487c31bd1898c412fb6b47fffc0
  $tc'NamedInstance1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
98ce80190426f1eb129ad92c97d924ef
  $tc'NamedInstance2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.TypeChecker.Entailment.$tc'NamedInstance3) -}
9265f782942572f02d936d446bbf371e
  $tc'NamedInstance3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'NamedInstance"#) -}
789095c7234eb23ca94ca898ae494cd5
  $tc'Solved :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5849506725637768030##
                   2743007693345032262##
                   Language.PureScript.TypeChecker.Entailment.$trModule
                   Language.PureScript.TypeChecker.Entailment.$tc'Solved2
                   1#
                   Language.PureScript.TypeChecker.Entailment.$tc'Solved1) -}
7863129064b7405d485c6553aba99799
  $tc'Solved1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
0be8b7828a646b75aca65954d45f991f
  $tc'Solved2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.TypeChecker.Entailment.$tc'Solved3) -}
6e0eb84d21474c079eabf1fe2ba07bd9
  $tc'Solved3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Solved"#) -}
ba6e1465d31775be00dfe8574a25df67
  $tc'SolverOptions :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14119146700221552161##
                   14320463941522838743##
                   Language.PureScript.TypeChecker.Entailment.$trModule
                   Language.PureScript.TypeChecker.Entailment.$tc'SolverOptions2
                   0#
                   Language.PureScript.TypeChecker.Entailment.$tc'SolverOptions1) -}
6dc9debbc84e1d4bdc0d5779f9a483da
  $tc'SolverOptions1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
28349c6c046c6d12b08406885bcf1ef3
  $tc'SolverOptions2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.TypeChecker.Entailment.$tc'SolverOptions3) -}
81164a7287e64ab17d4da06dc358f55a
  $tc'SolverOptions3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'SolverOptions"#) -}
3e601e058fd2a8a047d4b36fe224f9a8
  $tc'Unknown :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10443197576653107268##
                   16833919757520459067##
                   Language.PureScript.TypeChecker.Entailment.$trModule
                   Language.PureScript.TypeChecker.Entailment.$tc'Unknown1
                   1#
                   Language.PureScript.TypeChecker.Entailment.$tc'Apart1) -}
03bdeaad4e3cc071db63a3e75570214d
  $tc'Unknown1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.TypeChecker.Entailment.$tc'Unknown2) -}
408a9283282ef2c24b0b19ef5193bfd9
  $tc'Unknown2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Unknown"#) -}
6f34e67644ae6e0522ef17e75b47f73e
  $tc'Unsolved :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8819299365250245369##
                   677675159638214073##
                   Language.PureScript.TypeChecker.Entailment.$trModule
                   Language.PureScript.TypeChecker.Entailment.$tc'Unsolved2
                   1#
                   Language.PureScript.TypeChecker.Entailment.$tc'Unsolved1) -}
9197145e2e4d1b284775f19093d66ff9
  $tc'Unsolved1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
a57fa1a49a98a620eb18166c7f51dbc0
  $tc'Unsolved2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.TypeChecker.Entailment.$tc'Unsolved3) -}
8d26182c094e32e7c51055626165fa84
  $tc'Unsolved3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Unsolved"#) -}
c564590c48016c0560b127f159a56d6c
  $tc'WarnInstance :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17480873833427482635##
                   15092663847426601356##
                   Language.PureScript.TypeChecker.Entailment.$trModule
                   Language.PureScript.TypeChecker.Entailment.$tc'WarnInstance2
                   0#
                   Language.PureScript.TypeChecker.Entailment.$tc'WarnInstance1) -}
aa1dd578fe2a3bed69924f02f57deb47
  $tc'WarnInstance1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
57731cfb5e816ceb1ab0c52217e683ba
  $tc'WarnInstance2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.TypeChecker.Entailment.$tc'WarnInstance3) -}
3118f722618eb89a92df04caeb8da7bb
  $tc'WarnInstance3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'WarnInstance"#) -}
4d42ae107f5b70c39fc1a480e91df8f3
  $tcEntailsResult :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11422803204870387920##
                   5424107223209684943##
                   Language.PureScript.TypeChecker.Entailment.$trModule
                   Language.PureScript.TypeChecker.Entailment.$tcEntailsResult1
                   0#
                   GHC.Types.krep$*Arr*) -}
6753aed30527a4d426dad9272932ef0c
  $tcEntailsResult1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.TypeChecker.Entailment.$tcEntailsResult2) -}
59dff572a560da17e2924d8dee57aa32
  $tcEntailsResult2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("EntailsResult"#) -}
ad9784a6854f38473713a353b48a5230
  $tcEvidence :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13017076375446872100##
                   4151033936745412955##
                   Language.PureScript.TypeChecker.Entailment.$trModule
                   Language.PureScript.TypeChecker.Entailment.$tcEvidence1
                   0#
                   GHC.Types.krep$*) -}
7cb40f2d5d160fed0a48c37b77880db2
  $tcEvidence1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.TypeChecker.Entailment.$tcEvidence2) -}
2d94926cbda242ca2efaedf3052a982a
  $tcEvidence2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Evidence"#) -}
1fb186dc160f3359666441a3acdc48a2
  $tcMatched :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15442507043364170190##
                   13463694596181551963##
                   Language.PureScript.TypeChecker.Entailment.$trModule
                   Language.PureScript.TypeChecker.Entailment.$tcMatched1
                   0#
                   GHC.Types.krep$*Arr*) -}
f5ef0ab30c5d7b28ae4d2411bdc6ed47
  $tcMatched1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.TypeChecker.Entailment.$tcMatched2) -}
3de409d77602331ec7f90e57d96e6535
  $tcMatched2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Matched"#) -}
2d2960832606e1a4aa65971d7c5c4bd1
  $tcSolverOptions :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13314756598814316610##
                   13399906541042032312##
                   Language.PureScript.TypeChecker.Entailment.$trModule
                   Language.PureScript.TypeChecker.Entailment.$tcSolverOptions1
                   0#
                   GHC.Types.krep$*) -}
787c62b4da16fb02f966197f652c4751
  $tcSolverOptions1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.TypeChecker.Entailment.$tcSolverOptions2) -}
86545182f478bb548f1ba284e429342e
  $tcSolverOptions2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("SolverOptions"#) -}
dd31eefeab48c89ce8321e5a75d94061
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Language.PureScript.TypeChecker.Entailment.$trModule3
                   Language.PureScript.TypeChecker.Entailment.$trModule1) -}
9edfd737d45dd82ee9fe25a70488d6cb
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.TypeChecker.Entailment.$trModule2) -}
150cd371510544925a82a30587dc7dbb
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Language.PureScript.TypeChecker.Entailment"#) -}
56107ff5e92eb48fcb438407d23c8949
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.TypeChecker.Entailment.$trModule4) -}
fb87f7cc4062297d95a93e43de4aff9d
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"#) -}
b6530f1ee66309baf3896a9526dd5516
  $w$csconcat ::
    GHC.Base.Semigroup t =>
    Language.PureScript.TypeChecker.Entailment.Matched t
    -> [Language.PureScript.TypeChecker.Entailment.Matched t]
    -> Language.PureScript.TypeChecker.Entailment.Matched t
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A,A)><S,1*U><S,1*U>, Inline: [0],
     Unfolding: (\ @ t
                   (w :: GHC.Base.Semigroup t)
                   (ww :: Language.PureScript.TypeChecker.Entailment.Matched t)
                   (ww1 :: [Language.PureScript.TypeChecker.Entailment.Matched t]) ->
                 letrec {
                   go23 :: Language.PureScript.TypeChecker.Entailment.Matched t
                           -> [Language.PureScript.TypeChecker.Entailment.Matched t]
                           -> Language.PureScript.TypeChecker.Entailment.Matched t
                     {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
                   = \ (b :: Language.PureScript.TypeChecker.Entailment.Matched t)
                       (ds1 :: [Language.PureScript.TypeChecker.Entailment.Matched t]) ->
                     case ds1 of wild1 {
                       [] -> b
                       : c cs
                       -> Language.PureScript.TypeChecker.Entailment.$fMonoidMatched_$c<>
                            @ t
                            w
                            b
                            (go23 c cs) }
                 } in
                 go23 ww ww1) -}
6024e7d5ac37e4a597d281218326ead5
  $w$sgo1 ::
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Data.Map.Internal.Map
         (GHC.Base.Maybe Language.PureScript.Names.ModuleName) a1
    -> (# Data.Map.Internal.Map
            (GHC.Base.Maybe Language.PureScript.Names.ModuleName) a1,
          GHC.Base.Maybe a1,
          Data.Map.Internal.Map
            (GHC.Base.Maybe Language.PureScript.Names.ModuleName) a1 #)
  {- Arity: 2, Strictness: <S,1*U><S,1*U>, Inline: [0] -}
1c2ddab818e4b3af63d06c0872834758
  $w$sgo10 ::
    Data.Text.Internal.Text
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> a1
    -> Data.Map.Internal.Map Data.Text.Internal.Text a1
    -> Data.Map.Internal.Map Data.Text.Internal.Text a1
  {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><L,U><S,1*U>,
     Inline: [0] -}
797213f89b4d0edf271e1025182e8c14
  $w$sgo11 ::
    (a1 -> a1 -> a1)
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> a1
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName))
         a1
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName))
         a1
  {- Arity: 5,
     Strictness: <L,1*C1(C1(U))><L,U><L,U(U,U,U)><L,U><S,1*U>,
     Inline: [0] -}
a3cc8915dcad029060298ed630ad200a
  $w$sgo12 ::
    (a1 -> a1 -> a1)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> a1
    -> Data.Map.Internal.Map Data.Text.Internal.Text a1
    -> Data.Map.Internal.Map Data.Text.Internal.Text a1
  {- Arity: 6,
     Strictness: <L,1*C1(C1(U))><L,U><L,U><L,U><L,U><S,1*U>,
     Inline: [0] -}
7c79e1134c993250f5036e1bff9325ae
  $w$sgo13 ::
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName))
         a1
    -> (# Data.Map.Internal.Map
            (Language.PureScript.Names.Qualified
               (Language.PureScript.Names.ProperName
                  'Language.PureScript.Names.ClassName))
            a1,
          GHC.Base.Maybe a1,
          Data.Map.Internal.Map
            (Language.PureScript.Names.Qualified
               (Language.PureScript.Names.ProperName
                  'Language.PureScript.Names.ClassName))
            a1 #)
  {- Arity: 3, Strictness: <L,U><L,U(U,U,U)><S,1*U>, Inline: [0] -}
f59a8d55ba7ca2b183f820a7fefe4cda
  $w$sgo14 ::
    (a1 -> a1 -> a1)
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> a1
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName))
         a1
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName))
         a1
  {- Arity: 5,
     Strictness: <L,1*C1(C1(U))><L,U><L,U(U,U,U)><L,U><S,1*U>,
     Inline: [0] -}
f328afe4148c21c3f179b995e16cbaed
  $w$sgo15 ::
    (a1 -> a1 -> a1)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> a1
    -> Data.Map.Internal.Map Data.Text.Internal.Text a1
    -> Data.Map.Internal.Map Data.Text.Internal.Text a1
  {- Arity: 6,
     Strictness: <L,1*C1(C1(U))><L,U><L,U><L,U><L,U><S,1*U>,
     Inline: [0] -}
4cc4e497f27821e20f46ab576c52b867
  $w$sgo2 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Map.Internal.Map Data.Text.Internal.Text a1
    -> (# Data.Map.Internal.Map Data.Text.Internal.Text a1,
          GHC.Base.Maybe a1,
          Data.Map.Internal.Map Data.Text.Internal.Text a1 #)
  {- Arity: 4, Strictness: <L,U><L,U><L,U><S,1*U>, Inline: [0] -}
e1b0168b44c8fdc5cea30f8691acb8ad
  $w$sgo3 ::
    Language.PureScript.Names.Qualified Language.PureScript.Names.Ident
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.Ident
    -> a1
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            Language.PureScript.Names.Ident)
         a1
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            Language.PureScript.Names.Ident)
         a1
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,U><S,1*U>,
     Inline: [0] -}
abea5048ca92beb0d2473112dda9a136
  $w$sgo4 ::
    Data.Text.Internal.Text
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Set.Internal.Set Data.Text.Internal.Text
    -> Data.Set.Internal.Set Data.Text.Internal.Text
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,U><S,1*U>,
     Inline: [0] -}
c50693160122010246cef9726fcedb18
  $w$sgo5 ::
    GHC.Types.Int
    -> GHC.Prim.Int#
    -> Data.Set.Internal.Set GHC.Types.Int
    -> Data.Set.Internal.Set GHC.Types.Int
  {- Arity: 3, Strictness: <L,U><L,U><S,1*U>, Inline: [0] -}
d96b2fce4f4e37caf1e73d6da5500571
  $w$sgo6 ::
    Data.Text.Internal.Text
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> a1
    -> Data.Map.Internal.Map Data.Text.Internal.Text a1
    -> Data.Map.Internal.Map Data.Text.Internal.Text a1
  {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><L,U><S,1*U>,
     Inline: [0] -}
fc79526400b337dff6be06f399906112
  $w$sgo7 ::
    Language.PureScript.Names.Qualified Language.PureScript.Names.Ident
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.Ident
    -> a1
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            Language.PureScript.Names.Ident)
         a1
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            Language.PureScript.Names.Ident)
         a1
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,U><S,1*U>,
     Inline: [0] -}
046347cdb9cad0ff30676b926789e31a
  $w$sgo8 ::
    Data.Text.Internal.Text
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Set.Internal.Set Data.Text.Internal.Text
    -> Data.Set.Internal.Set Data.Text.Internal.Text
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,U><S,1*U>,
     Inline: [0] -}
01d87b7d2625b49674c358ff9585dd0e
  $w$sgo9 ::
    GHC.Types.Int
    -> GHC.Prim.Int#
    -> Data.Set.Internal.Set GHC.Types.Int
    -> Data.Set.Internal.Set GHC.Types.Int
  {- Arity: 3, Strictness: <L,U><L,U><S,1*U>, Inline: [0] -}
441539331c8082ba3ef9b4488d68e810
  $wgo3 ::
    GHC.Prim.Int#
    -> Data.Set.Internal.Set GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>, Inline: [0] -}
fbd7f0eb0a0d543e7b4c3c45aa096fcc
  $wnewDictionaries ::
    Control.Monad.State.Class.MonadState
      Language.PureScript.TypeChecker.Monad.CheckState m =>
    [(Language.PureScript.Names.Qualified
        (Language.PureScript.Names.ProperName
           'Language.PureScript.Names.ClassName),
      GHC.Integer.Type.Integer)]
    -> Language.PureScript.Names.Qualified
         Language.PureScript.Names.Ident
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
    -> [Language.PureScript.Types.Type]
    -> m [Language.PureScript.TypeClassDictionaries.NamedDict]
  {- Arity: 5,
     Strictness: <S(S(LC(C(S))LLL)LLL),U(U(U(U(C(C1(U)),A),C(U),A,C(C1(C1(U))),A,A),C(C1(U)),A,C(U),A),U,A,A)><L,U><L,U><L,U(U,U(U,U,U))><L,U>,
     Inline: [0] -}
aae71ce8aac6b4fb442d843dbf4cb8cb
  $wpoly_go13 ::
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName))
         a
    -> GHC.Base.Maybe a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U><L,1*U(U,U,U)><S,1*U>, Inline: [0] -}
78965820e91bb4e7db858690d686df02
  data EntailsResult a
    = Solved a Language.PureScript.TypeChecker.Entailment.TypeClassDict
    | Unsolved Language.PureScript.Types.Constraint
    | Deferred
856569fc3a488d9f7628dce5a272000a
  data Evidence
    = NamedInstance (Language.PureScript.Names.Qualified
                       Language.PureScript.Names.Ident)
    | WarnInstance Language.PureScript.Types.Type
    | IsSymbolInstance Language.PureScript.PSString.PSString
    | EmptyClassInstance
772fb157afb03c9650f31f199333ba1b
  type InstanceContext =
    Data.Map.Internal.Map
      (GHC.Base.Maybe Language.PureScript.Names.ModuleName)
      (Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName))
         (Data.Map.Internal.Map
            (Language.PureScript.Names.Qualified
               Language.PureScript.Names.Ident)
            Language.PureScript.TypeClassDictionaries.NamedDict))
b6530f1ee66309baf3896a9526dd5516
  data Matched t = Match t | Apart | Unknown
01f796745318fb4b420853cb599b317d
  type Matching a = Data.Map.Internal.Map Data.Text.Internal.Text a
703525f42f7a430a406f959ec858e06b
  data SolverOptions
    = SolverOptions {solverShouldGeneralize :: GHC.Types.Bool,
                     solverDeferErrors :: GHC.Types.Bool}
e59f04add07d9cf1e147515101e68563
  type TypeClassDict =
    Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
      Language.PureScript.TypeChecker.Entailment.Evidence
87ac940646bf8506d5a2b1a3dc57f4b9
  entails ::
    (Control.Monad.State.Class.MonadState
       Language.PureScript.TypeChecker.Monad.CheckState m,
     Control.Monad.Error.Class.MonadError
       Language.PureScript.Errors.MultipleErrors m,
     Control.Monad.Writer.Class.MonadWriter
       Language.PureScript.Errors.MultipleErrors m,
     Control.Monad.Supply.Class.MonadSupply m) =>
    Language.PureScript.TypeChecker.Entailment.SolverOptions
    -> Language.PureScript.Types.Constraint
    -> Language.PureScript.TypeChecker.Entailment.InstanceContext
    -> [Language.PureScript.AST.Declarations.ErrorMessageHint]
    -> Control.Monad.Trans.Writer.Lazy.WriterT
         (Data.Semigroup.Internal.Any,
          [(Language.PureScript.Names.Ident,
            Language.PureScript.TypeChecker.Entailment.InstanceContext,
            Language.PureScript.Types.Constraint)])
         (Control.Monad.Trans.State.Lazy.StateT
            Language.PureScript.TypeChecker.Entailment.InstanceContext m)
         Language.PureScript.AST.Declarations.Expr
  {- Arity: 4,
     Strictness: <L,U(U(U(U(C(C1(U)),A),C(U),A,C(C1(C1(U))),C(C1(U)),A),C(C1(U)),C(C1(U)),C(U),A),U,A,C(U))><L,U(U(U(U(C(C1(U)),C(C1(U))),C(U),C(C1(U)),C(C1(C1(U))),C(C1(U)),A),C(C1(U)),C(C1(U)),C(U),A),C(U),C(C1(U)))><L,U(A,A,A,C(U),A,A)><L,U(U(1*U(1*U(C(C1(U)),A),A,A,A,A,A),C(C1(U)),A,C(U),A),U,A)> -}
a1e58c030d64eb9119dc7392a750dd7f
  newDictionaries ::
    Control.Monad.State.Class.MonadState
      Language.PureScript.TypeChecker.Monad.CheckState m =>
    [(Language.PureScript.Names.Qualified
        (Language.PureScript.Names.ProperName
           'Language.PureScript.Names.ClassName),
      GHC.Integer.Type.Integer)]
    -> Language.PureScript.Names.Qualified
         Language.PureScript.Names.Ident
    -> Language.PureScript.Types.Constraint
    -> m [Language.PureScript.TypeClassDictionaries.NamedDict]
  {- Arity: 4,
     Strictness: <S(S(LC(C(S))LLL)LLL),U(U(U(U(C(C1(U)),A),C(U),A,C(C1(C1(U))),A,A),C(C1(U)),A,C(U),A),U,A,A)><L,U><L,U><S,1*U(U(U,U(U,U,U)),U,A)>,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ @ m :: * -> *
                   (w :: Control.Monad.State.Class.MonadState
                           Language.PureScript.TypeChecker.Monad.CheckState m)
                   (w1 :: [(Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.ClassName),
                            GHC.Integer.Type.Integer)])
                   (w2 :: Language.PureScript.Names.Qualified
                            Language.PureScript.Names.Ident)
                   (w3 :: Language.PureScript.Types.Constraint) ->
                 case w3 of ww { Language.PureScript.Types.Constraint ww1 ww2 ww3 ->
                 Language.PureScript.TypeChecker.Entailment.$wnewDictionaries
                   @ m
                   w
                   w1
                   w2
                   ww1
                   ww2 }) -}
f9df72a17332b37a407ba207b48420ad
  replaceTypeClassDictionaries ::
    (Control.Monad.State.Class.MonadState
       Language.PureScript.TypeChecker.Monad.CheckState m,
     Control.Monad.Error.Class.MonadError
       Language.PureScript.Errors.MultipleErrors m,
     Control.Monad.Writer.Class.MonadWriter
       Language.PureScript.Errors.MultipleErrors m,
     Control.Monad.Supply.Class.MonadSupply m) =>
    GHC.Types.Bool
    -> Language.PureScript.AST.Declarations.Expr
    -> m (Language.PureScript.AST.Declarations.Expr,
          [(Language.PureScript.Names.Ident,
            Language.PureScript.TypeChecker.Entailment.InstanceContext,
            Language.PureScript.Types.Constraint)])
  {- Arity: 6,
     Strictness: <S(S(LC(C(S))LLL)LLL),U(U(U(U(C(C1(U)),A),C(U),A,C(C1(C1(U))),C(C1(U)),A),C(C1(U)),C(C1(U)),C(U),C(U)),U,A,C(U))><L,U(U(U(U(C(C1(U)),C(C1(U))),C(U),C(C1(U)),C(C1(C1(U))),C(C1(U)),A),C(C1(U)),C(C1(U)),C(U),A),C(U),C(C1(U)))><L,U(A,A,A,C(U),A,A)><L,U(U(U(U(C(C1(U)),A),A,A,A,A,A),C(C1(U)),A,C(U),A),U,A)><L,U><L,U> -}
703525f42f7a430a406f959ec858e06b
  solverDeferErrors ::
    Language.PureScript.TypeChecker.Entailment.SolverOptions
    -> GHC.Types.Bool
  RecSel Left Language.PureScript.TypeChecker.Entailment.SolverOptions
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.TypeChecker.Entailment.SolverOptions) ->
                 case ds of wild { Language.PureScript.TypeChecker.Entailment.SolverOptions ds1 ds2 ->
                 ds2 }) -}
703525f42f7a430a406f959ec858e06b
  solverShouldGeneralize ::
    Language.PureScript.TypeChecker.Entailment.SolverOptions
    -> GHC.Types.Bool
  RecSel Left Language.PureScript.TypeChecker.Entailment.SolverOptions
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.TypeChecker.Entailment.SolverOptions) ->
                 case ds of wild { Language.PureScript.TypeChecker.Entailment.SolverOptions ds1 ds2 ->
                 ds1 }) -}
instance GHC.Classes.Eq [Language.PureScript.TypeChecker.Entailment.Evidence]
  = Language.PureScript.TypeChecker.Entailment.$fEqEvidence
instance GHC.Classes.Eq [Language.PureScript.TypeChecker.Entailment.Matched]
  = Language.PureScript.TypeChecker.Entailment.$fEqMatched
instance GHC.Base.Functor [Language.PureScript.TypeChecker.Entailment.Matched]
  = Language.PureScript.TypeChecker.Entailment.$fFunctorMatched
instance GHC.Base.Monoid [Language.PureScript.TypeChecker.Entailment.Matched]
  = Language.PureScript.TypeChecker.Entailment.$fMonoidMatched
instance GHC.Base.Semigroup [Language.PureScript.TypeChecker.Entailment.Matched]
  = Language.PureScript.TypeChecker.Entailment.$fSemigroupMatched
instance GHC.Show.Show [Language.PureScript.TypeChecker.Entailment.EntailsResult]
  = Language.PureScript.TypeChecker.Entailment.$fShowEntailsResult
instance GHC.Show.Show [Language.PureScript.TypeChecker.Entailment.Evidence]
  = Language.PureScript.TypeChecker.Entailment.$fShowEvidence
instance GHC.Show.Show [Language.PureScript.TypeChecker.Entailment.Matched]
  = Language.PureScript.TypeChecker.Entailment.$fShowMatched
"SC:$sgo130" forall @ a2
                    (sc :: Data.Map.Internal.Map
                             (GHC.Base.Maybe Language.PureScript.Names.ModuleName) a2)
                    (sc1 :: a2)
                    (sc2 :: Language.PureScript.Names.ModuleName)
                    (sc3 :: a2 -> a2 -> a2)
  Language.PureScript.TypeChecker.Entailment.$sinsertWithR_$sgo13 @ a2
                                                                  sc3
                                                                  (GHC.Base.Just
                                                                     @ Language.PureScript.Names.ModuleName
                                                                     sc2)
                                                                  sc1
                                                                  sc
  = Language.PureScript.TypeChecker.Entailment.$sinsertWithR_$s$sgo13
      @ a2
      sc
      sc1
      sc2
      sc3
"SC:$sgo130" forall @ a
                    (sc :: GHC.Prim.Int#)
                    (sc1 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                    (sc2 :: a)
                    (sc3 :: Data.Map.Internal.Map
                              (GHC.Base.Maybe Language.PureScript.Names.ModuleName) a)
                    (sc4 :: Data.Map.Internal.Map
                              (GHC.Base.Maybe Language.PureScript.Names.ModuleName) a)
                    (sc5 :: a)
                    (sc6 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                    (sc7 :: a -> a -> a)
  Language.PureScript.TypeChecker.Entailment.$sinsertWith_$sgo13 @ a
                                                                 sc7
                                                                 sc6
                                                                 sc5
                                                                 (Data.Map.Internal.Bin
                                                                    @ (GHC.Base.Maybe
                                                                         Language.PureScript.Names.ModuleName)
                                                                    @ a
                                                                    sc
                                                                    sc1
                                                                    sc2
                                                                    sc3
                                                                    sc4)
  = Language.PureScript.TypeChecker.Entailment.$sinsertWith_$s$sgo13
      @ a
      sc
      sc1
      sc2
      sc3
      sc4
      sc5
      sc6
      sc7
"SC:$sgo131" forall @ a
                    (sc :: Data.Map.Internal.Map
                             (GHC.Base.Maybe Language.PureScript.Names.ModuleName) a)
                    (sc1 :: a)
                    (sc2 :: Language.PureScript.Names.ModuleName)
                    (sc3 :: a -> a -> a)
  Language.PureScript.TypeChecker.Entailment.$sinsertWith_$sgo13 @ a
                                                                 sc3
                                                                 (GHC.Base.Just
                                                                    @ Language.PureScript.Names.ModuleName
                                                                    sc2)
                                                                 sc1
                                                                 sc
  = Language.PureScript.TypeChecker.Entailment.$sinsertWith_$s$sgo1
      @ a
      sc
      sc1
      sc2
      sc3
"SC:$w$sgo130" [0] forall @ a
                          (sc :: GHC.Prim.Int#)
                          (sc1 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                          (sc2 :: Language.PureScript.Names.ProperName
                                    'Language.PureScript.Names.ClassName)
                          (sc3 :: a)
                          (sc4 :: Data.Map.Internal.Map
                                    (Language.PureScript.Names.Qualified
                                       (Language.PureScript.Names.ProperName
                                          'Language.PureScript.Names.ClassName))
                                    a)
                          (sc5 :: Data.Map.Internal.Map
                                    (Language.PureScript.Names.Qualified
                                       (Language.PureScript.Names.ProperName
                                          'Language.PureScript.Names.ClassName))
                                    a)
                          (sc6 :: a)
                          (sc7 :: Language.PureScript.Names.ProperName
                                    'Language.PureScript.Names.ClassName)
                          (sc8 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                          (sc9 :: a -> a -> a)
  Language.PureScript.TypeChecker.Entailment.$w$sgo11 @ a
                                                      sc9
                                                      sc8
                                                      sc7
                                                      sc6
                                                      (Data.Map.Internal.Bin
                                                         @ (Language.PureScript.Names.Qualified
                                                              (Language.PureScript.Names.ProperName
                                                                 'Language.PureScript.Names.ClassName))
                                                         @ a
                                                         sc
                                                         (Language.PureScript.Names.Qualified
                                                            @ (Language.PureScript.Names.ProperName
                                                                 'Language.PureScript.Names.ClassName)
                                                            sc1
                                                            sc2)
                                                         sc3
                                                         sc4
                                                         sc5)
  = Language.PureScript.TypeChecker.Entailment.$sinsertWith_$s$w$sgo13
      @ a
      sc
      sc1
      sc2
      sc3
      sc4
      sc5
      sc6
      sc7
      sc8
      sc9
"SC:$w$sgo130" [0] forall @ a
                          (sc :: GHC.Prim.Int#)
                          (sc1 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                          (sc2 :: Language.PureScript.Names.Ident)
                          (sc3 :: a)
                          (sc4 :: Data.Map.Internal.Map
                                    (Language.PureScript.Names.Qualified
                                       Language.PureScript.Names.Ident)
                                    a)
                          (sc5 :: Data.Map.Internal.Map
                                    (Language.PureScript.Names.Qualified
                                       Language.PureScript.Names.Ident)
                                    a)
                          (sc6 :: a)
                          (sc7 :: Language.PureScript.Names.Ident)
                          (sc8 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                          (sc9 :: Language.PureScript.Names.Qualified
                                    Language.PureScript.Names.Ident)
  Language.PureScript.TypeChecker.Entailment.$w$sgo3 @ a
                                                     sc9
                                                     sc8
                                                     sc7
                                                     sc6
                                                     (Data.Map.Internal.Bin
                                                        @ (Language.PureScript.Names.Qualified
                                                             Language.PureScript.Names.Ident)
                                                        @ a
                                                        sc
                                                        (Language.PureScript.Names.Qualified
                                                           @ Language.PureScript.Names.Ident
                                                           sc1
                                                           sc2)
                                                        sc3
                                                        sc4
                                                        sc5)
  = Language.PureScript.TypeChecker.Entailment.$sinsert_$s$w$sgo13
      @ a
      sc
      sc1
      sc2
      sc3
      sc4
      sc5
      sc6
      sc7
      sc8
      sc9
"SC:$w$sgo130" [0] forall @ a
                          (sc :: GHC.Prim.Int#)
                          (sc1 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                          (sc2 :: Language.PureScript.Names.ProperName
                                    'Language.PureScript.Names.ClassName)
                          (sc3 :: a)
                          (sc4 :: Data.Map.Internal.Map
                                    (Language.PureScript.Names.Qualified
                                       (Language.PureScript.Names.ProperName
                                          'Language.PureScript.Names.ClassName))
                                    a)
                          (sc5 :: Data.Map.Internal.Map
                                    (Language.PureScript.Names.Qualified
                                       (Language.PureScript.Names.ProperName
                                          'Language.PureScript.Names.ClassName))
                                    a)
                          (sc6 :: Language.PureScript.Names.ProperName
                                    'Language.PureScript.Names.ClassName)
                          (sc7 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
  Language.PureScript.TypeChecker.Entailment.$w$sgo13 @ a
                                                      sc7
                                                      sc6
                                                      (Data.Map.Internal.Bin
                                                         @ (Language.PureScript.Names.Qualified
                                                              (Language.PureScript.Names.ProperName
                                                                 'Language.PureScript.Names.ClassName))
                                                         @ a
                                                         sc
                                                         (Language.PureScript.Names.Qualified
                                                            @ (Language.PureScript.Names.ProperName
                                                                 'Language.PureScript.Names.ClassName)
                                                            sc1
                                                            sc2)
                                                         sc3
                                                         sc4
                                                         sc5)
  = Language.PureScript.TypeChecker.Entailment.$s$wsplitLookup_$s$w$sgo13
      @ a
      sc
      sc1
      sc2
      sc3
      sc4
      sc5
      sc6
      sc7
"SC:$w$sgo130" [0] forall @ a
                          (sc :: GHC.Prim.Int#)
                          (sc1 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                          (sc2 :: a)
                          (sc3 :: Data.Map.Internal.Map
                                    (GHC.Base.Maybe Language.PureScript.Names.ModuleName) a)
                          (sc4 :: Data.Map.Internal.Map
                                    (GHC.Base.Maybe Language.PureScript.Names.ModuleName) a)
                          (sc5 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
  Language.PureScript.TypeChecker.Entailment.$w$sgo1 @ a
                                                     sc5
                                                     (Data.Map.Internal.Bin
                                                        @ (GHC.Base.Maybe
                                                             Language.PureScript.Names.ModuleName)
                                                        @ a
                                                        sc
                                                        sc1
                                                        sc2
                                                        sc3
                                                        sc4)
  = Language.PureScript.TypeChecker.Entailment.$s$wsplitLookup_$s$w$sgo1
      @ a
      sc
      sc1
      sc2
      sc3
      sc4
      sc5
"SC:$w$sgo130" [0] forall @ a
                          (sc :: GHC.Prim.Int#)
                          (sc1 :: GHC.Prim.ByteArray#)
                          (sc2 :: GHC.Prim.Int#)
                          (sc3 :: GHC.Prim.Int#)
                          (sc4 :: a)
                          (sc5 :: Data.Map.Internal.Map Data.Text.Internal.Text a)
                          (sc6 :: Data.Map.Internal.Map Data.Text.Internal.Text a)
                          (sc7 :: GHC.Prim.Int#)
                          (sc8 :: GHC.Prim.Int#)
                          (sc9 :: GHC.Prim.ByteArray#)
  Language.PureScript.TypeChecker.Entailment.$w$sgo2 @ a
                                                     sc9
                                                     sc8
                                                     sc7
                                                     (Data.Map.Internal.Bin
                                                        @ Data.Text.Internal.Text
                                                        @ a
                                                        sc
                                                        (Data.Text.Internal.Text sc1 sc2 sc3)
                                                        sc4
                                                        sc5
                                                        sc6)
  = Language.PureScript.TypeChecker.Entailment.$s$wsplitLookup_$s$w$sgo3
      @ a
      sc
      sc1
      sc2
      sc3
      sc4
      sc5
      sc6
      sc7
      sc8
      sc9
"SC:$w$sgo131" [0] forall @ a
                          (sc :: Data.Map.Internal.Map
                                   (GHC.Base.Maybe Language.PureScript.Names.ModuleName) a)
                          (sc1 :: Language.PureScript.Names.ModuleName)
  Language.PureScript.TypeChecker.Entailment.$w$sgo1 @ a
                                                     (GHC.Base.Just
                                                        @ Language.PureScript.Names.ModuleName
                                                        sc1)
                                                     sc
  = Language.PureScript.TypeChecker.Entailment.$s$wsplitLookup_$s$w$sgo2
      @ a
      sc
      sc1
"SC:$w$sgo30" [0] forall (sc :: GHC.Prim.Int#)
                         (sc1 :: GHC.Prim.ByteArray#)
                         (sc2 :: GHC.Prim.Int#)
                         (sc3 :: GHC.Prim.Int#)
                         (sc4 :: Data.Set.Internal.Set Data.Text.Internal.Text)
                         (sc5 :: Data.Set.Internal.Set Data.Text.Internal.Text)
                         (sc6 :: GHC.Prim.Int#)
                         (sc7 :: GHC.Prim.Int#)
                         (sc8 :: GHC.Prim.ByteArray#)
                         (sc9 :: Data.Text.Internal.Text)
  Language.PureScript.TypeChecker.Entailment.$w$sgo4 sc9
                                                     sc8
                                                     sc7
                                                     sc6
                                                     (Data.Set.Internal.Bin
                                                        @ Data.Text.Internal.Text
                                                        sc
                                                        (Data.Text.Internal.Text sc1 sc2 sc3)
                                                        sc4
                                                        sc5)
  = Language.PureScript.TypeChecker.Entailment.$sinsert_$s$w$sgo3
      sc
      sc1
      sc2
      sc3
      sc4
      sc5
      sc6
      sc7
      sc8
      sc9
"SC:$w$sgo30" [0] forall (sc :: GHC.Prim.Int#)
                         (sc1 :: GHC.Prim.Int#)
                         (sc2 :: Data.Set.Internal.Set GHC.Types.Int)
                         (sc3 :: Data.Set.Internal.Set GHC.Types.Int)
                         (sc4 :: GHC.Prim.Int#)
                         (sc5 :: GHC.Types.Int)
  Language.PureScript.TypeChecker.Entailment.$w$sgo5 sc5
                                                     sc4
                                                     (Data.Set.Internal.Bin
                                                        @ GHC.Types.Int
                                                        sc
                                                        (GHC.Types.I# sc1)
                                                        sc2
                                                        sc3)
  = Language.PureScript.TypeChecker.Entailment.$sinsert_$s$w$sgo1
      sc
      sc1
      sc2
      sc3
      sc4
      sc5
"SC:$wpoly_go130" [0] forall (sc :: Data.Map.Internal.Map
                                      (Language.PureScript.Names.Qualified
                                         (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.ClassName))
                                      (Data.Map.Internal.Map
                                         (Language.PureScript.Names.Qualified
                                            Language.PureScript.Names.Ident)
                                         (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
                                            (Language.PureScript.Names.Qualified
                                               Language.PureScript.Names.Ident))))
                             (sc1 :: Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.ClassName)
                             (sc2 :: Language.PureScript.Names.ModuleName)
  Language.PureScript.TypeChecker.Entailment.$wpoly_go13 @ (Data.Map.Internal.Map
                                                              (Language.PureScript.Names.Qualified
                                                                 Language.PureScript.Names.Ident)
                                                              Language.PureScript.TypeClassDictionaries.NamedDict)
                                                         (GHC.Base.Just
                                                            @ Language.PureScript.Names.ModuleName
                                                            sc2)
                                                         sc1
                                                         sc
  = Language.PureScript.TypeChecker.Entailment.$slookup_$s$wpoly_go13
      sc
      sc1
      sc2
"SC:$wpoly_go131" [0] forall @ a
                             (sc :: Data.Map.Internal.Map
                                      (Language.PureScript.Names.Qualified
                                         (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.ClassName))
                                      a)
                             (sc1 :: Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.ClassName)
  Language.PureScript.TypeChecker.Entailment.$wpoly_go13 @ a
                                                         (GHC.Base.Nothing
                                                            @ Language.PureScript.Names.ModuleName)
                                                         sc1
                                                         sc
  = Language.PureScript.TypeChecker.Entailment.$slookup_$s$wpoly_go2
      @ a
      sc
      sc1
"SC:$wpoly_go132" [0] forall (sc :: Data.Map.Internal.Map
                                      (Language.PureScript.Names.Qualified
                                         (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.ClassName))
                                      (Data.Map.Internal.Map
                                         (Language.PureScript.Names.Qualified
                                            Language.PureScript.Names.Ident)
                                         (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
                                            (Language.PureScript.Names.Qualified
                                               Language.PureScript.Names.Ident))))
                             (sc1 :: GHC.Prim.ByteArray#)
                             (sc2 :: GHC.Prim.Int#)
                             (sc3 :: GHC.Prim.Int#)
                             (sg :: (Data.Text.Internal.Text :: *)
                                    ~R# (Language.PureScript.Names.ProperName
                                           'Language.PureScript.Names.ClassName :: *))
                             (sc4 :: Language.PureScript.Names.ModuleName)
  Language.PureScript.TypeChecker.Entailment.$wpoly_go13 @ (Data.Map.Internal.Map
                                                              (Language.PureScript.Names.Qualified
                                                                 Language.PureScript.Names.Ident)
                                                              Language.PureScript.TypeClassDictionaries.NamedDict)
                                                         (GHC.Base.Just
                                                            @ Language.PureScript.Names.ModuleName
                                                            sc4)
                                                         (Data.Text.Internal.Text sc1 sc2 sc3)
                                                           `cast`
                                                         sg
                                                         sc
  = Language.PureScript.TypeChecker.Entailment.$slookup_$s$wpoly_go1
      sc
      sc1
      sc2
      sc3
      @~ sg
      sc4
"SC:poly_go130" forall (sc :: Data.Map.Internal.Map
                                (GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                                (Data.Map.Internal.Map
                                   (Language.PureScript.Names.Qualified
                                      (Language.PureScript.Names.ProperName
                                         'Language.PureScript.Names.ClassName))
                                   (Data.Map.Internal.Map
                                      (Language.PureScript.Names.Qualified
                                         Language.PureScript.Names.Ident)
                                      (Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
                                         (Language.PureScript.Names.Qualified
                                            Language.PureScript.Names.Ident)))))
  Language.PureScript.TypeChecker.Entailment.$slookup1 @ (Data.Map.Internal.Map
                                                            (Language.PureScript.Names.Qualified
                                                               (Language.PureScript.Names.ProperName
                                                                  'Language.PureScript.Names.ClassName))
                                                            (Data.Map.Internal.Map
                                                               (Language.PureScript.Names.Qualified
                                                                  Language.PureScript.Names.Ident)
                                                               Language.PureScript.TypeClassDictionaries.NamedDict))
                                                       (GHC.Base.Nothing
                                                          @ Language.PureScript.Names.ModuleName)
                                                       sc
  = Language.PureScript.TypeChecker.Entailment.$slookup_$spoly_go13
      sc
"SC:poly_go131" forall @ a
                       (sc :: Data.Map.Internal.Map
                                (GHC.Base.Maybe Language.PureScript.Names.ModuleName) a)
                       (sc1 :: Language.PureScript.Names.ModuleName)
  Language.PureScript.TypeChecker.Entailment.$slookup1 @ a
                                                       (GHC.Base.Just
                                                          @ Language.PureScript.Names.ModuleName
                                                          sc1)
                                                       sc
  = Language.PureScript.TypeChecker.Entailment.$slookup_$spoly_go1
      @ a
      sc
      sc1
"SPEC $cmempty @ ()" forall ($dMonoid :: GHC.Base.Monoid ())
  Language.PureScript.TypeChecker.Entailment.$fMonoidMatched_$cmempty @ ()
                                                                      $dMonoid
  = Language.PureScript.TypeChecker.Entailment.$fMonoidMatched1
"SPEC/Language.PureScript.TypeChecker.Entailment $fEqMaybe @ ModuleName" [orphan] forall (v :: GHC.Classes.Eq
                                                                                                 Language.PureScript.Names.ModuleName)
  GHC.Base.$fEqMaybe @ Language.PureScript.Names.ModuleName v
  = Language.PureScript.TypeChecker.Entailment.$s$fEqMaybe
"SPEC/Language.PureScript.TypeChecker.Entailment $fEqMaybe_$c/= @ ModuleName" [orphan] forall ($dEq :: GHC.Classes.Eq
                                                                                                         Language.PureScript.Names.ModuleName)
  GHC.Base.$fEqMaybe_$c/= @ Language.PureScript.Names.ModuleName $dEq
  = Language.PureScript.TypeChecker.Entailment.$s$fEqMaybe_$s$fEqMaybe_$c/=
"SPEC/Language.PureScript.TypeChecker.Entailment $fEqMaybe_$c== @ ModuleName" [orphan] forall ($dEq :: GHC.Classes.Eq
                                                                                                         Language.PureScript.Names.ModuleName)
  GHC.Base.$fEqMaybe_$c== @ Language.PureScript.Names.ModuleName $dEq
  = Language.PureScript.TypeChecker.Entailment.$s$fEqMaybe_$c==
"SPEC/Language.PureScript.TypeChecker.Entailment $fEqQualified @ Ident" [orphan] forall (v :: GHC.Classes.Eq
                                                                                                Language.PureScript.Names.Ident)
  Language.PureScript.Names.$fEqQualified @ Language.PureScript.Names.Ident
                                          v
  = Language.PureScript.TypeChecker.Entailment.$s$fEqQualified1
"SPEC/Language.PureScript.TypeChecker.Entailment $fEqQualified_$c/= @ Ident" [orphan] forall ($dEq :: GHC.Classes.Eq
                                                                                                        Language.PureScript.Names.Ident)
  Language.PureScript.Names.$fEqQualified_$c/= @ Language.PureScript.Names.Ident
                                               $dEq
  = Language.PureScript.TypeChecker.Entailment.$s$fEqQualified_$s$fEqQualified_$c/=1
"SPEC/Language.PureScript.TypeChecker.Entailment $fMonoid(,) @ Any @ [(Ident,
                                                                      InstanceContext, Constraint)]" [orphan] forall (v1 :: GHC.Base.Monoid
                                                                                                                                                                                                            [(Language.PureScript.Names.Ident,
                                                                                                                                                                                                              Language.PureScript.TypeChecker.Entailment.InstanceContext,
                                                                                                                                                                                                              Language.PureScript.Types.Constraint)])
                                                                                                                                                                                                   (v :: GHC.Base.Monoid
                                                                                                                                                                                                           Data.Semigroup.Internal.Any)
  GHC.Base.$fMonoid(,) @ Data.Semigroup.Internal.Any
                       @ [(Language.PureScript.Names.Ident,
                           Language.PureScript.TypeChecker.Entailment.InstanceContext,
                           Language.PureScript.Types.Constraint)]
                       v
                       v1
  = Language.PureScript.TypeChecker.Entailment.$s$fMonoid(,)
"SPEC/Language.PureScript.TypeChecker.Entailment $fOrdMaybe @ ModuleName" [orphan] forall (v :: GHC.Classes.Ord
                                                                                                  Language.PureScript.Names.ModuleName)
  GHC.Base.$fOrdMaybe @ Language.PureScript.Names.ModuleName v
  = Language.PureScript.TypeChecker.Entailment.$s$fOrdMaybe
"SPEC/Language.PureScript.TypeChecker.Entailment $fOrdQualified @ Ident" [orphan] forall (v :: GHC.Classes.Ord
                                                                                                 Language.PureScript.Names.Ident)
  Language.PureScript.Names.$fOrdQualified @ Language.PureScript.Names.Ident
                                           v
  = Language.PureScript.TypeChecker.Entailment.$s$fOrd(,)_$ccompare_$s$fOrdQualified
"SPEC/Language.PureScript.TypeChecker.Entailment $fSemigroup(,) @ Any @ [(Ident,
                                                                         InstanceContext,
                                                                         Constraint)]" [orphan] forall (v1 :: GHC.Base.Semigroup
                                                                                                                                                                                                                                                                                           [(Language.PureScript.Names.Ident,
                                                                                                                                                                                                                                                                                             Language.PureScript.TypeChecker.Entailment.InstanceContext,
                                                                                                                                                                                                                                                                                             Language.PureScript.Types.Constraint)])
                                                                                                                                                                                                                                                                                  (v :: GHC.Base.Semigroup
                                                                                                                                                                                                                                                                                          Data.Semigroup.Internal.Any)
  GHC.Base.$fSemigroup(,) @ Data.Semigroup.Internal.Any
                          @ [(Language.PureScript.Names.Ident,
                              Language.PureScript.TypeChecker.Entailment.InstanceContext,
                              Language.PureScript.Types.Constraint)]
                          v
                          v1
  = Language.PureScript.TypeChecker.Entailment.$s$fMonoid(,)_$s$fSemigroup(,)
"SPEC/Language.PureScript.TypeChecker.Entailment $fSemigroup(,)_$csconcat @ Any @ [(Ident,
                                                                                   InstanceContext,
                                                                                   Constraint)]" [orphan] [0] forall (w1 :: GHC.Base.Semigroup
                                                                                                                                                                                                                                                                                                                             [(Language.PureScript.Names.Ident,
                                                                                                                                                                                                                                                                                                                               Language.PureScript.TypeChecker.Entailment.InstanceContext,
                                                                                                                                                                                                                                                                                                                               Language.PureScript.Types.Constraint)])
                                                                                                                                                                                                                                                                                                                    (w :: GHC.Base.Semigroup
                                                                                                                                                                                                                                                                                                                            Data.Semigroup.Internal.Any)
  GHC.Base.$fSemigroup(,)_$csconcat @ Data.Semigroup.Internal.Any
                                    @ [(Language.PureScript.Names.Ident,
                                        Language.PureScript.TypeChecker.Entailment.InstanceContext,
                                        Language.PureScript.Types.Constraint)]
                                    w
                                    w1
  = Language.PureScript.TypeChecker.Entailment.$s$fSemigroup(,)_$csconcat
"SPEC/Language.PureScript.TypeChecker.Entailment $fSemigroup(,)_$cstimes @ Any @ [(Ident,
                                                                                  InstanceContext,
                                                                                  Constraint)]" [orphan] forall ($dSemigroup1 :: GHC.Base.Semigroup
                                                                                                                                                                                                                                                                                                                                [(Language.PureScript.Names.Ident,
                                                                                                                                                                                                                                                                                                                                  Language.PureScript.TypeChecker.Entailment.InstanceContext,
                                                                                                                                                                                                                                                                                                                                  Language.PureScript.Types.Constraint)])
                                                                                                                                                                                                                                                                                                             ($dSemigroup :: GHC.Base.Semigroup
                                                                                                                                                                                                                                                                                                                               Data.Semigroup.Internal.Any)
  GHC.Base.$fSemigroup(,)_$cstimes @ Data.Semigroup.Internal.Any
                                   @ [(Language.PureScript.Names.Ident,
                                       Language.PureScript.TypeChecker.Entailment.InstanceContext,
                                       Language.PureScript.Types.Constraint)]
                                   $dSemigroup
                                   $dSemigroup1
  = Language.PureScript.TypeChecker.Entailment.$s$fSemigroup(,)_$cstimes
"SPEC/Language.PureScript.TypeChecker.Entailment $wsplitS @ Int" [orphan] [0] forall (w :: GHC.Classes.Ord
                                                                                             GHC.Types.Int)
  Data.Set.Internal.$wsplitS @ GHC.Types.Int w
  = Language.PureScript.TypeChecker.Entailment.$s$wsplitS1
"SPEC/Language.PureScript.TypeChecker.Entailment $wsplitS @ Text" [orphan] [0] forall (w :: GHC.Classes.Ord
                                                                                              Data.Text.Internal.Text)
  Data.Set.Internal.$wsplitS @ Data.Text.Internal.Text w
  = Language.PureScript.TypeChecker.Entailment.$s$wsplitS
"SPEC/Language.PureScript.TypeChecker.Entailment difference @ Text" [orphan] forall ($dOrd :: GHC.Classes.Ord
                                                                                                Data.Text.Internal.Text)
  Data.Set.Internal.difference @ Data.Text.Internal.Text $dOrd
  = Language.PureScript.TypeChecker.Entailment.$sdifference
"SPEC/Language.PureScript.TypeChecker.Entailment fromList @ Int" [orphan] forall ($dOrd :: GHC.Classes.Ord
                                                                                             GHC.Types.Int)
  Data.Set.Internal.fromList @ GHC.Types.Int $dOrd
  = Language.PureScript.TypeChecker.Entailment.$sfromList1
"SPEC/Language.PureScript.TypeChecker.Entailment fromList @ Text" [orphan] forall ($dOrd :: GHC.Classes.Ord
                                                                                              Data.Text.Internal.Text)
  Data.Set.Internal.fromList @ Data.Text.Internal.Text $dOrd
  = Language.PureScript.TypeChecker.Entailment.$sfromList
"SPEC/Language.PureScript.TypeChecker.Entailment fromList @ Text _" [orphan] forall @ a
                                                                                    ($dOrd :: GHC.Classes.Ord
                                                                                                Data.Text.Internal.Text)
  Data.Map.Internal.fromList @ Data.Text.Internal.Text @ a $dOrd
  = Language.PureScript.TypeChecker.Entailment.$sfromList2 @ a
"SPEC/Language.PureScript.TypeChecker.Entailment isSubsetOf @ Int" [orphan] forall ($dOrd :: GHC.Classes.Ord
                                                                                               GHC.Types.Int)
  Data.Set.Internal.isSubsetOf @ GHC.Types.Int $dOrd
  = Language.PureScript.TypeChecker.Entailment.$sisSubsetOf
"SPEC/Language.PureScript.TypeChecker.Entailment isSubsetOfX @ Int" [orphan] forall ($dOrd :: GHC.Classes.Ord
                                                                                                GHC.Types.Int)
  Data.Set.Internal.isSubsetOfX @ GHC.Types.Int $dOrd
  = Language.PureScript.TypeChecker.Entailment.$sisSubsetOf_$sisSubsetOfX
"SPEC/Language.PureScript.TypeChecker.Entailment union @ (Qualified
                                                           Ident) _" [orphan] forall @ a
                                                                                                                                                         ($dOrd :: GHC.Classes.Ord
                                                                                                                                                                     (Language.PureScript.Names.Qualified
                                                                                                                                                                        Language.PureScript.Names.Ident))
  Data.Map.Internal.union @ (Language.PureScript.Names.Qualified
                               Language.PureScript.Names.Ident)
                          @ a
                          $dOrd
  = Language.PureScript.TypeChecker.Entailment.$sunion2 @ a
"SPEC/Language.PureScript.TypeChecker.Entailment union @ Int" [orphan] forall ($dOrd :: GHC.Classes.Ord
                                                                                          GHC.Types.Int)
  Data.Set.Internal.union @ GHC.Types.Int $dOrd
  = Language.PureScript.TypeChecker.Entailment.$sunion1
"SPEC/Language.PureScript.TypeChecker.Entailment union @ Text" [orphan] forall ($dOrd :: GHC.Classes.Ord
                                                                                           Data.Text.Internal.Text)
  Data.Set.Internal.union @ Data.Text.Internal.Text $dOrd
  = Language.PureScript.TypeChecker.Entailment.$sunion
"SPEC/Language.PureScript.TypeChecker.Entailment union @ Text _" [orphan] forall @ a
                                                                                 ($dOrd :: GHC.Classes.Ord
                                                                                             Data.Text.Internal.Text)
  Data.Map.Internal.union @ Data.Text.Internal.Text @ a $dOrd
  = Language.PureScript.TypeChecker.Entailment.$sunion3 @ a
"SPEC/Language.PureScript.TypeChecker.Entailment unionWith @ (Maybe
                                                               ModuleName) _" [orphan] forall @ a
                                                                                                                                                                  ($dOrd :: GHC.Classes.Ord
                                                                                                                                                                              (GHC.Base.Maybe
                                                                                                                                                                                 Language.PureScript.Names.ModuleName))
  Data.Map.Internal.unionWith @ (GHC.Base.Maybe
                                   Language.PureScript.Names.ModuleName)
                              @ a
                              $dOrd
  = Language.PureScript.TypeChecker.Entailment.$sunionWith1 @ a
"SPEC/Language.PureScript.TypeChecker.Entailment unionWith @ (Qualified
                                                               (ProperName 'ClassName)) _" [orphan] forall @ a
                                                                                                                                                                                   ($dOrd :: GHC.Classes.Ord
                                                                                                                                                                                               (Language.PureScript.Names.Qualified
                                                                                                                                                                                                  (Language.PureScript.Names.ProperName
                                                                                                                                                                                                     'Language.PureScript.Names.ClassName)))
  Data.Map.Internal.unionWith @ (Language.PureScript.Names.Qualified
                                   (Language.PureScript.Names.ProperName
                                      'Language.PureScript.Names.ClassName))
                              @ a
                              $dOrd
  = Language.PureScript.TypeChecker.Entailment.$sunionWith @ a
"SPEC/Language.PureScript.TypeChecker.Entailment unionWith @ Text _" [orphan] forall @ a
                                                                                     ($dOrd :: GHC.Classes.Ord
                                                                                                 Data.Text.Internal.Text)
  Data.Map.Internal.unionWith @ Data.Text.Internal.Text @ a $dOrd
  = Language.PureScript.TypeChecker.Entailment.$sunionWith2 @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

