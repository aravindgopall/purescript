
==================== FINAL INTERFACE ====================
2019-01-24 14:15:36.828643 UTC

interface purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.TypeChecker.Entailment 8043
  interface hash: 90e97f09e08e49a90280f98db21233e6
  ABI hash: cf121bfd8417e41be69559141345422d
  export-list hash: 82bae92274a2ba154fef9ef60f091144
  orphan hash: 908a3856d977398f6a1b7931de3b6bde
  flag hash: d2c30bfa55bfd53466599f65e780dd5e
  opt_hash: 2c98c95d41c045ae9c2fb565ec8aabc6
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Language.PureScript.TypeChecker.Entailment.entails
  Language.PureScript.TypeChecker.Entailment.newDictionaries
  Language.PureScript.TypeChecker.Entailment.replaceTypeClassDictionaries
  Language.PureScript.TypeChecker.Entailment.InstanceContext
  Language.PureScript.TypeChecker.Entailment.SolverOptions{Language.PureScript.TypeChecker.Entailment.SolverOptions solverDeferErrors solverShouldGeneralize}
module dependencies: Control.Monad.Supply
                     Control.Monad.Supply.Class Language.PureScript.AST
                     Language.PureScript.AST.Binders
                     Language.PureScript.AST.Declarations
                     Language.PureScript.AST.Exported Language.PureScript.AST.Literals
                     Language.PureScript.AST.Operators Language.PureScript.AST.SourcePos
                     Language.PureScript.AST.Traversals Language.PureScript.Bundle
                     Language.PureScript.Comments Language.PureScript.Constants
                     Language.PureScript.Crash Language.PureScript.Environment
                     Language.PureScript.Errors Language.PureScript.Kinds
                     Language.PureScript.Label Language.PureScript.Names
                     Language.PureScript.PSString Language.PureScript.Parser.Lexer
                     Language.PureScript.Parser.State Language.PureScript.Pretty
                     Language.PureScript.Pretty.Common Language.PureScript.Pretty.Kinds
                     Language.PureScript.Pretty.Types Language.PureScript.Pretty.Values
                     Language.PureScript.Publish.BoxesHelpers
                     Language.PureScript.Traversals
                     Language.PureScript.TypeChecker.Monad
                     Language.PureScript.TypeChecker.Skolems
                     Language.PureScript.TypeChecker.Unify
                     Language.PureScript.TypeClassDictionaries Language.PureScript.Types
                     Paths_purescript
package dependencies: aeson-1.3.1.1 ansi-terminal-0.8.0.4
                      array-0.5.2.0 async-2.2.1 attoparsec-0.13.2.2 base-4.11.1.0
                      base-compat-0.10.4 binary-0.8.5.1 blaze-builder-0.4.1.0 boxes-0.1.5
                      bytestring-0.10.8.2 colour-2.3.4 containers-0.5.11.0
                      deepseq-1.4.3.0 dlist-0.8.0.4 filepath-1.4.2 ghc-boot-th-8.4.3
                      ghc-prim-0.5.2.0 hashable-1.2.7.0 integer-gmp-1.0.2.0
                      integer-logarithms-1.0.2.1 language-javascript-0.6.0.11
                      microlens-0.4.9.1 microlens-ghc-0.4.9 microlens-mtl-0.1.11.1
                      microlens-platform-0.3.10 microlens-th-0.4.2.1 mtl-2.2.2
                      parsec-3.1.13.0 pattern-arrows-0.0.2 pretty-1.1.3.6
                      primitive-0.6.3.0 protolude-0.2.2 random-1.1 scientific-0.3.6.2
                      sourcemap-0.1.6 split-0.2.3.3 stm-2.4.5.0 syb-0.7 tagged-0.8.5
                      template-haskell-2.13.0.0 text-1.2.3.0 th-abstraction-0.2.8.0
                      time-1.8.0.2 time-locale-compat-0.1.1.4 transformers-0.5.5.0
                      unordered-containers-0.2.9.0 utf8-string-1.0.1.1 uuid-types-1.0.3
                      vector-0.12.0.1
orphans: syb-0.7:Data.Generics.Instances colour-2.3.4:Data.Colour
         stm-2.4.5.0:Control.Monad.STM
         microlens-platform-0.3.10:Lens.Micro.Platform
         microlens-ghc-0.4.9:Lens.Micro.GHC
         attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         vector-0.12.0.1:Data.Vector.Unboxed
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.0:Data.Text.Lazy
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.5.0:Control.Monad.Trans.Error
         text-1.2.3.0:Data.Text binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: aeson-1.3.1.1:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.Graph
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         dlist-0.8.0.4:Data.DList ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         microlens-0.4.9.1:Lens.Micro.Internal
                         microlens-ghc-0.4.9:Lens.Micro.GHC
                         microlens-mtl-0.1.11.1:Lens.Micro.Mtl.Internal
                         microlens-platform-0.3.10:Lens.Micro.Platform
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.Declarations
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.Operators
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.SourcePos
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Comments
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Environment
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Kinds
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Label
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Names
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.PSString
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.TypeClassDictionaries
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Types
                         tagged-0.8.5:Data.Tagged
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
                         th-abstraction-0.2.8.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  base-4.11.1.0:Control.Arrow ce43199b5356a11ee2a8317f0ec30aee
import  -/  base-4.11.1.0:Control.Monad c5f960c67d822497578bffbd3e4c01cf
import  -/  base-4.11.1.0:Data.Either 39d922b371c4c52d426e9ee66de8371a
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.Function 6e6aae9442025aeeb92a909c1bbc3fca
import  -/  base-4.11.1.0:Data.Functor f522c3501272159820fd6f242510732f
import  -/  base-4.11.1.0:Data.List 83dc843e47bfc0c5af51e19c6f3476d5
import  -/  base-4.11.1.0:Data.List.NonEmpty 595ee3baddcadebc4831ea7541427984
import  -/  base-4.11.1.0:Data.Maybe 409c3da2b142470b68be39ce1d97a9f7
import  -/  base-4.11.1.0:Data.OldList 1b35aa3c6805ff7c8887a35a866fe006
import  -/  base-4.11.1.0:Data.Semigroup.Internal 3e64145a879c21fc4c6fc83e5d8ca93b
import  -/  base-4.11.1.0:Data.Traversable 7ad4edb9184ea1ae8e73f6b94f115c8c
import  -/  base-4.11.1.0:Data.Tuple 3af66f3ac61ed95ba8a3a3f68ebc5003
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-compat-0.10.4:Prelude.Compat bb6796186ed35a1d09dc34362a3fc27e
import  -/  containers-0.5.11.0:Data.Map 0dbdaec812ef695a364aa6c69e7f7d53
import  -/  containers-0.5.11.0:Data.Map.Internal 0150e210d0ae8df0f3a0669d5e32d8fa
import  -/  containers-0.5.11.0:Data.Set 7d3c64a641be4cacbcd8119445bab919
import  -/  containers-0.5.11.0:Data.Set.Internal 93fa3ef95853aa2a7aadf32d693bd451
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  integer-gmp-1.0.2.0:GHC.Integer.Type f3d5169c3d3830854b19f6565b265403
import  -/  mtl-2.2.2:Control.Monad.Error.Class df146c18e27154b8df4c8637c59fd61b
import  -/  mtl-2.2.2:Control.Monad.State 1f28325cb5ef11b6b40ffadfe4bc2ca3
import  -/  mtl-2.2.2:Control.Monad.State.Class acc76e93f44ac4486524db1a327e0a0a
import  -/  mtl-2.2.2:Control.Monad.Writer b86905dc6b5d4d3a09dfa93d3ac3bb98
import  -/  mtl-2.2.2:Control.Monad.Writer.Class 69f540e019eada69892c26d267276458
import  -/  protolude-0.2.2:Protolude 2c2d16096c8a60f59f646a3b93b0eb7b
import  -/  protolude-0.2.2:Protolude.List 3a80368167450d7a4360ebf1ea443345
import  -/  Control.Monad.Supply.Class 4b0577d8897e2d48cd4fc324f0e8c355
  exports: 9b5454b78bf2751cecd07ba41d8b4d51
  MonadSupply 6fd5e162006451a17cf4a7ae2eb71bd2
import  -/  Language.PureScript.AST e89b59f8e201961eafd3ff905a683659
  exports: be73d3bb7d4ebe5df082453f6d572075
import  -/  Language.PureScript.AST.Binders 482af52ec934a93b1ca6ec424fbe30f2
  VarBinder 2e20c3df0430901107dc9b8bd4a6015c
import  -/  Language.PureScript.AST.Declarations 586bc75044e8737d02875208d17d4395
  Abs dae9a514c0c54a50406a57cd533f800a
  Accessor 75238d8cd32188d181bffb473f6c4802
  App ae4e12e545757da5fb62189548835120
  ErrorMessageHint e92f6ee78a22c0eadc3566d7d1f48d5b
  ErrorSolvingConstraint 11ab9039b50040d25e3f4f035aeb141e
  Expr e92f6ee78a22c0eadc3566d7d1f48d5b
  Literal bdcf4b137a448fe7c2ed57fe33a72cd3
  NoInstanceFound c5c9bc41add21c6bc4602b8371723def
  OverlappingInstances 6b43960ee47cf5e470909fb750ecd2ec
  PossiblyInfiniteInstance 764510a68b73540beb5c16f73e86041a
  TypeClassDictionary 531ed710fa3e0860894127586614f844
  TypeClassDictionaryConstructorApp f15387264e84e75b0e5ed1f08eacb958
  UnknownClass dccc9c75fce07f8065906de397b7fbbd
  UserDefinedWarning 4a7f6856d3ce3f16f9f5468151bfbbda
  Var 5fd1e80d993ab2f76a4e002bbbfc9990
import  -/  Language.PureScript.AST.Literals da2ec269f063125450b272321f85468a
  ObjectLiteral d17d3a090fe8a89f303c679b0a417ae9
  StringLiteral 8514cef90500430ad3602ee97b69b883
import  -/  Language.PureScript.AST.SourcePos 63acacac5b7be73d04e5be0047a9a89a
  nullSourceSpan d3ce9e45794cd4f5ddfad4b02b318f51
import  -/  Language.PureScript.AST.Traversals f5adaf844c5e9d0f0678a8b574a32aa6
  everywhereOnValuesTopDownM 75fdf2701c3b1d9ebfea98053cfea0c4
import  -/  Language.PureScript.Constants 69f48af5637c1cbbd07a6f85918359c3
  exports: 9c458e31ccbc9e07ff15471cf48a55ee
  IsSymbol c12497b2f4957158d083b25a3edf0276
  RowCons cdbe93d4ea34f258142e6eaaf3359eb2
  RowLacks b6a02c173b8d6d4b4be1410d56af3fdb
  RowListCons f374d21fa8f3c35a75af855e0f293596
  RowListNil 83281ecb1f9069540f97809e923cb8bc
  RowNub 5012804d6bd69fabbdbc89e4f0a6527a
  RowToList 22e523c9aad10d8e4d8252c75883d1ff
  RowUnion e527d3e39ace8a876bb437eb50e99ce3
  SymbolAppend 722ea4201d75f17261ddd082d5401b27
  SymbolCompare 3616e2d86fdd2c8f81b984a99d78beac
  SymbolCons 860999617cc7a0e41e93a874e7b6df34
  Warn 24a3f73768e2566e6f9551645c95778a
  orderingEQ 770b5e6a4941b7c16f7c49f3e214a330
  orderingGT 47b1d9d81d93e366bbf7b5ca80587e1f
  orderingLT 4e2ea47557b0ef685c1bc03d97142381
  prim aafaa42bb1179c6de3b49805eaa34c53
  undefined b36b119b983e0cdb9453c1f408720756
import  -/  Language.PureScript.Crash 3dd739d57f17e8a1e9cd97afd3faf067
  exports: a9d2725f359c2d113bd38076e88ec681
  internalError d33c2a09c5cbe8e68c0bc27d1500ba1a
import  -/  Language.PureScript.Environment 467b25d81b890e1aaabe28d0f09d192d
  exports: a0cb6cb8c78c56365f58c9f88d1fe000
  FunctionalDependency fdda36e4e3ca0bf8ea7e193459ee342a
  FunctionalDependency 181e7295489b314c6c042d61e80bb6b9
  TypeClassData 8d6c0d50edff1e015eabc5cf05f826dd
  fdDetermined 181e7295489b314c6c042d61e80bb6b9
  fdDeterminers 181e7295489b314c6c042d61e80bb6b9
  typeClassArguments 181e7295489b314c6c042d61e80bb6b9
  typeClassCoveringSets 181e7295489b314c6c042d61e80bb6b9
  typeClassDependencies 181e7295489b314c6c042d61e80bb6b9
  typeClassDeterminedArguments 181e7295489b314c6c042d61e80bb6b9
  typeClassMembers 181e7295489b314c6c042d61e80bb6b9
  typeClassSuperclasses 181e7295489b314c6c042d61e80bb6b9
  typeClasses 7eb61fe78108d98d82e39145869b2402
import  -/  Language.PureScript.Errors 3c1ad933587510f8b20a8c9ec2e86ce9
  exports: 8e61484c4664eceb943d9fc4820c721b
  MultipleErrors e1ef6a17348ccfe3ef65185d3c5f9026
  addHints d0fbd17243d9930e4662ffa1081486d9
  errorMessage 4308e76c0636918842d6acdb173a8e4b
  rethrow 3f15f6976fa85d5a6c226df5a731c52a
import  -/  Language.PureScript.Label 366bbe6039761c79dbc09aaf87b5753e
  exports: 0a72b1b943ee66379d53382d0212ef7e
  Label 1f1fefa14786357467485814549b59fb
  runLabel 1525a534169f6ccc5a25699c70351352
import  -/  Language.PureScript.Names 00f694509122478d97b327fbbccae327
  exports: ad7ae34f85124c68e8ba1c90fb2e732f
  ClassName c5d98a635cb261f6a93bf01096d0c6ed
  Ident 71f167265716f619863a793fa311e198
  Ident bad3562aa6138b6192713ac281080869
  ModuleName e77bf9e056798332a9668212060e8e06
  ModuleName 1b2ddf0c04464d2fa2588925f10c1966
  ProperName f69d3801241fcb4773f1284cd28f2dee
  ProperName a7268334e0b909381550b9329cb80fcc
  Qualified b6e1bc9e7244a41d3c6149c9b5c2d6d8
  Qualified 1b2ddf0c04464d2fa2588925f10c1966
  UnusedIdent 57c338f8a1023bf312d293d7cd04b9e5
  disqualify bf1cc3b0e6c1ffc0008a6113bf8116c0
  freshIdent 2eefe00dadde64e5aaf7e80827568225
  runProperName a7268334e0b909381550b9329cb80fcc
import  -/  Language.PureScript.PSString 482bcd39d274b3e3efbde5749bd9d797
  exports: dedd5d31dc509736134f041863efd1d4
  PSString 96ffea2472d48cda76cc39d47ab7bb82
  decodeString 96ffea2472d48cda76cc39d47ab7bb82
  mkString a727d038908a3b0e30ed0d1d71565e4b
import  -/  Language.PureScript.TypeChecker.Monad 5c6d6cca9d9f5acb98ab527615b54d6d
  exports: 64079f93a7ca5d81f53055abc7f8ac53
  CheckState 9cc3cef00c43c0c2ac24a31e9b521e29
  checkEnv 9cc3cef00c43c0c2ac24a31e9b521e29
  checkSubstitution 9cc3cef00c43c0c2ac24a31e9b521e29
  withErrorMessageHint 873c4b1b4503ece5c9a614f4d08067e6
import  -/  Language.PureScript.TypeChecker.Unify f1e03e30856471f44252b03f30788ea2
  exports: 85c9b2e7abdd78234543aea834d2a6f2
  alignRowsWith ff75fc054b275abed7b89153621f3800
  freshType 527baf8b1affd32c2669a112140804d8
  substituteType 84a2cb6a429d91c98237ddbf8b2c5705
  unifyTypes 58256f6c1ba2ea04f6e802cdc965b287
import  -/  Language.PureScript.TypeClassDictionaries 7fbd42662a194b8e85db9d2e22a4ea07
  exports: d83fdf73223cc4030d8649333c7594ad
  NamedDict 5e215d8e3d225869af57b18c7fc0b693
  TypeClassDictionaryInScope 83c0c3aa36a88c60dd2bb2e7525bc817
  TypeClassDictionaryInScope d6c50933d00906849633ac7fdfbcd506
  superclassName f53c06dc8dbf373a8c68f42f6913d014
  tcdChain d6c50933d00906849633ac7fdfbcd506
  tcdClassName d6c50933d00906849633ac7fdfbcd506
  tcdDependencies d6c50933d00906849633ac7fdfbcd506
  tcdIndex d6c50933d00906849633ac7fdfbcd506
  tcdInstanceTypes d6c50933d00906849633ac7fdfbcd506
  tcdPath d6c50933d00906849633ac7fdfbcd506
  tcdValue d6c50933d00906849633ac7fdfbcd506
import  -/  Language.PureScript.Types 80a51f62cb3e6c71f024289b88f07b7f
  exports: 229bb7528146da886cffbefad5822e19
  Constraint a0b1e737f9fdb5b2f711c97dd5895f69
  KindedType 7d9c2ac5dbbe89c236f431d3c9412617
  RCons baa72184843999f17a8e5f8391aabd36
  REmpty 55ca0a758aacaf511eb4882e2b81a0fc
  RowListItem 0e3231b388d844db12bae63a4b5c2cc0
  RowListItem 7b3cb6d68aaa473367a70ce66e9633f6
  Skolem aef73915115b060ec7781cdd3859082f
  SourceConstraint b73f205dd83ce498c3119d8c9316f0c6
  SourceType 0ac818517c14fedd280ef5885ae0cdc3
  TUnknown 9d429c357e98c51eb9f7f00bef0a2346
  Type d5fc19231e8a71936895da17eade4f5b
  TypeApp 9dadf19674ff2d747cbba0c42dfad343
  TypeConstructor c7b7bcec494a17e684a206aeb55ef57b
  TypeLevelString 8a25ec25c9b44a7602f610ae833b697e
  TypeVar 9a7c02efa8540e6f48c3a672f3ebc8db
  constraintArgs d5fc19231e8a71936895da17eade4f5b
  constraintClass d5fc19231e8a71936895da17eade4f5b
  eqType d5fc19231e8a71936895da17eade4f5b
  everythingOnTypes a337a56452e37b7c1eabcf74ce7ae28d
  mapConstraintArgs 271f74f3dadd31332938099ff1d312ff
  replaceAllTypeVars cde4bd7b0fdb81185224e04d2a6fde98
  rowFromList 50b0e46715e1ec543fc59e157404928e
  rowListLabel 7b3cb6d68aaa473367a70ce66e9633f6
  rowToList 7eaee27c2477428659ea7da98530a691
  rowToSortedList 4b3b610491cf3b7f844f72d9b818fe87
  srcConstraint 1b178a4d4c2b2691cc958960cbde0185
  srcRCons 055ec9214f2b47037136c28c70d1cdb5
  srcTypeApp 12cd55eb1b1b79c16fa2d346fb7f9cdb
  srcTypeConstructor bb445f2f58f3f299e4deae81f6001187
  srcTypeLevelString 0af86aeb641fefb9242b9445e60d9219
  srcTypeVar 48385e53396d525a164ce8b1126142da
import  -/  text-1.2.3.0:Data.Text 7daa7e6c9b39d8cc1679e5ec5c64d2be
import  -/  text-1.2.3.0:Data.Text.Internal 30a0a123f71f63b26cd34c6b24f23411
import  -/  text-1.2.3.0:Data.Text.Show 3b4b6fb2985a731022d67f636682da2b
import  -/  transformers-0.5.5.0:Control.Monad.Trans.Class 352c7bdb1604d64f8f438c96bf57066a
import  -/  transformers-0.5.5.0:Control.Monad.Trans.State.Lazy bb07ba19cd14893d125b163b03c16c98
import  -/  transformers-0.5.5.0:Control.Monad.Trans.Writer.Lazy 932eb57f5933138df24d28686f218b40
0065dfe2ae71689c64fcfec0c0c83b96
  $fEqEvidence ::
    GHC.Classes.Eq Language.PureScript.TypeChecker.Entailment.Evidence
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.TypeChecker.Entailment.Evidence
                  Language.PureScript.TypeChecker.Entailment.$fEqEvidence_$c==
                  Language.PureScript.TypeChecker.Entailment.$fEqEvidence_$c/= -}
0065dfe2ae71689c64fcfec0c0c83b96
  $fEqEvidence_$c/= ::
    Language.PureScript.TypeChecker.Entailment.Evidence
    -> Language.PureScript.TypeChecker.Entailment.Evidence
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.TypeChecker.Entailment.Evidence)
                   (y :: Language.PureScript.TypeChecker.Entailment.Evidence) ->
                 case Language.PureScript.TypeChecker.Entailment.$fEqEvidence_$c==
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
0065dfe2ae71689c64fcfec0c0c83b96
  $fEqEvidence_$c== ::
    Language.PureScript.TypeChecker.Entailment.Evidence
    -> Language.PureScript.TypeChecker.Entailment.Evidence
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Language.PureScript.TypeChecker.Entailment.Evidence)
                   (ds1 :: Language.PureScript.TypeChecker.Entailment.Evidence) ->
                 case ds of wild {
                   Language.PureScript.TypeChecker.Entailment.NamedInstance a2
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.TypeChecker.Entailment.NamedInstance b1
                        -> case a2 of ww { Language.PureScript.Names.Qualified ww1 ww2 ->
                           case b1 of ww3 { Language.PureScript.Names.Qualified ww4 ww5 ->
                           case ww1 of wild2 {
                             GHC.Base.Nothing
                             -> case ww4 of wild3 {
                                  GHC.Base.Nothing
                                  -> Language.PureScript.Names.$fEqIdent_$c== ww2 ww5
                                  GHC.Base.Just ipv -> GHC.Types.False }
                             GHC.Base.Just a3
                             -> case ww4 of wild3 {
                                  GHC.Base.Nothing -> GHC.Types.False
                                  GHC.Base.Just b2
                                  -> case GHC.Classes.$fEq[]_$c==
                                            @ (Language.PureScript.Names.ProperName
                                                 'Language.PureScript.Names.Namespace)
                                            (Language.PureScript.Names.$fEqProperName
                                               @ 'Language.PureScript.Names.Namespace)
                                            a3 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                            b2
                                              `cast`
                                            (Language.PureScript.Names.N:ModuleName[0]) of wild4 {
                                       GHC.Types.False -> GHC.Types.False
                                       GHC.Types.True
                                       -> Language.PureScript.Names.$fEqIdent_$c==
                                            ww2
                                            ww5 } } } } } }
                   Language.PureScript.TypeChecker.Entailment.WarnInstance a2
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.TypeChecker.Entailment.WarnInstance b1
                        -> Language.PureScript.Types.eqType
                             @ (Language.PureScript.AST.SourcePos.SourceSpan,
                                [Language.PureScript.Comments.Comment])
                             @ (Language.PureScript.AST.SourcePos.SourceSpan,
                                [Language.PureScript.Comments.Comment])
                             a2
                             b1 }
                   Language.PureScript.TypeChecker.Entailment.IsSymbolInstance a2
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.TypeChecker.Entailment.IsSymbolInstance b1
                        -> GHC.Classes.$fEq[]_$c==
                             @ GHC.Word.Word16
                             GHC.Word.$fEqWord16
                             a2 `cast` (Language.PureScript.PSString.N:PSString[0])
                             b1 `cast` (Language.PureScript.PSString.N:PSString[0]) }
                   Language.PureScript.TypeChecker.Entailment.EmptyClassInstance
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.TypeChecker.Entailment.EmptyClassInstance
                        -> GHC.Types.True } }) -}
6f6912509d2a4ac2bb7eda47984ad932
  $fEqMatched ::
    GHC.Classes.Eq t =>
    GHC.Classes.Eq
      (Language.PureScript.TypeChecker.Entailment.Matched t)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ t (v :: GHC.Classes.Eq t).
                  @ (Language.PureScript.TypeChecker.Entailment.Matched t)
                  (Language.PureScript.TypeChecker.Entailment.$fEqMatched_$c== @ t v)
                  (Language.PureScript.TypeChecker.Entailment.$fEqMatched_$c/=
                     @ t
                     v) -}
6f6912509d2a4ac2bb7eda47984ad932
  $fEqMatched_$c/= ::
    GHC.Classes.Eq t =>
    Language.PureScript.TypeChecker.Entailment.Matched t
    -> Language.PureScript.TypeChecker.Entailment.Matched t
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ t
                   ($dEq :: GHC.Classes.Eq t)
                   (x :: Language.PureScript.TypeChecker.Entailment.Matched t)
                   (y :: Language.PureScript.TypeChecker.Entailment.Matched t) ->
                 case x of wild {
                   Language.PureScript.TypeChecker.Entailment.Match a2
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.TypeChecker.Entailment.Match b1
                        -> case GHC.Classes.== @ t $dEq a2 b1 of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False } }
                   Language.PureScript.TypeChecker.Entailment.Apart
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.TypeChecker.Entailment.Apart
                        -> GHC.Types.False }
                   Language.PureScript.TypeChecker.Entailment.Unknown
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.TypeChecker.Entailment.Unknown
                        -> GHC.Types.False } }) -}
6f6912509d2a4ac2bb7eda47984ad932
  $fEqMatched_$c== ::
    GHC.Classes.Eq t =>
    Language.PureScript.TypeChecker.Entailment.Matched t
    -> Language.PureScript.TypeChecker.Entailment.Matched t
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: (\ @ t
                   ($dEq :: GHC.Classes.Eq t)
                   (ds :: Language.PureScript.TypeChecker.Entailment.Matched t)
                   (ds1 :: Language.PureScript.TypeChecker.Entailment.Matched t) ->
                 case ds of wild {
                   Language.PureScript.TypeChecker.Entailment.Match a2
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.TypeChecker.Entailment.Match b1
                        -> GHC.Classes.== @ t $dEq a2 b1 }
                   Language.PureScript.TypeChecker.Entailment.Apart
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.TypeChecker.Entailment.Apart
                        -> GHC.Types.True }
                   Language.PureScript.TypeChecker.Entailment.Unknown
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.TypeChecker.Entailment.Unknown
                        -> GHC.Types.True } }) -}
6f6912509d2a4ac2bb7eda47984ad932
  $fFunctorMatched ::
    GHC.Base.Functor Language.PureScript.TypeChecker.Entailment.Matched
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.TypeChecker.Entailment.Matched
                  Language.PureScript.TypeChecker.Entailment.$fFunctorMatched_$cfmap
                  Language.PureScript.TypeChecker.Entailment.$fFunctorMatched_$c<$ -}
6f6912509d2a4ac2bb7eda47984ad932
  $fFunctorMatched_$c<$ ::
    a
    -> Language.PureScript.TypeChecker.Entailment.Matched b
    -> Language.PureScript.TypeChecker.Entailment.Matched a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   (z :: a)
                   (ds :: Language.PureScript.TypeChecker.Entailment.Matched b) ->
                 case ds of wild {
                   Language.PureScript.TypeChecker.Entailment.Match a2
                   -> Language.PureScript.TypeChecker.Entailment.Match @ a z
                   Language.PureScript.TypeChecker.Entailment.Apart
                   -> Language.PureScript.TypeChecker.Entailment.Apart @ a
                   Language.PureScript.TypeChecker.Entailment.Unknown
                   -> Language.PureScript.TypeChecker.Entailment.Unknown @ a }) -}
6f6912509d2a4ac2bb7eda47984ad932
  $fFunctorMatched_$cfmap ::
    (a -> b)
    -> Language.PureScript.TypeChecker.Entailment.Matched a
    -> Language.PureScript.TypeChecker.Entailment.Matched b
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   @ b
                   (f :: a -> b)
                   (ds :: Language.PureScript.TypeChecker.Entailment.Matched a) ->
                 case ds of wild {
                   Language.PureScript.TypeChecker.Entailment.Match a2
                   -> Language.PureScript.TypeChecker.Entailment.Match @ b (f a2)
                   Language.PureScript.TypeChecker.Entailment.Apart
                   -> Language.PureScript.TypeChecker.Entailment.Apart @ b
                   Language.PureScript.TypeChecker.Entailment.Unknown
                   -> Language.PureScript.TypeChecker.Entailment.Unknown @ b }) -}
6f6912509d2a4ac2bb7eda47984ad932
  $fMonoidMatched ::
    GHC.Base.Monoid t =>
    GHC.Base.Monoid
      (Language.PureScript.TypeChecker.Entailment.Matched t)
  DFunId
  {- Arity: 1, Strictness: <L,U(U(C(C1(U)),A,A),U,A,A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ t (v :: GHC.Base.Monoid t).
                  @ (Language.PureScript.TypeChecker.Entailment.Matched t)
                  (Language.PureScript.TypeChecker.Entailment.$fMonoidMatched_$cp1Monoid
                     @ t
                     v)
                  (Language.PureScript.TypeChecker.Entailment.$fMonoidMatched_$cmempty
                     @ t
                     v)
                  (Language.PureScript.TypeChecker.Entailment.$fMonoidMatched_$cmappend
                     @ t
                     v)
                  (Language.PureScript.TypeChecker.Entailment.$fMonoidMatched_$cmconcat
                     @ t
                     v) -}
bd0b9306d0082d48a2acc2a61b474bab
  $fMonoidMatched1 ::
    Language.PureScript.TypeChecker.Entailment.Matched ()
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Language.PureScript.TypeChecker.Entailment.Match
                   @ ()
                   GHC.Tuple.()) -}
6f6912509d2a4ac2bb7eda47984ad932
  $fMonoidMatched_$c<> ::
    GHC.Base.Semigroup t =>
    Language.PureScript.TypeChecker.Entailment.Matched t
    -> Language.PureScript.TypeChecker.Entailment.Matched t
    -> Language.PureScript.TypeChecker.Entailment.Matched t
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A,A)><S,1*U><L,1*U>,
     Unfolding: (\ @ t
                   ($dSemigroup :: GHC.Base.Semigroup t)
                   (ds :: Language.PureScript.TypeChecker.Entailment.Matched t)
                   (ds1 :: Language.PureScript.TypeChecker.Entailment.Matched t) ->
                 case ds of wild {
                   Language.PureScript.TypeChecker.Entailment.Match l
                   -> case ds1 of wild1 {
                        DEFAULT -> wild1
                        Language.PureScript.TypeChecker.Entailment.Match r
                        -> Language.PureScript.TypeChecker.Entailment.Match
                             @ t
                             (GHC.Base.<> @ t $dSemigroup l r) }
                   Language.PureScript.TypeChecker.Entailment.Apart
                   -> Language.PureScript.TypeChecker.Entailment.Apart @ t
                   Language.PureScript.TypeChecker.Entailment.Unknown
                   -> case ds1 of wild1 {
                        DEFAULT -> Language.PureScript.TypeChecker.Entailment.Unknown @ t
                        Language.PureScript.TypeChecker.Entailment.Apart
                        -> Language.PureScript.TypeChecker.Entailment.Apart @ t } }) -}
6f6912509d2a4ac2bb7eda47984ad932
  $fMonoidMatched_$cmappend ::
    GHC.Base.Monoid t =>
    Language.PureScript.TypeChecker.Entailment.Matched t
    -> Language.PureScript.TypeChecker.Entailment.Matched t
    -> Language.PureScript.TypeChecker.Entailment.Matched t
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*U(1*C1(C1(U)),A,A),A,A,A)><S,1*U><L,1*U>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (1, False, False)
                (\ @ t ($dMonoid :: GHC.Base.Monoid t) ->
                 Language.PureScript.TypeChecker.Entailment.$fMonoidMatched_$c<>
                   @ t
                   (GHC.Base.$p1Monoid @ t $dMonoid)) -}
6f6912509d2a4ac2bb7eda47984ad932
  $fMonoidMatched_$cmconcat ::
    GHC.Base.Monoid t =>
    [Language.PureScript.TypeChecker.Entailment.Matched t]
    -> Language.PureScript.TypeChecker.Entailment.Matched t
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(1*U(C(C1(U)),A,A),1*U,A,A)><S,1*U>,
     Unfolding: (\ @ t
                   ($dMonoid :: GHC.Base.Monoid t)
                   (eta :: [Language.PureScript.TypeChecker.Entailment.Matched t]) ->
                 let {
                   $dSemigroup :: GHC.Base.Semigroup t
                   = GHC.Base.$p1Monoid @ t $dMonoid
                 } in
                 let {
                   z :: t = GHC.Base.mempty @ t $dMonoid
                 } in
                 let {
                   z1 :: Language.PureScript.TypeChecker.Entailment.Matched t
                   = Language.PureScript.TypeChecker.Entailment.Match @ t z
                 } in
                 letrec {
                   go23 :: [Language.PureScript.TypeChecker.Entailment.Matched t]
                           -> Language.PureScript.TypeChecker.Entailment.Matched t
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [Language.PureScript.TypeChecker.Entailment.Matched
                                 t]) ->
                     case ds of wild {
                       [] -> z1
                       : y ys
                       -> case y of wild1 {
                            Language.PureScript.TypeChecker.Entailment.Match l
                            -> case go23 ys of wild2 {
                                 DEFAULT -> wild2
                                 Language.PureScript.TypeChecker.Entailment.Match r
                                 -> Language.PureScript.TypeChecker.Entailment.Match
                                      @ t
                                      (GHC.Base.<> @ t $dSemigroup l r) }
                            Language.PureScript.TypeChecker.Entailment.Apart
                            -> Language.PureScript.TypeChecker.Entailment.Apart @ t
                            Language.PureScript.TypeChecker.Entailment.Unknown
                            -> case go23 ys of wild2 {
                                 DEFAULT -> Language.PureScript.TypeChecker.Entailment.Unknown @ t
                                 Language.PureScript.TypeChecker.Entailment.Apart
                                 -> Language.PureScript.TypeChecker.Entailment.Apart @ t } } }
                 } in
                 go23 eta) -}
6f6912509d2a4ac2bb7eda47984ad932
  $fMonoidMatched_$cmempty ::
    GHC.Base.Monoid t =>
    Language.PureScript.TypeChecker.Entailment.Matched t
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*U(A,1*U,A,A)>m1,
     Unfolding: InlineRule (1, True, False)
                (\ @ t ($dMonoid :: GHC.Base.Monoid t) ->
                 Language.PureScript.TypeChecker.Entailment.Match
                   @ t
                   (GHC.Base.mempty @ t $dMonoid)) -}
6f6912509d2a4ac2bb7eda47984ad932
  $fMonoidMatched_$cp1Monoid ::
    GHC.Base.Monoid t =>
    GHC.Base.Semigroup
      (Language.PureScript.TypeChecker.Entailment.Matched t)
  {- Arity: 1, Strictness: <L,1*U(1*U(C(C1(U)),A,A),A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ t ($dMonoid :: GHC.Base.Monoid t) ->
                 Language.PureScript.TypeChecker.Entailment.$fSemigroupMatched
                   @ t
                   (GHC.Base.$p1Monoid @ t $dMonoid)) -}
6f6912509d2a4ac2bb7eda47984ad932
  $fSemigroupMatched ::
    GHC.Base.Semigroup t =>
    GHC.Base.Semigroup
      (Language.PureScript.TypeChecker.Entailment.Matched t)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(U)),A,A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ t (v :: GHC.Base.Semigroup t).
                  @ (Language.PureScript.TypeChecker.Entailment.Matched t)
                  (Language.PureScript.TypeChecker.Entailment.$fMonoidMatched_$c<>
                     @ t
                     v)
                  (Language.PureScript.TypeChecker.Entailment.$fSemigroupMatched_$csconcat
                     @ t
                     v)
                  (Language.PureScript.TypeChecker.Entailment.$fSemigroupMatched_$cstimes
                     @ t
                     v) -}
6f6912509d2a4ac2bb7eda47984ad932
  $fSemigroupMatched_$csconcat ::
    GHC.Base.Semigroup t =>
    GHC.Base.NonEmpty
      (Language.PureScript.TypeChecker.Entailment.Matched t)
    -> Language.PureScript.TypeChecker.Entailment.Matched t
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A,A)><S(SS),1*U(1*U,1*U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ t
                   (w :: GHC.Base.Semigroup t)
                   (w1 :: GHC.Base.NonEmpty
                            (Language.PureScript.TypeChecker.Entailment.Matched t)) ->
                 case w1 of ww { GHC.Base.:| ww1 ww2 ->
                 Language.PureScript.TypeChecker.Entailment.$w$csconcat
                   @ t
                   w
                   ww1
                   ww2 }) -}
6f6912509d2a4ac2bb7eda47984ad932
  $fSemigroupMatched_$cstimes ::
    GHC.Base.Semigroup t =>
    forall b.
    GHC.Real.Integral b =>
    b
    -> Language.PureScript.TypeChecker.Entailment.Matched t
    -> Language.PureScript.TypeChecker.Entailment.Matched t
  {- Arity: 2, Strictness: <L,U(C(C1(U)),A,A)><L,U> -}
a413a434a2d37a28fa053c9e8dd4b9ed
  $fShowEntailsResult ::
    GHC.Show.Show a =>
    GHC.Show.Show
      (Language.PureScript.TypeChecker.Entailment.EntailsResult a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Show.Show a).
                  @ (Language.PureScript.TypeChecker.Entailment.EntailsResult a)
                  (Language.PureScript.TypeChecker.Entailment.$fShowEntailsResult_$cshowsPrec
                     @ a
                     v)
                  (Language.PureScript.TypeChecker.Entailment.$fShowEntailsResult_$cshow
                     @ a
                     v)
                  (Language.PureScript.TypeChecker.Entailment.$fShowEntailsResult_$cshowList
                     @ a
                     v) -}
36826d0269fa78f644cf7c1a7d28d016
  $fShowEntailsResult1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
e26b179b58d4938c9a005e7a427274aa
  $fShowEntailsResult2 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.PureScript.TypeChecker.Entailment.$fShowEntailsResult3) -}
f9f82c7756e5cd747bfbff21f3de9de6
  $fShowEntailsResult3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.TypeChecker.Entailment.$fShowEntailsResult4) -}
3b6cfe667594b8ddc5464a36db50115f
  $fShowEntailsResult4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Deferred"#) -}
8178dfb1bed293205a62f4c97efd0890
  $fShowEntailsResult5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.TypeChecker.Entailment.$fShowEntailsResult6) -}
8b621a2352a7ec7144881d6459f8b178
  $fShowEntailsResult6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Unsolved "#) -}
8da29ab735f37c100be6694698d24575
  $fShowEntailsResult7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Solved "#) -}
c3231bfc156e44d8b145e69dc96e1633
  $fShowEntailsResult8 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11#) -}
a413a434a2d37a28fa053c9e8dd4b9ed
  $fShowEntailsResult_$cshow ::
    GHC.Show.Show a =>
    Language.PureScript.TypeChecker.Entailment.EntailsResult a
    -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U(1*C1(C1(C1(U))),A,A)><S,1*U>,
     Unfolding: (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (x :: Language.PureScript.TypeChecker.Entailment.EntailsResult
                           a) ->
                 case x of wild {
                   Language.PureScript.TypeChecker.Entailment.Solved b1 b2
                   -> GHC.CString.unpackAppendCString#
                        Language.PureScript.TypeChecker.Entailment.$fShowEntailsResult7
                        (GHC.Show.showsPrec
                           @ a
                           $dShow
                           Language.PureScript.TypeChecker.Entailment.$fShowEntailsResult8
                           b1
                           (GHC.Types.:
                              @ GHC.Types.Char
                              GHC.Show.showSpace1
                              (case b2 of ww2 { Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope ww3 ww4 ww5 ww6 ww7 ww8 ww9 ->
                               Language.PureScript.TypeClassDictionaries.$w$cshowsPrec
                                 @ Language.PureScript.TypeChecker.Entailment.Evidence
                                 Language.PureScript.TypeChecker.Entailment.$fShowEvidence
                                 11#
                                 ww3
                                 ww4
                                 ww5
                                 ww6
                                 ww7
                                 ww8
                                 ww9
                                 (GHC.Types.[] @ GHC.Types.Char) })))
                   Language.PureScript.TypeChecker.Entailment.Unsolved b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.TypeChecker.Entailment.$fShowEntailsResult5
                        (case b1 of ww2 { Language.PureScript.Types.Constraint ww3 ww4 ww5 ww6 ->
                         Language.PureScript.Types.$w$cshowsPrec
                           @ (Language.PureScript.AST.SourcePos.SourceSpan,
                              [Language.PureScript.Comments.Comment])
                           Language.PureScript.TypeChecker.Entailment.$fShowEntailsResult_$s$fShow(,)
                           11#
                           ww3
                           ww4
                           ww5
                           ww6
                           (GHC.Types.[] @ GHC.Types.Char) })
                   Language.PureScript.TypeChecker.Entailment.Deferred
                   -> Language.PureScript.TypeChecker.Entailment.$fShowEntailsResult3 }) -}
a413a434a2d37a28fa053c9e8dd4b9ed
  $fShowEntailsResult_$cshowList ::
    GHC.Show.Show a =>
    [Language.PureScript.TypeChecker.Entailment.EntailsResult a]
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (ls :: [Language.PureScript.TypeChecker.Entailment.EntailsResult
                             a])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Language.PureScript.TypeChecker.Entailment.EntailsResult a)
                   (Language.PureScript.TypeChecker.Entailment.$fShowEntailsResult_$cshowsPrec
                      @ a
                      $dShow
                      Language.PureScript.TypeChecker.Entailment.$fShowEntailsResult1)
                   ls
                   s) -}
a413a434a2d37a28fa053c9e8dd4b9ed
  $fShowEntailsResult_$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Types.Int
    -> Language.PureScript.TypeChecker.Entailment.EntailsResult a
    -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,1*U(1*C1(C1(C(U))),A,A)><L,1*U(U)><S,1*U>,
     Unfolding: (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (a2 :: GHC.Types.Int)
                   (ds :: Language.PureScript.TypeChecker.Entailment.EntailsResult
                            a) ->
                 case ds of wild {
                   Language.PureScript.TypeChecker.Entailment.Solved b1 b2
                   -> case a2 of wild1 { GHC.Types.I# x ->
                      let {
                        f :: GHC.Base.String -> GHC.Base.String
                        = GHC.Show.showsPrec
                            @ a
                            $dShow
                            Language.PureScript.TypeChecker.Entailment.$fShowEntailsResult8
                            b1
                      } in
                      let {
                        g1 :: GHC.Base.String -> GHC.Base.String
                        = case b2 of ww2 { Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope ww3 ww4 ww5 ww6 ww7 ww8 ww9 ->
                          Language.PureScript.TypeClassDictionaries.$w$cshowsPrec
                            @ Language.PureScript.TypeChecker.Entailment.Evidence
                            Language.PureScript.TypeChecker.Entailment.$fShowEvidence
                            11#
                            ww3
                            ww4
                            ww5
                            ww6
                            ww7
                            ww8
                            ww9 }
                      } in
                      case GHC.Prim.>=# x 11# of lwild {
                        DEFAULT
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.CString.unpackAppendCString#
                             Language.PureScript.TypeChecker.Entailment.$fShowEntailsResult7
                             (f (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 (g1 x1)))
                        1#
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.CString.unpackAppendCString#
                                Language.PureScript.TypeChecker.Entailment.$fShowEntailsResult7
                                (f (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.showSpace1
                                      (g1
                                         (GHC.Types.:
                                            @ GHC.Types.Char
                                            GHC.Show.$fShow(,)2
                                            x1))))) } }
                   Language.PureScript.TypeChecker.Entailment.Unsolved b1
                   -> case a2 of wild1 { GHC.Types.I# x ->
                      let {
                        g1 :: GHC.Base.String -> GHC.Base.String
                        = case b1 of ww2 { Language.PureScript.Types.Constraint ww3 ww4 ww5 ww6 ->
                          Language.PureScript.Types.$w$cshowsPrec
                            @ (Language.PureScript.AST.SourcePos.SourceSpan,
                               [Language.PureScript.Comments.Comment])
                            Language.PureScript.TypeChecker.Entailment.$fShowEntailsResult_$s$fShow(,)
                            11#
                            ww3
                            ww4
                            ww5
                            ww6 }
                      } in
                      case GHC.Prim.>=# x 11# of lwild {
                        DEFAULT
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             Language.PureScript.TypeChecker.Entailment.$fShowEntailsResult5
                             (g1 x1)
                        1#
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Language.PureScript.TypeChecker.Entailment.$fShowEntailsResult5
                                (g1 (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x1))) } }
                   Language.PureScript.TypeChecker.Entailment.Deferred
                   -> Language.PureScript.TypeChecker.Entailment.$fShowEntailsResult2 }) -}
0c3ea3383a6880ca3c6f20361638631f
  $fShowEntailsResult_$s$fShow(,) ::
    GHC.Show.Show
      (Language.PureScript.AST.SourcePos.SourceSpan,
       [Language.PureScript.Comments.Comment])
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.AST.SourcePos.SourceSpan,
                     [Language.PureScript.Comments.Comment])
                  (GHC.Show.$fShow(,)_$cshowsPrec
                     @ Language.PureScript.AST.SourcePos.SourceSpan
                     @ [Language.PureScript.Comments.Comment]
                     Language.PureScript.AST.SourcePos.$fShowSourceSpan
                     Language.PureScript.TypeChecker.Entailment.$fShowEntailsResult_$s$fShow[])
                  (\ (x :: (Language.PureScript.AST.SourcePos.SourceSpan,
                            [Language.PureScript.Comments.Comment])) ->
                   GHC.Show.$fShow(,)_$cshowsPrec
                     @ Language.PureScript.AST.SourcePos.SourceSpan
                     @ [Language.PureScript.Comments.Comment]
                     Language.PureScript.AST.SourcePos.$fShowSourceSpan
                     Language.PureScript.TypeChecker.Entailment.$fShowEntailsResult_$s$fShow[]
                     GHC.Show.$fShow(,)1
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [(Language.PureScript.AST.SourcePos.SourceSpan,
                              [Language.PureScript.Comments.Comment])])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Language.PureScript.AST.SourcePos.SourceSpan,
                        [Language.PureScript.Comments.Comment])
                     (GHC.Show.$fShow(,)_$cshowsPrec
                        @ Language.PureScript.AST.SourcePos.SourceSpan
                        @ [Language.PureScript.Comments.Comment]
                        Language.PureScript.AST.SourcePos.$fShowSourceSpan
                        Language.PureScript.TypeChecker.Entailment.$fShowEntailsResult_$s$fShow[]
                        GHC.Show.$fShow(,)1)
                     ls
                     s) -}
4a5d285481e731df4d1f490847a93ce2
  $fShowEntailsResult_$s$fShow[] ::
    GHC.Show.Show [Language.PureScript.Comments.Comment]
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ [Language.PureScript.Comments.Comment]
                  (\ (ds :: GHC.Types.Int) ->
                   Language.PureScript.Comments.$fShowComment_$cshowList)
                  (\ (x :: [Language.PureScript.Comments.Comment]) ->
                   GHC.Show.showList__
                     @ Language.PureScript.Comments.Comment
                     Language.PureScript.Comments.$fShowComment1
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [[Language.PureScript.Comments.Comment]])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ [Language.PureScript.Comments.Comment]
                     Language.PureScript.Comments.$fShowComment_$cshowList
                     ls
                     s) -}
0065dfe2ae71689c64fcfec0c0c83b96
  $fShowEvidence ::
    GHC.Show.Show Language.PureScript.TypeChecker.Entailment.Evidence
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.TypeChecker.Entailment.Evidence
                  Language.PureScript.TypeChecker.Entailment.$fShowEvidence_$cshowsPrec
                  Language.PureScript.TypeChecker.Entailment.$fShowEvidence_$cshow
                  Language.PureScript.TypeChecker.Entailment.$fShowEvidence_$cshowList -}
0065dfe2ae71689c64fcfec0c0c83b96
  $fShowEvidence1 ::
    Language.PureScript.TypeChecker.Entailment.Evidence
    -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (Language.PureScript.TypeChecker.Entailment.$fShowEvidence_$cshowsPrec
                   Language.PureScript.TypeChecker.Entailment.$fShowEntailsResult1) -}
5cef9caeef5733863246475ab5954f5c
  $fShowEvidence10 :: [GHC.Types.Char]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.$fShow(,)2
                   (GHC.Types.[] @ GHC.Types.Char)) -}
2adcff62ab1f6d8ac1a8ae2aec42c0f4
  $fShowEvidence2 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.PureScript.TypeChecker.Entailment.$fShowEvidence3) -}
afa1f9e1fb8b0ca78403e65e124e1fab
  $fShowEvidence3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.TypeChecker.Entailment.$fShowEvidence4) -}
da989c57b3684af85cfd816761abf990
  $fShowEvidence4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("EmptyClassInstance"#) -}
c72c1ccf259c6816846a37e6e3ca609a
  $fShowEvidence5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("IsSymbolInstance "#) -}
81d93debfd92e604949e5c95ac90b9d8
  $fShowEvidence6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.TypeChecker.Entailment.$fShowEvidence7) -}
76683e422c379cdd2627a0d65d0ee10d
  $fShowEvidence7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("WarnInstance "#) -}
fb063a6027638a3903d8f34cee6b6981
  $fShowEvidence8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.TypeChecker.Entailment.$fShowEvidence9) -}
e3848313835fe6d08010ba637d5fecce
  $fShowEvidence9 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("NamedInstance "#) -}
0065dfe2ae71689c64fcfec0c0c83b96
  $fShowEvidence_$cshow ::
    Language.PureScript.TypeChecker.Entailment.Evidence
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: Language.PureScript.TypeChecker.Entailment.Evidence) ->
                 case x of wild {
                   Language.PureScript.TypeChecker.Entailment.NamedInstance b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.TypeChecker.Entailment.$fShowEvidence8
                        (case b1 of ww2 { Language.PureScript.Names.Qualified ww3 ww4 ->
                         GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.$fShow(,)4
                           (GHC.CString.unpackAppendCString#
                              Language.PureScript.Names.$fShowQualified1
                              (case ww3 of wild1 {
                                 GHC.Base.Nothing
                                 -> GHC.Base.++
                                      @ GHC.Types.Char
                                      GHC.Show.$fShowMaybe4
                                      (GHC.Types.:
                                         @ GHC.Types.Char
                                         GHC.Show.showSpace1
                                         (Language.PureScript.Names.$fShowIdent_$cshowsPrec
                                            Language.PureScript.Names.$fShowIdent7
                                            ww4
                                            Language.PureScript.TypeChecker.Entailment.$fShowEvidence10))
                                 GHC.Base.Just b2
                                 -> GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.$fShow(,)4
                                      (GHC.Base.++
                                         @ GHC.Types.Char
                                         GHC.Show.$fShowMaybe1
                                         (Language.PureScript.Names.$w$cshowsPrec
                                            11#
                                            b2
                                            (GHC.Types.:
                                               @ GHC.Types.Char
                                               GHC.Show.$fShow(,)2
                                               (GHC.Types.:
                                                  @ GHC.Types.Char
                                                  GHC.Show.showSpace1
                                                  (Language.PureScript.Names.$fShowIdent_$cshowsPrec
                                                     Language.PureScript.Names.$fShowIdent7
                                                     ww4
                                                     Language.PureScript.TypeChecker.Entailment.$fShowEvidence10))))) })) })
                   Language.PureScript.TypeChecker.Entailment.WarnInstance b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.TypeChecker.Entailment.$fShowEvidence6
                        (Language.PureScript.Types.$w$cshowsPrec3
                           @ (Language.PureScript.AST.SourcePos.SourceSpan,
                              [Language.PureScript.Comments.Comment])
                           Language.PureScript.TypeChecker.Entailment.$fShowEntailsResult_$s$fShow(,)
                           11#
                           b1
                           (GHC.Types.[] @ GHC.Types.Char))
                   Language.PureScript.TypeChecker.Entailment.IsSymbolInstance b1
                   -> GHC.CString.unpackAppendCString#
                        Language.PureScript.TypeChecker.Entailment.$fShowEvidence5
                        (GHC.Base.++_$s++
                           @ GHC.Types.Char
                           (GHC.Types.[] @ GHC.Types.Char)
                           GHC.Show.$fShow(,)3
                           (GHC.Show.showLitString
                              (GHC.Base.map
                                 @ (Data.Either.Either GHC.Word.Word16 GHC.Types.Char)
                                 @ GHC.Types.Char
                                 Language.PureScript.PSString.$fShowPSString2
                                 (Language.PureScript.PSString.$fShowPSString_go
                                    b1 `cast` (Language.PureScript.PSString.N:PSString[0])))
                              GHC.Show.$fShow[]1))
                   Language.PureScript.TypeChecker.Entailment.EmptyClassInstance
                   -> Language.PureScript.TypeChecker.Entailment.$fShowEvidence3 }) -}
0065dfe2ae71689c64fcfec0c0c83b96
  $fShowEvidence_$cshowList ::
    [Language.PureScript.TypeChecker.Entailment.Evidence]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.TypeChecker.Entailment.Evidence])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.TypeChecker.Entailment.Evidence
                   Language.PureScript.TypeChecker.Entailment.$fShowEvidence1
                   ls
                   s) -}
0065dfe2ae71689c64fcfec0c0c83b96
  $fShowEvidence_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.TypeChecker.Entailment.Evidence
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <L,1*U(U)><S,1*U>,
     Unfolding: (\ (a :: GHC.Types.Int)
                   (ds :: Language.PureScript.TypeChecker.Entailment.Evidence) ->
                 case ds of wild {
                   Language.PureScript.TypeChecker.Entailment.NamedInstance b1
                   -> case a of wild1 { GHC.Types.I# x ->
                      let {
                        g1 :: GHC.Base.String -> GHC.Base.String
                        = case b1 of ww2 { Language.PureScript.Names.Qualified ww3 ww4 ->
                          Language.PureScript.Names.$w$cshowsPrec4
                            @ Language.PureScript.Names.Ident
                            Language.PureScript.Names.$fShowIdent
                            11#
                            ww3
                            ww4 }
                      } in
                      case GHC.Prim.>=# x 11# of lwild {
                        DEFAULT
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             Language.PureScript.TypeChecker.Entailment.$fShowEvidence8
                             (g1 x1)
                        1#
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Language.PureScript.TypeChecker.Entailment.$fShowEvidence8
                                (g1 (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x1))) } }
                   Language.PureScript.TypeChecker.Entailment.WarnInstance b1
                   -> case a of wild1 { GHC.Types.I# x ->
                      let {
                        g1 :: GHC.Base.String -> GHC.Base.String
                        = Language.PureScript.Types.$w$cshowsPrec3
                            @ (Language.PureScript.AST.SourcePos.SourceSpan,
                               [Language.PureScript.Comments.Comment])
                            Language.PureScript.TypeChecker.Entailment.$fShowEntailsResult_$s$fShow(,)
                            11#
                            b1
                      } in
                      case GHC.Prim.>=# x 11# of lwild {
                        DEFAULT
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             Language.PureScript.TypeChecker.Entailment.$fShowEvidence6
                             (g1 x1)
                        1#
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Language.PureScript.TypeChecker.Entailment.$fShowEvidence6
                                (g1 (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x1))) } }
                   Language.PureScript.TypeChecker.Entailment.IsSymbolInstance b1
                   -> case a of wild1 { GHC.Types.I# x ->
                      let {
                        lvl101 :: GHC.Base.String
                        = GHC.Show.showLitString
                            (GHC.Base.map
                               @ (Data.Either.Either GHC.Word.Word16 GHC.Types.Char)
                               @ GHC.Types.Char
                               Language.PureScript.PSString.$fShowPSString2
                               (Language.PureScript.PSString.$fShowPSString_go
                                  b1 `cast` (Language.PureScript.PSString.N:PSString[0])))
                            GHC.Show.$fShow[]1
                      } in
                      case GHC.Prim.>=# x 11# of lwild {
                        DEFAULT
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.CString.unpackAppendCString#
                             Language.PureScript.TypeChecker.Entailment.$fShowEvidence5
                             (GHC.Base.++_$s++ @ GHC.Types.Char x1 GHC.Show.$fShow(,)3 lvl101)
                        1#
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.CString.unpackAppendCString#
                                Language.PureScript.TypeChecker.Entailment.$fShowEvidence5
                                (GHC.Base.++_$s++
                                   @ GHC.Types.Char
                                   (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x1)
                                   GHC.Show.$fShow(,)3
                                   lvl101)) } }
                   Language.PureScript.TypeChecker.Entailment.EmptyClassInstance
                   -> Language.PureScript.TypeChecker.Entailment.$fShowEvidence2 }) -}
6f6912509d2a4ac2bb7eda47984ad932
  $fShowMatched ::
    GHC.Show.Show t =>
    GHC.Show.Show
      (Language.PureScript.TypeChecker.Entailment.Matched t)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ t (v :: GHC.Show.Show t).
                  @ (Language.PureScript.TypeChecker.Entailment.Matched t)
                  (Language.PureScript.TypeChecker.Entailment.$fShowMatched_$cshowsPrec
                     @ t
                     v)
                  (Language.PureScript.TypeChecker.Entailment.$fShowMatched_$cshow
                     @ t
                     v)
                  (Language.PureScript.TypeChecker.Entailment.$fShowMatched_$cshowList
                     @ t
                     v) -}
191feea95ef47a21aba5ef4537111b45
  $fShowMatched1 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.PureScript.TypeChecker.Entailment.$fShowMatched2) -}
000f3897cf39709dd1bd5705d023d4f1
  $fShowMatched2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.TypeChecker.Entailment.$fShowMatched3) -}
eb3eb8e7bf0fb185bad9874eee07d7c6
  $fShowMatched3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Unknown"#) -}
a629678a729c37d443fc4b6c4ba4a5f0
  $fShowMatched4 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1,
     Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   Language.PureScript.TypeChecker.Entailment.$fShowMatched5) -}
254d4c5d0a249b503f1580a4791f4bc7
  $fShowMatched5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.TypeChecker.Entailment.$fShowMatched6) -}
ae6ad9c9571b0d143314d278ef298713
  $fShowMatched6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Apart"#) -}
844c00c12e44098f4d12fdcae52c6622
  $fShowMatched7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.TypeChecker.Entailment.$fShowMatched8) -}
17e1489ba0746b902aa8ca8ee86d2d2c
  $fShowMatched8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Match "#) -}
6f6912509d2a4ac2bb7eda47984ad932
  $fShowMatched_$cshow ::
    GHC.Show.Show t =>
    Language.PureScript.TypeChecker.Entailment.Matched t
    -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U(1*C1(C1(C1(U))),A,A)><S,1*U>,
     Unfolding: (\ @ t
                   ($dShow :: GHC.Show.Show t)
                   (x :: Language.PureScript.TypeChecker.Entailment.Matched t) ->
                 case x of wild {
                   Language.PureScript.TypeChecker.Entailment.Match b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.TypeChecker.Entailment.$fShowMatched7
                        (GHC.Show.showsPrec
                           @ t
                           $dShow
                           Language.PureScript.TypeChecker.Entailment.$fShowEntailsResult8
                           b1
                           (GHC.Types.[] @ GHC.Types.Char))
                   Language.PureScript.TypeChecker.Entailment.Apart
                   -> Language.PureScript.TypeChecker.Entailment.$fShowMatched5
                   Language.PureScript.TypeChecker.Entailment.Unknown
                   -> Language.PureScript.TypeChecker.Entailment.$fShowMatched2 }) -}
6f6912509d2a4ac2bb7eda47984ad932
  $fShowMatched_$cshowList ::
    GHC.Show.Show t =>
    [Language.PureScript.TypeChecker.Entailment.Matched t]
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ t
                   ($dShow :: GHC.Show.Show t)
                   (ls :: [Language.PureScript.TypeChecker.Entailment.Matched t])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Language.PureScript.TypeChecker.Entailment.Matched t)
                   (Language.PureScript.TypeChecker.Entailment.$fShowMatched_$cshowsPrec
                      @ t
                      $dShow
                      Language.PureScript.TypeChecker.Entailment.$fShowEntailsResult1)
                   ls
                   s) -}
6f6912509d2a4ac2bb7eda47984ad932
  $fShowMatched_$cshowsPrec ::
    GHC.Show.Show t =>
    GHC.Types.Int
    -> Language.PureScript.TypeChecker.Entailment.Matched t
    -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,1*U(1*C1(C1(C(U))),A,A)><L,1*U(U)><S,1*U>,
     Unfolding: (\ @ t
                   ($dShow :: GHC.Show.Show t)
                   (a :: GHC.Types.Int)
                   (ds :: Language.PureScript.TypeChecker.Entailment.Matched t) ->
                 case ds of wild {
                   Language.PureScript.TypeChecker.Entailment.Match b1
                   -> case a of wild1 { GHC.Types.I# x ->
                      let {
                        g1 :: GHC.Base.String -> GHC.Base.String
                        = GHC.Show.showsPrec
                            @ t
                            $dShow
                            Language.PureScript.TypeChecker.Entailment.$fShowEntailsResult8
                            b1
                      } in
                      case GHC.Prim.>=# x 11# of lwild {
                        DEFAULT
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             Language.PureScript.TypeChecker.Entailment.$fShowMatched7
                             (g1 x1)
                        1#
                        -> \ (x1 :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                Language.PureScript.TypeChecker.Entailment.$fShowMatched7
                                (g1 (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x1))) } }
                   Language.PureScript.TypeChecker.Entailment.Apart
                   -> Language.PureScript.TypeChecker.Entailment.$fShowMatched4
                   Language.PureScript.TypeChecker.Entailment.Unknown
                   -> Language.PureScript.TypeChecker.Entailment.$fShowMatched1 }) -}
0d4a0154abc610395383891ca345a1b8
  $s$fEqMaybe ::
    GHC.Classes.Eq
      (GHC.Base.Maybe Language.PureScript.Names.ModuleName)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                  (\ (ds :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                     (ds1 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName) ->
                   case ds of wild {
                     GHC.Base.Nothing
                     -> case ds1 of wild1 {
                          GHC.Base.Nothing -> GHC.Types.True
                          GHC.Base.Just ipv -> GHC.Types.False }
                     GHC.Base.Just a2
                     -> case ds1 of wild1 {
                          GHC.Base.Nothing -> GHC.Types.False
                          GHC.Base.Just b1
                          -> GHC.Classes.$fEq[]_$c==
                               @ (Language.PureScript.Names.ProperName
                                    'Language.PureScript.Names.Namespace)
                               (Language.PureScript.Names.$fEqProperName
                                  @ 'Language.PureScript.Names.Namespace)
                               a2 `cast` (Language.PureScript.Names.N:ModuleName[0])
                               b1 `cast` (Language.PureScript.Names.N:ModuleName[0]) } })
                  Language.PureScript.TypeChecker.Entailment.$s$fEqMaybe_$s$fEqMaybe_$c/= -}
db23f76bf678ae1f92e9de3c1aba674a
  $s$fEqMaybe_$c== ::
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ds1 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName) ->
                 case ds of wild {
                   GHC.Base.Nothing
                   -> case ds1 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.True
                        GHC.Base.Just ipv -> GHC.Types.False }
                   GHC.Base.Just a2
                   -> case ds1 of wild1 {
                        GHC.Base.Nothing -> GHC.Types.False
                        GHC.Base.Just b1
                        -> GHC.Classes.$fEq[]_$c==
                             @ (Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.Namespace)
                             (Language.PureScript.Names.$fEqProperName
                                @ 'Language.PureScript.Names.Namespace)
                             a2 `cast` (Language.PureScript.Names.N:ModuleName[0])
                             b1 `cast` (Language.PureScript.Names.N:ModuleName[0]) } }) -}
9006eb1016359a560b7595343fb3c4dd
  $s$fEqMaybe_$s$fEqMaybe_$c/= ::
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (y :: GHC.Base.Maybe Language.PureScript.Names.ModuleName) ->
                 case x of wild {
                   GHC.Base.Nothing
                   -> case y of wild1 {
                        GHC.Base.Nothing -> GHC.Types.False
                        GHC.Base.Just ipv -> GHC.Types.True }
                   GHC.Base.Just a2
                   -> case y of wild1 {
                        GHC.Base.Nothing -> GHC.Types.True
                        GHC.Base.Just b1
                        -> case GHC.Classes.$fEq[]_$c==
                                  @ (Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.Namespace)
                                  (Language.PureScript.Names.$fEqProperName
                                     @ 'Language.PureScript.Names.Namespace)
                                  a2 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                  b1 `cast` (Language.PureScript.Names.N:ModuleName[0]) of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False } } }) -}
46767165a67c8696031240f2ea584c7c
  $s$fEqQualified ::
    GHC.Classes.Eq
      (Language.PureScript.Names.Qualified
         Language.PureScript.Names.Ident)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.Qualified
                       Language.PureScript.Names.Ident)
                  (Language.PureScript.Names.$fEqQualified_$c==
                     @ Language.PureScript.Names.Ident
                     Language.PureScript.Names.$fEqIdent)
                  Language.PureScript.TypeChecker.Entailment.$s$fEqQualified_$s$fEqQualified_$c/= -}
795af69415de76a1c119918d2588563d
  $s$fEqQualified_$s$fEqQualified_$c/= ::
    Language.PureScript.Names.Qualified Language.PureScript.Names.Ident
    -> Language.PureScript.Names.Qualified
         Language.PureScript.Names.Ident
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Names.Qualified
                           Language.PureScript.Names.Ident)
                   (y :: Language.PureScript.Names.Qualified
                           Language.PureScript.Names.Ident) ->
                 case Language.PureScript.Names.$fEqQualified_$c==
                        @ Language.PureScript.Names.Ident
                        Language.PureScript.Names.$fEqIdent
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
97b95274b2c70845672bb96a2e8ebf54
  $s$fMonoid(,) ::
    GHC.Base.Monoid
      (Data.Semigroup.Internal.Any,
       [(Language.PureScript.Names.Ident,
         Language.PureScript.TypeChecker.Entailment.InstanceContext,
         Language.PureScript.Types.SourceConstraint)])
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Semigroup.Internal.Any,
                     [(Language.PureScript.Names.Ident,
                       Language.PureScript.TypeChecker.Entailment.InstanceContext,
                       Language.PureScript.Types.SourceConstraint)])
                  Language.PureScript.TypeChecker.Entailment.$s$fMonoid(,)_$s$fSemigroup(,)
                  (GHC.Types.False `cast` (Sym (Data.Semigroup.Internal.N:Any[0])),
                   GHC.Types.[]
                     @ (Language.PureScript.Names.Ident,
                        Language.PureScript.TypeChecker.Entailment.InstanceContext,
                        Language.PureScript.Types.SourceConstraint))
                  (\ (ds :: (Data.Semigroup.Internal.Any,
                             [(Language.PureScript.Names.Ident,
                               Language.PureScript.TypeChecker.Entailment.InstanceContext,
                               Language.PureScript.Types.SourceConstraint)]))
                     (ds1 :: (Data.Semigroup.Internal.Any,
                              [(Language.PureScript.Names.Ident,
                                Language.PureScript.TypeChecker.Entailment.InstanceContext,
                                Language.PureScript.Types.SourceConstraint)])) ->
                   case ds of wild { (,) a2 b1 ->
                   case ds1 of wild1 { (,) a' b' ->
                   ((GHC.Classes.||
                       a2 `cast` (Data.Semigroup.Internal.N:Any[0])
                       a' `cast` (Data.Semigroup.Internal.N:Any[0]))
                      `cast`
                    (Sym (Data.Semigroup.Internal.N:Any[0])),
                    GHC.Base.augment
                      @ (Language.PureScript.Names.Ident,
                         Language.PureScript.TypeChecker.Entailment.InstanceContext,
                         Language.PureScript.Types.SourceConstraint)
                      (\ @ b
                         (c :: (Language.PureScript.Names.Ident,
                                Language.PureScript.TypeChecker.Entailment.InstanceContext,
                                Language.PureScript.Types.SourceConstraint)
                               -> b -> b)[OneShot]
                         (n :: b)[OneShot] ->
                       GHC.Base.foldr
                         @ (Language.PureScript.Names.Ident,
                            Language.PureScript.TypeChecker.Entailment.InstanceContext,
                            Language.PureScript.Types.SourceConstraint)
                         @ b
                         c
                         n
                         b1)
                      b') } })
                  (GHC.Base.$fMonoid(,)_$cmconcat
                     @ Data.Semigroup.Internal.Any
                     @ [(Language.PureScript.Names.Ident,
                         Language.PureScript.TypeChecker.Entailment.InstanceContext,
                         Language.PureScript.Types.SourceConstraint)]
                     Data.Semigroup.Internal.$fMonoidAny
                     (GHC.Base.$fMonoid[]
                        @ (Language.PureScript.Names.Ident,
                           Language.PureScript.TypeChecker.Entailment.InstanceContext,
                           Language.PureScript.Types.SourceConstraint))) -}
067ec46319f9f42455576c0805324afe
  $s$fMonoid(,)_$s$fSemigroup(,) ::
    GHC.Base.Semigroup
      (Data.Semigroup.Internal.Any,
       [(Language.PureScript.Names.Ident,
         Language.PureScript.TypeChecker.Entailment.InstanceContext,
         Language.PureScript.Types.SourceConstraint)])
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Semigroup.Internal.Any,
                     [(Language.PureScript.Names.Ident,
                       Language.PureScript.TypeChecker.Entailment.InstanceContext,
                       Language.PureScript.Types.SourceConstraint)])
                  (\ (ds :: (Data.Semigroup.Internal.Any,
                             [(Language.PureScript.Names.Ident,
                               Language.PureScript.TypeChecker.Entailment.InstanceContext,
                               Language.PureScript.Types.SourceConstraint)]))
                     (ds1 :: (Data.Semigroup.Internal.Any,
                              [(Language.PureScript.Names.Ident,
                                Language.PureScript.TypeChecker.Entailment.InstanceContext,
                                Language.PureScript.Types.SourceConstraint)])) ->
                   case ds of wild { (,) a2 b1 ->
                   case ds1 of wild1 { (,) a' b' ->
                   ((GHC.Classes.||
                       a2 `cast` (Data.Semigroup.Internal.N:Any[0])
                       a' `cast` (Data.Semigroup.Internal.N:Any[0]))
                      `cast`
                    (Sym (Data.Semigroup.Internal.N:Any[0])),
                    GHC.Base.augment
                      @ (Language.PureScript.Names.Ident,
                         Language.PureScript.TypeChecker.Entailment.InstanceContext,
                         Language.PureScript.Types.SourceConstraint)
                      (\ @ b
                         (c :: (Language.PureScript.Names.Ident,
                                Language.PureScript.TypeChecker.Entailment.InstanceContext,
                                Language.PureScript.Types.SourceConstraint)
                               -> b -> b)[OneShot]
                         (n :: b)[OneShot] ->
                       GHC.Base.foldr
                         @ (Language.PureScript.Names.Ident,
                            Language.PureScript.TypeChecker.Entailment.InstanceContext,
                            Language.PureScript.Types.SourceConstraint)
                         @ b
                         c
                         n
                         b1)
                      b') } })
                  (GHC.Base.$fSemigroup(,)_$csconcat
                     @ Data.Semigroup.Internal.Any
                     @ [(Language.PureScript.Names.Ident,
                         Language.PureScript.TypeChecker.Entailment.InstanceContext,
                         Language.PureScript.Types.SourceConstraint)]
                     Data.Semigroup.Internal.$fSemigroupAny
                     (GHC.Base.$fSemigroup[]
                        @ (Language.PureScript.Names.Ident,
                           Language.PureScript.TypeChecker.Entailment.InstanceContext,
                           Language.PureScript.Types.SourceConstraint)))
                  (\ @ b1
                     ($dIntegral :: GHC.Real.Integral b1)
                     (n :: b1)
                     (ds :: (Data.Semigroup.Internal.Any,
                             [(Language.PureScript.Names.Ident,
                               Language.PureScript.TypeChecker.Entailment.InstanceContext,
                               Language.PureScript.Types.SourceConstraint)])) ->
                   case ds of wild { (,) a2 b2 ->
                   (Data.Semigroup.Internal.$fSemigroupAny_$cstimes
                      @ b1
                      $dIntegral
                      n
                      a2,
                    GHC.Magic.noinline
                      @ (forall b a. GHC.Real.Integral b => b -> [a] -> [a])
                      Data.Semigroup.Internal.stimesList
                      @ b1
                      @ (Language.PureScript.Names.Ident,
                         Language.PureScript.TypeChecker.Entailment.InstanceContext,
                         Language.PureScript.Types.SourceConstraint)
                      $dIntegral
                      n
                      b2) }) -}
9819c1f77926891e7cea0830717870a4
  $s$fOrd(,)_$ccompare_$s$fOrdQualified ::
    GHC.Classes.Ord
      (Language.PureScript.Names.Qualified
         Language.PureScript.Names.Ident)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.Qualified
                       Language.PureScript.Names.Ident)
                  Language.PureScript.TypeChecker.Entailment.$s$fEqQualified
                  (Language.PureScript.Names.$fOrdQualified_$ccompare
                     @ Language.PureScript.Names.Ident
                     Language.PureScript.Names.$fOrdIdent)
                  (Language.PureScript.Names.$fOrdQualified_$c<
                     @ Language.PureScript.Names.Ident
                     Language.PureScript.Names.$fOrdIdent)
                  (\ (a2 :: Language.PureScript.Names.Qualified
                              Language.PureScript.Names.Ident)
                     (b :: Language.PureScript.Names.Qualified
                             Language.PureScript.Names.Ident) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ Language.PureScript.Names.Ident
                          Language.PureScript.Names.$fOrdIdent
                          b
                          a2 of wild {
                     GHC.Types.False -> GHC.Types.True
                     GHC.Types.True -> GHC.Types.False })
                  (\ (a2 :: Language.PureScript.Names.Qualified
                              Language.PureScript.Names.Ident)
                     (b :: Language.PureScript.Names.Qualified
                             Language.PureScript.Names.Ident) ->
                   Language.PureScript.Names.$fOrdQualified_$c<
                     @ Language.PureScript.Names.Ident
                     Language.PureScript.Names.$fOrdIdent
                     b
                     a2)
                  (\ (a2 :: Language.PureScript.Names.Qualified
                              Language.PureScript.Names.Ident)
                     (b :: Language.PureScript.Names.Qualified
                             Language.PureScript.Names.Ident) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ Language.PureScript.Names.Ident
                          Language.PureScript.Names.$fOrdIdent
                          a2
                          b of wild {
                     GHC.Types.False -> GHC.Types.True
                     GHC.Types.True -> GHC.Types.False })
                  (\ (x :: Language.PureScript.Names.Qualified
                             Language.PureScript.Names.Ident)
                     (y :: Language.PureScript.Names.Qualified
                             Language.PureScript.Names.Ident) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ Language.PureScript.Names.Ident
                          Language.PureScript.Names.$fOrdIdent
                          y
                          x of wild {
                     GHC.Types.False -> y GHC.Types.True -> x })
                  (\ (x :: Language.PureScript.Names.Qualified
                             Language.PureScript.Names.Ident)
                     (y :: Language.PureScript.Names.Qualified
                             Language.PureScript.Names.Ident) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ Language.PureScript.Names.Ident
                          Language.PureScript.Names.$fOrdIdent
                          y
                          x of wild {
                     GHC.Types.False -> x GHC.Types.True -> y }) -}
c475c94cebe2f75e4364f39830f7cc58
  $s$fOrdMaybe ::
    GHC.Classes.Ord
      (GHC.Base.Maybe Language.PureScript.Names.ModuleName)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                  Language.PureScript.TypeChecker.Entailment.$s$fEqMaybe
                  (\ (a2 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                     (b :: GHC.Base.Maybe Language.PureScript.Names.ModuleName) ->
                   case a2 of wild {
                     GHC.Base.Nothing
                     -> case b of wild1 {
                          GHC.Base.Nothing -> GHC.Types.EQ
                          GHC.Base.Just ipv -> GHC.Types.LT }
                     GHC.Base.Just a3
                     -> case b of wild1 {
                          GHC.Base.Nothing -> GHC.Types.GT
                          GHC.Base.Just b1
                          -> GHC.Classes.$fOrd[]_$ccompare
                               @ (Language.PureScript.Names.ProperName
                                    'Language.PureScript.Names.Namespace)
                               (Language.PureScript.Names.$fOrdProperName
                                  @ 'Language.PureScript.Names.Namespace)
                               a3 `cast` (Language.PureScript.Names.N:ModuleName[0])
                               b1 `cast` (Language.PureScript.Names.N:ModuleName[0]) } })
                  (\ (a2 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                     (b :: GHC.Base.Maybe Language.PureScript.Names.ModuleName) ->
                   case a2 of wild {
                     GHC.Base.Nothing
                     -> case b of wild1 {
                          GHC.Base.Nothing -> GHC.Types.False
                          GHC.Base.Just ipv -> GHC.Types.True }
                     GHC.Base.Just a3
                     -> case b of wild1 {
                          GHC.Base.Nothing -> GHC.Types.False
                          GHC.Base.Just b1
                          -> Language.PureScript.Names.$fOrdModuleName6
                               a3 `cast` (Language.PureScript.Names.N:ModuleName[0])
                               b1 `cast` (Language.PureScript.Names.N:ModuleName[0]) } })
                  (\ (a2 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                     (b :: GHC.Base.Maybe Language.PureScript.Names.ModuleName) ->
                   case b of wild {
                     GHC.Base.Nothing
                     -> case a2 of wild1 {
                          GHC.Base.Nothing -> GHC.Types.True
                          GHC.Base.Just ipv -> GHC.Types.False }
                     GHC.Base.Just a3
                     -> case a2 of wild1 {
                          GHC.Base.Nothing -> GHC.Types.True
                          GHC.Base.Just b1
                          -> case GHC.Classes.$fOrd[]_$ccompare
                                    @ (Language.PureScript.Names.ProperName
                                         'Language.PureScript.Names.Namespace)
                                    (Language.PureScript.Names.$fOrdProperName
                                       @ 'Language.PureScript.Names.Namespace)
                                    a3 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                    b1 `cast` (Language.PureScript.Names.N:ModuleName[0]) of wild2 {
                               DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False } } })
                  (\ (a2 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                     (b :: GHC.Base.Maybe Language.PureScript.Names.ModuleName) ->
                   case b of wild {
                     GHC.Base.Nothing
                     -> case a2 of wild1 {
                          GHC.Base.Nothing -> GHC.Types.False
                          GHC.Base.Just ipv -> GHC.Types.True }
                     GHC.Base.Just a3
                     -> case a2 of wild1 {
                          GHC.Base.Nothing -> GHC.Types.False
                          GHC.Base.Just b1
                          -> Language.PureScript.Names.$fOrdModuleName6
                               a3 `cast` (Language.PureScript.Names.N:ModuleName[0])
                               b1 `cast` (Language.PureScript.Names.N:ModuleName[0]) } })
                  (\ (a2 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                     (b :: GHC.Base.Maybe Language.PureScript.Names.ModuleName) ->
                   case a2 of wild {
                     GHC.Base.Nothing
                     -> case b of wild1 {
                          GHC.Base.Nothing -> GHC.Types.True
                          GHC.Base.Just ipv -> GHC.Types.False }
                     GHC.Base.Just a3
                     -> case b of wild1 {
                          GHC.Base.Nothing -> GHC.Types.True
                          GHC.Base.Just b1
                          -> case GHC.Classes.$fOrd[]_$ccompare
                                    @ (Language.PureScript.Names.ProperName
                                         'Language.PureScript.Names.Namespace)
                                    (Language.PureScript.Names.$fOrdProperName
                                       @ 'Language.PureScript.Names.Namespace)
                                    a3 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                    b1 `cast` (Language.PureScript.Names.N:ModuleName[0]) of wild2 {
                               DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False } } })
                  (\ (x :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                     (y :: GHC.Base.Maybe Language.PureScript.Names.ModuleName) ->
                   case y of wild {
                     GHC.Base.Nothing -> x
                     GHC.Base.Just a2
                     -> case x of wild1 {
                          GHC.Base.Nothing -> wild
                          GHC.Base.Just b1
                          -> case GHC.Classes.$fOrd[]_$ccompare
                                    @ (Language.PureScript.Names.ProperName
                                         'Language.PureScript.Names.Namespace)
                                    (Language.PureScript.Names.$fOrdProperName
                                       @ 'Language.PureScript.Names.Namespace)
                                    a2 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                    b1 `cast` (Language.PureScript.Names.N:ModuleName[0]) of wild2 {
                               DEFAULT -> wild GHC.Types.LT -> wild1 } } })
                  (\ (x :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                     (y :: GHC.Base.Maybe Language.PureScript.Names.ModuleName) ->
                   case y of wild {
                     GHC.Base.Nothing
                     -> case x of wild1 { DEFAULT ->
                        GHC.Base.Nothing @ Language.PureScript.Names.ModuleName }
                     GHC.Base.Just a2
                     -> case x of wild1 {
                          GHC.Base.Nothing
                          -> GHC.Base.Nothing @ Language.PureScript.Names.ModuleName
                          GHC.Base.Just b1
                          -> case GHC.Classes.$fOrd[]_$ccompare
                                    @ (Language.PureScript.Names.ProperName
                                         'Language.PureScript.Names.Namespace)
                                    (Language.PureScript.Names.$fOrdProperName
                                       @ 'Language.PureScript.Names.Namespace)
                                    a2 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                    b1 `cast` (Language.PureScript.Names.N:ModuleName[0]) of wild2 {
                               DEFAULT -> wild1 GHC.Types.LT -> wild } } }) -}
22445b840b4a26e313b0d982830bdd4f
  $s$fSemigroup(,)_$csconcat ::
    GHC.Base.NonEmpty
      (Data.Semigroup.Internal.Any,
       [(Language.PureScript.Names.Ident,
         Language.PureScript.TypeChecker.Entailment.InstanceContext,
         Language.PureScript.Types.SourceConstraint)])
    -> (Data.Semigroup.Internal.Any,
        [(Language.PureScript.Names.Ident,
          Language.PureScript.TypeChecker.Entailment.InstanceContext,
          Language.PureScript.Types.SourceConstraint)])
  {- Arity: 1, Strictness: <S(SS),1*U(1*U(U,U),1*U)>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w2 :: GHC.Base.NonEmpty
                            (Data.Semigroup.Internal.Any,
                             [(Language.PureScript.Names.Ident,
                               Language.PureScript.TypeChecker.Entailment.InstanceContext,
                               Language.PureScript.Types.SourceConstraint)])) ->
                 case w2 of ww { GHC.Base.:| ww1 ww2 ->
                 case ww1 of ww3 { (,) ww4 ww5 ->
                 case GHC.Base.$w$csconcat
                        @ Data.Semigroup.Internal.Any
                        @ [(Language.PureScript.Names.Ident,
                            Language.PureScript.TypeChecker.Entailment.InstanceContext,
                            Language.PureScript.Types.SourceConstraint)]
                        Data.Semigroup.Internal.$fSemigroupAny
                        (GHC.Base.$fSemigroup[]
                           @ (Language.PureScript.Names.Ident,
                              Language.PureScript.TypeChecker.Entailment.InstanceContext,
                              Language.PureScript.Types.SourceConstraint))
                        ww4
                        ww5
                        ww2 of ww6 { (#,#) ww7 ww8 ->
                 (ww7, ww8) } } }) -}
a9914145d8ca97a06f0c3ba3b761a093
  $s$fSemigroup(,)_$cstimes ::
    GHC.Real.Integral b1 =>
    b1
    -> (Data.Semigroup.Internal.Any,
        [(Language.PureScript.Names.Ident,
          Language.PureScript.TypeChecker.Entailment.InstanceContext,
          Language.PureScript.Types.SourceConstraint)])
    -> (Data.Semigroup.Internal.Any,
        [(Language.PureScript.Names.Ident,
          Language.PureScript.TypeChecker.Entailment.InstanceContext,
          Language.PureScript.Types.SourceConstraint)])
  {- Arity: 3,
     Strictness: <L,U(U(U(U,U,U,U,U,U,U),U(U,U,U,U,U,U,U,U),U),U,U,U,U,U,U,U,U)><L,U><S,1*U(U,U)>m,
     Unfolding: InlineRule (3, True, False)
                (\ @ b1
                   ($dIntegral :: GHC.Real.Integral b1)
                   (n :: b1)
                   (ds :: (Data.Semigroup.Internal.Any,
                           [(Language.PureScript.Names.Ident,
                             Language.PureScript.TypeChecker.Entailment.InstanceContext,
                             Language.PureScript.Types.SourceConstraint)])) ->
                 case ds of wild { (,) a2 b2 ->
                 (Data.Semigroup.Internal.$fSemigroupAny_$cstimes
                    @ b1
                    $dIntegral
                    n
                    a2,
                  GHC.Magic.noinline
                    @ (forall b a. GHC.Real.Integral b => b -> [a] -> [a])
                    Data.Semigroup.Internal.stimesList
                    @ b1
                    @ (Language.PureScript.Names.Ident,
                       Language.PureScript.TypeChecker.Entailment.InstanceContext,
                       Language.PureScript.Types.SourceConstraint)
                    $dIntegral
                    n
                    b2) }) -}
4e1cab256e625447ebfb6dda1845d177
  $s$wsplitLookup_$s$w$sgo1 ::
    GHC.Prim.Int#
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> a
    -> Data.Map.Internal.Map
         (GHC.Base.Maybe Language.PureScript.Names.ModuleName) a
    -> Data.Map.Internal.Map
         (GHC.Base.Maybe Language.PureScript.Names.ModuleName) a
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> (# Data.Map.Internal.Map
            (GHC.Base.Maybe Language.PureScript.Names.ModuleName) a,
          GHC.Base.Maybe a,
          Data.Map.Internal.Map
            (GHC.Base.Maybe Language.PureScript.Names.ModuleName) a #)
  {- Arity: 6, Strictness: <L,A><S,U><L,U><L,U><L,U><S,1*U> -}
08120eea1fa6202ea8f4b494816e5241
  $s$wsplitLookup_$s$w$sgo13 ::
    GHC.Prim.Int#
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> a
    -> Data.Map.Internal.Map Data.Text.Internal.Text a
    -> Data.Map.Internal.Map Data.Text.Internal.Text a
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.ByteArray#
    -> (# Data.Map.Internal.Map Data.Text.Internal.Text a,
          GHC.Base.Maybe a,
          Data.Map.Internal.Map Data.Text.Internal.Text a #)
  {- Arity: 10,
     Strictness: <L,A><S,U><S,U><S,U><L,U><L,U><L,U><S,U><S,U><S,U> -}
8529bcd7587cc92223d7d29e87a51005
  $s$wsplitLookup_$s$w$sgo2 ::
    Data.Map.Internal.Map
      (GHC.Base.Maybe Language.PureScript.Names.ModuleName) a
    -> Language.PureScript.Names.ModuleName
    -> (# Data.Map.Internal.Map
            (GHC.Base.Maybe Language.PureScript.Names.ModuleName) a,
          GHC.Base.Maybe a,
          Data.Map.Internal.Map
            (GHC.Base.Maybe Language.PureScript.Names.ModuleName) a #)
  {- Arity: 2, Strictness: <S,1*U><L,U> -}
9970cdcaa02e1cb29e978df6d9a9b2a3
  $s$wsplitLookup_$s$w$sgo3 ::
    GHC.Prim.Int#
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> a
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName))
         a
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName))
         a
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> (# Data.Map.Internal.Map
            (Language.PureScript.Names.Qualified
               (Language.PureScript.Names.ProperName
                  'Language.PureScript.Names.ClassName))
            a,
          GHC.Base.Maybe a,
          Data.Map.Internal.Map
            (Language.PureScript.Names.Qualified
               (Language.PureScript.Names.ProperName
                  'Language.PureScript.Names.ClassName))
            a #)
  {- Arity: 8,
     Strictness: <L,A><S,U><L,U(U,U,U)><L,U><L,U><L,U><L,U(U,U,U)><S,U> -}
a24fcb238971137f16dacba23b917ef3
  $s$wsplitLookup_$s$w$sgo4 ::
    GHC.Prim.Int#
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.Ident
    -> a
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            Language.PureScript.Names.Ident)
         a
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            Language.PureScript.Names.Ident)
         a
    -> Language.PureScript.Names.Ident
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> (# Data.Map.Internal.Map
            (Language.PureScript.Names.Qualified
               Language.PureScript.Names.Ident)
            a,
          GHC.Base.Maybe a,
          Data.Map.Internal.Map
            (Language.PureScript.Names.Qualified
               Language.PureScript.Names.Ident)
            a #)
  {- Arity: 8,
     Strictness: <L,A><S,U><L,U><L,U><L,U><L,U><L,U><S,U> -}
6f7651a2cacc8a56f3eccb0ac6c48f16
  $s$wsplitS ::
    GHC.Types.Int
    -> Data.Set.Internal.Set GHC.Types.Int
    -> (# Data.Set.Internal.Set GHC.Types.Int,
          Data.Set.Internal.Set GHC.Types.Int #)
  {- Arity: 2, Strictness: <L,1*U(U)><S,1*U>, Inline: [~] -}
9af6e99c3b2db487e445c6a785595411
  $s$wsplitS1 ::
    Data.Text.Internal.Text
    -> Data.Set.Internal.Set Data.Text.Internal.Text
    -> (# Data.Set.Internal.Set Data.Text.Internal.Text,
          Data.Set.Internal.Set Data.Text.Internal.Text #)
  {- Arity: 2, Strictness: <L,1*U(U,U,U)><S,1*U>, Inline: [~] -}
cfe7cfdd9a31db5eb44bb6de35839af2
  $s$wsplit_$s$wpoly_go13 ::
    Data.Map.Internal.Map Data.Text.Internal.Text a
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> (# Data.Map.Internal.Map Data.Text.Internal.Text a,
          Data.Map.Internal.Map Data.Text.Internal.Text a #)
  {- Arity: 4, Strictness: <S,1*U><L,U><L,U><L,U> -}
3882ac9f1afc4ec49256159d1da13306
  $sdifference ::
    Data.Set.Internal.Set Data.Text.Internal.Text
    -> Data.Set.Internal.Set Data.Text.Internal.Text
    -> Data.Set.Internal.Set Data.Text.Internal.Text
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [~] -}
8a6a809a6aefb4a8fe67d111e2833bac
  $sfromList ::
    [(Data.Text.Internal.Text, a)]
    -> Data.Map.Internal.Map Data.Text.Internal.Text a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a (ds :: [(Data.Text.Internal.Text, a)]) ->
                 case ds of wild {
                   [] -> Data.Map.Internal.Tip @ Data.Text.Internal.Text @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case kx of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                           Data.Map.Internal.Bin
                             @ Data.Text.Internal.Text
                             @ a
                             1#
                             dt
                             x
                             (Data.Map.Internal.Tip @ Data.Text.Internal.Text @ a)
                             (Data.Map.Internal.Tip @ Data.Text.Internal.Text @ a) }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case kx of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                           case ky of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                           case Data.Text.$w$ccompare ww1 ww2 ww3 ww5 ww6 ww7 of wild4 {
                             DEFAULT
                             -> Language.PureScript.TypeChecker.Entailment.$sfromList_$spoly_go14
                                  @ a
                                  ww5
                                  ww6
                                  ww7
                                  ds3
                                  ipv1
                                  (Data.Map.Internal.Bin
                                     @ Data.Text.Internal.Text
                                     @ a
                                     1#
                                     ww
                                     x
                                     (Data.Map.Internal.Tip @ Data.Text.Internal.Text @ a)
                                     (Data.Map.Internal.Tip @ Data.Text.Internal.Text @ a))
                             GHC.Types.LT
                             -> Language.PureScript.TypeChecker.Entailment.$sfromList_$s$wpoly_go13
                                  @ a
                                  ww5
                                  ww6
                                  ww7
                                  ds3
                                  ipv1
                                  (Data.Map.Internal.Bin
                                     @ Data.Text.Internal.Text
                                     @ a
                                     1#
                                     ww
                                     x
                                     (Data.Map.Internal.Tip @ Data.Text.Internal.Text @ a)
                                     (Data.Map.Internal.Tip @ Data.Text.Internal.Text @ a))
                                  1# } } } } } } }) -}
aee209371fd5c9d640aeb207ed5c405f
  $sfromList1 ::
    [GHC.Types.Int] -> Data.Set.Internal.Set GHC.Types.Int
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [GHC.Types.Int]) ->
                 case ds of wild {
                   [] -> Data.Set.Internal.Tip @ GHC.Types.Int
                   : x ds1
                   -> case ds1 of wild1 {
                        []
                        -> case x of dt { GHC.Types.I# ipv ->
                           Data.Set.Internal.Bin
                             @ GHC.Types.Int
                             1#
                             dt
                             (Data.Set.Internal.Tip @ GHC.Types.Int)
                             (Data.Set.Internal.Tip @ GHC.Types.Int) }
                        : ipv ipv1
                        -> case x of wild2 { GHC.Types.I# x1 ->
                           case ipv of wild3 { GHC.Types.I# y ->
                           case GHC.Prim.>=# x1 y of lwild {
                             DEFAULT
                             -> Language.PureScript.TypeChecker.Entailment.$sfromList_$s$wgo3
                                  y
                                  ipv1
                                  (Data.Set.Internal.Bin
                                     @ GHC.Types.Int
                                     1#
                                     wild2
                                     (Data.Set.Internal.Tip @ GHC.Types.Int)
                                     (Data.Set.Internal.Tip @ GHC.Types.Int))
                                  1#
                             1#
                             -> Language.PureScript.TypeChecker.Entailment.$sfromList_$sgo4
                                  y
                                  ipv1
                                  (Data.Set.Internal.Bin
                                     @ GHC.Types.Int
                                     1#
                                     wild2
                                     (Data.Set.Internal.Tip @ GHC.Types.Int)
                                     (Data.Set.Internal.Tip @ GHC.Types.Int)) } } } } }) -}
3a756429788cd0a9081f2531de62a848
  $sfromList2 ::
    [Data.Text.Internal.Text]
    -> Data.Set.Internal.Set Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [Data.Text.Internal.Text]) ->
                 case ds of wild {
                   [] -> Data.Set.Internal.Tip @ Data.Text.Internal.Text
                   : x ds1
                   -> case ds1 of wild1 {
                        []
                        -> case x of dt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                           Data.Set.Internal.Bin
                             @ Data.Text.Internal.Text
                             1#
                             dt
                             (Data.Set.Internal.Tip @ Data.Text.Internal.Text)
                             (Data.Set.Internal.Tip @ Data.Text.Internal.Text) }
                        : ipv ipv1
                        -> case x of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                           case ipv of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                           case Data.Text.$w$ccompare ww1 ww2 ww3 ww5 ww6 ww7 of wild2 {
                             DEFAULT
                             -> Language.PureScript.TypeChecker.Entailment.$sfromList_$sgo1
                                  ww5
                                  ww6
                                  ww7
                                  ipv1
                                  (Data.Set.Internal.Bin
                                     @ Data.Text.Internal.Text
                                     1#
                                     ww
                                     (Data.Set.Internal.Tip @ Data.Text.Internal.Text)
                                     (Data.Set.Internal.Tip @ Data.Text.Internal.Text))
                             GHC.Types.LT
                             -> Language.PureScript.TypeChecker.Entailment.$sfromList_$s$wgo1
                                  ww5
                                  ww6
                                  ww7
                                  ipv1
                                  (Data.Set.Internal.Bin
                                     @ Data.Text.Internal.Text
                                     1#
                                     ww
                                     (Data.Set.Internal.Tip @ Data.Text.Internal.Text)
                                     (Data.Set.Internal.Tip @ Data.Text.Internal.Text))
                                  1# } } } } }) -}
d7bff0982793fc2ccc4fd7ade1ca5c6c
  $sfromList_$s$wgo1 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> [Data.Text.Internal.Text]
    -> Data.Set.Internal.Set Data.Text.Internal.Text
    -> GHC.Prim.Int#
    -> Data.Set.Internal.Set Data.Text.Internal.Text
  {- Arity: 6, Strictness: <S,U><S,U><S,U><S,1*U><S,1*U><L,U> -}
cb35811ae267d7d488853ff0e4f52346
  $sfromList_$s$wgo3 ::
    GHC.Prim.Int#
    -> [GHC.Types.Int]
    -> Data.Set.Internal.Set GHC.Types.Int
    -> GHC.Prim.Int#
    -> Data.Set.Internal.Set GHC.Types.Int
  {- Arity: 4, Strictness: <S,U><S,1*U><S,1*U><L,U> -}
5d1196b34d882d9c70e494f994ed624d
  $sfromList_$s$wpoly_go13 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> a
    -> [(Data.Text.Internal.Text, a)]
    -> Data.Map.Internal.Map Data.Text.Internal.Text a
    -> GHC.Prim.Int#
    -> Data.Map.Internal.Map Data.Text.Internal.Text a
  {- Arity: 7, Strictness: <S,U><S,U><S,U><L,U><S,1*U><S,1*U><L,U> -}
dbba97e7e5c27174e29951ea258bb70e
  $sfromList_$sgo1 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> [Data.Text.Internal.Text]
    -> Data.Set.Internal.Set Data.Text.Internal.Text
    -> Data.Set.Internal.Set Data.Text.Internal.Text
  {- Arity: 5, Strictness: <S,U><S,U><S,U><S,1*U><S,1*U> -}
29d802eb0a6352f73170952077496772
  $sfromList_$sgo4 ::
    GHC.Prim.Int#
    -> [GHC.Types.Int]
    -> Data.Set.Internal.Set GHC.Types.Int
    -> Data.Set.Internal.Set GHC.Types.Int
  {- Arity: 3, Strictness: <S,U><S,1*U><S,1*U> -}
b5abf427b907c8ac4eab30e39fd93d2f
  $sfromList_$spoly_go14 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> a
    -> [(Data.Text.Internal.Text, a)]
    -> Data.Map.Internal.Map Data.Text.Internal.Text a
    -> Data.Map.Internal.Map Data.Text.Internal.Text a
  {- Arity: 6, Strictness: <S,U><S,U><S,U><L,U><S,1*U><S,1*U> -}
dd4d88374dcf25dcf88163851251b37a
  $sinsertWithR_$s$sgo13 ::
    Data.Map.Internal.Map
      (GHC.Base.Maybe Language.PureScript.Names.ModuleName) a1
    -> a1
    -> Language.PureScript.Names.ModuleName
    -> (a1 -> a1 -> a1)
    -> Data.Map.Internal.Map
         (GHC.Base.Maybe Language.PureScript.Names.ModuleName) a1
  {- Arity: 4, Strictness: <S,1*U><L,U><L,U><L,1*C1(C1(U))> -}
755149bd21458b875268ab7d78934434
  $sinsertWithR_$sgo3 ::
    (a1 -> a1 -> a1)
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> a1
    -> Data.Map.Internal.Map
         (GHC.Base.Maybe Language.PureScript.Names.ModuleName) a1
    -> Data.Map.Internal.Map
         (GHC.Base.Maybe Language.PureScript.Names.ModuleName) a1
  {- Arity: 4, Strictness: <L,1*C1(C1(U))><S,1*U><L,U><S,1*U> -}
b3d37079a605ca4ea3239a766a52df54
  $sinsertWith_$s$sgo1 ::
    Data.Map.Internal.Map
      (GHC.Base.Maybe Language.PureScript.Names.ModuleName) a
    -> a
    -> Language.PureScript.Names.ModuleName
    -> (a -> a -> a)
    -> Data.Map.Internal.Map
         (GHC.Base.Maybe Language.PureScript.Names.ModuleName) a
  {- Arity: 4, Strictness: <S,1*U><L,U><L,U><L,1*C1(C1(U))> -}
622bd42031e3bbefaffc11708ad50e90
  $sinsertWith_$s$sgo13 ::
    GHC.Prim.Int#
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> a
    -> Data.Map.Internal.Map
         (GHC.Base.Maybe Language.PureScript.Names.ModuleName) a
    -> Data.Map.Internal.Map
         (GHC.Base.Maybe Language.PureScript.Names.ModuleName) a
    -> a
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> (a -> a -> a)
    -> Data.Map.Internal.Map
         (GHC.Base.Maybe Language.PureScript.Names.ModuleName) a
  {- Arity: 8,
     Strictness: <L,U><S,U><L,U><L,U><L,U><L,U><S,1*U><L,1*C1(C1(U))> -}
e5dbe9257472e4f0defcfd803da7e57c
  $sinsertWith_$s$w$sgo1 ::
    GHC.Prim.Int#
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> a
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName))
         a
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName))
         a
    -> a
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> (a -> a -> a)
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName))
         a
  {- Arity: 10,
     Strictness: <L,U><S,U><L,U(U,U,U)><L,U><L,U><L,U><L,U><L,U(U,U,U)><S,U><L,1*C1(C1(U))> -}
273722c8139813c62afeec5f7dd31298
  $sinsertWith_$s$w$sgo13 ::
    GHC.Prim.Int#
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.Ident
    -> a
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            Language.PureScript.Names.Ident)
         a
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            Language.PureScript.Names.Ident)
         a
    -> a
    -> Language.PureScript.Names.Ident
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> (a -> a -> a)
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            Language.PureScript.Names.Ident)
         a
  {- Arity: 10,
     Strictness: <L,U><S,U><L,U><L,U><L,U><L,U><L,U><L,U><S,U><L,1*C1(C1(U))> -}
9cbc2881da3e75f012ed514e77e3ce44
  $sinsertWith_$sgo3 ::
    (a1 -> a1 -> a1)
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> a1
    -> Data.Map.Internal.Map
         (GHC.Base.Maybe Language.PureScript.Names.ModuleName) a1
    -> Data.Map.Internal.Map
         (GHC.Base.Maybe Language.PureScript.Names.ModuleName) a1
  {- Arity: 4, Strictness: <L,1*C1(C1(U))><S,1*U><L,U><S,1*U> -}
72e9d1120263d2ad7358074d1ed213cc
  $sinsert_$s$w$sgo1 ::
    GHC.Prim.Int#
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Set.Internal.Set Data.Text.Internal.Text
    -> Data.Set.Internal.Set Data.Text.Internal.Text
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.ByteArray#
    -> Data.Text.Internal.Text
    -> Data.Set.Internal.Set Data.Text.Internal.Text
  {- Arity: 10,
     Strictness: <L,U><S,U><S,U><S,U><L,U><L,U><S,U><S,U><S,U><L,U> -}
f59b0d0ed9af66cfd1fc6c2956be148f
  $sinsert_$s$w$sgo3 ::
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Set.Internal.Set GHC.Types.Int
    -> Data.Set.Internal.Set GHC.Types.Int
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> Data.Set.Internal.Set GHC.Types.Int
  {- Arity: 6, Strictness: <L,U><S,U><L,U><L,U><S,U><L,U> -}
27c8dd304ef020e77494ac6bbedcc9ce
  $sisSubsetOf ::
    Data.Set.Internal.Set GHC.Types.Int
    -> Data.Set.Internal.Set GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (t1 :: Data.Set.Internal.Set GHC.Types.Int)
                   (t2 :: Data.Set.Internal.Set GHC.Types.Int) ->
                 case t1 of wild {
                   Data.Set.Internal.Bin dt ds ds1 ds2
                   -> case t2 of wild1 {
                        Data.Set.Internal.Bin dt1 ds3 ds4 ds5
                        -> case GHC.Prim.<=# dt dt1 of lwild {
                             DEFAULT -> GHC.Types.False
                             1#
                             -> Data.Set.Internal.isProperSubsetOf_$sisSubsetOfX2
                                  @ GHC.Types.Int
                                  dt1
                                  ds3
                                  ds4
                                  ds5
                                  dt
                                  ds
                                  ds1
                                  ds2
                                  GHC.Classes.$fOrdInt }
                        Data.Set.Internal.Tip -> GHC.Types.False }
                   Data.Set.Internal.Tip
                   -> case t2 of wild1 {
                        Data.Set.Internal.Bin dt ds ds1 ds2
                        -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.<=# 0# dt)
                        Data.Set.Internal.Tip
                        -> Language.PureScript.TypeChecker.Entailment.$sisSubsetOf1 } }) -}
60bd71a92a96491b96a020468a00108c
  $sisSubsetOf1 :: GHC.Types.Bool
  {- Unfolding: (Language.PureScript.TypeChecker.Entailment.$sisSubsetOf_$sisSubsetOfX
                   (Data.Set.Internal.Tip @ GHC.Types.Int)
                   (Data.Set.Internal.Tip @ GHC.Types.Int)) -}
53c90e9c4f46de522b9ad962329796eb
  $sisSubsetOf_$sisSubsetOfX ::
    Data.Set.Internal.Set GHC.Types.Int
    -> Data.Set.Internal.Set GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [~] -}
561fa5b7ac78ba1a89cbe580a43d71e6
  $slookup3 ::
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Data.Map.Internal.Map
         (GHC.Base.Maybe Language.PureScript.Names.ModuleName) a
    -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ @ a
                   (ds :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ds1 :: Data.Map.Internal.Map
                             (GHC.Base.Maybe Language.PureScript.Names.ModuleName) a) ->
                 case ds of ds2 { DEFAULT ->
                 case ds1 of wild {
                   Data.Map.Internal.Bin ipv ipv1 ipv2 ipv3 ipv4
                   -> case ds2 of wild1 {
                        GHC.Base.Nothing
                        -> case ipv1 of wild2 {
                             GHC.Base.Nothing -> GHC.Base.Just @ a ipv2
                             GHC.Base.Just ipv7
                             -> Language.PureScript.TypeChecker.Entailment.$slookup_$spoly_go1
                                  @ a
                                  ipv3 }
                        GHC.Base.Just a2
                        -> case ipv1 of wild2 {
                             GHC.Base.Nothing
                             -> Language.PureScript.TypeChecker.Entailment.$slookup_$spoly_go13
                                  @ a
                                  ipv4
                                  a2
                             GHC.Base.Just b1
                             -> case GHC.Classes.$fOrd[]_$ccompare
                                       @ (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.Namespace)
                                       (Language.PureScript.Names.$fOrdProperName
                                          @ 'Language.PureScript.Names.Namespace)
                                       a2 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                       b1
                                         `cast`
                                       (Language.PureScript.Names.N:ModuleName[0]) of wild3 {
                                  GHC.Types.LT
                                  -> Language.PureScript.TypeChecker.Entailment.$slookup_$spoly_go13
                                       @ a
                                       ipv3
                                       a2
                                  GHC.Types.EQ -> GHC.Base.Just @ a ipv2
                                  GHC.Types.GT
                                  -> Language.PureScript.TypeChecker.Entailment.$slookup_$spoly_go13
                                       @ a
                                       ipv4
                                       a2 } } }
                   Data.Map.Internal.Tip -> GHC.Base.Nothing @ a } }) -}
62def3d67709e7dcf1474826f2a4a2a3
  $slookup_$s$wpoly_go1 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName))
      a
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U(U,U,U)> -}
da12958ae1a0bef5a5c11caa7cad5bef
  $slookup_$s$wpoly_go13 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName))
      a
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> Language.PureScript.Names.ModuleName
    -> GHC.Base.Maybe a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U(U,U,U)><L,U> -}
23834c5420335b8af41b417b8eb1d48c
  $slookup_$s$wpoly_go2 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName))
      a
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> ((Data.Text.Internal.Text :: *)
        ~R# (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName :: *)) =>
       GHC.Base.Maybe a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S,1*U><L,U><L,U><L,U><L,U> -}
38364abcaa5bc1ec9542529ca703b78f
  $slookup_$spoly_go1 ::
    Data.Map.Internal.Map
      (GHC.Base.Maybe Language.PureScript.Names.ModuleName) a
    -> GHC.Base.Maybe a
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
b776a1bb056c877d61c2b1358b9af834
  $slookup_$spoly_go13 ::
    Data.Map.Internal.Map
      (GHC.Base.Maybe Language.PureScript.Names.ModuleName) a
    -> Language.PureScript.Names.ModuleName -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U> -}
bc3ccc0e7f4ae654c856fdc251ee7ac6
  $sunion ::
    Data.Map.Internal.Map Data.Text.Internal.Text a
    -> Data.Map.Internal.Map Data.Text.Internal.Text a
    -> Data.Map.Internal.Map Data.Text.Internal.Text a
  {- Arity: 2, Strictness: <S,1*U><S,1*U>, Inline: [~] -}
3a2fcdbecfadd4d527989c79760f4181
  $sunion1 ::
    Data.Set.Internal.Set GHC.Types.Int
    -> Data.Set.Internal.Set GHC.Types.Int
    -> Data.Set.Internal.Set GHC.Types.Int
  {- Arity: 2, Strictness: <S,1*U><S,1*U>, Inline: [~] -}
2041366b664b854cfd8170cc4f319578
  $sunion2 ::
    Data.Set.Internal.Set Data.Text.Internal.Text
    -> Data.Set.Internal.Set Data.Text.Internal.Text
    -> Data.Set.Internal.Set Data.Text.Internal.Text
  {- Arity: 2, Strictness: <S,1*U><S,1*U>, Inline: [~] -}
1e7754699d2b04085c4b175dfc9c3839
  $sunionWith ::
    (a -> a -> a)
    -> Data.Map.Internal.Map Data.Text.Internal.Text a
    -> Data.Map.Internal.Map Data.Text.Internal.Text a
    -> Data.Map.Internal.Map Data.Text.Internal.Text a
  {- Arity: 3, Strictness: <L,C(C1(U))><S,1*U><S,1*U>, Inline: [~] -}
64d9cefe0154d6670f79958156588dbf
  $sunionWith1 ::
    (a -> a -> a)
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            Language.PureScript.Names.Ident)
         a
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            Language.PureScript.Names.Ident)
         a
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            Language.PureScript.Names.Ident)
         a
  {- Arity: 3, Strictness: <L,C(C1(U))><S,1*U><S,1*U>, Inline: [~] -}
da69b8d5862f861127c47e4c8316f473
  $sunionWith2 ::
    (a -> a -> a)
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName))
         a
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName))
         a
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName))
         a
  {- Arity: 3, Strictness: <L,C(C1(U))><S,1*U><S,1*U>, Inline: [~] -}
20086d9c8eb401ff06a02aa41194d999
  $sunionWith3 ::
    (a -> a -> a)
    -> Data.Map.Internal.Map
         (GHC.Base.Maybe Language.PureScript.Names.ModuleName) a
    -> Data.Map.Internal.Map
         (GHC.Base.Maybe Language.PureScript.Names.ModuleName) a
    -> Data.Map.Internal.Map
         (GHC.Base.Maybe Language.PureScript.Names.ModuleName) a
  {- Arity: 3, Strictness: <L,C(C1(U))><S,1*U><S,1*U>, Inline: [~] -}
da15c98e6bab1f41b5b791cceb67733b
  $tc'Apart :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17200052297118683303##
                   15685236424304191072##
                   Language.PureScript.TypeChecker.Entailment.$trModule
                   Language.PureScript.TypeChecker.Entailment.$tc'Apart2
                   1#
                   Language.PureScript.TypeChecker.Entailment.$tc'Apart1) -}
fca93a8b6ff0207974bc2a3f41e5e00a
  $tc'Apart1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
d5c25d7a7995148c782a9b4521d9482c
  $tc'Apart2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.TypeChecker.Entailment.$tc'Apart3) -}
67abc7f2bc1a28ec1c5498e63ee651c1
  $tc'Apart3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Apart"#) -}
c0d47f61588891e1946695107c47ad95
  $tc'Deferred :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2142538467744524484##
                   2379808392320312960##
                   Language.PureScript.TypeChecker.Entailment.$trModule
                   Language.PureScript.TypeChecker.Entailment.$tc'Deferred2
                   1#
                   Language.PureScript.TypeChecker.Entailment.$tc'Deferred1) -}
b87f1650dc81eb526364e3288bec3e50
  $tc'Deferred1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
d304d242bf4b207acafae12da4b58465
  $tc'Deferred2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.TypeChecker.Entailment.$tc'Deferred3) -}
d7452c238d2566b729449d00689365bf
  $tc'Deferred3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Deferred"#) -}
01b13aecce23163ca10c8ef55cead92b
  $tc'EmptyClassInstance :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9500191223937168998##
                   4328882938274089994##
                   Language.PureScript.TypeChecker.Entailment.$trModule
                   Language.PureScript.TypeChecker.Entailment.$tc'EmptyClassInstance2
                   0#
                   Language.PureScript.TypeChecker.Entailment.$tc'EmptyClassInstance1) -}
b1f8a4223788feecddc2b14022205095
  $tc'EmptyClassInstance1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
0d50b3d667b34c8aa50fc4f83d8963bf
  $tc'EmptyClassInstance2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.TypeChecker.Entailment.$tc'EmptyClassInstance3) -}
cfba82c3e191ce019d89f9f7b763581c
  $tc'EmptyClassInstance3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'EmptyClassInstance"#) -}
2ffbd994d4dcf52642878c947b7b0d1e
  $tc'IsSymbolInstance :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5208218890564263345##
                   7680570721372804348##
                   Language.PureScript.TypeChecker.Entailment.$trModule
                   Language.PureScript.TypeChecker.Entailment.$tc'IsSymbolInstance2
                   0#
                   Language.PureScript.TypeChecker.Entailment.$tc'IsSymbolInstance1) -}
8baf8476f731ddacc796192f09409d4a
  $tc'IsSymbolInstance1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
c7adbd50f8f61a49fe71114422ad8aed
  $tc'IsSymbolInstance2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.TypeChecker.Entailment.$tc'IsSymbolInstance3) -}
53ecc1719c434bb0b1fba7677089e0a8
  $tc'IsSymbolInstance3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'IsSymbolInstance"#) -}
55df4c3a4948d5d17d2db6c4b97888ec
  $tc'Match :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8133832074883231660##
                   15933089446423474360##
                   Language.PureScript.TypeChecker.Entailment.$trModule
                   Language.PureScript.TypeChecker.Entailment.$tc'Match2
                   1#
                   Language.PureScript.TypeChecker.Entailment.$tc'Match1) -}
c847b9c0420addb481caba2d73e09a95
  $tc'Match1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
0dd48d728fc7b983fd714b068046b338
  $tc'Match2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.TypeChecker.Entailment.$tc'Match3) -}
09fc33474b1ebf7b9427ec9af9bd84f1
  $tc'Match3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Match"#) -}
e6eb84b93384bc24ace9b324ad888b19
  $tc'NamedInstance :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4133711759290283275##
                   9718112203999483390##
                   Language.PureScript.TypeChecker.Entailment.$trModule
                   Language.PureScript.TypeChecker.Entailment.$tc'NamedInstance2
                   0#
                   Language.PureScript.TypeChecker.Entailment.$tc'NamedInstance1) -}
b0af127f38d5b30806e41aff2d632cf4
  $tc'NamedInstance1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
4ca8be19ac260e61621e8f5067b6580f
  $tc'NamedInstance2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.TypeChecker.Entailment.$tc'NamedInstance3) -}
e0609686ae4f61cd64cfeb05c4fa48cd
  $tc'NamedInstance3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'NamedInstance"#) -}
3a9a914c494ebb16ae80d4083be6b0e2
  $tc'Solved :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2868338364492823027##
                   5267526408644963364##
                   Language.PureScript.TypeChecker.Entailment.$trModule
                   Language.PureScript.TypeChecker.Entailment.$tc'Solved2
                   1#
                   Language.PureScript.TypeChecker.Entailment.$tc'Solved1) -}
d2ee3cd327cad2a0a107f48d739c3935
  $tc'Solved1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
1a27d42802b877ef5812f809bde8a595
  $tc'Solved2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.TypeChecker.Entailment.$tc'Solved3) -}
d5c53b64756662f2ceb2f869bba6ddb4
  $tc'Solved3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Solved"#) -}
64956605c865f8b1cb35bc30f6d0df42
  $tc'SolverOptions :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14698359134209436256##
                   12787306596666423325##
                   Language.PureScript.TypeChecker.Entailment.$trModule
                   Language.PureScript.TypeChecker.Entailment.$tc'SolverOptions2
                   0#
                   Language.PureScript.TypeChecker.Entailment.$tc'SolverOptions1) -}
3989575b55e3d9e6466f5dcd73e935ef
  $tc'SolverOptions1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
367b698e70cb9f7a7fe8f55623f1a1d3
  $tc'SolverOptions2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.TypeChecker.Entailment.$tc'SolverOptions3) -}
d0d779941b1441b0d27233c95f63a4e1
  $tc'SolverOptions3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'SolverOptions"#) -}
468de3d69b9677190433de1c2262a2cc
  $tc'Unknown :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18415380358357390014##
                   6912048092990420157##
                   Language.PureScript.TypeChecker.Entailment.$trModule
                   Language.PureScript.TypeChecker.Entailment.$tc'Unknown1
                   1#
                   Language.PureScript.TypeChecker.Entailment.$tc'Apart1) -}
40928bc724dc2a8153e6989fe7e61ff2
  $tc'Unknown1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.TypeChecker.Entailment.$tc'Unknown2) -}
c1962cc61eb3df9b9f64cabe28f104a4
  $tc'Unknown2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Unknown"#) -}
c4c85188c0b59ac208a48031d256c441
  $tc'Unsolved :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6931787071223689874##
                   15182927659532324240##
                   Language.PureScript.TypeChecker.Entailment.$trModule
                   Language.PureScript.TypeChecker.Entailment.$tc'Unsolved2
                   1#
                   Language.PureScript.TypeChecker.Entailment.$tc'Unsolved1) -}
b63daf8807e32a60dc934e74d1188f43
  $tc'Unsolved1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
3ecb7b6fe63e15ffe7923ae996ab90d0
  $tc'Unsolved2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.TypeChecker.Entailment.$tc'Unsolved3) -}
277fa0a9835cbfbfc5a49153de6cc7f9
  $tc'Unsolved3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Unsolved"#) -}
86ee193e91eb7fdfd741af2aad76cb32
  $tc'WarnInstance :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3623071740546229507##
                   6852670125548252851##
                   Language.PureScript.TypeChecker.Entailment.$trModule
                   Language.PureScript.TypeChecker.Entailment.$tc'WarnInstance2
                   0#
                   Language.PureScript.TypeChecker.Entailment.$tc'WarnInstance1) -}
83f5e426a8055582c0b3cb07c4780777
  $tc'WarnInstance1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
e78fe47bb58952ceb0e7adc27189221b
  $tc'WarnInstance2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.TypeChecker.Entailment.$tc'WarnInstance3) -}
fab191c8d91cb34bf0ef18e072af3340
  $tc'WarnInstance3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'WarnInstance"#) -}
64cf363676f95f28a7b686a835ed7890
  $tcEntailsResult :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11668266087421272170##
                   4034506051050161683##
                   Language.PureScript.TypeChecker.Entailment.$trModule
                   Language.PureScript.TypeChecker.Entailment.$tcEntailsResult1
                   0#
                   GHC.Types.krep$*Arr*) -}
ee03da7a39fd96ca88852dec0daf6073
  $tcEntailsResult1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.TypeChecker.Entailment.$tcEntailsResult2) -}
12239bead465e8b72864c279544a5e7f
  $tcEntailsResult2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("EntailsResult"#) -}
e9c8f104b3149f3fbb3a344d858e9fdb
  $tcEvidence :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10841649221739201968##
                   17934207484714397782##
                   Language.PureScript.TypeChecker.Entailment.$trModule
                   Language.PureScript.TypeChecker.Entailment.$tcEvidence1
                   0#
                   GHC.Types.krep$*) -}
72e58abda9bec54e1c7efcbaf37c66b5
  $tcEvidence1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.TypeChecker.Entailment.$tcEvidence2) -}
82acbbe58c4c337e2d9fe114a8210fea
  $tcEvidence2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Evidence"#) -}
75c63c833aae02454e5d75fda8ae654c
  $tcMatched :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9176204305300841390##
                   3669277676412077971##
                   Language.PureScript.TypeChecker.Entailment.$trModule
                   Language.PureScript.TypeChecker.Entailment.$tcMatched1
                   0#
                   GHC.Types.krep$*Arr*) -}
ee65d6bbc2a5bc130f30a64c601c3241
  $tcMatched1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.TypeChecker.Entailment.$tcMatched2) -}
e53bd56a7d24e0186c2175ec24d0992c
  $tcMatched2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Matched"#) -}
e5c66836f61d44b231d2a11637e48114
  $tcSolverOptions :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13817784860838276552##
                   9881756429582200948##
                   Language.PureScript.TypeChecker.Entailment.$trModule
                   Language.PureScript.TypeChecker.Entailment.$tcSolverOptions1
                   0#
                   GHC.Types.krep$*) -}
6f865ec638e2ee53d780071c3e81f4ad
  $tcSolverOptions1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.TypeChecker.Entailment.$tcSolverOptions2) -}
0db41a3bc2199e1793475edc3a41564e
  $tcSolverOptions2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("SolverOptions"#) -}
56c5fe9657272f62376a16eb3e86a6bd
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Language.PureScript.TypeChecker.Entailment.$trModule3
                   Language.PureScript.TypeChecker.Entailment.$trModule1) -}
5f6c993c6ed96fc4fe951c7c3d140557
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.TypeChecker.Entailment.$trModule2) -}
e4a2926e5afc7a592b83b0e56c628ed7
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Language.PureScript.TypeChecker.Entailment"#) -}
2c79cbb02ce0cdcce348b8c7ecbc0182
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.TypeChecker.Entailment.$trModule4) -}
cba1a3385f7aa6953cd6072c189d5e7f
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"#) -}
6f6912509d2a4ac2bb7eda47984ad932
  $w$csconcat ::
    GHC.Base.Semigroup t =>
    Language.PureScript.TypeChecker.Entailment.Matched t
    -> [Language.PureScript.TypeChecker.Entailment.Matched t]
    -> Language.PureScript.TypeChecker.Entailment.Matched t
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A,A)><S,1*U><S,1*U>, Inline: [0],
     Unfolding: (\ @ t
                   (w :: GHC.Base.Semigroup t)
                   (ww :: Language.PureScript.TypeChecker.Entailment.Matched t)
                   (ww1 :: [Language.PureScript.TypeChecker.Entailment.Matched t]) ->
                 letrec {
                   go23 :: Language.PureScript.TypeChecker.Entailment.Matched t
                           -> [Language.PureScript.TypeChecker.Entailment.Matched t]
                           -> Language.PureScript.TypeChecker.Entailment.Matched t
                     {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
                   = \ (b :: Language.PureScript.TypeChecker.Entailment.Matched t)
                       (ds1 :: [Language.PureScript.TypeChecker.Entailment.Matched t]) ->
                     case ds1 of wild1 {
                       [] -> b
                       : c cs
                       -> Language.PureScript.TypeChecker.Entailment.$fMonoidMatched_$c<>
                            @ t
                            w
                            b
                            (go23 c cs) }
                 } in
                 go23 ww ww1) -}
565699d501806f9ae5d50b4b93bfd73f
  $w$sgo1 ::
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Data.Map.Internal.Map
         (GHC.Base.Maybe Language.PureScript.Names.ModuleName) a1
    -> (# Data.Map.Internal.Map
            (GHC.Base.Maybe Language.PureScript.Names.ModuleName) a1,
          GHC.Base.Maybe a1,
          Data.Map.Internal.Map
            (GHC.Base.Maybe Language.PureScript.Names.ModuleName) a1 #)
  {- Arity: 2, Strictness: <S,1*U><S,1*U>, Inline: [0] -}
9fccab9618dfa2042c7ca6a36c7d73d2
  $w$sgo10 ::
    (a1 -> a1 -> a1)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> a1
    -> Data.Map.Internal.Map Data.Text.Internal.Text a1
    -> Data.Map.Internal.Map Data.Text.Internal.Text a1
  {- Arity: 6,
     Strictness: <L,1*C1(C1(U))><L,U><L,U><L,U><L,U><S,1*U>,
     Inline: [0] -}
76b8ac91d7d71ed9257be36d6898d820
  $w$sgo11 ::
    (a1 -> a1 -> a1)
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.Ident
    -> a1
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            Language.PureScript.Names.Ident)
         a1
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            Language.PureScript.Names.Ident)
         a1
  {- Arity: 5, Strictness: <L,1*C1(C1(U))><L,U><L,U><L,U><S,1*U>,
     Inline: [0] -}
46a209f6ebc7f4b99b6ea3971753fee5
  $w$sgo12 ::
    (a1 -> a1 -> a1)
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> a1
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName))
         a1
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName))
         a1
  {- Arity: 5,
     Strictness: <L,1*C1(C1(U))><L,U><L,U(U,U,U)><L,U><S,1*U>,
     Inline: [0] -}
1db60bde380cc2002c3deb9a6fcae1be
  $w$sgo13 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Map.Internal.Map Data.Text.Internal.Text a1
    -> (# Data.Map.Internal.Map Data.Text.Internal.Text a1,
          GHC.Base.Maybe a1,
          Data.Map.Internal.Map Data.Text.Internal.Text a1 #)
  {- Arity: 4, Strictness: <L,U><L,U><L,U><S,1*U>, Inline: [0] -}
614fa4b41d85a0ca6a19bc00c6a7eb0a
  $w$sgo14 ::
    (a1 -> a1 -> a1)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> a1
    -> Data.Map.Internal.Map Data.Text.Internal.Text a1
    -> Data.Map.Internal.Map Data.Text.Internal.Text a1
  {- Arity: 6,
     Strictness: <L,1*C1(C1(U))><L,U><L,U><L,U><L,U><S,1*U>,
     Inline: [0] -}
a87b2706f45d3896b97194c7fef2f2d5
  $w$sgo15 ::
    (a1 -> a1 -> a1)
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.Ident
    -> a1
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            Language.PureScript.Names.Ident)
         a1
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            Language.PureScript.Names.Ident)
         a1
  {- Arity: 5, Strictness: <L,1*C1(C1(U))><L,U><L,U><L,U><S,1*U>,
     Inline: [0] -}
487f5a28e3ab8ea09a2eda02fc942213
  $w$sgo16 ::
    (a1 -> a1 -> a1)
    -> GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> a1
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName))
         a1
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName))
         a1
  {- Arity: 5,
     Strictness: <L,1*C1(C1(U))><L,U><L,U(U,U,U)><L,U><S,1*U>,
     Inline: [0] -}
28adcbfb0bf016cfb339be379e14ef3f
  $w$sgo2 ::
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName))
         a1
    -> (# Data.Map.Internal.Map
            (Language.PureScript.Names.Qualified
               (Language.PureScript.Names.ProperName
                  'Language.PureScript.Names.ClassName))
            a1,
          GHC.Base.Maybe a1,
          Data.Map.Internal.Map
            (Language.PureScript.Names.Qualified
               (Language.PureScript.Names.ProperName
                  'Language.PureScript.Names.ClassName))
            a1 #)
  {- Arity: 3, Strictness: <L,U><L,U(U,U,U)><S,1*U>, Inline: [0] -}
e41e3f856be6d7709fdbacf8b9723e04
  $w$sgo3 ::
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.Ident
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            Language.PureScript.Names.Ident)
         a1
    -> (# Data.Map.Internal.Map
            (Language.PureScript.Names.Qualified
               Language.PureScript.Names.Ident)
            a1,
          GHC.Base.Maybe a1,
          Data.Map.Internal.Map
            (Language.PureScript.Names.Qualified
               Language.PureScript.Names.Ident)
            a1 #)
  {- Arity: 3, Strictness: <L,U><L,U><S,1*U>, Inline: [0] -}
c3ba9ca41c70b0e1f741df2c1c16dbf1
  $w$sgo4 ::
    Data.Text.Internal.Text
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> a1
    -> Data.Map.Internal.Map Data.Text.Internal.Text a1
    -> Data.Map.Internal.Map Data.Text.Internal.Text a1
  {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><L,U><S,1*U>,
     Inline: [0] -}
5b7764b12f7dcb29dcced4a3e376946f
  $w$sgo5 ::
    GHC.Types.Int
    -> GHC.Prim.Int#
    -> Data.Set.Internal.Set GHC.Types.Int
    -> Data.Set.Internal.Set GHC.Types.Int
  {- Arity: 3, Strictness: <L,U><L,U><S,1*U>, Inline: [0] -}
24d2acd4eb68421817acedf8fb54b6b8
  $w$sgo6 ::
    Data.Text.Internal.Text
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Set.Internal.Set Data.Text.Internal.Text
    -> Data.Set.Internal.Set Data.Text.Internal.Text
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,U><S,1*U>,
     Inline: [0] -}
d161de30735b2dc457601f92f87646f7
  $w$sgo7 ::
    Data.Text.Internal.Text
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> a1
    -> Data.Map.Internal.Map Data.Text.Internal.Text a1
    -> Data.Map.Internal.Map Data.Text.Internal.Text a1
  {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><L,U><S,1*U>,
     Inline: [0] -}
a6df227fb69a8878cfa76d6b83442e58
  $w$sgo8 ::
    GHC.Types.Int
    -> GHC.Prim.Int#
    -> Data.Set.Internal.Set GHC.Types.Int
    -> Data.Set.Internal.Set GHC.Types.Int
  {- Arity: 3, Strictness: <L,U><L,U><S,1*U>, Inline: [0] -}
058be5d42a85abf9364d1e01f0420c1d
  $w$sgo9 ::
    Data.Text.Internal.Text
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Set.Internal.Set Data.Text.Internal.Text
    -> Data.Set.Internal.Set Data.Text.Internal.Text
  {- Arity: 5, Strictness: <L,U><L,U><L,U><L,U><S,1*U>,
     Inline: [0] -}
42eb340d7e2a6ae722a503310770a2ff
  $wgo3 ::
    GHC.Prim.Int#
    -> Data.Set.Internal.Set GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>, Inline: [0] -}
ddd7c45655bb72b3033a68a9c11e1d4d
  $wnewDictionaries ::
    Control.Monad.State.Class.MonadState
      Language.PureScript.TypeChecker.Monad.CheckState m =>
    [(Language.PureScript.Names.Qualified
        (Language.PureScript.Names.ProperName
           'Language.PureScript.Names.ClassName),
      GHC.Integer.Type.Integer)]
    -> Language.PureScript.Names.Qualified
         Language.PureScript.Names.Ident
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
    -> [Language.PureScript.Types.Type
          Language.PureScript.AST.SourcePos.SourceAnn]
    -> m [Language.PureScript.TypeClassDictionaries.NamedDict]
  {- Arity: 5,
     Strictness: <S(S(LC(C(S))LLL)LLL),U(U(U(U(C(C1(U)),A),C(U),A,C(C1(C1(U))),A,A),C(C1(U)),A,C(U),A),U,A,A)><L,U><L,U><L,U(U,U(U,U,U))><L,U>,
     Inline: [0] -}
5a97b14c297147c448fbaa89a3e8191b
  $wpoly_go13 ::
    GHC.Base.Maybe Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName))
         a
    -> GHC.Base.Maybe a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U><L,1*U(U,U,U)><S,1*U>, Inline: [0],
     Unfolding: (\ @ a
                   (ww :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   (ww1 :: Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ClassName)
                   (w :: Data.Map.Internal.Map
                           (Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.ClassName))
                           a) ->
                 case w of wild {
                   Data.Map.Internal.Bin ipv ipv1 ipv2 ipv3 ipv4
                   -> case ipv1 of ww3 { Language.PureScript.Names.Qualified ww4 ww5 ->
                      case ww of wild1 {
                        GHC.Base.Nothing
                        -> case ww4 of wild2 {
                             GHC.Base.Nothing
                             -> case ww1
                                       `cast`
                                     (Language.PureScript.Names.N:ProperName[0]
                                          <'Language.PureScript.Names.ClassName>_P) of ww2 { Data.Text.Internal.Text ww6 ww7 ww8 ->
                                case ww5
                                       `cast`
                                     (Language.PureScript.Names.N:ProperName[0]
                                          <'Language.PureScript.Names.ClassName>_P) of ww9 { Data.Text.Internal.Text ww10 ww11 ww12 ->
                                case Data.Text.$w$ccompare ww6 ww7 ww8 ww10 ww11 ww12 of wild3 {
                                  GHC.Types.LT
                                  -> Language.PureScript.TypeChecker.Entailment.$slookup_$s$wpoly_go2
                                       @ a
                                       ipv3
                                       ww6
                                       ww7
                                       ww8
                                       @~ (Sym (Language.PureScript.Names.N:ProperName[0]
                                                    <'Language.PureScript.Names.ClassName>_P))
                                  GHC.Types.EQ -> GHC.Base.Just @ a ipv2
                                  GHC.Types.GT
                                  -> Language.PureScript.TypeChecker.Entailment.$slookup_$s$wpoly_go2
                                       @ a
                                       ipv4
                                       ww6
                                       ww7
                                       ww8
                                       @~ (Sym (Language.PureScript.Names.N:ProperName[0]
                                                    <'Language.PureScript.Names.ClassName>_P)) } } }
                             GHC.Base.Just ipv7
                             -> Language.PureScript.TypeChecker.Entailment.$slookup_$s$wpoly_go1
                                  @ a
                                  ipv3
                                  ww1 }
                        GHC.Base.Just a2
                        -> case ww4 of wild2 {
                             GHC.Base.Nothing
                             -> Language.PureScript.TypeChecker.Entailment.$slookup_$s$wpoly_go13
                                  @ a
                                  ipv4
                                  ww1
                                  a2
                             GHC.Base.Just b1
                             -> case GHC.Classes.$fOrd[]_$ccompare
                                       @ (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.Namespace)
                                       (Language.PureScript.Names.$fOrdProperName
                                          @ 'Language.PureScript.Names.Namespace)
                                       a2 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                       b1
                                         `cast`
                                       (Language.PureScript.Names.N:ModuleName[0]) of wild3 {
                                  GHC.Types.LT
                                  -> Language.PureScript.TypeChecker.Entailment.$slookup_$s$wpoly_go13
                                       @ a
                                       ipv3
                                       ww1
                                       a2
                                  GHC.Types.EQ
                                  -> case ww1
                                            `cast`
                                          (Language.PureScript.Names.N:ProperName[0]
                                               <'Language.PureScript.Names.ClassName>_P) of ww2 { Data.Text.Internal.Text ww6 ww7 ww8 ->
                                     case ww5
                                            `cast`
                                          (Language.PureScript.Names.N:ProperName[0]
                                               <'Language.PureScript.Names.ClassName>_P) of ww9 { Data.Text.Internal.Text ww10 ww11 ww12 ->
                                     case Data.Text.$w$ccompare
                                            ww6
                                            ww7
                                            ww8
                                            ww10
                                            ww11
                                            ww12 of wild4 {
                                       GHC.Types.LT
                                       -> Language.PureScript.TypeChecker.Entailment.$slookup_$s$wpoly_go13
                                            @ a
                                            ipv3
                                            ww2
                                              `cast`
                                            (Sym (Language.PureScript.Names.N:ProperName[0]
                                                      <'Language.PureScript.Names.ClassName>_P))
                                            a2
                                       GHC.Types.EQ -> GHC.Base.Just @ a ipv2
                                       GHC.Types.GT
                                       -> Language.PureScript.TypeChecker.Entailment.$slookup_$s$wpoly_go13
                                            @ a
                                            ipv4
                                            ww2
                                              `cast`
                                            (Sym (Language.PureScript.Names.N:ProperName[0]
                                                      <'Language.PureScript.Names.ClassName>_P))
                                            a2 } } }
                                  GHC.Types.GT
                                  -> Language.PureScript.TypeChecker.Entailment.$slookup_$s$wpoly_go13
                                       @ a
                                       ipv4
                                       ww1
                                       a2 } } } }
                   Data.Map.Internal.Tip -> GHC.Base.Nothing @ a }) -}
a413a434a2d37a28fa053c9e8dd4b9ed
  data EntailsResult a
    = Solved a Language.PureScript.TypeChecker.Entailment.TypeClassDict
    | Unsolved Language.PureScript.Types.SourceConstraint
    | Deferred
0065dfe2ae71689c64fcfec0c0c83b96
  data Evidence
    = NamedInstance (Language.PureScript.Names.Qualified
                       Language.PureScript.Names.Ident)
    | WarnInstance Language.PureScript.Types.SourceType
    | IsSymbolInstance Language.PureScript.PSString.PSString
    | EmptyClassInstance
c4475a18c9787347337fbabbb7f9d9d2
  type InstanceContext =
    Data.Map.Internal.Map
      (GHC.Base.Maybe Language.PureScript.Names.ModuleName)
      (Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName))
         (Data.Map.Internal.Map
            (Language.PureScript.Names.Qualified
               Language.PureScript.Names.Ident)
            (GHC.Base.NonEmpty
               Language.PureScript.TypeClassDictionaries.NamedDict)))
6f6912509d2a4ac2bb7eda47984ad932
  data Matched t = Match t | Apart | Unknown
d6e1de5524e04671880260cfab6a3915
  type Matching a = Data.Map.Internal.Map Data.Text.Internal.Text a
3a0adde338d0fc50c3fc9ced661cc57b
  data SolverOptions
    = SolverOptions {solverShouldGeneralize :: GHC.Types.Bool,
                     solverDeferErrors :: GHC.Types.Bool}
97e21f2935068243a9f8200f3218954e
  type TypeClassDict =
    Language.PureScript.TypeClassDictionaries.TypeClassDictionaryInScope
      Language.PureScript.TypeChecker.Entailment.Evidence
e1f201eb9d51a7359d5d2ac38c1eaa0f
  entails ::
    (Control.Monad.State.Class.MonadState
       Language.PureScript.TypeChecker.Monad.CheckState m,
     Control.Monad.Error.Class.MonadError
       Language.PureScript.Errors.MultipleErrors m,
     Control.Monad.Writer.Class.MonadWriter
       Language.PureScript.Errors.MultipleErrors m,
     Control.Monad.Supply.Class.MonadSupply m) =>
    Language.PureScript.TypeChecker.Entailment.SolverOptions
    -> Language.PureScript.Types.SourceConstraint
    -> Language.PureScript.TypeChecker.Entailment.InstanceContext
    -> [Language.PureScript.AST.Declarations.ErrorMessageHint]
    -> Control.Monad.Trans.Writer.Lazy.WriterT
         (Data.Semigroup.Internal.Any,
          [(Language.PureScript.Names.Ident,
            Language.PureScript.TypeChecker.Entailment.InstanceContext,
            Language.PureScript.Types.SourceConstraint)])
         (Control.Monad.Trans.State.Lazy.StateT
            Language.PureScript.TypeChecker.Entailment.InstanceContext m)
         Language.PureScript.AST.Declarations.Expr
  {- Arity: 4,
     Strictness: <L,U(U(U(U(C(C1(U)),A),C(U),A,C(C1(C1(U))),C(C1(U)),A),C(C1(U)),C(C1(U)),C(U),A),U,A,C(U))><L,U(U(U(U(C(C1(U)),C(C1(U))),C(U),C(C1(U)),C(C1(C1(U))),C(C1(U)),A),C(C1(U)),C(C1(U)),C(U),A),C(U),C(C1(U)))><L,U(A,A,A,C(U),A,A)><L,U(U(1*U(1*U(C(C1(U)),A),A,A,A,A,A),C(C1(U)),A,C(U),A),U,A)> -}
abde8470e222e24f24674076030ca6a3
  newDictionaries ::
    Control.Monad.State.Class.MonadState
      Language.PureScript.TypeChecker.Monad.CheckState m =>
    [(Language.PureScript.Names.Qualified
        (Language.PureScript.Names.ProperName
           'Language.PureScript.Names.ClassName),
      GHC.Integer.Type.Integer)]
    -> Language.PureScript.Names.Qualified
         Language.PureScript.Names.Ident
    -> Language.PureScript.Types.SourceConstraint
    -> m [Language.PureScript.TypeClassDictionaries.NamedDict]
  {- Arity: 4,
     Strictness: <S(S(LC(C(S))LLL)LLL),U(U(U(U(C(C1(U)),A),C(U),A,C(C1(C1(U))),A,A),C(C1(U)),A,C(U),A),U,A,A)><L,U><L,U><S,1*U(A,U(U,U(U,U,U)),U,A)>,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ @ m :: * -> *
                   (w :: Control.Monad.State.Class.MonadState
                           Language.PureScript.TypeChecker.Monad.CheckState m)
                   (w1 :: [(Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.ClassName),
                            GHC.Integer.Type.Integer)])
                   (w2 :: Language.PureScript.Names.Qualified
                            Language.PureScript.Names.Ident)
                   (w3 :: Language.PureScript.Types.SourceConstraint) ->
                 case w3 of ww { Language.PureScript.Types.Constraint ww1 ww2 ww3 ww4 ->
                 Language.PureScript.TypeChecker.Entailment.$wnewDictionaries
                   @ m
                   w
                   w1
                   w2
                   ww2
                   ww3 }) -}
5a61c57edd6d00dad5d55b214e946b57
  replaceTypeClassDictionaries ::
    (Control.Monad.State.Class.MonadState
       Language.PureScript.TypeChecker.Monad.CheckState m,
     Control.Monad.Error.Class.MonadError
       Language.PureScript.Errors.MultipleErrors m,
     Control.Monad.Writer.Class.MonadWriter
       Language.PureScript.Errors.MultipleErrors m,
     Control.Monad.Supply.Class.MonadSupply m) =>
    GHC.Types.Bool
    -> Language.PureScript.AST.Declarations.Expr
    -> m (Language.PureScript.AST.Declarations.Expr,
          [(Language.PureScript.Names.Ident,
            Language.PureScript.TypeChecker.Entailment.InstanceContext,
            Language.PureScript.Types.SourceConstraint)])
  {- Arity: 6,
     Strictness: <S(S(LC(C(S))LLL)LLL),U(U(U(U(C(C1(U)),A),C(U),A,C(C1(C1(U))),C(C1(U)),A),C(C1(U)),C(C1(U)),C(U),C(U)),U,A,C(U))><L,U(U(U(U(C(C1(U)),C(C1(U))),C(U),C(C1(U)),C(C1(C1(U))),C(C1(U)),A),C(C1(U)),C(C1(U)),C(U),A),C(U),C(C1(U)))><L,U(A,A,A,C(U),A,A)><L,U(U(U(U(C(C1(U)),A),A,A,A,A,A),C(C1(U)),A,C(U),A),U,A)><L,U><L,U> -}
3a0adde338d0fc50c3fc9ced661cc57b
  solverDeferErrors ::
    Language.PureScript.TypeChecker.Entailment.SolverOptions
    -> GHC.Types.Bool
  RecSel Left Language.PureScript.TypeChecker.Entailment.SolverOptions
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.TypeChecker.Entailment.SolverOptions) ->
                 case ds of wild { Language.PureScript.TypeChecker.Entailment.SolverOptions ds1 ds2 ->
                 ds2 }) -}
3a0adde338d0fc50c3fc9ced661cc57b
  solverShouldGeneralize ::
    Language.PureScript.TypeChecker.Entailment.SolverOptions
    -> GHC.Types.Bool
  RecSel Left Language.PureScript.TypeChecker.Entailment.SolverOptions
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.TypeChecker.Entailment.SolverOptions) ->
                 case ds of wild { Language.PureScript.TypeChecker.Entailment.SolverOptions ds1 ds2 ->
                 ds1 }) -}
instance GHC.Classes.Eq [Language.PureScript.TypeChecker.Entailment.Evidence]
  = Language.PureScript.TypeChecker.Entailment.$fEqEvidence
instance GHC.Classes.Eq [Language.PureScript.TypeChecker.Entailment.Matched]
  = Language.PureScript.TypeChecker.Entailment.$fEqMatched
instance GHC.Base.Functor [Language.PureScript.TypeChecker.Entailment.Matched]
  = Language.PureScript.TypeChecker.Entailment.$fFunctorMatched
instance GHC.Base.Monoid [Language.PureScript.TypeChecker.Entailment.Matched]
  = Language.PureScript.TypeChecker.Entailment.$fMonoidMatched
instance GHC.Base.Semigroup [Language.PureScript.TypeChecker.Entailment.Matched]
  = Language.PureScript.TypeChecker.Entailment.$fSemigroupMatched
instance GHC.Show.Show [Language.PureScript.TypeChecker.Entailment.EntailsResult]
  = Language.PureScript.TypeChecker.Entailment.$fShowEntailsResult
instance GHC.Show.Show [Language.PureScript.TypeChecker.Entailment.Evidence]
  = Language.PureScript.TypeChecker.Entailment.$fShowEvidence
instance GHC.Show.Show [Language.PureScript.TypeChecker.Entailment.Matched]
  = Language.PureScript.TypeChecker.Entailment.$fShowMatched
"SC:$sgo130" forall @ a
                    (sc :: GHC.Prim.Int#)
                    (sc1 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                    (sc2 :: a)
                    (sc3 :: Data.Map.Internal.Map
                              (GHC.Base.Maybe Language.PureScript.Names.ModuleName) a)
                    (sc4 :: Data.Map.Internal.Map
                              (GHC.Base.Maybe Language.PureScript.Names.ModuleName) a)
                    (sc5 :: a)
                    (sc6 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                    (sc7 :: a -> a -> a)
  Language.PureScript.TypeChecker.Entailment.$sinsertWith_$sgo3 @ a
                                                                sc7
                                                                sc6
                                                                sc5
                                                                (Data.Map.Internal.Bin
                                                                   @ (GHC.Base.Maybe
                                                                        Language.PureScript.Names.ModuleName)
                                                                   @ a
                                                                   sc
                                                                   sc1
                                                                   sc2
                                                                   sc3
                                                                   sc4)
  = Language.PureScript.TypeChecker.Entailment.$sinsertWith_$s$sgo13
      @ a
      sc
      sc1
      sc2
      sc3
      sc4
      sc5
      sc6
      sc7
"SC:$sgo130" forall @ a2
                    (sc :: Data.Map.Internal.Map
                             (GHC.Base.Maybe Language.PureScript.Names.ModuleName) a2)
                    (sc1 :: a2)
                    (sc2 :: Language.PureScript.Names.ModuleName)
                    (sc3 :: a2 -> a2 -> a2)
  Language.PureScript.TypeChecker.Entailment.$sinsertWithR_$sgo3 @ a2
                                                                 sc3
                                                                 (GHC.Base.Just
                                                                    @ Language.PureScript.Names.ModuleName
                                                                    sc2)
                                                                 sc1
                                                                 sc
  = Language.PureScript.TypeChecker.Entailment.$sinsertWithR_$s$sgo13
      @ a2
      sc
      sc1
      sc2
      sc3
"SC:$sgo131" forall @ a
                    (sc :: Data.Map.Internal.Map
                             (GHC.Base.Maybe Language.PureScript.Names.ModuleName) a)
                    (sc1 :: a)
                    (sc2 :: Language.PureScript.Names.ModuleName)
                    (sc3 :: a -> a -> a)
  Language.PureScript.TypeChecker.Entailment.$sinsertWith_$sgo3 @ a
                                                                sc3
                                                                (GHC.Base.Just
                                                                   @ Language.PureScript.Names.ModuleName
                                                                   sc2)
                                                                sc1
                                                                sc
  = Language.PureScript.TypeChecker.Entailment.$sinsertWith_$s$sgo1
      @ a
      sc
      sc1
      sc2
      sc3
"SC:$w$sgo130" [0] forall @ a
                          (sc :: GHC.Prim.Int#)
                          (sc1 :: GHC.Prim.ByteArray#)
                          (sc2 :: GHC.Prim.Int#)
                          (sc3 :: GHC.Prim.Int#)
                          (sc4 :: a)
                          (sc5 :: Data.Map.Internal.Map Data.Text.Internal.Text a)
                          (sc6 :: Data.Map.Internal.Map Data.Text.Internal.Text a)
                          (sc7 :: GHC.Prim.Int#)
                          (sc8 :: GHC.Prim.Int#)
                          (sc9 :: GHC.Prim.ByteArray#)
  Language.PureScript.TypeChecker.Entailment.$w$sgo13 @ a
                                                      sc9
                                                      sc8
                                                      sc7
                                                      (Data.Map.Internal.Bin
                                                         @ Data.Text.Internal.Text
                                                         @ a
                                                         sc
                                                         (Data.Text.Internal.Text sc1 sc2 sc3)
                                                         sc4
                                                         sc5
                                                         sc6)
  = Language.PureScript.TypeChecker.Entailment.$s$wsplitLookup_$s$w$sgo13
      @ a
      sc
      sc1
      sc2
      sc3
      sc4
      sc5
      sc6
      sc7
      sc8
      sc9
"SC:$w$sgo130" [0] forall @ a
                          (sc :: GHC.Prim.Int#)
                          (sc1 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                          (sc2 :: a)
                          (sc3 :: Data.Map.Internal.Map
                                    (GHC.Base.Maybe Language.PureScript.Names.ModuleName) a)
                          (sc4 :: Data.Map.Internal.Map
                                    (GHC.Base.Maybe Language.PureScript.Names.ModuleName) a)
                          (sc5 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
  Language.PureScript.TypeChecker.Entailment.$w$sgo1 @ a
                                                     sc5
                                                     (Data.Map.Internal.Bin
                                                        @ (GHC.Base.Maybe
                                                             Language.PureScript.Names.ModuleName)
                                                        @ a
                                                        sc
                                                        sc1
                                                        sc2
                                                        sc3
                                                        sc4)
  = Language.PureScript.TypeChecker.Entailment.$s$wsplitLookup_$s$w$sgo1
      @ a
      sc
      sc1
      sc2
      sc3
      sc4
      sc5
"SC:$w$sgo130" [0] forall @ a
                          (sc :: GHC.Prim.Int#)
                          (sc1 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                          (sc2 :: Language.PureScript.Names.ProperName
                                    'Language.PureScript.Names.ClassName)
                          (sc3 :: a)
                          (sc4 :: Data.Map.Internal.Map
                                    (Language.PureScript.Names.Qualified
                                       (Language.PureScript.Names.ProperName
                                          'Language.PureScript.Names.ClassName))
                                    a)
                          (sc5 :: Data.Map.Internal.Map
                                    (Language.PureScript.Names.Qualified
                                       (Language.PureScript.Names.ProperName
                                          'Language.PureScript.Names.ClassName))
                                    a)
                          (sc6 :: Language.PureScript.Names.ProperName
                                    'Language.PureScript.Names.ClassName)
                          (sc7 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
  Language.PureScript.TypeChecker.Entailment.$w$sgo2 @ a
                                                     sc7
                                                     sc6
                                                     (Data.Map.Internal.Bin
                                                        @ (Language.PureScript.Names.Qualified
                                                             (Language.PureScript.Names.ProperName
                                                                'Language.PureScript.Names.ClassName))
                                                        @ a
                                                        sc
                                                        (Language.PureScript.Names.Qualified
                                                           @ (Language.PureScript.Names.ProperName
                                                                'Language.PureScript.Names.ClassName)
                                                           sc1
                                                           sc2)
                                                        sc3
                                                        sc4
                                                        sc5)
  = Language.PureScript.TypeChecker.Entailment.$s$wsplitLookup_$s$w$sgo3
      @ a
      sc
      sc1
      sc2
      sc3
      sc4
      sc5
      sc6
      sc7
"SC:$w$sgo130" [0] forall @ a
                          (sc :: GHC.Prim.Int#)
                          (sc1 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                          (sc2 :: Language.PureScript.Names.Ident)
                          (sc3 :: a)
                          (sc4 :: Data.Map.Internal.Map
                                    (Language.PureScript.Names.Qualified
                                       Language.PureScript.Names.Ident)
                                    a)
                          (sc5 :: Data.Map.Internal.Map
                                    (Language.PureScript.Names.Qualified
                                       Language.PureScript.Names.Ident)
                                    a)
                          (sc6 :: Language.PureScript.Names.Ident)
                          (sc7 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
  Language.PureScript.TypeChecker.Entailment.$w$sgo3 @ a
                                                     sc7
                                                     sc6
                                                     (Data.Map.Internal.Bin
                                                        @ (Language.PureScript.Names.Qualified
                                                             Language.PureScript.Names.Ident)
                                                        @ a
                                                        sc
                                                        (Language.PureScript.Names.Qualified
                                                           @ Language.PureScript.Names.Ident
                                                           sc1
                                                           sc2)
                                                        sc3
                                                        sc4
                                                        sc5)
  = Language.PureScript.TypeChecker.Entailment.$s$wsplitLookup_$s$w$sgo4
      @ a
      sc
      sc1
      sc2
      sc3
      sc4
      sc5
      sc6
      sc7
"SC:$w$sgo130" [0] forall @ a
                          (sc :: GHC.Prim.Int#)
                          (sc1 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                          (sc2 :: Language.PureScript.Names.Ident)
                          (sc3 :: a)
                          (sc4 :: Data.Map.Internal.Map
                                    (Language.PureScript.Names.Qualified
                                       Language.PureScript.Names.Ident)
                                    a)
                          (sc5 :: Data.Map.Internal.Map
                                    (Language.PureScript.Names.Qualified
                                       Language.PureScript.Names.Ident)
                                    a)
                          (sc6 :: a)
                          (sc7 :: Language.PureScript.Names.Ident)
                          (sc8 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                          (sc9 :: a -> a -> a)
  Language.PureScript.TypeChecker.Entailment.$w$sgo11 @ a
                                                      sc9
                                                      sc8
                                                      sc7
                                                      sc6
                                                      (Data.Map.Internal.Bin
                                                         @ (Language.PureScript.Names.Qualified
                                                              Language.PureScript.Names.Ident)
                                                         @ a
                                                         sc
                                                         (Language.PureScript.Names.Qualified
                                                            @ Language.PureScript.Names.Ident
                                                            sc1
                                                            sc2)
                                                         sc3
                                                         sc4
                                                         sc5)
  = Language.PureScript.TypeChecker.Entailment.$sinsertWith_$s$w$sgo13
      @ a
      sc
      sc1
      sc2
      sc3
      sc4
      sc5
      sc6
      sc7
      sc8
      sc9
"SC:$w$sgo130" [0] forall @ a
                          (sc :: GHC.Prim.Int#)
                          (sc1 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                          (sc2 :: Language.PureScript.Names.ProperName
                                    'Language.PureScript.Names.ClassName)
                          (sc3 :: a)
                          (sc4 :: Data.Map.Internal.Map
                                    (Language.PureScript.Names.Qualified
                                       (Language.PureScript.Names.ProperName
                                          'Language.PureScript.Names.ClassName))
                                    a)
                          (sc5 :: Data.Map.Internal.Map
                                    (Language.PureScript.Names.Qualified
                                       (Language.PureScript.Names.ProperName
                                          'Language.PureScript.Names.ClassName))
                                    a)
                          (sc6 :: a)
                          (sc7 :: Language.PureScript.Names.ProperName
                                    'Language.PureScript.Names.ClassName)
                          (sc8 :: GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                          (sc9 :: a -> a -> a)
  Language.PureScript.TypeChecker.Entailment.$w$sgo12 @ a
                                                      sc9
                                                      sc8
                                                      sc7
                                                      sc6
                                                      (Data.Map.Internal.Bin
                                                         @ (Language.PureScript.Names.Qualified
                                                              (Language.PureScript.Names.ProperName
                                                                 'Language.PureScript.Names.ClassName))
                                                         @ a
                                                         sc
                                                         (Language.PureScript.Names.Qualified
                                                            @ (Language.PureScript.Names.ProperName
                                                                 'Language.PureScript.Names.ClassName)
                                                            sc1
                                                            sc2)
                                                         sc3
                                                         sc4
                                                         sc5)
  = Language.PureScript.TypeChecker.Entailment.$sinsertWith_$s$w$sgo1
      @ a
      sc
      sc1
      sc2
      sc3
      sc4
      sc5
      sc6
      sc7
      sc8
      sc9
"SC:$w$sgo131" [0] forall @ a
                          (sc :: Data.Map.Internal.Map
                                   (GHC.Base.Maybe Language.PureScript.Names.ModuleName) a)
                          (sc1 :: Language.PureScript.Names.ModuleName)
  Language.PureScript.TypeChecker.Entailment.$w$sgo1 @ a
                                                     (GHC.Base.Just
                                                        @ Language.PureScript.Names.ModuleName
                                                        sc1)
                                                     sc
  = Language.PureScript.TypeChecker.Entailment.$s$wsplitLookup_$s$w$sgo2
      @ a
      sc
      sc1
"SC:$w$sgo30" [0] forall (sc :: GHC.Prim.Int#)
                         (sc1 :: GHC.Prim.Int#)
                         (sc2 :: Data.Set.Internal.Set GHC.Types.Int)
                         (sc3 :: Data.Set.Internal.Set GHC.Types.Int)
                         (sc4 :: GHC.Prim.Int#)
                         (sc5 :: GHC.Types.Int)
  Language.PureScript.TypeChecker.Entailment.$w$sgo5 sc5
                                                     sc4
                                                     (Data.Set.Internal.Bin
                                                        @ GHC.Types.Int
                                                        sc
                                                        (GHC.Types.I# sc1)
                                                        sc2
                                                        sc3)
  = Language.PureScript.TypeChecker.Entailment.$sinsert_$s$w$sgo3
      sc
      sc1
      sc2
      sc3
      sc4
      sc5
"SC:$w$sgo30" [0] forall (sc :: GHC.Prim.Int#)
                         (sc1 :: GHC.Prim.ByteArray#)
                         (sc2 :: GHC.Prim.Int#)
                         (sc3 :: GHC.Prim.Int#)
                         (sc4 :: Data.Set.Internal.Set Data.Text.Internal.Text)
                         (sc5 :: Data.Set.Internal.Set Data.Text.Internal.Text)
                         (sc6 :: GHC.Prim.Int#)
                         (sc7 :: GHC.Prim.Int#)
                         (sc8 :: GHC.Prim.ByteArray#)
                         (sc9 :: Data.Text.Internal.Text)
  Language.PureScript.TypeChecker.Entailment.$w$sgo6 sc9
                                                     sc8
                                                     sc7
                                                     sc6
                                                     (Data.Set.Internal.Bin
                                                        @ Data.Text.Internal.Text
                                                        sc
                                                        (Data.Text.Internal.Text sc1 sc2 sc3)
                                                        sc4
                                                        sc5)
  = Language.PureScript.TypeChecker.Entailment.$sinsert_$s$w$sgo1
      sc
      sc1
      sc2
      sc3
      sc4
      sc5
      sc6
      sc7
      sc8
      sc9
"SC:$wpoly_go130" [0] forall @ a
                             (sc :: Data.Map.Internal.Map
                                      (Language.PureScript.Names.Qualified
                                         (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.ClassName))
                                      a)
                             (sc1 :: Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.ClassName)
  Language.PureScript.TypeChecker.Entailment.$wpoly_go13 @ a
                                                         (GHC.Base.Nothing
                                                            @ Language.PureScript.Names.ModuleName)
                                                         sc1
                                                         sc
  = Language.PureScript.TypeChecker.Entailment.$slookup_$s$wpoly_go1
      @ a
      sc
      sc1
"SC:$wpoly_go131" [0] forall @ a
                             (sc :: Data.Map.Internal.Map
                                      (Language.PureScript.Names.Qualified
                                         (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.ClassName))
                                      a)
                             (sc1 :: Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.ClassName)
                             (sc2 :: Language.PureScript.Names.ModuleName)
  Language.PureScript.TypeChecker.Entailment.$wpoly_go13 @ a
                                                         (GHC.Base.Just
                                                            @ Language.PureScript.Names.ModuleName
                                                            sc2)
                                                         sc1
                                                         sc
  = Language.PureScript.TypeChecker.Entailment.$slookup_$s$wpoly_go13
      @ a
      sc
      sc1
      sc2
"SC:$wpoly_go132" [0] forall @ a
                             (sc :: Data.Map.Internal.Map
                                      (Language.PureScript.Names.Qualified
                                         (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.ClassName))
                                      a)
                             (sc1 :: GHC.Prim.ByteArray#)
                             (sc2 :: GHC.Prim.Int#)
                             (sc3 :: GHC.Prim.Int#)
                             (sg :: (Data.Text.Internal.Text :: *)
                                    ~R# (Language.PureScript.Names.ProperName
                                           'Language.PureScript.Names.ClassName :: *))
  Language.PureScript.TypeChecker.Entailment.$wpoly_go13 @ a
                                                         (GHC.Base.Nothing
                                                            @ Language.PureScript.Names.ModuleName)
                                                         (Data.Text.Internal.Text sc1 sc2 sc3)
                                                           `cast`
                                                         sg
                                                         sc
  = Language.PureScript.TypeChecker.Entailment.$slookup_$s$wpoly_go2
      @ a
      sc
      sc1
      sc2
      sc3
      @~ sg
"SC:poly_go130" forall @ a
                       (sc :: Data.Map.Internal.Map
                                (GHC.Base.Maybe Language.PureScript.Names.ModuleName) a)
  Language.PureScript.TypeChecker.Entailment.$slookup3 @ a
                                                       (GHC.Base.Nothing
                                                          @ Language.PureScript.Names.ModuleName)
                                                       sc
  = Language.PureScript.TypeChecker.Entailment.$slookup_$spoly_go1
      @ a
      sc
"SC:poly_go131" forall @ a
                       (sc :: Data.Map.Internal.Map
                                (GHC.Base.Maybe Language.PureScript.Names.ModuleName) a)
                       (sc1 :: Language.PureScript.Names.ModuleName)
  Language.PureScript.TypeChecker.Entailment.$slookup3 @ a
                                                       (GHC.Base.Just
                                                          @ Language.PureScript.Names.ModuleName
                                                          sc1)
                                                       sc
  = Language.PureScript.TypeChecker.Entailment.$slookup_$spoly_go13
      @ a
      sc
      sc1
"SPEC $cmempty @ ()" forall ($dMonoid :: GHC.Base.Monoid ())
  Language.PureScript.TypeChecker.Entailment.$fMonoidMatched_$cmempty @ ()
                                                                      $dMonoid
  = Language.PureScript.TypeChecker.Entailment.$fMonoidMatched1
"SPEC/Language.PureScript.TypeChecker.Entailment $fEqMaybe @ ModuleName" [orphan] forall (v :: GHC.Classes.Eq
                                                                                                 Language.PureScript.Names.ModuleName)
  GHC.Base.$fEqMaybe @ Language.PureScript.Names.ModuleName v
  = Language.PureScript.TypeChecker.Entailment.$s$fEqMaybe
"SPEC/Language.PureScript.TypeChecker.Entailment $fEqMaybe_$c/= @ ModuleName" [orphan] forall ($dEq :: GHC.Classes.Eq
                                                                                                         Language.PureScript.Names.ModuleName)
  GHC.Base.$fEqMaybe_$c/= @ Language.PureScript.Names.ModuleName $dEq
  = Language.PureScript.TypeChecker.Entailment.$s$fEqMaybe_$s$fEqMaybe_$c/=
"SPEC/Language.PureScript.TypeChecker.Entailment $fEqMaybe_$c== @ ModuleName" [orphan] forall ($dEq :: GHC.Classes.Eq
                                                                                                         Language.PureScript.Names.ModuleName)
  GHC.Base.$fEqMaybe_$c== @ Language.PureScript.Names.ModuleName $dEq
  = Language.PureScript.TypeChecker.Entailment.$s$fEqMaybe_$c==
"SPEC/Language.PureScript.TypeChecker.Entailment $fEqQualified @ Ident" [orphan] forall (v :: GHC.Classes.Eq
                                                                                                Language.PureScript.Names.Ident)
  Language.PureScript.Names.$fEqQualified @ Language.PureScript.Names.Ident
                                          v
  = Language.PureScript.TypeChecker.Entailment.$s$fEqQualified
"SPEC/Language.PureScript.TypeChecker.Entailment $fEqQualified_$c/= @ Ident" [orphan] forall ($dEq :: GHC.Classes.Eq
                                                                                                        Language.PureScript.Names.Ident)
  Language.PureScript.Names.$fEqQualified_$c/= @ Language.PureScript.Names.Ident
                                               $dEq
  = Language.PureScript.TypeChecker.Entailment.$s$fEqQualified_$s$fEqQualified_$c/=
"SPEC/Language.PureScript.TypeChecker.Entailment $fMonoid(,) @ Any @ [(Ident,
                                                                      InstanceContext,
                                                                      SourceConstraint)]" [orphan] forall (v1 :: GHC.Base.Monoid
                                                                                                                                                                                                                                                                                        [(Language.PureScript.Names.Ident,
                                                                                                                                                                                                                                                                                          Language.PureScript.TypeChecker.Entailment.InstanceContext,
                                                                                                                                                                                                                                                                                          Language.PureScript.Types.SourceConstraint)])
                                                                                                                                                                                                                                                                               (v :: GHC.Base.Monoid
                                                                                                                                                                                                                                                                                       Data.Semigroup.Internal.Any)
  GHC.Base.$fMonoid(,) @ Data.Semigroup.Internal.Any
                       @ [(Language.PureScript.Names.Ident,
                           Language.PureScript.TypeChecker.Entailment.InstanceContext,
                           Language.PureScript.Types.SourceConstraint)]
                       v
                       v1
  = Language.PureScript.TypeChecker.Entailment.$s$fMonoid(,)
"SPEC/Language.PureScript.TypeChecker.Entailment $fOrdMaybe @ ModuleName" [orphan] forall (v :: GHC.Classes.Ord
                                                                                                  Language.PureScript.Names.ModuleName)
  GHC.Base.$fOrdMaybe @ Language.PureScript.Names.ModuleName v
  = Language.PureScript.TypeChecker.Entailment.$s$fOrdMaybe
"SPEC/Language.PureScript.TypeChecker.Entailment $fOrdQualified @ Ident" [orphan] forall (v :: GHC.Classes.Ord
                                                                                                 Language.PureScript.Names.Ident)
  Language.PureScript.Names.$fOrdQualified @ Language.PureScript.Names.Ident
                                           v
  = Language.PureScript.TypeChecker.Entailment.$s$fOrd(,)_$ccompare_$s$fOrdQualified
"SPEC/Language.PureScript.TypeChecker.Entailment $fSemigroup(,) @ Any @ [(Ident,
                                                                         InstanceContext,
                                                                         SourceConstraint)]" [orphan] forall (v1 :: GHC.Base.Semigroup
                                                                                                                                                                                                                                                                                                 [(Language.PureScript.Names.Ident,
                                                                                                                                                                                                                                                                                                   Language.PureScript.TypeChecker.Entailment.InstanceContext,
                                                                                                                                                                                                                                                                                                   Language.PureScript.Types.SourceConstraint)])
                                                                                                                                                                                                                                                                                        (v :: GHC.Base.Semigroup
                                                                                                                                                                                                                                                                                                Data.Semigroup.Internal.Any)
  GHC.Base.$fSemigroup(,) @ Data.Semigroup.Internal.Any
                          @ [(Language.PureScript.Names.Ident,
                              Language.PureScript.TypeChecker.Entailment.InstanceContext,
                              Language.PureScript.Types.SourceConstraint)]
                          v
                          v1
  = Language.PureScript.TypeChecker.Entailment.$s$fMonoid(,)_$s$fSemigroup(,)
"SPEC/Language.PureScript.TypeChecker.Entailment $fSemigroup(,)_$csconcat @ Any @ [(Ident,
                                                                                   InstanceContext,
                                                                                   SourceConstraint)]" [orphan] [0] forall (w1 :: GHC.Base.Semigroup
                                                                                                                                                                                                                                                                                                                                   [(Language.PureScript.Names.Ident,
                                                                                                                                                                                                                                                                                                                                     Language.PureScript.TypeChecker.Entailment.InstanceContext,
                                                                                                                                                                                                                                                                                                                                     Language.PureScript.Types.SourceConstraint)])
                                                                                                                                                                                                                                                                                                                          (w :: GHC.Base.Semigroup
                                                                                                                                                                                                                                                                                                                                  Data.Semigroup.Internal.Any)
  GHC.Base.$fSemigroup(,)_$csconcat @ Data.Semigroup.Internal.Any
                                    @ [(Language.PureScript.Names.Ident,
                                        Language.PureScript.TypeChecker.Entailment.InstanceContext,
                                        Language.PureScript.Types.SourceConstraint)]
                                    w
                                    w1
  = Language.PureScript.TypeChecker.Entailment.$s$fSemigroup(,)_$csconcat
"SPEC/Language.PureScript.TypeChecker.Entailment $fSemigroup(,)_$cstimes @ Any @ [(Ident,
                                                                                  InstanceContext,
                                                                                  SourceConstraint)]" [orphan] forall ($dSemigroup1 :: GHC.Base.Semigroup
                                                                                                                                                                                                                                                                                                                                      [(Language.PureScript.Names.Ident,
                                                                                                                                                                                                                                                                                                                                        Language.PureScript.TypeChecker.Entailment.InstanceContext,
                                                                                                                                                                                                                                                                                                                                        Language.PureScript.Types.SourceConstraint)])
                                                                                                                                                                                                                                                                                                                   ($dSemigroup :: GHC.Base.Semigroup
                                                                                                                                                                                                                                                                                                                                     Data.Semigroup.Internal.Any)
  GHC.Base.$fSemigroup(,)_$cstimes @ Data.Semigroup.Internal.Any
                                   @ [(Language.PureScript.Names.Ident,
                                       Language.PureScript.TypeChecker.Entailment.InstanceContext,
                                       Language.PureScript.Types.SourceConstraint)]
                                   $dSemigroup
                                   $dSemigroup1
  = Language.PureScript.TypeChecker.Entailment.$s$fSemigroup(,)_$cstimes
"SPEC/Language.PureScript.TypeChecker.Entailment $fShow(,) @ SourceSpan @ [Comment]" [orphan] forall (v1 :: GHC.Show.Show
                                                                                                              [Language.PureScript.Comments.Comment])
                                                                                                     (v :: GHC.Show.Show
                                                                                                             Language.PureScript.AST.SourcePos.SourceSpan)
  GHC.Show.$fShow(,) @ Language.PureScript.AST.SourcePos.SourceSpan
                     @ [Language.PureScript.Comments.Comment]
                     v
                     v1
  = Language.PureScript.TypeChecker.Entailment.$fShowEntailsResult_$s$fShow(,)
"SPEC/Language.PureScript.TypeChecker.Entailment $fShow[] @ Comment" [orphan] forall (v :: GHC.Show.Show
                                                                                             Language.PureScript.Comments.Comment)
  GHC.Show.$fShow[] @ Language.PureScript.Comments.Comment v
  = Language.PureScript.TypeChecker.Entailment.$fShowEntailsResult_$s$fShow[]
"SPEC/Language.PureScript.TypeChecker.Entailment $wsplitS @ Int" [orphan] [0] forall (w :: GHC.Classes.Ord
                                                                                             GHC.Types.Int)
  Data.Set.Internal.$wsplitS @ GHC.Types.Int w
  = Language.PureScript.TypeChecker.Entailment.$s$wsplitS
"SPEC/Language.PureScript.TypeChecker.Entailment $wsplitS @ Text" [orphan] [0] forall (w :: GHC.Classes.Ord
                                                                                              Data.Text.Internal.Text)
  Data.Set.Internal.$wsplitS @ Data.Text.Internal.Text w
  = Language.PureScript.TypeChecker.Entailment.$s$wsplitS1
"SPEC/Language.PureScript.TypeChecker.Entailment difference @ Text" [orphan] forall ($dOrd :: GHC.Classes.Ord
                                                                                                Data.Text.Internal.Text)
  Data.Set.Internal.difference @ Data.Text.Internal.Text $dOrd
  = Language.PureScript.TypeChecker.Entailment.$sdifference
"SPEC/Language.PureScript.TypeChecker.Entailment fromList @ Int" [orphan] forall ($dOrd :: GHC.Classes.Ord
                                                                                             GHC.Types.Int)
  Data.Set.Internal.fromList @ GHC.Types.Int $dOrd
  = Language.PureScript.TypeChecker.Entailment.$sfromList1
"SPEC/Language.PureScript.TypeChecker.Entailment fromList @ Text" [orphan] forall ($dOrd :: GHC.Classes.Ord
                                                                                              Data.Text.Internal.Text)
  Data.Set.Internal.fromList @ Data.Text.Internal.Text $dOrd
  = Language.PureScript.TypeChecker.Entailment.$sfromList2
"SPEC/Language.PureScript.TypeChecker.Entailment fromList @ Text _" [orphan] forall @ a
                                                                                    ($dOrd :: GHC.Classes.Ord
                                                                                                Data.Text.Internal.Text)
  Data.Map.Internal.fromList @ Data.Text.Internal.Text @ a $dOrd
  = Language.PureScript.TypeChecker.Entailment.$sfromList @ a
"SPEC/Language.PureScript.TypeChecker.Entailment isSubsetOf @ Int" [orphan] forall ($dOrd :: GHC.Classes.Ord
                                                                                               GHC.Types.Int)
  Data.Set.Internal.isSubsetOf @ GHC.Types.Int $dOrd
  = Language.PureScript.TypeChecker.Entailment.$sisSubsetOf
"SPEC/Language.PureScript.TypeChecker.Entailment isSubsetOfX @ Int" [orphan] forall ($dOrd :: GHC.Classes.Ord
                                                                                                GHC.Types.Int)
  Data.Set.Internal.isSubsetOfX @ GHC.Types.Int $dOrd
  = Language.PureScript.TypeChecker.Entailment.$sisSubsetOf_$sisSubsetOfX
"SPEC/Language.PureScript.TypeChecker.Entailment union @ Int" [orphan] forall ($dOrd :: GHC.Classes.Ord
                                                                                          GHC.Types.Int)
  Data.Set.Internal.union @ GHC.Types.Int $dOrd
  = Language.PureScript.TypeChecker.Entailment.$sunion1
"SPEC/Language.PureScript.TypeChecker.Entailment union @ Text" [orphan] forall ($dOrd :: GHC.Classes.Ord
                                                                                           Data.Text.Internal.Text)
  Data.Set.Internal.union @ Data.Text.Internal.Text $dOrd
  = Language.PureScript.TypeChecker.Entailment.$sunion2
"SPEC/Language.PureScript.TypeChecker.Entailment union @ Text _" [orphan] forall @ a
                                                                                 ($dOrd :: GHC.Classes.Ord
                                                                                             Data.Text.Internal.Text)
  Data.Map.Internal.union @ Data.Text.Internal.Text @ a $dOrd
  = Language.PureScript.TypeChecker.Entailment.$sunion @ a
"SPEC/Language.PureScript.TypeChecker.Entailment unionWith @ (Maybe
                                                               ModuleName) _" [orphan] forall @ a
                                                                                                                                                                  ($dOrd :: GHC.Classes.Ord
                                                                                                                                                                              (GHC.Base.Maybe
                                                                                                                                                                                 Language.PureScript.Names.ModuleName))
  Data.Map.Internal.unionWith @ (GHC.Base.Maybe
                                   Language.PureScript.Names.ModuleName)
                              @ a
                              $dOrd
  = Language.PureScript.TypeChecker.Entailment.$sunionWith3 @ a
"SPEC/Language.PureScript.TypeChecker.Entailment unionWith @ (Qualified
                                                               (ProperName 'ClassName)) _" [orphan] forall @ a
                                                                                                                                                                                   ($dOrd :: GHC.Classes.Ord
                                                                                                                                                                                               (Language.PureScript.Names.Qualified
                                                                                                                                                                                                  (Language.PureScript.Names.ProperName
                                                                                                                                                                                                     'Language.PureScript.Names.ClassName)))
  Data.Map.Internal.unionWith @ (Language.PureScript.Names.Qualified
                                   (Language.PureScript.Names.ProperName
                                      'Language.PureScript.Names.ClassName))
                              @ a
                              $dOrd
  = Language.PureScript.TypeChecker.Entailment.$sunionWith2 @ a
"SPEC/Language.PureScript.TypeChecker.Entailment unionWith @ (Qualified
                                                               Ident) _" [orphan] forall @ a
                                                                                                                                                                 ($dOrd :: GHC.Classes.Ord
                                                                                                                                                                             (Language.PureScript.Names.Qualified
                                                                                                                                                                                Language.PureScript.Names.Ident))
  Data.Map.Internal.unionWith @ (Language.PureScript.Names.Qualified
                                   Language.PureScript.Names.Ident)
                              @ a
                              $dOrd
  = Language.PureScript.TypeChecker.Entailment.$sunionWith1 @ a
"SPEC/Language.PureScript.TypeChecker.Entailment unionWith @ Text _" [orphan] forall @ a
                                                                                     ($dOrd :: GHC.Classes.Ord
                                                                                                 Data.Text.Internal.Text)
  Data.Map.Internal.unionWith @ Data.Text.Internal.Text @ a $dOrd
  = Language.PureScript.TypeChecker.Entailment.$sunionWith @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

