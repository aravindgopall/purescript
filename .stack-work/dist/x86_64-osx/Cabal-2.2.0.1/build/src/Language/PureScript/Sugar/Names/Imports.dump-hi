
==================== FINAL INTERFACE ====================
2018-11-30 20:47:38.558387 UTC

interface purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Sugar.Names.Imports 8043
  interface hash: 6382aec5d836550f16e58a52a09677d7
  ABI hash: 74530d1e35a91db4df5eb1198a6fa3df
  export-list hash: 538cf21a6523dc126f5c86e5bc711c31
  orphan hash: fbd5b7665ab37b0d8d6c264bb015234b
  flag hash: 2aa58a824a1f725c94ffb0d8a8803a3b
  opt_hash: 2c98c95d41c045ae9c2fb565ec8aabc6
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Language.PureScript.Sugar.Names.Imports.findImports
  Language.PureScript.Sugar.Names.Imports.resolveImports
  Language.PureScript.Sugar.Names.Imports.resolveModuleImport
  Language.PureScript.Sugar.Names.Imports.ImportDef
module dependencies: Control.Monad.Supply
                     Control.Monad.Supply.Class Language.PureScript.AST
                     Language.PureScript.AST.Binders
                     Language.PureScript.AST.Declarations
                     Language.PureScript.AST.Exported Language.PureScript.AST.Literals
                     Language.PureScript.AST.Operators Language.PureScript.AST.SourcePos
                     Language.PureScript.AST.Traversals Language.PureScript.Bundle
                     Language.PureScript.Comments Language.PureScript.Constants
                     Language.PureScript.Crash Language.PureScript.Environment
                     Language.PureScript.Errors Language.PureScript.Kinds
                     Language.PureScript.Label Language.PureScript.Names
                     Language.PureScript.PSString Language.PureScript.Parser.Lexer
                     Language.PureScript.Parser.State Language.PureScript.Pretty
                     Language.PureScript.Pretty.Common Language.PureScript.Pretty.Kinds
                     Language.PureScript.Pretty.Types Language.PureScript.Pretty.Values
                     Language.PureScript.Publish.BoxesHelpers
                     Language.PureScript.Sugar.Names.Env Language.PureScript.Traversals
                     Language.PureScript.TypeClassDictionaries Language.PureScript.Types
                     Paths_purescript
package dependencies: aeson-1.3.1.1 aeson-better-errors-0.9.1.0
                      ansi-terminal-0.8.0.4 array-0.5.2.0 async-2.2.1 attoparsec-0.13.2.2
                      base-4.11.1.0 base-compat-0.10.4 binary-0.8.5.1
                      blaze-builder-0.4.1.0 boxes-0.1.5 bytestring-0.10.8.2 colour-2.3.4
                      containers-0.5.11.0 deepseq-1.4.3.0 dlist-0.8.0.4 filepath-1.4.2
                      ghc-boot-th-8.4.3 ghc-prim-0.5.2.0 hashable-1.2.7.0
                      integer-gmp-1.0.2.0 integer-logarithms-1.0.2.1
                      language-javascript-0.6.0.11 mtl-2.2.2 parsec-3.1.13.0
                      pattern-arrows-0.0.2 pretty-1.1.3.6 primitive-0.6.3.0
                      protolude-0.2.2 random-1.1 safe-0.3.17 scientific-0.3.6.2
                      sourcemap-0.1.6 split-0.2.3.3 stm-2.4.5.0 syb-0.7 tagged-0.8.5
                      template-haskell-2.13.0.0 text-1.2.3.0 th-abstraction-0.2.8.0
                      time-1.8.0.2 time-locale-compat-0.1.1.4 transformers-0.5.5.0
                      unordered-containers-0.2.9.0 utf8-string-1.0.1.1 uuid-types-1.0.3
                      vector-0.12.0.1
orphans: syb-0.7:Data.Generics.Instances
         stm-2.4.5.0:Control.Monad.STM colour-2.3.4:Data.Colour
         attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         vector-0.12.0.1:Data.Vector.Unboxed
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.0:Data.Text.Lazy
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.5.0:Control.Monad.Trans.Error
         text-1.2.3.0:Data.Text binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: aeson-1.3.1.1:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.Graph
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         dlist-0.8.0.4:Data.DList ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.AST.Declarations
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.AST.Operators
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.AST.SourcePos
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Environment
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Kinds
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Label
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Names
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.PSString
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.TypeClassDictionaries
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Types
                         tagged-0.8.5:Data.Tagged
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
                         th-abstraction-0.2.8.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  base-4.11.1.0:Control.Monad c5f960c67d822497578bffbd3e4c01cf
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.Functor f522c3501272159820fd6f242510732f
import  -/  base-4.11.1.0:Data.Maybe 409c3da2b142470b68be39ce1d97a9f7
import  -/  base-4.11.1.0:Data.Tuple 3af66f3ac61ed95ba8a3a3f68ebc5003
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-compat-0.10.4:Prelude.Compat bb6796186ed35a1d09dc34362a3fc27e
import  -/  containers-0.5.11.0:Data.Map 0dbdaec812ef695a364aa6c69e7f7d53
import  -/  containers-0.5.11.0:Data.Map.Internal 0150e210d0ae8df0f3a0669d5e32d8fa
import  -/  containers-0.5.11.0:Data.Set 7d3c64a641be4cacbcd8119445bab919
import  -/  containers-0.5.11.0:Data.Set.Internal 93fa3ef95853aa2a7aadf32d693bd451
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  mtl-2.2.2:Control.Monad.Error.Class df146c18e27154b8df4c8637c59fd61b
import  -/  Language.PureScript.AST 7ed0e74bfed5b6489b8a5eabab5c0241
  exports: 0d53d92339536cd6d8d7dcfcad8e7c7e
import  -/  Language.PureScript.AST.Declarations 568e046fbf27b243bfc96f09017d4782
  Declaration b31d94d0c7b90700d40f9ba6ec420e41
  DeclarationRef 9de74e8b46bfd07e044a72617cc5da5c
  ErrorInModule 30c97edb8a43314700377edb3b90ccc8
  Explicit b1c38eaf46155af7f2da52da8f5861c4
  Hiding 8116598858a7036038611cde115d4da3
  Implicit 850358a1da5071d49098050ad7d1227d
  ImportDeclaration 0c2bc2f3ca892343473f34859c93a6e3
  ImportDeclarationType f900e8c96b49d573d3e54286bc8fd980
  ImportHidingModule bb6be7a0509de1b07063e99736b70b09
  KindRef 8245863d9321690e594853e7ff0fdb63
  Module b9e5d519f3251f7053b581e4ecd9e6bf
  Module 7cf4b96f7d4b51b446726a099ab87bb6
  ModuleRef 9bebdcb4233f1d570107d6e7f75034d7
  ReExportRef f67e2c43a2cbc62a4a950b387e3ed943
  TypeClassRef 93a0e32770563d43fa3f04289a54725f
  TypeInstanceRef 850b5eee032f7eade911f65aaca47804
  TypeOpRef 9ae3d7bbee64a9887c8d95defd65b0b0
  TypeRef f23e4bfa1c94ce55e9357e5fb97176c4
  UnknownImport 7980c76c2367bb4a76296906eff5eb25
  UnknownImportDataConstructor 6171e2d6f06e91b139eacfb3e940f789
  UnknownName 0628ac315dcabeec4442b9d03a3d0b84
  ValueOpRef 340c88beba94c802cc00b112ca1ce8ae
  ValueRef 984b564c7d121e5297a91fc424d0970b
import  -/  Language.PureScript.AST.SourcePos b3f67f807f2dce79528bbb15bd9c7104
  SourceSpan 73c071552214b3f18e94970349d3affc
  internalModuleSourceSpan 5f91a656f056fa441b3ec6940306d87a
import  -/  Language.PureScript.Crash 1bc11bf824676e9581610d0d05d26761
  exports: 8a971f39d6ef3f27956f413640cb0a24
  internalError f3db7e23c75878c9d13888d6d114012d
import  -/  Language.PureScript.Errors 15d6eb6b2d4d480750061a0585d4e64c
  exports: 142ea650dec62642d1cff09ef1eee74e
  MultipleErrors ad1de73a1d5a6b0ccd9657dedebc94f3
  addHint c2d92e868230119a30631ae026505b5b
  errorMessage' 5055fef8b372f878a840ac9e7783f39a
  rethrow f843b34a93fe990a8e71af5f4eb4be9f
import  -/  Language.PureScript.Names b3bf151840f3e8f2eb61eff186432886
  exports: f7f3503d20957194bda83c16bb5f1288
  ConstructorName 9fb88e980342b224c2a4e4b58fa9fe33
  IdentName 5b06dbfa684a1a4686ae5dc3b60a0a36
  KiName 3988b2e6728e13d6e386f74a6394b09e
  ModName 3aadbf737116de1d7bcb446bea8a25af
  ModuleName 5a70062bbdf29e6dc659ad8bf5326b50
  Name 184494d9e734645f374e2a0fce32bfac
  ProperName 29f101e190cc99df85623423972e606f
  Qualified d600a7f01c8203cf5504999de99c923c
  Qualified 5a70062bbdf29e6dc659ad8bf5326b50
  TyClassName 21009befdac7827e5cfc4e5a7606bd0e
  TyName 2de556166e59a0005c7143bf3b600f7e
  TyOpName 66cc4d214f55e6f0f298e52eab8013ac
  TypeName da42c92f73f4f363c63ecaf77b6335b9
  ValOpName f03a1a616a24e6d18322d9bb9fa39c73
import  -/  Language.PureScript.Sugar.Names.Env 86ed82ed542c248a8928297b6b346572
  exports: eac96abb84bb227ec29cea13c70276ff
  Env 5f9e6484b1f2e8e2d5b6bfcee5f814e9
  Exports 2212f1aeac86faa420eb4b44c2cc2982
  FromExplicit a87b9454b70b411f90f36ea9664a518b
  FromImplicit 884fd1226fc81d47cd70d9770578fe18
  ImportProvenance b5a892de418489c767f720864d2c6782
  ImportRecord 67ee13394ca9da4b4e70f1e0da141509
  ImportRecord bf5a97568e086735d3bbc97dc5ee1e68
  Imports b53ca872c8c47c3d8839f496fc15c222
  Local a4ae9d445dc300743dfa866505a1b676
  envModuleExports 1f6e036b17f3356d6a09c48836206f4b
  exportedKinds 2212f1aeac86faa420eb4b44c2cc2982
  exportedTypeClasses 2212f1aeac86faa420eb4b44c2cc2982
  exportedTypeOps 2212f1aeac86faa420eb4b44c2cc2982
  exportedTypes 2212f1aeac86faa420eb4b44c2cc2982
  exportedValueOps 2212f1aeac86faa420eb4b44c2cc2982
  exportedValues 2212f1aeac86faa420eb4b44c2cc2982
  importedDataConstructors b53ca872c8c47c3d8839f496fc15c222
  importedKinds b53ca872c8c47c3d8839f496fc15c222
  importedModules b53ca872c8c47c3d8839f496fc15c222
  importedQualModules b53ca872c8c47c3d8839f496fc15c222
  importedTypeClasses b53ca872c8c47c3d8839f496fc15c222
  importedTypeOps b53ca872c8c47c3d8839f496fc15c222
  importedTypes b53ca872c8c47c3d8839f496fc15c222
  importedValueOps b53ca872c8c47c3d8839f496fc15c222
  importedValues b53ca872c8c47c3d8839f496fc15c222
  nullImports ce7df041a470e7796955adec9bc54637
596e9be4798cab778c5aca4537694262
  $s$fEqQualified ::
    GHC.Classes.Eq
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ConstructorName))
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.Qualified
                       (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ConstructorName))
                  (Language.PureScript.Names.$fEqQualified_$c==
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ConstructorName)
                     (Language.PureScript.Names.$fEqProperName
                        @ 'Language.PureScript.Names.ConstructorName))
                  Language.PureScript.Sugar.Names.Imports.$s$fEqQualified_$s$fEqQualified_$c/= -}
843d4b63550f0096701b8e7ef63172fb
  $s$fEqQualified1 ::
    GHC.Classes.Eq
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName))
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.Qualified
                       (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.TypeName))
                  (Language.PureScript.Names.$fEqQualified_$c==
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.TypeName)
                     (Language.PureScript.Names.$fEqProperName
                        @ 'Language.PureScript.Names.TypeName))
                  Language.PureScript.Sugar.Names.Imports.$s$fEqQualified_$s$fEqQualified_$c/=1 -}
123f7edd5f1dba8932918f613125829a
  $s$fEqQualified2 ::
    GHC.Classes.Eq
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.TypeOpName))
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.Qualified
                       (Language.PureScript.Names.OpName
                          'Language.PureScript.Names.TypeOpName))
                  (Language.PureScript.Names.$fEqQualified_$c==
                     @ (Language.PureScript.Names.OpName
                          'Language.PureScript.Names.TypeOpName)
                     (Language.PureScript.Names.$fEqOpName
                        @ 'Language.PureScript.Names.TypeOpName))
                  Language.PureScript.Sugar.Names.Imports.$s$fEqQualified_$s$fEqQualified_$c/=2 -}
17953a641356dd674733a080ef6b601d
  $s$fEqQualified3 ::
    GHC.Classes.Eq
      (Language.PureScript.Names.Qualified
         Language.PureScript.Names.Ident)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.Qualified
                       Language.PureScript.Names.Ident)
                  (Language.PureScript.Names.$fEqQualified_$c==
                     @ Language.PureScript.Names.Ident
                     Language.PureScript.Names.$fEqIdent)
                  Language.PureScript.Sugar.Names.Imports.$s$fEqQualified_$s$fEqQualified_$c/=3 -}
5c31d5656412f80ed76280f2ef2e6025
  $s$fEqQualified4 ::
    GHC.Classes.Eq
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.ValueOpName))
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.Qualified
                       (Language.PureScript.Names.OpName
                          'Language.PureScript.Names.ValueOpName))
                  (Language.PureScript.Names.$fEqQualified_$c==
                     @ (Language.PureScript.Names.OpName
                          'Language.PureScript.Names.ValueOpName)
                     (Language.PureScript.Names.$fEqOpName
                        @ 'Language.PureScript.Names.ValueOpName))
                  Language.PureScript.Sugar.Names.Imports.$s$fEqQualified_$s$fEqQualified_$c/=4 -}
7235a02f7c5a04b53ee9eb730e0e4c5d
  $s$fEqQualified5 ::
    GHC.Classes.Eq
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName))
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.Qualified
                       (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ClassName))
                  (Language.PureScript.Names.$fEqQualified_$c==
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ClassName)
                     (Language.PureScript.Names.$fEqProperName
                        @ 'Language.PureScript.Names.ClassName))
                  Language.PureScript.Sugar.Names.Imports.$s$fEqQualified_$s$fEqQualified_$c/=5 -}
48f91241c4b4128ef8dd9563ab35ec83
  $s$fEqQualified6 ::
    GHC.Classes.Eq
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.KindName))
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.Qualified
                       (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.KindName))
                  (Language.PureScript.Names.$fEqQualified_$c==
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.KindName)
                     (Language.PureScript.Names.$fEqProperName
                        @ 'Language.PureScript.Names.KindName))
                  Language.PureScript.Sugar.Names.Imports.$s$fEqQualified_$s$fEqQualified_$c/=6 -}
fad35634baed8e5fa182d8dd73a3462a
  $s$fEqQualified_$s$fEqQualified_$c/= ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ConstructorName)
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ConstructorName)
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U(U,U,U))><S(SL),1*U(1*U,1*U(U,U,U))>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ConstructorName))
                   (y :: Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ConstructorName)) ->
                 case Language.PureScript.Names.$fEqQualified_$c==
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ConstructorName)
                        (Language.PureScript.Names.$fEqProperName
                           @ 'Language.PureScript.Names.ConstructorName)
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
45a17c2d12f4d47cf0c65d9d69dc40ae
  $s$fEqQualified_$s$fEqQualified_$c/=1 ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName)
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName)
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U(U,U,U))><S(SL),1*U(1*U,1*U(U,U,U))>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.TypeName))
                   (y :: Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.TypeName)) ->
                 case Language.PureScript.Names.$fEqQualified_$c==
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.TypeName)
                        (Language.PureScript.Names.$fEqProperName
                           @ 'Language.PureScript.Names.TypeName)
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
f2780438cc139ad8724020a51d00b67b
  $s$fEqQualified_$s$fEqQualified_$c/=2 ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.OpName
         'Language.PureScript.Names.TypeOpName)
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.TypeOpName)
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U(U,U,U))><S(SL),1*U(1*U,1*U(U,U,U))>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.OpName
                              'Language.PureScript.Names.TypeOpName))
                   (y :: Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.OpName
                              'Language.PureScript.Names.TypeOpName)) ->
                 case Language.PureScript.Names.$fEqQualified_$c==
                        @ (Language.PureScript.Names.OpName
                             'Language.PureScript.Names.TypeOpName)
                        (Language.PureScript.Names.$fEqOpName
                           @ 'Language.PureScript.Names.TypeOpName)
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
e2f60192e484047462c69c3ab91636fd
  $s$fEqQualified_$s$fEqQualified_$c/=3 ::
    Language.PureScript.Names.Qualified Language.PureScript.Names.Ident
    -> Language.PureScript.Names.Qualified
         Language.PureScript.Names.Ident
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Names.Qualified
                           Language.PureScript.Names.Ident)
                   (y :: Language.PureScript.Names.Qualified
                           Language.PureScript.Names.Ident) ->
                 case Language.PureScript.Names.$fEqQualified_$c==
                        @ Language.PureScript.Names.Ident
                        Language.PureScript.Names.$fEqIdent
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
2030777d1667e8630fe3af59ffa639a4
  $s$fEqQualified_$s$fEqQualified_$c/=4 ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.OpName
         'Language.PureScript.Names.ValueOpName)
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.ValueOpName)
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U(U,U,U))><S(SL),1*U(1*U,1*U(U,U,U))>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.OpName
                              'Language.PureScript.Names.ValueOpName))
                   (y :: Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.OpName
                              'Language.PureScript.Names.ValueOpName)) ->
                 case Language.PureScript.Names.$fEqQualified_$c==
                        @ (Language.PureScript.Names.OpName
                             'Language.PureScript.Names.ValueOpName)
                        (Language.PureScript.Names.$fEqOpName
                           @ 'Language.PureScript.Names.ValueOpName)
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
5d4ee2f0509a59a7557dd13e78b5a54b
  $s$fEqQualified_$s$fEqQualified_$c/=5 ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U(U,U,U))><S(SL),1*U(1*U,1*U(U,U,U))>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ClassName))
                   (y :: Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ClassName)) ->
                 case Language.PureScript.Names.$fEqQualified_$c==
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ClassName)
                        (Language.PureScript.Names.$fEqProperName
                           @ 'Language.PureScript.Names.ClassName)
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
e3346ab058974b812d11fcd25c26265a
  $s$fEqQualified_$s$fEqQualified_$c/=6 ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.KindName)
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.KindName)
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U(U,U,U))><S(SL),1*U(1*U,1*U(U,U,U))>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.KindName))
                   (y :: Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.KindName)) ->
                 case Language.PureScript.Names.$fEqQualified_$c==
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.KindName)
                        (Language.PureScript.Names.$fEqProperName
                           @ 'Language.PureScript.Names.KindName)
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
3e3011e3d4ac5830baf143167c7de523
  $s$fOrdQualified ::
    GHC.Classes.Ord
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ConstructorName))
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.Qualified
                       (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ConstructorName))
                  Language.PureScript.Sugar.Names.Imports.$s$fEqQualified
                  (Language.PureScript.Names.$fOrdQualified_$ccompare
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ConstructorName)
                     (Language.PureScript.Names.$fOrdProperName
                        @ 'Language.PureScript.Names.ConstructorName))
                  (Language.PureScript.Names.$fOrdQualified_$c<
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ConstructorName)
                     (Language.PureScript.Names.$fOrdProperName
                        @ 'Language.PureScript.Names.ConstructorName))
                  (\ (a1 :: Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.ConstructorName))
                     (b :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ConstructorName)) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.ConstructorName)
                          (Language.PureScript.Names.$fOrdProperName
                             @ 'Language.PureScript.Names.ConstructorName)
                          b
                          a1 of wild {
                     GHC.Types.False -> GHC.Types.True
                     GHC.Types.True -> GHC.Types.False })
                  (\ (a1 :: Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.ConstructorName))
                     (b :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ConstructorName)) ->
                   Language.PureScript.Names.$fOrdQualified_$c<
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ConstructorName)
                     (Language.PureScript.Names.$fOrdProperName
                        @ 'Language.PureScript.Names.ConstructorName)
                     b
                     a1)
                  (\ (a1 :: Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.ConstructorName))
                     (b :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ConstructorName)) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.ConstructorName)
                          (Language.PureScript.Names.$fOrdProperName
                             @ 'Language.PureScript.Names.ConstructorName)
                          a1
                          b of wild {
                     GHC.Types.False -> GHC.Types.True
                     GHC.Types.True -> GHC.Types.False })
                  (\ (x :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ConstructorName))
                     (y :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ConstructorName)) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.ConstructorName)
                          (Language.PureScript.Names.$fOrdProperName
                             @ 'Language.PureScript.Names.ConstructorName)
                          y
                          x of wild {
                     GHC.Types.False -> y GHC.Types.True -> x })
                  (\ (x :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ConstructorName))
                     (y :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ConstructorName)) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.ConstructorName)
                          (Language.PureScript.Names.$fOrdProperName
                             @ 'Language.PureScript.Names.ConstructorName)
                          y
                          x of wild {
                     GHC.Types.False -> x GHC.Types.True -> y }) -}
49375e326f41b1cc1bc9a08a6d66310a
  $s$fOrdQualified1 ::
    GHC.Classes.Ord
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName))
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.Qualified
                       (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.TypeName))
                  Language.PureScript.Sugar.Names.Imports.$s$fEqQualified1
                  (Language.PureScript.Names.$fOrdQualified_$ccompare
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.TypeName)
                     (Language.PureScript.Names.$fOrdProperName
                        @ 'Language.PureScript.Names.TypeName))
                  (Language.PureScript.Names.$fOrdQualified_$c<
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.TypeName)
                     (Language.PureScript.Names.$fOrdProperName
                        @ 'Language.PureScript.Names.TypeName))
                  (\ (a1 :: Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.TypeName))
                     (b :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.TypeName)) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.TypeName)
                          (Language.PureScript.Names.$fOrdProperName
                             @ 'Language.PureScript.Names.TypeName)
                          b
                          a1 of wild {
                     GHC.Types.False -> GHC.Types.True
                     GHC.Types.True -> GHC.Types.False })
                  (\ (a1 :: Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.TypeName))
                     (b :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.TypeName)) ->
                   Language.PureScript.Names.$fOrdQualified_$c<
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.TypeName)
                     (Language.PureScript.Names.$fOrdProperName
                        @ 'Language.PureScript.Names.TypeName)
                     b
                     a1)
                  (\ (a1 :: Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.TypeName))
                     (b :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.TypeName)) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.TypeName)
                          (Language.PureScript.Names.$fOrdProperName
                             @ 'Language.PureScript.Names.TypeName)
                          a1
                          b of wild {
                     GHC.Types.False -> GHC.Types.True
                     GHC.Types.True -> GHC.Types.False })
                  (\ (x :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.TypeName))
                     (y :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.TypeName)) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.TypeName)
                          (Language.PureScript.Names.$fOrdProperName
                             @ 'Language.PureScript.Names.TypeName)
                          y
                          x of wild {
                     GHC.Types.False -> y GHC.Types.True -> x })
                  (\ (x :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.TypeName))
                     (y :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.TypeName)) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.TypeName)
                          (Language.PureScript.Names.$fOrdProperName
                             @ 'Language.PureScript.Names.TypeName)
                          y
                          x of wild {
                     GHC.Types.False -> x GHC.Types.True -> y }) -}
81c21ed3e83b75e3bd766ade4f1ba8a2
  $s$fOrdQualified2 ::
    GHC.Classes.Ord
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.TypeOpName))
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.Qualified
                       (Language.PureScript.Names.OpName
                          'Language.PureScript.Names.TypeOpName))
                  Language.PureScript.Sugar.Names.Imports.$s$fEqQualified2
                  (Language.PureScript.Names.$fOrdQualified_$ccompare
                     @ (Language.PureScript.Names.OpName
                          'Language.PureScript.Names.TypeOpName)
                     (Language.PureScript.Names.$fOrdOpName
                        @ 'Language.PureScript.Names.TypeOpName))
                  (Language.PureScript.Names.$fOrdQualified_$c<
                     @ (Language.PureScript.Names.OpName
                          'Language.PureScript.Names.TypeOpName)
                     (Language.PureScript.Names.$fOrdOpName
                        @ 'Language.PureScript.Names.TypeOpName))
                  (\ (a1 :: Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.OpName
                                 'Language.PureScript.Names.TypeOpName))
                     (b :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.OpName
                                'Language.PureScript.Names.TypeOpName)) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ (Language.PureScript.Names.OpName
                               'Language.PureScript.Names.TypeOpName)
                          (Language.PureScript.Names.$fOrdOpName
                             @ 'Language.PureScript.Names.TypeOpName)
                          b
                          a1 of wild {
                     GHC.Types.False -> GHC.Types.True
                     GHC.Types.True -> GHC.Types.False })
                  (\ (a1 :: Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.OpName
                                 'Language.PureScript.Names.TypeOpName))
                     (b :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.OpName
                                'Language.PureScript.Names.TypeOpName)) ->
                   Language.PureScript.Names.$fOrdQualified_$c<
                     @ (Language.PureScript.Names.OpName
                          'Language.PureScript.Names.TypeOpName)
                     (Language.PureScript.Names.$fOrdOpName
                        @ 'Language.PureScript.Names.TypeOpName)
                     b
                     a1)
                  (\ (a1 :: Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.OpName
                                 'Language.PureScript.Names.TypeOpName))
                     (b :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.OpName
                                'Language.PureScript.Names.TypeOpName)) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ (Language.PureScript.Names.OpName
                               'Language.PureScript.Names.TypeOpName)
                          (Language.PureScript.Names.$fOrdOpName
                             @ 'Language.PureScript.Names.TypeOpName)
                          a1
                          b of wild {
                     GHC.Types.False -> GHC.Types.True
                     GHC.Types.True -> GHC.Types.False })
                  (\ (x :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.OpName
                                'Language.PureScript.Names.TypeOpName))
                     (y :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.OpName
                                'Language.PureScript.Names.TypeOpName)) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ (Language.PureScript.Names.OpName
                               'Language.PureScript.Names.TypeOpName)
                          (Language.PureScript.Names.$fOrdOpName
                             @ 'Language.PureScript.Names.TypeOpName)
                          y
                          x of wild {
                     GHC.Types.False -> y GHC.Types.True -> x })
                  (\ (x :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.OpName
                                'Language.PureScript.Names.TypeOpName))
                     (y :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.OpName
                                'Language.PureScript.Names.TypeOpName)) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ (Language.PureScript.Names.OpName
                               'Language.PureScript.Names.TypeOpName)
                          (Language.PureScript.Names.$fOrdOpName
                             @ 'Language.PureScript.Names.TypeOpName)
                          y
                          x of wild {
                     GHC.Types.False -> x GHC.Types.True -> y }) -}
02ba10617575997b5eef0d1030f620a2
  $s$fOrdQualified3 ::
    GHC.Classes.Ord
      (Language.PureScript.Names.Qualified
         Language.PureScript.Names.Ident)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.Qualified
                       Language.PureScript.Names.Ident)
                  Language.PureScript.Sugar.Names.Imports.$s$fEqQualified3
                  (Language.PureScript.Names.$fOrdQualified_$ccompare
                     @ Language.PureScript.Names.Ident
                     Language.PureScript.Names.$fOrdIdent)
                  (Language.PureScript.Names.$fOrdQualified_$c<
                     @ Language.PureScript.Names.Ident
                     Language.PureScript.Names.$fOrdIdent)
                  (\ (a1 :: Language.PureScript.Names.Qualified
                              Language.PureScript.Names.Ident)
                     (b :: Language.PureScript.Names.Qualified
                             Language.PureScript.Names.Ident) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ Language.PureScript.Names.Ident
                          Language.PureScript.Names.$fOrdIdent
                          b
                          a1 of wild {
                     GHC.Types.False -> GHC.Types.True
                     GHC.Types.True -> GHC.Types.False })
                  (\ (a1 :: Language.PureScript.Names.Qualified
                              Language.PureScript.Names.Ident)
                     (b :: Language.PureScript.Names.Qualified
                             Language.PureScript.Names.Ident) ->
                   Language.PureScript.Names.$fOrdQualified_$c<
                     @ Language.PureScript.Names.Ident
                     Language.PureScript.Names.$fOrdIdent
                     b
                     a1)
                  (\ (a1 :: Language.PureScript.Names.Qualified
                              Language.PureScript.Names.Ident)
                     (b :: Language.PureScript.Names.Qualified
                             Language.PureScript.Names.Ident) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ Language.PureScript.Names.Ident
                          Language.PureScript.Names.$fOrdIdent
                          a1
                          b of wild {
                     GHC.Types.False -> GHC.Types.True
                     GHC.Types.True -> GHC.Types.False })
                  (\ (x :: Language.PureScript.Names.Qualified
                             Language.PureScript.Names.Ident)
                     (y :: Language.PureScript.Names.Qualified
                             Language.PureScript.Names.Ident) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ Language.PureScript.Names.Ident
                          Language.PureScript.Names.$fOrdIdent
                          y
                          x of wild {
                     GHC.Types.False -> y GHC.Types.True -> x })
                  (\ (x :: Language.PureScript.Names.Qualified
                             Language.PureScript.Names.Ident)
                     (y :: Language.PureScript.Names.Qualified
                             Language.PureScript.Names.Ident) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ Language.PureScript.Names.Ident
                          Language.PureScript.Names.$fOrdIdent
                          y
                          x of wild {
                     GHC.Types.False -> x GHC.Types.True -> y }) -}
1071be74b840f493f3fd20514962fb09
  $s$fOrdQualified4 ::
    GHC.Classes.Ord
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.ValueOpName))
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.Qualified
                       (Language.PureScript.Names.OpName
                          'Language.PureScript.Names.ValueOpName))
                  Language.PureScript.Sugar.Names.Imports.$s$fEqQualified4
                  (Language.PureScript.Names.$fOrdQualified_$ccompare
                     @ (Language.PureScript.Names.OpName
                          'Language.PureScript.Names.ValueOpName)
                     (Language.PureScript.Names.$fOrdOpName
                        @ 'Language.PureScript.Names.ValueOpName))
                  (Language.PureScript.Names.$fOrdQualified_$c<
                     @ (Language.PureScript.Names.OpName
                          'Language.PureScript.Names.ValueOpName)
                     (Language.PureScript.Names.$fOrdOpName
                        @ 'Language.PureScript.Names.ValueOpName))
                  (\ (a1 :: Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.OpName
                                 'Language.PureScript.Names.ValueOpName))
                     (b :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.OpName
                                'Language.PureScript.Names.ValueOpName)) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ (Language.PureScript.Names.OpName
                               'Language.PureScript.Names.ValueOpName)
                          (Language.PureScript.Names.$fOrdOpName
                             @ 'Language.PureScript.Names.ValueOpName)
                          b
                          a1 of wild {
                     GHC.Types.False -> GHC.Types.True
                     GHC.Types.True -> GHC.Types.False })
                  (\ (a1 :: Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.OpName
                                 'Language.PureScript.Names.ValueOpName))
                     (b :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.OpName
                                'Language.PureScript.Names.ValueOpName)) ->
                   Language.PureScript.Names.$fOrdQualified_$c<
                     @ (Language.PureScript.Names.OpName
                          'Language.PureScript.Names.ValueOpName)
                     (Language.PureScript.Names.$fOrdOpName
                        @ 'Language.PureScript.Names.ValueOpName)
                     b
                     a1)
                  (\ (a1 :: Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.OpName
                                 'Language.PureScript.Names.ValueOpName))
                     (b :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.OpName
                                'Language.PureScript.Names.ValueOpName)) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ (Language.PureScript.Names.OpName
                               'Language.PureScript.Names.ValueOpName)
                          (Language.PureScript.Names.$fOrdOpName
                             @ 'Language.PureScript.Names.ValueOpName)
                          a1
                          b of wild {
                     GHC.Types.False -> GHC.Types.True
                     GHC.Types.True -> GHC.Types.False })
                  (\ (x :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.OpName
                                'Language.PureScript.Names.ValueOpName))
                     (y :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.OpName
                                'Language.PureScript.Names.ValueOpName)) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ (Language.PureScript.Names.OpName
                               'Language.PureScript.Names.ValueOpName)
                          (Language.PureScript.Names.$fOrdOpName
                             @ 'Language.PureScript.Names.ValueOpName)
                          y
                          x of wild {
                     GHC.Types.False -> y GHC.Types.True -> x })
                  (\ (x :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.OpName
                                'Language.PureScript.Names.ValueOpName))
                     (y :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.OpName
                                'Language.PureScript.Names.ValueOpName)) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ (Language.PureScript.Names.OpName
                               'Language.PureScript.Names.ValueOpName)
                          (Language.PureScript.Names.$fOrdOpName
                             @ 'Language.PureScript.Names.ValueOpName)
                          y
                          x of wild {
                     GHC.Types.False -> x GHC.Types.True -> y }) -}
b4a06c1811e802dd2ca7eeb3d0d0247f
  $s$fOrdQualified5 ::
    GHC.Classes.Ord
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName))
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.Qualified
                       (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ClassName))
                  Language.PureScript.Sugar.Names.Imports.$s$fEqQualified5
                  (Language.PureScript.Names.$fOrdQualified_$ccompare
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ClassName)
                     (Language.PureScript.Names.$fOrdProperName
                        @ 'Language.PureScript.Names.ClassName))
                  (Language.PureScript.Names.$fOrdQualified_$c<
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ClassName)
                     (Language.PureScript.Names.$fOrdProperName
                        @ 'Language.PureScript.Names.ClassName))
                  (\ (a1 :: Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.ClassName))
                     (b :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ClassName)) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.ClassName)
                          (Language.PureScript.Names.$fOrdProperName
                             @ 'Language.PureScript.Names.ClassName)
                          b
                          a1 of wild {
                     GHC.Types.False -> GHC.Types.True
                     GHC.Types.True -> GHC.Types.False })
                  (\ (a1 :: Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.ClassName))
                     (b :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ClassName)) ->
                   Language.PureScript.Names.$fOrdQualified_$c<
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ClassName)
                     (Language.PureScript.Names.$fOrdProperName
                        @ 'Language.PureScript.Names.ClassName)
                     b
                     a1)
                  (\ (a1 :: Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.ClassName))
                     (b :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ClassName)) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.ClassName)
                          (Language.PureScript.Names.$fOrdProperName
                             @ 'Language.PureScript.Names.ClassName)
                          a1
                          b of wild {
                     GHC.Types.False -> GHC.Types.True
                     GHC.Types.True -> GHC.Types.False })
                  (\ (x :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ClassName))
                     (y :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ClassName)) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.ClassName)
                          (Language.PureScript.Names.$fOrdProperName
                             @ 'Language.PureScript.Names.ClassName)
                          y
                          x of wild {
                     GHC.Types.False -> y GHC.Types.True -> x })
                  (\ (x :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ClassName))
                     (y :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ClassName)) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.ClassName)
                          (Language.PureScript.Names.$fOrdProperName
                             @ 'Language.PureScript.Names.ClassName)
                          y
                          x of wild {
                     GHC.Types.False -> x GHC.Types.True -> y }) -}
8d4a62ec50645b80144c017476af1555
  $s$fOrdQualified6 ::
    GHC.Classes.Ord
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.KindName))
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.Qualified
                       (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.KindName))
                  Language.PureScript.Sugar.Names.Imports.$s$fEqQualified6
                  (Language.PureScript.Names.$fOrdQualified_$ccompare
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.KindName)
                     (Language.PureScript.Names.$fOrdProperName
                        @ 'Language.PureScript.Names.KindName))
                  (Language.PureScript.Names.$fOrdQualified_$c<
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.KindName)
                     (Language.PureScript.Names.$fOrdProperName
                        @ 'Language.PureScript.Names.KindName))
                  (\ (a1 :: Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.KindName))
                     (b :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.KindName)) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.KindName)
                          (Language.PureScript.Names.$fOrdProperName
                             @ 'Language.PureScript.Names.KindName)
                          b
                          a1 of wild {
                     GHC.Types.False -> GHC.Types.True
                     GHC.Types.True -> GHC.Types.False })
                  (\ (a1 :: Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.KindName))
                     (b :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.KindName)) ->
                   Language.PureScript.Names.$fOrdQualified_$c<
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.KindName)
                     (Language.PureScript.Names.$fOrdProperName
                        @ 'Language.PureScript.Names.KindName)
                     b
                     a1)
                  (\ (a1 :: Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.KindName))
                     (b :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.KindName)) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.KindName)
                          (Language.PureScript.Names.$fOrdProperName
                             @ 'Language.PureScript.Names.KindName)
                          a1
                          b of wild {
                     GHC.Types.False -> GHC.Types.True
                     GHC.Types.True -> GHC.Types.False })
                  (\ (x :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.KindName))
                     (y :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.KindName)) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.KindName)
                          (Language.PureScript.Names.$fOrdProperName
                             @ 'Language.PureScript.Names.KindName)
                          y
                          x of wild {
                     GHC.Types.False -> y GHC.Types.True -> x })
                  (\ (x :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.KindName))
                     (y :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.KindName)) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.KindName)
                          (Language.PureScript.Names.$fOrdProperName
                             @ 'Language.PureScript.Names.KindName)
                          y
                          x of wild {
                     GHC.Types.False -> x GHC.Types.True -> y }) -}
dd915dab7d078390af35ddf4107a639f
  $salter_go13 ::
    GHC.Classes.Ord k1 =>
    (GHC.Base.Maybe a1 -> GHC.Base.Maybe a1)
    -> k1 -> Data.Map.Internal.Map k1 a1 -> Data.Map.Internal.Map k1 a1
  {- Arity: 4,
     Strictness: <L,U(A,C(C1(U)),A,A,A,A,A,A)><C(S),1*C1(U)><S,1*U><S,1*U> -}
58aa1dc9d46aa33c916a386eddc01673
  $sfromList ::
    [(Language.PureScript.Names.ProperName
        'Language.PureScript.Names.ConstructorName,
      a)]
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ConstructorName)
         a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a
                   (ds :: [(Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ConstructorName,
                            a)]) ->
                 case ds of wild {
                   []
                   -> Data.Map.Internal.Tip
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ConstructorName)
                        @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case kx
                                  `cast`
                                (Language.PureScript.Names.N:ProperName[0]
                                     <'Language.PureScript.Names.ConstructorName>_P) of nt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                           Data.Map.Internal.Bin
                             @ (Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.ConstructorName)
                             @ a
                             1#
                             nt
                               `cast`
                             (Sym (Language.PureScript.Names.N:ProperName[0]
                                       <'Language.PureScript.Names.ConstructorName>_P))
                             x
                             (Data.Map.Internal.Tip
                                @ (Language.PureScript.Names.ProperName
                                     'Language.PureScript.Names.ConstructorName)
                                @ a)
                             (Data.Map.Internal.Tip
                                @ (Language.PureScript.Names.ProperName
                                     'Language.PureScript.Names.ConstructorName)
                                @ a) }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case kx
                                  `cast`
                                (Language.PureScript.Names.N:ProperName[0]
                                     <'Language.PureScript.Names.ConstructorName>_P) of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                           case ky
                                  `cast`
                                (Language.PureScript.Names.N:ProperName[0]
                                     <'Language.PureScript.Names.ConstructorName>_P) of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                           case Data.Text.$w$ccompare ww1 ww2 ww3 ww5 ww6 ww7 of wild4 {
                             DEFAULT
                             -> Language.PureScript.Sugar.Names.Imports.$sfromList_$spoly_go14
                                  @ a
                                  ww4
                                    `cast`
                                  (Sym (Language.PureScript.Names.N:ProperName[0]
                                            <'Language.PureScript.Names.ConstructorName>_P))
                                  ds3
                                  ipv1
                                  (Data.Map.Internal.Bin
                                     @ (Language.PureScript.Names.ProperName
                                          'Language.PureScript.Names.ConstructorName)
                                     @ a
                                     1#
                                     ww
                                       `cast`
                                     (Sym (Language.PureScript.Names.N:ProperName[0]
                                               <'Language.PureScript.Names.ConstructorName>_P))
                                     x
                                     (Data.Map.Internal.Tip
                                        @ (Language.PureScript.Names.ProperName
                                             'Language.PureScript.Names.ConstructorName)
                                        @ a)
                                     (Data.Map.Internal.Tip
                                        @ (Language.PureScript.Names.ProperName
                                             'Language.PureScript.Names.ConstructorName)
                                        @ a))
                             GHC.Types.LT
                             -> Language.PureScript.Sugar.Names.Imports.$sfromList_$s$wpoly_go13
                                  @ a
                                  ww4
                                    `cast`
                                  (Sym (Language.PureScript.Names.N:ProperName[0]
                                            <'Language.PureScript.Names.ConstructorName>_P))
                                  ds3
                                  ipv1
                                  (Data.Map.Internal.Bin
                                     @ (Language.PureScript.Names.ProperName
                                          'Language.PureScript.Names.ConstructorName)
                                     @ a
                                     1#
                                     ww
                                       `cast`
                                     (Sym (Language.PureScript.Names.N:ProperName[0]
                                               <'Language.PureScript.Names.ConstructorName>_P))
                                     x
                                     (Data.Map.Internal.Tip
                                        @ (Language.PureScript.Names.ProperName
                                             'Language.PureScript.Names.ConstructorName)
                                        @ a)
                                     (Data.Map.Internal.Tip
                                        @ (Language.PureScript.Names.ProperName
                                             'Language.PureScript.Names.ConstructorName)
                                        @ a))
                                  1# } } } } } } }) -}
dd69d29f18645db85cad626e264c2d7d
  $sfromList_$s$wpoly_go13 ::
    Language.PureScript.Names.ProperName
      'Language.PureScript.Names.ConstructorName
    -> a
    -> [(Language.PureScript.Names.ProperName
           'Language.PureScript.Names.ConstructorName,
         a)]
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ConstructorName)
         a
    -> GHC.Prim.Int#
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ConstructorName)
         a
  {- Arity: 5, Strictness: <S,1*U(U,U,U)><L,U><S,1*U><S,1*U><L,U> -}
1e8f67fe78340e6a6102033224ab052a
  $sfromList_$spoly_go14 ::
    Language.PureScript.Names.ProperName
      'Language.PureScript.Names.ConstructorName
    -> a
    -> [(Language.PureScript.Names.ProperName
           'Language.PureScript.Names.ConstructorName,
         a)]
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ConstructorName)
         a
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ConstructorName)
         a
  {- Arity: 4, Strictness: <S(SSS),1*U(U,U,U)><L,U><S,1*U><S,1*U> -}
259be4545da35554fa39c6e6b89d733c
  $sinsert_$sgo1 ::
    Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ModuleName
    -> a1
    -> Data.Map.Internal.Map Language.PureScript.Names.ModuleName a1
    -> Data.Map.Internal.Map Language.PureScript.Names.ModuleName a1
  {- Arity: 4, Strictness: <L,U><S,1*U><L,U><S,1*U> -}
41f368dfb2b3981da8b6a754c9d06d7d
  $sinsert_$sgo3 ::
    Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ModuleName
    -> Data.Set.Internal.Set Language.PureScript.Names.ModuleName
    -> Data.Set.Internal.Set Language.PureScript.Names.ModuleName
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U> -}
15308458fd2662d62fb560989a02e7f0
  $slookup1 ::
    Language.PureScript.Names.ModuleName
    -> Data.Map.Internal.Map Language.PureScript.Names.ModuleName a
    -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
6f1f55c586d1269ac9bceeea762aeaf9
  $slookup9 ::
    Language.PureScript.Names.Ident
    -> Data.Map.Internal.Map Language.PureScript.Names.Ident a
    -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
549f94bc32b9051386c4a795cddde4e9
  $slookup_$spoly_go1 ::
    Data.Map.Internal.Map Language.PureScript.Names.Ident a
    -> GHC.Base.Maybe Data.Text.Internal.Text
    -> GHC.Integer.Type.Integer
    -> GHC.Base.Maybe a
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,1*U><L,U> -}
1f6d60cc719ce414af23138f5794ea2a
  $slookup_$spoly_go13 ::
    Data.Map.Internal.Map Language.PureScript.Names.Ident a
    -> GHC.Base.Maybe a
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
f2f2e4ce4e1d81fb11fa9b0494fbcaac
  $slookup_$spoly_go2 ::
    Data.Map.Internal.Map Language.PureScript.Names.Ident a
    -> Data.Text.Internal.Text -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U(U,U,U)> -}
8a15e26a455af7f3b42aa0fdaa4241d8
  $smember5 ::
    Language.PureScript.Names.Ident
    -> Data.Map.Internal.Map Language.PureScript.Names.Ident a
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
faa4d11282d25f51cf670d772e6c9860
  $smember_$spoly_go1 ::
    Data.Map.Internal.Map Language.PureScript.Names.Ident a
    -> GHC.Base.Maybe Data.Text.Internal.Text
    -> GHC.Integer.Type.Integer
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,1*U><L,U> -}
04c4f371b94df8756fc1620f5b562a85
  $smember_$spoly_go13 ::
    Data.Map.Internal.Map Language.PureScript.Names.Ident a
    -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
a5534aadb4a5c1cab9db907af92578db
  $smember_$spoly_go2 ::
    Data.Map.Internal.Map Language.PureScript.Names.Ident a
    -> Data.Text.Internal.Text -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U(U,U,U)> -}
1e84888a0d23c5d6ce4a7996d64aa3ae
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Language.PureScript.Sugar.Names.Imports.$trModule3
                   Language.PureScript.Sugar.Names.Imports.$trModule1) -}
7f4f562fa80ffcd7c8ed97d269cf6ac4
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Sugar.Names.Imports.$trModule2) -}
8022dd5bcb2e12ba8c19b2bec66d3021
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Language.PureScript.Sugar.Names.Imports"#) -}
28226d7f6321eb6c5aa4911db7d0d660
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Sugar.Names.Imports.$trModule4) -}
c9ddb582da1db605f7802d339651447b
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"#) -}
09f2f27e19e85e8305e255c5450f5606
  $w$sgo13 ::
    Language.PureScript.Names.ProperName
      'Language.PureScript.Names.ConstructorName
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> a1
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ConstructorName)
         a1
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ConstructorName)
         a1
  {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><L,U><S,1*U>,
     Inline: [0] -}
0f9556f18f7bbbee35f777b622d71814
  $wpoly_go1 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName)
         a
    -> GHC.Base.Maybe a
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U><L,U><L,U><S,1*U>,
     Inline: [0] -}
b87b029e2488ed96c7b1da2e13765fed
  $wpoly_go10 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.KindName)
         a
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U><L,U><L,U><S,1*U>,
     Inline: [0] -}
d953c5fb565ee7bbff19b044fc65e1ba
  $wpoly_go13 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ConstructorName)
         a
    -> GHC.Base.Maybe a
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U><L,U><L,U><S,1*U>,
     Inline: [0] -}
de5b66753e7721ccde4e423890acc8b0
  $wpoly_go2 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.TypeOpName)
         a
    -> GHC.Base.Maybe a
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U><L,U><L,U><S,1*U>,
     Inline: [0] -}
6e69bff68fc495eb44b4cd516bb447f9
  $wpoly_go3 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.ValueOpName)
         a
    -> GHC.Base.Maybe a
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U><L,U><L,U><S,1*U>,
     Inline: [0] -}
6b1d07f806a83da6484842f54cf20c9b
  $wpoly_go4 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
         a
    -> GHC.Base.Maybe a
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U><L,U><L,U><S,1*U>,
     Inline: [0] -}
ee4c629667dc777bc35dbc9478e8b022
  $wpoly_go5 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.KindName)
         a
    -> GHC.Base.Maybe a
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U><L,U><L,U><S,1*U>,
     Inline: [0] -}
cda250e4ff3785230ca1c02ddee976b3
  $wpoly_go6 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName)
         a
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U><L,U><L,U><S,1*U>,
     Inline: [0] -}
5a70ced0bdeb3af8282e69600fc521e5
  $wpoly_go7 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.TypeOpName)
         a
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U><L,U><L,U><S,1*U>,
     Inline: [0] -}
75ad0cfe73c649b5d22579825ed2c66e
  $wpoly_go8 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.ValueOpName)
         a
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U><L,U><L,U><S,1*U>,
     Inline: [0] -}
d37fa50ab38d73d6974928e4344b4bf8
  $wpoly_go9 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
         a
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U><L,U><L,U><S,1*U>,
     Inline: [0] -}
8a3deb047bcb6198527fd4fa6f28bf03
  $wresolveImports ::
    Control.Monad.Error.Class.MonadError
      Language.PureScript.Errors.MultipleErrors m =>
    Language.PureScript.Sugar.Names.Env.Env
    -> Language.PureScript.AST.SourcePos.SourceSpan
    -> [Language.PureScript.Comments.Comment]
    -> Language.PureScript.Names.ModuleName
    -> [Language.PureScript.AST.Declarations.Declaration]
    -> GHC.Base.Maybe
         [Language.PureScript.AST.Declarations.DeclarationRef]
    -> m (Language.PureScript.AST.Declarations.Module,
          Language.PureScript.Sugar.Names.Env.Imports)
  {- Arity: 7,
     Strictness: <S(LLC(C(S))),U(U(U(1*U(1*C1(C1(U)),A),C(U),A,A,C(C1(U)),A),C(C1(U)),C(C1(U)),U,A),C(U),1*C1(C1(U)))><L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ m :: * -> *
                   (w :: Control.Monad.Error.Class.MonadError
                           Language.PureScript.Errors.MultipleErrors m)
                   (w1 :: Language.PureScript.Sugar.Names.Env.Env)
                   (ww :: Language.PureScript.AST.SourcePos.SourceSpan)
                   (ww1 :: [Language.PureScript.Comments.Comment])
                   (ww2 :: Language.PureScript.Names.ModuleName)
                   (ww3 :: [Language.PureScript.AST.Declarations.Declaration])
                   (ww4 :: GHC.Base.Maybe
                             [Language.PureScript.AST.Declarations.DeclarationRef]) ->
                 let {
                   f2 :: Language.PureScript.AST.Declarations.ErrorMessageHint
                   = Language.PureScript.AST.Declarations.ErrorInModule ww2
                 } in
                 Control.Monad.Error.Class.catchError
                   @ Language.PureScript.Errors.MultipleErrors
                   @ m
                   w
                   @ (Language.PureScript.AST.Declarations.Module,
                      Language.PureScript.Sugar.Names.Env.Imports)
                   (let {
                      $dMonad :: GHC.Base.Monad m
                      = Control.Monad.Error.Class.$p1MonadError
                          @ Language.PureScript.Errors.MultipleErrors
                          @ m
                          w
                    } in
                    let {
                      lvl93 :: Language.PureScript.AST.Declarations.Module
                      = Language.PureScript.AST.Declarations.Module ww ww1 ww2 ww3 ww4
                    } in
                    GHC.Base.fmap
                      @ m
                      (GHC.Base.$p1Applicative @ m (GHC.Base.$p1Monad @ m $dMonad))
                      @ Language.PureScript.Sugar.Names.Env.Imports
                      @ (Language.PureScript.AST.Declarations.Module,
                         Language.PureScript.Sugar.Names.Env.Imports)
                      (\ (ds :: Language.PureScript.Sugar.Names.Env.Imports) ->
                       (lvl93, ds))
                      (letrec {
                         go13 :: (Language.PureScript.Sugar.Names.Env.Imports
                                  -> m Language.PureScript.Sugar.Names.Env.Imports)
                                 -> Data.Map.Internal.Map
                                      Language.PureScript.Names.ModuleName
                                      [(Language.PureScript.AST.SourcePos.SourceSpan,
                                        GHC.Base.Maybe
                                          Language.PureScript.AST.Declarations.ImportDeclarationType,
                                        GHC.Base.Maybe Language.PureScript.Names.ModuleName)]
                                 -> Language.PureScript.Sugar.Names.Env.Imports
                                 -> m Language.PureScript.Sugar.Names.Env.Imports
                           {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
                         = \ (z' :: Language.PureScript.Sugar.Names.Env.Imports
                                    -> m Language.PureScript.Sugar.Names.Env.Imports)
                             (ds :: Data.Map.Internal.Map
                                      Language.PureScript.Names.ModuleName
                                      [(Language.PureScript.AST.SourcePos.SourceSpan,
                                        GHC.Base.Maybe
                                          Language.PureScript.AST.Declarations.ImportDeclarationType,
                                        GHC.Base.Maybe Language.PureScript.Names.ModuleName)]) ->
                           case ds of wild {
                             Data.Map.Internal.Bin dt kx x l r
                             -> go13
                                  (let {
                                     xs :: Language.PureScript.Sugar.Names.Env.Imports
                                           -> m Language.PureScript.Sugar.Names.Env.Imports
                                     = go13 z' r
                                   } in
                                   \ (eta :: Language.PureScript.Sugar.Names.Env.Imports) ->
                                   GHC.Base.>>=
                                     @ m
                                     $dMonad
                                     @ Language.PureScript.Sugar.Names.Env.Imports
                                     @ Language.PureScript.Sugar.Names.Env.Imports
                                     (Language.PureScript.Sugar.Names.Imports.$wresolveModuleImport
                                        @ m
                                        w
                                        w1
                                        eta
                                        kx
                                        x)
                                     xs)
                                  l
                             Data.Map.Internal.Tip -> z' }
                       } in
                       go13
                         (GHC.Base.return
                            @ m
                            $dMonad
                            @ Language.PureScript.Sugar.Names.Env.Imports)
                         (Language.PureScript.Sugar.Names.Imports.$sinsert_$sgo1
                            @ [(Language.PureScript.AST.SourcePos.SourceSpan,
                                GHC.Base.Maybe
                                  Language.PureScript.AST.Declarations.ImportDeclarationType,
                                GHC.Base.Maybe Language.PureScript.Names.ModuleName)]
                            ww2
                            ww2
                            Language.PureScript.Sugar.Names.Imports.resolveImports1
                            (Language.PureScript.Sugar.Names.Imports.resolveImports_go13
                               (Language.PureScript.Sugar.Names.Imports.findImports ww3)))
                         Language.PureScript.Sugar.Names.Env.nullImports))
                   (\ (x :: Language.PureScript.Errors.MultipleErrors) ->
                    Control.Monad.Error.Class.throwError
                      @ Language.PureScript.Errors.MultipleErrors
                      @ m
                      w
                      @ (Language.PureScript.AST.Declarations.Module,
                         Language.PureScript.Sugar.Names.Env.Imports)
                      (Language.PureScript.Errors.addHint1 f2 x)
                        `cast`
                      (Sym (Language.PureScript.Errors.N:MultipleErrors[0])))) -}
e3de47cb56757647408ebc7d55c55c86
  $wresolveModuleImport ::
    Control.Monad.Error.Class.MonadError
      Language.PureScript.Errors.MultipleErrors m =>
    Language.PureScript.Sugar.Names.Env.Env
    -> Language.PureScript.Sugar.Names.Env.Imports
    -> Language.PureScript.Names.ModuleName
    -> [(Language.PureScript.AST.SourcePos.SourceSpan,
         GHC.Base.Maybe
           Language.PureScript.AST.Declarations.ImportDeclarationType,
         GHC.Base.Maybe Language.PureScript.Names.ModuleName)]
    -> m Language.PureScript.Sugar.Names.Env.Imports
  {- Arity: 5,
     Strictness: <L,U(1*U(1*U(A,1*C1(U),A,A,C(C1(U)),A),C(C1(U)),C(C1(U)),U,A),C(U),A)><L,1*U><L,U><L,U><S,1*U>,
     Inline: [0] -}
78e4b45c0ae58f67bf0e3d6dfb6c34f6
  type ImportDef =
    (Language.PureScript.AST.SourcePos.SourceSpan,
     Language.PureScript.AST.Declarations.ImportDeclarationType,
     GHC.Base.Maybe Language.PureScript.Names.ModuleName)
68aad10a420e32a9744663d0b8a43bbb
  findImports ::
    [Language.PureScript.AST.Declarations.Declaration]
    -> Data.Map.Internal.Map
         Language.PureScript.Names.ModuleName
         [Language.PureScript.Sugar.Names.Imports.ImportDef]
  {- Arity: 1, Strictness: <S,1*U> -}
9fa846d91cc3e599dc34502480128f1a
  resolveImports ::
    Control.Monad.Error.Class.MonadError
      Language.PureScript.Errors.MultipleErrors m =>
    Language.PureScript.Sugar.Names.Env.Env
    -> Language.PureScript.AST.Declarations.Module
    -> m (Language.PureScript.AST.Declarations.Module,
          Language.PureScript.Sugar.Names.Env.Imports)
  {- Arity: 3,
     Strictness: <S(LLC(C(S))),U(U(U(U(C(C1(U)),A),C(U),A,A,C(C1(U)),A),C(C1(U)),C(C1(U)),U,A),C(U),C(C1(U)))><L,U><S,1*U(U,U,U,U,U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ m :: * -> *
                   (w :: Control.Monad.Error.Class.MonadError
                           Language.PureScript.Errors.MultipleErrors m)
                   (w1 :: Language.PureScript.Sugar.Names.Env.Env)
                   (w2 :: Language.PureScript.AST.Declarations.Module) ->
                 case w2 of ww { Language.PureScript.AST.Declarations.Module ww1 ww2 ww3 ww4 ww5 ->
                 Language.PureScript.Sugar.Names.Imports.$wresolveImports
                   @ m
                   w
                   w1
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5 }) -}
7b090d84e393552d95091ac691dddd76
  resolveImports1 ::
    [(Language.PureScript.AST.SourcePos.SourceSpan,
      GHC.Base.Maybe
        Language.PureScript.AST.Declarations.ImportDeclarationType,
      GHC.Base.Maybe Language.PureScript.Names.ModuleName)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.AST.SourcePos.SourceSpan,
                      GHC.Base.Maybe
                        Language.PureScript.AST.Declarations.ImportDeclarationType,
                      GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   Language.PureScript.Sugar.Names.Imports.resolveImports2
                   (GHC.Types.[]
                      @ (Language.PureScript.AST.SourcePos.SourceSpan,
                         GHC.Base.Maybe
                           Language.PureScript.AST.Declarations.ImportDeclarationType,
                         GHC.Base.Maybe Language.PureScript.Names.ModuleName))) -}
06d6b3fdc8e5cac35243cfe6c1352e84
  resolveImports2 ::
    (Language.PureScript.AST.SourcePos.SourceSpan,
     GHC.Base.Maybe
       Language.PureScript.AST.Declarations.ImportDeclarationType,
     GHC.Base.Maybe Language.PureScript.Names.ModuleName)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Sugar.Names.Imports.resolveImports3,
                  GHC.Base.Nothing
                    @ Language.PureScript.AST.Declarations.ImportDeclarationType,
                  GHC.Base.Nothing @ Language.PureScript.Names.ModuleName)) -}
9c3ef964bb6dee1f349c141fa756951e
  resolveImports3 :: Language.PureScript.AST.SourcePos.SourceSpan
  {- Strictness: m,
     Unfolding: (Language.PureScript.AST.SourcePos.SourceSpan
                   Language.PureScript.Sugar.Names.Imports.resolveImports4
                   Language.PureScript.AST.SourcePos.internalModuleSourceSpan1
                   Language.PureScript.AST.SourcePos.internalModuleSourceSpan1) -}
c1e4f14f335e9aacea131eda434e4c66
  resolveImports4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Sugar.Names.Imports.resolveImports5) -}
f388940c6190fa791cedd78fb4a4ee84
  resolveImports5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("<module>"#) -}
94a7df52a0b7f938255257ceae6be329
  resolveImports_go13 ::
    Data.Map.Internal.Map
      Language.PureScript.Names.ModuleName
      [(Language.PureScript.AST.SourcePos.SourceSpan,
        Language.PureScript.AST.Declarations.ImportDeclarationType,
        GHC.Base.Maybe Language.PureScript.Names.ModuleName)]
    -> Data.Map.Internal.Map
         Language.PureScript.Names.ModuleName
         [(Language.PureScript.AST.SourcePos.SourceSpan,
           GHC.Base.Maybe
             Language.PureScript.AST.Declarations.ImportDeclarationType,
           GHC.Base.Maybe Language.PureScript.Names.ModuleName)]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
e019756aed6514aca4e642df8f55aac8
  resolveModuleImport ::
    Control.Monad.Error.Class.MonadError
      Language.PureScript.Errors.MultipleErrors m =>
    Language.PureScript.Sugar.Names.Env.Env
    -> Language.PureScript.Sugar.Names.Env.Imports
    -> (Language.PureScript.Names.ModuleName,
        [(Language.PureScript.AST.SourcePos.SourceSpan,
          GHC.Base.Maybe
            Language.PureScript.AST.Declarations.ImportDeclarationType,
          GHC.Base.Maybe Language.PureScript.Names.ModuleName)])
    -> m Language.PureScript.Sugar.Names.Env.Imports
  {- Arity: 4,
     Strictness: <L,U(U(U(A,C(U),A,A,C(C1(U)),A),C(C1(U)),C(C1(U)),U,A),C(U),A)><L,1*U><L,U><S(LS),1*U(U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ @ m :: * -> *
                   (w :: Control.Monad.Error.Class.MonadError
                           Language.PureScript.Errors.MultipleErrors m)
                   (w1 :: Language.PureScript.Sugar.Names.Env.Env)
                   (w2 :: Language.PureScript.Sugar.Names.Env.Imports)
                   (w3 :: (Language.PureScript.Names.ModuleName,
                           [(Language.PureScript.AST.SourcePos.SourceSpan,
                             GHC.Base.Maybe
                               Language.PureScript.AST.Declarations.ImportDeclarationType,
                             GHC.Base.Maybe Language.PureScript.Names.ModuleName)])) ->
                 case w3 of ww { (,) ww1 ww2 ->
                 Language.PureScript.Sugar.Names.Imports.$wresolveModuleImport
                   @ m
                   w
                   w1
                   w2
                   ww1
                   ww2 }) -}
"SC:poly_go130" forall @ a
                       (sc :: Data.Map.Internal.Map Language.PureScript.Names.Ident a)
                       (sc1 :: Data.Text.Internal.Text)
  Language.PureScript.Sugar.Names.Imports.$slookup9 @ a
                                                    (Language.PureScript.Names.Ident sc1)
                                                    sc
  = Language.PureScript.Sugar.Names.Imports.$slookup_$spoly_go2
      @ a
      sc
      sc1
"SC:poly_go130" forall @ a
                       (sc :: Data.Map.Internal.Map Language.PureScript.Names.Ident a)
                       (sc1 :: Data.Text.Internal.Text)
  Language.PureScript.Sugar.Names.Imports.$smember5 @ a
                                                    (Language.PureScript.Names.Ident sc1)
                                                    sc
  = Language.PureScript.Sugar.Names.Imports.$smember_$spoly_go2
      @ a
      sc
      sc1
"SC:poly_go131" forall @ a
                       (sc :: Data.Map.Internal.Map Language.PureScript.Names.Ident a)
                       (sc1 :: GHC.Base.Maybe Data.Text.Internal.Text)
                       (sc2 :: GHC.Integer.Type.Integer)
  Language.PureScript.Sugar.Names.Imports.$slookup9 @ a
                                                    (Language.PureScript.Names.GenIdent sc1 sc2)
                                                    sc
  = Language.PureScript.Sugar.Names.Imports.$slookup_$spoly_go1
      @ a
      sc
      sc1
      sc2
"SC:poly_go131" forall @ a
                       (sc :: Data.Map.Internal.Map Language.PureScript.Names.Ident a)
                       (sc1 :: GHC.Base.Maybe Data.Text.Internal.Text)
                       (sc2 :: GHC.Integer.Type.Integer)
  Language.PureScript.Sugar.Names.Imports.$smember5 @ a
                                                    (Language.PureScript.Names.GenIdent sc1 sc2)
                                                    sc
  = Language.PureScript.Sugar.Names.Imports.$smember_$spoly_go1
      @ a
      sc
      sc1
      sc2
"SC:poly_go132" forall @ a
                       (sc :: Data.Map.Internal.Map Language.PureScript.Names.Ident a)
  Language.PureScript.Sugar.Names.Imports.$slookup9 @ a
                                                    Language.PureScript.Names.UnusedIdent
                                                    sc
  = Language.PureScript.Sugar.Names.Imports.$slookup_$spoly_go13
      @ a
      sc
"SC:poly_go132" forall @ a
                       (sc :: Data.Map.Internal.Map Language.PureScript.Names.Ident a)
  Language.PureScript.Sugar.Names.Imports.$smember5 @ a
                                                    Language.PureScript.Names.UnusedIdent
                                                    sc
  = Language.PureScript.Sugar.Names.Imports.$smember_$spoly_go13
      @ a
      sc
"SPEC/Language.PureScript.Sugar.Names.Imports $fEqQualified @ (OpName
                                                                'TypeOpName)" [orphan] forall (v :: GHC.Classes.Eq
                                                                                                                                                                            (Language.PureScript.Names.OpName
                                                                                                                                                                               'Language.PureScript.Names.TypeOpName))
  Language.PureScript.Names.$fEqQualified @ (Language.PureScript.Names.OpName
                                               'Language.PureScript.Names.TypeOpName)
                                          v
  = Language.PureScript.Sugar.Names.Imports.$s$fEqQualified2
"SPEC/Language.PureScript.Sugar.Names.Imports $fEqQualified @ (OpName
                                                                'ValueOpName)" [orphan] forall (v :: GHC.Classes.Eq
                                                                                                                                                                             (Language.PureScript.Names.OpName
                                                                                                                                                                                'Language.PureScript.Names.ValueOpName))
  Language.PureScript.Names.$fEqQualified @ (Language.PureScript.Names.OpName
                                               'Language.PureScript.Names.ValueOpName)
                                          v
  = Language.PureScript.Sugar.Names.Imports.$s$fEqQualified4
"SPEC/Language.PureScript.Sugar.Names.Imports $fEqQualified @ (ProperName
                                                                'ClassName)" [orphan] forall (v :: GHC.Classes.Eq
                                                                                                                                                                               (Language.PureScript.Names.ProperName
                                                                                                                                                                                  'Language.PureScript.Names.ClassName))
  Language.PureScript.Names.$fEqQualified @ (Language.PureScript.Names.ProperName
                                               'Language.PureScript.Names.ClassName)
                                          v
  = Language.PureScript.Sugar.Names.Imports.$s$fEqQualified5
"SPEC/Language.PureScript.Sugar.Names.Imports $fEqQualified @ (ProperName
                                                                'ConstructorName)" [orphan] forall (v :: GHC.Classes.Eq
                                                                                                                                                                                     (Language.PureScript.Names.ProperName
                                                                                                                                                                                        'Language.PureScript.Names.ConstructorName))
  Language.PureScript.Names.$fEqQualified @ (Language.PureScript.Names.ProperName
                                               'Language.PureScript.Names.ConstructorName)
                                          v
  = Language.PureScript.Sugar.Names.Imports.$s$fEqQualified
"SPEC/Language.PureScript.Sugar.Names.Imports $fEqQualified @ (ProperName
                                                                'KindName)" [orphan] forall (v :: GHC.Classes.Eq
                                                                                                                                                                              (Language.PureScript.Names.ProperName
                                                                                                                                                                                 'Language.PureScript.Names.KindName))
  Language.PureScript.Names.$fEqQualified @ (Language.PureScript.Names.ProperName
                                               'Language.PureScript.Names.KindName)
                                          v
  = Language.PureScript.Sugar.Names.Imports.$s$fEqQualified6
"SPEC/Language.PureScript.Sugar.Names.Imports $fEqQualified @ (ProperName
                                                                'TypeName)" [orphan] forall (v :: GHC.Classes.Eq
                                                                                                                                                                              (Language.PureScript.Names.ProperName
                                                                                                                                                                                 'Language.PureScript.Names.TypeName))
  Language.PureScript.Names.$fEqQualified @ (Language.PureScript.Names.ProperName
                                               'Language.PureScript.Names.TypeName)
                                          v
  = Language.PureScript.Sugar.Names.Imports.$s$fEqQualified1
"SPEC/Language.PureScript.Sugar.Names.Imports $fEqQualified @ Ident" [orphan] forall (v :: GHC.Classes.Eq
                                                                                             Language.PureScript.Names.Ident)
  Language.PureScript.Names.$fEqQualified @ Language.PureScript.Names.Ident
                                          v
  = Language.PureScript.Sugar.Names.Imports.$s$fEqQualified3
"SPEC/Language.PureScript.Sugar.Names.Imports $fEqQualified_$c/= @ (OpName
                                                                     'TypeOpName)" [orphan] forall ($dEq :: GHC.Classes.Eq
                                                                                                                                                                                         (Language.PureScript.Names.OpName
                                                                                                                                                                                            'Language.PureScript.Names.TypeOpName))
  Language.PureScript.Names.$fEqQualified_$c/= @ (Language.PureScript.Names.OpName
                                                    'Language.PureScript.Names.TypeOpName)
                                               $dEq
  = Language.PureScript.Sugar.Names.Imports.$s$fEqQualified_$s$fEqQualified_$c/=2
"SPEC/Language.PureScript.Sugar.Names.Imports $fEqQualified_$c/= @ (OpName
                                                                     'ValueOpName)" [orphan] forall ($dEq :: GHC.Classes.Eq
                                                                                                                                                                                          (Language.PureScript.Names.OpName
                                                                                                                                                                                             'Language.PureScript.Names.ValueOpName))
  Language.PureScript.Names.$fEqQualified_$c/= @ (Language.PureScript.Names.OpName
                                                    'Language.PureScript.Names.ValueOpName)
                                               $dEq
  = Language.PureScript.Sugar.Names.Imports.$s$fEqQualified_$s$fEqQualified_$c/=4
"SPEC/Language.PureScript.Sugar.Names.Imports $fEqQualified_$c/= @ (ProperName
                                                                     'ClassName)" [orphan] forall ($dEq :: GHC.Classes.Eq
                                                                                                                                                                                            (Language.PureScript.Names.ProperName
                                                                                                                                                                                               'Language.PureScript.Names.ClassName))
  Language.PureScript.Names.$fEqQualified_$c/= @ (Language.PureScript.Names.ProperName
                                                    'Language.PureScript.Names.ClassName)
                                               $dEq
  = Language.PureScript.Sugar.Names.Imports.$s$fEqQualified_$s$fEqQualified_$c/=5
"SPEC/Language.PureScript.Sugar.Names.Imports $fEqQualified_$c/= @ (ProperName
                                                                     'ConstructorName)" [orphan] forall ($dEq :: GHC.Classes.Eq
                                                                                                                                                                                                  (Language.PureScript.Names.ProperName
                                                                                                                                                                                                     'Language.PureScript.Names.ConstructorName))
  Language.PureScript.Names.$fEqQualified_$c/= @ (Language.PureScript.Names.ProperName
                                                    'Language.PureScript.Names.ConstructorName)
                                               $dEq
  = Language.PureScript.Sugar.Names.Imports.$s$fEqQualified_$s$fEqQualified_$c/=
"SPEC/Language.PureScript.Sugar.Names.Imports $fEqQualified_$c/= @ (ProperName
                                                                     'KindName)" [orphan] forall ($dEq :: GHC.Classes.Eq
                                                                                                                                                                                           (Language.PureScript.Names.ProperName
                                                                                                                                                                                              'Language.PureScript.Names.KindName))
  Language.PureScript.Names.$fEqQualified_$c/= @ (Language.PureScript.Names.ProperName
                                                    'Language.PureScript.Names.KindName)
                                               $dEq
  = Language.PureScript.Sugar.Names.Imports.$s$fEqQualified_$s$fEqQualified_$c/=6
"SPEC/Language.PureScript.Sugar.Names.Imports $fEqQualified_$c/= @ (ProperName
                                                                     'TypeName)" [orphan] forall ($dEq :: GHC.Classes.Eq
                                                                                                                                                                                           (Language.PureScript.Names.ProperName
                                                                                                                                                                                              'Language.PureScript.Names.TypeName))
  Language.PureScript.Names.$fEqQualified_$c/= @ (Language.PureScript.Names.ProperName
                                                    'Language.PureScript.Names.TypeName)
                                               $dEq
  = Language.PureScript.Sugar.Names.Imports.$s$fEqQualified_$s$fEqQualified_$c/=1
"SPEC/Language.PureScript.Sugar.Names.Imports $fEqQualified_$c/= @ Ident" [orphan] forall ($dEq :: GHC.Classes.Eq
                                                                                                     Language.PureScript.Names.Ident)
  Language.PureScript.Names.$fEqQualified_$c/= @ Language.PureScript.Names.Ident
                                               $dEq
  = Language.PureScript.Sugar.Names.Imports.$s$fEqQualified_$s$fEqQualified_$c/=3
"SPEC/Language.PureScript.Sugar.Names.Imports $fOrdQualified @ (OpName
                                                                 'TypeOpName)" [orphan] forall (v :: GHC.Classes.Ord
                                                                                                                                                                              (Language.PureScript.Names.OpName
                                                                                                                                                                                 'Language.PureScript.Names.TypeOpName))
  Language.PureScript.Names.$fOrdQualified @ (Language.PureScript.Names.OpName
                                                'Language.PureScript.Names.TypeOpName)
                                           v
  = Language.PureScript.Sugar.Names.Imports.$s$fOrdQualified2
"SPEC/Language.PureScript.Sugar.Names.Imports $fOrdQualified @ (OpName
                                                                 'ValueOpName)" [orphan] forall (v :: GHC.Classes.Ord
                                                                                                                                                                               (Language.PureScript.Names.OpName
                                                                                                                                                                                  'Language.PureScript.Names.ValueOpName))
  Language.PureScript.Names.$fOrdQualified @ (Language.PureScript.Names.OpName
                                                'Language.PureScript.Names.ValueOpName)
                                           v
  = Language.PureScript.Sugar.Names.Imports.$s$fOrdQualified4
"SPEC/Language.PureScript.Sugar.Names.Imports $fOrdQualified @ (ProperName
                                                                 'ClassName)" [orphan] forall (v :: GHC.Classes.Ord
                                                                                                                                                                                 (Language.PureScript.Names.ProperName
                                                                                                                                                                                    'Language.PureScript.Names.ClassName))
  Language.PureScript.Names.$fOrdQualified @ (Language.PureScript.Names.ProperName
                                                'Language.PureScript.Names.ClassName)
                                           v
  = Language.PureScript.Sugar.Names.Imports.$s$fOrdQualified5
"SPEC/Language.PureScript.Sugar.Names.Imports $fOrdQualified @ (ProperName
                                                                 'ConstructorName)" [orphan] forall (v :: GHC.Classes.Ord
                                                                                                                                                                                       (Language.PureScript.Names.ProperName
                                                                                                                                                                                          'Language.PureScript.Names.ConstructorName))
  Language.PureScript.Names.$fOrdQualified @ (Language.PureScript.Names.ProperName
                                                'Language.PureScript.Names.ConstructorName)
                                           v
  = Language.PureScript.Sugar.Names.Imports.$s$fOrdQualified
"SPEC/Language.PureScript.Sugar.Names.Imports $fOrdQualified @ (ProperName
                                                                 'KindName)" [orphan] forall (v :: GHC.Classes.Ord
                                                                                                                                                                                (Language.PureScript.Names.ProperName
                                                                                                                                                                                   'Language.PureScript.Names.KindName))
  Language.PureScript.Names.$fOrdQualified @ (Language.PureScript.Names.ProperName
                                                'Language.PureScript.Names.KindName)
                                           v
  = Language.PureScript.Sugar.Names.Imports.$s$fOrdQualified6
"SPEC/Language.PureScript.Sugar.Names.Imports $fOrdQualified @ (ProperName
                                                                 'TypeName)" [orphan] forall (v :: GHC.Classes.Ord
                                                                                                                                                                                (Language.PureScript.Names.ProperName
                                                                                                                                                                                   'Language.PureScript.Names.TypeName))
  Language.PureScript.Names.$fOrdQualified @ (Language.PureScript.Names.ProperName
                                                'Language.PureScript.Names.TypeName)
                                           v
  = Language.PureScript.Sugar.Names.Imports.$s$fOrdQualified1
"SPEC/Language.PureScript.Sugar.Names.Imports $fOrdQualified @ Ident" [orphan] forall (v :: GHC.Classes.Ord
                                                                                              Language.PureScript.Names.Ident)
  Language.PureScript.Names.$fOrdQualified @ Language.PureScript.Names.Ident
                                           v
  = Language.PureScript.Sugar.Names.Imports.$s$fOrdQualified3
"SPEC/Language.PureScript.Sugar.Names.Imports fromList @ (ProperName
                                                           'ConstructorName) _" [orphan] forall @ a
                                                                                                                                                                     ($dOrd :: GHC.Classes.Ord
                                                                                                                                                                                 (Language.PureScript.Names.ProperName
                                                                                                                                                                                    'Language.PureScript.Names.ConstructorName))
  Data.Map.Internal.fromList @ (Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.ConstructorName)
                             @ a
                             $dOrd
  = Language.PureScript.Sugar.Names.Imports.$sfromList @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

