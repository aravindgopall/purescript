
==================== FINAL INTERFACE ====================
2019-01-24 14:15:48.375576 UTC

interface purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Sugar.Names.Imports 8043
  interface hash: 6430f571b20a8a7ce75992c45e3ffcd4
  ABI hash: ea0651e4823445a2f538974ee903c975
  export-list hash: 85f8dff5874a25bd218daea1d8bb4d26
  orphan hash: aab41ac58cb48c6e518d657234ba52ea
  flag hash: 2aa58a824a1f725c94ffb0d8a8803a3b
  opt_hash: 2c98c95d41c045ae9c2fb565ec8aabc6
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Language.PureScript.Sugar.Names.Imports.findImports
  Language.PureScript.Sugar.Names.Imports.resolveImports
  Language.PureScript.Sugar.Names.Imports.resolveModuleImport
  Language.PureScript.Sugar.Names.Imports.ImportDef
module dependencies: Control.Monad.Supply
                     Control.Monad.Supply.Class Language.PureScript.AST
                     Language.PureScript.AST.Binders
                     Language.PureScript.AST.Declarations
                     Language.PureScript.AST.Exported Language.PureScript.AST.Literals
                     Language.PureScript.AST.Operators Language.PureScript.AST.SourcePos
                     Language.PureScript.AST.Traversals Language.PureScript.Bundle
                     Language.PureScript.Comments Language.PureScript.Constants
                     Language.PureScript.Crash Language.PureScript.Environment
                     Language.PureScript.Errors Language.PureScript.Kinds
                     Language.PureScript.Label Language.PureScript.Names
                     Language.PureScript.PSString Language.PureScript.Parser.Lexer
                     Language.PureScript.Parser.State Language.PureScript.Pretty
                     Language.PureScript.Pretty.Common Language.PureScript.Pretty.Kinds
                     Language.PureScript.Pretty.Types Language.PureScript.Pretty.Values
                     Language.PureScript.Publish.BoxesHelpers
                     Language.PureScript.Sugar.Names.Env Language.PureScript.Traversals
                     Language.PureScript.TypeClassDictionaries Language.PureScript.Types
                     Paths_purescript
package dependencies: aeson-1.3.1.1 ansi-terminal-0.8.0.4
                      array-0.5.2.0 async-2.2.1 attoparsec-0.13.2.2 base-4.11.1.0
                      base-compat-0.10.4 binary-0.8.5.1 blaze-builder-0.4.1.0 boxes-0.1.5
                      bytestring-0.10.8.2 colour-2.3.4 containers-0.5.11.0
                      deepseq-1.4.3.0 dlist-0.8.0.4 filepath-1.4.2 ghc-boot-th-8.4.3
                      ghc-prim-0.5.2.0 hashable-1.2.7.0 integer-gmp-1.0.2.0
                      integer-logarithms-1.0.2.1 language-javascript-0.6.0.11
                      microlens-0.4.9.1 microlens-ghc-0.4.9 microlens-mtl-0.1.11.1
                      microlens-platform-0.3.10 microlens-th-0.4.2.1 mtl-2.2.2
                      parsec-3.1.13.0 pattern-arrows-0.0.2 pretty-1.1.3.6
                      primitive-0.6.3.0 protolude-0.2.2 random-1.1 safe-0.3.17
                      scientific-0.3.6.2 sourcemap-0.1.6 split-0.2.3.3 stm-2.4.5.0
                      syb-0.7 tagged-0.8.5 template-haskell-2.13.0.0 text-1.2.3.0
                      th-abstraction-0.2.8.0 time-1.8.0.2 time-locale-compat-0.1.1.4
                      transformers-0.5.5.0 unordered-containers-0.2.9.0
                      utf8-string-1.0.1.1 uuid-types-1.0.3 vector-0.12.0.1
orphans: syb-0.7:Data.Generics.Instances
         stm-2.4.5.0:Control.Monad.STM
         microlens-platform-0.3.10:Lens.Micro.Platform
         microlens-ghc-0.4.9:Lens.Micro.GHC colour-2.3.4:Data.Colour
         attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         vector-0.12.0.1:Data.Vector.Unboxed
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.0:Data.Text.Lazy
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.5.0:Control.Monad.Trans.Error
         text-1.2.3.0:Data.Text binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: aeson-1.3.1.1:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.Graph
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         dlist-0.8.0.4:Data.DList ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         microlens-0.4.9.1:Lens.Micro.Internal
                         microlens-ghc-0.4.9:Lens.Micro.GHC
                         microlens-mtl-0.1.11.1:Lens.Micro.Mtl.Internal
                         microlens-platform-0.3.10:Lens.Micro.Platform
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.Declarations
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.Operators
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.SourcePos
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Comments
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Environment
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Kinds
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Label
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Names
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.PSString
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.TypeClassDictionaries
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Types
                         tagged-0.8.5:Data.Tagged
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
                         th-abstraction-0.2.8.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  base-4.11.1.0:Control.Monad c5f960c67d822497578bffbd3e4c01cf
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.Functor f522c3501272159820fd6f242510732f
import  -/  base-4.11.1.0:Data.Maybe 409c3da2b142470b68be39ce1d97a9f7
import  -/  base-4.11.1.0:Data.Tuple 3af66f3ac61ed95ba8a3a3f68ebc5003
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-compat-0.10.4:Prelude.Compat bb6796186ed35a1d09dc34362a3fc27e
import  -/  containers-0.5.11.0:Data.Map 0dbdaec812ef695a364aa6c69e7f7d53
import  -/  containers-0.5.11.0:Data.Map.Internal 0150e210d0ae8df0f3a0669d5e32d8fa
import  -/  containers-0.5.11.0:Data.Set 7d3c64a641be4cacbcd8119445bab919
import  -/  containers-0.5.11.0:Data.Set.Internal 93fa3ef95853aa2a7aadf32d693bd451
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  mtl-2.2.2:Control.Monad.Error.Class df146c18e27154b8df4c8637c59fd61b
import  -/  Language.PureScript.AST e89b59f8e201961eafd3ff905a683659
  exports: be73d3bb7d4ebe5df082453f6d572075
import  -/  Language.PureScript.AST.Declarations 586bc75044e8737d02875208d17d4395
  Declaration e92f6ee78a22c0eadc3566d7d1f48d5b
  DeclarationRef 1ef988d2f8db98f35f578bde9282f468
  ErrorInModule fa705731a479914ad1b2d8aff2d06ff6
  Explicit 0e7d786f7f26f8b40dc941854a989937
  Hiding 14af127ef57cd3e7808a207407b44158
  Implicit 3dec7010cde86de5e211cd1c4e2e7a9d
  ImportDeclaration b98a8b3e9f19a9a91825a99d72954601
  ImportDeclarationType ee54accdb974d8b355eb58984489a7af
  ImportHidingModule 5847caa6d81d248bc9080b4e6b53bf9b
  KindRef fdcf7f61e078f63d583e2e92289fb303
  Module 305128e30e200d34d712365aa2d509df
  Module 3342e00ee072addfd009ee61e87fb865
  ModuleRef 2ff9e8ed233e41ffb08c38dcae5865c0
  ReExportRef 2fef75d8ce745db15f225b0cb5e0c76d
  TypeClassRef 0dfae6fa12be94e312c419132246a1f3
  TypeInstanceRef 1a4ec4636edef4ba31547e9816ff48da
  TypeOpRef cd0b4bf0e37e512f28be11229ab2e497
  TypeRef 7b2aa9fe81ad40f64c659855da835def
  UnknownImport b58a7b0ddb7ba5431ab45c2c1db062c6
  UnknownImportDataConstructor 286c5ed7e9b332eb3aac1e426959e22a
  UnknownName 4183c70ff29ad805571bed2cb1e6b9e3
  ValueOpRef 08efa0d335ba46b69b381a343c739614
  ValueRef 78dee2d86cdf935e8811ecdd18c169d3
import  -/  Language.PureScript.AST.SourcePos 63acacac5b7be73d04e5be0047a9a89a
  SourceSpan 1e0cf2bd3ea18f97a2ff152297f09219
  internalModuleSourceSpan f13de72620ea3980769d3252f1949a4a
import  -/  Language.PureScript.Crash 3dd739d57f17e8a1e9cd97afd3faf067
  exports: a9d2725f359c2d113bd38076e88ec681
  internalError d33c2a09c5cbe8e68c0bc27d1500ba1a
import  -/  Language.PureScript.Errors 3c1ad933587510f8b20a8c9ec2e86ce9
  exports: 8e61484c4664eceb943d9fc4820c721b
  MultipleErrors e1ef6a17348ccfe3ef65185d3c5f9026
  addHint 4d7c0f041e7397261babf0b1c1669b2a
  errorMessage' d5b3fcc13faf321f693b39ae31b8bd13
  rethrow 3f15f6976fa85d5a6c226df5a731c52a
import  -/  Language.PureScript.Names 00f694509122478d97b327fbbccae327
  exports: ad7ae34f85124c68e8ba1c90fb2e732f
  ConstructorName 84054a8bbbe827ba2ce7da83056a95ee
  IdentName f85afb00b35a2b992fb8ad7cbb2f9711
  KiName 3648c75d7b729914a2a52509b0a9365e
  ModName bdc8f8682bdb984467bbbfa35cbd8589
  ModuleName 1b2ddf0c04464d2fa2588925f10c1966
  Name d04047edf96c18708b7b5f72cb565394
  ProperName a7268334e0b909381550b9329cb80fcc
  Qualified b6e1bc9e7244a41d3c6149c9b5c2d6d8
  Qualified 1b2ddf0c04464d2fa2588925f10c1966
  TyClassName e53bd54ac0d1b704756a477849dbd836
  TyName 6bd149eabdb95c312f9b6bf9d9f06c67
  TyOpName 440dd328b811fbf1c8a081bffcb8593d
  TypeName 40ce511c66a72431b4e87351210f7b03
  ValOpName c1457b90b10104e4d37147e7648f89b9
import  -/  Language.PureScript.Sugar.Names.Env 97518f893bef0c5e5749cfa9e4ca9265
  exports: 1be6fa0858c130408a65d60cd8c577b4
  Env 2b6b2822bde15bda4afeb3aa3ef04e79
  Exports d2107d9c7383e14684c4687121fab2f3
  FromExplicit 13ed70bacf2f4f62060b18f3edd6a0ef
  FromImplicit 9a3c1cd7631438f2a2a4b7f7e9f3b574
  ImportProvenance 9eac2b49272ec0935fc080f37f37f0d8
  ImportRecord 5e10112f1717b877af1abe56772c155d
  ImportRecord 06c97ba5c09e065ef1b4ac69ccbfcc9e
  Imports 330f296cc3ed68256ee5fc6aa457fa42
  Local 202b3bfbcd0e55b7ad28981c7d0ee7cb
  envModuleExports 0d5d48eab36db83ce390a5704336cf59
  exportedKinds d2107d9c7383e14684c4687121fab2f3
  exportedTypeClasses d2107d9c7383e14684c4687121fab2f3
  exportedTypeOps d2107d9c7383e14684c4687121fab2f3
  exportedTypes d2107d9c7383e14684c4687121fab2f3
  exportedValueOps d2107d9c7383e14684c4687121fab2f3
  exportedValues d2107d9c7383e14684c4687121fab2f3
  importedDataConstructors 330f296cc3ed68256ee5fc6aa457fa42
  importedKinds 330f296cc3ed68256ee5fc6aa457fa42
  importedModules 330f296cc3ed68256ee5fc6aa457fa42
  importedQualModules 330f296cc3ed68256ee5fc6aa457fa42
  importedTypeClasses 330f296cc3ed68256ee5fc6aa457fa42
  importedTypeOps 330f296cc3ed68256ee5fc6aa457fa42
  importedTypes 330f296cc3ed68256ee5fc6aa457fa42
  importedValueOps 330f296cc3ed68256ee5fc6aa457fa42
  importedValues 330f296cc3ed68256ee5fc6aa457fa42
  nullImports 5dfc688b52efa485e2b0285fa84553d6
d07bebf28c7b7ad3891b98c2e76f2e95
  $s$fEqQualified ::
    GHC.Classes.Eq
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ConstructorName))
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.Qualified
                       (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ConstructorName))
                  (Language.PureScript.Names.$fEqQualified_$c==
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ConstructorName)
                     (Language.PureScript.Names.$fEqProperName
                        @ 'Language.PureScript.Names.ConstructorName))
                  Language.PureScript.Sugar.Names.Imports.$s$fEqQualified_$s$fEqQualified_$c/= -}
df4f4de5d38f2a170dd787798d7ac702
  $s$fEqQualified1 ::
    GHC.Classes.Eq
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName))
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.Qualified
                       (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.TypeName))
                  (Language.PureScript.Names.$fEqQualified_$c==
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.TypeName)
                     (Language.PureScript.Names.$fEqProperName
                        @ 'Language.PureScript.Names.TypeName))
                  Language.PureScript.Sugar.Names.Imports.$s$fEqQualified_$s$fEqQualified_$c/=1 -}
0ed98f5db1ef0254a52121b7b646b375
  $s$fEqQualified2 ::
    GHC.Classes.Eq
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.TypeOpName))
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.Qualified
                       (Language.PureScript.Names.OpName
                          'Language.PureScript.Names.TypeOpName))
                  (Language.PureScript.Names.$fEqQualified_$c==
                     @ (Language.PureScript.Names.OpName
                          'Language.PureScript.Names.TypeOpName)
                     (Language.PureScript.Names.$fEqOpName
                        @ 'Language.PureScript.Names.TypeOpName))
                  Language.PureScript.Sugar.Names.Imports.$s$fEqQualified_$s$fEqQualified_$c/=2 -}
e32e07a4ec4b6d94acfa27d34a13549b
  $s$fEqQualified3 ::
    GHC.Classes.Eq
      (Language.PureScript.Names.Qualified
         Language.PureScript.Names.Ident)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.Qualified
                       Language.PureScript.Names.Ident)
                  (Language.PureScript.Names.$fEqQualified_$c==
                     @ Language.PureScript.Names.Ident
                     Language.PureScript.Names.$fEqIdent)
                  Language.PureScript.Sugar.Names.Imports.$s$fEqQualified_$s$fEqQualified_$c/=3 -}
3fd06db7f5adcb1e05bc54b1122c01d1
  $s$fEqQualified4 ::
    GHC.Classes.Eq
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.ValueOpName))
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.Qualified
                       (Language.PureScript.Names.OpName
                          'Language.PureScript.Names.ValueOpName))
                  (Language.PureScript.Names.$fEqQualified_$c==
                     @ (Language.PureScript.Names.OpName
                          'Language.PureScript.Names.ValueOpName)
                     (Language.PureScript.Names.$fEqOpName
                        @ 'Language.PureScript.Names.ValueOpName))
                  Language.PureScript.Sugar.Names.Imports.$s$fEqQualified_$s$fEqQualified_$c/=4 -}
3e6f6b93d15701a758d1180c64e548db
  $s$fEqQualified5 ::
    GHC.Classes.Eq
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName))
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.Qualified
                       (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ClassName))
                  (Language.PureScript.Names.$fEqQualified_$c==
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ClassName)
                     (Language.PureScript.Names.$fEqProperName
                        @ 'Language.PureScript.Names.ClassName))
                  Language.PureScript.Sugar.Names.Imports.$s$fEqQualified_$s$fEqQualified_$c/=5 -}
52f83f07c6a3b07396d004632c36a87b
  $s$fEqQualified6 ::
    GHC.Classes.Eq
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.KindName))
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.Qualified
                       (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.KindName))
                  (Language.PureScript.Names.$fEqQualified_$c==
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.KindName)
                     (Language.PureScript.Names.$fEqProperName
                        @ 'Language.PureScript.Names.KindName))
                  Language.PureScript.Sugar.Names.Imports.$s$fEqQualified_$s$fEqQualified_$c/=6 -}
e200de2eff91f5814cd70292705caa12
  $s$fEqQualified_$s$fEqQualified_$c/= ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ConstructorName)
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ConstructorName)
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U(U,U,U))><S(SL),1*U(1*U,1*U(U,U,U))>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ConstructorName))
                   (y :: Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ConstructorName)) ->
                 case Language.PureScript.Names.$fEqQualified_$c==
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ConstructorName)
                        (Language.PureScript.Names.$fEqProperName
                           @ 'Language.PureScript.Names.ConstructorName)
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
f7999b5f34368eaf5934bf190406f169
  $s$fEqQualified_$s$fEqQualified_$c/=1 ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName)
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName)
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U(U,U,U))><S(SL),1*U(1*U,1*U(U,U,U))>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.TypeName))
                   (y :: Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.TypeName)) ->
                 case Language.PureScript.Names.$fEqQualified_$c==
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.TypeName)
                        (Language.PureScript.Names.$fEqProperName
                           @ 'Language.PureScript.Names.TypeName)
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
894cd4671bf9d241a960c48ac7e379ec
  $s$fEqQualified_$s$fEqQualified_$c/=2 ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.OpName
         'Language.PureScript.Names.TypeOpName)
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.TypeOpName)
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U(U,U,U))><S(SL),1*U(1*U,1*U(U,U,U))>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.OpName
                              'Language.PureScript.Names.TypeOpName))
                   (y :: Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.OpName
                              'Language.PureScript.Names.TypeOpName)) ->
                 case Language.PureScript.Names.$fEqQualified_$c==
                        @ (Language.PureScript.Names.OpName
                             'Language.PureScript.Names.TypeOpName)
                        (Language.PureScript.Names.$fEqOpName
                           @ 'Language.PureScript.Names.TypeOpName)
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
0b98aeba3b64c314ac5bc5cef10c03c8
  $s$fEqQualified_$s$fEqQualified_$c/=3 ::
    Language.PureScript.Names.Qualified Language.PureScript.Names.Ident
    -> Language.PureScript.Names.Qualified
         Language.PureScript.Names.Ident
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Names.Qualified
                           Language.PureScript.Names.Ident)
                   (y :: Language.PureScript.Names.Qualified
                           Language.PureScript.Names.Ident) ->
                 case Language.PureScript.Names.$fEqQualified_$c==
                        @ Language.PureScript.Names.Ident
                        Language.PureScript.Names.$fEqIdent
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
62b917d8476771fa3346bb10ad50fd74
  $s$fEqQualified_$s$fEqQualified_$c/=4 ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.OpName
         'Language.PureScript.Names.ValueOpName)
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.ValueOpName)
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U(U,U,U))><S(SL),1*U(1*U,1*U(U,U,U))>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.OpName
                              'Language.PureScript.Names.ValueOpName))
                   (y :: Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.OpName
                              'Language.PureScript.Names.ValueOpName)) ->
                 case Language.PureScript.Names.$fEqQualified_$c==
                        @ (Language.PureScript.Names.OpName
                             'Language.PureScript.Names.ValueOpName)
                        (Language.PureScript.Names.$fEqOpName
                           @ 'Language.PureScript.Names.ValueOpName)
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
a68d928f84184d9c1eebc95b82b8a8a2
  $s$fEqQualified_$s$fEqQualified_$c/=5 ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U(U,U,U))><S(SL),1*U(1*U,1*U(U,U,U))>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ClassName))
                   (y :: Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ClassName)) ->
                 case Language.PureScript.Names.$fEqQualified_$c==
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ClassName)
                        (Language.PureScript.Names.$fEqProperName
                           @ 'Language.PureScript.Names.ClassName)
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
078202340d9fab3658015e716db40fb5
  $s$fEqQualified_$s$fEqQualified_$c/=6 ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.KindName)
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.KindName)
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U(U,U,U))><S(SL),1*U(1*U,1*U(U,U,U))>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.KindName))
                   (y :: Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.KindName)) ->
                 case Language.PureScript.Names.$fEqQualified_$c==
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.KindName)
                        (Language.PureScript.Names.$fEqProperName
                           @ 'Language.PureScript.Names.KindName)
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
adf845ae225dbb03ace0137ec86977de
  $s$fOrdQualified ::
    GHC.Classes.Ord
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ConstructorName))
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.Qualified
                       (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ConstructorName))
                  Language.PureScript.Sugar.Names.Imports.$s$fEqQualified
                  (Language.PureScript.Names.$fOrdQualified_$ccompare
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ConstructorName)
                     (Language.PureScript.Names.$fOrdProperName
                        @ 'Language.PureScript.Names.ConstructorName))
                  (Language.PureScript.Names.$fOrdQualified_$c<
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ConstructorName)
                     (Language.PureScript.Names.$fOrdProperName
                        @ 'Language.PureScript.Names.ConstructorName))
                  (\ (a1 :: Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.ConstructorName))
                     (b :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ConstructorName)) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.ConstructorName)
                          (Language.PureScript.Names.$fOrdProperName
                             @ 'Language.PureScript.Names.ConstructorName)
                          b
                          a1 of wild {
                     GHC.Types.False -> GHC.Types.True
                     GHC.Types.True -> GHC.Types.False })
                  (\ (a1 :: Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.ConstructorName))
                     (b :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ConstructorName)) ->
                   Language.PureScript.Names.$fOrdQualified_$c<
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ConstructorName)
                     (Language.PureScript.Names.$fOrdProperName
                        @ 'Language.PureScript.Names.ConstructorName)
                     b
                     a1)
                  (\ (a1 :: Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.ConstructorName))
                     (b :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ConstructorName)) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.ConstructorName)
                          (Language.PureScript.Names.$fOrdProperName
                             @ 'Language.PureScript.Names.ConstructorName)
                          a1
                          b of wild {
                     GHC.Types.False -> GHC.Types.True
                     GHC.Types.True -> GHC.Types.False })
                  (\ (x :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ConstructorName))
                     (y :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ConstructorName)) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.ConstructorName)
                          (Language.PureScript.Names.$fOrdProperName
                             @ 'Language.PureScript.Names.ConstructorName)
                          y
                          x of wild {
                     GHC.Types.False -> y GHC.Types.True -> x })
                  (\ (x :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ConstructorName))
                     (y :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ConstructorName)) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.ConstructorName)
                          (Language.PureScript.Names.$fOrdProperName
                             @ 'Language.PureScript.Names.ConstructorName)
                          y
                          x of wild {
                     GHC.Types.False -> x GHC.Types.True -> y }) -}
894b0f9145173a9d512001bfd2ff029e
  $s$fOrdQualified1 ::
    GHC.Classes.Ord
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName))
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.Qualified
                       (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.TypeName))
                  Language.PureScript.Sugar.Names.Imports.$s$fEqQualified1
                  (Language.PureScript.Names.$fOrdQualified_$ccompare
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.TypeName)
                     (Language.PureScript.Names.$fOrdProperName
                        @ 'Language.PureScript.Names.TypeName))
                  (Language.PureScript.Names.$fOrdQualified_$c<
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.TypeName)
                     (Language.PureScript.Names.$fOrdProperName
                        @ 'Language.PureScript.Names.TypeName))
                  (\ (a1 :: Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.TypeName))
                     (b :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.TypeName)) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.TypeName)
                          (Language.PureScript.Names.$fOrdProperName
                             @ 'Language.PureScript.Names.TypeName)
                          b
                          a1 of wild {
                     GHC.Types.False -> GHC.Types.True
                     GHC.Types.True -> GHC.Types.False })
                  (\ (a1 :: Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.TypeName))
                     (b :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.TypeName)) ->
                   Language.PureScript.Names.$fOrdQualified_$c<
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.TypeName)
                     (Language.PureScript.Names.$fOrdProperName
                        @ 'Language.PureScript.Names.TypeName)
                     b
                     a1)
                  (\ (a1 :: Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.TypeName))
                     (b :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.TypeName)) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.TypeName)
                          (Language.PureScript.Names.$fOrdProperName
                             @ 'Language.PureScript.Names.TypeName)
                          a1
                          b of wild {
                     GHC.Types.False -> GHC.Types.True
                     GHC.Types.True -> GHC.Types.False })
                  (\ (x :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.TypeName))
                     (y :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.TypeName)) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.TypeName)
                          (Language.PureScript.Names.$fOrdProperName
                             @ 'Language.PureScript.Names.TypeName)
                          y
                          x of wild {
                     GHC.Types.False -> y GHC.Types.True -> x })
                  (\ (x :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.TypeName))
                     (y :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.TypeName)) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.TypeName)
                          (Language.PureScript.Names.$fOrdProperName
                             @ 'Language.PureScript.Names.TypeName)
                          y
                          x of wild {
                     GHC.Types.False -> x GHC.Types.True -> y }) -}
7a7afeafdd1fc597e1471267c197fc65
  $s$fOrdQualified2 ::
    GHC.Classes.Ord
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.TypeOpName))
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.Qualified
                       (Language.PureScript.Names.OpName
                          'Language.PureScript.Names.TypeOpName))
                  Language.PureScript.Sugar.Names.Imports.$s$fEqQualified2
                  (Language.PureScript.Names.$fOrdQualified_$ccompare
                     @ (Language.PureScript.Names.OpName
                          'Language.PureScript.Names.TypeOpName)
                     (Language.PureScript.Names.$fOrdOpName
                        @ 'Language.PureScript.Names.TypeOpName))
                  (Language.PureScript.Names.$fOrdQualified_$c<
                     @ (Language.PureScript.Names.OpName
                          'Language.PureScript.Names.TypeOpName)
                     (Language.PureScript.Names.$fOrdOpName
                        @ 'Language.PureScript.Names.TypeOpName))
                  (\ (a1 :: Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.OpName
                                 'Language.PureScript.Names.TypeOpName))
                     (b :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.OpName
                                'Language.PureScript.Names.TypeOpName)) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ (Language.PureScript.Names.OpName
                               'Language.PureScript.Names.TypeOpName)
                          (Language.PureScript.Names.$fOrdOpName
                             @ 'Language.PureScript.Names.TypeOpName)
                          b
                          a1 of wild {
                     GHC.Types.False -> GHC.Types.True
                     GHC.Types.True -> GHC.Types.False })
                  (\ (a1 :: Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.OpName
                                 'Language.PureScript.Names.TypeOpName))
                     (b :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.OpName
                                'Language.PureScript.Names.TypeOpName)) ->
                   Language.PureScript.Names.$fOrdQualified_$c<
                     @ (Language.PureScript.Names.OpName
                          'Language.PureScript.Names.TypeOpName)
                     (Language.PureScript.Names.$fOrdOpName
                        @ 'Language.PureScript.Names.TypeOpName)
                     b
                     a1)
                  (\ (a1 :: Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.OpName
                                 'Language.PureScript.Names.TypeOpName))
                     (b :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.OpName
                                'Language.PureScript.Names.TypeOpName)) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ (Language.PureScript.Names.OpName
                               'Language.PureScript.Names.TypeOpName)
                          (Language.PureScript.Names.$fOrdOpName
                             @ 'Language.PureScript.Names.TypeOpName)
                          a1
                          b of wild {
                     GHC.Types.False -> GHC.Types.True
                     GHC.Types.True -> GHC.Types.False })
                  (\ (x :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.OpName
                                'Language.PureScript.Names.TypeOpName))
                     (y :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.OpName
                                'Language.PureScript.Names.TypeOpName)) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ (Language.PureScript.Names.OpName
                               'Language.PureScript.Names.TypeOpName)
                          (Language.PureScript.Names.$fOrdOpName
                             @ 'Language.PureScript.Names.TypeOpName)
                          y
                          x of wild {
                     GHC.Types.False -> y GHC.Types.True -> x })
                  (\ (x :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.OpName
                                'Language.PureScript.Names.TypeOpName))
                     (y :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.OpName
                                'Language.PureScript.Names.TypeOpName)) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ (Language.PureScript.Names.OpName
                               'Language.PureScript.Names.TypeOpName)
                          (Language.PureScript.Names.$fOrdOpName
                             @ 'Language.PureScript.Names.TypeOpName)
                          y
                          x of wild {
                     GHC.Types.False -> x GHC.Types.True -> y }) -}
7fd821aae57102e75e606b962623325f
  $s$fOrdQualified3 ::
    GHC.Classes.Ord
      (Language.PureScript.Names.Qualified
         Language.PureScript.Names.Ident)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.Qualified
                       Language.PureScript.Names.Ident)
                  Language.PureScript.Sugar.Names.Imports.$s$fEqQualified3
                  (Language.PureScript.Names.$fOrdQualified_$ccompare
                     @ Language.PureScript.Names.Ident
                     Language.PureScript.Names.$fOrdIdent)
                  (Language.PureScript.Names.$fOrdQualified_$c<
                     @ Language.PureScript.Names.Ident
                     Language.PureScript.Names.$fOrdIdent)
                  (\ (a1 :: Language.PureScript.Names.Qualified
                              Language.PureScript.Names.Ident)
                     (b :: Language.PureScript.Names.Qualified
                             Language.PureScript.Names.Ident) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ Language.PureScript.Names.Ident
                          Language.PureScript.Names.$fOrdIdent
                          b
                          a1 of wild {
                     GHC.Types.False -> GHC.Types.True
                     GHC.Types.True -> GHC.Types.False })
                  (\ (a1 :: Language.PureScript.Names.Qualified
                              Language.PureScript.Names.Ident)
                     (b :: Language.PureScript.Names.Qualified
                             Language.PureScript.Names.Ident) ->
                   Language.PureScript.Names.$fOrdQualified_$c<
                     @ Language.PureScript.Names.Ident
                     Language.PureScript.Names.$fOrdIdent
                     b
                     a1)
                  (\ (a1 :: Language.PureScript.Names.Qualified
                              Language.PureScript.Names.Ident)
                     (b :: Language.PureScript.Names.Qualified
                             Language.PureScript.Names.Ident) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ Language.PureScript.Names.Ident
                          Language.PureScript.Names.$fOrdIdent
                          a1
                          b of wild {
                     GHC.Types.False -> GHC.Types.True
                     GHC.Types.True -> GHC.Types.False })
                  (\ (x :: Language.PureScript.Names.Qualified
                             Language.PureScript.Names.Ident)
                     (y :: Language.PureScript.Names.Qualified
                             Language.PureScript.Names.Ident) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ Language.PureScript.Names.Ident
                          Language.PureScript.Names.$fOrdIdent
                          y
                          x of wild {
                     GHC.Types.False -> y GHC.Types.True -> x })
                  (\ (x :: Language.PureScript.Names.Qualified
                             Language.PureScript.Names.Ident)
                     (y :: Language.PureScript.Names.Qualified
                             Language.PureScript.Names.Ident) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ Language.PureScript.Names.Ident
                          Language.PureScript.Names.$fOrdIdent
                          y
                          x of wild {
                     GHC.Types.False -> x GHC.Types.True -> y }) -}
2913e11e4ddb6ce3d0a3278c054fc3fe
  $s$fOrdQualified4 ::
    GHC.Classes.Ord
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.ValueOpName))
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.Qualified
                       (Language.PureScript.Names.OpName
                          'Language.PureScript.Names.ValueOpName))
                  Language.PureScript.Sugar.Names.Imports.$s$fEqQualified4
                  (Language.PureScript.Names.$fOrdQualified_$ccompare
                     @ (Language.PureScript.Names.OpName
                          'Language.PureScript.Names.ValueOpName)
                     (Language.PureScript.Names.$fOrdOpName
                        @ 'Language.PureScript.Names.ValueOpName))
                  (Language.PureScript.Names.$fOrdQualified_$c<
                     @ (Language.PureScript.Names.OpName
                          'Language.PureScript.Names.ValueOpName)
                     (Language.PureScript.Names.$fOrdOpName
                        @ 'Language.PureScript.Names.ValueOpName))
                  (\ (a1 :: Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.OpName
                                 'Language.PureScript.Names.ValueOpName))
                     (b :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.OpName
                                'Language.PureScript.Names.ValueOpName)) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ (Language.PureScript.Names.OpName
                               'Language.PureScript.Names.ValueOpName)
                          (Language.PureScript.Names.$fOrdOpName
                             @ 'Language.PureScript.Names.ValueOpName)
                          b
                          a1 of wild {
                     GHC.Types.False -> GHC.Types.True
                     GHC.Types.True -> GHC.Types.False })
                  (\ (a1 :: Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.OpName
                                 'Language.PureScript.Names.ValueOpName))
                     (b :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.OpName
                                'Language.PureScript.Names.ValueOpName)) ->
                   Language.PureScript.Names.$fOrdQualified_$c<
                     @ (Language.PureScript.Names.OpName
                          'Language.PureScript.Names.ValueOpName)
                     (Language.PureScript.Names.$fOrdOpName
                        @ 'Language.PureScript.Names.ValueOpName)
                     b
                     a1)
                  (\ (a1 :: Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.OpName
                                 'Language.PureScript.Names.ValueOpName))
                     (b :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.OpName
                                'Language.PureScript.Names.ValueOpName)) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ (Language.PureScript.Names.OpName
                               'Language.PureScript.Names.ValueOpName)
                          (Language.PureScript.Names.$fOrdOpName
                             @ 'Language.PureScript.Names.ValueOpName)
                          a1
                          b of wild {
                     GHC.Types.False -> GHC.Types.True
                     GHC.Types.True -> GHC.Types.False })
                  (\ (x :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.OpName
                                'Language.PureScript.Names.ValueOpName))
                     (y :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.OpName
                                'Language.PureScript.Names.ValueOpName)) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ (Language.PureScript.Names.OpName
                               'Language.PureScript.Names.ValueOpName)
                          (Language.PureScript.Names.$fOrdOpName
                             @ 'Language.PureScript.Names.ValueOpName)
                          y
                          x of wild {
                     GHC.Types.False -> y GHC.Types.True -> x })
                  (\ (x :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.OpName
                                'Language.PureScript.Names.ValueOpName))
                     (y :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.OpName
                                'Language.PureScript.Names.ValueOpName)) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ (Language.PureScript.Names.OpName
                               'Language.PureScript.Names.ValueOpName)
                          (Language.PureScript.Names.$fOrdOpName
                             @ 'Language.PureScript.Names.ValueOpName)
                          y
                          x of wild {
                     GHC.Types.False -> x GHC.Types.True -> y }) -}
0c29b9f6883f0e39049991fffc3c534e
  $s$fOrdQualified5 ::
    GHC.Classes.Ord
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName))
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.Qualified
                       (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ClassName))
                  Language.PureScript.Sugar.Names.Imports.$s$fEqQualified5
                  (Language.PureScript.Names.$fOrdQualified_$ccompare
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ClassName)
                     (Language.PureScript.Names.$fOrdProperName
                        @ 'Language.PureScript.Names.ClassName))
                  (Language.PureScript.Names.$fOrdQualified_$c<
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ClassName)
                     (Language.PureScript.Names.$fOrdProperName
                        @ 'Language.PureScript.Names.ClassName))
                  (\ (a1 :: Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.ClassName))
                     (b :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ClassName)) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.ClassName)
                          (Language.PureScript.Names.$fOrdProperName
                             @ 'Language.PureScript.Names.ClassName)
                          b
                          a1 of wild {
                     GHC.Types.False -> GHC.Types.True
                     GHC.Types.True -> GHC.Types.False })
                  (\ (a1 :: Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.ClassName))
                     (b :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ClassName)) ->
                   Language.PureScript.Names.$fOrdQualified_$c<
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ClassName)
                     (Language.PureScript.Names.$fOrdProperName
                        @ 'Language.PureScript.Names.ClassName)
                     b
                     a1)
                  (\ (a1 :: Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.ClassName))
                     (b :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ClassName)) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.ClassName)
                          (Language.PureScript.Names.$fOrdProperName
                             @ 'Language.PureScript.Names.ClassName)
                          a1
                          b of wild {
                     GHC.Types.False -> GHC.Types.True
                     GHC.Types.True -> GHC.Types.False })
                  (\ (x :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ClassName))
                     (y :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ClassName)) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.ClassName)
                          (Language.PureScript.Names.$fOrdProperName
                             @ 'Language.PureScript.Names.ClassName)
                          y
                          x of wild {
                     GHC.Types.False -> y GHC.Types.True -> x })
                  (\ (x :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ClassName))
                     (y :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ClassName)) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.ClassName)
                          (Language.PureScript.Names.$fOrdProperName
                             @ 'Language.PureScript.Names.ClassName)
                          y
                          x of wild {
                     GHC.Types.False -> x GHC.Types.True -> y }) -}
74828d60b919e544861dbb11704b1081
  $s$fOrdQualified6 ::
    GHC.Classes.Ord
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.KindName))
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.Qualified
                       (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.KindName))
                  Language.PureScript.Sugar.Names.Imports.$s$fEqQualified6
                  (Language.PureScript.Names.$fOrdQualified_$ccompare
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.KindName)
                     (Language.PureScript.Names.$fOrdProperName
                        @ 'Language.PureScript.Names.KindName))
                  (Language.PureScript.Names.$fOrdQualified_$c<
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.KindName)
                     (Language.PureScript.Names.$fOrdProperName
                        @ 'Language.PureScript.Names.KindName))
                  (\ (a1 :: Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.KindName))
                     (b :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.KindName)) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.KindName)
                          (Language.PureScript.Names.$fOrdProperName
                             @ 'Language.PureScript.Names.KindName)
                          b
                          a1 of wild {
                     GHC.Types.False -> GHC.Types.True
                     GHC.Types.True -> GHC.Types.False })
                  (\ (a1 :: Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.KindName))
                     (b :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.KindName)) ->
                   Language.PureScript.Names.$fOrdQualified_$c<
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.KindName)
                     (Language.PureScript.Names.$fOrdProperName
                        @ 'Language.PureScript.Names.KindName)
                     b
                     a1)
                  (\ (a1 :: Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.KindName))
                     (b :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.KindName)) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.KindName)
                          (Language.PureScript.Names.$fOrdProperName
                             @ 'Language.PureScript.Names.KindName)
                          a1
                          b of wild {
                     GHC.Types.False -> GHC.Types.True
                     GHC.Types.True -> GHC.Types.False })
                  (\ (x :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.KindName))
                     (y :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.KindName)) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.KindName)
                          (Language.PureScript.Names.$fOrdProperName
                             @ 'Language.PureScript.Names.KindName)
                          y
                          x of wild {
                     GHC.Types.False -> y GHC.Types.True -> x })
                  (\ (x :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.KindName))
                     (y :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.KindName)) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.KindName)
                          (Language.PureScript.Names.$fOrdProperName
                             @ 'Language.PureScript.Names.KindName)
                          y
                          x of wild {
                     GHC.Types.False -> x GHC.Types.True -> y }) -}
11132a2a87675b0b797e777d7c4950f7
  $salter_go13 ::
    GHC.Classes.Ord k1 =>
    (GHC.Base.Maybe a1 -> GHC.Base.Maybe a1)
    -> k1 -> Data.Map.Internal.Map k1 a1 -> Data.Map.Internal.Map k1 a1
  {- Arity: 4,
     Strictness: <L,U(A,C(C1(U)),A,A,A,A,A,A)><C(S),1*C1(U)><S,1*U><S,1*U> -}
f2b092daa1c8ac316067feb533724f02
  $sfromList ::
    [(Language.PureScript.Names.ProperName
        'Language.PureScript.Names.ConstructorName,
      a)]
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ConstructorName)
         a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a
                   (ds :: [(Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ConstructorName,
                            a)]) ->
                 case ds of wild {
                   []
                   -> Data.Map.Internal.Tip
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ConstructorName)
                        @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case kx
                                  `cast`
                                (Language.PureScript.Names.N:ProperName[0]
                                     <'Language.PureScript.Names.ConstructorName>_P) of nt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                           Data.Map.Internal.Bin
                             @ (Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.ConstructorName)
                             @ a
                             1#
                             nt
                               `cast`
                             (Sym (Language.PureScript.Names.N:ProperName[0]
                                       <'Language.PureScript.Names.ConstructorName>_P))
                             x
                             (Data.Map.Internal.Tip
                                @ (Language.PureScript.Names.ProperName
                                     'Language.PureScript.Names.ConstructorName)
                                @ a)
                             (Data.Map.Internal.Tip
                                @ (Language.PureScript.Names.ProperName
                                     'Language.PureScript.Names.ConstructorName)
                                @ a) }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case kx
                                  `cast`
                                (Language.PureScript.Names.N:ProperName[0]
                                     <'Language.PureScript.Names.ConstructorName>_P) of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                           case ky
                                  `cast`
                                (Language.PureScript.Names.N:ProperName[0]
                                     <'Language.PureScript.Names.ConstructorName>_P) of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                           case Data.Text.$w$ccompare ww1 ww2 ww3 ww5 ww6 ww7 of wild4 {
                             DEFAULT
                             -> Language.PureScript.Sugar.Names.Imports.$sfromList_$spoly_go14
                                  @ a
                                  ww4
                                    `cast`
                                  (Sym (Language.PureScript.Names.N:ProperName[0]
                                            <'Language.PureScript.Names.ConstructorName>_P))
                                  ds3
                                  ipv1
                                  (Data.Map.Internal.Bin
                                     @ (Language.PureScript.Names.ProperName
                                          'Language.PureScript.Names.ConstructorName)
                                     @ a
                                     1#
                                     ww
                                       `cast`
                                     (Sym (Language.PureScript.Names.N:ProperName[0]
                                               <'Language.PureScript.Names.ConstructorName>_P))
                                     x
                                     (Data.Map.Internal.Tip
                                        @ (Language.PureScript.Names.ProperName
                                             'Language.PureScript.Names.ConstructorName)
                                        @ a)
                                     (Data.Map.Internal.Tip
                                        @ (Language.PureScript.Names.ProperName
                                             'Language.PureScript.Names.ConstructorName)
                                        @ a))
                             GHC.Types.LT
                             -> Language.PureScript.Sugar.Names.Imports.$sfromList_$s$wpoly_go13
                                  @ a
                                  ww4
                                    `cast`
                                  (Sym (Language.PureScript.Names.N:ProperName[0]
                                            <'Language.PureScript.Names.ConstructorName>_P))
                                  ds3
                                  ipv1
                                  (Data.Map.Internal.Bin
                                     @ (Language.PureScript.Names.ProperName
                                          'Language.PureScript.Names.ConstructorName)
                                     @ a
                                     1#
                                     ww
                                       `cast`
                                     (Sym (Language.PureScript.Names.N:ProperName[0]
                                               <'Language.PureScript.Names.ConstructorName>_P))
                                     x
                                     (Data.Map.Internal.Tip
                                        @ (Language.PureScript.Names.ProperName
                                             'Language.PureScript.Names.ConstructorName)
                                        @ a)
                                     (Data.Map.Internal.Tip
                                        @ (Language.PureScript.Names.ProperName
                                             'Language.PureScript.Names.ConstructorName)
                                        @ a))
                                  1# } } } } } } }) -}
5e0308881743ec25b136602611f258a9
  $sfromList_$s$wpoly_go13 ::
    Language.PureScript.Names.ProperName
      'Language.PureScript.Names.ConstructorName
    -> a
    -> [(Language.PureScript.Names.ProperName
           'Language.PureScript.Names.ConstructorName,
         a)]
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ConstructorName)
         a
    -> GHC.Prim.Int#
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ConstructorName)
         a
  {- Arity: 5, Strictness: <S,1*U(U,U,U)><L,U><S,1*U><S,1*U><L,U> -}
44af2e43d2f583ee00de34e75edaae97
  $sfromList_$spoly_go14 ::
    Language.PureScript.Names.ProperName
      'Language.PureScript.Names.ConstructorName
    -> a
    -> [(Language.PureScript.Names.ProperName
           'Language.PureScript.Names.ConstructorName,
         a)]
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ConstructorName)
         a
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ConstructorName)
         a
  {- Arity: 4, Strictness: <S(SSS),1*U(U,U,U)><L,U><S,1*U><S,1*U> -}
3df21dce11ff2bc93ec13808006eab8c
  $sinsert_$sgo1 ::
    Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ModuleName
    -> a1
    -> Data.Map.Internal.Map Language.PureScript.Names.ModuleName a1
    -> Data.Map.Internal.Map Language.PureScript.Names.ModuleName a1
  {- Arity: 4, Strictness: <L,U><S,1*U><L,U><S,1*U> -}
c67d2d3d3c36686bc8df88dad3c7a0ff
  $sinsert_$sgo3 ::
    Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ModuleName
    -> Data.Set.Internal.Set Language.PureScript.Names.ModuleName
    -> Data.Set.Internal.Set Language.PureScript.Names.ModuleName
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U> -}
2793926af93895df79aaf13acf5d8b0e
  $slookup1 ::
    Language.PureScript.Names.ModuleName
    -> Data.Map.Internal.Map Language.PureScript.Names.ModuleName a
    -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
5b2760253da28488d88c938940504b69
  $slookup9 ::
    Language.PureScript.Names.Ident
    -> Data.Map.Internal.Map Language.PureScript.Names.Ident a
    -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
ab3bb3a623dc656119f4da8a09c74988
  $slookup_$spoly_go1 ::
    Data.Map.Internal.Map Language.PureScript.Names.Ident a
    -> GHC.Base.Maybe Data.Text.Internal.Text
    -> GHC.Integer.Type.Integer
    -> GHC.Base.Maybe a
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,1*U><L,U> -}
5580e75b5c9a5c467e2a0e860be6ab62
  $slookup_$spoly_go13 ::
    Data.Map.Internal.Map Language.PureScript.Names.Ident a
    -> GHC.Base.Maybe a
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
c3f0df4bb091221a6545023bb6c4f6cf
  $slookup_$spoly_go2 ::
    Data.Map.Internal.Map Language.PureScript.Names.Ident a
    -> Data.Text.Internal.Text -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U(U,U,U)> -}
bf269bcfe4f390e244c40d6351490946
  $smember5 ::
    Language.PureScript.Names.Ident
    -> Data.Map.Internal.Map Language.PureScript.Names.Ident a
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
3b53ba0ef3a0e57441a76f45de8996a0
  $smember_$spoly_go1 ::
    Data.Map.Internal.Map Language.PureScript.Names.Ident a
    -> GHC.Base.Maybe Data.Text.Internal.Text
    -> GHC.Integer.Type.Integer
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,1*U><L,U> -}
a03a29f41db491fc58aecb2831b01fab
  $smember_$spoly_go13 ::
    Data.Map.Internal.Map Language.PureScript.Names.Ident a
    -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
a9742efa0c195f274dd76faa7b1a1550
  $smember_$spoly_go2 ::
    Data.Map.Internal.Map Language.PureScript.Names.Ident a
    -> Data.Text.Internal.Text -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U(U,U,U)> -}
9a966b2d82e69adc93aadb768f59b584
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Language.PureScript.Sugar.Names.Imports.$trModule3
                   Language.PureScript.Sugar.Names.Imports.$trModule1) -}
e3e55c6b865afc3ed2ceb18f9aaa7306
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Sugar.Names.Imports.$trModule2) -}
8d40c219724ea884d3d347f049d6967b
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Language.PureScript.Sugar.Names.Imports"#) -}
dcab46613021337d3c975756ef7af4c4
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Sugar.Names.Imports.$trModule4) -}
8648814be3d3fc3eb82d04a9d36b8164
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"#) -}
f62a4d775884871622e576f48f14d334
  $w$sgo13 ::
    Language.PureScript.Names.ProperName
      'Language.PureScript.Names.ConstructorName
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> a1
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ConstructorName)
         a1
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ConstructorName)
         a1
  {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><L,U><S,1*U>,
     Inline: [0] -}
61efa12b9ae24e33937e43d02b2b66ef
  $wpoly_go1 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName)
         a
    -> GHC.Base.Maybe a
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U><L,U><L,U><S,1*U>,
     Inline: [0] -}
fcb21efc8666a4ad8e2ab64929abccde
  $wpoly_go10 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.KindName)
         a
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U><L,U><L,U><S,1*U>,
     Inline: [0] -}
a570e77dd16a118f9217debbecd7de53
  $wpoly_go13 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ConstructorName)
         a
    -> GHC.Base.Maybe a
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U><L,U><L,U><S,1*U>,
     Inline: [0] -}
a6485158c6b2ea04aa6035ee442180cb
  $wpoly_go2 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.TypeOpName)
         a
    -> GHC.Base.Maybe a
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U><L,U><L,U><S,1*U>,
     Inline: [0] -}
130e28fc56b46ef54d20f2234cab6374
  $wpoly_go3 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.ValueOpName)
         a
    -> GHC.Base.Maybe a
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U><L,U><L,U><S,1*U>,
     Inline: [0] -}
24aa1ba95483fd5352395b9a1695aaa0
  $wpoly_go4 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
         a
    -> GHC.Base.Maybe a
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U><L,U><L,U><S,1*U>,
     Inline: [0] -}
4f74ae82378bbdb0c0e9cda60a76eaf9
  $wpoly_go5 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.KindName)
         a
    -> GHC.Base.Maybe a
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U><L,U><L,U><S,1*U>,
     Inline: [0] -}
e8811237d5759d304a0758b7abce68cb
  $wpoly_go6 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName)
         a
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U><L,U><L,U><S,1*U>,
     Inline: [0] -}
9a631705aaa1eb8277fbab238d1844f3
  $wpoly_go7 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.TypeOpName)
         a
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U><L,U><L,U><S,1*U>,
     Inline: [0] -}
12b6b367eefa579227bf562cc371c6f4
  $wpoly_go8 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.ValueOpName)
         a
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U><L,U><L,U><S,1*U>,
     Inline: [0] -}
71223cc47f13584eb43b613224b48cba
  $wpoly_go9 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
         a
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U><L,U><L,U><S,1*U>,
     Inline: [0] -}
ec9ec5f0db66c12dbedf78f8d7baf79a
  $wresolveImports ::
    Control.Monad.Error.Class.MonadError
      Language.PureScript.Errors.MultipleErrors m =>
    Language.PureScript.Sugar.Names.Env.Env
    -> Language.PureScript.AST.SourcePos.SourceSpan
    -> [Language.PureScript.Comments.Comment]
    -> Language.PureScript.Names.ModuleName
    -> [Language.PureScript.AST.Declarations.Declaration]
    -> GHC.Base.Maybe
         [Language.PureScript.AST.Declarations.DeclarationRef]
    -> m (Language.PureScript.AST.Declarations.Module,
          Language.PureScript.Sugar.Names.Env.Imports)
  {- Arity: 7,
     Strictness: <S(LLC(C(S))),U(U(U(1*U(1*C1(C1(U)),A),C(U),A,A,C(C1(U)),A),C(C1(U)),C(C1(U)),U,A),C(U),1*C1(C1(U)))><L,U><L,U><L,U><L,U><L,U><L,U>,
     Inline: [0],
     Unfolding: (\ @ m :: * -> *
                   (w :: Control.Monad.Error.Class.MonadError
                           Language.PureScript.Errors.MultipleErrors m)
                   (w1 :: Language.PureScript.Sugar.Names.Env.Env)
                   (ww :: Language.PureScript.AST.SourcePos.SourceSpan)
                   (ww1 :: [Language.PureScript.Comments.Comment])
                   (ww2 :: Language.PureScript.Names.ModuleName)
                   (ww3 :: [Language.PureScript.AST.Declarations.Declaration])
                   (ww4 :: GHC.Base.Maybe
                             [Language.PureScript.AST.Declarations.DeclarationRef]) ->
                 let {
                   f2 :: Language.PureScript.AST.Declarations.ErrorMessageHint
                   = Language.PureScript.AST.Declarations.ErrorInModule ww2
                 } in
                 Control.Monad.Error.Class.catchError
                   @ Language.PureScript.Errors.MultipleErrors
                   @ m
                   w
                   @ (Language.PureScript.AST.Declarations.Module,
                      Language.PureScript.Sugar.Names.Env.Imports)
                   (let {
                      $dMonad :: GHC.Base.Monad m
                      = Control.Monad.Error.Class.$p1MonadError
                          @ Language.PureScript.Errors.MultipleErrors
                          @ m
                          w
                    } in
                    let {
                      lvl93 :: Language.PureScript.AST.Declarations.Module
                      = Language.PureScript.AST.Declarations.Module ww ww1 ww2 ww3 ww4
                    } in
                    GHC.Base.fmap
                      @ m
                      (GHC.Base.$p1Applicative @ m (GHC.Base.$p1Monad @ m $dMonad))
                      @ Language.PureScript.Sugar.Names.Env.Imports
                      @ (Language.PureScript.AST.Declarations.Module,
                         Language.PureScript.Sugar.Names.Env.Imports)
                      (\ (ds :: Language.PureScript.Sugar.Names.Env.Imports) ->
                       (lvl93, ds))
                      (letrec {
                         go13 :: (Language.PureScript.Sugar.Names.Env.Imports
                                  -> m Language.PureScript.Sugar.Names.Env.Imports)
                                 -> Data.Map.Internal.Map
                                      Language.PureScript.Names.ModuleName
                                      [(Language.PureScript.AST.SourcePos.SourceSpan,
                                        GHC.Base.Maybe
                                          Language.PureScript.AST.Declarations.ImportDeclarationType,
                                        GHC.Base.Maybe Language.PureScript.Names.ModuleName)]
                                 -> Language.PureScript.Sugar.Names.Env.Imports
                                 -> m Language.PureScript.Sugar.Names.Env.Imports
                           {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
                         = \ (z' :: Language.PureScript.Sugar.Names.Env.Imports
                                    -> m Language.PureScript.Sugar.Names.Env.Imports)
                             (ds :: Data.Map.Internal.Map
                                      Language.PureScript.Names.ModuleName
                                      [(Language.PureScript.AST.SourcePos.SourceSpan,
                                        GHC.Base.Maybe
                                          Language.PureScript.AST.Declarations.ImportDeclarationType,
                                        GHC.Base.Maybe Language.PureScript.Names.ModuleName)]) ->
                           case ds of wild {
                             Data.Map.Internal.Bin dt kx x l r
                             -> go13
                                  (let {
                                     xs :: Language.PureScript.Sugar.Names.Env.Imports
                                           -> m Language.PureScript.Sugar.Names.Env.Imports
                                     = go13 z' r
                                   } in
                                   \ (eta :: Language.PureScript.Sugar.Names.Env.Imports) ->
                                   GHC.Base.>>=
                                     @ m
                                     $dMonad
                                     @ Language.PureScript.Sugar.Names.Env.Imports
                                     @ Language.PureScript.Sugar.Names.Env.Imports
                                     (Language.PureScript.Sugar.Names.Imports.$wresolveModuleImport
                                        @ m
                                        w
                                        w1
                                        eta
                                        kx
                                        x)
                                     xs)
                                  l
                             Data.Map.Internal.Tip -> z' }
                       } in
                       go13
                         (GHC.Base.return
                            @ m
                            $dMonad
                            @ Language.PureScript.Sugar.Names.Env.Imports)
                         (Language.PureScript.Sugar.Names.Imports.$sinsert_$sgo1
                            @ [(Language.PureScript.AST.SourcePos.SourceSpan,
                                GHC.Base.Maybe
                                  Language.PureScript.AST.Declarations.ImportDeclarationType,
                                GHC.Base.Maybe Language.PureScript.Names.ModuleName)]
                            ww2
                            ww2
                            Language.PureScript.Sugar.Names.Imports.resolveImports1
                            (Language.PureScript.Sugar.Names.Imports.resolveImports_go13
                               (Language.PureScript.Sugar.Names.Imports.findImports ww3)))
                         Language.PureScript.Sugar.Names.Env.nullImports))
                   (\ (x :: Language.PureScript.Errors.MultipleErrors) ->
                    Control.Monad.Error.Class.throwError
                      @ Language.PureScript.Errors.MultipleErrors
                      @ m
                      w
                      @ (Language.PureScript.AST.Declarations.Module,
                         Language.PureScript.Sugar.Names.Env.Imports)
                      (Language.PureScript.Errors.addHint1 f2 x)
                        `cast`
                      (Sym (Language.PureScript.Errors.N:MultipleErrors[0])))) -}
1941bfa7341a75a9a8f0e1bf20018973
  $wresolveModuleImport ::
    Control.Monad.Error.Class.MonadError
      Language.PureScript.Errors.MultipleErrors m =>
    Language.PureScript.Sugar.Names.Env.Env
    -> Language.PureScript.Sugar.Names.Env.Imports
    -> Language.PureScript.Names.ModuleName
    -> [(Language.PureScript.AST.SourcePos.SourceSpan,
         GHC.Base.Maybe
           Language.PureScript.AST.Declarations.ImportDeclarationType,
         GHC.Base.Maybe Language.PureScript.Names.ModuleName)]
    -> m Language.PureScript.Sugar.Names.Env.Imports
  {- Arity: 5,
     Strictness: <L,U(1*U(1*U(A,1*C1(U),A,A,C(C1(U)),A),C(C1(U)),C(C1(U)),U,A),C(U),A)><L,1*U><L,U><L,U><S,1*U>,
     Inline: [0] -}
0c3af3358c9ad1ab561abbade73a3664
  type ImportDef =
    (Language.PureScript.AST.SourcePos.SourceSpan,
     Language.PureScript.AST.Declarations.ImportDeclarationType,
     GHC.Base.Maybe Language.PureScript.Names.ModuleName)
024484b2ba29221464988f36d5007372
  findImports ::
    [Language.PureScript.AST.Declarations.Declaration]
    -> Data.Map.Internal.Map
         Language.PureScript.Names.ModuleName
         [Language.PureScript.Sugar.Names.Imports.ImportDef]
  {- Arity: 1, Strictness: <S,1*U> -}
04b450297daa20ef3026037975cea79f
  resolveImports ::
    Control.Monad.Error.Class.MonadError
      Language.PureScript.Errors.MultipleErrors m =>
    Language.PureScript.Sugar.Names.Env.Env
    -> Language.PureScript.AST.Declarations.Module
    -> m (Language.PureScript.AST.Declarations.Module,
          Language.PureScript.Sugar.Names.Env.Imports)
  {- Arity: 3,
     Strictness: <S(LLC(C(S))),U(U(U(U(C(C1(U)),A),C(U),A,A,C(C1(U)),A),C(C1(U)),C(C1(U)),U,A),C(U),C(C1(U)))><L,U><S,1*U(U,U,U,U,U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ m :: * -> *
                   (w :: Control.Monad.Error.Class.MonadError
                           Language.PureScript.Errors.MultipleErrors m)
                   (w1 :: Language.PureScript.Sugar.Names.Env.Env)
                   (w2 :: Language.PureScript.AST.Declarations.Module) ->
                 case w2 of ww { Language.PureScript.AST.Declarations.Module ww1 ww2 ww3 ww4 ww5 ->
                 Language.PureScript.Sugar.Names.Imports.$wresolveImports
                   @ m
                   w
                   w1
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5 }) -}
3e8227f6c6da88a6e63d373b0d046656
  resolveImports1 ::
    [(Language.PureScript.AST.SourcePos.SourceSpan,
      GHC.Base.Maybe
        Language.PureScript.AST.Declarations.ImportDeclarationType,
      GHC.Base.Maybe Language.PureScript.Names.ModuleName)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.AST.SourcePos.SourceSpan,
                      GHC.Base.Maybe
                        Language.PureScript.AST.Declarations.ImportDeclarationType,
                      GHC.Base.Maybe Language.PureScript.Names.ModuleName)
                   Language.PureScript.Sugar.Names.Imports.resolveImports2
                   (GHC.Types.[]
                      @ (Language.PureScript.AST.SourcePos.SourceSpan,
                         GHC.Base.Maybe
                           Language.PureScript.AST.Declarations.ImportDeclarationType,
                         GHC.Base.Maybe Language.PureScript.Names.ModuleName))) -}
d1aa0f342478cb45ab4f013680f1d3f4
  resolveImports2 ::
    (Language.PureScript.AST.SourcePos.SourceSpan,
     GHC.Base.Maybe
       Language.PureScript.AST.Declarations.ImportDeclarationType,
     GHC.Base.Maybe Language.PureScript.Names.ModuleName)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Sugar.Names.Imports.resolveImports3,
                  GHC.Base.Nothing
                    @ Language.PureScript.AST.Declarations.ImportDeclarationType,
                  GHC.Base.Nothing @ Language.PureScript.Names.ModuleName)) -}
15897d377043cfb987b1dfd585937a78
  resolveImports3 :: Language.PureScript.AST.SourcePos.SourceSpan
  {- Strictness: m,
     Unfolding: (Language.PureScript.AST.SourcePos.SourceSpan
                   Language.PureScript.Sugar.Names.Imports.resolveImports4
                   Language.PureScript.AST.SourcePos.$bNullSourceSpan1
                   Language.PureScript.AST.SourcePos.$bNullSourceSpan1) -}
0397d96af4dcb48e0d43fae55ba997fa
  resolveImports4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Sugar.Names.Imports.resolveImports5) -}
ac9d495f7ea4c7b9c4376f71ff132b83
  resolveImports5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("<module>"#) -}
c88a053d40c9225cfd0cf21eae6760f3
  resolveImports_go13 ::
    Data.Map.Internal.Map
      Language.PureScript.Names.ModuleName
      [(Language.PureScript.AST.SourcePos.SourceSpan,
        Language.PureScript.AST.Declarations.ImportDeclarationType,
        GHC.Base.Maybe Language.PureScript.Names.ModuleName)]
    -> Data.Map.Internal.Map
         Language.PureScript.Names.ModuleName
         [(Language.PureScript.AST.SourcePos.SourceSpan,
           GHC.Base.Maybe
             Language.PureScript.AST.Declarations.ImportDeclarationType,
           GHC.Base.Maybe Language.PureScript.Names.ModuleName)]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
e8d056b5d314360439332a832f40b7e5
  resolveModuleImport ::
    Control.Monad.Error.Class.MonadError
      Language.PureScript.Errors.MultipleErrors m =>
    Language.PureScript.Sugar.Names.Env.Env
    -> Language.PureScript.Sugar.Names.Env.Imports
    -> (Language.PureScript.Names.ModuleName,
        [(Language.PureScript.AST.SourcePos.SourceSpan,
          GHC.Base.Maybe
            Language.PureScript.AST.Declarations.ImportDeclarationType,
          GHC.Base.Maybe Language.PureScript.Names.ModuleName)])
    -> m Language.PureScript.Sugar.Names.Env.Imports
  {- Arity: 4,
     Strictness: <L,U(U(U(A,C(U),A,A,C(C1(U)),A),C(C1(U)),C(C1(U)),U,A),C(U),A)><L,1*U><L,U><S(LS),1*U(U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ @ m :: * -> *
                   (w :: Control.Monad.Error.Class.MonadError
                           Language.PureScript.Errors.MultipleErrors m)
                   (w1 :: Language.PureScript.Sugar.Names.Env.Env)
                   (w2 :: Language.PureScript.Sugar.Names.Env.Imports)
                   (w3 :: (Language.PureScript.Names.ModuleName,
                           [(Language.PureScript.AST.SourcePos.SourceSpan,
                             GHC.Base.Maybe
                               Language.PureScript.AST.Declarations.ImportDeclarationType,
                             GHC.Base.Maybe Language.PureScript.Names.ModuleName)])) ->
                 case w3 of ww { (,) ww1 ww2 ->
                 Language.PureScript.Sugar.Names.Imports.$wresolveModuleImport
                   @ m
                   w
                   w1
                   w2
                   ww1
                   ww2 }) -}
"SC:poly_go130" forall @ a
                       (sc :: Data.Map.Internal.Map Language.PureScript.Names.Ident a)
                       (sc1 :: Data.Text.Internal.Text)
  Language.PureScript.Sugar.Names.Imports.$slookup9 @ a
                                                    (Language.PureScript.Names.Ident sc1)
                                                    sc
  = Language.PureScript.Sugar.Names.Imports.$slookup_$spoly_go2
      @ a
      sc
      sc1
"SC:poly_go130" forall @ a
                       (sc :: Data.Map.Internal.Map Language.PureScript.Names.Ident a)
                       (sc1 :: Data.Text.Internal.Text)
  Language.PureScript.Sugar.Names.Imports.$smember5 @ a
                                                    (Language.PureScript.Names.Ident sc1)
                                                    sc
  = Language.PureScript.Sugar.Names.Imports.$smember_$spoly_go2
      @ a
      sc
      sc1
"SC:poly_go131" forall @ a
                       (sc :: Data.Map.Internal.Map Language.PureScript.Names.Ident a)
                       (sc1 :: GHC.Base.Maybe Data.Text.Internal.Text)
                       (sc2 :: GHC.Integer.Type.Integer)
  Language.PureScript.Sugar.Names.Imports.$slookup9 @ a
                                                    (Language.PureScript.Names.GenIdent sc1 sc2)
                                                    sc
  = Language.PureScript.Sugar.Names.Imports.$slookup_$spoly_go1
      @ a
      sc
      sc1
      sc2
"SC:poly_go131" forall @ a
                       (sc :: Data.Map.Internal.Map Language.PureScript.Names.Ident a)
                       (sc1 :: GHC.Base.Maybe Data.Text.Internal.Text)
                       (sc2 :: GHC.Integer.Type.Integer)
  Language.PureScript.Sugar.Names.Imports.$smember5 @ a
                                                    (Language.PureScript.Names.GenIdent sc1 sc2)
                                                    sc
  = Language.PureScript.Sugar.Names.Imports.$smember_$spoly_go1
      @ a
      sc
      sc1
      sc2
"SC:poly_go132" forall @ a
                       (sc :: Data.Map.Internal.Map Language.PureScript.Names.Ident a)
  Language.PureScript.Sugar.Names.Imports.$slookup9 @ a
                                                    Language.PureScript.Names.UnusedIdent
                                                    sc
  = Language.PureScript.Sugar.Names.Imports.$slookup_$spoly_go13
      @ a
      sc
"SC:poly_go132" forall @ a
                       (sc :: Data.Map.Internal.Map Language.PureScript.Names.Ident a)
  Language.PureScript.Sugar.Names.Imports.$smember5 @ a
                                                    Language.PureScript.Names.UnusedIdent
                                                    sc
  = Language.PureScript.Sugar.Names.Imports.$smember_$spoly_go13
      @ a
      sc
"SPEC/Language.PureScript.Sugar.Names.Imports $fEqQualified @ (OpName
                                                                'TypeOpName)" [orphan] forall (v :: GHC.Classes.Eq
                                                                                                                                                                            (Language.PureScript.Names.OpName
                                                                                                                                                                               'Language.PureScript.Names.TypeOpName))
  Language.PureScript.Names.$fEqQualified @ (Language.PureScript.Names.OpName
                                               'Language.PureScript.Names.TypeOpName)
                                          v
  = Language.PureScript.Sugar.Names.Imports.$s$fEqQualified2
"SPEC/Language.PureScript.Sugar.Names.Imports $fEqQualified @ (OpName
                                                                'ValueOpName)" [orphan] forall (v :: GHC.Classes.Eq
                                                                                                                                                                             (Language.PureScript.Names.OpName
                                                                                                                                                                                'Language.PureScript.Names.ValueOpName))
  Language.PureScript.Names.$fEqQualified @ (Language.PureScript.Names.OpName
                                               'Language.PureScript.Names.ValueOpName)
                                          v
  = Language.PureScript.Sugar.Names.Imports.$s$fEqQualified4
"SPEC/Language.PureScript.Sugar.Names.Imports $fEqQualified @ (ProperName
                                                                'ClassName)" [orphan] forall (v :: GHC.Classes.Eq
                                                                                                                                                                               (Language.PureScript.Names.ProperName
                                                                                                                                                                                  'Language.PureScript.Names.ClassName))
  Language.PureScript.Names.$fEqQualified @ (Language.PureScript.Names.ProperName
                                               'Language.PureScript.Names.ClassName)
                                          v
  = Language.PureScript.Sugar.Names.Imports.$s$fEqQualified5
"SPEC/Language.PureScript.Sugar.Names.Imports $fEqQualified @ (ProperName
                                                                'ConstructorName)" [orphan] forall (v :: GHC.Classes.Eq
                                                                                                                                                                                     (Language.PureScript.Names.ProperName
                                                                                                                                                                                        'Language.PureScript.Names.ConstructorName))
  Language.PureScript.Names.$fEqQualified @ (Language.PureScript.Names.ProperName
                                               'Language.PureScript.Names.ConstructorName)
                                          v
  = Language.PureScript.Sugar.Names.Imports.$s$fEqQualified
"SPEC/Language.PureScript.Sugar.Names.Imports $fEqQualified @ (ProperName
                                                                'KindName)" [orphan] forall (v :: GHC.Classes.Eq
                                                                                                                                                                              (Language.PureScript.Names.ProperName
                                                                                                                                                                                 'Language.PureScript.Names.KindName))
  Language.PureScript.Names.$fEqQualified @ (Language.PureScript.Names.ProperName
                                               'Language.PureScript.Names.KindName)
                                          v
  = Language.PureScript.Sugar.Names.Imports.$s$fEqQualified6
"SPEC/Language.PureScript.Sugar.Names.Imports $fEqQualified @ (ProperName
                                                                'TypeName)" [orphan] forall (v :: GHC.Classes.Eq
                                                                                                                                                                              (Language.PureScript.Names.ProperName
                                                                                                                                                                                 'Language.PureScript.Names.TypeName))
  Language.PureScript.Names.$fEqQualified @ (Language.PureScript.Names.ProperName
                                               'Language.PureScript.Names.TypeName)
                                          v
  = Language.PureScript.Sugar.Names.Imports.$s$fEqQualified1
"SPEC/Language.PureScript.Sugar.Names.Imports $fEqQualified @ Ident" [orphan] forall (v :: GHC.Classes.Eq
                                                                                             Language.PureScript.Names.Ident)
  Language.PureScript.Names.$fEqQualified @ Language.PureScript.Names.Ident
                                          v
  = Language.PureScript.Sugar.Names.Imports.$s$fEqQualified3
"SPEC/Language.PureScript.Sugar.Names.Imports $fEqQualified_$c/= @ (OpName
                                                                     'TypeOpName)" [orphan] forall ($dEq :: GHC.Classes.Eq
                                                                                                                                                                                         (Language.PureScript.Names.OpName
                                                                                                                                                                                            'Language.PureScript.Names.TypeOpName))
  Language.PureScript.Names.$fEqQualified_$c/= @ (Language.PureScript.Names.OpName
                                                    'Language.PureScript.Names.TypeOpName)
                                               $dEq
  = Language.PureScript.Sugar.Names.Imports.$s$fEqQualified_$s$fEqQualified_$c/=2
"SPEC/Language.PureScript.Sugar.Names.Imports $fEqQualified_$c/= @ (OpName
                                                                     'ValueOpName)" [orphan] forall ($dEq :: GHC.Classes.Eq
                                                                                                                                                                                          (Language.PureScript.Names.OpName
                                                                                                                                                                                             'Language.PureScript.Names.ValueOpName))
  Language.PureScript.Names.$fEqQualified_$c/= @ (Language.PureScript.Names.OpName
                                                    'Language.PureScript.Names.ValueOpName)
                                               $dEq
  = Language.PureScript.Sugar.Names.Imports.$s$fEqQualified_$s$fEqQualified_$c/=4
"SPEC/Language.PureScript.Sugar.Names.Imports $fEqQualified_$c/= @ (ProperName
                                                                     'ClassName)" [orphan] forall ($dEq :: GHC.Classes.Eq
                                                                                                                                                                                            (Language.PureScript.Names.ProperName
                                                                                                                                                                                               'Language.PureScript.Names.ClassName))
  Language.PureScript.Names.$fEqQualified_$c/= @ (Language.PureScript.Names.ProperName
                                                    'Language.PureScript.Names.ClassName)
                                               $dEq
  = Language.PureScript.Sugar.Names.Imports.$s$fEqQualified_$s$fEqQualified_$c/=5
"SPEC/Language.PureScript.Sugar.Names.Imports $fEqQualified_$c/= @ (ProperName
                                                                     'ConstructorName)" [orphan] forall ($dEq :: GHC.Classes.Eq
                                                                                                                                                                                                  (Language.PureScript.Names.ProperName
                                                                                                                                                                                                     'Language.PureScript.Names.ConstructorName))
  Language.PureScript.Names.$fEqQualified_$c/= @ (Language.PureScript.Names.ProperName
                                                    'Language.PureScript.Names.ConstructorName)
                                               $dEq
  = Language.PureScript.Sugar.Names.Imports.$s$fEqQualified_$s$fEqQualified_$c/=
"SPEC/Language.PureScript.Sugar.Names.Imports $fEqQualified_$c/= @ (ProperName
                                                                     'KindName)" [orphan] forall ($dEq :: GHC.Classes.Eq
                                                                                                                                                                                           (Language.PureScript.Names.ProperName
                                                                                                                                                                                              'Language.PureScript.Names.KindName))
  Language.PureScript.Names.$fEqQualified_$c/= @ (Language.PureScript.Names.ProperName
                                                    'Language.PureScript.Names.KindName)
                                               $dEq
  = Language.PureScript.Sugar.Names.Imports.$s$fEqQualified_$s$fEqQualified_$c/=6
"SPEC/Language.PureScript.Sugar.Names.Imports $fEqQualified_$c/= @ (ProperName
                                                                     'TypeName)" [orphan] forall ($dEq :: GHC.Classes.Eq
                                                                                                                                                                                           (Language.PureScript.Names.ProperName
                                                                                                                                                                                              'Language.PureScript.Names.TypeName))
  Language.PureScript.Names.$fEqQualified_$c/= @ (Language.PureScript.Names.ProperName
                                                    'Language.PureScript.Names.TypeName)
                                               $dEq
  = Language.PureScript.Sugar.Names.Imports.$s$fEqQualified_$s$fEqQualified_$c/=1
"SPEC/Language.PureScript.Sugar.Names.Imports $fEqQualified_$c/= @ Ident" [orphan] forall ($dEq :: GHC.Classes.Eq
                                                                                                     Language.PureScript.Names.Ident)
  Language.PureScript.Names.$fEqQualified_$c/= @ Language.PureScript.Names.Ident
                                               $dEq
  = Language.PureScript.Sugar.Names.Imports.$s$fEqQualified_$s$fEqQualified_$c/=3
"SPEC/Language.PureScript.Sugar.Names.Imports $fOrdQualified @ (OpName
                                                                 'TypeOpName)" [orphan] forall (v :: GHC.Classes.Ord
                                                                                                                                                                              (Language.PureScript.Names.OpName
                                                                                                                                                                                 'Language.PureScript.Names.TypeOpName))
  Language.PureScript.Names.$fOrdQualified @ (Language.PureScript.Names.OpName
                                                'Language.PureScript.Names.TypeOpName)
                                           v
  = Language.PureScript.Sugar.Names.Imports.$s$fOrdQualified2
"SPEC/Language.PureScript.Sugar.Names.Imports $fOrdQualified @ (OpName
                                                                 'ValueOpName)" [orphan] forall (v :: GHC.Classes.Ord
                                                                                                                                                                               (Language.PureScript.Names.OpName
                                                                                                                                                                                  'Language.PureScript.Names.ValueOpName))
  Language.PureScript.Names.$fOrdQualified @ (Language.PureScript.Names.OpName
                                                'Language.PureScript.Names.ValueOpName)
                                           v
  = Language.PureScript.Sugar.Names.Imports.$s$fOrdQualified4
"SPEC/Language.PureScript.Sugar.Names.Imports $fOrdQualified @ (ProperName
                                                                 'ClassName)" [orphan] forall (v :: GHC.Classes.Ord
                                                                                                                                                                                 (Language.PureScript.Names.ProperName
                                                                                                                                                                                    'Language.PureScript.Names.ClassName))
  Language.PureScript.Names.$fOrdQualified @ (Language.PureScript.Names.ProperName
                                                'Language.PureScript.Names.ClassName)
                                           v
  = Language.PureScript.Sugar.Names.Imports.$s$fOrdQualified5
"SPEC/Language.PureScript.Sugar.Names.Imports $fOrdQualified @ (ProperName
                                                                 'ConstructorName)" [orphan] forall (v :: GHC.Classes.Ord
                                                                                                                                                                                       (Language.PureScript.Names.ProperName
                                                                                                                                                                                          'Language.PureScript.Names.ConstructorName))
  Language.PureScript.Names.$fOrdQualified @ (Language.PureScript.Names.ProperName
                                                'Language.PureScript.Names.ConstructorName)
                                           v
  = Language.PureScript.Sugar.Names.Imports.$s$fOrdQualified
"SPEC/Language.PureScript.Sugar.Names.Imports $fOrdQualified @ (ProperName
                                                                 'KindName)" [orphan] forall (v :: GHC.Classes.Ord
                                                                                                                                                                                (Language.PureScript.Names.ProperName
                                                                                                                                                                                   'Language.PureScript.Names.KindName))
  Language.PureScript.Names.$fOrdQualified @ (Language.PureScript.Names.ProperName
                                                'Language.PureScript.Names.KindName)
                                           v
  = Language.PureScript.Sugar.Names.Imports.$s$fOrdQualified6
"SPEC/Language.PureScript.Sugar.Names.Imports $fOrdQualified @ (ProperName
                                                                 'TypeName)" [orphan] forall (v :: GHC.Classes.Ord
                                                                                                                                                                                (Language.PureScript.Names.ProperName
                                                                                                                                                                                   'Language.PureScript.Names.TypeName))
  Language.PureScript.Names.$fOrdQualified @ (Language.PureScript.Names.ProperName
                                                'Language.PureScript.Names.TypeName)
                                           v
  = Language.PureScript.Sugar.Names.Imports.$s$fOrdQualified1
"SPEC/Language.PureScript.Sugar.Names.Imports $fOrdQualified @ Ident" [orphan] forall (v :: GHC.Classes.Ord
                                                                                              Language.PureScript.Names.Ident)
  Language.PureScript.Names.$fOrdQualified @ Language.PureScript.Names.Ident
                                           v
  = Language.PureScript.Sugar.Names.Imports.$s$fOrdQualified3
"SPEC/Language.PureScript.Sugar.Names.Imports fromList @ (ProperName
                                                           'ConstructorName) _" [orphan] forall @ a
                                                                                                                                                                     ($dOrd :: GHC.Classes.Ord
                                                                                                                                                                                 (Language.PureScript.Names.ProperName
                                                                                                                                                                                    'Language.PureScript.Names.ConstructorName))
  Data.Map.Internal.fromList @ (Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.ConstructorName)
                             @ a
                             $dOrd
  = Language.PureScript.Sugar.Names.Imports.$sfromList @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

