
==================== FINAL INTERFACE ====================
2018-11-30 20:47:56.662214 UTC

interface purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Sugar.TypeClasses.Deriving 8043
  interface hash: 1b986d081f4984cb8dd017c9a7f98acc
  ABI hash: 1421e4b2dcad28794160e0dcd619c94e
  export-list hash: 794a2207ad7b06eb39404a8f987c109d
  orphan hash: a406ee27c9e4ebc5e07e912df7eddea1
  flag hash: a36dbfbd54c57924a199aea99ee7acd2
  opt_hash: 2c98c95d41c045ae9c2fb565ec8aabc6
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Language.PureScript.Sugar.TypeClasses.Deriving.deriveInstances
module dependencies: Control.Monad.Supply
                     Control.Monad.Supply.Class Language.PureScript.AST
                     Language.PureScript.AST.Binders
                     Language.PureScript.AST.Declarations
                     Language.PureScript.AST.Exported Language.PureScript.AST.Literals
                     Language.PureScript.AST.Operators Language.PureScript.AST.SourcePos
                     Language.PureScript.AST.Traversals Language.PureScript.Bundle
                     Language.PureScript.Comments Language.PureScript.Constants
                     Language.PureScript.Crash Language.PureScript.Environment
                     Language.PureScript.Errors Language.PureScript.Externs
                     Language.PureScript.Kinds Language.PureScript.Label
                     Language.PureScript.Linter Language.PureScript.Linter.Exhaustive
                     Language.PureScript.Linter.Imports Language.PureScript.Names
                     Language.PureScript.PSString Language.PureScript.Parser.Lexer
                     Language.PureScript.Parser.State Language.PureScript.Pretty
                     Language.PureScript.Pretty.Common Language.PureScript.Pretty.Kinds
                     Language.PureScript.Pretty.Types Language.PureScript.Pretty.Values
                     Language.PureScript.Publish.BoxesHelpers
                     Language.PureScript.Sugar.Names.Common
                     Language.PureScript.Sugar.Names.Env
                     Language.PureScript.Sugar.Names.Imports
                     Language.PureScript.Traversals Language.PureScript.TypeChecker
                     Language.PureScript.TypeChecker.Entailment
                     Language.PureScript.TypeChecker.Kinds
                     Language.PureScript.TypeChecker.Monad
                     Language.PureScript.TypeChecker.Skolems
                     Language.PureScript.TypeChecker.Subsumption
                     Language.PureScript.TypeChecker.Synonyms
                     Language.PureScript.TypeChecker.TypeSearch
                     Language.PureScript.TypeChecker.Types
                     Language.PureScript.TypeChecker.Unify
                     Language.PureScript.TypeClassDictionaries Language.PureScript.Types
                     Paths_purescript
package dependencies: aeson-1.3.1.1 aeson-better-errors-0.9.1.0
                      ansi-terminal-0.8.0.4 array-0.5.2.0 async-2.2.1 attoparsec-0.13.2.2
                      base-4.11.1.0 base-compat-0.10.4 binary-0.8.5.1
                      blaze-builder-0.4.1.0 boxes-0.1.5 bytestring-0.10.8.2 colour-2.3.4
                      containers-0.5.11.0 data-ordlist-0.4.7.0 deepseq-1.4.3.0
                      dlist-0.8.0.4 filepath-1.4.2 ghc-boot-th-8.4.3 ghc-prim-0.5.2.0
                      hashable-1.2.7.0 integer-gmp-1.0.2.0 integer-logarithms-1.0.2.1
                      language-javascript-0.6.0.11 microlens-0.4.9.1 microlens-ghc-0.4.9
                      microlens-mtl-0.1.11.1 microlens-platform-0.3.10
                      microlens-th-0.4.2.1 mtl-2.2.2 parsec-3.1.13.0 pattern-arrows-0.0.2
                      pretty-1.1.3.6 primitive-0.6.3.0 protolude-0.2.2 random-1.1
                      safe-0.3.17 scientific-0.3.6.2 sourcemap-0.1.6 split-0.2.3.3
                      stm-2.4.5.0 syb-0.7 tagged-0.8.5 template-haskell-2.13.0.0
                      text-1.2.3.0 th-abstraction-0.2.8.0 time-1.8.0.2
                      time-locale-compat-0.1.1.4 transformers-0.5.5.0
                      unordered-containers-0.2.9.0 utf8-string-1.0.1.1 uuid-types-1.0.3
                      vector-0.12.0.1
orphans: microlens-platform-0.3.10:Lens.Micro.Platform
         microlens-ghc-0.4.9:Lens.Micro.GHC syb-0.7:Data.Generics.Instances
         colour-2.3.4:Data.Colour stm-2.4.5.0:Control.Monad.STM
         attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         vector-0.12.0.1:Data.Vector.Unboxed
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.0:Data.Text.Lazy
         text-1.2.3.0:Data.Text binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.5.0:Control.Monad.Trans.Error
         base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: aeson-1.3.1.1:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.Graph
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         dlist-0.8.0.4:Data.DList ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         microlens-0.4.9.1:Lens.Micro.Internal
                         microlens-ghc-0.4.9:Lens.Micro.GHC
                         microlens-mtl-0.1.11.1:Lens.Micro.Mtl.Internal
                         microlens-platform-0.3.10:Lens.Micro.Platform
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.AST.Declarations
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.AST.Operators
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.AST.SourcePos
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Environment
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Kinds
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Label
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Names
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.PSString
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.TypeClassDictionaries
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Types
                         tagged-0.8.5:Data.Tagged
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
                         th-abstraction-0.2.8.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  base-4.11.1.0:Control.Arrow ce43199b5356a11ee2a8317f0ec30aee
import  -/  base-4.11.1.0:Control.Monad c5f960c67d822497578bffbd3e4c01cf
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.Functor f522c3501272159820fd6f242510732f
import  -/  base-4.11.1.0:Data.List 83dc843e47bfc0c5af51e19c6f3476d5
import  -/  base-4.11.1.0:Data.Maybe 409c3da2b142470b68be39ce1d97a9f7
import  -/  base-4.11.1.0:Data.OldList 1b35aa3c6805ff7c8887a35a866fe006
import  -/  base-4.11.1.0:Data.Ord 8579f16310a4ec69c00617051bb5c3d9
import  -/  base-4.11.1.0:Data.Traversable 7ad4edb9184ea1ae8e73f6b94f115c8c
import  -/  base-4.11.1.0:Data.Tuple 3af66f3ac61ed95ba8a3a3f68ebc5003
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Err 5e26aa744981f14e0f1e4d29c44ac52e
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-compat-0.10.4:Prelude.Compat bb6796186ed35a1d09dc34362a3fc27e
import  -/  containers-0.5.11.0:Data.Map 0dbdaec812ef695a364aa6c69e7f7d53
import  -/  containers-0.5.11.0:Data.Map.Internal 0150e210d0ae8df0f3a0669d5e32d8fa
import  -/  containers-0.5.11.0:Data.Set 7d3c64a641be4cacbcd8119445bab919
import  -/  containers-0.5.11.0:Data.Set.Internal 93fa3ef95853aa2a7aadf32d693bd451
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  mtl-2.2.2:Control.Monad.Error.Class df146c18e27154b8df4c8637c59fd61b
import  -/  mtl-2.2.2:Control.Monad.Writer.Class 69f540e019eada69892c26d267276458
import  -/  protolude-0.2.2:Protolude 2c2d16096c8a60f59f646a3b93b0eb7b
import  -/  protolude-0.2.2:Protolude.List 3a80368167450d7a4360ebf1ea443345
import  -/  Control.Monad.Supply.Class a5ac88ebb2786fa0ca39c7248b7c5b8f
  exports: 91d489aaf16020272ece745e2b32bd17
  MonadSupply 6a9f80f28cc3fad47a987fee945f2fd2
import  -/  Language.PureScript.AST 7ed0e74bfed5b6489b8a5eabab5c0241
  exports: 0d53d92339536cd6d8d7dcfcad8e7c7e
import  -/  Language.PureScript.AST.Binders 9d60985147b34b89300370e810fed430
  Binder 50aa153193e190eabd8ac7530e604f9c
  ConstructorBinder a80ed0550c5d3abdd1e6249cec7ebb29
  NullBinder d74abae0f95c6b96e50712c73008469c
  VarBinder 2a223807b33e6f190799aea12e8ed5d7
import  -/  Language.PureScript.AST.Declarations 568e046fbf27b243bfc96f09017d4782
  Abs d07c7c6c44b48a3411184d34629a601e
  Accessor efce1a21efe3a6d2f322942575a5ad70
  App 60282620a1433a146ffafd0d8773af87
  CannotDerive 12002926ebee8124afe483ac0457151e
  CannotDeriveNewtypeForData e9efded074a416097f15509db0395634
  CannotFindDerivingType e0be076bb1ef5200dc1e3b5877ba9eda
  Case 26360a43049b71a59ced6dc5180ab8d3
  CaseAlternative 53d0b5fb91e3184ce5b575a7cf70b18d
  CaseAlternative b31d94d0c7b90700d40f9ba6ec420e41
  Constructor bb7c3f03ee8743dfc68d80ee99f8c1e3
  DataDeclaration db5935397ffc86d7f21188808af5170e
  Declaration b31d94d0c7b90700d40f9ba6ec420e41
  DeferredDictionary 7a56aac6dc1b7f4256df8373658d67a5
  DerivedInstance 75fe0998f1f44a98f35c594b934817d5
  ExpectedTypeConstructor f67cdb09228fbf526d1f675d204e6f0f
  ExpectedWildcard bf76baa092912cbbeedfcb0c2b60a825
  ExplicitInstance 566045ea839404c561f5bf2109dbe534
  Expr b31d94d0c7b90700d40f9ba6ec420e41
  GuardedExpr b31d94d0c7b90700d40f9ba6ec420e41
  InvalidDerivedInstance da339179d662ee730093b29e0416fcbb
  InvalidNewtypeInstance 6165c7d79e3531500278edc285895e77
  KindsDoNotUnify 1b0f77113f20fe072593f35f7c937472
  Literal 25fe050a9db328cb74b9c2f7e7994889
  MissingNewtypeSuperclassInstance d4fc49ab972aa91bee2af36ad7e63bee
  MkUnguarded b86897bed7e8aa9bc4f5498c0c74ad91
  Module b9e5d519f3251f7053b581e4ecd9e6bf
  Module 7cf4b96f7d4b51b446726a099ab87bb6
  NewtypeInstance eefeabcd731381919d00bd863d5e75f0
  NewtypeInstanceWithDictionary 2949dae5d307350f24e9fb4b0ff79def
  ObjectUpdate 6ecfa64620245159f62232366ffa0b51
  TypeClassDeclaration d4771a111b012cbefca253f911afd776
  TypeInstanceDeclaration c99b2ac93a5feb1209c747921a9e548b
  TypeSynonymDeclaration b022b78d38da14b3619ada244eaf9299
  UnverifiableSuperclassInstance 7c6c4372b3eac8d044923bdd87fe0968
  ValueDecl ccaaa682babb730c1361bddf2c5eee25
  Var 0202d242cce06e67fa6944b3c05a8982
import  -/  Language.PureScript.AST.Literals 3440d35205601002007fae6139f2b416
  BooleanLiteral 242415ff3d034091eec7910a2e553d43
import  -/  Language.PureScript.AST.SourcePos b3f67f807f2dce79528bbb15bd9c7104
  SourceSpan 73c071552214b3f18e94970349d3affc
import  -/  Language.PureScript.Constants d290cccb0db8657cab5f1253ab0da1ee
  exports: cd83a0f5b6591e5c66c598e34359260d
  Record 5fee4e5f5c35e127f52066e6a8be1a53
  compare f0bf07e9c362c31ff0e6067b79621fae
  compare1 bab7a98cc44eb3155743ce9e40232a88
  conj c0d86c82691ffc3459145b8fce70ae99
  eq 54fce466423bcf0eeb91d3af0175f601
  eq1 2bd98da59a130e385d637d3f86a8a8fa
  generic a1015c0174d65cdec0b7a10190ba10b9
  map 3bfc944ca7178cca071d94421764602e
import  -/  Language.PureScript.Crash 1bc11bf824676e9581610d0d05d26761
  exports: 8a971f39d6ef3f27956f413640cb0a24
  internalError f3db7e23c75878c9d13888d6d114012d
import  -/  Language.PureScript.Environment 31667499b7017b19998bb405474fbe93
  exports: 56b1ef0ac6132b4c113ce26a807dcfb6
  Data cb40e4d87c0c91534ef77768d4034ea2
  FunctionalDependency ef672654cffb5adb82634076fd85ad4a
  Newtype 1b0bdbba0a24544cb0a1769af0f376e7
  Public 167adf8dc42c910fd600ab439657b017
  fdDetermined ef672654cffb5adb82634076fd85ad4a
  fdDeterminers ef672654cffb5adb82634076fd85ad4a
  kindType 48cea3ba64f9da0332e747a1d7b5f120
import  -/  Language.PureScript.Errors 15d6eb6b2d4d480750061a0585d4e64c
  exports: 142ea650dec62642d1cff09ef1eee74e
  MultipleErrors ad1de73a1d5a6b0ccd9657dedebc94f3
  errorMessage' 5055fef8b372f878a840ac9e7783f39a
import  -/  Language.PureScript.Externs 17598d5385c46f650a2a55de08912a53
  exports: f9fc7fa26f69a655fd896d8cccd21570
  EDClass 9cb83a2abce39399d2d0a1b3cd400d65
  EDInstance df162d5263c0f620dff99525d40ae26f
  EDTypeSynonym 1b850cae34937645a2897c439a03d547
  ExternsFile c70689fb9608ce693621d95a9618d3ec
  ExternsFile b2e76f24ecba17bf3b946e078a8414b6
  edClassConstraints 45a26a6f5854665222c379466681ba1c
  edClassMembers 45a26a6f5854665222c379466681ba1c
  edClassName 45a26a6f5854665222c379466681ba1c
  edClassTypeArguments 45a26a6f5854665222c379466681ba1c
  edFunctionalDependencies 45a26a6f5854665222c379466681ba1c
  edInstanceChain 45a26a6f5854665222c379466681ba1c
  edInstanceChainIndex 45a26a6f5854665222c379466681ba1c
  edInstanceClassName 45a26a6f5854665222c379466681ba1c
  edInstanceConstraints 45a26a6f5854665222c379466681ba1c
  edInstanceName 45a26a6f5854665222c379466681ba1c
  edInstanceTypes 45a26a6f5854665222c379466681ba1c
  efDeclarations b2e76f24ecba17bf3b946e078a8414b6
  efExports b2e76f24ecba17bf3b946e078a8414b6
  efFixities b2e76f24ecba17bf3b946e078a8414b6
  efImports b2e76f24ecba17bf3b946e078a8414b6
  efModuleName b2e76f24ecba17bf3b946e078a8414b6
  efSourceSpan b2e76f24ecba17bf3b946e078a8414b6
  efTypeFixities b2e76f24ecba17bf3b946e078a8414b6
  efVersion b2e76f24ecba17bf3b946e078a8414b6
import  -/  Language.PureScript.Kinds bf1fc2fd18b06658330fcf93fe50e737
  exports: 2c2448e43e622d2466a59b9cd8f4db91
  FunKind beae73ee9677be9920dc1399ab9ff2dc
import  -/  Language.PureScript.Label ac3bc484eb8b3b2ccf228cc34cdb537c
  exports: 62e65d694c1e96c81750d9cacc93e898
  Label 6f46d05ebbc78fa0ba91a5af362adcaf
  Label 61523a5f4fc28a2f2f6f00cce17ce1bb
import  -/  Language.PureScript.Names b3bf151840f3e8f2eb61eff186432886
  exports: f7f3503d20957194bda83c16bb5f1288
  ClassName e69348bcf8c43a2174540a1d5983bfaa
  ConstructorName 9fb88e980342b224c2a4e4b58fa9fe33
  Ident 0ccd7f2221de64569e50634367691253
  Ident ab98a56ffa88760dad1380079e8ee35a
  ModuleName 0cb2c8b6c90c347a41315bf0e0fd925c
  ModuleName 5a70062bbdf29e6dc659ad8bf5326b50
  ProperName 9eb330c84db102abf2d0f2652fe4a144
  ProperName 29f101e190cc99df85623423972e606f
  Qualified d600a7f01c8203cf5504999de99c923c
  Qualified 5a70062bbdf29e6dc659ad8bf5326b50
  TypeName da42c92f73f4f363c63ecaf77b6335b9
  freshIdent c187ad88fe7ace9670b49d0359388e88
  qualify 5c136be976042cc97c533bd3348928a5
  runProperName 29f101e190cc99df85623423972e606f
import  -/  Language.PureScript.PSString 29492f728997dffadb84d1bf161f2ce4
  exports: 41608caf7cc5b51f34de641c9952ab6d
  mkString 59c5695c0c0978fcb9d0a00f0304b905
import  -/  Language.PureScript.TypeChecker 12a8c126a2e04df2ed32eda9f7a7c9fa
  exports: 7be14e28cba32efc5e96742d2d0cfb32
  checkNewtype 511713b9561fad1c7e8e4f04be2559ab
import  -/  Language.PureScript.TypeChecker.Synonyms 37e3cc0c7ba99bff75cbf7234c3426aa
  exports: 94023ae96d0e0cb3ccde1f6c60d6e8aa
  SynonymMap 6cd9c9fb4c5fd78f794e5f703153523d
  replaceAllTypeSynonymsM ad9c811962d7c95d12dc1ed7a32761a7
import  -/  Language.PureScript.Types 74562e642f5297557b3a23aac7819ad1
  exports: ae97bc75fcebc59f59c970736847a827
  ConstrainedType c2b3670e25b3b510981414df0f340e0f
  Constraint 07ef72cbe41926551b2da51008274cd5
  Constraint 93223f8afa90d0facc05a03f863dc72d
  ForAll 8e5cfabdac15777ed3387d8a0029598b
  RCons c8b1a363e575e040360112548c9c1bd6
  REmpty 7b5d4ca839c026ea0c7f04daad457191
  Type 93223f8afa90d0facc05a03f863dc72d
  TypeApp 8aa2c93426facb8054d5caf77ff9d922
  TypeConstructor 5e1c42d22ac701f08c049fde0171d9ac
  TypeLevelString b529cbddb07085442fd8755c41cb42eb
  TypeVar ac604589bba317f51f6e97fef0e84f86
  TypeWildcard d993619c31ecd71f696448ee686f32f4
  constraintArgs 93223f8afa90d0facc05a03f863dc72d
  constraintClass 93223f8afa90d0facc05a03f863dc72d
  constraintData 93223f8afa90d0facc05a03f863dc72d
  replaceAllTypeVars b1b07213df1ebf26d77b32c088290c22
  usedTypeVariables 447f8d9d36a9ec61971fd2bda905d2f6
import  -/  text-1.2.3.0:Data.Text 7daa7e6c9b39d8cc1679e5ec5c64d2be
import  -/  text-1.2.3.0:Data.Text.Internal 30a0a123f71f63b26cd34c6b24f23411
3d1b473d956748e8f54bfdedfb4e484c
  $fMonoidNewtypeDerivedInstances ::
    GHC.Base.Monoid
      Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances
                  Language.PureScript.Sugar.TypeClasses.Deriving.$fSemigroupNewtypeDerivedInstances
                  Language.PureScript.Sugar.TypeClasses.Deriving.$fMonoidNewtypeDerivedInstances_$cmempty
                  Language.PureScript.Sugar.TypeClasses.Deriving.$fMonoidNewtypeDerivedInstances_$c<>
                  Language.PureScript.Sugar.TypeClasses.Deriving.$fMonoidNewtypeDerivedInstances_go -}
3d1b473d956748e8f54bfdedfb4e484c
  $fMonoidNewtypeDerivedInstances_$c<> ::
    Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances
    -> Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances
    -> Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances
  {- Arity: 2, Strictness: <L,U(1*U,1*U)><L,U(1*U,1*U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances)
                   (w1 :: Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances) ->
                 Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances
                   (case w of wild { Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances ds ds1 ->
                    case w1 of wild1 { Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances ds2 ds3 ->
                    Language.PureScript.Sugar.TypeClasses.Deriving.$fMonoidNewtypeDerivedInstances_$sunion1
                      @ ([Data.Text.Internal.Text],
                         [Language.PureScript.Types.Constraint],
                         [Language.PureScript.Environment.FunctionalDependency])
                      ds
                      ds2 } })
                   (case w of wild { Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances ds ds1 ->
                    case w1 of wild1 { Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances ds2 ds3 ->
                    Language.PureScript.Sugar.TypeClasses.Deriving.$fMonoidNewtypeDerivedInstances_$sunion
                      ds1
                      ds3 } })) -}
3d1b473d956748e8f54bfdedfb4e484c
  $fMonoidNewtypeDerivedInstances_$cmempty ::
    Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances
                   (Data.Map.Internal.Tip
                      @ (Language.PureScript.Names.ModuleName,
                         Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.ClassName)
                      @ ([Data.Text.Internal.Text],
                         [Language.PureScript.Types.Constraint],
                         [Language.PureScript.Environment.FunctionalDependency]))
                   (Data.Set.Internal.Tip
                      @ ((Language.PureScript.Names.ModuleName,
                          Language.PureScript.Names.ProperName
                            'Language.PureScript.Names.ClassName),
                         (Language.PureScript.Names.ModuleName,
                          Language.PureScript.Names.ProperName
                            'Language.PureScript.Names.TypeName)))) -}
3876b5c22edecbd4ee1b4e91a58e7a8f
  $fMonoidNewtypeDerivedInstances_$sunion ::
    Data.Set.Internal.Set
      ((Language.PureScript.Names.ModuleName,
        Language.PureScript.Names.ProperName
          'Language.PureScript.Names.ClassName),
       (Language.PureScript.Names.ModuleName,
        Language.PureScript.Names.ProperName
          'Language.PureScript.Names.TypeName))
    -> Data.Set.Internal.Set
         ((Language.PureScript.Names.ModuleName,
           Language.PureScript.Names.ProperName
             'Language.PureScript.Names.ClassName),
          (Language.PureScript.Names.ModuleName,
           Language.PureScript.Names.ProperName
             'Language.PureScript.Names.TypeName))
    -> Data.Set.Internal.Set
         ((Language.PureScript.Names.ModuleName,
           Language.PureScript.Names.ProperName
             'Language.PureScript.Names.ClassName),
          (Language.PureScript.Names.ModuleName,
           Language.PureScript.Names.ProperName
             'Language.PureScript.Names.TypeName))
  {- Arity: 2, Strictness: <S,1*U><S,1*U>, Inline: [~] -}
972dddb50e88045c681f7a482a84834b
  $fMonoidNewtypeDerivedInstances_$sunion1 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.ModuleName,
       Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
      a
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ModuleName,
          Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
         a
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ModuleName,
          Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
         a
  {- Arity: 2, Strictness: <S,1*U><S,1*U>, Inline: [~] -}
3d1b473d956748e8f54bfdedfb4e484c
  $fMonoidNewtypeDerivedInstances_go ::
    [Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances]
    -> Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances
  {- Arity: 1, Strictness: <S,1*U>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: [Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances]) ->
                 case Language.PureScript.Sugar.TypeClasses.Deriving.$wgo
                        w of ww { (#,#) ww1 ww2 ->
                 Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances
                   ww1
                   ww2 }) -}
3d1b473d956748e8f54bfdedfb4e484c
  $fSemigroupNewtypeDerivedInstances ::
    GHC.Base.Semigroup
      Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances
                  Language.PureScript.Sugar.TypeClasses.Deriving.$fMonoidNewtypeDerivedInstances_$c<>
                  Language.PureScript.Sugar.TypeClasses.Deriving.$fSemigroupNewtypeDerivedInstances_$csconcat
                  Language.PureScript.Sugar.TypeClasses.Deriving.$fSemigroupNewtypeDerivedInstances_$cstimes -}
3d1b473d956748e8f54bfdedfb4e484c
  $fSemigroupNewtypeDerivedInstances_$csconcat ::
    GHC.Base.NonEmpty
      Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances
    -> Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances
  {- Arity: 1, Strictness: <S(LS),1*U(U(U,U),1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GHC.Base.NonEmpty
                            Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances) ->
                 case ds of wild { GHC.Base.:| a1 as ->
                 Language.PureScript.Sugar.TypeClasses.Deriving.$fSemigroupNewtypeDerivedInstances_go
                   a1
                   as }) -}
3d1b473d956748e8f54bfdedfb4e484c
  $fSemigroupNewtypeDerivedInstances_$cstimes ::
    GHC.Real.Integral b =>
    b
    -> Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances
    -> Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances
  {- Arity: 1, Strictness: <L,U> -}
3d1b473d956748e8f54bfdedfb4e484c
  $fSemigroupNewtypeDerivedInstances_go ::
    Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances
    -> [Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances]
    -> Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances
  {- Arity: 2, Strictness: <L,U(U,U)><S,1*U> -}
3d1b473d956748e8f54bfdedfb4e484c
  $fShowNewtypeDerivedInstances ::
    GHC.Show.Show
      Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances
                  Language.PureScript.Sugar.TypeClasses.Deriving.$fShowNewtypeDerivedInstances_$cshowsPrec
                  Language.PureScript.Sugar.TypeClasses.Deriving.$fShowNewtypeDerivedInstances_$cshow
                  Language.PureScript.Sugar.TypeClasses.Deriving.$fShowNewtypeDerivedInstances_$cshowList -}
3d1b473d956748e8f54bfdedfb4e484c
  $fShowNewtypeDerivedInstances1 ::
    Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances
    -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U)>,
     Unfolding: (\ (w :: Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances) ->
                 case w of ww { Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances ww1 ww2 ->
                 Language.PureScript.Sugar.TypeClasses.Deriving.$w$cshowsPrec
                   0#
                   ww1
                   ww2 }) -}
3a24e69156615d844dfe91eb6a6fcdc9
  $fShowNewtypeDerivedInstances2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("}"#) -}
d07cc93bf7e6a8ad2d93c96253a72b2f
  $fShowNewtypeDerivedInstances3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ndiDerivedInstances = "#) -}
c76cc99884fbbc6dffbf2889c30a0fd5
  $fShowNewtypeDerivedInstances4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ndiClasses = "#) -}
6c37c7470515aa2b839dd2ddf6bc83d8
  $fShowNewtypeDerivedInstances5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("NewtypeDerivedInstances {"#) -}
c62a64c0e1111f7ea3ea375e6e676934
  $fShowNewtypeDerivedInstances6 ::
    GHC.Show.Show
      ((Language.PureScript.Names.ModuleName,
        Language.PureScript.Names.ProperName
          'Language.PureScript.Names.ClassName),
       (Language.PureScript.Names.ModuleName,
        Language.PureScript.Names.ProperName
          'Language.PureScript.Names.TypeName))
  {- Unfolding: (GHC.Show.$fShow(,)
                   @ (Language.PureScript.Names.ModuleName,
                      Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.ClassName)
                   @ (Language.PureScript.Names.ModuleName,
                      Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.TypeName)
                   Language.PureScript.Sugar.TypeClasses.Deriving.$fShowNewtypeDerivedInstances_$s$fShow(,)1
                   Language.PureScript.Sugar.TypeClasses.Deriving.$fShowNewtypeDerivedInstances_$s$fShow(,)) -}
19f9b1ff7a756679e11768f7e81bd655
  $fShowNewtypeDerivedInstances7 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
3d1b473d956748e8f54bfdedfb4e484c
  $fShowNewtypeDerivedInstances_$cshow ::
    Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances) ->
                 Language.PureScript.Sugar.TypeClasses.Deriving.$fShowNewtypeDerivedInstances_$cshowsPrec
                   Language.PureScript.Sugar.TypeClasses.Deriving.$fShowNewtypeDerivedInstances7
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
3d1b473d956748e8f54bfdedfb4e484c
  $fShowNewtypeDerivedInstances_$cshowList ::
    [Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances
                   Language.PureScript.Sugar.TypeClasses.Deriving.$fShowNewtypeDerivedInstances1
                   ls
                   s) -}
3d1b473d956748e8f54bfdedfb4e484c
  $fShowNewtypeDerivedInstances_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances ww3 ww4 ->
                 Language.PureScript.Sugar.TypeClasses.Deriving.$w$cshowsPrec
                   ww1
                   ww3
                   ww4 } }) -}
784731bded52a015a17f041d98462551
  $fShowNewtypeDerivedInstances_$s$fShow(,) ::
    GHC.Show.Show
      (Language.PureScript.Names.ModuleName,
       Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.ModuleName,
                     Language.PureScript.Names.ProperName
                       'Language.PureScript.Names.TypeName)
                  (GHC.Show.$fShow(,)_$cshowsPrec
                     @ Language.PureScript.Names.ModuleName
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.TypeName)
                     Language.PureScript.Names.$fShowModuleName
                     (Language.PureScript.Names.$fShowProperName
                        @ 'Language.PureScript.Names.TypeName))
                  (\ (x :: (Language.PureScript.Names.ModuleName,
                            Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.TypeName)) ->
                   GHC.Show.$fShow(,)_$cshowsPrec
                     @ Language.PureScript.Names.ModuleName
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.TypeName)
                     Language.PureScript.Names.$fShowModuleName
                     (Language.PureScript.Names.$fShowProperName
                        @ 'Language.PureScript.Names.TypeName)
                     GHC.Show.$fShow(,)1
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [(Language.PureScript.Names.ModuleName,
                              Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.TypeName)])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Language.PureScript.Names.ModuleName,
                        Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.TypeName)
                     (GHC.Show.$fShow(,)_$cshowsPrec
                        @ Language.PureScript.Names.ModuleName
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.TypeName)
                        Language.PureScript.Names.$fShowModuleName
                        (Language.PureScript.Names.$fShowProperName
                           @ 'Language.PureScript.Names.TypeName)
                        GHC.Show.$fShow(,)1)
                     ls
                     s) -}
ddb791b65c846a68983ca0ae34115857
  $fShowNewtypeDerivedInstances_$s$fShow(,)1 ::
    GHC.Show.Show
      (Language.PureScript.Names.ModuleName,
       Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.ModuleName,
                     Language.PureScript.Names.ProperName
                       'Language.PureScript.Names.ClassName)
                  (GHC.Show.$fShow(,)_$cshowsPrec
                     @ Language.PureScript.Names.ModuleName
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ClassName)
                     Language.PureScript.Names.$fShowModuleName
                     (Language.PureScript.Names.$fShowProperName
                        @ 'Language.PureScript.Names.ClassName))
                  (\ (x :: (Language.PureScript.Names.ModuleName,
                            Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ClassName)) ->
                   GHC.Show.$fShow(,)_$cshowsPrec
                     @ Language.PureScript.Names.ModuleName
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ClassName)
                     Language.PureScript.Names.$fShowModuleName
                     (Language.PureScript.Names.$fShowProperName
                        @ 'Language.PureScript.Names.ClassName)
                     GHC.Show.$fShow(,)1
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [(Language.PureScript.Names.ModuleName,
                              Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ClassName)])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Language.PureScript.Names.ModuleName,
                        Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ClassName)
                     (GHC.Show.$fShow(,)_$cshowsPrec
                        @ Language.PureScript.Names.ModuleName
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ClassName)
                        Language.PureScript.Names.$fShowModuleName
                        (Language.PureScript.Names.$fShowProperName
                           @ 'Language.PureScript.Names.ClassName)
                        GHC.Show.$fShow(,)1)
                     ls
                     s) -}
d9e0176386b9b7c629478434af9faf5c
  $fShowNewtypeDerivedInstances_$s$fShow(,,) ::
    GHC.Show.Show
      ([Data.Text.Internal.Text], [Language.PureScript.Types.Constraint],
       [Language.PureScript.Environment.FunctionalDependency])
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ ([Data.Text.Internal.Text],
                     [Language.PureScript.Types.Constraint],
                     [Language.PureScript.Environment.FunctionalDependency])
                  (GHC.Show.$fShow(,,)_$cshowsPrec
                     @ [Data.Text.Internal.Text]
                     @ [Language.PureScript.Types.Constraint]
                     @ [Language.PureScript.Environment.FunctionalDependency]
                     Language.PureScript.Sugar.TypeClasses.Deriving.$fShowNewtypeDerivedInstances_$s$fShow[]2
                     Language.PureScript.Sugar.TypeClasses.Deriving.$fShowNewtypeDerivedInstances_$s$fShow[]1
                     Language.PureScript.Sugar.TypeClasses.Deriving.$fShowNewtypeDerivedInstances_$s$fShow[])
                  (\ (x :: ([Data.Text.Internal.Text],
                            [Language.PureScript.Types.Constraint],
                            [Language.PureScript.Environment.FunctionalDependency])) ->
                   GHC.Show.$fShow(,,)_$cshowsPrec
                     @ [Data.Text.Internal.Text]
                     @ [Language.PureScript.Types.Constraint]
                     @ [Language.PureScript.Environment.FunctionalDependency]
                     Language.PureScript.Sugar.TypeClasses.Deriving.$fShowNewtypeDerivedInstances_$s$fShow[]2
                     Language.PureScript.Sugar.TypeClasses.Deriving.$fShowNewtypeDerivedInstances_$s$fShow[]1
                     Language.PureScript.Sugar.TypeClasses.Deriving.$fShowNewtypeDerivedInstances_$s$fShow[]
                     GHC.Show.$fShow(,)1
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [([Data.Text.Internal.Text],
                              [Language.PureScript.Types.Constraint],
                              [Language.PureScript.Environment.FunctionalDependency])])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ ([Data.Text.Internal.Text],
                        [Language.PureScript.Types.Constraint],
                        [Language.PureScript.Environment.FunctionalDependency])
                     (GHC.Show.$fShow(,,)_$cshowsPrec
                        @ [Data.Text.Internal.Text]
                        @ [Language.PureScript.Types.Constraint]
                        @ [Language.PureScript.Environment.FunctionalDependency]
                        Language.PureScript.Sugar.TypeClasses.Deriving.$fShowNewtypeDerivedInstances_$s$fShow[]2
                        Language.PureScript.Sugar.TypeClasses.Deriving.$fShowNewtypeDerivedInstances_$s$fShow[]1
                        Language.PureScript.Sugar.TypeClasses.Deriving.$fShowNewtypeDerivedInstances_$s$fShow[]
                        GHC.Show.$fShow(,)1)
                     ls
                     s) -}
24a0b0a826c424c133086bb9969969a9
  $fShowNewtypeDerivedInstances_$s$fShow[] ::
    GHC.Show.Show
      [Language.PureScript.Environment.FunctionalDependency]
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ [Language.PureScript.Environment.FunctionalDependency]
                  (\ (ds :: GHC.Types.Int) ->
                   Language.PureScript.Environment.$fShowFunctionalDependency_$cshowList)
                  (\ (x :: [Language.PureScript.Environment.FunctionalDependency]) ->
                   GHC.Show.showList__
                     @ Language.PureScript.Environment.FunctionalDependency
                     Language.PureScript.Environment.$fShowFunctionalDependency1
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [[Language.PureScript.Environment.FunctionalDependency]])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ [Language.PureScript.Environment.FunctionalDependency]
                     Language.PureScript.Environment.$fShowFunctionalDependency_$cshowList
                     ls
                     s) -}
0493d6dbec98c70a56d86d8675a9d30e
  $fShowNewtypeDerivedInstances_$s$fShow[]1 ::
    GHC.Show.Show [Language.PureScript.Types.Constraint]
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ [Language.PureScript.Types.Constraint]
                  (\ (ds :: GHC.Types.Int) ->
                   Language.PureScript.Types.$fShowConstraint_$cshowList)
                  (\ (x :: [Language.PureScript.Types.Constraint]) ->
                   GHC.Show.showList__
                     @ Language.PureScript.Types.Constraint
                     Language.PureScript.Types.$fShowConstraint1
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [[Language.PureScript.Types.Constraint]])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ [Language.PureScript.Types.Constraint]
                     Language.PureScript.Types.$fShowConstraint_$cshowList
                     ls
                     s) -}
01b9e284218ff5ae253563a6e2294592
  $fShowNewtypeDerivedInstances_$s$fShow[]2 ::
    GHC.Show.Show [Data.Text.Internal.Text]
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ [Data.Text.Internal.Text]
                  (\ (ds :: GHC.Types.Int) -> Data.Text.Show.$fShowText_$cshowList)
                  (\ (x :: [Data.Text.Internal.Text]) ->
                   GHC.Show.showList__
                     @ Data.Text.Internal.Text
                     Data.Text.Show.$fShowText1
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [[Data.Text.Internal.Text]]) (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ [Data.Text.Internal.Text]
                     Data.Text.Show.$fShowText_$cshowList
                     ls
                     s) -}
51d4228351386c74791702249119310c
  $s$fEqQualified ::
    GHC.Classes.Eq
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName))
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.Qualified
                       (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.TypeName))
                  (Language.PureScript.Names.$fEqQualified_$c==
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.TypeName)
                     (Language.PureScript.Names.$fEqProperName
                        @ 'Language.PureScript.Names.TypeName))
                  Language.PureScript.Sugar.TypeClasses.Deriving.$s$fEqQualified_$s$fEqQualified_$c/= -}
bf025dbf3757d66786cb757abb64ee9a
  $s$fEqQualified_$s$fEqQualified_$c/= ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName)
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName)
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U(U,U,U))><S(SL),1*U(1*U,1*U(U,U,U))>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.TypeName))
                   (y :: Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.TypeName)) ->
                 case Language.PureScript.Names.$fEqQualified_$c==
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.TypeName)
                        (Language.PureScript.Names.$fEqProperName
                           @ 'Language.PureScript.Names.TypeName)
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
4d5ba0f59acb894e28797a85c62bc69c
  $s$fOrdQualified ::
    GHC.Classes.Ord
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName))
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.Qualified
                       (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.TypeName))
                  Language.PureScript.Sugar.TypeClasses.Deriving.$s$fEqQualified
                  (Language.PureScript.Names.$fOrdQualified_$ccompare
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.TypeName)
                     (Language.PureScript.Names.$fOrdProperName
                        @ 'Language.PureScript.Names.TypeName))
                  (Language.PureScript.Names.$fOrdQualified_$c<
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.TypeName)
                     (Language.PureScript.Names.$fOrdProperName
                        @ 'Language.PureScript.Names.TypeName))
                  (\ (a1 :: Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.TypeName))
                     (b :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.TypeName)) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.TypeName)
                          (Language.PureScript.Names.$fOrdProperName
                             @ 'Language.PureScript.Names.TypeName)
                          b
                          a1 of wild {
                     GHC.Types.False -> GHC.Types.True
                     GHC.Types.True -> GHC.Types.False })
                  (\ (a1 :: Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.TypeName))
                     (b :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.TypeName)) ->
                   Language.PureScript.Names.$fOrdQualified_$c<
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.TypeName)
                     (Language.PureScript.Names.$fOrdProperName
                        @ 'Language.PureScript.Names.TypeName)
                     b
                     a1)
                  (\ (a1 :: Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.TypeName))
                     (b :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.TypeName)) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.TypeName)
                          (Language.PureScript.Names.$fOrdProperName
                             @ 'Language.PureScript.Names.TypeName)
                          a1
                          b of wild {
                     GHC.Types.False -> GHC.Types.True
                     GHC.Types.True -> GHC.Types.False })
                  (\ (x :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.TypeName))
                     (y :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.TypeName)) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.TypeName)
                          (Language.PureScript.Names.$fOrdProperName
                             @ 'Language.PureScript.Names.TypeName)
                          y
                          x of wild {
                     GHC.Types.False -> y GHC.Types.True -> x })
                  (\ (x :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.TypeName))
                     (y :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.TypeName)) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.TypeName)
                          (Language.PureScript.Names.$fOrdProperName
                             @ 'Language.PureScript.Names.TypeName)
                          y
                          x of wild {
                     GHC.Types.False -> x GHC.Types.True -> y }) -}
74ebba5e74a193e30c2552d7b0da8a0a
  $s$wsplitS ::
    ((Language.PureScript.Names.ModuleName,
      Language.PureScript.Names.ProperName
        'Language.PureScript.Names.ClassName),
     (Language.PureScript.Names.ModuleName,
      Language.PureScript.Names.ProperName
        'Language.PureScript.Names.TypeName))
    -> Data.Set.Internal.Set
         ((Language.PureScript.Names.ModuleName,
           Language.PureScript.Names.ProperName
             'Language.PureScript.Names.ClassName),
          (Language.PureScript.Names.ModuleName,
           Language.PureScript.Names.ProperName
             'Language.PureScript.Names.TypeName))
    -> (# Data.Set.Internal.Set
            ((Language.PureScript.Names.ModuleName,
              Language.PureScript.Names.ProperName
                'Language.PureScript.Names.ClassName),
             (Language.PureScript.Names.ModuleName,
              Language.PureScript.Names.ProperName
                'Language.PureScript.Names.TypeName)),
          Data.Set.Internal.Set
            ((Language.PureScript.Names.ModuleName,
              Language.PureScript.Names.ProperName
                'Language.PureScript.Names.ClassName),
             (Language.PureScript.Names.ModuleName,
              Language.PureScript.Names.ProperName
                'Language.PureScript.Names.TypeName)) #)
  {- Arity: 2,
     Strictness: <L,1*U(U(U,U(U,U,U)),U(U,U(U,U,U)))><S,1*U>,
     Inline: [~] -}
e9c49874a2e388f5aefd4b235d578845
  $s$wsplit_$s$wpoly_go13 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.ModuleName,
       Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
      a
    -> Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> (# Data.Map.Internal.Map
            (Language.PureScript.Names.ModuleName,
             Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName)
            a,
          Data.Map.Internal.Map
            (Language.PureScript.Names.ModuleName,
             Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName)
            a #)
  {- Arity: 3, Strictness: <S,1*U><L,U><L,U(U,U,U)> -}
3ed3d7a5679a0e84ff1c011569869bf8
  $sfromList ::
    [(Language.PureScript.Names.Qualified
        (Language.PureScript.Names.ProperName
           'Language.PureScript.Names.TypeName),
      a)]
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.TypeName))
         a
  {- Arity: 1, Strictness: <S,1*U> -}
8cf888c9f4286d0c111f503bba64f73d
  $sinsertR_$s$w$sgo3 ::
    Data.Set.Internal.Set
      ((Language.PureScript.Names.ModuleName,
        Language.PureScript.Names.ProperName
          'Language.PureScript.Names.ClassName),
       (Language.PureScript.Names.ModuleName,
        Language.PureScript.Names.ProperName
          'Language.PureScript.Names.TypeName))
    -> (Language.PureScript.Names.ModuleName,
        Language.PureScript.Names.ProperName
          'Language.PureScript.Names.TypeName)
    -> Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> ((Language.PureScript.Names.ModuleName,
         Language.PureScript.Names.ProperName
           'Language.PureScript.Names.ClassName),
        (Language.PureScript.Names.ModuleName,
         Language.PureScript.Names.ProperName
           'Language.PureScript.Names.TypeName))
    -> Data.Set.Internal.Set
         ((Language.PureScript.Names.ModuleName,
           Language.PureScript.Names.ProperName
             'Language.PureScript.Names.ClassName),
          (Language.PureScript.Names.ModuleName,
           Language.PureScript.Names.ProperName
             'Language.PureScript.Names.TypeName))
  {- Arity: 5,
     Strictness: <S,1*U><L,U(U,U(U,U,U))><L,U><L,U(U,U,U)><L,U> -}
393cc665b1701c34a82ef07659d9f37a
  $sinsert_$s$w$sgo1 ::
    Data.Set.Internal.Set
      ((Language.PureScript.Names.ModuleName,
        Language.PureScript.Names.ProperName
          'Language.PureScript.Names.ClassName),
       (Language.PureScript.Names.ModuleName,
        Language.PureScript.Names.ProperName
          'Language.PureScript.Names.TypeName))
    -> (Language.PureScript.Names.ModuleName,
        Language.PureScript.Names.ProperName
          'Language.PureScript.Names.TypeName)
    -> Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> ((Language.PureScript.Names.ModuleName,
         Language.PureScript.Names.ProperName
           'Language.PureScript.Names.ClassName),
        (Language.PureScript.Names.ModuleName,
         Language.PureScript.Names.ProperName
           'Language.PureScript.Names.TypeName))
    -> Data.Set.Internal.Set
         ((Language.PureScript.Names.ModuleName,
           Language.PureScript.Names.ProperName
             'Language.PureScript.Names.ClassName),
          (Language.PureScript.Names.ModuleName,
           Language.PureScript.Names.ProperName
             'Language.PureScript.Names.TypeName))
  {- Arity: 5,
     Strictness: <S,1*U><L,U(U,U(U,U,U))><L,U><L,U(U,U,U)><L,U> -}
01840db8d9b1ac9cbfcff2a23f94e219
  $sinsert_$s$w$sgo13 ::
    GHC.Prim.Int#
    -> Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> a
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ModuleName,
          Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
         a
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ModuleName,
          Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
         a
    -> a
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> Language.PureScript.Names.ModuleName
    -> (Language.PureScript.Names.ModuleName,
        Language.PureScript.Names.ProperName
          'Language.PureScript.Names.ClassName)
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ModuleName,
          Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
         a
  {- Arity: 10,
     Strictness: <L,U><S,U><L,U(U,U,U)><L,U><L,U><L,U><L,U><L,U(U,U,U)><S,U><L,U> -}
c7ef4e3a4a3dfc3339824145090a43b7
  $sinsert_$s$w$sgo3 ::
    GHC.Prim.Int#
    -> (Language.PureScript.Names.ModuleName,
        Language.PureScript.Names.ProperName
          'Language.PureScript.Names.ClassName)
    -> (Language.PureScript.Names.ModuleName,
        Language.PureScript.Names.ProperName
          'Language.PureScript.Names.TypeName)
    -> Data.Set.Internal.Set
         ((Language.PureScript.Names.ModuleName,
           Language.PureScript.Names.ProperName
             'Language.PureScript.Names.ClassName),
          (Language.PureScript.Names.ModuleName,
           Language.PureScript.Names.ProperName
             'Language.PureScript.Names.TypeName))
    -> Data.Set.Internal.Set
         ((Language.PureScript.Names.ModuleName,
           Language.PureScript.Names.ProperName
             'Language.PureScript.Names.ClassName),
          (Language.PureScript.Names.ModuleName,
           Language.PureScript.Names.ProperName
             'Language.PureScript.Names.TypeName))
    -> (Language.PureScript.Names.ModuleName,
        Language.PureScript.Names.ProperName
          'Language.PureScript.Names.TypeName)
    -> (Language.PureScript.Names.ModuleName,
        Language.PureScript.Names.ProperName
          'Language.PureScript.Names.ClassName)
    -> ((Language.PureScript.Names.ModuleName,
         Language.PureScript.Names.ProperName
           'Language.PureScript.Names.ClassName),
        (Language.PureScript.Names.ModuleName,
         Language.PureScript.Names.ProperName
           'Language.PureScript.Names.TypeName))
    -> Data.Set.Internal.Set
         ((Language.PureScript.Names.ModuleName,
           Language.PureScript.Names.ProperName
             'Language.PureScript.Names.ClassName),
          (Language.PureScript.Names.ModuleName,
           Language.PureScript.Names.ProperName
             'Language.PureScript.Names.TypeName))
  {- Arity: 8,
     Strictness: <L,U><S(SL),1*U(U,U(U,U,U))><L,U(U,U(U,U,U))><L,U><L,U><L,U(U,U(U,U,U))><S(SL),1*U(U,U(U,U,U))><L,U>,
     Unfolding: (\ (sc :: GHC.Prim.Int#)
                   (sc1 :: (Language.PureScript.Names.ModuleName,
                            Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ClassName))
                   (sc2 :: (Language.PureScript.Names.ModuleName,
                            Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.TypeName))
                   (sc3 :: Data.Set.Internal.Set
                             ((Language.PureScript.Names.ModuleName,
                               Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.ClassName),
                              (Language.PureScript.Names.ModuleName,
                               Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.TypeName)))
                   (sc4 :: Data.Set.Internal.Set
                             ((Language.PureScript.Names.ModuleName,
                               Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.ClassName),
                              (Language.PureScript.Names.ModuleName,
                               Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.TypeName)))
                   (sc5 :: (Language.PureScript.Names.ModuleName,
                            Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.TypeName))
                   (sc6 :: (Language.PureScript.Names.ModuleName,
                            Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ClassName))
                   (sc7 :: ((Language.PureScript.Names.ModuleName,
                             Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.ClassName),
                            (Language.PureScript.Names.ModuleName,
                             Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.TypeName))) ->
                 case sc6 of ww { (,) ww1 ww2 ->
                 case sc1 of ww3 { (,) ww4 ww5 ->
                 let {
                   $j :: Data.Set.Internal.Set
                           ((Language.PureScript.Names.ModuleName,
                             Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.ClassName),
                            (Language.PureScript.Names.ModuleName,
                             Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.TypeName))
                     <join 0>
                   = case Language.PureScript.Sugar.TypeClasses.Deriving.$sinsert_$s$w$sgo1
                            sc3
                            sc5
                            ww1
                            ww2
                            sc7 of l' { DEFAULT ->
                     case GHC.Prim.reallyUnsafePtrEquality#
                            @ (Data.Set.Internal.Set
                                 ((Language.PureScript.Names.ModuleName,
                                   Language.PureScript.Names.ProperName
                                     'Language.PureScript.Names.ClassName),
                                  (Language.PureScript.Names.ModuleName,
                                   Language.PureScript.Names.ProperName
                                     'Language.PureScript.Names.TypeName)))
                            l'
                            sc3 of wild2 {
                       DEFAULT
                       -> Data.Set.Internal.balanceL
                            @ ((Language.PureScript.Names.ModuleName,
                                Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.ClassName),
                               (Language.PureScript.Names.ModuleName,
                                Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.TypeName))
                            (ww3, sc2)
                            l'
                            sc4
                       1#
                       -> Data.Set.Internal.Bin
                            @ ((Language.PureScript.Names.ModuleName,
                                Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.ClassName),
                               (Language.PureScript.Names.ModuleName,
                                Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.TypeName))
                            sc
                            (ww3, sc2)
                            sc3
                            sc4 } }
                 } in
                 let {
                   $j1 :: Data.Set.Internal.Set
                            ((Language.PureScript.Names.ModuleName,
                              Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ClassName),
                             (Language.PureScript.Names.ModuleName,
                              Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.TypeName))
                     <join 0>
                   = case Language.PureScript.Sugar.TypeClasses.Deriving.$sinsert_$s$w$sgo1
                            sc4
                            sc5
                            ww1
                            ww2
                            sc7 of r' { DEFAULT ->
                     case GHC.Prim.reallyUnsafePtrEquality#
                            @ (Data.Set.Internal.Set
                                 ((Language.PureScript.Names.ModuleName,
                                   Language.PureScript.Names.ProperName
                                     'Language.PureScript.Names.ClassName),
                                  (Language.PureScript.Names.ModuleName,
                                   Language.PureScript.Names.ProperName
                                     'Language.PureScript.Names.TypeName)))
                            r'
                            sc4 of wild2 {
                       DEFAULT
                       -> Data.Set.Internal.balanceR
                            @ ((Language.PureScript.Names.ModuleName,
                                Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.ClassName),
                               (Language.PureScript.Names.ModuleName,
                                Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.TypeName))
                            (ww3, sc2)
                            sc3
                            r'
                       1#
                       -> Data.Set.Internal.Bin
                            @ ((Language.PureScript.Names.ModuleName,
                                Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.ClassName),
                               (Language.PureScript.Names.ModuleName,
                                Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.TypeName))
                            sc
                            (ww3, sc2)
                            sc3
                            sc4 } }
                 } in
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.Namespace)
                        (Language.PureScript.Names.$fOrdProperName
                           @ 'Language.PureScript.Names.Namespace)
                        ww1 `cast` (Language.PureScript.Names.N:ModuleName[0])
                        ww4 `cast` (Language.PureScript.Names.N:ModuleName[0]) of wild {
                   GHC.Types.LT -> $j
                   GHC.Types.EQ
                   -> case ww2
                             `cast`
                           (Language.PureScript.Names.N:ProperName[0]
                                <'Language.PureScript.Names.ClassName>_P) of ww7 { Data.Text.Internal.Text ww8 ww9 ww10 ->
                      case ww5
                             `cast`
                           (Language.PureScript.Names.N:ProperName[0]
                                <'Language.PureScript.Names.ClassName>_P) of ww11 { Data.Text.Internal.Text ww12 ww6 ww13 ->
                      case Data.Text.$w$ccompare ww8 ww9 ww10 ww12 ww6 ww13 of wild1 {
                        GHC.Types.LT -> $j
                        GHC.Types.EQ
                        -> case sc5 of ww14 { (,) ww15 ww16 ->
                           case sc2 of ww17 { (,) ww18 ww19 ->
                           case GHC.Classes.$fOrd[]_$ccompare
                                  @ (Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.Namespace)
                                  (Language.PureScript.Names.$fOrdProperName
                                     @ 'Language.PureScript.Names.Namespace)
                                  ww15 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                  ww18 `cast` (Language.PureScript.Names.N:ModuleName[0]) of wild2 {
                             GHC.Types.LT -> $j
                             GHC.Types.EQ
                             -> case ww16
                                       `cast`
                                     (Language.PureScript.Names.N:ProperName[0]
                                          <'Language.PureScript.Names.TypeName>_P) of ww20 { Data.Text.Internal.Text ww21 ww22 ww23 ->
                                case ww19
                                       `cast`
                                     (Language.PureScript.Names.N:ProperName[0]
                                          <'Language.PureScript.Names.TypeName>_P) of ww24 { Data.Text.Internal.Text ww25 ww26 ww27 ->
                                case Data.Text.$w$ccompare ww21 ww22 ww23 ww25 ww26 ww27 of wild3 {
                                  GHC.Types.LT -> $j
                                  GHC.Types.EQ
                                  -> case GHC.Magic.lazy
                                            @ ((Language.PureScript.Names.ModuleName,
                                                Language.PureScript.Names.ProperName
                                                  'Language.PureScript.Names.ClassName),
                                               (Language.PureScript.Names.ModuleName,
                                                Language.PureScript.Names.ProperName
                                                  'Language.PureScript.Names.TypeName))
                                            sc7 of wild4 { (,) ipv ipv1 ->
                                     case GHC.Prim.reallyUnsafePtrEquality#
                                            @ ((Language.PureScript.Names.ModuleName,
                                                Language.PureScript.Names.ProperName
                                                  'Language.PureScript.Names.ClassName),
                                               (Language.PureScript.Names.ModuleName,
                                                Language.PureScript.Names.ProperName
                                                  'Language.PureScript.Names.TypeName))
                                            sc7
                                            (ww3, ww17) of wild5 {
                                       DEFAULT
                                       -> Data.Set.Internal.Bin
                                            @ ((Language.PureScript.Names.ModuleName,
                                                Language.PureScript.Names.ProperName
                                                  'Language.PureScript.Names.ClassName),
                                               (Language.PureScript.Names.ModuleName,
                                                Language.PureScript.Names.ProperName
                                                  'Language.PureScript.Names.TypeName))
                                            sc
                                            wild4
                                            sc3
                                            sc4
                                       1#
                                       -> Data.Set.Internal.Bin
                                            @ ((Language.PureScript.Names.ModuleName,
                                                Language.PureScript.Names.ProperName
                                                  'Language.PureScript.Names.ClassName),
                                               (Language.PureScript.Names.ModuleName,
                                                Language.PureScript.Names.ProperName
                                                  'Language.PureScript.Names.TypeName))
                                            sc
                                            (ww3, ww17)
                                            sc3
                                            sc4 } }
                                  GHC.Types.GT -> $j1 } } }
                             GHC.Types.GT -> $j1 } } }
                        GHC.Types.GT -> $j1 } } }
                   GHC.Types.GT -> $j1 } } }) -}
f9b6d69d2459399c68da8531cebbb979
  $slookup_$s$wpoly_go13 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.ModuleName,
       Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
      a
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> ((Data.Text.Internal.Text :: *)
        ~R# (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName :: *)) =>
       Language.PureScript.Names.ModuleName -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S,1*U><L,U><L,U><L,U><L,U><L,U> -}
df2aab9ae8d175fc814aa11f5aa468d0
  $smember_$s$wgo1 ::
    Data.Set.Internal.Set
      ((Language.PureScript.Names.ModuleName,
        Language.PureScript.Names.ProperName
          'Language.PureScript.Names.ClassName),
       (Language.PureScript.Names.ModuleName,
        Language.PureScript.Names.ProperName
          'Language.PureScript.Names.TypeName))
    -> Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName
    -> Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> GHC.Types.Bool
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S,1*U><L,U><L,1*U(U,U,U)><L,U><L,1*U(U,U,U)> -}
46bb2e83df5794ffa6ecc80857e6a336
  $smember_$s$wgo3 ::
    Data.Set.Internal.Set
      ((Language.PureScript.Names.ModuleName,
        Language.PureScript.Names.ProperName
          'Language.PureScript.Names.ClassName),
       (Language.PureScript.Names.ModuleName,
        Language.PureScript.Names.ProperName
          'Language.PureScript.Names.TypeName))
    -> (Language.PureScript.Names.ModuleName,
        Language.PureScript.Names.ProperName
          'Language.PureScript.Names.TypeName)
    -> Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U(U,1*U(U,U,U))><L,U><L,1*U(U,U,U)> -}
8364bdc3e984d0ce13f983e0d3bb0d76
  $tc'NewtypeDerivedInstances :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13629718362524052367##
                   13797238968755652565##
                   Language.PureScript.Sugar.TypeClasses.Deriving.$trModule
                   Language.PureScript.Sugar.TypeClasses.Deriving.$tc'NewtypeDerivedInstances2
                   0#
                   Language.PureScript.Sugar.TypeClasses.Deriving.$tc'NewtypeDerivedInstances1) -}
8148ad19822ba90f86d3fffda12b1ca4
  $tc'NewtypeDerivedInstances1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
df4cb1da3f2d91e8aadeb8f4cf574201
  $tc'NewtypeDerivedInstances2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Sugar.TypeClasses.Deriving.$tc'NewtypeDerivedInstances3) -}
848f006cc0f02f291c83f06d40eb27e8
  $tc'NewtypeDerivedInstances3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'NewtypeDerivedInstances"#) -}
b9d77d75c9d34d63a9ac06846b9cd614
  $tcNewtypeDerivedInstances :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3025365180780623487##
                   348555406433340752##
                   Language.PureScript.Sugar.TypeClasses.Deriving.$trModule
                   Language.PureScript.Sugar.TypeClasses.Deriving.$tcNewtypeDerivedInstances1
                   0#
                   GHC.Types.krep$*) -}
a4ce87f47747bc2b7a3fdc56500ebc36
  $tcNewtypeDerivedInstances1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Sugar.TypeClasses.Deriving.$tcNewtypeDerivedInstances2) -}
6cc5387f77e526a3b97dd5d85ed59f0c
  $tcNewtypeDerivedInstances2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("NewtypeDerivedInstances"#) -}
9575fde0bdfda4132e6b635bab2014d7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Language.PureScript.Sugar.TypeClasses.Deriving.$trModule3
                   Language.PureScript.Sugar.TypeClasses.Deriving.$trModule1) -}
c313fb63bb3fb884636509348f3f8a1e
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Sugar.TypeClasses.Deriving.$trModule2) -}
1b77e3c9914b95dfb5803a310a3b749c
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Language.PureScript.Sugar.TypeClasses.Deriving"#) -}
bc9816cb9cf509261c0f22ccb07e7e40
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Sugar.TypeClasses.Deriving.$trModule4) -}
7cdf7b156131d1f6e80be6ecee5c2930
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"#) -}
85f55d7a54e5dede41f9f11ebeb17470
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ModuleName,
          Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
         ([Data.Text.Internal.Text], [Language.PureScript.Types.Constraint],
          [Language.PureScript.Environment.FunctionalDependency])
    -> Data.Set.Internal.Set
         ((Language.PureScript.Names.ModuleName,
           Language.PureScript.Names.ProperName
             'Language.PureScript.Names.ClassName),
          (Language.PureScript.Names.ModuleName,
           Language.PureScript.Names.ProperName
             'Language.PureScript.Names.TypeName))
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,U><L,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Data.Map.Internal.Map
                             (Language.PureScript.Names.ModuleName,
                              Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ClassName)
                             ([Data.Text.Internal.Text], [Language.PureScript.Types.Constraint],
                              [Language.PureScript.Environment.FunctionalDependency]))
                   (ww2 :: Data.Set.Internal.Set
                             ((Language.PureScript.Names.ModuleName,
                               Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.ClassName),
                              (Language.PureScript.Names.ModuleName,
                               Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.TypeName))) ->
                 let {
                   f5 :: GHC.Base.String -> GHC.Base.String
                   = Data.Map.Internal.$w$cshowsPrec
                       @ (Language.PureScript.Names.ModuleName,
                          Language.PureScript.Names.ProperName
                            'Language.PureScript.Names.ClassName)
                       @ ([Data.Text.Internal.Text],
                          [Language.PureScript.Types.Constraint],
                          [Language.PureScript.Environment.FunctionalDependency])
                       Language.PureScript.Sugar.TypeClasses.Deriving.$fShowNewtypeDerivedInstances_$s$fShow(,)1
                       Language.PureScript.Sugar.TypeClasses.Deriving.$fShowNewtypeDerivedInstances_$s$fShow(,,)
                       0#
                       ww1
                 } in
                 let {
                   f6 :: GHC.Base.String -> GHC.Base.String
                   = Data.Set.Internal.$w$cshowsPrec
                       @ ((Language.PureScript.Names.ModuleName,
                           Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ClassName),
                          (Language.PureScript.Names.ModuleName,
                           Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.TypeName))
                       Language.PureScript.Sugar.TypeClasses.Deriving.$fShowNewtypeDerivedInstances6
                       0#
                       ww2
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> \ (x :: GHC.Base.String) ->
                      GHC.CString.unpackAppendCString#
                        Language.PureScript.Sugar.TypeClasses.Deriving.$fShowNewtypeDerivedInstances5
                        (GHC.CString.unpackAppendCString#
                           Language.PureScript.Sugar.TypeClasses.Deriving.$fShowNewtypeDerivedInstances4
                           (f5
                              (GHC.Base.++
                                 @ GHC.Types.Char
                                 GHC.Show.showCommaSpace1
                                 (GHC.CString.unpackAppendCString#
                                    Language.PureScript.Sugar.TypeClasses.Deriving.$fShowNewtypeDerivedInstances3
                                    (f6
                                       (GHC.CString.unpackAppendCString#
                                          Language.PureScript.Sugar.TypeClasses.Deriving.$fShowNewtypeDerivedInstances2
                                          x))))))
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.CString.unpackAppendCString#
                           Language.PureScript.Sugar.TypeClasses.Deriving.$fShowNewtypeDerivedInstances5
                           (GHC.CString.unpackAppendCString#
                              Language.PureScript.Sugar.TypeClasses.Deriving.$fShowNewtypeDerivedInstances4
                              (f5
                                 (GHC.Base.++
                                    @ GHC.Types.Char
                                    GHC.Show.showCommaSpace1
                                    (GHC.CString.unpackAppendCString#
                                       Language.PureScript.Sugar.TypeClasses.Deriving.$fShowNewtypeDerivedInstances3
                                       (f6
                                          (GHC.CString.unpackAppendCString#
                                             Language.PureScript.Sugar.TypeClasses.Deriving.$fShowNewtypeDerivedInstances2
                                             (GHC.Types.:
                                                @ GHC.Types.Char
                                                GHC.Show.$fShow(,)2
                                                x)))))))) }) -}
3b951eca83cfbab255a37b1c94b867f7
  $w$sgo1 ::
    ((Language.PureScript.Names.ModuleName,
      Language.PureScript.Names.ProperName
        'Language.PureScript.Names.ClassName),
     (Language.PureScript.Names.ModuleName,
      Language.PureScript.Names.ProperName
        'Language.PureScript.Names.TypeName))
    -> (Language.PureScript.Names.ModuleName,
        Language.PureScript.Names.ProperName
          'Language.PureScript.Names.ClassName)
    -> (Language.PureScript.Names.ModuleName,
        Language.PureScript.Names.ProperName
          'Language.PureScript.Names.TypeName)
    -> Data.Set.Internal.Set
         ((Language.PureScript.Names.ModuleName,
           Language.PureScript.Names.ProperName
             'Language.PureScript.Names.ClassName),
          (Language.PureScript.Names.ModuleName,
           Language.PureScript.Names.ProperName
             'Language.PureScript.Names.TypeName))
    -> Data.Set.Internal.Set
         ((Language.PureScript.Names.ModuleName,
           Language.PureScript.Names.ProperName
             'Language.PureScript.Names.ClassName),
          (Language.PureScript.Names.ModuleName,
           Language.PureScript.Names.ProperName
             'Language.PureScript.Names.TypeName))
  {- Arity: 4,
     Strictness: <L,U><L,1*U(U,U(U,U,U))><L,U(U,U(U,U,U))><S,1*U>,
     Inline: [0],
     Unfolding: (\ (w :: ((Language.PureScript.Names.ModuleName,
                           Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ClassName),
                          (Language.PureScript.Names.ModuleName,
                           Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.TypeName)))
                   (ww :: (Language.PureScript.Names.ModuleName,
                           Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ClassName))
                   (ww1 :: (Language.PureScript.Names.ModuleName,
                            Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.TypeName))
                   (w1 :: Data.Set.Internal.Set
                            ((Language.PureScript.Names.ModuleName,
                              Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ClassName),
                             (Language.PureScript.Names.ModuleName,
                              Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.TypeName))) ->
                 case w1 of wild {
                   Data.Set.Internal.Bin dt y l r
                   -> case y of ww3 { (,) ww4 ww5 ->
                      case ww of ww2 { (,) ww6 ww7 ->
                      case ww4 of ww8 { (,) ww9 ww10 ->
                      let {
                        $j :: Data.Set.Internal.Set
                                ((Language.PureScript.Names.ModuleName,
                                  Language.PureScript.Names.ProperName
                                    'Language.PureScript.Names.ClassName),
                                 (Language.PureScript.Names.ModuleName,
                                  Language.PureScript.Names.ProperName
                                    'Language.PureScript.Names.TypeName))
                          <join 0>
                        = case Language.PureScript.Sugar.TypeClasses.Deriving.$sinsertR_$s$w$sgo3
                                 l
                                 ww1
                                 ww6
                                 ww7
                                 w of l' { DEFAULT ->
                          case GHC.Prim.reallyUnsafePtrEquality#
                                 @ (Data.Set.Internal.Set
                                      ((Language.PureScript.Names.ModuleName,
                                        Language.PureScript.Names.ProperName
                                          'Language.PureScript.Names.ClassName),
                                       (Language.PureScript.Names.ModuleName,
                                        Language.PureScript.Names.ProperName
                                          'Language.PureScript.Names.TypeName)))
                                 l'
                                 l of wild2 {
                            DEFAULT
                            -> Data.Set.Internal.balanceL
                                 @ ((Language.PureScript.Names.ModuleName,
                                     Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.ClassName),
                                    (Language.PureScript.Names.ModuleName,
                                     Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.TypeName))
                                 ww3
                                 l'
                                 r
                            1# -> wild } }
                      } in
                      let {
                        $j1 :: Data.Set.Internal.Set
                                 ((Language.PureScript.Names.ModuleName,
                                   Language.PureScript.Names.ProperName
                                     'Language.PureScript.Names.ClassName),
                                  (Language.PureScript.Names.ModuleName,
                                   Language.PureScript.Names.ProperName
                                     'Language.PureScript.Names.TypeName))
                          <join 0>
                        = case Language.PureScript.Sugar.TypeClasses.Deriving.$sinsertR_$s$w$sgo3
                                 r
                                 ww1
                                 ww6
                                 ww7
                                 w of r' { DEFAULT ->
                          case GHC.Prim.reallyUnsafePtrEquality#
                                 @ (Data.Set.Internal.Set
                                      ((Language.PureScript.Names.ModuleName,
                                        Language.PureScript.Names.ProperName
                                          'Language.PureScript.Names.ClassName),
                                       (Language.PureScript.Names.ModuleName,
                                        Language.PureScript.Names.ProperName
                                          'Language.PureScript.Names.TypeName)))
                                 r'
                                 r of wild2 {
                            DEFAULT
                            -> Data.Set.Internal.balanceR
                                 @ ((Language.PureScript.Names.ModuleName,
                                     Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.ClassName),
                                    (Language.PureScript.Names.ModuleName,
                                     Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.TypeName))
                                 ww3
                                 l
                                 r'
                            1# -> wild } }
                      } in
                      case GHC.Classes.$fOrd[]_$ccompare
                             @ (Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.Namespace)
                             (Language.PureScript.Names.$fOrdProperName
                                @ 'Language.PureScript.Names.Namespace)
                             ww6 `cast` (Language.PureScript.Names.N:ModuleName[0])
                             ww9 `cast` (Language.PureScript.Names.N:ModuleName[0]) of wild1 {
                        GHC.Types.LT -> $j
                        GHC.Types.EQ
                        -> case ww7
                                  `cast`
                                (Language.PureScript.Names.N:ProperName[0]
                                     <'Language.PureScript.Names.ClassName>_P) of ww11 { Data.Text.Internal.Text ww12 ww13 ww14 ->
                           case ww10
                                  `cast`
                                (Language.PureScript.Names.N:ProperName[0]
                                     <'Language.PureScript.Names.ClassName>_P) of ww15 { Data.Text.Internal.Text ww16 ww17 ww18 ->
                           case Data.Text.$w$ccompare ww12 ww13 ww14 ww16 ww17 ww18 of wild2 {
                             GHC.Types.LT -> $j
                             GHC.Types.EQ
                             -> case ww1 of ww19 { (,) ww20 ww21 ->
                                case ww5 of ww22 { (,) ww23 ww24 ->
                                case GHC.Classes.$fOrd[]_$ccompare
                                       @ (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.Namespace)
                                       (Language.PureScript.Names.$fOrdProperName
                                          @ 'Language.PureScript.Names.Namespace)
                                       ww20 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                       ww23
                                         `cast`
                                       (Language.PureScript.Names.N:ModuleName[0]) of wild3 {
                                  GHC.Types.LT -> $j
                                  GHC.Types.EQ
                                  -> case ww21
                                            `cast`
                                          (Language.PureScript.Names.N:ProperName[0]
                                               <'Language.PureScript.Names.TypeName>_P) of ww25 { Data.Text.Internal.Text ww26 ww27 ww28 ->
                                     case ww24
                                            `cast`
                                          (Language.PureScript.Names.N:ProperName[0]
                                               <'Language.PureScript.Names.TypeName>_P) of ww29 { Data.Text.Internal.Text ww30 ww31 ww32 ->
                                     case Data.Text.$w$ccompare
                                            ww26
                                            ww27
                                            ww28
                                            ww30
                                            ww31
                                            ww32 of wild4 {
                                       GHC.Types.LT -> $j
                                       GHC.Types.EQ -> wild
                                       GHC.Types.GT -> $j1 } } }
                                  GHC.Types.GT -> $j1 } } }
                             GHC.Types.GT -> $j1 } } }
                        GHC.Types.GT -> $j1 } } } }
                   Data.Set.Internal.Tip
                   -> case GHC.Magic.lazy
                             @ ((Language.PureScript.Names.ModuleName,
                                 Language.PureScript.Names.ProperName
                                   'Language.PureScript.Names.ClassName),
                                (Language.PureScript.Names.ModuleName,
                                 Language.PureScript.Names.ProperName
                                   'Language.PureScript.Names.TypeName))
                             w of dt { (,) ipv ipv1 ->
                      Data.Set.Internal.Bin
                        @ ((Language.PureScript.Names.ModuleName,
                            Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ClassName),
                           (Language.PureScript.Names.ModuleName,
                            Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.TypeName))
                        1#
                        dt
                        (Data.Set.Internal.Tip
                           @ ((Language.PureScript.Names.ModuleName,
                               Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.ClassName),
                              (Language.PureScript.Names.ModuleName,
                               Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.TypeName)))
                        (Data.Set.Internal.Tip
                           @ ((Language.PureScript.Names.ModuleName,
                               Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.ClassName),
                              (Language.PureScript.Names.ModuleName,
                               Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.TypeName))) } }) -}
bddf3b15e4aac53ddf338b8114487b9e
  $w$sgo13 ::
    (Language.PureScript.Names.ModuleName,
     Language.PureScript.Names.ProperName
       'Language.PureScript.Names.ClassName)
    -> Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> a1
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ModuleName,
          Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
         a1
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ModuleName,
          Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
         a1
  {- Arity: 5, Strictness: <L,U><L,U><L,U(U,U,U)><L,U><S,1*U>,
     Inline: [0] -}
1b7ea1dc22ba37918fe27ebef8b21fda
  $w$sgo2 ::
    (Language.PureScript.Names.ModuleName,
     Language.PureScript.Names.ProperName
       'Language.PureScript.Names.ClassName)
    -> Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> a1
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ModuleName,
          Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
         a1
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ModuleName,
          Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
         a1
  {- Arity: 5, Strictness: <L,U><L,U><L,U(U,U,U)><L,U><S,1*U>,
     Inline: [0] -}
3d1b473d956748e8f54bfdedfb4e484c
  $wgo ::
    [Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances]
    -> (# Data.Map.Internal.Map
            (Language.PureScript.Names.ModuleName,
             Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName)
            ([Data.Text.Internal.Text], [Language.PureScript.Types.Constraint],
             [Language.PureScript.Environment.FunctionalDependency]),
          Data.Set.Internal.Set
            ((Language.PureScript.Names.ModuleName,
              Language.PureScript.Names.ProperName
                'Language.PureScript.Names.ClassName),
             (Language.PureScript.Names.ModuleName,
              Language.PureScript.Names.ProperName
                'Language.PureScript.Names.TypeName)) #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
2b5bd03d491282b2244e3917a79a9c94
  $wpoly_go13 ::
    Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ModuleName,
          Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
         a
    -> GHC.Base.Maybe a
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,1*U(U,U,U)><S,1*U>,
     Inline: [0] -}
3d1b473d956748e8f54bfdedfb4e484c
  data NewtypeDerivedInstances
    = NewtypeDerivedInstances {ndiClasses :: Data.Map.Internal.Map
                                               (Language.PureScript.Names.ModuleName,
                                                Language.PureScript.Names.ProperName
                                                  'Language.PureScript.Names.ClassName)
                                               ([Data.Text.Internal.Text],
                                                [Language.PureScript.Types.Constraint],
                                                [Language.PureScript.Environment.FunctionalDependency]),
                               ndiDerivedInstances :: Data.Set.Internal.Set
                                                        ((Language.PureScript.Names.ModuleName,
                                                          Language.PureScript.Names.ProperName
                                                            'Language.PureScript.Names.ClassName),
                                                         (Language.PureScript.Names.ModuleName,
                                                          Language.PureScript.Names.ProperName
                                                            'Language.PureScript.Names.TypeName))}
50e8b24ab5b4654626722eb9bc7a9818
  deriveInstances ::
    (Control.Monad.Error.Class.MonadError
       Language.PureScript.Errors.MultipleErrors m,
     Control.Monad.Writer.Class.MonadWriter
       Language.PureScript.Errors.MultipleErrors m,
     Control.Monad.Supply.Class.MonadSupply m) =>
    [Language.PureScript.Externs.ExternsFile]
    -> Language.PureScript.AST.Declarations.Module
    -> m Language.PureScript.AST.Declarations.Module
  {- Arity: 3,
     Strictness: <L,U(U(U(1*U(C(C1(U)),A),C(U),C(C1(U)),C(C1(C1(U))),C(C1(U)),A),C(C1(U)),C(C1(U)),C(U),A),C(U),A)><L,U(A,A,A,C(U),A,A)><L,U(U(U(U(C(C1(U)),A),A,A,A,A,A),A,A,A,A),U,A)> -}
3d1b473d956748e8f54bfdedfb4e484c
  ndiClasses ::
    Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ModuleName,
          Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
         ([Data.Text.Internal.Text], [Language.PureScript.Types.Constraint],
          [Language.PureScript.Environment.FunctionalDependency])
  RecSel Left Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances) ->
                 case ds of wild { Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances ds1 ds2 ->
                 ds1 }) -}
3d1b473d956748e8f54bfdedfb4e484c
  ndiDerivedInstances ::
    Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances
    -> Data.Set.Internal.Set
         ((Language.PureScript.Names.ModuleName,
           Language.PureScript.Names.ProperName
             'Language.PureScript.Names.ClassName),
          (Language.PureScript.Names.ModuleName,
           Language.PureScript.Names.ProperName
             'Language.PureScript.Names.TypeName))
  RecSel Left Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances) ->
                 case ds of wild { Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances ds1 ds2 ->
                 ds2 }) -}
instance GHC.Base.Monoid [Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances]
  = Language.PureScript.Sugar.TypeClasses.Deriving.$fMonoidNewtypeDerivedInstances
instance GHC.Base.Semigroup [Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances]
  = Language.PureScript.Sugar.TypeClasses.Deriving.$fSemigroupNewtypeDerivedInstances
instance GHC.Show.Show [Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances]
  = Language.PureScript.Sugar.TypeClasses.Deriving.$fShowNewtypeDerivedInstances
"SC:$w$sgo130" [0] forall @ a
                          (sc :: GHC.Prim.Int#)
                          (sc1 :: Language.PureScript.Names.ModuleName)
                          (sc2 :: Language.PureScript.Names.ProperName
                                    'Language.PureScript.Names.ClassName)
                          (sc3 :: a)
                          (sc4 :: Data.Map.Internal.Map
                                    (Language.PureScript.Names.ModuleName,
                                     Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.ClassName)
                                    a)
                          (sc5 :: Data.Map.Internal.Map
                                    (Language.PureScript.Names.ModuleName,
                                     Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.ClassName)
                                    a)
                          (sc6 :: a)
                          (sc7 :: Language.PureScript.Names.ProperName
                                    'Language.PureScript.Names.ClassName)
                          (sc8 :: Language.PureScript.Names.ModuleName)
                          (sc9 :: (Language.PureScript.Names.ModuleName,
                                   Language.PureScript.Names.ProperName
                                     'Language.PureScript.Names.ClassName))
  Language.PureScript.Sugar.TypeClasses.Deriving.$w$sgo13 @ a
                                                          sc9
                                                          sc8
                                                          sc7
                                                          sc6
                                                          (Data.Map.Internal.Bin
                                                             @ (Language.PureScript.Names.ModuleName,
                                                                Language.PureScript.Names.ProperName
                                                                  'Language.PureScript.Names.ClassName)
                                                             @ a
                                                             sc
                                                             (sc1, sc2)
                                                             sc3
                                                             sc4
                                                             sc5)
  = Language.PureScript.Sugar.TypeClasses.Deriving.$sinsert_$s$w$sgo13
      @ a
      sc
      sc1
      sc2
      sc3
      sc4
      sc5
      sc6
      sc7
      sc8
      sc9
"SC:$w$sgo30" [0] forall (sc :: Data.Set.Internal.Set
                                  ((Language.PureScript.Names.ModuleName,
                                    Language.PureScript.Names.ProperName
                                      'Language.PureScript.Names.ClassName),
                                   (Language.PureScript.Names.ModuleName,
                                    Language.PureScript.Names.ProperName
                                      'Language.PureScript.Names.TypeName)))
                         (sc1 :: (Language.PureScript.Names.ModuleName,
                                  Language.PureScript.Names.ProperName
                                    'Language.PureScript.Names.TypeName))
                         (sc2 :: Language.PureScript.Names.ModuleName)
                         (sc3 :: Language.PureScript.Names.ProperName
                                   'Language.PureScript.Names.ClassName)
                         (sc4 :: ((Language.PureScript.Names.ModuleName,
                                   Language.PureScript.Names.ProperName
                                     'Language.PureScript.Names.ClassName),
                                  (Language.PureScript.Names.ModuleName,
                                   Language.PureScript.Names.ProperName
                                     'Language.PureScript.Names.TypeName)))
  Language.PureScript.Sugar.TypeClasses.Deriving.$w$sgo1 sc4
                                                         (sc2, sc3)
                                                         sc1
                                                         sc
  = Language.PureScript.Sugar.TypeClasses.Deriving.$sinsertR_$s$w$sgo3
      sc
      sc1
      sc2
      sc3
      sc4
"SC:$wpoly_go130" [0] forall @ a
                             (sc :: Data.Map.Internal.Map
                                      (Language.PureScript.Names.ModuleName,
                                       Language.PureScript.Names.ProperName
                                         'Language.PureScript.Names.ClassName)
                                      a)
                             (sc1 :: GHC.Prim.ByteArray#)
                             (sc2 :: GHC.Prim.Int#)
                             (sc3 :: GHC.Prim.Int#)
                             (sg :: (Data.Text.Internal.Text :: *)
                                    ~R# (Language.PureScript.Names.ProperName
                                           'Language.PureScript.Names.ClassName :: *))
                             (sc4 :: Language.PureScript.Names.ModuleName)
  Language.PureScript.Sugar.TypeClasses.Deriving.$wpoly_go13 @ a
                                                             sc4
                                                             (Data.Text.Internal.Text sc1 sc2 sc3)
                                                               `cast`
                                                             sg
                                                             sc
  = Language.PureScript.Sugar.TypeClasses.Deriving.$slookup_$s$wpoly_go13
      @ a
      sc
      sc1
      sc2
      sc3
      @~ sg
      sc4
"SPEC/Language.PureScript.Sugar.TypeClasses.Deriving $fEqQualified @ (ProperName
                                                                       'TypeName)" [orphan] forall (v :: GHC.Classes.Eq
                                                                                                                                                                                            (Language.PureScript.Names.ProperName
                                                                                                                                                                                               'Language.PureScript.Names.TypeName))
  Language.PureScript.Names.$fEqQualified @ (Language.PureScript.Names.ProperName
                                               'Language.PureScript.Names.TypeName)
                                          v
  = Language.PureScript.Sugar.TypeClasses.Deriving.$s$fEqQualified
"SPEC/Language.PureScript.Sugar.TypeClasses.Deriving $fEqQualified_$c/= @ (ProperName
                                                                            'TypeName)" [orphan] forall ($dEq :: GHC.Classes.Eq
                                                                                                                                                                                                         (Language.PureScript.Names.ProperName
                                                                                                                                                                                                            'Language.PureScript.Names.TypeName))
  Language.PureScript.Names.$fEqQualified_$c/= @ (Language.PureScript.Names.ProperName
                                                    'Language.PureScript.Names.TypeName)
                                               $dEq
  = Language.PureScript.Sugar.TypeClasses.Deriving.$s$fEqQualified_$s$fEqQualified_$c/=
"SPEC/Language.PureScript.Sugar.TypeClasses.Deriving $fOrdQualified @ (ProperName
                                                                        'TypeName)" [orphan] forall (v :: GHC.Classes.Ord
                                                                                                                                                                                              (Language.PureScript.Names.ProperName
                                                                                                                                                                                                 'Language.PureScript.Names.TypeName))
  Language.PureScript.Names.$fOrdQualified @ (Language.PureScript.Names.ProperName
                                                'Language.PureScript.Names.TypeName)
                                           v
  = Language.PureScript.Sugar.TypeClasses.Deriving.$s$fOrdQualified
"SPEC/Language.PureScript.Sugar.TypeClasses.Deriving $fShow(,) @ ModuleName @ (ProperName
                                                                                'ClassName)" [orphan] forall (v1 :: GHC.Show.Show
                                                                                                                                                                                                                (Language.PureScript.Names.ProperName
                                                                                                                                                                                                                   'Language.PureScript.Names.ClassName))
                                                                                                                                                                                                       (v :: GHC.Show.Show
                                                                                                                                                                                                               Language.PureScript.Names.ModuleName)
  GHC.Show.$fShow(,) @ Language.PureScript.Names.ModuleName
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ClassName)
                     v
                     v1
  = Language.PureScript.Sugar.TypeClasses.Deriving.$fShowNewtypeDerivedInstances_$s$fShow(,)1
"SPEC/Language.PureScript.Sugar.TypeClasses.Deriving $fShow(,) @ ModuleName @ (ProperName
                                                                                'TypeName)" [orphan] forall (v1 :: GHC.Show.Show
                                                                                                                                                                                                               (Language.PureScript.Names.ProperName
                                                                                                                                                                                                                  'Language.PureScript.Names.TypeName))
                                                                                                                                                                                                      (v :: GHC.Show.Show
                                                                                                                                                                                                              Language.PureScript.Names.ModuleName)
  GHC.Show.$fShow(,) @ Language.PureScript.Names.ModuleName
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.TypeName)
                     v
                     v1
  = Language.PureScript.Sugar.TypeClasses.Deriving.$fShowNewtypeDerivedInstances_$s$fShow(,)
"SPEC/Language.PureScript.Sugar.TypeClasses.Deriving $fShow(,,) @ [Text] @ [Constraint] @ [FunctionalDependency]" [orphan] forall (v2 :: GHC.Show.Show
                                                                                                                                           [Language.PureScript.Environment.FunctionalDependency])
                                                                                                                                  (v1 :: GHC.Show.Show
                                                                                                                                           [Language.PureScript.Types.Constraint])
                                                                                                                                  (v :: GHC.Show.Show
                                                                                                                                          [Data.Text.Internal.Text])
  GHC.Show.$fShow(,,) @ [Data.Text.Internal.Text]
                      @ [Language.PureScript.Types.Constraint]
                      @ [Language.PureScript.Environment.FunctionalDependency]
                      v
                      v1
                      v2
  = Language.PureScript.Sugar.TypeClasses.Deriving.$fShowNewtypeDerivedInstances_$s$fShow(,,)
"SPEC/Language.PureScript.Sugar.TypeClasses.Deriving $fShow[] @ Constraint" [orphan] forall (v :: GHC.Show.Show
                                                                                                    Language.PureScript.Types.Constraint)
  GHC.Show.$fShow[] @ Language.PureScript.Types.Constraint v
  = Language.PureScript.Sugar.TypeClasses.Deriving.$fShowNewtypeDerivedInstances_$s$fShow[]1
"SPEC/Language.PureScript.Sugar.TypeClasses.Deriving $fShow[] @ FunctionalDependency" [orphan] forall (v :: GHC.Show.Show
                                                                                                              Language.PureScript.Environment.FunctionalDependency)
  GHC.Show.$fShow[] @ Language.PureScript.Environment.FunctionalDependency
                    v
  = Language.PureScript.Sugar.TypeClasses.Deriving.$fShowNewtypeDerivedInstances_$s$fShow[]
"SPEC/Language.PureScript.Sugar.TypeClasses.Deriving $fShow[] @ Text" [orphan] forall (v :: GHC.Show.Show
                                                                                              Data.Text.Internal.Text)
  GHC.Show.$fShow[] @ Data.Text.Internal.Text v
  = Language.PureScript.Sugar.TypeClasses.Deriving.$fShowNewtypeDerivedInstances_$s$fShow[]2
"SPEC/Language.PureScript.Sugar.TypeClasses.Deriving $wsplitS @ ((ModuleName,
                                                                 ProperName 'ClassName),
                                                                (ModuleName, ProperName 'TypeName))" [orphan] [0] forall (w :: GHC.Classes.Ord
                                                                                                                                                                                                                                                                                                        ((Language.PureScript.Names.ModuleName,
                                                                                                                                                                                                                                                                                                          Language.PureScript.Names.ProperName
                                                                                                                                                                                                                                                                                                            'Language.PureScript.Names.ClassName),
                                                                                                                                                                                                                                                                                                         (Language.PureScript.Names.ModuleName,
                                                                                                                                                                                                                                                                                                          Language.PureScript.Names.ProperName
                                                                                                                                                                                                                                                                                                            'Language.PureScript.Names.TypeName)))
  Data.Set.Internal.$wsplitS @ ((Language.PureScript.Names.ModuleName,
                                 Language.PureScript.Names.ProperName
                                   'Language.PureScript.Names.ClassName),
                                (Language.PureScript.Names.ModuleName,
                                 Language.PureScript.Names.ProperName
                                   'Language.PureScript.Names.TypeName))
                             w
  = Language.PureScript.Sugar.TypeClasses.Deriving.$s$wsplitS
"SPEC/Language.PureScript.Sugar.TypeClasses.Deriving fromList @ (Qualified
                                                                  (ProperName 'TypeName)) _" [orphan] forall @ a
                                                                                                                                                                                        ($dOrd :: GHC.Classes.Ord
                                                                                                                                                                                                    (Language.PureScript.Names.Qualified
                                                                                                                                                                                                       (Language.PureScript.Names.ProperName
                                                                                                                                                                                                          'Language.PureScript.Names.TypeName)))
  Data.Map.Internal.fromList @ (Language.PureScript.Names.Qualified
                                  (Language.PureScript.Names.ProperName
                                     'Language.PureScript.Names.TypeName))
                             @ a
                             $dOrd
  = Language.PureScript.Sugar.TypeClasses.Deriving.$sfromList @ a
"SPEC/Language.PureScript.Sugar.TypeClasses.Deriving union @ ((ModuleName,
                                                              ProperName 'ClassName),
                                                             (ModuleName, ProperName 'TypeName))" [orphan] forall ($dOrd :: GHC.Classes.Ord
                                                                                                                                                                                                                                                                                               ((Language.PureScript.Names.ModuleName,
                                                                                                                                                                                                                                                                                                 Language.PureScript.Names.ProperName
                                                                                                                                                                                                                                                                                                   'Language.PureScript.Names.ClassName),
                                                                                                                                                                                                                                                                                                (Language.PureScript.Names.ModuleName,
                                                                                                                                                                                                                                                                                                 Language.PureScript.Names.ProperName
                                                                                                                                                                                                                                                                                                   'Language.PureScript.Names.TypeName)))
  Data.Set.Internal.union @ ((Language.PureScript.Names.ModuleName,
                              Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ClassName),
                             (Language.PureScript.Names.ModuleName,
                              Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.TypeName))
                          $dOrd
  = Language.PureScript.Sugar.TypeClasses.Deriving.$fMonoidNewtypeDerivedInstances_$sunion
"SPEC/Language.PureScript.Sugar.TypeClasses.Deriving union @ (ModuleName,
                                                             ProperName 'ClassName) _" [orphan] forall @ a
                                                                                                                                                                                 ($dOrd :: GHC.Classes.Ord
                                                                                                                                                                                             (Language.PureScript.Names.ModuleName,
                                                                                                                                                                                              Language.PureScript.Names.ProperName
                                                                                                                                                                                                'Language.PureScript.Names.ClassName))
  Data.Map.Internal.union @ (Language.PureScript.Names.ModuleName,
                             Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.ClassName)
                          @ a
                          $dOrd
  = Language.PureScript.Sugar.TypeClasses.Deriving.$fMonoidNewtypeDerivedInstances_$sunion1
      @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

