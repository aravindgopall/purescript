
==================== FINAL INTERFACE ====================
2019-01-24 14:16:13.755074 UTC

interface purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Sugar.TypeClasses.Deriving 8043
  interface hash: b7d5152546216f718366ad122e39a9ec
  ABI hash: 2eb18488e48ee117daae658d03eb7e8a
  export-list hash: c125e29723ee2186ab071f56bc47e7d8
  orphan hash: 9de52fcde2e3f64af74eedc7a8fac1bd
  flag hash: a36dbfbd54c57924a199aea99ee7acd2
  opt_hash: 2c98c95d41c045ae9c2fb565ec8aabc6
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Language.PureScript.Sugar.TypeClasses.Deriving.deriveInstances
module dependencies: Control.Monad.Supply
                     Control.Monad.Supply.Class Language.PureScript.AST
                     Language.PureScript.AST.Binders
                     Language.PureScript.AST.Declarations
                     Language.PureScript.AST.Exported Language.PureScript.AST.Literals
                     Language.PureScript.AST.Operators Language.PureScript.AST.SourcePos
                     Language.PureScript.AST.Traversals Language.PureScript.Bundle
                     Language.PureScript.Comments Language.PureScript.Constants
                     Language.PureScript.Crash Language.PureScript.Environment
                     Language.PureScript.Errors Language.PureScript.Externs
                     Language.PureScript.Kinds Language.PureScript.Label
                     Language.PureScript.Linter Language.PureScript.Linter.Exhaustive
                     Language.PureScript.Linter.Imports Language.PureScript.Names
                     Language.PureScript.PSString Language.PureScript.Parser.Lexer
                     Language.PureScript.Parser.State Language.PureScript.Pretty
                     Language.PureScript.Pretty.Common Language.PureScript.Pretty.Kinds
                     Language.PureScript.Pretty.Types Language.PureScript.Pretty.Values
                     Language.PureScript.Publish.BoxesHelpers
                     Language.PureScript.Sugar.Names.Common
                     Language.PureScript.Sugar.Names.Env
                     Language.PureScript.Sugar.Names.Imports
                     Language.PureScript.Traversals Language.PureScript.TypeChecker
                     Language.PureScript.TypeChecker.Entailment
                     Language.PureScript.TypeChecker.Kinds
                     Language.PureScript.TypeChecker.Monad
                     Language.PureScript.TypeChecker.Skolems
                     Language.PureScript.TypeChecker.Subsumption
                     Language.PureScript.TypeChecker.Synonyms
                     Language.PureScript.TypeChecker.TypeSearch
                     Language.PureScript.TypeChecker.Types
                     Language.PureScript.TypeChecker.Unify
                     Language.PureScript.TypeClassDictionaries Language.PureScript.Types
                     Paths_purescript
package dependencies: aeson-1.3.1.1 ansi-terminal-0.8.0.4
                      array-0.5.2.0 async-2.2.1 attoparsec-0.13.2.2 base-4.11.1.0
                      base-compat-0.10.4 binary-0.8.5.1 blaze-builder-0.4.1.0 boxes-0.1.5
                      bytestring-0.10.8.2 colour-2.3.4 containers-0.5.11.0
                      data-ordlist-0.4.7.0 deepseq-1.4.3.0 dlist-0.8.0.4 filepath-1.4.2
                      ghc-boot-th-8.4.3 ghc-prim-0.5.2.0 hashable-1.2.7.0
                      integer-gmp-1.0.2.0 integer-logarithms-1.0.2.1
                      language-javascript-0.6.0.11 microlens-0.4.9.1 microlens-ghc-0.4.9
                      microlens-mtl-0.1.11.1 microlens-platform-0.3.10
                      microlens-th-0.4.2.1 mtl-2.2.2 parsec-3.1.13.0 pattern-arrows-0.0.2
                      pretty-1.1.3.6 primitive-0.6.3.0 protolude-0.2.2 random-1.1
                      safe-0.3.17 scientific-0.3.6.2 sourcemap-0.1.6 split-0.2.3.3
                      stm-2.4.5.0 syb-0.7 tagged-0.8.5 template-haskell-2.13.0.0
                      text-1.2.3.0 th-abstraction-0.2.8.0 time-1.8.0.2
                      time-locale-compat-0.1.1.4 transformers-0.5.5.0
                      unordered-containers-0.2.9.0 utf8-string-1.0.1.1 uuid-types-1.0.3
                      vector-0.12.0.1
orphans: syb-0.7:Data.Generics.Instances colour-2.3.4:Data.Colour
         stm-2.4.5.0:Control.Monad.STM
         attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         microlens-platform-0.3.10:Lens.Micro.Platform
         microlens-ghc-0.4.9:Lens.Micro.GHC
         hashable-1.2.7.0:Data.Hashable.Generic
         vector-0.12.0.1:Data.Vector.Unboxed
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.5.0:Control.Monad.Trans.Error
         text-1.2.3.0:Data.Text.Lazy text-1.2.3.0:Data.Text
         binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: aeson-1.3.1.1:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.Graph
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         dlist-0.8.0.4:Data.DList ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         microlens-0.4.9.1:Lens.Micro.Internal
                         microlens-ghc-0.4.9:Lens.Micro.GHC
                         microlens-mtl-0.1.11.1:Lens.Micro.Mtl.Internal
                         microlens-platform-0.3.10:Lens.Micro.Platform
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.Declarations
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.Operators
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.SourcePos
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Comments
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Environment
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Kinds
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Label
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Names
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.PSString
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.TypeClassDictionaries
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Types
                         tagged-0.8.5:Data.Tagged
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
                         th-abstraction-0.2.8.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  base-4.11.1.0:Control.Arrow ce43199b5356a11ee2a8317f0ec30aee
import  -/  base-4.11.1.0:Control.Monad c5f960c67d822497578bffbd3e4c01cf
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.Functor f522c3501272159820fd6f242510732f
import  -/  base-4.11.1.0:Data.List 83dc843e47bfc0c5af51e19c6f3476d5
import  -/  base-4.11.1.0:Data.Maybe 409c3da2b142470b68be39ce1d97a9f7
import  -/  base-4.11.1.0:Data.OldList 1b35aa3c6805ff7c8887a35a866fe006
import  -/  base-4.11.1.0:Data.Ord 8579f16310a4ec69c00617051bb5c3d9
import  -/  base-4.11.1.0:Data.Traversable 7ad4edb9184ea1ae8e73f6b94f115c8c
import  -/  base-4.11.1.0:Data.Tuple 3af66f3ac61ed95ba8a3a3f68ebc5003
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Err 5e26aa744981f14e0f1e4d29c44ac52e
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-compat-0.10.4:Prelude.Compat bb6796186ed35a1d09dc34362a3fc27e
import  -/  containers-0.5.11.0:Data.Map 0dbdaec812ef695a364aa6c69e7f7d53
import  -/  containers-0.5.11.0:Data.Map.Internal 0150e210d0ae8df0f3a0669d5e32d8fa
import  -/  containers-0.5.11.0:Data.Set 7d3c64a641be4cacbcd8119445bab919
import  -/  containers-0.5.11.0:Data.Set.Internal 93fa3ef95853aa2a7aadf32d693bd451
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  mtl-2.2.2:Control.Monad.Error.Class df146c18e27154b8df4c8637c59fd61b
import  -/  mtl-2.2.2:Control.Monad.Writer.Class 69f540e019eada69892c26d267276458
import  -/  protolude-0.2.2:Protolude 2c2d16096c8a60f59f646a3b93b0eb7b
import  -/  protolude-0.2.2:Protolude.List 3a80368167450d7a4360ebf1ea443345
import  -/  Control.Monad.Supply.Class 4b0577d8897e2d48cd4fc324f0e8c355
  exports: 9b5454b78bf2751cecd07ba41d8b4d51
  MonadSupply 6fd5e162006451a17cf4a7ae2eb71bd2
import  -/  Language.PureScript.AST e89b59f8e201961eafd3ff905a683659
  exports: be73d3bb7d4ebe5df082453f6d572075
import  -/  Language.PureScript.AST.Binders 482af52ec934a93b1ca6ec424fbe30f2
  Binder c96edaac3b5fcb24a174f6f4b3f084d4
  ConstructorBinder 82c410a4d9e21c325ba3e1527c50daff
  NullBinder d9d32ade0d56992460bb4b700e4464a4
  VarBinder 2e20c3df0430901107dc9b8bd4a6015c
import  -/  Language.PureScript.AST.Declarations 586bc75044e8737d02875208d17d4395
  Abs dae9a514c0c54a50406a57cd533f800a
  Accessor 75238d8cd32188d181bffb473f6c4802
  App ae4e12e545757da5fb62189548835120
  CannotDerive bf50a2ba123bdefcc4175ba94380f372
  CannotDeriveNewtypeForData 5b955692e5773e4eb11bd2352562d8c9
  CannotFindDerivingType 526d71f1ccb2a6688a39b47612a0a331
  Case dbf8d0b5ac1a603149b8bb1459575de0
  CaseAlternative 8464f1c9f0c33f15833817399a071704
  CaseAlternative e92f6ee78a22c0eadc3566d7d1f48d5b
  Constructor ea2b7d92995197a177f6abf42269c377
  DataDeclaration 2fcba6ad709595ed3c4d0926de54bc2c
  Declaration e92f6ee78a22c0eadc3566d7d1f48d5b
  DeferredDictionary 4767b924c347cb558c8259d23777dc47
  DerivedInstance 049e605b376a0b07eb640a4746618932
  ExpectedTypeConstructor b752a30671422440d53bbf2351fe8e5e
  ExpectedWildcard 6e6e4e6e59fe15e5573be31041331478
  ExplicitInstance 7626e63238a07a99c1bae428b77d3f66
  Expr e92f6ee78a22c0eadc3566d7d1f48d5b
  GuardedExpr e92f6ee78a22c0eadc3566d7d1f48d5b
  InvalidDerivedInstance 2850bb655a67c7b11c2abbc0a797324f
  InvalidNewtypeInstance 60deec26444e8cfc21c81a0f10872c25
  KindsDoNotUnify 5eff4abdff15c722fce13c399150e3be
  Literal bdcf4b137a448fe7c2ed57fe33a72cd3
  MissingNewtypeSuperclassInstance 76c919104baa721f9f381a32aedf4230
  MkUnguarded d9deae30ea78016a4bdb453d9978bfa3
  Module 305128e30e200d34d712365aa2d509df
  Module 3342e00ee072addfd009ee61e87fb865
  NewtypeInstance 43b0450709caa9cc5a685085197cb773
  NewtypeInstanceWithDictionary eddb3e7c62714e662f7945c8899ae4d1
  ObjectUpdate 14b4ffe7d1b68ac321d3f2c2a27a17eb
  TypeClassDeclaration 19936abcaf3693a6825ccbc13b2590dc
  TypeInstanceDeclaration 46d66658dd5a30ba03e36fc960162f20
  TypeSynonymDeclaration 1cfe9af195a40456074b96ff0ca4519c
  UnverifiableSuperclassInstance 3de05066922d1edec32da1840426a7c9
  ValueDecl 97b38919d86cd9182cb8d86b6f4ae734
  Var 5fd1e80d993ab2f76a4e002bbbfc9990
import  -/  Language.PureScript.AST.Literals da2ec269f063125450b272321f85468a
  BooleanLiteral 98d9c7b89f9a5dcc4796fae1c45898e6
import  -/  Language.PureScript.AST.SourcePos 63acacac5b7be73d04e5be0047a9a89a
  SourceSpan 1e0cf2bd3ea18f97a2ff152297f09219
  nullSourceAnn f2dcb0c4d24a9cde0192cde9ecb60353
import  -/  Language.PureScript.Constants 69f48af5637c1cbbd07a6f85918359c3
  exports: 9c458e31ccbc9e07ff15471cf48a55ee
  Record 7c8350dd2ddc3fb292577a8c5ace132b
  compare 09b179749fec76c633979401930221b9
  compare1 a670f2a87186174cea4f8b63f5c15355
  conj 82f49a3d788cce8f918ed52038a33482
  eq 75a29caf169679f02ace1903e716411f
  eq1 7f4247978d25ca8928be9144c6483968
  generic 78ca2b31ce9bafaf22adc80284e1a401
  map 6e9cda8a115f1816471826d875818d39
import  -/  Language.PureScript.Crash 3dd739d57f17e8a1e9cd97afd3faf067
  exports: a9d2725f359c2d113bd38076e88ec681
  internalError d33c2a09c5cbe8e68c0bc27d1500ba1a
import  -/  Language.PureScript.Environment 467b25d81b890e1aaabe28d0f09d192d
  exports: a0cb6cb8c78c56365f58c9f88d1fe000
  Data 91308ce2b2a3063225e4488a3df159f8
  FunctionalDependency 181e7295489b314c6c042d61e80bb6b9
  Newtype 429106735f422306de0d5ec4acbf7fb1
  Public 599cf7bfef97fea0107da5ef3bf1cbf8
  fdDetermined 181e7295489b314c6c042d61e80bb6b9
  fdDeterminers 181e7295489b314c6c042d61e80bb6b9
  kindType 5aa8fecbb78cb16f648b40b4c0a9a13c
import  -/  Language.PureScript.Errors 3c1ad933587510f8b20a8c9ec2e86ce9
  exports: 8e61484c4664eceb943d9fc4820c721b
  MultipleErrors e1ef6a17348ccfe3ef65185d3c5f9026
  errorMessage' d5b3fcc13faf321f693b39ae31b8bd13
import  -/  Language.PureScript.Externs cf933be49760ec7d1e991d8ad7f6146f
  exports: caea0e8e36630f9e250d475ec2e68707
  EDClass f71940f3e461ffb20ccdf04fe199bdf0
  EDInstance b505ded8eb9d4692ad56205d6f025319
  EDTypeSynonym 8348b671b522d5bc1b8d3e3defbf78a5
  ExternsFile 3c90d25a909106e2dfae91839ad7749d
  ExternsFile c010c09fe85776adf7c6787c7d79c898
  edClassConstraints a7fb565ada874d78b726c57090b05102
  edClassMembers a7fb565ada874d78b726c57090b05102
  edClassName a7fb565ada874d78b726c57090b05102
  edClassTypeArguments a7fb565ada874d78b726c57090b05102
  edFunctionalDependencies a7fb565ada874d78b726c57090b05102
  edInstanceChain a7fb565ada874d78b726c57090b05102
  edInstanceChainIndex a7fb565ada874d78b726c57090b05102
  edInstanceClassName a7fb565ada874d78b726c57090b05102
  edInstanceConstraints a7fb565ada874d78b726c57090b05102
  edInstanceName a7fb565ada874d78b726c57090b05102
  edInstanceTypes a7fb565ada874d78b726c57090b05102
  efDeclarations c010c09fe85776adf7c6787c7d79c898
  efExports c010c09fe85776adf7c6787c7d79c898
  efFixities c010c09fe85776adf7c6787c7d79c898
  efImports c010c09fe85776adf7c6787c7d79c898
  efModuleName c010c09fe85776adf7c6787c7d79c898
  efSourceSpan c010c09fe85776adf7c6787c7d79c898
  efTypeFixities c010c09fe85776adf7c6787c7d79c898
  efVersion c010c09fe85776adf7c6787c7d79c898
import  -/  Language.PureScript.Kinds e26b9cf8211f7e72bb44fdd3faed066e
  exports: fe71635ad7964c0d620fb0685614a050
  FunKind 0560a3ce54d445316be516294eb33990
import  -/  Language.PureScript.Label 366bbe6039761c79dbc09aaf87b5753e
  exports: 0a72b1b943ee66379d53382d0212ef7e
  Label 1f1fefa14786357467485814549b59fb
  Label 1525a534169f6ccc5a25699c70351352
import  -/  Language.PureScript.Names 00f694509122478d97b327fbbccae327
  exports: ad7ae34f85124c68e8ba1c90fb2e732f
  ClassName c5d98a635cb261f6a93bf01096d0c6ed
  ConstructorName 84054a8bbbe827ba2ce7da83056a95ee
  Ident 71f167265716f619863a793fa311e198
  Ident bad3562aa6138b6192713ac281080869
  ModuleName e77bf9e056798332a9668212060e8e06
  ModuleName 1b2ddf0c04464d2fa2588925f10c1966
  ProperName f69d3801241fcb4773f1284cd28f2dee
  ProperName a7268334e0b909381550b9329cb80fcc
  Qualified b6e1bc9e7244a41d3c6149c9b5c2d6d8
  Qualified 1b2ddf0c04464d2fa2588925f10c1966
  TypeName 40ce511c66a72431b4e87351210f7b03
  freshIdent 2eefe00dadde64e5aaf7e80827568225
  qualify 7fee779c1e743466991e1770cf2b48ba
  runProperName a7268334e0b909381550b9329cb80fcc
import  -/  Language.PureScript.PSString 482bcd39d274b3e3efbde5749bd9d797
  exports: dedd5d31dc509736134f041863efd1d4
  mkString a727d038908a3b0e30ed0d1d71565e4b
import  -/  Language.PureScript.TypeChecker b6c2a0e0dc8f070f588097af1ac535e7
  exports: cc7ee5853d54561d2934c83f97161d45
  checkNewtype e358cd13530b47b68f9a38c388a4616e
import  -/  Language.PureScript.TypeChecker.Synonyms 9fc45204d5072944969c53bc432a94f7
  exports: 7d14e10157c623eaf1b349bf4fa32925
  SynonymMap 426e16df32602099cb2259c2c6075de1
  replaceAllTypeSynonymsM 4035eaa7d2ff9d15435a932920ac04b0
import  -/  Language.PureScript.Types 80a51f62cb3e6c71f024289b88f07b7f
  exports: 229bb7528146da886cffbefad5822e19
  ConstrainedType 7b7b9fe5fc37a912cec5b01815c7784d
  Constraint a0b1e737f9fdb5b2f711c97dd5895f69
  ForAll 0750974c4b3c816f0559c95f8418f903
  RCons baa72184843999f17a8e5f8391aabd36
  REmpty 55ca0a758aacaf511eb4882e2b81a0fc
  SourceConstraint b73f205dd83ce498c3119d8c9316f0c6
  SourceType 0ac818517c14fedd280ef5885ae0cdc3
  Type d5fc19231e8a71936895da17eade4f5b
  TypeApp 9dadf19674ff2d747cbba0c42dfad343
  TypeConstructor c7b7bcec494a17e684a206aeb55ef57b
  TypeVar 9a7c02efa8540e6f48c3a672f3ebc8db
  TypeWildcard e8def149f21247f8f38af9a4e50f9298
  constraintAnn d5fc19231e8a71936895da17eade4f5b
  constraintArgs d5fc19231e8a71936895da17eade4f5b
  constraintClass d5fc19231e8a71936895da17eade4f5b
  constraintData d5fc19231e8a71936895da17eade4f5b
  eqType d5fc19231e8a71936895da17eade4f5b
  replaceAllTypeVars cde4bd7b0fdb81185224e04d2a6fde98
  srcTypeApp 12cd55eb1b1b79c16fa2d346fb7f9cdb
  srcTypeConstructor bb445f2f58f3f299e4deae81f6001187
  srcTypeLevelString 0af86aeb641fefb9242b9445e60d9219
  srcTypeVar 48385e53396d525a164ce8b1126142da
  usedTypeVariables 62109d4b7401d5adbb36fa4c7c34216c
import  -/  text-1.2.3.0:Data.Text 7daa7e6c9b39d8cc1679e5ec5c64d2be
import  -/  text-1.2.3.0:Data.Text.Internal 30a0a123f71f63b26cd34c6b24f23411
6bce8bdd1a943a7315de7e59b1f89e68
  $fMonoidNewtypeDerivedInstances ::
    GHC.Base.Monoid
      Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances
                  Language.PureScript.Sugar.TypeClasses.Deriving.$fSemigroupNewtypeDerivedInstances
                  Language.PureScript.Sugar.TypeClasses.Deriving.$fMonoidNewtypeDerivedInstances_$cmempty
                  Language.PureScript.Sugar.TypeClasses.Deriving.$fMonoidNewtypeDerivedInstances_$c<>
                  Language.PureScript.Sugar.TypeClasses.Deriving.$fMonoidNewtypeDerivedInstances_go -}
6bce8bdd1a943a7315de7e59b1f89e68
  $fMonoidNewtypeDerivedInstances_$c<> ::
    Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances
    -> Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances
    -> Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances
  {- Arity: 2, Strictness: <L,U(1*U,1*U)><L,U(1*U,1*U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances)
                   (w1 :: Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances) ->
                 Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances
                   (case w of wild { Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances ds ds1 ->
                    case w1 of wild1 { Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances ds2 ds3 ->
                    Language.PureScript.Sugar.TypeClasses.Deriving.$fMonoidNewtypeDerivedInstances_$sunion1
                      @ ([Data.Text.Internal.Text],
                         [Language.PureScript.Types.SourceConstraint],
                         [Language.PureScript.Environment.FunctionalDependency])
                      ds
                      ds2 } })
                   (case w of wild { Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances ds ds1 ->
                    case w1 of wild1 { Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances ds2 ds3 ->
                    Language.PureScript.Sugar.TypeClasses.Deriving.$fMonoidNewtypeDerivedInstances_$sunion
                      ds1
                      ds3 } })) -}
6bce8bdd1a943a7315de7e59b1f89e68
  $fMonoidNewtypeDerivedInstances_$cmempty ::
    Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances
                   (Data.Map.Internal.Tip
                      @ (Language.PureScript.Names.ModuleName,
                         Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.ClassName)
                      @ ([Data.Text.Internal.Text],
                         [Language.PureScript.Types.SourceConstraint],
                         [Language.PureScript.Environment.FunctionalDependency]))
                   (Data.Set.Internal.Tip
                      @ ((Language.PureScript.Names.ModuleName,
                          Language.PureScript.Names.ProperName
                            'Language.PureScript.Names.ClassName),
                         (Language.PureScript.Names.ModuleName,
                          Language.PureScript.Names.ProperName
                            'Language.PureScript.Names.TypeName)))) -}
86bd84e6aff38c624a85e05a16ed5213
  $fMonoidNewtypeDerivedInstances_$sunion ::
    Data.Set.Internal.Set
      ((Language.PureScript.Names.ModuleName,
        Language.PureScript.Names.ProperName
          'Language.PureScript.Names.ClassName),
       (Language.PureScript.Names.ModuleName,
        Language.PureScript.Names.ProperName
          'Language.PureScript.Names.TypeName))
    -> Data.Set.Internal.Set
         ((Language.PureScript.Names.ModuleName,
           Language.PureScript.Names.ProperName
             'Language.PureScript.Names.ClassName),
          (Language.PureScript.Names.ModuleName,
           Language.PureScript.Names.ProperName
             'Language.PureScript.Names.TypeName))
    -> Data.Set.Internal.Set
         ((Language.PureScript.Names.ModuleName,
           Language.PureScript.Names.ProperName
             'Language.PureScript.Names.ClassName),
          (Language.PureScript.Names.ModuleName,
           Language.PureScript.Names.ProperName
             'Language.PureScript.Names.TypeName))
  {- Arity: 2, Strictness: <S,1*U><S,1*U>, Inline: [~] -}
0b85829ec769d16550cbd33e2db89c8d
  $fMonoidNewtypeDerivedInstances_$sunion1 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.ModuleName,
       Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
      a
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ModuleName,
          Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
         a
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ModuleName,
          Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
         a
  {- Arity: 2, Strictness: <S,1*U><S,1*U>, Inline: [~] -}
6bce8bdd1a943a7315de7e59b1f89e68
  $fMonoidNewtypeDerivedInstances_go ::
    [Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances]
    -> Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances
  {- Arity: 1, Strictness: <S,1*U>m, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: [Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances]) ->
                 case Language.PureScript.Sugar.TypeClasses.Deriving.$wgo
                        w of ww { (#,#) ww1 ww2 ->
                 Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances
                   ww1
                   ww2 }) -}
6bce8bdd1a943a7315de7e59b1f89e68
  $fSemigroupNewtypeDerivedInstances ::
    GHC.Base.Semigroup
      Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances
                  Language.PureScript.Sugar.TypeClasses.Deriving.$fMonoidNewtypeDerivedInstances_$c<>
                  Language.PureScript.Sugar.TypeClasses.Deriving.$fSemigroupNewtypeDerivedInstances_$csconcat
                  Language.PureScript.Sugar.TypeClasses.Deriving.$fSemigroupNewtypeDerivedInstances_$cstimes -}
6bce8bdd1a943a7315de7e59b1f89e68
  $fSemigroupNewtypeDerivedInstances_$csconcat ::
    GHC.Base.NonEmpty
      Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances
    -> Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances
  {- Arity: 1, Strictness: <S(LS),1*U(U(U,U),1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GHC.Base.NonEmpty
                            Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances) ->
                 case ds of wild { GHC.Base.:| a1 as ->
                 Language.PureScript.Sugar.TypeClasses.Deriving.$fSemigroupNewtypeDerivedInstances_go
                   a1
                   as }) -}
6bce8bdd1a943a7315de7e59b1f89e68
  $fSemigroupNewtypeDerivedInstances_$cstimes ::
    GHC.Real.Integral b =>
    b
    -> Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances
    -> Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances
  {- Arity: 1, Strictness: <L,U> -}
6bce8bdd1a943a7315de7e59b1f89e68
  $fSemigroupNewtypeDerivedInstances_go ::
    Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances
    -> [Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances]
    -> Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances
  {- Arity: 2, Strictness: <L,U(U,U)><S,1*U> -}
6bce8bdd1a943a7315de7e59b1f89e68
  $fShowNewtypeDerivedInstances ::
    GHC.Show.Show
      Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances
                  Language.PureScript.Sugar.TypeClasses.Deriving.$fShowNewtypeDerivedInstances_$cshowsPrec
                  Language.PureScript.Sugar.TypeClasses.Deriving.$fShowNewtypeDerivedInstances_$cshow
                  Language.PureScript.Sugar.TypeClasses.Deriving.$fShowNewtypeDerivedInstances_$cshowList -}
6bce8bdd1a943a7315de7e59b1f89e68
  $fShowNewtypeDerivedInstances1 ::
    Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances
    -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U)>,
     Unfolding: (\ (w :: Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances) ->
                 case w of ww { Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances ww1 ww2 ->
                 Language.PureScript.Sugar.TypeClasses.Deriving.$w$cshowsPrec
                   0#
                   ww1
                   ww2 }) -}
125b0e33ded1c64a0c2c178a9e12f27e
  $fShowNewtypeDerivedInstances2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("}"#) -}
eb2bc119906a5edf8669be2aeffc92a1
  $fShowNewtypeDerivedInstances3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ndiDerivedInstances = "#) -}
ca172112fbb94c94d197fe16a0782be4
  $fShowNewtypeDerivedInstances4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ndiClasses = "#) -}
24684f138148dfe028a07db30dc8b678
  $fShowNewtypeDerivedInstances5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("NewtypeDerivedInstances {"#) -}
c9ff75b73c594951e6792bd8cd00fdce
  $fShowNewtypeDerivedInstances6 ::
    GHC.Show.Show
      ((Language.PureScript.Names.ModuleName,
        Language.PureScript.Names.ProperName
          'Language.PureScript.Names.ClassName),
       (Language.PureScript.Names.ModuleName,
        Language.PureScript.Names.ProperName
          'Language.PureScript.Names.TypeName))
  {- Unfolding: (GHC.Show.$fShow(,)
                   @ (Language.PureScript.Names.ModuleName,
                      Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.ClassName)
                   @ (Language.PureScript.Names.ModuleName,
                      Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.TypeName)
                   Language.PureScript.Sugar.TypeClasses.Deriving.$fShowNewtypeDerivedInstances_$s$fShow(,)1
                   Language.PureScript.Sugar.TypeClasses.Deriving.$fShowNewtypeDerivedInstances_$s$fShow(,)) -}
d62c52e551da70fe7090efb505fa6426
  $fShowNewtypeDerivedInstances7 ::
    GHC.Show.Show [Language.PureScript.Types.SourceConstraint]
  {- Unfolding: (GHC.Show.$fShow[]
                   @ (Language.PureScript.Types.Constraint
                        Language.PureScript.AST.SourcePos.SourceAnn)
                   Language.PureScript.Sugar.TypeClasses.Deriving.$fShowNewtypeDerivedInstances_$s$fShowConstraint) -}
83dd038e2e554ddd7ee4ff75c3ad09fd
  $fShowNewtypeDerivedInstances8 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
6bce8bdd1a943a7315de7e59b1f89e68
  $fShowNewtypeDerivedInstances_$cshow ::
    Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances) ->
                 Language.PureScript.Sugar.TypeClasses.Deriving.$fShowNewtypeDerivedInstances_$cshowsPrec
                   Language.PureScript.Sugar.TypeClasses.Deriving.$fShowNewtypeDerivedInstances8
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
6bce8bdd1a943a7315de7e59b1f89e68
  $fShowNewtypeDerivedInstances_$cshowList ::
    [Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances
                   Language.PureScript.Sugar.TypeClasses.Deriving.$fShowNewtypeDerivedInstances1
                   ls
                   s) -}
6bce8bdd1a943a7315de7e59b1f89e68
  $fShowNewtypeDerivedInstances_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances ww3 ww4 ->
                 Language.PureScript.Sugar.TypeClasses.Deriving.$w$cshowsPrec
                   ww1
                   ww3
                   ww4 } }) -}
c6963cc67bf7a72b28edad2b909f8d98
  $fShowNewtypeDerivedInstances_$s$fShow(,) ::
    GHC.Show.Show
      (Language.PureScript.Names.ModuleName,
       Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.ModuleName,
                     Language.PureScript.Names.ProperName
                       'Language.PureScript.Names.TypeName)
                  (GHC.Show.$fShow(,)_$cshowsPrec
                     @ Language.PureScript.Names.ModuleName
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.TypeName)
                     Language.PureScript.Names.$fShowModuleName
                     (Language.PureScript.Names.$fShowProperName
                        @ 'Language.PureScript.Names.TypeName))
                  (\ (x :: (Language.PureScript.Names.ModuleName,
                            Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.TypeName)) ->
                   GHC.Show.$fShow(,)_$cshowsPrec
                     @ Language.PureScript.Names.ModuleName
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.TypeName)
                     Language.PureScript.Names.$fShowModuleName
                     (Language.PureScript.Names.$fShowProperName
                        @ 'Language.PureScript.Names.TypeName)
                     GHC.Show.$fShow(,)1
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [(Language.PureScript.Names.ModuleName,
                              Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.TypeName)])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Language.PureScript.Names.ModuleName,
                        Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.TypeName)
                     (GHC.Show.$fShow(,)_$cshowsPrec
                        @ Language.PureScript.Names.ModuleName
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.TypeName)
                        Language.PureScript.Names.$fShowModuleName
                        (Language.PureScript.Names.$fShowProperName
                           @ 'Language.PureScript.Names.TypeName)
                        GHC.Show.$fShow(,)1)
                     ls
                     s) -}
43237d35c2a2aebe4b6b04aaf57bdd39
  $fShowNewtypeDerivedInstances_$s$fShow(,)1 ::
    GHC.Show.Show
      (Language.PureScript.Names.ModuleName,
       Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.ModuleName,
                     Language.PureScript.Names.ProperName
                       'Language.PureScript.Names.ClassName)
                  (GHC.Show.$fShow(,)_$cshowsPrec
                     @ Language.PureScript.Names.ModuleName
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ClassName)
                     Language.PureScript.Names.$fShowModuleName
                     (Language.PureScript.Names.$fShowProperName
                        @ 'Language.PureScript.Names.ClassName))
                  (\ (x :: (Language.PureScript.Names.ModuleName,
                            Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ClassName)) ->
                   GHC.Show.$fShow(,)_$cshowsPrec
                     @ Language.PureScript.Names.ModuleName
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ClassName)
                     Language.PureScript.Names.$fShowModuleName
                     (Language.PureScript.Names.$fShowProperName
                        @ 'Language.PureScript.Names.ClassName)
                     GHC.Show.$fShow(,)1
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [(Language.PureScript.Names.ModuleName,
                              Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ClassName)])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Language.PureScript.Names.ModuleName,
                        Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ClassName)
                     (GHC.Show.$fShow(,)_$cshowsPrec
                        @ Language.PureScript.Names.ModuleName
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ClassName)
                        Language.PureScript.Names.$fShowModuleName
                        (Language.PureScript.Names.$fShowProperName
                           @ 'Language.PureScript.Names.ClassName)
                        GHC.Show.$fShow(,)1)
                     ls
                     s) -}
75b45a5fc7636d58f5398acb1d74636b
  $fShowNewtypeDerivedInstances_$s$fShow(,)2 ::
    GHC.Show.Show
      (Language.PureScript.AST.SourcePos.SourceSpan,
       [Language.PureScript.Comments.Comment])
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.AST.SourcePos.SourceSpan,
                     [Language.PureScript.Comments.Comment])
                  (GHC.Show.$fShow(,)_$cshowsPrec
                     @ Language.PureScript.AST.SourcePos.SourceSpan
                     @ [Language.PureScript.Comments.Comment]
                     Language.PureScript.AST.SourcePos.$fShowSourceSpan
                     Language.PureScript.Sugar.TypeClasses.Deriving.$fShowNewtypeDerivedInstances_$s$fShow[]1)
                  (\ (x :: (Language.PureScript.AST.SourcePos.SourceSpan,
                            [Language.PureScript.Comments.Comment])) ->
                   GHC.Show.$fShow(,)_$cshowsPrec
                     @ Language.PureScript.AST.SourcePos.SourceSpan
                     @ [Language.PureScript.Comments.Comment]
                     Language.PureScript.AST.SourcePos.$fShowSourceSpan
                     Language.PureScript.Sugar.TypeClasses.Deriving.$fShowNewtypeDerivedInstances_$s$fShow[]1
                     GHC.Show.$fShow(,)1
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [(Language.PureScript.AST.SourcePos.SourceSpan,
                              [Language.PureScript.Comments.Comment])])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Language.PureScript.AST.SourcePos.SourceSpan,
                        [Language.PureScript.Comments.Comment])
                     (GHC.Show.$fShow(,)_$cshowsPrec
                        @ Language.PureScript.AST.SourcePos.SourceSpan
                        @ [Language.PureScript.Comments.Comment]
                        Language.PureScript.AST.SourcePos.$fShowSourceSpan
                        Language.PureScript.Sugar.TypeClasses.Deriving.$fShowNewtypeDerivedInstances_$s$fShow[]1
                        GHC.Show.$fShow(,)1)
                     ls
                     s) -}
4c06bdb263ed671bf389db766534c5cf
  $fShowNewtypeDerivedInstances_$s$fShow(,,) ::
    GHC.Show.Show
      ([Data.Text.Internal.Text],
       [Language.PureScript.Types.SourceConstraint],
       [Language.PureScript.Environment.FunctionalDependency])
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ ([Data.Text.Internal.Text],
                     [Language.PureScript.Types.SourceConstraint],
                     [Language.PureScript.Environment.FunctionalDependency])
                  (GHC.Show.$fShow(,,)_$cshowsPrec
                     @ [Data.Text.Internal.Text]
                     @ [Language.PureScript.Types.SourceConstraint]
                     @ [Language.PureScript.Environment.FunctionalDependency]
                     Language.PureScript.Sugar.TypeClasses.Deriving.$fShowNewtypeDerivedInstances_$s$fShow[]2
                     Language.PureScript.Sugar.TypeClasses.Deriving.$fShowNewtypeDerivedInstances7
                     Language.PureScript.Sugar.TypeClasses.Deriving.$fShowNewtypeDerivedInstances_$s$fShow[])
                  (\ (x :: ([Data.Text.Internal.Text],
                            [Language.PureScript.Types.SourceConstraint],
                            [Language.PureScript.Environment.FunctionalDependency])) ->
                   GHC.Show.$fShow(,,)_$cshowsPrec
                     @ [Data.Text.Internal.Text]
                     @ [Language.PureScript.Types.SourceConstraint]
                     @ [Language.PureScript.Environment.FunctionalDependency]
                     Language.PureScript.Sugar.TypeClasses.Deriving.$fShowNewtypeDerivedInstances_$s$fShow[]2
                     Language.PureScript.Sugar.TypeClasses.Deriving.$fShowNewtypeDerivedInstances7
                     Language.PureScript.Sugar.TypeClasses.Deriving.$fShowNewtypeDerivedInstances_$s$fShow[]
                     GHC.Show.$fShow(,)1
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [([Data.Text.Internal.Text],
                              [Language.PureScript.Types.SourceConstraint],
                              [Language.PureScript.Environment.FunctionalDependency])])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ ([Data.Text.Internal.Text],
                        [Language.PureScript.Types.SourceConstraint],
                        [Language.PureScript.Environment.FunctionalDependency])
                     (GHC.Show.$fShow(,,)_$cshowsPrec
                        @ [Data.Text.Internal.Text]
                        @ [Language.PureScript.Types.SourceConstraint]
                        @ [Language.PureScript.Environment.FunctionalDependency]
                        Language.PureScript.Sugar.TypeClasses.Deriving.$fShowNewtypeDerivedInstances_$s$fShow[]2
                        Language.PureScript.Sugar.TypeClasses.Deriving.$fShowNewtypeDerivedInstances7
                        Language.PureScript.Sugar.TypeClasses.Deriving.$fShowNewtypeDerivedInstances_$s$fShow[]
                        GHC.Show.$fShow(,)1)
                     ls
                     s) -}
db75bbae28a6501e474b51e6bbae6132
  $fShowNewtypeDerivedInstances_$s$fShowConstraint ::
    GHC.Show.Show
      (Language.PureScript.Types.Constraint
         (Language.PureScript.AST.SourcePos.SourceSpan,
          [Language.PureScript.Comments.Comment]))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Types.Constraint
                       (Language.PureScript.AST.SourcePos.SourceSpan,
                        [Language.PureScript.Comments.Comment]))
                  (Language.PureScript.Types.$fShowConstraint_$cshowsPrec
                     @ (Language.PureScript.AST.SourcePos.SourceSpan,
                        [Language.PureScript.Comments.Comment])
                     Language.PureScript.Sugar.TypeClasses.Deriving.$fShowNewtypeDerivedInstances_$s$fShow(,)2)
                  (\ (x :: Language.PureScript.Types.Constraint
                             (Language.PureScript.AST.SourcePos.SourceSpan,
                              [Language.PureScript.Comments.Comment])) ->
                   Language.PureScript.Types.$fShowConstraint_$cshowsPrec
                     @ (Language.PureScript.AST.SourcePos.SourceSpan,
                        [Language.PureScript.Comments.Comment])
                     Language.PureScript.Sugar.TypeClasses.Deriving.$fShowNewtypeDerivedInstances_$s$fShow(,)2
                     Language.PureScript.Types.$fFoldableConstraint4
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [Language.PureScript.Types.Constraint
                               (Language.PureScript.AST.SourcePos.SourceSpan,
                                [Language.PureScript.Comments.Comment])])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Language.PureScript.Types.Constraint
                          (Language.PureScript.AST.SourcePos.SourceSpan,
                           [Language.PureScript.Comments.Comment]))
                     (Language.PureScript.Types.$fShowConstraint_$cshowsPrec
                        @ (Language.PureScript.AST.SourcePos.SourceSpan,
                           [Language.PureScript.Comments.Comment])
                        Language.PureScript.Sugar.TypeClasses.Deriving.$fShowNewtypeDerivedInstances_$s$fShow(,)2
                        Language.PureScript.Types.$fFoldableConstraint4)
                     ls
                     s) -}
4be960bc841e8c1035d3e10123260615
  $fShowNewtypeDerivedInstances_$s$fShow[] ::
    GHC.Show.Show
      [Language.PureScript.Environment.FunctionalDependency]
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ [Language.PureScript.Environment.FunctionalDependency]
                  (\ (ds :: GHC.Types.Int) ->
                   Language.PureScript.Environment.$fShowFunctionalDependency_$cshowList)
                  (\ (x :: [Language.PureScript.Environment.FunctionalDependency]) ->
                   GHC.Show.showList__
                     @ Language.PureScript.Environment.FunctionalDependency
                     Language.PureScript.Environment.$fShowFunctionalDependency1
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [[Language.PureScript.Environment.FunctionalDependency]])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ [Language.PureScript.Environment.FunctionalDependency]
                     Language.PureScript.Environment.$fShowFunctionalDependency_$cshowList
                     ls
                     s) -}
2b2efa872268ed70e503573a086cbf9a
  $fShowNewtypeDerivedInstances_$s$fShow[]1 ::
    GHC.Show.Show [Language.PureScript.Comments.Comment]
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ [Language.PureScript.Comments.Comment]
                  (\ (ds :: GHC.Types.Int) ->
                   Language.PureScript.Comments.$fShowComment_$cshowList)
                  (\ (x :: [Language.PureScript.Comments.Comment]) ->
                   GHC.Show.showList__
                     @ Language.PureScript.Comments.Comment
                     Language.PureScript.Comments.$fShowComment1
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [[Language.PureScript.Comments.Comment]])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ [Language.PureScript.Comments.Comment]
                     Language.PureScript.Comments.$fShowComment_$cshowList
                     ls
                     s) -}
21dd31f198885932e4c786b70782088c
  $fShowNewtypeDerivedInstances_$s$fShow[]2 ::
    GHC.Show.Show [Data.Text.Internal.Text]
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ [Data.Text.Internal.Text]
                  (\ (ds :: GHC.Types.Int) -> Data.Text.Show.$fShowText_$cshowList)
                  (\ (x :: [Data.Text.Internal.Text]) ->
                   GHC.Show.showList__
                     @ Data.Text.Internal.Text
                     Data.Text.Show.$fShowText1
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [[Data.Text.Internal.Text]]) (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ [Data.Text.Internal.Text]
                     Data.Text.Show.$fShowText_$cshowList
                     ls
                     s) -}
63cf9df0c07ce5fcb4a88b426cd9d073
  $s$fEqQualified ::
    GHC.Classes.Eq
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName))
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.Qualified
                       (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.TypeName))
                  (Language.PureScript.Names.$fEqQualified_$c==
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.TypeName)
                     (Language.PureScript.Names.$fEqProperName
                        @ 'Language.PureScript.Names.TypeName))
                  Language.PureScript.Sugar.TypeClasses.Deriving.$s$fEqQualified_$s$fEqQualified_$c/= -}
a29887d1863eb2d58735db4b4bb88eb1
  $s$fEqQualified_$s$fEqQualified_$c/= ::
    Language.PureScript.Names.Qualified
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName)
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName)
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U(U,U,U))><S(SL),1*U(1*U,1*U(U,U,U))>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.TypeName))
                   (y :: Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.TypeName)) ->
                 case Language.PureScript.Names.$fEqQualified_$c==
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.TypeName)
                        (Language.PureScript.Names.$fEqProperName
                           @ 'Language.PureScript.Names.TypeName)
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
fe46e8423174cade50a6ea8ff0ca84b4
  $s$fOrdQualified ::
    GHC.Classes.Ord
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName))
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.Qualified
                       (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.TypeName))
                  Language.PureScript.Sugar.TypeClasses.Deriving.$s$fEqQualified
                  (Language.PureScript.Names.$fOrdQualified_$ccompare
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.TypeName)
                     (Language.PureScript.Names.$fOrdProperName
                        @ 'Language.PureScript.Names.TypeName))
                  (Language.PureScript.Names.$fOrdQualified_$c<
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.TypeName)
                     (Language.PureScript.Names.$fOrdProperName
                        @ 'Language.PureScript.Names.TypeName))
                  (\ (a1 :: Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.TypeName))
                     (b :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.TypeName)) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.TypeName)
                          (Language.PureScript.Names.$fOrdProperName
                             @ 'Language.PureScript.Names.TypeName)
                          b
                          a1 of wild {
                     GHC.Types.False -> GHC.Types.True
                     GHC.Types.True -> GHC.Types.False })
                  (\ (a1 :: Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.TypeName))
                     (b :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.TypeName)) ->
                   Language.PureScript.Names.$fOrdQualified_$c<
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.TypeName)
                     (Language.PureScript.Names.$fOrdProperName
                        @ 'Language.PureScript.Names.TypeName)
                     b
                     a1)
                  (\ (a1 :: Language.PureScript.Names.Qualified
                              (Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.TypeName))
                     (b :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.TypeName)) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.TypeName)
                          (Language.PureScript.Names.$fOrdProperName
                             @ 'Language.PureScript.Names.TypeName)
                          a1
                          b of wild {
                     GHC.Types.False -> GHC.Types.True
                     GHC.Types.True -> GHC.Types.False })
                  (\ (x :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.TypeName))
                     (y :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.TypeName)) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.TypeName)
                          (Language.PureScript.Names.$fOrdProperName
                             @ 'Language.PureScript.Names.TypeName)
                          y
                          x of wild {
                     GHC.Types.False -> y GHC.Types.True -> x })
                  (\ (x :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.TypeName))
                     (y :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.TypeName)) ->
                   case Language.PureScript.Names.$fOrdQualified_$c<
                          @ (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.TypeName)
                          (Language.PureScript.Names.$fOrdProperName
                             @ 'Language.PureScript.Names.TypeName)
                          y
                          x of wild {
                     GHC.Types.False -> x GHC.Types.True -> y }) -}
444142d855ee3ab4216cd02b8fcdbe51
  $s$fShowConstraint_$cshowList ::
    [Language.PureScript.Types.Constraint
       (Language.PureScript.AST.SourcePos.SourceSpan,
        [Language.PureScript.Comments.Comment])]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Types.Constraint
                             (Language.PureScript.AST.SourcePos.SourceSpan,
                              [Language.PureScript.Comments.Comment])])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Language.PureScript.Types.Constraint
                        (Language.PureScript.AST.SourcePos.SourceSpan,
                         [Language.PureScript.Comments.Comment]))
                   (Language.PureScript.Types.$fShowConstraint_$cshowsPrec
                      @ (Language.PureScript.AST.SourcePos.SourceSpan,
                         [Language.PureScript.Comments.Comment])
                      Language.PureScript.Sugar.TypeClasses.Deriving.$fShowNewtypeDerivedInstances_$s$fShow(,)2
                      Language.PureScript.Types.$fFoldableConstraint4)
                   ls
                   s) -}
050670ff567210fe5e6a3be0fc7cbc23
  $s$fShowConstraint_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Types.Constraint
         (Language.PureScript.AST.SourcePos.SourceSpan,
          [Language.PureScript.Comments.Comment])
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(U,1*U(1*U,U),U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w1 :: GHC.Types.Int)
                   (w2 :: Language.PureScript.Types.Constraint
                            (Language.PureScript.AST.SourcePos.SourceSpan,
                             [Language.PureScript.Comments.Comment])) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Language.PureScript.Types.Constraint ww3 ww4 ww5 ww6 ->
                 Language.PureScript.Types.$w$cshowsPrec
                   @ (Language.PureScript.AST.SourcePos.SourceSpan,
                      [Language.PureScript.Comments.Comment])
                   Language.PureScript.Sugar.TypeClasses.Deriving.$fShowNewtypeDerivedInstances_$s$fShow(,)2
                   ww1
                   ww3
                   ww4
                   ww5
                   ww6 } }) -}
ae391ee173cd28d58ca0822c8a82f7d3
  $s$wsplitS ::
    ((Language.PureScript.Names.ModuleName,
      Language.PureScript.Names.ProperName
        'Language.PureScript.Names.ClassName),
     (Language.PureScript.Names.ModuleName,
      Language.PureScript.Names.ProperName
        'Language.PureScript.Names.TypeName))
    -> Data.Set.Internal.Set
         ((Language.PureScript.Names.ModuleName,
           Language.PureScript.Names.ProperName
             'Language.PureScript.Names.ClassName),
          (Language.PureScript.Names.ModuleName,
           Language.PureScript.Names.ProperName
             'Language.PureScript.Names.TypeName))
    -> (# Data.Set.Internal.Set
            ((Language.PureScript.Names.ModuleName,
              Language.PureScript.Names.ProperName
                'Language.PureScript.Names.ClassName),
             (Language.PureScript.Names.ModuleName,
              Language.PureScript.Names.ProperName
                'Language.PureScript.Names.TypeName)),
          Data.Set.Internal.Set
            ((Language.PureScript.Names.ModuleName,
              Language.PureScript.Names.ProperName
                'Language.PureScript.Names.ClassName),
             (Language.PureScript.Names.ModuleName,
              Language.PureScript.Names.ProperName
                'Language.PureScript.Names.TypeName)) #)
  {- Arity: 2,
     Strictness: <L,1*U(U(U,U(U,U,U)),U(U,U(U,U,U)))><S,1*U>,
     Inline: [~] -}
de71b8d82b525bcd80908fe556794962
  $s$wsplit_$s$wpoly_go13 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.ModuleName,
       Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
      a
    -> Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> (# Data.Map.Internal.Map
            (Language.PureScript.Names.ModuleName,
             Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName)
            a,
          Data.Map.Internal.Map
            (Language.PureScript.Names.ModuleName,
             Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName)
            a #)
  {- Arity: 3, Strictness: <S,1*U><L,U><L,U(U,U,U)> -}
d1ecdcb2afda966694b40268fb5fe842
  $sfromList ::
    [(Language.PureScript.Names.Qualified
        (Language.PureScript.Names.ProperName
           'Language.PureScript.Names.TypeName),
      a)]
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.TypeName))
         a
  {- Arity: 1, Strictness: <S,1*U> -}
62a1351e326f5a390f413b3e542540d3
  $sinsertR_$s$w$sgo3 ::
    Data.Set.Internal.Set
      ((Language.PureScript.Names.ModuleName,
        Language.PureScript.Names.ProperName
          'Language.PureScript.Names.ClassName),
       (Language.PureScript.Names.ModuleName,
        Language.PureScript.Names.ProperName
          'Language.PureScript.Names.TypeName))
    -> (Language.PureScript.Names.ModuleName,
        Language.PureScript.Names.ProperName
          'Language.PureScript.Names.TypeName)
    -> Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> ((Language.PureScript.Names.ModuleName,
         Language.PureScript.Names.ProperName
           'Language.PureScript.Names.ClassName),
        (Language.PureScript.Names.ModuleName,
         Language.PureScript.Names.ProperName
           'Language.PureScript.Names.TypeName))
    -> Data.Set.Internal.Set
         ((Language.PureScript.Names.ModuleName,
           Language.PureScript.Names.ProperName
             'Language.PureScript.Names.ClassName),
          (Language.PureScript.Names.ModuleName,
           Language.PureScript.Names.ProperName
             'Language.PureScript.Names.TypeName))
  {- Arity: 5,
     Strictness: <S,1*U><L,U(U,U(U,U,U))><L,U><L,U(U,U,U)><L,U> -}
14943b80df8ed5f7a80a623458790b5b
  $sinsert_$s$w$sgo1 ::
    Data.Set.Internal.Set
      ((Language.PureScript.Names.ModuleName,
        Language.PureScript.Names.ProperName
          'Language.PureScript.Names.ClassName),
       (Language.PureScript.Names.ModuleName,
        Language.PureScript.Names.ProperName
          'Language.PureScript.Names.TypeName))
    -> (Language.PureScript.Names.ModuleName,
        Language.PureScript.Names.ProperName
          'Language.PureScript.Names.TypeName)
    -> Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> ((Language.PureScript.Names.ModuleName,
         Language.PureScript.Names.ProperName
           'Language.PureScript.Names.ClassName),
        (Language.PureScript.Names.ModuleName,
         Language.PureScript.Names.ProperName
           'Language.PureScript.Names.TypeName))
    -> Data.Set.Internal.Set
         ((Language.PureScript.Names.ModuleName,
           Language.PureScript.Names.ProperName
             'Language.PureScript.Names.ClassName),
          (Language.PureScript.Names.ModuleName,
           Language.PureScript.Names.ProperName
             'Language.PureScript.Names.TypeName))
  {- Arity: 5,
     Strictness: <S,1*U><L,U(U,U(U,U,U))><L,U><L,U(U,U,U)><L,U> -}
25ffe603d8b0d07d9672ca42927f7fe9
  $sinsert_$s$w$sgo13 ::
    GHC.Prim.Int#
    -> Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> a
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ModuleName,
          Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
         a
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ModuleName,
          Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
         a
    -> a
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> Language.PureScript.Names.ModuleName
    -> (Language.PureScript.Names.ModuleName,
        Language.PureScript.Names.ProperName
          'Language.PureScript.Names.ClassName)
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ModuleName,
          Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
         a
  {- Arity: 10,
     Strictness: <L,U><S,U><L,U(U,U,U)><L,U><L,U><L,U><L,U><L,U(U,U,U)><S,U><L,U> -}
e1d1ab04dfd691370c63320769850860
  $sinsert_$s$w$sgo3 ::
    GHC.Prim.Int#
    -> (Language.PureScript.Names.ModuleName,
        Language.PureScript.Names.ProperName
          'Language.PureScript.Names.ClassName)
    -> (Language.PureScript.Names.ModuleName,
        Language.PureScript.Names.ProperName
          'Language.PureScript.Names.TypeName)
    -> Data.Set.Internal.Set
         ((Language.PureScript.Names.ModuleName,
           Language.PureScript.Names.ProperName
             'Language.PureScript.Names.ClassName),
          (Language.PureScript.Names.ModuleName,
           Language.PureScript.Names.ProperName
             'Language.PureScript.Names.TypeName))
    -> Data.Set.Internal.Set
         ((Language.PureScript.Names.ModuleName,
           Language.PureScript.Names.ProperName
             'Language.PureScript.Names.ClassName),
          (Language.PureScript.Names.ModuleName,
           Language.PureScript.Names.ProperName
             'Language.PureScript.Names.TypeName))
    -> (Language.PureScript.Names.ModuleName,
        Language.PureScript.Names.ProperName
          'Language.PureScript.Names.TypeName)
    -> (Language.PureScript.Names.ModuleName,
        Language.PureScript.Names.ProperName
          'Language.PureScript.Names.ClassName)
    -> ((Language.PureScript.Names.ModuleName,
         Language.PureScript.Names.ProperName
           'Language.PureScript.Names.ClassName),
        (Language.PureScript.Names.ModuleName,
         Language.PureScript.Names.ProperName
           'Language.PureScript.Names.TypeName))
    -> Data.Set.Internal.Set
         ((Language.PureScript.Names.ModuleName,
           Language.PureScript.Names.ProperName
             'Language.PureScript.Names.ClassName),
          (Language.PureScript.Names.ModuleName,
           Language.PureScript.Names.ProperName
             'Language.PureScript.Names.TypeName))
  {- Arity: 8,
     Strictness: <L,U><S(SL),1*U(U,U(U,U,U))><L,U(U,U(U,U,U))><L,U><L,U><L,U(U,U(U,U,U))><S(SL),1*U(U,U(U,U,U))><L,U>,
     Unfolding: (\ (sc :: GHC.Prim.Int#)
                   (sc1 :: (Language.PureScript.Names.ModuleName,
                            Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ClassName))
                   (sc2 :: (Language.PureScript.Names.ModuleName,
                            Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.TypeName))
                   (sc3 :: Data.Set.Internal.Set
                             ((Language.PureScript.Names.ModuleName,
                               Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.ClassName),
                              (Language.PureScript.Names.ModuleName,
                               Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.TypeName)))
                   (sc4 :: Data.Set.Internal.Set
                             ((Language.PureScript.Names.ModuleName,
                               Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.ClassName),
                              (Language.PureScript.Names.ModuleName,
                               Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.TypeName)))
                   (sc5 :: (Language.PureScript.Names.ModuleName,
                            Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.TypeName))
                   (sc6 :: (Language.PureScript.Names.ModuleName,
                            Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ClassName))
                   (sc7 :: ((Language.PureScript.Names.ModuleName,
                             Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.ClassName),
                            (Language.PureScript.Names.ModuleName,
                             Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.TypeName))) ->
                 case sc6 of ww { (,) ww1 ww2 ->
                 case sc1 of ww3 { (,) ww4 ww5 ->
                 let {
                   $j :: Data.Set.Internal.Set
                           ((Language.PureScript.Names.ModuleName,
                             Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.ClassName),
                            (Language.PureScript.Names.ModuleName,
                             Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.TypeName))
                     <join 0>
                   = case Language.PureScript.Sugar.TypeClasses.Deriving.$sinsert_$s$w$sgo1
                            sc3
                            sc5
                            ww1
                            ww2
                            sc7 of l' { DEFAULT ->
                     case GHC.Prim.reallyUnsafePtrEquality#
                            @ (Data.Set.Internal.Set
                                 ((Language.PureScript.Names.ModuleName,
                                   Language.PureScript.Names.ProperName
                                     'Language.PureScript.Names.ClassName),
                                  (Language.PureScript.Names.ModuleName,
                                   Language.PureScript.Names.ProperName
                                     'Language.PureScript.Names.TypeName)))
                            l'
                            sc3 of wild2 {
                       DEFAULT
                       -> Data.Set.Internal.balanceL
                            @ ((Language.PureScript.Names.ModuleName,
                                Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.ClassName),
                               (Language.PureScript.Names.ModuleName,
                                Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.TypeName))
                            (ww3, sc2)
                            l'
                            sc4
                       1#
                       -> Data.Set.Internal.Bin
                            @ ((Language.PureScript.Names.ModuleName,
                                Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.ClassName),
                               (Language.PureScript.Names.ModuleName,
                                Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.TypeName))
                            sc
                            (ww3, sc2)
                            sc3
                            sc4 } }
                 } in
                 let {
                   $j1 :: Data.Set.Internal.Set
                            ((Language.PureScript.Names.ModuleName,
                              Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ClassName),
                             (Language.PureScript.Names.ModuleName,
                              Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.TypeName))
                     <join 0>
                   = case Language.PureScript.Sugar.TypeClasses.Deriving.$sinsert_$s$w$sgo1
                            sc4
                            sc5
                            ww1
                            ww2
                            sc7 of r' { DEFAULT ->
                     case GHC.Prim.reallyUnsafePtrEquality#
                            @ (Data.Set.Internal.Set
                                 ((Language.PureScript.Names.ModuleName,
                                   Language.PureScript.Names.ProperName
                                     'Language.PureScript.Names.ClassName),
                                  (Language.PureScript.Names.ModuleName,
                                   Language.PureScript.Names.ProperName
                                     'Language.PureScript.Names.TypeName)))
                            r'
                            sc4 of wild2 {
                       DEFAULT
                       -> Data.Set.Internal.balanceR
                            @ ((Language.PureScript.Names.ModuleName,
                                Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.ClassName),
                               (Language.PureScript.Names.ModuleName,
                                Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.TypeName))
                            (ww3, sc2)
                            sc3
                            r'
                       1#
                       -> Data.Set.Internal.Bin
                            @ ((Language.PureScript.Names.ModuleName,
                                Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.ClassName),
                               (Language.PureScript.Names.ModuleName,
                                Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.TypeName))
                            sc
                            (ww3, sc2)
                            sc3
                            sc4 } }
                 } in
                 case GHC.Classes.$fOrd[]_$ccompare
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.Namespace)
                        (Language.PureScript.Names.$fOrdProperName
                           @ 'Language.PureScript.Names.Namespace)
                        ww1 `cast` (Language.PureScript.Names.N:ModuleName[0])
                        ww4 `cast` (Language.PureScript.Names.N:ModuleName[0]) of wild {
                   GHC.Types.LT -> $j
                   GHC.Types.EQ
                   -> case ww2
                             `cast`
                           (Language.PureScript.Names.N:ProperName[0]
                                <'Language.PureScript.Names.ClassName>_P) of ww7 { Data.Text.Internal.Text ww8 ww9 ww10 ->
                      case ww5
                             `cast`
                           (Language.PureScript.Names.N:ProperName[0]
                                <'Language.PureScript.Names.ClassName>_P) of ww11 { Data.Text.Internal.Text ww12 ww6 ww13 ->
                      case Data.Text.$w$ccompare ww8 ww9 ww10 ww12 ww6 ww13 of wild1 {
                        GHC.Types.LT -> $j
                        GHC.Types.EQ
                        -> case sc5 of ww14 { (,) ww15 ww16 ->
                           case sc2 of ww17 { (,) ww18 ww19 ->
                           case GHC.Classes.$fOrd[]_$ccompare
                                  @ (Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.Namespace)
                                  (Language.PureScript.Names.$fOrdProperName
                                     @ 'Language.PureScript.Names.Namespace)
                                  ww15 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                  ww18 `cast` (Language.PureScript.Names.N:ModuleName[0]) of wild2 {
                             GHC.Types.LT -> $j
                             GHC.Types.EQ
                             -> case ww16
                                       `cast`
                                     (Language.PureScript.Names.N:ProperName[0]
                                          <'Language.PureScript.Names.TypeName>_P) of ww20 { Data.Text.Internal.Text ww21 ww22 ww23 ->
                                case ww19
                                       `cast`
                                     (Language.PureScript.Names.N:ProperName[0]
                                          <'Language.PureScript.Names.TypeName>_P) of ww24 { Data.Text.Internal.Text ww25 ww26 ww27 ->
                                case Data.Text.$w$ccompare ww21 ww22 ww23 ww25 ww26 ww27 of wild3 {
                                  GHC.Types.LT -> $j
                                  GHC.Types.EQ
                                  -> case GHC.Magic.lazy
                                            @ ((Language.PureScript.Names.ModuleName,
                                                Language.PureScript.Names.ProperName
                                                  'Language.PureScript.Names.ClassName),
                                               (Language.PureScript.Names.ModuleName,
                                                Language.PureScript.Names.ProperName
                                                  'Language.PureScript.Names.TypeName))
                                            sc7 of wild4 { (,) ipv ipv1 ->
                                     case GHC.Prim.reallyUnsafePtrEquality#
                                            @ ((Language.PureScript.Names.ModuleName,
                                                Language.PureScript.Names.ProperName
                                                  'Language.PureScript.Names.ClassName),
                                               (Language.PureScript.Names.ModuleName,
                                                Language.PureScript.Names.ProperName
                                                  'Language.PureScript.Names.TypeName))
                                            sc7
                                            (ww3, ww17) of wild5 {
                                       DEFAULT
                                       -> Data.Set.Internal.Bin
                                            @ ((Language.PureScript.Names.ModuleName,
                                                Language.PureScript.Names.ProperName
                                                  'Language.PureScript.Names.ClassName),
                                               (Language.PureScript.Names.ModuleName,
                                                Language.PureScript.Names.ProperName
                                                  'Language.PureScript.Names.TypeName))
                                            sc
                                            wild4
                                            sc3
                                            sc4
                                       1#
                                       -> Data.Set.Internal.Bin
                                            @ ((Language.PureScript.Names.ModuleName,
                                                Language.PureScript.Names.ProperName
                                                  'Language.PureScript.Names.ClassName),
                                               (Language.PureScript.Names.ModuleName,
                                                Language.PureScript.Names.ProperName
                                                  'Language.PureScript.Names.TypeName))
                                            sc
                                            (ww3, ww17)
                                            sc3
                                            sc4 } }
                                  GHC.Types.GT -> $j1 } } }
                             GHC.Types.GT -> $j1 } } }
                        GHC.Types.GT -> $j1 } } }
                   GHC.Types.GT -> $j1 } } }) -}
317923b505d230dc05011181d5fabd70
  $slookup_$s$wpoly_go13 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.ModuleName,
       Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
      a
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> ((Data.Text.Internal.Text :: *)
        ~R# (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName :: *)) =>
       Language.PureScript.Names.ModuleName -> GHC.Base.Maybe a
  {- Arity: 6, HasNoCafRefs,
     Strictness: <S,1*U><L,U><L,U><L,U><L,U><L,U> -}
84caa099ea160b7b5ae82af4de6ee117
  $smember_$s$wgo1 ::
    Data.Set.Internal.Set
      ((Language.PureScript.Names.ModuleName,
        Language.PureScript.Names.ProperName
          'Language.PureScript.Names.ClassName),
       (Language.PureScript.Names.ModuleName,
        Language.PureScript.Names.ProperName
          'Language.PureScript.Names.TypeName))
    -> Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName
    -> Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> GHC.Types.Bool
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S,1*U><L,U><L,1*U(U,U,U)><L,U><L,1*U(U,U,U)> -}
934d6dd47795e36224271e32e01f4b04
  $smember_$s$wgo3 ::
    Data.Set.Internal.Set
      ((Language.PureScript.Names.ModuleName,
        Language.PureScript.Names.ProperName
          'Language.PureScript.Names.ClassName),
       (Language.PureScript.Names.ModuleName,
        Language.PureScript.Names.ProperName
          'Language.PureScript.Names.TypeName))
    -> (Language.PureScript.Names.ModuleName,
        Language.PureScript.Names.ProperName
          'Language.PureScript.Names.TypeName)
    -> Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U(U,1*U(U,U,U))><L,U><L,1*U(U,U,U)> -}
2a2a541da3e0a1b73e913d6fcaa90cb2
  $tc'NewtypeDerivedInstances :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10504505900702799790##
                   6000530440938872442##
                   Language.PureScript.Sugar.TypeClasses.Deriving.$trModule
                   Language.PureScript.Sugar.TypeClasses.Deriving.$tc'NewtypeDerivedInstances2
                   0#
                   Language.PureScript.Sugar.TypeClasses.Deriving.$tc'NewtypeDerivedInstances1) -}
ccfd04d30b1108e472f0abe4d3bc876c
  $tc'NewtypeDerivedInstances1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
9d7f45ad2d25d4d5e5c4d0fab3478ad4
  $tc'NewtypeDerivedInstances2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Sugar.TypeClasses.Deriving.$tc'NewtypeDerivedInstances3) -}
3f4fbc44162b25e80d2bc5814b142e1f
  $tc'NewtypeDerivedInstances3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'NewtypeDerivedInstances"#) -}
54caa8015ae1091e258af81ebfeebbdf
  $tcNewtypeDerivedInstances :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8524383316762404577##
                   6235591659854011481##
                   Language.PureScript.Sugar.TypeClasses.Deriving.$trModule
                   Language.PureScript.Sugar.TypeClasses.Deriving.$tcNewtypeDerivedInstances1
                   0#
                   GHC.Types.krep$*) -}
052cabe0697597af4307ca4a1cb26927
  $tcNewtypeDerivedInstances1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Sugar.TypeClasses.Deriving.$tcNewtypeDerivedInstances2) -}
6b9aa910420faa6b8b11f4301a4dde4e
  $tcNewtypeDerivedInstances2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("NewtypeDerivedInstances"#) -}
08cfd5afd42a5a05d33396a7a7c5ce80
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Language.PureScript.Sugar.TypeClasses.Deriving.$trModule3
                   Language.PureScript.Sugar.TypeClasses.Deriving.$trModule1) -}
8234e7a093567b9371e9fb6ae248249c
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Sugar.TypeClasses.Deriving.$trModule2) -}
2aa4cbe700400c8bb091079754a698bb
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Language.PureScript.Sugar.TypeClasses.Deriving"#) -}
6a18118510cfafa56db06ddfc6d48800
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Sugar.TypeClasses.Deriving.$trModule4) -}
f1ace909f93915252c22c465b1ded2dc
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"#) -}
ddc84d35fda9d9a8cd9f6c34abf81c7e
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ModuleName,
          Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
         ([Data.Text.Internal.Text],
          [Language.PureScript.Types.SourceConstraint],
          [Language.PureScript.Environment.FunctionalDependency])
    -> Data.Set.Internal.Set
         ((Language.PureScript.Names.ModuleName,
           Language.PureScript.Names.ProperName
             'Language.PureScript.Names.ClassName),
          (Language.PureScript.Names.ModuleName,
           Language.PureScript.Names.ProperName
             'Language.PureScript.Names.TypeName))
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,U><L,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Data.Map.Internal.Map
                             (Language.PureScript.Names.ModuleName,
                              Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ClassName)
                             ([Data.Text.Internal.Text],
                              [Language.PureScript.Types.SourceConstraint],
                              [Language.PureScript.Environment.FunctionalDependency]))
                   (ww2 :: Data.Set.Internal.Set
                             ((Language.PureScript.Names.ModuleName,
                               Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.ClassName),
                              (Language.PureScript.Names.ModuleName,
                               Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.TypeName))) ->
                 let {
                   f5 :: GHC.Base.String -> GHC.Base.String
                   = Data.Map.Internal.$w$cshowsPrec
                       @ (Language.PureScript.Names.ModuleName,
                          Language.PureScript.Names.ProperName
                            'Language.PureScript.Names.ClassName)
                       @ ([Data.Text.Internal.Text],
                          [Language.PureScript.Types.SourceConstraint],
                          [Language.PureScript.Environment.FunctionalDependency])
                       Language.PureScript.Sugar.TypeClasses.Deriving.$fShowNewtypeDerivedInstances_$s$fShow(,)1
                       Language.PureScript.Sugar.TypeClasses.Deriving.$fShowNewtypeDerivedInstances_$s$fShow(,,)
                       0#
                       ww1
                 } in
                 let {
                   f6 :: GHC.Base.String -> GHC.Base.String
                   = Data.Set.Internal.$w$cshowsPrec
                       @ ((Language.PureScript.Names.ModuleName,
                           Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ClassName),
                          (Language.PureScript.Names.ModuleName,
                           Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.TypeName))
                       Language.PureScript.Sugar.TypeClasses.Deriving.$fShowNewtypeDerivedInstances6
                       0#
                       ww2
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> \ (x :: GHC.Base.String) ->
                      GHC.CString.unpackAppendCString#
                        Language.PureScript.Sugar.TypeClasses.Deriving.$fShowNewtypeDerivedInstances5
                        (GHC.CString.unpackAppendCString#
                           Language.PureScript.Sugar.TypeClasses.Deriving.$fShowNewtypeDerivedInstances4
                           (f5
                              (GHC.Base.++
                                 @ GHC.Types.Char
                                 GHC.Show.showCommaSpace1
                                 (GHC.CString.unpackAppendCString#
                                    Language.PureScript.Sugar.TypeClasses.Deriving.$fShowNewtypeDerivedInstances3
                                    (f6
                                       (GHC.CString.unpackAppendCString#
                                          Language.PureScript.Sugar.TypeClasses.Deriving.$fShowNewtypeDerivedInstances2
                                          x))))))
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.CString.unpackAppendCString#
                           Language.PureScript.Sugar.TypeClasses.Deriving.$fShowNewtypeDerivedInstances5
                           (GHC.CString.unpackAppendCString#
                              Language.PureScript.Sugar.TypeClasses.Deriving.$fShowNewtypeDerivedInstances4
                              (f5
                                 (GHC.Base.++
                                    @ GHC.Types.Char
                                    GHC.Show.showCommaSpace1
                                    (GHC.CString.unpackAppendCString#
                                       Language.PureScript.Sugar.TypeClasses.Deriving.$fShowNewtypeDerivedInstances3
                                       (f6
                                          (GHC.CString.unpackAppendCString#
                                             Language.PureScript.Sugar.TypeClasses.Deriving.$fShowNewtypeDerivedInstances2
                                             (GHC.Types.:
                                                @ GHC.Types.Char
                                                GHC.Show.$fShow(,)2
                                                x)))))))) }) -}
6b6f3b9d7ce58096ec1caabf4c8ce5a5
  $w$sgo1 ::
    ((Language.PureScript.Names.ModuleName,
      Language.PureScript.Names.ProperName
        'Language.PureScript.Names.ClassName),
     (Language.PureScript.Names.ModuleName,
      Language.PureScript.Names.ProperName
        'Language.PureScript.Names.TypeName))
    -> (Language.PureScript.Names.ModuleName,
        Language.PureScript.Names.ProperName
          'Language.PureScript.Names.ClassName)
    -> (Language.PureScript.Names.ModuleName,
        Language.PureScript.Names.ProperName
          'Language.PureScript.Names.TypeName)
    -> Data.Set.Internal.Set
         ((Language.PureScript.Names.ModuleName,
           Language.PureScript.Names.ProperName
             'Language.PureScript.Names.ClassName),
          (Language.PureScript.Names.ModuleName,
           Language.PureScript.Names.ProperName
             'Language.PureScript.Names.TypeName))
    -> Data.Set.Internal.Set
         ((Language.PureScript.Names.ModuleName,
           Language.PureScript.Names.ProperName
             'Language.PureScript.Names.ClassName),
          (Language.PureScript.Names.ModuleName,
           Language.PureScript.Names.ProperName
             'Language.PureScript.Names.TypeName))
  {- Arity: 4,
     Strictness: <L,U><L,1*U(U,U(U,U,U))><L,U(U,U(U,U,U))><S,1*U>,
     Inline: [0],
     Unfolding: (\ (w :: ((Language.PureScript.Names.ModuleName,
                           Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ClassName),
                          (Language.PureScript.Names.ModuleName,
                           Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.TypeName)))
                   (ww :: (Language.PureScript.Names.ModuleName,
                           Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ClassName))
                   (ww1 :: (Language.PureScript.Names.ModuleName,
                            Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.TypeName))
                   (w1 :: Data.Set.Internal.Set
                            ((Language.PureScript.Names.ModuleName,
                              Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ClassName),
                             (Language.PureScript.Names.ModuleName,
                              Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.TypeName))) ->
                 case w1 of wild {
                   Data.Set.Internal.Bin dt y l r
                   -> case y of ww3 { (,) ww4 ww5 ->
                      case ww of ww2 { (,) ww6 ww7 ->
                      case ww4 of ww8 { (,) ww9 ww10 ->
                      let {
                        $j :: Data.Set.Internal.Set
                                ((Language.PureScript.Names.ModuleName,
                                  Language.PureScript.Names.ProperName
                                    'Language.PureScript.Names.ClassName),
                                 (Language.PureScript.Names.ModuleName,
                                  Language.PureScript.Names.ProperName
                                    'Language.PureScript.Names.TypeName))
                          <join 0>
                        = case Language.PureScript.Sugar.TypeClasses.Deriving.$sinsertR_$s$w$sgo3
                                 l
                                 ww1
                                 ww6
                                 ww7
                                 w of l' { DEFAULT ->
                          case GHC.Prim.reallyUnsafePtrEquality#
                                 @ (Data.Set.Internal.Set
                                      ((Language.PureScript.Names.ModuleName,
                                        Language.PureScript.Names.ProperName
                                          'Language.PureScript.Names.ClassName),
                                       (Language.PureScript.Names.ModuleName,
                                        Language.PureScript.Names.ProperName
                                          'Language.PureScript.Names.TypeName)))
                                 l'
                                 l of wild2 {
                            DEFAULT
                            -> Data.Set.Internal.balanceL
                                 @ ((Language.PureScript.Names.ModuleName,
                                     Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.ClassName),
                                    (Language.PureScript.Names.ModuleName,
                                     Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.TypeName))
                                 ww3
                                 l'
                                 r
                            1# -> wild } }
                      } in
                      let {
                        $j1 :: Data.Set.Internal.Set
                                 ((Language.PureScript.Names.ModuleName,
                                   Language.PureScript.Names.ProperName
                                     'Language.PureScript.Names.ClassName),
                                  (Language.PureScript.Names.ModuleName,
                                   Language.PureScript.Names.ProperName
                                     'Language.PureScript.Names.TypeName))
                          <join 0>
                        = case Language.PureScript.Sugar.TypeClasses.Deriving.$sinsertR_$s$w$sgo3
                                 r
                                 ww1
                                 ww6
                                 ww7
                                 w of r' { DEFAULT ->
                          case GHC.Prim.reallyUnsafePtrEquality#
                                 @ (Data.Set.Internal.Set
                                      ((Language.PureScript.Names.ModuleName,
                                        Language.PureScript.Names.ProperName
                                          'Language.PureScript.Names.ClassName),
                                       (Language.PureScript.Names.ModuleName,
                                        Language.PureScript.Names.ProperName
                                          'Language.PureScript.Names.TypeName)))
                                 r'
                                 r of wild2 {
                            DEFAULT
                            -> Data.Set.Internal.balanceR
                                 @ ((Language.PureScript.Names.ModuleName,
                                     Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.ClassName),
                                    (Language.PureScript.Names.ModuleName,
                                     Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.TypeName))
                                 ww3
                                 l
                                 r'
                            1# -> wild } }
                      } in
                      case GHC.Classes.$fOrd[]_$ccompare
                             @ (Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.Namespace)
                             (Language.PureScript.Names.$fOrdProperName
                                @ 'Language.PureScript.Names.Namespace)
                             ww6 `cast` (Language.PureScript.Names.N:ModuleName[0])
                             ww9 `cast` (Language.PureScript.Names.N:ModuleName[0]) of wild1 {
                        GHC.Types.LT -> $j
                        GHC.Types.EQ
                        -> case ww7
                                  `cast`
                                (Language.PureScript.Names.N:ProperName[0]
                                     <'Language.PureScript.Names.ClassName>_P) of ww11 { Data.Text.Internal.Text ww12 ww13 ww14 ->
                           case ww10
                                  `cast`
                                (Language.PureScript.Names.N:ProperName[0]
                                     <'Language.PureScript.Names.ClassName>_P) of ww15 { Data.Text.Internal.Text ww16 ww17 ww18 ->
                           case Data.Text.$w$ccompare ww12 ww13 ww14 ww16 ww17 ww18 of wild2 {
                             GHC.Types.LT -> $j
                             GHC.Types.EQ
                             -> case ww1 of ww19 { (,) ww20 ww21 ->
                                case ww5 of ww22 { (,) ww23 ww24 ->
                                case GHC.Classes.$fOrd[]_$ccompare
                                       @ (Language.PureScript.Names.ProperName
                                            'Language.PureScript.Names.Namespace)
                                       (Language.PureScript.Names.$fOrdProperName
                                          @ 'Language.PureScript.Names.Namespace)
                                       ww20 `cast` (Language.PureScript.Names.N:ModuleName[0])
                                       ww23
                                         `cast`
                                       (Language.PureScript.Names.N:ModuleName[0]) of wild3 {
                                  GHC.Types.LT -> $j
                                  GHC.Types.EQ
                                  -> case ww21
                                            `cast`
                                          (Language.PureScript.Names.N:ProperName[0]
                                               <'Language.PureScript.Names.TypeName>_P) of ww25 { Data.Text.Internal.Text ww26 ww27 ww28 ->
                                     case ww24
                                            `cast`
                                          (Language.PureScript.Names.N:ProperName[0]
                                               <'Language.PureScript.Names.TypeName>_P) of ww29 { Data.Text.Internal.Text ww30 ww31 ww32 ->
                                     case Data.Text.$w$ccompare
                                            ww26
                                            ww27
                                            ww28
                                            ww30
                                            ww31
                                            ww32 of wild4 {
                                       GHC.Types.LT -> $j
                                       GHC.Types.EQ -> wild
                                       GHC.Types.GT -> $j1 } } }
                                  GHC.Types.GT -> $j1 } } }
                             GHC.Types.GT -> $j1 } } }
                        GHC.Types.GT -> $j1 } } } }
                   Data.Set.Internal.Tip
                   -> case GHC.Magic.lazy
                             @ ((Language.PureScript.Names.ModuleName,
                                 Language.PureScript.Names.ProperName
                                   'Language.PureScript.Names.ClassName),
                                (Language.PureScript.Names.ModuleName,
                                 Language.PureScript.Names.ProperName
                                   'Language.PureScript.Names.TypeName))
                             w of dt { (,) ipv ipv1 ->
                      Data.Set.Internal.Bin
                        @ ((Language.PureScript.Names.ModuleName,
                            Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ClassName),
                           (Language.PureScript.Names.ModuleName,
                            Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.TypeName))
                        1#
                        dt
                        (Data.Set.Internal.Tip
                           @ ((Language.PureScript.Names.ModuleName,
                               Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.ClassName),
                              (Language.PureScript.Names.ModuleName,
                               Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.TypeName)))
                        (Data.Set.Internal.Tip
                           @ ((Language.PureScript.Names.ModuleName,
                               Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.ClassName),
                              (Language.PureScript.Names.ModuleName,
                               Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.TypeName))) } }) -}
76e3a10550ce1fba7fe2f3ea4eadcdda
  $w$sgo13 ::
    (Language.PureScript.Names.ModuleName,
     Language.PureScript.Names.ProperName
       'Language.PureScript.Names.ClassName)
    -> Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> a1
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ModuleName,
          Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
         a1
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ModuleName,
          Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
         a1
  {- Arity: 5, Strictness: <L,U><L,U><L,U(U,U,U)><L,U><S,1*U>,
     Inline: [0] -}
6c26091c681e39e611646eb7be259051
  $w$sgo2 ::
    (Language.PureScript.Names.ModuleName,
     Language.PureScript.Names.ProperName
       'Language.PureScript.Names.ClassName)
    -> Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> a1
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ModuleName,
          Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
         a1
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ModuleName,
          Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
         a1
  {- Arity: 5, Strictness: <L,U><L,U><L,U(U,U,U)><L,U><S,1*U>,
     Inline: [0] -}
6bce8bdd1a943a7315de7e59b1f89e68
  $wgo ::
    [Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances]
    -> (# Data.Map.Internal.Map
            (Language.PureScript.Names.ModuleName,
             Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName)
            ([Data.Text.Internal.Text],
             [Language.PureScript.Types.SourceConstraint],
             [Language.PureScript.Environment.FunctionalDependency]),
          Data.Set.Internal.Set
            ((Language.PureScript.Names.ModuleName,
              Language.PureScript.Names.ProperName
                'Language.PureScript.Names.ClassName),
             (Language.PureScript.Names.ModuleName,
              Language.PureScript.Names.ProperName
                'Language.PureScript.Names.TypeName)) #)
  {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
a6c99eebefad2b5979c24641222c4f7a
  $wpoly_go13 ::
    Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ModuleName,
          Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
         a
    -> GHC.Base.Maybe a
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,1*U(U,U,U)><S,1*U>,
     Inline: [0] -}
6bce8bdd1a943a7315de7e59b1f89e68
  data NewtypeDerivedInstances
    = NewtypeDerivedInstances {ndiClasses :: Data.Map.Internal.Map
                                               (Language.PureScript.Names.ModuleName,
                                                Language.PureScript.Names.ProperName
                                                  'Language.PureScript.Names.ClassName)
                                               ([Data.Text.Internal.Text],
                                                [Language.PureScript.Types.SourceConstraint],
                                                [Language.PureScript.Environment.FunctionalDependency]),
                               ndiDerivedInstances :: Data.Set.Internal.Set
                                                        ((Language.PureScript.Names.ModuleName,
                                                          Language.PureScript.Names.ProperName
                                                            'Language.PureScript.Names.ClassName),
                                                         (Language.PureScript.Names.ModuleName,
                                                          Language.PureScript.Names.ProperName
                                                            'Language.PureScript.Names.TypeName))}
3a3e521fca5377cd4c1a9c0a72ac65f1
  deriveInstances ::
    (Control.Monad.Error.Class.MonadError
       Language.PureScript.Errors.MultipleErrors m,
     Control.Monad.Writer.Class.MonadWriter
       Language.PureScript.Errors.MultipleErrors m,
     Control.Monad.Supply.Class.MonadSupply m) =>
    [Language.PureScript.Externs.ExternsFile]
    -> Language.PureScript.AST.Declarations.Module
    -> m Language.PureScript.AST.Declarations.Module
  {- Arity: 3,
     Strictness: <L,U(U(U(1*U(C(C1(U)),A),C(U),C(C1(U)),C(C1(C1(U))),C(C1(U)),A),C(C1(U)),C(C1(U)),C(U),A),C(U),A)><L,U(A,A,A,C(U),A,A)><L,U(U(U(U(C(C1(U)),A),A,A,A,A,A),A,A,A,A),U,A)> -}
6bce8bdd1a943a7315de7e59b1f89e68
  ndiClasses ::
    Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ModuleName,
          Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
         ([Data.Text.Internal.Text],
          [Language.PureScript.Types.SourceConstraint],
          [Language.PureScript.Environment.FunctionalDependency])
  RecSel Left Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances) ->
                 case ds of wild { Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances ds1 ds2 ->
                 ds1 }) -}
6bce8bdd1a943a7315de7e59b1f89e68
  ndiDerivedInstances ::
    Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances
    -> Data.Set.Internal.Set
         ((Language.PureScript.Names.ModuleName,
           Language.PureScript.Names.ProperName
             'Language.PureScript.Names.ClassName),
          (Language.PureScript.Names.ModuleName,
           Language.PureScript.Names.ProperName
             'Language.PureScript.Names.TypeName))
  RecSel Left Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances) ->
                 case ds of wild { Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances ds1 ds2 ->
                 ds2 }) -}
instance GHC.Base.Monoid [Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances]
  = Language.PureScript.Sugar.TypeClasses.Deriving.$fMonoidNewtypeDerivedInstances
instance GHC.Base.Semigroup [Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances]
  = Language.PureScript.Sugar.TypeClasses.Deriving.$fSemigroupNewtypeDerivedInstances
instance GHC.Show.Show [Language.PureScript.Sugar.TypeClasses.Deriving.NewtypeDerivedInstances]
  = Language.PureScript.Sugar.TypeClasses.Deriving.$fShowNewtypeDerivedInstances
"SC:$w$sgo130" [0] forall @ a
                          (sc :: GHC.Prim.Int#)
                          (sc1 :: Language.PureScript.Names.ModuleName)
                          (sc2 :: Language.PureScript.Names.ProperName
                                    'Language.PureScript.Names.ClassName)
                          (sc3 :: a)
                          (sc4 :: Data.Map.Internal.Map
                                    (Language.PureScript.Names.ModuleName,
                                     Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.ClassName)
                                    a)
                          (sc5 :: Data.Map.Internal.Map
                                    (Language.PureScript.Names.ModuleName,
                                     Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.ClassName)
                                    a)
                          (sc6 :: a)
                          (sc7 :: Language.PureScript.Names.ProperName
                                    'Language.PureScript.Names.ClassName)
                          (sc8 :: Language.PureScript.Names.ModuleName)
                          (sc9 :: (Language.PureScript.Names.ModuleName,
                                   Language.PureScript.Names.ProperName
                                     'Language.PureScript.Names.ClassName))
  Language.PureScript.Sugar.TypeClasses.Deriving.$w$sgo13 @ a
                                                          sc9
                                                          sc8
                                                          sc7
                                                          sc6
                                                          (Data.Map.Internal.Bin
                                                             @ (Language.PureScript.Names.ModuleName,
                                                                Language.PureScript.Names.ProperName
                                                                  'Language.PureScript.Names.ClassName)
                                                             @ a
                                                             sc
                                                             (sc1, sc2)
                                                             sc3
                                                             sc4
                                                             sc5)
  = Language.PureScript.Sugar.TypeClasses.Deriving.$sinsert_$s$w$sgo13
      @ a
      sc
      sc1
      sc2
      sc3
      sc4
      sc5
      sc6
      sc7
      sc8
      sc9
"SC:$w$sgo30" [0] forall (sc :: Data.Set.Internal.Set
                                  ((Language.PureScript.Names.ModuleName,
                                    Language.PureScript.Names.ProperName
                                      'Language.PureScript.Names.ClassName),
                                   (Language.PureScript.Names.ModuleName,
                                    Language.PureScript.Names.ProperName
                                      'Language.PureScript.Names.TypeName)))
                         (sc1 :: (Language.PureScript.Names.ModuleName,
                                  Language.PureScript.Names.ProperName
                                    'Language.PureScript.Names.TypeName))
                         (sc2 :: Language.PureScript.Names.ModuleName)
                         (sc3 :: Language.PureScript.Names.ProperName
                                   'Language.PureScript.Names.ClassName)
                         (sc4 :: ((Language.PureScript.Names.ModuleName,
                                   Language.PureScript.Names.ProperName
                                     'Language.PureScript.Names.ClassName),
                                  (Language.PureScript.Names.ModuleName,
                                   Language.PureScript.Names.ProperName
                                     'Language.PureScript.Names.TypeName)))
  Language.PureScript.Sugar.TypeClasses.Deriving.$w$sgo1 sc4
                                                         (sc2, sc3)
                                                         sc1
                                                         sc
  = Language.PureScript.Sugar.TypeClasses.Deriving.$sinsertR_$s$w$sgo3
      sc
      sc1
      sc2
      sc3
      sc4
"SC:$wpoly_go130" [0] forall @ a
                             (sc :: Data.Map.Internal.Map
                                      (Language.PureScript.Names.ModuleName,
                                       Language.PureScript.Names.ProperName
                                         'Language.PureScript.Names.ClassName)
                                      a)
                             (sc1 :: GHC.Prim.ByteArray#)
                             (sc2 :: GHC.Prim.Int#)
                             (sc3 :: GHC.Prim.Int#)
                             (sg :: (Data.Text.Internal.Text :: *)
                                    ~R# (Language.PureScript.Names.ProperName
                                           'Language.PureScript.Names.ClassName :: *))
                             (sc4 :: Language.PureScript.Names.ModuleName)
  Language.PureScript.Sugar.TypeClasses.Deriving.$wpoly_go13 @ a
                                                             sc4
                                                             (Data.Text.Internal.Text sc1 sc2 sc3)
                                                               `cast`
                                                             sg
                                                             sc
  = Language.PureScript.Sugar.TypeClasses.Deriving.$slookup_$s$wpoly_go13
      @ a
      sc
      sc1
      sc2
      sc3
      @~ sg
      sc4
"SPEC/Language.PureScript.Sugar.TypeClasses.Deriving $fEqQualified @ (ProperName
                                                                       'TypeName)" [orphan] forall (v :: GHC.Classes.Eq
                                                                                                                                                                                            (Language.PureScript.Names.ProperName
                                                                                                                                                                                               'Language.PureScript.Names.TypeName))
  Language.PureScript.Names.$fEqQualified @ (Language.PureScript.Names.ProperName
                                               'Language.PureScript.Names.TypeName)
                                          v
  = Language.PureScript.Sugar.TypeClasses.Deriving.$s$fEqQualified
"SPEC/Language.PureScript.Sugar.TypeClasses.Deriving $fEqQualified_$c/= @ (ProperName
                                                                            'TypeName)" [orphan] forall ($dEq :: GHC.Classes.Eq
                                                                                                                                                                                                         (Language.PureScript.Names.ProperName
                                                                                                                                                                                                            'Language.PureScript.Names.TypeName))
  Language.PureScript.Names.$fEqQualified_$c/= @ (Language.PureScript.Names.ProperName
                                                    'Language.PureScript.Names.TypeName)
                                               $dEq
  = Language.PureScript.Sugar.TypeClasses.Deriving.$s$fEqQualified_$s$fEqQualified_$c/=
"SPEC/Language.PureScript.Sugar.TypeClasses.Deriving $fOrdQualified @ (ProperName
                                                                        'TypeName)" [orphan] forall (v :: GHC.Classes.Ord
                                                                                                                                                                                              (Language.PureScript.Names.ProperName
                                                                                                                                                                                                 'Language.PureScript.Names.TypeName))
  Language.PureScript.Names.$fOrdQualified @ (Language.PureScript.Names.ProperName
                                                'Language.PureScript.Names.TypeName)
                                           v
  = Language.PureScript.Sugar.TypeClasses.Deriving.$s$fOrdQualified
"SPEC/Language.PureScript.Sugar.TypeClasses.Deriving $fShow(,) @ ModuleName @ (ProperName
                                                                                'ClassName)" [orphan] forall (v1 :: GHC.Show.Show
                                                                                                                                                                                                                (Language.PureScript.Names.ProperName
                                                                                                                                                                                                                   'Language.PureScript.Names.ClassName))
                                                                                                                                                                                                       (v :: GHC.Show.Show
                                                                                                                                                                                                               Language.PureScript.Names.ModuleName)
  GHC.Show.$fShow(,) @ Language.PureScript.Names.ModuleName
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ClassName)
                     v
                     v1
  = Language.PureScript.Sugar.TypeClasses.Deriving.$fShowNewtypeDerivedInstances_$s$fShow(,)1
"SPEC/Language.PureScript.Sugar.TypeClasses.Deriving $fShow(,) @ ModuleName @ (ProperName
                                                                                'TypeName)" [orphan] forall (v1 :: GHC.Show.Show
                                                                                                                                                                                                               (Language.PureScript.Names.ProperName
                                                                                                                                                                                                                  'Language.PureScript.Names.TypeName))
                                                                                                                                                                                                      (v :: GHC.Show.Show
                                                                                                                                                                                                              Language.PureScript.Names.ModuleName)
  GHC.Show.$fShow(,) @ Language.PureScript.Names.ModuleName
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.TypeName)
                     v
                     v1
  = Language.PureScript.Sugar.TypeClasses.Deriving.$fShowNewtypeDerivedInstances_$s$fShow(,)
"SPEC/Language.PureScript.Sugar.TypeClasses.Deriving $fShow(,) @ SourceSpan @ [Comment]" [orphan] forall (v1 :: GHC.Show.Show
                                                                                                                  [Language.PureScript.Comments.Comment])
                                                                                                         (v :: GHC.Show.Show
                                                                                                                 Language.PureScript.AST.SourcePos.SourceSpan)
  GHC.Show.$fShow(,) @ Language.PureScript.AST.SourcePos.SourceSpan
                     @ [Language.PureScript.Comments.Comment]
                     v
                     v1
  = Language.PureScript.Sugar.TypeClasses.Deriving.$fShowNewtypeDerivedInstances_$s$fShow(,)2
"SPEC/Language.PureScript.Sugar.TypeClasses.Deriving $fShow(,,) @ [Text] @ [SourceConstraint] @ [FunctionalDependency]" [orphan] forall (v2 :: GHC.Show.Show
                                                                                                                                                 [Language.PureScript.Environment.FunctionalDependency])
                                                                                                                                        (v1 :: GHC.Show.Show
                                                                                                                                                 [Language.PureScript.Types.SourceConstraint])
                                                                                                                                        (v :: GHC.Show.Show
                                                                                                                                                [Data.Text.Internal.Text])
  GHC.Show.$fShow(,,) @ [Data.Text.Internal.Text]
                      @ [Language.PureScript.Types.SourceConstraint]
                      @ [Language.PureScript.Environment.FunctionalDependency]
                      v
                      v1
                      v2
  = Language.PureScript.Sugar.TypeClasses.Deriving.$fShowNewtypeDerivedInstances_$s$fShow(,,)
"SPEC/Language.PureScript.Sugar.TypeClasses.Deriving $fShowConstraint @ (SourceSpan,
                                                                        [Comment])" [orphan] forall (v :: GHC.Show.Show
                                                                                                                                                                                                 (Language.PureScript.AST.SourcePos.SourceSpan,
                                                                                                                                                                                                  [Language.PureScript.Comments.Comment]))
  Language.PureScript.Types.$fShowConstraint @ (Language.PureScript.AST.SourcePos.SourceSpan,
                                                [Language.PureScript.Comments.Comment])
                                             v
  = Language.PureScript.Sugar.TypeClasses.Deriving.$fShowNewtypeDerivedInstances_$s$fShowConstraint
"SPEC/Language.PureScript.Sugar.TypeClasses.Deriving $fShowConstraint_$cshowList @ (SourceSpan,
                                                                                   [Comment])" [orphan] forall ($dShow :: GHC.Show.Show
                                                                                                                                                                                                                            (Language.PureScript.AST.SourcePos.SourceSpan,
                                                                                                                                                                                                                             [Language.PureScript.Comments.Comment]))
  Language.PureScript.Types.$fShowConstraint_$cshowList @ (Language.PureScript.AST.SourcePos.SourceSpan,
                                                           [Language.PureScript.Comments.Comment])
                                                        $dShow
  = Language.PureScript.Sugar.TypeClasses.Deriving.$s$fShowConstraint_$cshowList
"SPEC/Language.PureScript.Sugar.TypeClasses.Deriving $fShowConstraint_$cshowsPrec @ (SourceSpan,
                                                                                    [Comment])" [orphan] [0] forall (w :: GHC.Show.Show
                                                                                                                                                                                                                             (Language.PureScript.AST.SourcePos.SourceSpan,
                                                                                                                                                                                                                              [Language.PureScript.Comments.Comment]))
  Language.PureScript.Types.$fShowConstraint_$cshowsPrec @ (Language.PureScript.AST.SourcePos.SourceSpan,
                                                            [Language.PureScript.Comments.Comment])
                                                         w
  = Language.PureScript.Sugar.TypeClasses.Deriving.$s$fShowConstraint_$cshowsPrec
"SPEC/Language.PureScript.Sugar.TypeClasses.Deriving $fShow[] @ Comment" [orphan] forall (v :: GHC.Show.Show
                                                                                                 Language.PureScript.Comments.Comment)
  GHC.Show.$fShow[] @ Language.PureScript.Comments.Comment v
  = Language.PureScript.Sugar.TypeClasses.Deriving.$fShowNewtypeDerivedInstances_$s$fShow[]1
"SPEC/Language.PureScript.Sugar.TypeClasses.Deriving $fShow[] @ FunctionalDependency" [orphan] forall (v :: GHC.Show.Show
                                                                                                              Language.PureScript.Environment.FunctionalDependency)
  GHC.Show.$fShow[] @ Language.PureScript.Environment.FunctionalDependency
                    v
  = Language.PureScript.Sugar.TypeClasses.Deriving.$fShowNewtypeDerivedInstances_$s$fShow[]
"SPEC/Language.PureScript.Sugar.TypeClasses.Deriving $fShow[] @ Text" [orphan] forall (v :: GHC.Show.Show
                                                                                              Data.Text.Internal.Text)
  GHC.Show.$fShow[] @ Data.Text.Internal.Text v
  = Language.PureScript.Sugar.TypeClasses.Deriving.$fShowNewtypeDerivedInstances_$s$fShow[]2
"SPEC/Language.PureScript.Sugar.TypeClasses.Deriving $wsplitS @ ((ModuleName,
                                                                 ProperName 'ClassName),
                                                                (ModuleName, ProperName 'TypeName))" [orphan] [0] forall (w :: GHC.Classes.Ord
                                                                                                                                                                                                                                                                                                        ((Language.PureScript.Names.ModuleName,
                                                                                                                                                                                                                                                                                                          Language.PureScript.Names.ProperName
                                                                                                                                                                                                                                                                                                            'Language.PureScript.Names.ClassName),
                                                                                                                                                                                                                                                                                                         (Language.PureScript.Names.ModuleName,
                                                                                                                                                                                                                                                                                                          Language.PureScript.Names.ProperName
                                                                                                                                                                                                                                                                                                            'Language.PureScript.Names.TypeName)))
  Data.Set.Internal.$wsplitS @ ((Language.PureScript.Names.ModuleName,
                                 Language.PureScript.Names.ProperName
                                   'Language.PureScript.Names.ClassName),
                                (Language.PureScript.Names.ModuleName,
                                 Language.PureScript.Names.ProperName
                                   'Language.PureScript.Names.TypeName))
                             w
  = Language.PureScript.Sugar.TypeClasses.Deriving.$s$wsplitS
"SPEC/Language.PureScript.Sugar.TypeClasses.Deriving fromList @ (Qualified
                                                                  (ProperName 'TypeName)) _" [orphan] forall @ a
                                                                                                                                                                                        ($dOrd :: GHC.Classes.Ord
                                                                                                                                                                                                    (Language.PureScript.Names.Qualified
                                                                                                                                                                                                       (Language.PureScript.Names.ProperName
                                                                                                                                                                                                          'Language.PureScript.Names.TypeName)))
  Data.Map.Internal.fromList @ (Language.PureScript.Names.Qualified
                                  (Language.PureScript.Names.ProperName
                                     'Language.PureScript.Names.TypeName))
                             @ a
                             $dOrd
  = Language.PureScript.Sugar.TypeClasses.Deriving.$sfromList @ a
"SPEC/Language.PureScript.Sugar.TypeClasses.Deriving union @ ((ModuleName,
                                                              ProperName 'ClassName),
                                                             (ModuleName, ProperName 'TypeName))" [orphan] forall ($dOrd :: GHC.Classes.Ord
                                                                                                                                                                                                                                                                                               ((Language.PureScript.Names.ModuleName,
                                                                                                                                                                                                                                                                                                 Language.PureScript.Names.ProperName
                                                                                                                                                                                                                                                                                                   'Language.PureScript.Names.ClassName),
                                                                                                                                                                                                                                                                                                (Language.PureScript.Names.ModuleName,
                                                                                                                                                                                                                                                                                                 Language.PureScript.Names.ProperName
                                                                                                                                                                                                                                                                                                   'Language.PureScript.Names.TypeName)))
  Data.Set.Internal.union @ ((Language.PureScript.Names.ModuleName,
                              Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ClassName),
                             (Language.PureScript.Names.ModuleName,
                              Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.TypeName))
                          $dOrd
  = Language.PureScript.Sugar.TypeClasses.Deriving.$fMonoidNewtypeDerivedInstances_$sunion
"SPEC/Language.PureScript.Sugar.TypeClasses.Deriving union @ (ModuleName,
                                                             ProperName 'ClassName) _" [orphan] forall @ a
                                                                                                                                                                                 ($dOrd :: GHC.Classes.Ord
                                                                                                                                                                                             (Language.PureScript.Names.ModuleName,
                                                                                                                                                                                              Language.PureScript.Names.ProperName
                                                                                                                                                                                                'Language.PureScript.Names.ClassName))
  Data.Map.Internal.union @ (Language.PureScript.Names.ModuleName,
                             Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.ClassName)
                          @ a
                          $dOrd
  = Language.PureScript.Sugar.TypeClasses.Deriving.$fMonoidNewtypeDerivedInstances_$sunion1
      @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

