
==================== FINAL INTERFACE ====================
2019-01-24 14:23:16.502428 UTC

interface purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Errors.JSON 8043
  interface hash: 6b0e411868f058f2821b88522c90a2c3
  ABI hash: dd4b902f2e772e21e16fc115c7544009
  export-list hash: 1c2e11de4e9f5d383b0185c64dbff5f4
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: b6396bf39d506c0ee54b9e4d06e52dcd
  opt_hash: 2c98c95d41c045ae9c2fb565ec8aabc6
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: True
  where
exports:
  Language.PureScript.Errors.JSON.toJSONError
  Language.PureScript.Errors.JSON.toJSONErrors
  Language.PureScript.Errors.JSON.ErrorPosition{Language.PureScript.Errors.JSON.ErrorPosition endColumn endLine startColumn startLine}
  Language.PureScript.Errors.JSON.ErrorSuggestion{Language.PureScript.Errors.JSON.ErrorSuggestion replaceRange replacement}
  Language.PureScript.Errors.JSON.JSONError{Language.PureScript.Errors.JSON.JSONError allSpans errorCode errorLink filename message moduleName position suggestion}
  Language.PureScript.Errors.JSON.JSONResult{Language.PureScript.Errors.JSON.JSONResult errors warnings}
module dependencies: Control.Monad.Logger Control.Monad.Supply
                     Control.Monad.Supply.Class Language.PureScript
                     Language.PureScript.AST Language.PureScript.AST.Binders
                     Language.PureScript.AST.Declarations
                     Language.PureScript.AST.Exported Language.PureScript.AST.Literals
                     Language.PureScript.AST.Operators Language.PureScript.AST.SourcePos
                     Language.PureScript.AST.Traversals Language.PureScript.Bundle
                     Language.PureScript.CodeGen.JS
                     Language.PureScript.CodeGen.JS.Common
                     Language.PureScript.CodeGen.JS.Printer Language.PureScript.Comments
                     Language.PureScript.Constants Language.PureScript.CoreFn
                     Language.PureScript.CoreFn.Ann Language.PureScript.CoreFn.Binders
                     Language.PureScript.CoreFn.Desugar Language.PureScript.CoreFn.Expr
                     Language.PureScript.CoreFn.Meta Language.PureScript.CoreFn.Module
                     Language.PureScript.CoreFn.Optimizer
                     Language.PureScript.CoreFn.ToJSON
                     Language.PureScript.CoreFn.Traversals
                     Language.PureScript.CoreImp.AST
                     Language.PureScript.CoreImp.Optimizer
                     Language.PureScript.CoreImp.Optimizer.Blocks
                     Language.PureScript.CoreImp.Optimizer.Common
                     Language.PureScript.CoreImp.Optimizer.Inliner
                     Language.PureScript.CoreImp.Optimizer.MagicDo
                     Language.PureScript.CoreImp.Optimizer.TCO
                     Language.PureScript.CoreImp.Optimizer.Unused
                     Language.PureScript.Crash Language.PureScript.Environment
                     Language.PureScript.Errors Language.PureScript.Externs
                     Language.PureScript.Kinds Language.PureScript.Label
                     Language.PureScript.Linter Language.PureScript.Linter.Exhaustive
                     Language.PureScript.Linter.Imports Language.PureScript.Make
                     Language.PureScript.Make.Actions Language.PureScript.Make.BuildPlan
                     Language.PureScript.Make.Monad
                     Language.PureScript.ModuleDependencies Language.PureScript.Names
                     Language.PureScript.Options Language.PureScript.PSString
                     Language.PureScript.Parser Language.PureScript.Parser.Common
                     Language.PureScript.Parser.Declarations
                     Language.PureScript.Parser.Kinds Language.PureScript.Parser.Lexer
                     Language.PureScript.Parser.State Language.PureScript.Parser.Types
                     Language.PureScript.Pretty Language.PureScript.Pretty.Common
                     Language.PureScript.Pretty.Kinds Language.PureScript.Pretty.Types
                     Language.PureScript.Pretty.Values
                     Language.PureScript.Publish.BoxesHelpers
                     Language.PureScript.Renamer Language.PureScript.Sugar
                     Language.PureScript.Sugar.AdoNotation
                     Language.PureScript.Sugar.BindingGroups
                     Language.PureScript.Sugar.CaseDeclarations
                     Language.PureScript.Sugar.DoNotation
                     Language.PureScript.Sugar.LetPattern
                     Language.PureScript.Sugar.Names
                     Language.PureScript.Sugar.Names.Common
                     Language.PureScript.Sugar.Names.Env
                     Language.PureScript.Sugar.Names.Exports
                     Language.PureScript.Sugar.Names.Imports
                     Language.PureScript.Sugar.ObjectWildcards
                     Language.PureScript.Sugar.Operators
                     Language.PureScript.Sugar.Operators.Binders
                     Language.PureScript.Sugar.Operators.Common
                     Language.PureScript.Sugar.Operators.Expr
                     Language.PureScript.Sugar.Operators.Types
                     Language.PureScript.Sugar.TypeClasses
                     Language.PureScript.Sugar.TypeClasses.Deriving
                     Language.PureScript.Sugar.TypeDeclarations
                     Language.PureScript.Traversals Language.PureScript.TypeChecker
                     Language.PureScript.TypeChecker.Entailment
                     Language.PureScript.TypeChecker.Kinds
                     Language.PureScript.TypeChecker.Monad
                     Language.PureScript.TypeChecker.Skolems
                     Language.PureScript.TypeChecker.Subsumption
                     Language.PureScript.TypeChecker.Synonyms
                     Language.PureScript.TypeChecker.TypeSearch
                     Language.PureScript.TypeChecker.Types
                     Language.PureScript.TypeChecker.Unify
                     Language.PureScript.TypeClassDictionaries Language.PureScript.Types
                     Paths_purescript
package dependencies: aeson-1.3.1.1 ansi-terminal-0.8.0.4
                      array-0.5.2.0 async-2.2.1 attoparsec-0.13.2.2 base-4.11.1.0
                      base-compat-0.10.4 binary-0.8.5.1 blaze-builder-0.4.1.0 boxes-0.1.5
                      bytestring-0.10.8.2 colour-2.3.4 containers-0.5.11.0
                      data-ordlist-0.4.7.0 deepseq-1.4.3.0 directory-1.3.1.5
                      dlist-0.8.0.4 filepath-1.4.2 ghc-boot-th-8.4.3 ghc-prim-0.5.2.0
                      hashable-1.2.7.0 integer-gmp-1.0.2.0 integer-logarithms-1.0.2.1
                      language-javascript-0.6.0.11 lifted-base-0.2.3.12 microlens-0.4.9.1
                      microlens-ghc-0.4.9 microlens-mtl-0.1.11.1
                      microlens-platform-0.3.10 microlens-th-0.4.2.1
                      monad-control-1.0.2.3 mtl-2.2.2 parallel-3.2.1.1 parsec-3.1.13.0
                      pattern-arrows-0.0.2 pretty-1.1.3.6 primitive-0.6.3.0
                      protolude-0.2.2 random-1.1 safe-0.3.17 scientific-0.3.6.2
                      sourcemap-0.1.6 split-0.2.3.3 stm-2.4.5.0 syb-0.7 tagged-0.8.5
                      template-haskell-2.13.0.0 text-1.2.3.0 th-abstraction-0.2.8.0
                      time-1.8.0.2 time-locale-compat-0.1.1.4 transformers-0.5.5.0
                      transformers-base-0.4.5.2 unix-2.7.2.2 unordered-containers-0.2.9.0
                      utf8-string-1.0.1.1 uuid-types-1.0.3 vector-0.12.0.1
orphans: syb-0.7:Data.Generics.Instances colour-2.3.4:Data.Colour
         stm-2.4.5.0:Control.Monad.STM
         attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         microlens-platform-0.3.10:Lens.Micro.Platform
         microlens-ghc-0.4.9:Lens.Micro.GHC
         hashable-1.2.7.0:Data.Hashable.Generic
         vector-0.12.0.1:Data.Vector.Unboxed
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.5.0:Control.Monad.Trans.Error
         text-1.2.3.0:Data.Text.Lazy text-1.2.3.0:Data.Text
         binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: aeson-1.3.1.1:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.Graph
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         dlist-0.8.0.4:Data.DList ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         microlens-0.4.9.1:Lens.Micro.Internal
                         microlens-ghc-0.4.9:Lens.Micro.GHC
                         microlens-mtl-0.1.11.1:Lens.Micro.Mtl.Internal
                         microlens-platform-0.3.10:Lens.Micro.Platform
                         monad-control-1.0.2.3:Control.Monad.Trans.Control
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Control.Monad.Logger
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.Declarations
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.Operators
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.SourcePos
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Comments
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Environment
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Kinds
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Label
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Make.Monad
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Names
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.PSString
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.TypeClassDictionaries
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Types
                         tagged-0.8.5:Data.Tagged
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
                         th-abstraction-0.2.8.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  aeson-1.3.1.1:Data.Aeson.TH 7d552baba5d6d064e5d0fb814e331004
import  -/  aeson-1.3.1.1:Data.Aeson.Types.FromJSON 1ea0c919856f0d29f12e53cd074d532c
import  -/  aeson-1.3.1.1:Data.Aeson.Types.Internal df76c21edff000f9355bfb6fb0dbf3e6
import  -/  aeson-1.3.1.1:Data.Aeson.Types.ToJSON 587c7d8b9444e85253d7faf5f824f568
import  -/  base-4.11.1.0:Data.Functor f522c3501272159820fd6f242510732f
import  -/  base-4.11.1.0:Data.List.NonEmpty 595ee3baddcadebc4831ea7541427984
import  -/  base-4.11.1.0:Data.Maybe 409c3da2b142470b68be39ce1d97a9f7
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-compat-0.10.4:Prelude.Compat bb6796186ed35a1d09dc34362a3fc27e
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  Language.PureScript 4a24ccd892adbf021daf2410ebd61e22
  exports: 139dcaa90af8ddcee6aa0492159f351d
import  -/  Language.PureScript.AST.Declarations 586bc75044e8737d02875208d17d4395
  ErrorMessage 7268a73b9f5bbe5a70110aa90f7e1194
import  -/  Language.PureScript.AST.SourcePos 63acacac5b7be73d04e5be0047a9a89a
  SourceSpan 1e0cf2bd3ea18f97a2ff152297f09219
  sourcePosColumn 1e0cf2bd3ea18f97a2ff152297f09219
  sourcePosLine 1e0cf2bd3ea18f97a2ff152297f09219
  spanEnd 1e0cf2bd3ea18f97a2ff152297f09219
  spanName 1e0cf2bd3ea18f97a2ff152297f09219
  spanStart 1e0cf2bd3ea18f97a2ff152297f09219
import  -/  Language.PureScript.Errors 3c1ad933587510f8b20a8c9ec2e86ce9
  ErrorSuggestion 733461781ca5b7039fcc2ffe8cc3b242
  Level b7d27648929ebd118857889472384e06
  MultipleErrors e1ef6a17348ccfe3ef65185d3c5f9026
  PPEOptions 352c10d60a68219f258b3b81326c2542
  errorCode a162641bfba4a64db040e6a2c1248ff8
  errorDocUri 846f9303429ab1e967cfc62dce407e9f
  errorModule 7200a0daf363d878ae314bac157bfce9
  errorSpan 4f1afca5823a071810163f1e0787554d
  errorSuggestion fb2c132cb8b66afcc1eded136297fc96
  prettyPrintSingleError 2b7661894346df5efbb78e7d601b7358
  renderBox 0fcffef36342be11bfb9f61137932b31
  runMultipleErrors e1ef6a17348ccfe3ef65185d3c5f9026
  stripModuleAndSpan d930cd488d57f880f4da4b3e9f42169b
  suggestionSpan 101baaa784cc4651beb27ca02ecfec3e
  unwrapErrorMessage 2af34378ccdb99865a0ce323ec994267
import  -/  Language.PureScript.Names 00f694509122478d97b327fbbccae327
  runModuleName 58b788b37f600c0f34fa85241d7748ad
import  -/  text-1.2.3.0:Data.Text 7daa7e6c9b39d8cc1679e5ec5c64d2be
import  -/  text-1.2.3.0:Data.Text.Internal 30a0a123f71f63b26cd34c6b24f23411
6bbc5f7714849fe1dfea6d31b049c518
  $fEqErrorPosition ::
    GHC.Classes.Eq Language.PureScript.Errors.JSON.ErrorPosition
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Errors.JSON.ErrorPosition
                  Language.PureScript.Errors.JSON.$fEqErrorPosition_$c==
                  Language.PureScript.Errors.JSON.$fEqErrorPosition_$c/= -}
6bbc5f7714849fe1dfea6d31b049c518
  $fEqErrorPosition_$c/= ::
    Language.PureScript.Errors.JSON.ErrorPosition
    -> Language.PureScript.Errors.JSON.ErrorPosition -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)LLL),1*U(1*U(U),1*U(U),1*U(U),1*U(U))><S(S(S)LLL),1*U(1*U(U),1*U(U),1*U(U),1*U(U))>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Errors.JSON.ErrorPosition)
                   (y :: Language.PureScript.Errors.JSON.ErrorPosition) ->
                 case Language.PureScript.Errors.JSON.$fEqErrorPosition_$c==
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
6bbc5f7714849fe1dfea6d31b049c518
  $fEqErrorPosition_$c== ::
    Language.PureScript.Errors.JSON.ErrorPosition
    -> Language.PureScript.Errors.JSON.ErrorPosition -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)LLL),1*U(1*U(U),1*U(U),1*U(U),1*U(U))><S(S(S)LLL),1*U(1*U(U),1*U(U),1*U(U),1*U(U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Errors.JSON.ErrorPosition)
                   (w1 :: Language.PureScript.Errors.JSON.ErrorPosition) ->
                 case w of ww { Language.PureScript.Errors.JSON.ErrorPosition ww1 ww2 ww3 ww4 ->
                 case ww1 of ww5 { GHC.Types.I# ww6 ->
                 case w1 of ww7 { Language.PureScript.Errors.JSON.ErrorPosition ww8 ww9 ww10 ww11 ->
                 case ww8 of ww12 { GHC.Types.I# ww13 ->
                 Language.PureScript.Errors.JSON.$w$c==
                   ww6
                   ww2
                   ww3
                   ww4
                   ww13
                   ww9
                   ww10
                   ww11 } } } }) -}
45299a45125d0010a58b2e176d366f17
  $fEqErrorSuggestion ::
    GHC.Classes.Eq Language.PureScript.Errors.JSON.ErrorSuggestion
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Errors.JSON.ErrorSuggestion
                  Language.PureScript.Errors.JSON.$fEqErrorSuggestion_$c==
                  Language.PureScript.Errors.JSON.$fEqErrorSuggestion_$c/= -}
45299a45125d0010a58b2e176d366f17
  $fEqErrorSuggestion_$c/= ::
    Language.PureScript.Errors.JSON.ErrorSuggestion
    -> Language.PureScript.Errors.JSON.ErrorSuggestion
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(LLS)L),1*U(1*U(U,U,U),1*U)><S(S(LLS)L),1*U(1*U(U,U,U),1*U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Errors.JSON.ErrorSuggestion)
                   (y :: Language.PureScript.Errors.JSON.ErrorSuggestion) ->
                 case Language.PureScript.Errors.JSON.$fEqErrorSuggestion_$c==
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
45299a45125d0010a58b2e176d366f17
  $fEqErrorSuggestion_$c== ::
    Language.PureScript.Errors.JSON.ErrorSuggestion
    -> Language.PureScript.Errors.JSON.ErrorSuggestion
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(SSS)L),1*U(1*U(U,U,U),1*U)><S(S(SSS)L),1*U(1*U(U,U,U),1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Errors.JSON.ErrorSuggestion)
                   (w1 :: Language.PureScript.Errors.JSON.ErrorSuggestion) ->
                 case w of ww { Language.PureScript.Errors.JSON.ErrorSuggestion ww1 ww2 ->
                 case ww1 of ww3 { Data.Text.Internal.Text ww4 ww5 ww6 ->
                 case w1 of ww7 { Language.PureScript.Errors.JSON.ErrorSuggestion ww8 ww9 ->
                 case ww8 of ww10 { Data.Text.Internal.Text ww11 ww12 ww13 ->
                 Language.PureScript.Errors.JSON.$w$c==1
                   ww4
                   ww5
                   ww6
                   ww2
                   ww11
                   ww12
                   ww13
                   ww9 } } } }) -}
48d560460478effa7fc17cacd364d1fd
  $fEqJSONError ::
    GHC.Classes.Eq Language.PureScript.Errors.JSON.JSONError
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Errors.JSON.JSONError
                  Language.PureScript.Errors.JSON.$fEqJSONError_$c==
                  Language.PureScript.Errors.JSON.$fEqJSONError_$c/= -}
48d560460478effa7fc17cacd364d1fd
  $fEqJSONError_$c/= ::
    Language.PureScript.Errors.JSON.JSONError
    -> Language.PureScript.Errors.JSON.JSONError -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLLLLLL),1*U(1*U,1*U,1*U(U,U,U),1*U(U,U,U),1*U,1*U,1*U,1*U)><S(SLLLLLLL),1*U(1*U,1*U,1*U(U,U,U),1*U(U,U,U),1*U,1*U,1*U,1*U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Errors.JSON.JSONError)
                   (y :: Language.PureScript.Errors.JSON.JSONError) ->
                 case Language.PureScript.Errors.JSON.$fEqJSONError_$c==
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
48d560460478effa7fc17cacd364d1fd
  $fEqJSONError_$c== ::
    Language.PureScript.Errors.JSON.JSONError
    -> Language.PureScript.Errors.JSON.JSONError -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SLLLLLLL),1*U(1*U,1*U,1*U(U,U,U),1*U(U,U,U),1*U,1*U,1*U,1*U)><S(SLLLLLLL),1*U(1*U,1*U,1*U(U,U,U),1*U(U,U,U),1*U,1*U,1*U,1*U)> -}
764cc1f4fb4493f9ef09b3f5b0e97737
  $fEqJSONResult ::
    GHC.Classes.Eq Language.PureScript.Errors.JSON.JSONResult
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Errors.JSON.JSONResult
                  Language.PureScript.Errors.JSON.$fEqJSONResult_$c==
                  Language.PureScript.Errors.JSON.$fEqJSONResult_$c/= -}
764cc1f4fb4493f9ef09b3f5b0e97737
  $fEqJSONResult_$c/= ::
    Language.PureScript.Errors.JSON.JSONResult
    -> Language.PureScript.Errors.JSON.JSONResult -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Errors.JSON.JSONResult)
                   (y :: Language.PureScript.Errors.JSON.JSONResult) ->
                 case Language.PureScript.Errors.JSON.$fEqJSONResult_$c==
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
764cc1f4fb4493f9ef09b3f5b0e97737
  $fEqJSONResult_$c== ::
    Language.PureScript.Errors.JSON.JSONResult
    -> Language.PureScript.Errors.JSON.JSONResult -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U)><S(SL),1*U(1*U,1*U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Errors.JSON.JSONResult)
                   (w1 :: Language.PureScript.Errors.JSON.JSONResult) ->
                 case w of ww { Language.PureScript.Errors.JSON.JSONResult ww1 ww2 ->
                 case w1 of ww3 { Language.PureScript.Errors.JSON.JSONResult ww4 ww5 ->
                 Language.PureScript.Errors.JSON.$w$c==2 ww1 ww2 ww4 ww5 } }) -}
6bbc5f7714849fe1dfea6d31b049c518
  $fFromJSONErrorPosition ::
    Data.Aeson.Types.FromJSON.FromJSON
      Language.PureScript.Errors.JSON.ErrorPosition
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Errors.JSON.ErrorPosition
                  Language.PureScript.Errors.JSON.$fFromJSONErrorPosition_$cparseJSON
                  Language.PureScript.Errors.JSON.$fFromJSONErrorPosition_$cparseJSONList -}
5745cb579cd44ef3c67e75119f4f61ce
  $fFromJSONErrorPosition1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (", encountered "#) -}
bd6685f7d9fa2f5c1651ee50fd027311
  $fFromJSONErrorPosition10 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Errors.JSON.$fFromJSONErrorPosition11) -}
39cfd0443ab63bac44e765df72b774f0
  $fFromJSONErrorPosition11 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("startLine"#) -}
2678fee6c4d0b3452adf5c0dbd1f28ae
  $fFromJSONErrorPosition12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Errors.JSON.$fFromJSONErrorPosition13) -}
7cfbd8217c80d8561130a5ac1d9303c2
  $fFromJSONErrorPosition13 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Object"#) -}
537d8f926c0c4822d19386f4ab3b86c0
  $fFromJSONErrorPosition14 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Errors.JSON.$fFromJSONErrorPosition15) -}
ac3cc00c144eda278581d9c395342d8b
  $fFromJSONErrorPosition15 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Language.PureScript.Errors.JSON.ErrorPosition"#) -}
1a8549ea9ce2d3e8d80c73297b60a74b
  $fFromJSONErrorPosition16 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Errors.JSON.$fFromJSONErrorPosition17) -}
aa895d0f0ff0d3abd779f1c2f3f45492
  $fFromJSONErrorPosition17 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ErrorPosition"#) -}
f9e69281a872ac9269cc73df107a5880
  $fFromJSONErrorPosition2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("[a]"#) -}
3eb6786b5cc3baf18d2472ee5381f3b4
  $fFromJSONErrorPosition3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("expected "#) -}
029a49a4161f4c55c9c7aa51ef5fe210
  $fFromJSONErrorPosition4 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Errors.JSON.$fFromJSONErrorPosition5) -}
0ede2cbdc86981f0c443baf637e470f4
  $fFromJSONErrorPosition5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("endColumn"#) -}
6f836637c665ddf774e613e2b50e2e12
  $fFromJSONErrorPosition6 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Errors.JSON.$fFromJSONErrorPosition7) -}
f6ea091a4368a1238755621e95d736ec
  $fFromJSONErrorPosition7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("endLine"#) -}
678ce98cb6d1909a9d48c1843f07937c
  $fFromJSONErrorPosition8 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Errors.JSON.$fFromJSONErrorPosition9) -}
630e45ce998e3a8be7a5401dd36f00d3
  $fFromJSONErrorPosition9 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("startColumn"#) -}
6bbc5f7714849fe1dfea6d31b049c518
  $fFromJSONErrorPosition_$cparseJSON ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         Language.PureScript.Errors.JSON.ErrorPosition
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (value :: Data.Aeson.Types.Internal.Value) ->
                 case value of wild {
                   DEFAULT
                   -> Data.Aeson.TH.parseTypeMismatch'
                        @ Language.PureScript.Errors.JSON.ErrorPosition
                        Language.PureScript.Errors.JSON.$fFromJSONErrorPosition16
                        Language.PureScript.Errors.JSON.$fFromJSONErrorPosition14
                        Language.PureScript.Errors.JSON.$fFromJSONErrorPosition12
                        (case wild of wild1 {
                           Data.Aeson.Types.Internal.Array ds9 -> Data.Aeson.TH.valueConName9
                           Data.Aeson.Types.Internal.String ds9 -> Data.Aeson.TH.valueConName7
                           Data.Aeson.Types.Internal.Number ds9 -> Data.Aeson.TH.valueConName5
                           Data.Aeson.Types.Internal.Bool ds9 -> Data.Aeson.TH.valueConName3
                           Data.Aeson.Types.Internal.Null -> Data.Aeson.TH.valueConName1 })
                   Data.Aeson.Types.Internal.Object recObj
                   -> let {
                        m :: Data.Aeson.Types.Internal.Parser GHC.Types.Int
                        = case Language.PureScript.Errors.JSON.$fFromJSONErrorPosition10 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                          Data.Aeson.TH.$w$clookupField1
                            @ GHC.Types.Int
                            Data.Aeson.Types.FromJSON.$fFromJSON1IntMap_$cparseJSON
                            Language.PureScript.Errors.JSON.$fFromJSONErrorPosition14
                            Language.PureScript.Errors.JSON.$fFromJSONErrorPosition16
                            recObj
                            ww1
                            ww2
                            ww3 }
                      } in
                      let {
                        e :: Data.Aeson.Types.Internal.Parser GHC.Types.Int
                        = case Language.PureScript.Errors.JSON.$fFromJSONErrorPosition8 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                          Data.Aeson.TH.$w$clookupField1
                            @ GHC.Types.Int
                            Data.Aeson.Types.FromJSON.$fFromJSON1IntMap_$cparseJSON
                            Language.PureScript.Errors.JSON.$fFromJSONErrorPosition14
                            Language.PureScript.Errors.JSON.$fFromJSONErrorPosition16
                            recObj
                            ww1
                            ww2
                            ww3 }
                      } in
                      let {
                        e1 :: Data.Aeson.Types.Internal.Parser GHC.Types.Int
                        = case Language.PureScript.Errors.JSON.$fFromJSONErrorPosition6 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                          Data.Aeson.TH.$w$clookupField1
                            @ GHC.Types.Int
                            Data.Aeson.Types.FromJSON.$fFromJSON1IntMap_$cparseJSON
                            Language.PureScript.Errors.JSON.$fFromJSONErrorPosition14
                            Language.PureScript.Errors.JSON.$fFromJSONErrorPosition16
                            recObj
                            ww1
                            ww2
                            ww3 }
                      } in
                      let {
                        e2 :: Data.Aeson.Types.Internal.Parser GHC.Types.Int
                        = case Language.PureScript.Errors.JSON.$fFromJSONErrorPosition4 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                          Data.Aeson.TH.$w$clookupField1
                            @ GHC.Types.Int
                            Data.Aeson.Types.FromJSON.$fFromJSON1IntMap_$cparseJSON
                            Language.PureScript.Errors.JSON.$fFromJSONErrorPosition14
                            Language.PureScript.Errors.JSON.$fFromJSONErrorPosition16
                            recObj
                            ww1
                            ww2
                            ww3 }
                      } in
                      (\ @ f4 :: * -> *
                         @ r
                         (path :: Data.Aeson.Types.Internal.JSONPath)
                         (kf :: Data.Aeson.Types.Internal.Failure f4 r)
                         (ks :: Data.Aeson.Types.Internal.Success
                                  Language.PureScript.Errors.JSON.ErrorPosition f4 r) ->
                       m `cast` (Data.Aeson.Types.Internal.N:Parser[0] <GHC.Types.Int>_R)
                         @ f4
                         @ r
                         path
                         kf
                         (\ (a2 :: GHC.Types.Int) ->
                          e `cast` (Data.Aeson.Types.Internal.N:Parser[0] <GHC.Types.Int>_R)
                            @ f4
                            @ r
                            path
                            kf
                            (\ (a3 :: GHC.Types.Int) ->
                             e1 `cast` (Data.Aeson.Types.Internal.N:Parser[0] <GHC.Types.Int>_R)
                               @ f4
                               @ r
                               path
                               kf
                               (\ (a4 :: GHC.Types.Int) ->
                                e2 `cast` (Data.Aeson.Types.Internal.N:Parser[0] <GHC.Types.Int>_R)
                                  @ f4
                                  @ r
                                  path
                                  kf
                                  (\ (a5 :: GHC.Types.Int) ->
                                   ks
                                     (Language.PureScript.Errors.JSON.ErrorPosition
                                        a2
                                        a3
                                        a4
                                        a5))))))
                        `cast`
                      (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                <Language.PureScript.Errors.JSON.ErrorPosition>_R)) }) -}
6bbc5f7714849fe1dfea6d31b049c518
  $fFromJSONErrorPosition_$cparseJSONList ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         [Language.PureScript.Errors.JSON.ErrorPosition]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Data.Aeson.Types.Internal.Value) ->
                 case ds of wild {
                   DEFAULT
                   -> let {
                        msg19 :: GHC.Base.String
                        = GHC.CString.unpackAppendCString#
                            Language.PureScript.Errors.JSON.$fFromJSONErrorPosition3
                            (GHC.CString.unpackAppendCString#
                               Language.PureScript.Errors.JSON.$fFromJSONErrorPosition2
                               (GHC.CString.unpackAppendCString#
                                  Language.PureScript.Errors.JSON.$fFromJSONErrorPosition1
                                  (case wild of wild1 {
                                     Data.Aeson.Types.Internal.Object ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList10
                                     Data.Aeson.Types.Internal.String ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList8
                                     Data.Aeson.Types.Internal.Number ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList6
                                     Data.Aeson.Types.Internal.Bool ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList4
                                     Data.Aeson.Types.Internal.Null
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList1 })))
                      } in
                      (\ @ f4 :: * -> *
                         @ r
                         (path :: Data.Aeson.Types.Internal.JSONPath)
                         (kf :: Data.Aeson.Types.Internal.Failure f4 r)
                         (_ks :: Data.Aeson.Types.Internal.Success
                                   [Language.PureScript.Errors.JSON.ErrorPosition] f4 r) ->
                       kf
                         (GHC.List.reverse @ Data.Aeson.Types.Internal.JSONPathElement path)
                         msg19)
                        `cast`
                      (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                <[Language.PureScript.Errors.JSON.ErrorPosition]>_R))
                   Data.Aeson.Types.Internal.Array a2
                   -> case a2 of wild1 { Data.Vector.Vector dt dt1 dt2 ->
                      letrec {
                        $wgo :: GHC.Prim.Int# -> [Data.Aeson.Types.Internal.Value]
                          {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                        = \ (ww :: GHC.Prim.Int#) ->
                          case GHC.Prim.>=# ww dt1 of lwild {
                            DEFAULT
                            -> case GHC.Prim.indexArray#
                                      @ Data.Aeson.Types.Internal.Value
                                      dt2
                                      (GHC.Prim.+# dt ww) of ds3 { Unit# ipv8 ->
                               GHC.Types.:
                                 @ Data.Aeson.Types.Internal.Value
                                 ipv8
                                 ($wgo (GHC.Prim.+# ww 1#)) }
                            1# -> GHC.Types.[] @ Data.Aeson.Types.Internal.Value }
                      } in
                      Language.PureScript.Errors.JSON.$fFromJSONErrorPosition_go
                        0#
                        ($wgo 0#) } }) -}
6bbc5f7714849fe1dfea6d31b049c518
  $fFromJSONErrorPosition_go ::
    GHC.Prim.Int#
    -> [Data.Aeson.Types.Internal.Value]
    -> Data.Aeson.Types.Internal.Parser
         [Language.PureScript.Errors.JSON.ErrorPosition]
  {- Arity: 2, Strictness: <L,U><S,1*U> -}
45299a45125d0010a58b2e176d366f17
  $fFromJSONErrorSuggestion ::
    Data.Aeson.Types.FromJSON.FromJSON
      Language.PureScript.Errors.JSON.ErrorSuggestion
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Errors.JSON.ErrorSuggestion
                  Language.PureScript.Errors.JSON.$fFromJSONErrorSuggestion_$cparseJSON
                  Language.PureScript.Errors.JSON.$fFromJSONErrorSuggestion_$cparseJSONList -}
792f6d77acf241a7d4de83e851b21b95
  $fFromJSONErrorSuggestion1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("replaceRange"#) -}
793acd1f423bd74d9679fc41aa78b16b
  $fFromJSONErrorSuggestion2 ::
    Data.Aeson.Types.Internal.JSONPath
    -> Data.Aeson.Types.Internal.Failure f4 r
    -> Data.Aeson.Types.Internal.Success
         (GHC.Base.Maybe Language.PureScript.Errors.JSON.ErrorPosition) f4 r
    -> f4 r
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,A><C(S),1*C1(U)>,
     Unfolding: InlineRule (3, True, True)
                (\ @ f4 :: * -> *
                   @ r
                   (_path :: Data.Aeson.Types.Internal.JSONPath)
                   (_kf :: Data.Aeson.Types.Internal.Failure f4 r)
                   (ks :: Data.Aeson.Types.Internal.Success
                            (GHC.Base.Maybe Language.PureScript.Errors.JSON.ErrorPosition)
                            f4
                            r) ->
                 ks
                   (GHC.Base.Nothing
                      @ Language.PureScript.Errors.JSON.ErrorPosition)) -}
3257bddefd5bb3b4a99e57b7071bc6eb
  $fFromJSONErrorSuggestion3 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Errors.JSON.$fFromJSONErrorSuggestion4) -}
ad2e106bb754f87f75f4ddff183c5c80
  $fFromJSONErrorSuggestion4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("replacement"#) -}
fd567cede47b64629d0af25a957b0ea5
  $fFromJSONErrorSuggestion5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Errors.JSON.$fFromJSONErrorSuggestion6) -}
d61bfca2cdabad7b543a8c56f5053517
  $fFromJSONErrorSuggestion6 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Language.PureScript.Errors.JSON.ErrorSuggestion"#) -}
36e5dc080b69b886877b59aad6b87bba
  $fFromJSONErrorSuggestion7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Errors.JSON.$fFromJSONErrorSuggestion8) -}
53238f4d129798474f9d5fc53d178a9c
  $fFromJSONErrorSuggestion8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ErrorSuggestion"#) -}
45299a45125d0010a58b2e176d366f17
  $fFromJSONErrorSuggestion_$cparseJSON ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         Language.PureScript.Errors.JSON.ErrorSuggestion
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (value :: Data.Aeson.Types.Internal.Value) ->
                 case value of wild {
                   DEFAULT
                   -> Data.Aeson.TH.parseTypeMismatch'
                        @ Language.PureScript.Errors.JSON.ErrorSuggestion
                        Language.PureScript.Errors.JSON.$fFromJSONErrorSuggestion7
                        Language.PureScript.Errors.JSON.$fFromJSONErrorSuggestion5
                        Language.PureScript.Errors.JSON.$fFromJSONErrorPosition12
                        (case wild of wild1 {
                           Data.Aeson.Types.Internal.Array ds9 -> Data.Aeson.TH.valueConName9
                           Data.Aeson.Types.Internal.String ds9 -> Data.Aeson.TH.valueConName7
                           Data.Aeson.Types.Internal.Number ds9 -> Data.Aeson.TH.valueConName5
                           Data.Aeson.Types.Internal.Bool ds9 -> Data.Aeson.TH.valueConName3
                           Data.Aeson.Types.Internal.Null -> Data.Aeson.TH.valueConName1 })
                   Data.Aeson.Types.Internal.Object recObj
                   -> let {
                        m :: Data.Aeson.Types.Internal.Parser Data.Text.Internal.Text
                        = case Language.PureScript.Errors.JSON.$fFromJSONErrorSuggestion3 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                          Data.Aeson.TH.$w$clookupField1
                            @ Data.Text.Internal.Text
                            Data.Aeson.Types.FromJSON.$fFromJSONText0_$cparseJSON
                            Language.PureScript.Errors.JSON.$fFromJSONErrorSuggestion5
                            Language.PureScript.Errors.JSON.$fFromJSONErrorSuggestion7
                            recObj
                            ww1
                            ww2
                            ww3 }
                      } in
                      let {
                        e :: Data.Aeson.Types.Internal.Parser
                               (GHC.Base.Maybe Language.PureScript.Errors.JSON.ErrorPosition)
                        = case Language.PureScript.Errors.JSON.$fFromJSONErrorSuggestion_key2 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                          case Data.Aeson.Types.FromJSON.$w$slookup
                                 @ Data.Aeson.Types.Internal.Value
                                 ww1
                                 ww2
                                 ww3
                                 recObj of wild1 {
                            GHC.Base.Nothing
                            -> Language.PureScript.Errors.JSON.$fFromJSONErrorSuggestion2
                                 `cast`
                               (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                         <GHC.Base.Maybe
                                            Language.PureScript.Errors.JSON.ErrorPosition>_R))
                            GHC.Base.Just v
                            -> let {
                                 p :: Data.Aeson.Types.Internal.Parser
                                        (GHC.Base.Maybe
                                           Language.PureScript.Errors.JSON.ErrorPosition)
                                 = case v of wild2 {
                                     DEFAULT
                                     -> let {
                                          m1 :: Data.Aeson.Types.Internal.Parser
                                                  Language.PureScript.Errors.JSON.ErrorPosition
                                          = Language.PureScript.Errors.JSON.$fFromJSONErrorPosition_$cparseJSON
                                              wild2
                                        } in
                                        (\ @ f5 :: * -> *
                                           @ r
                                           (path :: Data.Aeson.Types.Internal.JSONPath)
                                           (kf :: Data.Aeson.Types.Internal.Failure f5 r)[OneShot]
                                           (ks :: Data.Aeson.Types.Internal.Success
                                                    (GHC.Base.Maybe
                                                       Language.PureScript.Errors.JSON.ErrorPosition)
                                                    f5
                                                    r)[OneShot] ->
                                         m1
                                           `cast`
                                         (Data.Aeson.Types.Internal.N:Parser[0]
                                              <Language.PureScript.Errors.JSON.ErrorPosition>_R)
                                           @ f5
                                           @ r
                                           path
                                           kf
                                           (\ (a2 :: Language.PureScript.Errors.JSON.ErrorPosition) ->
                                            ks
                                              (GHC.Base.Just
                                                 @ Language.PureScript.Errors.JSON.ErrorPosition
                                                 a2)))
                                          `cast`
                                        (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                                  <GHC.Base.Maybe
                                                     Language.PureScript.Errors.JSON.ErrorPosition>_R))
                                     Data.Aeson.Types.Internal.Null
                                     -> Language.PureScript.Errors.JSON.$fFromJSONErrorSuggestion2
                                          `cast`
                                        (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                                  <GHC.Base.Maybe
                                                     Language.PureScript.Errors.JSON.ErrorPosition>_R)) }
                               } in
                               (\ @ f4 :: * -> *
                                  @ r
                                  (path :: Data.Aeson.Types.Internal.JSONPath)
                                  (kf :: Data.Aeson.Types.Internal.Failure f4 r)[OneShot]
                                  (ks :: Data.Aeson.Types.Internal.Success
                                           (GHC.Base.Maybe
                                              Language.PureScript.Errors.JSON.ErrorPosition)
                                           f4
                                           r)[OneShot] ->
                                p `cast`
                                (Data.Aeson.Types.Internal.N:Parser[0]
                                     <GHC.Base.Maybe
                                        Language.PureScript.Errors.JSON.ErrorPosition>_R)
                                  @ f4
                                  @ r
                                  (GHC.Types.:
                                     @ Data.Aeson.Types.Internal.JSONPathElement
                                     Language.PureScript.Errors.JSON.$fFromJSONErrorSuggestion_pathElem16
                                     path)
                                  kf
                                  ks)
                                 `cast`
                               (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                         <GHC.Base.Maybe
                                            Language.PureScript.Errors.JSON.ErrorPosition>_R)) } }
                      } in
                      (\ @ f4 :: * -> *
                         @ r
                         (path :: Data.Aeson.Types.Internal.JSONPath)
                         (kf :: Data.Aeson.Types.Internal.Failure f4 r)
                         (ks :: Data.Aeson.Types.Internal.Success
                                  Language.PureScript.Errors.JSON.ErrorSuggestion f4 r) ->
                       m `cast`
                       (Data.Aeson.Types.Internal.N:Parser[0] <Data.Text.Internal.Text>_R)
                         @ f4
                         @ r
                         path
                         kf
                         (\ (a2 :: Data.Text.Internal.Text) ->
                          e `cast`
                          (Data.Aeson.Types.Internal.N:Parser[0]
                               <GHC.Base.Maybe Language.PureScript.Errors.JSON.ErrorPosition>_R)
                            @ f4
                            @ r
                            path
                            kf
                            (\ (a3 :: GHC.Base.Maybe
                                        Language.PureScript.Errors.JSON.ErrorPosition) ->
                             ks (Language.PureScript.Errors.JSON.ErrorSuggestion a2 a3))))
                        `cast`
                      (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                <Language.PureScript.Errors.JSON.ErrorSuggestion>_R)) }) -}
45299a45125d0010a58b2e176d366f17
  $fFromJSONErrorSuggestion_$cparseJSONList ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         [Language.PureScript.Errors.JSON.ErrorSuggestion]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Data.Aeson.Types.Internal.Value) ->
                 case ds of wild {
                   DEFAULT
                   -> let {
                        msg19 :: GHC.Base.String
                        = GHC.CString.unpackAppendCString#
                            Language.PureScript.Errors.JSON.$fFromJSONErrorPosition3
                            (GHC.CString.unpackAppendCString#
                               Language.PureScript.Errors.JSON.$fFromJSONErrorPosition2
                               (GHC.CString.unpackAppendCString#
                                  Language.PureScript.Errors.JSON.$fFromJSONErrorPosition1
                                  (case wild of wild1 {
                                     Data.Aeson.Types.Internal.Object ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList10
                                     Data.Aeson.Types.Internal.String ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList8
                                     Data.Aeson.Types.Internal.Number ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList6
                                     Data.Aeson.Types.Internal.Bool ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList4
                                     Data.Aeson.Types.Internal.Null
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList1 })))
                      } in
                      (\ @ f4 :: * -> *
                         @ r
                         (path :: Data.Aeson.Types.Internal.JSONPath)
                         (kf :: Data.Aeson.Types.Internal.Failure f4 r)
                         (_ks :: Data.Aeson.Types.Internal.Success
                                   [Language.PureScript.Errors.JSON.ErrorSuggestion] f4 r) ->
                       kf
                         (GHC.List.reverse @ Data.Aeson.Types.Internal.JSONPathElement path)
                         msg19)
                        `cast`
                      (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                <[Language.PureScript.Errors.JSON.ErrorSuggestion]>_R))
                   Data.Aeson.Types.Internal.Array a2
                   -> case a2 of wild1 { Data.Vector.Vector dt dt1 dt2 ->
                      letrec {
                        $wgo :: GHC.Prim.Int# -> [Data.Aeson.Types.Internal.Value]
                          {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                        = \ (ww :: GHC.Prim.Int#) ->
                          case GHC.Prim.>=# ww dt1 of lwild {
                            DEFAULT
                            -> case GHC.Prim.indexArray#
                                      @ Data.Aeson.Types.Internal.Value
                                      dt2
                                      (GHC.Prim.+# dt ww) of ds3 { Unit# ipv8 ->
                               GHC.Types.:
                                 @ Data.Aeson.Types.Internal.Value
                                 ipv8
                                 ($wgo (GHC.Prim.+# ww 1#)) }
                            1# -> GHC.Types.[] @ Data.Aeson.Types.Internal.Value }
                      } in
                      Language.PureScript.Errors.JSON.$fFromJSONErrorSuggestion_go
                        0#
                        ($wgo 0#) } }) -}
45299a45125d0010a58b2e176d366f17
  $fFromJSONErrorSuggestion_go ::
    GHC.Prim.Int#
    -> [Data.Aeson.Types.Internal.Value]
    -> Data.Aeson.Types.Internal.Parser
         [Language.PureScript.Errors.JSON.ErrorSuggestion]
  {- Arity: 2, Strictness: <L,U><S,1*U> -}
0b6e941c0a5a265d8c338ebb7c4e08e9
  $fFromJSONErrorSuggestion_key2 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Errors.JSON.$fFromJSONErrorSuggestion1) -}
a44aff7f814323972663f6a1c3b95f12
  $fFromJSONErrorSuggestion_pathElem16 ::
    Data.Aeson.Types.Internal.JSONPathElement
  {- Strictness: m1,
     Unfolding: (Data.Aeson.Types.Internal.Key
                   Language.PureScript.Errors.JSON.$fFromJSONErrorSuggestion_key2) -}
48d560460478effa7fc17cacd364d1fd
  $fFromJSONJSONError ::
    Data.Aeson.Types.FromJSON.FromJSON
      Language.PureScript.Errors.JSON.JSONError
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Errors.JSON.JSONError
                  Language.PureScript.Errors.JSON.$fFromJSONJSONError_$cparseJSON
                  Language.PureScript.Errors.JSON.$fFromJSONJSONError_$cparseJSONList -}
48d560460478effa7fc17cacd364d1fd
  $fFromJSONJSONError_$cparseJSON ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         Language.PureScript.Errors.JSON.JSONError
  {- Arity: 1, Strictness: <S,1*U> -}
48d560460478effa7fc17cacd364d1fd
  $fFromJSONJSONError_$cparseJSONList ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         [Language.PureScript.Errors.JSON.JSONError]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Data.Aeson.Types.Internal.Value) ->
                 case ds of wild {
                   DEFAULT
                   -> let {
                        msg19 :: GHC.Base.String
                        = GHC.CString.unpackAppendCString#
                            Language.PureScript.Errors.JSON.$fFromJSONErrorPosition3
                            (GHC.CString.unpackAppendCString#
                               Language.PureScript.Errors.JSON.$fFromJSONErrorPosition2
                               (GHC.CString.unpackAppendCString#
                                  Language.PureScript.Errors.JSON.$fFromJSONErrorPosition1
                                  (case wild of wild1 {
                                     Data.Aeson.Types.Internal.Object ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList10
                                     Data.Aeson.Types.Internal.String ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList8
                                     Data.Aeson.Types.Internal.Number ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList6
                                     Data.Aeson.Types.Internal.Bool ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList4
                                     Data.Aeson.Types.Internal.Null
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList1 })))
                      } in
                      (\ @ f4 :: * -> *
                         @ r
                         (path :: Data.Aeson.Types.Internal.JSONPath)
                         (kf :: Data.Aeson.Types.Internal.Failure f4 r)
                         (_ks :: Data.Aeson.Types.Internal.Success
                                   [Language.PureScript.Errors.JSON.JSONError] f4 r) ->
                       kf
                         (GHC.List.reverse @ Data.Aeson.Types.Internal.JSONPathElement path)
                         msg19)
                        `cast`
                      (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                <[Language.PureScript.Errors.JSON.JSONError]>_R))
                   Data.Aeson.Types.Internal.Array a2
                   -> case a2 of wild1 { Data.Vector.Vector dt dt1 dt2 ->
                      letrec {
                        $wgo :: GHC.Prim.Int# -> [Data.Aeson.Types.Internal.Value]
                          {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                        = \ (ww :: GHC.Prim.Int#) ->
                          case GHC.Prim.>=# ww dt1 of lwild {
                            DEFAULT
                            -> case GHC.Prim.indexArray#
                                      @ Data.Aeson.Types.Internal.Value
                                      dt2
                                      (GHC.Prim.+# dt ww) of ds3 { Unit# ipv8 ->
                               GHC.Types.:
                                 @ Data.Aeson.Types.Internal.Value
                                 ipv8
                                 ($wgo (GHC.Prim.+# ww 1#)) }
                            1# -> GHC.Types.[] @ Data.Aeson.Types.Internal.Value }
                      } in
                      Language.PureScript.Errors.JSON.$fFromJSONJSONError_go
                        0#
                        ($wgo 0#) } }) -}
48d560460478effa7fc17cacd364d1fd
  $fFromJSONJSONError_go ::
    GHC.Prim.Int#
    -> [Data.Aeson.Types.Internal.Value]
    -> Data.Aeson.Types.Internal.Parser
         [Language.PureScript.Errors.JSON.JSONError]
  {- Arity: 2, Strictness: <L,U><S,1*U> -}
764cc1f4fb4493f9ef09b3f5b0e97737
  $fFromJSONJSONResult ::
    Data.Aeson.Types.FromJSON.FromJSON
      Language.PureScript.Errors.JSON.JSONResult
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Errors.JSON.JSONResult
                  Language.PureScript.Errors.JSON.$fFromJSONJSONResult_$cparseJSON
                  Language.PureScript.Errors.JSON.$fFromJSONJSONResult_$cparseJSONList -}
c79e8beec13c2dae1ced2c413c4c6d55
  $fFromJSONJSONResult1 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Errors.JSON.$fFromJSONJSONResult2) -}
d156ce82c546e2aba85a5b6110162a68
  $fFromJSONJSONResult2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("errors"#) -}
f8607c75370c2f0b8b088f07f5455bfe
  $fFromJSONJSONResult3 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Language.PureScript.Errors.JSON.$fFromJSONJSONResult4) -}
53e0a50e1ffad95054cc4d48b9e43729
  $fFromJSONJSONResult4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("warnings"#) -}
8cd1daedb5d782c6c1a11c9dfff24cb4
  $fFromJSONJSONResult5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Errors.JSON.$fFromJSONJSONResult6) -}
128cd38ba749e779be9ebe2c9524bd27
  $fFromJSONJSONResult6 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Language.PureScript.Errors.JSON.JSONResult"#) -}
8243fa9089940fd31081f290c4642a02
  $fFromJSONJSONResult7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Errors.JSON.$fFromJSONJSONResult8) -}
5ffacfb013059a173b57615f2a8853f2
  $fFromJSONJSONResult8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("JSONResult"#) -}
764cc1f4fb4493f9ef09b3f5b0e97737
  $fFromJSONJSONResult_$cparseJSON ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         Language.PureScript.Errors.JSON.JSONResult
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (value :: Data.Aeson.Types.Internal.Value) ->
                 case value of wild {
                   DEFAULT
                   -> Data.Aeson.TH.parseTypeMismatch'
                        @ Language.PureScript.Errors.JSON.JSONResult
                        Language.PureScript.Errors.JSON.$fFromJSONJSONResult7
                        Language.PureScript.Errors.JSON.$fFromJSONJSONResult5
                        Language.PureScript.Errors.JSON.$fFromJSONErrorPosition12
                        (case wild of wild1 {
                           Data.Aeson.Types.Internal.Array ds9 -> Data.Aeson.TH.valueConName9
                           Data.Aeson.Types.Internal.String ds9 -> Data.Aeson.TH.valueConName7
                           Data.Aeson.Types.Internal.Number ds9 -> Data.Aeson.TH.valueConName5
                           Data.Aeson.Types.Internal.Bool ds9 -> Data.Aeson.TH.valueConName3
                           Data.Aeson.Types.Internal.Null -> Data.Aeson.TH.valueConName1 })
                   Data.Aeson.Types.Internal.Object recObj
                   -> let {
                        m :: Data.Aeson.Types.Internal.Parser
                               [Language.PureScript.Errors.JSON.JSONError]
                        = case Language.PureScript.Errors.JSON.$fFromJSONJSONResult3 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                          Data.Aeson.TH.$w$clookupField1
                            @ [Language.PureScript.Errors.JSON.JSONError]
                            Language.PureScript.Errors.JSON.$fFromJSONJSONError_$cparseJSONList
                            Language.PureScript.Errors.JSON.$fFromJSONJSONResult5
                            Language.PureScript.Errors.JSON.$fFromJSONJSONResult7
                            recObj
                            ww1
                            ww2
                            ww3 }
                      } in
                      let {
                        e :: Data.Aeson.Types.Internal.Parser
                               [Language.PureScript.Errors.JSON.JSONError]
                        = case Language.PureScript.Errors.JSON.$fFromJSONJSONResult1 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                          Data.Aeson.TH.$w$clookupField1
                            @ [Language.PureScript.Errors.JSON.JSONError]
                            Language.PureScript.Errors.JSON.$fFromJSONJSONError_$cparseJSONList
                            Language.PureScript.Errors.JSON.$fFromJSONJSONResult5
                            Language.PureScript.Errors.JSON.$fFromJSONJSONResult7
                            recObj
                            ww1
                            ww2
                            ww3 }
                      } in
                      (\ @ f4 :: * -> *
                         @ r
                         (path :: Data.Aeson.Types.Internal.JSONPath)
                         (kf :: Data.Aeson.Types.Internal.Failure f4 r)
                         (ks :: Data.Aeson.Types.Internal.Success
                                  Language.PureScript.Errors.JSON.JSONResult f4 r) ->
                       m `cast`
                       (Data.Aeson.Types.Internal.N:Parser[0]
                            <[Language.PureScript.Errors.JSON.JSONError]>_R)
                         @ f4
                         @ r
                         path
                         kf
                         (\ (a2 :: [Language.PureScript.Errors.JSON.JSONError]) ->
                          e `cast`
                          (Data.Aeson.Types.Internal.N:Parser[0]
                               <[Language.PureScript.Errors.JSON.JSONError]>_R)
                            @ f4
                            @ r
                            path
                            kf
                            (\ (a3 :: [Language.PureScript.Errors.JSON.JSONError]) ->
                             ks (Language.PureScript.Errors.JSON.JSONResult a2 a3))))
                        `cast`
                      (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                <Language.PureScript.Errors.JSON.JSONResult>_R)) }) -}
764cc1f4fb4493f9ef09b3f5b0e97737
  $fFromJSONJSONResult_$cparseJSONList ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         [Language.PureScript.Errors.JSON.JSONResult]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Data.Aeson.Types.Internal.Value) ->
                 case ds of wild {
                   DEFAULT
                   -> let {
                        msg19 :: GHC.Base.String
                        = GHC.CString.unpackAppendCString#
                            Language.PureScript.Errors.JSON.$fFromJSONErrorPosition3
                            (GHC.CString.unpackAppendCString#
                               Language.PureScript.Errors.JSON.$fFromJSONErrorPosition2
                               (GHC.CString.unpackAppendCString#
                                  Language.PureScript.Errors.JSON.$fFromJSONErrorPosition1
                                  (case wild of wild1 {
                                     Data.Aeson.Types.Internal.Object ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList10
                                     Data.Aeson.Types.Internal.String ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList8
                                     Data.Aeson.Types.Internal.Number ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList6
                                     Data.Aeson.Types.Internal.Bool ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList4
                                     Data.Aeson.Types.Internal.Null
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList1 })))
                      } in
                      (\ @ f4 :: * -> *
                         @ r
                         (path :: Data.Aeson.Types.Internal.JSONPath)
                         (kf :: Data.Aeson.Types.Internal.Failure f4 r)
                         (_ks :: Data.Aeson.Types.Internal.Success
                                   [Language.PureScript.Errors.JSON.JSONResult] f4 r) ->
                       kf
                         (GHC.List.reverse @ Data.Aeson.Types.Internal.JSONPathElement path)
                         msg19)
                        `cast`
                      (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                <[Language.PureScript.Errors.JSON.JSONResult]>_R))
                   Data.Aeson.Types.Internal.Array a2
                   -> case a2 of wild1 { Data.Vector.Vector dt dt1 dt2 ->
                      letrec {
                        $wgo :: GHC.Prim.Int# -> [Data.Aeson.Types.Internal.Value]
                          {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                        = \ (ww :: GHC.Prim.Int#) ->
                          case GHC.Prim.>=# ww dt1 of lwild {
                            DEFAULT
                            -> case GHC.Prim.indexArray#
                                      @ Data.Aeson.Types.Internal.Value
                                      dt2
                                      (GHC.Prim.+# dt ww) of ds3 { Unit# ipv8 ->
                               GHC.Types.:
                                 @ Data.Aeson.Types.Internal.Value
                                 ipv8
                                 ($wgo (GHC.Prim.+# ww 1#)) }
                            1# -> GHC.Types.[] @ Data.Aeson.Types.Internal.Value }
                      } in
                      Language.PureScript.Errors.JSON.$fFromJSONJSONResult_go
                        0#
                        ($wgo 0#) } }) -}
764cc1f4fb4493f9ef09b3f5b0e97737
  $fFromJSONJSONResult_go ::
    GHC.Prim.Int#
    -> [Data.Aeson.Types.Internal.Value]
    -> Data.Aeson.Types.Internal.Parser
         [Language.PureScript.Errors.JSON.JSONResult]
  {- Arity: 2, Strictness: <L,U><S,1*U> -}
6bbc5f7714849fe1dfea6d31b049c518
  $fOrdErrorPosition ::
    GHC.Classes.Ord Language.PureScript.Errors.JSON.ErrorPosition
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Errors.JSON.ErrorPosition
                  Language.PureScript.Errors.JSON.$fEqErrorPosition
                  Language.PureScript.Errors.JSON.$fOrdErrorPosition_$ccompare
                  Language.PureScript.Errors.JSON.$fOrdErrorPosition_$c<
                  Language.PureScript.Errors.JSON.$fOrdErrorPosition_$c<=
                  Language.PureScript.Errors.JSON.$fOrdErrorPosition_$c>
                  Language.PureScript.Errors.JSON.$fOrdErrorPosition_$c>=
                  Language.PureScript.Errors.JSON.$fOrdErrorPosition_$cmax
                  Language.PureScript.Errors.JSON.$fOrdErrorPosition_$cmin -}
6bbc5f7714849fe1dfea6d31b049c518
  $fOrdErrorPosition_$c< ::
    Language.PureScript.Errors.JSON.ErrorPosition
    -> Language.PureScript.Errors.JSON.ErrorPosition -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)LLL),1*U(1*U(U),1*U(U),1*U(U),1*U(U))><S(S(S)LLL),1*U(1*U(U),1*U(U),1*U(U),1*U(U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Errors.JSON.ErrorPosition)
                   (w1 :: Language.PureScript.Errors.JSON.ErrorPosition) ->
                 case w of ww { Language.PureScript.Errors.JSON.ErrorPosition ww1 ww2 ww3 ww4 ->
                 case ww1 of ww5 { GHC.Types.I# ww6 ->
                 case w1 of ww7 { Language.PureScript.Errors.JSON.ErrorPosition ww8 ww9 ww10 ww11 ->
                 case ww8 of ww12 { GHC.Types.I# ww13 ->
                 Language.PureScript.Errors.JSON.$w$c<
                   ww6
                   ww2
                   ww3
                   ww4
                   ww13
                   ww9
                   ww10
                   ww11 } } } }) -}
6bbc5f7714849fe1dfea6d31b049c518
  $fOrdErrorPosition_$c<= ::
    Language.PureScript.Errors.JSON.ErrorPosition
    -> Language.PureScript.Errors.JSON.ErrorPosition -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)LLL),1*U(1*U(U),1*U(U),1*U(U),1*U(U))><S(S(S)LLL),1*U(1*U(U),1*U(U),1*U(U),1*U(U))>,
     Unfolding: InlineRule (2, True, False)
                (\ (a2 :: Language.PureScript.Errors.JSON.ErrorPosition)
                   (b :: Language.PureScript.Errors.JSON.ErrorPosition) ->
                 case Language.PureScript.Errors.JSON.$fOrdErrorPosition_$c<
                        b
                        a2 of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
6bbc5f7714849fe1dfea6d31b049c518
  $fOrdErrorPosition_$c> ::
    Language.PureScript.Errors.JSON.ErrorPosition
    -> Language.PureScript.Errors.JSON.ErrorPosition -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)LLL),1*U(1*U(U),1*U(U),1*U(U),1*U(U))><S(S(S)LLL),1*U(1*U(U),1*U(U),1*U(U),1*U(U))>,
     Unfolding: InlineRule (2, True, True)
                (\ (a2 :: Language.PureScript.Errors.JSON.ErrorPosition)
                   (b :: Language.PureScript.Errors.JSON.ErrorPosition) ->
                 Language.PureScript.Errors.JSON.$fOrdErrorPosition_$c< b a2) -}
6bbc5f7714849fe1dfea6d31b049c518
  $fOrdErrorPosition_$c>= ::
    Language.PureScript.Errors.JSON.ErrorPosition
    -> Language.PureScript.Errors.JSON.ErrorPosition -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)LLL),1*U(1*U(U),1*U(U),1*U(U),1*U(U))><S(S(S)LLL),1*U(1*U(U),1*U(U),1*U(U),1*U(U))>,
     Unfolding: InlineRule (2, True, False)
                (\ (a2 :: Language.PureScript.Errors.JSON.ErrorPosition)
                   (b :: Language.PureScript.Errors.JSON.ErrorPosition) ->
                 case Language.PureScript.Errors.JSON.$fOrdErrorPosition_$c<
                        a2
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
6bbc5f7714849fe1dfea6d31b049c518
  $fOrdErrorPosition_$ccompare ::
    Language.PureScript.Errors.JSON.ErrorPosition
    -> Language.PureScript.Errors.JSON.ErrorPosition
    -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)LLL),1*U(1*U(U),1*U(U),1*U(U),1*U(U))><S(S(S)LLL),1*U(1*U(U),1*U(U),1*U(U),1*U(U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Errors.JSON.ErrorPosition)
                   (w1 :: Language.PureScript.Errors.JSON.ErrorPosition) ->
                 case w of ww { Language.PureScript.Errors.JSON.ErrorPosition ww1 ww2 ww3 ww4 ->
                 case ww1 of ww5 { GHC.Types.I# ww6 ->
                 case w1 of ww7 { Language.PureScript.Errors.JSON.ErrorPosition ww8 ww9 ww10 ww11 ->
                 case ww8 of ww12 { GHC.Types.I# ww13 ->
                 Language.PureScript.Errors.JSON.$w$ccompare
                   ww6
                   ww2
                   ww3
                   ww4
                   ww13
                   ww9
                   ww10
                   ww11 } } } }) -}
6bbc5f7714849fe1dfea6d31b049c518
  $fOrdErrorPosition_$cmax ::
    Language.PureScript.Errors.JSON.ErrorPosition
    -> Language.PureScript.Errors.JSON.ErrorPosition
    -> Language.PureScript.Errors.JSON.ErrorPosition
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)LLL),1*U(U(U),U(U),U(U),U(U))><S(S(S)LLL),1*U(U(U),U(U),U(U),U(U))>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Errors.JSON.ErrorPosition)
                   (y :: Language.PureScript.Errors.JSON.ErrorPosition) ->
                 case Language.PureScript.Errors.JSON.$fOrdErrorPosition_$c<
                        y
                        x of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
6bbc5f7714849fe1dfea6d31b049c518
  $fOrdErrorPosition_$cmin ::
    Language.PureScript.Errors.JSON.ErrorPosition
    -> Language.PureScript.Errors.JSON.ErrorPosition
    -> Language.PureScript.Errors.JSON.ErrorPosition
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)LLL),1*U(U(U),U(U),U(U),U(U))><S(S(S)LLL),1*U(U(U),U(U),U(U),U(U))>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Language.PureScript.Errors.JSON.ErrorPosition)
                   (y :: Language.PureScript.Errors.JSON.ErrorPosition) ->
                 case Language.PureScript.Errors.JSON.$fOrdErrorPosition_$c<
                        y
                        x of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
6bbc5f7714849fe1dfea6d31b049c518
  $fShowErrorPosition ::
    GHC.Show.Show Language.PureScript.Errors.JSON.ErrorPosition
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Errors.JSON.ErrorPosition
                  Language.PureScript.Errors.JSON.$fShowErrorPosition_$cshowsPrec
                  Language.PureScript.Errors.JSON.$fShowErrorPosition_$cshow
                  Language.PureScript.Errors.JSON.$fShowErrorPosition_$cshowList -}
6bbc5f7714849fe1dfea6d31b049c518
  $fShowErrorPosition1 ::
    Language.PureScript.Errors.JSON.ErrorPosition -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(1*U(U),1*U(U),1*U(U),1*U(U))><L,U>,
     Unfolding: (\ (w :: Language.PureScript.Errors.JSON.ErrorPosition)
                   (w1 :: GHC.Base.String) ->
                 case w of ww { Language.PureScript.Errors.JSON.ErrorPosition ww1 ww2 ww3 ww4 ->
                 Language.PureScript.Errors.JSON.$w$cshowsPrec
                   0#
                   ww1
                   ww2
                   ww3
                   ww4
                   w1 }) -}
ea0c68214234422107c0d8c17c1867f4
  $fShowErrorPosition2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Errors.JSON.$fShowErrorPosition3) -}
59cf7d65252eb9984afeeeaed7a5104e
  $fShowErrorPosition3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ErrorPosition {"#) -}
f462c5fef7682475cf6e746b348d287e
  $fShowErrorPosition4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("}"#) -}
100502e63a5c9e6ee058b78eee40f797
  $fShowErrorPosition5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("endColumn = "#) -}
08b414ce16842d9a49522a5e4b1f1333
  $fShowErrorPosition6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("endLine = "#) -}
bcf33233632aef4905e46cb2e6d09bdd
  $fShowErrorPosition7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("startColumn = "#) -}
2ff232431a9f16c7328bf1c9cfe19a30
  $fShowErrorPosition8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("startLine = "#) -}
b522b87067d5b9ce20404cb946e6840c
  $fShowErrorPosition9 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
6bbc5f7714849fe1dfea6d31b049c518
  $fShowErrorPosition_$cshow ::
    Language.PureScript.Errors.JSON.ErrorPosition -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U(U),1*U(U),1*U(U),1*U(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Errors.JSON.ErrorPosition) ->
                 Language.PureScript.Errors.JSON.$fShowErrorPosition_$cshowsPrec
                   Language.PureScript.Errors.JSON.$fShowErrorPosition9
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
6bbc5f7714849fe1dfea6d31b049c518
  $fShowErrorPosition_$cshowList ::
    [Language.PureScript.Errors.JSON.ErrorPosition] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Errors.JSON.ErrorPosition])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Errors.JSON.ErrorPosition
                   Language.PureScript.Errors.JSON.$fShowErrorPosition1
                   ls
                   s) -}
6bbc5f7714849fe1dfea6d31b049c518
  $fShowErrorPosition_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Errors.JSON.ErrorPosition -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <S(S),1*U(U)><S,1*U(1*U(U),1*U(U),1*U(U),1*U(U))><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Errors.JSON.ErrorPosition)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Language.PureScript.Errors.JSON.ErrorPosition ww3 ww4 ww5 ww6 ->
                 Language.PureScript.Errors.JSON.$w$cshowsPrec
                   ww1
                   ww3
                   ww4
                   ww5
                   ww6
                   w2 } }) -}
45299a45125d0010a58b2e176d366f17
  $fShowErrorSuggestion ::
    GHC.Show.Show Language.PureScript.Errors.JSON.ErrorSuggestion
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Errors.JSON.ErrorSuggestion
                  Language.PureScript.Errors.JSON.$fShowErrorSuggestion_$cshowsPrec
                  Language.PureScript.Errors.JSON.$fShowErrorSuggestion_$cshow
                  Language.PureScript.Errors.JSON.$fShowErrorSuggestion_$cshowList -}
45299a45125d0010a58b2e176d366f17
  $fShowErrorSuggestion1 ::
    Language.PureScript.Errors.JSON.ErrorSuggestion -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(U(U,U,U),1*U)>,
     Unfolding: (\ (w :: Language.PureScript.Errors.JSON.ErrorSuggestion) ->
                 case w of ww { Language.PureScript.Errors.JSON.ErrorSuggestion ww1 ww2 ->
                 Language.PureScript.Errors.JSON.$w$cshowsPrec1 0# ww1 ww2 }) -}
35588e4d7ef524d9cd649f575f077bbe
  $fShowErrorSuggestion2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("replaceRange = "#) -}
76c962ceffdbadc376c222952429494b
  $fShowErrorSuggestion3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("replacement = "#) -}
717645d81d7d26369b932e8cca574b13
  $fShowErrorSuggestion4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ErrorSuggestion {"#) -}
f4fab843ba64e974c628813110225006
  $fShowErrorSuggestion5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Errors.JSON.$fShowErrorPosition4) -}
2c355a3bc1cbf23a1d3900db07160efc
  $fShowErrorSuggestion6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   GHC.Show.$fShowMaybe4
                   Language.PureScript.Errors.JSON.$fShowErrorSuggestion5) -}
45299a45125d0010a58b2e176d366f17
  $fShowErrorSuggestion_$cshow ::
    Language.PureScript.Errors.JSON.ErrorSuggestion -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U(U,U,U),1*U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.PureScript.Errors.JSON.ErrorSuggestion) ->
                 case w of ww { Language.PureScript.Errors.JSON.ErrorSuggestion ww1 ww2 ->
                 Language.PureScript.Errors.JSON.$w$cshow ww1 ww2 }) -}
45299a45125d0010a58b2e176d366f17
  $fShowErrorSuggestion_$cshowList ::
    [Language.PureScript.Errors.JSON.ErrorSuggestion] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Errors.JSON.ErrorSuggestion])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Errors.JSON.ErrorSuggestion
                   Language.PureScript.Errors.JSON.$fShowErrorSuggestion1
                   ls
                   s) -}
45299a45125d0010a58b2e176d366f17
  $fShowErrorSuggestion_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Errors.JSON.ErrorSuggestion
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(U(U,U,U),1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Errors.JSON.ErrorSuggestion) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Language.PureScript.Errors.JSON.ErrorSuggestion ww3 ww4 ->
                 Language.PureScript.Errors.JSON.$w$cshowsPrec1 ww1 ww3 ww4 } }) -}
48d560460478effa7fc17cacd364d1fd
  $fShowJSONError ::
    GHC.Show.Show Language.PureScript.Errors.JSON.JSONError
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Errors.JSON.JSONError
                  Language.PureScript.Errors.JSON.$fShowJSONError_$cshowsPrec
                  Language.PureScript.Errors.JSON.$fShowJSONError_$cshow
                  Language.PureScript.Errors.JSON.$fShowJSONError_$cshowList -}
48d560460478effa7fc17cacd364d1fd
  $fShowJSONError1 ::
    Language.PureScript.Errors.JSON.JSONError -> GHC.Show.ShowS
  {- Arity: 1,
     Strictness: <S,1*U(1*U,U,U(U,U,U),U(U,U,U),1*U,1*U,1*U,U)>,
     Unfolding: (\ (w :: Language.PureScript.Errors.JSON.JSONError) ->
                 case w of ww { Language.PureScript.Errors.JSON.JSONError ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 Language.PureScript.Errors.JSON.$w$cshowsPrec2
                   0#
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8 }) -}
48d560460478effa7fc17cacd364d1fd
  $fShowJSONError_$cshow ::
    Language.PureScript.Errors.JSON.JSONError -> GHC.Base.String
  {- Arity: 1,
     Strictness: <S,1*U(1*U,U,U(U,U,U),U(U,U,U),1*U,1*U,1*U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Errors.JSON.JSONError) ->
                 Language.PureScript.Errors.JSON.$fShowJSONError_$cshowsPrec
                   Language.PureScript.Errors.JSON.$fShowErrorPosition9
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
48d560460478effa7fc17cacd364d1fd
  $fShowJSONError_$cshowList ::
    [Language.PureScript.Errors.JSON.JSONError] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Errors.JSON.JSONError])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Errors.JSON.JSONError
                   Language.PureScript.Errors.JSON.$fShowJSONError1
                   ls
                   s) -}
48d560460478effa7fc17cacd364d1fd
  $fShowJSONError_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Errors.JSON.JSONError -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S(S),1*U(U)><S,1*U(1*U,U,U(U,U,U),U(U,U,U),1*U,1*U,1*U,U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Errors.JSON.JSONError) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Language.PureScript.Errors.JSON.JSONError ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ->
                 Language.PureScript.Errors.JSON.$w$cshowsPrec2
                   ww1
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10 } }) -}
764cc1f4fb4493f9ef09b3f5b0e97737
  $fShowJSONResult ::
    GHC.Show.Show Language.PureScript.Errors.JSON.JSONResult
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Errors.JSON.JSONResult
                  Language.PureScript.Errors.JSON.$fShowJSONResult_$cshowsPrec
                  Language.PureScript.Errors.JSON.$fShowJSONResult_$cshow
                  Language.PureScript.Errors.JSON.$fShowJSONResult_$cshowList -}
764cc1f4fb4493f9ef09b3f5b0e97737
  $fShowJSONResult1 ::
    Language.PureScript.Errors.JSON.JSONResult -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U(1*U,1*U)><L,U>,
     Unfolding: (\ (w :: Language.PureScript.Errors.JSON.JSONResult)
                   (w1 :: GHC.Base.String) ->
                 case w of ww { Language.PureScript.Errors.JSON.JSONResult ww1 ww2 ->
                 Language.PureScript.Errors.JSON.$w$cshowsPrec3 0# ww1 ww2 w1 }) -}
764cc1f4fb4493f9ef09b3f5b0e97737
  $fShowJSONResult_$cshow ::
    Language.PureScript.Errors.JSON.JSONResult -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Errors.JSON.JSONResult) ->
                 Language.PureScript.Errors.JSON.$fShowJSONResult_$cshowsPrec
                   Language.PureScript.Errors.JSON.$fShowErrorPosition9
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
764cc1f4fb4493f9ef09b3f5b0e97737
  $fShowJSONResult_$cshowList ::
    [Language.PureScript.Errors.JSON.JSONResult] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Errors.JSON.JSONResult])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Errors.JSON.JSONResult
                   Language.PureScript.Errors.JSON.$fShowJSONResult1
                   ls
                   s) -}
764cc1f4fb4493f9ef09b3f5b0e97737
  $fShowJSONResult_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Errors.JSON.JSONResult -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Errors.JSON.JSONResult)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Language.PureScript.Errors.JSON.JSONResult ww3 ww4 ->
                 Language.PureScript.Errors.JSON.$w$cshowsPrec3
                   ww1
                   ww3
                   ww4
                   w2 } }) -}
6bbc5f7714849fe1dfea6d31b049c518
  $fToJSONErrorPosition ::
    Data.Aeson.Types.ToJSON.ToJSON
      Language.PureScript.Errors.JSON.ErrorPosition
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Errors.JSON.ErrorPosition
                  Language.PureScript.Errors.JSON.$fToJSONErrorPosition_$ctoJSON
                  Language.PureScript.Errors.JSON.$fToJSONErrorPosition1
                    `cast`
                  (<Language.PureScript.Errors.JSON.ErrorPosition>_R
                   ->_R Sym (Data.ByteString.Builder.Internal.N:Builder[0]) ; Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                                                       <Data.Aeson.Types.Internal.Value>_P))
                  Language.PureScript.Errors.JSON.$fToJSONErrorPosition_$ctoJSONList
                  Language.PureScript.Errors.JSON.$fToJSONErrorPosition_$ctoEncodingList -}
6bbc5f7714849fe1dfea6d31b049c518
  $fToJSONErrorPosition1 ::
    Language.PureScript.Errors.JSON.ErrorPosition
    -> forall r.
       Data.ByteString.Builder.Internal.BuildStep r
       -> Data.ByteString.Builder.Internal.BuildStep r
  {- Arity: 2,
     Strictness: <S,1*U(U(U),U(U),U(U),U(U))><L,C(C1(U(U,U)))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Errors.JSON.ErrorPosition)
                   @ r
                   (w1 :: Data.ByteString.Builder.Internal.BuildStep r) ->
                 case w of ww { Language.PureScript.Errors.JSON.ErrorPosition ww1 ww2 ww3 ww4 ->
                 Language.PureScript.Errors.JSON.$w$ctoEncoding
                   ww1
                   ww2
                   ww3
                   ww4
                   @ r
                   w1 }) -}
6d99bf085a06ff82e855f7a9a7b48ba1
  $fToJSONErrorPosition10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Errors.JSON.$fFromJSONErrorPosition9) -}
32933634e177ace83a80aba887176078
  $fToJSONErrorPosition11 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Text.Internal.Text #)
                        Language.PureScript.Errors.JSON.$fToJSONErrorPosition12 of ds1 { (#,#) ipv8 ipv9 ->
                 ipv9 }) -}
3c9d46100d05a41c7557555f89dbde0e
  $fToJSONErrorPosition12 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        10#
                        s1 of ds1 { (#,#) ipv8 ipv9 ->
                 Data.Aeson.Types.ToJSON.$wouter1
                   ipv9
                   4#
                   Language.PureScript.Errors.JSON.$fToJSONErrorPosition13
                   0#
                   ipv8 }) -}
6c54c20dc01e5aa7a47b8a2bc6fa5405
  $fToJSONErrorPosition13 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Errors.JSON.$fFromJSONErrorPosition11) -}
051f49e0a89a6c629479df3878579cb6
  $fToJSONErrorPosition2 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Text.Internal.Text #)
                        Language.PureScript.Errors.JSON.$fToJSONErrorPosition3 of ds1 { (#,#) ipv8 ipv9 ->
                 ipv9 }) -}
0fb969d85ebc941fd5f49d4483c93292
  $fToJSONErrorPosition3 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        10#
                        s1 of ds1 { (#,#) ipv8 ipv9 ->
                 Data.Aeson.Types.ToJSON.$wouter1
                   ipv9
                   4#
                   Language.PureScript.Errors.JSON.$fToJSONErrorPosition4
                   0#
                   ipv8 }) -}
488881fcdf4b51c9df90b233547aa1cc
  $fToJSONErrorPosition4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Errors.JSON.$fFromJSONErrorPosition5) -}
e8e30584354b4170a1fcddcdc65bd160
  $fToJSONErrorPosition5 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Text.Internal.Text #)
                        Language.PureScript.Errors.JSON.$fToJSONErrorPosition6 of ds1 { (#,#) ipv8 ipv9 ->
                 ipv9 }) -}
0d2635e1ad85223f06067f0ec2da52b5
  $fToJSONErrorPosition6 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        10#
                        s1 of ds1 { (#,#) ipv8 ipv9 ->
                 Data.Aeson.Types.ToJSON.$wouter1
                   ipv9
                   4#
                   Language.PureScript.Errors.JSON.$fToJSONErrorPosition7
                   0#
                   ipv8 }) -}
1e75a4f1352f6c912bb14d83f056bca2
  $fToJSONErrorPosition7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Errors.JSON.$fFromJSONErrorPosition7) -}
d0901903d58ce39383441fd6be245967
  $fToJSONErrorPosition8 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Text.Internal.Text #)
                        Language.PureScript.Errors.JSON.$fToJSONErrorPosition9 of ds1 { (#,#) ipv8 ipv9 ->
                 ipv9 }) -}
a6f7d60ebbe85db43c508e9b670c8f87
  $fToJSONErrorPosition9 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        10#
                        s1 of ds1 { (#,#) ipv8 ipv9 ->
                 Data.Aeson.Types.ToJSON.$wouter1
                   ipv9
                   4#
                   Language.PureScript.Errors.JSON.$fToJSONErrorPosition10
                   0#
                   ipv8 }) -}
6bbc5f7714849fe1dfea6d31b049c518
  $fToJSONErrorPosition_$ctoEncodingList ::
    [Language.PureScript.Errors.JSON.ErrorPosition]
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (Data.Aeson.Encoding.Internal.list
                   @ Language.PureScript.Errors.JSON.ErrorPosition
                   Language.PureScript.Errors.JSON.$fToJSONErrorPosition1
                     `cast`
                   (<Language.PureScript.Errors.JSON.ErrorPosition>_R
                    ->_R Sym (Data.ByteString.Builder.Internal.N:Builder[0]) ; Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                                                        <Data.Aeson.Types.Internal.Value>_P))) -}
6bbc5f7714849fe1dfea6d31b049c518
  $fToJSONErrorPosition_$ctoJSON ::
    Language.PureScript.Errors.JSON.ErrorPosition
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U(1*U(U),1*U(U),1*U(U),1*U(U))>m1,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.PureScript.Errors.JSON.ErrorPosition) ->
                 case w of ww { Language.PureScript.Errors.JSON.ErrorPosition ww1 ww2 ww3 ww4 ->
                 case Language.PureScript.Errors.JSON.$w$ctoJSON
                        ww1
                        ww2
                        ww3
                        ww4 of ww5 { Unit# ww6 ->
                 Data.Aeson.Types.Internal.Object ww6 } }) -}
6bbc5f7714849fe1dfea6d31b049c518
  $fToJSONErrorPosition_$ctoJSONList ::
    [Language.PureScript.Errors.JSON.ErrorPosition]
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (x :: [Language.PureScript.Errors.JSON.ErrorPosition]) ->
                 Data.Aeson.Types.Internal.$WArray
                   (Data.Vector.Generic.new
                      @ Data.Vector.Vector
                      @ Data.Aeson.Types.Internal.Value
                      (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                      (Data.Vector.Generic.New.unstream
                         @ Data.Vector.Vector
                         @ Data.Aeson.Types.Internal.Value
                         (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                         (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                            @ Data.Vector.Fusion.Util.Id
                            @ Data.Aeson.Types.Internal.Value
                            @ Data.Vector.Vector
                            Data.Vector.Fusion.Util.$fMonadId
                            Data.Vector.Fusion.Bundle.Size.Unknown
                            (GHC.Base.build
                               @ Data.Aeson.Types.Internal.Value
                               (\ @ b1
                                  (c :: Data.Aeson.Types.Internal.Value -> b1 -> b1)[OneShot]
                                  (n1 :: b1)[OneShot] ->
                                GHC.Base.foldr
                                  @ Language.PureScript.Errors.JSON.ErrorPosition
                                  @ b1
                                  (GHC.Base.mapFB
                                     @ Data.Aeson.Types.Internal.Value
                                     @ b1
                                     @ Language.PureScript.Errors.JSON.ErrorPosition
                                     c
                                     Language.PureScript.Errors.JSON.$fToJSONErrorPosition_$ctoJSON)
                                  n1
                                  x)))))) -}
45299a45125d0010a58b2e176d366f17
  $fToJSONErrorSuggestion ::
    Data.Aeson.Types.ToJSON.ToJSON
      Language.PureScript.Errors.JSON.ErrorSuggestion
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Errors.JSON.ErrorSuggestion
                  Language.PureScript.Errors.JSON.$fToJSONErrorSuggestion_$ctoJSON
                  Language.PureScript.Errors.JSON.$fToJSONErrorSuggestion1
                    `cast`
                  (<Language.PureScript.Errors.JSON.ErrorSuggestion>_R
                   ->_R Sym (Data.ByteString.Builder.Internal.N:Builder[0]) ; Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                                                       <Data.Aeson.Types.Internal.Value>_P))
                  Language.PureScript.Errors.JSON.$fToJSONErrorSuggestion_$ctoJSONList
                  Language.PureScript.Errors.JSON.$fToJSONErrorSuggestion_$ctoEncodingList -}
45299a45125d0010a58b2e176d366f17
  $fToJSONErrorSuggestion1 ::
    Language.PureScript.Errors.JSON.ErrorSuggestion
    -> forall r.
       Data.ByteString.Builder.Internal.BuildStep r
       -> Data.ByteString.Builder.Internal.BuildStep r
  {- Arity: 2, Strictness: <S,1*U(U(U,U,U),U)><L,C(C1(U(U,U)))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Language.PureScript.Errors.JSON.ErrorSuggestion)
                   @ r
                   (w1 :: Data.ByteString.Builder.Internal.BuildStep r) ->
                 case w of ww { Language.PureScript.Errors.JSON.ErrorSuggestion ww1 ww2 ->
                 Language.PureScript.Errors.JSON.$w$ctoEncoding1
                   ww1
                   ww2
                   @ r
                   w1 }) -}
ca6ed55d2b0bfe7df112f095b483cbe9
  $fToJSONErrorSuggestion2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Errors.JSON.$fFromJSONErrorSuggestion4) -}
4ad909e11f2145b569c1c3705d4a655f
  $fToJSONErrorSuggestion3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Errors.JSON.$fFromJSONErrorSuggestion1) -}
dfaa1b1fc804de1826ae5022b1903cdb
  $fToJSONErrorSuggestion4 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Text.Internal.Text #)
                        Language.PureScript.Errors.JSON.$fToJSONErrorSuggestion5 of ds1 { (#,#) ipv8 ipv9 ->
                 ipv9 }) -}
96595385df2bc23c03ba3bf1323a6eb2
  $fToJSONErrorSuggestion5 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        10#
                        s1 of ds1 { (#,#) ipv8 ipv9 ->
                 Data.Aeson.Types.ToJSON.$wouter1
                   ipv9
                   4#
                   (GHC.CString.unpackCString#
                      Language.PureScript.Errors.JSON.$fFromJSONErrorSuggestion1)
                   0#
                   ipv8 }) -}
e4709fe5c6f6c0b6672d6d580ce76e37
  $fToJSONErrorSuggestion6 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Text.Internal.Text #)
                        Language.PureScript.Errors.JSON.$fToJSONErrorSuggestion7 of ds1 { (#,#) ipv8 ipv9 ->
                 ipv9 }) -}
d52a8709bde0586922695204fd54f580
  $fToJSONErrorSuggestion7 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        10#
                        s1 of ds1 { (#,#) ipv8 ipv9 ->
                 Data.Aeson.Types.ToJSON.$wouter1
                   ipv9
                   4#
                   (GHC.CString.unpackCString#
                      Language.PureScript.Errors.JSON.$fFromJSONErrorSuggestion4)
                   0#
                   ipv8 }) -}
45299a45125d0010a58b2e176d366f17
  $fToJSONErrorSuggestion_$ctoEncodingList ::
    [Language.PureScript.Errors.JSON.ErrorSuggestion]
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (Data.Aeson.Encoding.Internal.list
                   @ Language.PureScript.Errors.JSON.ErrorSuggestion
                   Language.PureScript.Errors.JSON.$fToJSONErrorSuggestion1
                     `cast`
                   (<Language.PureScript.Errors.JSON.ErrorSuggestion>_R
                    ->_R Sym (Data.ByteString.Builder.Internal.N:Builder[0]) ; Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                                                        <Data.Aeson.Types.Internal.Value>_P))) -}
45299a45125d0010a58b2e176d366f17
  $fToJSONErrorSuggestion_$ctoJSON ::
    Language.PureScript.Errors.JSON.ErrorSuggestion
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U(U,1*U)>m1, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.PureScript.Errors.JSON.ErrorSuggestion) ->
                 case w of ww { Language.PureScript.Errors.JSON.ErrorSuggestion ww1 ww2 ->
                 case Language.PureScript.Errors.JSON.$w$ctoJSON1
                        ww1
                        ww2 of ww3 { Unit# ww4 ->
                 Data.Aeson.Types.Internal.Object ww4 } }) -}
45299a45125d0010a58b2e176d366f17
  $fToJSONErrorSuggestion_$ctoJSONList ::
    [Language.PureScript.Errors.JSON.ErrorSuggestion]
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (x :: [Language.PureScript.Errors.JSON.ErrorSuggestion]) ->
                 Data.Aeson.Types.Internal.$WArray
                   (Data.Vector.Generic.new
                      @ Data.Vector.Vector
                      @ Data.Aeson.Types.Internal.Value
                      (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                      (Data.Vector.Generic.New.unstream
                         @ Data.Vector.Vector
                         @ Data.Aeson.Types.Internal.Value
                         (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                         (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                            @ Data.Vector.Fusion.Util.Id
                            @ Data.Aeson.Types.Internal.Value
                            @ Data.Vector.Vector
                            Data.Vector.Fusion.Util.$fMonadId
                            Data.Vector.Fusion.Bundle.Size.Unknown
                            (GHC.Base.build
                               @ Data.Aeson.Types.Internal.Value
                               (\ @ b1
                                  (c :: Data.Aeson.Types.Internal.Value -> b1 -> b1)[OneShot]
                                  (n1 :: b1)[OneShot] ->
                                GHC.Base.foldr
                                  @ Language.PureScript.Errors.JSON.ErrorSuggestion
                                  @ b1
                                  (GHC.Base.mapFB
                                     @ Data.Aeson.Types.Internal.Value
                                     @ b1
                                     @ Language.PureScript.Errors.JSON.ErrorSuggestion
                                     c
                                     Language.PureScript.Errors.JSON.$fToJSONErrorSuggestion_$ctoJSON)
                                  n1
                                  x)))))) -}
23099950428ec7b4cd50675e45174272
  $fToJSONErrorSuggestion_$d~~ ::
    (Data.Aeson.Types.Internal.Value :: *)
    GHC.Types.~~ (Data.Aeson.Types.Internal.Value :: *)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Eq#
                   @ *
                   @ *
                   @ Data.Aeson.Types.Internal.Value
                   @ Data.Aeson.Types.Internal.Value
                   @~ <Data.Aeson.Types.Internal.Value>_N) -}
48d560460478effa7fc17cacd364d1fd
  $fToJSONJSONError ::
    Data.Aeson.Types.ToJSON.ToJSON
      Language.PureScript.Errors.JSON.JSONError
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Errors.JSON.JSONError
                  Language.PureScript.Errors.JSON.$fToJSONJSONError_$ctoJSON
                  Language.PureScript.Errors.JSON.$fToJSONJSONError_$ctoEncoding
                  Language.PureScript.Errors.JSON.$fToJSONJSONError_$ctoJSONList
                  Language.PureScript.Errors.JSON.$fToJSONJSONError_$ctoEncodingList -}
48d560460478effa7fc17cacd364d1fd
  $fToJSONJSONError_$ctoEncoding ::
    Language.PureScript.Errors.JSON.JSONError
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Strictness: <S,1*U(U,U,U(U,U,U),U(U,U,U),U,U,U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.PureScript.Errors.JSON.JSONError) ->
                 case w of ww { Language.PureScript.Errors.JSON.JSONError ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 (Language.PureScript.Errors.JSON.$w$ctoEncoding2
                    ww1
                    ww2
                    ww3
                    ww4
                    ww5
                    ww6
                    ww7
                    ww8)
                   `cast`
                 (Sym (Data.ByteString.Builder.Internal.N:Builder[0]) ; Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                                                 <Data.Aeson.Types.Internal.Value>_P)) }) -}
48d560460478effa7fc17cacd364d1fd
  $fToJSONJSONError_$ctoEncodingList ::
    [Language.PureScript.Errors.JSON.JSONError]
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (Data.Aeson.Encoding.Internal.list
                   @ Language.PureScript.Errors.JSON.JSONError
                   Language.PureScript.Errors.JSON.$fToJSONJSONError_$ctoEncoding) -}
48d560460478effa7fc17cacd364d1fd
  $fToJSONJSONError_$ctoJSON ::
    Language.PureScript.Errors.JSON.JSONError
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U,U,U,1*U,1*U,1*U,1*U)>m1,
     Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.PureScript.Errors.JSON.JSONError) ->
                 case w of ww { Language.PureScript.Errors.JSON.JSONError ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 case Language.PureScript.Errors.JSON.$w$ctoJSON2
                        ww1
                        ww2
                        ww3
                        ww4
                        ww5
                        ww6
                        ww7
                        ww8 of ww9 { Unit# ww10 ->
                 Data.Aeson.Types.Internal.Object ww10 } }) -}
48d560460478effa7fc17cacd364d1fd
  $fToJSONJSONError_$ctoJSONList ::
    [Language.PureScript.Errors.JSON.JSONError]
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (x :: [Language.PureScript.Errors.JSON.JSONError]) ->
                 Data.Aeson.Types.Internal.$WArray
                   (Data.Vector.Generic.new
                      @ Data.Vector.Vector
                      @ Data.Aeson.Types.Internal.Value
                      (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                      (Data.Vector.Generic.New.unstream
                         @ Data.Vector.Vector
                         @ Data.Aeson.Types.Internal.Value
                         (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                         (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                            @ Data.Vector.Fusion.Util.Id
                            @ Data.Aeson.Types.Internal.Value
                            @ Data.Vector.Vector
                            Data.Vector.Fusion.Util.$fMonadId
                            Data.Vector.Fusion.Bundle.Size.Unknown
                            (GHC.Base.build
                               @ Data.Aeson.Types.Internal.Value
                               (\ @ b1
                                  (c :: Data.Aeson.Types.Internal.Value -> b1 -> b1)[OneShot]
                                  (n1 :: b1)[OneShot] ->
                                GHC.Base.foldr
                                  @ Language.PureScript.Errors.JSON.JSONError
                                  @ b1
                                  (GHC.Base.mapFB
                                     @ Data.Aeson.Types.Internal.Value
                                     @ b1
                                     @ Language.PureScript.Errors.JSON.JSONError
                                     c
                                     Language.PureScript.Errors.JSON.$fToJSONJSONError_$ctoJSON)
                                  n1
                                  x)))))) -}
764cc1f4fb4493f9ef09b3f5b0e97737
  $fToJSONJSONResult ::
    Data.Aeson.Types.ToJSON.ToJSON
      Language.PureScript.Errors.JSON.JSONResult
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Errors.JSON.JSONResult
                  Language.PureScript.Errors.JSON.$fToJSONJSONResult_$ctoJSON
                  Language.PureScript.Errors.JSON.$fToJSONJSONResult_$ctoEncoding
                  Language.PureScript.Errors.JSON.$fToJSONJSONResult_$ctoJSONList
                  Language.PureScript.Errors.JSON.$fToJSONJSONResult_$ctoEncodingList -}
ee555715d3f563664f8b1ec97ad784a6
  $fToJSONJSONResult1 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Text.Internal.Text #)
                        Language.PureScript.Errors.JSON.$fToJSONJSONResult2 of ds1 { (#,#) ipv8 ipv9 ->
                 ipv9 }) -}
0823f5c1cd8e4aff24d4caa2749d2ae3
  $fToJSONJSONResult2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        10#
                        s1 of ds1 { (#,#) ipv8 ipv9 ->
                 Data.Aeson.Types.ToJSON.$wouter1
                   ipv9
                   4#
                   (GHC.CString.unpackCString#
                      Language.PureScript.Errors.JSON.$fFromJSONJSONResult2)
                   0#
                   ipv8 }) -}
4ee14223bb52d8581e86f58e24f779f6
  $fToJSONJSONResult3 :: Data.Text.Internal.Text
  {- Unfolding: (case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Text.Internal.Text #)
                        Language.PureScript.Errors.JSON.$fToJSONJSONResult4 of ds1 { (#,#) ipv8 ipv9 ->
                 ipv9 }) -}
cfc6c50cec65c3ed0e588e15a795641f
  $fToJSONJSONResult4 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s1 :: GHC.Prim.State#
                            GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newByteArray#
                        @ GHC.Prim.RealWorld
                        10#
                        s1 of ds1 { (#,#) ipv8 ipv9 ->
                 Data.Aeson.Types.ToJSON.$wouter1
                   ipv9
                   4#
                   (GHC.CString.unpackCString#
                      Language.PureScript.Errors.JSON.$fFromJSONJSONResult4)
                   0#
                   ipv8 }) -}
764cc1f4fb4493f9ef09b3f5b0e97737
  $fToJSONJSONResult_$ctoEncoding ::
    Language.PureScript.Errors.JSON.JSONResult
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.PureScript.Errors.JSON.JSONResult) ->
                 case w of ww { Language.PureScript.Errors.JSON.JSONResult ww1 ww2 ->
                 (Language.PureScript.Errors.JSON.$w$ctoEncoding3 ww1 ww2)
                   `cast`
                 (Sym (Data.ByteString.Builder.Internal.N:Builder[0]) ; Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                                                 <Data.Aeson.Types.Internal.Value>_P)) }) -}
764cc1f4fb4493f9ef09b3f5b0e97737
  $fToJSONJSONResult_$ctoEncodingList ::
    [Language.PureScript.Errors.JSON.JSONResult]
    -> Data.Aeson.Encoding.Internal.Encoding
  {- Arity: 1, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (Data.Aeson.Encoding.Internal.list
                   @ Language.PureScript.Errors.JSON.JSONResult
                   Language.PureScript.Errors.JSON.$fToJSONJSONResult_$ctoEncoding) -}
764cc1f4fb4493f9ef09b3f5b0e97737
  $fToJSONJSONResult_$ctoJSON ::
    Language.PureScript.Errors.JSON.JSONResult
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U)>m1, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Language.PureScript.Errors.JSON.JSONResult) ->
                 case w of ww { Language.PureScript.Errors.JSON.JSONResult ww1 ww2 ->
                 case Language.PureScript.Errors.JSON.$w$ctoJSON3
                        ww1
                        ww2 of ww3 { Unit# ww4 ->
                 Data.Aeson.Types.Internal.Object ww4 } }) -}
764cc1f4fb4493f9ef09b3f5b0e97737
  $fToJSONJSONResult_$ctoJSONList ::
    [Language.PureScript.Errors.JSON.JSONResult]
    -> Data.Aeson.Types.Internal.Value
  {- Arity: 1, Strictness: <S,1*U>m2, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, False)
                (\ (x :: [Language.PureScript.Errors.JSON.JSONResult]) ->
                 Data.Aeson.Types.Internal.$WArray
                   (Data.Vector.Generic.new
                      @ Data.Vector.Vector
                      @ Data.Aeson.Types.Internal.Value
                      (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                      (Data.Vector.Generic.New.unstream
                         @ Data.Vector.Vector
                         @ Data.Aeson.Types.Internal.Value
                         (Data.Vector.$fVectorVectora @ Data.Aeson.Types.Internal.Value)
                         (Data.Vector.Fusion.Bundle.Monadic.unsafeFromList
                            @ Data.Vector.Fusion.Util.Id
                            @ Data.Aeson.Types.Internal.Value
                            @ Data.Vector.Vector
                            Data.Vector.Fusion.Util.$fMonadId
                            Data.Vector.Fusion.Bundle.Size.Unknown
                            (GHC.Base.build
                               @ Data.Aeson.Types.Internal.Value
                               (\ @ b1
                                  (c :: Data.Aeson.Types.Internal.Value -> b1 -> b1)[OneShot]
                                  (n1 :: b1)[OneShot] ->
                                GHC.Base.foldr
                                  @ Language.PureScript.Errors.JSON.JSONResult
                                  @ b1
                                  (GHC.Base.mapFB
                                     @ Data.Aeson.Types.Internal.Value
                                     @ b1
                                     @ Language.PureScript.Errors.JSON.JSONResult
                                     c
                                     Language.PureScript.Errors.JSON.$fToJSONJSONResult_$ctoJSON)
                                  n1
                                  x)))))) -}
02133f456261dedf41b55cbf7f09f677
  $fToJSONJSONResult_$s$wfoldlM_loop ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> [Data.Aeson.Types.Internal.Value]
    -> GHC.Prim.Int#
    -> GHC.Prim.MutableArray#
         GHC.Prim.RealWorld Data.Aeson.Types.Internal.Value
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Vector.Vector Data.Aeson.Types.Internal.Value #)
  {- Arity: 6, Strictness: <S,U><S,1*U><L,U><S,U><L,U><L,U> -}
8fca6935827b23225dfabd8a896bf0d0
  $tc'ErrorPosition :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11564781953205228662##
                   818417448864411206##
                   Language.PureScript.Errors.JSON.$trModule
                   Language.PureScript.Errors.JSON.$tc'ErrorPosition2
                   0#
                   Language.PureScript.Errors.JSON.$tc'ErrorPosition1) -}
3ed8804da0021aed9e084a1418403298
  $tc'ErrorPosition1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
9ad94b3ebb5458ffdea789665cd0864f
  $tc'ErrorPosition2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Errors.JSON.$tc'ErrorPosition3) -}
eb07358e99ddd3467a9ef9ec6035cf92
  $tc'ErrorPosition3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ErrorPosition"#) -}
93179b673b4f2b4266e1fcdf06dcb825
  $tc'ErrorSuggestion :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12294661218166037087##
                   16829036094510477643##
                   Language.PureScript.Errors.JSON.$trModule
                   Language.PureScript.Errors.JSON.$tc'ErrorSuggestion2
                   0#
                   Language.PureScript.Errors.JSON.$tc'ErrorSuggestion1) -}
ced1cc40abcd89bdb36d5240ba332280
  $tc'ErrorSuggestion1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
43b45f2e74f6ef102f080b367a124d2f
  $tc'ErrorSuggestion2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Errors.JSON.$tc'ErrorSuggestion3) -}
1a22dba30c0bef155a65029371b8a620
  $tc'ErrorSuggestion3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ErrorSuggestion"#) -}
dd8c09ec31f9b28ee6175ce16b257188
  $tc'JSONError :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3923728864617665959##
                   3837479460456323554##
                   Language.PureScript.Errors.JSON.$trModule
                   Language.PureScript.Errors.JSON.$tc'JSONError2
                   0#
                   Language.PureScript.Errors.JSON.$tc'JSONError1) -}
9223a04c839371e7189ec581307f5099
  $tc'JSONError1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
f7c11a782cb00fc7a439f5ce913ed1c4
  $tc'JSONError2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Errors.JSON.$tc'JSONError3) -}
1433bd6556d6cca5619a67526811a6ae
  $tc'JSONError3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'JSONError"#) -}
45777995d2be6e99c9d48ba4c1b8238c
  $tc'JSONResult :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9435385044711201125##
                   3790057153760127499##
                   Language.PureScript.Errors.JSON.$trModule
                   Language.PureScript.Errors.JSON.$tc'JSONResult2
                   0#
                   Language.PureScript.Errors.JSON.$tc'JSONResult1) -}
6bd4feebbdfaebec83baaa5e3f9164d7
  $tc'JSONResult1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
4bc509eade27a23c6cc7ea6f13e88924
  $tc'JSONResult2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Errors.JSON.$tc'JSONResult3) -}
7258d802a72cdbbe39351a7402ead829
  $tc'JSONResult3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'JSONResult"#) -}
b961af1509503aa5c142c2f3b0ceb01d
  $tcErrorPosition :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14455737195455735006##
                   14663855051389957177##
                   Language.PureScript.Errors.JSON.$trModule
                   Language.PureScript.Errors.JSON.$tcErrorPosition1
                   0#
                   GHC.Types.krep$*) -}
0bc15dbae75f5fd7ce2615041310d97c
  $tcErrorPosition1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Errors.JSON.$fFromJSONErrorPosition17) -}
35b4c8ad38ead826b811d8ebebbe51ca
  $tcErrorSuggestion :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13331556413942434535##
                   16163870513323654432##
                   Language.PureScript.Errors.JSON.$trModule
                   Language.PureScript.Errors.JSON.$tcErrorSuggestion1
                   0#
                   GHC.Types.krep$*) -}
97819f10a10560c8ad1bf45243bb8aa5
  $tcErrorSuggestion1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Errors.JSON.$fFromJSONErrorSuggestion8) -}
5669fdcf8ee4904362c756d96acd98d4
  $tcJSONError :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1877124173246648393##
                   11900623234842372270##
                   Language.PureScript.Errors.JSON.$trModule
                   Language.PureScript.Errors.JSON.$tcJSONError1
                   0#
                   GHC.Types.krep$*) -}
34584600700e3b2e41fc116f13758f0b
  $tcJSONError1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Errors.JSON.$tcJSONError2) -}
1d0cc6526fb6369a54a02aa8dbcd0665
  $tcJSONError2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("JSONError"#) -}
637da371018edb7c3f66d996b5d240bf
  $tcJSONResult :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2610164805810343057##
                   11422656700166079899##
                   Language.PureScript.Errors.JSON.$trModule
                   Language.PureScript.Errors.JSON.$tcJSONResult1
                   0#
                   GHC.Types.krep$*) -}
90d1e9eea14300c5d97ff0a6ce1e0640
  $tcJSONResult1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Errors.JSON.$fFromJSONJSONResult8) -}
f7d1d64165ce3d8ca550479d1efba6e3
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Language.PureScript.Errors.JSON.$trModule3
                   Language.PureScript.Errors.JSON.$trModule1) -}
d5212e3cf81d8d3c7b276f93c5196e76
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Errors.JSON.$trModule2) -}
198fc8c5473e5a9c4d7f7fc8776d7582
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Language.PureScript.Errors.JSON"#) -}
abcbb272ca30eab1c8515ce062b8c2cf
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Errors.JSON.$trModule4) -}
fbaf9ffe472af54822cbe4646d7b89a5
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"#) -}
c4ab507cc7fda19a5e03483ed02ded86
  $w$c< ::
    GHC.Prim.Int#
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Bool
  {- Arity: 8, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><L,1*U(U)><L,1*U(U)><S,U><L,1*U(U)><L,1*U(U)><L,1*U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Types.Int)
                   (ww2 :: GHC.Types.Int)
                   (ww3 :: GHC.Types.Int)
                   (ww4 :: GHC.Prim.Int#)
                   (ww5 :: GHC.Types.Int)
                   (ww6 :: GHC.Types.Int)
                   (ww7 :: GHC.Types.Int) ->
                 case GHC.Prim.<# ww ww4 of lwild {
                   DEFAULT
                   -> case GHC.Prim.==# ww ww4 of lwild1 {
                        DEFAULT -> GHC.Types.False
                        1#
                        -> case ww1 of wild { GHC.Types.I# x# ->
                           case ww5 of wild1 { GHC.Types.I# y# ->
                           case GHC.Prim.<# x# y# of lwild2 {
                             DEFAULT
                             -> case GHC.Prim.==# x# y# of lwild3 {
                                  DEFAULT -> GHC.Types.False
                                  1#
                                  -> case ww2 of wild2 { GHC.Types.I# x#1 ->
                                     case ww6 of wild3 { GHC.Types.I# y#1 ->
                                     case GHC.Prim.<# x#1 y#1 of lwild4 {
                                       DEFAULT
                                       -> case GHC.Prim.==# x#1 y#1 of lwild5 {
                                            DEFAULT -> GHC.Types.False
                                            1# -> GHC.Classes.ltInt ww3 ww7 }
                                       1# -> GHC.Types.True } } } }
                             1# -> GHC.Types.True } } } }
                   1# -> GHC.Types.True }) -}
e82dc4476091d06a5dec7e969c96f838
  $w$c== ::
    GHC.Prim.Int#
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Bool
  {- Arity: 8, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><L,1*U(U)><L,1*U(U)><S,U><L,1*U(U)><L,1*U(U)><L,1*U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Types.Int)
                   (ww2 :: GHC.Types.Int)
                   (ww3 :: GHC.Types.Int)
                   (ww4 :: GHC.Prim.Int#)
                   (ww5 :: GHC.Types.Int)
                   (ww6 :: GHC.Types.Int)
                   (ww7 :: GHC.Types.Int) ->
                 case GHC.Prim.==# ww ww4 of lwild {
                   DEFAULT -> GHC.Types.False
                   1#
                   -> case ww1 of wild { GHC.Types.I# x ->
                      case ww5 of wild1 { GHC.Types.I# y ->
                      case GHC.Prim.==# x y of lwild1 {
                        DEFAULT -> GHC.Types.False
                        1#
                        -> case ww2 of wild2 { GHC.Types.I# x1 ->
                           case ww6 of wild3 { GHC.Types.I# y1 ->
                           case GHC.Prim.==# x1 y1 of lwild2 {
                             DEFAULT -> GHC.Types.False
                             1# -> GHC.Classes.eqInt ww3 ww7 } } } } } } }) -}
60a952fdf92907d03bc9b324967df780
  $w$c==1 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Base.Maybe Language.PureScript.Errors.JSON.ErrorPosition
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Base.Maybe Language.PureScript.Errors.JSON.ErrorPosition
    -> GHC.Types.Bool
  {- Arity: 8, HasNoCafRefs,
     Strictness: <L,U><L,U><S,U><L,1*U><L,U><L,U><S,U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: GHC.Base.Maybe
                             Language.PureScript.Errors.JSON.ErrorPosition)
                   (ww4 :: GHC.Prim.ByteArray#)
                   (ww5 :: GHC.Prim.Int#)
                   (ww6 :: GHC.Prim.Int#)
                   (ww7 :: GHC.Base.Maybe
                             Language.PureScript.Errors.JSON.ErrorPosition) ->
                 case GHC.Prim.==# ww2 ww6 of lwild {
                   DEFAULT -> GHC.Types.False
                   1#
                   -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                     -> GHC.Prim.Word#
                                                     -> GHC.Prim.ByteArray#
                                                     -> GHC.Prim.Word#
                                                     -> GHC.Prim.Word#
                                                     -> GHC.Prim.State# GHC.Prim.RealWorld
                                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                           GHC.Prim.Int# #)}
                             ww
                             (GHC.Prim.int2Word# ww1)
                             ww4
                             (GHC.Prim.int2Word# ww5)
                             (GHC.Prim.int2Word# ww2)
                             GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                      case GHC.Prim.narrow32Int# ds3 of wild {
                        DEFAULT -> GHC.Types.False
                        0#
                        -> case ww3 of wild1 {
                             GHC.Base.Nothing
                             -> case ww7 of wild2 {
                                  GHC.Base.Nothing -> GHC.Types.True
                                  GHC.Base.Just ipv8 -> GHC.Types.False }
                             GHC.Base.Just a2
                             -> case ww7 of wild2 {
                                  GHC.Base.Nothing -> GHC.Types.False
                                  GHC.Base.Just b1
                                  -> Language.PureScript.Errors.JSON.$fEqErrorPosition_$c==
                                       a2
                                       b1 } } } } }) -}
1e6ce8499d28e0b9defa1788ce1ce5d5
  $w$c==2 ::
    [Language.PureScript.Errors.JSON.JSONError]
    -> [Language.PureScript.Errors.JSON.JSONError]
    -> [Language.PureScript.Errors.JSON.JSONError]
    -> [Language.PureScript.Errors.JSON.JSONError]
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U><S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: [Language.PureScript.Errors.JSON.JSONError])
                   (ww1 :: [Language.PureScript.Errors.JSON.JSONError])
                   (ww2 :: [Language.PureScript.Errors.JSON.JSONError])
                   (ww3 :: [Language.PureScript.Errors.JSON.JSONError]) ->
                 case GHC.Classes.$fEq[]_$c==
                        @ Language.PureScript.Errors.JSON.JSONError
                        Language.PureScript.Errors.JSON.$fEqJSONError
                        ww
                        ww2 of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> GHC.Classes.$fEq[]_$c==
                        @ Language.PureScript.Errors.JSON.JSONError
                        Language.PureScript.Errors.JSON.$fEqJSONError
                        ww1
                        ww3 }) -}
8c80c6936f8d542bc7ed2ae378cf8c8c
  $w$ccompare ::
    GHC.Prim.Int#
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Prim.Int#
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Ordering
  {- Arity: 8, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><L,1*U(U)><L,1*U(U)><S,U><L,1*U(U)><L,1*U(U)><L,1*U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Types.Int)
                   (ww2 :: GHC.Types.Int)
                   (ww3 :: GHC.Types.Int)
                   (ww4 :: GHC.Prim.Int#)
                   (ww5 :: GHC.Types.Int)
                   (ww6 :: GHC.Types.Int)
                   (ww7 :: GHC.Types.Int) ->
                 case GHC.Prim.<# ww ww4 of lwild {
                   DEFAULT
                   -> case GHC.Prim.==# ww ww4 of lwild1 {
                        DEFAULT -> GHC.Types.GT
                        1#
                        -> case ww1 of wild { GHC.Types.I# x# ->
                           case ww5 of wild1 { GHC.Types.I# y# ->
                           case GHC.Prim.<# x# y# of lwild2 {
                             DEFAULT
                             -> case GHC.Prim.==# x# y# of lwild3 {
                                  DEFAULT -> GHC.Types.GT
                                  1#
                                  -> case ww2 of wild2 { GHC.Types.I# x#1 ->
                                     case ww6 of wild3 { GHC.Types.I# y#1 ->
                                     case GHC.Prim.<# x#1 y#1 of lwild4 {
                                       DEFAULT
                                       -> case GHC.Prim.==# x#1 y#1 of lwild5 {
                                            DEFAULT -> GHC.Types.GT
                                            1# -> GHC.Classes.compareInt ww3 ww7 }
                                       1# -> GHC.Types.LT } } } }
                             1# -> GHC.Types.LT } } } }
                   1# -> GHC.Types.LT }) -}
c7eb2e95bdf9610daa6a5a96a78ee2f0
  $w$cshow ::
    Data.Text.Internal.Text
    -> GHC.Base.Maybe Language.PureScript.Errors.JSON.ErrorPosition
    -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U(U,U,U)><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: Data.Text.Internal.Text)
                   (ww1 :: GHC.Base.Maybe
                             Language.PureScript.Errors.JSON.ErrorPosition) ->
                 GHC.CString.unpackAppendCString#
                   Language.PureScript.Errors.JSON.$fShowErrorSuggestion4
                   (GHC.CString.unpackAppendCString#
                      Language.PureScript.Errors.JSON.$fShowErrorSuggestion3
                      (case Data.Text.Show.$w$cshowsPrec
                              ww
                              (GHC.Base.++
                                 @ GHC.Types.Char
                                 GHC.Show.showCommaSpace1
                                 (GHC.CString.unpackAppendCString#
                                    Language.PureScript.Errors.JSON.$fShowErrorSuggestion2
                                    (case ww1 of wild {
                                       GHC.Base.Nothing
                                       -> Language.PureScript.Errors.JSON.$fShowErrorSuggestion6
                                       GHC.Base.Just b1
                                       -> GHC.Base.++
                                            @ GHC.Types.Char
                                            GHC.Show.$fShowMaybe1
                                            (case b1 of ww2 { Language.PureScript.Errors.JSON.ErrorPosition ww3 ww4 ww5 ww6 ->
                                             Language.PureScript.Errors.JSON.$w$cshowsPrec
                                               11#
                                               ww3
                                               ww4
                                               ww5
                                               ww6
                                               Language.PureScript.Errors.JSON.$fShowErrorSuggestion5 }) }))) of ww2 { (#,#) ww3 ww4 ->
                       GHC.Types.: @ GHC.Types.Char ww3 ww4 }))) -}
a7b4ead67f5b581bd1b804bbe51bfa5f
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 6,
     Strictness: <S,U><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Types.Int)
                   (ww2 :: GHC.Types.Int)
                   (ww3 :: GHC.Types.Int)
                   (ww4 :: GHC.Types.Int)
                   (w :: GHC.Base.String) ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     GHC.CString.unpackAppendCString#
                       Language.PureScript.Errors.JSON.$fShowErrorPosition8
                       (case ww1 of ww5 { GHC.Types.I# ww6 ->
                        case GHC.Show.$wshowSignedInt
                               0#
                               ww6
                               (GHC.Base.++
                                  @ GHC.Types.Char
                                  GHC.Show.showCommaSpace1
                                  (GHC.CString.unpackAppendCString#
                                     Language.PureScript.Errors.JSON.$fShowErrorPosition7
                                     (case ww2 of ww7 { GHC.Types.I# ww8 ->
                                      case GHC.Show.$wshowSignedInt
                                             0#
                                             ww8
                                             (GHC.Base.++
                                                @ GHC.Types.Char
                                                GHC.Show.showCommaSpace1
                                                (GHC.CString.unpackAppendCString#
                                                   Language.PureScript.Errors.JSON.$fShowErrorPosition6
                                                   (case ww3 of ww9 { GHC.Types.I# ww10 ->
                                                    case GHC.Show.$wshowSignedInt
                                                           0#
                                                           ww10
                                                           (GHC.Base.++
                                                              @ GHC.Types.Char
                                                              GHC.Show.showCommaSpace1
                                                              (GHC.CString.unpackAppendCString#
                                                                 Language.PureScript.Errors.JSON.$fShowErrorPosition5
                                                                 (case ww4 of ww11 { GHC.Types.I# ww12 ->
                                                                  case GHC.Show.$wshowSignedInt
                                                                         0#
                                                                         ww12
                                                                         (GHC.CString.unpackAppendCString#
                                                                            Language.PureScript.Errors.JSON.$fShowErrorPosition4
                                                                            x) of ww13 { (#,#) ww14 ww15 ->
                                                                  GHC.Types.:
                                                                    @ GHC.Types.Char
                                                                    ww14
                                                                    ww15 } }))) of ww11 { (#,#) ww12 ww13 ->
                                                    GHC.Types.:
                                                      @ GHC.Types.Char
                                                      ww12
                                                      ww13 } }))) of ww9 { (#,#) ww10 ww11 ->
                                      GHC.Types.:
                                        @ GHC.Types.Char
                                        ww10
                                        ww11 } }))) of ww7 { (#,#) ww8 ww9 ->
                        GHC.Types.: @ GHC.Types.Char ww8 ww9 } })
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.Errors.JSON.$fShowErrorPosition2
                        (g w)
                   1#
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.Base.++
                           @ GHC.Types.Char
                           Language.PureScript.Errors.JSON.$fShowErrorPosition2
                           (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 w))) }) -}
88fd4e0e8b5a16302c66c6226f991f00
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> Data.Text.Internal.Text
    -> GHC.Base.Maybe Language.PureScript.Errors.JSON.ErrorPosition
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,U><L,U(U,U,U)><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Data.Text.Internal.Text)
                   (ww2 :: GHC.Base.Maybe
                             Language.PureScript.Errors.JSON.ErrorPosition) ->
                 let {
                   f4 :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.$fShowMaybe_$cshowsPrec
                       @ Language.PureScript.Errors.JSON.ErrorPosition
                       Language.PureScript.Errors.JSON.$fShowErrorPosition
                       Language.PureScript.Errors.JSON.$fShowErrorPosition9
                       ww2
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> \ (x :: GHC.Base.String) ->
                      GHC.CString.unpackAppendCString#
                        Language.PureScript.Errors.JSON.$fShowErrorSuggestion4
                        (GHC.CString.unpackAppendCString#
                           Language.PureScript.Errors.JSON.$fShowErrorSuggestion3
                           (case Data.Text.Show.$w$cshowsPrec
                                   ww1
                                   (GHC.Base.++
                                      @ GHC.Types.Char
                                      GHC.Show.showCommaSpace1
                                      (GHC.CString.unpackAppendCString#
                                         Language.PureScript.Errors.JSON.$fShowErrorSuggestion2
                                         (f4
                                            (GHC.CString.unpackAppendCString#
                                               Language.PureScript.Errors.JSON.$fShowErrorPosition4
                                               x)))) of ww3 { (#,#) ww4 ww5 ->
                            GHC.Types.: @ GHC.Types.Char ww4 ww5 }))
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.CString.unpackAppendCString#
                           Language.PureScript.Errors.JSON.$fShowErrorSuggestion4
                           (GHC.CString.unpackAppendCString#
                              Language.PureScript.Errors.JSON.$fShowErrorSuggestion3
                              (case Data.Text.Show.$w$cshowsPrec
                                      ww1
                                      (GHC.Base.++
                                         @ GHC.Types.Char
                                         GHC.Show.showCommaSpace1
                                         (GHC.CString.unpackAppendCString#
                                            Language.PureScript.Errors.JSON.$fShowErrorSuggestion2
                                            (f4
                                               (GHC.CString.unpackAppendCString#
                                                  Language.PureScript.Errors.JSON.$fShowErrorPosition4
                                                  (GHC.Types.:
                                                     @ GHC.Types.Char
                                                     GHC.Show.$fShow(,)2
                                                     x))))) of ww3 { (#,#) ww4 ww5 ->
                               GHC.Types.: @ GHC.Types.Char ww4 ww5 }))) }) -}
8a22c36ce6c9474e709e6a9de7c1855a
  $w$cshowsPrec2 ::
    GHC.Prim.Int#
    -> GHC.Base.Maybe Language.PureScript.Errors.JSON.ErrorPosition
    -> GHC.Base.String
    -> Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> GHC.Base.Maybe GHC.Base.String
    -> GHC.Base.Maybe Data.Text.Internal.Text
    -> GHC.Base.Maybe Language.PureScript.Errors.JSON.ErrorSuggestion
    -> [Language.PureScript.AST.SourcePos.SourceSpan]
    -> GHC.Show.ShowS
  {- Arity: 9,
     Strictness: <S,U><L,1*U><L,U><L,U(U,U,U)><L,U(U,U,U)><L,1*U><L,1*U><L,1*U><L,U>,
     Inline: [0] -}
d295c5ea5f3f09667a258cb926465829
  $w$cshowsPrec3 ::
    GHC.Prim.Int#
    -> [Language.PureScript.Errors.JSON.JSONError]
    -> [Language.PureScript.Errors.JSON.JSONError]
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 4, Strictness: <S,U><L,1*U><L,1*U><L,U>, Inline: [0] -}
dc4f8308353e60a371ccba3409da69e9
  $w$ctoEncoding ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> forall r.
       Data.ByteString.Builder.Internal.BuildStep r
       -> Data.ByteString.Builder.Internal.BuildStep r
  {- Arity: 5,
     Strictness: <L,U(U)><L,U(U)><L,U(U)><L,U(U)><L,C(C1(U(U,U)))>,
     Inline: [0] -}
45e309edd216be0ce9ad2de151cb7ed1
  $w$ctoEncoding1 ::
    Data.Text.Internal.Text
    -> GHC.Base.Maybe Language.PureScript.Errors.JSON.ErrorPosition
    -> forall r.
       Data.ByteString.Builder.Internal.BuildStep r
       -> Data.ByteString.Builder.Internal.BuildStep r
  {- Arity: 3, Strictness: <L,U(U,U,U)><L,U><L,C(C1(U(U,U)))>,
     Inline: [0],
     Unfolding: (\ (ww :: Data.Text.Internal.Text)
                   (ww1 :: GHC.Base.Maybe
                             Language.PureScript.Errors.JSON.ErrorPosition)
                   @ r
                   (w :: Data.ByteString.Builder.Internal.BuildStep r) ->
                 Data.Aeson.Types.ToJSON.$fFromPairsEncoding'Series1
                   @ Data.Aeson.Types.Internal.Value
                   Language.PureScript.Errors.JSON.$fToJSONErrorSuggestion_$d~~
                     `cast`
                   (Sym (Data.Type.Equality.N:~[0]
                             <*>_N) <Data.Aeson.Types.Internal.Value>_N <Data.Aeson.Types.Internal.Value>_N)
                   (Data.Aeson.Encoding.Internal.Value
                      (\ @ r1 (x :: Data.ByteString.Builder.Internal.BuildStep r1) ->
                       let {
                         w1 :: Data.ByteString.Builder.Internal.BuildStep r1
                         = case ww1 of wild {
                             GHC.Base.Nothing
                             -> (Data.Aeson.Encoding.Builder.null_1 @ r1 x)
                                  `cast`
                                (<Data.ByteString.Builder.Internal.BufferRange>_R
                                 ->_R Sym (GHC.Types.N:IO[0]
                                               <Data.ByteString.Builder.Internal.BuildSignal r1>_R))
                             GHC.Base.Just a2
                             -> case a2 of ww2 { Language.PureScript.Errors.JSON.ErrorPosition ww3 ww4 ww5 ww6 ->
                                Language.PureScript.Errors.JSON.$w$ctoEncoding
                                  ww3
                                  ww4
                                  ww5
                                  ww6
                                  @ r1
                                  x } }
                       } in
                       let {
                         w2 :: Data.ByteString.Builder.Internal.BufferRange
                               -> GHC.Prim.State# GHC.Prim.RealWorld
                               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                     Data.ByteString.Builder.Internal.BuildSignal r1 #)
                           {- Arity: 2 -}
                         = Data.Aeson.Encoding.Internal.colon1 @ r1 w1
                       } in
                       let {
                         lvl50 :: Data.ByteString.Builder.Internal.BufferRange
                                  -> GHC.Prim.State# GHC.Prim.RealWorld
                                  -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                        Data.ByteString.Builder.Internal.BuildSignal r1 #)
                           {- Arity: 2, Strictness: <S(SS),1*U(U,U)><S,U> -}
                         = \ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                             (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                           case ds of wild { Data.ByteString.Builder.Internal.BufferRange dt dt1 ->
                           case GHC.Prim.writeWord8OffAddr#
                                  @ GHC.Prim.RealWorld
                                  dt
                                  0#
                                  44##
                                  eta of s2 { DEFAULT ->
                           Data.Aeson.Encoding.Builder.$wstring
                             Language.PureScript.Errors.JSON.$fToJSONErrorSuggestion3
                             @ r1
                             w2
                               `cast`
                             (<Data.ByteString.Builder.Internal.BufferRange>_R
                              ->_R Sym (GHC.Types.N:IO[0]
                                            <Data.ByteString.Builder.Internal.BuildSignal r1>_R))
                             (GHC.Prim.plusAddr# dt 1#)
                             dt1
                             s2 } }
                       } in
                       let {
                         x1 :: Data.ByteString.Builder.Internal.BufferRange
                               -> GHC.Prim.State# GHC.Prim.RealWorld
                               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                     Data.ByteString.Builder.Internal.BuildSignal r1 #)
                           {- Arity: 2, Strictness: <S(SS),1*U(U,U)><S,U>, Inline: [0],
                              Unfolding: InlineRule (2, True, False)
                                         (\ (w3 :: Data.ByteString.Builder.Internal.BufferRange)
                                            (w4 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                          case w3 of ww2 { Data.ByteString.Builder.Internal.BufferRange ww3 ww4 ->
                                          case GHC.Prim.<#
                                                 (GHC.Prim.minusAddr# ww4 ww3)
                                                 1# of lwild {
                                            DEFAULT
                                            -> case GHC.Prim.writeWord8OffAddr#
                                                      @ GHC.Prim.RealWorld
                                                      ww3
                                                      0#
                                                      44##
                                                      w4 of s2 { DEFAULT ->
                                               Data.Aeson.Encoding.Builder.$wstring
                                                 Language.PureScript.Errors.JSON.$fToJSONErrorSuggestion3
                                                 @ r1
                                                 w2
                                                   `cast`
                                                 (<Data.ByteString.Builder.Internal.BufferRange>_R
                                                  ->_R Sym (GHC.Types.N:IO[0]
                                                                <Data.ByteString.Builder.Internal.BuildSignal
                                                                   r1>_R))
                                                 (GHC.Prim.plusAddr# ww3 1#)
                                                 ww4
                                                 s2 }
                                            1#
                                            -> (# w4,
                                                  Data.ByteString.Builder.Internal.BufferFull
                                                    @ r1
                                                    1#
                                                    ww3
                                                    lvl50
                                                      `cast`
                                                    (<Data.ByteString.Builder.Internal.BufferRange>_R
                                                     ->_R Sym (GHC.Types.N:IO[0]
                                                                   <Data.ByteString.Builder.Internal.BuildSignal
                                                                      r1>_R)) #) } }) -}
                         = \ (w3 :: Data.ByteString.Builder.Internal.BufferRange)
                             (w4 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                           case w3 of ww2 { Data.ByteString.Builder.Internal.BufferRange ww3 ww4 ->
                           case GHC.Prim.<# (GHC.Prim.minusAddr# ww4 ww3) 1# of lwild {
                             DEFAULT
                             -> case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       ww3
                                       0#
                                       44##
                                       w4 of s2 { DEFAULT ->
                                Data.Aeson.Encoding.Builder.$wstring
                                  Language.PureScript.Errors.JSON.$fToJSONErrorSuggestion3
                                  @ r1
                                  w2
                                    `cast`
                                  (<Data.ByteString.Builder.Internal.BufferRange>_R
                                   ->_R Sym (GHC.Types.N:IO[0]
                                                 <Data.ByteString.Builder.Internal.BuildSignal
                                                    r1>_R))
                                  (GHC.Prim.plusAddr# ww3 1#)
                                  ww4
                                  s2 }
                             1#
                             -> (# w4,
                                   Data.ByteString.Builder.Internal.BufferFull
                                     @ r1
                                     1#
                                     ww3
                                     lvl50
                                       `cast`
                                     (<Data.ByteString.Builder.Internal.BufferRange>_R
                                      ->_R Sym (GHC.Types.N:IO[0]
                                                    <Data.ByteString.Builder.Internal.BuildSignal
                                                       r1>_R)) #) } }
                       } in
                       let {
                         lvl51 :: Data.ByteString.Builder.Internal.BufferRange
                                  -> GHC.Prim.State# GHC.Prim.RealWorld
                                  -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                        Data.ByteString.Builder.Internal.BuildSignal r1 #)
                           {- Arity: 2, Strictness: <S(SS),1*U(U,U)><S,U> -}
                         = \ (ds :: Data.ByteString.Builder.Internal.BufferRange)
                             (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                           case ds of wild { Data.ByteString.Builder.Internal.BufferRange dt dt1 ->
                           case GHC.Prim.writeWord8OffAddr#
                                  @ GHC.Prim.RealWorld
                                  dt
                                  0#
                                  58##
                                  eta of s2 { DEFAULT ->
                           Data.Aeson.Encoding.Builder.$wtext
                             ww
                             @ r1
                             x1
                               `cast`
                             (<Data.ByteString.Builder.Internal.BufferRange>_R
                              ->_R Sym (GHC.Types.N:IO[0]
                                            <Data.ByteString.Builder.Internal.BuildSignal r1>_R))
                             (GHC.Prim.plusAddr# dt 1#)
                             dt1
                             s2 } }
                       } in
                       let {
                         w3 :: Data.ByteString.Builder.Internal.BufferRange
                               -> GHC.Prim.State# GHC.Prim.RealWorld
                               -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                     Data.ByteString.Builder.Internal.BuildSignal r1 #)
                           {- Arity: 2, Strictness: <S(SS),1*U(U,U)><S,U>, Inline: [0],
                              Unfolding: InlineRule (2, True, False)
                                         (\ (w3 :: Data.ByteString.Builder.Internal.BufferRange)
                                            (w4 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                          case w3 of ww2 { Data.ByteString.Builder.Internal.BufferRange ww3 ww4 ->
                                          case GHC.Prim.<#
                                                 (GHC.Prim.minusAddr# ww4 ww3)
                                                 1# of lwild {
                                            DEFAULT
                                            -> case GHC.Prim.writeWord8OffAddr#
                                                      @ GHC.Prim.RealWorld
                                                      ww3
                                                      0#
                                                      58##
                                                      w4 of s2 { DEFAULT ->
                                               Data.Aeson.Encoding.Builder.$wtext
                                                 ww
                                                 @ r1
                                                 x1
                                                   `cast`
                                                 (<Data.ByteString.Builder.Internal.BufferRange>_R
                                                  ->_R Sym (GHC.Types.N:IO[0]
                                                                <Data.ByteString.Builder.Internal.BuildSignal
                                                                   r1>_R))
                                                 (GHC.Prim.plusAddr# ww3 1#)
                                                 ww4
                                                 s2 }
                                            1#
                                            -> (# w4,
                                                  Data.ByteString.Builder.Internal.BufferFull
                                                    @ r1
                                                    1#
                                                    ww3
                                                    lvl51
                                                      `cast`
                                                    (<Data.ByteString.Builder.Internal.BufferRange>_R
                                                     ->_R Sym (GHC.Types.N:IO[0]
                                                                   <Data.ByteString.Builder.Internal.BuildSignal
                                                                      r1>_R)) #) } }) -}
                         = \ (w4 :: Data.ByteString.Builder.Internal.BufferRange)
                             (w5 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                           case w4 of ww2 { Data.ByteString.Builder.Internal.BufferRange ww3 ww4 ->
                           case GHC.Prim.<# (GHC.Prim.minusAddr# ww4 ww3) 1# of lwild {
                             DEFAULT
                             -> case GHC.Prim.writeWord8OffAddr#
                                       @ GHC.Prim.RealWorld
                                       ww3
                                       0#
                                       58##
                                       w5 of s2 { DEFAULT ->
                                Data.Aeson.Encoding.Builder.$wtext
                                  ww
                                  @ r1
                                  x1
                                    `cast`
                                  (<Data.ByteString.Builder.Internal.BufferRange>_R
                                   ->_R Sym (GHC.Types.N:IO[0]
                                                 <Data.ByteString.Builder.Internal.BuildSignal
                                                    r1>_R))
                                  (GHC.Prim.plusAddr# ww3 1#)
                                  ww4
                                  s2 }
                             1#
                             -> (# w5,
                                   Data.ByteString.Builder.Internal.BufferFull
                                     @ r1
                                     1#
                                     ww3
                                     lvl51
                                       `cast`
                                     (<Data.ByteString.Builder.Internal.BufferRange>_R
                                      ->_R Sym (GHC.Types.N:IO[0]
                                                    <Data.ByteString.Builder.Internal.BuildSignal
                                                       r1>_R)) #) } }
                       } in
                       \ (w4 :: Data.ByteString.Builder.Internal.BufferRange)
                         (w5 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                       case w4 of ww2 { Data.ByteString.Builder.Internal.BufferRange ww3 ww4 ->
                       Data.Aeson.Encoding.Builder.$wstring
                         Language.PureScript.Errors.JSON.$fToJSONErrorSuggestion2
                         @ r1
                         w3
                           `cast`
                         (<Data.ByteString.Builder.Internal.BufferRange>_R
                          ->_R Sym (GHC.Types.N:IO[0]
                                        <Data.ByteString.Builder.Internal.BuildSignal r1>_R))
                         ww3
                         ww4
                         w5 })
                        `cast`
                      ((forall (r1 :: <*>_N).
                        <Data.ByteString.Builder.Internal.BuildStep r1>_R
                        ->_R <Data.ByteString.Builder.Internal.BufferRange>_R
                        ->_R Sym (GHC.Types.N:IO[0]
                                      <Data.ByteString.Builder.Internal.BuildSignal
                                         r1>_R)) ; (Sym (Data.ByteString.Builder.Internal.N:Builder[0]) ; Sym (Data.Aeson.Encoding.Internal.N:Encoding'[0]
                                                                                                                   <Data.Aeson.Encoding.Internal.Series>_P))))
                   @ r
                   w) -}
896bd969e5266ae25c1cfb5755b5199c
  $w$ctoEncoding2 ::
    GHC.Base.Maybe Language.PureScript.Errors.JSON.ErrorPosition
    -> GHC.Base.String
    -> Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> GHC.Base.Maybe GHC.Base.String
    -> GHC.Base.Maybe Data.Text.Internal.Text
    -> GHC.Base.Maybe Language.PureScript.Errors.JSON.ErrorSuggestion
    -> [Language.PureScript.AST.SourcePos.SourceSpan]
    -> forall r.
       Data.ByteString.Builder.Internal.BuildStep r
       -> Data.ByteString.Builder.Internal.BuildStep r
  {- Arity: 8,
     Strictness: <L,U><L,U><L,U(U,U,U)><L,U(U,U,U)><L,U><L,U><L,U><L,1*U> -}
ab72e0be30cd5bbbc7f3f83696c3a966
  $w$ctoEncoding3 ::
    [Language.PureScript.Errors.JSON.JSONError]
    -> [Language.PureScript.Errors.JSON.JSONError]
    -> forall r.
       Data.ByteString.Builder.Internal.BuildStep r
       -> Data.ByteString.Builder.Internal.BuildStep r
  {- Arity: 2, Strictness: <L,1*U><L,1*U> -}
79abccc44555e13d3feea82c14e48a33
  $w$ctoJSON ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> (# Data.Aeson.Types.Internal.Object #)
  {- Arity: 4, Strictness: <L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Types.Int)
                   (ww1 :: GHC.Types.Int)
                   (ww2 :: GHC.Types.Int)
                   (ww3 :: GHC.Types.Int) ->
                 case Data.Aeson.Types.ToJSON.$fFromPairsValueDList_go
                        (GHC.Types.:
                           @ Data.Aeson.Types.Internal.Pair
                           (Language.PureScript.Errors.JSON.$fToJSONErrorPosition11,
                            case ww of wild { GHC.Types.I# i ->
                            case GHC.Integer.Type.smallInteger i of dt { DEFAULT ->
                            Data.Aeson.Types.Internal.Number
                              (Data.Scientific.Scientific dt 0#) } })
                           (GHC.Types.:
                              @ Data.Aeson.Types.Internal.Pair
                              (Language.PureScript.Errors.JSON.$fToJSONErrorPosition8,
                               case ww1 of wild { GHC.Types.I# i ->
                               case GHC.Integer.Type.smallInteger i of dt { DEFAULT ->
                               Data.Aeson.Types.Internal.Number
                                 (Data.Scientific.Scientific dt 0#) } })
                              (GHC.Types.:
                                 @ Data.Aeson.Types.Internal.Pair
                                 (Language.PureScript.Errors.JSON.$fToJSONErrorPosition5,
                                  case ww2 of wild { GHC.Types.I# i ->
                                  case GHC.Integer.Type.smallInteger i of dt { DEFAULT ->
                                  Data.Aeson.Types.Internal.Number
                                    (Data.Scientific.Scientific dt 0#) } })
                                 (GHC.Types.:
                                    @ Data.Aeson.Types.Internal.Pair
                                    (Language.PureScript.Errors.JSON.$fToJSONErrorPosition2,
                                     case ww3 of wild { GHC.Types.I# i ->
                                     case GHC.Integer.Type.smallInteger i of dt { DEFAULT ->
                                     Data.Aeson.Types.Internal.Number
                                       (Data.Scientific.Scientific dt 0#) } })
                                    (GHC.Types.[] @ Data.Aeson.Types.Internal.Pair)))))
                        (Data.HashMap.Base.Empty
                           @ Data.Text.Internal.Text
                           @ Data.Aeson.Types.Internal.Value) of ww4 { Data.Aeson.Types.Internal.Object ww5 ->
                 (# ww5 #) }) -}
d8f36866d2017995f8420ac00d9645a5
  $w$ctoJSON1 ::
    Data.Text.Internal.Text
    -> GHC.Base.Maybe Language.PureScript.Errors.JSON.ErrorPosition
    -> (# Data.Aeson.Types.Internal.Object #)
  {- Arity: 2, Strictness: <L,U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: Data.Text.Internal.Text)
                   (ww1 :: GHC.Base.Maybe
                             Language.PureScript.Errors.JSON.ErrorPosition) ->
                 case Data.Aeson.Types.ToJSON.$fFromPairsValueDList_go
                        (GHC.Types.:
                           @ Data.Aeson.Types.Internal.Pair
                           (Language.PureScript.Errors.JSON.$fToJSONErrorSuggestion6,
                            Data.Aeson.Types.Internal.$WString ww)
                           (GHC.Types.:
                              @ Data.Aeson.Types.Internal.Pair
                              (Language.PureScript.Errors.JSON.$fToJSONErrorSuggestion4,
                               case ww1 of wild {
                                 GHC.Base.Nothing -> Data.Aeson.Types.Internal.Null
                                 GHC.Base.Just a2
                                 -> Language.PureScript.Errors.JSON.$fToJSONErrorPosition_$ctoJSON
                                      a2 })
                              (GHC.Types.[] @ Data.Aeson.Types.Internal.Pair)))
                        (Data.HashMap.Base.Empty
                           @ Data.Text.Internal.Text
                           @ Data.Aeson.Types.Internal.Value) of ww2 { Data.Aeson.Types.Internal.Object ww3 ->
                 (# ww3 #) }) -}
38ece05c3f168a222ac9ed9d6e30a59c
  $w$ctoJSON2 ::
    GHC.Base.Maybe Language.PureScript.Errors.JSON.ErrorPosition
    -> GHC.Base.String
    -> Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> GHC.Base.Maybe GHC.Base.String
    -> GHC.Base.Maybe Data.Text.Internal.Text
    -> GHC.Base.Maybe Language.PureScript.Errors.JSON.ErrorSuggestion
    -> [Language.PureScript.AST.SourcePos.SourceSpan]
    -> (# Data.Aeson.Types.Internal.Object #)
  {- Arity: 8,
     Strictness: <L,1*U><L,1*U><L,U><L,U><L,1*U><L,1*U><L,1*U><L,1*U>,
     Inline: [0] -}
91ef470031bf0973e32a5127a0d2c5de
  $w$ctoJSON3 ::
    [Language.PureScript.Errors.JSON.JSONError]
    -> [Language.PureScript.Errors.JSON.JSONError]
    -> (# Data.Aeson.Types.Internal.Object #)
  {- Arity: 2, Strictness: <L,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (ww :: [Language.PureScript.Errors.JSON.JSONError])
                   (ww1 :: [Language.PureScript.Errors.JSON.JSONError]) ->
                 case Data.Aeson.Types.ToJSON.$fFromPairsValueDList_go
                        (GHC.Types.:
                           @ Data.Aeson.Types.Internal.Pair
                           (Language.PureScript.Errors.JSON.$fToJSONJSONResult3,
                            case GHC.Magic.runRW#
                                   @ ('GHC.Types.TupleRep
                                        '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                                   @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                        Data.Vector.Vector Data.Aeson.Types.Internal.Value #)
                                   (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                    case GHC.Prim.newArray#
                                           @ Data.Aeson.Types.Internal.Value
                                           @ (Control.Monad.Primitive.PrimState
                                                (GHC.ST.ST GHC.Prim.RealWorld))
                                           0#
                                           (Data.Vector.Mutable.uninitialised
                                              @ Data.Aeson.Types.Internal.Value)
                                           s1
                                             `cast`
                                           (GHC.Prim.State#
                                              (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                        <GHC.Prim.RealWorld>_N)))_R of ds2 { (#,#) ipv8 ipv9 ->
                                    Language.PureScript.Errors.JSON.$fToJSONJSONResult_$s$wfoldlM_loop
                                      ipv8
                                        `cast`
                                      (GHC.Prim.State#
                                         (Control.Monad.Primitive.D:R:PrimStateST[0]
                                              <GHC.Prim.RealWorld>_N))_R
                                      (GHC.Base.map
                                         @ Language.PureScript.Errors.JSON.JSONError
                                         @ Data.Aeson.Types.Internal.Value
                                         Language.PureScript.Errors.JSON.$fToJSONJSONError_$ctoJSON
                                         ww)
                                      0#
                                      ipv9
                                        `cast`
                                      (GHC.Prim.MutableArray#
                                         (Control.Monad.Primitive.D:R:PrimStateST[0]
                                              <GHC.Prim.RealWorld>_N)
                                         <Data.Aeson.Types.Internal.Value>_R)_R
                                      0#
                                      0# }) of ds1 { (#,#) ipv8 ipv9 ->
                            case ipv9 of dt { Data.Vector.Vector ipv10 ipv11 ipv12 ->
                            Data.Aeson.Types.Internal.Array dt } })
                           (GHC.Types.:
                              @ Data.Aeson.Types.Internal.Pair
                              (Language.PureScript.Errors.JSON.$fToJSONJSONResult1,
                               case GHC.Magic.runRW#
                                      @ ('GHC.Types.TupleRep
                                           '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                                      @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                           Data.Vector.Vector Data.Aeson.Types.Internal.Value #)
                                      (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                       case GHC.Prim.newArray#
                                              @ Data.Aeson.Types.Internal.Value
                                              @ (Control.Monad.Primitive.PrimState
                                                   (GHC.ST.ST GHC.Prim.RealWorld))
                                              0#
                                              (Data.Vector.Mutable.uninitialised
                                                 @ Data.Aeson.Types.Internal.Value)
                                              s1
                                                `cast`
                                              (GHC.Prim.State#
                                                 (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                           <GHC.Prim.RealWorld>_N)))_R of ds2 { (#,#) ipv8 ipv9 ->
                                       Language.PureScript.Errors.JSON.$fToJSONJSONResult_$s$wfoldlM_loop
                                         ipv8
                                           `cast`
                                         (GHC.Prim.State#
                                            (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                 <GHC.Prim.RealWorld>_N))_R
                                         (GHC.Base.map
                                            @ Language.PureScript.Errors.JSON.JSONError
                                            @ Data.Aeson.Types.Internal.Value
                                            Language.PureScript.Errors.JSON.$fToJSONJSONError_$ctoJSON
                                            ww1)
                                         0#
                                         ipv9
                                           `cast`
                                         (GHC.Prim.MutableArray#
                                            (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                 <GHC.Prim.RealWorld>_N)
                                            <Data.Aeson.Types.Internal.Value>_R)_R
                                         0#
                                         0# }) of ds1 { (#,#) ipv8 ipv9 ->
                               case ipv9 of dt { Data.Vector.Vector ipv10 ipv11 ipv12 ->
                               Data.Aeson.Types.Internal.Array dt } })
                              (GHC.Types.[] @ Data.Aeson.Types.Internal.Pair)))
                        (Data.HashMap.Base.Empty
                           @ Data.Text.Internal.Text
                           @ Data.Aeson.Types.Internal.Value) of ww2 { Data.Aeson.Types.Internal.Object ww3 ->
                 (# ww3 #) }) -}
8960ea70f1ded93c848b5e9b1aba2856
  $wtoJSONError ::
    GHC.Types.Bool
    -> Language.PureScript.Errors.Level
    -> Language.PureScript.AST.Declarations.ErrorMessage
    -> (# GHC.Base.Maybe Language.PureScript.Errors.JSON.ErrorPosition,
          GHC.Base.String, Data.Text.Internal.Text, Data.Text.Internal.Text,
          GHC.Base.Maybe GHC.Base.String,
          GHC.Base.Maybe Data.Text.Internal.Text,
          GHC.Base.Maybe Language.PureScript.Errors.JSON.ErrorSuggestion,
          [Language.PureScript.AST.SourcePos.SourceSpan] #)
  {- Arity: 3, Strictness: <L,U><L,1*U><L,U(U,U)>, Inline: [0] -}
6bbc5f7714849fe1dfea6d31b049c518
  data ErrorPosition
    = ErrorPosition {startLine :: GHC.Types.Int,
                     startColumn :: GHC.Types.Int,
                     endLine :: GHC.Types.Int,
                     endColumn :: GHC.Types.Int}
45299a45125d0010a58b2e176d366f17
  data ErrorSuggestion
    = ErrorSuggestion {replacement :: Data.Text.Internal.Text,
                       replaceRange :: GHC.Base.Maybe
                                         Language.PureScript.Errors.JSON.ErrorPosition}
48d560460478effa7fc17cacd364d1fd
  data JSONError
    = JSONError {position :: GHC.Base.Maybe
                               Language.PureScript.Errors.JSON.ErrorPosition,
                 message :: GHC.Base.String,
                 errorCode :: Data.Text.Internal.Text,
                 errorLink :: Data.Text.Internal.Text,
                 filename :: GHC.Base.Maybe GHC.Base.String,
                 moduleName :: GHC.Base.Maybe Data.Text.Internal.Text,
                 suggestion :: GHC.Base.Maybe
                                 Language.PureScript.Errors.JSON.ErrorSuggestion,
                 allSpans :: [Language.PureScript.AST.SourcePos.SourceSpan]}
764cc1f4fb4493f9ef09b3f5b0e97737
  data JSONResult
    = JSONResult {warnings :: [Language.PureScript.Errors.JSON.JSONError],
                  errors :: [Language.PureScript.Errors.JSON.JSONError]}
48d560460478effa7fc17cacd364d1fd
  allSpans ::
    Language.PureScript.Errors.JSON.JSONError
    -> [Language.PureScript.AST.SourcePos.SourceSpan]
  RecSel Left Language.PureScript.Errors.JSON.JSONError
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLS),1*U(A,A,A,A,A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Errors.JSON.JSONError) ->
                 case ds of wild { Language.PureScript.Errors.JSON.JSONError ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                 ds8 }) -}
6bbc5f7714849fe1dfea6d31b049c518
  endColumn ::
    Language.PureScript.Errors.JSON.ErrorPosition -> GHC.Types.Int
  RecSel Left Language.PureScript.Errors.JSON.ErrorPosition
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLS),1*U(A,A,A,1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Errors.JSON.ErrorPosition) ->
                 case ds of wild { Language.PureScript.Errors.JSON.ErrorPosition ds1 ds2 ds3 ds4 ->
                 ds4 }) -}
6bbc5f7714849fe1dfea6d31b049c518
  endLine ::
    Language.PureScript.Errors.JSON.ErrorPosition -> GHC.Types.Int
  RecSel Left Language.PureScript.Errors.JSON.ErrorPosition
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSL),1*U(A,A,1*U(U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Errors.JSON.ErrorPosition) ->
                 case ds of wild { Language.PureScript.Errors.JSON.ErrorPosition ds1 ds2 ds3 ds4 ->
                 ds3 }) -}
48d560460478effa7fc17cacd364d1fd
  errorCode ::
    Language.PureScript.Errors.JSON.JSONError
    -> Data.Text.Internal.Text
  RecSel Left Language.PureScript.Errors.JSON.JSONError
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLLLLL),1*U(A,A,1*U(U,U,U),A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Errors.JSON.JSONError) ->
                 case ds of wild { Language.PureScript.Errors.JSON.JSONError ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                 ds3 }) -}
48d560460478effa7fc17cacd364d1fd
  errorLink ::
    Language.PureScript.Errors.JSON.JSONError
    -> Data.Text.Internal.Text
  RecSel Left Language.PureScript.Errors.JSON.JSONError
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSLLLL),1*U(A,A,A,1*U(U,U,U),A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Errors.JSON.JSONError) ->
                 case ds of wild { Language.PureScript.Errors.JSON.JSONError ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                 ds4 }) -}
764cc1f4fb4493f9ef09b3f5b0e97737
  errors ::
    Language.PureScript.Errors.JSON.JSONResult
    -> [Language.PureScript.Errors.JSON.JSONError]
  RecSel Left Language.PureScript.Errors.JSON.JSONResult
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Errors.JSON.JSONResult) ->
                 case ds of wild { Language.PureScript.Errors.JSON.JSONResult ds1 ds2 ->
                 ds2 }) -}
48d560460478effa7fc17cacd364d1fd
  filename ::
    Language.PureScript.Errors.JSON.JSONError
    -> GHC.Base.Maybe GHC.Base.String
  RecSel Left Language.PureScript.Errors.JSON.JSONError
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLSLLL),1*U(A,A,A,A,1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Errors.JSON.JSONError) ->
                 case ds of wild { Language.PureScript.Errors.JSON.JSONError ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                 ds5 }) -}
48d560460478effa7fc17cacd364d1fd
  message ::
    Language.PureScript.Errors.JSON.JSONError -> GHC.Base.String
  RecSel Left Language.PureScript.Errors.JSON.JSONError
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLLLLL),1*U(A,1*U,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Errors.JSON.JSONError) ->
                 case ds of wild { Language.PureScript.Errors.JSON.JSONError ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                 ds2 }) -}
48d560460478effa7fc17cacd364d1fd
  moduleName ::
    Language.PureScript.Errors.JSON.JSONError
    -> GHC.Base.Maybe Data.Text.Internal.Text
  RecSel Left Language.PureScript.Errors.JSON.JSONError
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLSLL),1*U(A,A,A,A,A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Errors.JSON.JSONError) ->
                 case ds of wild { Language.PureScript.Errors.JSON.JSONError ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                 ds6 }) -}
48d560460478effa7fc17cacd364d1fd
  position ::
    Language.PureScript.Errors.JSON.JSONError
    -> GHC.Base.Maybe Language.PureScript.Errors.JSON.ErrorPosition
  RecSel Left Language.PureScript.Errors.JSON.JSONError
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLLLLL),1*U(1*U,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Errors.JSON.JSONError) ->
                 case ds of wild { Language.PureScript.Errors.JSON.JSONError ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                 ds1 }) -}
45299a45125d0010a58b2e176d366f17
  replaceRange ::
    Language.PureScript.Errors.JSON.ErrorSuggestion
    -> GHC.Base.Maybe Language.PureScript.Errors.JSON.ErrorPosition
  RecSel Left Language.PureScript.Errors.JSON.ErrorSuggestion
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Errors.JSON.ErrorSuggestion) ->
                 case ds of wild { Language.PureScript.Errors.JSON.ErrorSuggestion ds1 ds2 ->
                 ds2 }) -}
45299a45125d0010a58b2e176d366f17
  replacement ::
    Language.PureScript.Errors.JSON.ErrorSuggestion
    -> Data.Text.Internal.Text
  RecSel Left Language.PureScript.Errors.JSON.ErrorSuggestion
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U(U,U,U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Errors.JSON.ErrorSuggestion) ->
                 case ds of wild { Language.PureScript.Errors.JSON.ErrorSuggestion ds1 ds2 ->
                 ds1 }) -}
6bbc5f7714849fe1dfea6d31b049c518
  startColumn ::
    Language.PureScript.Errors.JSON.ErrorPosition -> GHC.Types.Int
  RecSel Left Language.PureScript.Errors.JSON.ErrorPosition
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLL),1*U(A,1*U(U),A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Errors.JSON.ErrorPosition) ->
                 case ds of wild { Language.PureScript.Errors.JSON.ErrorPosition ds1 ds2 ds3 ds4 ->
                 ds2 }) -}
6bbc5f7714849fe1dfea6d31b049c518
  startLine ::
    Language.PureScript.Errors.JSON.ErrorPosition -> GHC.Types.Int
  RecSel Left Language.PureScript.Errors.JSON.ErrorPosition
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(1*U(U),A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Errors.JSON.ErrorPosition) ->
                 case ds of wild { Language.PureScript.Errors.JSON.ErrorPosition ds1 ds2 ds3 ds4 ->
                 ds1 }) -}
48d560460478effa7fc17cacd364d1fd
  suggestion ::
    Language.PureScript.Errors.JSON.JSONError
    -> GHC.Base.Maybe Language.PureScript.Errors.JSON.ErrorSuggestion
  RecSel Left Language.PureScript.Errors.JSON.JSONError
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLSL),1*U(A,A,A,A,A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Errors.JSON.JSONError) ->
                 case ds of wild { Language.PureScript.Errors.JSON.JSONError ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                 ds7 }) -}
a108a802575c5558581debcce2c07b5d
  toJSONError ::
    GHC.Types.Bool
    -> Language.PureScript.Errors.Level
    -> Language.PureScript.AST.Declarations.ErrorMessage
    -> Language.PureScript.Errors.JSON.JSONError
  {- Arity: 3, Strictness: <L,U><L,1*U><L,U(U,U)>m, Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Bool)
                   (w1 :: Language.PureScript.Errors.Level)
                   (w2 :: Language.PureScript.AST.Declarations.ErrorMessage) ->
                 case Language.PureScript.Errors.JSON.$wtoJSONError
                        w
                        w1
                        w2 of ww { (#,,,,,,,#) ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 Language.PureScript.Errors.JSON.JSONError
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8 }) -}
3a80f2719b20ba24213b801499c698fd
  toJSONErrors ::
    GHC.Types.Bool
    -> Language.PureScript.Errors.Level
    -> Language.PureScript.Errors.MultipleErrors
    -> [Language.PureScript.Errors.JSON.JSONError]
  {- Arity: 3, Strictness: <L,U><L,U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (verbose :: GHC.Types.Bool)
                   (level :: Language.PureScript.Errors.Level)
                   (eta :: Language.PureScript.Errors.MultipleErrors) ->
                 GHC.Base.build
                   @ Language.PureScript.Errors.JSON.JSONError
                   (\ @ b1
                      (c :: Language.PureScript.Errors.JSON.JSONError
                            -> b1 -> b1)[OneShot]
                      (n :: b1)[OneShot] ->
                    GHC.Base.foldr
                      @ Language.PureScript.AST.Declarations.ErrorMessage
                      @ b1
                      (GHC.Base.mapFB
                         @ Language.PureScript.Errors.JSON.JSONError
                         @ b1
                         @ Language.PureScript.AST.Declarations.ErrorMessage
                         c
                         (Language.PureScript.Errors.JSON.toJSONError verbose level))
                      n
                      eta `cast` (Language.PureScript.Errors.N:MultipleErrors[0]))) -}
764cc1f4fb4493f9ef09b3f5b0e97737
  warnings ::
    Language.PureScript.Errors.JSON.JSONResult
    -> [Language.PureScript.Errors.JSON.JSONError]
  RecSel Left Language.PureScript.Errors.JSON.JSONResult
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Errors.JSON.JSONResult) ->
                 case ds of wild { Language.PureScript.Errors.JSON.JSONResult ds1 ds2 ->
                 ds1 }) -}
instance GHC.Classes.Eq [Language.PureScript.Errors.JSON.ErrorPosition]
  = Language.PureScript.Errors.JSON.$fEqErrorPosition
instance GHC.Classes.Eq [Language.PureScript.Errors.JSON.ErrorSuggestion]
  = Language.PureScript.Errors.JSON.$fEqErrorSuggestion
instance GHC.Classes.Eq [Language.PureScript.Errors.JSON.JSONError]
  = Language.PureScript.Errors.JSON.$fEqJSONError
instance GHC.Classes.Eq [Language.PureScript.Errors.JSON.JSONResult]
  = Language.PureScript.Errors.JSON.$fEqJSONResult
instance Data.Aeson.Types.FromJSON.FromJSON [Language.PureScript.Errors.JSON.ErrorPosition]
  = Language.PureScript.Errors.JSON.$fFromJSONErrorPosition
instance Data.Aeson.Types.FromJSON.FromJSON [Language.PureScript.Errors.JSON.ErrorSuggestion]
  = Language.PureScript.Errors.JSON.$fFromJSONErrorSuggestion
instance Data.Aeson.Types.FromJSON.FromJSON [Language.PureScript.Errors.JSON.JSONError]
  = Language.PureScript.Errors.JSON.$fFromJSONJSONError
instance Data.Aeson.Types.FromJSON.FromJSON [Language.PureScript.Errors.JSON.JSONResult]
  = Language.PureScript.Errors.JSON.$fFromJSONJSONResult
instance GHC.Classes.Ord [Language.PureScript.Errors.JSON.ErrorPosition]
  = Language.PureScript.Errors.JSON.$fOrdErrorPosition
instance GHC.Show.Show [Language.PureScript.Errors.JSON.ErrorPosition]
  = Language.PureScript.Errors.JSON.$fShowErrorPosition
instance GHC.Show.Show [Language.PureScript.Errors.JSON.ErrorSuggestion]
  = Language.PureScript.Errors.JSON.$fShowErrorSuggestion
instance GHC.Show.Show [Language.PureScript.Errors.JSON.JSONError]
  = Language.PureScript.Errors.JSON.$fShowJSONError
instance GHC.Show.Show [Language.PureScript.Errors.JSON.JSONResult]
  = Language.PureScript.Errors.JSON.$fShowJSONResult
instance Data.Aeson.Types.ToJSON.ToJSON [Language.PureScript.Errors.JSON.ErrorPosition]
  = Language.PureScript.Errors.JSON.$fToJSONErrorPosition
instance Data.Aeson.Types.ToJSON.ToJSON [Language.PureScript.Errors.JSON.ErrorSuggestion]
  = Language.PureScript.Errors.JSON.$fToJSONErrorSuggestion
instance Data.Aeson.Types.ToJSON.ToJSON [Language.PureScript.Errors.JSON.JSONError]
  = Language.PureScript.Errors.JSON.$fToJSONJSONError
instance Data.Aeson.Types.ToJSON.ToJSON [Language.PureScript.Errors.JSON.JSONResult]
  = Language.PureScript.Errors.JSON.$fToJSONJSONResult
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

