
==================== FINAL INTERFACE ====================
2018-11-30 20:47:36.671012 UTC

interface purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Sugar.Names.Env 8043
  interface hash: 29e630b82cbaa6a3758e1c9f06f96180
  ABI hash: 86ed82ed542c248a8928297b6b346572
  export-list hash: eac96abb84bb227ec29cea13c70276ff
  orphan hash: 4228abfc5f9a8f3403adbad078e51abe
  flag hash: 2aa58a824a1f725c94ffb0d8a8803a3b
  opt_hash: 2c98c95d41c045ae9c2fb565ec8aabc6
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Language.PureScript.Sugar.Names.Env.checkImportConflicts
  Language.PureScript.Sugar.Names.Env.envModuleExports
  Language.PureScript.Sugar.Names.Env.envModuleImports
  Language.PureScript.Sugar.Names.Env.envModuleSourceSpan
  Language.PureScript.Sugar.Names.Env.exportKind
  Language.PureScript.Sugar.Names.Env.exportType
  Language.PureScript.Sugar.Names.Env.exportTypeClass
  Language.PureScript.Sugar.Names.Env.exportTypeOp
  Language.PureScript.Sugar.Names.Env.exportValue
  Language.PureScript.Sugar.Names.Env.exportValueOp
  Language.PureScript.Sugar.Names.Env.getExports
  Language.PureScript.Sugar.Names.Env.nullExports
  Language.PureScript.Sugar.Names.Env.nullImports
  Language.PureScript.Sugar.Names.Env.primEnv
  Language.PureScript.Sugar.Names.Env.primExports
  Language.PureScript.Sugar.Names.Env.Env
  Language.PureScript.Sugar.Names.Env.ExportMode{Language.PureScript.Sugar.Names.Env.Internal Language.PureScript.Sugar.Names.Env.ReExport}
  Language.PureScript.Sugar.Names.Env.Exports{Language.PureScript.Sugar.Names.Env.Exports exportedKinds exportedTypeClasses exportedTypeOps exportedTypes exportedValueOps exportedValues}
  Language.PureScript.Sugar.Names.Env.ImportProvenance{Language.PureScript.Sugar.Names.Env.FromExplicit Language.PureScript.Sugar.Names.Env.FromImplicit Language.PureScript.Sugar.Names.Env.Local Language.PureScript.Sugar.Names.Env.Prim}
  Language.PureScript.Sugar.Names.Env.ImportRecord{Language.PureScript.Sugar.Names.Env.ImportRecord importName importProvenance importSourceModule importSourceSpan}
  Language.PureScript.Sugar.Names.Env.Imports{Language.PureScript.Sugar.Names.Env.Imports importedDataConstructors importedKinds importedModules importedQualModules importedTypeClasses importedTypeOps importedTypes importedValueOps importedValues}
module dependencies: Control.Monad.Supply
                     Control.Monad.Supply.Class Language.PureScript.AST
                     Language.PureScript.AST.Binders
                     Language.PureScript.AST.Declarations
                     Language.PureScript.AST.Exported Language.PureScript.AST.Literals
                     Language.PureScript.AST.Operators Language.PureScript.AST.SourcePos
                     Language.PureScript.AST.Traversals Language.PureScript.Bundle
                     Language.PureScript.Comments Language.PureScript.Constants
                     Language.PureScript.Crash Language.PureScript.Environment
                     Language.PureScript.Errors Language.PureScript.Kinds
                     Language.PureScript.Label Language.PureScript.Names
                     Language.PureScript.PSString Language.PureScript.Parser.Lexer
                     Language.PureScript.Parser.State Language.PureScript.Pretty
                     Language.PureScript.Pretty.Common Language.PureScript.Pretty.Kinds
                     Language.PureScript.Pretty.Types Language.PureScript.Pretty.Values
                     Language.PureScript.Publish.BoxesHelpers
                     Language.PureScript.Traversals
                     Language.PureScript.TypeClassDictionaries Language.PureScript.Types
                     Paths_purescript
package dependencies: aeson-1.3.1.1 aeson-better-errors-0.9.1.0
                      ansi-terminal-0.8.0.4 array-0.5.2.0 async-2.2.1 attoparsec-0.13.2.2
                      base-4.11.1.0 base-compat-0.10.4 binary-0.8.5.1
                      blaze-builder-0.4.1.0 boxes-0.1.5 bytestring-0.10.8.2 colour-2.3.4
                      containers-0.5.11.0 deepseq-1.4.3.0 dlist-0.8.0.4 filepath-1.4.2
                      ghc-boot-th-8.4.3 ghc-prim-0.5.2.0 hashable-1.2.7.0
                      integer-gmp-1.0.2.0 integer-logarithms-1.0.2.1
                      language-javascript-0.6.0.11 mtl-2.2.2 parsec-3.1.13.0
                      pattern-arrows-0.0.2 pretty-1.1.3.6 primitive-0.6.3.0
                      protolude-0.2.2 random-1.1 safe-0.3.17 scientific-0.3.6.2
                      sourcemap-0.1.6 split-0.2.3.3 stm-2.4.5.0 syb-0.7 tagged-0.8.5
                      template-haskell-2.13.0.0 text-1.2.3.0 th-abstraction-0.2.8.0
                      time-1.8.0.2 time-locale-compat-0.1.1.4 transformers-0.5.5.0
                      unordered-containers-0.2.9.0 utf8-string-1.0.1.1 uuid-types-1.0.3
                      vector-0.12.0.1
orphans: syb-0.7:Data.Generics.Instances
         stm-2.4.5.0:Control.Monad.STM colour-2.3.4:Data.Colour
         attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         vector-0.12.0.1:Data.Vector.Unboxed
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.0:Data.Text.Lazy
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.5.0:Control.Monad.Trans.Error
         text-1.2.3.0:Data.Text binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: aeson-1.3.1.1:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.Graph
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         dlist-0.8.0.4:Data.DList ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.AST.Declarations
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.AST.Operators
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.AST.SourcePos
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Environment
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Kinds
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Label
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Names
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.PSString
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.TypeClassDictionaries
                         purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7:Language.PureScript.Types
                         tagged-0.8.5:Data.Tagged
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
                         th-abstraction-0.2.8.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  base-4.11.1.0:Control.Monad c5f960c67d822497578bffbd3e4c01cf
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.Function 6e6aae9442025aeeb92a909c1bbc3fca
import  -/  base-4.11.1.0:Data.List 83dc843e47bfc0c5af51e19c6f3476d5
import  -/  base-4.11.1.0:Data.Maybe 409c3da2b142470b68be39ce1d97a9f7
import  -/  base-4.11.1.0:Data.OldList 1b35aa3c6805ff7c8887a35a866fe006
import  -/  base-4.11.1.0:Data.Tuple 3af66f3ac61ed95ba8a3a3f68ebc5003
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-compat-0.10.4:Prelude.Compat bb6796186ed35a1d09dc34362a3fc27e
import  -/  containers-0.5.11.0:Data.Map 0dbdaec812ef695a364aa6c69e7f7d53
import  -/  containers-0.5.11.0:Data.Map.Internal 0150e210d0ae8df0f3a0669d5e32d8fa
import  -/  containers-0.5.11.0:Data.Set 7d3c64a641be4cacbcd8119445bab919
import  -/  containers-0.5.11.0:Data.Set.Internal 93fa3ef95853aa2a7aadf32d693bd451
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  mtl-2.2.2:Control.Monad.Error.Class df146c18e27154b8df4c8637c59fd61b
import  -/  mtl-2.2.2:Control.Monad.Writer.Class 69f540e019eada69892c26d267276458
import  -/  Language.PureScript.AST 7ed0e74bfed5b6489b8a5eabab5c0241
  exports: 0d53d92339536cd6d8d7dcfcad8e7c7e
import  -/  Language.PureScript.AST.Declarations 568e046fbf27b243bfc96f09017d4782
  DeclConflict cb5b52b3ab1024c0145e35bbf5573c65
  ExportConflict d314b1811c95dfbea35f529d02d2cbae
  ScopeConflict d7365087342503d7bc453cbf94362f04
  ScopeShadowing 65a89bf3e4004f4b48e4dd098baecdc9
  UnknownName 0628ac315dcabeec4442b9d03a3d0b84
import  -/  Language.PureScript.AST.SourcePos b3f67f807f2dce79528bbb15bd9c7104
  SourceSpan 73c071552214b3f18e94970349d3affc
  internalModuleSourceSpan 5f91a656f056fa441b3ec6940306d87a
  nullSourceSpan 24686a17cbb8e08b60ddb2b502e97316
import  -/  Language.PureScript.Constants d290cccb0db8657cab5f1253ab0da1ee
  exports: cd83a0f5b6591e5c66c598e34359260d
  Prim 526fb67181f59b1cece2de8af2fc4f1f
  PrimOrdering fbc11b04c8c6fa7cefde96d8cd3f8330
  PrimRow 88d4e010153d428d834aea197d712df4
  PrimRowList 8a91f10eca1a6faa46c9ba5f4ae41cc9
  PrimSymbol 9fdbc7356c9f9d382cbfd07f883d8371
  PrimTypeError 944c8f16f3760b075445027ed9622540
import  -/  Language.PureScript.Environment 31667499b7017b19998bb405474fbe93
  exports: 56b1ef0ac6132b4c113ce26a807dcfb6
  primClasses e04c0f6927d66c9c5b7003e7d1297414
  primKinds 93d7b5a023c5895b45b6ccfee1aea643
  primOrderingKinds e5df1d43e31326206be7c6b3dbdf5f1d
  primOrderingTypes 2a8beee477866e8fe9a77137cd24ca00
  primRowClasses b41eadfae84a641c919e2db41e798c7a
  primRowListClasses 4e5c034b17f2d0f499462e58c15b9e77
  primRowListKinds ee3d1153e5d4b329818e5bf0301ad7ae
  primRowListTypes 482236308086237752c5d1b4cfb30446
  primRowTypes 1695b971680ee9f603db85cfecb73d0b
  primSymbolClasses 81ba1c8bd931e153acae374abd41ad87
  primSymbolTypes 839499877351246ed8f3bffc63075f56
  primTypeErrorClasses e081b3b947d60966d2b35454fcb78bd0
  primTypeErrorKinds e15bb216740ba8be61b21fdb91eaa5de
  primTypeErrorTypes e564b775490f3d134ed5641bf3a4871e
  primTypes dbfe3aecab24a65c2a6e34eaac90cf89
import  -/  Language.PureScript.Errors 15d6eb6b2d4d480750061a0585d4e64c
  exports: 142ea650dec62642d1cff09ef1eee74e
  MultipleErrors ad1de73a1d5a6b0ccd9657dedebc94f3
  errorMessage 56e7aa221570d7d0bd9b4d606b8de7f2
  errorMessage' 5055fef8b372f878a840ac9e7783f39a
import  -/  Language.PureScript.Names b3bf151840f3e8f2eb61eff186432886
  exports: f7f3503d20957194bda83c16bb5f1288
  ClassName e69348bcf8c43a2174540a1d5983bfaa
  ConstructorName 9fb88e980342b224c2a4e4b58fa9fe33
  DctorName 953e2be7c584ad49e8fe105d218f14a0
  Ident ab98a56ffa88760dad1380079e8ee35a
  IdentName 5b06dbfa684a1a4686ae5dc3b60a0a36
  KiName 3988b2e6728e13d6e386f74a6394b09e
  KindName 681d490d18bc7da009f3503010a994f8
  ModName 3aadbf737116de1d7bcb446bea8a25af
  ModuleName 5a70062bbdf29e6dc659ad8bf5326b50
  Name 184494d9e734645f374e2a0fce32bfac
  OpName 1522672b880b192c6e05e6cf8a45712d
  ProperName 29f101e190cc99df85623423972e606f
  Qualified d600a7f01c8203cf5504999de99c923c
  Qualified 5a70062bbdf29e6dc659ad8bf5326b50
  TyClassName 21009befdac7827e5cfc4e5a7606bd0e
  TyName 2de556166e59a0005c7143bf3b600f7e
  TyOpName 66cc4d214f55e6f0f298e52eab8013ac
  TypeName da42c92f73f4f363c63ecaf77b6335b9
  TypeOpName 34023316af2b751c6196ece0b5420c6b
  ValOpName f03a1a616a24e6d18322d9bb9fa39c73
  ValueOpName 1d06f91abd827e7b0c072b254546708a
  coerceProperName 9cce674374cd97d7385253445133e737
  disqualify 3e7b8117c7613f1d74fadc5d62b59f54
  getQual 878f7f5431a436ba3cc48c8dfb031d4d
import  -/  safe-0.3.17:Safe 77ad7f9961af2487c83150eb62bb5163
783030dcf8c3c127e329887894c48d51
  $fEqExportMode ::
    GHC.Classes.Eq Language.PureScript.Sugar.Names.Env.ExportMode
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Sugar.Names.Env.ExportMode
                  Language.PureScript.Sugar.Names.Env.$fEqExportMode_$c==
                  Language.PureScript.Sugar.Names.Env.$fEqExportMode_$c/= -}
783030dcf8c3c127e329887894c48d51
  $fEqExportMode_$c/= ::
    Language.PureScript.Sugar.Names.Env.ExportMode
    -> Language.PureScript.Sugar.Names.Env.ExportMode -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Sugar.Names.Env.ExportMode)
                   (y :: Language.PureScript.Sugar.Names.Env.ExportMode) ->
                 case x of wild {
                   Language.PureScript.Sugar.Names.Env.Internal
                   -> case y of wild1 {
                        Language.PureScript.Sugar.Names.Env.Internal -> GHC.Types.False
                        Language.PureScript.Sugar.Names.Env.ReExport -> GHC.Types.True }
                   Language.PureScript.Sugar.Names.Env.ReExport
                   -> case y of wild1 {
                        Language.PureScript.Sugar.Names.Env.Internal -> GHC.Types.True
                        Language.PureScript.Sugar.Names.Env.ReExport
                        -> GHC.Types.False } }) -}
783030dcf8c3c127e329887894c48d51
  $fEqExportMode_$c== ::
    Language.PureScript.Sugar.Names.Env.ExportMode
    -> Language.PureScript.Sugar.Names.Env.ExportMode -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Language.PureScript.Sugar.Names.Env.ExportMode)
                   (ds1 :: Language.PureScript.Sugar.Names.Env.ExportMode) ->
                 case ds of wild {
                   Language.PureScript.Sugar.Names.Env.Internal
                   -> case ds1 of wild1 {
                        Language.PureScript.Sugar.Names.Env.Internal -> GHC.Types.True
                        Language.PureScript.Sugar.Names.Env.ReExport -> GHC.Types.False }
                   Language.PureScript.Sugar.Names.Env.ReExport
                   -> case ds1 of wild1 {
                        Language.PureScript.Sugar.Names.Env.Internal -> GHC.Types.False
                        Language.PureScript.Sugar.Names.Env.ReExport
                        -> GHC.Types.True } }) -}
b5a892de418489c767f720864d2c6782
  $fEqImportProvenance ::
    GHC.Classes.Eq Language.PureScript.Sugar.Names.Env.ImportProvenance
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Sugar.Names.Env.ImportProvenance
                  Language.PureScript.Sugar.Names.Env.$fEqImportProvenance_$c==
                  Language.PureScript.Sugar.Names.Env.$fEqImportProvenance_$c/= -}
b5a892de418489c767f720864d2c6782
  $fEqImportProvenance_$c/= ::
    Language.PureScript.Sugar.Names.Env.ImportProvenance
    -> Language.PureScript.Sugar.Names.Env.ImportProvenance
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Sugar.Names.Env.ImportProvenance)
                   (y :: Language.PureScript.Sugar.Names.Env.ImportProvenance) ->
                 case x of wild {
                   Language.PureScript.Sugar.Names.Env.FromImplicit
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.Sugar.Names.Env.FromImplicit
                        -> GHC.Types.False }
                   Language.PureScript.Sugar.Names.Env.FromExplicit
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.Sugar.Names.Env.FromExplicit
                        -> GHC.Types.False }
                   Language.PureScript.Sugar.Names.Env.Local
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.Sugar.Names.Env.Local -> GHC.Types.False }
                   Language.PureScript.Sugar.Names.Env.Prim
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.Sugar.Names.Env.Prim -> GHC.Types.False } }) -}
b5a892de418489c767f720864d2c6782
  $fEqImportProvenance_$c== ::
    Language.PureScript.Sugar.Names.Env.ImportProvenance
    -> Language.PureScript.Sugar.Names.Env.ImportProvenance
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Language.PureScript.Sugar.Names.Env.ImportProvenance)
                   (ds1 :: Language.PureScript.Sugar.Names.Env.ImportProvenance) ->
                 case ds of wild {
                   Language.PureScript.Sugar.Names.Env.FromImplicit
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Sugar.Names.Env.FromImplicit
                        -> GHC.Types.True }
                   Language.PureScript.Sugar.Names.Env.FromExplicit
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Sugar.Names.Env.FromExplicit
                        -> GHC.Types.True }
                   Language.PureScript.Sugar.Names.Env.Local
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Sugar.Names.Env.Local -> GHC.Types.True }
                   Language.PureScript.Sugar.Names.Env.Prim
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Sugar.Names.Env.Prim -> GHC.Types.True } }) -}
bf5a97568e086735d3bbc97dc5ee1e68
  $fEqImportRecord ::
    GHC.Classes.Eq a =>
    GHC.Classes.Eq (Language.PureScript.Sugar.Names.Env.ImportRecord a)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Classes.Eq a).
                  @ (Language.PureScript.Sugar.Names.Env.ImportRecord a)
                  (Language.PureScript.Sugar.Names.Env.$fEqImportRecord_$c== @ a v)
                  (Language.PureScript.Sugar.Names.Env.$fEqImportRecord_$c/=
                     @ a
                     v) -}
bf5a97568e086735d3bbc97dc5ee1e68
  $fEqImportRecord_$c/= ::
    GHC.Classes.Eq a =>
    Language.PureScript.Sugar.Names.Env.ImportRecord a
    -> Language.PureScript.Sugar.Names.Env.ImportRecord a
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S(S(SL)LLL),1*U(1*U(1*U,U),1*U,1*U(1*U,1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U))),1*U)><S(S(SL)LLL),1*U(1*U(1*U,U),1*U,1*U(1*U,1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U))),1*U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ a
                   ($dEq :: GHC.Classes.Eq a)
                   (x :: Language.PureScript.Sugar.Names.Env.ImportRecord a)
                   (y :: Language.PureScript.Sugar.Names.Env.ImportRecord a) ->
                 case Language.PureScript.Sugar.Names.Env.$fEqImportRecord_$c==
                        @ a
                        $dEq
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
bf5a97568e086735d3bbc97dc5ee1e68
  $fEqImportRecord_$c== ::
    GHC.Classes.Eq a =>
    Language.PureScript.Sugar.Names.Env.ImportRecord a
    -> Language.PureScript.Sugar.Names.Env.ImportRecord a
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S(S(SL)LLL),1*U(1*U(1*U,U),1*U,1*U(1*U,1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U))),1*U)><S(S(SL)LLL),1*U(1*U(1*U,U),1*U,1*U(1*U,1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U))),1*U)>,
     Unfolding: (\ @ a
                   ($dEq :: GHC.Classes.Eq a)
                   (ds :: Language.PureScript.Sugar.Names.Env.ImportRecord a)
                   (ds1 :: Language.PureScript.Sugar.Names.Env.ImportRecord a) ->
                 case ds of wild { Language.PureScript.Sugar.Names.Env.ImportRecord a1 a2 a3 a4 ->
                 case ds1 of wild1 { Language.PureScript.Sugar.Names.Env.ImportRecord b1 b2 b3 b4 ->
                 case a1 of ww { Language.PureScript.Names.Qualified ww1 ww2 ->
                 case b1 of ww3 { Language.PureScript.Names.Qualified ww4 ww5 ->
                 case Language.PureScript.Names.$w$c==
                        @ a
                        $dEq
                        ww1
                        ww2
                        ww4
                        ww5 of wild2 {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case GHC.Classes.$fEq[]_$c==
                             @ (Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.Namespace)
                             (Language.PureScript.Names.$fEqProperName
                                @ 'Language.PureScript.Names.Namespace)
                             a2 `cast` (Language.PureScript.Names.N:ModuleName[0])
                             b2 `cast` (Language.PureScript.Names.N:ModuleName[0]) of wild3 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> case a3 of ww7 { Language.PureScript.AST.SourcePos.SourceSpan ww8 ww9 ww10 ->
                           case b3 of ww11 { Language.PureScript.AST.SourcePos.SourceSpan ww12 ww6 ww13 ->
                           case Language.PureScript.AST.SourcePos.$w$c==1
                                  ww8
                                  ww9
                                  ww10
                                  ww12
                                  ww6
                                  ww13 of wild4 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True
                             -> Language.PureScript.Sugar.Names.Env.$fEqImportProvenance_$c==
                                  a4
                                  b4 } } } } } } } } }) -}
b5a892de418489c767f720864d2c6782
  $fOrdImportProvenance ::
    GHC.Classes.Ord
      Language.PureScript.Sugar.Names.Env.ImportProvenance
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Sugar.Names.Env.ImportProvenance
                  Language.PureScript.Sugar.Names.Env.$fEqImportProvenance
                  Language.PureScript.Sugar.Names.Env.$fOrdImportProvenance_$ccompare
                  Language.PureScript.Sugar.Names.Env.$fOrdImportProvenance_$c<
                  Language.PureScript.Sugar.Names.Env.$fOrdImportProvenance_$c<=
                  Language.PureScript.Sugar.Names.Env.$fOrdImportProvenance_$c>
                  Language.PureScript.Sugar.Names.Env.$fOrdImportProvenance_$c>=
                  Language.PureScript.Sugar.Names.Env.$fOrdImportProvenance_$cmax
                  Language.PureScript.Sugar.Names.Env.$fOrdImportProvenance_$cmin -}
b5a892de418489c767f720864d2c6782
  $fOrdImportProvenance_$c< ::
    Language.PureScript.Sugar.Names.Env.ImportProvenance
    -> Language.PureScript.Sugar.Names.Env.ImportProvenance
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Language.PureScript.Sugar.Names.Env.ImportProvenance)
                   (b :: Language.PureScript.Sugar.Names.Env.ImportProvenance) ->
                 case a of wild {
                   Language.PureScript.Sugar.Names.Env.FromImplicit
                   -> case b of wild1 {
                        Language.PureScript.Sugar.Names.Env.FromImplicit -> GHC.Types.False
                        Language.PureScript.Sugar.Names.Env.FromExplicit -> GHC.Types.True
                        Language.PureScript.Sugar.Names.Env.Local -> GHC.Types.True
                        Language.PureScript.Sugar.Names.Env.Prim -> GHC.Types.True }
                   Language.PureScript.Sugar.Names.Env.FromExplicit
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Sugar.Names.Env.Local -> GHC.Types.True
                        Language.PureScript.Sugar.Names.Env.Prim -> GHC.Types.True }
                   Language.PureScript.Sugar.Names.Env.Local
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Sugar.Names.Env.Prim -> GHC.Types.True }
                   Language.PureScript.Sugar.Names.Env.Prim
                   -> case b of wild1 { DEFAULT -> GHC.Types.False } }) -}
b5a892de418489c767f720864d2c6782
  $fOrdImportProvenance_$c<= ::
    Language.PureScript.Sugar.Names.Env.ImportProvenance
    -> Language.PureScript.Sugar.Names.Env.ImportProvenance
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Language.PureScript.Sugar.Names.Env.ImportProvenance)
                   (b :: Language.PureScript.Sugar.Names.Env.ImportProvenance) ->
                 case b of wild {
                   Language.PureScript.Sugar.Names.Env.FromImplicit
                   -> case a of wild1 {
                        Language.PureScript.Sugar.Names.Env.FromImplicit -> GHC.Types.True
                        Language.PureScript.Sugar.Names.Env.FromExplicit -> GHC.Types.False
                        Language.PureScript.Sugar.Names.Env.Local -> GHC.Types.False
                        Language.PureScript.Sugar.Names.Env.Prim -> GHC.Types.False }
                   Language.PureScript.Sugar.Names.Env.FromExplicit
                   -> case a of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.Sugar.Names.Env.Local -> GHC.Types.False
                        Language.PureScript.Sugar.Names.Env.Prim -> GHC.Types.False }
                   Language.PureScript.Sugar.Names.Env.Local
                   -> case a of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.Sugar.Names.Env.Prim -> GHC.Types.False }
                   Language.PureScript.Sugar.Names.Env.Prim
                   -> case a of wild1 { DEFAULT -> GHC.Types.True } }) -}
b5a892de418489c767f720864d2c6782
  $fOrdImportProvenance_$c> ::
    Language.PureScript.Sugar.Names.Env.ImportProvenance
    -> Language.PureScript.Sugar.Names.Env.ImportProvenance
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, True)
                (\ (a :: Language.PureScript.Sugar.Names.Env.ImportProvenance)
                   (b :: Language.PureScript.Sugar.Names.Env.ImportProvenance) ->
                 Language.PureScript.Sugar.Names.Env.$fOrdImportProvenance_$c<
                   b
                   a) -}
b5a892de418489c767f720864d2c6782
  $fOrdImportProvenance_$c>= ::
    Language.PureScript.Sugar.Names.Env.ImportProvenance
    -> Language.PureScript.Sugar.Names.Env.ImportProvenance
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Language.PureScript.Sugar.Names.Env.ImportProvenance)
                   (b :: Language.PureScript.Sugar.Names.Env.ImportProvenance) ->
                 case a of wild {
                   Language.PureScript.Sugar.Names.Env.FromImplicit
                   -> case b of wild1 {
                        Language.PureScript.Sugar.Names.Env.FromImplicit -> GHC.Types.True
                        Language.PureScript.Sugar.Names.Env.FromExplicit -> GHC.Types.False
                        Language.PureScript.Sugar.Names.Env.Local -> GHC.Types.False
                        Language.PureScript.Sugar.Names.Env.Prim -> GHC.Types.False }
                   Language.PureScript.Sugar.Names.Env.FromExplicit
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.Sugar.Names.Env.Local -> GHC.Types.False
                        Language.PureScript.Sugar.Names.Env.Prim -> GHC.Types.False }
                   Language.PureScript.Sugar.Names.Env.Local
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.Sugar.Names.Env.Prim -> GHC.Types.False }
                   Language.PureScript.Sugar.Names.Env.Prim
                   -> case b of wild1 { DEFAULT -> GHC.Types.True } }) -}
b5a892de418489c767f720864d2c6782
  $fOrdImportProvenance_$ccompare ::
    Language.PureScript.Sugar.Names.Env.ImportProvenance
    -> Language.PureScript.Sugar.Names.Env.ImportProvenance
    -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Language.PureScript.Sugar.Names.Env.ImportProvenance)
                   (b :: Language.PureScript.Sugar.Names.Env.ImportProvenance) ->
                 case a of wild {
                   Language.PureScript.Sugar.Names.Env.FromImplicit
                   -> case b of wild1 {
                        Language.PureScript.Sugar.Names.Env.FromImplicit -> GHC.Types.EQ
                        Language.PureScript.Sugar.Names.Env.FromExplicit -> GHC.Types.LT
                        Language.PureScript.Sugar.Names.Env.Local -> GHC.Types.LT
                        Language.PureScript.Sugar.Names.Env.Prim -> GHC.Types.LT }
                   Language.PureScript.Sugar.Names.Env.FromExplicit
                   -> case b of wild1 {
                        Language.PureScript.Sugar.Names.Env.FromImplicit -> GHC.Types.GT
                        Language.PureScript.Sugar.Names.Env.FromExplicit -> GHC.Types.EQ
                        Language.PureScript.Sugar.Names.Env.Local -> GHC.Types.LT
                        Language.PureScript.Sugar.Names.Env.Prim -> GHC.Types.LT }
                   Language.PureScript.Sugar.Names.Env.Local
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Language.PureScript.Sugar.Names.Env.Local -> GHC.Types.EQ
                        Language.PureScript.Sugar.Names.Env.Prim -> GHC.Types.LT }
                   Language.PureScript.Sugar.Names.Env.Prim
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Language.PureScript.Sugar.Names.Env.Prim -> GHC.Types.EQ } }) -}
b5a892de418489c767f720864d2c6782
  $fOrdImportProvenance_$cmax ::
    Language.PureScript.Sugar.Names.Env.ImportProvenance
    -> Language.PureScript.Sugar.Names.Env.ImportProvenance
    -> Language.PureScript.Sugar.Names.Env.ImportProvenance
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (x :: Language.PureScript.Sugar.Names.Env.ImportProvenance)
                   (y :: Language.PureScript.Sugar.Names.Env.ImportProvenance) ->
                 case y of wild {
                   Language.PureScript.Sugar.Names.Env.FromImplicit -> x
                   Language.PureScript.Sugar.Names.Env.FromExplicit
                   -> case x of wild1 {
                        DEFAULT -> Language.PureScript.Sugar.Names.Env.FromExplicit
                        Language.PureScript.Sugar.Names.Env.Local
                        -> Language.PureScript.Sugar.Names.Env.Local
                        Language.PureScript.Sugar.Names.Env.Prim
                        -> Language.PureScript.Sugar.Names.Env.Prim }
                   Language.PureScript.Sugar.Names.Env.Local
                   -> case x of wild1 {
                        DEFAULT -> Language.PureScript.Sugar.Names.Env.Local
                        Language.PureScript.Sugar.Names.Env.Prim
                        -> Language.PureScript.Sugar.Names.Env.Prim }
                   Language.PureScript.Sugar.Names.Env.Prim
                   -> case x of wild1 { DEFAULT ->
                      Language.PureScript.Sugar.Names.Env.Prim } }) -}
b5a892de418489c767f720864d2c6782
  $fOrdImportProvenance_$cmin ::
    Language.PureScript.Sugar.Names.Env.ImportProvenance
    -> Language.PureScript.Sugar.Names.Env.ImportProvenance
    -> Language.PureScript.Sugar.Names.Env.ImportProvenance
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (x :: Language.PureScript.Sugar.Names.Env.ImportProvenance)
                   (y :: Language.PureScript.Sugar.Names.Env.ImportProvenance) ->
                 case y of wild {
                   Language.PureScript.Sugar.Names.Env.FromImplicit
                   -> case x of wild1 { DEFAULT ->
                      Language.PureScript.Sugar.Names.Env.FromImplicit }
                   Language.PureScript.Sugar.Names.Env.FromExplicit
                   -> case x of wild1 {
                        DEFAULT -> wild1
                        Language.PureScript.Sugar.Names.Env.Local
                        -> Language.PureScript.Sugar.Names.Env.FromExplicit
                        Language.PureScript.Sugar.Names.Env.Prim
                        -> Language.PureScript.Sugar.Names.Env.FromExplicit }
                   Language.PureScript.Sugar.Names.Env.Local
                   -> case x of wild1 {
                        DEFAULT -> wild1
                        Language.PureScript.Sugar.Names.Env.Prim
                        -> Language.PureScript.Sugar.Names.Env.Local }
                   Language.PureScript.Sugar.Names.Env.Prim -> x }) -}
bf5a97568e086735d3bbc97dc5ee1e68
  $fOrdImportRecord ::
    GHC.Classes.Ord a =>
    GHC.Classes.Ord
      (Language.PureScript.Sugar.Names.Env.ImportRecord a)
  DFunId
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(1*U(C(C1(U)),A),C(C1(U)),A,A,A,A,A,A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Classes.Ord a).
                  @ (Language.PureScript.Sugar.Names.Env.ImportRecord a)
                  (Language.PureScript.Sugar.Names.Env.$fOrdImportRecord_$cp1Ord
                     @ a
                     v)
                  (Language.PureScript.Sugar.Names.Env.$fOrdImportRecord_$ccompare
                     @ a
                     v)
                  (Language.PureScript.Sugar.Names.Env.$fOrdImportRecord_$c< @ a v)
                  (Language.PureScript.Sugar.Names.Env.$fOrdImportRecord_$c<= @ a v)
                  (\ (a1 :: Language.PureScript.Sugar.Names.Env.ImportRecord a)
                     (b :: Language.PureScript.Sugar.Names.Env.ImportRecord a) ->
                   Language.PureScript.Sugar.Names.Env.$fOrdImportRecord_$c<
                     @ a
                     v
                     b
                     a1)
                  (Language.PureScript.Sugar.Names.Env.$fOrdImportRecord_$c>= @ a v)
                  (Language.PureScript.Sugar.Names.Env.$fOrdImportRecord_$cmax @ a v)
                  (Language.PureScript.Sugar.Names.Env.$fOrdImportRecord_$cmin
                     @ a
                     v) -}
bf5a97568e086735d3bbc97dc5ee1e68
  $fOrdImportRecord_$c< ::
    GHC.Classes.Ord a =>
    Language.PureScript.Sugar.Names.Env.ImportRecord a
    -> Language.PureScript.Sugar.Names.Env.ImportRecord a
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(C1(U)),A,A,A,A,A,A)><S(S(SL)LLL),1*U(1*U(1*U,U),1*U,1*U(1*U,1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U))),1*U)><S(S(SL)LLL),1*U(1*U(1*U,U),1*U,1*U(1*U,1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U))),1*U)>,
     Unfolding: (\ @ a
                   ($dOrd :: GHC.Classes.Ord a)
                   (a1 :: Language.PureScript.Sugar.Names.Env.ImportRecord a)
                   (b :: Language.PureScript.Sugar.Names.Env.ImportRecord a) ->
                 case a1 of wild { Language.PureScript.Sugar.Names.Env.ImportRecord a2 a3 a4 a5 ->
                 case b of wild1 { Language.PureScript.Sugar.Names.Env.ImportRecord b1 b2 b3 b4 ->
                 case a2 of ww { Language.PureScript.Names.Qualified ww1 ww2 ->
                 case b1 of ww3 { Language.PureScript.Names.Qualified ww4 ww5 ->
                 case Language.PureScript.Names.$w$ccompare
                        @ a
                        $dOrd
                        ww1
                        ww2
                        ww4
                        ww5 of wild2 {
                   GHC.Types.LT -> GHC.Types.True
                   GHC.Types.EQ
                   -> case GHC.Classes.$fOrd[]_$ccompare
                             @ (Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.Namespace)
                             (Language.PureScript.Names.$fOrdProperName
                                @ 'Language.PureScript.Names.Namespace)
                             a3 `cast` (Language.PureScript.Names.N:ModuleName[0])
                             b2 `cast` (Language.PureScript.Names.N:ModuleName[0]) of wild3 {
                        GHC.Types.LT -> GHC.Types.True
                        GHC.Types.EQ
                        -> case a4 of ww7 { Language.PureScript.AST.SourcePos.SourceSpan ww8 ww9 ww10 ->
                           case b3 of ww11 { Language.PureScript.AST.SourcePos.SourceSpan ww12 ww6 ww13 ->
                           case Language.PureScript.AST.SourcePos.$w$ccompare1
                                  ww8
                                  ww9
                                  ww10
                                  ww12
                                  ww6
                                  ww13 of wild4 {
                             GHC.Types.LT -> GHC.Types.True
                             GHC.Types.EQ
                             -> Language.PureScript.Sugar.Names.Env.$fOrdImportProvenance_$c<
                                  a5
                                  b4
                             GHC.Types.GT -> GHC.Types.False } } }
                        GHC.Types.GT -> GHC.Types.False }
                   GHC.Types.GT -> GHC.Types.False } } } } }) -}
bf5a97568e086735d3bbc97dc5ee1e68
  $fOrdImportRecord_$c<= ::
    GHC.Classes.Ord a =>
    Language.PureScript.Sugar.Names.Env.ImportRecord a
    -> Language.PureScript.Sugar.Names.Env.ImportRecord a
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(C1(U)),A,A,A,A,A,A)><S(S(SL)LLL),1*U(1*U(1*U,U),1*U,1*U(1*U,1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U))),1*U)><S(S(SL)LLL),1*U(1*U(1*U,U),1*U,1*U(1*U,1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U))),1*U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dOrd :: GHC.Classes.Ord a)
                   (a1 :: Language.PureScript.Sugar.Names.Env.ImportRecord a)
                   (b :: Language.PureScript.Sugar.Names.Env.ImportRecord a) ->
                 case Language.PureScript.Sugar.Names.Env.$fOrdImportRecord_$c<
                        @ a
                        $dOrd
                        b
                        a1 of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
bf5a97568e086735d3bbc97dc5ee1e68
  $fOrdImportRecord_$c>= ::
    GHC.Classes.Ord a =>
    Language.PureScript.Sugar.Names.Env.ImportRecord a
    -> Language.PureScript.Sugar.Names.Env.ImportRecord a
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(C1(U)),A,A,A,A,A,A)><S(S(SL)LLL),1*U(1*U(1*U,U),1*U,1*U(1*U,1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U))),1*U)><S(S(SL)LLL),1*U(1*U(1*U,U),1*U,1*U(1*U,1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U))),1*U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dOrd :: GHC.Classes.Ord a)
                   (a1 :: Language.PureScript.Sugar.Names.Env.ImportRecord a)
                   (b :: Language.PureScript.Sugar.Names.Env.ImportRecord a) ->
                 case Language.PureScript.Sugar.Names.Env.$fOrdImportRecord_$c<
                        @ a
                        $dOrd
                        a1
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
bf5a97568e086735d3bbc97dc5ee1e68
  $fOrdImportRecord_$ccompare ::
    GHC.Classes.Ord a =>
    Language.PureScript.Sugar.Names.Env.ImportRecord a
    -> Language.PureScript.Sugar.Names.Env.ImportRecord a
    -> GHC.Types.Ordering
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(C1(U)),A,A,A,A,A,A)><S(S(SL)LLL),1*U(1*U(1*U,U),1*U,1*U(1*U,1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U))),1*U)><S(S(SL)LLL),1*U(1*U(1*U,U),1*U,1*U(1*U,1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U))),1*U)>,
     Unfolding: (\ @ a
                   ($dOrd :: GHC.Classes.Ord a)
                   (a1 :: Language.PureScript.Sugar.Names.Env.ImportRecord a)
                   (b :: Language.PureScript.Sugar.Names.Env.ImportRecord a) ->
                 case a1 of wild { Language.PureScript.Sugar.Names.Env.ImportRecord a2 a3 a4 a5 ->
                 case b of wild1 { Language.PureScript.Sugar.Names.Env.ImportRecord b1 b2 b3 b4 ->
                 case a2 of ww { Language.PureScript.Names.Qualified ww1 ww2 ->
                 case b1 of ww3 { Language.PureScript.Names.Qualified ww4 ww5 ->
                 case Language.PureScript.Names.$w$ccompare
                        @ a
                        $dOrd
                        ww1
                        ww2
                        ww4
                        ww5 of wild2 {
                   GHC.Types.LT -> GHC.Types.LT
                   GHC.Types.EQ
                   -> case GHC.Classes.$fOrd[]_$ccompare
                             @ (Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.Namespace)
                             (Language.PureScript.Names.$fOrdProperName
                                @ 'Language.PureScript.Names.Namespace)
                             a3 `cast` (Language.PureScript.Names.N:ModuleName[0])
                             b2 `cast` (Language.PureScript.Names.N:ModuleName[0]) of wild3 {
                        GHC.Types.LT -> GHC.Types.LT
                        GHC.Types.EQ
                        -> case a4 of ww7 { Language.PureScript.AST.SourcePos.SourceSpan ww8 ww9 ww10 ->
                           case b3 of ww11 { Language.PureScript.AST.SourcePos.SourceSpan ww12 ww6 ww13 ->
                           case Language.PureScript.AST.SourcePos.$w$ccompare1
                                  ww8
                                  ww9
                                  ww10
                                  ww12
                                  ww6
                                  ww13 of wild4 {
                             GHC.Types.LT -> GHC.Types.LT
                             GHC.Types.EQ
                             -> Language.PureScript.Sugar.Names.Env.$fOrdImportProvenance_$ccompare
                                  a5
                                  b4
                             GHC.Types.GT -> GHC.Types.GT } } }
                        GHC.Types.GT -> GHC.Types.GT }
                   GHC.Types.GT -> GHC.Types.GT } } } } }) -}
bf5a97568e086735d3bbc97dc5ee1e68
  $fOrdImportRecord_$cmax ::
    GHC.Classes.Ord a =>
    Language.PureScript.Sugar.Names.Env.ImportRecord a
    -> Language.PureScript.Sugar.Names.Env.ImportRecord a
    -> Language.PureScript.Sugar.Names.Env.ImportRecord a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(C1(U)),A,A,A,A,A,A)><S(S(SL)LLL),U(U(U,U),U,U(U,U(U(U),U(U)),U(U(U),U(U))),U)><S(S(SL)LLL),U(U(U,U),U,U(U,U(U(U),U(U)),U(U(U),U(U))),U)>m,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dOrd :: GHC.Classes.Ord a)
                   (x :: Language.PureScript.Sugar.Names.Env.ImportRecord a)
                   (y :: Language.PureScript.Sugar.Names.Env.ImportRecord a) ->
                 case Language.PureScript.Sugar.Names.Env.$fOrdImportRecord_$c<
                        @ a
                        $dOrd
                        y
                        x of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
bf5a97568e086735d3bbc97dc5ee1e68
  $fOrdImportRecord_$cmin ::
    GHC.Classes.Ord a =>
    Language.PureScript.Sugar.Names.Env.ImportRecord a
    -> Language.PureScript.Sugar.Names.Env.ImportRecord a
    -> Language.PureScript.Sugar.Names.Env.ImportRecord a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(C1(U)),A,A,A,A,A,A)><S(S(SL)LLL),U(U(U,U),U,U(U,U(U(U),U(U)),U(U(U),U(U))),U)><S(S(SL)LLL),U(U(U,U),U,U(U,U(U(U),U(U)),U(U(U),U(U))),U)>m,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dOrd :: GHC.Classes.Ord a)
                   (x :: Language.PureScript.Sugar.Names.Env.ImportRecord a)
                   (y :: Language.PureScript.Sugar.Names.Env.ImportRecord a) ->
                 case Language.PureScript.Sugar.Names.Env.$fOrdImportRecord_$c<
                        @ a
                        $dOrd
                        y
                        x of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
bf5a97568e086735d3bbc97dc5ee1e68
  $fOrdImportRecord_$cp1Ord ::
    GHC.Classes.Ord a =>
    GHC.Classes.Eq (Language.PureScript.Sugar.Names.Env.ImportRecord a)
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,1*U(1*U(C(C1(U)),A),A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ a ($dOrd :: GHC.Classes.Ord a) ->
                 Language.PureScript.Sugar.Names.Env.$fEqImportRecord
                   @ a
                   (GHC.Classes.$p1Ord @ a $dOrd)) -}
783030dcf8c3c127e329887894c48d51
  $fShowExportMode ::
    GHC.Show.Show Language.PureScript.Sugar.Names.Env.ExportMode
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Sugar.Names.Env.ExportMode
                  Language.PureScript.Sugar.Names.Env.$fShowExportMode_$cshowsPrec
                  Language.PureScript.Sugar.Names.Env.$fShowExportMode_$cshow
                  Language.PureScript.Sugar.Names.Env.$fShowExportMode_$cshowList -}
783030dcf8c3c127e329887894c48d51
  $fShowExportMode1 ::
    Language.PureScript.Sugar.Names.Env.ExportMode -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Language.PureScript.Sugar.Names.Env.ExportMode)
                   (eta :: GHC.Base.String) ->
                 case ds of wild {
                   Language.PureScript.Sugar.Names.Env.Internal
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           Language.PureScript.Sugar.Names.Env.$fShowExportMode4)
                        eta
                   Language.PureScript.Sugar.Names.Env.ReExport
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           Language.PureScript.Sugar.Names.Env.$fShowExportMode2)
                        eta }) -}
f91d42a28e5f562c90ec81d1512bce3f
  $fShowExportMode2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Sugar.Names.Env.$fShowExportMode3) -}
4b0cc60324c380c86bd951a6d6bd2923
  $fShowExportMode3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ReExport"#) -}
1493f461cb3f5a8e0a49da92d4ebc5e1
  $fShowExportMode4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Sugar.Names.Env.$fShowExportMode5) -}
58843a612b255561ab9c049d670c851a
  $fShowExportMode5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Internal"#) -}
783030dcf8c3c127e329887894c48d51
  $fShowExportMode_$cshow ::
    Language.PureScript.Sugar.Names.Env.ExportMode -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Sugar.Names.Env.ExportMode) ->
                 case x of wild {
                   Language.PureScript.Sugar.Names.Env.Internal
                   -> Language.PureScript.Sugar.Names.Env.$fShowExportMode4
                   Language.PureScript.Sugar.Names.Env.ReExport
                   -> Language.PureScript.Sugar.Names.Env.$fShowExportMode2 }) -}
783030dcf8c3c127e329887894c48d51
  $fShowExportMode_$cshowList ::
    [Language.PureScript.Sugar.Names.Env.ExportMode] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Sugar.Names.Env.ExportMode])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Sugar.Names.Env.ExportMode
                   Language.PureScript.Sugar.Names.Env.$fShowExportMode1
                   ls
                   s) -}
783030dcf8c3c127e329887894c48d51
  $fShowExportMode_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Sugar.Names.Env.ExportMode -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (ds1 :: Language.PureScript.Sugar.Names.Env.ExportMode)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   Language.PureScript.Sugar.Names.Env.Internal
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           Language.PureScript.Sugar.Names.Env.$fShowExportMode4)
                        eta
                   Language.PureScript.Sugar.Names.Env.ReExport
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           Language.PureScript.Sugar.Names.Env.$fShowExportMode2)
                        eta }) -}
2212f1aeac86faa420eb4b44c2cc2982
  $fShowExports ::
    GHC.Show.Show Language.PureScript.Sugar.Names.Env.Exports
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Sugar.Names.Env.Exports
                  Language.PureScript.Sugar.Names.Env.$fShowExports_$cshowsPrec
                  Language.PureScript.Sugar.Names.Env.$fShowExports_$cshow
                  Language.PureScript.Sugar.Names.Env.$fShowExports_$cshowList -}
2212f1aeac86faa420eb4b44c2cc2982
  $fShowExports1 ::
    Language.PureScript.Sugar.Names.Env.Exports -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U,1*U,1*U,1*U,1*U)>,
     Unfolding: (\ (w :: Language.PureScript.Sugar.Names.Env.Exports) ->
                 case w of ww { Language.PureScript.Sugar.Names.Env.Exports ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Language.PureScript.Sugar.Names.Env.$w$cshowsPrec
                   0#
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
87300a8cfd3564be36ad13ef64d277b0
  $fShowExports2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
2212f1aeac86faa420eb4b44c2cc2982
  $fShowExports_$cshow ::
    Language.PureScript.Sugar.Names.Env.Exports -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U,1*U,1*U,1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Sugar.Names.Env.Exports) ->
                 Language.PureScript.Sugar.Names.Env.$fShowExports_$cshowsPrec
                   Language.PureScript.Sugar.Names.Env.$fShowExports2
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
2212f1aeac86faa420eb4b44c2cc2982
  $fShowExports_$cshowList ::
    [Language.PureScript.Sugar.Names.Env.Exports] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Sugar.Names.Env.Exports])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Sugar.Names.Env.Exports
                   Language.PureScript.Sugar.Names.Env.$fShowExports1
                   ls
                   s) -}
2212f1aeac86faa420eb4b44c2cc2982
  $fShowExports_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Sugar.Names.Env.Exports -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U,1*U,1*U,1*U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Sugar.Names.Env.Exports) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Language.PureScript.Sugar.Names.Env.Exports ww3 ww4 ww5 ww6 ww7 ww8 ->
                 Language.PureScript.Sugar.Names.Env.$w$cshowsPrec
                   ww1
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8 } }) -}
b5a892de418489c767f720864d2c6782
  $fShowImportProvenance ::
    GHC.Show.Show Language.PureScript.Sugar.Names.Env.ImportProvenance
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Sugar.Names.Env.ImportProvenance
                  Language.PureScript.Sugar.Names.Env.$fShowImportProvenance_$cshowsPrec
                  Language.PureScript.Sugar.Names.Env.$fShowImportProvenance_$cshow
                  Language.PureScript.Sugar.Names.Env.$fShowImportProvenance_$cshowList -}
61f8f2356af8dc0321e294d164f25ddf
  $fShowImportProvenance1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Sugar.Names.Env.$fShowImportProvenance2) -}
5d98290fbdebd57b51ef312e41436d59
  $fShowImportProvenance2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Prim"#) -}
e74d90d47030a5ae7209bfd5c68ec6ca
  $fShowImportProvenance3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Sugar.Names.Env.$fShowImportProvenance4) -}
1b6ad2015eff5599afa3ef5d329f4fde
  $fShowImportProvenance4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Local"#) -}
922d9a05d956fb4104a0beabb619e5ee
  $fShowImportProvenance5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Sugar.Names.Env.$fShowImportProvenance6) -}
24f4e16e93ae0dd9d37edce0022c630b
  $fShowImportProvenance6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("FromExplicit"#) -}
21ee3e0bcdae890c574e698a820a96d2
  $fShowImportProvenance7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Sugar.Names.Env.$fShowImportProvenance8) -}
921cc6239dcb4b58595895e001e54714
  $fShowImportProvenance8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("FromImplicit"#) -}
b5a892de418489c767f720864d2c6782
  $fShowImportProvenance_$cshow ::
    Language.PureScript.Sugar.Names.Env.ImportProvenance
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Sugar.Names.Env.ImportProvenance) ->
                 case x of wild {
                   Language.PureScript.Sugar.Names.Env.FromImplicit
                   -> Language.PureScript.Sugar.Names.Env.$fShowImportProvenance7
                   Language.PureScript.Sugar.Names.Env.FromExplicit
                   -> Language.PureScript.Sugar.Names.Env.$fShowImportProvenance5
                   Language.PureScript.Sugar.Names.Env.Local
                   -> Language.PureScript.Sugar.Names.Env.$fShowImportProvenance3
                   Language.PureScript.Sugar.Names.Env.Prim
                   -> Language.PureScript.Sugar.Names.Env.$fShowImportProvenance1 }) -}
b5a892de418489c767f720864d2c6782
  $fShowImportProvenance_$cshowList ::
    [Language.PureScript.Sugar.Names.Env.ImportProvenance]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Sugar.Names.Env.ImportProvenance])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Sugar.Names.Env.ImportProvenance
                   Language.PureScript.Sugar.Names.Env.$w$cshowsPrec1
                   ls
                   s) -}
b5a892de418489c767f720864d2c6782
  $fShowImportProvenance_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Sugar.Names.Env.ImportProvenance
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: [0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Sugar.Names.Env.ImportProvenance)
                   (w2 :: GHC.Base.String) ->
                 Language.PureScript.Sugar.Names.Env.$w$cshowsPrec1 w1 w2) -}
bf5a97568e086735d3bbc97dc5ee1e68
  $fShowImportRecord ::
    GHC.Show.Show a =>
    GHC.Show.Show (Language.PureScript.Sugar.Names.Env.ImportRecord a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Show.Show a).
                  @ (Language.PureScript.Sugar.Names.Env.ImportRecord a)
                  (Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$cshowsPrec
                     @ a
                     v)
                  (Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$cshow
                     @ a
                     v)
                  (Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$cshowList
                     @ a
                     v) -}
4f2126d47fa8e9bff3d4f8703ee91148
  $fShowImportRecord1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("}"#) -}
e28721eb1f0370de087fee72fb683af2
  $fShowImportRecord10 ::
    Language.PureScript.Sugar.Names.Env.ImportRecord
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
    -> GHC.Show.ShowS
  {- Arity: 1,
     Strictness: <S,1*U(1*U(1*U,U),U,U(U,U(U(U),U(U)),U(U(U),U(U))),U)>,
     Unfolding: (\ (w :: Language.PureScript.Sugar.Names.Env.ImportRecord
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ClassName)) ->
                 case w of ww { Language.PureScript.Sugar.Names.Env.ImportRecord ww1 ww2 ww3 ww4 ->
                 Language.PureScript.Sugar.Names.Env.$w$s$cshowsPrec3
                   0#
                   ww1
                   ww2
                   ww3
                   ww4 }) -}
8ef8d2fdd1382f4a82273833d36686d5
  $fShowImportRecord11 ::
    Language.PureScript.Sugar.Names.Env.ImportRecord
      Language.PureScript.Names.Ident
    -> GHC.Show.ShowS
  {- Arity: 1,
     Strictness: <S,1*U(1*U(1*U,U),U,U(U,U(U(U),U(U)),U(U(U),U(U))),U)>,
     Unfolding: (\ (w :: Language.PureScript.Sugar.Names.Env.ImportRecord
                           Language.PureScript.Names.Ident) ->
                 case w of ww { Language.PureScript.Sugar.Names.Env.ImportRecord ww1 ww2 ww3 ww4 ->
                 Language.PureScript.Sugar.Names.Env.$w$s$cshowsPrec4
                   0#
                   ww1
                   ww2
                   ww3
                   ww4 }) -}
e889c14f10c64e0f7b57af1877fd8109
  $fShowImportRecord12 ::
    Language.PureScript.Sugar.Names.Env.ImportRecord
      (Language.PureScript.Names.OpName
         'Language.PureScript.Names.ValueOpName)
    -> GHC.Show.ShowS
  {- Arity: 1,
     Strictness: <S,1*U(1*U(1*U,U),U,U(U,U(U(U),U(U)),U(U(U),U(U))),U)>,
     Unfolding: (\ (w :: Language.PureScript.Sugar.Names.Env.ImportRecord
                           (Language.PureScript.Names.OpName
                              'Language.PureScript.Names.ValueOpName)) ->
                 case w of ww { Language.PureScript.Sugar.Names.Env.ImportRecord ww1 ww2 ww3 ww4 ->
                 Language.PureScript.Sugar.Names.Env.$w$s$cshowsPrec5
                   0#
                   ww1
                   ww2
                   ww3
                   ww4 }) -}
9cb3085ec454adf9ca50a5380c3a3798
  $fShowImportRecord13 ::
    Language.PureScript.Sugar.Names.Env.ImportRecord
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.KindName)
    -> GHC.Show.ShowS
  {- Arity: 1,
     Strictness: <S,1*U(1*U(1*U,U),U,U(U,U(U(U),U(U)),U(U(U),U(U))),U)>,
     Unfolding: (\ (w :: Language.PureScript.Sugar.Names.Env.ImportRecord
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.KindName)) ->
                 case w of ww { Language.PureScript.Sugar.Names.Env.ImportRecord ww1 ww2 ww3 ww4 ->
                 Language.PureScript.Sugar.Names.Env.$w$s$cshowsPrec6
                   0#
                   ww1
                   ww2
                   ww3
                   ww4 }) -}
8779bfe3a1858ea845b15c022f4577d3
  $fShowImportRecord2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("importProvenance = "#) -}
7510213402b0f171bc9a406dc8015eb7
  $fShowImportRecord3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("importSourceSpan = "#) -}
da3f739334b20889e01e7ca0c323160a
  $fShowImportRecord4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("importSourceModule = "#) -}
25e7c62fe41ee247ce6647330441db84
  $fShowImportRecord5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("importName = "#) -}
13de829e9108359d33471dc9bd7f6687
  $fShowImportRecord6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ImportRecord {"#) -}
030a2dcdc348293f450d4f0a02aeab6b
  $fShowImportRecord7 ::
    Language.PureScript.Sugar.Names.Env.ImportRecord
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName)
    -> GHC.Show.ShowS
  {- Arity: 1,
     Strictness: <S,1*U(1*U(1*U,U),U,U(U,U(U(U),U(U)),U(U(U),U(U))),U)>,
     Unfolding: (\ (w :: Language.PureScript.Sugar.Names.Env.ImportRecord
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.TypeName)) ->
                 case w of ww { Language.PureScript.Sugar.Names.Env.ImportRecord ww1 ww2 ww3 ww4 ->
                 Language.PureScript.Sugar.Names.Env.$w$s$cshowsPrec
                   0#
                   ww1
                   ww2
                   ww3
                   ww4 }) -}
4f695752946917c5f262882c3197d63a
  $fShowImportRecord8 ::
    Language.PureScript.Sugar.Names.Env.ImportRecord
      (Language.PureScript.Names.OpName
         'Language.PureScript.Names.TypeOpName)
    -> GHC.Show.ShowS
  {- Arity: 1,
     Strictness: <S,1*U(1*U(1*U,U),U,U(U,U(U(U),U(U)),U(U(U),U(U))),U)>,
     Unfolding: (\ (w :: Language.PureScript.Sugar.Names.Env.ImportRecord
                           (Language.PureScript.Names.OpName
                              'Language.PureScript.Names.TypeOpName)) ->
                 case w of ww { Language.PureScript.Sugar.Names.Env.ImportRecord ww1 ww2 ww3 ww4 ->
                 Language.PureScript.Sugar.Names.Env.$w$s$cshowsPrec1
                   0#
                   ww1
                   ww2
                   ww3
                   ww4 }) -}
641ddc5c99b18edc6738d2e9c29221bf
  $fShowImportRecord9 ::
    Language.PureScript.Sugar.Names.Env.ImportRecord
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ConstructorName)
    -> GHC.Show.ShowS
  {- Arity: 1,
     Strictness: <S,1*U(1*U(1*U,U),U,U(U,U(U(U),U(U)),U(U(U),U(U))),U)>,
     Unfolding: (\ (w :: Language.PureScript.Sugar.Names.Env.ImportRecord
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ConstructorName)) ->
                 case w of ww { Language.PureScript.Sugar.Names.Env.ImportRecord ww1 ww2 ww3 ww4 ->
                 Language.PureScript.Sugar.Names.Env.$w$s$cshowsPrec2
                   0#
                   ww1
                   ww2
                   ww3
                   ww4 }) -}
bf5a97568e086735d3bbc97dc5ee1e68
  $fShowImportRecord_$cshow ::
    GHC.Show.Show a =>
    Language.PureScript.Sugar.Names.Env.ImportRecord a
    -> GHC.Base.String
  {- Arity: 2,
     Strictness: <L,1*U(1*C1(C1(C(U))),A,A)><S,1*U(1*U(1*U,U),U,U(U,U(U(U),U(U)),U(U(U),U(U))),U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (x :: Language.PureScript.Sugar.Names.Env.ImportRecord a) ->
                 Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$cshowsPrec
                   @ a
                   $dShow
                   Language.PureScript.Sugar.Names.Env.$fShowExports2
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
bf5a97568e086735d3bbc97dc5ee1e68
  $fShowImportRecord_$cshowList ::
    GHC.Show.Show a =>
    [Language.PureScript.Sugar.Names.Env.ImportRecord a]
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (ls :: [Language.PureScript.Sugar.Names.Env.ImportRecord a])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Language.PureScript.Sugar.Names.Env.ImportRecord a)
                   (Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$cshowsPrec
                      @ a
                      $dShow
                      Language.PureScript.Sugar.Names.Env.$fShowExports2)
                   ls
                   s) -}
bf5a97568e086735d3bbc97dc5ee1e68
  $fShowImportRecord_$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Types.Int
    -> Language.PureScript.Sugar.Names.Env.ImportRecord a
    -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,1*U(1*C1(C1(C(U))),A,A)><S(S),1*U(U)><S,1*U(1*U(1*U,U),U,U(U,U(U(U),U(U)),U(U(U),U(U))),U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: GHC.Show.Show a)
                   (w1 :: GHC.Types.Int)
                   (w2 :: Language.PureScript.Sugar.Names.Env.ImportRecord a) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Language.PureScript.Sugar.Names.Env.ImportRecord ww3 ww4 ww5 ww6 ->
                 Language.PureScript.Sugar.Names.Env.$w$cshowsPrec2
                   @ a
                   w
                   ww1
                   ww3
                   ww4
                   ww5
                   ww6 } }) -}
a5aa7baab1a217df29ed2052738ffc4e
  $fShowImportRecord_$s$cshow ::
    Language.PureScript.Sugar.Names.Env.ImportRecord
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName)
    -> GHC.Base.String
  {- Arity: 1,
     Strictness: <S,1*U(1*U(1*U,U),U,U(U,U(U(U),U(U)),U(U(U),U(U))),U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Sugar.Names.Env.ImportRecord
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.TypeName)) ->
                 Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshowsPrec
                   Language.PureScript.Sugar.Names.Env.$fShowExports2
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
60ab2539e72c13385c59d20287d4833e
  $fShowImportRecord_$s$cshow1 ::
    Language.PureScript.Sugar.Names.Env.ImportRecord
      (Language.PureScript.Names.OpName
         'Language.PureScript.Names.TypeOpName)
    -> GHC.Base.String
  {- Arity: 1,
     Strictness: <S,1*U(1*U(1*U,U),U,U(U,U(U(U),U(U)),U(U(U),U(U))),U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Sugar.Names.Env.ImportRecord
                           (Language.PureScript.Names.OpName
                              'Language.PureScript.Names.TypeOpName)) ->
                 Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshowsPrec1
                   Language.PureScript.Sugar.Names.Env.$fShowExports2
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
a62ec786ef5f3c9edb714eef2b559451
  $fShowImportRecord_$s$cshow2 ::
    Language.PureScript.Sugar.Names.Env.ImportRecord
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ConstructorName)
    -> GHC.Base.String
  {- Arity: 1,
     Strictness: <S,1*U(1*U(1*U,U),U,U(U,U(U(U),U(U)),U(U(U),U(U))),U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Sugar.Names.Env.ImportRecord
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ConstructorName)) ->
                 Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshowsPrec2
                   Language.PureScript.Sugar.Names.Env.$fShowExports2
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
8debcd5f1cd940c676279dec2042f398
  $fShowImportRecord_$s$cshow3 ::
    Language.PureScript.Sugar.Names.Env.ImportRecord
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
    -> GHC.Base.String
  {- Arity: 1,
     Strictness: <S,1*U(1*U(1*U,U),U,U(U,U(U(U),U(U)),U(U(U),U(U))),U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Sugar.Names.Env.ImportRecord
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ClassName)) ->
                 Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshowsPrec3
                   Language.PureScript.Sugar.Names.Env.$fShowExports2
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
bc5c1708617e76dc8a71647e8dc8f351
  $fShowImportRecord_$s$cshow4 ::
    Language.PureScript.Sugar.Names.Env.ImportRecord
      Language.PureScript.Names.Ident
    -> GHC.Base.String
  {- Arity: 1,
     Strictness: <S,1*U(1*U(1*U,U),U,U(U,U(U(U),U(U)),U(U(U),U(U))),U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Sugar.Names.Env.ImportRecord
                           Language.PureScript.Names.Ident) ->
                 Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshowsPrec4
                   Language.PureScript.Sugar.Names.Env.$fShowExports2
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
22743bd95079342ba92e39a7f4c6bd79
  $fShowImportRecord_$s$cshow5 ::
    Language.PureScript.Sugar.Names.Env.ImportRecord
      (Language.PureScript.Names.OpName
         'Language.PureScript.Names.ValueOpName)
    -> GHC.Base.String
  {- Arity: 1,
     Strictness: <S,1*U(1*U(1*U,U),U,U(U,U(U(U),U(U)),U(U(U),U(U))),U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Sugar.Names.Env.ImportRecord
                           (Language.PureScript.Names.OpName
                              'Language.PureScript.Names.ValueOpName)) ->
                 Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshowsPrec5
                   Language.PureScript.Sugar.Names.Env.$fShowExports2
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
045748a3101fd4f76d83b68a5a311f34
  $fShowImportRecord_$s$cshow6 ::
    Language.PureScript.Sugar.Names.Env.ImportRecord
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.KindName)
    -> GHC.Base.String
  {- Arity: 1,
     Strictness: <S,1*U(1*U(1*U,U),U,U(U,U(U(U),U(U)),U(U(U),U(U))),U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Sugar.Names.Env.ImportRecord
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.KindName)) ->
                 Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshowsPrec6
                   Language.PureScript.Sugar.Names.Env.$fShowExports2
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
e6b68c35605b5beb0d236ddeb9a97e7b
  $fShowImportRecord_$s$cshowList ::
    [Language.PureScript.Sugar.Names.Env.ImportRecord
       (Language.PureScript.Names.ProperName
          'Language.PureScript.Names.TypeName)]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Sugar.Names.Env.ImportRecord
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.TypeName)])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Language.PureScript.Sugar.Names.Env.ImportRecord
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.TypeName))
                   Language.PureScript.Sugar.Names.Env.$fShowImportRecord7
                   ls
                   s) -}
bab72366b7c07c83d79451b000dd02f2
  $fShowImportRecord_$s$cshowList1 ::
    [Language.PureScript.Sugar.Names.Env.ImportRecord
       (Language.PureScript.Names.OpName
          'Language.PureScript.Names.TypeOpName)]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Sugar.Names.Env.ImportRecord
                             (Language.PureScript.Names.OpName
                                'Language.PureScript.Names.TypeOpName)])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Language.PureScript.Sugar.Names.Env.ImportRecord
                        (Language.PureScript.Names.OpName
                           'Language.PureScript.Names.TypeOpName))
                   Language.PureScript.Sugar.Names.Env.$fShowImportRecord8
                   ls
                   s) -}
52f34a710f3337f78f806d6d6efc0f5d
  $fShowImportRecord_$s$cshowList2 ::
    [Language.PureScript.Sugar.Names.Env.ImportRecord
       (Language.PureScript.Names.ProperName
          'Language.PureScript.Names.ConstructorName)]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Sugar.Names.Env.ImportRecord
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ConstructorName)])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Language.PureScript.Sugar.Names.Env.ImportRecord
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.ConstructorName))
                   Language.PureScript.Sugar.Names.Env.$fShowImportRecord9
                   ls
                   s) -}
f4f89c71f2d750451200655686321441
  $fShowImportRecord_$s$cshowList3 ::
    [Language.PureScript.Sugar.Names.Env.ImportRecord
       (Language.PureScript.Names.ProperName
          'Language.PureScript.Names.ClassName)]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Sugar.Names.Env.ImportRecord
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ClassName)])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Language.PureScript.Sugar.Names.Env.ImportRecord
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.ClassName))
                   Language.PureScript.Sugar.Names.Env.$fShowImportRecord10
                   ls
                   s) -}
fca922f4cc9a5356971ec215293142c5
  $fShowImportRecord_$s$cshowList4 ::
    [Language.PureScript.Sugar.Names.Env.ImportRecord
       Language.PureScript.Names.Ident]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Sugar.Names.Env.ImportRecord
                             Language.PureScript.Names.Ident])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Language.PureScript.Sugar.Names.Env.ImportRecord
                        Language.PureScript.Names.Ident)
                   Language.PureScript.Sugar.Names.Env.$fShowImportRecord11
                   ls
                   s) -}
c621dafafeae2c5e1c375188e522437d
  $fShowImportRecord_$s$cshowList5 ::
    [Language.PureScript.Sugar.Names.Env.ImportRecord
       (Language.PureScript.Names.OpName
          'Language.PureScript.Names.ValueOpName)]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Sugar.Names.Env.ImportRecord
                             (Language.PureScript.Names.OpName
                                'Language.PureScript.Names.ValueOpName)])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Language.PureScript.Sugar.Names.Env.ImportRecord
                        (Language.PureScript.Names.OpName
                           'Language.PureScript.Names.ValueOpName))
                   Language.PureScript.Sugar.Names.Env.$fShowImportRecord12
                   ls
                   s) -}
ec6fd81fc5f965f1715c9f8ca421b95e
  $fShowImportRecord_$s$cshowList6 ::
    [Language.PureScript.Sugar.Names.Env.ImportRecord
       (Language.PureScript.Names.ProperName
          'Language.PureScript.Names.KindName)]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Sugar.Names.Env.ImportRecord
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.KindName)])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Language.PureScript.Sugar.Names.Env.ImportRecord
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.KindName))
                   Language.PureScript.Sugar.Names.Env.$fShowImportRecord13
                   ls
                   s) -}
bf5a97568e086735d3bbc97dc5ee1e68
  $fShowImportRecord_$s$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Sugar.Names.Env.ImportRecord
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName)
    -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S(S),1*U(U)><S,1*U(1*U(1*U,U),U,U(U,U(U(U),U(U)),U(U(U),U(U))),U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Sugar.Names.Env.ImportRecord
                            (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.TypeName)) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Language.PureScript.Sugar.Names.Env.ImportRecord ww3 ww4 ww5 ww6 ->
                 Language.PureScript.Sugar.Names.Env.$w$s$cshowsPrec
                   ww1
                   ww3
                   ww4
                   ww5
                   ww6 } }) -}
bf5a97568e086735d3bbc97dc5ee1e68
  $fShowImportRecord_$s$cshowsPrec1 ::
    GHC.Types.Int
    -> Language.PureScript.Sugar.Names.Env.ImportRecord
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.TypeOpName)
    -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S(S),1*U(U)><S,1*U(1*U(1*U,U),U,U(U,U(U(U),U(U)),U(U(U),U(U))),U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Sugar.Names.Env.ImportRecord
                            (Language.PureScript.Names.OpName
                               'Language.PureScript.Names.TypeOpName)) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Language.PureScript.Sugar.Names.Env.ImportRecord ww3 ww4 ww5 ww6 ->
                 Language.PureScript.Sugar.Names.Env.$w$s$cshowsPrec1
                   ww1
                   ww3
                   ww4
                   ww5
                   ww6 } }) -}
bf5a97568e086735d3bbc97dc5ee1e68
  $fShowImportRecord_$s$cshowsPrec2 ::
    GHC.Types.Int
    -> Language.PureScript.Sugar.Names.Env.ImportRecord
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ConstructorName)
    -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S(S),1*U(U)><S,1*U(1*U(1*U,U),U,U(U,U(U(U),U(U)),U(U(U),U(U))),U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Sugar.Names.Env.ImportRecord
                            (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.ConstructorName)) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Language.PureScript.Sugar.Names.Env.ImportRecord ww3 ww4 ww5 ww6 ->
                 Language.PureScript.Sugar.Names.Env.$w$s$cshowsPrec2
                   ww1
                   ww3
                   ww4
                   ww5
                   ww6 } }) -}
bf5a97568e086735d3bbc97dc5ee1e68
  $fShowImportRecord_$s$cshowsPrec3 ::
    GHC.Types.Int
    -> Language.PureScript.Sugar.Names.Env.ImportRecord
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
    -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S(S),1*U(U)><S,1*U(1*U(1*U,U),U,U(U,U(U(U),U(U)),U(U(U),U(U))),U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Sugar.Names.Env.ImportRecord
                            (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.ClassName)) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Language.PureScript.Sugar.Names.Env.ImportRecord ww3 ww4 ww5 ww6 ->
                 Language.PureScript.Sugar.Names.Env.$w$s$cshowsPrec3
                   ww1
                   ww3
                   ww4
                   ww5
                   ww6 } }) -}
bf5a97568e086735d3bbc97dc5ee1e68
  $fShowImportRecord_$s$cshowsPrec4 ::
    GHC.Types.Int
    -> Language.PureScript.Sugar.Names.Env.ImportRecord
         Language.PureScript.Names.Ident
    -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S(S),1*U(U)><S,1*U(1*U(1*U,U),U,U(U,U(U(U),U(U)),U(U(U),U(U))),U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Sugar.Names.Env.ImportRecord
                            Language.PureScript.Names.Ident) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Language.PureScript.Sugar.Names.Env.ImportRecord ww3 ww4 ww5 ww6 ->
                 Language.PureScript.Sugar.Names.Env.$w$s$cshowsPrec4
                   ww1
                   ww3
                   ww4
                   ww5
                   ww6 } }) -}
bf5a97568e086735d3bbc97dc5ee1e68
  $fShowImportRecord_$s$cshowsPrec5 ::
    GHC.Types.Int
    -> Language.PureScript.Sugar.Names.Env.ImportRecord
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.ValueOpName)
    -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S(S),1*U(U)><S,1*U(1*U(1*U,U),U,U(U,U(U(U),U(U)),U(U(U),U(U))),U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Sugar.Names.Env.ImportRecord
                            (Language.PureScript.Names.OpName
                               'Language.PureScript.Names.ValueOpName)) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Language.PureScript.Sugar.Names.Env.ImportRecord ww3 ww4 ww5 ww6 ->
                 Language.PureScript.Sugar.Names.Env.$w$s$cshowsPrec5
                   ww1
                   ww3
                   ww4
                   ww5
                   ww6 } }) -}
bf5a97568e086735d3bbc97dc5ee1e68
  $fShowImportRecord_$s$cshowsPrec6 ::
    GHC.Types.Int
    -> Language.PureScript.Sugar.Names.Env.ImportRecord
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.KindName)
    -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S(S),1*U(U)><S,1*U(1*U(1*U,U),U,U(U,U(U(U),U(U)),U(U(U),U(U))),U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Sugar.Names.Env.ImportRecord
                            (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.KindName)) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Language.PureScript.Sugar.Names.Env.ImportRecord ww3 ww4 ww5 ww6 ->
                 Language.PureScript.Sugar.Names.Env.$w$s$cshowsPrec6
                   ww1
                   ww3
                   ww4
                   ww5
                   ww6 } }) -}
bf5a97568e086735d3bbc97dc5ee1e68
  $fShowImportRecord_$s$fShowImportRecord ::
    GHC.Show.Show
      (Language.PureScript.Sugar.Names.Env.ImportRecord
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Sugar.Names.Env.ImportRecord
                       (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.TypeName))
                  Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshowsPrec
                  (\ (x :: Language.PureScript.Sugar.Names.Env.ImportRecord
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.TypeName)) ->
                   Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshowsPrec
                     Language.PureScript.Sugar.Names.Env.$fShowExports2
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [Language.PureScript.Sugar.Names.Env.ImportRecord
                               (Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.TypeName)])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Language.PureScript.Sugar.Names.Env.ImportRecord
                          (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.TypeName))
                     (Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshowsPrec
                        Language.PureScript.Sugar.Names.Env.$fShowExports2)
                     ls
                     s) -}
bf5a97568e086735d3bbc97dc5ee1e68
  $fShowImportRecord_$s$fShowImportRecord1 ::
    GHC.Show.Show
      (Language.PureScript.Sugar.Names.Env.ImportRecord
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.TypeOpName))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Sugar.Names.Env.ImportRecord
                       (Language.PureScript.Names.OpName
                          'Language.PureScript.Names.TypeOpName))
                  Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshowsPrec1
                  (\ (x :: Language.PureScript.Sugar.Names.Env.ImportRecord
                             (Language.PureScript.Names.OpName
                                'Language.PureScript.Names.TypeOpName)) ->
                   Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshowsPrec1
                     Language.PureScript.Sugar.Names.Env.$fShowExports2
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [Language.PureScript.Sugar.Names.Env.ImportRecord
                               (Language.PureScript.Names.OpName
                                  'Language.PureScript.Names.TypeOpName)])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Language.PureScript.Sugar.Names.Env.ImportRecord
                          (Language.PureScript.Names.OpName
                             'Language.PureScript.Names.TypeOpName))
                     (Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshowsPrec1
                        Language.PureScript.Sugar.Names.Env.$fShowExports2)
                     ls
                     s) -}
bf5a97568e086735d3bbc97dc5ee1e68
  $fShowImportRecord_$s$fShowImportRecord2 ::
    GHC.Show.Show
      (Language.PureScript.Sugar.Names.Env.ImportRecord
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ConstructorName))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Sugar.Names.Env.ImportRecord
                       (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ConstructorName))
                  Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshowsPrec2
                  (\ (x :: Language.PureScript.Sugar.Names.Env.ImportRecord
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ConstructorName)) ->
                   Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshowsPrec2
                     Language.PureScript.Sugar.Names.Env.$fShowExports2
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [Language.PureScript.Sugar.Names.Env.ImportRecord
                               (Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.ConstructorName)])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Language.PureScript.Sugar.Names.Env.ImportRecord
                          (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ConstructorName))
                     (Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshowsPrec2
                        Language.PureScript.Sugar.Names.Env.$fShowExports2)
                     ls
                     s) -}
bf5a97568e086735d3bbc97dc5ee1e68
  $fShowImportRecord_$s$fShowImportRecord3 ::
    GHC.Show.Show
      (Language.PureScript.Sugar.Names.Env.ImportRecord
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Sugar.Names.Env.ImportRecord
                       (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ClassName))
                  Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshowsPrec3
                  (\ (x :: Language.PureScript.Sugar.Names.Env.ImportRecord
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ClassName)) ->
                   Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshowsPrec3
                     Language.PureScript.Sugar.Names.Env.$fShowExports2
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [Language.PureScript.Sugar.Names.Env.ImportRecord
                               (Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.ClassName)])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Language.PureScript.Sugar.Names.Env.ImportRecord
                          (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ClassName))
                     (Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshowsPrec3
                        Language.PureScript.Sugar.Names.Env.$fShowExports2)
                     ls
                     s) -}
bf5a97568e086735d3bbc97dc5ee1e68
  $fShowImportRecord_$s$fShowImportRecord4 ::
    GHC.Show.Show
      (Language.PureScript.Sugar.Names.Env.ImportRecord
         Language.PureScript.Names.Ident)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Sugar.Names.Env.ImportRecord
                       Language.PureScript.Names.Ident)
                  Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshowsPrec4
                  (\ (x :: Language.PureScript.Sugar.Names.Env.ImportRecord
                             Language.PureScript.Names.Ident) ->
                   Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshowsPrec4
                     Language.PureScript.Sugar.Names.Env.$fShowExports2
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [Language.PureScript.Sugar.Names.Env.ImportRecord
                               Language.PureScript.Names.Ident])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Language.PureScript.Sugar.Names.Env.ImportRecord
                          Language.PureScript.Names.Ident)
                     (Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshowsPrec4
                        Language.PureScript.Sugar.Names.Env.$fShowExports2)
                     ls
                     s) -}
bf5a97568e086735d3bbc97dc5ee1e68
  $fShowImportRecord_$s$fShowImportRecord5 ::
    GHC.Show.Show
      (Language.PureScript.Sugar.Names.Env.ImportRecord
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.ValueOpName))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Sugar.Names.Env.ImportRecord
                       (Language.PureScript.Names.OpName
                          'Language.PureScript.Names.ValueOpName))
                  Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshowsPrec5
                  (\ (x :: Language.PureScript.Sugar.Names.Env.ImportRecord
                             (Language.PureScript.Names.OpName
                                'Language.PureScript.Names.ValueOpName)) ->
                   Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshowsPrec5
                     Language.PureScript.Sugar.Names.Env.$fShowExports2
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [Language.PureScript.Sugar.Names.Env.ImportRecord
                               (Language.PureScript.Names.OpName
                                  'Language.PureScript.Names.ValueOpName)])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Language.PureScript.Sugar.Names.Env.ImportRecord
                          (Language.PureScript.Names.OpName
                             'Language.PureScript.Names.ValueOpName))
                     (Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshowsPrec5
                        Language.PureScript.Sugar.Names.Env.$fShowExports2)
                     ls
                     s) -}
bf5a97568e086735d3bbc97dc5ee1e68
  $fShowImportRecord_$s$fShowImportRecord6 ::
    GHC.Show.Show
      (Language.PureScript.Sugar.Names.Env.ImportRecord
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.KindName))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Sugar.Names.Env.ImportRecord
                       (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.KindName))
                  Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshowsPrec6
                  (\ (x :: Language.PureScript.Sugar.Names.Env.ImportRecord
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.KindName)) ->
                   Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshowsPrec6
                     Language.PureScript.Sugar.Names.Env.$fShowExports2
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [Language.PureScript.Sugar.Names.Env.ImportRecord
                               (Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.KindName)])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Language.PureScript.Sugar.Names.Env.ImportRecord
                          (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.KindName))
                     (Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshowsPrec6
                        Language.PureScript.Sugar.Names.Env.$fShowExports2)
                     ls
                     s) -}
b53ca872c8c47c3d8839f496fc15c222
  $fShowImports ::
    GHC.Show.Show Language.PureScript.Sugar.Names.Env.Imports
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Sugar.Names.Env.Imports
                  Language.PureScript.Sugar.Names.Env.$fShowImports_$cshowsPrec
                  Language.PureScript.Sugar.Names.Env.$fShowImports_$cshow
                  Language.PureScript.Sugar.Names.Env.$fShowImports_$cshowList -}
b53ca872c8c47c3d8839f496fc15c222
  $fShowImports1 ::
    Language.PureScript.Sugar.Names.Env.Imports -> GHC.Show.ShowS
  {- Arity: 1,
     Strictness: <S,1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)>,
     Unfolding: (\ (w :: Language.PureScript.Sugar.Names.Env.Imports) ->
                 case w of ww { Language.PureScript.Sugar.Names.Env.Imports ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ->
                 Language.PureScript.Sugar.Names.Env.$w$cshowsPrec3
                   0#
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9 }) -}
b53ca872c8c47c3d8839f496fc15c222
  $fShowImports_$cshow ::
    Language.PureScript.Sugar.Names.Env.Imports -> GHC.Base.String
  {- Arity: 1,
     Strictness: <S,1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Sugar.Names.Env.Imports) ->
                 Language.PureScript.Sugar.Names.Env.$fShowImports_$cshowsPrec
                   Language.PureScript.Sugar.Names.Env.$fShowExports2
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
b53ca872c8c47c3d8839f496fc15c222
  $fShowImports_$cshowList ::
    [Language.PureScript.Sugar.Names.Env.Imports] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Sugar.Names.Env.Imports])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Sugar.Names.Env.Imports
                   Language.PureScript.Sugar.Names.Env.$fShowImports1
                   ls
                   s) -}
b53ca872c8c47c3d8839f496fc15c222
  $fShowImports_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Sugar.Names.Env.Imports -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Sugar.Names.Env.Imports) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Language.PureScript.Sugar.Names.Env.Imports ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ->
                 Language.PureScript.Sugar.Names.Env.$w$cshowsPrec3
                   ww1
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11 } }) -}
8830c6bf7ec4cee62c37eaa64b3a2d70
  $s$fShow(,) ::
    GHC.Show.Show
      ([Language.PureScript.Names.ProperName
          'Language.PureScript.Names.ConstructorName],
       Language.PureScript.Names.ModuleName)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ ([Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.ConstructorName],
                     Language.PureScript.Names.ModuleName)
                  (GHC.Show.$fShow(,)_$cshowsPrec
                     @ [Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ConstructorName]
                     @ Language.PureScript.Names.ModuleName
                     Language.PureScript.Sugar.Names.Env.$s$fShow(,)_$s$fShow[]
                     Language.PureScript.Names.$fShowModuleName)
                  (\ (x :: ([Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.ConstructorName],
                            Language.PureScript.Names.ModuleName)) ->
                   GHC.Show.$fShow(,)_$cshowsPrec
                     @ [Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ConstructorName]
                     @ Language.PureScript.Names.ModuleName
                     Language.PureScript.Sugar.Names.Env.$s$fShow(,)_$s$fShow[]
                     Language.PureScript.Names.$fShowModuleName
                     GHC.Show.$fShow(,)1
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [([Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.ConstructorName],
                              Language.PureScript.Names.ModuleName)])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ ([Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.ConstructorName],
                        Language.PureScript.Names.ModuleName)
                     (GHC.Show.$fShow(,)_$cshowsPrec
                        @ [Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ConstructorName]
                        @ Language.PureScript.Names.ModuleName
                        Language.PureScript.Sugar.Names.Env.$s$fShow(,)_$s$fShow[]
                        Language.PureScript.Names.$fShowModuleName
                        GHC.Show.$fShow(,)1)
                     ls
                     s) -}
b6f67f2b2fbed9f0776b30182b217a0c
  $s$fShow(,)_$s$fShow[] ::
    GHC.Show.Show
      [Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ConstructorName]
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ [Language.PureScript.Names.ProperName
                       'Language.PureScript.Names.ConstructorName]
                  (\ (ds :: GHC.Types.Int) ->
                   Language.PureScript.Names.$fShowProperName_$cshowList
                     @ 'Language.PureScript.Names.ConstructorName)
                  (\ (x :: [Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ConstructorName]) ->
                   GHC.Show.showList__
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ConstructorName)
                     (Language.PureScript.Names.$fShowProperName1
                        @ 'Language.PureScript.Names.ConstructorName)
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [[Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ConstructorName]])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ [Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ConstructorName]
                     (Language.PureScript.Names.$fShowProperName_$cshowList
                        @ 'Language.PureScript.Names.ConstructorName)
                     ls
                     s) -}
25586f23d7279ec0992c11f8646a8831
  $s$fShowMap_$cshowsPrec10 ::
    GHC.Show.Show
      [Language.PureScript.Sugar.Names.Env.ImportRecord
         Language.PureScript.Names.Ident]
  {- Unfolding: (GHC.Show.$fShow[]
                   @ (Language.PureScript.Sugar.Names.Env.ImportRecord
                        Language.PureScript.Names.Ident)
                   Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$fShowImportRecord4) -}
29ced11d02f0c9aff0a1f9af178d7cc9
  $s$fShowMap_$cshowsPrec12 ::
    GHC.Show.Show
      [Language.PureScript.Sugar.Names.Env.ImportRecord
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)]
  {- Unfolding: (GHC.Show.$fShow[]
                   @ (Language.PureScript.Sugar.Names.Env.ImportRecord
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.ClassName))
                   Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$fShowImportRecord3) -}
1f8764371bfd506d37ba0b81eb9e8ff4
  $s$fShowMap_$cshowsPrec14 ::
    GHC.Show.Show
      [Language.PureScript.Sugar.Names.Env.ImportRecord
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ConstructorName)]
  {- Unfolding: (GHC.Show.$fShow[]
                   @ (Language.PureScript.Sugar.Names.Env.ImportRecord
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.ConstructorName))
                   Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$fShowImportRecord2) -}
a674948f882bd6094725103031002064
  $s$fShowMap_$cshowsPrec16 ::
    GHC.Show.Show
      [Language.PureScript.Sugar.Names.Env.ImportRecord
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.TypeOpName)]
  {- Unfolding: (GHC.Show.$fShow[]
                   @ (Language.PureScript.Sugar.Names.Env.ImportRecord
                        (Language.PureScript.Names.OpName
                           'Language.PureScript.Names.TypeOpName))
                   Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$fShowImportRecord1) -}
520edcac1e1d7aac45b32b639bf9369e
  $s$fShowMap_$cshowsPrec18 ::
    GHC.Show.Show
      [Language.PureScript.Sugar.Names.Env.ImportRecord
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName)]
  {- Unfolding: (GHC.Show.$fShow[]
                   @ (Language.PureScript.Sugar.Names.Env.ImportRecord
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.TypeName))
                   Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$fShowImportRecord) -}
e14a33b0be18892ba4496cfc896161e4
  $s$fShowMap_$cshowsPrec6 ::
    GHC.Show.Show
      [Language.PureScript.Sugar.Names.Env.ImportRecord
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.KindName)]
  {- Unfolding: (GHC.Show.$fShow[]
                   @ (Language.PureScript.Sugar.Names.Env.ImportRecord
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.KindName))
                   Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$fShowImportRecord6) -}
53ac96c8b398b3ec38ea6f04b4981201
  $s$fShowMap_$cshowsPrec8 ::
    GHC.Show.Show
      [Language.PureScript.Sugar.Names.Env.ImportRecord
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.ValueOpName)]
  {- Unfolding: (GHC.Show.$fShow[]
                   @ (Language.PureScript.Sugar.Names.Env.ImportRecord
                        (Language.PureScript.Names.OpName
                           'Language.PureScript.Names.ValueOpName))
                   Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$fShowImportRecord5) -}
03a5301e4f38d38f4a661700ceef48c7
  $s$fShowMap_$cshowsPrec_$s$fShowQualified ::
    GHC.Show.Show
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.KindName))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.Qualified
                       (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.KindName))
                  (Language.PureScript.Names.$fShowQualified_$cshowsPrec
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.KindName)
                     (Language.PureScript.Names.$fShowProperName
                        @ 'Language.PureScript.Names.KindName))
                  (\ (x :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.KindName)) ->
                   Language.PureScript.Names.$fShowQualified_$cshowsPrec
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.KindName)
                     (Language.PureScript.Names.$fShowProperName
                        @ 'Language.PureScript.Names.KindName)
                     Language.PureScript.Names.$fShowIdent2
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [Language.PureScript.Names.Qualified
                               (Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.KindName)])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Language.PureScript.Names.Qualified
                          (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.KindName))
                     (Language.PureScript.Names.$fShowQualified_$cshowsPrec
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.KindName)
                        (Language.PureScript.Names.$fShowProperName
                           @ 'Language.PureScript.Names.KindName)
                        Language.PureScript.Names.$fShowIdent2)
                     ls
                     s) -}
341cf9a48b0b1a20d3b277067023fbab
  $s$fShowMap_$cshowsPrec_$s$fShowQualified1 ::
    GHC.Show.Show
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.ValueOpName))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.Qualified
                       (Language.PureScript.Names.OpName
                          'Language.PureScript.Names.ValueOpName))
                  (Language.PureScript.Names.$fShowQualified_$cshowsPrec
                     @ (Language.PureScript.Names.OpName
                          'Language.PureScript.Names.ValueOpName)
                     (Language.PureScript.Names.$fShowOpName
                        @ 'Language.PureScript.Names.ValueOpName))
                  (\ (x :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.OpName
                                'Language.PureScript.Names.ValueOpName)) ->
                   Language.PureScript.Names.$fShowQualified_$cshowsPrec
                     @ (Language.PureScript.Names.OpName
                          'Language.PureScript.Names.ValueOpName)
                     (Language.PureScript.Names.$fShowOpName
                        @ 'Language.PureScript.Names.ValueOpName)
                     Language.PureScript.Names.$fShowIdent2
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [Language.PureScript.Names.Qualified
                               (Language.PureScript.Names.OpName
                                  'Language.PureScript.Names.ValueOpName)])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Language.PureScript.Names.Qualified
                          (Language.PureScript.Names.OpName
                             'Language.PureScript.Names.ValueOpName))
                     (Language.PureScript.Names.$fShowQualified_$cshowsPrec
                        @ (Language.PureScript.Names.OpName
                             'Language.PureScript.Names.ValueOpName)
                        (Language.PureScript.Names.$fShowOpName
                           @ 'Language.PureScript.Names.ValueOpName)
                        Language.PureScript.Names.$fShowIdent2)
                     ls
                     s) -}
004cdb0d874f17143936c83c1fe3571f
  $s$fShowMap_$cshowsPrec_$s$fShowQualified2 ::
    GHC.Show.Show
      (Language.PureScript.Names.Qualified
         Language.PureScript.Names.Ident)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.Qualified
                       Language.PureScript.Names.Ident)
                  (Language.PureScript.Names.$fShowQualified_$cshowsPrec
                     @ Language.PureScript.Names.Ident
                     Language.PureScript.Names.$fShowIdent)
                  (\ (x :: Language.PureScript.Names.Qualified
                             Language.PureScript.Names.Ident) ->
                   Language.PureScript.Names.$fShowQualified_$cshowsPrec
                     @ Language.PureScript.Names.Ident
                     Language.PureScript.Names.$fShowIdent
                     Language.PureScript.Names.$fShowIdent2
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [Language.PureScript.Names.Qualified
                               Language.PureScript.Names.Ident])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Language.PureScript.Names.Qualified
                          Language.PureScript.Names.Ident)
                     (Language.PureScript.Names.$fShowQualified_$cshowsPrec
                        @ Language.PureScript.Names.Ident
                        Language.PureScript.Names.$fShowIdent
                        Language.PureScript.Names.$fShowIdent2)
                     ls
                     s) -}
7e3b4b1c7de9ad4ceb016c82c3cdd60c
  $s$fShowMap_$cshowsPrec_$s$fShowQualified3 ::
    GHC.Show.Show
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.Qualified
                       (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ClassName))
                  (Language.PureScript.Names.$fShowQualified_$cshowsPrec
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ClassName)
                     (Language.PureScript.Names.$fShowProperName
                        @ 'Language.PureScript.Names.ClassName))
                  (\ (x :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ClassName)) ->
                   Language.PureScript.Names.$fShowQualified_$cshowsPrec
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ClassName)
                     (Language.PureScript.Names.$fShowProperName
                        @ 'Language.PureScript.Names.ClassName)
                     Language.PureScript.Names.$fShowIdent2
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [Language.PureScript.Names.Qualified
                               (Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.ClassName)])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Language.PureScript.Names.Qualified
                          (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ClassName))
                     (Language.PureScript.Names.$fShowQualified_$cshowsPrec
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ClassName)
                        (Language.PureScript.Names.$fShowProperName
                           @ 'Language.PureScript.Names.ClassName)
                        Language.PureScript.Names.$fShowIdent2)
                     ls
                     s) -}
61e85397c28be574f4bb2710995456fd
  $s$fShowMap_$cshowsPrec_$s$fShowQualified4 ::
    GHC.Show.Show
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ConstructorName))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.Qualified
                       (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ConstructorName))
                  (Language.PureScript.Names.$fShowQualified_$cshowsPrec
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ConstructorName)
                     (Language.PureScript.Names.$fShowProperName
                        @ 'Language.PureScript.Names.ConstructorName))
                  (\ (x :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ConstructorName)) ->
                   Language.PureScript.Names.$fShowQualified_$cshowsPrec
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ConstructorName)
                     (Language.PureScript.Names.$fShowProperName
                        @ 'Language.PureScript.Names.ConstructorName)
                     Language.PureScript.Names.$fShowIdent2
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [Language.PureScript.Names.Qualified
                               (Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.ConstructorName)])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Language.PureScript.Names.Qualified
                          (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ConstructorName))
                     (Language.PureScript.Names.$fShowQualified_$cshowsPrec
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ConstructorName)
                        (Language.PureScript.Names.$fShowProperName
                           @ 'Language.PureScript.Names.ConstructorName)
                        Language.PureScript.Names.$fShowIdent2)
                     ls
                     s) -}
761cee200d7501ef9122570f7c0c97e1
  $s$fShowMap_$cshowsPrec_$s$fShowQualified5 ::
    GHC.Show.Show
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.TypeOpName))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.Qualified
                       (Language.PureScript.Names.OpName
                          'Language.PureScript.Names.TypeOpName))
                  (Language.PureScript.Names.$fShowQualified_$cshowsPrec
                     @ (Language.PureScript.Names.OpName
                          'Language.PureScript.Names.TypeOpName)
                     (Language.PureScript.Names.$fShowOpName
                        @ 'Language.PureScript.Names.TypeOpName))
                  (\ (x :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.OpName
                                'Language.PureScript.Names.TypeOpName)) ->
                   Language.PureScript.Names.$fShowQualified_$cshowsPrec
                     @ (Language.PureScript.Names.OpName
                          'Language.PureScript.Names.TypeOpName)
                     (Language.PureScript.Names.$fShowOpName
                        @ 'Language.PureScript.Names.TypeOpName)
                     Language.PureScript.Names.$fShowIdent2
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [Language.PureScript.Names.Qualified
                               (Language.PureScript.Names.OpName
                                  'Language.PureScript.Names.TypeOpName)])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Language.PureScript.Names.Qualified
                          (Language.PureScript.Names.OpName
                             'Language.PureScript.Names.TypeOpName))
                     (Language.PureScript.Names.$fShowQualified_$cshowsPrec
                        @ (Language.PureScript.Names.OpName
                             'Language.PureScript.Names.TypeOpName)
                        (Language.PureScript.Names.$fShowOpName
                           @ 'Language.PureScript.Names.TypeOpName)
                        Language.PureScript.Names.$fShowIdent2)
                     ls
                     s) -}
1a67746a6771b72d0868ca422f7528b9
  $s$fShowMap_$cshowsPrec_$s$fShowQualified6 ::
    GHC.Show.Show
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.Qualified
                       (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.TypeName))
                  (Language.PureScript.Names.$fShowQualified_$cshowsPrec
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.TypeName)
                     (Language.PureScript.Names.$fShowProperName
                        @ 'Language.PureScript.Names.TypeName))
                  (\ (x :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.TypeName)) ->
                   Language.PureScript.Names.$fShowQualified_$cshowsPrec
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.TypeName)
                     (Language.PureScript.Names.$fShowProperName
                        @ 'Language.PureScript.Names.TypeName)
                     Language.PureScript.Names.$fShowIdent2
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [Language.PureScript.Names.Qualified
                               (Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.TypeName)])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Language.PureScript.Names.Qualified
                          (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.TypeName))
                     (Language.PureScript.Names.$fShowQualified_$cshowsPrec
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.TypeName)
                        (Language.PureScript.Names.$fShowProperName
                           @ 'Language.PureScript.Names.TypeName)
                        Language.PureScript.Names.$fShowIdent2)
                     ls
                     s) -}
d7278e832b704e70d9dae0c6e33fdf17
  $s$fShowQualified_$cshowList ::
    [Language.PureScript.Names.Qualified
       (Language.PureScript.Names.ProperName
          'Language.PureScript.Names.KindName)]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.KindName)])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Language.PureScript.Names.Qualified
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.KindName))
                   (Language.PureScript.Names.$fShowQualified_$cshowsPrec
                      @ (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.KindName)
                      (Language.PureScript.Names.$fShowProperName
                         @ 'Language.PureScript.Names.KindName)
                      Language.PureScript.Names.$fShowIdent2)
                   ls
                   s) -}
2308460ae32ebfd21c76817cb7890297
  $s$fShowQualified_$cshowList1 ::
    [Language.PureScript.Names.Qualified
       (Language.PureScript.Names.OpName
          'Language.PureScript.Names.ValueOpName)]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.OpName
                                'Language.PureScript.Names.ValueOpName)])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Language.PureScript.Names.Qualified
                        (Language.PureScript.Names.OpName
                           'Language.PureScript.Names.ValueOpName))
                   (Language.PureScript.Names.$fShowQualified_$cshowsPrec
                      @ (Language.PureScript.Names.OpName
                           'Language.PureScript.Names.ValueOpName)
                      (Language.PureScript.Names.$fShowOpName
                         @ 'Language.PureScript.Names.ValueOpName)
                      Language.PureScript.Names.$fShowIdent2)
                   ls
                   s) -}
533adc008a0d6c4291e1e973baff1b63
  $s$fShowQualified_$cshowList2 ::
    [Language.PureScript.Names.Qualified
       Language.PureScript.Names.Ident]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Names.Qualified
                             Language.PureScript.Names.Ident])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Language.PureScript.Names.Qualified
                        Language.PureScript.Names.Ident)
                   (Language.PureScript.Names.$fShowQualified_$cshowsPrec
                      @ Language.PureScript.Names.Ident
                      Language.PureScript.Names.$fShowIdent
                      Language.PureScript.Names.$fShowIdent2)
                   ls
                   s) -}
592df9002920335a3efbc68234052bb5
  $s$fShowQualified_$cshowList3 ::
    [Language.PureScript.Names.Qualified
       (Language.PureScript.Names.ProperName
          'Language.PureScript.Names.ClassName)]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ClassName)])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Language.PureScript.Names.Qualified
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.ClassName))
                   (Language.PureScript.Names.$fShowQualified_$cshowsPrec
                      @ (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.ClassName)
                      (Language.PureScript.Names.$fShowProperName
                         @ 'Language.PureScript.Names.ClassName)
                      Language.PureScript.Names.$fShowIdent2)
                   ls
                   s) -}
f8a12250de68fe6906ce662ab81f121a
  $s$fShowQualified_$cshowList4 ::
    [Language.PureScript.Names.Qualified
       (Language.PureScript.Names.ProperName
          'Language.PureScript.Names.ConstructorName)]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ConstructorName)])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Language.PureScript.Names.Qualified
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.ConstructorName))
                   (Language.PureScript.Names.$fShowQualified_$cshowsPrec
                      @ (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.ConstructorName)
                      (Language.PureScript.Names.$fShowProperName
                         @ 'Language.PureScript.Names.ConstructorName)
                      Language.PureScript.Names.$fShowIdent2)
                   ls
                   s) -}
257debbe30cff29e1889211e0abc9f3e
  $s$fShowQualified_$cshowList5 ::
    [Language.PureScript.Names.Qualified
       (Language.PureScript.Names.OpName
          'Language.PureScript.Names.TypeOpName)]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.OpName
                                'Language.PureScript.Names.TypeOpName)])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Language.PureScript.Names.Qualified
                        (Language.PureScript.Names.OpName
                           'Language.PureScript.Names.TypeOpName))
                   (Language.PureScript.Names.$fShowQualified_$cshowsPrec
                      @ (Language.PureScript.Names.OpName
                           'Language.PureScript.Names.TypeOpName)
                      (Language.PureScript.Names.$fShowOpName
                         @ 'Language.PureScript.Names.TypeOpName)
                      Language.PureScript.Names.$fShowIdent2)
                   ls
                   s) -}
e3d7f7ca5175621a5ece6c0d5669be1b
  $s$fShowQualified_$cshowList6 ::
    [Language.PureScript.Names.Qualified
       (Language.PureScript.Names.ProperName
          'Language.PureScript.Names.TypeName)]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.TypeName)])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Language.PureScript.Names.Qualified
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.TypeName))
                   (Language.PureScript.Names.$fShowQualified_$cshowsPrec
                      @ (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.TypeName)
                      (Language.PureScript.Names.$fShowProperName
                         @ 'Language.PureScript.Names.TypeName)
                      Language.PureScript.Names.$fShowIdent2)
                   ls
                   s) -}
380cdbea81b690604241ada0d30e0d94
  $s$fShowQualified_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.KindName)
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U,U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w1 :: GHC.Types.Int)
                   (w2 :: Language.PureScript.Names.Qualified
                            (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.KindName)) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Language.PureScript.Names.Qualified ww3 ww4 ->
                 Language.PureScript.Names.$w$cshowsPrec4
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.KindName)
                   (Language.PureScript.Names.$fShowProperName
                      @ 'Language.PureScript.Names.KindName)
                   ww1
                   ww3
                   ww4 } }) -}
1e5155d2261c986f2a4d2600247d2195
  $s$fShowQualified_$cshowsPrec1 ::
    GHC.Types.Int
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.ValueOpName)
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U,U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w1 :: GHC.Types.Int)
                   (w2 :: Language.PureScript.Names.Qualified
                            (Language.PureScript.Names.OpName
                               'Language.PureScript.Names.ValueOpName)) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Language.PureScript.Names.Qualified ww3 ww4 ->
                 Language.PureScript.Names.$w$cshowsPrec4
                   @ (Language.PureScript.Names.OpName
                        'Language.PureScript.Names.ValueOpName)
                   (Language.PureScript.Names.$fShowOpName
                      @ 'Language.PureScript.Names.ValueOpName)
                   ww1
                   ww3
                   ww4 } }) -}
f16a8c618aa730434e7d38f28b76e8c4
  $s$fShowQualified_$cshowsPrec2 ::
    GHC.Types.Int
    -> Language.PureScript.Names.Qualified
         Language.PureScript.Names.Ident
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U,U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w1 :: GHC.Types.Int)
                   (w2 :: Language.PureScript.Names.Qualified
                            Language.PureScript.Names.Ident) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Language.PureScript.Names.Qualified ww3 ww4 ->
                 Language.PureScript.Names.$w$cshowsPrec4
                   @ Language.PureScript.Names.Ident
                   Language.PureScript.Names.$fShowIdent
                   ww1
                   ww3
                   ww4 } }) -}
1c288e4b79cd41d9366b0da9e8dab3ea
  $s$fShowQualified_$cshowsPrec3 ::
    GHC.Types.Int
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U,U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w1 :: GHC.Types.Int)
                   (w2 :: Language.PureScript.Names.Qualified
                            (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.ClassName)) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Language.PureScript.Names.Qualified ww3 ww4 ->
                 Language.PureScript.Names.$w$cshowsPrec4
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.ClassName)
                   (Language.PureScript.Names.$fShowProperName
                      @ 'Language.PureScript.Names.ClassName)
                   ww1
                   ww3
                   ww4 } }) -}
4b1eaefe5968c2032c6d6111979168f6
  $s$fShowQualified_$cshowsPrec4 ::
    GHC.Types.Int
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ConstructorName)
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U,U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w1 :: GHC.Types.Int)
                   (w2 :: Language.PureScript.Names.Qualified
                            (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.ConstructorName)) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Language.PureScript.Names.Qualified ww3 ww4 ->
                 Language.PureScript.Names.$w$cshowsPrec4
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.ConstructorName)
                   (Language.PureScript.Names.$fShowProperName
                      @ 'Language.PureScript.Names.ConstructorName)
                   ww1
                   ww3
                   ww4 } }) -}
3ae37bf8cd4172417d5a13de4a450779
  $s$fShowQualified_$cshowsPrec5 ::
    GHC.Types.Int
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.TypeOpName)
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U,U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w1 :: GHC.Types.Int)
                   (w2 :: Language.PureScript.Names.Qualified
                            (Language.PureScript.Names.OpName
                               'Language.PureScript.Names.TypeOpName)) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Language.PureScript.Names.Qualified ww3 ww4 ->
                 Language.PureScript.Names.$w$cshowsPrec4
                   @ (Language.PureScript.Names.OpName
                        'Language.PureScript.Names.TypeOpName)
                   (Language.PureScript.Names.$fShowOpName
                      @ 'Language.PureScript.Names.TypeOpName)
                   ww1
                   ww3
                   ww4 } }) -}
174e26040fe647b00e3c9c2bd71aea59
  $s$fShowQualified_$cshowsPrec6 ::
    GHC.Types.Int
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName)
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U,U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w1 :: GHC.Types.Int)
                   (w2 :: Language.PureScript.Names.Qualified
                            (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.TypeName)) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Language.PureScript.Names.Qualified ww3 ww4 ->
                 Language.PureScript.Names.$w$cshowsPrec4
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.TypeName)
                   (Language.PureScript.Names.$fShowProperName
                      @ 'Language.PureScript.Names.TypeName)
                   ww1
                   ww3
                   ww4 } }) -}
c1c76833a36bd9cded96556f2870aec5
  $s$fShow[]_$cshow ::
    [Language.PureScript.Names.ProperName
       'Language.PureScript.Names.ConstructorName]
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: [Language.PureScript.Names.ProperName
                            'Language.PureScript.Names.ConstructorName]) ->
                 GHC.Show.showList__
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.ConstructorName)
                   (Language.PureScript.Names.$fShowProperName1
                      @ 'Language.PureScript.Names.ConstructorName)
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
2bb68ec792e177f41acc580b6106f3d6
  $s$fShow[]_$cshowList ::
    [[Language.PureScript.Names.ProperName
        'Language.PureScript.Names.ConstructorName]]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [[Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ConstructorName]])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ [Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.ConstructorName]
                   (Language.PureScript.Names.$fShowProperName_$cshowList
                      @ 'Language.PureScript.Names.ConstructorName)
                   ls
                   s) -}
a316b30c00480eef8f181dcf6aca3d8d
  $sfromList ::
    [(Language.PureScript.Names.ModuleName, a)]
    -> Data.Map.Internal.Map Language.PureScript.Names.ModuleName a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a
                   (ds :: [(Language.PureScript.Names.ModuleName, a)]) ->
                 case ds of wild {
                   []
                   -> Data.Map.Internal.Tip @ Language.PureScript.Names.ModuleName @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case kx
                                  `cast`
                                (Language.PureScript.Names.N:ModuleName[0]) of nt { DEFAULT ->
                           Data.Map.Internal.Bin
                             @ Language.PureScript.Names.ModuleName
                             @ a
                             1#
                             nt `cast` (Sym (Language.PureScript.Names.N:ModuleName[0]))
                             x
                             (Data.Map.Internal.Tip @ Language.PureScript.Names.ModuleName @ a)
                             (Data.Map.Internal.Tip
                                @ Language.PureScript.Names.ModuleName
                                @ a) }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case GHC.Classes.$fOrd[]_$ccompare
                                  @ (Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.Namespace)
                                  (Language.PureScript.Names.$fOrdProperName
                                     @ 'Language.PureScript.Names.Namespace)
                                  kx `cast` (Language.PureScript.Names.N:ModuleName[0])
                                  ky `cast` (Language.PureScript.Names.N:ModuleName[0]) of wild4 {
                             DEFAULT
                             -> case kx
                                       `cast`
                                     (Language.PureScript.Names.N:ModuleName[0]) of nt { DEFAULT ->
                                Language.PureScript.Sugar.Names.Env.$sfromList_$spoly_go14
                                  @ a
                                  ky
                                  ds3
                                  ipv1
                                  (Data.Map.Internal.Bin
                                     @ Language.PureScript.Names.ModuleName
                                     @ a
                                     1#
                                     nt `cast` (Sym (Language.PureScript.Names.N:ModuleName[0]))
                                     x
                                     (Data.Map.Internal.Tip
                                        @ Language.PureScript.Names.ModuleName
                                        @ a)
                                     (Data.Map.Internal.Tip
                                        @ Language.PureScript.Names.ModuleName
                                        @ a)) }
                             GHC.Types.LT
                             -> case kx
                                       `cast`
                                     (Language.PureScript.Names.N:ModuleName[0]) of nt { DEFAULT ->
                                Language.PureScript.Sugar.Names.Env.$sfromList_$s$wpoly_go13
                                  @ a
                                  ky
                                  ds3
                                  ipv1
                                  (Data.Map.Internal.Bin
                                     @ Language.PureScript.Names.ModuleName
                                     @ a
                                     1#
                                     nt `cast` (Sym (Language.PureScript.Names.N:ModuleName[0]))
                                     x
                                     (Data.Map.Internal.Tip
                                        @ Language.PureScript.Names.ModuleName
                                        @ a)
                                     (Data.Map.Internal.Tip
                                        @ Language.PureScript.Names.ModuleName
                                        @ a))
                                  1# } } } } } }) -}
80a5da074b360a755f0496c2eb738b36
  $sfromList1 ::
    [(Language.PureScript.Names.ProperName
        'Language.PureScript.Names.KindName,
      a)]
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.KindName)
         a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a
                   (ds :: [(Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.KindName,
                            a)]) ->
                 case ds of wild {
                   []
                   -> Data.Map.Internal.Tip
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.KindName)
                        @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case kx
                                  `cast`
                                (Language.PureScript.Names.N:ProperName[0]
                                     <'Language.PureScript.Names.KindName>_P) of nt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                           Data.Map.Internal.Bin
                             @ (Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.KindName)
                             @ a
                             1#
                             nt
                               `cast`
                             (Sym (Language.PureScript.Names.N:ProperName[0]
                                       <'Language.PureScript.Names.KindName>_P))
                             x
                             (Data.Map.Internal.Tip
                                @ (Language.PureScript.Names.ProperName
                                     'Language.PureScript.Names.KindName)
                                @ a)
                             (Data.Map.Internal.Tip
                                @ (Language.PureScript.Names.ProperName
                                     'Language.PureScript.Names.KindName)
                                @ a) }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case kx
                                  `cast`
                                (Language.PureScript.Names.N:ProperName[0]
                                     <'Language.PureScript.Names.KindName>_P) of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                           case ky
                                  `cast`
                                (Language.PureScript.Names.N:ProperName[0]
                                     <'Language.PureScript.Names.KindName>_P) of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                           case Data.Text.$w$ccompare ww1 ww2 ww3 ww5 ww6 ww7 of wild4 {
                             DEFAULT
                             -> Language.PureScript.Sugar.Names.Env.$sfromList_$spoly_go1
                                  @ a
                                  ww4
                                    `cast`
                                  (Sym (Language.PureScript.Names.N:ProperName[0]
                                            <'Language.PureScript.Names.KindName>_P))
                                  ds3
                                  ipv1
                                  (Data.Map.Internal.Bin
                                     @ (Language.PureScript.Names.ProperName
                                          'Language.PureScript.Names.KindName)
                                     @ a
                                     1#
                                     ww
                                       `cast`
                                     (Sym (Language.PureScript.Names.N:ProperName[0]
                                               <'Language.PureScript.Names.KindName>_P))
                                     x
                                     (Data.Map.Internal.Tip
                                        @ (Language.PureScript.Names.ProperName
                                             'Language.PureScript.Names.KindName)
                                        @ a)
                                     (Data.Map.Internal.Tip
                                        @ (Language.PureScript.Names.ProperName
                                             'Language.PureScript.Names.KindName)
                                        @ a))
                             GHC.Types.LT
                             -> Language.PureScript.Sugar.Names.Env.$sfromList_$s$wpoly_go1
                                  @ a
                                  ww4
                                    `cast`
                                  (Sym (Language.PureScript.Names.N:ProperName[0]
                                            <'Language.PureScript.Names.KindName>_P))
                                  ds3
                                  ipv1
                                  (Data.Map.Internal.Bin
                                     @ (Language.PureScript.Names.ProperName
                                          'Language.PureScript.Names.KindName)
                                     @ a
                                     1#
                                     ww
                                       `cast`
                                     (Sym (Language.PureScript.Names.N:ProperName[0]
                                               <'Language.PureScript.Names.KindName>_P))
                                     x
                                     (Data.Map.Internal.Tip
                                        @ (Language.PureScript.Names.ProperName
                                             'Language.PureScript.Names.KindName)
                                        @ a)
                                     (Data.Map.Internal.Tip
                                        @ (Language.PureScript.Names.ProperName
                                             'Language.PureScript.Names.KindName)
                                        @ a))
                                  1# } } } } } } }) -}
3e702faa6e38f7eac258c09da3f32eac
  $sfromList2 ::
    [(Language.PureScript.Names.ProperName
        'Language.PureScript.Names.ClassName,
      a)]
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
         a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a
                   (ds :: [(Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ClassName,
                            a)]) ->
                 case ds of wild {
                   []
                   -> Data.Map.Internal.Tip
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ClassName)
                        @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case kx
                                  `cast`
                                (Language.PureScript.Names.N:ProperName[0]
                                     <'Language.PureScript.Names.ClassName>_P) of nt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                           Data.Map.Internal.Bin
                             @ (Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.ClassName)
                             @ a
                             1#
                             nt
                               `cast`
                             (Sym (Language.PureScript.Names.N:ProperName[0]
                                       <'Language.PureScript.Names.ClassName>_P))
                             x
                             (Data.Map.Internal.Tip
                                @ (Language.PureScript.Names.ProperName
                                     'Language.PureScript.Names.ClassName)
                                @ a)
                             (Data.Map.Internal.Tip
                                @ (Language.PureScript.Names.ProperName
                                     'Language.PureScript.Names.ClassName)
                                @ a) }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case kx
                                  `cast`
                                (Language.PureScript.Names.N:ProperName[0]
                                     <'Language.PureScript.Names.ClassName>_P) of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                           case ky
                                  `cast`
                                (Language.PureScript.Names.N:ProperName[0]
                                     <'Language.PureScript.Names.ClassName>_P) of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                           case Data.Text.$w$ccompare ww1 ww2 ww3 ww5 ww6 ww7 of wild4 {
                             DEFAULT
                             -> Language.PureScript.Sugar.Names.Env.$sfromList_$spoly_go2
                                  @ a
                                  ww4
                                    `cast`
                                  (Sym (Language.PureScript.Names.N:ProperName[0]
                                            <'Language.PureScript.Names.ClassName>_P))
                                  ds3
                                  ipv1
                                  (Data.Map.Internal.Bin
                                     @ (Language.PureScript.Names.ProperName
                                          'Language.PureScript.Names.ClassName)
                                     @ a
                                     1#
                                     ww
                                       `cast`
                                     (Sym (Language.PureScript.Names.N:ProperName[0]
                                               <'Language.PureScript.Names.ClassName>_P))
                                     x
                                     (Data.Map.Internal.Tip
                                        @ (Language.PureScript.Names.ProperName
                                             'Language.PureScript.Names.ClassName)
                                        @ a)
                                     (Data.Map.Internal.Tip
                                        @ (Language.PureScript.Names.ProperName
                                             'Language.PureScript.Names.ClassName)
                                        @ a))
                             GHC.Types.LT
                             -> Language.PureScript.Sugar.Names.Env.$sfromList_$s$wpoly_go2
                                  @ a
                                  ww4
                                    `cast`
                                  (Sym (Language.PureScript.Names.N:ProperName[0]
                                            <'Language.PureScript.Names.ClassName>_P))
                                  ds3
                                  ipv1
                                  (Data.Map.Internal.Bin
                                     @ (Language.PureScript.Names.ProperName
                                          'Language.PureScript.Names.ClassName)
                                     @ a
                                     1#
                                     ww
                                       `cast`
                                     (Sym (Language.PureScript.Names.N:ProperName[0]
                                               <'Language.PureScript.Names.ClassName>_P))
                                     x
                                     (Data.Map.Internal.Tip
                                        @ (Language.PureScript.Names.ProperName
                                             'Language.PureScript.Names.ClassName)
                                        @ a)
                                     (Data.Map.Internal.Tip
                                        @ (Language.PureScript.Names.ProperName
                                             'Language.PureScript.Names.ClassName)
                                        @ a))
                                  1# } } } } } } }) -}
b180706b0ae1f2fb74ebf128d85f4cb1
  $sfromList3 ::
    [(Language.PureScript.Names.ProperName
        'Language.PureScript.Names.TypeName,
      a)]
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName)
         a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a
                   (ds :: [(Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.TypeName,
                            a)]) ->
                 case ds of wild {
                   []
                   -> Data.Map.Internal.Tip
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.TypeName)
                        @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case kx
                                  `cast`
                                (Language.PureScript.Names.N:ProperName[0]
                                     <'Language.PureScript.Names.TypeName>_P) of nt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                           Data.Map.Internal.Bin
                             @ (Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.TypeName)
                             @ a
                             1#
                             nt
                               `cast`
                             (Sym (Language.PureScript.Names.N:ProperName[0]
                                       <'Language.PureScript.Names.TypeName>_P))
                             x
                             (Data.Map.Internal.Tip
                                @ (Language.PureScript.Names.ProperName
                                     'Language.PureScript.Names.TypeName)
                                @ a)
                             (Data.Map.Internal.Tip
                                @ (Language.PureScript.Names.ProperName
                                     'Language.PureScript.Names.TypeName)
                                @ a) }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case kx
                                  `cast`
                                (Language.PureScript.Names.N:ProperName[0]
                                     <'Language.PureScript.Names.TypeName>_P) of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                           case ky
                                  `cast`
                                (Language.PureScript.Names.N:ProperName[0]
                                     <'Language.PureScript.Names.TypeName>_P) of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                           case Data.Text.$w$ccompare ww1 ww2 ww3 ww5 ww6 ww7 of wild4 {
                             DEFAULT
                             -> Language.PureScript.Sugar.Names.Env.$sfromList_$spoly_go3
                                  @ a
                                  ww4
                                    `cast`
                                  (Sym (Language.PureScript.Names.N:ProperName[0]
                                            <'Language.PureScript.Names.TypeName>_P))
                                  ds3
                                  ipv1
                                  (Data.Map.Internal.Bin
                                     @ (Language.PureScript.Names.ProperName
                                          'Language.PureScript.Names.TypeName)
                                     @ a
                                     1#
                                     ww
                                       `cast`
                                     (Sym (Language.PureScript.Names.N:ProperName[0]
                                               <'Language.PureScript.Names.TypeName>_P))
                                     x
                                     (Data.Map.Internal.Tip
                                        @ (Language.PureScript.Names.ProperName
                                             'Language.PureScript.Names.TypeName)
                                        @ a)
                                     (Data.Map.Internal.Tip
                                        @ (Language.PureScript.Names.ProperName
                                             'Language.PureScript.Names.TypeName)
                                        @ a))
                             GHC.Types.LT
                             -> Language.PureScript.Sugar.Names.Env.$sfromList_$s$wpoly_go3
                                  @ a
                                  ww4
                                    `cast`
                                  (Sym (Language.PureScript.Names.N:ProperName[0]
                                            <'Language.PureScript.Names.TypeName>_P))
                                  ds3
                                  ipv1
                                  (Data.Map.Internal.Bin
                                     @ (Language.PureScript.Names.ProperName
                                          'Language.PureScript.Names.TypeName)
                                     @ a
                                     1#
                                     ww
                                       `cast`
                                     (Sym (Language.PureScript.Names.N:ProperName[0]
                                               <'Language.PureScript.Names.TypeName>_P))
                                     x
                                     (Data.Map.Internal.Tip
                                        @ (Language.PureScript.Names.ProperName
                                             'Language.PureScript.Names.TypeName)
                                        @ a)
                                     (Data.Map.Internal.Tip
                                        @ (Language.PureScript.Names.ProperName
                                             'Language.PureScript.Names.TypeName)
                                        @ a))
                                  1# } } } } } } }) -}
74823389bf45d07243725314936bed4a
  $sfromList_$s$wpoly_go1 ::
    Language.PureScript.Names.ProperName
      'Language.PureScript.Names.KindName
    -> a
    -> [(Language.PureScript.Names.ProperName
           'Language.PureScript.Names.KindName,
         a)]
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.KindName)
         a
    -> GHC.Prim.Int#
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.KindName)
         a
  {- Arity: 5, Strictness: <S,1*U(U,U,U)><L,U><S,1*U><S,1*U><L,U> -}
6ce8f999ecf00e1910b36e5fc7f1e04e
  $sfromList_$s$wpoly_go13 ::
    Language.PureScript.Names.ModuleName
    -> a
    -> [(Language.PureScript.Names.ModuleName, a)]
    -> Data.Map.Internal.Map Language.PureScript.Names.ModuleName a
    -> GHC.Prim.Int#
    -> Data.Map.Internal.Map Language.PureScript.Names.ModuleName a
  {- Arity: 5, Strictness: <S,U><L,U><S,1*U><S,1*U><L,U> -}
82445bda93449b92a4108ec1a0b4b437
  $sfromList_$s$wpoly_go2 ::
    Language.PureScript.Names.ProperName
      'Language.PureScript.Names.ClassName
    -> a
    -> [(Language.PureScript.Names.ProperName
           'Language.PureScript.Names.ClassName,
         a)]
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
         a
    -> GHC.Prim.Int#
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
         a
  {- Arity: 5, Strictness: <S,1*U(U,U,U)><L,U><S,1*U><S,1*U><L,U> -}
1f1000d69c3d1812a73753434e44cedc
  $sfromList_$s$wpoly_go3 ::
    Language.PureScript.Names.ProperName
      'Language.PureScript.Names.TypeName
    -> a
    -> [(Language.PureScript.Names.ProperName
           'Language.PureScript.Names.TypeName,
         a)]
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName)
         a
    -> GHC.Prim.Int#
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName)
         a
  {- Arity: 5, Strictness: <S,1*U(U,U,U)><L,U><S,1*U><S,1*U><L,U> -}
a5be2ee9666108a255ba4057f8402910
  $sfromList_$spoly_go1 ::
    Language.PureScript.Names.ProperName
      'Language.PureScript.Names.KindName
    -> a
    -> [(Language.PureScript.Names.ProperName
           'Language.PureScript.Names.KindName,
         a)]
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.KindName)
         a
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.KindName)
         a
  {- Arity: 4, Strictness: <S(SSS),1*U(U,U,U)><L,U><S,1*U><S,1*U> -}
2e36067d6d99b8b27f241ccf847fc856
  $sfromList_$spoly_go14 ::
    Language.PureScript.Names.ModuleName
    -> a
    -> [(Language.PureScript.Names.ModuleName, a)]
    -> Data.Map.Internal.Map Language.PureScript.Names.ModuleName a
    -> Data.Map.Internal.Map Language.PureScript.Names.ModuleName a
  {- Arity: 4, Strictness: <S,U><L,U><S,1*U><S,1*U> -}
13688ee915a7e36d2b4b361ce0893e56
  $sfromList_$spoly_go2 ::
    Language.PureScript.Names.ProperName
      'Language.PureScript.Names.ClassName
    -> a
    -> [(Language.PureScript.Names.ProperName
           'Language.PureScript.Names.ClassName,
         a)]
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
         a
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
         a
  {- Arity: 4, Strictness: <S(SSS),1*U(U,U,U)><L,U><S,1*U><S,1*U> -}
d5d844128133435076a0da6f6746512d
  $sfromList_$spoly_go3 ::
    Language.PureScript.Names.ProperName
      'Language.PureScript.Names.TypeName
    -> a
    -> [(Language.PureScript.Names.ProperName
           'Language.PureScript.Names.TypeName,
         a)]
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName)
         a
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName)
         a
  {- Arity: 4, Strictness: <S(SSS),1*U(U,U,U)><L,U><S,1*U><S,1*U> -}
d4422e6b2e83704162660aedca63c933
  $sinsertWithKey_$s$w$sgo13 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ConstructorName)
      GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.ByteArray#
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ConstructorName)
         GHC.Types.Int
  {- Arity: 5, Strictness: <S,1*U><L,U(U)><L,U><L,U><L,U> -}
c0708d960b6c295ddc2ebad47a7f6d6a
  $sinsert_$sgo13 ::
    Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ModuleName
    -> a1
    -> Data.Map.Internal.Map Language.PureScript.Names.ModuleName a1
    -> Data.Map.Internal.Map Language.PureScript.Names.ModuleName a1
  {- Arity: 4, Strictness: <L,U><S,1*U><L,U><S,1*U> -}
3133c466233276ce514ceccdb3b69788
  $slookup1 ::
    Language.PureScript.Names.ModuleName
    -> Data.Map.Internal.Map Language.PureScript.Names.ModuleName a
    -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
f98f0c70c24daba8df73b24a46b122a4
  $tc'Exports :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3198238452043333906##
                   10189837429159371382##
                   Language.PureScript.Sugar.Names.Env.$trModule
                   Language.PureScript.Sugar.Names.Env.$tc'Exports2
                   0#
                   Language.PureScript.Sugar.Names.Env.$tc'Exports1) -}
465f24bfa743771c3c7cf382e51ecf72
  $tc'Exports1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
21e07d1ff97b04a6034788a95ecc030c
  $tc'Exports2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Sugar.Names.Env.$tc'Exports3) -}
46b7cc9562b9a8999f4cef60ee7df7d7
  $tc'Exports3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Exports"#) -}
985a5fbc3e26e20808b68a6bf848aff1
  $tc'FromExplicit :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2595706745045821429##
                   10915624456713402621##
                   Language.PureScript.Sugar.Names.Env.$trModule
                   Language.PureScript.Sugar.Names.Env.$tc'FromExplicit2
                   0#
                   Language.PureScript.Sugar.Names.Env.$tc'FromExplicit1) -}
ac057444ae256ec4c8c94f09b79c1c89
  $tc'FromExplicit1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
696a591c7fc0ed5e579a6a37911071e4
  $tc'FromExplicit2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Sugar.Names.Env.$tc'FromExplicit3) -}
43da53a1803719f307fed3811a3a492b
  $tc'FromExplicit3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'FromExplicit"#) -}
bab841b66cb1a15048fa97db3b4dfa58
  $tc'FromImplicit :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13136707474053863635##
                   12552749523112207429##
                   Language.PureScript.Sugar.Names.Env.$trModule
                   Language.PureScript.Sugar.Names.Env.$tc'FromImplicit1
                   0#
                   Language.PureScript.Sugar.Names.Env.$tc'FromExplicit1) -}
7c6d3ebc58489f89a8a78707237ccb51
  $tc'FromImplicit1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Sugar.Names.Env.$tc'FromImplicit2) -}
3cfa58a8e03db03bcada9a56b98a1fd2
  $tc'FromImplicit2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'FromImplicit"#) -}
335fc0e4a8bcef5bcc3377049cd31b0c
  $tc'ImportRecord :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   250748780669123175##
                   5555697684080962040##
                   Language.PureScript.Sugar.Names.Env.$trModule
                   Language.PureScript.Sugar.Names.Env.$tc'ImportRecord2
                   1#
                   Language.PureScript.Sugar.Names.Env.$tc'ImportRecord1) -}
188d5c429c693f7b4f5ce4a111abb135
  $tc'ImportRecord1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
8ee980138f7344a1649e41fe3b38da9d
  $tc'ImportRecord2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Sugar.Names.Env.$tc'ImportRecord3) -}
e20a7dc1d418097ad91af8bff44bf697
  $tc'ImportRecord3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ImportRecord"#) -}
adc9bd7b6a448c4b8c956d4433b30e4e
  $tc'Imports :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1741984591414054887##
                   16443882281151278154##
                   Language.PureScript.Sugar.Names.Env.$trModule
                   Language.PureScript.Sugar.Names.Env.$tc'Imports2
                   0#
                   Language.PureScript.Sugar.Names.Env.$tc'Imports1) -}
1a4626f2140d6e6c320a0e2683772b1c
  $tc'Imports1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
2e2d400ef449913019348b50cf61f209
  $tc'Imports2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Sugar.Names.Env.$tc'Imports3) -}
873dbe199a0c25b8824da09bfb1fbb31
  $tc'Imports3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Imports"#) -}
db8c3d2f23d46c69aedf678a478764c9
  $tc'Internal :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   101046455970836404##
                   10837060143863978666##
                   Language.PureScript.Sugar.Names.Env.$trModule
                   Language.PureScript.Sugar.Names.Env.$tc'Internal2
                   0#
                   Language.PureScript.Sugar.Names.Env.$tc'Internal1) -}
9720c93099680d3f74d84d78c4f0bd2b
  $tc'Internal1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
972b4cd7487ceea939783323ecf5c0f8
  $tc'Internal2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Sugar.Names.Env.$tc'Internal3) -}
8563268eab5eee2a589a277dd8da3a97
  $tc'Internal3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Internal"#) -}
a1b34d08ca0ae4fa83e39d68a2eae561
  $tc'Local :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9063723507048261561##
                   12516885715451776750##
                   Language.PureScript.Sugar.Names.Env.$trModule
                   Language.PureScript.Sugar.Names.Env.$tc'Local1
                   0#
                   Language.PureScript.Sugar.Names.Env.$tc'FromExplicit1) -}
f4ab617004bdfc8b9d456dc44379ef2b
  $tc'Local1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Sugar.Names.Env.$tc'Local2) -}
a1d84a81ccba2a2711b5a631dca7abf2
  $tc'Local2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Local"#) -}
78131bc3fad28fb431759d277168d741
  $tc'Prim :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12686188531406347184##
                   541161544055391061##
                   Language.PureScript.Sugar.Names.Env.$trModule
                   Language.PureScript.Sugar.Names.Env.$tc'Prim1
                   0#
                   Language.PureScript.Sugar.Names.Env.$tc'FromExplicit1) -}
abdf4cd68628c4e036132c5bf2af2215
  $tc'Prim1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Sugar.Names.Env.$tc'Prim2) -}
0d264bc238d59107d5ce1c96e90176da
  $tc'Prim2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Prim"#) -}
a99c1f7d8d14fece2304f6741a445d21
  $tc'ReExport :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16553326389367423573##
                   15602208191860766184##
                   Language.PureScript.Sugar.Names.Env.$trModule
                   Language.PureScript.Sugar.Names.Env.$tc'ReExport1
                   0#
                   Language.PureScript.Sugar.Names.Env.$tc'Internal1) -}
206ba6c47369a435fafcb51701659079
  $tc'ReExport1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Sugar.Names.Env.$tc'ReExport2) -}
c0dd37da7dde829bcc72c201042b45c2
  $tc'ReExport2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ReExport"#) -}
1536afe15d7621bedbd71a5a7863fa66
  $tcExportMode :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14446077389617087520##
                   18053792466765526488##
                   Language.PureScript.Sugar.Names.Env.$trModule
                   Language.PureScript.Sugar.Names.Env.$tcExportMode1
                   0#
                   GHC.Types.krep$*) -}
3bbb01c6b33c7aaad28519d147c0afba
  $tcExportMode1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Sugar.Names.Env.$tcExportMode2) -}
36118031a7775e538c7f3229c20ad6a2
  $tcExportMode2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ExportMode"#) -}
6179529962052f46671c1381172d5a5e
  $tcExports :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4632349840190018812##
                   10667377001623345494##
                   Language.PureScript.Sugar.Names.Env.$trModule
                   Language.PureScript.Sugar.Names.Env.$tcExports1
                   0#
                   GHC.Types.krep$*) -}
4eb93a52f785529db00d41c13d9c0653
  $tcExports1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Sugar.Names.Env.$tcExports2) -}
f9bc6d80e66fd2ca052d67ddb28a6617
  $tcExports2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Exports"#) -}
61a2d2cd75164c6358bab89f7e048123
  $tcImportProvenance :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   875691882875866875##
                   10156753643947418869##
                   Language.PureScript.Sugar.Names.Env.$trModule
                   Language.PureScript.Sugar.Names.Env.$tcImportProvenance1
                   0#
                   GHC.Types.krep$*) -}
2cb3aeee267fb699c02a786294f6c332
  $tcImportProvenance1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Sugar.Names.Env.$tcImportProvenance2) -}
cb0078c878ab14015d3f5ba6c39f8f31
  $tcImportProvenance2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ImportProvenance"#) -}
39d1706cf637abf1d61b41bae6e1552e
  $tcImportRecord :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12868381289260027494##
                   17282298077716841314##
                   Language.PureScript.Sugar.Names.Env.$trModule
                   Language.PureScript.Sugar.Names.Env.$tcImportRecord1
                   0#
                   GHC.Types.krep$*Arr*) -}
881cf9593337a333f7bef943e1fa2963
  $tcImportRecord1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Sugar.Names.Env.$tcImportRecord2) -}
2f550177900eee744a44566add128be1
  $tcImportRecord2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ImportRecord"#) -}
c90d2a2449af65d2c9ecd5f329b431ed
  $tcImports :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14793437691446130778##
                   3532059977354858582##
                   Language.PureScript.Sugar.Names.Env.$trModule
                   Language.PureScript.Sugar.Names.Env.$tcImports1
                   0#
                   GHC.Types.krep$*) -}
6d43ef2c40e58aa9f35045a065b8747e
  $tcImports1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Sugar.Names.Env.$tcImports2) -}
9ed8e6d3bc29c697ac80dcffddb99ef3
  $tcImports2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Imports"#) -}
275ed780d8bf224815f6ca91f0e5acc7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Language.PureScript.Sugar.Names.Env.$trModule3
                   Language.PureScript.Sugar.Names.Env.$trModule1) -}
d9435aa6b467d454e0089d5649c929c3
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Sugar.Names.Env.$trModule2) -}
d5ad6a17dc40dcb3171b8c2b7ad157f6
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Language.PureScript.Sugar.Names.Env"#) -}
9ce1b51aafcaf0fdffe9bce62db0f51d
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Sugar.Names.Env.$trModule4) -}
40493688eaac623167994b1dbff5903a
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("purescript-0.12.1-Hd7ka7pmldWKPBJH6hcve7"#) -}
332662778e0a4a7b469468a9f3d615aa
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName)
         ([Language.PureScript.Names.ProperName
             'Language.PureScript.Names.ConstructorName],
          Language.PureScript.Names.ModuleName)
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.TypeOpName)
         Language.PureScript.Names.ModuleName
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
         Language.PureScript.Names.ModuleName
    -> Data.Map.Internal.Map
         Language.PureScript.Names.Ident
         Language.PureScript.Names.ModuleName
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.ValueOpName)
         Language.PureScript.Names.ModuleName
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.KindName)
         Language.PureScript.Names.ModuleName
    -> GHC.Show.ShowS
  {- Arity: 7,
     Strictness: <S,U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U>,
     Inline: [0] -}
b5a892de418489c767f720864d2c6782
  $w$cshowsPrec1 ::
    Language.PureScript.Sugar.Names.Env.ImportProvenance
    -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: Language.PureScript.Sugar.Names.Env.ImportProvenance)
                   (w1 :: GHC.Base.String) ->
                 case w of wild {
                   Language.PureScript.Sugar.Names.Env.FromImplicit
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.Sugar.Names.Env.$fShowImportProvenance7
                        w1
                   Language.PureScript.Sugar.Names.Env.FromExplicit
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.Sugar.Names.Env.$fShowImportProvenance5
                        w1
                   Language.PureScript.Sugar.Names.Env.Local
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.Sugar.Names.Env.$fShowImportProvenance3
                        w1
                   Language.PureScript.Sugar.Names.Env.Prim
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.Sugar.Names.Env.$fShowImportProvenance1
                        w1 }) -}
ff79b741737c4c4c283011a90c4152f6
  $w$cshowsPrec2 ::
    GHC.Show.Show a =>
    GHC.Prim.Int#
    -> Language.PureScript.Names.Qualified a
    -> Language.PureScript.Names.ModuleName
    -> Language.PureScript.AST.SourcePos.SourceSpan
    -> Language.PureScript.Sugar.Names.Env.ImportProvenance
    -> GHC.Show.ShowS
  {- Arity: 6,
     Strictness: <L,1*U(1*C1(C1(C(U))),A,A)><S,U><L,1*U(1*U,U)><L,U><L,U(U,U(U(U),U(U)),U(U(U),U(U)))><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Show.Show a)
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: Language.PureScript.Names.Qualified a)
                   (ww2 :: Language.PureScript.Names.ModuleName)
                   (ww3 :: Language.PureScript.AST.SourcePos.SourceSpan)
                   (ww4 :: Language.PureScript.Sugar.Names.Env.ImportProvenance) ->
                 let {
                   f1 :: GHC.Base.String -> GHC.Base.String
                   = case ww1 of ww5 { Language.PureScript.Names.Qualified ww6 ww7 ->
                     Language.PureScript.Names.$w$cshowsPrec4 @ a w 0# ww6 ww7 }
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.CString.unpackAppendCString#
                       Language.PureScript.Sugar.Names.Env.$fShowImportRecord6
                       (GHC.CString.unpackAppendCString#
                          Language.PureScript.Sugar.Names.Env.$fShowImportRecord5
                          (f1
                             (GHC.Base.++
                                @ GHC.Types.Char
                                GHC.Show.showCommaSpace1
                                (GHC.CString.unpackAppendCString#
                                   Language.PureScript.Sugar.Names.Env.$fShowImportRecord4
                                   (Language.PureScript.Names.$w$cshowsPrec
                                      0#
                                      ww2
                                      (GHC.Base.++
                                         @ GHC.Types.Char
                                         GHC.Show.showCommaSpace1
                                         (GHC.CString.unpackAppendCString#
                                            Language.PureScript.Sugar.Names.Env.$fShowImportRecord3
                                            (case ww3 of ww5 { Language.PureScript.AST.SourcePos.SourceSpan ww6 ww7 ww8 ->
                                             Language.PureScript.AST.SourcePos.$w$cshowsPrec1
                                               0#
                                               ww6
                                               ww7
                                               ww8
                                               (GHC.Base.++
                                                  @ GHC.Types.Char
                                                  GHC.Show.showCommaSpace1
                                                  (GHC.CString.unpackAppendCString#
                                                     Language.PureScript.Sugar.Names.Env.$fShowImportRecord2
                                                     (Language.PureScript.Sugar.Names.Env.$w$cshowsPrec1
                                                        ww4
                                                        (GHC.CString.unpackAppendCString#
                                                           Language.PureScript.Sugar.Names.Env.$fShowImportRecord1
                                                           x)))) }))))))))
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT -> p
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x)) }) -}
95af4acb5cc7c9a49ab2288f9ef32707
  $w$cshowsPrec3 ::
    GHC.Prim.Int#
    -> Language.PureScript.Sugar.Names.Env.ImportMap
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName)
    -> Language.PureScript.Sugar.Names.Env.ImportMap
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.TypeOpName)
    -> Language.PureScript.Sugar.Names.Env.ImportMap
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ConstructorName)
    -> Language.PureScript.Sugar.Names.Env.ImportMap
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
    -> Language.PureScript.Sugar.Names.Env.ImportMap
         Language.PureScript.Names.Ident
    -> Language.PureScript.Sugar.Names.Env.ImportMap
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.ValueOpName)
    -> Data.Set.Internal.Set Language.PureScript.Names.ModuleName
    -> Data.Set.Internal.Set Language.PureScript.Names.ModuleName
    -> Language.PureScript.Sugar.Names.Env.ImportMap
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.KindName)
    -> GHC.Show.ShowS
  {- Arity: 10,
     Strictness: <S,U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U>,
     Inline: [0] -}
4db9d35436fe744ad270165febe561d1
  $w$s$cshowsPrec ::
    GHC.Prim.Int#
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName)
    -> Language.PureScript.Names.ModuleName
    -> Language.PureScript.AST.SourcePos.SourceSpan
    -> Language.PureScript.Sugar.Names.Env.ImportProvenance
    -> GHC.Show.ShowS
  {- Arity: 5,
     Strictness: <S,U><L,1*U(1*U,U)><L,U><L,U(U,U(U(U),U(U)),U(U(U),U(U)))><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.TypeName))
                   (ww2 :: Language.PureScript.Names.ModuleName)
                   (ww3 :: Language.PureScript.AST.SourcePos.SourceSpan)
                   (ww4 :: Language.PureScript.Sugar.Names.Env.ImportProvenance) ->
                 let {
                   f1 :: GHC.Base.String -> GHC.Base.String
                   = case ww1 of ww5 { Language.PureScript.Names.Qualified ww6 ww7 ->
                     Language.PureScript.Names.$w$cshowsPrec4
                       @ (Language.PureScript.Names.ProperName
                            'Language.PureScript.Names.TypeName)
                       (Language.PureScript.Names.$fShowProperName
                          @ 'Language.PureScript.Names.TypeName)
                       0#
                       ww6
                       ww7 }
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.CString.unpackAppendCString#
                       Language.PureScript.Sugar.Names.Env.$fShowImportRecord6
                       (GHC.CString.unpackAppendCString#
                          Language.PureScript.Sugar.Names.Env.$fShowImportRecord5
                          (f1
                             (GHC.Base.++
                                @ GHC.Types.Char
                                GHC.Show.showCommaSpace1
                                (GHC.CString.unpackAppendCString#
                                   Language.PureScript.Sugar.Names.Env.$fShowImportRecord4
                                   (Language.PureScript.Names.$w$cshowsPrec
                                      0#
                                      ww2
                                      (GHC.Base.++
                                         @ GHC.Types.Char
                                         GHC.Show.showCommaSpace1
                                         (GHC.CString.unpackAppendCString#
                                            Language.PureScript.Sugar.Names.Env.$fShowImportRecord3
                                            (case ww3 of ww5 { Language.PureScript.AST.SourcePos.SourceSpan ww6 ww7 ww8 ->
                                             Language.PureScript.AST.SourcePos.$w$cshowsPrec1
                                               0#
                                               ww6
                                               ww7
                                               ww8
                                               (GHC.Base.++
                                                  @ GHC.Types.Char
                                                  GHC.Show.showCommaSpace1
                                                  (GHC.CString.unpackAppendCString#
                                                     Language.PureScript.Sugar.Names.Env.$fShowImportRecord2
                                                     (Language.PureScript.Sugar.Names.Env.$w$cshowsPrec1
                                                        ww4
                                                        (GHC.CString.unpackAppendCString#
                                                           Language.PureScript.Sugar.Names.Env.$fShowImportRecord1
                                                           x)))) }))))))))
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT -> p
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x)) }) -}
a07121f580b8103a64c658670893a436
  $w$s$cshowsPrec1 ::
    GHC.Prim.Int#
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.TypeOpName)
    -> Language.PureScript.Names.ModuleName
    -> Language.PureScript.AST.SourcePos.SourceSpan
    -> Language.PureScript.Sugar.Names.Env.ImportProvenance
    -> GHC.Show.ShowS
  {- Arity: 5,
     Strictness: <S,U><L,1*U(1*U,U)><L,U><L,U(U,U(U(U),U(U)),U(U(U),U(U)))><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.OpName
                                'Language.PureScript.Names.TypeOpName))
                   (ww2 :: Language.PureScript.Names.ModuleName)
                   (ww3 :: Language.PureScript.AST.SourcePos.SourceSpan)
                   (ww4 :: Language.PureScript.Sugar.Names.Env.ImportProvenance) ->
                 let {
                   f1 :: GHC.Base.String -> GHC.Base.String
                   = case ww1 of ww5 { Language.PureScript.Names.Qualified ww6 ww7 ->
                     Language.PureScript.Names.$w$cshowsPrec4
                       @ (Language.PureScript.Names.OpName
                            'Language.PureScript.Names.TypeOpName)
                       (Language.PureScript.Names.$fShowOpName
                          @ 'Language.PureScript.Names.TypeOpName)
                       0#
                       ww6
                       ww7 }
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.CString.unpackAppendCString#
                       Language.PureScript.Sugar.Names.Env.$fShowImportRecord6
                       (GHC.CString.unpackAppendCString#
                          Language.PureScript.Sugar.Names.Env.$fShowImportRecord5
                          (f1
                             (GHC.Base.++
                                @ GHC.Types.Char
                                GHC.Show.showCommaSpace1
                                (GHC.CString.unpackAppendCString#
                                   Language.PureScript.Sugar.Names.Env.$fShowImportRecord4
                                   (Language.PureScript.Names.$w$cshowsPrec
                                      0#
                                      ww2
                                      (GHC.Base.++
                                         @ GHC.Types.Char
                                         GHC.Show.showCommaSpace1
                                         (GHC.CString.unpackAppendCString#
                                            Language.PureScript.Sugar.Names.Env.$fShowImportRecord3
                                            (case ww3 of ww5 { Language.PureScript.AST.SourcePos.SourceSpan ww6 ww7 ww8 ->
                                             Language.PureScript.AST.SourcePos.$w$cshowsPrec1
                                               0#
                                               ww6
                                               ww7
                                               ww8
                                               (GHC.Base.++
                                                  @ GHC.Types.Char
                                                  GHC.Show.showCommaSpace1
                                                  (GHC.CString.unpackAppendCString#
                                                     Language.PureScript.Sugar.Names.Env.$fShowImportRecord2
                                                     (Language.PureScript.Sugar.Names.Env.$w$cshowsPrec1
                                                        ww4
                                                        (GHC.CString.unpackAppendCString#
                                                           Language.PureScript.Sugar.Names.Env.$fShowImportRecord1
                                                           x)))) }))))))))
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT -> p
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x)) }) -}
9e3f415e1ce25bcc02699d58510b7dfc
  $w$s$cshowsPrec2 ::
    GHC.Prim.Int#
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ConstructorName)
    -> Language.PureScript.Names.ModuleName
    -> Language.PureScript.AST.SourcePos.SourceSpan
    -> Language.PureScript.Sugar.Names.Env.ImportProvenance
    -> GHC.Show.ShowS
  {- Arity: 5,
     Strictness: <S,U><L,1*U(1*U,U)><L,U><L,U(U,U(U(U),U(U)),U(U(U),U(U)))><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ConstructorName))
                   (ww2 :: Language.PureScript.Names.ModuleName)
                   (ww3 :: Language.PureScript.AST.SourcePos.SourceSpan)
                   (ww4 :: Language.PureScript.Sugar.Names.Env.ImportProvenance) ->
                 let {
                   f1 :: GHC.Base.String -> GHC.Base.String
                   = case ww1 of ww5 { Language.PureScript.Names.Qualified ww6 ww7 ->
                     Language.PureScript.Names.$w$cshowsPrec4
                       @ (Language.PureScript.Names.ProperName
                            'Language.PureScript.Names.ConstructorName)
                       (Language.PureScript.Names.$fShowProperName
                          @ 'Language.PureScript.Names.ConstructorName)
                       0#
                       ww6
                       ww7 }
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.CString.unpackAppendCString#
                       Language.PureScript.Sugar.Names.Env.$fShowImportRecord6
                       (GHC.CString.unpackAppendCString#
                          Language.PureScript.Sugar.Names.Env.$fShowImportRecord5
                          (f1
                             (GHC.Base.++
                                @ GHC.Types.Char
                                GHC.Show.showCommaSpace1
                                (GHC.CString.unpackAppendCString#
                                   Language.PureScript.Sugar.Names.Env.$fShowImportRecord4
                                   (Language.PureScript.Names.$w$cshowsPrec
                                      0#
                                      ww2
                                      (GHC.Base.++
                                         @ GHC.Types.Char
                                         GHC.Show.showCommaSpace1
                                         (GHC.CString.unpackAppendCString#
                                            Language.PureScript.Sugar.Names.Env.$fShowImportRecord3
                                            (case ww3 of ww5 { Language.PureScript.AST.SourcePos.SourceSpan ww6 ww7 ww8 ->
                                             Language.PureScript.AST.SourcePos.$w$cshowsPrec1
                                               0#
                                               ww6
                                               ww7
                                               ww8
                                               (GHC.Base.++
                                                  @ GHC.Types.Char
                                                  GHC.Show.showCommaSpace1
                                                  (GHC.CString.unpackAppendCString#
                                                     Language.PureScript.Sugar.Names.Env.$fShowImportRecord2
                                                     (Language.PureScript.Sugar.Names.Env.$w$cshowsPrec1
                                                        ww4
                                                        (GHC.CString.unpackAppendCString#
                                                           Language.PureScript.Sugar.Names.Env.$fShowImportRecord1
                                                           x)))) }))))))))
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT -> p
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x)) }) -}
e4d4b3f98a6eaaa7745eeaa2a5681459
  $w$s$cshowsPrec3 ::
    GHC.Prim.Int#
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
    -> Language.PureScript.Names.ModuleName
    -> Language.PureScript.AST.SourcePos.SourceSpan
    -> Language.PureScript.Sugar.Names.Env.ImportProvenance
    -> GHC.Show.ShowS
  {- Arity: 5,
     Strictness: <S,U><L,1*U(1*U,U)><L,U><L,U(U,U(U(U),U(U)),U(U(U),U(U)))><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ClassName))
                   (ww2 :: Language.PureScript.Names.ModuleName)
                   (ww3 :: Language.PureScript.AST.SourcePos.SourceSpan)
                   (ww4 :: Language.PureScript.Sugar.Names.Env.ImportProvenance) ->
                 let {
                   f1 :: GHC.Base.String -> GHC.Base.String
                   = case ww1 of ww5 { Language.PureScript.Names.Qualified ww6 ww7 ->
                     Language.PureScript.Names.$w$cshowsPrec4
                       @ (Language.PureScript.Names.ProperName
                            'Language.PureScript.Names.ClassName)
                       (Language.PureScript.Names.$fShowProperName
                          @ 'Language.PureScript.Names.ClassName)
                       0#
                       ww6
                       ww7 }
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.CString.unpackAppendCString#
                       Language.PureScript.Sugar.Names.Env.$fShowImportRecord6
                       (GHC.CString.unpackAppendCString#
                          Language.PureScript.Sugar.Names.Env.$fShowImportRecord5
                          (f1
                             (GHC.Base.++
                                @ GHC.Types.Char
                                GHC.Show.showCommaSpace1
                                (GHC.CString.unpackAppendCString#
                                   Language.PureScript.Sugar.Names.Env.$fShowImportRecord4
                                   (Language.PureScript.Names.$w$cshowsPrec
                                      0#
                                      ww2
                                      (GHC.Base.++
                                         @ GHC.Types.Char
                                         GHC.Show.showCommaSpace1
                                         (GHC.CString.unpackAppendCString#
                                            Language.PureScript.Sugar.Names.Env.$fShowImportRecord3
                                            (case ww3 of ww5 { Language.PureScript.AST.SourcePos.SourceSpan ww6 ww7 ww8 ->
                                             Language.PureScript.AST.SourcePos.$w$cshowsPrec1
                                               0#
                                               ww6
                                               ww7
                                               ww8
                                               (GHC.Base.++
                                                  @ GHC.Types.Char
                                                  GHC.Show.showCommaSpace1
                                                  (GHC.CString.unpackAppendCString#
                                                     Language.PureScript.Sugar.Names.Env.$fShowImportRecord2
                                                     (Language.PureScript.Sugar.Names.Env.$w$cshowsPrec1
                                                        ww4
                                                        (GHC.CString.unpackAppendCString#
                                                           Language.PureScript.Sugar.Names.Env.$fShowImportRecord1
                                                           x)))) }))))))))
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT -> p
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x)) }) -}
31044486bd2a80336f15fb23b02652bb
  $w$s$cshowsPrec4 ::
    GHC.Prim.Int#
    -> Language.PureScript.Names.Qualified
         Language.PureScript.Names.Ident
    -> Language.PureScript.Names.ModuleName
    -> Language.PureScript.AST.SourcePos.SourceSpan
    -> Language.PureScript.Sugar.Names.Env.ImportProvenance
    -> GHC.Show.ShowS
  {- Arity: 5,
     Strictness: <S,U><L,1*U(1*U,U)><L,U><L,U(U,U(U(U),U(U)),U(U(U),U(U)))><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Language.PureScript.Names.Qualified
                             Language.PureScript.Names.Ident)
                   (ww2 :: Language.PureScript.Names.ModuleName)
                   (ww3 :: Language.PureScript.AST.SourcePos.SourceSpan)
                   (ww4 :: Language.PureScript.Sugar.Names.Env.ImportProvenance) ->
                 let {
                   f1 :: GHC.Base.String -> GHC.Base.String
                   = case ww1 of ww5 { Language.PureScript.Names.Qualified ww6 ww7 ->
                     Language.PureScript.Names.$w$cshowsPrec4
                       @ Language.PureScript.Names.Ident
                       Language.PureScript.Names.$fShowIdent
                       0#
                       ww6
                       ww7 }
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.CString.unpackAppendCString#
                       Language.PureScript.Sugar.Names.Env.$fShowImportRecord6
                       (GHC.CString.unpackAppendCString#
                          Language.PureScript.Sugar.Names.Env.$fShowImportRecord5
                          (f1
                             (GHC.Base.++
                                @ GHC.Types.Char
                                GHC.Show.showCommaSpace1
                                (GHC.CString.unpackAppendCString#
                                   Language.PureScript.Sugar.Names.Env.$fShowImportRecord4
                                   (Language.PureScript.Names.$w$cshowsPrec
                                      0#
                                      ww2
                                      (GHC.Base.++
                                         @ GHC.Types.Char
                                         GHC.Show.showCommaSpace1
                                         (GHC.CString.unpackAppendCString#
                                            Language.PureScript.Sugar.Names.Env.$fShowImportRecord3
                                            (case ww3 of ww5 { Language.PureScript.AST.SourcePos.SourceSpan ww6 ww7 ww8 ->
                                             Language.PureScript.AST.SourcePos.$w$cshowsPrec1
                                               0#
                                               ww6
                                               ww7
                                               ww8
                                               (GHC.Base.++
                                                  @ GHC.Types.Char
                                                  GHC.Show.showCommaSpace1
                                                  (GHC.CString.unpackAppendCString#
                                                     Language.PureScript.Sugar.Names.Env.$fShowImportRecord2
                                                     (Language.PureScript.Sugar.Names.Env.$w$cshowsPrec1
                                                        ww4
                                                        (GHC.CString.unpackAppendCString#
                                                           Language.PureScript.Sugar.Names.Env.$fShowImportRecord1
                                                           x)))) }))))))))
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT -> p
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x)) }) -}
d9f255d47e622943bc7d7b6c823ea7ea
  $w$s$cshowsPrec5 ::
    GHC.Prim.Int#
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.ValueOpName)
    -> Language.PureScript.Names.ModuleName
    -> Language.PureScript.AST.SourcePos.SourceSpan
    -> Language.PureScript.Sugar.Names.Env.ImportProvenance
    -> GHC.Show.ShowS
  {- Arity: 5,
     Strictness: <S,U><L,1*U(1*U,U)><L,U><L,U(U,U(U(U),U(U)),U(U(U),U(U)))><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.OpName
                                'Language.PureScript.Names.ValueOpName))
                   (ww2 :: Language.PureScript.Names.ModuleName)
                   (ww3 :: Language.PureScript.AST.SourcePos.SourceSpan)
                   (ww4 :: Language.PureScript.Sugar.Names.Env.ImportProvenance) ->
                 let {
                   f1 :: GHC.Base.String -> GHC.Base.String
                   = case ww1 of ww5 { Language.PureScript.Names.Qualified ww6 ww7 ->
                     Language.PureScript.Names.$w$cshowsPrec4
                       @ (Language.PureScript.Names.OpName
                            'Language.PureScript.Names.ValueOpName)
                       (Language.PureScript.Names.$fShowOpName
                          @ 'Language.PureScript.Names.ValueOpName)
                       0#
                       ww6
                       ww7 }
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.CString.unpackAppendCString#
                       Language.PureScript.Sugar.Names.Env.$fShowImportRecord6
                       (GHC.CString.unpackAppendCString#
                          Language.PureScript.Sugar.Names.Env.$fShowImportRecord5
                          (f1
                             (GHC.Base.++
                                @ GHC.Types.Char
                                GHC.Show.showCommaSpace1
                                (GHC.CString.unpackAppendCString#
                                   Language.PureScript.Sugar.Names.Env.$fShowImportRecord4
                                   (Language.PureScript.Names.$w$cshowsPrec
                                      0#
                                      ww2
                                      (GHC.Base.++
                                         @ GHC.Types.Char
                                         GHC.Show.showCommaSpace1
                                         (GHC.CString.unpackAppendCString#
                                            Language.PureScript.Sugar.Names.Env.$fShowImportRecord3
                                            (case ww3 of ww5 { Language.PureScript.AST.SourcePos.SourceSpan ww6 ww7 ww8 ->
                                             Language.PureScript.AST.SourcePos.$w$cshowsPrec1
                                               0#
                                               ww6
                                               ww7
                                               ww8
                                               (GHC.Base.++
                                                  @ GHC.Types.Char
                                                  GHC.Show.showCommaSpace1
                                                  (GHC.CString.unpackAppendCString#
                                                     Language.PureScript.Sugar.Names.Env.$fShowImportRecord2
                                                     (Language.PureScript.Sugar.Names.Env.$w$cshowsPrec1
                                                        ww4
                                                        (GHC.CString.unpackAppendCString#
                                                           Language.PureScript.Sugar.Names.Env.$fShowImportRecord1
                                                           x)))) }))))))))
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT -> p
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x)) }) -}
cf6f7ff2430805e962bd5085203a46ee
  $w$s$cshowsPrec6 ::
    GHC.Prim.Int#
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.KindName)
    -> Language.PureScript.Names.ModuleName
    -> Language.PureScript.AST.SourcePos.SourceSpan
    -> Language.PureScript.Sugar.Names.Env.ImportProvenance
    -> GHC.Show.ShowS
  {- Arity: 5,
     Strictness: <S,U><L,1*U(1*U,U)><L,U><L,U(U,U(U(U),U(U)),U(U(U),U(U)))><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.KindName))
                   (ww2 :: Language.PureScript.Names.ModuleName)
                   (ww3 :: Language.PureScript.AST.SourcePos.SourceSpan)
                   (ww4 :: Language.PureScript.Sugar.Names.Env.ImportProvenance) ->
                 let {
                   f1 :: GHC.Base.String -> GHC.Base.String
                   = case ww1 of ww5 { Language.PureScript.Names.Qualified ww6 ww7 ->
                     Language.PureScript.Names.$w$cshowsPrec4
                       @ (Language.PureScript.Names.ProperName
                            'Language.PureScript.Names.KindName)
                       (Language.PureScript.Names.$fShowProperName
                          @ 'Language.PureScript.Names.KindName)
                       0#
                       ww6
                       ww7 }
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.CString.unpackAppendCString#
                       Language.PureScript.Sugar.Names.Env.$fShowImportRecord6
                       (GHC.CString.unpackAppendCString#
                          Language.PureScript.Sugar.Names.Env.$fShowImportRecord5
                          (f1
                             (GHC.Base.++
                                @ GHC.Types.Char
                                GHC.Show.showCommaSpace1
                                (GHC.CString.unpackAppendCString#
                                   Language.PureScript.Sugar.Names.Env.$fShowImportRecord4
                                   (Language.PureScript.Names.$w$cshowsPrec
                                      0#
                                      ww2
                                      (GHC.Base.++
                                         @ GHC.Types.Char
                                         GHC.Show.showCommaSpace1
                                         (GHC.CString.unpackAppendCString#
                                            Language.PureScript.Sugar.Names.Env.$fShowImportRecord3
                                            (case ww3 of ww5 { Language.PureScript.AST.SourcePos.SourceSpan ww6 ww7 ww8 ->
                                             Language.PureScript.AST.SourcePos.$w$cshowsPrec1
                                               0#
                                               ww6
                                               ww7
                                               ww8
                                               (GHC.Base.++
                                                  @ GHC.Types.Char
                                                  GHC.Show.showCommaSpace1
                                                  (GHC.CString.unpackAppendCString#
                                                     Language.PureScript.Sugar.Names.Env.$fShowImportRecord2
                                                     (Language.PureScript.Sugar.Names.Env.$w$cshowsPrec1
                                                        ww4
                                                        (GHC.CString.unpackAppendCString#
                                                           Language.PureScript.Sugar.Names.Env.$fShowImportRecord1
                                                           x)))) }))))))))
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT -> p
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x)) }) -}
f3d1b1dc5a27ae7683d72d7cb149cc62
  $w$sgo1 ::
    Language.PureScript.Names.ProperName
      'Language.PureScript.Names.KindName
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> a1
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.KindName)
         a1
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.KindName)
         a1
  {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><L,U><S,1*U>,
     Inline: [0] -}
f474523dd1abd6fbe115afdd720d91cb
  $w$sgo13 ::
    (GHC.Base.Maybe a1 -> GHC.Base.Maybe a1)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName)
         a1
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName)
         a1
  {- Arity: 5, Strictness: <C(S),1*C1(U)><L,U><L,U><L,U><S,1*U>,
     Inline: [0] -}
d8848a61adb87038a97ae3fdfcd49ed5
  $w$sgo2 ::
    Language.PureScript.Names.ProperName
      'Language.PureScript.Names.ClassName
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> a1
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
         a1
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
         a1
  {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><L,U><S,1*U>,
     Inline: [0] -}
0e296c5ae60b5d92574f138fbf049525
  $w$sgo3 ::
    Language.PureScript.Names.ProperName
      'Language.PureScript.Names.TypeName
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> a1
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName)
         a1
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName)
         a1
  {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><L,U><S,1*U>,
     Inline: [0] -}
1e4ded522d5bb854d0bec9a9d4a219ac
  $wpoly_go1 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName)
         a
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U><L,U><L,U><S,1*U>,
     Inline: [0] -}
d48057ce850f90d76d1eeba574b75b3f
  $wpoly_go13 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName)
         a
    -> GHC.Base.Maybe a
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U><L,U><L,U><S,1*U>,
     Inline: [0] -}
38f7f532e11066bdbd0ec0adf74f7af3
  $wpoly_go2 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
         a
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U><L,U><L,U><S,1*U>,
     Inline: [0] -}
5f9e6484b1f2e8e2d5b6bfcee5f814e9
  type Env =
    Data.Map.Internal.Map
      Language.PureScript.Names.ModuleName
      (Language.PureScript.AST.SourcePos.SourceSpan,
       Language.PureScript.Sugar.Names.Env.Imports,
       Language.PureScript.Sugar.Names.Env.Exports)
783030dcf8c3c127e329887894c48d51
  data ExportMode = Internal | ReExport
2212f1aeac86faa420eb4b44c2cc2982
  data Exports
    = Exports {exportedTypes :: Data.Map.Internal.Map
                                  (Language.PureScript.Names.ProperName
                                     'Language.PureScript.Names.TypeName)
                                  ([Language.PureScript.Names.ProperName
                                      'Language.PureScript.Names.ConstructorName],
                                   Language.PureScript.Names.ModuleName),
               exportedTypeOps :: Data.Map.Internal.Map
                                    (Language.PureScript.Names.OpName
                                       'Language.PureScript.Names.TypeOpName)
                                    Language.PureScript.Names.ModuleName,
               exportedTypeClasses :: Data.Map.Internal.Map
                                        (Language.PureScript.Names.ProperName
                                           'Language.PureScript.Names.ClassName)
                                        Language.PureScript.Names.ModuleName,
               exportedValues :: Data.Map.Internal.Map
                                   Language.PureScript.Names.Ident
                                   Language.PureScript.Names.ModuleName,
               exportedValueOps :: Data.Map.Internal.Map
                                     (Language.PureScript.Names.OpName
                                        'Language.PureScript.Names.ValueOpName)
                                     Language.PureScript.Names.ModuleName,
               exportedKinds :: Data.Map.Internal.Map
                                  (Language.PureScript.Names.ProperName
                                     'Language.PureScript.Names.KindName)
                                  Language.PureScript.Names.ModuleName}
740ad5aa745655f472e26225a20c97ba
  type ImportMap a =
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified a)
      [Language.PureScript.Sugar.Names.Env.ImportRecord a]
b5a892de418489c767f720864d2c6782
  data ImportProvenance = FromImplicit | FromExplicit | Local | Prim
bf5a97568e086735d3bbc97dc5ee1e68
  data ImportRecord a
    = ImportRecord {importName :: Language.PureScript.Names.Qualified
                                    a,
                    importSourceModule :: Language.PureScript.Names.ModuleName,
                    importSourceSpan :: Language.PureScript.AST.SourcePos.SourceSpan,
                    importProvenance :: Language.PureScript.Sugar.Names.Env.ImportProvenance}
b53ca872c8c47c3d8839f496fc15c222
  data Imports
    = Imports {importedTypes :: Language.PureScript.Sugar.Names.Env.ImportMap
                                  (Language.PureScript.Names.ProperName
                                     'Language.PureScript.Names.TypeName),
               importedTypeOps :: Language.PureScript.Sugar.Names.Env.ImportMap
                                    (Language.PureScript.Names.OpName
                                       'Language.PureScript.Names.TypeOpName),
               importedDataConstructors :: Language.PureScript.Sugar.Names.Env.ImportMap
                                             (Language.PureScript.Names.ProperName
                                                'Language.PureScript.Names.ConstructorName),
               importedTypeClasses :: Language.PureScript.Sugar.Names.Env.ImportMap
                                        (Language.PureScript.Names.ProperName
                                           'Language.PureScript.Names.ClassName),
               importedValues :: Language.PureScript.Sugar.Names.Env.ImportMap
                                   Language.PureScript.Names.Ident,
               importedValueOps :: Language.PureScript.Sugar.Names.Env.ImportMap
                                     (Language.PureScript.Names.OpName
                                        'Language.PureScript.Names.ValueOpName),
               importedModules :: Data.Set.Internal.Set
                                    Language.PureScript.Names.ModuleName,
               importedQualModules :: Data.Set.Internal.Set
                                        Language.PureScript.Names.ModuleName,
               importedKinds :: Language.PureScript.Sugar.Names.Env.ImportMap
                                  (Language.PureScript.Names.ProperName
                                     'Language.PureScript.Names.KindName)}
613983cd1cf922210d6cd8bcf14a1992
  addExport ::
    (Control.Monad.Error.Class.MonadError
       Language.PureScript.Errors.MultipleErrors m,
     GHC.Classes.Ord a) =>
    Language.PureScript.AST.SourcePos.SourceSpan
    -> (a -> Language.PureScript.Names.Name)
    -> a
    -> Language.PureScript.Names.ModuleName
    -> Data.Map.Internal.Map a Language.PureScript.Names.ModuleName
    -> m (Data.Map.Internal.Map a Language.PureScript.Names.ModuleName)
  {- Arity: 7,
     Strictness: <S,1*U(1*U(A,A,A,1*C1(U),A),1*C1(U),A)><L,U(A,C(C1(U)),A,A,A,A,A,A)><L,U><L,1*C1(U)><S,U><L,U><S,U>,
     Unfolding: (\ @ m :: * -> *
                   @ a
                   ($dMonadError :: Control.Monad.Error.Class.MonadError
                                      Language.PureScript.Errors.MultipleErrors m)
                   ($dOrd :: GHC.Classes.Ord a)
                   (eta :: Language.PureScript.AST.SourcePos.SourceSpan)
                   (eta1 :: a -> Language.PureScript.Names.Name)
                   (eta2 :: a)
                   (eta3 :: Language.PureScript.Names.ModuleName)
                   (eta4 :: Data.Map.Internal.Map
                              a Language.PureScript.Names.ModuleName) ->
                 case Data.Map.Internal.lookup
                        @ a
                        @ Language.PureScript.Names.ModuleName
                        $dOrd
                        eta2
                        eta4 of wild {
                   GHC.Base.Nothing
                   -> GHC.Base.return
                        @ m
                        (Control.Monad.Error.Class.$p1MonadError
                           @ Language.PureScript.Errors.MultipleErrors
                           @ m
                           $dMonadError)
                        @ (Data.Map.Internal.Map a Language.PureScript.Names.ModuleName)
                        (Data.Map.Internal.insert
                           @ a
                           @ Language.PureScript.Names.ModuleName
                           $dOrd
                           eta2
                           eta3
                           eta4)
                   GHC.Base.Just mn'
                   -> case GHC.Classes.$fEq[]_$c==
                             @ (Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.Namespace)
                             (Language.PureScript.Names.$fEqProperName
                                @ 'Language.PureScript.Names.Namespace)
                             eta3 `cast` (Language.PureScript.Names.N:ModuleName[0])
                             mn' `cast` (Language.PureScript.Names.N:ModuleName[0]) of wild1 {
                        GHC.Types.False
                        -> let {
                             name :: Language.PureScript.Names.Name = eta1 eta2
                           } in
                           Control.Monad.Error.Class.throwError
                             @ Language.PureScript.Errors.MultipleErrors
                             @ m
                             $dMonadError
                             @ (Data.Map.Internal.Map a Language.PureScript.Names.ModuleName)
                             (GHC.Types.:
                                @ Language.PureScript.AST.Declarations.ErrorMessage
                                (Language.PureScript.AST.Declarations.ErrorMessage
                                   (GHC.Types.:
                                      @ Language.PureScript.AST.Declarations.ErrorMessageHint
                                      (Language.PureScript.AST.Declarations.PositionedError
                                         (GHC.Base.:|
                                            @ Language.PureScript.AST.SourcePos.SourceSpan
                                            eta
                                            (GHC.Types.[]
                                               @ Language.PureScript.AST.SourcePos.SourceSpan)))
                                      (GHC.Types.[]
                                         @ Language.PureScript.AST.Declarations.ErrorMessageHint))
                                   (Language.PureScript.AST.Declarations.ExportConflict
                                      (Language.PureScript.Names.Qualified
                                         @ Language.PureScript.Names.Name
                                         (GHC.Base.Just @ Language.PureScript.Names.ModuleName eta3)
                                         name)
                                      (Language.PureScript.Names.Qualified
                                         @ Language.PureScript.Names.Name
                                         wild
                                         name)))
                                (GHC.Types.[] @ Language.PureScript.AST.Declarations.ErrorMessage))
                               `cast`
                             (Sym (Language.PureScript.Errors.N:MultipleErrors[0]))
                        GHC.Types.True
                        -> GHC.Base.return
                             @ m
                             (Control.Monad.Error.Class.$p1MonadError
                                @ Language.PureScript.Errors.MultipleErrors
                                @ m
                                $dMonadError)
                             @ (Data.Map.Internal.Map a Language.PureScript.Names.ModuleName)
                             eta4 } }) -}
64f71a199310dc3ca4a6ef756eed74e7
  checkImportConflicts ::
    (Control.Monad.Error.Class.MonadError
       Language.PureScript.Errors.MultipleErrors m,
     Control.Monad.Writer.Class.MonadWriter
       Language.PureScript.Errors.MultipleErrors m) =>
    Language.PureScript.AST.SourcePos.SourceSpan
    -> Language.PureScript.Names.ModuleName
    -> (a -> Language.PureScript.Names.Name)
    -> [Language.PureScript.Sugar.Names.Env.ImportRecord a]
    -> m (Language.PureScript.Names.ModuleName,
          Language.PureScript.Names.ModuleName)
  {- Arity: 6,
     Strictness: <L,U(1*U(A,A,1*C1(C1(U)),1*C1(U),A),1*C1(U),A)><L,1*U(A,A,A,1*C1(U),A,A)><L,U><L,1*U><L,1*C1(U)><S,U> -}
1f6e036b17f3356d6a09c48836206f4b
  envModuleExports ::
    (a, b, Language.PureScript.Sugar.Names.Env.Exports)
    -> Language.PureScript.Sugar.Names.Env.Exports
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLS),1*U(A,A,1*U(U,U,U,U,U,U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ a
                   @ b
                   (ds :: (a, b, Language.PureScript.Sugar.Names.Env.Exports)) ->
                 case ds of wild { (,,) ds1 ds2 exps -> exps }) -}
8048999af2b1d14688c2bbcdd6b210f1
  envModuleImports ::
    (a, Language.PureScript.Sugar.Names.Env.Imports, b)
    -> Language.PureScript.Sugar.Names.Env.Imports
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSL),1*U(A,1*U(U,U,U,U,U,U,U,U,U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ a
                   @ b
                   (ds :: (a, Language.PureScript.Sugar.Names.Env.Imports, b)) ->
                 case ds of wild { (,,) ds1 imps ds2 -> imps }) -}
e51f16ffe238baddc3d4a4c5ccd65ac1
  envModuleSourceSpan ::
    (Language.PureScript.AST.SourcePos.SourceSpan, a, b)
    -> Language.PureScript.AST.SourcePos.SourceSpan
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLL),1*U(1*U(U,U,U),A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ a
                   @ b
                   (ds :: (Language.PureScript.AST.SourcePos.SourceSpan, a, b)) ->
                 case ds of wild { (,,) ss ds1 ds2 -> ss }) -}
45c25e9c819c4dd92b7c4c0f11260d2f
  exportKind ::
    Control.Monad.Error.Class.MonadError
      Language.PureScript.Errors.MultipleErrors m =>
    Language.PureScript.AST.SourcePos.SourceSpan
    -> Language.PureScript.Sugar.Names.Env.Exports
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.KindName
    -> Language.PureScript.Names.ModuleName
    -> m Language.PureScript.Sugar.Names.Env.Exports
  {- Arity: 5,
     Strictness: <S(S(LC(C(S))LLL)LL),U(U(A,1*C1(C1(U)),A,C(U),A),1*C1(U),A)><L,U><L,U(U,U,U,U,U,U)><L,U><L,U>,
     Unfolding: (\ @ m :: * -> *
                   ($dMonadError :: Control.Monad.Error.Class.MonadError
                                      Language.PureScript.Errors.MultipleErrors m)
                   (eta :: Language.PureScript.AST.SourcePos.SourceSpan)
                   (eta1 :: Language.PureScript.Sugar.Names.Env.Exports)
                   (eta2 :: Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.KindName)
                   (eta3 :: Language.PureScript.Names.ModuleName) ->
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.Error.Class.$p1MonadError
                       @ Language.PureScript.Errors.MultipleErrors
                       @ m
                       $dMonadError
                 } in
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ (Data.Map.Internal.Map
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.KindName)
                        Language.PureScript.Names.ModuleName)
                   @ Language.PureScript.Sugar.Names.Env.Exports
                   (case eta1 of wild { Language.PureScript.Sugar.Names.Env.Exports ds ds1 ds2 ds3 ds4 ds5 ->
                    Language.PureScript.Sugar.Names.Env.addExport
                      @ m
                      @ (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.KindName)
                      $dMonadError
                      (Language.PureScript.Names.$fOrdProperName
                         @ 'Language.PureScript.Names.KindName)
                      eta
                      Language.PureScript.Names.KiName
                      eta2
                      eta3
                      ds5 })
                   (\ (kinds :: Data.Map.Internal.Map
                                  (Language.PureScript.Names.ProperName
                                     'Language.PureScript.Names.KindName)
                                  Language.PureScript.Names.ModuleName) ->
                    GHC.Base.return
                      @ m
                      $dMonad
                      @ Language.PureScript.Sugar.Names.Env.Exports
                      (case eta1 of wild { Language.PureScript.Sugar.Names.Env.Exports ds ds1 ds2 ds3 ds4 ds5 ->
                       Language.PureScript.Sugar.Names.Env.Exports
                         ds
                         ds1
                         ds2
                         ds3
                         ds4
                         kinds }))) -}
01553c2bd113e137b8e936f79f1e62d7
  exportType ::
    Control.Monad.Error.Class.MonadError
      Language.PureScript.Errors.MultipleErrors m =>
    Language.PureScript.AST.SourcePos.SourceSpan
    -> Language.PureScript.Sugar.Names.Env.ExportMode
    -> Language.PureScript.Sugar.Names.Env.Exports
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName
    -> [Language.PureScript.Names.ProperName
          'Language.PureScript.Names.ConstructorName]
    -> Language.PureScript.Names.ModuleName
    -> m Language.PureScript.Sugar.Names.Env.Exports
  {- Arity: 7,
     Strictness: <S(S(LLC(C(S))LL)LL),U(1*U(1*U(A,C(U),A,A,A,A),A,C(C1(U)),C(U),A),C(U),A)><L,U><L,1*U><L,U(1*U,U,U,U,U,U)><L,U(U,U,U)><L,U><L,U> -}
ea37bbbf1aa8b05ebc24ecc09d9eef41
  exportTypeClass ::
    Control.Monad.Error.Class.MonadError
      Language.PureScript.Errors.MultipleErrors m =>
    Language.PureScript.AST.SourcePos.SourceSpan
    -> Language.PureScript.Sugar.Names.Env.ExportMode
    -> Language.PureScript.Sugar.Names.Env.Exports
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> Language.PureScript.Names.ModuleName
    -> m Language.PureScript.Sugar.Names.Env.Exports
  {- Arity: 6,
     Strictness: <S(S(LLC(C(S))LL)LL),U(U(1*U(A,C(U),A,A,A,A),1*C1(C1(U)),C(C1(U)),C(U),A),C(U),A)><L,U><L,1*U><L,U(U,U,U,U,U,U)><L,U(U,U,U)><L,U> -}
b2bb51bd4dfb3c5436ab1b989db1b6e4
  exportTypeOp ::
    Control.Monad.Error.Class.MonadError
      Language.PureScript.Errors.MultipleErrors m =>
    Language.PureScript.AST.SourcePos.SourceSpan
    -> Language.PureScript.Sugar.Names.Env.Exports
    -> Language.PureScript.Names.OpName
         'Language.PureScript.Names.TypeOpName
    -> Language.PureScript.Names.ModuleName
    -> m Language.PureScript.Sugar.Names.Env.Exports
  {- Arity: 5,
     Strictness: <S(S(LC(C(S))LLL)LL),U(U(A,1*C1(C1(U)),A,C(U),A),1*C1(U),A)><L,U><L,U(U,U,U,U,U,U)><L,U><L,U>,
     Unfolding: (\ @ m :: * -> *
                   ($dMonadError :: Control.Monad.Error.Class.MonadError
                                      Language.PureScript.Errors.MultipleErrors m)
                   (eta :: Language.PureScript.AST.SourcePos.SourceSpan)
                   (eta1 :: Language.PureScript.Sugar.Names.Env.Exports)
                   (eta2 :: Language.PureScript.Names.OpName
                              'Language.PureScript.Names.TypeOpName)
                   (eta3 :: Language.PureScript.Names.ModuleName) ->
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.Error.Class.$p1MonadError
                       @ Language.PureScript.Errors.MultipleErrors
                       @ m
                       $dMonadError
                 } in
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ (Data.Map.Internal.Map
                        (Language.PureScript.Names.OpName
                           'Language.PureScript.Names.TypeOpName)
                        Language.PureScript.Names.ModuleName)
                   @ Language.PureScript.Sugar.Names.Env.Exports
                   (case eta1 of wild { Language.PureScript.Sugar.Names.Env.Exports ds ds1 ds2 ds3 ds4 ds5 ->
                    Language.PureScript.Sugar.Names.Env.addExport
                      @ m
                      @ (Language.PureScript.Names.OpName
                           'Language.PureScript.Names.TypeOpName)
                      $dMonadError
                      (Language.PureScript.Names.$fOrdOpName
                         @ 'Language.PureScript.Names.TypeOpName)
                      eta
                      Language.PureScript.Names.TyOpName
                      eta2
                      eta3
                      ds1 })
                   (\ (typeOps :: Data.Map.Internal.Map
                                    (Language.PureScript.Names.OpName
                                       'Language.PureScript.Names.TypeOpName)
                                    Language.PureScript.Names.ModuleName) ->
                    GHC.Base.return
                      @ m
                      $dMonad
                      @ Language.PureScript.Sugar.Names.Env.Exports
                      (case eta1 of wild { Language.PureScript.Sugar.Names.Env.Exports ds ds1 ds2 ds3 ds4 ds5 ->
                       Language.PureScript.Sugar.Names.Env.Exports
                         ds
                         typeOps
                         ds2
                         ds3
                         ds4
                         ds5 }))) -}
730d9fecc71b5f2a30d510f80404616e
  exportValue ::
    Control.Monad.Error.Class.MonadError
      Language.PureScript.Errors.MultipleErrors m =>
    Language.PureScript.AST.SourcePos.SourceSpan
    -> Language.PureScript.Sugar.Names.Env.Exports
    -> Language.PureScript.Names.Ident
    -> Language.PureScript.Names.ModuleName
    -> m Language.PureScript.Sugar.Names.Env.Exports
  {- Arity: 5,
     Strictness: <S(S(LC(C(S))LLL)LL),U(U(A,1*C1(C1(U)),A,C(U),A),1*C1(U),A)><L,U><L,U(U,U,U,U,U,U)><L,U><L,U>,
     Unfolding: (\ @ m :: * -> *
                   ($dMonadError :: Control.Monad.Error.Class.MonadError
                                      Language.PureScript.Errors.MultipleErrors m)
                   (eta :: Language.PureScript.AST.SourcePos.SourceSpan)
                   (eta1 :: Language.PureScript.Sugar.Names.Env.Exports)
                   (eta2 :: Language.PureScript.Names.Ident)
                   (eta3 :: Language.PureScript.Names.ModuleName) ->
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.Error.Class.$p1MonadError
                       @ Language.PureScript.Errors.MultipleErrors
                       @ m
                       $dMonadError
                 } in
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ (Data.Map.Internal.Map
                        Language.PureScript.Names.Ident
                        Language.PureScript.Names.ModuleName)
                   @ Language.PureScript.Sugar.Names.Env.Exports
                   (case eta1 of wild { Language.PureScript.Sugar.Names.Env.Exports ds ds1 ds2 ds3 ds4 ds5 ->
                    Language.PureScript.Sugar.Names.Env.addExport
                      @ m
                      @ Language.PureScript.Names.Ident
                      $dMonadError
                      Language.PureScript.Names.$fOrdIdent
                      eta
                      Language.PureScript.Names.IdentName
                      eta2
                      eta3
                      ds3 })
                   (\ (values :: Data.Map.Internal.Map
                                   Language.PureScript.Names.Ident
                                   Language.PureScript.Names.ModuleName) ->
                    GHC.Base.return
                      @ m
                      $dMonad
                      @ Language.PureScript.Sugar.Names.Env.Exports
                      (case eta1 of wild { Language.PureScript.Sugar.Names.Env.Exports ds ds1 ds2 ds3 ds4 ds5 ->
                       Language.PureScript.Sugar.Names.Env.Exports
                         ds
                         ds1
                         ds2
                         values
                         ds4
                         ds5 }))) -}
13841c3907ca67d35ce2839396283aab
  exportValueOp ::
    Control.Monad.Error.Class.MonadError
      Language.PureScript.Errors.MultipleErrors m =>
    Language.PureScript.AST.SourcePos.SourceSpan
    -> Language.PureScript.Sugar.Names.Env.Exports
    -> Language.PureScript.Names.OpName
         'Language.PureScript.Names.ValueOpName
    -> Language.PureScript.Names.ModuleName
    -> m Language.PureScript.Sugar.Names.Env.Exports
  {- Arity: 5,
     Strictness: <S(S(LC(C(S))LLL)LL),U(U(A,1*C1(C1(U)),A,C(U),A),1*C1(U),A)><L,U><L,U(U,U,U,U,U,U)><L,U><L,U>,
     Unfolding: (\ @ m :: * -> *
                   ($dMonadError :: Control.Monad.Error.Class.MonadError
                                      Language.PureScript.Errors.MultipleErrors m)
                   (eta :: Language.PureScript.AST.SourcePos.SourceSpan)
                   (eta1 :: Language.PureScript.Sugar.Names.Env.Exports)
                   (eta2 :: Language.PureScript.Names.OpName
                              'Language.PureScript.Names.ValueOpName)
                   (eta3 :: Language.PureScript.Names.ModuleName) ->
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.Error.Class.$p1MonadError
                       @ Language.PureScript.Errors.MultipleErrors
                       @ m
                       $dMonadError
                 } in
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ (Data.Map.Internal.Map
                        (Language.PureScript.Names.OpName
                           'Language.PureScript.Names.ValueOpName)
                        Language.PureScript.Names.ModuleName)
                   @ Language.PureScript.Sugar.Names.Env.Exports
                   (case eta1 of wild { Language.PureScript.Sugar.Names.Env.Exports ds ds1 ds2 ds3 ds4 ds5 ->
                    Language.PureScript.Sugar.Names.Env.addExport
                      @ m
                      @ (Language.PureScript.Names.OpName
                           'Language.PureScript.Names.ValueOpName)
                      $dMonadError
                      (Language.PureScript.Names.$fOrdOpName
                         @ 'Language.PureScript.Names.ValueOpName)
                      eta
                      Language.PureScript.Names.ValOpName
                      eta2
                      eta3
                      ds4 })
                   (\ (valueOps :: Data.Map.Internal.Map
                                     (Language.PureScript.Names.OpName
                                        'Language.PureScript.Names.ValueOpName)
                                     Language.PureScript.Names.ModuleName) ->
                    GHC.Base.return
                      @ m
                      $dMonad
                      @ Language.PureScript.Sugar.Names.Env.Exports
                      (case eta1 of wild { Language.PureScript.Sugar.Names.Env.Exports ds ds1 ds2 ds3 ds4 ds5 ->
                       Language.PureScript.Sugar.Names.Env.Exports
                         ds
                         ds1
                         ds2
                         ds3
                         valueOps
                         ds5 }))) -}
2212f1aeac86faa420eb4b44c2cc2982
  exportedKinds ::
    Language.PureScript.Sugar.Names.Env.Exports
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.KindName)
         Language.PureScript.Names.ModuleName
  RecSel Left Language.PureScript.Sugar.Names.Env.Exports
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLS),1*U(A,A,A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Sugar.Names.Env.Exports) ->
                 case ds of wild { Language.PureScript.Sugar.Names.Env.Exports ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds6 }) -}
2212f1aeac86faa420eb4b44c2cc2982
  exportedTypeClasses ::
    Language.PureScript.Sugar.Names.Env.Exports
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
         Language.PureScript.Names.ModuleName
  RecSel Left Language.PureScript.Sugar.Names.Env.Exports
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLLL),1*U(A,A,1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Sugar.Names.Env.Exports) ->
                 case ds of wild { Language.PureScript.Sugar.Names.Env.Exports ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds3 }) -}
2212f1aeac86faa420eb4b44c2cc2982
  exportedTypeOps ::
    Language.PureScript.Sugar.Names.Env.Exports
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.TypeOpName)
         Language.PureScript.Names.ModuleName
  RecSel Left Language.PureScript.Sugar.Names.Env.Exports
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLLL),1*U(A,1*U,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Sugar.Names.Env.Exports) ->
                 case ds of wild { Language.PureScript.Sugar.Names.Env.Exports ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds2 }) -}
2212f1aeac86faa420eb4b44c2cc2982
  exportedTypes ::
    Language.PureScript.Sugar.Names.Env.Exports
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName)
         ([Language.PureScript.Names.ProperName
             'Language.PureScript.Names.ConstructorName],
          Language.PureScript.Names.ModuleName)
  RecSel Left Language.PureScript.Sugar.Names.Env.Exports
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLLL),1*U(1*U,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Sugar.Names.Env.Exports) ->
                 case ds of wild { Language.PureScript.Sugar.Names.Env.Exports ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds1 }) -}
2212f1aeac86faa420eb4b44c2cc2982
  exportedValueOps ::
    Language.PureScript.Sugar.Names.Env.Exports
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.ValueOpName)
         Language.PureScript.Names.ModuleName
  RecSel Left Language.PureScript.Sugar.Names.Env.Exports
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLSL),1*U(A,A,A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Sugar.Names.Env.Exports) ->
                 case ds of wild { Language.PureScript.Sugar.Names.Env.Exports ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds5 }) -}
2212f1aeac86faa420eb4b44c2cc2982
  exportedValues ::
    Language.PureScript.Sugar.Names.Env.Exports
    -> Data.Map.Internal.Map
         Language.PureScript.Names.Ident
         Language.PureScript.Names.ModuleName
  RecSel Left Language.PureScript.Sugar.Names.Env.Exports
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSLL),1*U(A,A,A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Sugar.Names.Env.Exports) ->
                 case ds of wild { Language.PureScript.Sugar.Names.Env.Exports ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds4 }) -}
f1dd2a91252973f55e30c2f2252c925f
  getExports ::
    Control.Monad.Error.Class.MonadError
      Language.PureScript.Errors.MultipleErrors m =>
    Language.PureScript.Sugar.Names.Env.Env
    -> Language.PureScript.Names.ModuleName
    -> m Language.PureScript.Sugar.Names.Env.Exports
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U(1*U(A,A,A,1*C1(U),A),1*C1(U),A)><S,1*U><S,U>,
     Unfolding: (\ @ m :: * -> *
                   ($dMonadError :: Control.Monad.Error.Class.MonadError
                                      Language.PureScript.Errors.MultipleErrors m)
                   (eta :: Language.PureScript.Sugar.Names.Env.Env)
                   (eta1 :: Language.PureScript.Names.ModuleName) ->
                 case Language.PureScript.Sugar.Names.Env.$slookup1
                        @ (Language.PureScript.AST.SourcePos.SourceSpan,
                           Language.PureScript.Sugar.Names.Env.Imports,
                           Language.PureScript.Sugar.Names.Env.Exports)
                        eta1
                        eta of wild {
                   GHC.Base.Nothing
                   -> Control.Monad.Error.Class.throwError
                        @ Language.PureScript.Errors.MultipleErrors
                        @ m
                        $dMonadError
                        @ Language.PureScript.Sugar.Names.Env.Exports
                        (GHC.Types.:
                           @ Language.PureScript.AST.Declarations.ErrorMessage
                           (Language.PureScript.AST.Declarations.ErrorMessage
                              (GHC.Types.[]
                                 @ Language.PureScript.AST.Declarations.ErrorMessageHint)
                              (Language.PureScript.AST.Declarations.UnknownName
                                 (Language.PureScript.Names.Qualified
                                    @ Language.PureScript.Names.Name
                                    (GHC.Base.Nothing @ Language.PureScript.Names.ModuleName)
                                    (Language.PureScript.Names.ModName eta1))))
                           (GHC.Types.[] @ Language.PureScript.AST.Declarations.ErrorMessage))
                          `cast`
                        (Sym (Language.PureScript.Errors.N:MultipleErrors[0]))
                   GHC.Base.Just x
                   -> GHC.Base.return
                        @ m
                        (Control.Monad.Error.Class.$p1MonadError
                           @ Language.PureScript.Errors.MultipleErrors
                           @ m
                           $dMonadError)
                        @ Language.PureScript.Sugar.Names.Env.Exports
                        (case x of wild1 { (,,) ds ds1 exps -> exps }) }) -}
bf5a97568e086735d3bbc97dc5ee1e68
  importName ::
    Language.PureScript.Sugar.Names.Env.ImportRecord a
    -> Language.PureScript.Names.Qualified a
  RecSel Left Language.PureScript.Sugar.Names.Env.ImportRecord
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(1*U(U,U),A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ a
                   (ds :: Language.PureScript.Sugar.Names.Env.ImportRecord a) ->
                 case ds of wild { Language.PureScript.Sugar.Names.Env.ImportRecord ds1 ds2 ds3 ds4 ->
                 ds1 }) -}
bf5a97568e086735d3bbc97dc5ee1e68
  importProvenance ::
    Language.PureScript.Sugar.Names.Env.ImportRecord a
    -> Language.PureScript.Sugar.Names.Env.ImportProvenance
  RecSel Left Language.PureScript.Sugar.Names.Env.ImportRecord
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLLS),1*U(A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a
                   (ds :: Language.PureScript.Sugar.Names.Env.ImportRecord a) ->
                 case ds of wild { Language.PureScript.Sugar.Names.Env.ImportRecord ds1 ds2 ds3 ds4 ->
                 ds4 }) -}
bf5a97568e086735d3bbc97dc5ee1e68
  importSourceModule ::
    Language.PureScript.Sugar.Names.Env.ImportRecord a
    -> Language.PureScript.Names.ModuleName
  RecSel Left Language.PureScript.Sugar.Names.Env.ImportRecord
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSLL),1*U(A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a
                   (ds :: Language.PureScript.Sugar.Names.Env.ImportRecord a) ->
                 case ds of wild { Language.PureScript.Sugar.Names.Env.ImportRecord ds1 ds2 ds3 ds4 ->
                 ds2 }) -}
bf5a97568e086735d3bbc97dc5ee1e68
  importSourceSpan ::
    Language.PureScript.Sugar.Names.Env.ImportRecord a
    -> Language.PureScript.AST.SourcePos.SourceSpan
  RecSel Left Language.PureScript.Sugar.Names.Env.ImportRecord
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSL),1*U(A,A,1*U(U,U,U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ a
                   (ds :: Language.PureScript.Sugar.Names.Env.ImportRecord a) ->
                 case ds of wild { Language.PureScript.Sugar.Names.Env.ImportRecord ds1 ds2 ds3 ds4 ->
                 ds3 }) -}
b53ca872c8c47c3d8839f496fc15c222
  importedDataConstructors ::
    Language.PureScript.Sugar.Names.Env.Imports
    -> Language.PureScript.Sugar.Names.Env.ImportMap
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ConstructorName)
  RecSel Left Language.PureScript.Sugar.Names.Env.Imports
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLLLLLL),1*U(A,A,1*U,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Sugar.Names.Env.Imports) ->
                 case ds of wild { Language.PureScript.Sugar.Names.Env.Imports ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ->
                 ds3 }) -}
b53ca872c8c47c3d8839f496fc15c222
  importedKinds ::
    Language.PureScript.Sugar.Names.Env.Imports
    -> Language.PureScript.Sugar.Names.Env.ImportMap
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.KindName)
  RecSel Left Language.PureScript.Sugar.Names.Env.Imports
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLS),1*U(A,A,A,A,A,A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Sugar.Names.Env.Imports) ->
                 case ds of wild { Language.PureScript.Sugar.Names.Env.Imports ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ->
                 ds9 }) -}
b53ca872c8c47c3d8839f496fc15c222
  importedModules ::
    Language.PureScript.Sugar.Names.Env.Imports
    -> Data.Set.Internal.Set Language.PureScript.Names.ModuleName
  RecSel Left Language.PureScript.Sugar.Names.Env.Imports
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLSLL),1*U(A,A,A,A,A,A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Sugar.Names.Env.Imports) ->
                 case ds of wild { Language.PureScript.Sugar.Names.Env.Imports ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ->
                 ds7 }) -}
b53ca872c8c47c3d8839f496fc15c222
  importedQualModules ::
    Language.PureScript.Sugar.Names.Env.Imports
    -> Data.Set.Internal.Set Language.PureScript.Names.ModuleName
  RecSel Left Language.PureScript.Sugar.Names.Env.Imports
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLSL),1*U(A,A,A,A,A,A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Sugar.Names.Env.Imports) ->
                 case ds of wild { Language.PureScript.Sugar.Names.Env.Imports ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ->
                 ds8 }) -}
b53ca872c8c47c3d8839f496fc15c222
  importedTypeClasses ::
    Language.PureScript.Sugar.Names.Env.Imports
    -> Language.PureScript.Sugar.Names.Env.ImportMap
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
  RecSel Left Language.PureScript.Sugar.Names.Env.Imports
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSLLLLL),1*U(A,A,A,1*U,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Sugar.Names.Env.Imports) ->
                 case ds of wild { Language.PureScript.Sugar.Names.Env.Imports ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ->
                 ds4 }) -}
b53ca872c8c47c3d8839f496fc15c222
  importedTypeOps ::
    Language.PureScript.Sugar.Names.Env.Imports
    -> Language.PureScript.Sugar.Names.Env.ImportMap
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.TypeOpName)
  RecSel Left Language.PureScript.Sugar.Names.Env.Imports
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLLLLLL),1*U(A,1*U,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Sugar.Names.Env.Imports) ->
                 case ds of wild { Language.PureScript.Sugar.Names.Env.Imports ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ->
                 ds2 }) -}
b53ca872c8c47c3d8839f496fc15c222
  importedTypes ::
    Language.PureScript.Sugar.Names.Env.Imports
    -> Language.PureScript.Sugar.Names.Env.ImportMap
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName)
  RecSel Left Language.PureScript.Sugar.Names.Env.Imports
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLLLLLL),1*U(1*U,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Sugar.Names.Env.Imports) ->
                 case ds of wild { Language.PureScript.Sugar.Names.Env.Imports ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ->
                 ds1 }) -}
b53ca872c8c47c3d8839f496fc15c222
  importedValueOps ::
    Language.PureScript.Sugar.Names.Env.Imports
    -> Language.PureScript.Sugar.Names.Env.ImportMap
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.ValueOpName)
  RecSel Left Language.PureScript.Sugar.Names.Env.Imports
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLSLLL),1*U(A,A,A,A,A,1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Sugar.Names.Env.Imports) ->
                 case ds of wild { Language.PureScript.Sugar.Names.Env.Imports ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ->
                 ds6 }) -}
b53ca872c8c47c3d8839f496fc15c222
  importedValues ::
    Language.PureScript.Sugar.Names.Env.Imports
    -> Language.PureScript.Sugar.Names.Env.ImportMap
         Language.PureScript.Names.Ident
  RecSel Left Language.PureScript.Sugar.Names.Env.Imports
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLSLLLL),1*U(A,A,A,A,1*U,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Sugar.Names.Env.Imports) ->
                 case ds of wild { Language.PureScript.Sugar.Names.Env.Imports ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ->
                 ds5 }) -}
ac55505646ed961e671e81c65e6b9720
  nullExports :: Language.PureScript.Sugar.Names.Env.Exports
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Language.PureScript.Sugar.Names.Env.Exports
                   (Data.Map.Internal.Tip
                      @ (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.TypeName)
                      @ ([Language.PureScript.Names.ProperName
                            'Language.PureScript.Names.ConstructorName],
                         Language.PureScript.Names.ModuleName))
                   (Data.Map.Internal.Tip
                      @ (Language.PureScript.Names.OpName
                           'Language.PureScript.Names.TypeOpName)
                      @ Language.PureScript.Names.ModuleName)
                   (Data.Map.Internal.Tip
                      @ (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.ClassName)
                      @ Language.PureScript.Names.ModuleName)
                   (Data.Map.Internal.Tip
                      @ Language.PureScript.Names.Ident
                      @ Language.PureScript.Names.ModuleName)
                   (Data.Map.Internal.Tip
                      @ (Language.PureScript.Names.OpName
                           'Language.PureScript.Names.ValueOpName)
                      @ Language.PureScript.Names.ModuleName)
                   (Data.Map.Internal.Tip
                      @ (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.KindName)
                      @ Language.PureScript.Names.ModuleName)) -}
ce7df041a470e7796955adec9bc54637
  nullImports :: Language.PureScript.Sugar.Names.Env.Imports
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Language.PureScript.Sugar.Names.Env.Imports
                   (Data.Map.Internal.Tip
                      @ (Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.TypeName))
                      @ [Language.PureScript.Sugar.Names.Env.ImportRecord
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.TypeName)])
                   (Data.Map.Internal.Tip
                      @ (Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.OpName
                              'Language.PureScript.Names.TypeOpName))
                      @ [Language.PureScript.Sugar.Names.Env.ImportRecord
                           (Language.PureScript.Names.OpName
                              'Language.PureScript.Names.TypeOpName)])
                   (Data.Map.Internal.Tip
                      @ (Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ConstructorName))
                      @ [Language.PureScript.Sugar.Names.Env.ImportRecord
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ConstructorName)])
                   (Data.Map.Internal.Tip
                      @ (Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ClassName))
                      @ [Language.PureScript.Sugar.Names.Env.ImportRecord
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ClassName)])
                   (Data.Map.Internal.Tip
                      @ (Language.PureScript.Names.Qualified
                           Language.PureScript.Names.Ident)
                      @ [Language.PureScript.Sugar.Names.Env.ImportRecord
                           Language.PureScript.Names.Ident])
                   (Data.Map.Internal.Tip
                      @ (Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.OpName
                              'Language.PureScript.Names.ValueOpName))
                      @ [Language.PureScript.Sugar.Names.Env.ImportRecord
                           (Language.PureScript.Names.OpName
                              'Language.PureScript.Names.ValueOpName)])
                   (Data.Set.Internal.Tip @ Language.PureScript.Names.ModuleName)
                   (Data.Set.Internal.Tip @ Language.PureScript.Names.ModuleName)
                   (Data.Map.Internal.Tip
                      @ (Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.KindName))
                      @ [Language.PureScript.Sugar.Names.Env.ImportRecord
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.KindName)])) -}
c32e5288863d919737261c42c8049b58
  primEnv :: Language.PureScript.Sugar.Names.Env.Env
  {- Unfolding: (Language.PureScript.Sugar.Names.Env.$sfromList
                   @ (Language.PureScript.AST.SourcePos.SourceSpan,
                      Language.PureScript.Sugar.Names.Env.Imports,
                      Language.PureScript.Sugar.Names.Env.Exports)
                   Language.PureScript.Sugar.Names.Env.primEnv1) -}
e4a4e96f48ff4118028eed396be6c8a1
  primEnv1 ::
    [(Language.PureScript.Names.ModuleName,
      (Language.PureScript.AST.SourcePos.SourceSpan,
       Language.PureScript.Sugar.Names.Env.Imports,
       Language.PureScript.Sugar.Names.Env.Exports))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.ModuleName,
                      (Language.PureScript.AST.SourcePos.SourceSpan,
                       Language.PureScript.Sugar.Names.Env.Imports,
                       Language.PureScript.Sugar.Names.Env.Exports))
                   Language.PureScript.Sugar.Names.Env.primEnv54
                   Language.PureScript.Sugar.Names.Env.primEnv2) -}
ac98c649448a9e48affe28e411523c52
  primEnv10 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.KindName)
      Language.PureScript.Names.ModuleName
  {- Unfolding: (Language.PureScript.Sugar.Names.Env.$sfromList1
                   @ Language.PureScript.Names.ModuleName
                   (Language.PureScript.Sugar.Names.Env.primEnv_go3
                      (GHC.Types.[]
                         @ (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.KindName,
                            Language.PureScript.Names.ModuleName))
                      Language.PureScript.Environment.primTypeErrorKinds)) -}
3f2ff7c9f61d2f275e669a2405577e9b
  primEnv11 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
      Language.PureScript.Names.ModuleName
  {- Unfolding: (Language.PureScript.Sugar.Names.Env.$sfromList2
                   @ Language.PureScript.Names.ModuleName
                   (Language.PureScript.Sugar.Names.Env.primEnv12
                      @ Language.PureScript.Environment.TypeClassData
                      (GHC.Types.[]
                         @ (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ClassName,
                            Language.PureScript.Names.ModuleName))
                      Language.PureScript.Environment.primTypeErrorClasses)) -}
dbdc1bc7ae98793187f30c945c58c6f4
  primEnv12 ::
    [(Language.PureScript.Names.ProperName
        'Language.PureScript.Names.ClassName,
      Language.PureScript.Names.ModuleName)]
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName))
         b
    -> [(Language.PureScript.Names.ProperName
           'Language.PureScript.Names.ClassName,
         Language.PureScript.Names.ModuleName)]
  {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
24cb6435a8f034b672bf106861f17146
  primEnv13 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName)
      ([Language.PureScript.Names.ProperName
          'Language.PureScript.Names.ConstructorName],
       Language.PureScript.Names.ModuleName)
  {- Unfolding: (Language.PureScript.Sugar.Names.Env.$sfromList3
                   @ ([Language.PureScript.Names.ProperName
                         'Language.PureScript.Names.ConstructorName],
                      Language.PureScript.Names.ModuleName)
                   (Language.PureScript.Sugar.Names.Env.primEnv14
                      @ (Language.PureScript.Kinds.Kind,
                         Language.PureScript.Environment.TypeKind)
                      (GHC.Types.[]
                         @ (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.TypeName,
                            ([Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ConstructorName],
                             Language.PureScript.Names.ModuleName)))
                      Language.PureScript.Environment.primTypeErrorTypes)) -}
26076ebb4c27aaa2bb69f642fd663be8
  primEnv14 ::
    [(Language.PureScript.Names.ProperName
        'Language.PureScript.Names.TypeName,
      ([Language.PureScript.Names.ProperName
          'Language.PureScript.Names.ConstructorName],
       Language.PureScript.Names.ModuleName))]
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.TypeName))
         a
    -> [(Language.PureScript.Names.ProperName
           'Language.PureScript.Names.TypeName,
         ([Language.PureScript.Names.ProperName
             'Language.PureScript.Names.ConstructorName],
          Language.PureScript.Names.ModuleName))]
  {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
2a97e2a753be81628a2ce6557573b420
  primEnv15 :: Language.PureScript.AST.SourcePos.SourceSpan
  {- Strictness: m,
     Unfolding: (Language.PureScript.AST.SourcePos.SourceSpan
                   Language.PureScript.Sugar.Names.Env.primEnv16
                   Language.PureScript.AST.SourcePos.internalModuleSourceSpan1
                   Language.PureScript.AST.SourcePos.internalModuleSourceSpan1) -}
7327a539a50479700aaaafb47cfb9cc6
  primEnv16 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Sugar.Names.Env.primEnv17) -}
e5141dd2db865b796ca576dc2d346830
  primEnv17 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("<Prim.TypeError>"#) -}
bcbc2ca8aa9d686da66a6d8e2fa195be
  primEnv18 ::
    (Language.PureScript.Names.ModuleName,
     (Language.PureScript.AST.SourcePos.SourceSpan,
      Language.PureScript.Sugar.Names.Env.Imports,
      Language.PureScript.Sugar.Names.Env.Exports))
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Constants.$bPrimSymbol1
                    `cast`
                  (Sym (Language.PureScript.Names.N:ModuleName[0])),
                  Language.PureScript.Sugar.Names.Env.primEnv19)) -}
1a3c9b28431b67f26464a5d6e4adff04
  primEnv19 ::
    (Language.PureScript.AST.SourcePos.SourceSpan,
     Language.PureScript.Sugar.Names.Env.Imports,
     Language.PureScript.Sugar.Names.Env.Exports)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Sugar.Names.Env.primEnv24,
                  Language.PureScript.Sugar.Names.Env.nullImports,
                  Language.PureScript.Sugar.Names.Env.primEnv20)) -}
a5232ead0d1b02a93207821d905ba750
  primEnv2 ::
    [(Language.PureScript.Names.ModuleName,
      (Language.PureScript.AST.SourcePos.SourceSpan,
       Language.PureScript.Sugar.Names.Env.Imports,
       Language.PureScript.Sugar.Names.Env.Exports))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.ModuleName,
                      (Language.PureScript.AST.SourcePos.SourceSpan,
                       Language.PureScript.Sugar.Names.Env.Imports,
                       Language.PureScript.Sugar.Names.Env.Exports))
                   Language.PureScript.Sugar.Names.Env.primEnv45
                   Language.PureScript.Sugar.Names.Env.primEnv3) -}
278df6681de818efa7c6af68358ebb71
  primEnv20 :: Language.PureScript.Sugar.Names.Env.Exports
  {- Strictness: m,
     Unfolding: (Language.PureScript.Sugar.Names.Env.Exports
                   Language.PureScript.Sugar.Names.Env.primEnv23
                   (Data.Map.Internal.Tip
                      @ (Language.PureScript.Names.OpName
                           'Language.PureScript.Names.TypeOpName)
                      @ Language.PureScript.Names.ModuleName)
                   Language.PureScript.Sugar.Names.Env.primEnv22
                   (Data.Map.Internal.Tip
                      @ Language.PureScript.Names.Ident
                      @ Language.PureScript.Names.ModuleName)
                   (Data.Map.Internal.Tip
                      @ (Language.PureScript.Names.OpName
                           'Language.PureScript.Names.ValueOpName)
                      @ Language.PureScript.Names.ModuleName)
                   Language.PureScript.Sugar.Names.Env.primEnv21) -}
58e7c5ee4e1c6bb597ad7d9337f4900f
  primEnv21 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.KindName)
      Language.PureScript.Names.ModuleName
  {- Unfolding: (Language.PureScript.Sugar.Names.Env.$sfromList1
                   @ Language.PureScript.Names.ModuleName
                   (GHC.Types.[]
                      @ (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.KindName,
                         Language.PureScript.Names.ModuleName))) -}
80609011121a4a886e74458f3fc8602c
  primEnv22 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
      Language.PureScript.Names.ModuleName
  {- Unfolding: (Language.PureScript.Sugar.Names.Env.$sfromList2
                   @ Language.PureScript.Names.ModuleName
                   (Language.PureScript.Sugar.Names.Env.primEnv12
                      @ Language.PureScript.Environment.TypeClassData
                      (GHC.Types.[]
                         @ (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ClassName,
                            Language.PureScript.Names.ModuleName))
                      Language.PureScript.Environment.primSymbolClasses)) -}
2559fe59600ba8a5a4b4a08dc85395b9
  primEnv23 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName)
      ([Language.PureScript.Names.ProperName
          'Language.PureScript.Names.ConstructorName],
       Language.PureScript.Names.ModuleName)
  {- Unfolding: (Language.PureScript.Sugar.Names.Env.$sfromList3
                   @ ([Language.PureScript.Names.ProperName
                         'Language.PureScript.Names.ConstructorName],
                      Language.PureScript.Names.ModuleName)
                   (Language.PureScript.Sugar.Names.Env.primEnv14
                      @ (Language.PureScript.Kinds.Kind,
                         Language.PureScript.Environment.TypeKind)
                      (GHC.Types.[]
                         @ (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.TypeName,
                            ([Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ConstructorName],
                             Language.PureScript.Names.ModuleName)))
                      Language.PureScript.Environment.primSymbolTypes)) -}
b3e5def4e4d611596749c52899804d64
  primEnv24 :: Language.PureScript.AST.SourcePos.SourceSpan
  {- Strictness: m,
     Unfolding: (Language.PureScript.AST.SourcePos.SourceSpan
                   Language.PureScript.Sugar.Names.Env.primEnv25
                   Language.PureScript.AST.SourcePos.internalModuleSourceSpan1
                   Language.PureScript.AST.SourcePos.internalModuleSourceSpan1) -}
dabddb679d7aad178bf4d0caf73bfbec
  primEnv25 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Sugar.Names.Env.primEnv26) -}
df4773adb934f89698ff0c6307064337
  primEnv26 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("<Prim.Symbol>"#) -}
cfb46b6af856f448039a9cc14df984a2
  primEnv27 ::
    (Language.PureScript.Names.ModuleName,
     (Language.PureScript.AST.SourcePos.SourceSpan,
      Language.PureScript.Sugar.Names.Env.Imports,
      Language.PureScript.Sugar.Names.Env.Exports))
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Constants.$bPrimRowList1
                    `cast`
                  (Sym (Language.PureScript.Names.N:ModuleName[0])),
                  Language.PureScript.Sugar.Names.Env.primEnv28)) -}
da65c00552f38803bcec1a18f0696bc1
  primEnv28 ::
    (Language.PureScript.AST.SourcePos.SourceSpan,
     Language.PureScript.Sugar.Names.Env.Imports,
     Language.PureScript.Sugar.Names.Env.Exports)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Sugar.Names.Env.primEnv33,
                  Language.PureScript.Sugar.Names.Env.nullImports,
                  Language.PureScript.Sugar.Names.Env.primEnv29)) -}
1cf681945dc3aeec07b86388efea2a4e
  primEnv29 :: Language.PureScript.Sugar.Names.Env.Exports
  {- Strictness: m,
     Unfolding: (Language.PureScript.Sugar.Names.Env.Exports
                   Language.PureScript.Sugar.Names.Env.primEnv32
                   (Data.Map.Internal.Tip
                      @ (Language.PureScript.Names.OpName
                           'Language.PureScript.Names.TypeOpName)
                      @ Language.PureScript.Names.ModuleName)
                   Language.PureScript.Sugar.Names.Env.primEnv31
                   (Data.Map.Internal.Tip
                      @ Language.PureScript.Names.Ident
                      @ Language.PureScript.Names.ModuleName)
                   (Data.Map.Internal.Tip
                      @ (Language.PureScript.Names.OpName
                           'Language.PureScript.Names.ValueOpName)
                      @ Language.PureScript.Names.ModuleName)
                   Language.PureScript.Sugar.Names.Env.primEnv30) -}
5d95d1f0b0e646d74e154bd8c03610b7
  primEnv3 ::
    [(Language.PureScript.Names.ModuleName,
      (Language.PureScript.AST.SourcePos.SourceSpan,
       Language.PureScript.Sugar.Names.Env.Imports,
       Language.PureScript.Sugar.Names.Env.Exports))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.ModuleName,
                      (Language.PureScript.AST.SourcePos.SourceSpan,
                       Language.PureScript.Sugar.Names.Env.Imports,
                       Language.PureScript.Sugar.Names.Env.Exports))
                   Language.PureScript.Sugar.Names.Env.primEnv36
                   Language.PureScript.Sugar.Names.Env.primEnv4) -}
eaf7474cfc05a4b4737a987d1e943bd9
  primEnv30 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.KindName)
      Language.PureScript.Names.ModuleName
  {- Unfolding: (Language.PureScript.Sugar.Names.Env.$sfromList1
                   @ Language.PureScript.Names.ModuleName
                   (Language.PureScript.Sugar.Names.Env.primEnv_go3
                      (GHC.Types.[]
                         @ (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.KindName,
                            Language.PureScript.Names.ModuleName))
                      Language.PureScript.Environment.primRowListKinds)) -}
7d6f24f7b92c5b455c484fea7ff3ed0e
  primEnv31 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
      Language.PureScript.Names.ModuleName
  {- Unfolding: (Language.PureScript.Sugar.Names.Env.$sfromList2
                   @ Language.PureScript.Names.ModuleName
                   (Language.PureScript.Sugar.Names.Env.primEnv12
                      @ Language.PureScript.Environment.TypeClassData
                      (GHC.Types.[]
                         @ (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ClassName,
                            Language.PureScript.Names.ModuleName))
                      Language.PureScript.Environment.primRowListClasses)) -}
41c255d8b69ad900f86376f9f5608af2
  primEnv32 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName)
      ([Language.PureScript.Names.ProperName
          'Language.PureScript.Names.ConstructorName],
       Language.PureScript.Names.ModuleName)
  {- Unfolding: (Language.PureScript.Sugar.Names.Env.$sfromList3
                   @ ([Language.PureScript.Names.ProperName
                         'Language.PureScript.Names.ConstructorName],
                      Language.PureScript.Names.ModuleName)
                   (Language.PureScript.Sugar.Names.Env.primEnv14
                      @ (Language.PureScript.Kinds.Kind,
                         Language.PureScript.Environment.TypeKind)
                      (GHC.Types.[]
                         @ (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.TypeName,
                            ([Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ConstructorName],
                             Language.PureScript.Names.ModuleName)))
                      Language.PureScript.Environment.primRowListTypes)) -}
e3dca6e5932ffc033ffae1b4d7d1dc4b
  primEnv33 :: Language.PureScript.AST.SourcePos.SourceSpan
  {- Strictness: m,
     Unfolding: (Language.PureScript.AST.SourcePos.SourceSpan
                   Language.PureScript.Sugar.Names.Env.primEnv34
                   Language.PureScript.AST.SourcePos.internalModuleSourceSpan1
                   Language.PureScript.AST.SourcePos.internalModuleSourceSpan1) -}
2121f89d8e38dfeb9663148944d8373f
  primEnv34 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Sugar.Names.Env.primEnv35) -}
0b6c6cb8a12b7ceab36f548dc6dbfe70
  primEnv35 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("<Prim.RowList>"#) -}
1e3c49a97eec678609b3c67c6e648da0
  primEnv36 ::
    (Language.PureScript.Names.ModuleName,
     (Language.PureScript.AST.SourcePos.SourceSpan,
      Language.PureScript.Sugar.Names.Env.Imports,
      Language.PureScript.Sugar.Names.Env.Exports))
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Constants.$bPrimRow1
                    `cast`
                  (Sym (Language.PureScript.Names.N:ModuleName[0])),
                  Language.PureScript.Sugar.Names.Env.primEnv37)) -}
d13c869456b277053cf72404f947080a
  primEnv37 ::
    (Language.PureScript.AST.SourcePos.SourceSpan,
     Language.PureScript.Sugar.Names.Env.Imports,
     Language.PureScript.Sugar.Names.Env.Exports)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Sugar.Names.Env.primEnv42,
                  Language.PureScript.Sugar.Names.Env.nullImports,
                  Language.PureScript.Sugar.Names.Env.primEnv38)) -}
9aa1214f4b2011c5f88832fc51ad2d0b
  primEnv38 :: Language.PureScript.Sugar.Names.Env.Exports
  {- Strictness: m,
     Unfolding: (Language.PureScript.Sugar.Names.Env.Exports
                   Language.PureScript.Sugar.Names.Env.primEnv41
                   (Data.Map.Internal.Tip
                      @ (Language.PureScript.Names.OpName
                           'Language.PureScript.Names.TypeOpName)
                      @ Language.PureScript.Names.ModuleName)
                   Language.PureScript.Sugar.Names.Env.primEnv40
                   (Data.Map.Internal.Tip
                      @ Language.PureScript.Names.Ident
                      @ Language.PureScript.Names.ModuleName)
                   (Data.Map.Internal.Tip
                      @ (Language.PureScript.Names.OpName
                           'Language.PureScript.Names.ValueOpName)
                      @ Language.PureScript.Names.ModuleName)
                   Language.PureScript.Sugar.Names.Env.primEnv39) -}
a32b7b41995282b549a4601907ef7cb4
  primEnv39 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.KindName)
      Language.PureScript.Names.ModuleName
  {- Unfolding: (Language.PureScript.Sugar.Names.Env.$sfromList1
                   @ Language.PureScript.Names.ModuleName
                   (GHC.Types.[]
                      @ (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.KindName,
                         Language.PureScript.Names.ModuleName))) -}
5fc08df2818119bb2f0c96573381af24
  primEnv4 ::
    [(Language.PureScript.Names.ModuleName,
      (Language.PureScript.AST.SourcePos.SourceSpan,
       Language.PureScript.Sugar.Names.Env.Imports,
       Language.PureScript.Sugar.Names.Env.Exports))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.ModuleName,
                      (Language.PureScript.AST.SourcePos.SourceSpan,
                       Language.PureScript.Sugar.Names.Env.Imports,
                       Language.PureScript.Sugar.Names.Env.Exports))
                   Language.PureScript.Sugar.Names.Env.primEnv27
                   Language.PureScript.Sugar.Names.Env.primEnv5) -}
4aaf9165c3a138e498cb07a10c4de60a
  primEnv40 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
      Language.PureScript.Names.ModuleName
  {- Unfolding: (Language.PureScript.Sugar.Names.Env.$sfromList2
                   @ Language.PureScript.Names.ModuleName
                   (Language.PureScript.Sugar.Names.Env.primEnv12
                      @ Language.PureScript.Environment.TypeClassData
                      (GHC.Types.[]
                         @ (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ClassName,
                            Language.PureScript.Names.ModuleName))
                      Language.PureScript.Environment.primRowClasses)) -}
7f196bd01013d62c0b33e1d1abd402e1
  primEnv41 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName)
      ([Language.PureScript.Names.ProperName
          'Language.PureScript.Names.ConstructorName],
       Language.PureScript.Names.ModuleName)
  {- Unfolding: (Language.PureScript.Sugar.Names.Env.$sfromList3
                   @ ([Language.PureScript.Names.ProperName
                         'Language.PureScript.Names.ConstructorName],
                      Language.PureScript.Names.ModuleName)
                   (Language.PureScript.Sugar.Names.Env.primEnv14
                      @ (Language.PureScript.Kinds.Kind,
                         Language.PureScript.Environment.TypeKind)
                      (GHC.Types.[]
                         @ (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.TypeName,
                            ([Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ConstructorName],
                             Language.PureScript.Names.ModuleName)))
                      Language.PureScript.Environment.primRowTypes)) -}
6f69333ae05ce10f4b6de25e17a3d106
  primEnv42 :: Language.PureScript.AST.SourcePos.SourceSpan
  {- Strictness: m,
     Unfolding: (Language.PureScript.AST.SourcePos.SourceSpan
                   Language.PureScript.Sugar.Names.Env.primEnv43
                   Language.PureScript.AST.SourcePos.internalModuleSourceSpan1
                   Language.PureScript.AST.SourcePos.internalModuleSourceSpan1) -}
9b061b7584fb237b36cb9b82cd29dcb6
  primEnv43 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Sugar.Names.Env.primEnv44) -}
777f57b8934e7b627d303fcbdb99f027
  primEnv44 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("<Prim.Row>"#) -}
2c7fefa2452bb81f004b728c57d9ab9d
  primEnv45 ::
    (Language.PureScript.Names.ModuleName,
     (Language.PureScript.AST.SourcePos.SourceSpan,
      Language.PureScript.Sugar.Names.Env.Imports,
      Language.PureScript.Sugar.Names.Env.Exports))
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Constants.$bPrimOrdering1
                    `cast`
                  (Sym (Language.PureScript.Names.N:ModuleName[0])),
                  Language.PureScript.Sugar.Names.Env.primEnv46)) -}
fe4fbf1edadba36be17779cddeb739fb
  primEnv46 ::
    (Language.PureScript.AST.SourcePos.SourceSpan,
     Language.PureScript.Sugar.Names.Env.Imports,
     Language.PureScript.Sugar.Names.Env.Exports)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Sugar.Names.Env.primEnv51,
                  Language.PureScript.Sugar.Names.Env.nullImports,
                  Language.PureScript.Sugar.Names.Env.primEnv47)) -}
ded2cb4b6a96840e0b4afb078ace8540
  primEnv47 :: Language.PureScript.Sugar.Names.Env.Exports
  {- Strictness: m,
     Unfolding: (Language.PureScript.Sugar.Names.Env.Exports
                   Language.PureScript.Sugar.Names.Env.primEnv50
                   (Data.Map.Internal.Tip
                      @ (Language.PureScript.Names.OpName
                           'Language.PureScript.Names.TypeOpName)
                      @ Language.PureScript.Names.ModuleName)
                   Language.PureScript.Sugar.Names.Env.primEnv49
                   (Data.Map.Internal.Tip
                      @ Language.PureScript.Names.Ident
                      @ Language.PureScript.Names.ModuleName)
                   (Data.Map.Internal.Tip
                      @ (Language.PureScript.Names.OpName
                           'Language.PureScript.Names.ValueOpName)
                      @ Language.PureScript.Names.ModuleName)
                   Language.PureScript.Sugar.Names.Env.primEnv48) -}
0bc25a243dd6bb2f992ef1eb84271b2c
  primEnv48 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.KindName)
      Language.PureScript.Names.ModuleName
  {- Unfolding: (Language.PureScript.Sugar.Names.Env.$sfromList1
                   @ Language.PureScript.Names.ModuleName
                   (Language.PureScript.Sugar.Names.Env.primEnv_go3
                      (GHC.Types.[]
                         @ (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.KindName,
                            Language.PureScript.Names.ModuleName))
                      Language.PureScript.Environment.primOrderingKinds)) -}
a7ebca9792ad26e2451f7700b459a759
  primEnv49 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
      Language.PureScript.Names.ModuleName
  {- Unfolding: (Language.PureScript.Sugar.Names.Env.$sfromList2
                   @ Language.PureScript.Names.ModuleName
                   (GHC.Types.[]
                      @ (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.ClassName,
                         Language.PureScript.Names.ModuleName))) -}
3a6f149007c64a946197292c857631a2
  primEnv5 ::
    [(Language.PureScript.Names.ModuleName,
      (Language.PureScript.AST.SourcePos.SourceSpan,
       Language.PureScript.Sugar.Names.Env.Imports,
       Language.PureScript.Sugar.Names.Env.Exports))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.ModuleName,
                      (Language.PureScript.AST.SourcePos.SourceSpan,
                       Language.PureScript.Sugar.Names.Env.Imports,
                       Language.PureScript.Sugar.Names.Env.Exports))
                   Language.PureScript.Sugar.Names.Env.primEnv18
                   Language.PureScript.Sugar.Names.Env.primEnv6) -}
2fabf2477a7e59d270f830a27fbc6e0e
  primEnv50 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName)
      ([Language.PureScript.Names.ProperName
          'Language.PureScript.Names.ConstructorName],
       Language.PureScript.Names.ModuleName)
  {- Unfolding: (Language.PureScript.Sugar.Names.Env.$sfromList3
                   @ ([Language.PureScript.Names.ProperName
                         'Language.PureScript.Names.ConstructorName],
                      Language.PureScript.Names.ModuleName)
                   (Language.PureScript.Sugar.Names.Env.primEnv14
                      @ (Language.PureScript.Kinds.Kind,
                         Language.PureScript.Environment.TypeKind)
                      (GHC.Types.[]
                         @ (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.TypeName,
                            ([Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ConstructorName],
                             Language.PureScript.Names.ModuleName)))
                      Language.PureScript.Environment.primOrderingTypes)) -}
2964d71cc4a38a11a32c6ef2a0ed74db
  primEnv51 :: Language.PureScript.AST.SourcePos.SourceSpan
  {- Strictness: m,
     Unfolding: (Language.PureScript.AST.SourcePos.SourceSpan
                   Language.PureScript.Sugar.Names.Env.primEnv52
                   Language.PureScript.AST.SourcePos.internalModuleSourceSpan1
                   Language.PureScript.AST.SourcePos.internalModuleSourceSpan1) -}
5e1e19d283debc12879df9588f57899c
  primEnv52 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Sugar.Names.Env.primEnv53) -}
7aaaac14d340e6b4bf83b0639896a3ef
  primEnv53 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("<Prim.Ordering>"#) -}
610e337e163eef61c7fb68dac1a88228
  primEnv54 ::
    (Language.PureScript.Names.ModuleName,
     (Language.PureScript.AST.SourcePos.SourceSpan,
      Language.PureScript.Sugar.Names.Env.Imports,
      Language.PureScript.Sugar.Names.Env.Exports))
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Constants.$bPartial4
                    `cast`
                  (Sym (Language.PureScript.Names.N:ModuleName[0])),
                  Language.PureScript.Sugar.Names.Env.primEnv55)) -}
5c6010c8361c6956fd512caf21864152
  primEnv55 ::
    (Language.PureScript.AST.SourcePos.SourceSpan,
     Language.PureScript.Sugar.Names.Env.Imports,
     Language.PureScript.Sugar.Names.Env.Exports)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Sugar.Names.Env.primEnv56,
                  Language.PureScript.Sugar.Names.Env.nullImports,
                  Language.PureScript.Sugar.Names.Env.primExports)) -}
e4dc20da0a92b5df867c1e9d69a9f8ac
  primEnv56 :: Language.PureScript.AST.SourcePos.SourceSpan
  {- Strictness: m,
     Unfolding: (Language.PureScript.AST.SourcePos.SourceSpan
                   Language.PureScript.Sugar.Names.Env.primEnv57
                   Language.PureScript.AST.SourcePos.internalModuleSourceSpan1
                   Language.PureScript.AST.SourcePos.internalModuleSourceSpan1) -}
68ffd37a11b0713fb7af85dc9df44572
  primEnv57 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Sugar.Names.Env.primEnv58) -}
cc3a4a410da28a445f4c6af643b6e427
  primEnv58 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("<Prim>"#) -}
fa4dbfb9a81aeccf3592d332d822b33d
  primEnv6 ::
    [(Language.PureScript.Names.ModuleName,
      (Language.PureScript.AST.SourcePos.SourceSpan,
       Language.PureScript.Sugar.Names.Env.Imports,
       Language.PureScript.Sugar.Names.Env.Exports))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.ModuleName,
                      (Language.PureScript.AST.SourcePos.SourceSpan,
                       Language.PureScript.Sugar.Names.Env.Imports,
                       Language.PureScript.Sugar.Names.Env.Exports))
                   Language.PureScript.Sugar.Names.Env.primEnv7
                   (GHC.Types.[]
                      @ (Language.PureScript.Names.ModuleName,
                         (Language.PureScript.AST.SourcePos.SourceSpan,
                          Language.PureScript.Sugar.Names.Env.Imports,
                          Language.PureScript.Sugar.Names.Env.Exports)))) -}
f200e5291b8ce8ece2f5cf4dc97d2df5
  primEnv7 ::
    (Language.PureScript.Names.ModuleName,
     (Language.PureScript.AST.SourcePos.SourceSpan,
      Language.PureScript.Sugar.Names.Env.Imports,
      Language.PureScript.Sugar.Names.Env.Exports))
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Constants.$bFail4
                    `cast`
                  (Sym (Language.PureScript.Names.N:ModuleName[0])),
                  Language.PureScript.Sugar.Names.Env.primEnv8)) -}
0e2f5dc7c70d0fdd09823835c4edc551
  primEnv8 ::
    (Language.PureScript.AST.SourcePos.SourceSpan,
     Language.PureScript.Sugar.Names.Env.Imports,
     Language.PureScript.Sugar.Names.Env.Exports)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Sugar.Names.Env.primEnv15,
                  Language.PureScript.Sugar.Names.Env.nullImports,
                  Language.PureScript.Sugar.Names.Env.primEnv9)) -}
4ea15533285ac8bbeb574a0c3a7a43e8
  primEnv9 :: Language.PureScript.Sugar.Names.Env.Exports
  {- Strictness: m,
     Unfolding: (Language.PureScript.Sugar.Names.Env.Exports
                   Language.PureScript.Sugar.Names.Env.primEnv13
                   (Data.Map.Internal.Tip
                      @ (Language.PureScript.Names.OpName
                           'Language.PureScript.Names.TypeOpName)
                      @ Language.PureScript.Names.ModuleName)
                   Language.PureScript.Sugar.Names.Env.primEnv11
                   (Data.Map.Internal.Tip
                      @ Language.PureScript.Names.Ident
                      @ Language.PureScript.Names.ModuleName)
                   (Data.Map.Internal.Tip
                      @ (Language.PureScript.Names.OpName
                           'Language.PureScript.Names.ValueOpName)
                      @ Language.PureScript.Names.ModuleName)
                   Language.PureScript.Sugar.Names.Env.primEnv10) -}
3c9ec7065f1c0a7fb463a7bfe0955b88
  primEnv_go3 ::
    [(Language.PureScript.Names.ProperName
        'Language.PureScript.Names.KindName,
      Language.PureScript.Names.ModuleName)]
    -> Data.Set.Internal.Set
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.KindName))
    -> [(Language.PureScript.Names.ProperName
           'Language.PureScript.Names.KindName,
         Language.PureScript.Names.ModuleName)]
  {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
68893fd365ab9db7024951760d78e992
  primExports :: Language.PureScript.Sugar.Names.Env.Exports
  {- Strictness: m,
     Unfolding: (Language.PureScript.Sugar.Names.Env.Exports
                   Language.PureScript.Sugar.Names.Env.primExports3
                   (Data.Map.Internal.Tip
                      @ (Language.PureScript.Names.OpName
                           'Language.PureScript.Names.TypeOpName)
                      @ Language.PureScript.Names.ModuleName)
                   Language.PureScript.Sugar.Names.Env.primExports2
                   (Data.Map.Internal.Tip
                      @ Language.PureScript.Names.Ident
                      @ Language.PureScript.Names.ModuleName)
                   (Data.Map.Internal.Tip
                      @ (Language.PureScript.Names.OpName
                           'Language.PureScript.Names.ValueOpName)
                      @ Language.PureScript.Names.ModuleName)
                   Language.PureScript.Sugar.Names.Env.primExports1) -}
cfb3e7c37fef5a60fc217a0ea20e9b00
  primExports1 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.KindName)
      Language.PureScript.Names.ModuleName
  {- Unfolding: (Language.PureScript.Sugar.Names.Env.$sfromList1
                   @ Language.PureScript.Names.ModuleName
                   (Language.PureScript.Sugar.Names.Env.primEnv_go3
                      (GHC.Types.[]
                         @ (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.KindName,
                            Language.PureScript.Names.ModuleName))
                      Language.PureScript.Environment.primKinds)) -}
e50dbb3be6c474f90512845d1bbe9bfd
  primExports2 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
      Language.PureScript.Names.ModuleName
  {- Unfolding: (Language.PureScript.Sugar.Names.Env.$sfromList2
                   @ Language.PureScript.Names.ModuleName
                   (Language.PureScript.Sugar.Names.Env.primEnv12
                      @ Language.PureScript.Environment.TypeClassData
                      (GHC.Types.[]
                         @ (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ClassName,
                            Language.PureScript.Names.ModuleName))
                      Language.PureScript.Environment.primClasses)) -}
781f249fbc92cd2f626efb15f7444597
  primExports3 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName)
      ([Language.PureScript.Names.ProperName
          'Language.PureScript.Names.ConstructorName],
       Language.PureScript.Names.ModuleName)
  {- Unfolding: (Language.PureScript.Sugar.Names.Env.$sfromList3
                   @ ([Language.PureScript.Names.ProperName
                         'Language.PureScript.Names.ConstructorName],
                      Language.PureScript.Names.ModuleName)
                   (Language.PureScript.Sugar.Names.Env.primEnv14
                      @ (Language.PureScript.Kinds.Kind,
                         Language.PureScript.Environment.TypeKind)
                      (GHC.Types.[]
                         @ (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.TypeName,
                            ([Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ConstructorName],
                             Language.PureScript.Names.ModuleName)))
                      Language.PureScript.Environment.primTypes)) -}
instance GHC.Classes.Eq [Language.PureScript.Sugar.Names.Env.ExportMode]
  = Language.PureScript.Sugar.Names.Env.$fEqExportMode
instance GHC.Classes.Eq [Language.PureScript.Sugar.Names.Env.ImportProvenance]
  = Language.PureScript.Sugar.Names.Env.$fEqImportProvenance
instance GHC.Classes.Eq [Language.PureScript.Sugar.Names.Env.ImportRecord]
  = Language.PureScript.Sugar.Names.Env.$fEqImportRecord
instance GHC.Classes.Ord [Language.PureScript.Sugar.Names.Env.ImportProvenance]
  = Language.PureScript.Sugar.Names.Env.$fOrdImportProvenance
instance GHC.Classes.Ord [Language.PureScript.Sugar.Names.Env.ImportRecord]
  = Language.PureScript.Sugar.Names.Env.$fOrdImportRecord
instance GHC.Show.Show [Language.PureScript.Sugar.Names.Env.ExportMode]
  = Language.PureScript.Sugar.Names.Env.$fShowExportMode
instance GHC.Show.Show [Language.PureScript.Sugar.Names.Env.Exports]
  = Language.PureScript.Sugar.Names.Env.$fShowExports
instance GHC.Show.Show [Language.PureScript.Sugar.Names.Env.ImportProvenance]
  = Language.PureScript.Sugar.Names.Env.$fShowImportProvenance
instance GHC.Show.Show [Language.PureScript.Sugar.Names.Env.ImportRecord]
  = Language.PureScript.Sugar.Names.Env.$fShowImportRecord
instance GHC.Show.Show [Language.PureScript.Sugar.Names.Env.Imports]
  = Language.PureScript.Sugar.Names.Env.$fShowImports
"SPEC $cshow @ (OpName 'TypeOpName)" forall ($dShow :: GHC.Show.Show
                                                         (Language.PureScript.Names.OpName
                                                            'Language.PureScript.Names.TypeOpName))
  Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$cshow @ (Language.PureScript.Names.OpName
                                                                     'Language.PureScript.Names.TypeOpName)
                                                                $dShow
  = Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshow1
"SPEC $cshow @ (OpName 'ValueOpName)" forall ($dShow :: GHC.Show.Show
                                                          (Language.PureScript.Names.OpName
                                                             'Language.PureScript.Names.ValueOpName))
  Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$cshow @ (Language.PureScript.Names.OpName
                                                                     'Language.PureScript.Names.ValueOpName)
                                                                $dShow
  = Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshow5
"SPEC $cshow @ (ProperName 'ClassName)" forall ($dShow :: GHC.Show.Show
                                                            (Language.PureScript.Names.ProperName
                                                               'Language.PureScript.Names.ClassName))
  Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$cshow @ (Language.PureScript.Names.ProperName
                                                                     'Language.PureScript.Names.ClassName)
                                                                $dShow
  = Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshow3
"SPEC $cshow @ (ProperName 'ConstructorName)" forall ($dShow :: GHC.Show.Show
                                                                  (Language.PureScript.Names.ProperName
                                                                     'Language.PureScript.Names.ConstructorName))
  Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$cshow @ (Language.PureScript.Names.ProperName
                                                                     'Language.PureScript.Names.ConstructorName)
                                                                $dShow
  = Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshow2
"SPEC $cshow @ (ProperName 'KindName)" forall ($dShow :: GHC.Show.Show
                                                           (Language.PureScript.Names.ProperName
                                                              'Language.PureScript.Names.KindName))
  Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$cshow @ (Language.PureScript.Names.ProperName
                                                                     'Language.PureScript.Names.KindName)
                                                                $dShow
  = Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshow6
"SPEC $cshow @ (ProperName 'TypeName)" forall ($dShow :: GHC.Show.Show
                                                           (Language.PureScript.Names.ProperName
                                                              'Language.PureScript.Names.TypeName))
  Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$cshow @ (Language.PureScript.Names.ProperName
                                                                     'Language.PureScript.Names.TypeName)
                                                                $dShow
  = Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshow
"SPEC $cshow @ Ident" forall ($dShow :: GHC.Show.Show
                                          Language.PureScript.Names.Ident)
  Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$cshow @ Language.PureScript.Names.Ident
                                                                $dShow
  = Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshow4
"SPEC $cshowList @ (OpName 'TypeOpName)" forall ($dShow :: GHC.Show.Show
                                                             (Language.PureScript.Names.OpName
                                                                'Language.PureScript.Names.TypeOpName))
  Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$cshowList @ (Language.PureScript.Names.OpName
                                                                         'Language.PureScript.Names.TypeOpName)
                                                                    $dShow
  = Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshowList1
"SPEC $cshowList @ (OpName 'ValueOpName)" forall ($dShow :: GHC.Show.Show
                                                              (Language.PureScript.Names.OpName
                                                                 'Language.PureScript.Names.ValueOpName))
  Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$cshowList @ (Language.PureScript.Names.OpName
                                                                         'Language.PureScript.Names.ValueOpName)
                                                                    $dShow
  = Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshowList5
"SPEC $cshowList @ (ProperName 'ClassName)" forall ($dShow :: GHC.Show.Show
                                                                (Language.PureScript.Names.ProperName
                                                                   'Language.PureScript.Names.ClassName))
  Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$cshowList @ (Language.PureScript.Names.ProperName
                                                                         'Language.PureScript.Names.ClassName)
                                                                    $dShow
  = Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshowList3
"SPEC $cshowList @ (ProperName 'ConstructorName)" forall ($dShow :: GHC.Show.Show
                                                                      (Language.PureScript.Names.ProperName
                                                                         'Language.PureScript.Names.ConstructorName))
  Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$cshowList @ (Language.PureScript.Names.ProperName
                                                                         'Language.PureScript.Names.ConstructorName)
                                                                    $dShow
  = Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshowList2
"SPEC $cshowList @ (ProperName 'KindName)" forall ($dShow :: GHC.Show.Show
                                                               (Language.PureScript.Names.ProperName
                                                                  'Language.PureScript.Names.KindName))
  Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$cshowList @ (Language.PureScript.Names.ProperName
                                                                         'Language.PureScript.Names.KindName)
                                                                    $dShow
  = Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshowList6
"SPEC $cshowList @ (ProperName 'TypeName)" forall ($dShow :: GHC.Show.Show
                                                               (Language.PureScript.Names.ProperName
                                                                  'Language.PureScript.Names.TypeName))
  Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$cshowList @ (Language.PureScript.Names.ProperName
                                                                         'Language.PureScript.Names.TypeName)
                                                                    $dShow
  = Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshowList
"SPEC $cshowList @ Ident" forall ($dShow :: GHC.Show.Show
                                              Language.PureScript.Names.Ident)
  Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$cshowList @ Language.PureScript.Names.Ident
                                                                    $dShow
  = Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshowList4
"SPEC $cshowsPrec @ (OpName 'TypeOpName)" forall ($dShow :: GHC.Show.Show
                                                              (Language.PureScript.Names.OpName
                                                                 'Language.PureScript.Names.TypeOpName))
  Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$cshowsPrec @ (Language.PureScript.Names.OpName
                                                                          'Language.PureScript.Names.TypeOpName)
                                                                     $dShow
  = Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshowsPrec1
"SPEC $cshowsPrec @ (OpName 'ValueOpName)" forall ($dShow :: GHC.Show.Show
                                                               (Language.PureScript.Names.OpName
                                                                  'Language.PureScript.Names.ValueOpName))
  Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$cshowsPrec @ (Language.PureScript.Names.OpName
                                                                          'Language.PureScript.Names.ValueOpName)
                                                                     $dShow
  = Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshowsPrec5
"SPEC $cshowsPrec @ (ProperName 'ClassName)" forall ($dShow :: GHC.Show.Show
                                                                 (Language.PureScript.Names.ProperName
                                                                    'Language.PureScript.Names.ClassName))
  Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$cshowsPrec @ (Language.PureScript.Names.ProperName
                                                                          'Language.PureScript.Names.ClassName)
                                                                     $dShow
  = Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshowsPrec3
"SPEC $cshowsPrec @ (ProperName 'ConstructorName)" forall ($dShow :: GHC.Show.Show
                                                                       (Language.PureScript.Names.ProperName
                                                                          'Language.PureScript.Names.ConstructorName))
  Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$cshowsPrec @ (Language.PureScript.Names.ProperName
                                                                          'Language.PureScript.Names.ConstructorName)
                                                                     $dShow
  = Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshowsPrec2
"SPEC $cshowsPrec @ (ProperName 'KindName)" forall ($dShow :: GHC.Show.Show
                                                                (Language.PureScript.Names.ProperName
                                                                   'Language.PureScript.Names.KindName))
  Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$cshowsPrec @ (Language.PureScript.Names.ProperName
                                                                          'Language.PureScript.Names.KindName)
                                                                     $dShow
  = Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshowsPrec6
"SPEC $cshowsPrec @ (ProperName 'TypeName)" forall ($dShow :: GHC.Show.Show
                                                                (Language.PureScript.Names.ProperName
                                                                   'Language.PureScript.Names.TypeName))
  Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$cshowsPrec @ (Language.PureScript.Names.ProperName
                                                                          'Language.PureScript.Names.TypeName)
                                                                     $dShow
  = Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshowsPrec
"SPEC $cshowsPrec @ Ident" forall ($dShow :: GHC.Show.Show
                                               Language.PureScript.Names.Ident)
  Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$cshowsPrec @ Language.PureScript.Names.Ident
                                                                     $dShow
  = Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshowsPrec4
"SPEC $fShowImportRecord @ (OpName 'TypeOpName)" forall ($dShow :: GHC.Show.Show
                                                                     (Language.PureScript.Names.OpName
                                                                        'Language.PureScript.Names.TypeOpName))
  Language.PureScript.Sugar.Names.Env.$fShowImportRecord @ (Language.PureScript.Names.OpName
                                                              'Language.PureScript.Names.TypeOpName)
                                                         $dShow
  = Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$fShowImportRecord1
"SPEC $fShowImportRecord @ (OpName 'ValueOpName)" forall ($dShow :: GHC.Show.Show
                                                                      (Language.PureScript.Names.OpName
                                                                         'Language.PureScript.Names.ValueOpName))
  Language.PureScript.Sugar.Names.Env.$fShowImportRecord @ (Language.PureScript.Names.OpName
                                                              'Language.PureScript.Names.ValueOpName)
                                                         $dShow
  = Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$fShowImportRecord5
"SPEC $fShowImportRecord @ (ProperName 'ClassName)" forall ($dShow :: GHC.Show.Show
                                                                        (Language.PureScript.Names.ProperName
                                                                           'Language.PureScript.Names.ClassName))
  Language.PureScript.Sugar.Names.Env.$fShowImportRecord @ (Language.PureScript.Names.ProperName
                                                              'Language.PureScript.Names.ClassName)
                                                         $dShow
  = Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$fShowImportRecord3
"SPEC $fShowImportRecord @ (ProperName 'ConstructorName)" forall ($dShow :: GHC.Show.Show
                                                                              (Language.PureScript.Names.ProperName
                                                                                 'Language.PureScript.Names.ConstructorName))
  Language.PureScript.Sugar.Names.Env.$fShowImportRecord @ (Language.PureScript.Names.ProperName
                                                              'Language.PureScript.Names.ConstructorName)
                                                         $dShow
  = Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$fShowImportRecord2
"SPEC $fShowImportRecord @ (ProperName 'KindName)" forall ($dShow :: GHC.Show.Show
                                                                       (Language.PureScript.Names.ProperName
                                                                          'Language.PureScript.Names.KindName))
  Language.PureScript.Sugar.Names.Env.$fShowImportRecord @ (Language.PureScript.Names.ProperName
                                                              'Language.PureScript.Names.KindName)
                                                         $dShow
  = Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$fShowImportRecord6
"SPEC $fShowImportRecord @ (ProperName 'TypeName)" forall ($dShow :: GHC.Show.Show
                                                                       (Language.PureScript.Names.ProperName
                                                                          'Language.PureScript.Names.TypeName))
  Language.PureScript.Sugar.Names.Env.$fShowImportRecord @ (Language.PureScript.Names.ProperName
                                                              'Language.PureScript.Names.TypeName)
                                                         $dShow
  = Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$fShowImportRecord
"SPEC $fShowImportRecord @ Ident" forall ($dShow :: GHC.Show.Show
                                                      Language.PureScript.Names.Ident)
  Language.PureScript.Sugar.Names.Env.$fShowImportRecord @ Language.PureScript.Names.Ident
                                                         $dShow
  = Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$fShowImportRecord4
"SPEC/Language.PureScript.Sugar.Names.Env $fShow(,) @ [ProperName
                                                        'ConstructorName] @ ModuleName" [orphan] forall (v1 :: GHC.Show.Show
                                                                                                                                                                                   Language.PureScript.Names.ModuleName)
                                                                                                                                                                          (v :: GHC.Show.Show
                                                                                                                                                                                  [Language.PureScript.Names.ProperName
                                                                                                                                                                                     'Language.PureScript.Names.ConstructorName])
  GHC.Show.$fShow(,) @ [Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ConstructorName]
                     @ Language.PureScript.Names.ModuleName
                     v
                     v1
  = Language.PureScript.Sugar.Names.Env.$s$fShow(,)
"SPEC/Language.PureScript.Sugar.Names.Env $fShowQualified @ (OpName
                                                              'TypeOpName)" [orphan] forall (v :: GHC.Show.Show
                                                                                                                                                                        (Language.PureScript.Names.OpName
                                                                                                                                                                           'Language.PureScript.Names.TypeOpName))
  Language.PureScript.Names.$fShowQualified @ (Language.PureScript.Names.OpName
                                                 'Language.PureScript.Names.TypeOpName)
                                            v
  = Language.PureScript.Sugar.Names.Env.$s$fShowMap_$cshowsPrec_$s$fShowQualified5
"SPEC/Language.PureScript.Sugar.Names.Env $fShowQualified @ (OpName
                                                              'ValueOpName)" [orphan] forall (v :: GHC.Show.Show
                                                                                                                                                                         (Language.PureScript.Names.OpName
                                                                                                                                                                            'Language.PureScript.Names.ValueOpName))
  Language.PureScript.Names.$fShowQualified @ (Language.PureScript.Names.OpName
                                                 'Language.PureScript.Names.ValueOpName)
                                            v
  = Language.PureScript.Sugar.Names.Env.$s$fShowMap_$cshowsPrec_$s$fShowQualified1
"SPEC/Language.PureScript.Sugar.Names.Env $fShowQualified @ (ProperName
                                                              'ClassName)" [orphan] forall (v :: GHC.Show.Show
                                                                                                                                                                           (Language.PureScript.Names.ProperName
                                                                                                                                                                              'Language.PureScript.Names.ClassName))
  Language.PureScript.Names.$fShowQualified @ (Language.PureScript.Names.ProperName
                                                 'Language.PureScript.Names.ClassName)
                                            v
  = Language.PureScript.Sugar.Names.Env.$s$fShowMap_$cshowsPrec_$s$fShowQualified3
"SPEC/Language.PureScript.Sugar.Names.Env $fShowQualified @ (ProperName
                                                              'ConstructorName)" [orphan] forall (v :: GHC.Show.Show
                                                                                                                                                                                 (Language.PureScript.Names.ProperName
                                                                                                                                                                                    'Language.PureScript.Names.ConstructorName))
  Language.PureScript.Names.$fShowQualified @ (Language.PureScript.Names.ProperName
                                                 'Language.PureScript.Names.ConstructorName)
                                            v
  = Language.PureScript.Sugar.Names.Env.$s$fShowMap_$cshowsPrec_$s$fShowQualified4
"SPEC/Language.PureScript.Sugar.Names.Env $fShowQualified @ (ProperName
                                                              'KindName)" [orphan] forall (v :: GHC.Show.Show
                                                                                                                                                                          (Language.PureScript.Names.ProperName
                                                                                                                                                                             'Language.PureScript.Names.KindName))
  Language.PureScript.Names.$fShowQualified @ (Language.PureScript.Names.ProperName
                                                 'Language.PureScript.Names.KindName)
                                            v
  = Language.PureScript.Sugar.Names.Env.$s$fShowMap_$cshowsPrec_$s$fShowQualified
"SPEC/Language.PureScript.Sugar.Names.Env $fShowQualified @ (ProperName
                                                              'TypeName)" [orphan] forall (v :: GHC.Show.Show
                                                                                                                                                                          (Language.PureScript.Names.ProperName
                                                                                                                                                                             'Language.PureScript.Names.TypeName))
  Language.PureScript.Names.$fShowQualified @ (Language.PureScript.Names.ProperName
                                                 'Language.PureScript.Names.TypeName)
                                            v
  = Language.PureScript.Sugar.Names.Env.$s$fShowMap_$cshowsPrec_$s$fShowQualified6
"SPEC/Language.PureScript.Sugar.Names.Env $fShowQualified @ Ident" [orphan] forall (v :: GHC.Show.Show
                                                                                           Language.PureScript.Names.Ident)
  Language.PureScript.Names.$fShowQualified @ Language.PureScript.Names.Ident
                                            v
  = Language.PureScript.Sugar.Names.Env.$s$fShowMap_$cshowsPrec_$s$fShowQualified2
"SPEC/Language.PureScript.Sugar.Names.Env $fShowQualified_$cshowList @ (OpName
                                                                         'TypeOpName)" [orphan] forall ($dShow :: GHC.Show.Show
                                                                                                                                                                                                   (Language.PureScript.Names.OpName
                                                                                                                                                                                                      'Language.PureScript.Names.TypeOpName))
  Language.PureScript.Names.$fShowQualified_$cshowList @ (Language.PureScript.Names.OpName
                                                            'Language.PureScript.Names.TypeOpName)
                                                       $dShow
  = Language.PureScript.Sugar.Names.Env.$s$fShowQualified_$cshowList5
"SPEC/Language.PureScript.Sugar.Names.Env $fShowQualified_$cshowList @ (OpName
                                                                         'ValueOpName)" [orphan] forall ($dShow :: GHC.Show.Show
                                                                                                                                                                                                    (Language.PureScript.Names.OpName
                                                                                                                                                                                                       'Language.PureScript.Names.ValueOpName))
  Language.PureScript.Names.$fShowQualified_$cshowList @ (Language.PureScript.Names.OpName
                                                            'Language.PureScript.Names.ValueOpName)
                                                       $dShow
  = Language.PureScript.Sugar.Names.Env.$s$fShowQualified_$cshowList1
"SPEC/Language.PureScript.Sugar.Names.Env $fShowQualified_$cshowList @ (ProperName
                                                                         'ClassName)" [orphan] forall ($dShow :: GHC.Show.Show
                                                                                                                                                                                                      (Language.PureScript.Names.ProperName
                                                                                                                                                                                                         'Language.PureScript.Names.ClassName))
  Language.PureScript.Names.$fShowQualified_$cshowList @ (Language.PureScript.Names.ProperName
                                                            'Language.PureScript.Names.ClassName)
                                                       $dShow
  = Language.PureScript.Sugar.Names.Env.$s$fShowQualified_$cshowList3
"SPEC/Language.PureScript.Sugar.Names.Env $fShowQualified_$cshowList @ (ProperName
                                                                         'ConstructorName)" [orphan] forall ($dShow :: GHC.Show.Show
                                                                                                                                                                                                            (Language.PureScript.Names.ProperName
                                                                                                                                                                                                               'Language.PureScript.Names.ConstructorName))
  Language.PureScript.Names.$fShowQualified_$cshowList @ (Language.PureScript.Names.ProperName
                                                            'Language.PureScript.Names.ConstructorName)
                                                       $dShow
  = Language.PureScript.Sugar.Names.Env.$s$fShowQualified_$cshowList4
"SPEC/Language.PureScript.Sugar.Names.Env $fShowQualified_$cshowList @ (ProperName
                                                                         'KindName)" [orphan] forall ($dShow :: GHC.Show.Show
                                                                                                                                                                                                     (Language.PureScript.Names.ProperName
                                                                                                                                                                                                        'Language.PureScript.Names.KindName))
  Language.PureScript.Names.$fShowQualified_$cshowList @ (Language.PureScript.Names.ProperName
                                                            'Language.PureScript.Names.KindName)
                                                       $dShow
  = Language.PureScript.Sugar.Names.Env.$s$fShowQualified_$cshowList
"SPEC/Language.PureScript.Sugar.Names.Env $fShowQualified_$cshowList @ (ProperName
                                                                         'TypeName)" [orphan] forall ($dShow :: GHC.Show.Show
                                                                                                                                                                                                     (Language.PureScript.Names.ProperName
                                                                                                                                                                                                        'Language.PureScript.Names.TypeName))
  Language.PureScript.Names.$fShowQualified_$cshowList @ (Language.PureScript.Names.ProperName
                                                            'Language.PureScript.Names.TypeName)
                                                       $dShow
  = Language.PureScript.Sugar.Names.Env.$s$fShowQualified_$cshowList6
"SPEC/Language.PureScript.Sugar.Names.Env $fShowQualified_$cshowList @ Ident" [orphan] forall ($dShow :: GHC.Show.Show
                                                                                                           Language.PureScript.Names.Ident)
  Language.PureScript.Names.$fShowQualified_$cshowList @ Language.PureScript.Names.Ident
                                                       $dShow
  = Language.PureScript.Sugar.Names.Env.$s$fShowQualified_$cshowList2
"SPEC/Language.PureScript.Sugar.Names.Env $fShowQualified_$cshowsPrec @ (OpName
                                                                          'TypeOpName)" [orphan] [0] forall (w :: GHC.Show.Show
                                                                                                                                                                                                    (Language.PureScript.Names.OpName
                                                                                                                                                                                                       'Language.PureScript.Names.TypeOpName))
  Language.PureScript.Names.$fShowQualified_$cshowsPrec @ (Language.PureScript.Names.OpName
                                                             'Language.PureScript.Names.TypeOpName)
                                                        w
  = Language.PureScript.Sugar.Names.Env.$s$fShowQualified_$cshowsPrec5
"SPEC/Language.PureScript.Sugar.Names.Env $fShowQualified_$cshowsPrec @ (OpName
                                                                          'ValueOpName)" [orphan] [0] forall (w :: GHC.Show.Show
                                                                                                                                                                                                     (Language.PureScript.Names.OpName
                                                                                                                                                                                                        'Language.PureScript.Names.ValueOpName))
  Language.PureScript.Names.$fShowQualified_$cshowsPrec @ (Language.PureScript.Names.OpName
                                                             'Language.PureScript.Names.ValueOpName)
                                                        w
  = Language.PureScript.Sugar.Names.Env.$s$fShowQualified_$cshowsPrec1
"SPEC/Language.PureScript.Sugar.Names.Env $fShowQualified_$cshowsPrec @ (ProperName
                                                                          'ClassName)" [orphan] [0] forall (w :: GHC.Show.Show
                                                                                                                                                                                                       (Language.PureScript.Names.ProperName
                                                                                                                                                                                                          'Language.PureScript.Names.ClassName))
  Language.PureScript.Names.$fShowQualified_$cshowsPrec @ (Language.PureScript.Names.ProperName
                                                             'Language.PureScript.Names.ClassName)
                                                        w
  = Language.PureScript.Sugar.Names.Env.$s$fShowQualified_$cshowsPrec3
"SPEC/Language.PureScript.Sugar.Names.Env $fShowQualified_$cshowsPrec @ (ProperName
                                                                          'ConstructorName)" [orphan] [0] forall (w :: GHC.Show.Show
                                                                                                                                                                                                             (Language.PureScript.Names.ProperName
                                                                                                                                                                                                                'Language.PureScript.Names.ConstructorName))
  Language.PureScript.Names.$fShowQualified_$cshowsPrec @ (Language.PureScript.Names.ProperName
                                                             'Language.PureScript.Names.ConstructorName)
                                                        w
  = Language.PureScript.Sugar.Names.Env.$s$fShowQualified_$cshowsPrec4
"SPEC/Language.PureScript.Sugar.Names.Env $fShowQualified_$cshowsPrec @ (ProperName
                                                                          'KindName)" [orphan] [0] forall (w :: GHC.Show.Show
                                                                                                                                                                                                      (Language.PureScript.Names.ProperName
                                                                                                                                                                                                         'Language.PureScript.Names.KindName))
  Language.PureScript.Names.$fShowQualified_$cshowsPrec @ (Language.PureScript.Names.ProperName
                                                             'Language.PureScript.Names.KindName)
                                                        w
  = Language.PureScript.Sugar.Names.Env.$s$fShowQualified_$cshowsPrec
"SPEC/Language.PureScript.Sugar.Names.Env $fShowQualified_$cshowsPrec @ (ProperName
                                                                          'TypeName)" [orphan] [0] forall (w :: GHC.Show.Show
                                                                                                                                                                                                      (Language.PureScript.Names.ProperName
                                                                                                                                                                                                         'Language.PureScript.Names.TypeName))
  Language.PureScript.Names.$fShowQualified_$cshowsPrec @ (Language.PureScript.Names.ProperName
                                                             'Language.PureScript.Names.TypeName)
                                                        w
  = Language.PureScript.Sugar.Names.Env.$s$fShowQualified_$cshowsPrec6
"SPEC/Language.PureScript.Sugar.Names.Env $fShowQualified_$cshowsPrec @ Ident" [orphan] [0] forall (w :: GHC.Show.Show
                                                                                                           Language.PureScript.Names.Ident)
  Language.PureScript.Names.$fShowQualified_$cshowsPrec @ Language.PureScript.Names.Ident
                                                        w
  = Language.PureScript.Sugar.Names.Env.$s$fShowQualified_$cshowsPrec2
"SPEC/Language.PureScript.Sugar.Names.Env $fShow[] @ (ProperName
                                                       'ConstructorName)" [orphan] forall (v :: GHC.Show.Show
                                                                                                                                                                   (Language.PureScript.Names.ProperName
                                                                                                                                                                      'Language.PureScript.Names.ConstructorName))
  GHC.Show.$fShow[] @ (Language.PureScript.Names.ProperName
                         'Language.PureScript.Names.ConstructorName)
                    v
  = Language.PureScript.Sugar.Names.Env.$s$fShow(,)_$s$fShow[]
"SPEC/Language.PureScript.Sugar.Names.Env $fShow[]_$cshow @ (ProperName
                                                              'ConstructorName)" [orphan] forall ($dShow :: GHC.Show.Show
                                                                                                                                                                                      (Language.PureScript.Names.ProperName
                                                                                                                                                                                         'Language.PureScript.Names.ConstructorName))
  GHC.Show.$fShow[]_$cshow @ (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ConstructorName)
                           $dShow
  = Language.PureScript.Sugar.Names.Env.$s$fShow[]_$cshow
"SPEC/Language.PureScript.Sugar.Names.Env $fShow[]_$cshowList @ (ProperName
                                                                  'ConstructorName)" [orphan] forall ($dShow :: GHC.Show.Show
                                                                                                                                                                                              (Language.PureScript.Names.ProperName
                                                                                                                                                                                                 'Language.PureScript.Names.ConstructorName))
  GHC.Show.$fShow[]_$cshowList @ (Language.PureScript.Names.ProperName
                                    'Language.PureScript.Names.ConstructorName)
                               $dShow
  = Language.PureScript.Sugar.Names.Env.$s$fShow[]_$cshowList
"SPEC/Language.PureScript.Sugar.Names.Env fromList @ (ProperName
                                                       'ClassName) _" [orphan] forall @ a
                                                                                                                                                       ($dOrd :: GHC.Classes.Ord
                                                                                                                                                                   (Language.PureScript.Names.ProperName
                                                                                                                                                                      'Language.PureScript.Names.ClassName))
  Data.Map.Internal.fromList @ (Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.ClassName)
                             @ a
                             $dOrd
  = Language.PureScript.Sugar.Names.Env.$sfromList2 @ a
"SPEC/Language.PureScript.Sugar.Names.Env fromList @ (ProperName
                                                       'KindName) _" [orphan] forall @ a
                                                                                                                                                      ($dOrd :: GHC.Classes.Ord
                                                                                                                                                                  (Language.PureScript.Names.ProperName
                                                                                                                                                                     'Language.PureScript.Names.KindName))
  Data.Map.Internal.fromList @ (Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.KindName)
                             @ a
                             $dOrd
  = Language.PureScript.Sugar.Names.Env.$sfromList1 @ a
"SPEC/Language.PureScript.Sugar.Names.Env fromList @ (ProperName
                                                       'TypeName) _" [orphan] forall @ a
                                                                                                                                                      ($dOrd :: GHC.Classes.Ord
                                                                                                                                                                  (Language.PureScript.Names.ProperName
                                                                                                                                                                     'Language.PureScript.Names.TypeName))
  Data.Map.Internal.fromList @ (Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.TypeName)
                             @ a
                             $dOrd
  = Language.PureScript.Sugar.Names.Env.$sfromList3 @ a
"SPEC/Language.PureScript.Sugar.Names.Env fromList @ ModuleName _" [orphan] forall @ a
                                                                                   ($dOrd :: GHC.Classes.Ord
                                                                                               Language.PureScript.Names.ModuleName)
  Data.Map.Internal.fromList @ Language.PureScript.Names.ModuleName
                             @ a
                             $dOrd
  = Language.PureScript.Sugar.Names.Env.$sfromList @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

