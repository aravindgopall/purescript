
==================== FINAL INTERFACE ====================
2019-01-24 14:15:46.72881 UTC

interface purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Sugar.Names.Env 8043
  interface hash: 61b0ed5eb4cf94f2318a3a4e159d6d94
  ABI hash: 97518f893bef0c5e5749cfa9e4ca9265
  export-list hash: 1be6fa0858c130408a65d60cd8c577b4
  orphan hash: f4eb7121b8405b5823115bb5d1acaf92
  flag hash: 2aa58a824a1f725c94ffb0d8a8803a3b
  opt_hash: 2c98c95d41c045ae9c2fb565ec8aabc6
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Language.PureScript.Sugar.Names.Env.checkImportConflicts
  Language.PureScript.Sugar.Names.Env.envModuleExports
  Language.PureScript.Sugar.Names.Env.envModuleImports
  Language.PureScript.Sugar.Names.Env.envModuleSourceSpan
  Language.PureScript.Sugar.Names.Env.exportKind
  Language.PureScript.Sugar.Names.Env.exportType
  Language.PureScript.Sugar.Names.Env.exportTypeClass
  Language.PureScript.Sugar.Names.Env.exportTypeOp
  Language.PureScript.Sugar.Names.Env.exportValue
  Language.PureScript.Sugar.Names.Env.exportValueOp
  Language.PureScript.Sugar.Names.Env.getExports
  Language.PureScript.Sugar.Names.Env.nullExports
  Language.PureScript.Sugar.Names.Env.nullImports
  Language.PureScript.Sugar.Names.Env.primEnv
  Language.PureScript.Sugar.Names.Env.primExports
  Language.PureScript.Sugar.Names.Env.Env
  Language.PureScript.Sugar.Names.Env.ExportMode{Language.PureScript.Sugar.Names.Env.Internal Language.PureScript.Sugar.Names.Env.ReExport}
  Language.PureScript.Sugar.Names.Env.Exports{Language.PureScript.Sugar.Names.Env.Exports exportedKinds exportedTypeClasses exportedTypeOps exportedTypes exportedValueOps exportedValues}
  Language.PureScript.Sugar.Names.Env.ImportProvenance{Language.PureScript.Sugar.Names.Env.FromExplicit Language.PureScript.Sugar.Names.Env.FromImplicit Language.PureScript.Sugar.Names.Env.Local Language.PureScript.Sugar.Names.Env.Prim}
  Language.PureScript.Sugar.Names.Env.ImportRecord{Language.PureScript.Sugar.Names.Env.ImportRecord importName importProvenance importSourceModule importSourceSpan}
  Language.PureScript.Sugar.Names.Env.Imports{Language.PureScript.Sugar.Names.Env.Imports importedDataConstructors importedKinds importedModules importedQualModules importedTypeClasses importedTypeOps importedTypes importedValueOps importedValues}
module dependencies: Control.Monad.Supply
                     Control.Monad.Supply.Class Language.PureScript.AST
                     Language.PureScript.AST.Binders
                     Language.PureScript.AST.Declarations
                     Language.PureScript.AST.Exported Language.PureScript.AST.Literals
                     Language.PureScript.AST.Operators Language.PureScript.AST.SourcePos
                     Language.PureScript.AST.Traversals Language.PureScript.Bundle
                     Language.PureScript.Comments Language.PureScript.Constants
                     Language.PureScript.Crash Language.PureScript.Environment
                     Language.PureScript.Errors Language.PureScript.Kinds
                     Language.PureScript.Label Language.PureScript.Names
                     Language.PureScript.PSString Language.PureScript.Parser.Lexer
                     Language.PureScript.Parser.State Language.PureScript.Pretty
                     Language.PureScript.Pretty.Common Language.PureScript.Pretty.Kinds
                     Language.PureScript.Pretty.Types Language.PureScript.Pretty.Values
                     Language.PureScript.Publish.BoxesHelpers
                     Language.PureScript.Traversals
                     Language.PureScript.TypeClassDictionaries Language.PureScript.Types
                     Paths_purescript
package dependencies: aeson-1.3.1.1 ansi-terminal-0.8.0.4
                      array-0.5.2.0 async-2.2.1 attoparsec-0.13.2.2 base-4.11.1.0
                      base-compat-0.10.4 binary-0.8.5.1 blaze-builder-0.4.1.0 boxes-0.1.5
                      bytestring-0.10.8.2 colour-2.3.4 containers-0.5.11.0
                      deepseq-1.4.3.0 dlist-0.8.0.4 filepath-1.4.2 ghc-boot-th-8.4.3
                      ghc-prim-0.5.2.0 hashable-1.2.7.0 integer-gmp-1.0.2.0
                      integer-logarithms-1.0.2.1 language-javascript-0.6.0.11
                      microlens-0.4.9.1 microlens-ghc-0.4.9 microlens-mtl-0.1.11.1
                      microlens-platform-0.3.10 microlens-th-0.4.2.1 mtl-2.2.2
                      parsec-3.1.13.0 pattern-arrows-0.0.2 pretty-1.1.3.6
                      primitive-0.6.3.0 protolude-0.2.2 random-1.1 safe-0.3.17
                      scientific-0.3.6.2 sourcemap-0.1.6 split-0.2.3.3 stm-2.4.5.0
                      syb-0.7 tagged-0.8.5 template-haskell-2.13.0.0 text-1.2.3.0
                      th-abstraction-0.2.8.0 time-1.8.0.2 time-locale-compat-0.1.1.4
                      transformers-0.5.5.0 unordered-containers-0.2.9.0
                      utf8-string-1.0.1.1 uuid-types-1.0.3 vector-0.12.0.1
orphans: syb-0.7:Data.Generics.Instances
         stm-2.4.5.0:Control.Monad.STM
         microlens-platform-0.3.10:Lens.Micro.Platform
         microlens-ghc-0.4.9:Lens.Micro.GHC colour-2.3.4:Data.Colour
         attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         vector-0.12.0.1:Data.Vector.Unboxed
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.0:Data.Text.Lazy
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.5.0:Control.Monad.Trans.Error
         text-1.2.3.0:Data.Text binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: aeson-1.3.1.1:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.Graph
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         dlist-0.8.0.4:Data.DList ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         microlens-0.4.9.1:Lens.Micro.Internal
                         microlens-ghc-0.4.9:Lens.Micro.GHC
                         microlens-mtl-0.1.11.1:Lens.Micro.Mtl.Internal
                         microlens-platform-0.3.10:Lens.Micro.Platform
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.Declarations
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.Operators
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.SourcePos
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Comments
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Environment
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Kinds
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Label
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Names
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.PSString
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.TypeClassDictionaries
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Types
                         tagged-0.8.5:Data.Tagged
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
                         th-abstraction-0.2.8.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  base-4.11.1.0:Control.Monad c5f960c67d822497578bffbd3e4c01cf
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.Function 6e6aae9442025aeeb92a909c1bbc3fca
import  -/  base-4.11.1.0:Data.List 83dc843e47bfc0c5af51e19c6f3476d5
import  -/  base-4.11.1.0:Data.Maybe 409c3da2b142470b68be39ce1d97a9f7
import  -/  base-4.11.1.0:Data.OldList 1b35aa3c6805ff7c8887a35a866fe006
import  -/  base-4.11.1.0:Data.Tuple 3af66f3ac61ed95ba8a3a3f68ebc5003
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-compat-0.10.4:Prelude.Compat bb6796186ed35a1d09dc34362a3fc27e
import  -/  containers-0.5.11.0:Data.Map 0dbdaec812ef695a364aa6c69e7f7d53
import  -/  containers-0.5.11.0:Data.Map.Internal 0150e210d0ae8df0f3a0669d5e32d8fa
import  -/  containers-0.5.11.0:Data.Set 7d3c64a641be4cacbcd8119445bab919
import  -/  containers-0.5.11.0:Data.Set.Internal 93fa3ef95853aa2a7aadf32d693bd451
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  mtl-2.2.2:Control.Monad.Error.Class df146c18e27154b8df4c8637c59fd61b
import  -/  mtl-2.2.2:Control.Monad.Writer.Class 69f540e019eada69892c26d267276458
import  -/  Language.PureScript.AST e89b59f8e201961eafd3ff905a683659
  exports: be73d3bb7d4ebe5df082453f6d572075
import  -/  Language.PureScript.AST.Declarations 586bc75044e8737d02875208d17d4395
  DeclConflict 4784ba482b28096b8a67353e4572e17f
  ExportConflict a964bbcd47281dc93ced690ab4d6f61d
  ScopeConflict 9f1446b4bee542b6895bd34446e09a8f
  ScopeShadowing e501b0fc235ceb98506dc1582e6469e3
  UnknownName 4183c70ff29ad805571bed2cb1e6b9e3
import  -/  Language.PureScript.AST.SourcePos 63acacac5b7be73d04e5be0047a9a89a
  SourceSpan 1e0cf2bd3ea18f97a2ff152297f09219
  internalModuleSourceSpan f13de72620ea3980769d3252f1949a4a
  nullSourceSpan d3ce9e45794cd4f5ddfad4b02b318f51
import  -/  Language.PureScript.Constants 69f48af5637c1cbbd07a6f85918359c3
  exports: 9c458e31ccbc9e07ff15471cf48a55ee
  Prim d528e2dc5909b801bd7d210869fde176
  PrimBoolean 074d382c03d10c5673b62ecd7b997557
  PrimOrdering 847b36613fcfaf988ff99d1d87a88ce4
  PrimRow ce41b42d6d558c57933fa83c08a0adbd
  PrimRowList 9a41086c476f1417e3dce13da58a0184
  PrimSymbol 92b8e9ab524bd3a3af1292738ec5fadb
  PrimTypeError c4d1101437a44c3c4b61f1d5d0139044
import  -/  Language.PureScript.Environment 467b25d81b890e1aaabe28d0f09d192d
  exports: a0cb6cb8c78c56365f58c9f88d1fe000
  primBooleanKinds f8c75ccaaf52c82b9e8330aabf0a9fad
  primBooleanTypes a236341df4c68e6250f239d60e685339
  primClasses fe69f1e579507387753cf9b3b1293ca1
  primKinds 5deb48eda2e2f7bc1f3406fcddf34fe5
  primOrderingKinds 1ab8e56e88f0b341d193ce373c0f03f5
  primOrderingTypes db563108106fd58d175a8387ee260b77
  primRowClasses a8d8fce9fb36b035d4869ee770b4b4df
  primRowListClasses 05497a0cf3c6728627c3e7beb1eef0e3
  primRowListKinds 52a15b7f3d2f24135fdbce8c34329410
  primRowListTypes 50cf373dbf864a25ca47e7651f96a1b6
  primRowTypes 1a85675e66a59d4b34a7ede21e73a351
  primSymbolClasses 08eb15552cc36a4b5d11f2dc66e0de38
  primSymbolTypes 81883c6402caa01bb93ede0d3bbe862e
  primTypeErrorClasses 022280231240eedd26928b8af8661fe5
  primTypeErrorKinds fc77b82dbffa41edd1ad6ffaa74d9bcb
  primTypeErrorTypes bee98899a28b6b8e65f4e07856171420
  primTypes 97d1d9e451bb84e536f912cf2c408fd7
import  -/  Language.PureScript.Errors 3c1ad933587510f8b20a8c9ec2e86ce9
  exports: 8e61484c4664eceb943d9fc4820c721b
  MultipleErrors e1ef6a17348ccfe3ef65185d3c5f9026
  errorMessage 4308e76c0636918842d6acdb173a8e4b
  errorMessage' d5b3fcc13faf321f693b39ae31b8bd13
import  -/  Language.PureScript.Names 00f694509122478d97b327fbbccae327
  exports: ad7ae34f85124c68e8ba1c90fb2e732f
  ClassName c5d98a635cb261f6a93bf01096d0c6ed
  ConstructorName 84054a8bbbe827ba2ce7da83056a95ee
  DctorName 058beae22056ca37fdd3776575b08a7a
  Ident bad3562aa6138b6192713ac281080869
  IdentName f85afb00b35a2b992fb8ad7cbb2f9711
  KiName 3648c75d7b729914a2a52509b0a9365e
  KindName 7782d66ce60bd67282cf566485701e07
  ModName bdc8f8682bdb984467bbbfa35cbd8589
  ModuleName 1b2ddf0c04464d2fa2588925f10c1966
  Name d04047edf96c18708b7b5f72cb565394
  OpName 9af301165f72160425c5e0dde6525338
  ProperName a7268334e0b909381550b9329cb80fcc
  Qualified b6e1bc9e7244a41d3c6149c9b5c2d6d8
  Qualified 1b2ddf0c04464d2fa2588925f10c1966
  TyClassName e53bd54ac0d1b704756a477849dbd836
  TyName 6bd149eabdb95c312f9b6bf9d9f06c67
  TyOpName 440dd328b811fbf1c8a081bffcb8593d
  TypeName 40ce511c66a72431b4e87351210f7b03
  TypeOpName db73fc39fef75f034a0b4a8074947dd9
  ValOpName c1457b90b10104e4d37147e7648f89b9
  ValueOpName 11964a7dc7a3029edbea30fc5b4578c2
  coerceProperName 441cf2d4ab32b68a0b73ca234d2a628b
  disqualify bf1cc3b0e6c1ffc0008a6113bf8116c0
  getQual fd365f85b7d21d7f6d9822dd71085ff1
import  -/  safe-0.3.17:Safe 77ad7f9961af2487c83150eb62bb5163
732e7ce9036f53b2e7ae95f06f35b2e8
  $fEqExportMode ::
    GHC.Classes.Eq Language.PureScript.Sugar.Names.Env.ExportMode
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Sugar.Names.Env.ExportMode
                  Language.PureScript.Sugar.Names.Env.$fEqExportMode_$c==
                  Language.PureScript.Sugar.Names.Env.$fEqExportMode_$c/= -}
732e7ce9036f53b2e7ae95f06f35b2e8
  $fEqExportMode_$c/= ::
    Language.PureScript.Sugar.Names.Env.ExportMode
    -> Language.PureScript.Sugar.Names.Env.ExportMode -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Sugar.Names.Env.ExportMode)
                   (y :: Language.PureScript.Sugar.Names.Env.ExportMode) ->
                 case x of wild {
                   Language.PureScript.Sugar.Names.Env.Internal
                   -> case y of wild1 {
                        Language.PureScript.Sugar.Names.Env.Internal -> GHC.Types.False
                        Language.PureScript.Sugar.Names.Env.ReExport -> GHC.Types.True }
                   Language.PureScript.Sugar.Names.Env.ReExport
                   -> case y of wild1 {
                        Language.PureScript.Sugar.Names.Env.Internal -> GHC.Types.True
                        Language.PureScript.Sugar.Names.Env.ReExport
                        -> GHC.Types.False } }) -}
732e7ce9036f53b2e7ae95f06f35b2e8
  $fEqExportMode_$c== ::
    Language.PureScript.Sugar.Names.Env.ExportMode
    -> Language.PureScript.Sugar.Names.Env.ExportMode -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Language.PureScript.Sugar.Names.Env.ExportMode)
                   (ds1 :: Language.PureScript.Sugar.Names.Env.ExportMode) ->
                 case ds of wild {
                   Language.PureScript.Sugar.Names.Env.Internal
                   -> case ds1 of wild1 {
                        Language.PureScript.Sugar.Names.Env.Internal -> GHC.Types.True
                        Language.PureScript.Sugar.Names.Env.ReExport -> GHC.Types.False }
                   Language.PureScript.Sugar.Names.Env.ReExport
                   -> case ds1 of wild1 {
                        Language.PureScript.Sugar.Names.Env.Internal -> GHC.Types.False
                        Language.PureScript.Sugar.Names.Env.ReExport
                        -> GHC.Types.True } }) -}
9eac2b49272ec0935fc080f37f37f0d8
  $fEqImportProvenance ::
    GHC.Classes.Eq Language.PureScript.Sugar.Names.Env.ImportProvenance
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Sugar.Names.Env.ImportProvenance
                  Language.PureScript.Sugar.Names.Env.$fEqImportProvenance_$c==
                  Language.PureScript.Sugar.Names.Env.$fEqImportProvenance_$c/= -}
9eac2b49272ec0935fc080f37f37f0d8
  $fEqImportProvenance_$c/= ::
    Language.PureScript.Sugar.Names.Env.ImportProvenance
    -> Language.PureScript.Sugar.Names.Env.ImportProvenance
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Language.PureScript.Sugar.Names.Env.ImportProvenance)
                   (y :: Language.PureScript.Sugar.Names.Env.ImportProvenance) ->
                 case x of wild {
                   Language.PureScript.Sugar.Names.Env.FromImplicit
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.Sugar.Names.Env.FromImplicit
                        -> GHC.Types.False }
                   Language.PureScript.Sugar.Names.Env.FromExplicit
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.Sugar.Names.Env.FromExplicit
                        -> GHC.Types.False }
                   Language.PureScript.Sugar.Names.Env.Local
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.Sugar.Names.Env.Local -> GHC.Types.False }
                   Language.PureScript.Sugar.Names.Env.Prim
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.Sugar.Names.Env.Prim -> GHC.Types.False } }) -}
9eac2b49272ec0935fc080f37f37f0d8
  $fEqImportProvenance_$c== ::
    Language.PureScript.Sugar.Names.Env.ImportProvenance
    -> Language.PureScript.Sugar.Names.Env.ImportProvenance
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Language.PureScript.Sugar.Names.Env.ImportProvenance)
                   (ds1 :: Language.PureScript.Sugar.Names.Env.ImportProvenance) ->
                 case ds of wild {
                   Language.PureScript.Sugar.Names.Env.FromImplicit
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Sugar.Names.Env.FromImplicit
                        -> GHC.Types.True }
                   Language.PureScript.Sugar.Names.Env.FromExplicit
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Sugar.Names.Env.FromExplicit
                        -> GHC.Types.True }
                   Language.PureScript.Sugar.Names.Env.Local
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Sugar.Names.Env.Local -> GHC.Types.True }
                   Language.PureScript.Sugar.Names.Env.Prim
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Sugar.Names.Env.Prim -> GHC.Types.True } }) -}
06c97ba5c09e065ef1b4ac69ccbfcc9e
  $fEqImportRecord ::
    GHC.Classes.Eq a =>
    GHC.Classes.Eq (Language.PureScript.Sugar.Names.Env.ImportRecord a)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Classes.Eq a).
                  @ (Language.PureScript.Sugar.Names.Env.ImportRecord a)
                  (Language.PureScript.Sugar.Names.Env.$fEqImportRecord_$c== @ a v)
                  (Language.PureScript.Sugar.Names.Env.$fEqImportRecord_$c/=
                     @ a
                     v) -}
06c97ba5c09e065ef1b4ac69ccbfcc9e
  $fEqImportRecord_$c/= ::
    GHC.Classes.Eq a =>
    Language.PureScript.Sugar.Names.Env.ImportRecord a
    -> Language.PureScript.Sugar.Names.Env.ImportRecord a
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S(S(SL)LLL),1*U(1*U(1*U,U),1*U,1*U(1*U,1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U))),1*U)><S(S(SL)LLL),1*U(1*U(1*U,U),1*U,1*U(1*U,1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U))),1*U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ a
                   ($dEq :: GHC.Classes.Eq a)
                   (x :: Language.PureScript.Sugar.Names.Env.ImportRecord a)
                   (y :: Language.PureScript.Sugar.Names.Env.ImportRecord a) ->
                 case Language.PureScript.Sugar.Names.Env.$fEqImportRecord_$c==
                        @ a
                        $dEq
                        x
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
06c97ba5c09e065ef1b4ac69ccbfcc9e
  $fEqImportRecord_$c== ::
    GHC.Classes.Eq a =>
    Language.PureScript.Sugar.Names.Env.ImportRecord a
    -> Language.PureScript.Sugar.Names.Env.ImportRecord a
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(1*C1(C1(U)),A)><S(S(SL)LLL),1*U(1*U(1*U,U),1*U,1*U(1*U,1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U))),1*U)><S(S(SL)LLL),1*U(1*U(1*U,U),1*U,1*U(1*U,1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U))),1*U)>,
     Unfolding: (\ @ a
                   ($dEq :: GHC.Classes.Eq a)
                   (ds :: Language.PureScript.Sugar.Names.Env.ImportRecord a)
                   (ds1 :: Language.PureScript.Sugar.Names.Env.ImportRecord a) ->
                 case ds of wild { Language.PureScript.Sugar.Names.Env.ImportRecord a1 a2 a3 a4 ->
                 case ds1 of wild1 { Language.PureScript.Sugar.Names.Env.ImportRecord b1 b2 b3 b4 ->
                 case a1 of ww { Language.PureScript.Names.Qualified ww1 ww2 ->
                 case b1 of ww3 { Language.PureScript.Names.Qualified ww4 ww5 ->
                 case Language.PureScript.Names.$w$c==
                        @ a
                        $dEq
                        ww1
                        ww2
                        ww4
                        ww5 of wild2 {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> case GHC.Classes.$fEq[]_$c==
                             @ (Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.Namespace)
                             (Language.PureScript.Names.$fEqProperName
                                @ 'Language.PureScript.Names.Namespace)
                             a2 `cast` (Language.PureScript.Names.N:ModuleName[0])
                             b2 `cast` (Language.PureScript.Names.N:ModuleName[0]) of wild3 {
                        GHC.Types.False -> GHC.Types.False
                        GHC.Types.True
                        -> case a3 of ww7 { Language.PureScript.AST.SourcePos.SourceSpan ww8 ww9 ww10 ->
                           case b3 of ww11 { Language.PureScript.AST.SourcePos.SourceSpan ww12 ww6 ww13 ->
                           case Language.PureScript.AST.SourcePos.$w$c==1
                                  ww8
                                  ww9
                                  ww10
                                  ww12
                                  ww6
                                  ww13 of wild4 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True
                             -> Language.PureScript.Sugar.Names.Env.$fEqImportProvenance_$c==
                                  a4
                                  b4 } } } } } } } } }) -}
9eac2b49272ec0935fc080f37f37f0d8
  $fOrdImportProvenance ::
    GHC.Classes.Ord
      Language.PureScript.Sugar.Names.Env.ImportProvenance
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Sugar.Names.Env.ImportProvenance
                  Language.PureScript.Sugar.Names.Env.$fEqImportProvenance
                  Language.PureScript.Sugar.Names.Env.$fOrdImportProvenance_$ccompare
                  Language.PureScript.Sugar.Names.Env.$fOrdImportProvenance_$c<
                  Language.PureScript.Sugar.Names.Env.$fOrdImportProvenance_$c<=
                  Language.PureScript.Sugar.Names.Env.$fOrdImportProvenance_$c>
                  Language.PureScript.Sugar.Names.Env.$fOrdImportProvenance_$c>=
                  Language.PureScript.Sugar.Names.Env.$fOrdImportProvenance_$cmax
                  Language.PureScript.Sugar.Names.Env.$fOrdImportProvenance_$cmin -}
9eac2b49272ec0935fc080f37f37f0d8
  $fOrdImportProvenance_$c< ::
    Language.PureScript.Sugar.Names.Env.ImportProvenance
    -> Language.PureScript.Sugar.Names.Env.ImportProvenance
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Language.PureScript.Sugar.Names.Env.ImportProvenance)
                   (b :: Language.PureScript.Sugar.Names.Env.ImportProvenance) ->
                 case a of wild {
                   Language.PureScript.Sugar.Names.Env.FromImplicit
                   -> case b of wild1 {
                        Language.PureScript.Sugar.Names.Env.FromImplicit -> GHC.Types.False
                        Language.PureScript.Sugar.Names.Env.FromExplicit -> GHC.Types.True
                        Language.PureScript.Sugar.Names.Env.Local -> GHC.Types.True
                        Language.PureScript.Sugar.Names.Env.Prim -> GHC.Types.True }
                   Language.PureScript.Sugar.Names.Env.FromExplicit
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Sugar.Names.Env.Local -> GHC.Types.True
                        Language.PureScript.Sugar.Names.Env.Prim -> GHC.Types.True }
                   Language.PureScript.Sugar.Names.Env.Local
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.False
                        Language.PureScript.Sugar.Names.Env.Prim -> GHC.Types.True }
                   Language.PureScript.Sugar.Names.Env.Prim
                   -> case b of wild1 { DEFAULT -> GHC.Types.False } }) -}
9eac2b49272ec0935fc080f37f37f0d8
  $fOrdImportProvenance_$c<= ::
    Language.PureScript.Sugar.Names.Env.ImportProvenance
    -> Language.PureScript.Sugar.Names.Env.ImportProvenance
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Language.PureScript.Sugar.Names.Env.ImportProvenance)
                   (b :: Language.PureScript.Sugar.Names.Env.ImportProvenance) ->
                 case b of wild {
                   Language.PureScript.Sugar.Names.Env.FromImplicit
                   -> case a of wild1 {
                        Language.PureScript.Sugar.Names.Env.FromImplicit -> GHC.Types.True
                        Language.PureScript.Sugar.Names.Env.FromExplicit -> GHC.Types.False
                        Language.PureScript.Sugar.Names.Env.Local -> GHC.Types.False
                        Language.PureScript.Sugar.Names.Env.Prim -> GHC.Types.False }
                   Language.PureScript.Sugar.Names.Env.FromExplicit
                   -> case a of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.Sugar.Names.Env.Local -> GHC.Types.False
                        Language.PureScript.Sugar.Names.Env.Prim -> GHC.Types.False }
                   Language.PureScript.Sugar.Names.Env.Local
                   -> case a of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.Sugar.Names.Env.Prim -> GHC.Types.False }
                   Language.PureScript.Sugar.Names.Env.Prim
                   -> case a of wild1 { DEFAULT -> GHC.Types.True } }) -}
9eac2b49272ec0935fc080f37f37f0d8
  $fOrdImportProvenance_$c> ::
    Language.PureScript.Sugar.Names.Env.ImportProvenance
    -> Language.PureScript.Sugar.Names.Env.ImportProvenance
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, True)
                (\ (a :: Language.PureScript.Sugar.Names.Env.ImportProvenance)
                   (b :: Language.PureScript.Sugar.Names.Env.ImportProvenance) ->
                 Language.PureScript.Sugar.Names.Env.$fOrdImportProvenance_$c<
                   b
                   a) -}
9eac2b49272ec0935fc080f37f37f0d8
  $fOrdImportProvenance_$c>= ::
    Language.PureScript.Sugar.Names.Env.ImportProvenance
    -> Language.PureScript.Sugar.Names.Env.ImportProvenance
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Language.PureScript.Sugar.Names.Env.ImportProvenance)
                   (b :: Language.PureScript.Sugar.Names.Env.ImportProvenance) ->
                 case a of wild {
                   Language.PureScript.Sugar.Names.Env.FromImplicit
                   -> case b of wild1 {
                        Language.PureScript.Sugar.Names.Env.FromImplicit -> GHC.Types.True
                        Language.PureScript.Sugar.Names.Env.FromExplicit -> GHC.Types.False
                        Language.PureScript.Sugar.Names.Env.Local -> GHC.Types.False
                        Language.PureScript.Sugar.Names.Env.Prim -> GHC.Types.False }
                   Language.PureScript.Sugar.Names.Env.FromExplicit
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.Sugar.Names.Env.Local -> GHC.Types.False
                        Language.PureScript.Sugar.Names.Env.Prim -> GHC.Types.False }
                   Language.PureScript.Sugar.Names.Env.Local
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        Language.PureScript.Sugar.Names.Env.Prim -> GHC.Types.False }
                   Language.PureScript.Sugar.Names.Env.Prim
                   -> case b of wild1 { DEFAULT -> GHC.Types.True } }) -}
9eac2b49272ec0935fc080f37f37f0d8
  $fOrdImportProvenance_$ccompare ::
    Language.PureScript.Sugar.Names.Env.ImportProvenance
    -> Language.PureScript.Sugar.Names.Env.ImportProvenance
    -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Language.PureScript.Sugar.Names.Env.ImportProvenance)
                   (b :: Language.PureScript.Sugar.Names.Env.ImportProvenance) ->
                 case a of wild {
                   Language.PureScript.Sugar.Names.Env.FromImplicit
                   -> case b of wild1 {
                        Language.PureScript.Sugar.Names.Env.FromImplicit -> GHC.Types.EQ
                        Language.PureScript.Sugar.Names.Env.FromExplicit -> GHC.Types.LT
                        Language.PureScript.Sugar.Names.Env.Local -> GHC.Types.LT
                        Language.PureScript.Sugar.Names.Env.Prim -> GHC.Types.LT }
                   Language.PureScript.Sugar.Names.Env.FromExplicit
                   -> case b of wild1 {
                        Language.PureScript.Sugar.Names.Env.FromImplicit -> GHC.Types.GT
                        Language.PureScript.Sugar.Names.Env.FromExplicit -> GHC.Types.EQ
                        Language.PureScript.Sugar.Names.Env.Local -> GHC.Types.LT
                        Language.PureScript.Sugar.Names.Env.Prim -> GHC.Types.LT }
                   Language.PureScript.Sugar.Names.Env.Local
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Language.PureScript.Sugar.Names.Env.Local -> GHC.Types.EQ
                        Language.PureScript.Sugar.Names.Env.Prim -> GHC.Types.LT }
                   Language.PureScript.Sugar.Names.Env.Prim
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Language.PureScript.Sugar.Names.Env.Prim -> GHC.Types.EQ } }) -}
9eac2b49272ec0935fc080f37f37f0d8
  $fOrdImportProvenance_$cmax ::
    Language.PureScript.Sugar.Names.Env.ImportProvenance
    -> Language.PureScript.Sugar.Names.Env.ImportProvenance
    -> Language.PureScript.Sugar.Names.Env.ImportProvenance
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (x :: Language.PureScript.Sugar.Names.Env.ImportProvenance)
                   (y :: Language.PureScript.Sugar.Names.Env.ImportProvenance) ->
                 case y of wild {
                   Language.PureScript.Sugar.Names.Env.FromImplicit -> x
                   Language.PureScript.Sugar.Names.Env.FromExplicit
                   -> case x of wild1 {
                        DEFAULT -> Language.PureScript.Sugar.Names.Env.FromExplicit
                        Language.PureScript.Sugar.Names.Env.Local
                        -> Language.PureScript.Sugar.Names.Env.Local
                        Language.PureScript.Sugar.Names.Env.Prim
                        -> Language.PureScript.Sugar.Names.Env.Prim }
                   Language.PureScript.Sugar.Names.Env.Local
                   -> case x of wild1 {
                        DEFAULT -> Language.PureScript.Sugar.Names.Env.Local
                        Language.PureScript.Sugar.Names.Env.Prim
                        -> Language.PureScript.Sugar.Names.Env.Prim }
                   Language.PureScript.Sugar.Names.Env.Prim
                   -> case x of wild1 { DEFAULT ->
                      Language.PureScript.Sugar.Names.Env.Prim } }) -}
9eac2b49272ec0935fc080f37f37f0d8
  $fOrdImportProvenance_$cmin ::
    Language.PureScript.Sugar.Names.Env.ImportProvenance
    -> Language.PureScript.Sugar.Names.Env.ImportProvenance
    -> Language.PureScript.Sugar.Names.Env.ImportProvenance
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (x :: Language.PureScript.Sugar.Names.Env.ImportProvenance)
                   (y :: Language.PureScript.Sugar.Names.Env.ImportProvenance) ->
                 case y of wild {
                   Language.PureScript.Sugar.Names.Env.FromImplicit
                   -> case x of wild1 { DEFAULT ->
                      Language.PureScript.Sugar.Names.Env.FromImplicit }
                   Language.PureScript.Sugar.Names.Env.FromExplicit
                   -> case x of wild1 {
                        DEFAULT -> wild1
                        Language.PureScript.Sugar.Names.Env.Local
                        -> Language.PureScript.Sugar.Names.Env.FromExplicit
                        Language.PureScript.Sugar.Names.Env.Prim
                        -> Language.PureScript.Sugar.Names.Env.FromExplicit }
                   Language.PureScript.Sugar.Names.Env.Local
                   -> case x of wild1 {
                        DEFAULT -> wild1
                        Language.PureScript.Sugar.Names.Env.Prim
                        -> Language.PureScript.Sugar.Names.Env.Local }
                   Language.PureScript.Sugar.Names.Env.Prim -> x }) -}
06c97ba5c09e065ef1b4ac69ccbfcc9e
  $fOrdImportRecord ::
    GHC.Classes.Ord a =>
    GHC.Classes.Ord
      (Language.PureScript.Sugar.Names.Env.ImportRecord a)
  DFunId
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,U(1*U(C(C1(U)),A),C(C1(U)),A,A,A,A,A,A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Classes.Ord a).
                  @ (Language.PureScript.Sugar.Names.Env.ImportRecord a)
                  (Language.PureScript.Sugar.Names.Env.$fOrdImportRecord_$cp1Ord
                     @ a
                     v)
                  (Language.PureScript.Sugar.Names.Env.$fOrdImportRecord_$ccompare
                     @ a
                     v)
                  (Language.PureScript.Sugar.Names.Env.$fOrdImportRecord_$c< @ a v)
                  (Language.PureScript.Sugar.Names.Env.$fOrdImportRecord_$c<= @ a v)
                  (\ (a1 :: Language.PureScript.Sugar.Names.Env.ImportRecord a)
                     (b :: Language.PureScript.Sugar.Names.Env.ImportRecord a) ->
                   Language.PureScript.Sugar.Names.Env.$fOrdImportRecord_$c<
                     @ a
                     v
                     b
                     a1)
                  (Language.PureScript.Sugar.Names.Env.$fOrdImportRecord_$c>= @ a v)
                  (Language.PureScript.Sugar.Names.Env.$fOrdImportRecord_$cmax @ a v)
                  (Language.PureScript.Sugar.Names.Env.$fOrdImportRecord_$cmin
                     @ a
                     v) -}
06c97ba5c09e065ef1b4ac69ccbfcc9e
  $fOrdImportRecord_$c< ::
    GHC.Classes.Ord a =>
    Language.PureScript.Sugar.Names.Env.ImportRecord a
    -> Language.PureScript.Sugar.Names.Env.ImportRecord a
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(C1(U)),A,A,A,A,A,A)><S(S(SL)LLL),1*U(1*U(1*U,U),1*U,1*U(1*U,1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U))),1*U)><S(S(SL)LLL),1*U(1*U(1*U,U),1*U,1*U(1*U,1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U))),1*U)>,
     Unfolding: (\ @ a
                   ($dOrd :: GHC.Classes.Ord a)
                   (a1 :: Language.PureScript.Sugar.Names.Env.ImportRecord a)
                   (b :: Language.PureScript.Sugar.Names.Env.ImportRecord a) ->
                 case a1 of wild { Language.PureScript.Sugar.Names.Env.ImportRecord a2 a3 a4 a5 ->
                 case b of wild1 { Language.PureScript.Sugar.Names.Env.ImportRecord b1 b2 b3 b4 ->
                 case a2 of ww { Language.PureScript.Names.Qualified ww1 ww2 ->
                 case b1 of ww3 { Language.PureScript.Names.Qualified ww4 ww5 ->
                 case Language.PureScript.Names.$w$ccompare
                        @ a
                        $dOrd
                        ww1
                        ww2
                        ww4
                        ww5 of wild2 {
                   GHC.Types.LT -> GHC.Types.True
                   GHC.Types.EQ
                   -> case GHC.Classes.$fOrd[]_$ccompare
                             @ (Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.Namespace)
                             (Language.PureScript.Names.$fOrdProperName
                                @ 'Language.PureScript.Names.Namespace)
                             a3 `cast` (Language.PureScript.Names.N:ModuleName[0])
                             b2 `cast` (Language.PureScript.Names.N:ModuleName[0]) of wild3 {
                        GHC.Types.LT -> GHC.Types.True
                        GHC.Types.EQ
                        -> case a4 of ww7 { Language.PureScript.AST.SourcePos.SourceSpan ww8 ww9 ww10 ->
                           case b3 of ww11 { Language.PureScript.AST.SourcePos.SourceSpan ww12 ww6 ww13 ->
                           case Language.PureScript.AST.SourcePos.$w$ccompare1
                                  ww8
                                  ww9
                                  ww10
                                  ww12
                                  ww6
                                  ww13 of wild4 {
                             GHC.Types.LT -> GHC.Types.True
                             GHC.Types.EQ
                             -> Language.PureScript.Sugar.Names.Env.$fOrdImportProvenance_$c<
                                  a5
                                  b4
                             GHC.Types.GT -> GHC.Types.False } } }
                        GHC.Types.GT -> GHC.Types.False }
                   GHC.Types.GT -> GHC.Types.False } } } } }) -}
06c97ba5c09e065ef1b4ac69ccbfcc9e
  $fOrdImportRecord_$c<= ::
    GHC.Classes.Ord a =>
    Language.PureScript.Sugar.Names.Env.ImportRecord a
    -> Language.PureScript.Sugar.Names.Env.ImportRecord a
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(C1(U)),A,A,A,A,A,A)><S(S(SL)LLL),1*U(1*U(1*U,U),1*U,1*U(1*U,1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U))),1*U)><S(S(SL)LLL),1*U(1*U(1*U,U),1*U,1*U(1*U,1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U))),1*U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dOrd :: GHC.Classes.Ord a)
                   (a1 :: Language.PureScript.Sugar.Names.Env.ImportRecord a)
                   (b :: Language.PureScript.Sugar.Names.Env.ImportRecord a) ->
                 case Language.PureScript.Sugar.Names.Env.$fOrdImportRecord_$c<
                        @ a
                        $dOrd
                        b
                        a1 of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
06c97ba5c09e065ef1b4ac69ccbfcc9e
  $fOrdImportRecord_$c>= ::
    GHC.Classes.Ord a =>
    Language.PureScript.Sugar.Names.Env.ImportRecord a
    -> Language.PureScript.Sugar.Names.Env.ImportRecord a
    -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(C1(U)),A,A,A,A,A,A)><S(S(SL)LLL),1*U(1*U(1*U,U),1*U,1*U(1*U,1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U))),1*U)><S(S(SL)LLL),1*U(1*U(1*U,U),1*U,1*U(1*U,1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U))),1*U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dOrd :: GHC.Classes.Ord a)
                   (a1 :: Language.PureScript.Sugar.Names.Env.ImportRecord a)
                   (b :: Language.PureScript.Sugar.Names.Env.ImportRecord a) ->
                 case Language.PureScript.Sugar.Names.Env.$fOrdImportRecord_$c<
                        @ a
                        $dOrd
                        a1
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
06c97ba5c09e065ef1b4ac69ccbfcc9e
  $fOrdImportRecord_$ccompare ::
    GHC.Classes.Ord a =>
    Language.PureScript.Sugar.Names.Env.ImportRecord a
    -> Language.PureScript.Sugar.Names.Env.ImportRecord a
    -> GHC.Types.Ordering
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(C1(U)),A,A,A,A,A,A)><S(S(SL)LLL),1*U(1*U(1*U,U),1*U,1*U(1*U,1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U))),1*U)><S(S(SL)LLL),1*U(1*U(1*U,U),1*U,1*U(1*U,1*U(1*U(U),1*U(U)),1*U(1*U(U),1*U(U))),1*U)>,
     Unfolding: (\ @ a
                   ($dOrd :: GHC.Classes.Ord a)
                   (a1 :: Language.PureScript.Sugar.Names.Env.ImportRecord a)
                   (b :: Language.PureScript.Sugar.Names.Env.ImportRecord a) ->
                 case a1 of wild { Language.PureScript.Sugar.Names.Env.ImportRecord a2 a3 a4 a5 ->
                 case b of wild1 { Language.PureScript.Sugar.Names.Env.ImportRecord b1 b2 b3 b4 ->
                 case a2 of ww { Language.PureScript.Names.Qualified ww1 ww2 ->
                 case b1 of ww3 { Language.PureScript.Names.Qualified ww4 ww5 ->
                 case Language.PureScript.Names.$w$ccompare
                        @ a
                        $dOrd
                        ww1
                        ww2
                        ww4
                        ww5 of wild2 {
                   GHC.Types.LT -> GHC.Types.LT
                   GHC.Types.EQ
                   -> case GHC.Classes.$fOrd[]_$ccompare
                             @ (Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.Namespace)
                             (Language.PureScript.Names.$fOrdProperName
                                @ 'Language.PureScript.Names.Namespace)
                             a3 `cast` (Language.PureScript.Names.N:ModuleName[0])
                             b2 `cast` (Language.PureScript.Names.N:ModuleName[0]) of wild3 {
                        GHC.Types.LT -> GHC.Types.LT
                        GHC.Types.EQ
                        -> case a4 of ww7 { Language.PureScript.AST.SourcePos.SourceSpan ww8 ww9 ww10 ->
                           case b3 of ww11 { Language.PureScript.AST.SourcePos.SourceSpan ww12 ww6 ww13 ->
                           case Language.PureScript.AST.SourcePos.$w$ccompare1
                                  ww8
                                  ww9
                                  ww10
                                  ww12
                                  ww6
                                  ww13 of wild4 {
                             GHC.Types.LT -> GHC.Types.LT
                             GHC.Types.EQ
                             -> Language.PureScript.Sugar.Names.Env.$fOrdImportProvenance_$ccompare
                                  a5
                                  b4
                             GHC.Types.GT -> GHC.Types.GT } } }
                        GHC.Types.GT -> GHC.Types.GT }
                   GHC.Types.GT -> GHC.Types.GT } } } } }) -}
06c97ba5c09e065ef1b4ac69ccbfcc9e
  $fOrdImportRecord_$cmax ::
    GHC.Classes.Ord a =>
    Language.PureScript.Sugar.Names.Env.ImportRecord a
    -> Language.PureScript.Sugar.Names.Env.ImportRecord a
    -> Language.PureScript.Sugar.Names.Env.ImportRecord a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(C1(U)),A,A,A,A,A,A)><S(S(SL)LLL),U(U(U,U),U,U(U,U(U(U),U(U)),U(U(U),U(U))),U)><S(S(SL)LLL),U(U(U,U),U,U(U,U(U(U),U(U)),U(U(U),U(U))),U)>m,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dOrd :: GHC.Classes.Ord a)
                   (x :: Language.PureScript.Sugar.Names.Env.ImportRecord a)
                   (y :: Language.PureScript.Sugar.Names.Env.ImportRecord a) ->
                 case Language.PureScript.Sugar.Names.Env.$fOrdImportRecord_$c<
                        @ a
                        $dOrd
                        y
                        x of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
06c97ba5c09e065ef1b4ac69ccbfcc9e
  $fOrdImportRecord_$cmin ::
    GHC.Classes.Ord a =>
    Language.PureScript.Sugar.Names.Env.ImportRecord a
    -> Language.PureScript.Sugar.Names.Env.ImportRecord a
    -> Language.PureScript.Sugar.Names.Env.ImportRecord a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,1*C1(C1(U)),A,A,A,A,A,A)><S(S(SL)LLL),U(U(U,U),U,U(U,U(U(U),U(U)),U(U(U),U(U))),U)><S(S(SL)LLL),U(U(U,U),U,U(U,U(U(U),U(U)),U(U(U),U(U))),U)>m,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dOrd :: GHC.Classes.Ord a)
                   (x :: Language.PureScript.Sugar.Names.Env.ImportRecord a)
                   (y :: Language.PureScript.Sugar.Names.Env.ImportRecord a) ->
                 case Language.PureScript.Sugar.Names.Env.$fOrdImportRecord_$c<
                        @ a
                        $dOrd
                        y
                        x of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
06c97ba5c09e065ef1b4ac69ccbfcc9e
  $fOrdImportRecord_$cp1Ord ::
    GHC.Classes.Ord a =>
    GHC.Classes.Eq (Language.PureScript.Sugar.Names.Env.ImportRecord a)
  {- Arity: 1, HasNoCafRefs,
     Strictness: <L,1*U(1*U(C(C1(U)),A),A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ a ($dOrd :: GHC.Classes.Ord a) ->
                 Language.PureScript.Sugar.Names.Env.$fEqImportRecord
                   @ a
                   (GHC.Classes.$p1Ord @ a $dOrd)) -}
732e7ce9036f53b2e7ae95f06f35b2e8
  $fShowExportMode ::
    GHC.Show.Show Language.PureScript.Sugar.Names.Env.ExportMode
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Sugar.Names.Env.ExportMode
                  Language.PureScript.Sugar.Names.Env.$fShowExportMode_$cshowsPrec
                  Language.PureScript.Sugar.Names.Env.$fShowExportMode_$cshow
                  Language.PureScript.Sugar.Names.Env.$fShowExportMode_$cshowList -}
732e7ce9036f53b2e7ae95f06f35b2e8
  $fShowExportMode1 ::
    Language.PureScript.Sugar.Names.Env.ExportMode -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Language.PureScript.Sugar.Names.Env.ExportMode)
                   (eta :: GHC.Base.String) ->
                 case ds of wild {
                   Language.PureScript.Sugar.Names.Env.Internal
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           Language.PureScript.Sugar.Names.Env.$fShowExportMode4)
                        eta
                   Language.PureScript.Sugar.Names.Env.ReExport
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           Language.PureScript.Sugar.Names.Env.$fShowExportMode2)
                        eta }) -}
6c7c18bd44e198cd5c965037cbfa4aba
  $fShowExportMode2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Sugar.Names.Env.$fShowExportMode3) -}
0e123a85b4c295d7bde525fd2b986ddd
  $fShowExportMode3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ReExport"#) -}
f4d16112d75dc35adb5d3c0589544024
  $fShowExportMode4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Sugar.Names.Env.$fShowExportMode5) -}
c1a52e673436b35688e9e6eb589a1af7
  $fShowExportMode5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Internal"#) -}
732e7ce9036f53b2e7ae95f06f35b2e8
  $fShowExportMode_$cshow ::
    Language.PureScript.Sugar.Names.Env.ExportMode -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Sugar.Names.Env.ExportMode) ->
                 case x of wild {
                   Language.PureScript.Sugar.Names.Env.Internal
                   -> Language.PureScript.Sugar.Names.Env.$fShowExportMode4
                   Language.PureScript.Sugar.Names.Env.ReExport
                   -> Language.PureScript.Sugar.Names.Env.$fShowExportMode2 }) -}
732e7ce9036f53b2e7ae95f06f35b2e8
  $fShowExportMode_$cshowList ::
    [Language.PureScript.Sugar.Names.Env.ExportMode] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Sugar.Names.Env.ExportMode])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Sugar.Names.Env.ExportMode
                   Language.PureScript.Sugar.Names.Env.$fShowExportMode1
                   ls
                   s) -}
732e7ce9036f53b2e7ae95f06f35b2e8
  $fShowExportMode_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Sugar.Names.Env.ExportMode -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (ds1 :: Language.PureScript.Sugar.Names.Env.ExportMode)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild {
                   Language.PureScript.Sugar.Names.Env.Internal
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           Language.PureScript.Sugar.Names.Env.$fShowExportMode4)
                        eta
                   Language.PureScript.Sugar.Names.Env.ReExport
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n :: b)[OneShot] ->
                         GHC.Base.foldr
                           @ GHC.Types.Char
                           @ b
                           c
                           n
                           Language.PureScript.Sugar.Names.Env.$fShowExportMode2)
                        eta }) -}
d2107d9c7383e14684c4687121fab2f3
  $fShowExports ::
    GHC.Show.Show Language.PureScript.Sugar.Names.Env.Exports
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Sugar.Names.Env.Exports
                  Language.PureScript.Sugar.Names.Env.$fShowExports_$cshowsPrec
                  Language.PureScript.Sugar.Names.Env.$fShowExports_$cshow
                  Language.PureScript.Sugar.Names.Env.$fShowExports_$cshowList -}
d2107d9c7383e14684c4687121fab2f3
  $fShowExports1 ::
    Language.PureScript.Sugar.Names.Env.Exports -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U,1*U,1*U,1*U,1*U)>,
     Unfolding: (\ (w :: Language.PureScript.Sugar.Names.Env.Exports) ->
                 case w of ww { Language.PureScript.Sugar.Names.Env.Exports ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Language.PureScript.Sugar.Names.Env.$w$cshowsPrec
                   0#
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6 }) -}
f1020ea84a46c6725d3584359a26f247
  $fShowExports2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
d2107d9c7383e14684c4687121fab2f3
  $fShowExports_$cshow ::
    Language.PureScript.Sugar.Names.Env.Exports -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U,1*U,1*U,1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Sugar.Names.Env.Exports) ->
                 Language.PureScript.Sugar.Names.Env.$fShowExports_$cshowsPrec
                   Language.PureScript.Sugar.Names.Env.$fShowExports2
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
d2107d9c7383e14684c4687121fab2f3
  $fShowExports_$cshowList ::
    [Language.PureScript.Sugar.Names.Env.Exports] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Sugar.Names.Env.Exports])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Sugar.Names.Env.Exports
                   Language.PureScript.Sugar.Names.Env.$fShowExports1
                   ls
                   s) -}
d2107d9c7383e14684c4687121fab2f3
  $fShowExports_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Sugar.Names.Env.Exports -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U,1*U,1*U,1*U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Sugar.Names.Env.Exports) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Language.PureScript.Sugar.Names.Env.Exports ww3 ww4 ww5 ww6 ww7 ww8 ->
                 Language.PureScript.Sugar.Names.Env.$w$cshowsPrec
                   ww1
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8 } }) -}
9eac2b49272ec0935fc080f37f37f0d8
  $fShowImportProvenance ::
    GHC.Show.Show Language.PureScript.Sugar.Names.Env.ImportProvenance
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Sugar.Names.Env.ImportProvenance
                  Language.PureScript.Sugar.Names.Env.$fShowImportProvenance_$cshowsPrec
                  Language.PureScript.Sugar.Names.Env.$fShowImportProvenance_$cshow
                  Language.PureScript.Sugar.Names.Env.$fShowImportProvenance_$cshowList -}
60313591197dd8fe9f51e06f47705ba9
  $fShowImportProvenance1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Sugar.Names.Env.$fShowImportProvenance2) -}
b68d4ed82a1c9c2252af6f4f48309bce
  $fShowImportProvenance2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Prim"#) -}
b3c85aa73d72b70fdcc5b176d0179fb0
  $fShowImportProvenance3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Sugar.Names.Env.$fShowImportProvenance4) -}
9a2367952c973a38bd653abb08000b50
  $fShowImportProvenance4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Local"#) -}
e05b42694ce6096e44ec6a21c08791c4
  $fShowImportProvenance5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Sugar.Names.Env.$fShowImportProvenance6) -}
87d25e18cbfab704d4f637e815993143
  $fShowImportProvenance6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("FromExplicit"#) -}
a02c13e47a508a3cf96d98c0bd1c1479
  $fShowImportProvenance7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Sugar.Names.Env.$fShowImportProvenance8) -}
e411ffced1d9a14cd1c22b3b7760f5e2
  $fShowImportProvenance8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("FromImplicit"#) -}
9eac2b49272ec0935fc080f37f37f0d8
  $fShowImportProvenance_$cshow ::
    Language.PureScript.Sugar.Names.Env.ImportProvenance
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Sugar.Names.Env.ImportProvenance) ->
                 case x of wild {
                   Language.PureScript.Sugar.Names.Env.FromImplicit
                   -> Language.PureScript.Sugar.Names.Env.$fShowImportProvenance7
                   Language.PureScript.Sugar.Names.Env.FromExplicit
                   -> Language.PureScript.Sugar.Names.Env.$fShowImportProvenance5
                   Language.PureScript.Sugar.Names.Env.Local
                   -> Language.PureScript.Sugar.Names.Env.$fShowImportProvenance3
                   Language.PureScript.Sugar.Names.Env.Prim
                   -> Language.PureScript.Sugar.Names.Env.$fShowImportProvenance1 }) -}
9eac2b49272ec0935fc080f37f37f0d8
  $fShowImportProvenance_$cshowList ::
    [Language.PureScript.Sugar.Names.Env.ImportProvenance]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Sugar.Names.Env.ImportProvenance])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Sugar.Names.Env.ImportProvenance
                   Language.PureScript.Sugar.Names.Env.$w$cshowsPrec1
                   ls
                   s) -}
9eac2b49272ec0935fc080f37f37f0d8
  $fShowImportProvenance_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Sugar.Names.Env.ImportProvenance
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: [0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Sugar.Names.Env.ImportProvenance)
                   (w2 :: GHC.Base.String) ->
                 Language.PureScript.Sugar.Names.Env.$w$cshowsPrec1 w1 w2) -}
06c97ba5c09e065ef1b4ac69ccbfcc9e
  $fShowImportRecord ::
    GHC.Show.Show a =>
    GHC.Show.Show (Language.PureScript.Sugar.Names.Env.ImportRecord a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Show.Show a).
                  @ (Language.PureScript.Sugar.Names.Env.ImportRecord a)
                  (Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$cshowsPrec
                     @ a
                     v)
                  (Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$cshow
                     @ a
                     v)
                  (Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$cshowList
                     @ a
                     v) -}
d2ec8b0270d8f38de58960434e18f15f
  $fShowImportRecord1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("}"#) -}
b264f0364a8e4cc9c7c78d76cb6b9a95
  $fShowImportRecord10 ::
    Language.PureScript.Sugar.Names.Env.ImportRecord
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
    -> GHC.Show.ShowS
  {- Arity: 1,
     Strictness: <S,1*U(1*U(1*U,U),U,U(U,U(U(U),U(U)),U(U(U),U(U))),U)>,
     Unfolding: (\ (w :: Language.PureScript.Sugar.Names.Env.ImportRecord
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ClassName)) ->
                 case w of ww { Language.PureScript.Sugar.Names.Env.ImportRecord ww1 ww2 ww3 ww4 ->
                 Language.PureScript.Sugar.Names.Env.$w$s$cshowsPrec3
                   0#
                   ww1
                   ww2
                   ww3
                   ww4 }) -}
1bdc910425767f1dbea41a024bfa42c7
  $fShowImportRecord11 ::
    Language.PureScript.Sugar.Names.Env.ImportRecord
      Language.PureScript.Names.Ident
    -> GHC.Show.ShowS
  {- Arity: 1,
     Strictness: <S,1*U(1*U(1*U,U),U,U(U,U(U(U),U(U)),U(U(U),U(U))),U)>,
     Unfolding: (\ (w :: Language.PureScript.Sugar.Names.Env.ImportRecord
                           Language.PureScript.Names.Ident) ->
                 case w of ww { Language.PureScript.Sugar.Names.Env.ImportRecord ww1 ww2 ww3 ww4 ->
                 Language.PureScript.Sugar.Names.Env.$w$s$cshowsPrec4
                   0#
                   ww1
                   ww2
                   ww3
                   ww4 }) -}
1ee99a9696eee969e6a7431929e75fea
  $fShowImportRecord12 ::
    Language.PureScript.Sugar.Names.Env.ImportRecord
      (Language.PureScript.Names.OpName
         'Language.PureScript.Names.ValueOpName)
    -> GHC.Show.ShowS
  {- Arity: 1,
     Strictness: <S,1*U(1*U(1*U,U),U,U(U,U(U(U),U(U)),U(U(U),U(U))),U)>,
     Unfolding: (\ (w :: Language.PureScript.Sugar.Names.Env.ImportRecord
                           (Language.PureScript.Names.OpName
                              'Language.PureScript.Names.ValueOpName)) ->
                 case w of ww { Language.PureScript.Sugar.Names.Env.ImportRecord ww1 ww2 ww3 ww4 ->
                 Language.PureScript.Sugar.Names.Env.$w$s$cshowsPrec5
                   0#
                   ww1
                   ww2
                   ww3
                   ww4 }) -}
28dbbc25dd3d81d251626900af5836d4
  $fShowImportRecord13 ::
    Language.PureScript.Sugar.Names.Env.ImportRecord
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.KindName)
    -> GHC.Show.ShowS
  {- Arity: 1,
     Strictness: <S,1*U(1*U(1*U,U),U,U(U,U(U(U),U(U)),U(U(U),U(U))),U)>,
     Unfolding: (\ (w :: Language.PureScript.Sugar.Names.Env.ImportRecord
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.KindName)) ->
                 case w of ww { Language.PureScript.Sugar.Names.Env.ImportRecord ww1 ww2 ww3 ww4 ->
                 Language.PureScript.Sugar.Names.Env.$w$s$cshowsPrec6
                   0#
                   ww1
                   ww2
                   ww3
                   ww4 }) -}
59ef913c5950e836f427c0463b25dcd8
  $fShowImportRecord2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("importProvenance = "#) -}
0c4b103285d3ab3cd9b732bf87c8a036
  $fShowImportRecord3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("importSourceSpan = "#) -}
3b84cf1ca55a72753db065890143c76b
  $fShowImportRecord4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("importSourceModule = "#) -}
c6416033524655e872a044848f4e39f4
  $fShowImportRecord5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("importName = "#) -}
cd6f664148f4f38bb7022cd1df341b5c
  $fShowImportRecord6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ImportRecord {"#) -}
946b30c09a018d0b159aef4077c22c95
  $fShowImportRecord7 ::
    Language.PureScript.Sugar.Names.Env.ImportRecord
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName)
    -> GHC.Show.ShowS
  {- Arity: 1,
     Strictness: <S,1*U(1*U(1*U,U),U,U(U,U(U(U),U(U)),U(U(U),U(U))),U)>,
     Unfolding: (\ (w :: Language.PureScript.Sugar.Names.Env.ImportRecord
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.TypeName)) ->
                 case w of ww { Language.PureScript.Sugar.Names.Env.ImportRecord ww1 ww2 ww3 ww4 ->
                 Language.PureScript.Sugar.Names.Env.$w$s$cshowsPrec
                   0#
                   ww1
                   ww2
                   ww3
                   ww4 }) -}
2d755222d2d2d51083a758d439b15698
  $fShowImportRecord8 ::
    Language.PureScript.Sugar.Names.Env.ImportRecord
      (Language.PureScript.Names.OpName
         'Language.PureScript.Names.TypeOpName)
    -> GHC.Show.ShowS
  {- Arity: 1,
     Strictness: <S,1*U(1*U(1*U,U),U,U(U,U(U(U),U(U)),U(U(U),U(U))),U)>,
     Unfolding: (\ (w :: Language.PureScript.Sugar.Names.Env.ImportRecord
                           (Language.PureScript.Names.OpName
                              'Language.PureScript.Names.TypeOpName)) ->
                 case w of ww { Language.PureScript.Sugar.Names.Env.ImportRecord ww1 ww2 ww3 ww4 ->
                 Language.PureScript.Sugar.Names.Env.$w$s$cshowsPrec1
                   0#
                   ww1
                   ww2
                   ww3
                   ww4 }) -}
dd1850cfa2578f10ff1af9028e4998ce
  $fShowImportRecord9 ::
    Language.PureScript.Sugar.Names.Env.ImportRecord
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ConstructorName)
    -> GHC.Show.ShowS
  {- Arity: 1,
     Strictness: <S,1*U(1*U(1*U,U),U,U(U,U(U(U),U(U)),U(U(U),U(U))),U)>,
     Unfolding: (\ (w :: Language.PureScript.Sugar.Names.Env.ImportRecord
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ConstructorName)) ->
                 case w of ww { Language.PureScript.Sugar.Names.Env.ImportRecord ww1 ww2 ww3 ww4 ->
                 Language.PureScript.Sugar.Names.Env.$w$s$cshowsPrec2
                   0#
                   ww1
                   ww2
                   ww3
                   ww4 }) -}
06c97ba5c09e065ef1b4ac69ccbfcc9e
  $fShowImportRecord_$cshow ::
    GHC.Show.Show a =>
    Language.PureScript.Sugar.Names.Env.ImportRecord a
    -> GHC.Base.String
  {- Arity: 2,
     Strictness: <L,1*U(1*C1(C1(C(U))),A,A)><S,1*U(1*U(1*U,U),U,U(U,U(U(U),U(U)),U(U(U),U(U))),U)>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (x :: Language.PureScript.Sugar.Names.Env.ImportRecord a) ->
                 Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$cshowsPrec
                   @ a
                   $dShow
                   Language.PureScript.Sugar.Names.Env.$fShowExports2
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
06c97ba5c09e065ef1b4ac69ccbfcc9e
  $fShowImportRecord_$cshowList ::
    GHC.Show.Show a =>
    [Language.PureScript.Sugar.Names.Env.ImportRecord a]
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (ls :: [Language.PureScript.Sugar.Names.Env.ImportRecord a])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Language.PureScript.Sugar.Names.Env.ImportRecord a)
                   (Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$cshowsPrec
                      @ a
                      $dShow
                      Language.PureScript.Sugar.Names.Env.$fShowExports2)
                   ls
                   s) -}
06c97ba5c09e065ef1b4ac69ccbfcc9e
  $fShowImportRecord_$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Types.Int
    -> Language.PureScript.Sugar.Names.Env.ImportRecord a
    -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,1*U(1*C1(C1(C(U))),A,A)><S(S),1*U(U)><S,1*U(1*U(1*U,U),U,U(U,U(U(U),U(U)),U(U(U),U(U))),U)>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: GHC.Show.Show a)
                   (w1 :: GHC.Types.Int)
                   (w2 :: Language.PureScript.Sugar.Names.Env.ImportRecord a) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Language.PureScript.Sugar.Names.Env.ImportRecord ww3 ww4 ww5 ww6 ->
                 Language.PureScript.Sugar.Names.Env.$w$cshowsPrec2
                   @ a
                   w
                   ww1
                   ww3
                   ww4
                   ww5
                   ww6 } }) -}
7b12ce5feebdddb91c1237b163afbe75
  $fShowImportRecord_$s$cshow ::
    Language.PureScript.Sugar.Names.Env.ImportRecord
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName)
    -> GHC.Base.String
  {- Arity: 1,
     Strictness: <S,1*U(1*U(1*U,U),U,U(U,U(U(U),U(U)),U(U(U),U(U))),U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Sugar.Names.Env.ImportRecord
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.TypeName)) ->
                 Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshowsPrec
                   Language.PureScript.Sugar.Names.Env.$fShowExports2
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
0dfa4811eb8abafb4d2d042bf652a126
  $fShowImportRecord_$s$cshow1 ::
    Language.PureScript.Sugar.Names.Env.ImportRecord
      (Language.PureScript.Names.OpName
         'Language.PureScript.Names.TypeOpName)
    -> GHC.Base.String
  {- Arity: 1,
     Strictness: <S,1*U(1*U(1*U,U),U,U(U,U(U(U),U(U)),U(U(U),U(U))),U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Sugar.Names.Env.ImportRecord
                           (Language.PureScript.Names.OpName
                              'Language.PureScript.Names.TypeOpName)) ->
                 Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshowsPrec1
                   Language.PureScript.Sugar.Names.Env.$fShowExports2
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
6be116a5476a4dee277fae1bc29655df
  $fShowImportRecord_$s$cshow2 ::
    Language.PureScript.Sugar.Names.Env.ImportRecord
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ConstructorName)
    -> GHC.Base.String
  {- Arity: 1,
     Strictness: <S,1*U(1*U(1*U,U),U,U(U,U(U(U),U(U)),U(U(U),U(U))),U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Sugar.Names.Env.ImportRecord
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ConstructorName)) ->
                 Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshowsPrec2
                   Language.PureScript.Sugar.Names.Env.$fShowExports2
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
e241bcfd0288ee9add77ad07a0c885a8
  $fShowImportRecord_$s$cshow3 ::
    Language.PureScript.Sugar.Names.Env.ImportRecord
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
    -> GHC.Base.String
  {- Arity: 1,
     Strictness: <S,1*U(1*U(1*U,U),U,U(U,U(U(U),U(U)),U(U(U),U(U))),U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Sugar.Names.Env.ImportRecord
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ClassName)) ->
                 Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshowsPrec3
                   Language.PureScript.Sugar.Names.Env.$fShowExports2
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
20feb430fc355405cf99ee367fab3aba
  $fShowImportRecord_$s$cshow4 ::
    Language.PureScript.Sugar.Names.Env.ImportRecord
      Language.PureScript.Names.Ident
    -> GHC.Base.String
  {- Arity: 1,
     Strictness: <S,1*U(1*U(1*U,U),U,U(U,U(U(U),U(U)),U(U(U),U(U))),U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Sugar.Names.Env.ImportRecord
                           Language.PureScript.Names.Ident) ->
                 Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshowsPrec4
                   Language.PureScript.Sugar.Names.Env.$fShowExports2
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
edbc45951c1828f9c3f8eb0dbc3eab33
  $fShowImportRecord_$s$cshow5 ::
    Language.PureScript.Sugar.Names.Env.ImportRecord
      (Language.PureScript.Names.OpName
         'Language.PureScript.Names.ValueOpName)
    -> GHC.Base.String
  {- Arity: 1,
     Strictness: <S,1*U(1*U(1*U,U),U,U(U,U(U(U),U(U)),U(U(U),U(U))),U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Sugar.Names.Env.ImportRecord
                           (Language.PureScript.Names.OpName
                              'Language.PureScript.Names.ValueOpName)) ->
                 Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshowsPrec5
                   Language.PureScript.Sugar.Names.Env.$fShowExports2
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
0ab46ee85310c5c6259efe97fc873dcb
  $fShowImportRecord_$s$cshow6 ::
    Language.PureScript.Sugar.Names.Env.ImportRecord
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.KindName)
    -> GHC.Base.String
  {- Arity: 1,
     Strictness: <S,1*U(1*U(1*U,U),U,U(U,U(U(U),U(U)),U(U(U),U(U))),U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Sugar.Names.Env.ImportRecord
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.KindName)) ->
                 Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshowsPrec6
                   Language.PureScript.Sugar.Names.Env.$fShowExports2
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
703216161e3f1595cfcb9c499b652b6f
  $fShowImportRecord_$s$cshowList ::
    [Language.PureScript.Sugar.Names.Env.ImportRecord
       (Language.PureScript.Names.ProperName
          'Language.PureScript.Names.TypeName)]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Sugar.Names.Env.ImportRecord
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.TypeName)])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Language.PureScript.Sugar.Names.Env.ImportRecord
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.TypeName))
                   Language.PureScript.Sugar.Names.Env.$fShowImportRecord7
                   ls
                   s) -}
8bcff98346654d9ed66eec5514137c52
  $fShowImportRecord_$s$cshowList1 ::
    [Language.PureScript.Sugar.Names.Env.ImportRecord
       (Language.PureScript.Names.OpName
          'Language.PureScript.Names.TypeOpName)]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Sugar.Names.Env.ImportRecord
                             (Language.PureScript.Names.OpName
                                'Language.PureScript.Names.TypeOpName)])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Language.PureScript.Sugar.Names.Env.ImportRecord
                        (Language.PureScript.Names.OpName
                           'Language.PureScript.Names.TypeOpName))
                   Language.PureScript.Sugar.Names.Env.$fShowImportRecord8
                   ls
                   s) -}
56715208c6a0e177a6bb7dc20d548bd0
  $fShowImportRecord_$s$cshowList2 ::
    [Language.PureScript.Sugar.Names.Env.ImportRecord
       (Language.PureScript.Names.ProperName
          'Language.PureScript.Names.ConstructorName)]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Sugar.Names.Env.ImportRecord
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ConstructorName)])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Language.PureScript.Sugar.Names.Env.ImportRecord
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.ConstructorName))
                   Language.PureScript.Sugar.Names.Env.$fShowImportRecord9
                   ls
                   s) -}
50618c073bac7134fbc41ff46800e400
  $fShowImportRecord_$s$cshowList3 ::
    [Language.PureScript.Sugar.Names.Env.ImportRecord
       (Language.PureScript.Names.ProperName
          'Language.PureScript.Names.ClassName)]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Sugar.Names.Env.ImportRecord
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ClassName)])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Language.PureScript.Sugar.Names.Env.ImportRecord
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.ClassName))
                   Language.PureScript.Sugar.Names.Env.$fShowImportRecord10
                   ls
                   s) -}
72117e6c6cc0a3e0159fb840a53cd7c1
  $fShowImportRecord_$s$cshowList4 ::
    [Language.PureScript.Sugar.Names.Env.ImportRecord
       Language.PureScript.Names.Ident]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Sugar.Names.Env.ImportRecord
                             Language.PureScript.Names.Ident])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Language.PureScript.Sugar.Names.Env.ImportRecord
                        Language.PureScript.Names.Ident)
                   Language.PureScript.Sugar.Names.Env.$fShowImportRecord11
                   ls
                   s) -}
1f34cbfd45bec59bebea8288063fac25
  $fShowImportRecord_$s$cshowList5 ::
    [Language.PureScript.Sugar.Names.Env.ImportRecord
       (Language.PureScript.Names.OpName
          'Language.PureScript.Names.ValueOpName)]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Sugar.Names.Env.ImportRecord
                             (Language.PureScript.Names.OpName
                                'Language.PureScript.Names.ValueOpName)])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Language.PureScript.Sugar.Names.Env.ImportRecord
                        (Language.PureScript.Names.OpName
                           'Language.PureScript.Names.ValueOpName))
                   Language.PureScript.Sugar.Names.Env.$fShowImportRecord12
                   ls
                   s) -}
74a54b9587b97f1b5f61a7d5a32e44a7
  $fShowImportRecord_$s$cshowList6 ::
    [Language.PureScript.Sugar.Names.Env.ImportRecord
       (Language.PureScript.Names.ProperName
          'Language.PureScript.Names.KindName)]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Sugar.Names.Env.ImportRecord
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.KindName)])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Language.PureScript.Sugar.Names.Env.ImportRecord
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.KindName))
                   Language.PureScript.Sugar.Names.Env.$fShowImportRecord13
                   ls
                   s) -}
06c97ba5c09e065ef1b4ac69ccbfcc9e
  $fShowImportRecord_$s$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Sugar.Names.Env.ImportRecord
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName)
    -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S(S),1*U(U)><S,1*U(1*U(1*U,U),U,U(U,U(U(U),U(U)),U(U(U),U(U))),U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Sugar.Names.Env.ImportRecord
                            (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.TypeName)) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Language.PureScript.Sugar.Names.Env.ImportRecord ww3 ww4 ww5 ww6 ->
                 Language.PureScript.Sugar.Names.Env.$w$s$cshowsPrec
                   ww1
                   ww3
                   ww4
                   ww5
                   ww6 } }) -}
06c97ba5c09e065ef1b4ac69ccbfcc9e
  $fShowImportRecord_$s$cshowsPrec1 ::
    GHC.Types.Int
    -> Language.PureScript.Sugar.Names.Env.ImportRecord
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.TypeOpName)
    -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S(S),1*U(U)><S,1*U(1*U(1*U,U),U,U(U,U(U(U),U(U)),U(U(U),U(U))),U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Sugar.Names.Env.ImportRecord
                            (Language.PureScript.Names.OpName
                               'Language.PureScript.Names.TypeOpName)) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Language.PureScript.Sugar.Names.Env.ImportRecord ww3 ww4 ww5 ww6 ->
                 Language.PureScript.Sugar.Names.Env.$w$s$cshowsPrec1
                   ww1
                   ww3
                   ww4
                   ww5
                   ww6 } }) -}
06c97ba5c09e065ef1b4ac69ccbfcc9e
  $fShowImportRecord_$s$cshowsPrec2 ::
    GHC.Types.Int
    -> Language.PureScript.Sugar.Names.Env.ImportRecord
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ConstructorName)
    -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S(S),1*U(U)><S,1*U(1*U(1*U,U),U,U(U,U(U(U),U(U)),U(U(U),U(U))),U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Sugar.Names.Env.ImportRecord
                            (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.ConstructorName)) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Language.PureScript.Sugar.Names.Env.ImportRecord ww3 ww4 ww5 ww6 ->
                 Language.PureScript.Sugar.Names.Env.$w$s$cshowsPrec2
                   ww1
                   ww3
                   ww4
                   ww5
                   ww6 } }) -}
06c97ba5c09e065ef1b4ac69ccbfcc9e
  $fShowImportRecord_$s$cshowsPrec3 ::
    GHC.Types.Int
    -> Language.PureScript.Sugar.Names.Env.ImportRecord
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
    -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S(S),1*U(U)><S,1*U(1*U(1*U,U),U,U(U,U(U(U),U(U)),U(U(U),U(U))),U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Sugar.Names.Env.ImportRecord
                            (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.ClassName)) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Language.PureScript.Sugar.Names.Env.ImportRecord ww3 ww4 ww5 ww6 ->
                 Language.PureScript.Sugar.Names.Env.$w$s$cshowsPrec3
                   ww1
                   ww3
                   ww4
                   ww5
                   ww6 } }) -}
06c97ba5c09e065ef1b4ac69ccbfcc9e
  $fShowImportRecord_$s$cshowsPrec4 ::
    GHC.Types.Int
    -> Language.PureScript.Sugar.Names.Env.ImportRecord
         Language.PureScript.Names.Ident
    -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S(S),1*U(U)><S,1*U(1*U(1*U,U),U,U(U,U(U(U),U(U)),U(U(U),U(U))),U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Sugar.Names.Env.ImportRecord
                            Language.PureScript.Names.Ident) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Language.PureScript.Sugar.Names.Env.ImportRecord ww3 ww4 ww5 ww6 ->
                 Language.PureScript.Sugar.Names.Env.$w$s$cshowsPrec4
                   ww1
                   ww3
                   ww4
                   ww5
                   ww6 } }) -}
06c97ba5c09e065ef1b4ac69ccbfcc9e
  $fShowImportRecord_$s$cshowsPrec5 ::
    GHC.Types.Int
    -> Language.PureScript.Sugar.Names.Env.ImportRecord
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.ValueOpName)
    -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S(S),1*U(U)><S,1*U(1*U(1*U,U),U,U(U,U(U(U),U(U)),U(U(U),U(U))),U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Sugar.Names.Env.ImportRecord
                            (Language.PureScript.Names.OpName
                               'Language.PureScript.Names.ValueOpName)) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Language.PureScript.Sugar.Names.Env.ImportRecord ww3 ww4 ww5 ww6 ->
                 Language.PureScript.Sugar.Names.Env.$w$s$cshowsPrec5
                   ww1
                   ww3
                   ww4
                   ww5
                   ww6 } }) -}
06c97ba5c09e065ef1b4ac69ccbfcc9e
  $fShowImportRecord_$s$cshowsPrec6 ::
    GHC.Types.Int
    -> Language.PureScript.Sugar.Names.Env.ImportRecord
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.KindName)
    -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S(S),1*U(U)><S,1*U(1*U(1*U,U),U,U(U,U(U(U),U(U)),U(U(U),U(U))),U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Sugar.Names.Env.ImportRecord
                            (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.KindName)) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Language.PureScript.Sugar.Names.Env.ImportRecord ww3 ww4 ww5 ww6 ->
                 Language.PureScript.Sugar.Names.Env.$w$s$cshowsPrec6
                   ww1
                   ww3
                   ww4
                   ww5
                   ww6 } }) -}
06c97ba5c09e065ef1b4ac69ccbfcc9e
  $fShowImportRecord_$s$fShowImportRecord ::
    GHC.Show.Show
      (Language.PureScript.Sugar.Names.Env.ImportRecord
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Sugar.Names.Env.ImportRecord
                       (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.TypeName))
                  Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshowsPrec
                  (\ (x :: Language.PureScript.Sugar.Names.Env.ImportRecord
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.TypeName)) ->
                   Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshowsPrec
                     Language.PureScript.Sugar.Names.Env.$fShowExports2
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [Language.PureScript.Sugar.Names.Env.ImportRecord
                               (Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.TypeName)])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Language.PureScript.Sugar.Names.Env.ImportRecord
                          (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.TypeName))
                     (Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshowsPrec
                        Language.PureScript.Sugar.Names.Env.$fShowExports2)
                     ls
                     s) -}
06c97ba5c09e065ef1b4ac69ccbfcc9e
  $fShowImportRecord_$s$fShowImportRecord1 ::
    GHC.Show.Show
      (Language.PureScript.Sugar.Names.Env.ImportRecord
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.TypeOpName))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Sugar.Names.Env.ImportRecord
                       (Language.PureScript.Names.OpName
                          'Language.PureScript.Names.TypeOpName))
                  Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshowsPrec1
                  (\ (x :: Language.PureScript.Sugar.Names.Env.ImportRecord
                             (Language.PureScript.Names.OpName
                                'Language.PureScript.Names.TypeOpName)) ->
                   Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshowsPrec1
                     Language.PureScript.Sugar.Names.Env.$fShowExports2
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [Language.PureScript.Sugar.Names.Env.ImportRecord
                               (Language.PureScript.Names.OpName
                                  'Language.PureScript.Names.TypeOpName)])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Language.PureScript.Sugar.Names.Env.ImportRecord
                          (Language.PureScript.Names.OpName
                             'Language.PureScript.Names.TypeOpName))
                     (Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshowsPrec1
                        Language.PureScript.Sugar.Names.Env.$fShowExports2)
                     ls
                     s) -}
06c97ba5c09e065ef1b4ac69ccbfcc9e
  $fShowImportRecord_$s$fShowImportRecord2 ::
    GHC.Show.Show
      (Language.PureScript.Sugar.Names.Env.ImportRecord
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ConstructorName))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Sugar.Names.Env.ImportRecord
                       (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ConstructorName))
                  Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshowsPrec2
                  (\ (x :: Language.PureScript.Sugar.Names.Env.ImportRecord
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ConstructorName)) ->
                   Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshowsPrec2
                     Language.PureScript.Sugar.Names.Env.$fShowExports2
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [Language.PureScript.Sugar.Names.Env.ImportRecord
                               (Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.ConstructorName)])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Language.PureScript.Sugar.Names.Env.ImportRecord
                          (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ConstructorName))
                     (Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshowsPrec2
                        Language.PureScript.Sugar.Names.Env.$fShowExports2)
                     ls
                     s) -}
06c97ba5c09e065ef1b4ac69ccbfcc9e
  $fShowImportRecord_$s$fShowImportRecord3 ::
    GHC.Show.Show
      (Language.PureScript.Sugar.Names.Env.ImportRecord
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Sugar.Names.Env.ImportRecord
                       (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ClassName))
                  Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshowsPrec3
                  (\ (x :: Language.PureScript.Sugar.Names.Env.ImportRecord
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ClassName)) ->
                   Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshowsPrec3
                     Language.PureScript.Sugar.Names.Env.$fShowExports2
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [Language.PureScript.Sugar.Names.Env.ImportRecord
                               (Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.ClassName)])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Language.PureScript.Sugar.Names.Env.ImportRecord
                          (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ClassName))
                     (Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshowsPrec3
                        Language.PureScript.Sugar.Names.Env.$fShowExports2)
                     ls
                     s) -}
06c97ba5c09e065ef1b4ac69ccbfcc9e
  $fShowImportRecord_$s$fShowImportRecord4 ::
    GHC.Show.Show
      (Language.PureScript.Sugar.Names.Env.ImportRecord
         Language.PureScript.Names.Ident)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Sugar.Names.Env.ImportRecord
                       Language.PureScript.Names.Ident)
                  Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshowsPrec4
                  (\ (x :: Language.PureScript.Sugar.Names.Env.ImportRecord
                             Language.PureScript.Names.Ident) ->
                   Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshowsPrec4
                     Language.PureScript.Sugar.Names.Env.$fShowExports2
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [Language.PureScript.Sugar.Names.Env.ImportRecord
                               Language.PureScript.Names.Ident])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Language.PureScript.Sugar.Names.Env.ImportRecord
                          Language.PureScript.Names.Ident)
                     (Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshowsPrec4
                        Language.PureScript.Sugar.Names.Env.$fShowExports2)
                     ls
                     s) -}
06c97ba5c09e065ef1b4ac69ccbfcc9e
  $fShowImportRecord_$s$fShowImportRecord5 ::
    GHC.Show.Show
      (Language.PureScript.Sugar.Names.Env.ImportRecord
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.ValueOpName))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Sugar.Names.Env.ImportRecord
                       (Language.PureScript.Names.OpName
                          'Language.PureScript.Names.ValueOpName))
                  Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshowsPrec5
                  (\ (x :: Language.PureScript.Sugar.Names.Env.ImportRecord
                             (Language.PureScript.Names.OpName
                                'Language.PureScript.Names.ValueOpName)) ->
                   Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshowsPrec5
                     Language.PureScript.Sugar.Names.Env.$fShowExports2
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [Language.PureScript.Sugar.Names.Env.ImportRecord
                               (Language.PureScript.Names.OpName
                                  'Language.PureScript.Names.ValueOpName)])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Language.PureScript.Sugar.Names.Env.ImportRecord
                          (Language.PureScript.Names.OpName
                             'Language.PureScript.Names.ValueOpName))
                     (Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshowsPrec5
                        Language.PureScript.Sugar.Names.Env.$fShowExports2)
                     ls
                     s) -}
06c97ba5c09e065ef1b4ac69ccbfcc9e
  $fShowImportRecord_$s$fShowImportRecord6 ::
    GHC.Show.Show
      (Language.PureScript.Sugar.Names.Env.ImportRecord
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.KindName))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Sugar.Names.Env.ImportRecord
                       (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.KindName))
                  Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshowsPrec6
                  (\ (x :: Language.PureScript.Sugar.Names.Env.ImportRecord
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.KindName)) ->
                   Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshowsPrec6
                     Language.PureScript.Sugar.Names.Env.$fShowExports2
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [Language.PureScript.Sugar.Names.Env.ImportRecord
                               (Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.KindName)])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Language.PureScript.Sugar.Names.Env.ImportRecord
                          (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.KindName))
                     (Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshowsPrec6
                        Language.PureScript.Sugar.Names.Env.$fShowExports2)
                     ls
                     s) -}
330f296cc3ed68256ee5fc6aa457fa42
  $fShowImports ::
    GHC.Show.Show Language.PureScript.Sugar.Names.Env.Imports
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Sugar.Names.Env.Imports
                  Language.PureScript.Sugar.Names.Env.$fShowImports_$cshowsPrec
                  Language.PureScript.Sugar.Names.Env.$fShowImports_$cshow
                  Language.PureScript.Sugar.Names.Env.$fShowImports_$cshowList -}
330f296cc3ed68256ee5fc6aa457fa42
  $fShowImports1 ::
    Language.PureScript.Sugar.Names.Env.Imports -> GHC.Show.ShowS
  {- Arity: 1,
     Strictness: <S,1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)>,
     Unfolding: (\ (w :: Language.PureScript.Sugar.Names.Env.Imports) ->
                 case w of ww { Language.PureScript.Sugar.Names.Env.Imports ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ->
                 Language.PureScript.Sugar.Names.Env.$w$cshowsPrec3
                   0#
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9 }) -}
330f296cc3ed68256ee5fc6aa457fa42
  $fShowImports_$cshow ::
    Language.PureScript.Sugar.Names.Env.Imports -> GHC.Base.String
  {- Arity: 1,
     Strictness: <S,1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Language.PureScript.Sugar.Names.Env.Imports) ->
                 Language.PureScript.Sugar.Names.Env.$fShowImports_$cshowsPrec
                   Language.PureScript.Sugar.Names.Env.$fShowExports2
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
330f296cc3ed68256ee5fc6aa457fa42
  $fShowImports_$cshowList ::
    [Language.PureScript.Sugar.Names.Env.Imports] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Sugar.Names.Env.Imports])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Language.PureScript.Sugar.Names.Env.Imports
                   Language.PureScript.Sugar.Names.Env.$fShowImports1
                   ls
                   s) -}
330f296cc3ed68256ee5fc6aa457fa42
  $fShowImports_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Sugar.Names.Env.Imports -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Language.PureScript.Sugar.Names.Env.Imports) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Language.PureScript.Sugar.Names.Env.Imports ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ->
                 Language.PureScript.Sugar.Names.Env.$w$cshowsPrec3
                   ww1
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10
                   ww11 } }) -}
cdff611466db2b024bcd0b0b3d9242a1
  $s$fShow(,) ::
    GHC.Show.Show
      ([Language.PureScript.Names.ProperName
          'Language.PureScript.Names.ConstructorName],
       Language.PureScript.Names.ModuleName)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ ([Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.ConstructorName],
                     Language.PureScript.Names.ModuleName)
                  (GHC.Show.$fShow(,)_$cshowsPrec
                     @ [Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ConstructorName]
                     @ Language.PureScript.Names.ModuleName
                     Language.PureScript.Sugar.Names.Env.$s$fShow(,)_$s$fShow[]
                     Language.PureScript.Names.$fShowModuleName)
                  (\ (x :: ([Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.ConstructorName],
                            Language.PureScript.Names.ModuleName)) ->
                   GHC.Show.$fShow(,)_$cshowsPrec
                     @ [Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ConstructorName]
                     @ Language.PureScript.Names.ModuleName
                     Language.PureScript.Sugar.Names.Env.$s$fShow(,)_$s$fShow[]
                     Language.PureScript.Names.$fShowModuleName
                     GHC.Show.$fShow(,)1
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [([Language.PureScript.Names.ProperName
                                 'Language.PureScript.Names.ConstructorName],
                              Language.PureScript.Names.ModuleName)])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ ([Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.ConstructorName],
                        Language.PureScript.Names.ModuleName)
                     (GHC.Show.$fShow(,)_$cshowsPrec
                        @ [Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ConstructorName]
                        @ Language.PureScript.Names.ModuleName
                        Language.PureScript.Sugar.Names.Env.$s$fShow(,)_$s$fShow[]
                        Language.PureScript.Names.$fShowModuleName
                        GHC.Show.$fShow(,)1)
                     ls
                     s) -}
4cc554b6b017c7ff2457cefa75aadf6b
  $s$fShow(,)_$s$fShow[] ::
    GHC.Show.Show
      [Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ConstructorName]
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ [Language.PureScript.Names.ProperName
                       'Language.PureScript.Names.ConstructorName]
                  (\ (ds :: GHC.Types.Int) ->
                   Language.PureScript.Names.$fShowProperName_$cshowList
                     @ 'Language.PureScript.Names.ConstructorName)
                  (\ (x :: [Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ConstructorName]) ->
                   GHC.Show.showList__
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ConstructorName)
                     (Language.PureScript.Names.$fShowProperName1
                        @ 'Language.PureScript.Names.ConstructorName)
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [[Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ConstructorName]])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ [Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ConstructorName]
                     (Language.PureScript.Names.$fShowProperName_$cshowList
                        @ 'Language.PureScript.Names.ConstructorName)
                     ls
                     s) -}
29004e814f7384cc06ec1d3b45ee44c3
  $s$fShowMap_$cshowsPrec10 ::
    GHC.Show.Show
      [Language.PureScript.Sugar.Names.Env.ImportRecord
         Language.PureScript.Names.Ident]
  {- Unfolding: (GHC.Show.$fShow[]
                   @ (Language.PureScript.Sugar.Names.Env.ImportRecord
                        Language.PureScript.Names.Ident)
                   Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$fShowImportRecord4) -}
31ce1c83783b08d58374df489cc6003b
  $s$fShowMap_$cshowsPrec12 ::
    GHC.Show.Show
      [Language.PureScript.Sugar.Names.Env.ImportRecord
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)]
  {- Unfolding: (GHC.Show.$fShow[]
                   @ (Language.PureScript.Sugar.Names.Env.ImportRecord
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.ClassName))
                   Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$fShowImportRecord3) -}
e3ae32150ce87b85895b7823c586e783
  $s$fShowMap_$cshowsPrec14 ::
    GHC.Show.Show
      [Language.PureScript.Sugar.Names.Env.ImportRecord
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ConstructorName)]
  {- Unfolding: (GHC.Show.$fShow[]
                   @ (Language.PureScript.Sugar.Names.Env.ImportRecord
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.ConstructorName))
                   Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$fShowImportRecord2) -}
352578a26e1f05f3f9621821f10a790a
  $s$fShowMap_$cshowsPrec16 ::
    GHC.Show.Show
      [Language.PureScript.Sugar.Names.Env.ImportRecord
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.TypeOpName)]
  {- Unfolding: (GHC.Show.$fShow[]
                   @ (Language.PureScript.Sugar.Names.Env.ImportRecord
                        (Language.PureScript.Names.OpName
                           'Language.PureScript.Names.TypeOpName))
                   Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$fShowImportRecord1) -}
4656e41310ddbfe14a930711b35666b8
  $s$fShowMap_$cshowsPrec18 ::
    GHC.Show.Show
      [Language.PureScript.Sugar.Names.Env.ImportRecord
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName)]
  {- Unfolding: (GHC.Show.$fShow[]
                   @ (Language.PureScript.Sugar.Names.Env.ImportRecord
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.TypeName))
                   Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$fShowImportRecord) -}
c19bfe5974c5d19ddc843d7995e6dc07
  $s$fShowMap_$cshowsPrec6 ::
    GHC.Show.Show
      [Language.PureScript.Sugar.Names.Env.ImportRecord
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.KindName)]
  {- Unfolding: (GHC.Show.$fShow[]
                   @ (Language.PureScript.Sugar.Names.Env.ImportRecord
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.KindName))
                   Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$fShowImportRecord6) -}
58546c976fefa4884cacdb1c25190bb8
  $s$fShowMap_$cshowsPrec8 ::
    GHC.Show.Show
      [Language.PureScript.Sugar.Names.Env.ImportRecord
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.ValueOpName)]
  {- Unfolding: (GHC.Show.$fShow[]
                   @ (Language.PureScript.Sugar.Names.Env.ImportRecord
                        (Language.PureScript.Names.OpName
                           'Language.PureScript.Names.ValueOpName))
                   Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$fShowImportRecord5) -}
f295fac6fb61e418e7a93478c07bc26a
  $s$fShowMap_$cshowsPrec_$s$fShowQualified ::
    GHC.Show.Show
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.KindName))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.Qualified
                       (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.KindName))
                  (Language.PureScript.Names.$fShowQualified_$cshowsPrec
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.KindName)
                     (Language.PureScript.Names.$fShowProperName
                        @ 'Language.PureScript.Names.KindName))
                  (\ (x :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.KindName)) ->
                   Language.PureScript.Names.$fShowQualified_$cshowsPrec
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.KindName)
                     (Language.PureScript.Names.$fShowProperName
                        @ 'Language.PureScript.Names.KindName)
                     Language.PureScript.Names.$fShowIdent2
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [Language.PureScript.Names.Qualified
                               (Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.KindName)])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Language.PureScript.Names.Qualified
                          (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.KindName))
                     (Language.PureScript.Names.$fShowQualified_$cshowsPrec
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.KindName)
                        (Language.PureScript.Names.$fShowProperName
                           @ 'Language.PureScript.Names.KindName)
                        Language.PureScript.Names.$fShowIdent2)
                     ls
                     s) -}
d39a77311fbee3fc8e65ecb104d1f1e1
  $s$fShowMap_$cshowsPrec_$s$fShowQualified1 ::
    GHC.Show.Show
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.ValueOpName))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.Qualified
                       (Language.PureScript.Names.OpName
                          'Language.PureScript.Names.ValueOpName))
                  (Language.PureScript.Names.$fShowQualified_$cshowsPrec
                     @ (Language.PureScript.Names.OpName
                          'Language.PureScript.Names.ValueOpName)
                     (Language.PureScript.Names.$fShowOpName
                        @ 'Language.PureScript.Names.ValueOpName))
                  (\ (x :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.OpName
                                'Language.PureScript.Names.ValueOpName)) ->
                   Language.PureScript.Names.$fShowQualified_$cshowsPrec
                     @ (Language.PureScript.Names.OpName
                          'Language.PureScript.Names.ValueOpName)
                     (Language.PureScript.Names.$fShowOpName
                        @ 'Language.PureScript.Names.ValueOpName)
                     Language.PureScript.Names.$fShowIdent2
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [Language.PureScript.Names.Qualified
                               (Language.PureScript.Names.OpName
                                  'Language.PureScript.Names.ValueOpName)])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Language.PureScript.Names.Qualified
                          (Language.PureScript.Names.OpName
                             'Language.PureScript.Names.ValueOpName))
                     (Language.PureScript.Names.$fShowQualified_$cshowsPrec
                        @ (Language.PureScript.Names.OpName
                             'Language.PureScript.Names.ValueOpName)
                        (Language.PureScript.Names.$fShowOpName
                           @ 'Language.PureScript.Names.ValueOpName)
                        Language.PureScript.Names.$fShowIdent2)
                     ls
                     s) -}
0e7bba1f77507178dc8e8d0055fec1e9
  $s$fShowMap_$cshowsPrec_$s$fShowQualified2 ::
    GHC.Show.Show
      (Language.PureScript.Names.Qualified
         Language.PureScript.Names.Ident)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.Qualified
                       Language.PureScript.Names.Ident)
                  (Language.PureScript.Names.$fShowQualified_$cshowsPrec
                     @ Language.PureScript.Names.Ident
                     Language.PureScript.Names.$fShowIdent)
                  (\ (x :: Language.PureScript.Names.Qualified
                             Language.PureScript.Names.Ident) ->
                   Language.PureScript.Names.$fShowQualified_$cshowsPrec
                     @ Language.PureScript.Names.Ident
                     Language.PureScript.Names.$fShowIdent
                     Language.PureScript.Names.$fShowIdent2
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [Language.PureScript.Names.Qualified
                               Language.PureScript.Names.Ident])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Language.PureScript.Names.Qualified
                          Language.PureScript.Names.Ident)
                     (Language.PureScript.Names.$fShowQualified_$cshowsPrec
                        @ Language.PureScript.Names.Ident
                        Language.PureScript.Names.$fShowIdent
                        Language.PureScript.Names.$fShowIdent2)
                     ls
                     s) -}
f18c82c7c824990739be58d5db1a4d5e
  $s$fShowMap_$cshowsPrec_$s$fShowQualified3 ::
    GHC.Show.Show
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.Qualified
                       (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ClassName))
                  (Language.PureScript.Names.$fShowQualified_$cshowsPrec
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ClassName)
                     (Language.PureScript.Names.$fShowProperName
                        @ 'Language.PureScript.Names.ClassName))
                  (\ (x :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ClassName)) ->
                   Language.PureScript.Names.$fShowQualified_$cshowsPrec
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ClassName)
                     (Language.PureScript.Names.$fShowProperName
                        @ 'Language.PureScript.Names.ClassName)
                     Language.PureScript.Names.$fShowIdent2
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [Language.PureScript.Names.Qualified
                               (Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.ClassName)])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Language.PureScript.Names.Qualified
                          (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ClassName))
                     (Language.PureScript.Names.$fShowQualified_$cshowsPrec
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ClassName)
                        (Language.PureScript.Names.$fShowProperName
                           @ 'Language.PureScript.Names.ClassName)
                        Language.PureScript.Names.$fShowIdent2)
                     ls
                     s) -}
1966d118fb6dfa7e672d58df4302e43e
  $s$fShowMap_$cshowsPrec_$s$fShowQualified4 ::
    GHC.Show.Show
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ConstructorName))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.Qualified
                       (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ConstructorName))
                  (Language.PureScript.Names.$fShowQualified_$cshowsPrec
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ConstructorName)
                     (Language.PureScript.Names.$fShowProperName
                        @ 'Language.PureScript.Names.ConstructorName))
                  (\ (x :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ConstructorName)) ->
                   Language.PureScript.Names.$fShowQualified_$cshowsPrec
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ConstructorName)
                     (Language.PureScript.Names.$fShowProperName
                        @ 'Language.PureScript.Names.ConstructorName)
                     Language.PureScript.Names.$fShowIdent2
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [Language.PureScript.Names.Qualified
                               (Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.ConstructorName)])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Language.PureScript.Names.Qualified
                          (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ConstructorName))
                     (Language.PureScript.Names.$fShowQualified_$cshowsPrec
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ConstructorName)
                        (Language.PureScript.Names.$fShowProperName
                           @ 'Language.PureScript.Names.ConstructorName)
                        Language.PureScript.Names.$fShowIdent2)
                     ls
                     s) -}
af2a09140e5fd2043fc479187069067b
  $s$fShowMap_$cshowsPrec_$s$fShowQualified5 ::
    GHC.Show.Show
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.TypeOpName))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.Qualified
                       (Language.PureScript.Names.OpName
                          'Language.PureScript.Names.TypeOpName))
                  (Language.PureScript.Names.$fShowQualified_$cshowsPrec
                     @ (Language.PureScript.Names.OpName
                          'Language.PureScript.Names.TypeOpName)
                     (Language.PureScript.Names.$fShowOpName
                        @ 'Language.PureScript.Names.TypeOpName))
                  (\ (x :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.OpName
                                'Language.PureScript.Names.TypeOpName)) ->
                   Language.PureScript.Names.$fShowQualified_$cshowsPrec
                     @ (Language.PureScript.Names.OpName
                          'Language.PureScript.Names.TypeOpName)
                     (Language.PureScript.Names.$fShowOpName
                        @ 'Language.PureScript.Names.TypeOpName)
                     Language.PureScript.Names.$fShowIdent2
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [Language.PureScript.Names.Qualified
                               (Language.PureScript.Names.OpName
                                  'Language.PureScript.Names.TypeOpName)])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Language.PureScript.Names.Qualified
                          (Language.PureScript.Names.OpName
                             'Language.PureScript.Names.TypeOpName))
                     (Language.PureScript.Names.$fShowQualified_$cshowsPrec
                        @ (Language.PureScript.Names.OpName
                             'Language.PureScript.Names.TypeOpName)
                        (Language.PureScript.Names.$fShowOpName
                           @ 'Language.PureScript.Names.TypeOpName)
                        Language.PureScript.Names.$fShowIdent2)
                     ls
                     s) -}
1ad64ab54c03cf112b771df9ee928e87
  $s$fShowMap_$cshowsPrec_$s$fShowQualified6 ::
    GHC.Show.Show
      (Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName))
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Language.PureScript.Names.Qualified
                       (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.TypeName))
                  (Language.PureScript.Names.$fShowQualified_$cshowsPrec
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.TypeName)
                     (Language.PureScript.Names.$fShowProperName
                        @ 'Language.PureScript.Names.TypeName))
                  (\ (x :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.TypeName)) ->
                   Language.PureScript.Names.$fShowQualified_$cshowsPrec
                     @ (Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.TypeName)
                     (Language.PureScript.Names.$fShowProperName
                        @ 'Language.PureScript.Names.TypeName)
                     Language.PureScript.Names.$fShowIdent2
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [Language.PureScript.Names.Qualified
                               (Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.TypeName)])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (Language.PureScript.Names.Qualified
                          (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.TypeName))
                     (Language.PureScript.Names.$fShowQualified_$cshowsPrec
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.TypeName)
                        (Language.PureScript.Names.$fShowProperName
                           @ 'Language.PureScript.Names.TypeName)
                        Language.PureScript.Names.$fShowIdent2)
                     ls
                     s) -}
d76850b1e4f5a33b15bc994e97162734
  $s$fShowQualified_$cshowList ::
    [Language.PureScript.Names.Qualified
       (Language.PureScript.Names.ProperName
          'Language.PureScript.Names.KindName)]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.KindName)])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Language.PureScript.Names.Qualified
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.KindName))
                   (Language.PureScript.Names.$fShowQualified_$cshowsPrec
                      @ (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.KindName)
                      (Language.PureScript.Names.$fShowProperName
                         @ 'Language.PureScript.Names.KindName)
                      Language.PureScript.Names.$fShowIdent2)
                   ls
                   s) -}
19df7718a2b65beb8f2d914d82308191
  $s$fShowQualified_$cshowList1 ::
    [Language.PureScript.Names.Qualified
       (Language.PureScript.Names.OpName
          'Language.PureScript.Names.ValueOpName)]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.OpName
                                'Language.PureScript.Names.ValueOpName)])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Language.PureScript.Names.Qualified
                        (Language.PureScript.Names.OpName
                           'Language.PureScript.Names.ValueOpName))
                   (Language.PureScript.Names.$fShowQualified_$cshowsPrec
                      @ (Language.PureScript.Names.OpName
                           'Language.PureScript.Names.ValueOpName)
                      (Language.PureScript.Names.$fShowOpName
                         @ 'Language.PureScript.Names.ValueOpName)
                      Language.PureScript.Names.$fShowIdent2)
                   ls
                   s) -}
928f0f2862696920c4aa67477ed13189
  $s$fShowQualified_$cshowList2 ::
    [Language.PureScript.Names.Qualified
       Language.PureScript.Names.Ident]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Names.Qualified
                             Language.PureScript.Names.Ident])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Language.PureScript.Names.Qualified
                        Language.PureScript.Names.Ident)
                   (Language.PureScript.Names.$fShowQualified_$cshowsPrec
                      @ Language.PureScript.Names.Ident
                      Language.PureScript.Names.$fShowIdent
                      Language.PureScript.Names.$fShowIdent2)
                   ls
                   s) -}
02e98c8b46095c34cb31d16c5926a127
  $s$fShowQualified_$cshowList3 ::
    [Language.PureScript.Names.Qualified
       (Language.PureScript.Names.ProperName
          'Language.PureScript.Names.ClassName)]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ClassName)])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Language.PureScript.Names.Qualified
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.ClassName))
                   (Language.PureScript.Names.$fShowQualified_$cshowsPrec
                      @ (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.ClassName)
                      (Language.PureScript.Names.$fShowProperName
                         @ 'Language.PureScript.Names.ClassName)
                      Language.PureScript.Names.$fShowIdent2)
                   ls
                   s) -}
80d3f65ee6154f3b6cd003df74254a76
  $s$fShowQualified_$cshowList4 ::
    [Language.PureScript.Names.Qualified
       (Language.PureScript.Names.ProperName
          'Language.PureScript.Names.ConstructorName)]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ConstructorName)])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Language.PureScript.Names.Qualified
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.ConstructorName))
                   (Language.PureScript.Names.$fShowQualified_$cshowsPrec
                      @ (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.ConstructorName)
                      (Language.PureScript.Names.$fShowProperName
                         @ 'Language.PureScript.Names.ConstructorName)
                      Language.PureScript.Names.$fShowIdent2)
                   ls
                   s) -}
fb2e13bc9489d2cd58a626664fdf5e7a
  $s$fShowQualified_$cshowList5 ::
    [Language.PureScript.Names.Qualified
       (Language.PureScript.Names.OpName
          'Language.PureScript.Names.TypeOpName)]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.OpName
                                'Language.PureScript.Names.TypeOpName)])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Language.PureScript.Names.Qualified
                        (Language.PureScript.Names.OpName
                           'Language.PureScript.Names.TypeOpName))
                   (Language.PureScript.Names.$fShowQualified_$cshowsPrec
                      @ (Language.PureScript.Names.OpName
                           'Language.PureScript.Names.TypeOpName)
                      (Language.PureScript.Names.$fShowOpName
                         @ 'Language.PureScript.Names.TypeOpName)
                      Language.PureScript.Names.$fShowIdent2)
                   ls
                   s) -}
c7533475e7d1d55526828c05cbd27ecb
  $s$fShowQualified_$cshowList6 ::
    [Language.PureScript.Names.Qualified
       (Language.PureScript.Names.ProperName
          'Language.PureScript.Names.TypeName)]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.TypeName)])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Language.PureScript.Names.Qualified
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.TypeName))
                   (Language.PureScript.Names.$fShowQualified_$cshowsPrec
                      @ (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.TypeName)
                      (Language.PureScript.Names.$fShowProperName
                         @ 'Language.PureScript.Names.TypeName)
                      Language.PureScript.Names.$fShowIdent2)
                   ls
                   s) -}
eccdead0eba41fecff0ebcf17ff2d48b
  $s$fShowQualified_$cshowsPrec ::
    GHC.Types.Int
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.KindName)
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U,U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w1 :: GHC.Types.Int)
                   (w2 :: Language.PureScript.Names.Qualified
                            (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.KindName)) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Language.PureScript.Names.Qualified ww3 ww4 ->
                 Language.PureScript.Names.$w$cshowsPrec4
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.KindName)
                   (Language.PureScript.Names.$fShowProperName
                      @ 'Language.PureScript.Names.KindName)
                   ww1
                   ww3
                   ww4 } }) -}
4f408fa53cbb7336d07e6c06d9097915
  $s$fShowQualified_$cshowsPrec1 ::
    GHC.Types.Int
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.ValueOpName)
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U,U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w1 :: GHC.Types.Int)
                   (w2 :: Language.PureScript.Names.Qualified
                            (Language.PureScript.Names.OpName
                               'Language.PureScript.Names.ValueOpName)) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Language.PureScript.Names.Qualified ww3 ww4 ->
                 Language.PureScript.Names.$w$cshowsPrec4
                   @ (Language.PureScript.Names.OpName
                        'Language.PureScript.Names.ValueOpName)
                   (Language.PureScript.Names.$fShowOpName
                      @ 'Language.PureScript.Names.ValueOpName)
                   ww1
                   ww3
                   ww4 } }) -}
787e22bbfe026b69a448d3e851ab9b86
  $s$fShowQualified_$cshowsPrec2 ::
    GHC.Types.Int
    -> Language.PureScript.Names.Qualified
         Language.PureScript.Names.Ident
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U,U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w1 :: GHC.Types.Int)
                   (w2 :: Language.PureScript.Names.Qualified
                            Language.PureScript.Names.Ident) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Language.PureScript.Names.Qualified ww3 ww4 ->
                 Language.PureScript.Names.$w$cshowsPrec4
                   @ Language.PureScript.Names.Ident
                   Language.PureScript.Names.$fShowIdent
                   ww1
                   ww3
                   ww4 } }) -}
f73654e67ca706919eef877fd88e7b32
  $s$fShowQualified_$cshowsPrec3 ::
    GHC.Types.Int
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U,U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w1 :: GHC.Types.Int)
                   (w2 :: Language.PureScript.Names.Qualified
                            (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.ClassName)) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Language.PureScript.Names.Qualified ww3 ww4 ->
                 Language.PureScript.Names.$w$cshowsPrec4
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.ClassName)
                   (Language.PureScript.Names.$fShowProperName
                      @ 'Language.PureScript.Names.ClassName)
                   ww1
                   ww3
                   ww4 } }) -}
3b26255b45616dda45690a1ae96d806e
  $s$fShowQualified_$cshowsPrec4 ::
    GHC.Types.Int
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ConstructorName)
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U,U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w1 :: GHC.Types.Int)
                   (w2 :: Language.PureScript.Names.Qualified
                            (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.ConstructorName)) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Language.PureScript.Names.Qualified ww3 ww4 ->
                 Language.PureScript.Names.$w$cshowsPrec4
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.ConstructorName)
                   (Language.PureScript.Names.$fShowProperName
                      @ 'Language.PureScript.Names.ConstructorName)
                   ww1
                   ww3
                   ww4 } }) -}
f20e668dd74232f23652168b80e7ae25
  $s$fShowQualified_$cshowsPrec5 ::
    GHC.Types.Int
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.TypeOpName)
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U,U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w1 :: GHC.Types.Int)
                   (w2 :: Language.PureScript.Names.Qualified
                            (Language.PureScript.Names.OpName
                               'Language.PureScript.Names.TypeOpName)) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Language.PureScript.Names.Qualified ww3 ww4 ->
                 Language.PureScript.Names.$w$cshowsPrec4
                   @ (Language.PureScript.Names.OpName
                        'Language.PureScript.Names.TypeOpName)
                   (Language.PureScript.Names.$fShowOpName
                      @ 'Language.PureScript.Names.TypeOpName)
                   ww1
                   ww3
                   ww4 } }) -}
9581f57cbfbed960f981f8a7060baa44
  $s$fShowQualified_$cshowsPrec6 ::
    GHC.Types.Int
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName)
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U,U)>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w1 :: GHC.Types.Int)
                   (w2 :: Language.PureScript.Names.Qualified
                            (Language.PureScript.Names.ProperName
                               'Language.PureScript.Names.TypeName)) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 case w2 of ww2 { Language.PureScript.Names.Qualified ww3 ww4 ->
                 Language.PureScript.Names.$w$cshowsPrec4
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.TypeName)
                   (Language.PureScript.Names.$fShowProperName
                      @ 'Language.PureScript.Names.TypeName)
                   ww1
                   ww3
                   ww4 } }) -}
449a8c17308107974d1391448ba1d7ae
  $s$fShow[]_$cshow ::
    [Language.PureScript.Names.ProperName
       'Language.PureScript.Names.ConstructorName]
    -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: [Language.PureScript.Names.ProperName
                            'Language.PureScript.Names.ConstructorName]) ->
                 GHC.Show.showList__
                   @ (Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.ConstructorName)
                   (Language.PureScript.Names.$fShowProperName1
                      @ 'Language.PureScript.Names.ConstructorName)
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
975b17c6fdbe3a8c7b43399739f9bb8e
  $s$fShow[]_$cshowList ::
    [[Language.PureScript.Names.ProperName
        'Language.PureScript.Names.ConstructorName]]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [[Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ConstructorName]])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ [Language.PureScript.Names.ProperName
                        'Language.PureScript.Names.ConstructorName]
                   (Language.PureScript.Names.$fShowProperName_$cshowList
                      @ 'Language.PureScript.Names.ConstructorName)
                   ls
                   s) -}
9d7593b244cf635468ae1fbb7b50ef2f
  $sfromList ::
    [(Language.PureScript.Names.ModuleName, a)]
    -> Data.Map.Internal.Map Language.PureScript.Names.ModuleName a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a
                   (ds :: [(Language.PureScript.Names.ModuleName, a)]) ->
                 case ds of wild {
                   []
                   -> Data.Map.Internal.Tip @ Language.PureScript.Names.ModuleName @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case kx
                                  `cast`
                                (Language.PureScript.Names.N:ModuleName[0]) of nt { DEFAULT ->
                           Data.Map.Internal.Bin
                             @ Language.PureScript.Names.ModuleName
                             @ a
                             1#
                             nt `cast` (Sym (Language.PureScript.Names.N:ModuleName[0]))
                             x
                             (Data.Map.Internal.Tip @ Language.PureScript.Names.ModuleName @ a)
                             (Data.Map.Internal.Tip
                                @ Language.PureScript.Names.ModuleName
                                @ a) }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case GHC.Classes.$fOrd[]_$ccompare
                                  @ (Language.PureScript.Names.ProperName
                                       'Language.PureScript.Names.Namespace)
                                  (Language.PureScript.Names.$fOrdProperName
                                     @ 'Language.PureScript.Names.Namespace)
                                  kx `cast` (Language.PureScript.Names.N:ModuleName[0])
                                  ky `cast` (Language.PureScript.Names.N:ModuleName[0]) of wild4 {
                             DEFAULT
                             -> case kx
                                       `cast`
                                     (Language.PureScript.Names.N:ModuleName[0]) of nt { DEFAULT ->
                                Language.PureScript.Sugar.Names.Env.$sfromList_$spoly_go14
                                  @ a
                                  ky
                                  ds3
                                  ipv1
                                  (Data.Map.Internal.Bin
                                     @ Language.PureScript.Names.ModuleName
                                     @ a
                                     1#
                                     nt `cast` (Sym (Language.PureScript.Names.N:ModuleName[0]))
                                     x
                                     (Data.Map.Internal.Tip
                                        @ Language.PureScript.Names.ModuleName
                                        @ a)
                                     (Data.Map.Internal.Tip
                                        @ Language.PureScript.Names.ModuleName
                                        @ a)) }
                             GHC.Types.LT
                             -> case kx
                                       `cast`
                                     (Language.PureScript.Names.N:ModuleName[0]) of nt { DEFAULT ->
                                Language.PureScript.Sugar.Names.Env.$sfromList_$s$wpoly_go13
                                  @ a
                                  ky
                                  ds3
                                  ipv1
                                  (Data.Map.Internal.Bin
                                     @ Language.PureScript.Names.ModuleName
                                     @ a
                                     1#
                                     nt `cast` (Sym (Language.PureScript.Names.N:ModuleName[0]))
                                     x
                                     (Data.Map.Internal.Tip
                                        @ Language.PureScript.Names.ModuleName
                                        @ a)
                                     (Data.Map.Internal.Tip
                                        @ Language.PureScript.Names.ModuleName
                                        @ a))
                                  1# } } } } } }) -}
8cdbf3847094f96b08cbae8c321abe90
  $sfromList1 ::
    [(Language.PureScript.Names.ProperName
        'Language.PureScript.Names.KindName,
      a)]
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.KindName)
         a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a
                   (ds :: [(Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.KindName,
                            a)]) ->
                 case ds of wild {
                   []
                   -> Data.Map.Internal.Tip
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.KindName)
                        @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case kx
                                  `cast`
                                (Language.PureScript.Names.N:ProperName[0]
                                     <'Language.PureScript.Names.KindName>_P) of nt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                           Data.Map.Internal.Bin
                             @ (Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.KindName)
                             @ a
                             1#
                             nt
                               `cast`
                             (Sym (Language.PureScript.Names.N:ProperName[0]
                                       <'Language.PureScript.Names.KindName>_P))
                             x
                             (Data.Map.Internal.Tip
                                @ (Language.PureScript.Names.ProperName
                                     'Language.PureScript.Names.KindName)
                                @ a)
                             (Data.Map.Internal.Tip
                                @ (Language.PureScript.Names.ProperName
                                     'Language.PureScript.Names.KindName)
                                @ a) }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case kx
                                  `cast`
                                (Language.PureScript.Names.N:ProperName[0]
                                     <'Language.PureScript.Names.KindName>_P) of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                           case ky
                                  `cast`
                                (Language.PureScript.Names.N:ProperName[0]
                                     <'Language.PureScript.Names.KindName>_P) of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                           case Data.Text.$w$ccompare ww1 ww2 ww3 ww5 ww6 ww7 of wild4 {
                             DEFAULT
                             -> Language.PureScript.Sugar.Names.Env.$sfromList_$spoly_go1
                                  @ a
                                  ww4
                                    `cast`
                                  (Sym (Language.PureScript.Names.N:ProperName[0]
                                            <'Language.PureScript.Names.KindName>_P))
                                  ds3
                                  ipv1
                                  (Data.Map.Internal.Bin
                                     @ (Language.PureScript.Names.ProperName
                                          'Language.PureScript.Names.KindName)
                                     @ a
                                     1#
                                     ww
                                       `cast`
                                     (Sym (Language.PureScript.Names.N:ProperName[0]
                                               <'Language.PureScript.Names.KindName>_P))
                                     x
                                     (Data.Map.Internal.Tip
                                        @ (Language.PureScript.Names.ProperName
                                             'Language.PureScript.Names.KindName)
                                        @ a)
                                     (Data.Map.Internal.Tip
                                        @ (Language.PureScript.Names.ProperName
                                             'Language.PureScript.Names.KindName)
                                        @ a))
                             GHC.Types.LT
                             -> Language.PureScript.Sugar.Names.Env.$sfromList_$s$wpoly_go1
                                  @ a
                                  ww4
                                    `cast`
                                  (Sym (Language.PureScript.Names.N:ProperName[0]
                                            <'Language.PureScript.Names.KindName>_P))
                                  ds3
                                  ipv1
                                  (Data.Map.Internal.Bin
                                     @ (Language.PureScript.Names.ProperName
                                          'Language.PureScript.Names.KindName)
                                     @ a
                                     1#
                                     ww
                                       `cast`
                                     (Sym (Language.PureScript.Names.N:ProperName[0]
                                               <'Language.PureScript.Names.KindName>_P))
                                     x
                                     (Data.Map.Internal.Tip
                                        @ (Language.PureScript.Names.ProperName
                                             'Language.PureScript.Names.KindName)
                                        @ a)
                                     (Data.Map.Internal.Tip
                                        @ (Language.PureScript.Names.ProperName
                                             'Language.PureScript.Names.KindName)
                                        @ a))
                                  1# } } } } } } }) -}
f82e4028f16891d550ba93a9aed37e6e
  $sfromList2 ::
    [(Language.PureScript.Names.ProperName
        'Language.PureScript.Names.ClassName,
      a)]
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
         a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a
                   (ds :: [(Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ClassName,
                            a)]) ->
                 case ds of wild {
                   []
                   -> Data.Map.Internal.Tip
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.ClassName)
                        @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case kx
                                  `cast`
                                (Language.PureScript.Names.N:ProperName[0]
                                     <'Language.PureScript.Names.ClassName>_P) of nt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                           Data.Map.Internal.Bin
                             @ (Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.ClassName)
                             @ a
                             1#
                             nt
                               `cast`
                             (Sym (Language.PureScript.Names.N:ProperName[0]
                                       <'Language.PureScript.Names.ClassName>_P))
                             x
                             (Data.Map.Internal.Tip
                                @ (Language.PureScript.Names.ProperName
                                     'Language.PureScript.Names.ClassName)
                                @ a)
                             (Data.Map.Internal.Tip
                                @ (Language.PureScript.Names.ProperName
                                     'Language.PureScript.Names.ClassName)
                                @ a) }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case kx
                                  `cast`
                                (Language.PureScript.Names.N:ProperName[0]
                                     <'Language.PureScript.Names.ClassName>_P) of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                           case ky
                                  `cast`
                                (Language.PureScript.Names.N:ProperName[0]
                                     <'Language.PureScript.Names.ClassName>_P) of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                           case Data.Text.$w$ccompare ww1 ww2 ww3 ww5 ww6 ww7 of wild4 {
                             DEFAULT
                             -> Language.PureScript.Sugar.Names.Env.$sfromList_$spoly_go2
                                  @ a
                                  ww4
                                    `cast`
                                  (Sym (Language.PureScript.Names.N:ProperName[0]
                                            <'Language.PureScript.Names.ClassName>_P))
                                  ds3
                                  ipv1
                                  (Data.Map.Internal.Bin
                                     @ (Language.PureScript.Names.ProperName
                                          'Language.PureScript.Names.ClassName)
                                     @ a
                                     1#
                                     ww
                                       `cast`
                                     (Sym (Language.PureScript.Names.N:ProperName[0]
                                               <'Language.PureScript.Names.ClassName>_P))
                                     x
                                     (Data.Map.Internal.Tip
                                        @ (Language.PureScript.Names.ProperName
                                             'Language.PureScript.Names.ClassName)
                                        @ a)
                                     (Data.Map.Internal.Tip
                                        @ (Language.PureScript.Names.ProperName
                                             'Language.PureScript.Names.ClassName)
                                        @ a))
                             GHC.Types.LT
                             -> Language.PureScript.Sugar.Names.Env.$sfromList_$s$wpoly_go2
                                  @ a
                                  ww4
                                    `cast`
                                  (Sym (Language.PureScript.Names.N:ProperName[0]
                                            <'Language.PureScript.Names.ClassName>_P))
                                  ds3
                                  ipv1
                                  (Data.Map.Internal.Bin
                                     @ (Language.PureScript.Names.ProperName
                                          'Language.PureScript.Names.ClassName)
                                     @ a
                                     1#
                                     ww
                                       `cast`
                                     (Sym (Language.PureScript.Names.N:ProperName[0]
                                               <'Language.PureScript.Names.ClassName>_P))
                                     x
                                     (Data.Map.Internal.Tip
                                        @ (Language.PureScript.Names.ProperName
                                             'Language.PureScript.Names.ClassName)
                                        @ a)
                                     (Data.Map.Internal.Tip
                                        @ (Language.PureScript.Names.ProperName
                                             'Language.PureScript.Names.ClassName)
                                        @ a))
                                  1# } } } } } } }) -}
7ce3b446f0a907e2a4a0e4a6d90ca203
  $sfromList3 ::
    [(Language.PureScript.Names.ProperName
        'Language.PureScript.Names.TypeName,
      a)]
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName)
         a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a
                   (ds :: [(Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.TypeName,
                            a)]) ->
                 case ds of wild {
                   []
                   -> Data.Map.Internal.Tip
                        @ (Language.PureScript.Names.ProperName
                             'Language.PureScript.Names.TypeName)
                        @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case kx
                                  `cast`
                                (Language.PureScript.Names.N:ProperName[0]
                                     <'Language.PureScript.Names.TypeName>_P) of nt { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                           Data.Map.Internal.Bin
                             @ (Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.TypeName)
                             @ a
                             1#
                             nt
                               `cast`
                             (Sym (Language.PureScript.Names.N:ProperName[0]
                                       <'Language.PureScript.Names.TypeName>_P))
                             x
                             (Data.Map.Internal.Tip
                                @ (Language.PureScript.Names.ProperName
                                     'Language.PureScript.Names.TypeName)
                                @ a)
                             (Data.Map.Internal.Tip
                                @ (Language.PureScript.Names.ProperName
                                     'Language.PureScript.Names.TypeName)
                                @ a) }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case kx
                                  `cast`
                                (Language.PureScript.Names.N:ProperName[0]
                                     <'Language.PureScript.Names.TypeName>_P) of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                           case ky
                                  `cast`
                                (Language.PureScript.Names.N:ProperName[0]
                                     <'Language.PureScript.Names.TypeName>_P) of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                           case Data.Text.$w$ccompare ww1 ww2 ww3 ww5 ww6 ww7 of wild4 {
                             DEFAULT
                             -> Language.PureScript.Sugar.Names.Env.$sfromList_$spoly_go3
                                  @ a
                                  ww4
                                    `cast`
                                  (Sym (Language.PureScript.Names.N:ProperName[0]
                                            <'Language.PureScript.Names.TypeName>_P))
                                  ds3
                                  ipv1
                                  (Data.Map.Internal.Bin
                                     @ (Language.PureScript.Names.ProperName
                                          'Language.PureScript.Names.TypeName)
                                     @ a
                                     1#
                                     ww
                                       `cast`
                                     (Sym (Language.PureScript.Names.N:ProperName[0]
                                               <'Language.PureScript.Names.TypeName>_P))
                                     x
                                     (Data.Map.Internal.Tip
                                        @ (Language.PureScript.Names.ProperName
                                             'Language.PureScript.Names.TypeName)
                                        @ a)
                                     (Data.Map.Internal.Tip
                                        @ (Language.PureScript.Names.ProperName
                                             'Language.PureScript.Names.TypeName)
                                        @ a))
                             GHC.Types.LT
                             -> Language.PureScript.Sugar.Names.Env.$sfromList_$s$wpoly_go3
                                  @ a
                                  ww4
                                    `cast`
                                  (Sym (Language.PureScript.Names.N:ProperName[0]
                                            <'Language.PureScript.Names.TypeName>_P))
                                  ds3
                                  ipv1
                                  (Data.Map.Internal.Bin
                                     @ (Language.PureScript.Names.ProperName
                                          'Language.PureScript.Names.TypeName)
                                     @ a
                                     1#
                                     ww
                                       `cast`
                                     (Sym (Language.PureScript.Names.N:ProperName[0]
                                               <'Language.PureScript.Names.TypeName>_P))
                                     x
                                     (Data.Map.Internal.Tip
                                        @ (Language.PureScript.Names.ProperName
                                             'Language.PureScript.Names.TypeName)
                                        @ a)
                                     (Data.Map.Internal.Tip
                                        @ (Language.PureScript.Names.ProperName
                                             'Language.PureScript.Names.TypeName)
                                        @ a))
                                  1# } } } } } } }) -}
fc86a94071239b4eaa976dbf4e762353
  $sfromList_$s$wpoly_go1 ::
    Language.PureScript.Names.ProperName
      'Language.PureScript.Names.KindName
    -> a
    -> [(Language.PureScript.Names.ProperName
           'Language.PureScript.Names.KindName,
         a)]
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.KindName)
         a
    -> GHC.Prim.Int#
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.KindName)
         a
  {- Arity: 5, Strictness: <S,1*U(U,U,U)><L,U><S,1*U><S,1*U><L,U> -}
68d08e1e38ee0b527bd998a1460adfc0
  $sfromList_$s$wpoly_go13 ::
    Language.PureScript.Names.ModuleName
    -> a
    -> [(Language.PureScript.Names.ModuleName, a)]
    -> Data.Map.Internal.Map Language.PureScript.Names.ModuleName a
    -> GHC.Prim.Int#
    -> Data.Map.Internal.Map Language.PureScript.Names.ModuleName a
  {- Arity: 5, Strictness: <S,U><L,U><S,1*U><S,1*U><L,U> -}
2d2ebac500657e66821f37f78a5da006
  $sfromList_$s$wpoly_go2 ::
    Language.PureScript.Names.ProperName
      'Language.PureScript.Names.ClassName
    -> a
    -> [(Language.PureScript.Names.ProperName
           'Language.PureScript.Names.ClassName,
         a)]
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
         a
    -> GHC.Prim.Int#
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
         a
  {- Arity: 5, Strictness: <S,1*U(U,U,U)><L,U><S,1*U><S,1*U><L,U> -}
29cfef77831ea34d4faa76ec51b89d9d
  $sfromList_$s$wpoly_go3 ::
    Language.PureScript.Names.ProperName
      'Language.PureScript.Names.TypeName
    -> a
    -> [(Language.PureScript.Names.ProperName
           'Language.PureScript.Names.TypeName,
         a)]
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName)
         a
    -> GHC.Prim.Int#
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName)
         a
  {- Arity: 5, Strictness: <S,1*U(U,U,U)><L,U><S,1*U><S,1*U><L,U> -}
c458dcc37a746742337cd88705edb108
  $sfromList_$spoly_go1 ::
    Language.PureScript.Names.ProperName
      'Language.PureScript.Names.KindName
    -> a
    -> [(Language.PureScript.Names.ProperName
           'Language.PureScript.Names.KindName,
         a)]
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.KindName)
         a
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.KindName)
         a
  {- Arity: 4, Strictness: <S(SSS),1*U(U,U,U)><L,U><S,1*U><S,1*U> -}
d74f76bb954ac6059af6cdc0830ade7f
  $sfromList_$spoly_go14 ::
    Language.PureScript.Names.ModuleName
    -> a
    -> [(Language.PureScript.Names.ModuleName, a)]
    -> Data.Map.Internal.Map Language.PureScript.Names.ModuleName a
    -> Data.Map.Internal.Map Language.PureScript.Names.ModuleName a
  {- Arity: 4, Strictness: <S,U><L,U><S,1*U><S,1*U> -}
9ded50a0a639b7185339a7bbff8aaca2
  $sfromList_$spoly_go2 ::
    Language.PureScript.Names.ProperName
      'Language.PureScript.Names.ClassName
    -> a
    -> [(Language.PureScript.Names.ProperName
           'Language.PureScript.Names.ClassName,
         a)]
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
         a
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
         a
  {- Arity: 4, Strictness: <S(SSS),1*U(U,U,U)><L,U><S,1*U><S,1*U> -}
5c8bddc2321444d8d4a8d9c5a8a2d956
  $sfromList_$spoly_go3 ::
    Language.PureScript.Names.ProperName
      'Language.PureScript.Names.TypeName
    -> a
    -> [(Language.PureScript.Names.ProperName
           'Language.PureScript.Names.TypeName,
         a)]
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName)
         a
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName)
         a
  {- Arity: 4, Strictness: <S(SSS),1*U(U,U,U)><L,U><S,1*U><S,1*U> -}
ee5532dfb6143e5ca014a82150e27f9a
  $sinsertWithKey_$s$w$sgo13 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ConstructorName)
      GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.ByteArray#
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ConstructorName)
         GHC.Types.Int
  {- Arity: 5, Strictness: <S,1*U><L,U(U)><L,U><L,U><L,U> -}
7217cf269edb9c2459c69a34407be043
  $sinsert_$sgo13 ::
    Language.PureScript.Names.ModuleName
    -> Language.PureScript.Names.ModuleName
    -> a1
    -> Data.Map.Internal.Map Language.PureScript.Names.ModuleName a1
    -> Data.Map.Internal.Map Language.PureScript.Names.ModuleName a1
  {- Arity: 4, Strictness: <L,U><S,1*U><L,U><S,1*U> -}
cb9111644767e006b0125038f493d686
  $slookup1 ::
    Language.PureScript.Names.ModuleName
    -> Data.Map.Internal.Map Language.PureScript.Names.ModuleName a
    -> GHC.Base.Maybe a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
a0a18e306091c885d6c4af0ac0a9c96c
  $tc'Exports :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11108256770255224925##
                   18326074316554471080##
                   Language.PureScript.Sugar.Names.Env.$trModule
                   Language.PureScript.Sugar.Names.Env.$tc'Exports2
                   0#
                   Language.PureScript.Sugar.Names.Env.$tc'Exports1) -}
a0d6f19cbf184e6a4fee5f5ca62ae46c
  $tc'Exports1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
ef5c305bcd3c70c571a1727a0a30dbf0
  $tc'Exports2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Sugar.Names.Env.$tc'Exports3) -}
18ff9df196793e1d43425bebf0f657a8
  $tc'Exports3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Exports"#) -}
d4aa423e6b6e9cb388b2e5fb738093ba
  $tc'FromExplicit :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7000527736719757555##
                   9144297463838563282##
                   Language.PureScript.Sugar.Names.Env.$trModule
                   Language.PureScript.Sugar.Names.Env.$tc'FromExplicit2
                   0#
                   Language.PureScript.Sugar.Names.Env.$tc'FromExplicit1) -}
578e4566212f66f971080e85b47238ff
  $tc'FromExplicit1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
5a168fceb75a0fae9ce343bf42a53230
  $tc'FromExplicit2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Sugar.Names.Env.$tc'FromExplicit3) -}
b932a32ce3ed66faae47ebf4763f260f
  $tc'FromExplicit3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'FromExplicit"#) -}
4839fb2f1036cf1917cb5b6818796d44
  $tc'FromImplicit :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1490749006771885693##
                   17286798335095317090##
                   Language.PureScript.Sugar.Names.Env.$trModule
                   Language.PureScript.Sugar.Names.Env.$tc'FromImplicit1
                   0#
                   Language.PureScript.Sugar.Names.Env.$tc'FromExplicit1) -}
a422690ae9df59c70364f9438229865f
  $tc'FromImplicit1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Sugar.Names.Env.$tc'FromImplicit2) -}
73a7204bdf2dc2fffcc5512d5ec081d2
  $tc'FromImplicit2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'FromImplicit"#) -}
bc4f328147942f09b98e87391352bd67
  $tc'ImportRecord :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1498307606366790798##
                   2029707166487810108##
                   Language.PureScript.Sugar.Names.Env.$trModule
                   Language.PureScript.Sugar.Names.Env.$tc'ImportRecord2
                   1#
                   Language.PureScript.Sugar.Names.Env.$tc'ImportRecord1) -}
7e52c857c1e358bd2874ca972bcbb332
  $tc'ImportRecord1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
c85f8873cf1a249576fe64d298d04067
  $tc'ImportRecord2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Sugar.Names.Env.$tc'ImportRecord3) -}
7377072a4734e81d32a5b54835c98089
  $tc'ImportRecord3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ImportRecord"#) -}
edaab7e9857c4f4d2b8b54c4f29d6515
  $tc'Imports :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6952159204747570031##
                   3471240708583934735##
                   Language.PureScript.Sugar.Names.Env.$trModule
                   Language.PureScript.Sugar.Names.Env.$tc'Imports2
                   0#
                   Language.PureScript.Sugar.Names.Env.$tc'Imports1) -}
eebd77355d7606dc85cabb5da01861ee
  $tc'Imports1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
8e40b980b0b6c8330d2c3f0cbc2741a3
  $tc'Imports2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Sugar.Names.Env.$tc'Imports3) -}
790f96d4fc8f4ebe3986d29759ae3aba
  $tc'Imports3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Imports"#) -}
e3ff78abb40c37fe9fe4d027b57658d7
  $tc'Internal :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15024069507750427931##
                   4377856721976711514##
                   Language.PureScript.Sugar.Names.Env.$trModule
                   Language.PureScript.Sugar.Names.Env.$tc'Internal2
                   0#
                   Language.PureScript.Sugar.Names.Env.$tc'Internal1) -}
34f751f9981222b48021c202ba504b3c
  $tc'Internal1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
3d67c6dc89ddf6174033c277a29f94ec
  $tc'Internal2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Sugar.Names.Env.$tc'Internal3) -}
7e9d3dda9e2c23fb89c9e46f82b1221c
  $tc'Internal3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Internal"#) -}
c06c24a5453c37e75c4d2d52d0842335
  $tc'Local :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   184516961625720492##
                   9288826254603028018##
                   Language.PureScript.Sugar.Names.Env.$trModule
                   Language.PureScript.Sugar.Names.Env.$tc'Local1
                   0#
                   Language.PureScript.Sugar.Names.Env.$tc'FromExplicit1) -}
d468a6d532a2aecdf49ba163175ac26d
  $tc'Local1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Sugar.Names.Env.$tc'Local2) -}
b6b7c584baa57129f182eaef7084ea74
  $tc'Local2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Local"#) -}
9bb124318c29239e9085919cf696ce2c
  $tc'Prim :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9199788056547415115##
                   16535616510639588324##
                   Language.PureScript.Sugar.Names.Env.$trModule
                   Language.PureScript.Sugar.Names.Env.$tc'Prim1
                   0#
                   Language.PureScript.Sugar.Names.Env.$tc'FromExplicit1) -}
0f62005973477e9a3f70afbf7a5442a2
  $tc'Prim1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Sugar.Names.Env.$tc'Prim2) -}
8d31d8651408bcbfef1c5ac63e862ae4
  $tc'Prim2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Prim"#) -}
95cc722a3d9a618d7dd23d93d3c97d24
  $tc'ReExport :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18265845983389935729##
                   10349510912607235273##
                   Language.PureScript.Sugar.Names.Env.$trModule
                   Language.PureScript.Sugar.Names.Env.$tc'ReExport1
                   0#
                   Language.PureScript.Sugar.Names.Env.$tc'Internal1) -}
9cda9170e3677194dab3c1434edd98a7
  $tc'ReExport1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Sugar.Names.Env.$tc'ReExport2) -}
d445b33757f570e1a263c6c5eb20771f
  $tc'ReExport2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ReExport"#) -}
c16e598ed4256c4db0cf1e1c25412a6d
  $tcExportMode :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9533461085514226464##
                   14894418152861988953##
                   Language.PureScript.Sugar.Names.Env.$trModule
                   Language.PureScript.Sugar.Names.Env.$tcExportMode1
                   0#
                   GHC.Types.krep$*) -}
b1b85ce9ad8f716a8df04b44328b998e
  $tcExportMode1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Sugar.Names.Env.$tcExportMode2) -}
44fd846be706cc1b1b6e3175f10a8edf
  $tcExportMode2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ExportMode"#) -}
6f06533aa27ff354502ac484a823474d
  $tcExports :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4465396896080747751##
                   8905132991260476968##
                   Language.PureScript.Sugar.Names.Env.$trModule
                   Language.PureScript.Sugar.Names.Env.$tcExports1
                   0#
                   GHC.Types.krep$*) -}
e16fd3ac1368caf0a7de201e2808143c
  $tcExports1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Sugar.Names.Env.$tcExports2) -}
c9a5e33d0dee36d7b8f075979f2c9ade
  $tcExports2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Exports"#) -}
f5b2062bfbe871eef20dd015a0966688
  $tcImportProvenance :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16745473968473066371##
                   1201353138434364328##
                   Language.PureScript.Sugar.Names.Env.$trModule
                   Language.PureScript.Sugar.Names.Env.$tcImportProvenance1
                   0#
                   GHC.Types.krep$*) -}
ff9ea0acc96bfe3636df954b91eb3556
  $tcImportProvenance1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Sugar.Names.Env.$tcImportProvenance2) -}
133e4dbb6a0afad268d741b10e5206d3
  $tcImportProvenance2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ImportProvenance"#) -}
139d66616e1d77185785a4491b0f601c
  $tcImportRecord :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4934752664746476832##
                   3510165995221264729##
                   Language.PureScript.Sugar.Names.Env.$trModule
                   Language.PureScript.Sugar.Names.Env.$tcImportRecord1
                   0#
                   GHC.Types.krep$*Arr*) -}
305d5b672430b5828f4a977eec4663d6
  $tcImportRecord1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Sugar.Names.Env.$tcImportRecord2) -}
290c15204d4f7c361ba9325fb54447ae
  $tcImportRecord2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ImportRecord"#) -}
63763a6b3d79a6e4d27eeb2f76689e94
  $tcImports :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16375874844760484578##
                   7710568139058983753##
                   Language.PureScript.Sugar.Names.Env.$trModule
                   Language.PureScript.Sugar.Names.Env.$tcImports1
                   0#
                   GHC.Types.krep$*) -}
a5e937dddc96ded07e44980eb32689e4
  $tcImports1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Sugar.Names.Env.$tcImports2) -}
812c036c7a45996f35b0082636901339
  $tcImports2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Imports"#) -}
06e4972046b99623070d8a44ce542325
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Language.PureScript.Sugar.Names.Env.$trModule3
                   Language.PureScript.Sugar.Names.Env.$trModule1) -}
098d8e64b371a3953e1ce24f0f754f3d
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Sugar.Names.Env.$trModule2) -}
96f354b60a24f087dca289f6015d3f87
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("Language.PureScript.Sugar.Names.Env"#) -}
163f30cecafbe6e5e7876e023d56979e
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Sugar.Names.Env.$trModule4) -}
4f2cfcffd2fa360ba947489e88275e66
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"#) -}
e2d7504b2863bb42291c379c11ed61e3
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName)
         ([Language.PureScript.Names.ProperName
             'Language.PureScript.Names.ConstructorName],
          Language.PureScript.Names.ModuleName)
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.TypeOpName)
         Language.PureScript.Names.ModuleName
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
         Language.PureScript.Names.ModuleName
    -> Data.Map.Internal.Map
         Language.PureScript.Names.Ident
         Language.PureScript.Names.ModuleName
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.ValueOpName)
         Language.PureScript.Names.ModuleName
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.KindName)
         Language.PureScript.Names.ModuleName
    -> GHC.Show.ShowS
  {- Arity: 7,
     Strictness: <S,U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U>,
     Inline: [0] -}
9eac2b49272ec0935fc080f37f37f0d8
  $w$cshowsPrec1 ::
    Language.PureScript.Sugar.Names.Env.ImportProvenance
    -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: Language.PureScript.Sugar.Names.Env.ImportProvenance)
                   (w1 :: GHC.Base.String) ->
                 case w of wild {
                   Language.PureScript.Sugar.Names.Env.FromImplicit
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.Sugar.Names.Env.$fShowImportProvenance7
                        w1
                   Language.PureScript.Sugar.Names.Env.FromExplicit
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.Sugar.Names.Env.$fShowImportProvenance5
                        w1
                   Language.PureScript.Sugar.Names.Env.Local
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.Sugar.Names.Env.$fShowImportProvenance3
                        w1
                   Language.PureScript.Sugar.Names.Env.Prim
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        Language.PureScript.Sugar.Names.Env.$fShowImportProvenance1
                        w1 }) -}
1df2db58fe6dfb7fcdf9220e2dda78aa
  $w$cshowsPrec2 ::
    GHC.Show.Show a =>
    GHC.Prim.Int#
    -> Language.PureScript.Names.Qualified a
    -> Language.PureScript.Names.ModuleName
    -> Language.PureScript.AST.SourcePos.SourceSpan
    -> Language.PureScript.Sugar.Names.Env.ImportProvenance
    -> GHC.Show.ShowS
  {- Arity: 6,
     Strictness: <L,1*U(1*C1(C1(C(U))),A,A)><S,U><L,1*U(1*U,U)><L,U><L,U(U,U(U(U),U(U)),U(U(U),U(U)))><L,U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (w :: GHC.Show.Show a)
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: Language.PureScript.Names.Qualified a)
                   (ww2 :: Language.PureScript.Names.ModuleName)
                   (ww3 :: Language.PureScript.AST.SourcePos.SourceSpan)
                   (ww4 :: Language.PureScript.Sugar.Names.Env.ImportProvenance) ->
                 let {
                   f1 :: GHC.Base.String -> GHC.Base.String
                   = case ww1 of ww5 { Language.PureScript.Names.Qualified ww6 ww7 ->
                     Language.PureScript.Names.$w$cshowsPrec4 @ a w 0# ww6 ww7 }
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.CString.unpackAppendCString#
                       Language.PureScript.Sugar.Names.Env.$fShowImportRecord6
                       (GHC.CString.unpackAppendCString#
                          Language.PureScript.Sugar.Names.Env.$fShowImportRecord5
                          (f1
                             (GHC.Base.++
                                @ GHC.Types.Char
                                GHC.Show.showCommaSpace1
                                (GHC.CString.unpackAppendCString#
                                   Language.PureScript.Sugar.Names.Env.$fShowImportRecord4
                                   (Language.PureScript.Names.$w$cshowsPrec
                                      0#
                                      ww2
                                      (GHC.Base.++
                                         @ GHC.Types.Char
                                         GHC.Show.showCommaSpace1
                                         (GHC.CString.unpackAppendCString#
                                            Language.PureScript.Sugar.Names.Env.$fShowImportRecord3
                                            (case ww3 of ww5 { Language.PureScript.AST.SourcePos.SourceSpan ww6 ww7 ww8 ->
                                             Language.PureScript.AST.SourcePos.$w$cshowsPrec1
                                               0#
                                               ww6
                                               ww7
                                               ww8
                                               (GHC.Base.++
                                                  @ GHC.Types.Char
                                                  GHC.Show.showCommaSpace1
                                                  (GHC.CString.unpackAppendCString#
                                                     Language.PureScript.Sugar.Names.Env.$fShowImportRecord2
                                                     (Language.PureScript.Sugar.Names.Env.$w$cshowsPrec1
                                                        ww4
                                                        (GHC.CString.unpackAppendCString#
                                                           Language.PureScript.Sugar.Names.Env.$fShowImportRecord1
                                                           x)))) }))))))))
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT -> p
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x)) }) -}
0b6306a060c2fe23b3ee7920f21cc99f
  $w$cshowsPrec3 ::
    GHC.Prim.Int#
    -> Language.PureScript.Sugar.Names.Env.ImportMap
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName)
    -> Language.PureScript.Sugar.Names.Env.ImportMap
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.TypeOpName)
    -> Language.PureScript.Sugar.Names.Env.ImportMap
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ConstructorName)
    -> Language.PureScript.Sugar.Names.Env.ImportMap
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
    -> Language.PureScript.Sugar.Names.Env.ImportMap
         Language.PureScript.Names.Ident
    -> Language.PureScript.Sugar.Names.Env.ImportMap
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.ValueOpName)
    -> Data.Set.Internal.Set Language.PureScript.Names.ModuleName
    -> Data.Set.Internal.Set Language.PureScript.Names.ModuleName
    -> Language.PureScript.Sugar.Names.Env.ImportMap
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.KindName)
    -> GHC.Show.ShowS
  {- Arity: 10,
     Strictness: <S,U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U><L,1*U>,
     Inline: [0] -}
3d19cb8cec5c4177c815ab636248bdd0
  $w$s$cshowsPrec ::
    GHC.Prim.Int#
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName)
    -> Language.PureScript.Names.ModuleName
    -> Language.PureScript.AST.SourcePos.SourceSpan
    -> Language.PureScript.Sugar.Names.Env.ImportProvenance
    -> GHC.Show.ShowS
  {- Arity: 5,
     Strictness: <S,U><L,1*U(1*U,U)><L,U><L,U(U,U(U(U),U(U)),U(U(U),U(U)))><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.TypeName))
                   (ww2 :: Language.PureScript.Names.ModuleName)
                   (ww3 :: Language.PureScript.AST.SourcePos.SourceSpan)
                   (ww4 :: Language.PureScript.Sugar.Names.Env.ImportProvenance) ->
                 let {
                   f1 :: GHC.Base.String -> GHC.Base.String
                   = case ww1 of ww5 { Language.PureScript.Names.Qualified ww6 ww7 ->
                     Language.PureScript.Names.$w$cshowsPrec4
                       @ (Language.PureScript.Names.ProperName
                            'Language.PureScript.Names.TypeName)
                       (Language.PureScript.Names.$fShowProperName
                          @ 'Language.PureScript.Names.TypeName)
                       0#
                       ww6
                       ww7 }
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.CString.unpackAppendCString#
                       Language.PureScript.Sugar.Names.Env.$fShowImportRecord6
                       (GHC.CString.unpackAppendCString#
                          Language.PureScript.Sugar.Names.Env.$fShowImportRecord5
                          (f1
                             (GHC.Base.++
                                @ GHC.Types.Char
                                GHC.Show.showCommaSpace1
                                (GHC.CString.unpackAppendCString#
                                   Language.PureScript.Sugar.Names.Env.$fShowImportRecord4
                                   (Language.PureScript.Names.$w$cshowsPrec
                                      0#
                                      ww2
                                      (GHC.Base.++
                                         @ GHC.Types.Char
                                         GHC.Show.showCommaSpace1
                                         (GHC.CString.unpackAppendCString#
                                            Language.PureScript.Sugar.Names.Env.$fShowImportRecord3
                                            (case ww3 of ww5 { Language.PureScript.AST.SourcePos.SourceSpan ww6 ww7 ww8 ->
                                             Language.PureScript.AST.SourcePos.$w$cshowsPrec1
                                               0#
                                               ww6
                                               ww7
                                               ww8
                                               (GHC.Base.++
                                                  @ GHC.Types.Char
                                                  GHC.Show.showCommaSpace1
                                                  (GHC.CString.unpackAppendCString#
                                                     Language.PureScript.Sugar.Names.Env.$fShowImportRecord2
                                                     (Language.PureScript.Sugar.Names.Env.$w$cshowsPrec1
                                                        ww4
                                                        (GHC.CString.unpackAppendCString#
                                                           Language.PureScript.Sugar.Names.Env.$fShowImportRecord1
                                                           x)))) }))))))))
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT -> p
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x)) }) -}
640605c863a0dbff7f1fd315552871da
  $w$s$cshowsPrec1 ::
    GHC.Prim.Int#
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.TypeOpName)
    -> Language.PureScript.Names.ModuleName
    -> Language.PureScript.AST.SourcePos.SourceSpan
    -> Language.PureScript.Sugar.Names.Env.ImportProvenance
    -> GHC.Show.ShowS
  {- Arity: 5,
     Strictness: <S,U><L,1*U(1*U,U)><L,U><L,U(U,U(U(U),U(U)),U(U(U),U(U)))><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.OpName
                                'Language.PureScript.Names.TypeOpName))
                   (ww2 :: Language.PureScript.Names.ModuleName)
                   (ww3 :: Language.PureScript.AST.SourcePos.SourceSpan)
                   (ww4 :: Language.PureScript.Sugar.Names.Env.ImportProvenance) ->
                 let {
                   f1 :: GHC.Base.String -> GHC.Base.String
                   = case ww1 of ww5 { Language.PureScript.Names.Qualified ww6 ww7 ->
                     Language.PureScript.Names.$w$cshowsPrec4
                       @ (Language.PureScript.Names.OpName
                            'Language.PureScript.Names.TypeOpName)
                       (Language.PureScript.Names.$fShowOpName
                          @ 'Language.PureScript.Names.TypeOpName)
                       0#
                       ww6
                       ww7 }
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.CString.unpackAppendCString#
                       Language.PureScript.Sugar.Names.Env.$fShowImportRecord6
                       (GHC.CString.unpackAppendCString#
                          Language.PureScript.Sugar.Names.Env.$fShowImportRecord5
                          (f1
                             (GHC.Base.++
                                @ GHC.Types.Char
                                GHC.Show.showCommaSpace1
                                (GHC.CString.unpackAppendCString#
                                   Language.PureScript.Sugar.Names.Env.$fShowImportRecord4
                                   (Language.PureScript.Names.$w$cshowsPrec
                                      0#
                                      ww2
                                      (GHC.Base.++
                                         @ GHC.Types.Char
                                         GHC.Show.showCommaSpace1
                                         (GHC.CString.unpackAppendCString#
                                            Language.PureScript.Sugar.Names.Env.$fShowImportRecord3
                                            (case ww3 of ww5 { Language.PureScript.AST.SourcePos.SourceSpan ww6 ww7 ww8 ->
                                             Language.PureScript.AST.SourcePos.$w$cshowsPrec1
                                               0#
                                               ww6
                                               ww7
                                               ww8
                                               (GHC.Base.++
                                                  @ GHC.Types.Char
                                                  GHC.Show.showCommaSpace1
                                                  (GHC.CString.unpackAppendCString#
                                                     Language.PureScript.Sugar.Names.Env.$fShowImportRecord2
                                                     (Language.PureScript.Sugar.Names.Env.$w$cshowsPrec1
                                                        ww4
                                                        (GHC.CString.unpackAppendCString#
                                                           Language.PureScript.Sugar.Names.Env.$fShowImportRecord1
                                                           x)))) }))))))))
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT -> p
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x)) }) -}
a61010b9edd360aec485b90e692ede64
  $w$s$cshowsPrec2 ::
    GHC.Prim.Int#
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ConstructorName)
    -> Language.PureScript.Names.ModuleName
    -> Language.PureScript.AST.SourcePos.SourceSpan
    -> Language.PureScript.Sugar.Names.Env.ImportProvenance
    -> GHC.Show.ShowS
  {- Arity: 5,
     Strictness: <S,U><L,1*U(1*U,U)><L,U><L,U(U,U(U(U),U(U)),U(U(U),U(U)))><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ConstructorName))
                   (ww2 :: Language.PureScript.Names.ModuleName)
                   (ww3 :: Language.PureScript.AST.SourcePos.SourceSpan)
                   (ww4 :: Language.PureScript.Sugar.Names.Env.ImportProvenance) ->
                 let {
                   f1 :: GHC.Base.String -> GHC.Base.String
                   = case ww1 of ww5 { Language.PureScript.Names.Qualified ww6 ww7 ->
                     Language.PureScript.Names.$w$cshowsPrec4
                       @ (Language.PureScript.Names.ProperName
                            'Language.PureScript.Names.ConstructorName)
                       (Language.PureScript.Names.$fShowProperName
                          @ 'Language.PureScript.Names.ConstructorName)
                       0#
                       ww6
                       ww7 }
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.CString.unpackAppendCString#
                       Language.PureScript.Sugar.Names.Env.$fShowImportRecord6
                       (GHC.CString.unpackAppendCString#
                          Language.PureScript.Sugar.Names.Env.$fShowImportRecord5
                          (f1
                             (GHC.Base.++
                                @ GHC.Types.Char
                                GHC.Show.showCommaSpace1
                                (GHC.CString.unpackAppendCString#
                                   Language.PureScript.Sugar.Names.Env.$fShowImportRecord4
                                   (Language.PureScript.Names.$w$cshowsPrec
                                      0#
                                      ww2
                                      (GHC.Base.++
                                         @ GHC.Types.Char
                                         GHC.Show.showCommaSpace1
                                         (GHC.CString.unpackAppendCString#
                                            Language.PureScript.Sugar.Names.Env.$fShowImportRecord3
                                            (case ww3 of ww5 { Language.PureScript.AST.SourcePos.SourceSpan ww6 ww7 ww8 ->
                                             Language.PureScript.AST.SourcePos.$w$cshowsPrec1
                                               0#
                                               ww6
                                               ww7
                                               ww8
                                               (GHC.Base.++
                                                  @ GHC.Types.Char
                                                  GHC.Show.showCommaSpace1
                                                  (GHC.CString.unpackAppendCString#
                                                     Language.PureScript.Sugar.Names.Env.$fShowImportRecord2
                                                     (Language.PureScript.Sugar.Names.Env.$w$cshowsPrec1
                                                        ww4
                                                        (GHC.CString.unpackAppendCString#
                                                           Language.PureScript.Sugar.Names.Env.$fShowImportRecord1
                                                           x)))) }))))))))
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT -> p
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x)) }) -}
3dbdbf1b59f2aa17558aa1fadec8ad13
  $w$s$cshowsPrec3 ::
    GHC.Prim.Int#
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
    -> Language.PureScript.Names.ModuleName
    -> Language.PureScript.AST.SourcePos.SourceSpan
    -> Language.PureScript.Sugar.Names.Env.ImportProvenance
    -> GHC.Show.ShowS
  {- Arity: 5,
     Strictness: <S,U><L,1*U(1*U,U)><L,U><L,U(U,U(U(U),U(U)),U(U(U),U(U)))><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ClassName))
                   (ww2 :: Language.PureScript.Names.ModuleName)
                   (ww3 :: Language.PureScript.AST.SourcePos.SourceSpan)
                   (ww4 :: Language.PureScript.Sugar.Names.Env.ImportProvenance) ->
                 let {
                   f1 :: GHC.Base.String -> GHC.Base.String
                   = case ww1 of ww5 { Language.PureScript.Names.Qualified ww6 ww7 ->
                     Language.PureScript.Names.$w$cshowsPrec4
                       @ (Language.PureScript.Names.ProperName
                            'Language.PureScript.Names.ClassName)
                       (Language.PureScript.Names.$fShowProperName
                          @ 'Language.PureScript.Names.ClassName)
                       0#
                       ww6
                       ww7 }
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.CString.unpackAppendCString#
                       Language.PureScript.Sugar.Names.Env.$fShowImportRecord6
                       (GHC.CString.unpackAppendCString#
                          Language.PureScript.Sugar.Names.Env.$fShowImportRecord5
                          (f1
                             (GHC.Base.++
                                @ GHC.Types.Char
                                GHC.Show.showCommaSpace1
                                (GHC.CString.unpackAppendCString#
                                   Language.PureScript.Sugar.Names.Env.$fShowImportRecord4
                                   (Language.PureScript.Names.$w$cshowsPrec
                                      0#
                                      ww2
                                      (GHC.Base.++
                                         @ GHC.Types.Char
                                         GHC.Show.showCommaSpace1
                                         (GHC.CString.unpackAppendCString#
                                            Language.PureScript.Sugar.Names.Env.$fShowImportRecord3
                                            (case ww3 of ww5 { Language.PureScript.AST.SourcePos.SourceSpan ww6 ww7 ww8 ->
                                             Language.PureScript.AST.SourcePos.$w$cshowsPrec1
                                               0#
                                               ww6
                                               ww7
                                               ww8
                                               (GHC.Base.++
                                                  @ GHC.Types.Char
                                                  GHC.Show.showCommaSpace1
                                                  (GHC.CString.unpackAppendCString#
                                                     Language.PureScript.Sugar.Names.Env.$fShowImportRecord2
                                                     (Language.PureScript.Sugar.Names.Env.$w$cshowsPrec1
                                                        ww4
                                                        (GHC.CString.unpackAppendCString#
                                                           Language.PureScript.Sugar.Names.Env.$fShowImportRecord1
                                                           x)))) }))))))))
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT -> p
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x)) }) -}
28059d1a75d9569f0bd4629a0c565131
  $w$s$cshowsPrec4 ::
    GHC.Prim.Int#
    -> Language.PureScript.Names.Qualified
         Language.PureScript.Names.Ident
    -> Language.PureScript.Names.ModuleName
    -> Language.PureScript.AST.SourcePos.SourceSpan
    -> Language.PureScript.Sugar.Names.Env.ImportProvenance
    -> GHC.Show.ShowS
  {- Arity: 5,
     Strictness: <S,U><L,1*U(1*U,U)><L,U><L,U(U,U(U(U),U(U)),U(U(U),U(U)))><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Language.PureScript.Names.Qualified
                             Language.PureScript.Names.Ident)
                   (ww2 :: Language.PureScript.Names.ModuleName)
                   (ww3 :: Language.PureScript.AST.SourcePos.SourceSpan)
                   (ww4 :: Language.PureScript.Sugar.Names.Env.ImportProvenance) ->
                 let {
                   f1 :: GHC.Base.String -> GHC.Base.String
                   = case ww1 of ww5 { Language.PureScript.Names.Qualified ww6 ww7 ->
                     Language.PureScript.Names.$w$cshowsPrec4
                       @ Language.PureScript.Names.Ident
                       Language.PureScript.Names.$fShowIdent
                       0#
                       ww6
                       ww7 }
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.CString.unpackAppendCString#
                       Language.PureScript.Sugar.Names.Env.$fShowImportRecord6
                       (GHC.CString.unpackAppendCString#
                          Language.PureScript.Sugar.Names.Env.$fShowImportRecord5
                          (f1
                             (GHC.Base.++
                                @ GHC.Types.Char
                                GHC.Show.showCommaSpace1
                                (GHC.CString.unpackAppendCString#
                                   Language.PureScript.Sugar.Names.Env.$fShowImportRecord4
                                   (Language.PureScript.Names.$w$cshowsPrec
                                      0#
                                      ww2
                                      (GHC.Base.++
                                         @ GHC.Types.Char
                                         GHC.Show.showCommaSpace1
                                         (GHC.CString.unpackAppendCString#
                                            Language.PureScript.Sugar.Names.Env.$fShowImportRecord3
                                            (case ww3 of ww5 { Language.PureScript.AST.SourcePos.SourceSpan ww6 ww7 ww8 ->
                                             Language.PureScript.AST.SourcePos.$w$cshowsPrec1
                                               0#
                                               ww6
                                               ww7
                                               ww8
                                               (GHC.Base.++
                                                  @ GHC.Types.Char
                                                  GHC.Show.showCommaSpace1
                                                  (GHC.CString.unpackAppendCString#
                                                     Language.PureScript.Sugar.Names.Env.$fShowImportRecord2
                                                     (Language.PureScript.Sugar.Names.Env.$w$cshowsPrec1
                                                        ww4
                                                        (GHC.CString.unpackAppendCString#
                                                           Language.PureScript.Sugar.Names.Env.$fShowImportRecord1
                                                           x)))) }))))))))
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT -> p
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x)) }) -}
025185afa745d1c3f70745a7978a0e3a
  $w$s$cshowsPrec5 ::
    GHC.Prim.Int#
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.ValueOpName)
    -> Language.PureScript.Names.ModuleName
    -> Language.PureScript.AST.SourcePos.SourceSpan
    -> Language.PureScript.Sugar.Names.Env.ImportProvenance
    -> GHC.Show.ShowS
  {- Arity: 5,
     Strictness: <S,U><L,1*U(1*U,U)><L,U><L,U(U,U(U(U),U(U)),U(U(U),U(U)))><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.OpName
                                'Language.PureScript.Names.ValueOpName))
                   (ww2 :: Language.PureScript.Names.ModuleName)
                   (ww3 :: Language.PureScript.AST.SourcePos.SourceSpan)
                   (ww4 :: Language.PureScript.Sugar.Names.Env.ImportProvenance) ->
                 let {
                   f1 :: GHC.Base.String -> GHC.Base.String
                   = case ww1 of ww5 { Language.PureScript.Names.Qualified ww6 ww7 ->
                     Language.PureScript.Names.$w$cshowsPrec4
                       @ (Language.PureScript.Names.OpName
                            'Language.PureScript.Names.ValueOpName)
                       (Language.PureScript.Names.$fShowOpName
                          @ 'Language.PureScript.Names.ValueOpName)
                       0#
                       ww6
                       ww7 }
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.CString.unpackAppendCString#
                       Language.PureScript.Sugar.Names.Env.$fShowImportRecord6
                       (GHC.CString.unpackAppendCString#
                          Language.PureScript.Sugar.Names.Env.$fShowImportRecord5
                          (f1
                             (GHC.Base.++
                                @ GHC.Types.Char
                                GHC.Show.showCommaSpace1
                                (GHC.CString.unpackAppendCString#
                                   Language.PureScript.Sugar.Names.Env.$fShowImportRecord4
                                   (Language.PureScript.Names.$w$cshowsPrec
                                      0#
                                      ww2
                                      (GHC.Base.++
                                         @ GHC.Types.Char
                                         GHC.Show.showCommaSpace1
                                         (GHC.CString.unpackAppendCString#
                                            Language.PureScript.Sugar.Names.Env.$fShowImportRecord3
                                            (case ww3 of ww5 { Language.PureScript.AST.SourcePos.SourceSpan ww6 ww7 ww8 ->
                                             Language.PureScript.AST.SourcePos.$w$cshowsPrec1
                                               0#
                                               ww6
                                               ww7
                                               ww8
                                               (GHC.Base.++
                                                  @ GHC.Types.Char
                                                  GHC.Show.showCommaSpace1
                                                  (GHC.CString.unpackAppendCString#
                                                     Language.PureScript.Sugar.Names.Env.$fShowImportRecord2
                                                     (Language.PureScript.Sugar.Names.Env.$w$cshowsPrec1
                                                        ww4
                                                        (GHC.CString.unpackAppendCString#
                                                           Language.PureScript.Sugar.Names.Env.$fShowImportRecord1
                                                           x)))) }))))))))
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT -> p
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x)) }) -}
7da0b68af9e39232ba5143acf936658f
  $w$s$cshowsPrec6 ::
    GHC.Prim.Int#
    -> Language.PureScript.Names.Qualified
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.KindName)
    -> Language.PureScript.Names.ModuleName
    -> Language.PureScript.AST.SourcePos.SourceSpan
    -> Language.PureScript.Sugar.Names.Env.ImportProvenance
    -> GHC.Show.ShowS
  {- Arity: 5,
     Strictness: <S,U><L,1*U(1*U,U)><L,U><L,U(U,U(U(U),U(U)),U(U(U),U(U)))><L,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Language.PureScript.Names.Qualified
                             (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.KindName))
                   (ww2 :: Language.PureScript.Names.ModuleName)
                   (ww3 :: Language.PureScript.AST.SourcePos.SourceSpan)
                   (ww4 :: Language.PureScript.Sugar.Names.Env.ImportProvenance) ->
                 let {
                   f1 :: GHC.Base.String -> GHC.Base.String
                   = case ww1 of ww5 { Language.PureScript.Names.Qualified ww6 ww7 ->
                     Language.PureScript.Names.$w$cshowsPrec4
                       @ (Language.PureScript.Names.ProperName
                            'Language.PureScript.Names.KindName)
                       (Language.PureScript.Names.$fShowProperName
                          @ 'Language.PureScript.Names.KindName)
                       0#
                       ww6
                       ww7 }
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.CString.unpackAppendCString#
                       Language.PureScript.Sugar.Names.Env.$fShowImportRecord6
                       (GHC.CString.unpackAppendCString#
                          Language.PureScript.Sugar.Names.Env.$fShowImportRecord5
                          (f1
                             (GHC.Base.++
                                @ GHC.Types.Char
                                GHC.Show.showCommaSpace1
                                (GHC.CString.unpackAppendCString#
                                   Language.PureScript.Sugar.Names.Env.$fShowImportRecord4
                                   (Language.PureScript.Names.$w$cshowsPrec
                                      0#
                                      ww2
                                      (GHC.Base.++
                                         @ GHC.Types.Char
                                         GHC.Show.showCommaSpace1
                                         (GHC.CString.unpackAppendCString#
                                            Language.PureScript.Sugar.Names.Env.$fShowImportRecord3
                                            (case ww3 of ww5 { Language.PureScript.AST.SourcePos.SourceSpan ww6 ww7 ww8 ->
                                             Language.PureScript.AST.SourcePos.$w$cshowsPrec1
                                               0#
                                               ww6
                                               ww7
                                               ww8
                                               (GHC.Base.++
                                                  @ GHC.Types.Char
                                                  GHC.Show.showCommaSpace1
                                                  (GHC.CString.unpackAppendCString#
                                                     Language.PureScript.Sugar.Names.Env.$fShowImportRecord2
                                                     (Language.PureScript.Sugar.Names.Env.$w$cshowsPrec1
                                                        ww4
                                                        (GHC.CString.unpackAppendCString#
                                                           Language.PureScript.Sugar.Names.Env.$fShowImportRecord1
                                                           x)))) }))))))))
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT -> p
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x)) }) -}
6bc4bd6fcef4192465e92a31385d8f1c
  $w$sgo1 ::
    Language.PureScript.Names.ProperName
      'Language.PureScript.Names.KindName
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> a1
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.KindName)
         a1
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.KindName)
         a1
  {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><L,U><S,1*U>,
     Inline: [0] -}
a7aba93f5997653d1033363577d2d888
  $w$sgo13 ::
    (GHC.Base.Maybe a1 -> GHC.Base.Maybe a1)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName)
         a1
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName)
         a1
  {- Arity: 5, Strictness: <C(S),1*C1(U)><L,U><L,U><L,U><S,1*U>,
     Inline: [0] -}
a70fb2b9ece0863812036b762cad73ae
  $w$sgo2 ::
    Language.PureScript.Names.ProperName
      'Language.PureScript.Names.ClassName
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> a1
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
         a1
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
         a1
  {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><L,U><S,1*U>,
     Inline: [0] -}
104c3d0983569459bf14cd66ed7e80d9
  $w$sgo3 ::
    Language.PureScript.Names.ProperName
      'Language.PureScript.Names.TypeName
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> a1
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName)
         a1
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName)
         a1
  {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><L,U><S,1*U>,
     Inline: [0] -}
7fe2801058ae6196d70c53fc3b2db4aa
  $wpoly_go1 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName)
         a
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U><L,U><L,U><S,1*U>,
     Inline: [0] -}
9d78fdf5599ecef72c554af60348da03
  $wpoly_go13 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName)
         a
    -> GHC.Base.Maybe a
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U><L,U><L,U><S,1*U>,
     Inline: [0] -}
751814301290cefdb2efc36b15b1c9a4
  $wpoly_go2 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
         a
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U><L,U><L,U><S,1*U>,
     Inline: [0] -}
2b6b2822bde15bda4afeb3aa3ef04e79
  type Env =
    Data.Map.Internal.Map
      Language.PureScript.Names.ModuleName
      (Language.PureScript.AST.SourcePos.SourceSpan,
       Language.PureScript.Sugar.Names.Env.Imports,
       Language.PureScript.Sugar.Names.Env.Exports)
732e7ce9036f53b2e7ae95f06f35b2e8
  data ExportMode = Internal | ReExport
d2107d9c7383e14684c4687121fab2f3
  data Exports
    = Exports {exportedTypes :: Data.Map.Internal.Map
                                  (Language.PureScript.Names.ProperName
                                     'Language.PureScript.Names.TypeName)
                                  ([Language.PureScript.Names.ProperName
                                      'Language.PureScript.Names.ConstructorName],
                                   Language.PureScript.Names.ModuleName),
               exportedTypeOps :: Data.Map.Internal.Map
                                    (Language.PureScript.Names.OpName
                                       'Language.PureScript.Names.TypeOpName)
                                    Language.PureScript.Names.ModuleName,
               exportedTypeClasses :: Data.Map.Internal.Map
                                        (Language.PureScript.Names.ProperName
                                           'Language.PureScript.Names.ClassName)
                                        Language.PureScript.Names.ModuleName,
               exportedValues :: Data.Map.Internal.Map
                                   Language.PureScript.Names.Ident
                                   Language.PureScript.Names.ModuleName,
               exportedValueOps :: Data.Map.Internal.Map
                                     (Language.PureScript.Names.OpName
                                        'Language.PureScript.Names.ValueOpName)
                                     Language.PureScript.Names.ModuleName,
               exportedKinds :: Data.Map.Internal.Map
                                  (Language.PureScript.Names.ProperName
                                     'Language.PureScript.Names.KindName)
                                  Language.PureScript.Names.ModuleName}
26fb3b5116ce299dd4a7ea4dce61d9f5
  type ImportMap a =
    Data.Map.Internal.Map
      (Language.PureScript.Names.Qualified a)
      [Language.PureScript.Sugar.Names.Env.ImportRecord a]
9eac2b49272ec0935fc080f37f37f0d8
  data ImportProvenance = FromImplicit | FromExplicit | Local | Prim
06c97ba5c09e065ef1b4ac69ccbfcc9e
  data ImportRecord a
    = ImportRecord {importName :: Language.PureScript.Names.Qualified
                                    a,
                    importSourceModule :: Language.PureScript.Names.ModuleName,
                    importSourceSpan :: Language.PureScript.AST.SourcePos.SourceSpan,
                    importProvenance :: Language.PureScript.Sugar.Names.Env.ImportProvenance}
330f296cc3ed68256ee5fc6aa457fa42
  data Imports
    = Imports {importedTypes :: Language.PureScript.Sugar.Names.Env.ImportMap
                                  (Language.PureScript.Names.ProperName
                                     'Language.PureScript.Names.TypeName),
               importedTypeOps :: Language.PureScript.Sugar.Names.Env.ImportMap
                                    (Language.PureScript.Names.OpName
                                       'Language.PureScript.Names.TypeOpName),
               importedDataConstructors :: Language.PureScript.Sugar.Names.Env.ImportMap
                                             (Language.PureScript.Names.ProperName
                                                'Language.PureScript.Names.ConstructorName),
               importedTypeClasses :: Language.PureScript.Sugar.Names.Env.ImportMap
                                        (Language.PureScript.Names.ProperName
                                           'Language.PureScript.Names.ClassName),
               importedValues :: Language.PureScript.Sugar.Names.Env.ImportMap
                                   Language.PureScript.Names.Ident,
               importedValueOps :: Language.PureScript.Sugar.Names.Env.ImportMap
                                     (Language.PureScript.Names.OpName
                                        'Language.PureScript.Names.ValueOpName),
               importedModules :: Data.Set.Internal.Set
                                    Language.PureScript.Names.ModuleName,
               importedQualModules :: Data.Set.Internal.Set
                                        Language.PureScript.Names.ModuleName,
               importedKinds :: Language.PureScript.Sugar.Names.Env.ImportMap
                                  (Language.PureScript.Names.ProperName
                                     'Language.PureScript.Names.KindName)}
8a345622d32e0053187e590080727e70
  addExport ::
    (Control.Monad.Error.Class.MonadError
       Language.PureScript.Errors.MultipleErrors m,
     GHC.Classes.Ord a) =>
    Language.PureScript.AST.SourcePos.SourceSpan
    -> (a -> Language.PureScript.Names.Name)
    -> a
    -> Language.PureScript.Names.ModuleName
    -> Data.Map.Internal.Map a Language.PureScript.Names.ModuleName
    -> m (Data.Map.Internal.Map a Language.PureScript.Names.ModuleName)
  {- Arity: 7,
     Strictness: <S,1*U(1*U(A,A,A,1*C1(U),A),1*C1(U),A)><L,U(A,C(C1(U)),A,A,A,A,A,A)><L,U><L,1*C1(U)><S,U><L,U><S,U>,
     Unfolding: (\ @ m :: * -> *
                   @ a
                   ($dMonadError :: Control.Monad.Error.Class.MonadError
                                      Language.PureScript.Errors.MultipleErrors m)
                   ($dOrd :: GHC.Classes.Ord a)
                   (eta :: Language.PureScript.AST.SourcePos.SourceSpan)
                   (eta1 :: a -> Language.PureScript.Names.Name)
                   (eta2 :: a)
                   (eta3 :: Language.PureScript.Names.ModuleName)
                   (eta4 :: Data.Map.Internal.Map
                              a Language.PureScript.Names.ModuleName) ->
                 case Data.Map.Internal.lookup
                        @ a
                        @ Language.PureScript.Names.ModuleName
                        $dOrd
                        eta2
                        eta4 of wild {
                   GHC.Base.Nothing
                   -> GHC.Base.return
                        @ m
                        (Control.Monad.Error.Class.$p1MonadError
                           @ Language.PureScript.Errors.MultipleErrors
                           @ m
                           $dMonadError)
                        @ (Data.Map.Internal.Map a Language.PureScript.Names.ModuleName)
                        (Data.Map.Internal.insert
                           @ a
                           @ Language.PureScript.Names.ModuleName
                           $dOrd
                           eta2
                           eta3
                           eta4)
                   GHC.Base.Just mn'
                   -> case GHC.Classes.$fEq[]_$c==
                             @ (Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.Namespace)
                             (Language.PureScript.Names.$fEqProperName
                                @ 'Language.PureScript.Names.Namespace)
                             eta3 `cast` (Language.PureScript.Names.N:ModuleName[0])
                             mn' `cast` (Language.PureScript.Names.N:ModuleName[0]) of wild1 {
                        GHC.Types.False
                        -> let {
                             name :: Language.PureScript.Names.Name = eta1 eta2
                           } in
                           Control.Monad.Error.Class.throwError
                             @ Language.PureScript.Errors.MultipleErrors
                             @ m
                             $dMonadError
                             @ (Data.Map.Internal.Map a Language.PureScript.Names.ModuleName)
                             (GHC.Types.:
                                @ Language.PureScript.AST.Declarations.ErrorMessage
                                (Language.PureScript.AST.Declarations.ErrorMessage
                                   (GHC.Types.:
                                      @ Language.PureScript.AST.Declarations.ErrorMessageHint
                                      (Language.PureScript.AST.Declarations.PositionedError
                                         (GHC.Base.:|
                                            @ Language.PureScript.AST.SourcePos.SourceSpan
                                            eta
                                            (GHC.Types.[]
                                               @ Language.PureScript.AST.SourcePos.SourceSpan)))
                                      (GHC.Types.[]
                                         @ Language.PureScript.AST.Declarations.ErrorMessageHint))
                                   (Language.PureScript.AST.Declarations.ExportConflict
                                      (Language.PureScript.Names.Qualified
                                         @ Language.PureScript.Names.Name
                                         (GHC.Base.Just @ Language.PureScript.Names.ModuleName eta3)
                                         name)
                                      (Language.PureScript.Names.Qualified
                                         @ Language.PureScript.Names.Name
                                         wild
                                         name)))
                                (GHC.Types.[] @ Language.PureScript.AST.Declarations.ErrorMessage))
                               `cast`
                             (Sym (Language.PureScript.Errors.N:MultipleErrors[0]))
                        GHC.Types.True
                        -> GHC.Base.return
                             @ m
                             (Control.Monad.Error.Class.$p1MonadError
                                @ Language.PureScript.Errors.MultipleErrors
                                @ m
                                $dMonadError)
                             @ (Data.Map.Internal.Map a Language.PureScript.Names.ModuleName)
                             eta4 } }) -}
b8b504c1ae9bea5df4104ea2ebc0fe56
  checkImportConflicts ::
    (Control.Monad.Error.Class.MonadError
       Language.PureScript.Errors.MultipleErrors m,
     Control.Monad.Writer.Class.MonadWriter
       Language.PureScript.Errors.MultipleErrors m) =>
    Language.PureScript.AST.SourcePos.SourceSpan
    -> Language.PureScript.Names.ModuleName
    -> (a -> Language.PureScript.Names.Name)
    -> [Language.PureScript.Sugar.Names.Env.ImportRecord a]
    -> m (Language.PureScript.Names.ModuleName,
          Language.PureScript.Names.ModuleName)
  {- Arity: 6,
     Strictness: <L,U(1*U(A,A,1*C1(C1(U)),1*C1(U),A),1*C1(U),A)><L,1*U(A,A,A,1*C1(U),A,A)><L,U><L,1*U><L,1*C1(U)><S,U> -}
0d5d48eab36db83ce390a5704336cf59
  envModuleExports ::
    (a, b, Language.PureScript.Sugar.Names.Env.Exports)
    -> Language.PureScript.Sugar.Names.Env.Exports
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLS),1*U(A,A,1*U(U,U,U,U,U,U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ a
                   @ b
                   (ds :: (a, b, Language.PureScript.Sugar.Names.Env.Exports)) ->
                 case ds of wild { (,,) ds1 ds2 exps -> exps }) -}
c83dfcbe97cad8e984d4fefea3004df1
  envModuleImports ::
    (a, Language.PureScript.Sugar.Names.Env.Imports, b)
    -> Language.PureScript.Sugar.Names.Env.Imports
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSL),1*U(A,1*U(U,U,U,U,U,U,U,U,U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ a
                   @ b
                   (ds :: (a, Language.PureScript.Sugar.Names.Env.Imports, b)) ->
                 case ds of wild { (,,) ds1 imps ds2 -> imps }) -}
f21674a6c884776dc3fcf340030387a6
  envModuleSourceSpan ::
    (Language.PureScript.AST.SourcePos.SourceSpan, a, b)
    -> Language.PureScript.AST.SourcePos.SourceSpan
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLL),1*U(1*U(U,U,U),A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ a
                   @ b
                   (ds :: (Language.PureScript.AST.SourcePos.SourceSpan, a, b)) ->
                 case ds of wild { (,,) ss ds1 ds2 -> ss }) -}
8a86116703c3ee1a1b90d87b56002a3c
  exportKind ::
    Control.Monad.Error.Class.MonadError
      Language.PureScript.Errors.MultipleErrors m =>
    Language.PureScript.AST.SourcePos.SourceSpan
    -> Language.PureScript.Sugar.Names.Env.Exports
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.KindName
    -> Language.PureScript.Names.ModuleName
    -> m Language.PureScript.Sugar.Names.Env.Exports
  {- Arity: 5,
     Strictness: <S(S(LC(C(S))LLL)LL),U(U(A,1*C1(C1(U)),A,C(U),A),1*C1(U),A)><L,U><L,U(U,U,U,U,U,U)><L,U><L,U>,
     Unfolding: (\ @ m :: * -> *
                   ($dMonadError :: Control.Monad.Error.Class.MonadError
                                      Language.PureScript.Errors.MultipleErrors m)
                   (eta :: Language.PureScript.AST.SourcePos.SourceSpan)
                   (eta1 :: Language.PureScript.Sugar.Names.Env.Exports)
                   (eta2 :: Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.KindName)
                   (eta3 :: Language.PureScript.Names.ModuleName) ->
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.Error.Class.$p1MonadError
                       @ Language.PureScript.Errors.MultipleErrors
                       @ m
                       $dMonadError
                 } in
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ (Data.Map.Internal.Map
                        (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.KindName)
                        Language.PureScript.Names.ModuleName)
                   @ Language.PureScript.Sugar.Names.Env.Exports
                   (case eta1 of wild { Language.PureScript.Sugar.Names.Env.Exports ds ds1 ds2 ds3 ds4 ds5 ->
                    Language.PureScript.Sugar.Names.Env.addExport
                      @ m
                      @ (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.KindName)
                      $dMonadError
                      (Language.PureScript.Names.$fOrdProperName
                         @ 'Language.PureScript.Names.KindName)
                      eta
                      Language.PureScript.Names.KiName
                      eta2
                      eta3
                      ds5 })
                   (\ (kinds :: Data.Map.Internal.Map
                                  (Language.PureScript.Names.ProperName
                                     'Language.PureScript.Names.KindName)
                                  Language.PureScript.Names.ModuleName) ->
                    GHC.Base.return
                      @ m
                      $dMonad
                      @ Language.PureScript.Sugar.Names.Env.Exports
                      (case eta1 of wild { Language.PureScript.Sugar.Names.Env.Exports ds ds1 ds2 ds3 ds4 ds5 ->
                       Language.PureScript.Sugar.Names.Env.Exports
                         ds
                         ds1
                         ds2
                         ds3
                         ds4
                         kinds }))) -}
7d053351478d4679e444221e6298f408
  exportType ::
    Control.Monad.Error.Class.MonadError
      Language.PureScript.Errors.MultipleErrors m =>
    Language.PureScript.AST.SourcePos.SourceSpan
    -> Language.PureScript.Sugar.Names.Env.ExportMode
    -> Language.PureScript.Sugar.Names.Env.Exports
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName
    -> [Language.PureScript.Names.ProperName
          'Language.PureScript.Names.ConstructorName]
    -> Language.PureScript.Names.ModuleName
    -> m Language.PureScript.Sugar.Names.Env.Exports
  {- Arity: 7,
     Strictness: <S(S(LLC(C(S))LL)LL),U(1*U(1*U(A,C(U),A,A,A,A),A,C(C1(U)),C(U),A),C(U),A)><L,U><L,1*U><L,U(1*U,U,U,U,U,U)><L,U(U,U,U)><L,U><L,U> -}
2a9715e3960df1bc9e6975fe60b29f66
  exportTypeClass ::
    Control.Monad.Error.Class.MonadError
      Language.PureScript.Errors.MultipleErrors m =>
    Language.PureScript.AST.SourcePos.SourceSpan
    -> Language.PureScript.Sugar.Names.Env.ExportMode
    -> Language.PureScript.Sugar.Names.Env.Exports
    -> Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName
    -> Language.PureScript.Names.ModuleName
    -> m Language.PureScript.Sugar.Names.Env.Exports
  {- Arity: 6,
     Strictness: <S(S(LLC(C(S))LL)LL),U(U(1*U(A,C(U),A,A,A,A),1*C1(C1(U)),C(C1(U)),C(U),A),C(U),A)><L,U><L,1*U><L,U(U,U,U,U,U,U)><L,U(U,U,U)><L,U> -}
52ec70cdf0f0918897e7d96ea2278eeb
  exportTypeOp ::
    Control.Monad.Error.Class.MonadError
      Language.PureScript.Errors.MultipleErrors m =>
    Language.PureScript.AST.SourcePos.SourceSpan
    -> Language.PureScript.Sugar.Names.Env.Exports
    -> Language.PureScript.Names.OpName
         'Language.PureScript.Names.TypeOpName
    -> Language.PureScript.Names.ModuleName
    -> m Language.PureScript.Sugar.Names.Env.Exports
  {- Arity: 5,
     Strictness: <S(S(LC(C(S))LLL)LL),U(U(A,1*C1(C1(U)),A,C(U),A),1*C1(U),A)><L,U><L,U(U,U,U,U,U,U)><L,U><L,U>,
     Unfolding: (\ @ m :: * -> *
                   ($dMonadError :: Control.Monad.Error.Class.MonadError
                                      Language.PureScript.Errors.MultipleErrors m)
                   (eta :: Language.PureScript.AST.SourcePos.SourceSpan)
                   (eta1 :: Language.PureScript.Sugar.Names.Env.Exports)
                   (eta2 :: Language.PureScript.Names.OpName
                              'Language.PureScript.Names.TypeOpName)
                   (eta3 :: Language.PureScript.Names.ModuleName) ->
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.Error.Class.$p1MonadError
                       @ Language.PureScript.Errors.MultipleErrors
                       @ m
                       $dMonadError
                 } in
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ (Data.Map.Internal.Map
                        (Language.PureScript.Names.OpName
                           'Language.PureScript.Names.TypeOpName)
                        Language.PureScript.Names.ModuleName)
                   @ Language.PureScript.Sugar.Names.Env.Exports
                   (case eta1 of wild { Language.PureScript.Sugar.Names.Env.Exports ds ds1 ds2 ds3 ds4 ds5 ->
                    Language.PureScript.Sugar.Names.Env.addExport
                      @ m
                      @ (Language.PureScript.Names.OpName
                           'Language.PureScript.Names.TypeOpName)
                      $dMonadError
                      (Language.PureScript.Names.$fOrdOpName
                         @ 'Language.PureScript.Names.TypeOpName)
                      eta
                      Language.PureScript.Names.TyOpName
                      eta2
                      eta3
                      ds1 })
                   (\ (typeOps :: Data.Map.Internal.Map
                                    (Language.PureScript.Names.OpName
                                       'Language.PureScript.Names.TypeOpName)
                                    Language.PureScript.Names.ModuleName) ->
                    GHC.Base.return
                      @ m
                      $dMonad
                      @ Language.PureScript.Sugar.Names.Env.Exports
                      (case eta1 of wild { Language.PureScript.Sugar.Names.Env.Exports ds ds1 ds2 ds3 ds4 ds5 ->
                       Language.PureScript.Sugar.Names.Env.Exports
                         ds
                         typeOps
                         ds2
                         ds3
                         ds4
                         ds5 }))) -}
ebc17237d7e7718d6b49a597f01d2402
  exportValue ::
    Control.Monad.Error.Class.MonadError
      Language.PureScript.Errors.MultipleErrors m =>
    Language.PureScript.AST.SourcePos.SourceSpan
    -> Language.PureScript.Sugar.Names.Env.Exports
    -> Language.PureScript.Names.Ident
    -> Language.PureScript.Names.ModuleName
    -> m Language.PureScript.Sugar.Names.Env.Exports
  {- Arity: 5,
     Strictness: <S(S(LC(C(S))LLL)LL),U(U(A,1*C1(C1(U)),A,C(U),A),1*C1(U),A)><L,U><L,U(U,U,U,U,U,U)><L,U><L,U>,
     Unfolding: (\ @ m :: * -> *
                   ($dMonadError :: Control.Monad.Error.Class.MonadError
                                      Language.PureScript.Errors.MultipleErrors m)
                   (eta :: Language.PureScript.AST.SourcePos.SourceSpan)
                   (eta1 :: Language.PureScript.Sugar.Names.Env.Exports)
                   (eta2 :: Language.PureScript.Names.Ident)
                   (eta3 :: Language.PureScript.Names.ModuleName) ->
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.Error.Class.$p1MonadError
                       @ Language.PureScript.Errors.MultipleErrors
                       @ m
                       $dMonadError
                 } in
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ (Data.Map.Internal.Map
                        Language.PureScript.Names.Ident
                        Language.PureScript.Names.ModuleName)
                   @ Language.PureScript.Sugar.Names.Env.Exports
                   (case eta1 of wild { Language.PureScript.Sugar.Names.Env.Exports ds ds1 ds2 ds3 ds4 ds5 ->
                    Language.PureScript.Sugar.Names.Env.addExport
                      @ m
                      @ Language.PureScript.Names.Ident
                      $dMonadError
                      Language.PureScript.Names.$fOrdIdent
                      eta
                      Language.PureScript.Names.IdentName
                      eta2
                      eta3
                      ds3 })
                   (\ (values :: Data.Map.Internal.Map
                                   Language.PureScript.Names.Ident
                                   Language.PureScript.Names.ModuleName) ->
                    GHC.Base.return
                      @ m
                      $dMonad
                      @ Language.PureScript.Sugar.Names.Env.Exports
                      (case eta1 of wild { Language.PureScript.Sugar.Names.Env.Exports ds ds1 ds2 ds3 ds4 ds5 ->
                       Language.PureScript.Sugar.Names.Env.Exports
                         ds
                         ds1
                         ds2
                         values
                         ds4
                         ds5 }))) -}
57efbdcf438547d7665b6fde2a57f7f6
  exportValueOp ::
    Control.Monad.Error.Class.MonadError
      Language.PureScript.Errors.MultipleErrors m =>
    Language.PureScript.AST.SourcePos.SourceSpan
    -> Language.PureScript.Sugar.Names.Env.Exports
    -> Language.PureScript.Names.OpName
         'Language.PureScript.Names.ValueOpName
    -> Language.PureScript.Names.ModuleName
    -> m Language.PureScript.Sugar.Names.Env.Exports
  {- Arity: 5,
     Strictness: <S(S(LC(C(S))LLL)LL),U(U(A,1*C1(C1(U)),A,C(U),A),1*C1(U),A)><L,U><L,U(U,U,U,U,U,U)><L,U><L,U>,
     Unfolding: (\ @ m :: * -> *
                   ($dMonadError :: Control.Monad.Error.Class.MonadError
                                      Language.PureScript.Errors.MultipleErrors m)
                   (eta :: Language.PureScript.AST.SourcePos.SourceSpan)
                   (eta1 :: Language.PureScript.Sugar.Names.Env.Exports)
                   (eta2 :: Language.PureScript.Names.OpName
                              'Language.PureScript.Names.ValueOpName)
                   (eta3 :: Language.PureScript.Names.ModuleName) ->
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.Error.Class.$p1MonadError
                       @ Language.PureScript.Errors.MultipleErrors
                       @ m
                       $dMonadError
                 } in
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ (Data.Map.Internal.Map
                        (Language.PureScript.Names.OpName
                           'Language.PureScript.Names.ValueOpName)
                        Language.PureScript.Names.ModuleName)
                   @ Language.PureScript.Sugar.Names.Env.Exports
                   (case eta1 of wild { Language.PureScript.Sugar.Names.Env.Exports ds ds1 ds2 ds3 ds4 ds5 ->
                    Language.PureScript.Sugar.Names.Env.addExport
                      @ m
                      @ (Language.PureScript.Names.OpName
                           'Language.PureScript.Names.ValueOpName)
                      $dMonadError
                      (Language.PureScript.Names.$fOrdOpName
                         @ 'Language.PureScript.Names.ValueOpName)
                      eta
                      Language.PureScript.Names.ValOpName
                      eta2
                      eta3
                      ds4 })
                   (\ (valueOps :: Data.Map.Internal.Map
                                     (Language.PureScript.Names.OpName
                                        'Language.PureScript.Names.ValueOpName)
                                     Language.PureScript.Names.ModuleName) ->
                    GHC.Base.return
                      @ m
                      $dMonad
                      @ Language.PureScript.Sugar.Names.Env.Exports
                      (case eta1 of wild { Language.PureScript.Sugar.Names.Env.Exports ds ds1 ds2 ds3 ds4 ds5 ->
                       Language.PureScript.Sugar.Names.Env.Exports
                         ds
                         ds1
                         ds2
                         ds3
                         valueOps
                         ds5 }))) -}
d2107d9c7383e14684c4687121fab2f3
  exportedKinds ::
    Language.PureScript.Sugar.Names.Env.Exports
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.KindName)
         Language.PureScript.Names.ModuleName
  RecSel Left Language.PureScript.Sugar.Names.Env.Exports
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLS),1*U(A,A,A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Sugar.Names.Env.Exports) ->
                 case ds of wild { Language.PureScript.Sugar.Names.Env.Exports ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds6 }) -}
d2107d9c7383e14684c4687121fab2f3
  exportedTypeClasses ::
    Language.PureScript.Sugar.Names.Env.Exports
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
         Language.PureScript.Names.ModuleName
  RecSel Left Language.PureScript.Sugar.Names.Env.Exports
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLLL),1*U(A,A,1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Sugar.Names.Env.Exports) ->
                 case ds of wild { Language.PureScript.Sugar.Names.Env.Exports ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds3 }) -}
d2107d9c7383e14684c4687121fab2f3
  exportedTypeOps ::
    Language.PureScript.Sugar.Names.Env.Exports
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.TypeOpName)
         Language.PureScript.Names.ModuleName
  RecSel Left Language.PureScript.Sugar.Names.Env.Exports
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLLL),1*U(A,1*U,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Sugar.Names.Env.Exports) ->
                 case ds of wild { Language.PureScript.Sugar.Names.Env.Exports ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds2 }) -}
d2107d9c7383e14684c4687121fab2f3
  exportedTypes ::
    Language.PureScript.Sugar.Names.Env.Exports
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName)
         ([Language.PureScript.Names.ProperName
             'Language.PureScript.Names.ConstructorName],
          Language.PureScript.Names.ModuleName)
  RecSel Left Language.PureScript.Sugar.Names.Env.Exports
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLLL),1*U(1*U,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Sugar.Names.Env.Exports) ->
                 case ds of wild { Language.PureScript.Sugar.Names.Env.Exports ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds1 }) -}
d2107d9c7383e14684c4687121fab2f3
  exportedValueOps ::
    Language.PureScript.Sugar.Names.Env.Exports
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.ValueOpName)
         Language.PureScript.Names.ModuleName
  RecSel Left Language.PureScript.Sugar.Names.Env.Exports
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLSL),1*U(A,A,A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Sugar.Names.Env.Exports) ->
                 case ds of wild { Language.PureScript.Sugar.Names.Env.Exports ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds5 }) -}
d2107d9c7383e14684c4687121fab2f3
  exportedValues ::
    Language.PureScript.Sugar.Names.Env.Exports
    -> Data.Map.Internal.Map
         Language.PureScript.Names.Ident
         Language.PureScript.Names.ModuleName
  RecSel Left Language.PureScript.Sugar.Names.Env.Exports
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSLL),1*U(A,A,A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Sugar.Names.Env.Exports) ->
                 case ds of wild { Language.PureScript.Sugar.Names.Env.Exports ds1 ds2 ds3 ds4 ds5 ds6 ->
                 ds4 }) -}
ee2b265814ea5a28474ea6e8e550361c
  getExports ::
    Control.Monad.Error.Class.MonadError
      Language.PureScript.Errors.MultipleErrors m =>
    Language.PureScript.Sugar.Names.Env.Env
    -> Language.PureScript.Names.ModuleName
    -> m Language.PureScript.Sugar.Names.Env.Exports
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S,1*U(1*U(A,A,A,1*C1(U),A),1*C1(U),A)><S,1*U><S,U>,
     Unfolding: (\ @ m :: * -> *
                   ($dMonadError :: Control.Monad.Error.Class.MonadError
                                      Language.PureScript.Errors.MultipleErrors m)
                   (eta :: Language.PureScript.Sugar.Names.Env.Env)
                   (eta1 :: Language.PureScript.Names.ModuleName) ->
                 case Language.PureScript.Sugar.Names.Env.$slookup1
                        @ (Language.PureScript.AST.SourcePos.SourceSpan,
                           Language.PureScript.Sugar.Names.Env.Imports,
                           Language.PureScript.Sugar.Names.Env.Exports)
                        eta1
                        eta of wild {
                   GHC.Base.Nothing
                   -> Control.Monad.Error.Class.throwError
                        @ Language.PureScript.Errors.MultipleErrors
                        @ m
                        $dMonadError
                        @ Language.PureScript.Sugar.Names.Env.Exports
                        (GHC.Types.:
                           @ Language.PureScript.AST.Declarations.ErrorMessage
                           (Language.PureScript.AST.Declarations.ErrorMessage
                              (GHC.Types.[]
                                 @ Language.PureScript.AST.Declarations.ErrorMessageHint)
                              (Language.PureScript.AST.Declarations.UnknownName
                                 (Language.PureScript.Names.Qualified
                                    @ Language.PureScript.Names.Name
                                    (GHC.Base.Nothing @ Language.PureScript.Names.ModuleName)
                                    (Language.PureScript.Names.ModName eta1))))
                           (GHC.Types.[] @ Language.PureScript.AST.Declarations.ErrorMessage))
                          `cast`
                        (Sym (Language.PureScript.Errors.N:MultipleErrors[0]))
                   GHC.Base.Just x
                   -> GHC.Base.return
                        @ m
                        (Control.Monad.Error.Class.$p1MonadError
                           @ Language.PureScript.Errors.MultipleErrors
                           @ m
                           $dMonadError)
                        @ Language.PureScript.Sugar.Names.Env.Exports
                        (case x of wild1 { (,,) ds ds1 exps -> exps }) }) -}
06c97ba5c09e065ef1b4ac69ccbfcc9e
  importName ::
    Language.PureScript.Sugar.Names.Env.ImportRecord a
    -> Language.PureScript.Names.Qualified a
  RecSel Left Language.PureScript.Sugar.Names.Env.ImportRecord
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLL),1*U(1*U(U,U),A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ a
                   (ds :: Language.PureScript.Sugar.Names.Env.ImportRecord a) ->
                 case ds of wild { Language.PureScript.Sugar.Names.Env.ImportRecord ds1 ds2 ds3 ds4 ->
                 ds1 }) -}
06c97ba5c09e065ef1b4ac69ccbfcc9e
  importProvenance ::
    Language.PureScript.Sugar.Names.Env.ImportRecord a
    -> Language.PureScript.Sugar.Names.Env.ImportProvenance
  RecSel Left Language.PureScript.Sugar.Names.Env.ImportRecord
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLLS),1*U(A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a
                   (ds :: Language.PureScript.Sugar.Names.Env.ImportRecord a) ->
                 case ds of wild { Language.PureScript.Sugar.Names.Env.ImportRecord ds1 ds2 ds3 ds4 ->
                 ds4 }) -}
06c97ba5c09e065ef1b4ac69ccbfcc9e
  importSourceModule ::
    Language.PureScript.Sugar.Names.Env.ImportRecord a
    -> Language.PureScript.Names.ModuleName
  RecSel Left Language.PureScript.Sugar.Names.Env.ImportRecord
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSLL),1*U(A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a
                   (ds :: Language.PureScript.Sugar.Names.Env.ImportRecord a) ->
                 case ds of wild { Language.PureScript.Sugar.Names.Env.ImportRecord ds1 ds2 ds3 ds4 ->
                 ds2 }) -}
06c97ba5c09e065ef1b4ac69ccbfcc9e
  importSourceSpan ::
    Language.PureScript.Sugar.Names.Env.ImportRecord a
    -> Language.PureScript.AST.SourcePos.SourceSpan
  RecSel Left Language.PureScript.Sugar.Names.Env.ImportRecord
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSL),1*U(A,A,1*U(U,U,U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ @ a
                   (ds :: Language.PureScript.Sugar.Names.Env.ImportRecord a) ->
                 case ds of wild { Language.PureScript.Sugar.Names.Env.ImportRecord ds1 ds2 ds3 ds4 ->
                 ds3 }) -}
330f296cc3ed68256ee5fc6aa457fa42
  importedDataConstructors ::
    Language.PureScript.Sugar.Names.Env.Imports
    -> Language.PureScript.Sugar.Names.Env.ImportMap
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ConstructorName)
  RecSel Left Language.PureScript.Sugar.Names.Env.Imports
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLLLLLL),1*U(A,A,1*U,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Sugar.Names.Env.Imports) ->
                 case ds of wild { Language.PureScript.Sugar.Names.Env.Imports ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ->
                 ds3 }) -}
330f296cc3ed68256ee5fc6aa457fa42
  importedKinds ::
    Language.PureScript.Sugar.Names.Env.Imports
    -> Language.PureScript.Sugar.Names.Env.ImportMap
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.KindName)
  RecSel Left Language.PureScript.Sugar.Names.Env.Imports
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLS),1*U(A,A,A,A,A,A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Sugar.Names.Env.Imports) ->
                 case ds of wild { Language.PureScript.Sugar.Names.Env.Imports ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ->
                 ds9 }) -}
330f296cc3ed68256ee5fc6aa457fa42
  importedModules ::
    Language.PureScript.Sugar.Names.Env.Imports
    -> Data.Set.Internal.Set Language.PureScript.Names.ModuleName
  RecSel Left Language.PureScript.Sugar.Names.Env.Imports
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLSLL),1*U(A,A,A,A,A,A,1*U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Sugar.Names.Env.Imports) ->
                 case ds of wild { Language.PureScript.Sugar.Names.Env.Imports ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ->
                 ds7 }) -}
330f296cc3ed68256ee5fc6aa457fa42
  importedQualModules ::
    Language.PureScript.Sugar.Names.Env.Imports
    -> Data.Set.Internal.Set Language.PureScript.Names.ModuleName
  RecSel Left Language.PureScript.Sugar.Names.Env.Imports
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLSL),1*U(A,A,A,A,A,A,A,1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Sugar.Names.Env.Imports) ->
                 case ds of wild { Language.PureScript.Sugar.Names.Env.Imports ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ->
                 ds8 }) -}
330f296cc3ed68256ee5fc6aa457fa42
  importedTypeClasses ::
    Language.PureScript.Sugar.Names.Env.Imports
    -> Language.PureScript.Sugar.Names.Env.ImportMap
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.ClassName)
  RecSel Left Language.PureScript.Sugar.Names.Env.Imports
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSLLLLL),1*U(A,A,A,1*U,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Sugar.Names.Env.Imports) ->
                 case ds of wild { Language.PureScript.Sugar.Names.Env.Imports ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ->
                 ds4 }) -}
330f296cc3ed68256ee5fc6aa457fa42
  importedTypeOps ::
    Language.PureScript.Sugar.Names.Env.Imports
    -> Language.PureScript.Sugar.Names.Env.ImportMap
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.TypeOpName)
  RecSel Left Language.PureScript.Sugar.Names.Env.Imports
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLLLLLL),1*U(A,1*U,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Sugar.Names.Env.Imports) ->
                 case ds of wild { Language.PureScript.Sugar.Names.Env.Imports ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ->
                 ds2 }) -}
330f296cc3ed68256ee5fc6aa457fa42
  importedTypes ::
    Language.PureScript.Sugar.Names.Env.Imports
    -> Language.PureScript.Sugar.Names.Env.ImportMap
         (Language.PureScript.Names.ProperName
            'Language.PureScript.Names.TypeName)
  RecSel Left Language.PureScript.Sugar.Names.Env.Imports
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLLLLLL),1*U(1*U,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Sugar.Names.Env.Imports) ->
                 case ds of wild { Language.PureScript.Sugar.Names.Env.Imports ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ->
                 ds1 }) -}
330f296cc3ed68256ee5fc6aa457fa42
  importedValueOps ::
    Language.PureScript.Sugar.Names.Env.Imports
    -> Language.PureScript.Sugar.Names.Env.ImportMap
         (Language.PureScript.Names.OpName
            'Language.PureScript.Names.ValueOpName)
  RecSel Left Language.PureScript.Sugar.Names.Env.Imports
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLSLLL),1*U(A,A,A,A,A,1*U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Sugar.Names.Env.Imports) ->
                 case ds of wild { Language.PureScript.Sugar.Names.Env.Imports ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ->
                 ds6 }) -}
330f296cc3ed68256ee5fc6aa457fa42
  importedValues ::
    Language.PureScript.Sugar.Names.Env.Imports
    -> Language.PureScript.Sugar.Names.Env.ImportMap
         Language.PureScript.Names.Ident
  RecSel Left Language.PureScript.Sugar.Names.Env.Imports
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLSLLLL),1*U(A,A,A,A,1*U,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Language.PureScript.Sugar.Names.Env.Imports) ->
                 case ds of wild { Language.PureScript.Sugar.Names.Env.Imports ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ->
                 ds5 }) -}
54e7bb7b24a36dc04ed7c8d05f8e56af
  nullExports :: Language.PureScript.Sugar.Names.Env.Exports
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Language.PureScript.Sugar.Names.Env.Exports
                   (Data.Map.Internal.Tip
                      @ (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.TypeName)
                      @ ([Language.PureScript.Names.ProperName
                            'Language.PureScript.Names.ConstructorName],
                         Language.PureScript.Names.ModuleName))
                   (Data.Map.Internal.Tip
                      @ (Language.PureScript.Names.OpName
                           'Language.PureScript.Names.TypeOpName)
                      @ Language.PureScript.Names.ModuleName)
                   (Data.Map.Internal.Tip
                      @ (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.ClassName)
                      @ Language.PureScript.Names.ModuleName)
                   (Data.Map.Internal.Tip
                      @ Language.PureScript.Names.Ident
                      @ Language.PureScript.Names.ModuleName)
                   (Data.Map.Internal.Tip
                      @ (Language.PureScript.Names.OpName
                           'Language.PureScript.Names.ValueOpName)
                      @ Language.PureScript.Names.ModuleName)
                   (Data.Map.Internal.Tip
                      @ (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.KindName)
                      @ Language.PureScript.Names.ModuleName)) -}
5dfc688b52efa485e2b0285fa84553d6
  nullImports :: Language.PureScript.Sugar.Names.Env.Imports
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Language.PureScript.Sugar.Names.Env.Imports
                   (Data.Map.Internal.Tip
                      @ (Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.TypeName))
                      @ [Language.PureScript.Sugar.Names.Env.ImportRecord
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.TypeName)])
                   (Data.Map.Internal.Tip
                      @ (Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.OpName
                              'Language.PureScript.Names.TypeOpName))
                      @ [Language.PureScript.Sugar.Names.Env.ImportRecord
                           (Language.PureScript.Names.OpName
                              'Language.PureScript.Names.TypeOpName)])
                   (Data.Map.Internal.Tip
                      @ (Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ConstructorName))
                      @ [Language.PureScript.Sugar.Names.Env.ImportRecord
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ConstructorName)])
                   (Data.Map.Internal.Tip
                      @ (Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ClassName))
                      @ [Language.PureScript.Sugar.Names.Env.ImportRecord
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ClassName)])
                   (Data.Map.Internal.Tip
                      @ (Language.PureScript.Names.Qualified
                           Language.PureScript.Names.Ident)
                      @ [Language.PureScript.Sugar.Names.Env.ImportRecord
                           Language.PureScript.Names.Ident])
                   (Data.Map.Internal.Tip
                      @ (Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.OpName
                              'Language.PureScript.Names.ValueOpName))
                      @ [Language.PureScript.Sugar.Names.Env.ImportRecord
                           (Language.PureScript.Names.OpName
                              'Language.PureScript.Names.ValueOpName)])
                   (Data.Set.Internal.Tip @ Language.PureScript.Names.ModuleName)
                   (Data.Set.Internal.Tip @ Language.PureScript.Names.ModuleName)
                   (Data.Map.Internal.Tip
                      @ (Language.PureScript.Names.Qualified
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.KindName))
                      @ [Language.PureScript.Sugar.Names.Env.ImportRecord
                           (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.KindName)])) -}
8c4c1c2bebe4ba66e6b4639be4e62264
  primEnv :: Language.PureScript.Sugar.Names.Env.Env
  {- Unfolding: (Language.PureScript.Sugar.Names.Env.$sfromList
                   @ (Language.PureScript.AST.SourcePos.SourceSpan,
                      Language.PureScript.Sugar.Names.Env.Imports,
                      Language.PureScript.Sugar.Names.Env.Exports)
                   Language.PureScript.Sugar.Names.Env.primEnv1) -}
e73e9c26e9af8a53ccde834efaecad44
  primEnv1 ::
    [(Language.PureScript.Names.ModuleName,
      (Language.PureScript.AST.SourcePos.SourceSpan,
       Language.PureScript.Sugar.Names.Env.Imports,
       Language.PureScript.Sugar.Names.Env.Exports))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.ModuleName,
                      (Language.PureScript.AST.SourcePos.SourceSpan,
                       Language.PureScript.Sugar.Names.Env.Imports,
                       Language.PureScript.Sugar.Names.Env.Exports))
                   Language.PureScript.Sugar.Names.Env.primEnv64
                   Language.PureScript.Sugar.Names.Env.primEnv2) -}
d8be8df0abb4fc9c0975fa7592c19b47
  primEnv10 :: Language.PureScript.Sugar.Names.Env.Exports
  {- Strictness: m,
     Unfolding: (Language.PureScript.Sugar.Names.Env.Exports
                   Language.PureScript.Sugar.Names.Env.primEnv14
                   (Data.Map.Internal.Tip
                      @ (Language.PureScript.Names.OpName
                           'Language.PureScript.Names.TypeOpName)
                      @ Language.PureScript.Names.ModuleName)
                   Language.PureScript.Sugar.Names.Env.primEnv12
                   (Data.Map.Internal.Tip
                      @ Language.PureScript.Names.Ident
                      @ Language.PureScript.Names.ModuleName)
                   (Data.Map.Internal.Tip
                      @ (Language.PureScript.Names.OpName
                           'Language.PureScript.Names.ValueOpName)
                      @ Language.PureScript.Names.ModuleName)
                   Language.PureScript.Sugar.Names.Env.primEnv11) -}
a7cc3b4cfb25bed778c0471149a5f728
  primEnv11 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.KindName)
      Language.PureScript.Names.ModuleName
  {- Unfolding: (Language.PureScript.Sugar.Names.Env.$sfromList1
                   @ Language.PureScript.Names.ModuleName
                   (Language.PureScript.Sugar.Names.Env.primEnv_go3
                      (GHC.Types.[]
                         @ (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.KindName,
                            Language.PureScript.Names.ModuleName))
                      Language.PureScript.Environment.primTypeErrorKinds)) -}
4409a65532d433ec812be8ed8952216c
  primEnv12 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
      Language.PureScript.Names.ModuleName
  {- Unfolding: (Language.PureScript.Sugar.Names.Env.$sfromList2
                   @ Language.PureScript.Names.ModuleName
                   (Language.PureScript.Sugar.Names.Env.primEnv13
                      @ Language.PureScript.Environment.TypeClassData
                      (GHC.Types.[]
                         @ (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ClassName,
                            Language.PureScript.Names.ModuleName))
                      Language.PureScript.Environment.primTypeErrorClasses)) -}
a39109b67d19bd290701b60c4a5b131b
  primEnv13 ::
    [(Language.PureScript.Names.ProperName
        'Language.PureScript.Names.ClassName,
      Language.PureScript.Names.ModuleName)]
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.ClassName))
         b
    -> [(Language.PureScript.Names.ProperName
           'Language.PureScript.Names.ClassName,
         Language.PureScript.Names.ModuleName)]
  {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
fbf8dc66aafa10e4a14638e9e04144ab
  primEnv14 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName)
      ([Language.PureScript.Names.ProperName
          'Language.PureScript.Names.ConstructorName],
       Language.PureScript.Names.ModuleName)
  {- Unfolding: (Language.PureScript.Sugar.Names.Env.$sfromList3
                   @ ([Language.PureScript.Names.ProperName
                         'Language.PureScript.Names.ConstructorName],
                      Language.PureScript.Names.ModuleName)
                   (Language.PureScript.Sugar.Names.Env.primEnv15
                      @ (Language.PureScript.Kinds.SourceKind,
                         Language.PureScript.Environment.TypeKind)
                      (GHC.Types.[]
                         @ (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.TypeName,
                            ([Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ConstructorName],
                             Language.PureScript.Names.ModuleName)))
                      Language.PureScript.Environment.primTypeErrorTypes)) -}
bf255b0fbff06e8df0c2ffb43c6bff82
  primEnv15 ::
    [(Language.PureScript.Names.ProperName
        'Language.PureScript.Names.TypeName,
      ([Language.PureScript.Names.ProperName
          'Language.PureScript.Names.ConstructorName],
       Language.PureScript.Names.ModuleName))]
    -> Data.Map.Internal.Map
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.TypeName))
         a
    -> [(Language.PureScript.Names.ProperName
           'Language.PureScript.Names.TypeName,
         ([Language.PureScript.Names.ProperName
             'Language.PureScript.Names.ConstructorName],
          Language.PureScript.Names.ModuleName))]
  {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
42e87a3227fe7325273fda0d6839cf47
  primEnv16 :: Language.PureScript.AST.SourcePos.SourceSpan
  {- Strictness: m,
     Unfolding: (Language.PureScript.AST.SourcePos.SourceSpan
                   Language.PureScript.Sugar.Names.Env.primEnv17
                   Language.PureScript.AST.SourcePos.$bNullSourceSpan1
                   Language.PureScript.AST.SourcePos.$bNullSourceSpan1) -}
7ab33e2b2ad5550c696e4b8ea90693bc
  primEnv17 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Sugar.Names.Env.primEnv18) -}
5c4ba0fb2ed6ac81c669bbab8a86bcee
  primEnv18 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("<Prim.TypeError>"#) -}
5ae7e7b03363d34d607a08e687298aa7
  primEnv19 ::
    (Language.PureScript.Names.ModuleName,
     (Language.PureScript.AST.SourcePos.SourceSpan,
      Language.PureScript.Sugar.Names.Env.Imports,
      Language.PureScript.Sugar.Names.Env.Exports))
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Constants.$bPrimSymbol1
                    `cast`
                  (Sym (Language.PureScript.Names.N:ModuleName[0])),
                  Language.PureScript.Sugar.Names.Env.primEnv20)) -}
af069d71d6b7bbb1940b500dad711ca1
  primEnv2 ::
    [(Language.PureScript.Names.ModuleName,
      (Language.PureScript.AST.SourcePos.SourceSpan,
       Language.PureScript.Sugar.Names.Env.Imports,
       Language.PureScript.Sugar.Names.Env.Exports))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.ModuleName,
                      (Language.PureScript.AST.SourcePos.SourceSpan,
                       Language.PureScript.Sugar.Names.Env.Imports,
                       Language.PureScript.Sugar.Names.Env.Exports))
                   Language.PureScript.Sugar.Names.Env.primEnv55
                   Language.PureScript.Sugar.Names.Env.primEnv3) -}
49f0abae3a079623d9bc0ca064e7ca22
  primEnv20 ::
    (Language.PureScript.AST.SourcePos.SourceSpan,
     Language.PureScript.Sugar.Names.Env.Imports,
     Language.PureScript.Sugar.Names.Env.Exports)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Sugar.Names.Env.primEnv25,
                  Language.PureScript.Sugar.Names.Env.nullImports,
                  Language.PureScript.Sugar.Names.Env.primEnv21)) -}
9b52d74fe191fd56bf6c2f20b16d87af
  primEnv21 :: Language.PureScript.Sugar.Names.Env.Exports
  {- Strictness: m,
     Unfolding: (Language.PureScript.Sugar.Names.Env.Exports
                   Language.PureScript.Sugar.Names.Env.primEnv24
                   (Data.Map.Internal.Tip
                      @ (Language.PureScript.Names.OpName
                           'Language.PureScript.Names.TypeOpName)
                      @ Language.PureScript.Names.ModuleName)
                   Language.PureScript.Sugar.Names.Env.primEnv23
                   (Data.Map.Internal.Tip
                      @ Language.PureScript.Names.Ident
                      @ Language.PureScript.Names.ModuleName)
                   (Data.Map.Internal.Tip
                      @ (Language.PureScript.Names.OpName
                           'Language.PureScript.Names.ValueOpName)
                      @ Language.PureScript.Names.ModuleName)
                   Language.PureScript.Sugar.Names.Env.primEnv22) -}
cace41fb0fda2d4caf2654f8ee6bc51d
  primEnv22 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.KindName)
      Language.PureScript.Names.ModuleName
  {- Unfolding: (Language.PureScript.Sugar.Names.Env.$sfromList1
                   @ Language.PureScript.Names.ModuleName
                   (GHC.Types.[]
                      @ (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.KindName,
                         Language.PureScript.Names.ModuleName))) -}
c2f01067f5c06a8adcc96e0067e37f32
  primEnv23 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
      Language.PureScript.Names.ModuleName
  {- Unfolding: (Language.PureScript.Sugar.Names.Env.$sfromList2
                   @ Language.PureScript.Names.ModuleName
                   (Language.PureScript.Sugar.Names.Env.primEnv13
                      @ Language.PureScript.Environment.TypeClassData
                      (GHC.Types.[]
                         @ (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ClassName,
                            Language.PureScript.Names.ModuleName))
                      Language.PureScript.Environment.primSymbolClasses)) -}
7aa8e78b6a410b93dcc7db62c79a4811
  primEnv24 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName)
      ([Language.PureScript.Names.ProperName
          'Language.PureScript.Names.ConstructorName],
       Language.PureScript.Names.ModuleName)
  {- Unfolding: (Language.PureScript.Sugar.Names.Env.$sfromList3
                   @ ([Language.PureScript.Names.ProperName
                         'Language.PureScript.Names.ConstructorName],
                      Language.PureScript.Names.ModuleName)
                   (Language.PureScript.Sugar.Names.Env.primEnv15
                      @ (Language.PureScript.Kinds.SourceKind,
                         Language.PureScript.Environment.TypeKind)
                      (GHC.Types.[]
                         @ (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.TypeName,
                            ([Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ConstructorName],
                             Language.PureScript.Names.ModuleName)))
                      Language.PureScript.Environment.primSymbolTypes)) -}
27733daee7037d5400560017eab06710
  primEnv25 :: Language.PureScript.AST.SourcePos.SourceSpan
  {- Strictness: m,
     Unfolding: (Language.PureScript.AST.SourcePos.SourceSpan
                   Language.PureScript.Sugar.Names.Env.primEnv26
                   Language.PureScript.AST.SourcePos.$bNullSourceSpan1
                   Language.PureScript.AST.SourcePos.$bNullSourceSpan1) -}
89f8f584dd15c96b6ae7ce88dce413e4
  primEnv26 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Sugar.Names.Env.primEnv27) -}
bb96553b2505a712e80114aeafa5784d
  primEnv27 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("<Prim.Symbol>"#) -}
2a49663dbd3110cf45bcda2ab425dcfd
  primEnv28 ::
    (Language.PureScript.Names.ModuleName,
     (Language.PureScript.AST.SourcePos.SourceSpan,
      Language.PureScript.Sugar.Names.Env.Imports,
      Language.PureScript.Sugar.Names.Env.Exports))
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Constants.$bPrimRowList1
                    `cast`
                  (Sym (Language.PureScript.Names.N:ModuleName[0])),
                  Language.PureScript.Sugar.Names.Env.primEnv29)) -}
5e034b7f9799a25d759248dd59f0577b
  primEnv29 ::
    (Language.PureScript.AST.SourcePos.SourceSpan,
     Language.PureScript.Sugar.Names.Env.Imports,
     Language.PureScript.Sugar.Names.Env.Exports)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Sugar.Names.Env.primEnv34,
                  Language.PureScript.Sugar.Names.Env.nullImports,
                  Language.PureScript.Sugar.Names.Env.primEnv30)) -}
68e854f5057836e30aad5a76a9a9c6bf
  primEnv3 ::
    [(Language.PureScript.Names.ModuleName,
      (Language.PureScript.AST.SourcePos.SourceSpan,
       Language.PureScript.Sugar.Names.Env.Imports,
       Language.PureScript.Sugar.Names.Env.Exports))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.ModuleName,
                      (Language.PureScript.AST.SourcePos.SourceSpan,
                       Language.PureScript.Sugar.Names.Env.Imports,
                       Language.PureScript.Sugar.Names.Env.Exports))
                   Language.PureScript.Sugar.Names.Env.primEnv46
                   Language.PureScript.Sugar.Names.Env.primEnv4) -}
0c74248cd84529681f3b45e31137c248
  primEnv30 :: Language.PureScript.Sugar.Names.Env.Exports
  {- Strictness: m,
     Unfolding: (Language.PureScript.Sugar.Names.Env.Exports
                   Language.PureScript.Sugar.Names.Env.primEnv33
                   (Data.Map.Internal.Tip
                      @ (Language.PureScript.Names.OpName
                           'Language.PureScript.Names.TypeOpName)
                      @ Language.PureScript.Names.ModuleName)
                   Language.PureScript.Sugar.Names.Env.primEnv32
                   (Data.Map.Internal.Tip
                      @ Language.PureScript.Names.Ident
                      @ Language.PureScript.Names.ModuleName)
                   (Data.Map.Internal.Tip
                      @ (Language.PureScript.Names.OpName
                           'Language.PureScript.Names.ValueOpName)
                      @ Language.PureScript.Names.ModuleName)
                   Language.PureScript.Sugar.Names.Env.primEnv31) -}
cc03ffbde5be192f8f7fbac5c61b79e4
  primEnv31 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.KindName)
      Language.PureScript.Names.ModuleName
  {- Unfolding: (Language.PureScript.Sugar.Names.Env.$sfromList1
                   @ Language.PureScript.Names.ModuleName
                   (Language.PureScript.Sugar.Names.Env.primEnv_go3
                      (GHC.Types.[]
                         @ (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.KindName,
                            Language.PureScript.Names.ModuleName))
                      Language.PureScript.Environment.primRowListKinds)) -}
dd71975dfe39a08e316f12e471428e27
  primEnv32 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
      Language.PureScript.Names.ModuleName
  {- Unfolding: (Language.PureScript.Sugar.Names.Env.$sfromList2
                   @ Language.PureScript.Names.ModuleName
                   (Language.PureScript.Sugar.Names.Env.primEnv13
                      @ Language.PureScript.Environment.TypeClassData
                      (GHC.Types.[]
                         @ (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ClassName,
                            Language.PureScript.Names.ModuleName))
                      Language.PureScript.Environment.primRowListClasses)) -}
d695233e7f82ba0810dd4f4d28b94165
  primEnv33 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName)
      ([Language.PureScript.Names.ProperName
          'Language.PureScript.Names.ConstructorName],
       Language.PureScript.Names.ModuleName)
  {- Unfolding: (Language.PureScript.Sugar.Names.Env.$sfromList3
                   @ ([Language.PureScript.Names.ProperName
                         'Language.PureScript.Names.ConstructorName],
                      Language.PureScript.Names.ModuleName)
                   (Language.PureScript.Sugar.Names.Env.primEnv15
                      @ (Language.PureScript.Kinds.SourceKind,
                         Language.PureScript.Environment.TypeKind)
                      (GHC.Types.[]
                         @ (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.TypeName,
                            ([Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ConstructorName],
                             Language.PureScript.Names.ModuleName)))
                      Language.PureScript.Environment.primRowListTypes)) -}
ee92983ac529304df2e37b3ee2b2ecb7
  primEnv34 :: Language.PureScript.AST.SourcePos.SourceSpan
  {- Strictness: m,
     Unfolding: (Language.PureScript.AST.SourcePos.SourceSpan
                   Language.PureScript.Sugar.Names.Env.primEnv35
                   Language.PureScript.AST.SourcePos.$bNullSourceSpan1
                   Language.PureScript.AST.SourcePos.$bNullSourceSpan1) -}
a513ecd898559f8dd2a9cc384fcc531b
  primEnv35 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Sugar.Names.Env.primEnv36) -}
777efe7b42319e536b793e9117309008
  primEnv36 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("<Prim.RowList>"#) -}
7f15e127cd57e9dbe664e3a42354f73a
  primEnv37 ::
    (Language.PureScript.Names.ModuleName,
     (Language.PureScript.AST.SourcePos.SourceSpan,
      Language.PureScript.Sugar.Names.Env.Imports,
      Language.PureScript.Sugar.Names.Env.Exports))
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Constants.$bPrimRow1
                    `cast`
                  (Sym (Language.PureScript.Names.N:ModuleName[0])),
                  Language.PureScript.Sugar.Names.Env.primEnv38)) -}
1fbb516a28da0328b6be7f08af09ef9d
  primEnv38 ::
    (Language.PureScript.AST.SourcePos.SourceSpan,
     Language.PureScript.Sugar.Names.Env.Imports,
     Language.PureScript.Sugar.Names.Env.Exports)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Sugar.Names.Env.primEnv43,
                  Language.PureScript.Sugar.Names.Env.nullImports,
                  Language.PureScript.Sugar.Names.Env.primEnv39)) -}
509902e123fb89682d66ee0788d50f75
  primEnv39 :: Language.PureScript.Sugar.Names.Env.Exports
  {- Strictness: m,
     Unfolding: (Language.PureScript.Sugar.Names.Env.Exports
                   Language.PureScript.Sugar.Names.Env.primEnv42
                   (Data.Map.Internal.Tip
                      @ (Language.PureScript.Names.OpName
                           'Language.PureScript.Names.TypeOpName)
                      @ Language.PureScript.Names.ModuleName)
                   Language.PureScript.Sugar.Names.Env.primEnv41
                   (Data.Map.Internal.Tip
                      @ Language.PureScript.Names.Ident
                      @ Language.PureScript.Names.ModuleName)
                   (Data.Map.Internal.Tip
                      @ (Language.PureScript.Names.OpName
                           'Language.PureScript.Names.ValueOpName)
                      @ Language.PureScript.Names.ModuleName)
                   Language.PureScript.Sugar.Names.Env.primEnv40) -}
cde5aeaadf8f643109fd9bc92d2af4f7
  primEnv4 ::
    [(Language.PureScript.Names.ModuleName,
      (Language.PureScript.AST.SourcePos.SourceSpan,
       Language.PureScript.Sugar.Names.Env.Imports,
       Language.PureScript.Sugar.Names.Env.Exports))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.ModuleName,
                      (Language.PureScript.AST.SourcePos.SourceSpan,
                       Language.PureScript.Sugar.Names.Env.Imports,
                       Language.PureScript.Sugar.Names.Env.Exports))
                   Language.PureScript.Sugar.Names.Env.primEnv37
                   Language.PureScript.Sugar.Names.Env.primEnv5) -}
ec450109879ce5a5713c33cbcb1c77d7
  primEnv40 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.KindName)
      Language.PureScript.Names.ModuleName
  {- Unfolding: (Language.PureScript.Sugar.Names.Env.$sfromList1
                   @ Language.PureScript.Names.ModuleName
                   (GHC.Types.[]
                      @ (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.KindName,
                         Language.PureScript.Names.ModuleName))) -}
0b41058e0c926155a17fd2c2eea91f17
  primEnv41 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
      Language.PureScript.Names.ModuleName
  {- Unfolding: (Language.PureScript.Sugar.Names.Env.$sfromList2
                   @ Language.PureScript.Names.ModuleName
                   (Language.PureScript.Sugar.Names.Env.primEnv13
                      @ Language.PureScript.Environment.TypeClassData
                      (GHC.Types.[]
                         @ (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ClassName,
                            Language.PureScript.Names.ModuleName))
                      Language.PureScript.Environment.primRowClasses)) -}
b79d2a408ed6cc269dedff9598cf70f5
  primEnv42 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName)
      ([Language.PureScript.Names.ProperName
          'Language.PureScript.Names.ConstructorName],
       Language.PureScript.Names.ModuleName)
  {- Unfolding: (Language.PureScript.Sugar.Names.Env.$sfromList3
                   @ ([Language.PureScript.Names.ProperName
                         'Language.PureScript.Names.ConstructorName],
                      Language.PureScript.Names.ModuleName)
                   (Language.PureScript.Sugar.Names.Env.primEnv15
                      @ (Language.PureScript.Kinds.SourceKind,
                         Language.PureScript.Environment.TypeKind)
                      (GHC.Types.[]
                         @ (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.TypeName,
                            ([Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ConstructorName],
                             Language.PureScript.Names.ModuleName)))
                      Language.PureScript.Environment.primRowTypes)) -}
c6576ef867f70dc50fdc59208b003be3
  primEnv43 :: Language.PureScript.AST.SourcePos.SourceSpan
  {- Strictness: m,
     Unfolding: (Language.PureScript.AST.SourcePos.SourceSpan
                   Language.PureScript.Sugar.Names.Env.primEnv44
                   Language.PureScript.AST.SourcePos.$bNullSourceSpan1
                   Language.PureScript.AST.SourcePos.$bNullSourceSpan1) -}
047ecd30e749d6a4451fe436b34c77c0
  primEnv44 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Sugar.Names.Env.primEnv45) -}
aa89e574ff4192de8ef50d296d8e4989
  primEnv45 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("<Prim.Row>"#) -}
ff351ac79ef476cd17a093eb1ffa21ce
  primEnv46 ::
    (Language.PureScript.Names.ModuleName,
     (Language.PureScript.AST.SourcePos.SourceSpan,
      Language.PureScript.Sugar.Names.Env.Imports,
      Language.PureScript.Sugar.Names.Env.Exports))
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Constants.$bPrimOrdering1
                    `cast`
                  (Sym (Language.PureScript.Names.N:ModuleName[0])),
                  Language.PureScript.Sugar.Names.Env.primEnv47)) -}
553aaba8eb554a4cc9b111f74d663012
  primEnv47 ::
    (Language.PureScript.AST.SourcePos.SourceSpan,
     Language.PureScript.Sugar.Names.Env.Imports,
     Language.PureScript.Sugar.Names.Env.Exports)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Sugar.Names.Env.primEnv52,
                  Language.PureScript.Sugar.Names.Env.nullImports,
                  Language.PureScript.Sugar.Names.Env.primEnv48)) -}
d11ba93c2f5e8e6ed6c51053bc5cd29f
  primEnv48 :: Language.PureScript.Sugar.Names.Env.Exports
  {- Strictness: m,
     Unfolding: (Language.PureScript.Sugar.Names.Env.Exports
                   Language.PureScript.Sugar.Names.Env.primEnv51
                   (Data.Map.Internal.Tip
                      @ (Language.PureScript.Names.OpName
                           'Language.PureScript.Names.TypeOpName)
                      @ Language.PureScript.Names.ModuleName)
                   Language.PureScript.Sugar.Names.Env.primEnv50
                   (Data.Map.Internal.Tip
                      @ Language.PureScript.Names.Ident
                      @ Language.PureScript.Names.ModuleName)
                   (Data.Map.Internal.Tip
                      @ (Language.PureScript.Names.OpName
                           'Language.PureScript.Names.ValueOpName)
                      @ Language.PureScript.Names.ModuleName)
                   Language.PureScript.Sugar.Names.Env.primEnv49) -}
2f0d1463737a11282394113d11333f27
  primEnv49 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.KindName)
      Language.PureScript.Names.ModuleName
  {- Unfolding: (Language.PureScript.Sugar.Names.Env.$sfromList1
                   @ Language.PureScript.Names.ModuleName
                   (Language.PureScript.Sugar.Names.Env.primEnv_go3
                      (GHC.Types.[]
                         @ (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.KindName,
                            Language.PureScript.Names.ModuleName))
                      Language.PureScript.Environment.primOrderingKinds)) -}
1a833837b9279271562f04c5e097cd1d
  primEnv5 ::
    [(Language.PureScript.Names.ModuleName,
      (Language.PureScript.AST.SourcePos.SourceSpan,
       Language.PureScript.Sugar.Names.Env.Imports,
       Language.PureScript.Sugar.Names.Env.Exports))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.ModuleName,
                      (Language.PureScript.AST.SourcePos.SourceSpan,
                       Language.PureScript.Sugar.Names.Env.Imports,
                       Language.PureScript.Sugar.Names.Env.Exports))
                   Language.PureScript.Sugar.Names.Env.primEnv28
                   Language.PureScript.Sugar.Names.Env.primEnv6) -}
57c7ce595302ce75258989c29dcd6bc1
  primEnv50 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
      Language.PureScript.Names.ModuleName
  {- Unfolding: (Language.PureScript.Sugar.Names.Env.$sfromList2
                   @ Language.PureScript.Names.ModuleName
                   (GHC.Types.[]
                      @ (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.ClassName,
                         Language.PureScript.Names.ModuleName))) -}
25a5ff08033413a64f540e873790baa4
  primEnv51 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName)
      ([Language.PureScript.Names.ProperName
          'Language.PureScript.Names.ConstructorName],
       Language.PureScript.Names.ModuleName)
  {- Unfolding: (Language.PureScript.Sugar.Names.Env.$sfromList3
                   @ ([Language.PureScript.Names.ProperName
                         'Language.PureScript.Names.ConstructorName],
                      Language.PureScript.Names.ModuleName)
                   (Language.PureScript.Sugar.Names.Env.primEnv15
                      @ (Language.PureScript.Kinds.SourceKind,
                         Language.PureScript.Environment.TypeKind)
                      (GHC.Types.[]
                         @ (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.TypeName,
                            ([Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ConstructorName],
                             Language.PureScript.Names.ModuleName)))
                      Language.PureScript.Environment.primOrderingTypes)) -}
77029a8badf4e78c1bfaa771f03978b2
  primEnv52 :: Language.PureScript.AST.SourcePos.SourceSpan
  {- Strictness: m,
     Unfolding: (Language.PureScript.AST.SourcePos.SourceSpan
                   Language.PureScript.Sugar.Names.Env.primEnv53
                   Language.PureScript.AST.SourcePos.$bNullSourceSpan1
                   Language.PureScript.AST.SourcePos.$bNullSourceSpan1) -}
52cc2afe9486106c7e4c5424516b2d60
  primEnv53 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Sugar.Names.Env.primEnv54) -}
b12d8e8d4e5c611b2859e96d24f8367d
  primEnv54 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("<Prim.Ordering>"#) -}
3989c0d0af2d7a3daa0319234d0c5b4b
  primEnv55 ::
    (Language.PureScript.Names.ModuleName,
     (Language.PureScript.AST.SourcePos.SourceSpan,
      Language.PureScript.Sugar.Names.Env.Imports,
      Language.PureScript.Sugar.Names.Env.Exports))
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Constants.$bPrimBoolean1
                    `cast`
                  (Sym (Language.PureScript.Names.N:ModuleName[0])),
                  Language.PureScript.Sugar.Names.Env.primEnv56)) -}
11c4da46930bf0830e566b095799fd35
  primEnv56 ::
    (Language.PureScript.AST.SourcePos.SourceSpan,
     Language.PureScript.Sugar.Names.Env.Imports,
     Language.PureScript.Sugar.Names.Env.Exports)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Sugar.Names.Env.primEnv61,
                  Language.PureScript.Sugar.Names.Env.nullImports,
                  Language.PureScript.Sugar.Names.Env.primEnv57)) -}
210937413d488f848738818ed1051746
  primEnv57 :: Language.PureScript.Sugar.Names.Env.Exports
  {- Strictness: m,
     Unfolding: (Language.PureScript.Sugar.Names.Env.Exports
                   Language.PureScript.Sugar.Names.Env.primEnv60
                   (Data.Map.Internal.Tip
                      @ (Language.PureScript.Names.OpName
                           'Language.PureScript.Names.TypeOpName)
                      @ Language.PureScript.Names.ModuleName)
                   Language.PureScript.Sugar.Names.Env.primEnv59
                   (Data.Map.Internal.Tip
                      @ Language.PureScript.Names.Ident
                      @ Language.PureScript.Names.ModuleName)
                   (Data.Map.Internal.Tip
                      @ (Language.PureScript.Names.OpName
                           'Language.PureScript.Names.ValueOpName)
                      @ Language.PureScript.Names.ModuleName)
                   Language.PureScript.Sugar.Names.Env.primEnv58) -}
2b5df43fed97883fbdf1b9c9b8cbd3de
  primEnv58 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.KindName)
      Language.PureScript.Names.ModuleName
  {- Unfolding: (Language.PureScript.Sugar.Names.Env.$sfromList1
                   @ Language.PureScript.Names.ModuleName
                   (Language.PureScript.Sugar.Names.Env.primEnv_go3
                      (GHC.Types.[]
                         @ (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.KindName,
                            Language.PureScript.Names.ModuleName))
                      Language.PureScript.Environment.primBooleanKinds)) -}
90a5e88c84c4dc2b13c28b6db21fb137
  primEnv59 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
      Language.PureScript.Names.ModuleName
  {- Unfolding: (Language.PureScript.Sugar.Names.Env.$sfromList2
                   @ Language.PureScript.Names.ModuleName
                   (GHC.Types.[]
                      @ (Language.PureScript.Names.ProperName
                           'Language.PureScript.Names.ClassName,
                         Language.PureScript.Names.ModuleName))) -}
903633b670ed26c09bd94f8a4f76a6ca
  primEnv6 ::
    [(Language.PureScript.Names.ModuleName,
      (Language.PureScript.AST.SourcePos.SourceSpan,
       Language.PureScript.Sugar.Names.Env.Imports,
       Language.PureScript.Sugar.Names.Env.Exports))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.ModuleName,
                      (Language.PureScript.AST.SourcePos.SourceSpan,
                       Language.PureScript.Sugar.Names.Env.Imports,
                       Language.PureScript.Sugar.Names.Env.Exports))
                   Language.PureScript.Sugar.Names.Env.primEnv19
                   Language.PureScript.Sugar.Names.Env.primEnv7) -}
86fdde4fb5c197b269af318b65119981
  primEnv60 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName)
      ([Language.PureScript.Names.ProperName
          'Language.PureScript.Names.ConstructorName],
       Language.PureScript.Names.ModuleName)
  {- Unfolding: (Language.PureScript.Sugar.Names.Env.$sfromList3
                   @ ([Language.PureScript.Names.ProperName
                         'Language.PureScript.Names.ConstructorName],
                      Language.PureScript.Names.ModuleName)
                   (Language.PureScript.Sugar.Names.Env.primEnv15
                      @ (Language.PureScript.Kinds.SourceKind,
                         Language.PureScript.Environment.TypeKind)
                      (GHC.Types.[]
                         @ (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.TypeName,
                            ([Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ConstructorName],
                             Language.PureScript.Names.ModuleName)))
                      Language.PureScript.Environment.primBooleanTypes)) -}
778665d96a6e60af33fcce7acbedaebc
  primEnv61 :: Language.PureScript.AST.SourcePos.SourceSpan
  {- Strictness: m,
     Unfolding: (Language.PureScript.AST.SourcePos.SourceSpan
                   Language.PureScript.Sugar.Names.Env.primEnv62
                   Language.PureScript.AST.SourcePos.$bNullSourceSpan1
                   Language.PureScript.AST.SourcePos.$bNullSourceSpan1) -}
9a6303b89105303c949c321d33efa278
  primEnv62 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Sugar.Names.Env.primEnv63) -}
3dfca18654258799bbfdf9306d316502
  primEnv63 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("<Prim.Boolean>"#) -}
ee1c13510b8e3de221c6501ab7725d50
  primEnv64 ::
    (Language.PureScript.Names.ModuleName,
     (Language.PureScript.AST.SourcePos.SourceSpan,
      Language.PureScript.Sugar.Names.Env.Imports,
      Language.PureScript.Sugar.Names.Env.Exports))
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Constants.$bPartial4
                    `cast`
                  (Sym (Language.PureScript.Names.N:ModuleName[0])),
                  Language.PureScript.Sugar.Names.Env.primEnv65)) -}
2d7d9384e86a718c74c2c17a90238720
  primEnv65 ::
    (Language.PureScript.AST.SourcePos.SourceSpan,
     Language.PureScript.Sugar.Names.Env.Imports,
     Language.PureScript.Sugar.Names.Env.Exports)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Sugar.Names.Env.primEnv66,
                  Language.PureScript.Sugar.Names.Env.nullImports,
                  Language.PureScript.Sugar.Names.Env.primExports)) -}
774d940f485320a79a52c294b7a158c3
  primEnv66 :: Language.PureScript.AST.SourcePos.SourceSpan
  {- Strictness: m,
     Unfolding: (Language.PureScript.AST.SourcePos.SourceSpan
                   Language.PureScript.Sugar.Names.Env.primEnv67
                   Language.PureScript.AST.SourcePos.$bNullSourceSpan1
                   Language.PureScript.AST.SourcePos.$bNullSourceSpan1) -}
ad958caa3993c9077bbf1b4cf2a0e979
  primEnv67 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Sugar.Names.Env.primEnv68) -}
50eb2ee496b6146aa3b59dd993af1693
  primEnv68 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("<Prim>"#) -}
b41a9928f1e79e275f82145abc6f0e53
  primEnv7 ::
    [(Language.PureScript.Names.ModuleName,
      (Language.PureScript.AST.SourcePos.SourceSpan,
       Language.PureScript.Sugar.Names.Env.Imports,
       Language.PureScript.Sugar.Names.Env.Exports))]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Language.PureScript.Names.ModuleName,
                      (Language.PureScript.AST.SourcePos.SourceSpan,
                       Language.PureScript.Sugar.Names.Env.Imports,
                       Language.PureScript.Sugar.Names.Env.Exports))
                   Language.PureScript.Sugar.Names.Env.primEnv8
                   (GHC.Types.[]
                      @ (Language.PureScript.Names.ModuleName,
                         (Language.PureScript.AST.SourcePos.SourceSpan,
                          Language.PureScript.Sugar.Names.Env.Imports,
                          Language.PureScript.Sugar.Names.Env.Exports)))) -}
7ecab38383da59e5c140b5d6b617a536
  primEnv8 ::
    (Language.PureScript.Names.ModuleName,
     (Language.PureScript.AST.SourcePos.SourceSpan,
      Language.PureScript.Sugar.Names.Env.Imports,
      Language.PureScript.Sugar.Names.Env.Exports))
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Constants.$bFail4
                    `cast`
                  (Sym (Language.PureScript.Names.N:ModuleName[0])),
                  Language.PureScript.Sugar.Names.Env.primEnv9)) -}
f20083baec56e3262142dd38d7c24ddc
  primEnv9 ::
    (Language.PureScript.AST.SourcePos.SourceSpan,
     Language.PureScript.Sugar.Names.Env.Imports,
     Language.PureScript.Sugar.Names.Env.Exports)
  {- Strictness: m,
     Unfolding: ((Language.PureScript.Sugar.Names.Env.primEnv16,
                  Language.PureScript.Sugar.Names.Env.nullImports,
                  Language.PureScript.Sugar.Names.Env.primEnv10)) -}
4cb34ef30b7cb54f675dcbf7eb21f592
  primEnv_go3 ::
    [(Language.PureScript.Names.ProperName
        'Language.PureScript.Names.KindName,
      Language.PureScript.Names.ModuleName)]
    -> Data.Set.Internal.Set
         (Language.PureScript.Names.Qualified
            (Language.PureScript.Names.ProperName
               'Language.PureScript.Names.KindName))
    -> [(Language.PureScript.Names.ProperName
           'Language.PureScript.Names.KindName,
         Language.PureScript.Names.ModuleName)]
  {- Arity: 2, Strictness: <L,1*U><S,1*U> -}
00364155181649c1121ad0babd6bb2df
  primExports :: Language.PureScript.Sugar.Names.Env.Exports
  {- Strictness: m,
     Unfolding: (Language.PureScript.Sugar.Names.Env.Exports
                   Language.PureScript.Sugar.Names.Env.primExports3
                   (Data.Map.Internal.Tip
                      @ (Language.PureScript.Names.OpName
                           'Language.PureScript.Names.TypeOpName)
                      @ Language.PureScript.Names.ModuleName)
                   Language.PureScript.Sugar.Names.Env.primExports2
                   (Data.Map.Internal.Tip
                      @ Language.PureScript.Names.Ident
                      @ Language.PureScript.Names.ModuleName)
                   (Data.Map.Internal.Tip
                      @ (Language.PureScript.Names.OpName
                           'Language.PureScript.Names.ValueOpName)
                      @ Language.PureScript.Names.ModuleName)
                   Language.PureScript.Sugar.Names.Env.primExports1) -}
7946b53fd1fc37074fbde8d9c7c38671
  primExports1 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.KindName)
      Language.PureScript.Names.ModuleName
  {- Unfolding: (Language.PureScript.Sugar.Names.Env.$sfromList1
                   @ Language.PureScript.Names.ModuleName
                   (Language.PureScript.Sugar.Names.Env.primEnv_go3
                      (GHC.Types.[]
                         @ (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.KindName,
                            Language.PureScript.Names.ModuleName))
                      Language.PureScript.Environment.primKinds)) -}
816848e6652c7cec23cc099f39b0a6c1
  primExports2 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.ClassName)
      Language.PureScript.Names.ModuleName
  {- Unfolding: (Language.PureScript.Sugar.Names.Env.$sfromList2
                   @ Language.PureScript.Names.ModuleName
                   (Language.PureScript.Sugar.Names.Env.primEnv13
                      @ Language.PureScript.Environment.TypeClassData
                      (GHC.Types.[]
                         @ (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.ClassName,
                            Language.PureScript.Names.ModuleName))
                      Language.PureScript.Environment.primClasses)) -}
6ffbeb45584aa998b33e9331499185eb
  primExports3 ::
    Data.Map.Internal.Map
      (Language.PureScript.Names.ProperName
         'Language.PureScript.Names.TypeName)
      ([Language.PureScript.Names.ProperName
          'Language.PureScript.Names.ConstructorName],
       Language.PureScript.Names.ModuleName)
  {- Unfolding: (Language.PureScript.Sugar.Names.Env.$sfromList3
                   @ ([Language.PureScript.Names.ProperName
                         'Language.PureScript.Names.ConstructorName],
                      Language.PureScript.Names.ModuleName)
                   (Language.PureScript.Sugar.Names.Env.primEnv15
                      @ (Language.PureScript.Kinds.SourceKind,
                         Language.PureScript.Environment.TypeKind)
                      (GHC.Types.[]
                         @ (Language.PureScript.Names.ProperName
                              'Language.PureScript.Names.TypeName,
                            ([Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ConstructorName],
                             Language.PureScript.Names.ModuleName)))
                      Language.PureScript.Environment.primTypes)) -}
instance GHC.Classes.Eq [Language.PureScript.Sugar.Names.Env.ExportMode]
  = Language.PureScript.Sugar.Names.Env.$fEqExportMode
instance GHC.Classes.Eq [Language.PureScript.Sugar.Names.Env.ImportProvenance]
  = Language.PureScript.Sugar.Names.Env.$fEqImportProvenance
instance GHC.Classes.Eq [Language.PureScript.Sugar.Names.Env.ImportRecord]
  = Language.PureScript.Sugar.Names.Env.$fEqImportRecord
instance GHC.Classes.Ord [Language.PureScript.Sugar.Names.Env.ImportProvenance]
  = Language.PureScript.Sugar.Names.Env.$fOrdImportProvenance
instance GHC.Classes.Ord [Language.PureScript.Sugar.Names.Env.ImportRecord]
  = Language.PureScript.Sugar.Names.Env.$fOrdImportRecord
instance GHC.Show.Show [Language.PureScript.Sugar.Names.Env.ExportMode]
  = Language.PureScript.Sugar.Names.Env.$fShowExportMode
instance GHC.Show.Show [Language.PureScript.Sugar.Names.Env.Exports]
  = Language.PureScript.Sugar.Names.Env.$fShowExports
instance GHC.Show.Show [Language.PureScript.Sugar.Names.Env.ImportProvenance]
  = Language.PureScript.Sugar.Names.Env.$fShowImportProvenance
instance GHC.Show.Show [Language.PureScript.Sugar.Names.Env.ImportRecord]
  = Language.PureScript.Sugar.Names.Env.$fShowImportRecord
instance GHC.Show.Show [Language.PureScript.Sugar.Names.Env.Imports]
  = Language.PureScript.Sugar.Names.Env.$fShowImports
"SPEC $cshow @ (OpName 'TypeOpName)" forall ($dShow :: GHC.Show.Show
                                                         (Language.PureScript.Names.OpName
                                                            'Language.PureScript.Names.TypeOpName))
  Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$cshow @ (Language.PureScript.Names.OpName
                                                                     'Language.PureScript.Names.TypeOpName)
                                                                $dShow
  = Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshow1
"SPEC $cshow @ (OpName 'ValueOpName)" forall ($dShow :: GHC.Show.Show
                                                          (Language.PureScript.Names.OpName
                                                             'Language.PureScript.Names.ValueOpName))
  Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$cshow @ (Language.PureScript.Names.OpName
                                                                     'Language.PureScript.Names.ValueOpName)
                                                                $dShow
  = Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshow5
"SPEC $cshow @ (ProperName 'ClassName)" forall ($dShow :: GHC.Show.Show
                                                            (Language.PureScript.Names.ProperName
                                                               'Language.PureScript.Names.ClassName))
  Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$cshow @ (Language.PureScript.Names.ProperName
                                                                     'Language.PureScript.Names.ClassName)
                                                                $dShow
  = Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshow3
"SPEC $cshow @ (ProperName 'ConstructorName)" forall ($dShow :: GHC.Show.Show
                                                                  (Language.PureScript.Names.ProperName
                                                                     'Language.PureScript.Names.ConstructorName))
  Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$cshow @ (Language.PureScript.Names.ProperName
                                                                     'Language.PureScript.Names.ConstructorName)
                                                                $dShow
  = Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshow2
"SPEC $cshow @ (ProperName 'KindName)" forall ($dShow :: GHC.Show.Show
                                                           (Language.PureScript.Names.ProperName
                                                              'Language.PureScript.Names.KindName))
  Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$cshow @ (Language.PureScript.Names.ProperName
                                                                     'Language.PureScript.Names.KindName)
                                                                $dShow
  = Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshow6
"SPEC $cshow @ (ProperName 'TypeName)" forall ($dShow :: GHC.Show.Show
                                                           (Language.PureScript.Names.ProperName
                                                              'Language.PureScript.Names.TypeName))
  Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$cshow @ (Language.PureScript.Names.ProperName
                                                                     'Language.PureScript.Names.TypeName)
                                                                $dShow
  = Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshow
"SPEC $cshow @ Ident" forall ($dShow :: GHC.Show.Show
                                          Language.PureScript.Names.Ident)
  Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$cshow @ Language.PureScript.Names.Ident
                                                                $dShow
  = Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshow4
"SPEC $cshowList @ (OpName 'TypeOpName)" forall ($dShow :: GHC.Show.Show
                                                             (Language.PureScript.Names.OpName
                                                                'Language.PureScript.Names.TypeOpName))
  Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$cshowList @ (Language.PureScript.Names.OpName
                                                                         'Language.PureScript.Names.TypeOpName)
                                                                    $dShow
  = Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshowList1
"SPEC $cshowList @ (OpName 'ValueOpName)" forall ($dShow :: GHC.Show.Show
                                                              (Language.PureScript.Names.OpName
                                                                 'Language.PureScript.Names.ValueOpName))
  Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$cshowList @ (Language.PureScript.Names.OpName
                                                                         'Language.PureScript.Names.ValueOpName)
                                                                    $dShow
  = Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshowList5
"SPEC $cshowList @ (ProperName 'ClassName)" forall ($dShow :: GHC.Show.Show
                                                                (Language.PureScript.Names.ProperName
                                                                   'Language.PureScript.Names.ClassName))
  Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$cshowList @ (Language.PureScript.Names.ProperName
                                                                         'Language.PureScript.Names.ClassName)
                                                                    $dShow
  = Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshowList3
"SPEC $cshowList @ (ProperName 'ConstructorName)" forall ($dShow :: GHC.Show.Show
                                                                      (Language.PureScript.Names.ProperName
                                                                         'Language.PureScript.Names.ConstructorName))
  Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$cshowList @ (Language.PureScript.Names.ProperName
                                                                         'Language.PureScript.Names.ConstructorName)
                                                                    $dShow
  = Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshowList2
"SPEC $cshowList @ (ProperName 'KindName)" forall ($dShow :: GHC.Show.Show
                                                               (Language.PureScript.Names.ProperName
                                                                  'Language.PureScript.Names.KindName))
  Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$cshowList @ (Language.PureScript.Names.ProperName
                                                                         'Language.PureScript.Names.KindName)
                                                                    $dShow
  = Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshowList6
"SPEC $cshowList @ (ProperName 'TypeName)" forall ($dShow :: GHC.Show.Show
                                                               (Language.PureScript.Names.ProperName
                                                                  'Language.PureScript.Names.TypeName))
  Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$cshowList @ (Language.PureScript.Names.ProperName
                                                                         'Language.PureScript.Names.TypeName)
                                                                    $dShow
  = Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshowList
"SPEC $cshowList @ Ident" forall ($dShow :: GHC.Show.Show
                                              Language.PureScript.Names.Ident)
  Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$cshowList @ Language.PureScript.Names.Ident
                                                                    $dShow
  = Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshowList4
"SPEC $cshowsPrec @ (OpName 'TypeOpName)" forall ($dShow :: GHC.Show.Show
                                                              (Language.PureScript.Names.OpName
                                                                 'Language.PureScript.Names.TypeOpName))
  Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$cshowsPrec @ (Language.PureScript.Names.OpName
                                                                          'Language.PureScript.Names.TypeOpName)
                                                                     $dShow
  = Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshowsPrec1
"SPEC $cshowsPrec @ (OpName 'ValueOpName)" forall ($dShow :: GHC.Show.Show
                                                               (Language.PureScript.Names.OpName
                                                                  'Language.PureScript.Names.ValueOpName))
  Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$cshowsPrec @ (Language.PureScript.Names.OpName
                                                                          'Language.PureScript.Names.ValueOpName)
                                                                     $dShow
  = Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshowsPrec5
"SPEC $cshowsPrec @ (ProperName 'ClassName)" forall ($dShow :: GHC.Show.Show
                                                                 (Language.PureScript.Names.ProperName
                                                                    'Language.PureScript.Names.ClassName))
  Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$cshowsPrec @ (Language.PureScript.Names.ProperName
                                                                          'Language.PureScript.Names.ClassName)
                                                                     $dShow
  = Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshowsPrec3
"SPEC $cshowsPrec @ (ProperName 'ConstructorName)" forall ($dShow :: GHC.Show.Show
                                                                       (Language.PureScript.Names.ProperName
                                                                          'Language.PureScript.Names.ConstructorName))
  Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$cshowsPrec @ (Language.PureScript.Names.ProperName
                                                                          'Language.PureScript.Names.ConstructorName)
                                                                     $dShow
  = Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshowsPrec2
"SPEC $cshowsPrec @ (ProperName 'KindName)" forall ($dShow :: GHC.Show.Show
                                                                (Language.PureScript.Names.ProperName
                                                                   'Language.PureScript.Names.KindName))
  Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$cshowsPrec @ (Language.PureScript.Names.ProperName
                                                                          'Language.PureScript.Names.KindName)
                                                                     $dShow
  = Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshowsPrec6
"SPEC $cshowsPrec @ (ProperName 'TypeName)" forall ($dShow :: GHC.Show.Show
                                                                (Language.PureScript.Names.ProperName
                                                                   'Language.PureScript.Names.TypeName))
  Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$cshowsPrec @ (Language.PureScript.Names.ProperName
                                                                          'Language.PureScript.Names.TypeName)
                                                                     $dShow
  = Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshowsPrec
"SPEC $cshowsPrec @ Ident" forall ($dShow :: GHC.Show.Show
                                               Language.PureScript.Names.Ident)
  Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$cshowsPrec @ Language.PureScript.Names.Ident
                                                                     $dShow
  = Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$cshowsPrec4
"SPEC $fShowImportRecord @ (OpName 'TypeOpName)" forall ($dShow :: GHC.Show.Show
                                                                     (Language.PureScript.Names.OpName
                                                                        'Language.PureScript.Names.TypeOpName))
  Language.PureScript.Sugar.Names.Env.$fShowImportRecord @ (Language.PureScript.Names.OpName
                                                              'Language.PureScript.Names.TypeOpName)
                                                         $dShow
  = Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$fShowImportRecord1
"SPEC $fShowImportRecord @ (OpName 'ValueOpName)" forall ($dShow :: GHC.Show.Show
                                                                      (Language.PureScript.Names.OpName
                                                                         'Language.PureScript.Names.ValueOpName))
  Language.PureScript.Sugar.Names.Env.$fShowImportRecord @ (Language.PureScript.Names.OpName
                                                              'Language.PureScript.Names.ValueOpName)
                                                         $dShow
  = Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$fShowImportRecord5
"SPEC $fShowImportRecord @ (ProperName 'ClassName)" forall ($dShow :: GHC.Show.Show
                                                                        (Language.PureScript.Names.ProperName
                                                                           'Language.PureScript.Names.ClassName))
  Language.PureScript.Sugar.Names.Env.$fShowImportRecord @ (Language.PureScript.Names.ProperName
                                                              'Language.PureScript.Names.ClassName)
                                                         $dShow
  = Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$fShowImportRecord3
"SPEC $fShowImportRecord @ (ProperName 'ConstructorName)" forall ($dShow :: GHC.Show.Show
                                                                              (Language.PureScript.Names.ProperName
                                                                                 'Language.PureScript.Names.ConstructorName))
  Language.PureScript.Sugar.Names.Env.$fShowImportRecord @ (Language.PureScript.Names.ProperName
                                                              'Language.PureScript.Names.ConstructorName)
                                                         $dShow
  = Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$fShowImportRecord2
"SPEC $fShowImportRecord @ (ProperName 'KindName)" forall ($dShow :: GHC.Show.Show
                                                                       (Language.PureScript.Names.ProperName
                                                                          'Language.PureScript.Names.KindName))
  Language.PureScript.Sugar.Names.Env.$fShowImportRecord @ (Language.PureScript.Names.ProperName
                                                              'Language.PureScript.Names.KindName)
                                                         $dShow
  = Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$fShowImportRecord6
"SPEC $fShowImportRecord @ (ProperName 'TypeName)" forall ($dShow :: GHC.Show.Show
                                                                       (Language.PureScript.Names.ProperName
                                                                          'Language.PureScript.Names.TypeName))
  Language.PureScript.Sugar.Names.Env.$fShowImportRecord @ (Language.PureScript.Names.ProperName
                                                              'Language.PureScript.Names.TypeName)
                                                         $dShow
  = Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$fShowImportRecord
"SPEC $fShowImportRecord @ Ident" forall ($dShow :: GHC.Show.Show
                                                      Language.PureScript.Names.Ident)
  Language.PureScript.Sugar.Names.Env.$fShowImportRecord @ Language.PureScript.Names.Ident
                                                         $dShow
  = Language.PureScript.Sugar.Names.Env.$fShowImportRecord_$s$fShowImportRecord4
"SPEC/Language.PureScript.Sugar.Names.Env $fShow(,) @ [ProperName
                                                        'ConstructorName] @ ModuleName" [orphan] forall (v1 :: GHC.Show.Show
                                                                                                                                                                                   Language.PureScript.Names.ModuleName)
                                                                                                                                                                          (v :: GHC.Show.Show
                                                                                                                                                                                  [Language.PureScript.Names.ProperName
                                                                                                                                                                                     'Language.PureScript.Names.ConstructorName])
  GHC.Show.$fShow(,) @ [Language.PureScript.Names.ProperName
                          'Language.PureScript.Names.ConstructorName]
                     @ Language.PureScript.Names.ModuleName
                     v
                     v1
  = Language.PureScript.Sugar.Names.Env.$s$fShow(,)
"SPEC/Language.PureScript.Sugar.Names.Env $fShowQualified @ (OpName
                                                              'TypeOpName)" [orphan] forall (v :: GHC.Show.Show
                                                                                                                                                                        (Language.PureScript.Names.OpName
                                                                                                                                                                           'Language.PureScript.Names.TypeOpName))
  Language.PureScript.Names.$fShowQualified @ (Language.PureScript.Names.OpName
                                                 'Language.PureScript.Names.TypeOpName)
                                            v
  = Language.PureScript.Sugar.Names.Env.$s$fShowMap_$cshowsPrec_$s$fShowQualified5
"SPEC/Language.PureScript.Sugar.Names.Env $fShowQualified @ (OpName
                                                              'ValueOpName)" [orphan] forall (v :: GHC.Show.Show
                                                                                                                                                                         (Language.PureScript.Names.OpName
                                                                                                                                                                            'Language.PureScript.Names.ValueOpName))
  Language.PureScript.Names.$fShowQualified @ (Language.PureScript.Names.OpName
                                                 'Language.PureScript.Names.ValueOpName)
                                            v
  = Language.PureScript.Sugar.Names.Env.$s$fShowMap_$cshowsPrec_$s$fShowQualified1
"SPEC/Language.PureScript.Sugar.Names.Env $fShowQualified @ (ProperName
                                                              'ClassName)" [orphan] forall (v :: GHC.Show.Show
                                                                                                                                                                           (Language.PureScript.Names.ProperName
                                                                                                                                                                              'Language.PureScript.Names.ClassName))
  Language.PureScript.Names.$fShowQualified @ (Language.PureScript.Names.ProperName
                                                 'Language.PureScript.Names.ClassName)
                                            v
  = Language.PureScript.Sugar.Names.Env.$s$fShowMap_$cshowsPrec_$s$fShowQualified3
"SPEC/Language.PureScript.Sugar.Names.Env $fShowQualified @ (ProperName
                                                              'ConstructorName)" [orphan] forall (v :: GHC.Show.Show
                                                                                                                                                                                 (Language.PureScript.Names.ProperName
                                                                                                                                                                                    'Language.PureScript.Names.ConstructorName))
  Language.PureScript.Names.$fShowQualified @ (Language.PureScript.Names.ProperName
                                                 'Language.PureScript.Names.ConstructorName)
                                            v
  = Language.PureScript.Sugar.Names.Env.$s$fShowMap_$cshowsPrec_$s$fShowQualified4
"SPEC/Language.PureScript.Sugar.Names.Env $fShowQualified @ (ProperName
                                                              'KindName)" [orphan] forall (v :: GHC.Show.Show
                                                                                                                                                                          (Language.PureScript.Names.ProperName
                                                                                                                                                                             'Language.PureScript.Names.KindName))
  Language.PureScript.Names.$fShowQualified @ (Language.PureScript.Names.ProperName
                                                 'Language.PureScript.Names.KindName)
                                            v
  = Language.PureScript.Sugar.Names.Env.$s$fShowMap_$cshowsPrec_$s$fShowQualified
"SPEC/Language.PureScript.Sugar.Names.Env $fShowQualified @ (ProperName
                                                              'TypeName)" [orphan] forall (v :: GHC.Show.Show
                                                                                                                                                                          (Language.PureScript.Names.ProperName
                                                                                                                                                                             'Language.PureScript.Names.TypeName))
  Language.PureScript.Names.$fShowQualified @ (Language.PureScript.Names.ProperName
                                                 'Language.PureScript.Names.TypeName)
                                            v
  = Language.PureScript.Sugar.Names.Env.$s$fShowMap_$cshowsPrec_$s$fShowQualified6
"SPEC/Language.PureScript.Sugar.Names.Env $fShowQualified @ Ident" [orphan] forall (v :: GHC.Show.Show
                                                                                           Language.PureScript.Names.Ident)
  Language.PureScript.Names.$fShowQualified @ Language.PureScript.Names.Ident
                                            v
  = Language.PureScript.Sugar.Names.Env.$s$fShowMap_$cshowsPrec_$s$fShowQualified2
"SPEC/Language.PureScript.Sugar.Names.Env $fShowQualified_$cshowList @ (OpName
                                                                         'TypeOpName)" [orphan] forall ($dShow :: GHC.Show.Show
                                                                                                                                                                                                   (Language.PureScript.Names.OpName
                                                                                                                                                                                                      'Language.PureScript.Names.TypeOpName))
  Language.PureScript.Names.$fShowQualified_$cshowList @ (Language.PureScript.Names.OpName
                                                            'Language.PureScript.Names.TypeOpName)
                                                       $dShow
  = Language.PureScript.Sugar.Names.Env.$s$fShowQualified_$cshowList5
"SPEC/Language.PureScript.Sugar.Names.Env $fShowQualified_$cshowList @ (OpName
                                                                         'ValueOpName)" [orphan] forall ($dShow :: GHC.Show.Show
                                                                                                                                                                                                    (Language.PureScript.Names.OpName
                                                                                                                                                                                                       'Language.PureScript.Names.ValueOpName))
  Language.PureScript.Names.$fShowQualified_$cshowList @ (Language.PureScript.Names.OpName
                                                            'Language.PureScript.Names.ValueOpName)
                                                       $dShow
  = Language.PureScript.Sugar.Names.Env.$s$fShowQualified_$cshowList1
"SPEC/Language.PureScript.Sugar.Names.Env $fShowQualified_$cshowList @ (ProperName
                                                                         'ClassName)" [orphan] forall ($dShow :: GHC.Show.Show
                                                                                                                                                                                                      (Language.PureScript.Names.ProperName
                                                                                                                                                                                                         'Language.PureScript.Names.ClassName))
  Language.PureScript.Names.$fShowQualified_$cshowList @ (Language.PureScript.Names.ProperName
                                                            'Language.PureScript.Names.ClassName)
                                                       $dShow
  = Language.PureScript.Sugar.Names.Env.$s$fShowQualified_$cshowList3
"SPEC/Language.PureScript.Sugar.Names.Env $fShowQualified_$cshowList @ (ProperName
                                                                         'ConstructorName)" [orphan] forall ($dShow :: GHC.Show.Show
                                                                                                                                                                                                            (Language.PureScript.Names.ProperName
                                                                                                                                                                                                               'Language.PureScript.Names.ConstructorName))
  Language.PureScript.Names.$fShowQualified_$cshowList @ (Language.PureScript.Names.ProperName
                                                            'Language.PureScript.Names.ConstructorName)
                                                       $dShow
  = Language.PureScript.Sugar.Names.Env.$s$fShowQualified_$cshowList4
"SPEC/Language.PureScript.Sugar.Names.Env $fShowQualified_$cshowList @ (ProperName
                                                                         'KindName)" [orphan] forall ($dShow :: GHC.Show.Show
                                                                                                                                                                                                     (Language.PureScript.Names.ProperName
                                                                                                                                                                                                        'Language.PureScript.Names.KindName))
  Language.PureScript.Names.$fShowQualified_$cshowList @ (Language.PureScript.Names.ProperName
                                                            'Language.PureScript.Names.KindName)
                                                       $dShow
  = Language.PureScript.Sugar.Names.Env.$s$fShowQualified_$cshowList
"SPEC/Language.PureScript.Sugar.Names.Env $fShowQualified_$cshowList @ (ProperName
                                                                         'TypeName)" [orphan] forall ($dShow :: GHC.Show.Show
                                                                                                                                                                                                     (Language.PureScript.Names.ProperName
                                                                                                                                                                                                        'Language.PureScript.Names.TypeName))
  Language.PureScript.Names.$fShowQualified_$cshowList @ (Language.PureScript.Names.ProperName
                                                            'Language.PureScript.Names.TypeName)
                                                       $dShow
  = Language.PureScript.Sugar.Names.Env.$s$fShowQualified_$cshowList6
"SPEC/Language.PureScript.Sugar.Names.Env $fShowQualified_$cshowList @ Ident" [orphan] forall ($dShow :: GHC.Show.Show
                                                                                                           Language.PureScript.Names.Ident)
  Language.PureScript.Names.$fShowQualified_$cshowList @ Language.PureScript.Names.Ident
                                                       $dShow
  = Language.PureScript.Sugar.Names.Env.$s$fShowQualified_$cshowList2
"SPEC/Language.PureScript.Sugar.Names.Env $fShowQualified_$cshowsPrec @ (OpName
                                                                          'TypeOpName)" [orphan] [0] forall (w :: GHC.Show.Show
                                                                                                                                                                                                    (Language.PureScript.Names.OpName
                                                                                                                                                                                                       'Language.PureScript.Names.TypeOpName))
  Language.PureScript.Names.$fShowQualified_$cshowsPrec @ (Language.PureScript.Names.OpName
                                                             'Language.PureScript.Names.TypeOpName)
                                                        w
  = Language.PureScript.Sugar.Names.Env.$s$fShowQualified_$cshowsPrec5
"SPEC/Language.PureScript.Sugar.Names.Env $fShowQualified_$cshowsPrec @ (OpName
                                                                          'ValueOpName)" [orphan] [0] forall (w :: GHC.Show.Show
                                                                                                                                                                                                     (Language.PureScript.Names.OpName
                                                                                                                                                                                                        'Language.PureScript.Names.ValueOpName))
  Language.PureScript.Names.$fShowQualified_$cshowsPrec @ (Language.PureScript.Names.OpName
                                                             'Language.PureScript.Names.ValueOpName)
                                                        w
  = Language.PureScript.Sugar.Names.Env.$s$fShowQualified_$cshowsPrec1
"SPEC/Language.PureScript.Sugar.Names.Env $fShowQualified_$cshowsPrec @ (ProperName
                                                                          'ClassName)" [orphan] [0] forall (w :: GHC.Show.Show
                                                                                                                                                                                                       (Language.PureScript.Names.ProperName
                                                                                                                                                                                                          'Language.PureScript.Names.ClassName))
  Language.PureScript.Names.$fShowQualified_$cshowsPrec @ (Language.PureScript.Names.ProperName
                                                             'Language.PureScript.Names.ClassName)
                                                        w
  = Language.PureScript.Sugar.Names.Env.$s$fShowQualified_$cshowsPrec3
"SPEC/Language.PureScript.Sugar.Names.Env $fShowQualified_$cshowsPrec @ (ProperName
                                                                          'ConstructorName)" [orphan] [0] forall (w :: GHC.Show.Show
                                                                                                                                                                                                             (Language.PureScript.Names.ProperName
                                                                                                                                                                                                                'Language.PureScript.Names.ConstructorName))
  Language.PureScript.Names.$fShowQualified_$cshowsPrec @ (Language.PureScript.Names.ProperName
                                                             'Language.PureScript.Names.ConstructorName)
                                                        w
  = Language.PureScript.Sugar.Names.Env.$s$fShowQualified_$cshowsPrec4
"SPEC/Language.PureScript.Sugar.Names.Env $fShowQualified_$cshowsPrec @ (ProperName
                                                                          'KindName)" [orphan] [0] forall (w :: GHC.Show.Show
                                                                                                                                                                                                      (Language.PureScript.Names.ProperName
                                                                                                                                                                                                         'Language.PureScript.Names.KindName))
  Language.PureScript.Names.$fShowQualified_$cshowsPrec @ (Language.PureScript.Names.ProperName
                                                             'Language.PureScript.Names.KindName)
                                                        w
  = Language.PureScript.Sugar.Names.Env.$s$fShowQualified_$cshowsPrec
"SPEC/Language.PureScript.Sugar.Names.Env $fShowQualified_$cshowsPrec @ (ProperName
                                                                          'TypeName)" [orphan] [0] forall (w :: GHC.Show.Show
                                                                                                                                                                                                      (Language.PureScript.Names.ProperName
                                                                                                                                                                                                         'Language.PureScript.Names.TypeName))
  Language.PureScript.Names.$fShowQualified_$cshowsPrec @ (Language.PureScript.Names.ProperName
                                                             'Language.PureScript.Names.TypeName)
                                                        w
  = Language.PureScript.Sugar.Names.Env.$s$fShowQualified_$cshowsPrec6
"SPEC/Language.PureScript.Sugar.Names.Env $fShowQualified_$cshowsPrec @ Ident" [orphan] [0] forall (w :: GHC.Show.Show
                                                                                                           Language.PureScript.Names.Ident)
  Language.PureScript.Names.$fShowQualified_$cshowsPrec @ Language.PureScript.Names.Ident
                                                        w
  = Language.PureScript.Sugar.Names.Env.$s$fShowQualified_$cshowsPrec2
"SPEC/Language.PureScript.Sugar.Names.Env $fShow[] @ (ProperName
                                                       'ConstructorName)" [orphan] forall (v :: GHC.Show.Show
                                                                                                                                                                   (Language.PureScript.Names.ProperName
                                                                                                                                                                      'Language.PureScript.Names.ConstructorName))
  GHC.Show.$fShow[] @ (Language.PureScript.Names.ProperName
                         'Language.PureScript.Names.ConstructorName)
                    v
  = Language.PureScript.Sugar.Names.Env.$s$fShow(,)_$s$fShow[]
"SPEC/Language.PureScript.Sugar.Names.Env $fShow[]_$cshow @ (ProperName
                                                              'ConstructorName)" [orphan] forall ($dShow :: GHC.Show.Show
                                                                                                                                                                                      (Language.PureScript.Names.ProperName
                                                                                                                                                                                         'Language.PureScript.Names.ConstructorName))
  GHC.Show.$fShow[]_$cshow @ (Language.PureScript.Names.ProperName
                                'Language.PureScript.Names.ConstructorName)
                           $dShow
  = Language.PureScript.Sugar.Names.Env.$s$fShow[]_$cshow
"SPEC/Language.PureScript.Sugar.Names.Env $fShow[]_$cshowList @ (ProperName
                                                                  'ConstructorName)" [orphan] forall ($dShow :: GHC.Show.Show
                                                                                                                                                                                              (Language.PureScript.Names.ProperName
                                                                                                                                                                                                 'Language.PureScript.Names.ConstructorName))
  GHC.Show.$fShow[]_$cshowList @ (Language.PureScript.Names.ProperName
                                    'Language.PureScript.Names.ConstructorName)
                               $dShow
  = Language.PureScript.Sugar.Names.Env.$s$fShow[]_$cshowList
"SPEC/Language.PureScript.Sugar.Names.Env fromList @ (ProperName
                                                       'ClassName) _" [orphan] forall @ a
                                                                                                                                                       ($dOrd :: GHC.Classes.Ord
                                                                                                                                                                   (Language.PureScript.Names.ProperName
                                                                                                                                                                      'Language.PureScript.Names.ClassName))
  Data.Map.Internal.fromList @ (Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.ClassName)
                             @ a
                             $dOrd
  = Language.PureScript.Sugar.Names.Env.$sfromList2 @ a
"SPEC/Language.PureScript.Sugar.Names.Env fromList @ (ProperName
                                                       'KindName) _" [orphan] forall @ a
                                                                                                                                                      ($dOrd :: GHC.Classes.Ord
                                                                                                                                                                  (Language.PureScript.Names.ProperName
                                                                                                                                                                     'Language.PureScript.Names.KindName))
  Data.Map.Internal.fromList @ (Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.KindName)
                             @ a
                             $dOrd
  = Language.PureScript.Sugar.Names.Env.$sfromList1 @ a
"SPEC/Language.PureScript.Sugar.Names.Env fromList @ (ProperName
                                                       'TypeName) _" [orphan] forall @ a
                                                                                                                                                      ($dOrd :: GHC.Classes.Ord
                                                                                                                                                                  (Language.PureScript.Names.ProperName
                                                                                                                                                                     'Language.PureScript.Names.TypeName))
  Data.Map.Internal.fromList @ (Language.PureScript.Names.ProperName
                                  'Language.PureScript.Names.TypeName)
                             @ a
                             $dOrd
  = Language.PureScript.Sugar.Names.Env.$sfromList3 @ a
"SPEC/Language.PureScript.Sugar.Names.Env fromList @ ModuleName _" [orphan] forall @ a
                                                                                   ($dOrd :: GHC.Classes.Ord
                                                                                               Language.PureScript.Names.ModuleName)
  Data.Map.Internal.fromList @ Language.PureScript.Names.ModuleName
                             @ a
                             $dOrd
  = Language.PureScript.Sugar.Names.Env.$sfromList @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

