
==================== FINAL INTERFACE ====================
2019-01-24 14:17:55.198796 UTC

interface purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Ide.Filter 8043
  interface hash: 2b84d6ff9f250639ce3f46bf425f8d0d
  ABI hash: cfa1ebda6f0a8830c8c60e4462bab1ef
  export-list hash: 346bf0e54a9a4816ea444c922e0ed4be
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: ba6250971b0b8cd51a39b9d35d979db4
  opt_hash: 2c98c95d41c045ae9c2fb565ec8aabc6
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Language.PureScript.Ide.Filter.applyFilters
  Language.PureScript.Ide.Filter.declarationTypeFilter
  Language.PureScript.Ide.Filter.equalityFilter
  Language.PureScript.Ide.Filter.moduleFilter
  Language.PureScript.Ide.Filter.namespaceFilter
  Language.PureScript.Ide.Filter.prefixFilter
  Language.PureScript.Ide.Filter.Filter
module dependencies: Control.Monad.Logger Control.Monad.Supply
                     Control.Monad.Supply.Class Language.PureScript
                     Language.PureScript.AST Language.PureScript.AST.Binders
                     Language.PureScript.AST.Declarations
                     Language.PureScript.AST.Exported Language.PureScript.AST.Literals
                     Language.PureScript.AST.Operators Language.PureScript.AST.SourcePos
                     Language.PureScript.AST.Traversals Language.PureScript.Bundle
                     Language.PureScript.CodeGen.JS
                     Language.PureScript.CodeGen.JS.Common
                     Language.PureScript.CodeGen.JS.Printer Language.PureScript.Comments
                     Language.PureScript.Constants Language.PureScript.CoreFn
                     Language.PureScript.CoreFn.Ann Language.PureScript.CoreFn.Binders
                     Language.PureScript.CoreFn.Desugar Language.PureScript.CoreFn.Expr
                     Language.PureScript.CoreFn.Meta Language.PureScript.CoreFn.Module
                     Language.PureScript.CoreFn.Optimizer
                     Language.PureScript.CoreFn.ToJSON
                     Language.PureScript.CoreFn.Traversals
                     Language.PureScript.CoreImp.AST
                     Language.PureScript.CoreImp.Optimizer
                     Language.PureScript.CoreImp.Optimizer.Blocks
                     Language.PureScript.CoreImp.Optimizer.Common
                     Language.PureScript.CoreImp.Optimizer.Inliner
                     Language.PureScript.CoreImp.Optimizer.MagicDo
                     Language.PureScript.CoreImp.Optimizer.TCO
                     Language.PureScript.CoreImp.Optimizer.Unused
                     Language.PureScript.Crash Language.PureScript.Environment
                     Language.PureScript.Errors Language.PureScript.Errors.JSON
                     Language.PureScript.Externs Language.PureScript.Ide.Error
                     Language.PureScript.Ide.Filter.Declaration
                     Language.PureScript.Ide.Logging Language.PureScript.Ide.Types
                     Language.PureScript.Ide.Util Language.PureScript.Kinds
                     Language.PureScript.Label Language.PureScript.Linter
                     Language.PureScript.Linter.Exhaustive
                     Language.PureScript.Linter.Imports Language.PureScript.Make
                     Language.PureScript.Make.Actions Language.PureScript.Make.BuildPlan
                     Language.PureScript.Make.Monad
                     Language.PureScript.ModuleDependencies Language.PureScript.Names
                     Language.PureScript.Options Language.PureScript.PSString
                     Language.PureScript.Parser Language.PureScript.Parser.Common
                     Language.PureScript.Parser.Declarations
                     Language.PureScript.Parser.Kinds Language.PureScript.Parser.Lexer
                     Language.PureScript.Parser.State Language.PureScript.Parser.Types
                     Language.PureScript.Pretty Language.PureScript.Pretty.Common
                     Language.PureScript.Pretty.Kinds Language.PureScript.Pretty.Types
                     Language.PureScript.Pretty.Values
                     Language.PureScript.Publish.BoxesHelpers
                     Language.PureScript.Renamer Language.PureScript.Sugar
                     Language.PureScript.Sugar.AdoNotation
                     Language.PureScript.Sugar.BindingGroups
                     Language.PureScript.Sugar.CaseDeclarations
                     Language.PureScript.Sugar.DoNotation
                     Language.PureScript.Sugar.LetPattern
                     Language.PureScript.Sugar.Names
                     Language.PureScript.Sugar.Names.Common
                     Language.PureScript.Sugar.Names.Env
                     Language.PureScript.Sugar.Names.Exports
                     Language.PureScript.Sugar.Names.Imports
                     Language.PureScript.Sugar.ObjectWildcards
                     Language.PureScript.Sugar.Operators
                     Language.PureScript.Sugar.Operators.Binders
                     Language.PureScript.Sugar.Operators.Common
                     Language.PureScript.Sugar.Operators.Expr
                     Language.PureScript.Sugar.Operators.Types
                     Language.PureScript.Sugar.TypeClasses
                     Language.PureScript.Sugar.TypeClasses.Deriving
                     Language.PureScript.Sugar.TypeDeclarations
                     Language.PureScript.Traversals Language.PureScript.TypeChecker
                     Language.PureScript.TypeChecker.Entailment
                     Language.PureScript.TypeChecker.Kinds
                     Language.PureScript.TypeChecker.Monad
                     Language.PureScript.TypeChecker.Skolems
                     Language.PureScript.TypeChecker.Subsumption
                     Language.PureScript.TypeChecker.Synonyms
                     Language.PureScript.TypeChecker.TypeSearch
                     Language.PureScript.TypeChecker.Types
                     Language.PureScript.TypeChecker.Unify
                     Language.PureScript.TypeClassDictionaries Language.PureScript.Types
                     Paths_purescript System.IO.UTF8
package dependencies: aeson-1.3.1.1 ansi-terminal-0.8.0.4
                      array-0.5.2.0 async-2.2.1 attoparsec-0.13.2.2 auto-update-0.1.4
                      base-4.11.1.0 base-compat-0.10.4 binary-0.8.5.1
                      blaze-builder-0.4.1.0 boxes-0.1.5 bytestring-0.10.8.2 clock-0.7.2
                      colour-2.3.4 conduit-1.3.0.3 conduit-extra-1.3.0
                      containers-0.5.11.0 data-ordlist-0.4.7.0 deepseq-1.4.3.0
                      directory-1.3.1.5 dlist-0.8.0.4 easy-file-0.2.2 exceptions-0.10.0
                      fast-logger-2.4.11 filepath-1.4.2 ghc-boot-th-8.4.3
                      ghc-prim-0.5.2.0 hashable-1.2.7.0 integer-gmp-1.0.2.0
                      integer-logarithms-1.0.2.1 language-javascript-0.6.0.11
                      lifted-base-0.2.3.12 microlens-0.4.9.1 microlens-ghc-0.4.9
                      microlens-mtl-0.1.11.1 microlens-platform-0.3.10
                      microlens-th-0.4.2.1 monad-control-1.0.2.3 monad-logger-0.3.28.5
                      monad-loops-0.4.3 mtl-2.2.2 old-locale-1.0.0.7 old-time-1.1.0.3
                      parallel-3.2.1.1 parsec-3.1.13.0 pattern-arrows-0.0.2
                      pretty-1.1.3.6 primitive-0.6.3.0 protolude-0.2.2 random-1.1
                      resourcet-1.2.1 safe-0.3.17 scientific-0.3.6.2 sourcemap-0.1.6
                      split-0.2.3.3 stm-2.4.5.0 stm-chans-3.0.0.4 stringsearch-0.3.6.6
                      syb-0.7 tagged-0.8.5 template-haskell-2.13.0.0 text-1.2.3.0
                      th-abstraction-0.2.8.0 time-1.8.0.2 time-locale-compat-0.1.1.4
                      transformers-0.5.5.0 transformers-base-0.4.5.2 unix-2.7.2.2
                      unix-time-0.3.8 unliftio-core-0.1.1.0 unordered-containers-0.2.9.0
                      utf8-string-1.0.1.1 uuid-types-1.0.3 vector-0.12.0.1
orphans: unix-time-0.3.8:Data.UnixTime.Diff
         syb-0.7:Data.Generics.Instances colour-2.3.4:Data.Colour
         stm-2.4.5.0:Control.Monad.STM
         attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         microlens-platform-0.3.10:Lens.Micro.Platform
         microlens-ghc-0.4.9:Lens.Micro.GHC
         hashable-1.2.7.0:Data.Hashable.Generic
         vector-0.12.0.1:Data.Vector.Unboxed
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.5.0:Control.Monad.Trans.Error
         text-1.2.3.0:Data.Text.Lazy text-1.2.3.0:Data.Text
         binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: aeson-1.3.1.1:Data.Aeson.Types.Internal
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         clock-0.7.2:System.Clock
                         conduit-1.3.0.3:Data.Conduit.Internal.Conduit
                         conduit-1.3.0.3:Data.Conduit.Internal.Pipe
                         containers-0.5.11.0:Data.Graph
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         dlist-0.8.0.4:Data.DList ghc-boot-th-8.4.3:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.3:GHC.LanguageExtensions.Type
                         microlens-0.4.9.1:Lens.Micro.Internal
                         microlens-ghc-0.4.9:Lens.Micro.GHC
                         microlens-mtl-0.1.11.1:Lens.Micro.Mtl.Internal
                         microlens-platform-0.3.10:Lens.Micro.Platform
                         monad-control-1.0.2.3:Control.Monad.Trans.Control
                         monad-logger-0.3.28.5:Control.Monad.Logger
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Control.Monad.Logger
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.Declarations
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.Operators
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.AST.SourcePos
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Comments
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Environment
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Ide.Types
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Kinds
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Label
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Make.Monad
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Names
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.PSString
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.TypeClassDictionaries
                         purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F:Language.PureScript.Types
                         resourcet-1.2.1:Control.Monad.Trans.Resource.Internal
                         tagged-0.8.5:Data.Tagged
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.0:Data.Text text-1.2.3.0:Data.Text.Lazy
                         th-abstraction-0.2.8.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Storable
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  aeson-1.3.1.1:Data.Aeson 108dfb08de41cf77aad4693ac1dc3d44
import  -/  aeson-1.3.1.1:Data.Aeson.Types.FromJSON 1ea0c919856f0d29f12e53cd074d532c
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.Functor f522c3501272159820fd6f242510732f
import  -/  base-4.11.1.0:Data.List.NonEmpty 595ee3baddcadebc4831ea7541427984
import  -/  base-4.11.1.0:Data.Semigroup.Internal 3e64145a879c21fc4c6fc83e5d8ca93b
import  -/  base-4.11.1.0:Data.Tuple 3af66f3ac61ed95ba8a3a3f68ebc5003
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Real b4beb0389ba1ad5d9640aae67848c5d3
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  protolude-0.2.2:Protolude 2c2d16096c8a60f59f646a3b93b0eb7b
import  -/  Language.PureScript 4a24ccd892adbf021daf2410ebd61e22
  exports: 139dcaa90af8ddcee6aa0492159f351d
import  -/  Language.PureScript.Ide.Filter.Declaration 99425fbd75c95dda224eb2b36d061e74
  exports: 75fe26fa53304a64f9192e2dba4c02f3
  IdeDeclaration 126e156d708932dbd69a30a467e15ef3
  typeDeclarationForDeclaration 95022ef52069c5c9abc206c90ee02f1f
import  -/  Language.PureScript.Ide.Types 4bb81e9de3788f7f63a68a23e190eb73
  exports: e5ee4d37ef25d4dfedd36ea1d435a17a
  IdeDeclaration 0c91b1320f07da0ab07b77b49d64d462
  IdeDeclarationAnn b02d1e3d0d65a3bc0459005430392eb1
  IdeNamespace a433d742d266c5a84cd109a4a3bf8314
import  -/  Language.PureScript.Ide.Util 23feade20e7d884b8e398315c4ffa11e
  exports: b783a834cebd9a63a606ae4111317a86
  discardAnn dda9d4fafbbc8df2d6404b8b09ac7a49
  identifierFromIdeDeclaration d3020ece8f1e881771f78c7f6ed69758
  namespaceForDeclaration 118407e31332438e83d40344230582f8
import  -/  Language.PureScript.Names 00f694509122478d97b327fbbccae327
  ModuleName 1b2ddf0c04464d2fa2588925f10c1966
  moduleNameFromString 58dbc4d6b97c8eb6012ccda72d203acf
import  -/  text-1.2.3.0:Data.Text 7daa7e6c9b39d8cc1679e5ec5c64d2be
import  -/  text-1.2.3.0:Data.Text.Internal 30a0a123f71f63b26cd34c6b24f23411
c4b7c89a6bcd0c21f2097e0bb7c93686
  $fFromJSONFilter ::
    Data.Aeson.Types.FromJSON.FromJSON
      Language.PureScript.Ide.Filter.Filter
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Filter.Filter
                  Language.PureScript.Ide.Filter.$fFromJSONFilter_$cparseJSON
                  Language.PureScript.Ide.Filter.$fFromJSONFilter_$cparseJSONList -}
572a7d6853584ac0ded2b9379f973a90
  $fFromJSONFilter1 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (", encountered "#) -}
e7435418728834266a6ddb5948e013bf
  $fFromJSONFilter2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("[a]"#) -}
4bd2eb0308ac60b52cbbc7fe8710c071
  $fFromJSONFilter3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("expected "#) -}
c4b7c89a6bcd0c21f2097e0bb7c93686
  $fFromJSONFilter4 ::
    Data.Aeson.Types.Internal.Object
    -> Data.Aeson.Types.Internal.Parser
         Language.PureScript.Ide.Filter.Filter
  {- Arity: 1, Strictness: <L,U> -}
2b7977492964c5d48f53a45f43b3f32f
  $fFromJSONFilter5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Language.PureScript.Ide.Filter.$fFromJSONFilter6) -}
319f9d21b91d83e5c61bdadb3633e6c1
  $fFromJSONFilter6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("filter"#) -}
c4b7c89a6bcd0c21f2097e0bb7c93686
  $fFromJSONFilter_$cparseJSON ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         Language.PureScript.Ide.Filter.Filter
  {- Arity: 1,
     Unfolding: (Data.Aeson.Types.FromJSON.withObject
                   @ Language.PureScript.Ide.Filter.Filter
                   Language.PureScript.Ide.Filter.$fFromJSONFilter5
                   Language.PureScript.Ide.Filter.$fFromJSONFilter4) -}
c4b7c89a6bcd0c21f2097e0bb7c93686
  $fFromJSONFilter_$cparseJSONList ::
    Data.Aeson.Types.Internal.Value
    -> Data.Aeson.Types.Internal.Parser
         [Language.PureScript.Ide.Filter.Filter]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Data.Aeson.Types.Internal.Value) ->
                 case ds of wild {
                   DEFAULT
                   -> let {
                        msg1 :: GHC.Base.String
                        = GHC.CString.unpackAppendCString#
                            Language.PureScript.Ide.Filter.$fFromJSONFilter3
                            (GHC.CString.unpackAppendCString#
                               Language.PureScript.Ide.Filter.$fFromJSONFilter2
                               (GHC.CString.unpackAppendCString#
                                  Language.PureScript.Ide.Filter.$fFromJSONFilter1
                                  (case wild of wild1 {
                                     Data.Aeson.Types.Internal.Object ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList10
                                     Data.Aeson.Types.Internal.String ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList8
                                     Data.Aeson.Types.Internal.Number ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList6
                                     Data.Aeson.Types.Internal.Bool ds1
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList4
                                     Data.Aeson.Types.Internal.Null
                                     -> Data.Aeson.Types.FromJSON.$dmliftParseJSONList1 })))
                      } in
                      (\ @ f4 :: * -> *
                         @ r
                         (path :: Data.Aeson.Types.Internal.JSONPath)
                         (kf :: Data.Aeson.Types.Internal.Failure f4 r)
                         (_ks :: Data.Aeson.Types.Internal.Success
                                   [Language.PureScript.Ide.Filter.Filter] f4 r) ->
                       kf
                         (GHC.List.reverse @ Data.Aeson.Types.Internal.JSONPathElement path)
                         msg1)
                        `cast`
                      (Sym (Data.Aeson.Types.Internal.N:Parser[0]
                                <[Language.PureScript.Ide.Filter.Filter]>_R))
                   Data.Aeson.Types.Internal.Array a2
                   -> case a2 of wild1 { Data.Vector.Vector dt dt1 dt2 ->
                      letrec {
                        $wgo :: GHC.Prim.Int# -> [Data.Aeson.Types.Internal.Value]
                          {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                        = \ (ww :: GHC.Prim.Int#) ->
                          case GHC.Prim.>=# ww dt1 of lwild {
                            DEFAULT
                            -> case GHC.Prim.indexArray#
                                      @ Data.Aeson.Types.Internal.Value
                                      dt2
                                      (GHC.Prim.+# dt ww) of ds3 { Unit# ipv ->
                               GHC.Types.:
                                 @ Data.Aeson.Types.Internal.Value
                                 ipv
                                 ($wgo (GHC.Prim.+# ww 1#)) }
                            1# -> GHC.Types.[] @ Data.Aeson.Types.Internal.Value }
                      } in
                      Language.PureScript.Ide.Filter.$fFromJSONFilter_go
                        0#
                        ($wgo 0#) } }) -}
c4b7c89a6bcd0c21f2097e0bb7c93686
  $fFromJSONFilter_go ::
    GHC.Prim.Int#
    -> [Data.Aeson.Types.Internal.Value]
    -> Data.Aeson.Types.Internal.Parser
         [Language.PureScript.Ide.Filter.Filter]
  {- Arity: 2, Strictness: <L,U><S,1*U> -}
c4b7c89a6bcd0c21f2097e0bb7c93686
  $fMonoidFilter ::
    GHC.Base.Monoid Language.PureScript.Ide.Filter.Filter
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Filter.Filter
                  Language.PureScript.Ide.Filter.$fSemigroupFilter
                  (GHC.Base.id @ [Language.PureScript.Ide.Filter.Module])
                    `cast`
                  (Sym (Data.Semigroup.Internal.N:Endo[0]
                            <[Language.PureScript.Ide.Filter.Module]>_R) ; Sym (Language.PureScript.Ide.Filter.N:Filter[0]))
                  (GHC.Base..
                     @ [Language.PureScript.Ide.Filter.Module]
                     @ [Language.PureScript.Ide.Filter.Module]
                     @ [Language.PureScript.Ide.Filter.Module])
                    `cast`
                  ((Sym (Data.Semigroup.Internal.N:Endo[0]
                             <[Language.PureScript.Ide.Filter.Module]>_R) ; Sym (Language.PureScript.Ide.Filter.N:Filter[0]))
                   ->_R (Sym (Data.Semigroup.Internal.N:Endo[0]
                                  <[Language.PureScript.Ide.Filter.Module]>_R) ; Sym (Language.PureScript.Ide.Filter.N:Filter[0]))
                   ->_R Sym (Data.Semigroup.Internal.N:Endo[0]
                                 <[Language.PureScript.Ide.Filter.Module]>_R) ; Sym (Language.PureScript.Ide.Filter.N:Filter[0]))
                  (Data.Semigroup.Internal.$fMonoidEndo1
                     @ [Language.PureScript.Ide.Filter.Module])
                    `cast`
                  (([Sym (Language.PureScript.Ide.Filter.N:Filter[0])])_R
                   ->_R Sym (Data.Semigroup.Internal.N:Endo[0]
                                 <[Language.PureScript.Ide.Filter.Module]>_R) ; Sym (Language.PureScript.Ide.Filter.N:Filter[0])) -}
c4b7c89a6bcd0c21f2097e0bb7c93686
  $fSemigroupFilter ::
    GHC.Base.Semigroup Language.PureScript.Ide.Filter.Filter
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Language.PureScript.Ide.Filter.Filter
                  (GHC.Base..
                     @ [Language.PureScript.Ide.Filter.Module]
                     @ [Language.PureScript.Ide.Filter.Module]
                     @ [Language.PureScript.Ide.Filter.Module])
                    `cast`
                  ((Sym (Data.Semigroup.Internal.N:Endo[0]
                             <[Language.PureScript.Ide.Filter.Module]>_R) ; Sym (Language.PureScript.Ide.Filter.N:Filter[0]))
                   ->_R (Sym (Data.Semigroup.Internal.N:Endo[0]
                                  <[Language.PureScript.Ide.Filter.Module]>_R) ; Sym (Language.PureScript.Ide.Filter.N:Filter[0]))
                   ->_R Sym (Data.Semigroup.Internal.N:Endo[0]
                                 <[Language.PureScript.Ide.Filter.Module]>_R) ; Sym (Language.PureScript.Ide.Filter.N:Filter[0]))
                  (Data.Semigroup.Internal.$fSemigroupEndo_$csconcat
                     @ [Language.PureScript.Ide.Filter.Module])
                    `cast`
                  ((GHC.Base.NonEmpty
                      (Sym (Language.PureScript.Ide.Filter.N:Filter[0])))_R
                   ->_R Sym (Language.PureScript.Ide.Filter.N:Filter[0]))
                  (Data.Semigroup.Internal.$fSemigroupEndo_$cstimes
                     @ [Language.PureScript.Ide.Filter.Module])
                    `cast`
                  (forall (b :: <*>_N).
                   <GHC.Real.Integral b>_R
                   ->_R <b>_R
                   ->_R Sym (Language.PureScript.Ide.Filter.N:Filter[0])
                   ->_R Sym (Language.PureScript.Ide.Filter.N:Filter[0])) -}
720c68b57cb869a578f4fdc98eea82b5
  $tc'Filter :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5358425920680940179##
                   7254701748942130151##
                   Language.PureScript.Ide.Filter.$trModule
                   Language.PureScript.Ide.Filter.$tc'Filter2
                   0#
                   Language.PureScript.Ide.Filter.$tc'Filter1) -}
d60f16d2d701a644b42ca9b6f6098efa
  $tc'Filter1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
4c0c639736f442dd2ead0a35db046e14
  $tc'Filter2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Filter.$tc'Filter3) -}
9975fa5aafc25187013937c3eb6c5957
  $tc'Filter3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Filter"#) -}
59a40546075357bca93b1e9897bdf016
  $tcFilter :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8406164570087738891##
                   11673924894556361716##
                   Language.PureScript.Ide.Filter.$trModule
                   Language.PureScript.Ide.Filter.$tcFilter1
                   0#
                   GHC.Types.krep$*) -}
b2542acdc34e97188e20a99b3dd9931a
  $tcFilter1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Filter.$tcFilter2) -}
4d4455cf581dc63ca37e1c4dad3e9dbc
  $tcFilter2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Filter"#) -}
bf68e82b209ed783cdfdf7c01c2df694
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Language.PureScript.Ide.Filter.$trModule3
                   Language.PureScript.Ide.Filter.$trModule1) -}
ade365d8b8e3a0c10178459c7a7a9176
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Filter.$trModule2) -}
653d216aefcabbf4d363a0018ad49840
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Language.PureScript.Ide.Filter"#) -}
ec80a1cc4976c77a42f8a40e442d1d00
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   Language.PureScript.Ide.Filter.$trModule4) -}
35e20a915d842fbd15e514ec2c812fab
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("purescript-0.12.2-1jEEKvd7Qrz8R80uEP8O5F"#) -}
91abc546178a3e65aac1cc8e3914c261
  $wprefixFilter ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Language.PureScript.Ide.Filter.Filter
  {- Arity: 3, Strictness: <L,U><S,U><S,U>, Inline: [0] -}
c4b7c89a6bcd0c21f2097e0bb7c93686
  newtype Filter
    = Filter (Data.Semigroup.Internal.Endo
                [Language.PureScript.Ide.Filter.Module])
2b524750fd6bfbf9c29cd39f8c4ccc78
  type Module =
    (Language.PureScript.Names.ModuleName,
     [Language.PureScript.Ide.Types.IdeDeclarationAnn])
0633c3ced31d3cf568d6ab54fd3fa291
  applyFilters ::
    [Language.PureScript.Ide.Filter.Filter]
    -> [Language.PureScript.Ide.Filter.Module]
    -> [Language.PureScript.Ide.Filter.Module]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, True)
                (\ (x :: [Language.PureScript.Ide.Filter.Filter]) ->
                 Language.PureScript.Ide.Filter.applyFilters1 x) -}
94bd246b9099706029e950cdacac50ae
  applyFilters1 ::
    [Language.PureScript.Ide.Filter.Filter]
    -> [Language.PureScript.Ide.Filter.Module]
    -> [Language.PureScript.Ide.Filter.Module]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U> -}
ec44d3d422e34efce180d781ba984488
  declarationTypeFilter ::
    [Language.PureScript.Ide.Filter.Declaration.IdeDeclaration]
    -> Language.PureScript.Ide.Filter.Filter
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Ide.Filter.declarationTypeFilter1
                  `cast`
                (<[Language.PureScript.Ide.Filter.Declaration.IdeDeclaration]>_R
                 ->_R Sym (Data.Semigroup.Internal.N:Endo[0]
                               <[Language.PureScript.Ide.Filter.Module]>_R) ; Sym (Language.PureScript.Ide.Filter.N:Filter[0])) -}
92e1be51af85b07ba15eff7db7919f43
  declarationTypeFilter1 ::
    [Language.PureScript.Ide.Filter.Declaration.IdeDeclaration]
    -> [Language.PureScript.Ide.Filter.Module]
    -> [Language.PureScript.Ide.Filter.Module]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: [Language.PureScript.Ide.Filter.Declaration.IdeDeclaration])
                   (eta :: [Language.PureScript.Ide.Filter.Module]) ->
                 case ds of wild {
                   [] -> eta
                   : ipv ipv1
                   -> Language.PureScript.Ide.Filter.filterModuleDecls
                        (\ (decl :: Language.PureScript.Ide.Types.IdeDeclaration) ->
                         GHC.List.elem
                           @ Language.PureScript.Ide.Filter.Declaration.IdeDeclaration
                           Language.PureScript.Ide.Filter.Declaration.$fEqIdeDeclaration
                           (case decl of wild1 {
                              Language.PureScript.Ide.Types.IdeDeclValue ds1
                              -> Language.PureScript.Ide.Filter.Declaration.Value
                                   `cast`
                                 (Sym (Language.PureScript.Ide.Filter.Declaration.N:IdeDeclaration[0]))
                              Language.PureScript.Ide.Types.IdeDeclType ds1
                              -> Language.PureScript.Ide.Filter.Declaration.Type
                                   `cast`
                                 (Sym (Language.PureScript.Ide.Filter.Declaration.N:IdeDeclaration[0]))
                              Language.PureScript.Ide.Types.IdeDeclTypeSynonym ds1
                              -> Language.PureScript.Ide.Filter.Declaration.Synonym
                                   `cast`
                                 (Sym (Language.PureScript.Ide.Filter.Declaration.N:IdeDeclaration[0]))
                              Language.PureScript.Ide.Types.IdeDeclDataConstructor ds1
                              -> Language.PureScript.Ide.Filter.Declaration.DataConstructor
                                   `cast`
                                 (Sym (Language.PureScript.Ide.Filter.Declaration.N:IdeDeclaration[0]))
                              Language.PureScript.Ide.Types.IdeDeclTypeClass ds1
                              -> Language.PureScript.Ide.Filter.Declaration.TypeClass
                                   `cast`
                                 (Sym (Language.PureScript.Ide.Filter.Declaration.N:IdeDeclaration[0]))
                              Language.PureScript.Ide.Types.IdeDeclValueOperator ds1
                              -> Language.PureScript.Ide.Filter.Declaration.ValueOperator
                                   `cast`
                                 (Sym (Language.PureScript.Ide.Filter.Declaration.N:IdeDeclaration[0]))
                              Language.PureScript.Ide.Types.IdeDeclTypeOperator ds1
                              -> Language.PureScript.Ide.Filter.Declaration.TypeOperator
                                   `cast`
                                 (Sym (Language.PureScript.Ide.Filter.Declaration.N:IdeDeclaration[0]))
                              Language.PureScript.Ide.Types.IdeDeclKind ds1
                              -> Language.PureScript.Ide.Filter.Declaration.Kind
                                   `cast`
                                 (Sym (Language.PureScript.Ide.Filter.Declaration.N:IdeDeclaration[0])) })
                           wild)
                        eta }) -}
43cd7e4cc0fab8e603590d14c4e9231d
  equalityFilter ::
    Data.Text.Internal.Text -> Language.PureScript.Ide.Filter.Filter
  {- Arity: 2, Strictness: <L,U(U,U,U)><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Ide.Filter.equalityFilter_g
                  `cast`
                (<Data.Text.Internal.Text>_R
                 ->_R Sym (Data.Semigroup.Internal.N:Endo[0]
                               <[Language.PureScript.Ide.Filter.Module]>_R) ; Sym (Language.PureScript.Ide.Filter.N:Filter[0])) -}
04954273ada9324837203b5ffda1362a
  equalityFilter_g ::
    Data.Text.Internal.Text
    -> [Language.PureScript.Ide.Filter.Module]
    -> [Language.PureScript.Ide.Filter.Module]
  {- Arity: 2, Strictness: <L,U(U,U,U)><S,1*U>,
     Unfolding: (\ (search :: Data.Text.Internal.Text)
                   (eta :: [Language.PureScript.Ide.Filter.Module]) ->
                 Language.PureScript.Ide.Filter.filterModuleDecls
                   (\ (y :: Language.PureScript.Ide.Types.IdeDeclaration) ->
                    case Language.PureScript.Ide.Util.identifierFromIdeDeclaration
                           y of wild { Data.Text.Internal.Text dt dt1 dt2 ->
                    case search of wild1 { Data.Text.Internal.Text dt3 dt4 dt5 ->
                    case GHC.Prim.==# dt2 dt5 of lwild {
                      DEFAULT -> GHC.Types.False
                      1#
                      -> case {__pkg_ccall text-1.2.3.0 GHC.Prim.ByteArray#
                                                        -> GHC.Prim.Word#
                                                        -> GHC.Prim.ByteArray#
                                                        -> GHC.Prim.Word#
                                                        -> GHC.Prim.Word#
                                                        -> GHC.Prim.State# GHC.Prim.RealWorld
                                                        -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                              GHC.Prim.Int# #)}
                                dt
                                (GHC.Prim.int2Word# dt1)
                                dt3
                                (GHC.Prim.int2Word# dt4)
                                (GHC.Prim.int2Word# dt2)
                                GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                         case GHC.Prim.narrow32Int# ds3 of wild2 {
                           DEFAULT -> GHC.Types.False 0# -> GHC.Types.True } } } } })
                   eta) -}
4bec369dd4de99e001d0225eb871cb49
  filterModuleDecls ::
    (Language.PureScript.Ide.Types.IdeDeclaration -> GHC.Types.Bool)
    -> [Language.PureScript.Ide.Filter.Module]
    -> [Language.PureScript.Ide.Filter.Module]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U>,
     Unfolding: (\ (predicate :: Language.PureScript.Ide.Types.IdeDeclaration
                                 -> GHC.Types.Bool)
                   (eta :: [(Language.PureScript.Names.ModuleName,
                             [Language.PureScript.Ide.Types.IdeDeclarationAnn])]) ->
                 let {
                   lvl37 :: Language.PureScript.Ide.Types.IdeDeclarationAnn
                            -> GHC.Types.Bool
                     {- Arity: 1, Strictness: <L,1*U(A,1*U)>,
                        Unfolding: InlineRule (1, True, False)
                                   (\ (x :: Language.PureScript.Ide.Types.IdeDeclarationAnn) ->
                                    predicate (Language.PureScript.Ide.Util.discardAnn x)) -}
                   = \ (x :: Language.PureScript.Ide.Types.IdeDeclarationAnn) ->
                     predicate (Language.PureScript.Ide.Util.discardAnn x)
                 } in
                 letrec {
                   go1 :: [(Language.PureScript.Names.ModuleName,
                            [Language.PureScript.Ide.Types.IdeDeclarationAnn])]
                          -> [(Language.PureScript.Names.ModuleName,
                               [Language.PureScript.Ide.Types.IdeDeclarationAnn])]
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [(Language.PureScript.Names.ModuleName,
                                [Language.PureScript.Ide.Types.IdeDeclarationAnn])]) ->
                     case ds of wild {
                       []
                       -> GHC.Types.[]
                            @ (Language.PureScript.Names.ModuleName,
                               [Language.PureScript.Ide.Types.IdeDeclarationAnn])
                       : y ys
                       -> case y of wild1 { (,) moduleIdent decls ->
                          case GHC.List.filter
                                 @ Language.PureScript.Ide.Types.IdeDeclarationAnn
                                 lvl37
                                 decls of wild2 {
                            [] -> go1 ys
                            : ds1 ds2
                            -> GHC.Types.:
                                 @ (Language.PureScript.Names.ModuleName,
                                    [Language.PureScript.Ide.Types.IdeDeclarationAnn])
                                 (moduleIdent, wild2)
                                 (go1 ys) } } }
                 } in
                 go1 eta) -}
78fe2a54e0b82cd09c8d732f9a95e0fb
  moduleFilter ::
    [Language.PureScript.Names.ModuleName]
    -> Language.PureScript.Ide.Filter.Filter
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Ide.Filter.moduleFilter'
                  `cast`
                (<[Language.PureScript.Names.ModuleName]>_R
                 ->_R Sym (Data.Semigroup.Internal.N:Endo[0]
                               <[Language.PureScript.Ide.Filter.Module]>_R) ; Sym (Language.PureScript.Ide.Filter.N:Filter[0])) -}
a1ad071ed11730bf55abf0636f9b842a
  moduleFilter' ::
    [Language.PureScript.Names.ModuleName]
    -> [Language.PureScript.Ide.Filter.Module]
    -> [Language.PureScript.Ide.Filter.Module]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (moduleIdents :: [Language.PureScript.Names.ModuleName])
                   (eta :: [(Language.PureScript.Names.ModuleName,
                             [Language.PureScript.Ide.Types.IdeDeclarationAnn])]) ->
                 GHC.Base.build
                   @ (Language.PureScript.Names.ModuleName,
                      [Language.PureScript.Ide.Types.IdeDeclarationAnn])
                   (\ @ b
                      (c :: (Language.PureScript.Names.ModuleName,
                             [Language.PureScript.Ide.Types.IdeDeclarationAnn])
                            -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ (Language.PureScript.Names.ModuleName,
                         [Language.PureScript.Ide.Types.IdeDeclarationAnn])
                      @ b
                      (GHC.List.filterFB
                         @ (Language.PureScript.Names.ModuleName,
                            [Language.PureScript.Ide.Types.IdeDeclarationAnn])
                         @ b
                         c
                         (\ (x :: (Language.PureScript.Names.ModuleName,
                                   [Language.PureScript.Ide.Types.IdeDeclarationAnn])) ->
                          GHC.List.elem
                            @ Language.PureScript.Names.ModuleName
                            Language.PureScript.Names.$fEqModuleName
                            (case x of wild { (,) x1 ds1 -> x1 })
                            moduleIdents))
                      n
                      eta)) -}
43975cd2a2e2318ed2cc3935353e60a2
  namespaceFilter ::
    GHC.Base.NonEmpty Language.PureScript.Ide.Types.IdeNamespace
    -> Language.PureScript.Ide.Filter.Filter
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U(U,U)><S,1*U>,
     Unfolding: InlineRule (0, True, True)
                Language.PureScript.Ide.Filter.namespaceFilter1
                  `cast`
                (<GHC.Base.NonEmpty Language.PureScript.Ide.Types.IdeNamespace>_R
                 ->_R Sym (Data.Semigroup.Internal.N:Endo[0]
                               <[Language.PureScript.Ide.Filter.Module]>_R) ; Sym (Language.PureScript.Ide.Filter.N:Filter[0])) -}
c73c9b88c8b527f865c7abba34310f0e
  namespaceFilter1 ::
    GHC.Base.NonEmpty Language.PureScript.Ide.Types.IdeNamespace
    -> [Language.PureScript.Ide.Filter.Module]
    -> [Language.PureScript.Ide.Filter.Module]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U(U,U)><S,1*U> -}
1abea2dc3470b6ead5637e67393512ef
  prefixFilter ::
    Data.Text.Internal.Text -> Language.PureScript.Ide.Filter.Filter
  {- Arity: 1, Strictness: <S(SSS),1*U(U,U,U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Data.Text.Internal.Text) ->
                 case w of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Language.PureScript.Ide.Filter.$wprefixFilter ww1 ww2 ww3 }) -}
instance Data.Aeson.Types.FromJSON.FromJSON [Language.PureScript.Ide.Filter.Filter]
  = Language.PureScript.Ide.Filter.$fFromJSONFilter
instance GHC.Base.Monoid [Language.PureScript.Ide.Filter.Filter]
  = Language.PureScript.Ide.Filter.$fMonoidFilter
instance GHC.Base.Semigroup [Language.PureScript.Ide.Filter.Filter]
  = Language.PureScript.Ide.Filter.$fSemigroupFilter
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

